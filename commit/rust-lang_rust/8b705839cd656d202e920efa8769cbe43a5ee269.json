{"sha": "8b705839cd656d202e920efa8769cbe43a5ee269", "node_id": "C_kwDOAAsO6NoAKDhiNzA1ODM5Y2Q2NTZkMjAyZTkyMGVmYTg3NjljYmU0M2E1ZWUyNjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-26T19:57:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-26T19:57:51Z"}, "message": "Auto merge of #102324 - matthiaskrgr:rollup-6l70oz3, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #101875 (Allow more `!Copy` impls)\n - #101996 (Don't duplicate region names for late-bound regions in print of Binder)\n - #102181 (Add regression test)\n - #102273 (Allow `~const` bounds on non-const functions)\n - #102286 (Recover some items that expect braces and don't take semicolons)\n\nFailed merges:\n\n - #102314 (Add a label to struct/enum/union ident name)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4137d5bdc7d6c4a5fd42c00083775e2b9b123d58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4137d5bdc7d6c4a5fd42c00083775e2b9b123d58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b705839cd656d202e920efa8769cbe43a5ee269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b705839cd656d202e920efa8769cbe43a5ee269", "html_url": "https://github.com/rust-lang/rust/commit/8b705839cd656d202e920efa8769cbe43a5ee269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b705839cd656d202e920efa8769cbe43a5ee269/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d1f1426604b7d79138cdfbb31f82f7f44756fba", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d1f1426604b7d79138cdfbb31f82f7f44756fba", "html_url": "https://github.com/rust-lang/rust/commit/1d1f1426604b7d79138cdfbb31f82f7f44756fba"}, {"sha": "6f5e8c2ed4283035164b84bef627fafb65d4c853", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5e8c2ed4283035164b84bef627fafb65d4c853", "html_url": "https://github.com/rust-lang/rust/commit/6f5e8c2ed4283035164b84bef627fafb65d4c853"}], "stats": {"total": 853, "additions": 544, "deletions": 309}, "files": [{"sha": "ecf74c7602027e370e2147f7bf6ef6ede56100ff", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1415,7 +1415,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     if !self.is_tilde_const_allowed {\n                         self.err_handler()\n                             .struct_span_err(bound.span(), \"`~const` is not allowed here\")\n-                            .note(\"only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\")\n+                            .note(\"only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\")\n                             .emit();\n                     }\n                 }\n@@ -1523,9 +1523,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             });\n         }\n \n-        let tilde_const_allowed =\n-            matches!(fk.header(), Some(FnHeader { constness: Const::Yes(_), .. }))\n-                || matches!(fk.ctxt(), Some(FnCtxt::Assoc(_)));\n+        let tilde_const_allowed = matches!(fk.header(), Some(FnHeader { .. }))\n+            || matches!(fk.ctxt(), Some(FnCtxt::Assoc(_)));\n \n         self.with_tilde_const(tilde_const_allowed, |this| visit::walk_fn(this, fk));\n     }"}, {"sha": "07dd03e6e504e57bcdc8a1c9d1a5f6eaf228effc", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -158,3 +158,6 @@ parser_remove_let = expected pattern, found `let`\n \n parser_use_eq_instead = unexpected `==`\n     .suggestion = try using `=` instead\n+\n+parser_use_empty_block_not_semi = expected { \"`{}`\" }, found `;`\n+    .suggestion = try using { \"`{}`\" } instead"}, {"sha": "70efa748846ab9c1abd8027d39d1f43aeca092a4", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 54, "deletions": 27, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1562,7 +1562,9 @@ pub struct FmtPrinterData<'a, 'tcx> {\n     in_value: bool,\n     pub print_alloc_ids: bool,\n \n+    // set of all named (non-anonymous) region names\n     used_region_names: FxHashSet<Symbol>,\n+\n     region_index: usize,\n     binder_depth: usize,\n     printed_type_count: usize,\n@@ -2118,23 +2120,31 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n     where\n         T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<'tcx>,\n     {\n-        fn name_by_region_index(index: usize) -> Symbol {\n-            match index {\n-                0 => Symbol::intern(\"'r\"),\n-                1 => Symbol::intern(\"'s\"),\n-                i => Symbol::intern(&format!(\"'t{}\", i - 2)),\n+        fn name_by_region_index(\n+            index: usize,\n+            available_names: &mut Vec<Symbol>,\n+            num_available: usize,\n+        ) -> Symbol {\n+            if let Some(name) = available_names.pop() {\n+                name\n+            } else {\n+                Symbol::intern(&format!(\"'z{}\", index - num_available))\n             }\n         }\n \n+        debug!(\"name_all_regions\");\n+\n         // Replace any anonymous late-bound regions with named\n         // variants, using new unique identifiers, so that we can\n         // clearly differentiate between named and unnamed regions in\n         // the output. We'll probably want to tweak this over time to\n         // decide just how much information to give.\n         if self.binder_depth == 0 {\n-            self.prepare_late_bound_region_info(value);\n+            self.prepare_region_info(value);\n         }\n \n+        debug!(\"self.used_region_names: {:?}\", &self.used_region_names);\n+\n         let mut empty = true;\n         let mut start_or_continue = |cx: &mut Self, start: &str, cont: &str| {\n             let w = if empty {\n@@ -2151,13 +2161,24 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n \n         define_scoped_cx!(self);\n \n+        let possible_names =\n+            ('a'..='z').rev().map(|s| Symbol::intern(&format!(\"'{s}\"))).collect::<Vec<_>>();\n+\n+        let mut available_names = possible_names\n+            .into_iter()\n+            .filter(|name| !self.used_region_names.contains(&name))\n+            .collect::<Vec<_>>();\n+        debug!(?available_names);\n+        let num_available = available_names.len();\n+\n         let mut region_index = self.region_index;\n-        let mut next_name = |this: &Self| loop {\n-            let name = name_by_region_index(region_index);\n+        let mut next_name = |this: &Self| {\n+            let name = name_by_region_index(region_index, &mut available_names, num_available);\n+            debug!(?name);\n             region_index += 1;\n-            if !this.used_region_names.contains(&name) {\n-                break name;\n-            }\n+            assert!(!this.used_region_names.contains(&name));\n+\n+            name\n         };\n \n         // If we want to print verbosely, then print *all* binders, even if they\n@@ -2178,6 +2199,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                         ty::BrAnon(_) | ty::BrEnv => {\n                             start_or_continue(&mut self, \"for<\", \", \");\n                             let name = next_name(&self);\n+                            debug!(?name);\n                             do_continue(&mut self, name);\n                             ty::BrNamed(CRATE_DEF_ID.to_def_id(), name)\n                         }\n@@ -2271,29 +2293,37 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n         Ok(inner)\n     }\n \n-    fn prepare_late_bound_region_info<T>(&mut self, value: &ty::Binder<'tcx, T>)\n+    fn prepare_region_info<T>(&mut self, value: &ty::Binder<'tcx, T>)\n     where\n         T: TypeVisitable<'tcx>,\n     {\n-        struct LateBoundRegionNameCollector<'a, 'tcx> {\n-            used_region_names: &'a mut FxHashSet<Symbol>,\n+        struct RegionNameCollector<'tcx> {\n+            used_region_names: FxHashSet<Symbol>,\n             type_collector: SsoHashSet<Ty<'tcx>>,\n         }\n \n-        impl<'tcx> ty::visit::TypeVisitor<'tcx> for LateBoundRegionNameCollector<'_, 'tcx> {\n+        impl<'tcx> RegionNameCollector<'tcx> {\n+            fn new() -> Self {\n+                RegionNameCollector {\n+                    used_region_names: Default::default(),\n+                    type_collector: SsoHashSet::new(),\n+                }\n+            }\n+        }\n+\n+        impl<'tcx> ty::visit::TypeVisitor<'tcx> for RegionNameCollector<'tcx> {\n             type BreakTy = ();\n \n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 trace!(\"address: {:p}\", r.0.0);\n-                if let ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrNamed(_, name), .. }) = *r {\n-                    self.used_region_names.insert(name);\n-                } else if let ty::RePlaceholder(ty::PlaceholderRegion {\n-                    name: ty::BrNamed(_, name),\n-                    ..\n-                }) = *r\n-                {\n+\n+                // Collect all named lifetimes. These allow us to prevent duplication\n+                // of already existing lifetime names when introducing names for\n+                // anonymous late-bound regions.\n+                if let Some(name) = r.get_name() {\n                     self.used_region_names.insert(name);\n                 }\n+\n                 r.super_visit_with(self)\n             }\n \n@@ -2309,12 +2339,9 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             }\n         }\n \n-        self.used_region_names.clear();\n-        let mut collector = LateBoundRegionNameCollector {\n-            used_region_names: &mut self.used_region_names,\n-            type_collector: SsoHashSet::new(),\n-        };\n+        let mut collector = RegionNameCollector::new();\n         value.visit_with(&mut collector);\n+        self.used_region_names = collector.used_region_names;\n         self.region_index = 0;\n     }\n }"}, {"sha": "f4f4bb37c1acc288aaf2512f6c592075790dffbc", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -85,6 +85,17 @@ impl BoundRegionKind {\n             _ => false,\n         }\n     }\n+\n+    pub fn get_name(&self) -> Option<Symbol> {\n+        if self.is_named() {\n+            match *self {\n+                BoundRegionKind::BrNamed(_, name) => return Some(name),\n+                _ => unreachable!(),\n+            }\n+        }\n+\n+        None\n+    }\n }\n \n pub trait Article {\n@@ -1445,6 +1456,23 @@ impl<'tcx> Region<'tcx> {\n         *self.0.0\n     }\n \n+    pub fn get_name(self) -> Option<Symbol> {\n+        if self.has_name() {\n+            let name = match *self {\n+                ty::ReEarlyBound(ebr) => Some(ebr.name),\n+                ty::ReLateBound(_, br) => br.kind.get_name(),\n+                ty::ReFree(fr) => fr.bound_region.get_name(),\n+                ty::ReStatic => Some(kw::StaticLifetime),\n+                ty::RePlaceholder(placeholder) => placeholder.name.get_name(),\n+                _ => None,\n+            };\n+\n+            return name;\n+        }\n+\n+        None\n+    }\n+\n     /// Is this region named by the user?\n     pub fn has_name(self) -> bool {\n         match *self {"}, {"sha": "ccdffb8ce07b98300d0a18cb7e90dc5d0db7e4e0", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -745,6 +745,14 @@ pub(crate) struct UseEqInstead {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parser::use_empty_block_not_semi)]\n+pub(crate) struct UseEmptyBlockNotSemi {\n+    #[primary_span]\n+    #[suggestion_hidden(applicability = \"machine-applicable\", code = \"{{}}\")]\n+    pub span: Span,\n+}\n+\n // SnapshotParser is used to create a snapshot of the parser\n // without causing duplicate errors being emitted when the `Parser`\n // is dropped."}, {"sha": "34f25bd0716ab3fbc23d4ef33a4e9c211879c571", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,4 +1,4 @@\n-use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};\n+use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error, UseEmptyBlockNotSemi};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{AttrWrapper, FollowedByType, ForceCollect, Parser, PathStyle, TrailingToken};\n \n@@ -664,6 +664,14 @@ impl<'a> Parser<'a> {\n         mut parse_item: impl FnMut(&mut Parser<'a>) -> PResult<'a, Option<Option<T>>>,\n     ) -> PResult<'a, Vec<T>> {\n         let open_brace_span = self.token.span;\n+\n+        // Recover `impl Ty;` instead of `impl Ty {}`\n+        if self.token == TokenKind::Semi {\n+            self.sess.emit_err(UseEmptyBlockNotSemi { span: self.token.span });\n+            self.bump();\n+            return Ok(vec![]);\n+        }\n+\n         self.expect(&token::OpenDelim(Delimiter::Brace))?;\n         attrs.extend(self.parse_inner_attributes()?);\n \n@@ -1305,12 +1313,19 @@ impl<'a> Parser<'a> {\n         let mut generics = self.parse_generics()?;\n         generics.where_clause = self.parse_where_clause()?;\n \n-        let (variants, _) = self\n-            .parse_delim_comma_seq(Delimiter::Brace, |p| p.parse_enum_variant())\n-            .map_err(|e| {\n-                self.recover_stmt();\n-                e\n-            })?;\n+        // Possibly recover `enum Foo;` instead of `enum Foo {}`\n+        let (variants, _) = if self.token == TokenKind::Semi {\n+            self.sess.emit_err(UseEmptyBlockNotSemi { span: self.token.span });\n+            self.bump();\n+            (vec![], false)\n+        } else {\n+            self.parse_delim_comma_seq(Delimiter::Brace, |p| p.parse_enum_variant()).map_err(\n+                |e| {\n+                    self.recover_stmt();\n+                    e\n+                },\n+            )?\n+        };\n \n         let enum_definition = EnumDef { variants: variants.into_iter().flatten().collect() };\n         Ok((id, ItemKind::Enum(enum_definition, generics)))"}, {"sha": "d4eb826f0b4d39a4f108f37606ad685503e7be7d", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -70,23 +70,21 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     let self_type = tcx.type_of(impl_did);\n     debug!(\"visit_implementation_of_copy: self_type={:?} (bound)\", self_type);\n \n-    let span = tcx.hir().span(impl_hir_id);\n     let param_env = tcx.param_env(impl_did);\n     assert!(!self_type.has_escaping_bound_vars());\n \n     debug!(\"visit_implementation_of_copy: self_type={:?} (free)\", self_type);\n \n+    let span = match tcx.hir().expect_item(impl_did).kind {\n+        ItemKind::Impl(hir::Impl { polarity: hir::ImplPolarity::Negative(_), .. }) => return,\n+        ItemKind::Impl(impl_) => impl_.self_ty.span,\n+        _ => bug!(\"expected Copy impl item\"),\n+    };\n+\n     let cause = traits::ObligationCause::misc(span, impl_hir_id);\n     match can_type_implement_copy(tcx, param_env, self_type, cause) {\n         Ok(()) => {}\n         Err(CopyImplementationError::InfrigingFields(fields)) => {\n-            let item = tcx.hir().expect_item(impl_did);\n-            let span = if let ItemKind::Impl(hir::Impl { of_trait: Some(ref tr), .. }) = item.kind {\n-                tr.path.span\n-            } else {\n-                span\n-            };\n-\n             let mut err = struct_span_err!(\n                 tcx.sess,\n                 span,\n@@ -166,10 +164,6 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n             err.emit();\n         }\n         Err(CopyImplementationError::NotAnAdt) => {\n-            let item = tcx.hir().expect_item(impl_did);\n-            let span =\n-                if let ItemKind::Impl(ref impl_) = item.kind { impl_.self_ty.span } else { span };\n-\n             tcx.sess.emit_err(CopyImplOnNonAdt { span });\n         }\n         Err(CopyImplementationError::HasDestructor) => {"}, {"sha": "6f01553eef6da4d7ef9550dbab6f5440d11b10e9", "filename": "src/test/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -24,7 +24,7 @@\n           _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n                                            // mir::Constant\n                                            // + span: $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-                                           // + literal: Const { ty: for<'r> fn(&'r T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -37,7 +37,7 @@\n -         _5 = <u64 as Clone>::clone(move _6) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n -                                          // mir::Constant\n -                                          // + span: $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n--                                          // + literal: Const { ty: for<'r> fn(&'r u64) -> u64 {<u64 as Clone>::clone}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: for<'a> fn(&'a u64) -> u64 {<u64 as Clone>::clone}, val: Value(<ZST>) }\n +         _6 = _7;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n +         _5 = (*_6);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n +         goto -> bb2;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n@@ -53,7 +53,7 @@\n -         _8 = <[f32; 3] as Clone>::clone(move _9) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n -                                          // mir::Constant\n -                                          // + span: $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n--                                          // + literal: Const { ty: for<'r> fn(&'r [f32; 3]) -> [f32; 3] {<[f32; 3] as Clone>::clone}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: for<'a> fn(&'a [f32; 3]) -> [f32; 3] {<[f32; 3] as Clone>::clone}, val: Value(<ZST>) }\n +         _9 = _10;                        // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n +         _8 = (*_9);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n +         goto -> bb3;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16"}, {"sha": "f8a7c687e124ae9d21cd354c9de637e4bd528911", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -33,7 +33,7 @@\n           _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:9:36: 9:42\n-                                           // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'a> fn(&'a [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "e938ca28af5d68e2519ca049dcb68ed09c476987", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -35,7 +35,7 @@\n           _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:13:47: 13:53\n-                                           // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'a> fn(&'a [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "995611f0e966416fdf9a7b938d2036e27e1c7dc0", "filename": "src/test/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -20,7 +20,7 @@\n           _2 = core::str::<impl str>::as_bytes(move _3) -> bb1; // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n                                            // mir::Constant\n                                            // + span: $DIR/deduplicate_blocks.rs:5:13: 5:21\n-                                           // + literal: Const { ty: for<'r> fn(&'r str) -> &'r [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "713d56c383613aad9ab9b9072b75f25252f762fc", "filename": "src/test/mir-opt/derefer_complex_case.main.Derefer.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -56,7 +56,7 @@\n           _7 = <std::slice::Iter<'_, i32> as Iterator>::next(move _8) -> bb3; // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n-                                           // + literal: Const { ty: for<'r> fn(&'r mut std::slice::Iter<'_, i32>) -> Option<<std::slice::Iter<'_, i32> as Iterator>::Item> {<std::slice::Iter<'_, i32> as Iterator>::next}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, i32>) -> Option<<std::slice::Iter<'_, i32> as Iterator>::Item> {<std::slice::Iter<'_, i32> as Iterator>::next}, val: Value(<ZST>) }\n       }\n   \n       bb3: {"}, {"sha": "80b09ed5f8d35f0ad2f04879d8307cef47169721", "filename": "src/test/mir-opt/dest-prop/simple.nrvo.DestinationPropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,12 +1,12 @@\n - // MIR for `nrvo` before DestinationPropagation\n + // MIR for `nrvo` after DestinationPropagation\n   \n-  fn nrvo(_1: for<'r> fn(&'r mut [u8; 1024])) -> [u8; 1024] {\n+  fn nrvo(_1: for<'a> fn(&'a mut [u8; 1024])) -> [u8; 1024] {\n       debug init => _1;                    // in scope 0 at $DIR/simple.rs:+0:9: +0:13\n       let mut _0: [u8; 1024];              // return place in scope 0 at $DIR/simple.rs:+0:39: +0:49\n       let mut _2: [u8; 1024];              // in scope 0 at $DIR/simple.rs:+1:9: +1:16\n       let _3: ();                          // in scope 0 at $DIR/simple.rs:+2:5: +2:19\n-      let mut _4: for<'r> fn(&'r mut [u8; 1024]); // in scope 0 at $DIR/simple.rs:+2:5: +2:9\n+      let mut _4: for<'a> fn(&'a mut [u8; 1024]); // in scope 0 at $DIR/simple.rs:+2:5: +2:9\n       let mut _5: &mut [u8; 1024];         // in scope 0 at $DIR/simple.rs:+2:10: +2:18\n       let mut _6: &mut [u8; 1024];         // in scope 0 at $DIR/simple.rs:+2:10: +2:18\n       scope 1 {"}, {"sha": "e83a358b7258bd221f32dcdfb9b198dea99b6375", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -41,7 +41,7 @@\n           _4 = Formatter::<'_>::sign_plus(move _5) -> bb1; // scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:15:26: 15:35\n-                                           // + literal: Const { ty: for<'r> fn(&'r Formatter<'_>) -> bool {Formatter::<'_>::sign_plus}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'a> fn(&'a Formatter<'_>) -> bool {Formatter::<'_>::sign_plus}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -69,7 +69,7 @@\n           _7 = Formatter::<'_>::precision(move _8) -> bb5; // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:24:34: 24:43\n-                                           // + literal: Const { ty: for<'r> fn(&'r Formatter<'_>) -> Option<usize> {Formatter::<'_>::precision}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'a> fn(&'a Formatter<'_>) -> Option<usize> {Formatter::<'_>::precision}, val: Value(<ZST>) }\n       }\n   \n       bb5: {\n@@ -100,7 +100,7 @@\n           _0 = float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb7; // scope 3 at $DIR/funky_arms.rs:+15:9: +15:87\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:26:9: 26:42\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut Formatter<'s>, &'t0 T, Sign, u32, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Formatter<'b>, &'c T, Sign, u32, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb7: {\n@@ -125,7 +125,7 @@\n           _0 = float_to_exponential_common_shortest::<T>(move _18, move _19, move _20, move _21) -> bb9; // scope 2 at $DIR/funky_arms.rs:+17:9: +17:68\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:28:9: 28:45\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut Formatter<'s>, &'t0 T, Sign, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Formatter<'b>, &'c T, Sign, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb9: {"}, {"sha": "75ea69a42eb595283c0e7de09384c5286c1068ac", "filename": "src/test/mir-opt/inline/cycle.f.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -17,7 +17,7 @@\n           _2 = <impl Fn() as Fn<()>>::call(move _3, move _4) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/cycle.rs:+1:5: +1:8\n                                            // mir::Constant\n                                            // + span: $DIR/cycle.rs:6:5: 6:6\n-                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "1e95b5b29ff4e0447eeb8e2c3f0a2d7142c1dcb1", "filename": "src/test/mir-opt/inline/dyn_trait.get_query.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -28,7 +28,7 @@\n                                            // mir::Constant\n                                            // + span: $DIR/dyn-trait.rs:33:13: 33:21\n                                            // + user_ty: UserType(0)\n-                                           // + literal: Const { ty: for<'r> fn(&'r T) -> &'r <Q as Query>::C {<Q as Query>::cache::<T>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'a> fn(&'a T) -> &'a <Q as Query>::C {<Q as Query>::cache::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -46,9 +46,9 @@\n +         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(move _7) -> bb2; // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n                                            // mir::Constant\n -                                          // + span: $DIR/dyn-trait.rs:34:5: 34:22\n--                                          // + literal: Const { ty: for<'r> fn(&'r <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: for<'a> fn(&'a <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(<ZST>) }\n +                                          // + span: $DIR/dyn-trait.rs:21:7: 21:20\n-+                                          // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = <Q as Query>::V>) {<dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache}, val: Value(<ZST>) }\n++                                          // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = <Q as Query>::V>) {<dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   \n       bb2: {"}, {"sha": "7421db4d063af9ecd000ddbe22d6c99981cbdbe6", "filename": "src/test/mir-opt/inline/dyn_trait.mk_cycle.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -12,7 +12,7 @@\n           _0 = <dyn Cache<V = V> as Cache>::store_nocache(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:+1:5: +1:22\n                                            // mir::Constant\n                                            // + span: $DIR/dyn-trait.rs:21:7: 21:20\n-                                           // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = V>) {<dyn Cache<V = V> as Cache>::store_nocache}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = V>) {<dyn Cache<V = V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "e6e783744227e1fe27b1d7a39933354a56d6ed53", "filename": "src/test/mir-opt/inline/dyn_trait.try_execute_query.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -23,9 +23,9 @@\n +         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(move _4) -> bb1; // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n                                            // mir::Constant\n -                                          // + span: $DIR/dyn-trait.rs:27:5: 27:13\n--                                          // + literal: Const { ty: for<'r> fn(&'r (dyn Cache<V = <C as Cache>::V> + 'r)) {mk_cycle::<<C as Cache>::V>}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: for<'a> fn(&'a (dyn Cache<V = <C as Cache>::V> + 'a)) {mk_cycle::<<C as Cache>::V>}, val: Value(<ZST>) }\n +                                          // + span: $DIR/dyn-trait.rs:21:7: 21:20\n-+                                          // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = <C as Cache>::V>) {<dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache}, val: Value(<ZST>) }\n++                                          // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = <C as Cache>::V>) {<dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "3fd8aad723880d09954480afb25b0cbe98d56880", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -70,7 +70,7 @@\n -         _1 = <[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:33: 9:39\n--                                          // + literal: Const { ty: for<'r> fn(Pin<&'r mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>, bool) -> GeneratorState<<[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::Yield, <[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::Return> {<[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::resume}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>, bool) -> GeneratorState<<[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::Yield, <[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::Return> {<[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::resume}, val: Value(<ZST>) }\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n +         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n +         StorageLive(_10);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46"}, {"sha": "169e7f5c5d9360f3c288a80f81b494791faab1db", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -2,8 +2,8 @@\n \n fn bar() -> bool {\n     let mut _0: bool;                    // return place in scope 0 at $DIR/inline-retag.rs:+0:13: +0:17\n-    let _1: for<'r, 's> fn(&'r i32, &'s i32) -> bool {foo}; // in scope 0 at $DIR/inline-retag.rs:+1:9: +1:10\n-    let mut _2: for<'r, 's> fn(&'r i32, &'s i32) -> bool {foo}; // in scope 0 at $DIR/inline-retag.rs:+2:5: +2:6\n+    let _1: for<'a, 'b> fn(&'a i32, &'b i32) -> bool {foo}; // in scope 0 at $DIR/inline-retag.rs:+1:9: +1:10\n+    let mut _2: for<'a, 'b> fn(&'a i32, &'b i32) -> bool {foo}; // in scope 0 at $DIR/inline-retag.rs:+2:5: +2:6\n     let mut _3: &i32;                    // in scope 0 at $DIR/inline-retag.rs:+2:7: +2:9\n     let _4: &i32;                        // in scope 0 at $DIR/inline-retag.rs:+2:7: +2:9\n     let _5: i32;                         // in scope 0 at $DIR/inline-retag.rs:+2:8: +2:9\n@@ -27,7 +27,7 @@ fn bar() -> bool {\n         _1 = foo;                        // scope 0 at $DIR/inline-retag.rs:+1:13: +1:16\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:11:13: 11:16\n-                                         // + literal: Const { ty: for<'r, 's> fn(&'r i32, &'s i32) -> bool {foo}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> bool {foo}, val: Value(<ZST>) }\n         StorageLive(_2);                 // scope 1 at $DIR/inline-retag.rs:+2:5: +2:6\n         _2 = _1;                         // scope 1 at $DIR/inline-retag.rs:+2:5: +2:6\n         StorageLive(_3);                 // scope 1 at $DIR/inline-retag.rs:+2:7: +2:9"}, {"sha": "d691e90b7dac6cc7188dc01dc61d45afd3ec4e95", "filename": "src/test/mir-opt/inline/inline_shims.clone.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -14,7 +14,7 @@\n -         _0 = <fn(A, B) as Clone>::clone(move _2) -> bb1; // scope 0 at $DIR/inline-shims.rs:+1:5: +1:14\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-shims.rs:6:7: 6:12\n--                                          // + literal: Const { ty: for<'r> fn(&'r fn(A, B)) -> fn(A, B) {<fn(A, B) as Clone>::clone}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: for<'a> fn(&'a fn(A, B)) -> fn(A, B) {<fn(A, B) as Clone>::clone}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {"}, {"sha": "89eefc29269119b1a6bb92fe65b220b1c74419df", "filename": "src/test/mir-opt/inline/inline_trait_method.test.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -11,7 +11,7 @@ fn test(_1: &dyn X) -> u32 {\n         _0 = <dyn X as X>::y(move _2) -> bb1; // scope 0 at $DIR/inline-trait-method.rs:+1:5: +1:10\n                                          // mir::Constant\n                                          // + span: $DIR/inline-trait-method.rs:9:7: 9:8\n-                                         // + literal: Const { ty: for<'r> fn(&'r dyn X) -> u32 {<dyn X as X>::y}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a> fn(&'a dyn X) -> u32 {<dyn X as X>::y}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "3d05869fa513e9d776e6e755cb93c788a5f0d99d", "filename": "src/test/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -21,7 +21,7 @@ fn test2(_1: &dyn X) -> bool {\n         _0 = <dyn X as X>::y(move _4) -> bb1; // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n                                          // mir::Constant\n                                          // + span: $DIR/inline-trait-method_2.rs:10:7: 10:8\n-                                         // + literal: Const { ty: for<'r> fn(&'r dyn X) -> bool {<dyn X as X>::y}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a> fn(&'a dyn X) -> bool {<dyn X as X>::y}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "4186650dfabe0238a8231407407332bf1b6331b9", "filename": "src/test/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -29,7 +29,7 @@\n -         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:+4:5: +4:17\n -                                          // mir::Constant\n -                                          // + span: $DIR/issue-78442.rs:11:5: 11:15\n--                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r fn() {foo}, ()) -> <fn() {foo} as FnOnce<()>>::Output {<fn() {foo} as Fn<()>>::call}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() {foo}, ()) -> <fn() {foo} as FnOnce<()>>::Output {<fn() {foo} as Fn<()>>::call}, val: Value(<ZST>) }\n +         _2 = move (*_3)() -> [return: bb5, unwind: bb3]; // scope 1 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   "}, {"sha": "24e9a3df15acd2180ed47d9f698e674340f4e2ac", "filename": "src/test/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -29,8 +29,8 @@\n +         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:+4:5: +4:17\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:15\n--                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(<ZST>) }\n-+                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r fn() {foo}, ()) -> <fn() {foo} as FnOnce<()>>::Output {<fn() {foo} as Fn<()>>::call}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(<ZST>) }\n++                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() {foo}, ()) -> <fn() {foo} as FnOnce<()>>::Output {<fn() {foo} as Fn<()>>::call}, val: Value(<ZST>) }\n       }\n   \n       bb2: {"}, {"sha": "269e4e32617513b6ba3f695edbb8d409810b1fbe", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -139,7 +139,7 @@\n           _21 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }"}, {"sha": "625f6c7361ac8d057620f0eee57aeffc57cacc78", "filename": "src/test/mir-opt/issue_91633.bar.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.mir_map.0.mir?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -15,7 +15,7 @@ fn bar(_1: Box<[T]>) -> () {\n         _2 = <[T] as Index<usize>>::index(move _3, const 0_usize) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-91633.rs:+4:14: +4:19\n                                          // mir::Constant\n                                          // + span: $DIR/issue-91633.rs:15:14: 15:19\n-                                         // + literal: Const { ty: for<'r> fn(&'r [T], usize) -> &'r <[T] as Index<usize>>::Output {<[T] as Index<usize>>::index}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a> fn(&'a [T], usize) -> &'a <[T] as Index<usize>>::Output {<[T] as Index<usize>>::index}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "9903e203a2312a82688547e9b33b74227e8c9551", "filename": "src/test/mir-opt/issue_91633.foo.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.mir_map.0.mir?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -27,7 +27,7 @@ fn foo(_1: Box<[T]>) -> T {\n         _2 = <T as Clone>::clone(move _3) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/issue-91633.rs:+2:14: +2:27\n                                          // mir::Constant\n                                          // + span: $DIR/issue-91633.rs:28:20: 28:25\n-                                         // + literal: Const { ty: for<'r> fn(&'r T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }\n     }\n \n     bb2: {"}, {"sha": "37c3b3fcacafb5e0ccb4cbcc679ec815f950e06d", "filename": "src/test/mir-opt/issue_91633.hey.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.mir_map.0.mir?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -17,7 +17,7 @@ fn hey(_1: &[T]) -> () {\n         _3 = <[T] as Index<usize>>::index(move _4, const 0_usize) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/issue-91633.rs:+4:15: +4:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-91633.rs:7:15: 7:20\n-                                         // + literal: Const { ty: for<'r> fn(&'r [T], usize) -> &'r <[T] as Index<usize>>::Output {<[T] as Index<usize>>::index}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a> fn(&'a [T], usize) -> &'a <[T] as Index<usize>>::Output {<[T] as Index<usize>>::index}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "165efa9df4118c97d7750b857309f748630a5c82", "filename": "src/test/mir-opt/issue_99325.main.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -101,7 +101,7 @@ fn main() -> () {\n         _11 = <&[u8] as PartialEq<&[u8; 4]>>::eq(move _12, move _13) -> [return: bb2, unwind: bb19]; // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r, 's> fn(&'r &[u8], &'s &[u8; 4]) -> bool {<&[u8] as PartialEq<&[u8; 4]>>::eq}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[u8], &'b &[u8; 4]) -> bool {<&[u8] as PartialEq<&[u8; 4]>>::eq}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n@@ -132,7 +132,7 @@ fn main() -> () {\n         _16 = core::panicking::assert_failed::<&[u8], &[u8; 4]>(move _17, move _18, move _20, move _22) -> bb19; // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r &[u8], &'s &[u8; 4], Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<&[u8], &[u8; 4]>}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[u8], &'b &[u8; 4], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[u8], &[u8; 4]>}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n@@ -210,7 +210,7 @@ fn main() -> () {\n         _32 = <&[u8] as PartialEq<&[u8; 4]>>::eq(move _33, move _34) -> [return: bb11, unwind: bb19]; // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r, 's> fn(&'r &[u8], &'s &[u8; 4]) -> bool {<&[u8] as PartialEq<&[u8; 4]>>::eq}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[u8], &'b &[u8; 4]) -> bool {<&[u8] as PartialEq<&[u8; 4]>>::eq}, val: Value(<ZST>) }\n     }\n \n     bb11: {\n@@ -241,7 +241,7 @@ fn main() -> () {\n         _37 = core::panicking::assert_failed::<&[u8], &[u8; 4]>(move _38, move _39, move _41, move _43) -> bb19; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r &[u8], &'s &[u8; 4], Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<&[u8], &[u8; 4]>}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[u8], &'b &[u8; 4], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[u8], &[u8; 4]>}, val: Value(<ZST>) }\n     }\n \n     bb13: {"}, {"sha": "d962ef8cb12dc1e2eb0a67e4526dc9542692d3f4", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -32,7 +32,7 @@\n -         _2 = discriminant_value::<T>(move _3) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:49:5: 49:41\n--                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r T) -> <T as DiscriminantKind>::Discriminant {discriminant_value::<T>}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a T) -> <T as DiscriminantKind>::Discriminant {discriminant_value::<T>}, val: Value(<ZST>) }\n +         _2 = discriminant((*_3));        // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n       }\n@@ -53,7 +53,7 @@\n -         _5 = discriminant_value::<i32>(move _6) -> bb2; // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:50:5: 50:41\n--                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r i32) -> <i32 as DiscriminantKind>::Discriminant {discriminant_value::<i32>}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a i32) -> <i32 as DiscriminantKind>::Discriminant {discriminant_value::<i32>}, val: Value(<ZST>) }\n +         _5 = discriminant((*_6));        // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n +         goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n       }\n@@ -74,7 +74,7 @@\n -         _9 = discriminant_value::<()>(move _10) -> bb3; // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:51:5: 51:41\n--                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r ()) -> <() as DiscriminantKind>::Discriminant {discriminant_value::<()>}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a ()) -> <() as DiscriminantKind>::Discriminant {discriminant_value::<()>}, val: Value(<ZST>) }\n +         _9 = discriminant((*_10));       // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n +         goto -> bb3;                     // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n       }\n@@ -95,7 +95,7 @@\n -         _13 = discriminant_value::<E>(move _14) -> bb4; // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:52:5: 52:41\n--                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r E) -> <E as DiscriminantKind>::Discriminant {discriminant_value::<E>}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a E) -> <E as DiscriminantKind>::Discriminant {discriminant_value::<E>}, val: Value(<ZST>) }\n +         _13 = discriminant((*_14));      // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n +         goto -> bb4;                     // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n       }"}, {"sha": "5f5d6e68fdc17eeb606bde560efdaedee37e3f87", "filename": "src/test/mir-opt/lower_slice_len.bound.LowerSliceLenCalls.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -23,7 +23,7 @@\n -         _5 = core::slice::<impl [u8]>::len(move _6) -> bb1; // scope 0 at $DIR/lower_slice_len.rs:+1:16: +1:27\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_slice_len.rs:5:22: 5:25\n--                                          // + literal: Const { ty: for<'r> fn(&'r [u8]) -> usize {core::slice::<impl [u8]>::len}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: for<'a> fn(&'a [u8]) -> usize {core::slice::<impl [u8]>::len}, val: Value(<ZST>) }\n +         _5 = Len((*_6));                 // scope 0 at $DIR/lower_slice_len.rs:+1:16: +1:27\n +         goto -> bb1;                     // scope 0 at $DIR/lower_slice_len.rs:+1:16: +1:27\n       }"}, {"sha": "963e7cde6567bc390f38f107585ad8d03c47c0ab", "filename": "src/test/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -20,7 +20,7 @@ fn main() -> () {\n         _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:20: +1:34\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:23: 9:32\n-                                         // + literal: Const { ty: for<'r> fn(&'r str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "ce35f920bf627e6aec9ab27d2c70f009a318a00c", "filename": "src/test/mir-opt/nrvo_simple.nrvo.RenameReturnPlace.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,13 +1,13 @@\n - // MIR for `nrvo` before RenameReturnPlace\n + // MIR for `nrvo` after RenameReturnPlace\n   \n-  fn nrvo(_1: for<'r> fn(&'r mut [u8; 1024])) -> [u8; 1024] {\n+  fn nrvo(_1: for<'a> fn(&'a mut [u8; 1024])) -> [u8; 1024] {\n       debug init => _1;                    // in scope 0 at $DIR/nrvo-simple.rs:+0:9: +0:13\n -     let mut _0: [u8; 1024];              // return place in scope 0 at $DIR/nrvo-simple.rs:+0:39: +0:49\n +     let mut _0: [u8; 1024];              // return place in scope 0 at $DIR/nrvo-simple.rs:+1:9: +1:16\n       let mut _2: [u8; 1024];              // in scope 0 at $DIR/nrvo-simple.rs:+1:9: +1:16\n       let _3: ();                          // in scope 0 at $DIR/nrvo-simple.rs:+2:5: +2:19\n-      let mut _4: for<'r> fn(&'r mut [u8; 1024]); // in scope 0 at $DIR/nrvo-simple.rs:+2:5: +2:9\n+      let mut _4: for<'a> fn(&'a mut [u8; 1024]); // in scope 0 at $DIR/nrvo-simple.rs:+2:5: +2:9\n       let mut _5: &mut [u8; 1024];         // in scope 0 at $DIR/nrvo-simple.rs:+2:10: +2:18\n       let mut _6: &mut [u8; 1024];         // in scope 0 at $DIR/nrvo-simple.rs:+2:10: +2:18\n       scope 1 {"}, {"sha": "188aa55649069a7951e43495e09cd43a6fc9d358", "filename": "src/test/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -57,7 +57,7 @@\n           _7 = <std::ops::Range<i32> as Iterator>::next(move _8) -> bb3; // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n                                            // mir::Constant\n                                            // + span: $DIR/remove_storage_markers.rs:10:14: 10:19\n-                                           // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }\n       }\n   \n       bb3: {"}, {"sha": "fe57e32a7acc236cc8e7728e8d878db194cd766f", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -180,7 +180,7 @@ fn array_casts() -> () {\n         _28 = core::panicking::assert_failed::<usize, usize>(move _29, move _30, move _32, move _34); // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }\n     }\n \n     bb4: {"}, {"sha": "cdc413c568f184c485e83c6d6143ec741493f1ce", "filename": "src/test/mir-opt/retag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -11,7 +11,7 @@ fn std::ptr::drop_in_place(_1: *mut Test) -> () {\n         _3 = <Test as Drop>::drop(move _2) -> bb1; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r> fn(&'r mut Test) {<Test as Drop>::drop}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut Test) {<Test as Drop>::drop}, val: Value(<ZST>) }\n     }\n \n     bb1: {"}, {"sha": "81225b44ebf9fd5d572e1d250ef6e3cfd46f068f", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -11,7 +11,7 @@ fn main() -> () {\n     let mut _9: &mut i32;                // in scope 0 at $DIR/retag.rs:+4:19: +4:20\n     let mut _12: *mut i32;               // in scope 0 at $DIR/retag.rs:+7:18: +7:29\n     let mut _14: [closure@main::{closure#0}]; // in scope 0 at $DIR/retag.rs:+11:31: +14:6\n-    let mut _16: for<'r> fn(&'r i32) -> &'r i32; // in scope 0 at $DIR/retag.rs:+15:14: +15:15\n+    let mut _16: for<'a> fn(&'a i32) -> &'a i32; // in scope 0 at $DIR/retag.rs:+15:14: +15:15\n     let mut _17: &i32;                   // in scope 0 at $DIR/retag.rs:+15:16: +15:18\n     let _18: &i32;                       // in scope 0 at $DIR/retag.rs:+15:16: +15:18\n     let _19: &i32;                       // in scope 0 at $DIR/retag.rs:+18:5: +18:24\n@@ -25,7 +25,7 @@ fn main() -> () {\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/retag.rs:+1:9: +1:14\n         let _3: &mut i32;                // in scope 1 at $DIR/retag.rs:+3:13: +3:14\n-        let _13: for<'r> fn(&'r i32) -> &'r i32; // in scope 1 at $DIR/retag.rs:+11:9: +11:10\n+        let _13: for<'a> fn(&'a i32) -> &'a i32; // in scope 1 at $DIR/retag.rs:+11:9: +11:10\n         scope 2 {\n             debug v => _3;               // in scope 2 at $DIR/retag.rs:+3:13: +3:14\n             let _8: &mut i32;            // in scope 2 at $DIR/retag.rs:+4:13: +4:14\n@@ -75,7 +75,7 @@ fn main() -> () {\n         _3 = Test::foo(move _4, move _6) -> [return: bb1, unwind: bb8]; // scope 1 at $DIR/retag.rs:+3:17: +3:36\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:33:25: 33:28\n-                                         // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a, 'x> fn(&'a Test, &'x mut i32) -> &'x mut i32 {Test::foo}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n@@ -114,7 +114,7 @@ fn main() -> () {\n         StorageLive(_14);                // scope 1 at $DIR/retag.rs:+11:31: +14:6\n         Deinit(_14);                     // scope 1 at $DIR/retag.rs:+11:31: +14:6\n         Retag(_14);                      // scope 1 at $DIR/retag.rs:+11:31: +14:6\n-        _13 = move _14 as for<'r> fn(&'r i32) -> &'r i32 (Pointer(ClosureFnPointer(Normal))); // scope 1 at $DIR/retag.rs:+11:31: +14:6\n+        _13 = move _14 as for<'a> fn(&'a i32) -> &'a i32 (Pointer(ClosureFnPointer(Normal))); // scope 1 at $DIR/retag.rs:+11:31: +14:6\n         StorageDead(_14);                // scope 1 at $DIR/retag.rs:+11:47: +11:48\n         StorageLive(_15);                // scope 6 at $DIR/retag.rs:+15:9: +15:11\n         StorageLive(_16);                // scope 6 at $DIR/retag.rs:+15:14: +15:15\n@@ -154,7 +154,7 @@ fn main() -> () {\n         _19 = Test::foo_shr(move _20, move _22) -> [return: bb4, unwind: bb7]; // scope 7 at $DIR/retag.rs:+18:5: +18:24\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:48:13: 48:20\n-                                         // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a, 'x> fn(&'a Test, &'x i32) -> &'x i32 {Test::foo_shr}, val: Value(<ZST>) }\n     }\n \n     bb4: {"}, {"sha": "ed9f3bdbdf4d6caf5f67ead2d2d02eeb65b222b6", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -34,6 +34,6 @@ fn std::ptr::drop_in_place(_1: *mut Vec<i32>) -> () {\n         _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r> fn(&'r mut Vec<i32>) {<Vec<i32> as Drop>::drop}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>) {<Vec<i32> as Drop>::drop}, val: Value(<ZST>) }\n     }\n }"}, {"sha": "18e6d75b1d5ad05a60a3d87f3e33a29d4618ab12", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -32,7 +32,7 @@\n         ({\n                 let res =\n                     ((::alloc::fmt::format as\n-                            for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n+                            for<'a> fn(Arguments<'a>) -> String {format})(((::core::fmt::Arguments::new_v1\n                                 as\n                                 fn(&[&'static str], &[ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1})((&([(\"test\"\n                                             as &str)] as [&str; 1]) as &[&str; 1]),"}, {"sha": "bf5f642ca823d61b6e0517308a3c72bbccce8327", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ LL |     f1(|_: (), _: ()| {});\n    |     |\n    |     expected due to this\n    |\n-   = note: expected closure signature `for<'r, 's> fn(&'r (), &'s ()) -> _`\n+   = note: expected closure signature `for<'a, 'b> fn(&'a (), &'b ()) -> _`\n               found closure signature `fn((), ()) -> _`\n note: required by a bound in `f1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:25\n@@ -22,7 +22,7 @@ LL |     f2(|_: (), _: ()| {});\n    |     |\n    |     expected due to this\n    |\n-   = note: expected closure signature `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n+   = note: expected closure signature `for<'a, 'b> fn(&'a (), &'b ()) -> _`\n               found closure signature `fn((), ()) -> _`\n note: required by a bound in `f2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:17:25\n@@ -38,7 +38,7 @@ LL |     f3(|_: (), _: ()| {});\n    |     |\n    |     expected due to this\n    |\n-   = note: expected closure signature `for<'r> fn(&(), &'r ()) -> _`\n+   = note: expected closure signature `for<'a> fn(&(), &'a ()) -> _`\n               found closure signature `fn((), ()) -> _`\n note: required by a bound in `f3`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:29\n@@ -54,7 +54,7 @@ LL |     f4(|_: (), _: ()| {});\n    |     |\n    |     expected due to this\n    |\n-   = note: expected closure signature `for<'r, 's> fn(&'s (), &'r ()) -> _`\n+   = note: expected closure signature `for<'r, 'a> fn(&'a (), &'r ()) -> _`\n               found closure signature `fn((), ()) -> _`\n note: required by a bound in `f4`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:19:25\n@@ -86,7 +86,7 @@ LL |     g1(|_: (), _: ()| {});\n    |     |\n    |     expected due to this\n    |\n-   = note: expected closure signature `for<'r> fn(&'r (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>) -> _`\n+   = note: expected closure signature `for<'a> fn(&'a (), Box<(dyn for<'a> Fn(&'a ()) + 'static)>) -> _`\n               found closure signature `fn((), ()) -> _`\n note: required by a bound in `g1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:23:25\n@@ -102,7 +102,7 @@ LL |     g2(|_: (), _: ()| {});\n    |     |\n    |     expected due to this\n    |\n-   = note: expected closure signature `for<'r> fn(&'r (), for<'r> fn(&'r ())) -> _`\n+   = note: expected closure signature `for<'a> fn(&'a (), for<'a> fn(&'a ())) -> _`\n               found closure signature `fn((), ()) -> _`\n note: required by a bound in `g2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:24:25\n@@ -118,7 +118,7 @@ LL |     g3(|_: (), _: ()| {});\n    |     |\n    |     expected due to this\n    |\n-   = note: expected closure signature `for<'s> fn(&'s (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>) -> _`\n+   = note: expected closure signature `for<'s> fn(&'s (), Box<(dyn for<'a> Fn(&'a ()) + 'static)>) -> _`\n               found closure signature `fn((), ()) -> _`\n note: required by a bound in `g3`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:25:25\n@@ -134,7 +134,7 @@ LL |     g4(|_: (), _: ()| {});\n    |     |\n    |     expected due to this\n    |\n-   = note: expected closure signature `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n+   = note: expected closure signature `for<'a> fn(&'a (), for<'r> fn(&'r ())) -> _`\n               found closure signature `fn((), ()) -> _`\n note: required by a bound in `g4`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:26:25\n@@ -150,7 +150,7 @@ LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     |\n    |     expected due to this\n    |\n-   = note: expected closure signature `for<'r, 's> fn(&'r (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>, &'s (), for<'r, 's> fn(&'r (), &'s ())) -> _`\n+   = note: expected closure signature `for<'a, 'b> fn(&'a (), Box<(dyn for<'a> Fn(&'a ()) + 'static)>, &'b (), for<'a, 'b> fn(&'a (), &'b ())) -> _`\n               found closure signature `fn((), (), (), ()) -> _`\n note: required by a bound in `h1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:29:25\n@@ -166,7 +166,7 @@ LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     |\n    |     expected due to this\n    |\n-   = note: expected closure signature `for<'t0, 'r> fn(&'r (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>, &'t0 (), for<'r, 's> fn(&'r (), &'s ())) -> _`\n+   = note: expected closure signature `for<'t0, 'a> fn(&'a (), Box<(dyn for<'a> Fn(&'a ()) + 'static)>, &'t0 (), for<'a, 'b> fn(&'a (), &'b ())) -> _`\n               found closure signature `fn((), (), (), ()) -> _`\n note: required by a bound in `h2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:30:25"}, {"sha": "85f7d1dd6748b6f2f4281a3cbf6787e9a0550bb2", "filename": "src/test/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -18,7 +18,7 @@ LL |   async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n    |  ___________________________________________________________________^\n LL | | }\n    | |_^\n-   = note: required because it captures the following types: `ResumeTy`, `impl for<'r, 's, 't0> Future<Output = ()>`, `()`\n+   = note: required because it captures the following types: `ResumeTy`, `impl for<'a, 'b, 'c> Future<Output = ()>`, `()`\n note: required because it's used within this `async` block\n   --> $DIR/issue-70935-complex-spans.rs:16:16\n    |"}, {"sha": "95bbd6a60ec860f92741b3dbe5c02a6451c2f27f", "filename": "src/test/ui/binop/issue-77910-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     // we shouldn't ice with the bound var here.\n     assert_eq!(foo, y);\n     //~^ ERROR binary operation `==` cannot be applied to type\n-    //~| ERROR `for<'r> fn(&'r i32) -> &'r i32 {foo}` doesn't implement `Debug`\n+    //~| ERROR `for<'a> fn(&'a i32) -> &'a i32 {foo}` doesn't implement `Debug`\n }"}, {"sha": "9c7bf6228be6e685ab865bb333f244a9d5d915b3", "filename": "src/test/ui/binop/issue-77910-1.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,24 +1,24 @@\n-error[E0369]: binary operation `==` cannot be applied to type `for<'r> fn(&'r i32) -> &'r i32 {foo}`\n+error[E0369]: binary operation `==` cannot be applied to type `for<'a> fn(&'a i32) -> &'a i32 {foo}`\n   --> $DIR/issue-77910-1.rs:8:5\n    |\n LL |     assert_eq!(foo, y);\n    |     ^^^^^^^^^^^^^^^^^^\n    |     |\n-   |     for<'r> fn(&'r i32) -> &'r i32 {foo}\n+   |     for<'a> fn(&'a i32) -> &'a i32 {foo}\n    |     _\n    |\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0277]: `for<'r> fn(&'r i32) -> &'r i32 {foo}` doesn't implement `Debug`\n+error[E0277]: `for<'a> fn(&'a i32) -> &'a i32 {foo}` doesn't implement `Debug`\n   --> $DIR/issue-77910-1.rs:8:5\n    |\n LL | fn foo(s: &i32) -> &i32 {\n    |    --- consider calling this function\n ...\n LL |     assert_eq!(foo, y);\n-   |     ^^^^^^^^^^^^^^^^^^ `for<'r> fn(&'r i32) -> &'r i32 {foo}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |     ^^^^^^^^^^^^^^^^^^ `for<'a> fn(&'a i32) -> &'a i32 {foo}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = help: the trait `Debug` is not implemented for fn item `for<'r> fn(&'r i32) -> &'r i32 {foo}`\n+   = help: the trait `Debug` is not implemented for fn item `for<'a> fn(&'a i32) -> &'a i32 {foo}`\n    = help: use parentheses to call the function: `foo(s)`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "b3856b6ae1681833b1478727b539e4421194d0eb", "filename": "src/test/ui/binop/issue-77910-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-2.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,10 +1,10 @@\n-error[E0369]: binary operation `==` cannot be applied to type `for<'r> fn(&'r i32) -> &'r i32 {foo}`\n+error[E0369]: binary operation `==` cannot be applied to type `for<'a> fn(&'a i32) -> &'a i32 {foo}`\n   --> $DIR/issue-77910-2.rs:7:12\n    |\n LL |     if foo == y {}\n    |        --- ^^ - _\n    |        |\n-   |        for<'r> fn(&'r i32) -> &'r i32 {foo}\n+   |        for<'a> fn(&'a i32) -> &'a i32 {foo}\n    |\n help: use parentheses to call this function\n    |"}, {"sha": "e6ddc6068977971747a5f3bae3f436519a62e542", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -26,15 +26,15 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n    |                                                 ^ one type is more general than the other\n    |\n    = note: expected fn pointer `fn(&u32)`\n-              found fn pointer `for<'r> fn(&'r u32)`\n+              found fn pointer `for<'a> fn(&'a u32)`\n \n error[E0308]: mismatched types\n   --> $DIR/expect-fn-supply-fn.rs:39:50\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n    |                                                  ^ one type is more general than the other\n    |\n-   = note: expected fn pointer `for<'r> fn(&'r u32)`\n+   = note: expected fn pointer `for<'a> fn(&'a u32)`\n               found fn pointer `fn(&u32)`\n \n error[E0308]: mismatched types\n@@ -43,7 +43,7 @@ error[E0308]: mismatched types\n LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n    |                                                  ^ one type is more general than the other\n    |\n-   = note: expected fn pointer `for<'r> fn(&'r u32)`\n+   = note: expected fn pointer `for<'a> fn(&'a u32)`\n               found fn pointer `fn(&u32)`\n \n error: aborting due to 5 previous errors"}, {"sha": "4c40f70b9d0a8393a891a1089b21e5a4f629756b", "filename": "src/test/ui/closures/closure-reform-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -8,7 +8,7 @@ LL |     call_bare(f)\n    |     |\n    |     arguments to this function are incorrect\n    |\n-   = note: expected fn pointer `for<'r> fn(&'r str)`\n+   = note: expected fn pointer `for<'a> fn(&'a str)`\n                  found closure `[closure@$DIR/closure-reform-bad.rs:10:13: 10:22]`\n note: closures can only be coerced to `fn` types if they do not capture any variables\n   --> $DIR/closure-reform-bad.rs:10:43"}, {"sha": "563f28e2291d42015d3160e8896c3ad639f7d4ed", "filename": "src/test/ui/coherence/coherence-negative-impls-copy-bad.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy-bad.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -0,0 +1,11 @@\n+#![feature(negative_impls)]\n+#![crate_type = \"lib\"]\n+\n+impl !Copy for str {}\n+//~^ ERROR only traits defined in the current crate can be implemented\n+\n+impl !Copy for fn() {}\n+//~^ ERROR only traits defined in the current crate can be implemented\n+\n+impl !Copy for () {}\n+//~^ ERROR only traits defined in the current crate can be implemented"}, {"sha": "2295d6315d1c2af951520a0f166c371ed301dabc", "filename": "src/test/ui/coherence/coherence-negative-impls-copy-bad.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy-bad.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -0,0 +1,36 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-negative-impls-copy-bad.rs:4:1\n+   |\n+LL | impl !Copy for str {}\n+   | ^^^^^^^^^^^^^^^---\n+   | |              |\n+   | |              `str` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-negative-impls-copy-bad.rs:7:1\n+   |\n+LL | impl !Copy for fn() {}\n+   | ^^^^^^^^^^^^^^^----\n+   | |              |\n+   | |              `fn()` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-negative-impls-copy-bad.rs:10:1\n+   |\n+LL | impl !Copy for () {}\n+   | ^^^^^^^^^^^^^^^--\n+   | |              |\n+   | |              this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "7b29aade41335ba9514ee2ffd00bd477159cfc80", "filename": "src/test/ui/coherence/coherence-negative-impls-copy.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+// regression test for issue #101836\n+\n+#![feature(negative_impls, extern_types)]\n+#![crate_type = \"lib\"]\n+\n+struct NonCopy;\n+struct NeverCopy(NonCopy);\n+\n+impl !Copy for NeverCopy {}\n+\n+\n+struct WithDrop;\n+impl Drop for WithDrop { fn drop(&mut self) {} }\n+\n+impl !Copy for WithDrop {}\n+\n+\n+struct Type;\n+trait Trait {}\n+extern {\n+    type ExternType;\n+}\n+\n+impl !Copy for &mut Type {}\n+\n+impl !Copy for dyn Trait {}\n+\n+impl !Copy for ExternType {}"}, {"sha": "168ee57263d2a4205799c6ab22c453a07f2a2098", "filename": "src/test/ui/coherence/deep-bad-copy-reason.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,11 +1,11 @@\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/deep-bad-copy-reason.rs:33:15\n+  --> $DIR/deep-bad-copy-reason.rs:33:24\n    |\n LL | pub struct List<'tcx, T>(Interned<'tcx, ListS<T>>);\n    |                          ------------------------ this field does not implement `Copy`\n ...\n LL | impl<'tcx, T> Copy for List<'tcx, T> {}\n-   |               ^^^^\n+   |                        ^^^^^^^^^^^^^\n    |\n note: the `Copy` impl for `Interned<'tcx, ListS<T>>` requires that `OpaqueListContents: Sized`\n   --> $DIR/deep-bad-copy-reason.rs:23:26"}, {"sha": "ee63f34b799a510ae3cd7e67804fa7579d4abc5e", "filename": "src/test/ui/compare-method/issue-90444.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fcompare-method%2Fissue-90444.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fcompare-method%2Fissue-90444.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fissue-90444.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -5,10 +5,10 @@ LL |     fn from(_: fn((), (), &mut ())) -> Self {\n    |                ^^^^^^^^^^^^^^^^^^^\n    |                |\n    |                types differ in mutability\n-   |                help: change the parameter type to match the trait: `for<'r> fn((), (), &'r ())`\n+   |                help: change the parameter type to match the trait: `for<'a> fn((), (), &'a ())`\n    |\n-   = note: expected fn pointer `fn(for<'r> fn((), (), &'r ())) -> A`\n-              found fn pointer `fn(for<'r> fn((), (), &'r mut ())) -> A`\n+   = note: expected fn pointer `fn(for<'a> fn((), (), &'a ())) -> A`\n+              found fn pointer `fn(for<'a> fn((), (), &'a mut ())) -> A`\n \n error[E0053]: method `from` has an incompatible type for trait\n   --> $DIR/issue-90444.rs:11:16"}, {"sha": "353ce5050359c9627fa755cad25ace121dfd667d", "filename": "src/test/ui/consts/const-eval/issue-100878.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-100878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-100878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-100878.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -0,0 +1,8 @@\n+// This checks that the const-eval ICE in issue #100878 does not recur.\n+//\n+// build-pass\n+pub fn bitshift_data(data: [u8; 1]) -> u8 {\n+    data[0] << 8\n+}\n+\n+fn main() {}"}, {"sha": "a9a70bb7130cbac92b6cf221037d961f64531409", "filename": "src/test/ui/generic-associated-types/bugs/issue-88382.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -9,8 +9,8 @@ LL |     do_something(SomeImplementation(), test);\n LL | fn test<'a, I: Iterable>(_: &mut I::Iterator<'a>) {}\n    | ------------------------------------------------- found signature defined here\n    |\n-   = note: expected function signature `for<'r> fn(&'r mut std::iter::Empty<usize>) -> _`\n-              found function signature `for<'a, 'r> fn(&'r mut <_ as Iterable>::Iterator<'a>) -> _`\n+   = note: expected function signature `for<'a> fn(&'a mut std::iter::Empty<usize>) -> _`\n+              found function signature `for<'a, 'b> fn(&'b mut <_ as Iterable>::Iterator<'a>) -> _`\n note: required by a bound in `do_something`\n   --> $DIR/issue-88382.rs:20:48\n    |"}, {"sha": "c1e235441d65df68f775e99f1de85b897185d040", "filename": "src/test/ui/higher-rank-trait-bounds/issue-30786.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -19,7 +19,7 @@ note: the following trait bounds were not satisfied:\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here\n \n-error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>`, but its trait bounds were not satisfied\n+error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-30786.rs:130:24\n    |\n LL | pub struct Filter<S, F> {\n@@ -29,12 +29,12 @@ LL | pub struct Filter<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let count = filter.countx();\n-   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>` due to unsatisfied trait bounds\n+   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n-      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>: Stream`\n-      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>: Stream`\n-      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>: Stream`\n+      `&'a mut &Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>: Stream`\n+      `&'a mut &mut Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>: Stream`\n+      `&'a mut Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>: Stream`\n   --> $DIR/issue-30786.rs:96:50\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}"}, {"sha": "3f874220a270809870f519518cda65675b160e87", "filename": "src/test/ui/higher-rank-trait-bounds/issue-46989.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-46989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-46989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-46989.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -4,7 +4,7 @@ error: implementation of `Foo` is not general enough\n LL |     assert_foo::<fn(&i32)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = note: `Foo` would have to be implemented for the type `for<'r> fn(&'r i32)`\n+   = note: `Foo` would have to be implemented for the type `for<'a> fn(&'a i32)`\n    = note: ...but `Foo` is actually implemented for the type `fn(&'0 i32)`, for some specific lifetime `'0`\n \n error: aborting due to previous error"}, {"sha": "4ef96cd954106ba6c7041b954424b60adac54587", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected trait `for<'r, 's> FnOnce<(&'r &'s str,)>`\n-              found trait `for<'r> FnOnce<(&'r &str,)>`\n+   = note: expected trait `for<'a, 'b> FnOnce<(&'a &'b str,)>`\n+              found trait `for<'a> FnOnce<(&'a &str,)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-71955.rs:45:24\n    |\n@@ -23,8 +23,8 @@ error[E0308]: mismatched types\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected trait `for<'r, 's> FnOnce<(&'r &'s str,)>`\n-              found trait `for<'r> FnOnce<(&'r &str,)>`\n+   = note: expected trait `for<'a, 'b> FnOnce<(&'a &'b str,)>`\n+              found trait `for<'a> FnOnce<(&'a &str,)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-71955.rs:45:24\n    |\n@@ -42,8 +42,8 @@ error[E0308]: mismatched types\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected trait `for<'r, 's> FnOnce<(&'r Wrapper<'s>,)>`\n-              found trait `for<'r> FnOnce<(&'r Wrapper<'_>,)>`\n+   = note: expected trait `for<'a, 'b> FnOnce<(&'a Wrapper<'b>,)>`\n+              found trait `for<'a> FnOnce<(&'a Wrapper<'_>,)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-71955.rs:48:24\n    |\n@@ -61,8 +61,8 @@ error[E0308]: mismatched types\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected trait `for<'r, 's> FnOnce<(&'r Wrapper<'s>,)>`\n-              found trait `for<'r> FnOnce<(&'r Wrapper<'_>,)>`\n+   = note: expected trait `for<'a, 'b> FnOnce<(&'a Wrapper<'b>,)>`\n+              found trait `for<'a> FnOnce<(&'a Wrapper<'_>,)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-71955.rs:48:24\n    |"}, {"sha": "c10a0888a4f2746e7a2cb15677629ca87c46a5fc", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-85455.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ trait SomeTrait<'a> {\n \n fn give_me_ice<T>() {\n     callee::<fn(&()) -> <T as SomeTrait<'_>>::Associated>();\n-    //~^ ERROR the trait bound `for<'r> T: SomeTrait<'r>` is not satisfied [E0277]\n+    //~^ ERROR the trait bound `for<'a> T: SomeTrait<'a>` is not satisfied [E0277]\n }\n \n fn callee<T: Fn<(&'static (),)>>() {"}, {"sha": "25a4f6088deba56f0a34782cd779bf5a8efbd32c", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-85455.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,12 +1,12 @@\n-error[E0277]: the trait bound `for<'r> T: SomeTrait<'r>` is not satisfied\n+error[E0277]: the trait bound `for<'a> T: SomeTrait<'a>` is not satisfied\n   --> $DIR/issue-85455.rs:8:5\n    |\n LL |     callee::<fn(&()) -> <T as SomeTrait<'_>>::Associated>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'r> SomeTrait<'r>` is not implemented for `T`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> SomeTrait<'a>` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | fn give_me_ice<T: for<'r> SomeTrait<'r>>() {\n+LL | fn give_me_ice<T: for<'a> SomeTrait<'a>>() {\n    |                 +++++++++++++++++++++++\n \n error: aborting due to previous error"}, {"sha": "ddb25c06b1b170eba5defbc0e92a1c8a1fa5b096", "filename": "src/test/ui/hygiene/impl_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -9,7 +9,7 @@ mod foo {\n     }\n \n     pub macro m() {\n-        let _: () = S.f(); //~ ERROR type `for<'r> fn(&'r foo::S) {foo::S::f}` is private\n+        let _: () = S.f(); //~ ERROR type `for<'a> fn(&'a foo::S) {foo::S::f}` is private\n     }\n }\n "}, {"sha": "46a2500386e0fefda5aa30e526ee137187044de4", "filename": "src/test/ui/hygiene/impl_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,4 +1,4 @@\n-error: type `for<'r> fn(&'r foo::S) {foo::S::f}` is private\n+error: type `for<'a> fn(&'a foo::S) {foo::S::f}` is private\n   --> $DIR/impl_items.rs:12:23\n    |\n LL |         let _: () = S.f();"}, {"sha": "edf3911e2a097d3372452c3726d65c50fa81083f", "filename": "src/test/ui/impl-trait/generic-with-implicit-hrtb-without-dyn.edition2015.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.edition2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.edition2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.edition2015.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `(): AsRef<(dyn for<'r> Fn(&'r ()) + 'static)>` is not satisfied\n+error[E0277]: the trait bound `(): AsRef<(dyn for<'a> Fn(&'a ()) + 'static)>` is not satisfied\n   --> $DIR/generic-with-implicit-hrtb-without-dyn.rs:6:13\n    |\n LL | fn ice() -> impl AsRef<Fn(&())> {\n-   |             ^^^^^^^^^^^^^^^^^^^ the trait `AsRef<(dyn for<'r> Fn(&'r ()) + 'static)>` is not implemented for `()`\n+   |             ^^^^^^^^^^^^^^^^^^^ the trait `AsRef<(dyn for<'a> Fn(&'a ()) + 'static)>` is not implemented for `()`\n \n error: aborting due to previous error\n "}, {"sha": "88e2520bf4b247f2c5704d6bcff3b890e7986a67", "filename": "src/test/ui/impl-trait/generic-with-implicit-hrtb-without-dyn.edition2021.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.edition2021.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -9,11 +9,11 @@ help: add `dyn` keyword before this trait\n LL | fn ice() -> impl AsRef<dyn Fn(&())> {\n    |                        +++\n \n-error[E0277]: the trait bound `(): AsRef<(dyn for<'r> Fn(&'r ()) + 'static)>` is not satisfied\n+error[E0277]: the trait bound `(): AsRef<(dyn for<'a> Fn(&'a ()) + 'static)>` is not satisfied\n   --> $DIR/generic-with-implicit-hrtb-without-dyn.rs:6:13\n    |\n LL | fn ice() -> impl AsRef<Fn(&())> {\n-   |             ^^^^^^^^^^^^^^^^^^^ the trait `AsRef<(dyn for<'r> Fn(&'r ()) + 'static)>` is not implemented for `()`\n+   |             ^^^^^^^^^^^^^^^^^^^ the trait `AsRef<(dyn for<'a> Fn(&'a ()) + 'static)>` is not implemented for `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5a922697f6ff9884f46e16ade0f794af38e95e3d", "filename": "src/test/ui/impl-trait/generic-with-implicit-hrtb-without-dyn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -4,7 +4,7 @@\n #![allow(warnings)]\n \n fn ice() -> impl AsRef<Fn(&())> {\n-    //~^ ERROR: the trait bound `(): AsRef<(dyn for<'r> Fn(&'r ()) + 'static)>` is not satisfied [E0277]\n+    //~^ ERROR: the trait bound `(): AsRef<(dyn for<'a> Fn(&'a ()) + 'static)>` is not satisfied [E0277]\n     //[edition2021]~| ERROR: trait objects must include the `dyn` keyword [E0782]\n     todo!()\n }"}, {"sha": "b0b03a0eea69eb2ca7fbf7e71b67faa61736c36a", "filename": "src/test/ui/issues/issue-18919.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: the size for values of type `dyn for<'r> Fn(&'r isize) -> isize` cannot be known at compilation time\n+error[E0277]: the size for values of type `dyn for<'a> Fn(&'a isize) -> isize` cannot be known at compilation time\n   --> $DIR/issue-18919.rs:3:15\n    |\n LL | fn ho_func(f: Option<FuncType>) {\n    |               ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `Sized` is not implemented for `dyn for<'r> Fn(&'r isize) -> isize`\n+   = help: the trait `Sized` is not implemented for `dyn for<'a> Fn(&'a isize) -> isize`\n note: required by a bound in `Option`\n   --> $DIR/issue-18919.rs:7:13\n    |"}, {"sha": "1e4c8ac7c356cbd383dd9163b772da8928fa9ef3", "filename": "src/test/ui/issues/issue-24322.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fissues%2Fissue-24322.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fissues%2Fissue-24322.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24322.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,8 +6,8 @@ LL |     let x: &fn(&B) -> u32 = &B::func;\n    |            |\n    |            expected due to this\n    |\n-   = note: expected reference `&for<'r> fn(&'r B) -> u32`\n-              found reference `&for<'r> fn(&'r B) -> u32 {B::func}`\n+   = note: expected reference `&for<'a> fn(&'a B) -> u32`\n+              found reference `&for<'a> fn(&'a B) -> u32 {B::func}`\n \n error: aborting due to previous error\n "}, {"sha": "c41fbb9d2ec1d81b36a46a3786bd410f3ed63015", "filename": "src/test/ui/issues/issue-40000.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     foo(bar);\n    |         ^^^ one type is more general than the other\n    |\n-   = note: expected trait object `dyn for<'r> Fn(&'r i32)`\n+   = note: expected trait object `dyn for<'a> Fn(&'a i32)`\n               found trait object `dyn Fn(&i32)`\n \n error[E0308]: mismatched types\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |     foo(bar);\n    |         ^^^ one type is more general than the other\n    |\n-   = note: expected trait object `dyn for<'r> Fn(&'r i32)`\n+   = note: expected trait object `dyn for<'a> Fn(&'a i32)`\n               found trait object `dyn Fn(&i32)`\n \n error: aborting due to 2 previous errors"}, {"sha": "7d08c4643ff2f00743a701731fcaeb7a391fb2d3", "filename": "src/test/ui/issues/issue-57362-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,11 +1,11 @@\n-error[E0599]: the function or associated item `make_g` exists for fn pointer `for<'r> fn(&'r ())`, but its trait bounds were not satisfied\n+error[E0599]: the function or associated item `make_g` exists for fn pointer `for<'a> fn(&'a ())`, but its trait bounds were not satisfied\n   --> $DIR/issue-57362-2.rs:22:25\n    |\n LL |     let x = <fn (&())>::make_g();\n-   |                         ^^^^^^ function or associated item cannot be called on `for<'r> fn(&'r ())` due to unsatisfied trait bounds\n+   |                         ^^^^^^ function or associated item cannot be called on `for<'a> fn(&'a ())` due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n-           `for<'r> fn(&'r ()): X`\n+           `for<'a> fn(&'a ()): X`\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `X` defines an item `make_g`, perhaps you need to implement it\n   --> $DIR/issue-57362-2.rs:8:1"}, {"sha": "c5f654b37bf6f230454b0949a447a61282d35c22", "filename": "src/test/ui/lifetimes/issue-79187-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -31,7 +31,7 @@ error[E0308]: mismatched types\n LL |     take_foo(|a| a);\n    |     ^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected trait `for<'r> Fn<(&'r i32,)>`\n+   = note: expected trait `for<'a> Fn<(&'a i32,)>`\n               found trait `Fn<(&i32,)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-79187-2.rs:8:14"}, {"sha": "ee6e7b89d5f0ea2f2b32e042d07156d6e776c39a", "filename": "src/test/ui/lifetimes/issue-79187.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     thing(f);\n    |     ^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected trait `for<'r> FnOnce<(&'r u32,)>`\n+   = note: expected trait `for<'a> FnOnce<(&'a u32,)>`\n               found trait `FnOnce<(&u32,)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-79187.rs:4:13"}, {"sha": "7049f28e2f6eb37e89b328b7644c00fdef268f72", "filename": "src/test/ui/lifetimes/lifetime-errors/issue_74400.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n LL |     f(data, identity)\n    |     ^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected trait `for<'r> Fn<(&'r T,)>`\n+   = note: expected trait `for<'a> Fn<(&'a T,)>`\n               found trait `Fn<(&T,)>`\n note: the lifetime requirement is introduced here\n   --> $DIR/issue_74400.rs:8:34"}, {"sha": "840707d9470810493a9397bde3acff59c9ddad14", "filename": "src/test/ui/lifetimes/re-empty-in-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -4,7 +4,7 @@ error: higher-ranked lifetime error\n LL |     foo(&10);\n    |     ^^^^^^^^\n    |\n-   = note: could not prove `for<'b, 'r> &'b (): 'r`\n+   = note: could not prove `for<'b, 'a> &'b (): 'a`\n \n error: aborting due to previous error\n "}, {"sha": "92d545b7366e38a6740788ca4aa1e6de613d58a9", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -23,7 +23,7 @@ LL |     a.iter().map(|_: &(u16, u16)| 45);\n    |              expected due to this\n    |\n    = note: expected closure signature `fn(&(u32, u32)) -> _`\n-              found closure signature `for<'r> fn(&'r (u16, u16)) -> _`\n+              found closure signature `for<'a> fn(&'a (u16, u16)) -> _`\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |"}, {"sha": "a7ef8fa08923fd5e5c8245e22570c62e174435d6", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |     baz(|_| ());\n    |     ^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected trait `for<'r> Fn<(&'r (),)>`\n+   = note: expected trait `for<'a> Fn<(&'a (),)>`\n               found trait `Fn<(&(),)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/closure-mismatch.rs:8:9"}, {"sha": "5794e606eeb93051882c92641504984479adef60", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -10,7 +10,7 @@ LL |     apply(&3, takes_mut);\n    |     required by a bound introduced by this call\n    |\n    = note: expected function signature `fn(&{integer}) -> _`\n-              found function signature `for<'r> fn(&'r mut isize) -> _`\n+              found function signature `for<'a> fn(&'a mut isize) -> _`\n note: required by a bound in `apply`\n   --> $DIR/fn-variance-1.rs:5:37\n    |\n@@ -29,7 +29,7 @@ LL |     apply(&mut 3, takes_imm);\n    |     required by a bound introduced by this call\n    |\n    = note: expected function signature `fn(&mut {integer}) -> _`\n-              found function signature `for<'r> fn(&'r isize) -> _`\n+              found function signature `for<'a> fn(&'a isize) -> _`\n note: required by a bound in `apply`\n   --> $DIR/fn-variance-1.rs:5:37\n    |"}, {"sha": "906001ca1e09ee026b7d5fef1f02482310244bc4", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,8 +6,8 @@ LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n    |                                |\n    |                                expected due to this\n    |\n-   = note: expected closure signature `for<'r> fn(&'r &str) -> _`\n-              found closure signature `for<'r> fn(&'r str) -> _`\n+   = note: expected closure signature `for<'a> fn(&'a &str) -> _`\n+              found closure signature `for<'a> fn(&'a str) -> _`\n note: required by a bound in `filter`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |"}, {"sha": "d2d26b23d646e74380c740c66bd393c62e0874bd", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) mut &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrNamed('t0) }) i32)),\n+               for<'a, 'b, 'c> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) mut &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrNamed('c) }) i32)),\n                (),\n            ]\n "}, {"sha": "6355d3295247f3cc6ac630d680c82bb820cdce59", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) mut &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) i32)),\n+               for<'a, 'b> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) mut &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) i32)),\n                (),\n            ]\n "}, {"sha": "5f9724ce3db19c968fdfb24642c35d318a5e2e03", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) u32>)),\n+               for<'a, 'b> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#4r"}, {"sha": "ec728ebd5adf53d16c7a0d2145f7de72838aeaec", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrNamed('t0) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('t1) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrNamed('t2) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrNamed('t3) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('t1) }) u32>)),\n+               for<'a, 'b, 'c, 'd, 'e, 'f> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrNamed('c) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('d) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrNamed('e) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrNamed('f) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('d) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "01293379700d28ca717a24e470761d8fff529851", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ LL |     foo(cell, |cell_a, cell_x| {\n    |\n    = note: defining type: case1::{closure#0} with closure substs [\n                i32,\n-               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) u32>)),\n+               for<'a> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) u32>)),\n                (),\n            ]\n \n@@ -36,7 +36,7 @@ LL |     foo(cell, |cell_a, cell_x| {\n    |\n    = note: defining type: case2::{closure#0} with closure substs [\n                i32,\n-               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) u32>)),\n+               for<'a> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) u32>)),\n                (),\n            ]\n    = note: number of external vids: 2"}, {"sha": "ce85b20b344e24bc4024c9473829590843f32d60", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrNamed('t0) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('t1) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrNamed('t2) }) u32>)),\n+               for<'a, 'b, 'c, 'd, 'e> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrNamed('c) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('d) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrNamed('e) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#2r"}, {"sha": "20c7967b78bc95658f4eb61b682724bff9a63594", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrNamed('t0) }) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('t1) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrNamed('t2) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrNamed('t3) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('t1) }) u32>)),\n+               for<'a, 'b, 'c, 'd, 'e, 'f> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrNamed('c) }) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('d) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrNamed('e) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrNamed('f) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('d) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "f7db5ab1f27a0ae53474b1f7b9687df184a23b36", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) u32>)),\n+               for<'a, 'b> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "3488edc75e10288b7980dd3cd09d650ac1b9e6f3", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ LL |         |_outlives1, _outlives2, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) u32>)),\n+               for<'a, 'b> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "0dc2d0de98fe7e62f370bd329c425d9de3006b69", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrNamed('t0) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('t1) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrNamed('t2) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) u32>)),\n+               for<'a, 'b, 'c, 'd, 'e> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrNamed('c) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('d) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrNamed('e) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#2r"}, {"sha": "4c9e026ea522ce8284998560eba72f5c0f59ef88", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrNamed('t0) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('t1) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrNamed('t2) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrNamed('t3) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('t1) }) u32>)),\n+               for<'a, 'b, 'c, 'd, 'e, 'f> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrNamed('c) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('d) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrNamed('e) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrNamed('f) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrNamed('d) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "68429142edecd2dd6bc1dfedbaa3f8631f7f21f2", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ LL |     expect_sig(|a, b| b); // ought to return `a`\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) i32)) -> &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) i32,\n+               for<'a, 'b> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) i32)) -> &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) i32,\n                (),\n            ]\n "}, {"sha": "6e96f40c0e0d86d8a8421a4cb7a3b50eeae31aaf", "filename": "src/test/ui/nll/issue-57642-higher-ranked-subtype.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,23 +1,23 @@\n-error[E0599]: the function or associated item `make_g` exists for fn pointer `for<'r> fn(&'r ())`, but its trait bounds were not satisfied\n+error[E0599]: the function or associated item `make_g` exists for fn pointer `for<'a> fn(&'a ())`, but its trait bounds were not satisfied\n   --> $DIR/issue-57642-higher-ranked-subtype.rs:31:25\n    |\n LL |     let x = <fn (&())>::make_g();\n-   |                         ^^^^^^ function or associated item cannot be called on `for<'r> fn(&'r ())` due to unsatisfied trait bounds\n+   |                         ^^^^^^ function or associated item cannot be called on `for<'a> fn(&'a ())` due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n-           `for<'r> fn(&'r ()): X`\n+           `for<'a> fn(&'a ()): X`\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `X` defines an item `make_g`, perhaps you need to implement it\n   --> $DIR/issue-57642-higher-ranked-subtype.rs:4:1\n    |\n LL | trait X {\n    | ^^^^^^^\n \n-error[E0599]: no function or associated item named `make_f` found for fn pointer `for<'r> fn(&'r ())` in the current scope\n+error[E0599]: no function or associated item named `make_f` found for fn pointer `for<'a> fn(&'a ())` in the current scope\n   --> $DIR/issue-57642-higher-ranked-subtype.rs:35:25\n    |\n LL |     let x = <fn (&())>::make_f();\n-   |                         ^^^^^^ function or associated item not found in `for<'r> fn(&'r ())`\n+   |                         ^^^^^^ function or associated item not found in `for<'a> fn(&'a ())`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Y` defines an item `make_f`, perhaps you need to implement it"}, {"sha": "46440c021f543a362cd1a2b9b5698543bcefb290", "filename": "src/test/ui/nll/issue-97997.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fissue-97997.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fissue-97997.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-97997.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -4,7 +4,7 @@ error: implementation of `Foo` is not general enough\n LL |     <fn(&u8) as Foo>::ASSOC;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = note: `Foo` would have to be implemented for the type `for<'r> fn(&'r u8)`\n+   = note: `Foo` would have to be implemented for the type `for<'a> fn(&'a u8)`\n    = note: ...but `Foo` is actually implemented for the type `fn(&'0 u8)`, for some specific lifetime `'0`\n \n error: implementation of `Foo` is not general enough\n@@ -13,7 +13,7 @@ error: implementation of `Foo` is not general enough\n LL |     <fn(&u8) as Foo>::ASSOC;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = note: `Foo` would have to be implemented for the type `for<'r> fn(&'r u8)`\n+   = note: `Foo` would have to be implemented for the type `for<'a> fn(&'a u8)`\n    = note: ...but `Foo` is actually implemented for the type `fn(&'0 u8)`, for some specific lifetime `'0`\n \n error: aborting due to 2 previous errors"}, {"sha": "b945ffedda5ae55bb73c556619abaa0d29a54d56", "filename": "src/test/ui/nll/relate_tys/impl-fn-ignore-binder-via-bottom.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -4,7 +4,7 @@ error: implementation of `Y` is not general enough\n LL |     let _x = <fn(&())>::make_f();\n    |              ^^^^^^^^^^^^^^^^^^^ implementation of `Y` is not general enough\n    |\n-   = note: `Y` would have to be implemented for the type `for<'r> fn(&'r ())`\n+   = note: `Y` would have to be implemented for the type `for<'a> fn(&'a ())`\n    = note: ...but `Y` is actually implemented for the type `fn(&'0 ())`, for some specific lifetime `'0`\n \n error: implementation of `Y` is not general enough\n@@ -13,7 +13,7 @@ error: implementation of `Y` is not general enough\n LL |     let _x = <fn(&())>::make_f();\n    |              ^^^^^^^^^^^^^^^^^^^ implementation of `Y` is not general enough\n    |\n-   = note: `Y` would have to be implemented for the type `for<'r> fn(&'r ())`\n+   = note: `Y` would have to be implemented for the type `for<'a> fn(&'a ())`\n    = note: ...but `Y` is actually implemented for the type `fn(&'0 ())`, for some specific lifetime `'0`\n \n error: implementation of `Y` is not general enough\n@@ -22,7 +22,7 @@ error: implementation of `Y` is not general enough\n LL |     let _x = <fn(&())>::make_f();\n    |              ^^^^^^^^^^^^^^^^^^^ implementation of `Y` is not general enough\n    |\n-   = note: `Y` would have to be implemented for the type `for<'r> fn(&'r ())`\n+   = note: `Y` would have to be implemented for the type `for<'a> fn(&'a ())`\n    = note: ...but `Y` is actually implemented for the type `fn(&'0 ())`, for some specific lifetime `'0`\n \n error: aborting due to 3 previous errors"}, {"sha": "fe801b42c0a49462c0da59f3c75d42a28851beb9", "filename": "src/test/ui/nll/relate_tys/universe-violation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Funiverse-violation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Funiverse-violation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Funiverse-violation.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let b: fn(&u32) -> &u32 = a;\n    |                               ^ one type is more general than the other\n    |\n-   = note: expected fn pointer `for<'r> fn(&'r u32) -> &'r u32`\n+   = note: expected fn pointer `for<'a> fn(&'a u32) -> &'a u32`\n               found fn pointer `fn(&u32) -> &u32`\n \n error: aborting due to previous error"}, {"sha": "61c7d2550caad3958688e111c4aa2ebd2a5df9a6", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    |\n    = note: defining type: generic::<T>::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) T)),\n+               for<'a, 'b> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) T)),\n                (),\n            ]\n    = note: number of external vids: 2\n@@ -28,7 +28,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    |\n    = note: defining type: generic_fail::<T>::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('r) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('s) }) T)),\n+               for<'a, 'b> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed('a) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed('b) }) T)),\n                (),\n            ]\n    = note: late-bound region is '_#2r"}, {"sha": "4461567df0a2a6d046dd9b162fd2ce5d1edf8143", "filename": "src/test/ui/opt-in-copy.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fopt-in-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fopt-in-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fopt-in-copy.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,20 +1,20 @@\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/opt-in-copy.rs:7:6\n+  --> $DIR/opt-in-copy.rs:7:15\n    |\n LL |     but_i_cant: CantCopyThis,\n    |     ------------------------ this field does not implement `Copy`\n ...\n LL | impl Copy for IWantToCopyThis {}\n-   |      ^^^^\n+   |               ^^^^^^^^^^^^^^^\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/opt-in-copy.rs:19:6\n+  --> $DIR/opt-in-copy.rs:19:15\n    |\n LL |     ButICant(CantCopyThisEither),\n    |              ------------------ this field does not implement `Copy`\n ...\n LL | impl Copy for IWantToCopyThisToo {}\n-   |      ^^^^\n+   |               ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2485f5b8552020a256c7bbed7eb6a7a98d9827d4", "filename": "src/test/ui/parser/empty-impl-semicolon.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fparser%2Fempty-impl-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fparser%2Fempty-impl-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fempty-impl-semicolon.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1 +1,4 @@\n-impl Foo; //~ ERROR expected one of `!`, `(`, `+`, `::`, `<`, `for`, `where`, or `{`, found `;`\n+struct Foo;\n+impl Foo; //~ ERROR expected `{}`, found `;`\n+\n+fn main() {}"}, {"sha": "6ed309eba9392e15ad7471dd9073f3acd8fe6902", "filename": "src/test/ui/parser/empty-impl-semicolon.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fparser%2Fempty-impl-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fparser%2Fempty-impl-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fempty-impl-semicolon.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,8 +1,10 @@\n-error: expected one of `!`, `(`, `+`, `::`, `<`, `for`, `where`, or `{`, found `;`\n-  --> $DIR/empty-impl-semicolon.rs:1:9\n+error: expected `{}`, found `;`\n+  --> $DIR/empty-impl-semicolon.rs:2:9\n    |\n LL | impl Foo;\n-   |         ^ expected one of 8 possible tokens\n+   |         ^\n+   |\n+   = help: try using `{}` instead\n \n error: aborting due to previous error\n "}, {"sha": "4edac588eee9770fb265057b3c7b2a8430a06d99", "filename": "src/test/ui/parser/item-needs-block.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fparser%2Fitem-needs-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fparser%2Fitem-needs-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-needs-block.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -0,0 +1,10 @@\n+trait Trait;\n+//~^ ERROR expected `{}`, found `;`\n+\n+impl Trait for ();\n+//~^ ERROR expected `{}`, found `;`\n+\n+enum Enum;\n+//~^ ERROR expected `{}`, found `;`\n+\n+fn main() {}"}, {"sha": "3cabd0c73a3c93918d4089395ebcb41fd33e9334", "filename": "src/test/ui/parser/item-needs-block.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fparser%2Fitem-needs-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fparser%2Fitem-needs-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-needs-block.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -0,0 +1,26 @@\n+error: expected `{}`, found `;`\n+  --> $DIR/item-needs-block.rs:1:12\n+   |\n+LL | trait Trait;\n+   |            ^\n+   |\n+   = help: try using `{}` instead\n+\n+error: expected `{}`, found `;`\n+  --> $DIR/item-needs-block.rs:4:18\n+   |\n+LL | impl Trait for ();\n+   |                  ^\n+   |\n+   = help: try using `{}` instead\n+\n+error: expected `{}`, found `;`\n+  --> $DIR/item-needs-block.rs:7:10\n+   |\n+LL | enum Enum;\n+   |          ^\n+   |\n+   = help: try using `{}` instead\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "7b7c734a99a1c73a17847c46be8d85119b2325a6", "filename": "src/test/ui/privacy/associated-item-privacy-inherent.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -11,11 +11,11 @@ mod priv_nominal {\n \n     pub macro mac() {\n         let value = Pub::method;\n-        //~^ ERROR type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+        //~^ ERROR type `for<'a> fn(&'a priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n         value;\n-        //~^ ERROR type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+        //~^ ERROR type `for<'a> fn(&'a priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n         Pub.method();\n-        //~^ ERROR type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+        //~^ ERROR type `for<'a> fn(&'a priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n         Pub::CONST;\n         //~^ ERROR associated constant `CONST` is private\n         // let _: Pub::AssocTy;"}, {"sha": "f4d4ee459204d1ea71ef8daf3c9011f4a15924d9", "filename": "src/test/ui/privacy/associated-item-privacy-inherent.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,4 +1,4 @@\n-error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+error: type `for<'a> fn(&'a priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n   --> $DIR/associated-item-privacy-inherent.rs:13:21\n    |\n LL |         let value = Pub::method;\n@@ -9,7 +9,7 @@ LL |     priv_nominal::mac!();\n    |\n    = note: this error originates in the macro `priv_nominal::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+error: type `for<'a> fn(&'a priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n   --> $DIR/associated-item-privacy-inherent.rs:15:9\n    |\n LL |         value;\n@@ -20,7 +20,7 @@ LL |     priv_nominal::mac!();\n    |\n    = note: this error originates in the macro `priv_nominal::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+error: type `for<'a> fn(&'a priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n   --> $DIR/associated-item-privacy-inherent.rs:17:13\n    |\n LL |         Pub.method();"}, {"sha": "ad9a5e15c4e6e4376ff1d1e9dc014a34f4c4ebf9", "filename": "src/test/ui/privacy/associated-item-privacy-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -13,11 +13,11 @@ mod priv_trait {\n \n     pub macro mac() {\n         let value = <Pub as PrivTr>::method;\n-        //~^ ERROR type `for<'r> fn(&'r priv_trait::Pub) {<priv_trait::Pub as PrivTr>::method}` is private\n+        //~^ ERROR type `for<'a> fn(&'a priv_trait::Pub) {<priv_trait::Pub as PrivTr>::method}` is private\n         value;\n-        //~^ ERROR type `for<'r> fn(&'r priv_trait::Pub) {<priv_trait::Pub as PrivTr>::method}` is private\n+        //~^ ERROR type `for<'a> fn(&'a priv_trait::Pub) {<priv_trait::Pub as PrivTr>::method}` is private\n         Pub.method();\n-        //~^ ERROR type `for<'r> fn(&'r Self) {<Self as PrivTr>::method}` is private\n+        //~^ ERROR type `for<'a> fn(&'a Self) {<Self as PrivTr>::method}` is private\n         <Pub as PrivTr>::CONST;\n         //~^ ERROR associated constant `<Pub as PrivTr>::CONST` is private\n         let _: <Pub as PrivTr>::AssocTy;"}, {"sha": "c4be1a9d9a2027ddc6f9eae41386b5793ea302cb", "filename": "src/test/ui/privacy/associated-item-privacy-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,4 +1,4 @@\n-error: type `for<'r> fn(&'r priv_trait::Pub) {<priv_trait::Pub as PrivTr>::method}` is private\n+error: type `for<'a> fn(&'a priv_trait::Pub) {<priv_trait::Pub as PrivTr>::method}` is private\n   --> $DIR/associated-item-privacy-trait.rs:15:21\n    |\n LL |         let value = <Pub as PrivTr>::method;\n@@ -9,7 +9,7 @@ LL |     priv_trait::mac!();\n    |\n    = note: this error originates in the macro `priv_trait::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: type `for<'r> fn(&'r priv_trait::Pub) {<priv_trait::Pub as PrivTr>::method}` is private\n+error: type `for<'a> fn(&'a priv_trait::Pub) {<priv_trait::Pub as PrivTr>::method}` is private\n   --> $DIR/associated-item-privacy-trait.rs:17:9\n    |\n LL |         value;\n@@ -20,7 +20,7 @@ LL |     priv_trait::mac!();\n    |\n    = note: this error originates in the macro `priv_trait::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: type `for<'r> fn(&'r Self) {<Self as PrivTr>::method}` is private\n+error: type `for<'a> fn(&'a Self) {<Self as PrivTr>::method}` is private\n   --> $DIR/associated-item-privacy-trait.rs:19:13\n    |\n LL |         Pub.method();"}, {"sha": "0337aedd0088165222b794c3327254c51b8947e7", "filename": "src/test/ui/privacy/private-inferred-type-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@\n // error-pattern:type `fn() {<u8 as ext::PrivTrait>::method}` is private\n // error-pattern:type `fn(u8) -> ext::PrivTupleStruct {ext::PrivTupleStruct}` is private\n // error-pattern:type `fn(u8) -> PubTupleStruct {PubTupleStruct}` is private\n-// error-pattern:type `for<'r> fn(&'r Pub<u8>) {Pub::<u8>::priv_method}` is private\n+// error-pattern:type `for<'a> fn(&'a Pub<u8>) {Pub::<u8>::priv_method}` is private\n \n #![feature(decl_macro)]\n "}, {"sha": "00b61512de6b4d3176a3a509dc348b45505335e5", "filename": "src/test/ui/privacy/private-inferred-type-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -46,7 +46,7 @@ LL |     ext::m!();\n    |\n    = note: this error originates in the macro `ext::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: type `for<'r> fn(&'r Pub<u8>) {Pub::<u8>::priv_method}` is private\n+error: type `for<'a> fn(&'a Pub<u8>) {Pub::<u8>::priv_method}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();"}, {"sha": "e8743dd968feb0fc78ce2b5aee6c57e67439c9d2", "filename": "src/test/ui/privacy/private-inferred-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -47,7 +47,7 @@ mod m {\n         PubTupleStruct;\n         //~^ ERROR type `fn(u8) -> PubTupleStruct {PubTupleStruct}` is private\n         Pub(0u8).priv_method();\n-        //~^ ERROR type `for<'r> fn(&'r Pub<u8>) {Pub::<u8>::priv_method}` is private\n+        //~^ ERROR type `for<'a> fn(&'a Pub<u8>) {Pub::<u8>::priv_method}` is private\n     }\n \n     trait Trait {}"}, {"sha": "fc3f9ab62bfa9ad23fbd31d2e5564031ec8dcb71", "filename": "src/test/ui/privacy/private-inferred-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -161,7 +161,7 @@ LL |     m::m!();\n    |\n    = note: this error originates in the macro `m::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: type `for<'r> fn(&'r Pub<u8>) {Pub::<u8>::priv_method}` is private\n+error: type `for<'a> fn(&'a Pub<u8>) {Pub::<u8>::priv_method}` is private\n   --> $DIR/private-inferred-type.rs:49:18\n    |\n LL |         Pub(0u8).priv_method();"}, {"sha": "29f158366f026f18ff1f004f3d26c07443f313ee", "filename": "src/test/ui/regions/issue-101280.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fregions%2Fissue-101280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fregions%2Fissue-101280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-101280.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -0,0 +1,10 @@\n+use std::cell::Cell;\n+\n+type Ty = for<'r> fn(Cell<(&'r i32, &'r i32)>);\n+\n+fn f<'r>(f: fn(Cell<(&'r i32, &i32)>)) -> Ty {\n+    f\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "320d008aeff2f51fc18b93335f69edaec00994ea", "filename": "src/test/ui/regions/issue-101280.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fregions%2Fissue-101280.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fregions%2Fissue-101280.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-101280.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-101280.rs:6:5\n+   |\n+LL | fn f<'r>(f: fn(Cell<(&'r i32, &i32)>)) -> Ty {\n+   |                                           -- expected `for<'r> fn(Cell<(&'r i32, &'r i32)>)` because of return type\n+LL |     f\n+   |     ^ one type is more general than the other\n+   |\n+   = note: expected fn pointer `for<'r> fn(Cell<(&'r i32, &'r i32)>)`\n+              found fn pointer `for<'a> fn(Cell<(&'r i32, &'a i32)>)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "3b62c7b61c1b1082d9d885a84ba49508622c53b5", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |                                           ^ one type is more general than the other\n    |\n-   = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-                 found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n+   = note: expected fn pointer `for<'a, 'b, 'c, 'd> fn(&'a mut &'b isize, &'c mut &'d isize)`\n+                 found fn item `for<'a, 'b> fn(&'a mut &isize, &'b mut &isize) {a::<'_, '_>}`\n \n error: aborting due to previous error\n "}, {"sha": "8a18a234b5c4eb38de5a29bf49deeae19cbf2305", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n    |                                                        ^ one type is more general than the other\n    |\n-   = note: expected fn pointer `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n-                 found fn item `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize) {a::<'_, '_, '_>}`\n+   = note: expected fn pointer `for<'a, 'b, 'c, 'd, 'e, 'f> fn(&'a mut &'b isize, &'c mut &'d isize, &'e mut &'f isize)`\n+                 found fn item `for<'a, 'b, 'c> fn(&'a mut &isize, &'b mut &isize, &'c mut &isize) {a::<'_, '_, '_>}`\n \n error: aborting due to previous error\n "}, {"sha": "8d82ff958ff3a9d4f80e6f83a8b4b37fa48b2bf3", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -7,7 +7,7 @@ LL |     want_G(baz);\n    |     arguments to this function are incorrect\n    |\n    = note: expected fn pointer `for<'cx> fn(&'cx S) -> &'static S`\n-                 found fn item `for<'r> fn(&'r S) -> &'r S {baz}`\n+                 found fn item `for<'a> fn(&'a S) -> &'a S {baz}`\n note: function defined here\n   --> $DIR/regions-fn-subtyping-return-static-fail.rs:20:4\n    |"}, {"sha": "17a9019436a1e0d6f8eed17babafe4a8227210fe", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |                                           ^ one type is more general than the other\n    |\n-   = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-                 found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n+   = note: expected fn pointer `for<'a, 'b, 'c, 'd> fn(&'a mut &'b isize, &'c mut &'d isize)`\n+                 found fn item `for<'a, 'b> fn(&'a mut &isize, &'b mut &isize) {a::<'_, '_>}`\n \n error: aborting due to previous error\n "}, {"sha": "b29b633cff644ad724b2c5af1c14ce42d7704b64", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-and-const-params.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-and-const-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-and-const-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-and-const-params.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -0,0 +1,34 @@\n+// check-pass\n+#![feature(const_trait_impl)]\n+#![feature(generic_arg_infer)]\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: usize>;\n+\n+impl<const N: usize> Foo<N> {\n+   fn add<A: ~const Add42>(self) -> Foo<{ A::add(N) }> {\n+      Foo\n+   }\n+}\n+\n+#[const_trait]\n+trait Add42 {\n+    fn add(a: usize) -> usize;\n+}\n+\n+impl const Add42 for () {\n+    fn add(a: usize) -> usize {\n+        a + 42\n+    }\n+}\n+\n+fn bar<A: ~const Add42, const N: usize>(_: Foo<N>) -> Foo<{ A::add(N) }> {\n+    Foo\n+}\n+\n+fn main() {\n+   let foo = Foo::<0>;\n+   let foo = bar::<(), _>(foo);\n+   let _foo = bar::<(), _>(foo);\n+}"}, {"sha": "350be4d8250d65e489aa37fb63430b49b377548f", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -17,12 +17,6 @@ fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n //~^ ERROR `~const` is not allowed\n \n-fn generic<P: ~const T>() {}\n-//~^ ERROR `~const` is not allowed\n-\n-fn where_clause<P>() where P: ~const T {}\n-//~^ ERROR `~const` is not allowed\n-\n struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n //~^ ERROR `~const` and `?` are mutually exclusive\n "}, {"sha": "8d781d063d1c08fbe5c786e40aca10476978913a", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.stderr", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -4,53 +4,37 @@ error: `~const` is not allowed here\n LL | fn rpit() -> impl ~const T { S }\n    |                   ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:11:17\n    |\n LL | fn apit(_: impl ~const T) {}\n    |                 ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:14:50\n    |\n LL | fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n    |                                                  ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:17:48\n    |\n LL | fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n    |                                                ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n-\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:20:15\n-   |\n-LL | fn generic<P: ~const T>() {}\n-   |               ^^^^^^^^\n-   |\n-   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n-\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:23:31\n-   |\n-LL | fn where_clause<P>() where P: ~const T {}\n-   |                               ^^^^^^^^\n-   |\n-   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` and `?` are mutually exclusive\n-  --> $DIR/tilde-const-invalid-places.rs:26:25\n+  --> $DIR/tilde-const-invalid-places.rs:20:25\n    |\n LL | struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n    |                         ^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "945c6533c797b72eebbf08d64665470dbe5e99e5", "filename": "src/test/ui/rfc1623-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Frfc1623-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Frfc1623-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623-2.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -23,7 +23,7 @@ help: consider making the type lifetime-generic with a new `'a` lifetime\n LL |     &(non_elidable as for<'a> fn(&'a u8, &'a u8) -> &'a u8);\n    |                       +++++++     ++      ++         ++\n \n-error[E0605]: non-primitive cast: `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8 {non_elidable}` as `for<'r, 's> fn(&'r u8, &'s u8) -> &u8`\n+error[E0605]: non-primitive cast: `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8 {non_elidable}` as `for<'a, 'b> fn(&'a u8, &'b u8) -> &u8`\n   --> $DIR/rfc1623-2.rs:10:6\n    |\n LL |     &(non_elidable as fn(&u8, &u8) -> &u8);"}, {"sha": "0b2166eed7ead932a6b47d449fa8dd3814f6d65a", "filename": "src/test/ui/span/E0204.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0204.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,11 +1,11 @@\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/E0204.rs:5:6\n+  --> $DIR/E0204.rs:5:15\n    |\n LL |     foo: Vec<u32>,\n    |     ------------- this field does not implement `Copy`\n ...\n LL | impl Copy for Foo { }\n-   |      ^^^^\n+   |               ^^^\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n   --> $DIR/E0204.rs:7:10\n@@ -19,13 +19,13 @@ LL |     ty: &'a mut bool,\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/E0204.rs:17:6\n+  --> $DIR/E0204.rs:17:15\n    |\n LL |     Bar { x: Vec<u32> },\n    |           ----------- this field does not implement `Copy`\n ...\n LL | impl Copy for EFoo { }\n-   |      ^^^^\n+   |               ^^^^\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n   --> $DIR/E0204.rs:19:10"}, {"sha": "f05dba1d4ca7e44242bd739f4090eeda0266dd7a", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -220,15 +220,15 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:41:20\n    |\n LL |     fn ban(&self) -> usize { 42 }\n-   |     ---------------------- for<'r> fn(&'r X) -> usize {<X as T>::ban} defined here\n+   |     ---------------------- for<'a> fn(&'a X) -> usize {<X as T>::ban} defined here\n ...\n LL |     let _: usize = X::ban;\n    |            -----   ^^^^^^ expected `usize`, found fn item\n    |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n-           found fn item `for<'r> fn(&'r X) -> usize {<X as T>::ban}`\n+           found fn item `for<'a> fn(&'a X) -> usize {<X as T>::ban}`\n help: use parentheses to call this associated function\n    |\n LL |     let _: usize = X::ban(/* &X */);\n@@ -238,15 +238,15 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:42:20\n    |\n LL |     fn bal(&self) -> usize;\n-   |     ----------------------- for<'r> fn(&'r X) -> usize {<X as T>::bal} defined here\n+   |     ----------------------- for<'a> fn(&'a X) -> usize {<X as T>::bal} defined here\n ...\n LL |     let _: usize = X::bal;\n    |            -----   ^^^^^^ expected `usize`, found fn item\n    |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n-           found fn item `for<'r> fn(&'r X) -> usize {<X as T>::bal}`\n+           found fn item `for<'a> fn(&'a X) -> usize {<X as T>::bal}`\n help: use parentheses to call this associated function\n    |\n LL |     let _: usize = X::bal(/* &X */);"}, {"sha": "81758a7007c215b6ec1955fd98e7007ba3107ea7", "filename": "src/test/ui/suggestions/issue-101984.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsuggestions%2Fissue-101984.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsuggestions%2Fissue-101984.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-101984.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -2,11 +2,11 @@ error[E0308]: mismatched types\n   --> $DIR/issue-101984.rs:21:13\n    |\n LL |         let (cmp, router) = self.router.at()?;\n-   |             ^^^^^^^^^^^^^   ----------------- this expression has type `Match<&(for<'r> fn(&'r ()), Box<Wrapper>)>`\n+   |             ^^^^^^^^^^^^^   ----------------- this expression has type `Match<&(for<'a> fn(&'a ()), Box<Wrapper>)>`\n    |             |\n    |             expected struct `Match`, found tuple\n    |\n-   = note: expected struct `Match<&(for<'r> fn(&'r ()), Box<Wrapper>)>`\n+   = note: expected struct `Match<&(for<'a> fn(&'a ()), Box<Wrapper>)>`\n                found tuple `(_, _)`\n \n error: aborting due to previous error"}, {"sha": "9e6f0d9ebbd27fdfdeabd7693844e0dba0913f24", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,11 +1,11 @@\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/missing-bound-in-manual-copy-impl-2.rs:16:9\n+  --> $DIR/missing-bound-in-manual-copy-impl-2.rs:16:18\n    |\n LL | struct Wrapper<T>(T);\n    |                   - this field does not implement `Copy`\n ...\n LL | impl<S> Copy for Wrapper<OnlyCopyIfDisplay<S>> {}\n-   |         ^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the `Copy` impl for `OnlyCopyIfDisplay<S>` requires that `S: std::fmt::Display`\n   --> $DIR/missing-bound-in-manual-copy-impl-2.rs:4:19"}, {"sha": "fe2d133c8aa74910c310cd9a595b8666bf3745b5", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,11 +1,11 @@\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/missing-bound-in-manual-copy-impl.rs:6:9\n+  --> $DIR/missing-bound-in-manual-copy-impl.rs:6:18\n    |\n LL | struct Wrapper<T>(T);\n    |                   - this field does not implement `Copy`\n LL |\n LL | impl<S> Copy for Wrapper<S> {}\n-   |         ^^^^\n+   |                  ^^^^^^^^^^\n    |\n help: consider restricting type parameter `S`\n    |"}, {"sha": "8b856d8de70337926504ac4dd97371e07d699216", "filename": "src/test/ui/suggestions/return-closures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsuggestions%2Freturn-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsuggestions%2Freturn-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-closures.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/return-closures.rs:3:5\n    |\n LL | fn foo() {\n-   |          - help: try adding a return type: `-> impl for<'r> Fn(&'r i32) -> i32`\n+   |          - help: try adding a return type: `-> impl for<'a> Fn(&'a i32) -> i32`\n LL |\n LL |     |x: &i32| 1i32\n    |     ^^^^^^^^^^^^^^ expected `()`, found closure"}, {"sha": "3d438df92b85da609b30a059a15b887c268fc4d8", "filename": "src/test/ui/symbol-names/impl1.legacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -64,7 +64,7 @@ error: demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::A\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)\n+error: def-path(<[&dyn Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)\n   --> $DIR/impl1.rs:69:13\n    |\n LL |             #[rustc_def_path]"}, {"sha": "629c2f33ddcc69ab62558b12388e6ab9970bf7c3", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -67,8 +67,8 @@ fn main() {\n                 //[v0]~| ERROR demangling(<[&dyn\n                 //[v0]~| ERROR demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n             #[rustc_def_path]\n-            //[legacy]~^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)\n-               //[v0]~^^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)\n+            //[legacy]~^ ERROR def-path(<[&dyn Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)\n+               //[v0]~^^ ERROR def-path(<[&dyn Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)\n             fn method(&self) {}\n         }\n     };"}, {"sha": "33caad71f52fe32ad1646991968e99bb02366207", "filename": "src/test/ui/symbol-names/impl1.v0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -64,7 +64,7 @@ error: demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ..\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)\n+error: def-path(<[&dyn Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)\n   --> $DIR/impl1.rs:69:13\n    |\n LL |             #[rustc_def_path]"}, {"sha": "10e82c54e0f2b16bd984d7d4c84f69eb8c98d7a8", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -4,7 +4,7 @@ error[E0277]: expected a `FnOnce<(&i32,)>` closure, found `i32`\n LL |     f::<dyn for<'x> X<'x, F = i32>>();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(&i32,)>` closure, found `i32`\n    |\n-   = help: the trait `for<'r> FnOnce<(&'r i32,)>` is not implemented for `i32`\n+   = help: the trait `for<'a> FnOnce<(&'a i32,)>` is not implemented for `i32`\n note: required by a bound in `f`\n   --> $DIR/check-trait-object-bounds-2.rs:8:9\n    |"}, {"sha": "68b95b42b3463f32261aeb309084473118464ed1", "filename": "src/test/ui/traits/copy-impl-cannot-normalize.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: TraitFoo` is not satisfied\n-  --> $DIR/copy-impl-cannot-normalize.rs:22:1\n+  --> $DIR/copy-impl-cannot-normalize.rs:22:18\n    |\n LL | impl<T> Copy for Foo<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ the trait `TraitFoo` is not implemented for `T`\n+   |                  ^^^^^^ the trait `TraitFoo` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "6344f114a9131fcfa73b669b48bca5b2b0549386", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |         |x| x\n    |         ^^^^^ one type is more general than the other\n    |\n-   = note: expected trait `for<'r> Fn<(&'r X,)>`\n+   = note: expected trait `for<'a> Fn<(&'a X,)>`\n               found trait `Fn<(&X,)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-57611-trait-alias.rs:21:9"}, {"sha": "802696e1b2f94385615ef54f57e42f466427c837", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,44 +1,44 @@\n-error[E0277]: expected a `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+error[E0277]: expected a `Fn<(&isize,)>` closure, found `for<'a> unsafe fn(&'a isize) -> isize {square}`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:20:21\n    |\n LL |     let x = call_it(&square, 22);\n    |             ------- ^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for fn item `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = help: the trait `for<'a> Fn<(&'a isize,)>` is not implemented for fn item `for<'a> unsafe fn(&'a isize) -> isize {square}`\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:9:15\n    |\n LL | fn call_it<F: Fn(&isize) -> isize>(_: &F, _: isize) -> isize {\n    |               ^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it`\n \n-error[E0277]: expected a `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+error[E0277]: expected a `FnMut<(&isize,)>` closure, found `for<'a> unsafe fn(&'a isize) -> isize {square}`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:25:25\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n    |             ----------- ^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for fn item `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = help: the trait `for<'a> FnMut<(&'a isize,)>` is not implemented for fn item `for<'a> unsafe fn(&'a isize) -> isize {square}`\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:19\n    |\n LL | fn call_it_mut<F: FnMut(&isize) -> isize>(_: &mut F, _: isize) -> isize {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it_mut`\n \n-error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `for<'a> unsafe fn(&'a isize) -> isize {square}`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:30:26\n    |\n LL |     let z = call_it_once(square, 22);\n    |             ------------ ^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for fn item `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = help: the trait `for<'a> FnOnce<(&'a isize,)>` is not implemented for fn item `for<'a> unsafe fn(&'a isize) -> isize {square}`\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:15:20"}, {"sha": "0bbb9836c584024a32b6c8a4eae664e27a56d0c7", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-abi.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,42 +1,42 @@\n-error[E0277]: expected a `Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+error[E0277]: expected a `Fn<(&isize,)>` closure, found `for<'a> extern \"C\" fn(&'a isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-abi.rs:20:21\n    |\n LL |     let x = call_it(&square, 22);\n-   |             ------- ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |             ------- ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'a> extern \"C\" fn(&'a isize) -> isize {square}`\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for fn item `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   = help: the trait `for<'a> Fn<(&'a isize,)>` is not implemented for fn item `for<'a> extern \"C\" fn(&'a isize) -> isize {square}`\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-wrong-abi.rs:9:15\n    |\n LL | fn call_it<F: Fn(&isize) -> isize>(_: &F, _: isize) -> isize {\n    |               ^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it`\n \n-error[E0277]: expected a `FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+error[E0277]: expected a `FnMut<(&isize,)>` closure, found `for<'a> extern \"C\" fn(&'a isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-abi.rs:25:25\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ----------- ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |             ----------- ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'a> extern \"C\" fn(&'a isize) -> isize {square}`\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for fn item `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   = help: the trait `for<'a> FnMut<(&'a isize,)>` is not implemented for fn item `for<'a> extern \"C\" fn(&'a isize) -> isize {square}`\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-wrong-abi.rs:12:19\n    |\n LL | fn call_it_mut<F: FnMut(&isize) -> isize>(_: &mut F, _: isize) -> isize {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it_mut`\n \n-error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `for<'a> extern \"C\" fn(&'a isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-abi.rs:30:26\n    |\n LL |     let z = call_it_once(square, 22);\n-   |             ------------ ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |             ------------ ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'a> extern \"C\" fn(&'a isize) -> isize {square}`\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for fn item `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   = help: the trait `for<'a> FnOnce<(&'a isize,)>` is not implemented for fn item `for<'a> extern \"C\" fn(&'a isize) -> isize {square}`\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-wrong-abi.rs:15:20\n    |"}, {"sha": "31a66790ce08913fdbccf7b01996615e0d5830ad", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -6,7 +6,7 @@ LL |     let x = call_it(&square, 22);\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for fn item `unsafe fn(isize) -> isize {square}`\n+   = help: the trait `for<'a> Fn<(&'a isize,)>` is not implemented for fn item `unsafe fn(isize) -> isize {square}`\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:10:15\n@@ -22,7 +22,7 @@ LL |     let y = call_it_mut(&mut square, 22);\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for fn item `unsafe fn(isize) -> isize {square}`\n+   = help: the trait `for<'a> FnMut<(&'a isize,)>` is not implemented for fn item `unsafe fn(isize) -> isize {square}`\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:19\n@@ -38,7 +38,7 @@ LL |     let z = call_it_once(square, 22);\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for fn item `unsafe fn(isize) -> isize {square}`\n+   = help: the trait `for<'a> FnOnce<(&'a isize,)>` is not implemented for fn item `unsafe fn(isize) -> isize {square}`\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:16:20"}, {"sha": "53ee4dd2e5bdbab1fb15ebc3c13887c00cc2ca58", "filename": "src/test/ui/union/union-copy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b705839cd656d202e920efa8769cbe43a5ee269/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr?ref=8b705839cd656d202e920efa8769cbe43a5ee269", "patch": "@@ -1,11 +1,11 @@\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/union-copy.rs:12:6\n+  --> $DIR/union-copy.rs:12:15\n    |\n LL |     a: std::mem::ManuallyDrop<String>\n    |     --------------------------------- this field does not implement `Copy`\n ...\n LL | impl Copy for W {}\n-   |      ^^^^\n+   |               ^\n    |\n note: the `Copy` impl for `ManuallyDrop<String>` requires that `String: Copy`\n   --> $DIR/union-copy.rs:8:8"}]}