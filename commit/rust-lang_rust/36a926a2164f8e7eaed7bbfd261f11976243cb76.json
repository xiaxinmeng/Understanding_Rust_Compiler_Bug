{"sha": "36a926a2164f8e7eaed7bbfd261f11976243cb76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YTkyNmEyMTY0ZjhlN2VhZWQ3YmJmZDI2MWYxMTk3NjI0M2NiNzY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-01-13T23:11:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-01-13T23:11:34Z"}, "message": "rustbuild: Skip the build_helper crate in tests\n\nI've been noticing some spurious recompiles of the final stage on Travis lately\nand in debugging them I found a case where we were a little to eager to update\na stamp file due to the build_helper library being introduced during the testing\nphase.\n\nPart of the rustbuild system detects when libstd is recompiled and automatically\ncleans out future directories to ensure that dirtyness propagation works. To do\nthis rustbuild doesn't know the artifact name of the standard library so it just\nprobes everything in the target directory, looking to see if anything changed.\n\nThe problem here happened where:\n\n* First, rustbuild would compile everything (a normal build)\n* Next, rustbuild would run all tests\n* During testing, the libbuild_helper library was introduced into the target\n  directory, making it look like a change happened because a file is newer\n  than the newest was before\n* Detecting a change, the next compilation would then cause rustbuild to clean\n  out old artifacts and recompile everything again.\n\nThis commit fixes this problem by correcting rustbuild to just not test the\nbuild_helper crate at all. This crate doesn't have any unit tests, nor is it\nintended to. That way the target directories should stay the same throughout\ntesting after a previous build.", "tree": {"sha": "c27f6720fcc6fd7dccfba5af8c4d3cde4e5d082f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c27f6720fcc6fd7dccfba5af8c4d3cde4e5d082f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a926a2164f8e7eaed7bbfd261f11976243cb76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a926a2164f8e7eaed7bbfd261f11976243cb76", "html_url": "https://github.com/rust-lang/rust/commit/36a926a2164f8e7eaed7bbfd261f11976243cb76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a926a2164f8e7eaed7bbfd261f11976243cb76/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0c52c587fe9ba287053359fff5ed886b7edb27c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0c52c587fe9ba287053359fff5ed886b7edb27c", "html_url": "https://github.com/rust-lang/rust/commit/b0c52c587fe9ba287053359fff5ed886b7edb27c"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "4aca843558fd01275f7297c9f351b6bead67a895", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/36a926a2164f8e7eaed7bbfd261f11976243cb76/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a926a2164f8e7eaed7bbfd261f11976243cb76/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=36a926a2164f8e7eaed7bbfd261f11976243cb76", "patch": "@@ -373,10 +373,16 @@ pub fn krate(build: &Build,\n             let mut visited = HashSet::new();\n             let mut next = vec![root];\n             while let Some(name) = next.pop() {\n-                // Right now jemalloc is our only target-specific crate in the sense\n-                // that it's not present on all platforms. Custom skip it here for now,\n-                // but if we add more this probably wants to get more generalized.\n-                if !name.contains(\"jemalloc\") {\n+                // Right now jemalloc is our only target-specific crate in the\n+                // sense that it's not present on all platforms. Custom skip it\n+                // here for now, but if we add more this probably wants to get\n+                // more generalized.\n+                //\n+                // Also skip `build_helper` as it's not compiled normally for\n+                // target during the bootstrap and it's just meant to be a\n+                // helper crate, not tested. If it leaks through then it ends up\n+                // messing with various mtime calculations and such.\n+                if !name.contains(\"jemalloc\") && name != \"build_helper\" {\n                     cargo.arg(\"-p\").arg(name);\n                 }\n                 for dep in build.crates[name].deps.iter() {"}]}