{"sha": "f2702e922ba31e49d6167f5651d4545646dcf22d", "node_id": "C_kwDOAAsO6NoAKGYyNzAyZTkyMmJhMzFlNDlkNjE2N2Y1NjUxZDQ1NDU2NDZkY2YyMmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-25T02:16:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-25T02:16:57Z"}, "message": "Auto merge of #103502 - JohnTitor:rollup-o6mhyzq, r=JohnTitor\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #103333 (Fix assertion failed for break_last_token and trailing token)\n - #103350 (Change terminology for assoc method suggestions when they are not called)\n - #103382 (Don't ICE when reporting borrowck errors involving regions from `anonymous_lifetime_in_impl_trait`)\n - #103409 (Delay span bug when we can't map lifetimes back in `collect_trait_impl_trait_tys`)\n - #103410 (-Z docs: Add link to unstable book)\n - #103462 (rustdoc: remove no-op CSS `.source pre.rust { white-space: pre }`)\n - #103465 (E0210 explanation: remove redundant sentence)\n - #103486 (Use functions in highlight-colors rustdoc GUI test)\n - #103493 (rustdoc: remove unused `.sidebar-logo` DOM on source pages)\n - #103494 (rustdoc: remove redundant CSS `a.test-arrow:hover`)\n - #103495 (rustdoc: Use `unix_sigpipe` instead of `rustc_driver::set_sigpipe_handler`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b5a5a964027a222e70a770f008af9a70799c83f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5a5a964027a222e70a770f008af9a70799c83f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2702e922ba31e49d6167f5651d4545646dcf22d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2702e922ba31e49d6167f5651d4545646dcf22d", "html_url": "https://github.com/rust-lang/rust/commit/f2702e922ba31e49d6167f5651d4545646dcf22d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2702e922ba31e49d6167f5651d4545646dcf22d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "758f19645b8ebce61ea52d1f6672fd057bc8dbee", "url": "https://api.github.com/repos/rust-lang/rust/commits/758f19645b8ebce61ea52d1f6672fd057bc8dbee", "html_url": "https://github.com/rust-lang/rust/commit/758f19645b8ebce61ea52d1f6672fd057bc8dbee"}, {"sha": "d0ffd20a756be1334195ca3cc5fdf0127c1e6358", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ffd20a756be1334195ca3cc5fdf0127c1e6358", "html_url": "https://github.com/rust-lang/rust/commit/d0ffd20a756be1334195ca3cc5fdf0127c1e6358"}], "stats": {"total": 478, "additions": 376, "deletions": 102}, "files": [{"sha": "c044dbaba47e2faab5170228d73bd7c571302c0d", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 92, "deletions": 8, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -251,7 +251,8 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             .or_else(|| self.give_name_if_anonymous_region_appears_in_upvars(fr))\n             .or_else(|| self.give_name_if_anonymous_region_appears_in_output(fr))\n             .or_else(|| self.give_name_if_anonymous_region_appears_in_yield_ty(fr))\n-            .or_else(|| self.give_name_if_anonymous_region_appears_in_impl_signature(fr));\n+            .or_else(|| self.give_name_if_anonymous_region_appears_in_impl_signature(fr))\n+            .or_else(|| self.give_name_if_anonymous_region_appears_in_arg_position_impl_trait(fr));\n \n         if let Some(ref value) = value {\n             self.region_names.try_borrow_mut().unwrap().insert(fr, value.clone());\n@@ -869,13 +870,8 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             return None;\n         }\n \n-        let mut found = false;\n-        tcx.fold_regions(tcx.type_of(region_parent), |r: ty::Region<'tcx>, _| {\n-            if *r == ty::ReEarlyBound(region) {\n-                found = true;\n-            }\n-            r\n-        });\n+        let found = tcx\n+            .any_free_region_meets(&tcx.type_of(region_parent), |r| *r == ty::ReEarlyBound(region));\n \n         Some(RegionName {\n             name: self.synthesize_region_name(),\n@@ -888,4 +884,92 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             ),\n         })\n     }\n+\n+    fn give_name_if_anonymous_region_appears_in_arg_position_impl_trait(\n+        &self,\n+        fr: RegionVid,\n+    ) -> Option<RegionName> {\n+        let ty::ReEarlyBound(region) = *self.to_error_region(fr)? else {\n+            return None;\n+        };\n+        if region.has_name() {\n+            return None;\n+        };\n+\n+        let predicates = self\n+            .infcx\n+            .tcx\n+            .predicates_of(self.body.source.def_id())\n+            .instantiate_identity(self.infcx.tcx)\n+            .predicates;\n+\n+        if let Some(upvar_index) = self\n+            .regioncx\n+            .universal_regions()\n+            .defining_ty\n+            .upvar_tys()\n+            .position(|ty| self.any_param_predicate_mentions(&predicates, ty, region))\n+        {\n+            let (upvar_name, upvar_span) = self.regioncx.get_upvar_name_and_span_for_region(\n+                self.infcx.tcx,\n+                &self.upvars,\n+                upvar_index,\n+            );\n+            let region_name = self.synthesize_region_name();\n+\n+            Some(RegionName {\n+                name: region_name,\n+                source: RegionNameSource::AnonRegionFromUpvar(upvar_span, upvar_name),\n+            })\n+        } else if let Some(arg_index) = self\n+            .regioncx\n+            .universal_regions()\n+            .unnormalized_input_tys\n+            .iter()\n+            .position(|ty| self.any_param_predicate_mentions(&predicates, *ty, region))\n+        {\n+            let (arg_name, arg_span) = self.regioncx.get_argument_name_and_span_for_region(\n+                self.body,\n+                &self.local_names,\n+                arg_index,\n+            );\n+            let region_name = self.synthesize_region_name();\n+\n+            Some(RegionName {\n+                name: region_name,\n+                source: RegionNameSource::AnonRegionFromArgument(\n+                    RegionNameHighlight::CannotMatchHirTy(arg_span, arg_name?.to_string()),\n+                ),\n+            })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    fn any_param_predicate_mentions(\n+        &self,\n+        predicates: &[ty::Predicate<'tcx>],\n+        ty: Ty<'tcx>,\n+        region: ty::EarlyBoundRegion,\n+    ) -> bool {\n+        let tcx = self.infcx.tcx;\n+        ty.walk().any(|arg| {\n+            if let ty::GenericArgKind::Type(ty) = arg.unpack()\n+                && let ty::Param(_) = ty.kind()\n+            {\n+                predicates.iter().any(|pred| {\n+                    match pred.kind().skip_binder() {\n+                        ty::PredicateKind::Trait(data) if data.self_ty() == ty => {}\n+                        ty::PredicateKind::Projection(data) if data.projection_ty.self_ty() == ty => {}\n+                        _ => return false,\n+                    }\n+                    tcx.any_free_region_meets(pred, |r| {\n+                        *r == ty::ReEarlyBound(region)\n+                    })\n+                })\n+            } else {\n+                false\n+            }\n+        })\n+    }\n }"}, {"sha": "41263e5e3f5ac8381b9dba21e49d1efbfb2a857a", "filename": "compiler/rustc_error_codes/src/error_codes/E0210.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0210.md", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0210.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0210.md?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -76,7 +76,5 @@ Let `Ti` be the first such type.\n For information on the design of the orphan rules,\n see [RFC 2451] and [RFC 1023].\n \n-For information on the design of the orphan rules, see [RFC 1023].\n-\n [RFC 2451]: https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html\n [RFC 1023]: https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md"}, {"sha": "e72f18012ab338fce240ac21202e0439e279097a", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -598,8 +598,16 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n                 let num_impl_substs = tcx.generics_of(impl_m.container_id(tcx)).params.len();\n                 let ty = tcx.fold_regions(ty, |region, _| {\n                     let ty::ReFree(_) = region.kind() else { return region; };\n-                    let ty::ReEarlyBound(e) = map[&region.into()].expect_region().kind()\n-                        else { bug!(\"expected ReFree to map to ReEarlyBound\"); };\n+                    let Some(ty::ReEarlyBound(e)) = map.get(&region.into()).map(|r| r.expect_region().kind())\n+                    else {\n+                        tcx\n+                            .sess\n+                            .delay_span_bug(\n+                                return_span,\n+                                \"expected ReFree to map to ReEarlyBound\"\n+                            );\n+                        return tcx.lifetimes.re_static;\n+                    };\n                     tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n                         def_id: e.def_id,\n                         name: e.name,"}, {"sha": "1b16ecb5ec2d6434a52cfc86a5e7b9fabb966a1f", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -273,16 +273,23 @@ impl<'a> Parser<'a> {\n         let cursor_snapshot_next_calls = cursor_snapshot.num_next_calls;\n         let mut end_pos = self.token_cursor.num_next_calls;\n \n+        let mut captured_trailing = false;\n+\n         // Capture a trailing token if requested by the callback 'f'\n         match trailing {\n             TrailingToken::None => {}\n+            TrailingToken::Gt => {\n+                assert_eq!(self.token.kind, token::Gt);\n+            }\n             TrailingToken::Semi => {\n                 assert_eq!(self.token.kind, token::Semi);\n                 end_pos += 1;\n+                captured_trailing = true;\n             }\n             TrailingToken::MaybeComma => {\n                 if self.token.kind == token::Comma {\n                     end_pos += 1;\n+                    captured_trailing = true;\n                 }\n             }\n         }\n@@ -292,11 +299,7 @@ impl<'a> Parser<'a> {\n         // was not actually bumped past it. When the `LazyAttrTokenStream` gets converted\n         // into an `AttrTokenStream`, we will create the proper token.\n         if self.token_cursor.break_last_token {\n-            assert_eq!(\n-                trailing,\n-                TrailingToken::None,\n-                \"Cannot set `break_last_token` and have trailing token\"\n-            );\n+            assert!(!captured_trailing, \"Cannot set break_last_token and have trailing token\");\n             end_pos += 1;\n         }\n "}, {"sha": "ca216b1cd1008ed039331ac998240a4d15dcec76", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -3142,6 +3142,8 @@ impl<'a> Parser<'a> {\n                 && this.token.kind == token::Semi\n             {\n                 TrailingToken::Semi\n+            } else if this.token.kind == token::Gt {\n+                TrailingToken::Gt\n             } else {\n                 // FIXME - pass this through from the place where we know\n                 // we need a comma, rather than assuming that `#[attr] expr,`"}, {"sha": "89c24920f857d1e9672e52a92cf47c62ac852bb0", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -79,6 +79,7 @@ pub enum ForceCollect {\n pub enum TrailingToken {\n     None,\n     Semi,\n+    Gt,\n     /// If the trailing token is a comma, then capture it\n     /// Otherwise, ignore the trailing token\n     MaybeComma,"}, {"sha": "850f023b1c16b4c2b101b9e4771307faa518c79b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -38,8 +38,8 @@ type Res = def::Res<ast::NodeId>;\n /// A field or associated item from self type suggested in case of resolution failure.\n enum AssocSuggestion {\n     Field,\n-    MethodWithSelf,\n-    AssocFn,\n+    MethodWithSelf { called: bool },\n+    AssocFn { called: bool },\n     AssocType,\n     AssocConst,\n }\n@@ -48,8 +48,14 @@ impl AssocSuggestion {\n     fn action(&self) -> &'static str {\n         match self {\n             AssocSuggestion::Field => \"use the available field\",\n-            AssocSuggestion::MethodWithSelf => \"call the method with the fully-qualified path\",\n-            AssocSuggestion::AssocFn => \"call the associated function\",\n+            AssocSuggestion::MethodWithSelf { called: true } => {\n+                \"call the method with the fully-qualified path\"\n+            }\n+            AssocSuggestion::MethodWithSelf { called: false } => {\n+                \"refer to the method with the fully-qualified path\"\n+            }\n+            AssocSuggestion::AssocFn { called: true } => \"call the associated function\",\n+            AssocSuggestion::AssocFn { called: false } => \"refer to the associated function\",\n             AssocSuggestion::AssocConst => \"use the associated `const`\",\n             AssocSuggestion::AssocType => \"use the associated type\",\n         }\n@@ -516,7 +522,9 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let typo_sugg =\n             self.lookup_typo_candidate(path, source.namespace(), is_expected).to_opt_suggestion();\n         if path.len() == 1 && self.self_type_is_available() {\n-            if let Some(candidate) = self.lookup_assoc_candidate(ident, ns, is_expected) {\n+            if let Some(candidate) =\n+                self.lookup_assoc_candidate(ident, ns, is_expected, source.is_call())\n+            {\n                 let self_is_available = self.self_value_is_available(path[0].ident.span);\n                 match candidate {\n                     AssocSuggestion::Field => {\n@@ -531,16 +539,21 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             err.span_label(span, \"a field by this name exists in `Self`\");\n                         }\n                     }\n-                    AssocSuggestion::MethodWithSelf if self_is_available => {\n+                    AssocSuggestion::MethodWithSelf { called } if self_is_available => {\n+                        let msg = if called {\n+                            \"you might have meant to call the method\"\n+                        } else {\n+                            \"you might have meant to refer to the method\"\n+                        };\n                         err.span_suggestion(\n                             span,\n-                            \"you might have meant to call the method\",\n+                            msg,\n                             format!(\"self.{path_str}\"),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n-                    AssocSuggestion::MethodWithSelf\n-                    | AssocSuggestion::AssocFn\n+                    AssocSuggestion::MethodWithSelf { .. }\n+                    | AssocSuggestion::AssocFn { .. }\n                     | AssocSuggestion::AssocConst\n                     | AssocSuggestion::AssocType => {\n                         err.span_suggestion(\n@@ -1498,6 +1511,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         ident: Ident,\n         ns: Namespace,\n         filter_fn: FilterFn,\n+        called: bool,\n     ) -> Option<AssocSuggestion>\n     where\n         FilterFn: Fn(Res) -> bool,\n@@ -1539,9 +1553,9 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     return Some(match &assoc_item.kind {\n                         ast::AssocItemKind::Const(..) => AssocSuggestion::AssocConst,\n                         ast::AssocItemKind::Fn(box ast::Fn { sig, .. }) if sig.decl.has_self() => {\n-                            AssocSuggestion::MethodWithSelf\n+                            AssocSuggestion::MethodWithSelf { called }\n                         }\n-                        ast::AssocItemKind::Fn(..) => AssocSuggestion::AssocFn,\n+                        ast::AssocItemKind::Fn(..) => AssocSuggestion::AssocFn { called },\n                         ast::AssocItemKind::Type(..) => AssocSuggestion::AssocType,\n                         ast::AssocItemKind::MacCall(_) => continue,\n                     });\n@@ -1560,10 +1574,12 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 let res = binding.res();\n                 if filter_fn(res) {\n                     if self.r.has_self.contains(&res.def_id()) {\n-                        return Some(AssocSuggestion::MethodWithSelf);\n+                        return Some(AssocSuggestion::MethodWithSelf { called });\n                     } else {\n                         match res {\n-                            Res::Def(DefKind::AssocFn, _) => return Some(AssocSuggestion::AssocFn),\n+                            Res::Def(DefKind::AssocFn, _) => {\n+                                return Some(AssocSuggestion::AssocFn { called });\n+                            }\n                             Res::Def(DefKind::AssocConst, _) => {\n                                 return Some(AssocSuggestion::AssocConst);\n                             }"}, {"sha": "2dc182b3d83edb7cf29e6c729b74f87c5bb54047", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -302,7 +302,7 @@ _Note:_ The order of these lint level arguments is taken into account, see [lint\n This flag will allow you to set unstable options of rustc. In order to set multiple options,\n the -Z flag can be used multiple times. For example: `rustc -Z verbose -Z time-passes`.\n Specifying options with -Z is only available on nightly. To view all available options\n-run: `rustc -Z help`.\n+run: `rustc -Z help`, or see [The Unstable Book](../unstable-book/index.html).\n \n <a id=\"option-cap-lints\"></a>\n ## `--cap-lints`: set the most restrictive lint level"}, {"sha": "301f03a16427a3799b0259431c9293bf64fdece7", "filename": "src/librustdoc/html/static/css/noscript.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnoscript.css", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnoscript.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnoscript.css?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -18,3 +18,7 @@ nav.sub {\n \t/* The search bar and related controls don't work without JS */\n \tdisplay: none;\n }\n+\n+.source .sidebar {\n+\tdisplay: none;\n+}"}, {"sha": "173553ed477493b8554427e83f43893f42172ad6", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -402,10 +402,6 @@ img {\n \toverflow-y: hidden;\n }\n \n-.rustdoc.source .sidebar .sidebar-logo {\n-\tdisplay: none;\n-}\n-\n .source .sidebar, #sidebar-toggle, #source-sidebar {\n \tbackground-color: var(--sidebar-background-color);\n }\n@@ -538,7 +534,6 @@ ul.block, .block li {\n }\n \n .source .content pre.rust {\n-\twhite-space: pre;\n \toverflow: auto;\n \tpadding-left: 0;\n }\n@@ -1233,9 +1228,6 @@ a.test-arrow {\n .example-wrap:hover .test-arrow {\n \tvisibility: visible;\n }\n-a.test-arrow:hover {\n-\ttext-decoration: none;\n-}\n \n .code-attribute {\n \tfont-weight: 300;"}, {"sha": "ee8938ea6030c64161573545c37fe45f3dd2e925", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -89,6 +89,7 @@ <h2></h2> {#- -#}\n     </nav> {#- -#}\n     {%- endif -%}\n     <nav class=\"sidebar\"> {#- -#}\n+        {%- if page.css_class != \"source\" -%}\n         <a class=\"sidebar-logo\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {#- -#}\n             <div class=\"logo-container\"> {#- -#}\n                 {%- if !layout.logo.is_empty()  %}\n@@ -98,6 +99,7 @@ <h2></h2> {#- -#}\n                 {%- endif -%}\n             </div> {#- -#}\n         </a> {#- -#}\n+        {%- endif -%}\n         {{- sidebar|safe -}}\n     </nav> {#- -#}\n     <main> {#- -#}"}, {"sha": "4cf9435d9c8ee51a114e116461da19a9d9ac7a96", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -154,7 +154,6 @@ pub fn main() {\n         }\n     }\n \n-    rustc_driver::set_sigpipe_handler();\n     rustc_driver::install_ice_hook();\n \n     // When using CI artifacts (with `download_stage1 = true`), tracing is unconditionally built"}, {"sha": "51693314e85eff32f9b6ba253e14d4b27ec7c735", "filename": "src/test/rustdoc-gui/highlight-colors.goml", "status": "modified", "additions": 89, "deletions": 52, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Frustdoc-gui%2Fhighlight-colors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Frustdoc-gui%2Fhighlight-colors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhighlight-colors.goml?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -2,56 +2,93 @@\n goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n show-text: true\n \n-local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n-reload:\n+define-function: (\n+    \"check-colors\",\n+    (\n+        theme,\n+        kw,\n+        kw2,\n+        prelude_ty,\n+        prelude_val,\n+        lifetime,\n+        number,\n+        string,\n+        bool_val,\n+        self,\n+        attribute,\n+        macro,\n+        question_mark,\n+        comment,\n+        doc_comment,\n+    ),\n+    [\n+        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        (\"reload\"),\n+        (\"assert-css\", (\"pre.rust .kw\", {\"color\": |kw|}, ALL)),\n+        (\"assert-css\", (\"pre.rust .kw-2\", {\"color\": |kw2|}, ALL)),\n+        (\"assert-css\", (\"pre.rust .prelude-ty\", {\"color\": |prelude_ty|}, ALL)),\n+        (\"assert-css\", (\"pre.rust .prelude-val\", {\"color\": |prelude_val|}, ALL)),\n+        (\"assert-css\", (\"pre.rust .lifetime\", {\"color\": |lifetime|}, ALL)),\n+        (\"assert-css\", (\"pre.rust .number\", {\"color\": |number|}, ALL)),\n+        (\"assert-css\", (\"pre.rust .string\", {\"color\": |string|}, ALL)),\n+        (\"assert-css\", (\"pre.rust .bool-val\", {\"color\": |bool_val|}, ALL)),\n+        (\"assert-css\", (\"pre.rust .self\", {\"color\": |self|}, ALL)),\n+        (\"assert-css\", (\"pre.rust .attribute\", {\"color\": |attribute|}, ALL)),\n+        (\"assert-css\", (\"pre.rust .macro\", {\"color\": |macro|}, ALL)),\n+        (\"assert-css\", (\"pre.rust .question-mark\", {\"color\": |question_mark|}, ALL)),\n+        (\"assert-css\", (\"pre.rust .comment\", {\"color\": |comment|}, ALL)),\n+        (\"assert-css\", (\"pre.rust .doccomment\", {\"color\": |doc_comment|}, ALL)),\n+    ],\n+)\n \n-assert-css: (\"pre.rust .kw\", {\"color\": \"rgb(255, 119, 51)\"}, ALL)\n-assert-css: (\"pre.rust .kw-2\", {\"color\": \"rgb(255, 119, 51)\"}, ALL)\n-assert-css: (\"pre.rust .prelude-ty\", {\"color\": \"rgb(105, 242, 223)\"}, ALL)\n-assert-css: (\"pre.rust .prelude-val\", {\"color\": \"rgb(255, 119, 51)\"}, ALL)\n-assert-css: (\"pre.rust .lifetime\", {\"color\": \"rgb(255, 119, 51)\"}, ALL)\n-assert-css: (\"pre.rust .number\", {\"color\": \"rgb(184, 204, 82)\"}, ALL)\n-assert-css: (\"pre.rust .string\", {\"color\": \"rgb(184, 204, 82)\"}, ALL)\n-assert-css: (\"pre.rust .bool-val\", {\"color\": \"rgb(255, 119, 51)\"}, ALL)\n-assert-css: (\"pre.rust .self\", {\"color\": \"rgb(54, 163, 217)\"}, ALL)\n-assert-css: (\"pre.rust .attribute\", {\"color\": \"rgb(230, 225, 207)\"}, ALL)\n-assert-css: (\"pre.rust .macro\", {\"color\": \"rgb(163, 122, 204)\"}, ALL)\n-assert-css: (\"pre.rust .question-mark\", {\"color\": \"rgb(255, 144, 17)\"}, ALL)\n-assert-css: (\"pre.rust .comment\", {\"color\": \"rgb(120, 135, 151)\"}, ALL)\n-assert-css: (\"pre.rust .doccomment\", {\"color\": \"rgb(161, 172, 136)\"}, ALL)\n-\n-local-storage: {\"rustdoc-theme\": \"dark\"}\n-reload:\n-\n-assert-css: (\"pre.rust .kw\", {\"color\": \"rgb(171, 138, 193)\"}, ALL)\n-assert-css: (\"pre.rust .kw-2\", {\"color\": \"rgb(118, 154, 203)\"}, ALL)\n-assert-css: (\"pre.rust .prelude-ty\", {\"color\": \"rgb(118, 154, 203)\"}, ALL)\n-assert-css: (\"pre.rust .prelude-val\", {\"color\": \"rgb(238, 104, 104)\"}, ALL)\n-assert-css: (\"pre.rust .lifetime\", {\"color\": \"rgb(217, 127, 38)\"}, ALL)\n-assert-css: (\"pre.rust .number\", {\"color\": \"rgb(131, 163, 0)\"}, ALL)\n-assert-css: (\"pre.rust .string\", {\"color\": \"rgb(131, 163, 0)\"}, ALL)\n-assert-css: (\"pre.rust .bool-val\", {\"color\": \"rgb(238, 104, 104)\"}, ALL)\n-assert-css: (\"pre.rust .self\", {\"color\": \"rgb(238, 104, 104)\"}, ALL)\n-assert-css: (\"pre.rust .attribute\", {\"color\": \"rgb(238, 104, 104)\"}, ALL)\n-assert-css: (\"pre.rust .macro\", {\"color\": \"rgb(62, 153, 159)\"}, ALL)\n-assert-css: (\"pre.rust .question-mark\", {\"color\": \"rgb(255, 144, 17)\"}, ALL)\n-assert-css: (\"pre.rust .comment\", {\"color\": \"rgb(141, 141, 139)\"}, ALL)\n-assert-css: (\"pre.rust .doccomment\", {\"color\": \"rgb(140, 163, 117)\"}, ALL)\n-\n-local-storage: {\"rustdoc-theme\": \"light\"}\n-reload:\n-\n-assert-css: (\"pre.rust .kw\", {\"color\": \"rgb(137, 89, 168)\"}, ALL)\n-assert-css: (\"pre.rust .kw-2\", {\"color\": \"rgb(66, 113, 174)\"}, ALL)\n-assert-css: (\"pre.rust .prelude-ty\", {\"color\": \"rgb(66, 113, 174)\"}, ALL)\n-assert-css: (\"pre.rust .prelude-val\", {\"color\": \"rgb(200, 40, 41)\"}, ALL)\n-assert-css: (\"pre.rust .lifetime\", {\"color\": \"rgb(183, 101, 20)\"}, ALL)\n-assert-css: (\"pre.rust .number\", {\"color\": \"rgb(113, 140, 0)\"}, ALL)\n-assert-css: (\"pre.rust .string\", {\"color\": \"rgb(113, 140, 0)\"}, ALL)\n-assert-css: (\"pre.rust .bool-val\", {\"color\": \"rgb(200, 40, 41)\"}, ALL)\n-assert-css: (\"pre.rust .self\", {\"color\": \"rgb(200, 40, 41)\"}, ALL)\n-assert-css: (\"pre.rust .attribute\", {\"color\": \"rgb(200, 40, 41)\"}, ALL)\n-assert-css: (\"pre.rust .macro\", {\"color\": \"rgb(62, 153, 159)\"}, ALL)\n-assert-css: (\"pre.rust .question-mark\", {\"color\": \"rgb(255, 144, 17)\"}, ALL)\n-assert-css: (\"pre.rust .comment\", {\"color\": \"rgb(142, 144, 140)\"}, ALL)\n-assert-css: (\"pre.rust .doccomment\", {\"color\": \"rgb(77, 77, 76)\"}, ALL)\n+call-function: (\"check-colors\", {\n+    \"theme\": \"ayu\",\n+    \"kw\": \"rgb(255, 119, 51)\",\n+    \"kw2\": \"rgb(255, 119, 51)\",\n+    \"prelude_ty\": \"rgb(105, 242, 223)\",\n+    \"prelude_val\": \"rgb(255, 119, 51)\",\n+    \"lifetime\": \"rgb(255, 119, 51)\",\n+    \"number\": \"rgb(184, 204, 82)\",\n+    \"string\": \"rgb(184, 204, 82)\",\n+    \"bool_val\": \"rgb(255, 119, 51)\",\n+    \"self\": \"rgb(54, 163, 217)\",\n+    \"attribute\": \"rgb(230, 225, 207)\",\n+    \"macro\": \"rgb(163, 122, 204)\",\n+    \"question_mark\": \"rgb(255, 144, 17)\",\n+    \"comment\": \"rgb(120, 135, 151)\",\n+    \"doc_comment\": \"rgb(161, 172, 136)\",\n+})\n+call-function: (\"check-colors\", {\n+    \"theme\": \"dark\",\n+    \"kw\": \"rgb(171, 138, 193)\",\n+    \"kw2\": \"rgb(118, 154, 203)\",\n+    \"prelude_ty\": \"rgb(118, 154, 203)\",\n+    \"prelude_val\": \"rgb(238, 104, 104)\",\n+    \"lifetime\": \"rgb(217, 127, 38)\",\n+    \"number\": \"rgb(131, 163, 0)\",\n+    \"string\": \"rgb(131, 163, 0)\",\n+    \"bool_val\": \"rgb(238, 104, 104)\",\n+    \"self\": \"rgb(238, 104, 104)\",\n+    \"attribute\": \"rgb(238, 104, 104)\",\n+    \"macro\": \"rgb(62, 153, 159)\",\n+    \"question_mark\": \"rgb(255, 144, 17)\",\n+    \"comment\": \"rgb(141, 141, 139)\",\n+    \"doc_comment\": \"rgb(140, 163, 117)\",\n+})\n+call-function: (\"check-colors\", {\n+    \"theme\": \"light\",\n+    \"kw\": \"rgb(137, 89, 168)\",\n+    \"kw2\": \"rgb(66, 113, 174)\",\n+    \"prelude_ty\": \"rgb(66, 113, 174)\",\n+    \"prelude_val\": \"rgb(200, 40, 41)\",\n+    \"lifetime\": \"rgb(183, 101, 20)\",\n+    \"number\": \"rgb(113, 140, 0)\",\n+    \"string\": \"rgb(113, 140, 0)\",\n+    \"bool_val\": \"rgb(200, 40, 41)\",\n+    \"self\": \"rgb(200, 40, 41)\",\n+    \"attribute\": \"rgb(200, 40, 41)\",\n+    \"macro\": \"rgb(62, 153, 159)\",\n+    \"question_mark\": \"rgb(255, 144, 17)\",\n+    \"comment\": \"rgb(142, 144, 140)\",\n+    \"doc_comment\": \"rgb(77, 77, 76)\",\n+})"}, {"sha": "4155dab64eb98d376ff5eb9ba5ba8a3d60922ffe", "filename": "src/test/rustdoc-gui/sidebar-source-code-display.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -3,7 +3,7 @@ javascript: false\n goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n // Since the javascript is disabled, there shouldn't be a toggle.\n assert-false: \"#sidebar-toggle\"\n-wait-for-css: (\".sidebar > *\", {\"visibility\": \"hidden\"})\n+wait-for-css: (\".sidebar\", {\"display\": \"none\"})\n \n // Let's retry with javascript enabled.\n javascript: true"}, {"sha": "7799a7cb151de5d629ee74d65aafd3f2ee69119f", "filename": "src/test/ui/borrowck/anonymous-region-in-apit.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fborrowck%2Fanonymous-region-in-apit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fborrowck%2Fanonymous-region-in-apit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fanonymous-region-in-apit.rs?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -0,0 +1,12 @@\n+#![feature(anonymous_lifetime_in_impl_trait)]\n+\n+trait Foo<T> {\n+    fn bar(self, baz: T);\n+}\n+\n+fn qux(foo: impl Foo<&str>) {\n+    |baz: &str| foo.bar(baz);\n+    //~^ ERROR borrowed data escapes outside of closure\n+}\n+\n+fn main() {}"}, {"sha": "9e100f8ac3c5033bdced0d4b65259340e73ec23d", "filename": "src/test/ui/borrowck/anonymous-region-in-apit.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fborrowck%2Fanonymous-region-in-apit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fborrowck%2Fanonymous-region-in-apit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fanonymous-region-in-apit.stderr?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -0,0 +1,16 @@\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/anonymous-region-in-apit.rs:8:17\n+   |\n+LL | fn qux(foo: impl Foo<&str>) {\n+   |        --- lifetime `'2` appears in the type of `foo`\n+LL |     |baz: &str| foo.bar(baz);\n+   |      ---  -     ^^^^^^^^^^^^\n+   |      |    |     |\n+   |      |    |     `baz` escapes the closure body here\n+   |      |    |     argument requires that `'1` must outlive `'2`\n+   |      |    let's call the lifetime of this reference `'1`\n+   |      `baz` is a reference that is only valid in the closure body\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "90682631aa0323050c60f96843c1f9adaee0c480", "filename": "src/test/ui/impl-trait/in-trait/signature-mismatch.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.rs?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -0,0 +1,21 @@\n+// edition:2021\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+pub trait AsyncTrait {\n+    fn async_fn(&self, buff: &[u8]) -> impl Future<Output = Vec<u8>>;\n+}\n+\n+pub struct Struct;\n+\n+impl AsyncTrait for Struct {\n+    fn async_fn<'a>(&self, buff: &'a [u8]) -> impl Future<Output = Vec<u8>> + 'a {\n+        //~^ ERROR `impl` item signature doesn't match `trait` item signature\n+        async move { buff.to_vec() }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6663d7faa1e578ebf20f97c2a3cf30bbeed43093", "filename": "src/test/ui/impl-trait/in-trait/signature-mismatch.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.stderr?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -0,0 +1,16 @@\n+error: `impl` item signature doesn't match `trait` item signature\n+  --> $DIR/signature-mismatch.rs:15:5\n+   |\n+LL |     fn async_fn(&self, buff: &[u8]) -> impl Future<Output = Vec<u8>>;\n+   |     ----------------------------------------------------------------- expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + 'static`\n+...\n+LL |     fn async_fn<'a>(&self, buff: &'a [u8]) -> impl Future<Output = Vec<u8>> + 'a {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n+   |\n+   = note: expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + 'static`\n+              found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n+   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n+   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n+\n+error: aborting due to previous error\n+"}, {"sha": "a584274c405140afd2be762eb5e9909f689dcf79", "filename": "src/test/ui/parser/issue-103143.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fparser%2Fissue-103143.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fparser%2Fissue-103143.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103143.rs?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    x::<#[a]y::<z>>\n+    //~^ ERROR invalid const generic expression\n+    //~| ERROR cannot find value `x` in this scope\n+}"}, {"sha": "4035c69afa712821fc7a2db857a86c7636de421f", "filename": "src/test/ui/parser/issue-103143.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fparser%2Fissue-103143.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fparser%2Fissue-103143.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103143.stderr?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -0,0 +1,20 @@\n+error: invalid const generic expression\n+  --> $DIR/issue-103143.rs:2:13\n+   |\n+LL |     x::<#[a]y::<z>>\n+   |             ^^^^^^\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     x::<#[a]{ y::<z> }>\n+   |             +        +\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/issue-103143.rs:2:5\n+   |\n+LL |     x::<#[a]y::<z>>\n+   |     ^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "690a40f7edd77c9e681e538fda6b0713fd89cf12", "filename": "src/test/ui/resolve/issue-14254.stderr", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -26,7 +26,12 @@ error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:36:9\n    |\n LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+   |         ^^^\n+   |\n+help: you might have meant to refer to the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n \n error[E0425]: cannot find value `b` in this scope\n   --> $DIR/issue-14254.rs:38:9\n@@ -56,7 +61,12 @@ error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:53:9\n    |\n LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+   |         ^^^\n+   |\n+help: you might have meant to refer to the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n \n error[E0425]: cannot find value `b` in this scope\n   --> $DIR/issue-14254.rs:55:9\n@@ -68,31 +78,56 @@ error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:64:9\n    |\n LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+   |         ^^^\n+   |\n+help: you might have meant to refer to the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n \n error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:73:9\n    |\n LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+   |         ^^^\n+   |\n+help: you might have meant to refer to the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n \n error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:82:9\n    |\n LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+   |         ^^^\n+   |\n+help: you might have meant to refer to the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n \n error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:91:9\n    |\n LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+   |         ^^^\n+   |\n+help: you might have meant to refer to the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n \n error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:100:9\n    |\n LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+   |         ^^^\n+   |\n+help: you might have meant to refer to the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n \n error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:19:9"}, {"sha": "8def9aa20253b98d8d0cfc59a1a92d4dc0aecde4", "filename": "src/test/ui/resolve/resolve-assoc-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -50,7 +50,7 @@ error[E0425]: cannot find value `method` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:34:9\n    |\n LL |         method;\n-   |         ^^^^^^ help: you might have meant to call the method: `self.method`\n+   |         ^^^^^^ help: you might have meant to refer to the method: `self.method`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "f32e0404e46cba9b0912e246d8516320aab733f5", "filename": "src/test/ui/resolve/typo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -40,7 +40,7 @@ LL |         bah;\n LL | fn ba() {}\n    | ------- similarly named function `ba` defined here\n    |\n-help: you might have meant to call the associated function\n+help: you might have meant to refer to the associated function\n    |\n LL |         Self::bah;\n    |         ~~~~~~~~~"}, {"sha": "b81f46d1211cea2b7cc9fdf611bc102cd78c8356", "filename": "src/tools/rustdoc/main.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftools%2Frustdoc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2702e922ba31e49d6167f5651d4545646dcf22d/src%2Ftools%2Frustdoc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc%2Fmain.rs?ref=f2702e922ba31e49d6167f5651d4545646dcf22d", "patch": "@@ -1,3 +1,6 @@\n+#![feature(unix_sigpipe)]\n+\n+#[unix_sigpipe = \"sig_dfl\"]\n fn main() {\n     rustdoc::main()\n }"}]}