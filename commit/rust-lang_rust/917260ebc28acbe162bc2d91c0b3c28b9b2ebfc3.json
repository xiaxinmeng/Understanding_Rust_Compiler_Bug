{"sha": "917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNzI2MGViYzI4YWNiZTE2MmJjMmQ5MWMwYjNjMjhiOWIyZWJmYzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-25T04:00:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-25T04:00:19Z"}, "message": "Auto merge of #43325 - ollie27:overflowing_literals, r=arielb1\n\nFix overflowing_literals lint for large f32s\n\nFloat literals need to be parsed as the correct type so they can be\nrounded correctly.", "tree": {"sha": "4673ad746cd66aae3877d163234c5f75bdd8ff77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4673ad746cd66aae3877d163234c5f75bdd8ff77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3", "html_url": "https://github.com/rust-lang/rust/commit/917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c46c6c59dbee8d6385f8924fe27cc5a7893841f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c46c6c59dbee8d6385f8924fe27cc5a7893841f", "html_url": "https://github.com/rust-lang/rust/commit/7c46c6c59dbee8d6385f8924fe27cc5a7893841f"}, {"sha": "697491c14dc841d6f34809ad6522f0ccff4905f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/697491c14dc841d6f34809ad6522f0ccff4905f4", "html_url": "https://github.com/rust-lang/rust/commit/697491c14dc841d6f34809ad6522f0ccff4905f4"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "5068375368466ac95b05ef670b841e0b12959b4c", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3", "patch": "@@ -10,8 +10,7 @@\n \n //! Operations and constants for 32-bits floats (`f32` type)\n \n-// FIXME: MIN_VALUE and MAX_VALUE literals are parsed as -inf and inf #14353\n-#![allow(overflowing_literals)]\n+#![cfg_attr(stage0, allow(overflowing_literals))]\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "4ff80a2f05d41cfda7519f7ddf0dcfadbae69403", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3", "patch": "@@ -10,9 +10,6 @@\n \n //! Operations and constants for 64-bits floats (`f64` type)\n \n-// FIXME: MIN_VALUE and MAX_VALUE literals are parsed as -inf and inf #14353\n-#![allow(overflowing_literals)]\n-\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use intrinsics;"}, {"sha": "1237132f615423f77175bd809aef984a17aeb831", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3", "patch": "@@ -173,18 +173,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                         }\n                     }\n                     ty::TyFloat(t) => {\n-                        let (min, max) = float_ty_range(t);\n-                        let lit_val: f64 = match lit.node {\n+                        let is_infinite = match lit.node {\n                             ast::LitKind::Float(v, _) |\n                             ast::LitKind::FloatUnsuffixed(v) => {\n-                                match v.as_str().parse() {\n-                                    Ok(f) => f,\n-                                    Err(_) => return,\n+                                match t {\n+                                    ast::FloatTy::F32 => v.as_str().parse().map(f32::is_infinite),\n+                                    ast::FloatTy::F64 => v.as_str().parse().map(f64::is_infinite),\n                                 }\n                             }\n                             _ => bug!(),\n                         };\n-                        if lit_val < min || lit_val > max {\n+                        if is_infinite == Ok(true) {\n                             cx.span_lint(OVERFLOWING_LITERALS,\n                                          e.span,\n                                          &format!(\"literal out of range for {:?}\", t));\n@@ -242,13 +241,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n             }\n         }\n \n-        fn float_ty_range(float_ty: ast::FloatTy) -> (f64, f64) {\n-            match float_ty {\n-                ast::FloatTy::F32 => (f32::MIN as f64, f32::MAX as f64),\n-                ast::FloatTy::F64 => (f64::MIN, f64::MAX),\n-            }\n-        }\n-\n         fn int_ty_bits(int_ty: ast::IntTy, target_int_ty: ast::IntTy) -> u64 {\n             match int_ty {\n                 ast::IntTy::Is => int_ty_bits(target_int_ty, target_int_ty),"}, {"sha": "d399fda32862569119c8598a217f9e1a6d4bc077", "filename": "src/test/compile-fail/lint-type-overflow2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs?ref=917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3", "patch": "@@ -17,8 +17,8 @@ fn main() {\n     let x2: i8 = --128; //~ error: literal out of range for i8\n     //~^ error: attempt to negate with overflow\n \n-    let x = -3.40282348e+38_f32; //~ error: literal out of range for f32\n-    let x =  3.40282348e+38_f32; //~ error: literal out of range for f32\n+    let x = -3.40282357e+38_f32; //~ error: literal out of range for f32\n+    let x =  3.40282357e+38_f32; //~ error: literal out of range for f32\n     let x = -1.7976931348623159e+308_f64; //~ error: literal out of range for f64\n     let x =  1.7976931348623159e+308_f64; //~ error: literal out of range for f64\n }"}, {"sha": "56e0039f66de394d7980ad6ffbe8268332fc7f42", "filename": "src/test/run-pass/big-literals.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbig-literals.rs?ref=917260ebc28acbe162bc2d91c0b3c28b9b2ebfc3", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(core)]\n-\n // Catch mistakes in the overflowing literals lint.\n #![deny(overflowing_literals)]\n \n@@ -21,4 +18,9 @@ pub fn main() {\n     assert_eq!(18446744073709551615, (!0 as u64));\n \n     assert_eq!((-2147483648i32).wrapping_sub(1), 2147483647);\n+\n+    assert_eq!(-3.40282356e+38_f32, ::std::f32::MIN);\n+    assert_eq!(3.40282356e+38_f32, ::std::f32::MAX);\n+    assert_eq!(-1.7976931348623158e+308_f64, ::std::f64::MIN);\n+    assert_eq!(1.7976931348623158e+308_f64, ::std::f64::MAX);\n }"}]}