{"sha": "86bab94631c1ef80ac13958b749a9221c11f98d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YmFiOTQ2MzFjMWVmODBhYzEzOTU4Yjc0OWE5MjIxYzExZjk4ZDI=", "commit": {"author": {"name": "Alexander Shabalin", "email": "shabalyn.a@gmail.com", "date": "2019-06-10T09:22:33Z"}, "committer": {"name": "Alexander Shabalin", "email": "shabalyn.a@gmail.com", "date": "2019-06-10T10:58:40Z"}, "message": "Fixing eta with respect to lazy evaluation.", "tree": {"sha": "935090ca8a8bab5dde2df69aadff1003861f9ca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/935090ca8a8bab5dde2df69aadff1003861f9ca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86bab94631c1ef80ac13958b749a9221c11f98d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86bab94631c1ef80ac13958b749a9221c11f98d2", "html_url": "https://github.com/rust-lang/rust/commit/86bab94631c1ef80ac13958b749a9221c11f98d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86bab94631c1ef80ac13958b749a9221c11f98d2/comments", "author": {"login": "projedi", "id": 399115, "node_id": "MDQ6VXNlcjM5OTExNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/399115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projedi", "html_url": "https://github.com/projedi", "followers_url": "https://api.github.com/users/projedi/followers", "following_url": "https://api.github.com/users/projedi/following{/other_user}", "gists_url": "https://api.github.com/users/projedi/gists{/gist_id}", "starred_url": "https://api.github.com/users/projedi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projedi/subscriptions", "organizations_url": "https://api.github.com/users/projedi/orgs", "repos_url": "https://api.github.com/users/projedi/repos", "events_url": "https://api.github.com/users/projedi/events{/privacy}", "received_events_url": "https://api.github.com/users/projedi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "projedi", "id": 399115, "node_id": "MDQ6VXNlcjM5OTExNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/399115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projedi", "html_url": "https://github.com/projedi", "followers_url": "https://api.github.com/users/projedi/followers", "following_url": "https://api.github.com/users/projedi/following{/other_user}", "gists_url": "https://api.github.com/users/projedi/gists{/gist_id}", "starred_url": "https://api.github.com/users/projedi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projedi/subscriptions", "organizations_url": "https://api.github.com/users/projedi/orgs", "repos_url": "https://api.github.com/users/projedi/repos", "events_url": "https://api.github.com/users/projedi/events{/privacy}", "received_events_url": "https://api.github.com/users/projedi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01ab9fe6532bec62b5c90ba18f1588e2bd7bf3b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/01ab9fe6532bec62b5c90ba18f1588e2bd7bf3b1", "html_url": "https://github.com/rust-lang/rust/commit/01ab9fe6532bec62b5c90ba18f1588e2bd7bf3b1"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "b12e3167997acaeeedefd98e11fe7aecfff16853", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86bab94631c1ef80ac13958b749a9221c11f98d2/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bab94631c1ef80ac13958b749a9221c11f98d2/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=86bab94631c1ef80ac13958b749a9221c11f98d2", "patch": "@@ -82,6 +82,8 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr) {\n         if_chain!(\n             if let ExprKind::Call(ref caller, ref args) = ex.node;\n \n+            if let ExprKind::Path(_) = caller.node;\n+\n             // Not the same number of arguments, there is no way the closure is the same as the function return;\n             if args.len() == decl.inputs.len();\n "}, {"sha": "ca1ccad29f2a257a0de971a90c1d010f77d703e4", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86bab94631c1ef80ac13958b749a9221c11f98d2/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/86bab94631c1ef80ac13958b749a9221c11f98d2/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=86bab94631c1ef80ac13958b749a9221c11f98d2", "patch": "@@ -20,7 +20,7 @@ use std::path::PathBuf;\n fn main() {\n     let a = Some(1u8).map(foo);\n     meta(foo);\n-    let c = Some(1u8).map({1+2; foo});\n+    let c = Some(1u8).map(|a| {1+2; foo}(a));\n     let d = Some(1u8).map(|a| foo((|b| foo2(b))(a))); //is adjusted?\n     all(&[1, 2, 3], &2, |x, y| below(x, y)); //is adjusted\n     unsafe {\n@@ -105,7 +105,7 @@ fn test_redundant_closures_containing_method_calls() {\n \n     let mut some = Some(|x| x * x);\n     let arr = [Ok(1), Err(2)];\n-    let _: Vec<_> = arr.iter().map(|x| x.map_err(some.take().unwrap())).collect();\n+    let _: Vec<_> = arr.iter().map(|x| x.map_err(|e| some.take().unwrap()(e))).collect();\n }\n \n struct Thunk<T>(Box<dyn FnMut() -> T>);\n@@ -177,3 +177,10 @@ fn test_redundant_closure_with_another_closure() {\n     let closure = |a| println!(\"{}\", a);\n     let a = Some(1u8).map(closure);\n }\n+\n+fn make_lazy(f: fn() -> fn(u8) -> u8) -> impl Fn(u8) -> u8 {\n+    // Currently f is called when result of make_lazy is called.\n+    // If the closure is removed, f will be called when make_lazy itself is\n+    // called. This changes semantics, so the closure must stay.\n+    Box::new(move |x| f()(x))\n+}"}, {"sha": "f736543dc1b559a98a501ccd25085efb02066ded", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86bab94631c1ef80ac13958b749a9221c11f98d2/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bab94631c1ef80ac13958b749a9221c11f98d2/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=86bab94631c1ef80ac13958b749a9221c11f98d2", "patch": "@@ -177,3 +177,10 @@ fn test_redundant_closure_with_another_closure() {\n     let closure = |a| println!(\"{}\", a);\n     let a = Some(1u8).map(|a| closure(a));\n }\n+\n+fn make_lazy(f: fn() -> fn(u8) -> u8) -> impl Fn(u8) -> u8 {\n+    // Currently f is called when result of make_lazy is called.\n+    // If the closure is removed, f will be called when make_lazy itself is\n+    // called. This changes semantics, so the closure must stay.\n+    Box::new(move |x| f()(x))\n+}"}, {"sha": "d19d21eec0dbbe26ba15f4128a51912ab1f0564c", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/86bab94631c1ef80ac13958b749a9221c11f98d2/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86bab94631c1ef80ac13958b749a9221c11f98d2/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=86bab94631c1ef80ac13958b749a9221c11f98d2", "patch": "@@ -12,12 +12,6 @@ error: redundant closure found\n LL |     meta(|a| foo(a));\n    |          ^^^^^^^^^^ help: remove closure as shown: `foo`\n \n-error: redundant closure found\n-  --> $DIR/eta.rs:23:27\n-   |\n-LL |     let c = Some(1u8).map(|a| {1+2; foo}(a));\n-   |                           ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `{1+2; foo}`\n-\n error: this expression borrows a reference that is immediately dereferenced by the compiler\n   --> $DIR/eta.rs:25:21\n    |\n@@ -70,12 +64,6 @@ error: redundant closure found\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`\n \n-error: redundant closure found\n-  --> $DIR/eta.rs:108:50\n-   |\n-LL |     let _: Vec<_> = arr.iter().map(|x| x.map_err(|e| some.take().unwrap()(e))).collect();\n-   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `some.take().unwrap()`\n-\n error: redundant closure found\n   --> $DIR/eta.rs:173:27\n    |\n@@ -88,5 +76,5 @@ error: redundant closure found\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `closure`\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 12 previous errors\n "}]}