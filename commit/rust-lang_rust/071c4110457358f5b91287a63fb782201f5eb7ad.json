{"sha": "071c4110457358f5b91287a63fb782201f5eb7ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MWM0MTEwNDU3MzU4ZjViOTEyODdhNjNmYjc4MjIwMWY1ZWI3YWQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-11-04T09:59:00Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-11-04T13:02:43Z"}, "message": "Translate SIMD construction as `insertelement`s and a single store.\n\nThis almost completely avoids GEPi's and pointer manipulation,\npostponing it until the end with one big write of the whole vector. This\nleads to a small speed-up in compilation, and makes it easier for LLVM\nto work with the values, e.g. with `--opt-level=0`,\n\n    pub fn foo() -> f32x4 {\n        f32x4(0.,0.,0.,0.)\n    }\n\nwas previously compiled to\n\n    define <4 x float> @_ZN3foo20h74913e8b13d89666eaaE() unnamed_addr #0 {\n    entry-block:\n      %sret_slot = alloca <4 x float>\n      %0 = getelementptr inbounds <4 x float>* %sret_slot, i32 0, i32 0\n      store float 0.000000e+00, float* %0\n      %1 = getelementptr inbounds <4 x float>* %sret_slot, i32 0, i32 1\n      store float 0.000000e+00, float* %1\n      %2 = getelementptr inbounds <4 x float>* %sret_slot, i32 0, i32 2\n      store float 0.000000e+00, float* %2\n      %3 = getelementptr inbounds <4 x float>* %sret_slot, i32 0, i32 3\n      store float 0.000000e+00, float* %3\n      %4 = load <4 x float>* %sret_slot\n      ret <4 x float> %4\n    }\n\nbut now becomes\n\n    define <4 x float> @_ZN3foo20h74913e8b13d89666eaaE() unnamed_addr #0 {\n    entry-block:\n      ret <4 x float> zeroinitializer\n    }", "tree": {"sha": "6624b61d00253667e709ed7b9e40ed60410e8d18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6624b61d00253667e709ed7b9e40ed60410e8d18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/071c4110457358f5b91287a63fb782201f5eb7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/071c4110457358f5b91287a63fb782201f5eb7ad", "html_url": "https://github.com/rust-lang/rust/commit/071c4110457358f5b91287a63fb782201f5eb7ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/071c4110457358f5b91287a63fb782201f5eb7ad/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff50f24feb512075f3fcf9fc2801e4c853ff9316", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff50f24feb512075f3fcf9fc2801e4c853ff9316", "html_url": "https://github.com/rust-lang/rust/commit/ff50f24feb512075f3fcf9fc2801e4c853ff9316"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "dca6e10f04de33cf2187b088ea997cf9023b93fb", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/071c4110457358f5b91287a63fb782201f5eb7ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071c4110457358f5b91287a63fb782201f5eb7ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=071c4110457358f5b91287a63fb782201f5eb7ad", "patch": "@@ -1455,14 +1455,35 @@ pub fn trans_adt<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         None => {}\n     };\n \n-    // Now, we just overwrite the fields we've explicitly specified\n-    for &(i, ref e) in fields.iter() {\n-        let dest = adt::trans_field_ptr(bcx, &*repr, addr, discr, i);\n-        let e_ty = expr_ty_adjusted(bcx, &**e);\n-        bcx = trans_into(bcx, &**e, SaveIn(dest));\n-        let scope = cleanup::CustomScope(custom_cleanup_scope);\n-        fcx.schedule_lifetime_end(scope, dest);\n-        fcx.schedule_drop_mem(scope, dest, e_ty);\n+    if ty::type_is_simd(bcx.tcx(), ty) {\n+        // This is the constructor of a SIMD type, such types are\n+        // always primitive machine types and so do not have a\n+        // destructor or require any clean-up.\n+        let llty = type_of::type_of(bcx.ccx(), ty);\n+\n+        // keep a vector as a register, and running through the field\n+        // `insertelement`ing them directly into that register\n+        // (i.e. avoid GEPi and `store`s to an alloca) .\n+        let mut vec_val = C_undef(llty);\n+\n+        for &(i, ref e) in fields.iter() {\n+            let block_datum = trans(bcx, &**e);\n+            bcx = block_datum.bcx;\n+            let position = C_uint(bcx.ccx(), i);\n+            let value = block_datum.datum.to_llscalarish(bcx);\n+            vec_val = InsertElement(bcx, vec_val, value, position);\n+        }\n+        Store(bcx, vec_val, addr);\n+    } else {\n+        // Now, we just overwrite the fields we've explicitly specified\n+        for &(i, ref e) in fields.iter() {\n+            let dest = adt::trans_field_ptr(bcx, &*repr, addr, discr, i);\n+            let e_ty = expr_ty_adjusted(bcx, &**e);\n+            bcx = trans_into(bcx, &**e, SaveIn(dest));\n+            let scope = cleanup::CustomScope(custom_cleanup_scope);\n+            fcx.schedule_lifetime_end(scope, dest);\n+            fcx.schedule_drop_mem(scope, dest, e_ty);\n+        }\n     }\n \n     adt::trans_set_discr(bcx, &*repr, addr, discr);"}]}