{"sha": "e6709f64af1836460aee41aca34eb19ed3a337dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NzA5ZjY0YWYxODM2NDYwYWVlNDFhY2EzNGViMTllZDNhMzM3ZGQ=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-03T19:12:19Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-04T17:38:20Z"}, "message": "Rename and fix typos", "tree": {"sha": "62b98c0237cf8816502cdf9cfaf9645c318e9919", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62b98c0237cf8816502cdf9cfaf9645c318e9919"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6709f64af1836460aee41aca34eb19ed3a337dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6709f64af1836460aee41aca34eb19ed3a337dd", "html_url": "https://github.com/rust-lang/rust/commit/e6709f64af1836460aee41aca34eb19ed3a337dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6709f64af1836460aee41aca34eb19ed3a337dd/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8b7ba201e005e533d132f4942ad611468f21a28", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b7ba201e005e533d132f4942ad611468f21a28", "html_url": "https://github.com/rust-lang/rust/commit/d8b7ba201e005e533d132f4942ad611468f21a28"}], "stats": {"total": 67, "additions": 43, "deletions": 24}, "files": [{"sha": "b3746924d2b91451d2653abc990f5e6f8a02157e", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e6709f64af1836460aee41aca34eb19ed3a337dd/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6709f64af1836460aee41aca34eb19ed3a337dd/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=e6709f64af1836460aee41aca34eb19ed3a337dd", "patch": "@@ -18,6 +18,12 @@ pub struct ParseMacroWithInfo {\n     pub expansion_info: Arc<ExpansionInfo>,\n }\n \n+#[derive(Debug, PartialEq, Eq, Clone)]\n+pub struct MacroExpandInfo {\n+    pub arg_map: Arc<mbe::TokenMap>,\n+    pub def_map: Arc<mbe::TokenMap>,\n+}\n+\n // FIXME: rename to ExpandDatabase\n #[salsa::query_group(AstDatabaseStorage)]\n pub trait AstDatabase: SourceDatabase {\n@@ -35,7 +41,7 @@ pub trait AstDatabase: SourceDatabase {\n     fn macro_expand(\n         &self,\n         macro_call: MacroCallId,\n-    ) -> Result<(Arc<tt::Subtree>, (Arc<mbe::TokenMap>, Arc<mbe::TokenMap>)), String>;\n+    ) -> Result<(Arc<tt::Subtree>, MacroExpandInfo), String>;\n \n     fn macro_expansion_info(&self, macro_file: MacroFile) -> Option<Arc<ExpansionInfo>>;\n }\n@@ -77,7 +83,7 @@ pub(crate) fn macro_arg(\n pub(crate) fn macro_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n-) -> Result<(Arc<tt::Subtree>, (Arc<mbe::TokenMap>, Arc<mbe::TokenMap>)), String> {\n+) -> Result<(Arc<tt::Subtree>, MacroExpandInfo), String> {\n     let loc = db.lookup_intern_macro(id);\n     let macro_arg = db.macro_arg(id).ok_or(\"Fail to args in to tt::TokenTree\")?;\n \n@@ -89,7 +95,10 @@ pub(crate) fn macro_expand(\n         return Err(format!(\"Total tokens count exceed limit : count = {}\", count));\n     }\n \n-    Ok((Arc::new(tt), (macro_arg.1.clone(), macro_rules.1.clone())))\n+    Ok((\n+        Arc::new(tt),\n+        MacroExpandInfo { arg_map: macro_arg.1.clone(), def_map: macro_rules.1.clone() },\n+    ))\n }\n \n pub(crate) fn parse_or_expand(db: &dyn AstDatabase, file_id: HirFileId) -> Option<SyntaxNode> {\n@@ -133,19 +142,20 @@ pub(crate) fn parse_macro_with_info(\n     };\n \n     res.map(|(parsed, exp_map)| {\n-        let (arg_map, def_map) = tt.1;\n+        let expand_info = tt.1;\n         let loc: MacroCallLoc = db.lookup_intern_macro(macro_call_id);\n \n         let def_start =\n             loc.def.ast_id.to_node(db).token_tree().map(|t| t.syntax().text_range().start());\n         let arg_start =\n             loc.ast_id.to_node(db).token_tree().map(|t| t.syntax().text_range().start());\n \n-        let arg_map =\n-            arg_start.map(|start| exp_map.ranges(&arg_map, start)).unwrap_or_else(|| Vec::new());\n-\n-        let def_map =\n-            def_start.map(|start| exp_map.ranges(&def_map, start)).unwrap_or_else(|| Vec::new());\n+        let arg_map = arg_start\n+            .map(|start| exp_map.ranges(&expand_info.arg_map, start))\n+            .unwrap_or_else(|| Vec::new());\n+        let def_map = def_start\n+            .map(|start| exp_map.ranges(&expand_info.def_map, start))\n+            .unwrap_or_else(|| Vec::new());\n \n         let info = ExpansionInfo { arg_map, def_map };\n "}, {"sha": "63ba17158cf2f2782c7e22199cbef763b45b9be4", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6709f64af1836460aee41aca34eb19ed3a337dd/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6709f64af1836460aee41aca34eb19ed3a337dd/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=e6709f64af1836460aee41aca34eb19ed3a337dd", "patch": "@@ -132,7 +132,7 @@ impl MacroCallId {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n-/// ExpansionInfo mainly describle how to map text range between src and expaned macro\n+/// ExpansionInfo mainly describes how to map text range between src and expanded macro\n pub struct ExpansionInfo {\n     pub arg_map: Vec<(TextRange, TextRange)>,\n     pub def_map: Vec<(TextRange, TextRange)>,"}, {"sha": "2f21ad6e0aa80713897097234e949bf52db3a367", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e6709f64af1836460aee41aca34eb19ed3a337dd/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6709f64af1836460aee41aca34eb19ed3a337dd/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=e6709f64af1836460aee41aca34eb19ed3a337dd", "patch": "@@ -26,7 +26,11 @@ static TOKEN_MAP_COUNTER: AtomicU32 = AtomicU32::new(0);\n \n /// Generate an unique token map id for each instance\n fn make_uniq_token_map_id() -> u32 {\n-    TOKEN_MAP_COUNTER.fetch_add(1, Ordering::SeqCst)\n+    let res = TOKEN_MAP_COUNTER.fetch_add(1, Ordering::SeqCst);\n+    if res == std::u32::MAX {\n+        panic!(\"TOKEN_MAP_COUNTER is overflowed\");\n+    }\n+    res\n }\n \n impl std::default::Default for TokenMap {\n@@ -35,10 +39,9 @@ impl std::default::Default for TokenMap {\n     }\n }\n \n-/// Maps Relative range of the expanded syntax node to `tt::TokenId`\n+/// Maps relative range of the expanded syntax node to `tt::TokenId`\n #[derive(Debug, PartialEq, Eq, Default)]\n pub struct ExpandedRangeMap {\n-    /// Maps `tt::TokenId` to the *relative* source range.\n     ranges: Vec<(TextRange, tt::TokenId)>,\n }\n \n@@ -85,14 +88,13 @@ fn fragment_to_syntax_node(\n     };\n     let buffer = TokenBuffer::new(&tokens);\n     let mut token_source = SubtreeTokenSource::new(&buffer);\n-    let mut range_map = ExpandedRangeMap::default();\n-    let mut tree_sink = TtTreeSink::new(buffer.begin(), &mut range_map);\n+    let mut tree_sink = TtTreeSink::new(buffer.begin());\n     ra_parser::parse_fragment(&mut token_source, &mut tree_sink, fragment_kind);\n     if tree_sink.roots.len() != 1 {\n         return Err(ExpandError::ConversionError);\n     }\n     //FIXME: would be cool to report errors\n-    let parse = tree_sink.inner.finish();\n+    let (parse, range_map) = tree_sink.finish();\n     Ok((parse, range_map))\n }\n \n@@ -320,24 +322,28 @@ struct TtTreeSink<'a> {\n     cursor: Cursor<'a>,\n     text_pos: TextUnit,\n     inner: SyntaxTreeBuilder,\n-    range_map: &'a mut ExpandedRangeMap,\n+    range_map: ExpandedRangeMap,\n \n     // Number of roots\n     // Use for detect ill-form tree which is not single root\n     roots: smallvec::SmallVec<[usize; 1]>,\n }\n \n impl<'a> TtTreeSink<'a> {\n-    fn new(cursor: Cursor<'a>, range_map: &'a mut ExpandedRangeMap) -> Self {\n+    fn new(cursor: Cursor<'a>) -> Self {\n         TtTreeSink {\n             buf: String::new(),\n             cursor,\n             text_pos: 0.into(),\n             inner: SyntaxTreeBuilder::default(),\n             roots: smallvec::SmallVec::new(),\n-            range_map,\n+            range_map: ExpandedRangeMap::default(),\n         }\n     }\n+\n+    fn finish(self) -> (Parse<SyntaxNode>, ExpandedRangeMap) {\n+        (self.inner.finish(), self.range_map)\n+    }\n }\n \n fn delim_to_str(d: tt::Delimiter, closing: bool) -> SmolStr {"}, {"sha": "1449618f3ee798cfcba5741a63287c8b712c4a3e", "filename": "crates/ra_tt/src/lib.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e6709f64af1836460aee41aca34eb19ed3a337dd/crates%2Fra_tt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6709f64af1836460aee41aca34eb19ed3a337dd/crates%2Fra_tt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Flib.rs?ref=e6709f64af1836460aee41aca34eb19ed3a337dd", "patch": "@@ -25,23 +25,26 @@ use smol_str::SmolStr;\n /// source token and making sure that identities are preserved during macro\n /// expansion.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct TokenId(u32, u32);\n+pub struct TokenId {\n+    token_id: u32,\n+    map_id: u32,\n+}\n \n impl TokenId {\n     pub fn new(token_id: u32, map_id: u32) -> TokenId {\n-        TokenId(token_id, map_id)\n+        TokenId { token_id, map_id }\n     }\n \n     pub const fn unspecified() -> TokenId {\n-        TokenId(!0, !0)\n+        TokenId { token_id: !0, map_id: !0 }\n     }\n \n     pub fn token_id(&self) -> u32 {\n-        self.0\n+        self.token_id\n     }\n \n     pub fn map_id(&self) -> u32 {\n-        self.1\n+        self.map_id\n     }\n }\n "}]}