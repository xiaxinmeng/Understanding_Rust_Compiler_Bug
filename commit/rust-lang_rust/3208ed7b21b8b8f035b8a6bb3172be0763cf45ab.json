{"sha": "3208ed7b21b8b8f035b8a6bb3172be0763cf45ab", "node_id": "C_kwDOAAsO6NoAKDMyMDhlZDdiMjFiOGI4ZjAzNWI4YTZiYjMxNzJiZTA3NjNjZjQ1YWI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-29T20:46:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-29T20:46:33Z"}, "message": "Rollup merge of #95256 - thomcc:fix-unwind-safe, r=m-ou-se\n\nEnsure io::Error's bitpacked repr doesn't accidentally impl UnwindSafe\n\nSadly, I'm not sure how to easily test that we don't impl a trait, though (or can libstd use `where io::Error: !UnwindSafe` or something).\n\nFixes #95203", "tree": {"sha": "d85a20e80af6a529613e3c7a7ae6a51b6f134f3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d85a20e80af6a529613e3c7a7ae6a51b6f134f3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3208ed7b21b8b8f035b8a6bb3172be0763cf45ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiQ3ApCRBK7hj4Ov3rIwAAzbcIAFmJiG5XrAmBuWctj47OWBCR\nbKssk3DYZ5WTl0N9218bjcU+nDHJA7CsX3DzsgSv42Jqe5AaKRG9eRF53oqguE9A\nK46jxmGYiPQYnDN1ThMf7t4RVS3WHthwYy4Vg6ZMef3sZ26Ba/Zmp+5OKq0SAS2z\naLP/LsCHgs0NX5T/mFU89Uwz8RBCa5rNYfZsB7riNeqNNGvtZnwF7XuEskHLAaO5\nvhMA3H2UE3KZJ3j9VxbuGCrgFMn94oq8CpTQE82eE/1Qc9DyOJn+YobbFEuPy35m\nlAN3Tvnk3vIhX78ZAbVyREvxnM1NeQqbaj3LTCJhCrIg2zrLzOxMsKqDpLXRg9U=\n=u1Ix\n-----END PGP SIGNATURE-----\n", "payload": "tree d85a20e80af6a529613e3c7a7ae6a51b6f134f3b\nparent bba2a64d0c5ba20c4153676a09381b8703c197ba\nparent 3ac93abfb220ad3fc0614787a5644e63c162f0d6\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648586793 +0200\ncommitter GitHub <noreply@github.com> 1648586793 +0200\n\nRollup merge of #95256 - thomcc:fix-unwind-safe, r=m-ou-se\n\nEnsure io::Error's bitpacked repr doesn't accidentally impl UnwindSafe\n\nSadly, I'm not sure how to easily test that we don't impl a trait, though (or can libstd use `where io::Error: !UnwindSafe` or something).\n\nFixes #95203\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3208ed7b21b8b8f035b8a6bb3172be0763cf45ab", "html_url": "https://github.com/rust-lang/rust/commit/3208ed7b21b8b8f035b8a6bb3172be0763cf45ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3208ed7b21b8b8f035b8a6bb3172be0763cf45ab/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bba2a64d0c5ba20c4153676a09381b8703c197ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/bba2a64d0c5ba20c4153676a09381b8703c197ba", "html_url": "https://github.com/rust-lang/rust/commit/bba2a64d0c5ba20c4153676a09381b8703c197ba"}, {"sha": "3ac93abfb220ad3fc0614787a5644e63c162f0d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ac93abfb220ad3fc0614787a5644e63c162f0d6", "html_url": "https://github.com/rust-lang/rust/commit/3ac93abfb220ad3fc0614787a5644e63c162f0d6"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "208d5a80c5a699b98348e9ba1be84cadf5314921", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3208ed7b21b8b8f035b8a6bb3172be0763cf45ab/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3208ed7b21b8b8f035b8a6bb3172be0763cf45ab/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=3208ed7b21b8b8f035b8a6bb3172be0763cf45ab", "patch": "@@ -104,6 +104,7 @@\n \n use super::{Custom, ErrorData, ErrorKind, SimpleMessage};\n use alloc::boxed::Box;\n+use core::marker::PhantomData;\n use core::mem::{align_of, size_of};\n use core::ptr::NonNull;\n \n@@ -114,8 +115,17 @@ const TAG_CUSTOM: usize = 0b01;\n const TAG_OS: usize = 0b10;\n const TAG_SIMPLE: usize = 0b11;\n \n+/// The internal representation.\n+///\n+/// See the module docs for more, this is just a way to hack in a check that we\n+/// indeed are not unwind-safe.\n+///\n+/// ```compile_fail,E0277\n+/// fn is_unwind_safe<T: core::panic::UnwindSafe>() {}\n+/// is_unwind_safe::<std::io::Error>();\n+/// ```\n #[repr(transparent)]\n-pub(super) struct Repr(NonNull<()>);\n+pub(super) struct Repr(NonNull<()>, PhantomData<ErrorData<Box<Custom>>>);\n \n // All the types `Repr` stores internally are Send + Sync, and so is it.\n unsafe impl Send for Repr {}\n@@ -145,7 +155,7 @@ impl Repr {\n         // box, and `TAG_CUSTOM` just... isn't zero -- it's `0b01`). Therefore,\n         // `TAG_CUSTOM + p` isn't zero and so `tagged` can't be, and the\n         // `new_unchecked` is safe.\n-        let res = Self(unsafe { NonNull::new_unchecked(tagged) });\n+        let res = Self(unsafe { NonNull::new_unchecked(tagged) }, PhantomData);\n         // quickly smoke-check we encoded the right thing (This generally will\n         // only run in libstd's tests, unless the user uses -Zbuild-std)\n         debug_assert!(matches!(res.data(), ErrorData::Custom(_)), \"repr(custom) encoding failed\");\n@@ -156,7 +166,7 @@ impl Repr {\n     pub(super) fn new_os(code: i32) -> Self {\n         let utagged = ((code as usize) << 32) | TAG_OS;\n         // Safety: `TAG_OS` is not zero, so the result of the `|` is not 0.\n-        let res = Self(unsafe { NonNull::new_unchecked(utagged as *mut ()) });\n+        let res = Self(unsafe { NonNull::new_unchecked(utagged as *mut ()) }, PhantomData);\n         // quickly smoke-check we encoded the right thing (This generally will\n         // only run in libstd's tests, unless the user uses -Zbuild-std)\n         debug_assert!(\n@@ -170,7 +180,7 @@ impl Repr {\n     pub(super) fn new_simple(kind: ErrorKind) -> Self {\n         let utagged = ((kind as usize) << 32) | TAG_SIMPLE;\n         // Safety: `TAG_SIMPLE` is not zero, so the result of the `|` is not 0.\n-        let res = Self(unsafe { NonNull::new_unchecked(utagged as *mut ()) });\n+        let res = Self(unsafe { NonNull::new_unchecked(utagged as *mut ()) }, PhantomData);\n         // quickly smoke-check we encoded the right thing (This generally will\n         // only run in libstd's tests, unless the user uses -Zbuild-std)\n         debug_assert!(\n@@ -184,7 +194,7 @@ impl Repr {\n     #[inline]\n     pub(super) const fn new_simple_message(m: &'static SimpleMessage) -> Self {\n         // Safety: References are never null.\n-        Self(unsafe { NonNull::new_unchecked(m as *const _ as *mut ()) })\n+        Self(unsafe { NonNull::new_unchecked(m as *const _ as *mut ()) }, PhantomData)\n     }\n \n     #[inline]"}]}