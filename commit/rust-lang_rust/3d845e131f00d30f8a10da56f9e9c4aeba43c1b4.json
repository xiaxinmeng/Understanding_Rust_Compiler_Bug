{"sha": "3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkODQ1ZTEzMWYwMGQzMGY4YTEwZGE1NmY5ZTljNGFlYmE0M2MxYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-10T22:35:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-10T22:35:36Z"}, "message": "Auto merge of #58361 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 16 pull requests\n\nSuccessful merges:\n\n - #57259 (Update reference of rlibc crate to compiler-builtins crate)\n - #57740 (Use `to_ne_bytes` for converting IPv4Addr to octets)\n - #57926 (Tiny expansion to docs for `core::convert`.)\n - #58157 (Add Cargo.lock automatically adding message)\n - #58203 (rustdoc: display sugared return types for async functions)\n - #58243 (Add trait alias support in rustdoc)\n - #58262 (Add #[must_use] message to Fn* traits)\n - #58295 (std::sys::unix::stdio: explain why we do into_raw)\n - #58297 (Cleanup JS a bit)\n - #58317 (Some writing improvement, conciseness of intro)\n - #58324 (miri: give non-generic functions a stable address)\n - #58332 (operand-to-place copies should never be overlapping)\n - #58345 (When there are multiple filenames, print what got interpreted as filenames)\n - #58346 (rpath computation: explain why we pop())\n - #58350 (Fix failing tidy (line endings on Windows))\n - #58352 (miri value visitor: use `?` in macro)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "c90dd19a3f0f5c616a280bafe41ef91eae827e8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c90dd19a3f0f5c616a280bafe41ef91eae827e8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "html_url": "https://github.com/rust-lang/rust/commit/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b7af2668a80fb2fa720a06ca44aff4dd1e9de38", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38", "html_url": "https://github.com/rust-lang/rust/commit/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38"}, {"sha": "d792cef57341e1670150ebc7002343a7e62c6bd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d792cef57341e1670150ebc7002343a7e62c6bd9", "html_url": "https://github.com/rust-lang/rust/commit/d792cef57341e1670150ebc7002343a7e62c6bd9"}], "stats": {"total": 408, "additions": 306, "deletions": 102}, "files": [{"sha": "a36df24359df7024bd655cd4a7388271397b4a03", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -1,3 +1,5 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n [[package]]\n name = \"adler32\"\n version = \"1.0.3\""}, {"sha": "bd2778f304989ee52be8201504d6ec621dd60ca9", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -1 +1 @@\n-Subproject commit d663113d1d9fbd35f1145c29f6080a6350b7f419\n+Subproject commit bd2778f304989ee52be8201504d6ec621dd60ca9"}, {"sha": "3463cdb126cc6b558e977dd2391782ca3da31e68", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -1,9 +1,8 @@\n # Unstable features\n \n Rustdoc is under active development, and like the Rust compiler, some features are only available\n-on the nightly releases. Some of these are new and need some more testing before they're able to get\n-released to the world at large, and some of them are tied to features in the Rust compiler that are\n-themselves unstable. Several features here require a matching `#![feature(...)]` attribute to\n+on nightly releases. Some of these features are new and need some more testing before they're able to be\n+released to the world at large, and some of them are tied to features in the Rust compiler that are unstable. Several features here require a matching `#![feature(...)]` attribute to\n enable, and thus are more fully documented in the [Unstable Book]. Those sections will link over\n there as necessary.\n \n@@ -428,4 +427,4 @@ $ rustdoc src/lib.rs --test -Z unstable-options --persist-doctests target/rustdo\n \n This flag allows you to keep doctest executables around after they're compiled or run.\n Usually, rustdoc will immediately discard a compiled doctest after it's been tested, but\n-with this option, you can keep those binaries around for farther testing.\n\\ No newline at end of file\n+with this option, you can keep those binaries around for farther testing."}, {"sha": "d4a1d15e4e7e1a04649bffbda5fa9d7b8ad5c4a8", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -17,7 +17,10 @@\n //! [`TryFrom<T>`][`TryFrom`] rather than [`Into<U>`][`Into`] or [`TryInto<U>`][`TryInto`],\n //! as [`From`] and [`TryFrom`] provide greater flexibility and offer\n //! equivalent [`Into`] or [`TryInto`] implementations for free, thanks to a\n-//! blanket implementation in the standard library.\n+//! blanket implementation in the standard library.  However, there are some cases\n+//! where this is not possible, such as creating conversions into a type defined\n+//! outside your library, so implementing [`Into`] instead of [`From`] is\n+//! sometimes necessary.\n //!\n //! # Generic Implementations\n //!"}, {"sha": "8b728c9414d4a3626a90cb0e3893ba81bab41e2a", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -24,7 +24,7 @@\n //!   often generated by LLVM. Additionally, this library can make explicit\n //!   calls to these functions. Their signatures are the same as found in C.\n //!   These functions are often provided by the system libc, but can also be\n-//!   provided by the [rlibc crate](https://crates.io/crates/rlibc).\n+//!   provided by the [compiler-builtins crate](https://crates.io/crates/compiler_builtins).\n //!\n //! * `rust_begin_panic` - This function takes four arguments, a\n //!   `fmt::Arguments`, a `&'static str`, and two `u32`'s. These four arguments"}, {"sha": "c69f5fd989696d5d1d3f50b15ec9a1aed8b36163", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -62,7 +62,7 @@\n     label=\"expected an `Fn<{Args}>` closure, found `{Self}`\",\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n-#[must_use]\n+#[must_use = \"closures are lazy and do nothing unless called\"]\n pub trait Fn<Args> : FnMut<Args> {\n     /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n@@ -141,7 +141,7 @@ pub trait Fn<Args> : FnMut<Args> {\n     label=\"expected an `FnMut<{Args}>` closure, found `{Self}`\",\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n-#[must_use]\n+#[must_use = \"closures are lazy and do nothing unless called\"]\n pub trait FnMut<Args> : FnOnce<Args> {\n     /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n@@ -220,7 +220,7 @@ pub trait FnMut<Args> : FnOnce<Args> {\n     label=\"expected an `FnOnce<{Args}>` closure, found `{Self}`\",\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n-#[must_use]\n+#[must_use = \"closures are lazy and do nothing unless called\"]\n pub trait FnOnce<Args> {\n     /// The returned type after the call operator is used.\n     #[stable(feature = \"fn_once_output\", since = \"1.12.0\")]"}, {"sha": "bb25d1b42095ae6713ce4efb65d6a15b083cabcc", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -27,7 +27,7 @@ pub use self::pointer::{Pointer, PointerArithmetic};\n use std::fmt;\n use crate::mir;\n use crate::hir::def_id::DefId;\n-use crate::ty::{self, TyCtxt, Instance};\n+use crate::ty::{self, TyCtxt, Instance, subst::UnpackedKind};\n use crate::ty::layout::{self, Size};\n use std::io;\n use crate::rustc_serialize::{Encoder, Decodable, Encodable};\n@@ -318,14 +318,29 @@ impl<'tcx> AllocMap<'tcx> {\n         id\n     }\n \n-    /// Functions cannot be identified by pointers, as asm-equal functions can get deduplicated\n-    /// by the linker and functions can be duplicated across crates.\n-    /// We thus generate a new `AllocId` for every mention of a function. This means that\n-    /// `main as fn() == main as fn()` is false, while `let x = main as fn(); x == x` is true.\n     pub fn create_fn_alloc(&mut self, instance: Instance<'tcx>) -> AllocId {\n-        let id = self.reserve();\n-        self.id_to_kind.insert(id, AllocKind::Function(instance));\n-        id\n+        // Functions cannot be identified by pointers, as asm-equal functions can get deduplicated\n+        // by the linker (we set the \"unnamed_addr\" attribute for LLVM) and functions can be\n+        // duplicated across crates.\n+        // We thus generate a new `AllocId` for every mention of a function. This means that\n+        // `main as fn() == main as fn()` is false, while `let x = main as fn(); x == x` is true.\n+        // However, formatting code relies on function identity (see #58320), so we only do\n+        // this for generic functions.  Lifetime parameters are ignored.\n+        let is_generic = instance.substs.into_iter().any(|kind| {\n+            match kind.unpack() {\n+                UnpackedKind::Lifetime(_) => false,\n+                _ => true,\n+            }\n+        });\n+        if is_generic {\n+            // Get a fresh ID\n+            let id = self.reserve();\n+            self.id_to_kind.insert(id, AllocKind::Function(instance));\n+            id\n+        } else {\n+            // Deduplicate\n+            self.intern(AllocKind::Function(instance))\n+        }\n     }\n \n     /// Returns `None` in case the `AllocId` is dangling. An `EvalContext` can still have a"}, {"sha": "a5c828e089f39ed34413b39f6100610fd7e5bcbd", "filename": "src/librustc_codegen_llvm/back/rpath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -101,9 +101,9 @@ fn get_rpath_relative_to_output(config: &mut RPathConfig, lib: &Path) -> String\n \n     let cwd = env::current_dir().unwrap();\n     let mut lib = fs::canonicalize(&cwd.join(lib)).unwrap_or_else(|_| cwd.join(lib));\n-    lib.pop();\n+    lib.pop(); // strip filename\n     let mut output = cwd.join(&config.out_filename);\n-    output.pop();\n+    output.pop(); // strip filename\n     let output = fs::canonicalize(&output).unwrap_or(output);\n     let relative = path_relative_from(&lib, &output).unwrap_or_else(||\n         panic!(\"couldn't create relative path from {:?} to {:?}\", output, lib));"}, {"sha": "f34a7e040b1c38b6eccf19b02784a774fe84ee6a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -838,7 +838,15 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                 early_error(sopts.error_format, \"no input filename given\");\n             }\n             1 => panic!(\"make_input should have provided valid inputs\"),\n-            _ => early_error(sopts.error_format, \"multiple input filenames provided\"),\n+            _ =>\n+                early_error(\n+                    sopts.error_format,\n+                    &format!(\n+                        \"multiple input filenames provided (first two filenames are `{}` and `{}`)\",\n+                        matches.free[0],\n+                        matches.free[1],\n+                    ),\n+                )\n         }\n     }\n "}, {"sha": "3d6fcae0cab8c7330e6a353d645414108eda30e5", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -823,6 +823,8 @@ where\n         let src = match self.try_read_immediate(src)? {\n             Ok(src_val) => {\n                 // Yay, we got a value that we can write directly.\n+                // FIXME: Add a check to make sure that if `src` is indirect,\n+                // it does not overlap with `dest`.\n                 return self.write_immediate_no_validate(src_val, dest);\n             }\n             Err(mplace) => mplace,\n@@ -836,7 +838,8 @@ where\n         self.memory.copy(\n             src_ptr, src_align,\n             dest_ptr, dest_align,\n-            dest.layout.size, false\n+            dest.layout.size,\n+            /*nonoverlapping*/ true,\n         )?;\n \n         Ok(())"}, {"sha": "4ff5cde08d08694cf1aa287e954a02d34dcd4944", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -125,14 +125,14 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n }\n \n macro_rules! make_value_visitor {\n-    ($visitor_trait_name:ident, $($mutability:ident)*) => {\n+    ($visitor_trait_name:ident, $($mutability:ident)?) => {\n         // How to traverse a value and what to do when we are at the leaves.\n         pub trait $visitor_trait_name<'a, 'mir, 'tcx: 'mir+'a, M: Machine<'a, 'mir, 'tcx>>: Sized {\n             type V: Value<'a, 'mir, 'tcx, M>;\n \n             /// The visitor must have an `EvalContext` in it.\n-            fn ecx(&$($mutability)* self)\n-                -> &$($mutability)* EvalContext<'a, 'mir, 'tcx, M>;\n+            fn ecx(&$($mutability)? self)\n+                -> &$($mutability)? EvalContext<'a, 'mir, 'tcx, M>;\n \n             // Recursive actions, ready to be overloaded.\n             /// Visit the given value, dispatching as appropriate to more specialized visitors."}, {"sha": "b0bb033b94b251809108ba3d32ef8c0b710aa109", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 71, "deletions": 4, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -517,6 +517,7 @@ pub enum ItemEnum {\n     StaticItem(Static),\n     ConstantItem(Constant),\n     TraitItem(Trait),\n+    TraitAliasItem(TraitAlias),\n     ImplItem(Impl),\n     /// A method signature only. Used for required methods in traits (ie,\n     /// non-default-methods).\n@@ -554,6 +555,7 @@ impl ItemEnum {\n             ItemEnum::TyMethodItem(ref i) => &i.generics,\n             ItemEnum::MethodItem(ref i) => &i.generics,\n             ItemEnum::ForeignFunctionItem(ref f) => &f.generics,\n+            ItemEnum::TraitAliasItem(ref ta) => &ta.generics,\n             _ => return None,\n         })\n     }\n@@ -603,6 +605,7 @@ impl Clean<Item> for doctree::Module {\n         items.extend(self.impls.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.macros.iter().map(|x| x.clean(cx)));\n         items.extend(self.proc_macros.iter().map(|x| x.clean(cx)));\n+        items.extend(self.trait_aliases.iter().map(|x| x.clean(cx)));\n \n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code.\n@@ -1724,6 +1727,30 @@ impl FnDecl {\n     pub fn self_type(&self) -> Option<SelfTy> {\n         self.inputs.values.get(0).and_then(|v| v.to_self())\n     }\n+\n+    /// Returns the sugared return type for an async function.\n+    ///\n+    /// For example, if the return type is `impl std::future::Future<Output = i32>`, this function\n+    /// will return `i32`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This function will panic if the return type does not match the expected sugaring for async\n+    /// functions.\n+    pub fn sugared_async_return_type(&self) -> FunctionRetTy {\n+        match &self.output {\n+            FunctionRetTy::Return(Type::ImplTrait(bounds)) => {\n+                match &bounds[0] {\n+                    GenericBound::TraitBound(PolyTrait { trait_, .. }, ..) => {\n+                        let bindings = trait_.bindings().unwrap();\n+                        FunctionRetTy::Return(bindings[0].ty.clone())\n+                    }\n+                    _ => panic!(\"unexpected desugaring of async function\"),\n+                }\n+            }\n+            _ => panic!(\"unexpected desugaring of async function\"),\n+        }\n+    }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n@@ -1885,13 +1912,38 @@ impl Clean<Item> for doctree::Trait {\n                 items: self.items.clean(cx),\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),\n-                is_spotlight: is_spotlight,\n+                is_spotlight,\n                 is_auto: self.is_auto.clean(cx),\n             }),\n         }\n     }\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct TraitAlias {\n+    pub generics: Generics,\n+    pub bounds: Vec<GenericBound>,\n+}\n+\n+impl Clean<Item> for doctree::TraitAlias {\n+    fn clean(&self, cx: &DocContext) -> Item {\n+        let attrs = self.attrs.clean(cx);\n+        Item {\n+            name: Some(self.name.clean(cx)),\n+            attrs,\n+            source: self.whence.clean(cx),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n+            visibility: self.vis.clean(cx),\n+            stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n+            inner: TraitAliasItem(TraitAlias {\n+                generics: self.generics.clean(cx),\n+                bounds: self.bounds.clean(cx),\n+            }),\n+        }\n+    }\n+}\n+\n impl Clean<bool> for hir::IsAuto {\n     fn clean(&self, _: &DocContext) -> bool {\n         match *self {\n@@ -2223,6 +2275,7 @@ pub enum TypeKind {\n     Macro,\n     Attr,\n     Derive,\n+    TraitAlias,\n }\n \n pub trait GetDefId {\n@@ -2282,6 +2335,21 @@ impl Type {\n             _ => None,\n         }\n     }\n+\n+    pub fn bindings(&self) -> Option<&[TypeBinding]> {\n+        match *self {\n+            ResolvedPath { ref path, .. } => {\n+                path.segments.last().and_then(|seg| {\n+                    if let GenericArgs::AngleBracketed { ref bindings, .. } = seg.args {\n+                        Some(&**bindings)\n+                    } else {\n+                        None\n+                    }\n+                })\n+            }\n+            _ => None\n+        }\n+    }\n }\n \n impl GetDefId for Type {\n@@ -3819,10 +3887,9 @@ pub fn register_def(cx: &DocContext, def: Def) -> DefId {\n             MacroKind::Derive => (i, TypeKind::Derive),\n             MacroKind::ProcMacroStub => unreachable!(),\n         },\n+        Def::TraitAlias(i) => (i, TypeKind::TraitAlias),\n         Def::SelfTy(Some(def_id), _) => (def_id, TypeKind::Trait),\n-        Def::SelfTy(_, Some(impl_def_id)) => {\n-            return impl_def_id\n-        }\n+        Def::SelfTy(_, Some(impl_def_id)) => return impl_def_id,\n         _ => return def.def_id()\n     };\n     if did.is_local() { return did }"}, {"sha": "e8458385739df64ed13258dc52aa0af7c800c93f", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -38,6 +38,7 @@ pub struct Module {\n     pub foreigns: Vec<hir::ForeignMod>,\n     pub macros: Vec<Macro>,\n     pub proc_macros: Vec<ProcMacro>,\n+    pub trait_aliases: Vec<TraitAlias>,\n     pub is_crate: bool,\n }\n \n@@ -53,21 +54,22 @@ impl Module {\n             where_inner: syntax_pos::DUMMY_SP,\n             attrs      : hir::HirVec::new(),\n             extern_crates: Vec::new(),\n-            imports    : Vec::new(),\n-            structs    : Vec::new(),\n-            unions     : Vec::new(),\n-            enums      : Vec::new(),\n-            fns        : Vec::new(),\n-            mods       : Vec::new(),\n-            typedefs   : Vec::new(),\n-            existentials: Vec::new(),\n-            statics    : Vec::new(),\n-            constants  : Vec::new(),\n-            traits     : Vec::new(),\n-            impls      : Vec::new(),\n-            foreigns   : Vec::new(),\n-            macros     : Vec::new(),\n-            proc_macros: Vec::new(),\n+            imports    :   Vec::new(),\n+            structs    :   Vec::new(),\n+            unions     :   Vec::new(),\n+            enums      :   Vec::new(),\n+            fns        :   Vec::new(),\n+            mods       :   Vec::new(),\n+            typedefs   :   Vec::new(),\n+            existentials:  Vec::new(),\n+            statics    :   Vec::new(),\n+            constants  :   Vec::new(),\n+            traits     :   Vec::new(),\n+            impls      :   Vec::new(),\n+            foreigns   :   Vec::new(),\n+            macros     :   Vec::new(),\n+            proc_macros:   Vec::new(),\n+            trait_aliases: Vec::new(),\n             is_crate   : false,\n         }\n     }\n@@ -208,6 +210,18 @@ pub struct Trait {\n     pub depr: Option<attr::Deprecation>,\n }\n \n+pub struct TraitAlias {\n+    pub name: Name,\n+    pub generics: hir::Generics,\n+    pub bounds: hir::HirVec<hir::GenericBound>,\n+    pub attrs: hir::HirVec<ast::Attribute>,\n+    pub id: ast::NodeId,\n+    pub whence: Span,\n+    pub vis: hir::Visibility,\n+    pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n+}\n+\n #[derive(Debug)]\n pub struct Impl {\n     pub unsafety: hir::Unsafety,"}, {"sha": "c03e679bc519480283a73ed4270253cebd6b2003", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -5,6 +5,7 @@\n //! assume that HTML output is desired, although it may be possible to redesign\n //! them in the future to instead emit any format desired.\n \n+use std::borrow::Cow;\n use std::fmt;\n \n use rustc::hir::def_id::DefId;\n@@ -44,14 +45,16 @@ pub struct GenericBounds<'a>(pub &'a [clean::GenericBound]);\n pub struct CommaSep<'a, T: 'a>(pub &'a [T]);\n pub struct AbiSpace(pub Abi);\n \n-/// Wrapper struct for properly emitting a method declaration.\n-pub struct Method<'a> {\n+/// Wrapper struct for properly emitting a function or method declaration.\n+pub struct Function<'a> {\n     /// The declaration to emit.\n     pub decl: &'a clean::FnDecl,\n     /// The length of the function's \"name\", used to determine line-wrapping.\n     pub name_len: usize,\n     /// The number of spaces to indent each successive line with, if line-wrapping is necessary.\n     pub indent: usize,\n+    /// Whether the function is async or not.\n+    pub asyncness: hir::IsAsync,\n }\n \n /// Wrapper struct for emitting a where clause from Generics.\n@@ -829,9 +832,9 @@ impl fmt::Display for clean::FnDecl {\n     }\n }\n \n-impl<'a> fmt::Display for Method<'a> {\n+impl<'a> fmt::Display for Function<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let &Method { decl, name_len, indent } = self;\n+        let &Function { decl, name_len, indent, asyncness } = self;\n         let amp = if f.alternate() { \"&\" } else { \"&amp;\" };\n         let mut args = String::new();\n         let mut args_plain = String::new();\n@@ -891,11 +894,17 @@ impl<'a> fmt::Display for Method<'a> {\n             args_plain.push_str(\", ...\");\n         }\n \n-        let arrow_plain = format!(\"{:#}\", decl.output);\n+        let output = if let hir::IsAsync::Async = asyncness {\n+            Cow::Owned(decl.sugared_async_return_type())\n+        } else {\n+            Cow::Borrowed(&decl.output)\n+        };\n+\n+        let arrow_plain = format!(\"{:#}\", &output);\n         let arrow = if f.alternate() {\n-            format!(\"{:#}\", decl.output)\n+            format!(\"{:#}\", &output)\n         } else {\n-            decl.output.to_string()\n+            output.to_string()\n         };\n \n         let pad = \" \".repeat(name_len);"}, {"sha": "8a3b5484f395d38192c9be1091e69282b83a320d", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -42,6 +42,7 @@ pub enum ItemType {\n     Existential     = 22,\n     ProcAttribute   = 23,\n     ProcDerive      = 24,\n+    TraitAlias      = 25,\n }\n \n \n@@ -86,6 +87,7 @@ impl<'a> From<&'a clean::Item> for ItemType {\n             clean::AssociatedTypeItem(..)  => ItemType::AssociatedType,\n             clean::ForeignTypeItem         => ItemType::ForeignType,\n             clean::KeywordItem(..)         => ItemType::Keyword,\n+            clean::TraitAliasItem(..)      => ItemType::TraitAlias,\n             clean::ProcMacroItem(ref mac)  => match mac.kind {\n                 MacroKind::Bang            => ItemType::Macro,\n                 MacroKind::Attr            => ItemType::ProcAttribute,\n@@ -100,20 +102,21 @@ impl<'a> From<&'a clean::Item> for ItemType {\n impl From<clean::TypeKind> for ItemType {\n     fn from(kind: clean::TypeKind) -> ItemType {\n         match kind {\n-            clean::TypeKind::Struct   => ItemType::Struct,\n-            clean::TypeKind::Union    => ItemType::Union,\n-            clean::TypeKind::Enum     => ItemType::Enum,\n-            clean::TypeKind::Function => ItemType::Function,\n-            clean::TypeKind::Trait    => ItemType::Trait,\n-            clean::TypeKind::Module   => ItemType::Module,\n-            clean::TypeKind::Static   => ItemType::Static,\n-            clean::TypeKind::Const    => ItemType::Constant,\n-            clean::TypeKind::Variant  => ItemType::Variant,\n-            clean::TypeKind::Typedef  => ItemType::Typedef,\n-            clean::TypeKind::Foreign  => ItemType::ForeignType,\n-            clean::TypeKind::Macro    => ItemType::Macro,\n-            clean::TypeKind::Attr     => ItemType::ProcAttribute,\n-            clean::TypeKind::Derive   => ItemType::ProcDerive,\n+            clean::TypeKind::Struct     => ItemType::Struct,\n+            clean::TypeKind::Union      => ItemType::Union,\n+            clean::TypeKind::Enum       => ItemType::Enum,\n+            clean::TypeKind::Function   => ItemType::Function,\n+            clean::TypeKind::Trait      => ItemType::Trait,\n+            clean::TypeKind::Module     => ItemType::Module,\n+            clean::TypeKind::Static     => ItemType::Static,\n+            clean::TypeKind::Const      => ItemType::Constant,\n+            clean::TypeKind::Variant    => ItemType::Variant,\n+            clean::TypeKind::Typedef    => ItemType::Typedef,\n+            clean::TypeKind::Foreign    => ItemType::ForeignType,\n+            clean::TypeKind::Macro      => ItemType::Macro,\n+            clean::TypeKind::Attr       => ItemType::ProcAttribute,\n+            clean::TypeKind::Derive     => ItemType::ProcDerive,\n+            clean::TypeKind::TraitAlias => ItemType::TraitAlias,\n         }\n     }\n }\n@@ -146,6 +149,7 @@ impl ItemType {\n             ItemType::Existential     => \"existential\",\n             ItemType::ProcAttribute   => \"attr\",\n             ItemType::ProcDerive      => \"derive\",\n+            ItemType::TraitAlias      => \"traitalias\",\n         }\n     }\n \n@@ -160,6 +164,7 @@ impl ItemType {\n             ItemType::Primitive |\n             ItemType::AssociatedType |\n             ItemType::Existential |\n+            ItemType::TraitAlias |\n             ItemType::ForeignType => NameSpace::Type,\n \n             ItemType::ExternCrate |"}, {"sha": "3a8e8a6a6c8408d93b59e26a1b64e2ce3a12ab5c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -62,7 +62,7 @@ use fold::DocFolder;\n use html::escape::Escape;\n use html::format::{AsyncSpace, ConstnessSpace};\n use html::format::{GenericBounds, WhereClause, href, AbiSpace};\n-use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace};\n+use html::format::{VisSpace, Function, UnsafetySpace, MutableSpace};\n use html::format::fmt_impl_for_trait_page;\n use html::item_type::ItemType;\n use html::markdown::{self, Markdown, MarkdownHtml, MarkdownSummaryLine, ErrorCodes, IdMap};\n@@ -1836,6 +1836,7 @@ struct AllTypes {\n     keywords: FxHashSet<ItemEntry>,\n     attributes: FxHashSet<ItemEntry>,\n     derives: FxHashSet<ItemEntry>,\n+    trait_aliases: FxHashSet<ItemEntry>,\n }\n \n impl AllTypes {\n@@ -1856,6 +1857,7 @@ impl AllTypes {\n             keywords: new_set(100),\n             attributes: new_set(100),\n             derives: new_set(100),\n+            trait_aliases: new_set(100),\n         }\n     }\n \n@@ -1879,6 +1881,7 @@ impl AllTypes {\n                 ItemType::Constant => self.constants.insert(ItemEntry::new(new_url, name)),\n                 ItemType::ProcAttribute => self.attributes.insert(ItemEntry::new(new_url, name)),\n                 ItemType::ProcDerive => self.derives.insert(ItemEntry::new(new_url, name)),\n+                ItemType::TraitAlias => self.trait_aliases.insert(ItemEntry::new(new_url, name)),\n                 _ => true,\n             };\n         }\n@@ -1922,6 +1925,7 @@ impl fmt::Display for AllTypes {\n         print_entries(f, &self.derives, \"Derive Macros\", \"derives\")?;\n         print_entries(f, &self.functions, \"Functions\", \"functions\")?;\n         print_entries(f, &self.typedefs, \"Typedefs\", \"typedefs\")?;\n+        print_entries(f, &self.trait_aliases, \"Trait Aliases\", \"trait-aliases\")?;\n         print_entries(f, &self.existentials, \"Existentials\", \"existentials\")?;\n         print_entries(f, &self.statics, \"Statics\", \"statics\")?;\n         print_entries(f, &self.constants, \"Constants\", \"constants\")\n@@ -2419,6 +2423,7 @@ impl<'a> fmt::Display for Item<'a> {\n             clean::ForeignTypeItem => write!(fmt, \"Foreign Type \")?,\n             clean::KeywordItem(..) => write!(fmt, \"Keyword \")?,\n             clean::ExistentialItem(..) => write!(fmt, \"Existential Type \")?,\n+            clean::TraitAliasItem(..) => write!(fmt, \"Trait Alias \")?,\n             _ => {\n                 // We don't generate pages for any other type.\n                 unreachable!();\n@@ -2457,6 +2462,7 @@ impl<'a> fmt::Display for Item<'a> {\n             clean::ForeignTypeItem => item_foreign_type(fmt, self.cx, self.item),\n             clean::KeywordItem(ref k) => item_keyword(fmt, self.cx, self.item, k),\n             clean::ExistentialItem(ref e, _) => item_existential(fmt, self.cx, self.item, e),\n+            clean::TraitAliasItem(ref ta) => item_trait_alias(fmt, self.cx, self.item, ta),\n             _ => {\n                 // We don't generate pages for any other type.\n                 unreachable!();\n@@ -2977,10 +2983,11 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n            name = it.name.as_ref().unwrap(),\n            generics = f.generics,\n            where_clause = WhereClause { gens: &f.generics, indent: 0, end_newline: true },\n-           decl = Method {\n+           decl = Function {\n               decl: &f.decl,\n               name_len,\n               indent: 0,\n+              asyncness: f.header.asyncness,\n            })?;\n     document(w, cx, it)\n }\n@@ -3014,23 +3021,17 @@ fn render_impls(cx: &Context, w: &mut fmt::Formatter,\n     Ok(())\n }\n \n-fn bounds(t_bounds: &[clean::GenericBound]) -> String {\n+fn bounds(t_bounds: &[clean::GenericBound], trait_alias: bool) -> String {\n     let mut bounds = String::new();\n-    let mut bounds_plain = String::new();\n     if !t_bounds.is_empty() {\n-        if !bounds.is_empty() {\n-            bounds.push(' ');\n-            bounds_plain.push(' ');\n+        if !trait_alias {\n+            bounds.push_str(\": \");\n         }\n-        bounds.push_str(\": \");\n-        bounds_plain.push_str(\": \");\n         for (i, p) in t_bounds.iter().enumerate() {\n             if i > 0 {\n                 bounds.push_str(\" + \");\n-                bounds_plain.push_str(\" + \");\n             }\n             bounds.push_str(&(*p).to_string());\n-            bounds_plain.push_str(&format!(\"{:#}\", *p));\n         }\n     }\n     bounds\n@@ -3050,7 +3051,7 @@ fn item_trait(\n     it: &clean::Item,\n     t: &clean::Trait,\n ) -> fmt::Result {\n-    let bounds = bounds(&t.bounds);\n+    let bounds = bounds(&t.bounds, false);\n     let types = t.items.iter().filter(|m| m.is_associated_type()).collect::<Vec<_>>();\n     let consts = t.items.iter().filter(|m| m.is_associated_const()).collect::<Vec<_>>();\n     let required = t.items.iter().filter(|m| m.is_ty_method()).collect::<Vec<_>>();\n@@ -3424,10 +3425,11 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                href = href,\n                name = name,\n                generics = *g,\n-               decl = Method {\n+               decl = Function {\n                    decl: d,\n                    name_len: head_len,\n                    indent,\n+                   asyncness: header.asyncness,\n                },\n                where_clause = WhereClause {\n                    gens: g,\n@@ -4280,7 +4282,26 @@ fn item_existential(\n            it.name.as_ref().unwrap(),\n            t.generics,\n            where_clause = WhereClause { gens: &t.generics, indent: 0, end_newline: true },\n-           bounds = bounds(&t.bounds))?;\n+           bounds = bounds(&t.bounds, false))?;\n+\n+    document(w, cx, it)?;\n+\n+    // Render any items associated directly to this alias, as otherwise they\n+    // won't be visible anywhere in the docs. It would be nice to also show\n+    // associated items from the aliased type (see discussion in #32077), but\n+    // we need #14072 to make sense of the generics.\n+    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n+}\n+\n+fn item_trait_alias(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n+                    t: &clean::TraitAlias) -> fmt::Result {\n+    write!(w, \"<pre class='rust trait-alias'>\")?;\n+    render_attributes(w, it)?;\n+    write!(w, \"trait {}{}{} = {};</pre>\",\n+           it.name.as_ref().unwrap(),\n+           t.generics,\n+           WhereClause { gens: &t.generics, indent: 0, end_newline: true },\n+           bounds(&t.bounds, true))?;\n \n     document(w, cx, it)?;\n \n@@ -4844,6 +4865,7 @@ fn item_ty_to_strs(ty: &ItemType) -> (&'static str, &'static str) {\n         ItemType::Existential     => (\"existentials\", \"Existentials\"),\n         ItemType::ProcAttribute   => (\"attributes\", \"Attribute Macros\"),\n         ItemType::ProcDerive      => (\"derives\", \"Derive Macros\"),\n+        ItemType::TraitAlias      => (\"trait-aliases\", \"Trait aliases\"),\n     }\n }\n "}, {"sha": "840f943a5972df50aecf8febffb4aaaa7f9e8d2c", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -68,7 +68,8 @@ if (!DOMTokenList.prototype.remove) {\n                      \"keyword\",\n                      \"existential\",\n                      \"attr\",\n-                     \"derive\"];\n+                     \"derive\",\n+                     \"traitalias\"];\n \n     var search_input = document.getElementsByClassName(\"search-input\")[0];\n \n@@ -79,8 +80,6 @@ if (!DOMTokenList.prototype.remove) {\n     // 2 for \"In Return Types\"\n     var currentTab = 0;\n \n-    var themesWidth = null;\n-\n     var titleBeforeSearch = document.title;\n \n     function getPageId() {\n@@ -240,7 +239,7 @@ if (!DOMTokenList.prototype.remove) {\n         return String.fromCharCode(c);\n     }\n \n-    function displayHelp(display, ev) {\n+    function displayHelp(display, ev, help) {\n         if (display === true) {\n             if (hasClass(help, \"hidden\")) {\n                 ev.preventDefault();\n@@ -258,7 +257,7 @@ if (!DOMTokenList.prototype.remove) {\n         hideModal();\n         var search = document.getElementById(\"search\");\n         if (hasClass(help, \"hidden\") === false) {\n-            displayHelp(false, ev);\n+            displayHelp(false, ev, help);\n         } else if (hasClass(search, \"hidden\") === false) {\n             ev.preventDefault();\n             addClass(search, \"hidden\");\n@@ -289,7 +288,7 @@ if (!DOMTokenList.prototype.remove) {\n \n             case \"s\":\n             case \"S\":\n-                displayHelp(false, ev);\n+                displayHelp(false, ev, help);\n                 hideModal();\n                 ev.preventDefault();\n                 focusSearchBar();\n@@ -304,7 +303,7 @@ if (!DOMTokenList.prototype.remove) {\n             case \"?\":\n                 if (ev.shiftKey) {\n                     hideModal();\n-                    displayHelp(true, ev);\n+                    displayHelp(true, ev, help);\n                 }\n                 break;\n             }\n@@ -654,7 +653,7 @@ if (!DOMTokenList.prototype.remove) {\n                                 return MAX_LEV_DISTANCE + 1;\n                             }\n                         }\n-                        return lev_distance;//Math.ceil(total / done);\n+                        return Math.ceil(total / done);\n                     }\n                 }\n                 return MAX_LEV_DISTANCE + 1;\n@@ -1786,6 +1785,7 @@ if (!DOMTokenList.prototype.remove) {\n         block(\"type\", \"Type Definitions\");\n         block(\"foreigntype\", \"Foreign Types\");\n         block(\"keyword\", \"Keywords\");\n+        block(\"traitalias\", \"Trait Aliases\");\n     }\n \n     window.initSidebarItems = initSidebarItems;\n@@ -2432,7 +2432,7 @@ if (!DOMTokenList.prototype.remove) {\n             // for vertical layout (column-oriented flex layout for divs caused\n             // errors in mobile browsers).\n             if (e.tagName === \"H2\" || e.tagName === \"H3\") {\n-                let nextTagName = e.nextElementSibling.tagName;\n+                var nextTagName = e.nextElementSibling.tagName;\n                 if (nextTagName == \"H2\" || nextTagName == \"H3\") {\n                     e.nextElementSibling.style.display = \"flex\";\n                 } else {"}, {"sha": "333fe76a8a4a9a331fa86dff8f5fea6f62a87525", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -94,6 +94,7 @@ pre {\n }\n .content .highlighted a, .content .highlighted span { color: #eee !important; }\n .content .highlighted.trait { background-color: #013191; }\n+.content .highlighted.traitalias { background-color: #013191; }\n .content .highlighted.mod,\n .content .highlighted.externcrate { background-color: #afc6e4; }\n .content .highlighted.mod { background-color: #803a1b; }\n@@ -128,6 +129,7 @@ pre {\n .content span.externcrate,\n .content span.mod, .content a.mod, .block a.current.mod { color: #bda000; }\n .content span.trait, .content a.trait, .block a.current.trait { color: #b78cf2; }\n+.content span.traitalias, .content a.traitalias, .block a.current.traitalias { color: #b397da; }\n .content span.fn, .content a.fn, .block a.current.fn,\n .content span.method, .content a.method, .block a.current.method,\n .content span.tymethod, .content a.tymethod, .block a.current.tymethod,"}, {"sha": "19ae67b29881f4e915a3ccd8cfe727178217ef61", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -96,6 +96,7 @@ pre {\n }\n .content .highlighted a, .content .highlighted span { color: #000 !important; }\n .content .highlighted.trait { background-color: #c7b6ff; }\n+.content .highlighted.traitalias { background-color: #c7b6ff; }\n .content .highlighted.mod,\n .content .highlighted.externcrate { background-color: #afc6e4; }\n .content .highlighted.enum { background-color: #b4d1b9; }\n@@ -128,6 +129,7 @@ pre {\n .content span.externcrate,\n .content span.mod, .content a.mod, .block a.current.mod { color: #4d76ae; }\n .content span.trait, .content a.trait, .block a.current.trait { color: #7c5af3; }\n+.content span.traitalias, .content a.traitalias, .block a.current.traitalias { color: #6841f1; }\n .content span.fn, .content a.fn, .block a.current.fn,\n .content span.method, .content a.method, .block a.current.method,\n .content span.tymethod, .content a.tymethod, .block a.current.tymethod,"}, {"sha": "5f3da4c7b33e0456e5e5ae2d86d962dc946019f9", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -224,6 +224,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             | clean::ConstantItem(..)\n             | clean::UnionItem(..)\n             | clean::AssociatedConstItem(..)\n+            | clean::TraitAliasItem(..)\n             | clean::ForeignTypeItem => {\n                 if i.def_id.is_local() {\n                     if !self.access_levels.is_exported(i.def_id) {"}, {"sha": "352ff788eedae9e3456d85b124ee73653de19d72", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -547,8 +547,19 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                 };\n                 om.traits.push(t);\n             },\n-            hir::ItemKind::TraitAlias(..) => {\n-                unimplemented!(\"trait objects are not yet implemented\")\n+            hir::ItemKind::TraitAlias(ref gen, ref b) => {\n+                let t = TraitAlias {\n+                    name: ident.name,\n+                    generics: gen.clone(),\n+                    bounds: b.iter().cloned().collect(),\n+                    id: item.id,\n+                    attrs: item.attrs.clone(),\n+                    whence: item.span,\n+                    vis: item.vis.clone(),\n+                    stab: self.stability(item.id),\n+                    depr: self.deprecation(item.id),\n+                };\n+                om.trait_aliases.push(t);\n             },\n \n             hir::ItemKind::Impl(unsafety,"}, {"sha": "4e064672fbc40978c852308eee72f24290cfd7f2", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -392,8 +392,7 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn octets(&self) -> [u8; 4] {\n-        let bits = u32::from_be(self.inner.s_addr);\n-        [(bits >> 24) as u8, (bits >> 16) as u8, (bits >> 8) as u8, bits as u8]\n+        self.inner.s_addr.to_ne_bytes()\n     }\n \n     /// Returns [`true`] for the special 'unspecified' address (0.0.0.0)."}, {"sha": "715f2eafb2d9b1df65d90c55eb2d2cc3d78541a1", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -12,7 +12,7 @@ impl Stdin {\n     pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n         let fd = FileDesc::new(libc::STDIN_FILENO);\n         let ret = fd.read(data);\n-        fd.into_raw();\n+        fd.into_raw(); // do not close this FD\n         ret\n     }\n }\n@@ -23,7 +23,7 @@ impl Stdout {\n     pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n         let fd = FileDesc::new(libc::STDOUT_FILENO);\n         let ret = fd.write(data);\n-        fd.into_raw();\n+        fd.into_raw(); // do not close this FD\n         ret\n     }\n \n@@ -38,7 +38,7 @@ impl Stderr {\n     pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n         let fd = FileDesc::new(libc::STDERR_FILENO);\n         let ret = fd.write(data);\n-        fd.into_raw();\n+        fd.into_raw(); // do not close this FD\n         ret\n     }\n "}, {"sha": "ba4997a7f9b5ba7788eaee63f173d8fd62972265", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -1,14 +1,35 @@\n // edition:2018\n-// compile-flags:-Z unstable-options\n-\n-// FIXME: once `--edition` is stable in rustdoc, remove that `compile-flags` directive\n \n #![feature(async_await, futures_api)]\n \n-// @has async_fn/struct.S.html\n-// @has - '//code' 'pub async fn f()'\n-pub struct S;\n+// @has async_fn/fn.foo.html '//pre[@class=\"rust fn\"]' 'pub async fn foo() -> Option<Foo>'\n+pub async fn foo() -> Option<Foo> {\n+    None\n+}\n+\n+// @has async_fn/fn.bar.html '//pre[@class=\"rust fn\"]' 'pub async fn bar(a: i32, b: i32) -> i32'\n+pub async fn bar(a: i32, b: i32) -> i32 {\n+    0\n+}\n+\n+// @has async_fn/fn.baz.html '//pre[@class=\"rust fn\"]' 'pub async fn baz<T>(a: T) -> T'\n+pub async fn baz<T>(a: T) -> T {\n+    a\n+}\n+\n+trait Bar {}\n+\n+impl Bar for () {}\n+\n+// @has async_fn/fn.quux.html '//pre[@class=\"rust fn\"]' 'pub async fn quux() -> impl Bar'\n+pub async fn quux() -> impl Bar {\n+    ()\n+}\n+\n+// @has async_fn/struct.Foo.html\n+// @matches - '//code' 'pub async fn f\\(\\)$'\n+pub struct Foo;\n \n-impl S {\n+impl Foo {\n     pub async fn f() {}\n }"}, {"sha": "98b8d879ac078da3f39cfe50ff59acc8a0ee529f", "filename": "src/test/rustdoc/trait_alias.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d845e131f00d30f8a10da56f9e9c4aeba43c1b4/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait_alias.rs?ref=3d845e131f00d30f8a10da56f9e9c4aeba43c1b4", "patch": "@@ -0,0 +1,21 @@\n+#![feature(trait_alias)]\n+\n+#![crate_name = \"foo\"]\n+\n+use std::fmt::Debug;\n+\n+// @has foo/all.html '//a[@href=\"traitalias.CopyAlias.html\"]' 'CopyAlias'\n+// @has foo/all.html '//a[@href=\"traitalias.Alias2.html\"]' 'Alias2'\n+// @has foo/all.html '//a[@href=\"traitalias.Foo.html\"]' 'Foo'\n+\n+// @has foo/index.html '//h2[@id=\"trait-aliases\"]' 'Trait aliases'\n+// @has foo/index.html '//a[@class=\"traitalias\"]' 'CopyAlias'\n+// @has foo/index.html '//a[@class=\"traitalias\"]' 'Alias2'\n+// @has foo/index.html '//a[@class=\"traitalias\"]' 'Foo'\n+\n+// @has foo/traitalias.CopyAlias.html '//section[@id=\"main\"]/pre' 'trait CopyAlias = Copy;'\n+pub trait CopyAlias = Copy;\n+// @has foo/traitalias.Alias2.html '//section[@id=\"main\"]/pre' 'trait Alias2 = Copy + Debug;'\n+pub trait Alias2 = Copy + Debug;\n+// @has foo/traitalias.Foo.html '//section[@id=\"main\"]/pre' 'trait Foo<T> = Into<T> + Debug;'\n+pub trait Foo<T> = Into<T> + Debug;"}]}