{"sha": "64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YzQ4NmI2ZjQzZjc5NjQ1YzkxYTJmNGE5YjQ0OTRkN2JiZTNjOWY=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-05-30T02:09:34Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-06-19T18:05:14Z"}, "message": "Update chalk and add LifetimeOutlives and ObjectSafe lowering", "tree": {"sha": "b6f20865d170c28e6e66095e09a4debe58019bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6f20865d170c28e6e66095e09a4debe58019bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f", "html_url": "https://github.com/rust-lang/rust/commit/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90e01ee2089700026fd3fbd68d1dc26f2540a648", "url": "https://api.github.com/repos/rust-lang/rust/commits/90e01ee2089700026fd3fbd68d1dc26f2540a648", "html_url": "https://github.com/rust-lang/rust/commit/90e01ee2089700026fd3fbd68d1dc26f2540a648"}], "stats": {"total": 93, "additions": 66, "deletions": 27}, "files": [{"sha": "0adb499a620e039064f2008f366777d9c4aa9ab4", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f", "patch": "@@ -432,18 +432,10 @@ dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n-[[package]]\n-name = \"chalk-base\"\n-version = \"0.10.1-dev\"\n-source = \"git+https://github.com/jackh726/chalk.git?rev=c8f342bf5e48051333d0b2c7fab81347fc21c474#c8f342bf5e48051333d0b2c7fab81347fc21c474\"\n-dependencies = [\n- \"lazy_static\",\n-]\n-\n [[package]]\n name = \"chalk-derive\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/jackh726/chalk.git?rev=c8f342bf5e48051333d0b2c7fab81347fc21c474#c8f342bf5e48051333d0b2c7fab81347fc21c474\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=ea1ca4ddc43abcfed77420f294a3713fac714e18#ea1ca4ddc43abcfed77420f294a3713fac714e18\"\n dependencies = [\n  \"proc-macro2 1.0.3\",\n  \"quote 1.0.2\",\n@@ -454,9 +446,8 @@ dependencies = [\n [[package]]\n name = \"chalk-engine\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/jackh726/chalk.git?rev=c8f342bf5e48051333d0b2c7fab81347fc21c474#c8f342bf5e48051333d0b2c7fab81347fc21c474\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=ea1ca4ddc43abcfed77420f294a3713fac714e18#ea1ca4ddc43abcfed77420f294a3713fac714e18\"\n dependencies = [\n- \"chalk-base\",\n  \"chalk-derive\",\n  \"chalk-ir\",\n  \"rustc-hash\",\n@@ -465,18 +456,17 @@ dependencies = [\n [[package]]\n name = \"chalk-ir\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/jackh726/chalk.git?rev=c8f342bf5e48051333d0b2c7fab81347fc21c474#c8f342bf5e48051333d0b2c7fab81347fc21c474\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=ea1ca4ddc43abcfed77420f294a3713fac714e18#ea1ca4ddc43abcfed77420f294a3713fac714e18\"\n dependencies = [\n- \"chalk-base\",\n  \"chalk-derive\",\n+ \"lazy_static 1.4.0\",\n ]\n \n [[package]]\n name = \"chalk-solve\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/jackh726/chalk.git?rev=c8f342bf5e48051333d0b2c7fab81347fc21c474#c8f342bf5e48051333d0b2c7fab81347fc21c474\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=ea1ca4ddc43abcfed77420f294a3713fac714e18#ea1ca4ddc43abcfed77420f294a3713fac714e18\"\n dependencies = [\n- \"chalk-base\",\n  \"chalk-derive\",\n  \"chalk-engine\",\n  \"chalk-ir\","}, {"sha": "9516d449671d6a69159302539be1f1178198f3af", "filename": "src/librustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f/src%2Flibrustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f/src%2Flibrustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2FCargo.toml?ref=64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f", "patch": "@@ -30,7 +30,7 @@ rustc_serialize = { path = \"../librustc_serialize\" }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n byteorder = { version = \"1.3\" }\n-chalk-ir =      { git = \"https://github.com/jackh726/chalk.git\", rev = \"c8f342bf5e48051333d0b2c7fab81347fc21c474\" }\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"ea1ca4ddc43abcfed77420f294a3713fac714e18\" }\n #chalk-ir = \"0.10.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"0.7.1\""}, {"sha": "f141daa9f936b4cddb4571b6a51b93ca65102a70", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f", "patch": "@@ -19,8 +19,8 @@ rustc_span = { path = \"../librustc_span\" }\n #chalk-ir = \"0.10.0\"\n #chalk-rust-ir = \"0.10.0\"\n #chalk-solve = \"0.10.0\"\n-chalk-solve =   { git = \"https://github.com/jackh726/chalk.git\", rev = \"c8f342bf5e48051333d0b2c7fab81347fc21c474\" }\n-chalk-ir =      { git = \"https://github.com/jackh726/chalk.git\", rev = \"c8f342bf5e48051333d0b2c7fab81347fc21c474\" }\n+chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"ea1ca4ddc43abcfed77420f294a3713fac714e18\" }\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"ea1ca4ddc43abcfed77420f294a3713fac714e18\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_infer = { path = \"../librustc_infer\" }\n rustc_trait_selection = { path = \"../librustc_trait_selection\" }"}, {"sha": "3cb5008f03d2f3797f4b97a2e276de62fd936cc8", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 57, "deletions": 8, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f", "patch": "@@ -97,8 +97,28 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                             .intern(interner),\n                         )\n                     }\n-                    // FIXME(chalk): need to add RegionOutlives/TypeOutlives\n-                    ty::PredicateKind::RegionOutlives(_) => None,\n+                    ty::PredicateKind::RegionOutlives(predicate) => {\n+                        let (predicate, binders, _named_regions) =\n+                            collect_bound_vars(interner, interner.tcx, predicate);\n+        \n+                        Some(\n+                            chalk_ir::ProgramClauseData::ForAll(chalk_ir::Binders::new(\n+                                binders,\n+                                chalk_ir::ProgramClauseImplication {\n+                                    consequence: chalk_ir::DomainGoal::Holds(\n+                                        chalk_ir::WhereClause::LifetimeOutlives(chalk_ir::LifetimeOutlives {\n+                                            a: predicate.0.lower_into(interner),\n+                                            b: predicate.1.lower_into(interner),\n+                                        })\n+                                    ),\n+                                    conditions: chalk_ir::Goals::new(interner),\n+                                    priority: chalk_ir::ClausePriority::High,\n+                                },\n+                            ))\n+                            .intern(interner),\n+                        )\n+                    },\n+                    // FIXME(chalk): need to add TypeOutlives\n                     ty::PredicateKind::TypeOutlives(_) => None,\n                     ty::PredicateKind::Projection(predicate) => {\n                         let (predicate, binders, _named_regions) =\n@@ -156,10 +176,24 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n     fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::GoalData<RustInterner<'tcx>> {\n         match self.kind() {\n             ty::PredicateKind::Trait(predicate, _) => predicate.lower_into(interner),\n-            // FIXME(chalk): we need to register constraints.\n-            ty::PredicateKind::RegionOutlives(_predicate) => {\n-                chalk_ir::GoalData::All(chalk_ir::Goals::new(interner))\n+            ty::PredicateKind::RegionOutlives(predicate) => {\n+                let (predicate, binders, _named_regions) =\n+                    collect_bound_vars(interner, interner.tcx, predicate);\n+\n+                chalk_ir::GoalData::Quantified(\n+                    chalk_ir::QuantifierKind::ForAll,\n+                    chalk_ir::Binders::new(\n+                        binders,\n+                        chalk_ir::GoalData::DomainGoal(chalk_ir::DomainGoal::Holds(\n+                            chalk_ir::WhereClause::LifetimeOutlives(chalk_ir::LifetimeOutlives {\n+                                a: predicate.0.lower_into(interner),\n+                                b: predicate.1.lower_into(interner),\n+                            })\n+                        )).intern(interner)\n+                    )\n+                )\n             }\n+            // FIXME(chalk): TypeOutlives\n             ty::PredicateKind::TypeOutlives(_predicate) => {\n                 chalk_ir::GoalData::All(chalk_ir::Goals::new(interner))\n             }\n@@ -182,12 +216,15 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n                 GenericArgKind::Lifetime(lt) => bug!(\"unexpect well formed predicate: {:?}\", lt),\n             },\n \n+            ty::PredicateKind::ObjectSafe(t) => {\n+                chalk_ir::GoalData::DomainGoal(chalk_ir::DomainGoal::ObjectSafe(chalk_ir::TraitId(*t)))\n+            }\n+\n             // FIXME(chalk): other predicates\n             //\n             // We can defer this, but ultimately we'll want to express\n             // some of these in terms of chalk operations.\n-            ty::PredicateKind::ObjectSafe(..)\n-            | ty::PredicateKind::ClosureKind(..)\n+            ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..) => {\n@@ -484,7 +521,19 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n                     chalk_ir::WhereClause::Implemented(predicate.trait_ref.lower_into(interner)),\n                 ))\n             }\n-            ty::PredicateKind::RegionOutlives(_predicate) => None,\n+            ty::PredicateKind::RegionOutlives(predicate) => {\n+                let (predicate, binders, _named_regions) =\n+                    collect_bound_vars(interner, interner.tcx, predicate);\n+\n+                Some(chalk_ir::Binders::new(\n+                    binders,\n+                    chalk_ir::WhereClause::LifetimeOutlives(chalk_ir::LifetimeOutlives {\n+                        a: predicate.0.lower_into(interner),\n+                        b: predicate.1.lower_into(interner),\n+                    }),\n+                ))\n+\n+            },\n             ty::PredicateKind::TypeOutlives(_predicate) => None,\n             ty::PredicateKind::Projection(_predicate) => None,\n             ty::PredicateKind::WellFormed(_ty) => None,"}, {"sha": "d8f9a40b9432ed63fe804e20f73f04c7b1a27f07", "filename": "src/librustc_traits/chalk/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fmod.rs?ref=64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f", "patch": "@@ -199,7 +199,7 @@ crate fn evaluate_goal<'tcx>(\n         .map(|s| match s {\n             Solution::Unique(_subst) => {\n                 // FIXME(chalk): handle constraints\n-                assert!(_subst.value.constraints.is_empty());\n+                // assert!(_subst.value.constraints.is_empty());\n                 make_solution(_subst.value.subst)\n             }\n             Solution::Ambig(_guidance) => {"}]}