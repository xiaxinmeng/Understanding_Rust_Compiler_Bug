{"sha": "18806321e60c631867f56d90a979686d59a3810d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ODA2MzIxZTYwYzYzMTg2N2Y1NmQ5MGE5Nzk2ODZkNTlhMzgxMGQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-14T00:29:39Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-14T00:29:39Z"}, "message": "Use block indent style against tuple type", "tree": {"sha": "4fedff9ac58ffc339e6c468cc5c1f46c1a1eeae2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fedff9ac58ffc339e6c468cc5c1f46c1a1eeae2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18806321e60c631867f56d90a979686d59a3810d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18806321e60c631867f56d90a979686d59a3810d", "html_url": "https://github.com/rust-lang/rust/commit/18806321e60c631867f56d90a979686d59a3810d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18806321e60c631867f56d90a979686d59a3810d/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6047179ab08eb5a8e11f85d804806651196f31ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/6047179ab08eb5a8e11f85d804806651196f31ad", "html_url": "https://github.com/rust-lang/rust/commit/6047179ab08eb5a8e11f85d804806651196f31ad"}], "stats": {"total": 108, "additions": 67, "deletions": 41}, "files": [{"sha": "10e25bbc8c50e6af321ecf2739d08fde547ff372", "filename": "src/expr.rs", "status": "modified", "additions": 65, "deletions": 37, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/18806321e60c631867f56d90a979686d59a3810d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18806321e60c631867f56d90a979686d59a3810d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=18806321e60c631867f56d90a979686d59a3810d", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::cmp::{Ordering, min};\n-use std::ops::Deref;\n use std::iter::ExactSizeIterator;\n use std::fmt::Write;\n \n@@ -1833,14 +1832,17 @@ pub fn rewrite_call(\n     rewrite_call_inner(context, &callee, args, span, shape, false).ok()\n }\n \n-fn rewrite_call_inner(\n+fn rewrite_call_inner<'a, T>(\n     context: &RewriteContext,\n     callee_str: &str,\n-    args: &[ptr::P<ast::Expr>],\n+    args: &[ptr::P<T>],\n     span: Span,\n     shape: Shape,\n     force_trailing_comma: bool,\n-) -> Result<String, Ordering> {\n+) -> Result<String, Ordering>\n+where\n+    T: Rewrite + Spanned + ToExpr + 'a,\n+{\n     // 2 = `( `, 1 = `(`\n     let paren_overhead = if context.config.spaces_within_parens() {\n         2\n@@ -1924,22 +1926,25 @@ fn need_block_indent(s: &str, shape: Shape) -> bool {\n     })\n }\n \n-fn rewrite_call_args(\n+fn rewrite_call_args<'a, T>(\n     context: &RewriteContext,\n-    args: &[ptr::P<ast::Expr>],\n+    args: &[ptr::P<T>],\n     span: Span,\n     shape: Shape,\n     one_line_width: usize,\n     force_trailing_comma: bool,\n-) -> Option<(bool, String)> {\n+) -> Option<(bool, String)>\n+where\n+    T: Rewrite + Spanned + ToExpr + 'a,\n+{\n     let mut item_context = context.clone();\n     item_context.inside_macro = false;\n     let items = itemize_list(\n         context.codemap,\n         args.iter(),\n         \")\",\n-        |item| item.span.lo,\n-        |item| item.span.hi,\n+        |item| item.span().lo,\n+        |item| item.span().hi,\n         |item| item.rewrite(&item_context, shape),\n         span.lo,\n         span.hi,\n@@ -1949,7 +1954,14 @@ fn rewrite_call_args(\n     // Try letting the last argument overflow to the next line with block\n     // indentation. If its first line fits on one line with the other arguments,\n     // we format the function arguments horizontally.\n-    let tactic = try_overflow_last_arg(&item_context, &mut item_vec, args, shape, one_line_width);\n+    let args = args.iter().filter_map(|e| e.to_expr()).collect::<Vec<_>>();\n+    let tactic = try_overflow_last_arg(\n+        &item_context,\n+        &mut item_vec,\n+        &args[..],\n+        shape,\n+        one_line_width,\n+    );\n \n     let fmt = ListFormatting {\n         tactic: tactic,\n@@ -1974,7 +1986,7 @@ fn rewrite_call_args(\n fn try_overflow_last_arg(\n     context: &RewriteContext,\n     item_vec: &mut Vec<ListItem>,\n-    args: &[ptr::P<ast::Expr>],\n+    args: &[&ast::Expr],\n     shape: Shape,\n     one_line_width: usize,\n ) -> DefinitiveListTactic {\n@@ -1991,7 +2003,7 @@ fn try_overflow_last_arg(\n         last_arg_shape(&context, &item_vec, shape).map_or((None, None), |arg_shape| {\n             rewrite_last_arg_with_overflow(\n                 &context,\n-                &args[args.len() - 1],\n+                args[args.len() - 1],\n                 &mut item_vec[args.len() - 1],\n                 arg_shape,\n             )\n@@ -2040,7 +2052,7 @@ fn last_arg_shape(context: &RewriteContext, items: &Vec<ListItem>, shape: Shape)\n \n fn rewrite_last_arg_with_overflow(\n     context: &RewriteContext,\n-    last_arg: &ptr::P<ast::Expr>,\n+    last_arg: &ast::Expr,\n     last_item: &mut ListItem,\n     shape: Shape,\n ) -> (Option<String>, Option<String>) {\n@@ -2056,7 +2068,7 @@ fn rewrite_last_arg_with_overflow(\n     }\n }\n \n-fn can_be_overflowed(context: &RewriteContext, args: &[ptr::P<ast::Expr>]) -> bool {\n+fn can_be_overflowed(context: &RewriteContext, args: &[&ast::Expr]) -> bool {\n     args.last().map_or(false, |x| {\n         can_be_overflowed_expr(context, &x, args.len())\n     })\n@@ -2344,19 +2356,18 @@ fn shape_from_fn_call_style(\n     }\n }\n \n-pub fn rewrite_tuple_type<'a, I>(\n+fn rewrite_tuple_in_visual_indent_style<'a, T>(\n     context: &RewriteContext,\n-    mut items: I,\n+    items: &[ptr::P<T>],\n     span: Span,\n     shape: Shape,\n ) -> Option<String>\n where\n-    I: ExactSizeIterator,\n-    <I as Iterator>::Item: Deref,\n-    <I::Item as Deref>::Target: Rewrite + Spanned + 'a,\n+    T: Rewrite + Spanned + ToExpr + 'a,\n {\n+    let mut items = items.iter();\n     // In case of length 1, need a trailing comma\n-    debug!(\"rewrite_tuple_type {:?}\", shape);\n+    debug!(\"rewrite_tuple_in_visual_indent_style {:?}\", shape);\n     if items.len() == 1 {\n         // 3 = \"(\" + \",)\"\n         let nested_shape = try_opt!(shape.sub_width(3)).visual_indent(1);\n@@ -2392,28 +2403,29 @@ where\n     }\n }\n \n-pub fn rewrite_tuple(\n+pub fn rewrite_tuple<'a, T>(\n     context: &RewriteContext,\n-    items: &[ptr::P<ast::Expr>],\n+    items: &[ptr::P<T>],\n     span: Span,\n     shape: Shape,\n-) -> Option<String> {\n+) -> Option<String>\n+where\n+    T: Rewrite + Spanned + ToExpr + 'a,\n+{\n     debug!(\"rewrite_tuple {:?}\", shape);\n-    // Use old `rewrite_tuple`\n-    if context.config.fn_call_style() == IndentStyle::Visual {\n-        return rewrite_tuple_type(context, items.iter().map(|x| &**x), span, shape);\n+    if context.use_block_indent() {\n+        // We use the same rule as funcation call for rewriting tuple.\n+        rewrite_call_inner(\n+            context,\n+            &String::new(),\n+            items,\n+            span,\n+            shape,\n+            items.len() == 1,\n+        ).ok()\n+    } else {\n+        rewrite_tuple_in_visual_indent_style(context, items, span, shape)\n     }\n-\n-    // We use the same rule as funcation call for rewriting tuple.\n-    // 1 = \",\"\n-    rewrite_call_inner(\n-        context,\n-        &String::new(),\n-        items,\n-        span,\n-        shape,\n-        items.len() == 1,\n-    ).ok()\n }\n \n pub fn rewrite_unary_prefix<R: Rewrite>(\n@@ -2574,3 +2586,19 @@ fn rewrite_expr_addrof(\n     };\n     rewrite_unary_prefix(context, operator_str, expr, shape)\n }\n+\n+pub trait ToExpr {\n+    fn to_expr(&self) -> Option<&ast::Expr>;\n+}\n+\n+impl ToExpr for ast::Expr {\n+    fn to_expr(&self) -> Option<&ast::Expr> {\n+        Some(self)\n+    }\n+}\n+\n+impl ToExpr for ast::Ty {\n+    fn to_expr(&self) -> Option<&ast::Expr> {\n+        None\n+    }\n+}"}, {"sha": "f084aecaee64f19d174b1a9f6507c0d2bd53ba82", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18806321e60c631867f56d90a979686d59a3810d/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18806321e60c631867f56d90a979686d59a3810d/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=18806321e60c631867f56d90a979686d59a3810d", "patch": "@@ -23,7 +23,7 @@ use items::{format_generics_item_list, generics_shape_from_config};\n use lists::{itemize_list, format_fn_args};\n use rewrite::{Rewrite, RewriteContext};\n use utils::{extra_offset, format_mutability, colon_spaces, wrap_str, mk_sp, last_line_width};\n-use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple_type};\n+use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n use config::{Style, TypeDensity};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n@@ -689,9 +689,7 @@ impl Rewrite for ast::Ty {\n                         format!(\"[{}]\", ty_str)\n                     })\n             }\n-            ast::TyKind::Tup(ref items) => {\n-                rewrite_tuple_type(context, items.iter().map(|x| &**x), self.span, shape)\n-            }\n+            ast::TyKind::Tup(ref items) => rewrite_tuple(context, items, self.span, shape),\n             ast::TyKind::Path(ref q_self, ref path) => {\n                 rewrite_path(context, PathContext::Type, q_self.as_ref(), path, shape)\n             }"}]}