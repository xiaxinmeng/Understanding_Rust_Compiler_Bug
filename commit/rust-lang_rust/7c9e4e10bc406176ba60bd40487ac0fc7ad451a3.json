{"sha": "7c9e4e10bc406176ba60bd40487ac0fc7ad451a3", "node_id": "C_kwDOAAsO6NoAKDdjOWU0ZTEwYmM0MDYxNzZiYTYwYmQ0MDQ4N2FjMGZjN2FkNDUxYTM", "commit": {"author": {"name": "alibektas", "email": "bektasali@protonmail.com", "date": "2023-04-16T21:41:08Z"}, "committer": {"name": "alibektas", "email": "bektasali@protonmail.com", "date": "2023-04-21T18:19:36Z"}, "message": "Add syntax::make::ty_alias\n\nThe function is fully compliant with the specifications from the Rust Reference.", "tree": {"sha": "577eca4de687a85d9809cd379d4cbfd054244875", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/577eca4de687a85d9809cd379d4cbfd054244875"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c9e4e10bc406176ba60bd40487ac0fc7ad451a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c9e4e10bc406176ba60bd40487ac0fc7ad451a3", "html_url": "https://github.com/rust-lang/rust/commit/7c9e4e10bc406176ba60bd40487ac0fc7ad451a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c9e4e10bc406176ba60bd40487ac0fc7ad451a3/comments", "author": {"login": "alibektas", "id": 20956650, "node_id": "MDQ6VXNlcjIwOTU2NjUw", "avatar_url": "https://avatars.githubusercontent.com/u/20956650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alibektas", "html_url": "https://github.com/alibektas", "followers_url": "https://api.github.com/users/alibektas/followers", "following_url": "https://api.github.com/users/alibektas/following{/other_user}", "gists_url": "https://api.github.com/users/alibektas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alibektas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alibektas/subscriptions", "organizations_url": "https://api.github.com/users/alibektas/orgs", "repos_url": "https://api.github.com/users/alibektas/repos", "events_url": "https://api.github.com/users/alibektas/events{/privacy}", "received_events_url": "https://api.github.com/users/alibektas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alibektas", "id": 20956650, "node_id": "MDQ6VXNlcjIwOTU2NjUw", "avatar_url": "https://avatars.githubusercontent.com/u/20956650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alibektas", "html_url": "https://github.com/alibektas", "followers_url": "https://api.github.com/users/alibektas/followers", "following_url": "https://api.github.com/users/alibektas/following{/other_user}", "gists_url": "https://api.github.com/users/alibektas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alibektas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alibektas/subscriptions", "organizations_url": "https://api.github.com/users/alibektas/orgs", "repos_url": "https://api.github.com/users/alibektas/repos", "events_url": "https://api.github.com/users/alibektas/events{/privacy}", "received_events_url": "https://api.github.com/users/alibektas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6464392c15fa8788215d669c4c0b1e46bcadeea", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6464392c15fa8788215d669c4c0b1e46bcadeea", "html_url": "https://github.com/rust-lang/rust/commit/a6464392c15fa8788215d669c4c0b1e46bcadeea"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "719d92b87d9accaf5583b7bf0f55b2ef55f765b4", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7c9e4e10bc406176ba60bd40487ac0fc7ad451a3/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9e4e10bc406176ba60bd40487ac0fc7ad451a3/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=7c9e4e10bc406176ba60bd40487ac0fc7ad451a3", "patch": "@@ -14,6 +14,8 @@ use stdx::{format_to, never};\n \n use crate::{ast, utils::is_raw_identifier, AstNode, SourceFile, SyntaxKind, SyntaxToken};\n \n+use super::WhereClause;\n+\n /// While the parent module defines basic atomic \"constructors\", the `ext`\n /// module defines shortcuts for common things.\n ///\n@@ -158,6 +160,52 @@ fn ty_from_text(text: &str) -> ast::Type {\n     ast_from_text(&format!(\"type _T = {text};\"))\n }\n \n+/** Related goto [link](https://doc.rust-lang.org/reference/items/type-aliases.html)\n+    Type Alias syntax is\n+\n+    ```\n+    TypeAlias :\n+       type IDENTIFIER GenericParams? ( : TypeParamBounds )? WhereClause? ( = Type WhereClause?)? ;\n+    ```\n+\n+    FIXME : ident should be of type ast::Ident\n+*/\n+pub fn ty_alias(\n+    ident: String,\n+    generic_param_list: Option<ast::GenericParamList>,\n+    type_param_bounds: Option<ast::TypeParam>,\n+    where_clause: Option<WhereClause>,\n+    assignment: Option<(ast::Type, Option<ast::WhereClause>)>,\n+) -> ast::TypeAlias {\n+    let mut s = String::new();\n+    s.push_str(format!(\"type {}\", ident.as_str()).as_str());\n+\n+    if let Some(list) = generic_param_list {\n+        s.push_str(list.to_string().as_str());\n+    }\n+\n+    if let Some(list) = type_param_bounds {\n+        s.push_str(format!(\" : {}\", list.to_string().as_str()).as_str());\n+    }\n+\n+    if let Some(cl) = where_clause {\n+        s.push_str(format!(\" {}\", cl.to_string().as_str()).as_str());\n+    }\n+\n+    if let Some(exp) = assignment {\n+        if let Some(cl) = exp.1 {\n+            s.push_str(\n+                format!(\"= {} {}\", exp.0.to_string().as_str(), cl.to_string().as_str()).as_str(),\n+            );\n+        } else {\n+            s.push_str(format!(\"= {}\", exp.0.to_string().as_str()).as_str());\n+        }\n+    }\n+\n+    s.push_str(\";\");\n+    ast_from_text(s.as_str())\n+}\n+\n pub fn assoc_item_list() -> ast::AssocItemList {\n     ast_from_text(\"impl C for D {}\")\n }"}]}