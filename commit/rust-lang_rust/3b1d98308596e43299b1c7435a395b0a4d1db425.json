{"sha": "3b1d98308596e43299b1c7435a395b0a4d1db425", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMWQ5ODMwODU5NmU0MzI5OWIxYzc0MzVhMzk1YjBhNGQxZGI0MjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-04T08:36:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-04T08:36:48Z"}, "message": "Merge #4282\n\n4282: More name hints omitting heuristics r=matklad a=SomeoneToIgnore\n\nOmit parameter name hints for cases like the first two parameters from the screenshot:\r\n\r\n<img width=\"394\" alt=\"Screenshot 2020-05-03 at 15 06 34\" src=\"https://user-images.githubusercontent.com/2690773/80914717-165b2f80-8d56-11ea-8675-040972f70d98.png\">\r\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "0936853bbdc1cb70c469a9a00f71f003909789d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0936853bbdc1cb70c469a9a00f71f003909789d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b1d98308596e43299b1c7435a395b0a4d1db425", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJer9QgCRBK7hj4Ov3rIwAAdHIIAKW8iwvmOvi4ttGZMjNj1tR5\nvHz2A3qNKe8aSiybNq7aDGYoPlnq1H1KyAGnhLnM50pTCnL3EU+DWCAWGK9dYB+C\noQHmv7jxbeSaCtPmOckIw3D993KJIPgozFbcgvkfOcbZdxV18+nQVd+vfyGSkGpj\nOYdeaoEg3wUYRqcaQA0nSSweHnIp3DBzddoJ8SaT+fRZGISNoBtOl1b1+cPfCGpB\n43IyuC2Nm2Ha5YmUFIZ0Wb1orI9dit7NlT1cX+RCJjIbcBWCXjEatrFHtBJafLFm\nk2pk5vTPVKuc9MIgHpwBqJsrXzZuKu3SrGC/UIIl9iU3qGIZ0uj6ckRnSpp3L6Y=\n=x+/r\n-----END PGP SIGNATURE-----\n", "payload": "tree 0936853bbdc1cb70c469a9a00f71f003909789d2\nparent d85528081834639c4580fc135f74eb23447b12c7\nparent 30817de3affd9376eed4ff164c42fe0e00a1ac37\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588581408 +0000\ncommitter GitHub <noreply@github.com> 1588581408 +0000\n\nMerge #4282\n\n4282: More name hints omitting heuristics r=matklad a=SomeoneToIgnore\n\nOmit parameter name hints for cases like the first two parameters from the screenshot:\r\n\r\n<img width=\"394\" alt=\"Screenshot 2020-05-03 at 15 06 34\" src=\"https://user-images.githubusercontent.com/2690773/80914717-165b2f80-8d56-11ea-8675-040972f70d98.png\">\r\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1d98308596e43299b1c7435a395b0a4d1db425", "html_url": "https://github.com/rust-lang/rust/commit/3b1d98308596e43299b1c7435a395b0a4d1db425", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b1d98308596e43299b1c7435a395b0a4d1db425/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d85528081834639c4580fc135f74eb23447b12c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d85528081834639c4580fc135f74eb23447b12c7", "html_url": "https://github.com/rust-lang/rust/commit/d85528081834639c4580fc135f74eb23447b12c7"}, {"sha": "30817de3affd9376eed4ff164c42fe0e00a1ac37", "url": "https://api.github.com/repos/rust-lang/rust/commits/30817de3affd9376eed4ff164c42fe0e00a1ac37", "html_url": "https://github.com/rust-lang/rust/commit/30817de3affd9376eed4ff164c42fe0e00a1ac37"}], "stats": {"total": 88, "additions": 70, "deletions": 18}, "files": [{"sha": "b391f903a80a115d2c94ba8194856b399a356acc", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 56, "deletions": 18, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/3b1d98308596e43299b1c7435a395b0a4d1db425/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1d98308596e43299b1c7435a395b0a4d1db425/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=3b1d98308596e43299b1c7435a395b0a4d1db425", "patch": "@@ -9,6 +9,7 @@ use ra_syntax::{\n };\n \n use crate::{FileId, FunctionSignature};\n+use stdx::to_lower_snake_case;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct InlayHintsConfig {\n@@ -144,7 +145,7 @@ fn get_param_name_hints(\n         .iter()\n         .skip(n_params_to_skip)\n         .zip(args)\n-        .filter(|(param, arg)| should_show_param_hint(&fn_signature, param, &arg))\n+        .filter(|(param, arg)| should_show_param_name_hint(sema, &fn_signature, param, &arg))\n         .map(|(param_name, arg)| InlayHint {\n             range: arg.syntax().text_range(),\n             kind: InlayKind::ParameterHint,\n@@ -181,7 +182,7 @@ fn get_bind_pat_hints(\n \n fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::BindPat, pat_ty: &Type) -> bool {\n     if let Some(Adt::Enum(enum_data)) = pat_ty.as_adt() {\n-        let pat_text = bind_pat.syntax().to_string();\n+        let pat_text = bind_pat.to_string();\n         enum_data\n             .variants(db)\n             .into_iter()\n@@ -198,7 +199,7 @@ fn should_not_display_type_hint(db: &RootDatabase, bind_pat: &ast::BindPat, pat_\n     }\n \n     if let Some(Adt::Struct(s)) = pat_ty.as_adt() {\n-        if s.fields(db).is_empty() && s.name(db).to_string() == bind_pat.syntax().to_string() {\n+        if s.fields(db).is_empty() && s.name(db).to_string() == bind_pat.to_string() {\n             return true;\n         }\n     }\n@@ -230,15 +231,16 @@ fn should_not_display_type_hint(db: &RootDatabase, bind_pat: &ast::BindPat, pat_\n     false\n }\n \n-fn should_show_param_hint(\n+fn should_show_param_name_hint(\n+    sema: &Semantics<RootDatabase>,\n     fn_signature: &FunctionSignature,\n     param_name: &str,\n     argument: &ast::Expr,\n ) -> bool {\n+    let param_name = param_name.trim_start_matches('_');\n     if param_name.is_empty()\n-        || is_argument_similar_to_param(argument, param_name)\n-        || Some(param_name.trim_start_matches('_'))\n-            == fn_signature.name.as_ref().map(|s| s.trim_start_matches('_'))\n+        || Some(param_name) == fn_signature.name.as_ref().map(|s| s.trim_start_matches('_'))\n+        || is_argument_similar_to_param_name(sema, argument, param_name)\n     {\n         return false;\n     }\n@@ -254,20 +256,42 @@ fn should_show_param_hint(\n     parameters_len != 1 || !is_obvious_param(param_name)\n }\n \n-fn is_argument_similar_to_param(argument: &ast::Expr, param_name: &str) -> bool {\n-    let argument_string = remove_ref(argument.clone()).syntax().to_string();\n-    let param_name = param_name.trim_start_matches('_');\n-    let argument_string = argument_string.trim_start_matches('_');\n-    argument_string.starts_with(&param_name) || argument_string.ends_with(&param_name)\n+fn is_argument_similar_to_param_name(\n+    sema: &Semantics<RootDatabase>,\n+    argument: &ast::Expr,\n+    param_name: &str,\n+) -> bool {\n+    if is_enum_name_similar_to_param_name(sema, argument, param_name) {\n+        return true;\n+    }\n+    match get_string_representation(argument) {\n+        None => false,\n+        Some(repr) => {\n+            let argument_string = repr.trim_start_matches('_');\n+            argument_string.starts_with(param_name) || argument_string.ends_with(param_name)\n+        }\n+    }\n+}\n+\n+fn is_enum_name_similar_to_param_name(\n+    sema: &Semantics<RootDatabase>,\n+    argument: &ast::Expr,\n+    param_name: &str,\n+) -> bool {\n+    match sema.type_of_expr(argument).and_then(|t| t.as_adt()) {\n+        Some(Adt::Enum(e)) => to_lower_snake_case(&e.name(sema.db).to_string()) == param_name,\n+        _ => false,\n+    }\n }\n \n-fn remove_ref(expr: ast::Expr) -> ast::Expr {\n-    if let ast::Expr::RefExpr(ref_expr) = &expr {\n-        if let Some(inner) = ref_expr.expr() {\n-            return inner;\n+fn get_string_representation(expr: &ast::Expr) -> Option<String> {\n+    match expr {\n+        ast::Expr::MethodCallExpr(method_call_expr) => {\n+            Some(method_call_expr.name_ref()?.to_string())\n         }\n+        ast::Expr::RefExpr(ref_expr) => get_string_representation(&ref_expr.expr()?),\n+        _ => Some(expr.to_string()),\n     }\n-    expr\n }\n \n fn is_obvious_param(param_name: &str) -> bool {\n@@ -1073,6 +1097,12 @@ struct TestVarContainer {\n     test_var: i32,\n }\n \n+impl TestVarContainer {\n+    fn test_var(&self) -> i32 {\n+        self.test_var\n+    }\n+}\n+\n struct Test {}\n \n impl Test {\n@@ -1098,10 +1128,15 @@ struct Param {}\n fn different_order(param: &Param) {}\n fn different_order_mut(param: &mut Param) {}\n fn has_underscore(_param: bool) {}\n+fn enum_matches_param_name(completion_kind: CompletionKind) {}\n \n fn twiddle(twiddle: bool) {}\n fn doo(_doo: bool) {}\n \n+enum CompletionKind {\n+    Keyword,\n+}\n+\n fn main() {\n     let container: TestVarContainer = TestVarContainer { test_var: 42 };\n     let test: Test = Test {};\n@@ -1114,18 +1149,21 @@ fn main() {\n     let test_var: i32 = 55;\n     test_processed.no_hints_expected(22, test_var);\n     test_processed.no_hints_expected(33, container.test_var);\n+    test_processed.no_hints_expected(44, container.test_var());\n     test_processed.frob(false);\n \n     twiddle(true);\n     doo(true);\n \n-    let param_begin: Param = Param {};\n+    let mut param_begin: Param = Param {};\n     different_order(&param_begin);\n     different_order(&mut param_begin);\n \n     let param: bool = true;\n     has_underscore(param);\n \n+    enum_matches_param_name(CompletionKind::Keyword);\n+\n     let a: f64 = 7.0;\n     let b: f64 = 4.0;\n     let _: f64 = a.div_euclid(b);"}, {"sha": "0f34ce70e1a20e9d0f103e3a55e45ef83c6eba32", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b1d98308596e43299b1c7435a395b0a4d1db425/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1d98308596e43299b1c7435a395b0a4d1db425/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=3b1d98308596e43299b1c7435a395b0a4d1db425", "patch": "@@ -102,3 +102,17 @@ pub fn timeit(label: &'static str) -> impl Drop {\n \n     Guard { label, start: Instant::now() }\n }\n+\n+pub fn to_lower_snake_case(s: &str) -> String {\n+    let mut buf = String::with_capacity(s.len());\n+    let mut prev = false;\n+    for c in s.chars() {\n+        if c.is_ascii_uppercase() && prev {\n+            buf.push('_')\n+        }\n+        prev = true;\n+\n+        buf.push(c.to_ascii_lowercase());\n+    }\n+    buf\n+}"}]}