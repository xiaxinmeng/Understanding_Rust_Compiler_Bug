{"sha": "f0cf3bdca198ead0e1d76115bf30a2eef72e8c58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwY2YzYmRjYTE5OGVhZDBlMWQ3NjExNWJmMzBhMmVlZjcyZThjNTg=", "commit": {"author": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2020-10-26T01:20:57Z"}, "committer": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2020-10-26T01:20:57Z"}, "message": "Add lint for replacing `.map().collect()` with `.try_for_each()`", "tree": {"sha": "16d7077866c8a749c240e0261c31759e96262bc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16d7077866c8a749c240e0261c31759e96262bc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFIBAABCgAyFiEE30PRORiHa0gkBHJnH7R33dJ4Ic4FAl+WJHkUHGhtcGVyc29u\nMUBnbWFpbC5jb20ACgkQH7R33dJ4Ic7mBggAr1aAyik7iKZ5DnIjlHgrc5fJ4ouE\naCzt6O/eX+gih7G27d+gLjnFwAP/aQ1j7zhtiW/xl5PNSJqB7jZngbRQz0PpAqkW\ni8j+A8+3vnbMIVWtjdPMhJSbPaUPaQIZTlkEYYyqdnJNS4CW4hmkrGxs8qip0UGY\nTXfNV9R2At2ApIY3pphcutwZtLiktH0tIPRHuC13DpxPcSV6euNISAd3Uqprmltp\nhFbXIxpJeMMGSGc4VOOJlFhPksmSR0XO4eL6oeP1aWFRaU8zN/K7uPF6bZCB6NbW\nvubyJU4XSmP98a62e4A7ec6Opq2R8E/C8XWzGcc/vFU/RJBN+hlywSrlBw==\n=M/Kl\n-----END PGP SIGNATURE-----", "payload": "tree 16d7077866c8a749c240e0261c31759e96262bc3\nparent afbac8906e614a63ff5825710c3ebe45a3b5e01a\nauthor HMPerson1 <hmperson1@gmail.com> 1603675257 -0400\ncommitter HMPerson1 <hmperson1@gmail.com> 1603675257 -0400\n\nAdd lint for replacing `.map().collect()` with `.try_for_each()`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58", "html_url": "https://github.com/rust-lang/rust/commit/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58/comments", "author": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afbac8906e614a63ff5825710c3ebe45a3b5e01a", "url": "https://api.github.com/repos/rust-lang/rust/commits/afbac8906e614a63ff5825710c3ebe45a3b5e01a", "html_url": "https://github.com/rust-lang/rust/commit/afbac8906e614a63ff5825710c3ebe45a3b5e01a"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "287cf6bb725c1db37489a81784a81a9822f9da4f", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f0cf3bdca198ead0e1d76115bf30a2eef72e8c58", "patch": "@@ -1802,6 +1802,7 @@ Released 2018-09-13\n [`manual_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or\n [`many_single_char_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names\n [`map_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n+[`map_collect_result_unit`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_collect_result_unit\n [`map_entry`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_entry\n [`map_err_ignore`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore\n [`map_flatten`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten"}, {"sha": "138d1ab9b50679168adb4ae7edfb191d3ff0201e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f0cf3bdca198ead0e1d76115bf30a2eef72e8c58", "patch": "@@ -697,6 +697,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::ITER_NTH_ZERO,\n         &methods::ITER_SKIP_NEXT,\n         &methods::MANUAL_SATURATING_ARITHMETIC,\n+        &methods::MAP_COLLECT_RESULT_UNIT,\n         &methods::MAP_FLATTEN,\n         &methods::MAP_UNWRAP_OR,\n         &methods::NEW_RET_NO_SELF,\n@@ -1420,6 +1421,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::ITER_NTH_ZERO),\n         LintId::of(&methods::ITER_SKIP_NEXT),\n         LintId::of(&methods::MANUAL_SATURATING_ARITHMETIC),\n+        LintId::of(&methods::MAP_COLLECT_RESULT_UNIT),\n         LintId::of(&methods::NEW_RET_NO_SELF),\n         LintId::of(&methods::OK_EXPECT),\n         LintId::of(&methods::OPTION_AS_REF_DEREF),\n@@ -1615,6 +1617,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::ITER_NTH_ZERO),\n         LintId::of(&methods::ITER_SKIP_NEXT),\n         LintId::of(&methods::MANUAL_SATURATING_ARITHMETIC),\n+        LintId::of(&methods::MAP_COLLECT_RESULT_UNIT),\n         LintId::of(&methods::NEW_RET_NO_SELF),\n         LintId::of(&methods::OK_EXPECT),\n         LintId::of(&methods::OPTION_MAP_OR_NONE),"}, {"sha": "5f9bed90845ee8a122da17e7fac037363082b6a0", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f0cf3bdca198ead0e1d76115bf30a2eef72e8c58", "patch": "@@ -1383,6 +1383,27 @@ declare_clippy_lint! {\n     \"using unnecessary lazy evaluation, which can be replaced with simpler eager evaluation\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.map(_).collect::<Result<(),_>()`.\n+    ///\n+    /// **Why is this bad?** Using `try_for_each` instead is more readable and idiomatic.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// (0..3).map(|t| Err(t)).collect::<Result<(), _>>();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// (0..3).try_for_each(|t| Err(t));\n+    /// ```\n+    pub MAP_COLLECT_RESULT_UNIT,\n+    style,\n+    \"using `.map(_).collect::<Result<(),_>()`, which can be replaced with `try_for_each`\"\n+}\n+\n declare_lint_pass!(Methods => [\n     UNWRAP_USED,\n     EXPECT_USED,\n@@ -1433,6 +1454,7 @@ declare_lint_pass!(Methods => [\n     FILETYPE_IS_FILE,\n     OPTION_AS_REF_DEREF,\n     UNNECESSARY_LAZY_EVALUATIONS,\n+    MAP_COLLECT_RESULT_UNIT,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Methods {\n@@ -1515,6 +1537,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"unwrap_or_else\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"unwrap_or\"),\n             [\"get_or_insert_with\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"get_or_insert\"),\n             [\"ok_or_else\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"ok_or\"),\n+            [\"collect\", \"map\"] => lint_map_collect(cx, expr, arg_lists[1], arg_lists[0]),\n             _ => {},\n         }\n \n@@ -3501,6 +3524,42 @@ fn lint_option_as_ref_deref<'tcx>(\n     }\n }\n \n+fn lint_map_collect(\n+    cx: &LateContext<'_>,\n+    expr: &hir::Expr<'_>,\n+    map_args: &[hir::Expr<'_>],\n+    collect_args: &[hir::Expr<'_>],\n+) {\n+    if_chain! {\n+        // called on Iterator\n+        if let [map_expr] = collect_args;\n+        if match_trait_method(cx, map_expr, &paths::ITERATOR);\n+        // return of collect `Result<(),_>`\n+        let collect_ret_ty = cx.typeck_results().expr_ty(expr);\n+        if is_type_diagnostic_item(cx, collect_ret_ty, sym!(result_type));\n+        if let ty::Adt(_, substs) = collect_ret_ty.kind();\n+        if let Some(result_t) = substs.types().next();\n+        if result_t.is_unit();\n+        // get parts for snippet\n+        if let [iter, map_fn] = map_args;\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                MAP_COLLECT_RESULT_UNIT,\n+                expr.span,\n+                \"`.map().collect()` can be replaced with `.try_for_each()`\",\n+                \"try this\",\n+                format!(\n+                    \"{}.try_for_each({})\",\n+                    snippet(cx, iter.span, \"..\"),\n+                    snippet(cx, map_fn.span, \"..\")\n+                ),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n /// Given a `Result<T, E>` type, return its error type (`E`).\n fn get_error_type<'a>(cx: &LateContext<'_>, ty: Ty<'a>) -> Option<Ty<'a>> {\n     match ty.kind() {"}, {"sha": "d9b3e5c17f4f6eec933a9e3d02c6c92a53770160", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=f0cf3bdca198ead0e1d76115bf30a2eef72e8c58", "patch": "@@ -1222,6 +1222,13 @@ vec![\n         deprecation: None,\n         module: \"map_clone\",\n     },\n+    Lint {\n+        name: \"map_collect_result_unit\",\n+        group: \"style\",\n+        desc: \"using `.map(_).collect::<Result<(),_>()`, which can be replaced with `try_for_each`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"map_entry\",\n         group: \"perf\","}, {"sha": "e66c9cc24207ade95d7984e6b48d1acf78091e02", "filename": "tests/ui/map_collect_result_unit.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58/tests%2Fui%2Fmap_collect_result_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58/tests%2Fui%2Fmap_collect_result_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_collect_result_unit.fixed?ref=f0cf3bdca198ead0e1d76115bf30a2eef72e8c58", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![warn(clippy::map_collect_result_unit)]\n+\n+fn main() {\n+    {\n+        let _ = (0..3).try_for_each(|t| Err(t + 1));\n+        let _: Result<(), _> = (0..3).try_for_each(|t| Err(t + 1));\n+\n+        let _ = (0..3).try_for_each(|t| Err(t + 1));\n+    }\n+}\n+\n+fn _ignore() {\n+    let _ = (0..3).map(|t| Err(t + 1)).collect::<Result<Vec<i32>, _>>();\n+    let _ = (0..3).map(|t| Err(t + 1)).collect::<Vec<Result<(), _>>>();\n+}"}, {"sha": "6f08f4c3c53549c76e449f7947666ac48abbc6bf", "filename": "tests/ui/map_collect_result_unit.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58/tests%2Fui%2Fmap_collect_result_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58/tests%2Fui%2Fmap_collect_result_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_collect_result_unit.rs?ref=f0cf3bdca198ead0e1d76115bf30a2eef72e8c58", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![warn(clippy::map_collect_result_unit)]\n+\n+fn main() {\n+    {\n+        let _ = (0..3).map(|t| Err(t + 1)).collect::<Result<(), _>>();\n+        let _: Result<(), _> = (0..3).map(|t| Err(t + 1)).collect();\n+\n+        let _ = (0..3).try_for_each(|t| Err(t + 1));\n+    }\n+}\n+\n+fn _ignore() {\n+    let _ = (0..3).map(|t| Err(t + 1)).collect::<Result<Vec<i32>, _>>();\n+    let _ = (0..3).map(|t| Err(t + 1)).collect::<Vec<Result<(), _>>>();\n+}"}, {"sha": "8b06e13baa6b4f29eba699643a9b1a984af20068", "filename": "tests/ui/map_collect_result_unit.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58/tests%2Fui%2Fmap_collect_result_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0cf3bdca198ead0e1d76115bf30a2eef72e8c58/tests%2Fui%2Fmap_collect_result_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_collect_result_unit.stderr?ref=f0cf3bdca198ead0e1d76115bf30a2eef72e8c58", "patch": "@@ -0,0 +1,16 @@\n+error: `.map().collect()` can be replaced with `.try_for_each()`\n+  --> $DIR/map_collect_result_unit.rs:6:17\n+   |\n+LL |         let _ = (0..3).map(|t| Err(t + 1)).collect::<Result<(), _>>();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(0..3).try_for_each(|t| Err(t + 1))`\n+   |\n+   = note: `-D clippy::map-collect-result-unit` implied by `-D warnings`\n+\n+error: `.map().collect()` can be replaced with `.try_for_each()`\n+  --> $DIR/map_collect_result_unit.rs:7:32\n+   |\n+LL |         let _: Result<(), _> = (0..3).map(|t| Err(t + 1)).collect();\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(0..3).try_for_each(|t| Err(t + 1))`\n+\n+error: aborting due to 2 previous errors\n+"}]}