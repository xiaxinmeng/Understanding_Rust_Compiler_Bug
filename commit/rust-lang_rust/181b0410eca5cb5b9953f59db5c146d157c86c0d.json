{"sha": "181b0410eca5cb5b9953f59db5c146d157c86c0d", "node_id": "C_kwDOAAsO6NoAKDE4MWIwNDEwZWNhNWNiNWI5OTUzZjU5ZGI1YzE0NmQxNTdjODZjMGQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-26T22:56:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-26T22:56:22Z"}, "message": "Rollup merge of #100735 - Facel3ss1:ty-utils-translation, r=davidtwco\n\nMigrate `rustc_ty_utils` to `SessionDiagnostic`\n\nI have migrated the `rustc_ty_utils` crate to use `SessionDiagnostic`, motivated by the [recent blog post about the diagnostic translation effort](https://blog.rust-lang.org/inside-rust/2022/08/16/diagnostic-effort.html).\n\nThis is my first PR to the Rust repository, so if I have missed anything, or anything needs to be changed, please let me know! \ud83d\ude04\n\n`@rustbot` label +A-translation", "tree": {"sha": "bff233cd3d1e2d42c0163cc30068bd17f58b075c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bff233cd3d1e2d42c0163cc30068bd17f58b075c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/181b0410eca5cb5b9953f59db5c146d157c86c0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjCU+WCRBK7hj4Ov3rIwAA7IcIAFNLqGOfK64EXDOGFi4ClaFD\nxs3erBsYljvNJNATHBvorXsbzXv1KuRprt9eMFZQUH+ZztyMgvxHUPCbWFJRme5g\nuMt8mMKcusoMuP9naef+IJZCI6imgDq7zWqrQ4yzdS45IrNMqHbZ2MNdxf5GHqyY\nhGoPtDVRZN7WRpyTuOwFk58U4TQ0XPJVP8ikf3RM/P0i5T8vS+K6dciEhluPtTia\n95jZSLqoqB9u/ECeDi2iwWf4IUAnkS8SX9HWcAf2ZZ+0KaXEGKri2mWJFk6CZjyH\nrapGgqn3XU9jvSgzej8OAQ3stnHyBwSGlNPz5nT9iIfY6PnMnp23YpwLZ8qmg4s=\n=WbV8\n-----END PGP SIGNATURE-----\n", "payload": "tree bff233cd3d1e2d42c0163cc30068bd17f58b075c\nparent bc1d205e4c653bb4879011a4975a81117dadb5c6\nparent 01c1616b2568a712dfa3e4dc6af233f5152ff362\nauthor Michael Goulet <michael@errs.io> 1661554582 -0700\ncommitter GitHub <noreply@github.com> 1661554582 -0700\n\nRollup merge of #100735 - Facel3ss1:ty-utils-translation, r=davidtwco\n\nMigrate `rustc_ty_utils` to `SessionDiagnostic`\n\nI have migrated the `rustc_ty_utils` crate to use `SessionDiagnostic`, motivated by the [recent blog post about the diagnostic translation effort](https://blog.rust-lang.org/inside-rust/2022/08/16/diagnostic-effort.html).\n\nThis is my first PR to the Rust repository, so if I have missed anything, or anything needs to be changed, please let me know! \ud83d\ude04\n\n`@rustbot` label +A-translation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/181b0410eca5cb5b9953f59db5c146d157c86c0d", "html_url": "https://github.com/rust-lang/rust/commit/181b0410eca5cb5b9953f59db5c146d157c86c0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/181b0410eca5cb5b9953f59db5c146d157c86c0d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc1d205e4c653bb4879011a4975a81117dadb5c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1d205e4c653bb4879011a4975a81117dadb5c6", "html_url": "https://github.com/rust-lang/rust/commit/bc1d205e4c653bb4879011a4975a81117dadb5c6"}, {"sha": "01c1616b2568a712dfa3e4dc6af233f5152ff362", "url": "https://api.github.com/repos/rust-lang/rust/commits/01c1616b2568a712dfa3e4dc6af233f5152ff362", "html_url": "https://github.com/rust-lang/rust/commit/01c1616b2568a712dfa3e4dc6af233f5152ff362"}], "stats": {"total": 302, "additions": 208, "deletions": 94}, "files": [{"sha": "8b6d1e83b51bbccb74cfcbdb9fb194bee6fa399e", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181b0410eca5cb5b9953f59db5c146d157c86c0d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/181b0410eca5cb5b9953f59db5c146d157c86c0d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=181b0410eca5cb5b9953f59db5c146d157c86c0d", "patch": "@@ -4601,6 +4601,7 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_infer\",\n+ \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_session\",\n  \"rustc_span\","}, {"sha": "1040ee1c97d814b8a04c97bcb2a88fcfa68c30c6", "filename": "compiler/rustc_error_messages/locales/en-US/ty_utils.ftl", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/181b0410eca5cb5b9953f59db5c146d157c86c0d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fty_utils.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/181b0410eca5cb5b9953f59db5c146d157c86c0d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fty_utils.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fty_utils.ftl?ref=181b0410eca5cb5b9953f59db5c146d157c86c0d", "patch": "@@ -0,0 +1,47 @@\n+ty_utils_needs_drop_overflow = overflow while checking whether `{$query_ty}` requires drop\n+\n+ty_utils_generic_constant_too_complex = overly complex generic constant\n+    .help = consider moving this anonymous constant into a `const` function\n+    .maybe_supported = this operation may be supported in the future\n+\n+ty_utils_borrow_not_supported = borrowing is not supported in generic constants\n+\n+ty_utils_address_and_deref_not_supported = dereferencing or taking the address is not supported in generic constants\n+\n+ty_utils_array_not_supported = array construction is not supported in generic constants\n+\n+ty_utils_block_not_supported = blocks are not supported in generic constant\n+\n+ty_utils_never_to_any_not_supported = converting nevers to any is not supported in generic constant\n+\n+ty_utils_tuple_not_supported = tuple construction is not supported in generic constants\n+\n+ty_utils_index_not_supported = indexing is not supported in generic constant\n+\n+ty_utils_field_not_supported = field access is not supported in generic constant\n+\n+ty_utils_const_block_not_supported = const blocks are not supported in generic constant\n+\n+ty_utils_adt_not_supported = struct/enum construction is not supported in generic constants\n+\n+ty_utils_pointer_not_supported = pointer casts are not allowed in generic constants\n+\n+ty_utils_yield_not_supported = generator control flow is not allowed in generic constants\n+\n+ty_utils_loop_not_supported = loops and loop control flow are not supported in generic constants\n+\n+ty_utils_box_not_supported = allocations are not allowed in generic constants\n+\n+ty_utils_binary_not_supported = unsupported binary operation in generic constants\n+\n+ty_utils_logical_op_not_supported = unsupported operation in generic constants, short-circuiting operations would imply control flow\n+\n+ty_utils_assign_not_supported = assignment is not supported in generic constants\n+\n+ty_utils_closure_and_return_not_supported = closures and function keywords are not supported in generic constants\n+\n+ty_utils_control_flow_not_supported = control flow is not supported in generic constants\n+\n+ty_utils_inline_asm_not_supported = assembly is not supported in generic constants\n+\n+ty_utils_operation_not_supported = unsupported operation in generic constant"}, {"sha": "27ee9814e50175d51f25a3d0707fcd5e933d2f67", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181b0410eca5cb5b9953f59db5c146d157c86c0d/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181b0410eca5cb5b9953f59db5c146d157c86c0d/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=181b0410eca5cb5b9953f59db5c146d157c86c0d", "patch": "@@ -45,6 +45,7 @@ fluent_messages! {\n     plugin_impl => \"../locales/en-US/plugin_impl.ftl\",\n     privacy => \"../locales/en-US/privacy.ftl\",\n     save_analysis => \"../locales/en-US/save_analysis.ftl\",\n+    ty_utils => \"../locales/en-US/ty_utils.ftl\",\n     typeck => \"../locales/en-US/typeck.ftl\",\n }\n "}, {"sha": "52fbd3ae047732c18b504514e4c210baec942559", "filename": "compiler/rustc_ty_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/181b0410eca5cb5b9953f59db5c146d157c86c0d/compiler%2Frustc_ty_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/181b0410eca5cb5b9953f59db5c146d157c86c0d/compiler%2Frustc_ty_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2FCargo.toml?ref=181b0410eca5cb5b9953f59db5c146d157c86c0d", "patch": "@@ -10,6 +10,7 @@ rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_infer = { path = \"../rustc_infer\" }\n+rustc_macros = { path = \"../rustc_macros\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "16c4d429129a9d499ba5c8524943ba6f520d899e", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 83, "deletions": 90, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/181b0410eca5cb5b9953f59db5c146d157c86c0d/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181b0410eca5cb5b9953f59db5c146d157c86c0d/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=181b0410eca5cb5b9953f59db5c146d157c86c0d", "patch": "@@ -11,6 +11,8 @@ use rustc_target::abi::VariantIdx;\n \n use std::iter;\n \n+use crate::errors::{GenericConstantTooComplex, GenericConstantTooComplexSub};\n+\n /// Destructures array, ADT or tuple constants into the constants\n /// of their fields.\n pub(crate) fn destructure_const<'tcx>(\n@@ -93,26 +95,25 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n         self.body.exprs[self.body_id].span\n     }\n \n-    fn error(&mut self, span: Span, msg: &str) -> Result<!, ErrorGuaranteed> {\n-        let reported = self\n-            .tcx\n-            .sess\n-            .struct_span_err(self.root_span(), \"overly complex generic constant\")\n-            .span_label(span, msg)\n-            .help(\"consider moving this anonymous constant into a `const` function\")\n-            .emit();\n+    fn error(&mut self, sub: GenericConstantTooComplexSub) -> Result<!, ErrorGuaranteed> {\n+        let reported = self.tcx.sess.emit_err(GenericConstantTooComplex {\n+            span: self.root_span(),\n+            maybe_supported: None,\n+            sub,\n+        });\n \n         Err(reported)\n     }\n-    fn maybe_supported_error(&mut self, span: Span, msg: &str) -> Result<!, ErrorGuaranteed> {\n-        let reported = self\n-            .tcx\n-            .sess\n-            .struct_span_err(self.root_span(), \"overly complex generic constant\")\n-            .span_label(span, msg)\n-            .help(\"consider moving this anonymous constant into a `const` function\")\n-            .note(\"this operation may be supported in the future\")\n-            .emit();\n+\n+    fn maybe_supported_error(\n+        &mut self,\n+        sub: GenericConstantTooComplexSub,\n+    ) -> Result<!, ErrorGuaranteed> {\n+        let reported = self.tcx.sess.emit_err(GenericConstantTooComplex {\n+            span: self.root_span(),\n+            maybe_supported: Some(()),\n+            sub,\n+        });\n \n         Err(reported)\n     }\n@@ -243,22 +244,23 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             &ExprKind::Scope { value, .. } => self.recurse_build(value)?,\n             &ExprKind::PlaceTypeAscription { source, .. }\n             | &ExprKind::ValueTypeAscription { source, .. } => self.recurse_build(source)?,\n-            &ExprKind::Literal { lit, neg} => {\n+            &ExprKind::Literal { lit, neg } => {\n                 let sp = node.span;\n-                let constant =\n-                    match self.tcx.at(sp).lit_to_const(LitToConstInput { lit: &lit.node, ty: node.ty, neg }) {\n-                        Ok(c) => c,\n-                        Err(LitToConstError::Reported) => {\n-                            self.tcx.const_error(node.ty)\n-                        }\n-                        Err(LitToConstError::TypeError) => {\n-                            bug!(\"encountered type error in lit_to_const\")\n-                        }\n-                    };\n+                let constant = match self.tcx.at(sp).lit_to_const(LitToConstInput {\n+                    lit: &lit.node,\n+                    ty: node.ty,\n+                    neg,\n+                }) {\n+                    Ok(c) => c,\n+                    Err(LitToConstError::Reported) => self.tcx.const_error(node.ty),\n+                    Err(LitToConstError::TypeError) => {\n+                        bug!(\"encountered type error in lit_to_const\")\n+                    }\n+                };\n \n                 self.nodes.push(Node::Leaf(constant))\n             }\n-            &ExprKind::NonHirLiteral { lit , user_ty: _} => {\n+            &ExprKind::NonHirLiteral { lit, user_ty: _ } => {\n                 let val = ty::ValTree::from_scalar_int(lit);\n                 self.nodes.push(Node::Leaf(ty::Const::from_value(self.tcx, val, node.ty)))\n             }\n@@ -269,19 +271,17 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             &ExprKind::NamedConst { def_id, substs, user_ty: _ } => {\n                 let uneval = ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs);\n \n-                let constant = self.tcx.mk_const(ty::ConstS {\n-                                kind: ty::ConstKind::Unevaluated(uneval),\n-                                ty: node.ty,\n-                            });\n+                let constant = self\n+                    .tcx\n+                    .mk_const(ty::ConstS { kind: ty::ConstKind::Unevaluated(uneval), ty: node.ty });\n \n                 self.nodes.push(Node::Leaf(constant))\n             }\n \n-            ExprKind::ConstParam {param, ..} => {\n-                let const_param = self.tcx.mk_const(ty::ConstS {\n-                        kind: ty::ConstKind::Param(*param),\n-                        ty: node.ty,\n-                    });\n+            ExprKind::ConstParam { param, .. } => {\n+                let const_param = self\n+                    .tcx\n+                    .mk_const(ty::ConstS { kind: ty::ConstKind::Param(*param), ty: node.ty });\n                 self.nodes.push(Node::Leaf(const_param))\n             }\n \n@@ -312,13 +312,13 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             // }\n             // ```\n             ExprKind::Block { block } => {\n-                if let thir::Block { stmts: box [], expr: Some(e), .. } = &self.body.blocks[*block] {\n+                if let thir::Block { stmts: box [], expr: Some(e), .. } = &self.body.blocks[*block]\n+                {\n                     self.recurse_build(*e)?\n                 } else {\n-                    self.maybe_supported_error(\n+                    self.maybe_supported_error(GenericConstantTooComplexSub::BlockNotSupported(\n                         node.span,\n-                        \"blocks are not supported in generic constant\",\n-                    )?\n+                    ))?\n                 }\n             }\n             // `ExprKind::Use` happens when a `hir::ExprKind::Cast` is a\n@@ -332,7 +332,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 let arg = self.recurse_build(source)?;\n                 self.nodes.push(Node::Cast(CastKind::As, arg, node.ty))\n             }\n-            ExprKind::Borrow{ arg, ..} => {\n+            ExprKind::Borrow { arg, .. } => {\n                 let arg_node = &self.body.exprs[*arg];\n \n                 // Skip reborrows for now until we allow Deref/Borrow/AddressOf\n@@ -341,84 +341,77 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 if let ExprKind::Deref { arg } = arg_node.kind {\n                     self.recurse_build(arg)?\n                 } else {\n-                    self.maybe_supported_error(\n+                    self.maybe_supported_error(GenericConstantTooComplexSub::BorrowNotSupported(\n                         node.span,\n-                        \"borrowing is not supported in generic constants\",\n-                    )?\n+                    ))?\n                 }\n             }\n             // FIXME(generic_const_exprs): We may want to support these.\n-            ExprKind::AddressOf { .. } | ExprKind::Deref {..}=> self.maybe_supported_error(\n-                node.span,\n-                \"dereferencing or taking the address is not supported in generic constants\",\n+            ExprKind::AddressOf { .. } | ExprKind::Deref { .. } => self.maybe_supported_error(\n+                GenericConstantTooComplexSub::AddressAndDerefNotSupported(node.span),\n             )?,\n-            ExprKind::Repeat { .. } | ExprKind::Array { .. } =>  self.maybe_supported_error(\n-                node.span,\n-                \"array construction is not supported in generic constants\",\n+            ExprKind::Repeat { .. } | ExprKind::Array { .. } => self.maybe_supported_error(\n+                GenericConstantTooComplexSub::ArrayNotSupported(node.span),\n             )?,\n             ExprKind::NeverToAny { .. } => self.maybe_supported_error(\n-                node.span,\n-                \"converting nevers to any is not supported in generic constant\",\n+                GenericConstantTooComplexSub::NeverToAnyNotSupported(node.span),\n             )?,\n             ExprKind::Tuple { .. } => self.maybe_supported_error(\n-                node.span,\n-                \"tuple construction is not supported in generic constants\",\n+                GenericConstantTooComplexSub::TupleNotSupported(node.span),\n             )?,\n             ExprKind::Index { .. } => self.maybe_supported_error(\n-                node.span,\n-                \"indexing is not supported in generic constant\",\n+                GenericConstantTooComplexSub::IndexNotSupported(node.span),\n             )?,\n             ExprKind::Field { .. } => self.maybe_supported_error(\n-                node.span,\n-                \"field access is not supported in generic constant\",\n+                GenericConstantTooComplexSub::FieldNotSupported(node.span),\n             )?,\n             ExprKind::ConstBlock { .. } => self.maybe_supported_error(\n-                node.span,\n-                \"const blocks are not supported in generic constant\",\n-            )?,\n-            ExprKind::Adt(_) => self.maybe_supported_error(\n-                node.span,\n-                \"struct/enum construction is not supported in generic constants\",\n+                GenericConstantTooComplexSub::ConstBlockNotSupported(node.span),\n             )?,\n+            ExprKind::Adt(_) => self\n+                .maybe_supported_error(GenericConstantTooComplexSub::AdtNotSupported(node.span))?,\n             // dont know if this is correct\n-            ExprKind::Pointer { .. } =>\n-                self.error(node.span, \"pointer casts are not allowed in generic constants\")?,\n-            ExprKind::Yield { .. } =>\n-                self.error(node.span, \"generator control flow is not allowed in generic constants\")?,\n-            ExprKind::Continue { .. } | ExprKind::Break { .. } | ExprKind::Loop { .. } => self\n-                .error(\n-                    node.span,\n-                    \"loops and loop control flow are not supported in generic constants\",\n-                )?,\n-            ExprKind::Box { .. } =>\n-                self.error(node.span, \"allocations are not allowed in generic constants\")?,\n+            ExprKind::Pointer { .. } => {\n+                self.error(GenericConstantTooComplexSub::PointerNotSupported(node.span))?\n+            }\n+            ExprKind::Yield { .. } => {\n+                self.error(GenericConstantTooComplexSub::YieldNotSupported(node.span))?\n+            }\n+            ExprKind::Continue { .. } | ExprKind::Break { .. } | ExprKind::Loop { .. } => {\n+                self.error(GenericConstantTooComplexSub::LoopNotSupported(node.span))?\n+            }\n+            ExprKind::Box { .. } => {\n+                self.error(GenericConstantTooComplexSub::BoxNotSupported(node.span))?\n+            }\n \n             ExprKind::Unary { .. } => unreachable!(),\n             // we handle valid unary/binary ops above\n-            ExprKind::Binary { .. } =>\n-                self.error(node.span, \"unsupported binary operation in generic constants\")?,\n-            ExprKind::LogicalOp { .. } =>\n-                self.error(node.span, \"unsupported operation in generic constants, short-circuiting operations would imply control flow\")?,\n+            ExprKind::Binary { .. } => {\n+                self.error(GenericConstantTooComplexSub::BinaryNotSupported(node.span))?\n+            }\n+            ExprKind::LogicalOp { .. } => {\n+                self.error(GenericConstantTooComplexSub::LogicalOpNotSupported(node.span))?\n+            }\n             ExprKind::Assign { .. } | ExprKind::AssignOp { .. } => {\n-                self.error(node.span, \"assignment is not supported in generic constants\")?\n+                self.error(GenericConstantTooComplexSub::AssignNotSupported(node.span))?\n+            }\n+            ExprKind::Closure { .. } | ExprKind::Return { .. } => {\n+                self.error(GenericConstantTooComplexSub::ClosureAndReturnNotSupported(node.span))?\n             }\n-            ExprKind::Closure { .. } | ExprKind::Return { .. } => self.error(\n-                node.span,\n-                \"closures and function keywords are not supported in generic constants\",\n-            )?,\n             // let expressions imply control flow\n-            ExprKind::Match { .. } | ExprKind::If { .. } | ExprKind::Let { .. } =>\n-                self.error(node.span, \"control flow is not supported in generic constants\")?,\n+            ExprKind::Match { .. } | ExprKind::If { .. } | ExprKind::Let { .. } => {\n+                self.error(GenericConstantTooComplexSub::ControlFlowNotSupported(node.span))?\n+            }\n             ExprKind::InlineAsm { .. } => {\n-                self.error(node.span, \"assembly is not supported in generic constants\")?\n+                self.error(GenericConstantTooComplexSub::InlineAsmNotSupported(node.span))?\n             }\n \n             // we dont permit let stmts so `VarRef` and `UpvarRef` cant happen\n             ExprKind::VarRef { .. }\n             | ExprKind::UpvarRef { .. }\n             | ExprKind::StaticRef { .. }\n             | ExprKind::ThreadLocalRef(_) => {\n-                self.error(node.span, \"unsupported operation in generic constant\")?\n+                self.error(GenericConstantTooComplexSub::OperationNotSupported(node.span))?\n             }\n         })\n     }"}, {"sha": "3a8ef96c991f2b24e5e37c602cdd8ce57cf3814f", "filename": "compiler/rustc_ty_utils/src/errors.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/181b0410eca5cb5b9953f59db5c146d157c86c0d/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181b0410eca5cb5b9953f59db5c146d157c86c0d/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs?ref=181b0410eca5cb5b9953f59db5c146d157c86c0d", "patch": "@@ -0,0 +1,69 @@\n+//! Errors emitted by ty_utils\n+\n+use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_middle::ty::Ty;\n+use rustc_span::Span;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(ty_utils::needs_drop_overflow)]\n+pub struct NeedsDropOverflow<'tcx> {\n+    pub query_ty: Ty<'tcx>,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(ty_utils::generic_constant_too_complex)]\n+#[help]\n+pub struct GenericConstantTooComplex {\n+    #[primary_span]\n+    pub span: Span,\n+    #[note(ty_utils::maybe_supported)]\n+    pub maybe_supported: Option<()>,\n+    #[subdiagnostic]\n+    pub sub: GenericConstantTooComplexSub,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub enum GenericConstantTooComplexSub {\n+    #[label(ty_utils::borrow_not_supported)]\n+    BorrowNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::address_and_deref_not_supported)]\n+    AddressAndDerefNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::array_not_supported)]\n+    ArrayNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::block_not_supported)]\n+    BlockNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::never_to_any_not_supported)]\n+    NeverToAnyNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::tuple_not_supported)]\n+    TupleNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::index_not_supported)]\n+    IndexNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::field_not_supported)]\n+    FieldNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::const_block_not_supported)]\n+    ConstBlockNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::adt_not_supported)]\n+    AdtNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::pointer_not_supported)]\n+    PointerNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::yield_not_supported)]\n+    YieldNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::loop_not_supported)]\n+    LoopNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::box_not_supported)]\n+    BoxNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::binary_not_supported)]\n+    BinaryNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::logical_op_not_supported)]\n+    LogicalOpNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::assign_not_supported)]\n+    AssignNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::closure_and_return_not_supported)]\n+    ClosureAndReturnNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::control_flow_not_supported)]\n+    ControlFlowNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::inline_asm_not_supported)]\n+    InlineAsmNotSupported(#[primary_span] Span),\n+    #[label(ty_utils::operation_not_supported)]\n+    OperationNotSupported(#[primary_span] Span),\n+}"}, {"sha": "6931b15b1ba5735f5b41e09f4ba5133a7f12063d", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/181b0410eca5cb5b9953f59db5c146d157c86c0d/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181b0410eca5cb5b9953f59db5c146d157c86c0d/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=181b0410eca5cb5b9953f59db5c146d157c86c0d", "patch": "@@ -10,6 +10,8 @@\n #![feature(never_type)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_middle;\n@@ -21,6 +23,7 @@ use rustc_middle::ty::query::Providers;\n mod assoc;\n mod common_traits;\n mod consts;\n+mod errors;\n mod implied_bounds;\n pub mod instance;\n mod needs_drop;"}, {"sha": "ab5a3d8ae48923d903a0bbe741834d37800375e6", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/181b0410eca5cb5b9953f59db5c146d157c86c0d/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181b0410eca5cb5b9953f59db5c146d157c86c0d/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=181b0410eca5cb5b9953f59db5c146d157c86c0d", "patch": "@@ -9,6 +9,8 @@ use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt};\n use rustc_session::Limit;\n use rustc_span::{sym, DUMMY_SP};\n \n+use crate::errors::NeedsDropOverflow;\n+\n type NeedsDropResult<T> = Result<T, AlwaysRequiresDrop>;\n \n fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n@@ -90,10 +92,7 @@ where\n             if !self.recursion_limit.value_within_limit(level) {\n                 // Not having a `Span` isn't great. But there's hopefully some other\n                 // recursion limit error as well.\n-                tcx.sess.span_err(\n-                    DUMMY_SP,\n-                    &format!(\"overflow while checking whether `{}` requires drop\", self.query_ty),\n-                );\n+                tcx.sess.emit_err(NeedsDropOverflow { query_ty: self.query_ty });\n                 return Some(Err(AlwaysRequiresDrop));\n             }\n "}]}