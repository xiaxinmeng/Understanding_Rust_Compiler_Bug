{"sha": "1a6d1177193a608d7af7f8bf0579de8e573bc947", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNmQxMTc3MTkzYTYwOGQ3YWY3ZjhiZjA1NzlkZThlNTczYmM5NDc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-13T00:01:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-13T00:01:37Z"}, "message": "Merge pull request #2145 from topecongiro/issue-2144\n\nFormat generics on unit struct", "tree": {"sha": "64ada8958d42997acdba506f92bd2cf8e99294a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64ada8958d42997acdba506f92bd2cf8e99294a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a6d1177193a608d7af7f8bf0579de8e573bc947", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaCODhCRBK7hj4Ov3rIwAAdHIIAHnEDuSPdIFb5q0uwRF2H9p7\nm5Ft7DjlnreWL6OGsefNBf2d+ITrTPNOqEEKrDLhcP+SFO246dOPM46MdOhWtN3f\nzjtuhXANG0KT/Oeo7ktH3aQyh1i4T5oZmYf7SVDuX9HDpu1w4noamusFYw3VHVjz\nQDYw6h65XcOMe/Fg3CkNkUxAz2QGqTVN6w83xBZeYBXIQdPcMFZuATVdUsskpyu5\noZOUjRmZb6RpXppWsQ2+JWFQePG/CiTLNUfWi4KX+ZLHsGzhjZs2owgMMHd1ibTS\nSakxncohjcfiihbwMthaMdqiG4CrAHiWzHA4IaQun3iWGb2TOE8B2c9Ps7KuhxE=\n=tRzq\n-----END PGP SIGNATURE-----\n", "payload": "tree 64ada8958d42997acdba506f92bd2cf8e99294a5\nparent f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec\nparent f45aba9ced97ff2dae47ecceb2bd03950a71a07d\nauthor Nick Cameron <nrc@ncameron.org> 1510531297 +1300\ncommitter GitHub <noreply@github.com> 1510531297 +1300\n\nMerge pull request #2145 from topecongiro/issue-2144\n\nFormat generics on unit struct "}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6d1177193a608d7af7f8bf0579de8e573bc947", "html_url": "https://github.com/rust-lang/rust/commit/1a6d1177193a608d7af7f8bf0579de8e573bc947", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a6d1177193a608d7af7f8bf0579de8e573bc947/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec", "html_url": "https://github.com/rust-lang/rust/commit/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec"}, {"sha": "f45aba9ced97ff2dae47ecceb2bd03950a71a07d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f45aba9ced97ff2dae47ecceb2bd03950a71a07d", "html_url": "https://github.com/rust-lang/rust/commit/f45aba9ced97ff2dae47ecceb2bd03950a71a07d"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "9bfeff8420e90a07345b3054ab5889fb13d3882d", "filename": "src/bin/git-fmt.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1a6d1177193a608d7af7f8bf0579de8e573bc947/src%2Fbin%2Fgit-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6d1177193a608d7af7f8bf0579de8e573bc947/src%2Fbin%2Fgit-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fgit-fmt.rs?ref=1a6d1177193a608d7af7f8bf0579de8e573bc947", "patch": "@@ -15,18 +15,18 @@ use rustfmt::{run, Input};\n use rustfmt::config;\n \n \n-fn prune_files<'a>(files: Vec<&'a str>) -> Vec<&'a str> {\n+fn prune_files(files: Vec<&str>) -> Vec<&str> {\n     let prefixes: Vec<_> = files\n         .iter()\n         .filter(|f| f.ends_with(\"mod.rs\") || f.ends_with(\"lib.rs\"))\n         .map(|f| &f[..f.len() - 6])\n         .collect();\n \n     let mut pruned_prefixes = vec![];\n-    for p1 in prefixes.into_iter() {\n+    for p1 in prefixes {\n         let mut include = true;\n         if !p1.starts_with(\"src/bin/\") {\n-            for p2 in pruned_prefixes.iter() {\n+            for p2 in &pruned_prefixes {\n                 if p1.starts_with(p2) {\n                     include = false;\n                     break;\n@@ -46,7 +46,7 @@ fn prune_files<'a>(files: Vec<&'a str>) -> Vec<&'a str> {\n             if f.ends_with(\"mod.rs\") || f.ends_with(\"lib.rs\") || f.starts_with(\"src/bin/\") {\n                 return true;\n             }\n-            for pp in pruned_prefixes.iter() {\n+            for pp in &pruned_prefixes {\n                 if f.starts_with(pp) {\n                     include = false;\n                     break;\n@@ -57,7 +57,7 @@ fn prune_files<'a>(files: Vec<&'a str>) -> Vec<&'a str> {\n         .collect()\n }\n \n-fn git_diff(commits: String) -> String {\n+fn git_diff(commits: &str) -> String {\n     let mut cmd = Command::new(\"git\");\n     cmd.arg(\"diff\");\n     if commits != \"0\" {\n@@ -109,7 +109,7 @@ fn check_uncommitted() {\n     debug!(\"uncommitted files: {:?}\", uncommitted);\n     if !uncommitted.is_empty() {\n         println!(\"Found untracked changes:\");\n-        for f in uncommitted.iter() {\n+        for f in &uncommitted {\n             println!(\"  {}\", f);\n         }\n         println!(\"Commit your work, or run with `-u`.\");\n@@ -165,7 +165,7 @@ impl Config {\n         }\n         if matches.free.len() == 1 {\n             let commits = matches.free[0].trim();\n-            if let Err(_) = u32::from_str(&commits) {\n+            if u32::from_str(commits).is_err() {\n                 panic!(\"Couldn't parse number of commits\");\n             }\n             config.commits = commits.to_owned();\n@@ -187,7 +187,7 @@ fn main() {\n         check_uncommitted();\n     }\n \n-    let stdout = git_diff(config.commits);\n+    let stdout = git_diff(&config.commits);\n     let files = get_files(&stdout);\n     debug!(\"files: {:?}\", files);\n     let files = prune_files(files);"}, {"sha": "b9c8e37ea0db862591c3aa2cb28d088210589bab", "filename": "src/items.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a6d1177193a608d7af7f8bf0579de8e573bc947/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6d1177193a608d7af7f8bf0579de8e573bc947/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=1a6d1177193a608d7af7f8bf0579de8e573bc947", "patch": "@@ -911,7 +911,7 @@ fn format_struct(\n     one_line_width: Option<usize>,\n ) -> Option<String> {\n     match *struct_parts.def {\n-        ast::VariantData::Unit(..) => Some(format_unit_struct(struct_parts)),\n+        ast::VariantData::Unit(..) => format_unit_struct(context, struct_parts, offset),\n         ast::VariantData::Tuple(ref fields, _) => {\n             format_tuple_struct(context, struct_parts, fields, offset)\n         }\n@@ -1088,8 +1088,15 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n     }\n }\n \n-fn format_unit_struct(p: &StructParts) -> String {\n-    format!(\"{};\", format_header(p.prefix, p.ident, p.vis))\n+fn format_unit_struct(context: &RewriteContext, p: &StructParts, offset: Indent) -> Option<String> {\n+    let header_str = format_header(p.prefix, p.ident, p.vis);\n+    let generics_str = if let Some(generics) = p.generics {\n+        let shape = Shape::indented(offset, context.config).offset_left(header_str.len())?;\n+        rewrite_generics(context, generics, shape, generics.span)?\n+    } else {\n+        String::new()\n+    };\n+    Some(format!(\"{}{};\", header_str, generics_str))\n }\n \n pub fn format_struct_struct("}, {"sha": "0f0e7ecf4faabab735f93580a134bef6f177fca4", "filename": "tests/source/structs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a6d1177193a608d7af7f8bf0579de8e573bc947/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6d1177193a608d7af7f8bf0579de8e573bc947/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=1a6d1177193a608d7af7f8bf0579de8e573bc947", "patch": "@@ -269,3 +269,6 @@ pub(crate) struct Foo();\n \n // #2125\n pub struct ReadinessCheckRegistry(Mutex<HashMap<Arc<String>, Box<Fn() -> ReadinessCheck + Sync + Send>>>);\n+\n+// #2144 unit struct with generics\n+struct MyBox<T:?Sized>;"}, {"sha": "4192019a1e61f8b02155ede3706920a7afd12bc4", "filename": "tests/target/structs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a6d1177193a608d7af7f8bf0579de8e573bc947/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6d1177193a608d7af7f8bf0579de8e573bc947/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=1a6d1177193a608d7af7f8bf0579de8e573bc947", "patch": "@@ -313,3 +313,6 @@ pub(crate) struct Foo();\n pub struct ReadinessCheckRegistry(\n     Mutex<HashMap<Arc<String>, Box<Fn() -> ReadinessCheck + Sync + Send>>>,\n );\n+\n+// #2144 unit struct with generics\n+struct MyBox<T: ?Sized>;"}]}