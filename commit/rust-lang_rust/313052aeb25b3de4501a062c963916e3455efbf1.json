{"sha": "313052aeb25b3de4501a062c963916e3455efbf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMzA1MmFlYjI1YjNkZTQ1MDFhMDYyYzk2MzkxNmUzNDU1ZWZiZjE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-10-08T13:03:43Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-10-08T13:03:43Z"}, "message": "rm useless fast_ffi attributes\n\nthis is no longer used by the compiler", "tree": {"sha": "50910f2a27a32ebcdcd0325737a7e09362acd8ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50910f2a27a32ebcdcd0325737a7e09362acd8ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/313052aeb25b3de4501a062c963916e3455efbf1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/313052aeb25b3de4501a062c963916e3455efbf1", "html_url": "https://github.com/rust-lang/rust/commit/313052aeb25b3de4501a062c963916e3455efbf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/313052aeb25b3de4501a062c963916e3455efbf1/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c8c8bc9662269d977fe897b4cb7afa805724d78", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c8c8bc9662269d977fe897b4cb7afa805724d78", "html_url": "https://github.com/rust-lang/rust/commit/5c8c8bc9662269d977fe897b4cb7afa805724d78"}], "stats": {"total": 490, "additions": 0, "deletions": 490}, "files": [{"sha": "e0a5573d00b30854238435e05b6e48587c1b0b78", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 0, "deletions": 457, "changes": 457, "blob_url": "https://github.com/rust-lang/rust/blob/313052aeb25b3de4501a062c963916e3455efbf1/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313052aeb25b3de4501a062c963916e3455efbf1/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=313052aeb25b3de4501a062c963916e3455efbf1", "patch": "@@ -302,779 +302,525 @@ pub mod llvm {\n     #[abi = \"cdecl\"]\n     extern {\n         /* Create and destroy contexts. */\n-        #[fast_ffi]\n         pub fn LLVMContextCreate() -> ContextRef;\n-        #[fast_ffi]\n         pub fn LLVMContextDispose(C: ContextRef);\n-        #[fast_ffi]\n         pub fn LLVMGetMDKindIDInContext(C: ContextRef,\n                                         Name: *c_char,\n                                         SLen: c_uint)\n                                         -> c_uint;\n \n         /* Create and destroy modules. */\n-        #[fast_ffi]\n         pub fn LLVMModuleCreateWithNameInContext(ModuleID: *c_char,\n                                                  C: ContextRef)\n                                                  -> ModuleRef;\n-        #[fast_ffi]\n         pub fn LLVMGetModuleContext(M: ModuleRef) -> ContextRef;\n-        #[fast_ffi]\n         pub fn LLVMDisposeModule(M: ModuleRef);\n \n         /** Data layout. See Module::getDataLayout. */\n-        #[fast_ffi]\n         pub fn LLVMGetDataLayout(M: ModuleRef) -> *c_char;\n-        #[fast_ffi]\n         pub fn LLVMSetDataLayout(M: ModuleRef, Triple: *c_char);\n \n         /** Target triple. See Module::getTargetTriple. */\n-        #[fast_ffi]\n         pub fn LLVMGetTarget(M: ModuleRef) -> *c_char;\n-        #[fast_ffi]\n         pub fn LLVMSetTarget(M: ModuleRef, Triple: *c_char);\n \n         /** See Module::dump. */\n-        #[fast_ffi]\n         pub fn LLVMDumpModule(M: ModuleRef);\n \n         /** See Module::setModuleInlineAsm. */\n-        #[fast_ffi]\n         pub fn LLVMSetModuleInlineAsm(M: ModuleRef, Asm: *c_char);\n \n         /** See llvm::LLVMTypeKind::getTypeID. */\n         pub fn LLVMGetTypeKind(Ty: TypeRef) -> TypeKind;\n \n         /** See llvm::LLVMType::getContext. */\n-        #[fast_ffi]\n         pub fn LLVMGetTypeContext(Ty: TypeRef) -> ContextRef;\n \n         /* Operations on integer types */\n-        #[fast_ffi]\n         pub fn LLVMInt1TypeInContext(C: ContextRef) -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMInt8TypeInContext(C: ContextRef) -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMInt16TypeInContext(C: ContextRef) -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMInt32TypeInContext(C: ContextRef) -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMInt64TypeInContext(C: ContextRef) -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMIntTypeInContext(C: ContextRef, NumBits: c_uint)\n                                     -> TypeRef;\n \n-        #[fast_ffi]\n         pub fn LLVMGetIntTypeWidth(IntegerTy: TypeRef) -> c_uint;\n \n         /* Operations on real types */\n-        #[fast_ffi]\n         pub fn LLVMFloatTypeInContext(C: ContextRef) -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMDoubleTypeInContext(C: ContextRef) -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMX86FP80TypeInContext(C: ContextRef) -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMFP128TypeInContext(C: ContextRef) -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMPPCFP128TypeInContext(C: ContextRef) -> TypeRef;\n \n         /* Operations on function types */\n-        #[fast_ffi]\n         pub fn LLVMFunctionType(ReturnType: TypeRef,\n                                 ParamTypes: *TypeRef,\n                                 ParamCount: c_uint,\n                                 IsVarArg: Bool)\n                                 -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMIsFunctionVarArg(FunctionTy: TypeRef) -> Bool;\n-        #[fast_ffi]\n         pub fn LLVMGetReturnType(FunctionTy: TypeRef) -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMCountParamTypes(FunctionTy: TypeRef) -> c_uint;\n-        #[fast_ffi]\n         pub fn LLVMGetParamTypes(FunctionTy: TypeRef, Dest: *TypeRef);\n \n         /* Operations on struct types */\n-        #[fast_ffi]\n         pub fn LLVMStructTypeInContext(C: ContextRef,\n                                        ElementTypes: *TypeRef,\n                                        ElementCount: c_uint,\n                                        Packed: Bool)\n                                        -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMCountStructElementTypes(StructTy: TypeRef) -> c_uint;\n-        #[fast_ffi]\n         pub fn LLVMGetStructElementTypes(StructTy: TypeRef,\n                                          Dest: *mut TypeRef);\n-        #[fast_ffi]\n         pub fn LLVMIsPackedStruct(StructTy: TypeRef) -> Bool;\n \n         /* Operations on array, pointer, and vector types (sequence types) */\n-        #[fast_ffi]\n         pub fn LLVMArrayType(ElementType: TypeRef, ElementCount: c_uint)\n                              -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMPointerType(ElementType: TypeRef, AddressSpace: c_uint)\n                                -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMVectorType(ElementType: TypeRef, ElementCount: c_uint)\n                               -> TypeRef;\n \n-        #[fast_ffi]\n         pub fn LLVMGetElementType(Ty: TypeRef) -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMGetArrayLength(ArrayTy: TypeRef) -> c_uint;\n-        #[fast_ffi]\n         pub fn LLVMGetPointerAddressSpace(PointerTy: TypeRef) -> c_uint;\n-        #[fast_ffi]\n         pub fn LLVMGetPointerToGlobal(EE: ExecutionEngineRef, V: ValueRef)\n                                       -> *();\n-        #[fast_ffi]\n         pub fn LLVMGetVectorSize(VectorTy: TypeRef) -> c_uint;\n \n         /* Operations on other types */\n-        #[fast_ffi]\n         pub fn LLVMVoidTypeInContext(C: ContextRef) -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMLabelTypeInContext(C: ContextRef) -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMMetadataTypeInContext(C: ContextRef) -> TypeRef;\n \n         /* Operations on all values */\n-        #[fast_ffi]\n         pub fn LLVMTypeOf(Val: ValueRef) -> TypeRef;\n-        #[fast_ffi]\n         pub fn LLVMGetValueName(Val: ValueRef) -> *c_char;\n-        #[fast_ffi]\n         pub fn LLVMSetValueName(Val: ValueRef, Name: *c_char);\n-        #[fast_ffi]\n         pub fn LLVMDumpValue(Val: ValueRef);\n-        #[fast_ffi]\n         pub fn LLVMReplaceAllUsesWith(OldVal: ValueRef, NewVal: ValueRef);\n-        #[fast_ffi]\n         pub fn LLVMHasMetadata(Val: ValueRef) -> c_int;\n-        #[fast_ffi]\n         pub fn LLVMGetMetadata(Val: ValueRef, KindID: c_uint) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMSetMetadata(Val: ValueRef, KindID: c_uint, Node: ValueRef);\n \n         /* Operations on Uses */\n-        #[fast_ffi]\n         pub fn LLVMGetFirstUse(Val: ValueRef) -> UseRef;\n-        #[fast_ffi]\n         pub fn LLVMGetNextUse(U: UseRef) -> UseRef;\n-        #[fast_ffi]\n         pub fn LLVMGetUser(U: UseRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetUsedValue(U: UseRef) -> ValueRef;\n \n         /* Operations on Users */\n-        #[fast_ffi]\n         pub fn LLVMGetNumOperands(Val: ValueRef) -> c_int;\n-        #[fast_ffi]\n         pub fn LLVMGetOperand(Val: ValueRef, Index: c_uint) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMSetOperand(Val: ValueRef, Index: c_uint, Op: ValueRef);\n \n         /* Operations on constants of any type */\n-        #[fast_ffi]\n         pub fn LLVMConstNull(Ty: TypeRef) -> ValueRef;\n         /* all zeroes */\n-        #[fast_ffi]\n         pub fn LLVMConstAllOnes(Ty: TypeRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstICmp(Pred: c_ushort, V1: ValueRef, V2: ValueRef)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstFCmp(Pred: c_ushort, V1: ValueRef, V2: ValueRef)\n                              -> ValueRef;\n         /* only for int/vector */\n-        #[fast_ffi]\n         pub fn LLVMGetUndef(Ty: TypeRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMIsConstant(Val: ValueRef) -> Bool;\n-        #[fast_ffi]\n         pub fn LLVMIsNull(Val: ValueRef) -> Bool;\n-        #[fast_ffi]\n         pub fn LLVMIsUndef(Val: ValueRef) -> Bool;\n-        #[fast_ffi]\n         pub fn LLVMConstPointerNull(Ty: TypeRef) -> ValueRef;\n \n         /* Operations on metadata */\n-        #[fast_ffi]\n         pub fn LLVMMDStringInContext(C: ContextRef,\n                                      Str: *c_char,\n                                      SLen: c_uint)\n                                      -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMMDNodeInContext(C: ContextRef,\n                                    Vals: *ValueRef,\n                                    Count: c_uint)\n                                    -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMAddNamedMetadataOperand(M: ModuleRef,\n                                            Str: *c_char,\n                                            Val: ValueRef);\n \n         /* Operations on scalar constants */\n-        #[fast_ffi]\n         pub fn LLVMConstInt(IntTy: TypeRef, N: c_ulonglong, SignExtend: Bool)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstIntOfString(IntTy: TypeRef, Text: *c_char, Radix: u8)\n                                     -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstIntOfStringAndSize(IntTy: TypeRef,\n                                            Text: *c_char,\n                                            SLen: c_uint,\n                                            Radix: u8)\n                                            -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstReal(RealTy: TypeRef, N: f64) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstRealOfString(RealTy: TypeRef, Text: *c_char)\n                                      -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstRealOfStringAndSize(RealTy: TypeRef,\n                                             Text: *c_char,\n                                             SLen: c_uint)\n                                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstIntGetZExtValue(ConstantVal: ValueRef) -> c_ulonglong;\n-        #[fast_ffi]\n         pub fn LLVMConstIntGetSExtValue(ConstantVal: ValueRef) -> c_longlong;\n \n \n         /* Operations on composite constants */\n-        #[fast_ffi]\n         pub fn LLVMConstStringInContext(C: ContextRef,\n                                         Str: *c_char,\n                                         Length: c_uint,\n                                         DontNullTerminate: Bool)\n                                         -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstStructInContext(C: ContextRef,\n                                         ConstantVals: *ValueRef,\n                                         Count: c_uint,\n                                         Packed: Bool)\n                                         -> ValueRef;\n \n-        #[fast_ffi]\n         pub fn LLVMConstArray(ElementTy: TypeRef,\n                               ConstantVals: *ValueRef,\n                               Length: c_uint)\n                               -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstVector(ScalarConstantVals: *ValueRef, Size: c_uint)\n                                -> ValueRef;\n \n         /* Constant expressions */\n-        #[fast_ffi]\n         pub fn LLVMAlignOf(Ty: TypeRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMSizeOf(Ty: TypeRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstNeg(ConstantVal: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstNSWNeg(ConstantVal: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstNUWNeg(ConstantVal: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstFNeg(ConstantVal: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstNot(ConstantVal: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstNSWAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstNUWAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstFAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstSub(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstNSWSub(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstNUWSub(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstFSub(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstMul(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstNSWMul(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstNUWMul(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstFMul(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstUDiv(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstSDiv(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstExactSDiv(LHSConstant: ValueRef,\n                                   RHSConstant: ValueRef)\n                                   -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstFDiv(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstURem(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstSRem(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstFRem(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstAnd(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstOr(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                            -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstXor(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstShl(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstLShr(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstAShr(LHSConstant: ValueRef, RHSConstant: ValueRef)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstGEP(ConstantVal: ValueRef,\n                             ConstantIndices: *ValueRef,\n                             NumIndices: c_uint)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstInBoundsGEP(ConstantVal: ValueRef,\n                                     ConstantIndices: *ValueRef,\n                                     NumIndices: c_uint)\n                                     -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstTrunc(ConstantVal: ValueRef, ToType: TypeRef)\n                               -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstSExt(ConstantVal: ValueRef, ToType: TypeRef)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstZExt(ConstantVal: ValueRef, ToType: TypeRef)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstFPTrunc(ConstantVal: ValueRef, ToType: TypeRef)\n                                 -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstFPExt(ConstantVal: ValueRef, ToType: TypeRef)\n                               -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstUIToFP(ConstantVal: ValueRef, ToType: TypeRef)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstSIToFP(ConstantVal: ValueRef, ToType: TypeRef)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstFPToUI(ConstantVal: ValueRef, ToType: TypeRef)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstFPToSI(ConstantVal: ValueRef, ToType: TypeRef)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstPtrToInt(ConstantVal: ValueRef, ToType: TypeRef)\n                                  -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstIntToPtr(ConstantVal: ValueRef, ToType: TypeRef)\n                                  -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstBitCast(ConstantVal: ValueRef, ToType: TypeRef)\n                                 -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstZExtOrBitCast(ConstantVal: ValueRef, ToType: TypeRef)\n                                       -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstSExtOrBitCast(ConstantVal: ValueRef, ToType: TypeRef)\n                                       -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstTruncOrBitCast(ConstantVal: ValueRef, ToType: TypeRef)\n                                        -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstPointerCast(ConstantVal: ValueRef, ToType: TypeRef)\n                                     -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstIntCast(ConstantVal: ValueRef,\n                                 ToType: TypeRef,\n                                 isSigned: Bool)\n                                 -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstFPCast(ConstantVal: ValueRef, ToType: TypeRef)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstSelect(ConstantCondition: ValueRef,\n                                ConstantIfTrue: ValueRef,\n                                ConstantIfFalse: ValueRef)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstExtractElement(VectorConstant: ValueRef,\n                                        IndexConstant: ValueRef)\n                                        -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstInsertElement(VectorConstant: ValueRef,\n                                       ElementValueConstant: ValueRef,\n                                       IndexConstant: ValueRef)\n                                       -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstShuffleVector(VectorAConstant: ValueRef,\n                                       VectorBConstant: ValueRef,\n                                       MaskConstant: ValueRef)\n                                       -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstExtractValue(AggConstant: ValueRef,\n                                      IdxList: *c_uint,\n                                      NumIdx: c_uint)\n                                      -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstInsertValue(AggConstant: ValueRef,\n                                     ElementValueConstant: ValueRef,\n                                     IdxList: *c_uint,\n                                     NumIdx: c_uint)\n                                     -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMConstInlineAsm(Ty: TypeRef,\n                                   AsmString: *c_char,\n                                   Constraints: *c_char,\n                                   HasSideEffects: Bool,\n                                   IsAlignStack: Bool)\n                                   -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBlockAddress(F: ValueRef, BB: BasicBlockRef) -> ValueRef;\n \n \n \n         /* Operations on global variables, functions, and aliases (globals) */\n-        #[fast_ffi]\n         pub fn LLVMGetGlobalParent(Global: ValueRef) -> ModuleRef;\n-        #[fast_ffi]\n         pub fn LLVMIsDeclaration(Global: ValueRef) -> Bool;\n-        #[fast_ffi]\n         pub fn LLVMGetLinkage(Global: ValueRef) -> c_uint;\n-        #[fast_ffi]\n         pub fn LLVMSetLinkage(Global: ValueRef, Link: c_uint);\n-        #[fast_ffi]\n         pub fn LLVMGetSection(Global: ValueRef) -> *c_char;\n-        #[fast_ffi]\n         pub fn LLVMSetSection(Global: ValueRef, Section: *c_char);\n-        #[fast_ffi]\n         pub fn LLVMGetVisibility(Global: ValueRef) -> c_uint;\n-        #[fast_ffi]\n         pub fn LLVMSetVisibility(Global: ValueRef, Viz: c_uint);\n-        #[fast_ffi]\n         pub fn LLVMGetAlignment(Global: ValueRef) -> c_uint;\n-        #[fast_ffi]\n         pub fn LLVMSetAlignment(Global: ValueRef, Bytes: c_uint);\n \n \n         /* Operations on global variables */\n-        #[fast_ffi]\n         pub fn LLVMAddGlobal(M: ModuleRef, Ty: TypeRef, Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMAddGlobalInAddressSpace(M: ModuleRef,\n                                            Ty: TypeRef,\n                                            Name: *c_char,\n                                            AddressSpace: c_uint)\n                                            -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetNamedGlobal(M: ModuleRef, Name: *c_char) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetFirstGlobal(M: ModuleRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetLastGlobal(M: ModuleRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetNextGlobal(GlobalVar: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetPreviousGlobal(GlobalVar: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMDeleteGlobal(GlobalVar: ValueRef);\n-        #[fast_ffi]\n         pub fn LLVMGetInitializer(GlobalVar: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMSetInitializer(GlobalVar: ValueRef,\n                                          ConstantVal: ValueRef);\n-        #[fast_ffi]\n         pub fn LLVMIsThreadLocal(GlobalVar: ValueRef) -> Bool;\n-        #[fast_ffi]\n         pub fn LLVMSetThreadLocal(GlobalVar: ValueRef, IsThreadLocal: Bool);\n-        #[fast_ffi]\n         pub fn LLVMIsGlobalConstant(GlobalVar: ValueRef) -> Bool;\n-        #[fast_ffi]\n         pub fn LLVMSetGlobalConstant(GlobalVar: ValueRef, IsConstant: Bool);\n \n         /* Operations on aliases */\n-        #[fast_ffi]\n         pub fn LLVMAddAlias(M: ModuleRef,\n                             Ty: TypeRef,\n                             Aliasee: ValueRef,\n                             Name: *c_char)\n                             -> ValueRef;\n \n         /* Operations on functions */\n-        #[fast_ffi]\n         pub fn LLVMAddFunction(M: ModuleRef,\n                                Name: *c_char,\n                                FunctionTy: TypeRef)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetNamedFunction(M: ModuleRef, Name: *c_char) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetFirstFunction(M: ModuleRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetLastFunction(M: ModuleRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetNextFunction(Fn: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetPreviousFunction(Fn: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMDeleteFunction(Fn: ValueRef);\n-        #[fast_ffi]\n         pub fn LLVMGetOrInsertFunction(M: ModuleRef,\n                                        Name: *c_char,\n                                        FunctionTy: TypeRef)\n                                        -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetIntrinsicID(Fn: ValueRef) -> c_uint;\n-        #[fast_ffi]\n         pub fn LLVMGetFunctionCallConv(Fn: ValueRef) -> c_uint;\n-        #[fast_ffi]\n         pub fn LLVMSetFunctionCallConv(Fn: ValueRef, CC: c_uint);\n-        #[fast_ffi]\n         pub fn LLVMGetGC(Fn: ValueRef) -> *c_char;\n-        #[fast_ffi]\n         pub fn LLVMSetGC(Fn: ValueRef, Name: *c_char);\n-        #[fast_ffi]\n         pub fn LLVMAddFunctionAttr(Fn: ValueRef, PA: c_uint);\n-        #[fast_ffi]\n         pub fn LLVMAddFunctionAttrString(Fn: ValueRef, Name: *c_char);\n-        #[fast_ffi]\n         pub fn LLVMGetFunctionAttr(Fn: ValueRef) -> c_ulonglong;\n \n-        #[fast_ffi]\n         pub fn LLVMAddReturnAttribute(Fn: ValueRef, PA: c_uint);\n-        #[fast_ffi]\n         pub fn LLVMRemoveReturnAttribute(Fn: ValueRef, PA: c_uint);\n \n-        #[fast_ffi]\n         pub fn LLVMRemoveFunctionAttr(Fn: ValueRef,\n                                       PA: c_ulonglong,\n                                       HighPA: c_ulonglong);\n \n         /* Operations on parameters */\n-        #[fast_ffi]\n         pub fn LLVMCountParams(Fn: ValueRef) -> c_uint;\n-        #[fast_ffi]\n         pub fn LLVMGetParams(Fn: ValueRef, Params: *ValueRef);\n-        #[fast_ffi]\n         pub fn LLVMGetParam(Fn: ValueRef, Index: c_uint) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetParamParent(Inst: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetFirstParam(Fn: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetLastParam(Fn: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetNextParam(Arg: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetPreviousParam(Arg: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMAddAttribute(Arg: ValueRef, PA: c_uint);\n-        #[fast_ffi]\n         pub fn LLVMRemoveAttribute(Arg: ValueRef, PA: c_uint);\n-        #[fast_ffi]\n         pub fn LLVMGetAttribute(Arg: ValueRef) -> c_uint;\n-        #[fast_ffi]\n         pub fn LLVMSetParamAlignment(Arg: ValueRef, align: c_uint);\n \n         /* Operations on basic blocks */\n-        #[fast_ffi]\n         pub fn LLVMBasicBlockAsValue(BB: BasicBlockRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMValueIsBasicBlock(Val: ValueRef) -> Bool;\n-        #[fast_ffi]\n         pub fn LLVMValueAsBasicBlock(Val: ValueRef) -> BasicBlockRef;\n-        #[fast_ffi]\n         pub fn LLVMGetBasicBlockParent(BB: BasicBlockRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMCountBasicBlocks(Fn: ValueRef) -> c_uint;\n-        #[fast_ffi]\n         pub fn LLVMGetBasicBlocks(Fn: ValueRef, BasicBlocks: *ValueRef);\n-        #[fast_ffi]\n         pub fn LLVMGetFirstBasicBlock(Fn: ValueRef) -> BasicBlockRef;\n-        #[fast_ffi]\n         pub fn LLVMGetLastBasicBlock(Fn: ValueRef) -> BasicBlockRef;\n-        #[fast_ffi]\n         pub fn LLVMGetNextBasicBlock(BB: BasicBlockRef) -> BasicBlockRef;\n-        #[fast_ffi]\n         pub fn LLVMGetPreviousBasicBlock(BB: BasicBlockRef) -> BasicBlockRef;\n-        #[fast_ffi]\n         pub fn LLVMGetEntryBasicBlock(Fn: ValueRef) -> BasicBlockRef;\n \n-        #[fast_ffi]\n         pub fn LLVMAppendBasicBlockInContext(C: ContextRef,\n                                              Fn: ValueRef,\n                                              Name: *c_char)\n                                              -> BasicBlockRef;\n-        #[fast_ffi]\n         pub fn LLVMInsertBasicBlockInContext(C: ContextRef,\n                                              BB: BasicBlockRef,\n                                              Name: *c_char)\n                                              -> BasicBlockRef;\n-        #[fast_ffi]\n         pub fn LLVMDeleteBasicBlock(BB: BasicBlockRef);\n \n-        #[fast_ffi]\n         pub fn LLVMMoveBasicBlockAfter(BB: BasicBlockRef,\n                                        MoveAfter: BasicBlockRef);\n \n-        #[fast_ffi]\n         pub fn LLVMMoveBasicBlockBefore(BB: BasicBlockRef,\n                                         MoveBefore: BasicBlockRef);\n \n         /* Operations on instructions */\n-        #[fast_ffi]\n         pub fn LLVMGetInstructionParent(Inst: ValueRef) -> BasicBlockRef;\n-        #[fast_ffi]\n         pub fn LLVMGetFirstInstruction(BB: BasicBlockRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetLastInstruction(BB: BasicBlockRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetNextInstruction(Inst: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetPreviousInstruction(Inst: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMInstructionEraseFromParent(Inst: ValueRef);\n \n         /* Operations on call sites */\n-        #[fast_ffi]\n         pub fn LLVMSetInstructionCallConv(Instr: ValueRef, CC: c_uint);\n-        #[fast_ffi]\n         pub fn LLVMGetInstructionCallConv(Instr: ValueRef) -> c_uint;\n-        #[fast_ffi]\n         pub fn LLVMAddInstrAttribute(Instr: ValueRef,\n                                      index: c_uint,\n                                      IA: c_uint);\n-        #[fast_ffi]\n         pub fn LLVMRemoveInstrAttribute(Instr: ValueRef,\n                                         index: c_uint,\n                                         IA: c_uint);\n-        #[fast_ffi]\n         pub fn LLVMSetInstrParamAlignment(Instr: ValueRef,\n                                           index: c_uint,\n                                           align: c_uint);\n \n         /* Operations on call instructions (only) */\n-        #[fast_ffi]\n         pub fn LLVMIsTailCall(CallInst: ValueRef) -> Bool;\n-        #[fast_ffi]\n         pub fn LLVMSetTailCall(CallInst: ValueRef, IsTailCall: Bool);\n \n         /* Operations on phi nodes */\n-        #[fast_ffi]\n         pub fn LLVMAddIncoming(PhiNode: ValueRef,\n                                IncomingValues: *ValueRef,\n                                IncomingBlocks: *BasicBlockRef,\n                                Count: c_uint);\n-        #[fast_ffi]\n         pub fn LLVMCountIncoming(PhiNode: ValueRef) -> c_uint;\n-        #[fast_ffi]\n         pub fn LLVMGetIncomingValue(PhiNode: ValueRef, Index: c_uint)\n                                     -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMGetIncomingBlock(PhiNode: ValueRef, Index: c_uint)\n                                     -> BasicBlockRef;\n \n         /* Instruction builders */\n-        #[fast_ffi]\n         pub fn LLVMCreateBuilderInContext(C: ContextRef) -> BuilderRef;\n-        #[fast_ffi]\n         pub fn LLVMPositionBuilder(Builder: BuilderRef,\n                                    Block: BasicBlockRef,\n                                    Instr: ValueRef);\n-        #[fast_ffi]\n         pub fn LLVMPositionBuilderBefore(Builder: BuilderRef,\n                                          Instr: ValueRef);\n-        #[fast_ffi]\n         pub fn LLVMPositionBuilderAtEnd(Builder: BuilderRef,\n                                         Block: BasicBlockRef);\n-        #[fast_ffi]\n         pub fn LLVMGetInsertBlock(Builder: BuilderRef) -> BasicBlockRef;\n-        #[fast_ffi]\n         pub fn LLVMClearInsertionPosition(Builder: BuilderRef);\n-        #[fast_ffi]\n         pub fn LLVMInsertIntoBuilder(Builder: BuilderRef, Instr: ValueRef);\n-        #[fast_ffi]\n         pub fn LLVMInsertIntoBuilderWithName(Builder: BuilderRef,\n                                              Instr: ValueRef,\n                                              Name: *c_char);\n-        #[fast_ffi]\n         pub fn LLVMDisposeBuilder(Builder: BuilderRef);\n-        #[fast_ffi]\n         pub fn LLVMDisposeExecutionEngine(EE: ExecutionEngineRef);\n \n         /* Metadata */\n-        #[fast_ffi]\n         pub fn LLVMSetCurrentDebugLocation(Builder: BuilderRef, L: ValueRef);\n-        #[fast_ffi]\n         pub fn LLVMGetCurrentDebugLocation(Builder: BuilderRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMSetInstDebugLocation(Builder: BuilderRef, Inst: ValueRef);\n \n         /* Terminators */\n-        #[fast_ffi]\n         pub fn LLVMBuildRetVoid(B: BuilderRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildRet(B: BuilderRef, V: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildAggregateRet(B: BuilderRef,\n                                      RetVals: *ValueRef,\n                                      N: c_uint)\n                                      -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildBr(B: BuilderRef, Dest: BasicBlockRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildCondBr(B: BuilderRef,\n                                If: ValueRef,\n                                Then: BasicBlockRef,\n                                Else: BasicBlockRef)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildSwitch(B: BuilderRef,\n                                V: ValueRef,\n                                Else: BasicBlockRef,\n                                NumCases: c_uint)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildIndirectBr(B: BuilderRef,\n                                    Addr: ValueRef,\n                                    NumDests: c_uint)\n                                    -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildInvoke(B: BuilderRef,\n                                Fn: ValueRef,\n                                Args: *ValueRef,\n@@ -1083,397 +829,326 @@ pub mod llvm {\n                                Catch: BasicBlockRef,\n                                Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildLandingPad(B: BuilderRef,\n                                    Ty: TypeRef,\n                                    PersFn: ValueRef,\n                                    NumClauses: c_uint,\n                                    Name: *c_char)\n                                    -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildResume(B: BuilderRef, Exn: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildUnreachable(B: BuilderRef) -> ValueRef;\n \n         /* Add a case to the switch instruction */\n-        #[fast_ffi]\n         pub fn LLVMAddCase(Switch: ValueRef,\n                            OnVal: ValueRef,\n                            Dest: BasicBlockRef);\n \n         /* Add a destination to the indirectbr instruction */\n-        #[fast_ffi]\n         pub fn LLVMAddDestination(IndirectBr: ValueRef, Dest: BasicBlockRef);\n \n         /* Add a clause to the landing pad instruction */\n-        #[fast_ffi]\n         pub fn LLVMAddClause(LandingPad: ValueRef, ClauseVal: ValueRef);\n \n         /* Set the cleanup on a landing pad instruction */\n-        #[fast_ffi]\n         pub fn LLVMSetCleanup(LandingPad: ValueRef, Val: Bool);\n \n         /* Arithmetic */\n-        #[fast_ffi]\n         pub fn LLVMBuildAdd(B: BuilderRef,\n                             LHS: ValueRef,\n                             RHS: ValueRef,\n                             Name: *c_char)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildNSWAdd(B: BuilderRef,\n                                LHS: ValueRef,\n                                RHS: ValueRef,\n                                Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildNUWAdd(B: BuilderRef,\n                                LHS: ValueRef,\n                                RHS: ValueRef,\n                                Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildFAdd(B: BuilderRef,\n                              LHS: ValueRef,\n                              RHS: ValueRef,\n                              Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildSub(B: BuilderRef,\n                             LHS: ValueRef,\n                             RHS: ValueRef,\n                             Name: *c_char)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildNSWSub(B: BuilderRef,\n                                LHS: ValueRef,\n                                RHS: ValueRef,\n                                Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildNUWSub(B: BuilderRef,\n                                LHS: ValueRef,\n                                RHS: ValueRef,\n                                Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildFSub(B: BuilderRef,\n                              LHS: ValueRef,\n                              RHS: ValueRef,\n                              Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildMul(B: BuilderRef,\n                             LHS: ValueRef,\n                             RHS: ValueRef,\n                             Name: *c_char)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildNSWMul(B: BuilderRef,\n                                LHS: ValueRef,\n                                RHS: ValueRef,\n                                Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildNUWMul(B: BuilderRef,\n                                LHS: ValueRef,\n                                RHS: ValueRef,\n                                Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildFMul(B: BuilderRef,\n                              LHS: ValueRef,\n                              RHS: ValueRef,\n                              Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildUDiv(B: BuilderRef,\n                              LHS: ValueRef,\n                              RHS: ValueRef,\n                              Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildSDiv(B: BuilderRef,\n                              LHS: ValueRef,\n                              RHS: ValueRef,\n                              Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildExactSDiv(B: BuilderRef,\n                                   LHS: ValueRef,\n                                   RHS: ValueRef,\n                                   Name: *c_char)\n                                   -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildFDiv(B: BuilderRef,\n                              LHS: ValueRef,\n                              RHS: ValueRef,\n                              Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildURem(B: BuilderRef,\n                              LHS: ValueRef,\n                              RHS: ValueRef,\n                              Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildSRem(B: BuilderRef,\n                              LHS: ValueRef,\n                              RHS: ValueRef,\n                              Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildFRem(B: BuilderRef,\n                              LHS: ValueRef,\n                              RHS: ValueRef,\n                              Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildShl(B: BuilderRef,\n                             LHS: ValueRef,\n                             RHS: ValueRef,\n                             Name: *c_char)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildLShr(B: BuilderRef,\n                              LHS: ValueRef,\n                              RHS: ValueRef,\n                              Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildAShr(B: BuilderRef,\n                              LHS: ValueRef,\n                              RHS: ValueRef,\n                              Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildAnd(B: BuilderRef,\n                             LHS: ValueRef,\n                             RHS: ValueRef,\n                             Name: *c_char)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildOr(B: BuilderRef,\n                            LHS: ValueRef,\n                            RHS: ValueRef,\n                            Name: *c_char)\n                            -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildXor(B: BuilderRef,\n                             LHS: ValueRef,\n                             RHS: ValueRef,\n                             Name: *c_char)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildBinOp(B: BuilderRef,\n                               Op: Opcode,\n                               LHS: ValueRef,\n                               RHS: ValueRef,\n                               Name: *c_char)\n                               -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildNeg(B: BuilderRef, V: ValueRef, Name: *c_char)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildNSWNeg(B: BuilderRef, V: ValueRef, Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildNUWNeg(B: BuilderRef, V: ValueRef, Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildFNeg(B: BuilderRef, V: ValueRef, Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildNot(B: BuilderRef, V: ValueRef, Name: *c_char)\n                             -> ValueRef;\n \n         /* Memory */\n-        #[fast_ffi]\n         pub fn LLVMBuildMalloc(B: BuilderRef, Ty: TypeRef, Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildArrayMalloc(B: BuilderRef,\n                                     Ty: TypeRef,\n                                     Val: ValueRef,\n                                     Name: *c_char)\n                                     -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildAlloca(B: BuilderRef, Ty: TypeRef, Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildArrayAlloca(B: BuilderRef,\n                                     Ty: TypeRef,\n                                     Val: ValueRef,\n                                     Name: *c_char)\n                                     -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildFree(B: BuilderRef, PointerVal: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildLoad(B: BuilderRef,\n                              PointerVal: ValueRef,\n                              Name: *c_char)\n                              -> ValueRef;\n \n-        #[fast_ffi]\n         pub fn LLVMBuildStore(B: BuilderRef, Val: ValueRef, Ptr: ValueRef)\n                               -> ValueRef;\n \n-        #[fast_ffi]\n         pub fn LLVMBuildGEP(B: BuilderRef,\n                             Pointer: ValueRef,\n                             Indices: *ValueRef,\n                             NumIndices: c_uint,\n                             Name: *c_char)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildInBoundsGEP(B: BuilderRef,\n                                     Pointer: ValueRef,\n                                     Indices: *ValueRef,\n                                     NumIndices: c_uint,\n                                     Name: *c_char)\n                                     -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildStructGEP(B: BuilderRef,\n                                   Pointer: ValueRef,\n                                   Idx: c_uint,\n                                   Name: *c_char)\n                                   -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildGlobalString(B: BuilderRef,\n                                      Str: *c_char,\n                                      Name: *c_char)\n                                      -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildGlobalStringPtr(B: BuilderRef,\n                                         Str: *c_char,\n                                         Name: *c_char)\n                                         -> ValueRef;\n \n         /* Casts */\n-        #[fast_ffi]\n         pub fn LLVMBuildTrunc(B: BuilderRef,\n                               Val: ValueRef,\n                               DestTy: TypeRef,\n                               Name: *c_char)\n                               -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildZExt(B: BuilderRef,\n                              Val: ValueRef,\n                              DestTy: TypeRef,\n                              Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildSExt(B: BuilderRef,\n                              Val: ValueRef,\n                              DestTy: TypeRef,\n                              Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildFPToUI(B: BuilderRef,\n                                Val: ValueRef,\n                                DestTy: TypeRef,\n                                Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildFPToSI(B: BuilderRef,\n                                Val: ValueRef,\n                                DestTy: TypeRef,\n                                Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildUIToFP(B: BuilderRef,\n                                Val: ValueRef,\n                                DestTy: TypeRef,\n                                Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildSIToFP(B: BuilderRef,\n                                Val: ValueRef,\n                                DestTy: TypeRef,\n                                Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildFPTrunc(B: BuilderRef,\n                                 Val: ValueRef,\n                                 DestTy: TypeRef,\n                                 Name: *c_char)\n                                 -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildFPExt(B: BuilderRef,\n                               Val: ValueRef,\n                               DestTy: TypeRef,\n                               Name: *c_char)\n                               -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildPtrToInt(B: BuilderRef,\n                                  Val: ValueRef,\n                                  DestTy: TypeRef,\n                                  Name: *c_char)\n                                  -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildIntToPtr(B: BuilderRef,\n                                  Val: ValueRef,\n                                  DestTy: TypeRef,\n                                  Name: *c_char)\n                                  -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildBitCast(B: BuilderRef,\n                                 Val: ValueRef,\n                                 DestTy: TypeRef,\n                                 Name: *c_char)\n                                 -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildZExtOrBitCast(B: BuilderRef,\n                                       Val: ValueRef,\n                                       DestTy: TypeRef,\n                                       Name: *c_char)\n                                       -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildSExtOrBitCast(B: BuilderRef,\n                                       Val: ValueRef,\n                                       DestTy: TypeRef,\n                                       Name: *c_char)\n                                       -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildTruncOrBitCast(B: BuilderRef,\n                                        Val: ValueRef,\n                                        DestTy: TypeRef,\n                                        Name: *c_char)\n                                        -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildCast(B: BuilderRef,\n                              Op: Opcode,\n                              Val: ValueRef,\n                              DestTy: TypeRef,\n                              Name: *c_char) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildPointerCast(B: BuilderRef,\n                                     Val: ValueRef,\n                                     DestTy: TypeRef,\n                                     Name: *c_char)\n                                     -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildIntCast(B: BuilderRef,\n                                 Val: ValueRef,\n                                 DestTy: TypeRef,\n                                 Name: *c_char)\n                                 -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildFPCast(B: BuilderRef,\n                                Val: ValueRef,\n                                DestTy: TypeRef,\n                                Name: *c_char)\n                                -> ValueRef;\n \n         /* Comparisons */\n-        #[fast_ffi]\n         pub fn LLVMBuildICmp(B: BuilderRef,\n                              Op: c_uint,\n                              LHS: ValueRef,\n                              RHS: ValueRef,\n                              Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildFCmp(B: BuilderRef,\n                              Op: c_uint,\n                              LHS: ValueRef,\n@@ -1482,70 +1157,58 @@ pub mod llvm {\n                              -> ValueRef;\n \n         /* Miscellaneous instructions */\n-        #[fast_ffi]\n         pub fn LLVMBuildPhi(B: BuilderRef, Ty: TypeRef, Name: *c_char)\n                             -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildCall(B: BuilderRef,\n                              Fn: ValueRef,\n                              Args: *ValueRef,\n                              NumArgs: c_uint,\n                              Name: *c_char)\n                              -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildSelect(B: BuilderRef,\n                                If: ValueRef,\n                                Then: ValueRef,\n                                Else: ValueRef,\n                                Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildVAArg(B: BuilderRef,\n                               list: ValueRef,\n                               Ty: TypeRef,\n                               Name: *c_char)\n                               -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildExtractElement(B: BuilderRef,\n                                        VecVal: ValueRef,\n                                        Index: ValueRef,\n                                        Name: *c_char)\n                                        -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildInsertElement(B: BuilderRef,\n                                       VecVal: ValueRef,\n                                       EltVal: ValueRef,\n                                       Index: ValueRef,\n                                       Name: *c_char)\n                                       -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildShuffleVector(B: BuilderRef,\n                                       V1: ValueRef,\n                                       V2: ValueRef,\n                                       Mask: ValueRef,\n                                       Name: *c_char)\n                                       -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildExtractValue(B: BuilderRef,\n                                      AggVal: ValueRef,\n                                      Index: c_uint,\n                                      Name: *c_char)\n                                      -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildInsertValue(B: BuilderRef,\n                                     AggVal: ValueRef,\n                                     EltVal: ValueRef,\n                                     Index: c_uint,\n                                     Name: *c_char)\n                                     -> ValueRef;\n \n-        #[fast_ffi]\n         pub fn LLVMBuildIsNull(B: BuilderRef, Val: ValueRef, Name: *c_char)\n                                -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildIsNotNull(B: BuilderRef, Val: ValueRef, Name: *c_char)\n                                   -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMBuildPtrDiff(B: BuilderRef,\n                                 LHS: ValueRef,\n                                 RHS: ValueRef,\n@@ -1585,49 +1248,38 @@ pub mod llvm {\n \n \n         /* Selected entries from the downcasts. */\n-        #[fast_ffi]\n         pub fn LLVMIsATerminatorInst(Inst: ValueRef) -> ValueRef;\n-        #[fast_ffi]\n         pub fn LLVMIsAStoreInst(Inst: ValueRef) -> ValueRef;\n \n         /** Writes a module to the specified path. Returns 0 on success. */\n-        #[fast_ffi]\n         pub fn LLVMWriteBitcodeToFile(M: ModuleRef, Path: *c_char) -> c_int;\n \n         /** Creates target data from a target layout string. */\n-        #[fast_ffi]\n         pub fn LLVMCreateTargetData(StringRep: *c_char) -> TargetDataRef;\n         /// Adds the target data to the given pass manager. The pass manager\n         /// references the target data only weakly.\n-        #[fast_ffi]\n         pub fn LLVMAddTargetData(TD: TargetDataRef, PM: PassManagerRef);\n         /** Number of bytes clobbered when doing a Store to *T. */\n-        #[fast_ffi]\n         pub fn LLVMStoreSizeOfType(TD: TargetDataRef, Ty: TypeRef)\n                                    -> c_ulonglong;\n \n         /** Number of bytes clobbered when doing a Store to *T. */\n-        #[fast_ffi]\n         pub fn LLVMSizeOfTypeInBits(TD: TargetDataRef, Ty: TypeRef)\n                                     -> c_ulonglong;\n \n         /** Distance between successive elements in an array of T.\n         Includes ABI padding. */\n-        #[fast_ffi]\n         pub fn LLVMABISizeOfType(TD: TargetDataRef, Ty: TypeRef) -> c_uint;\n \n         /** Returns the preferred alignment of a type. */\n-        #[fast_ffi]\n         pub fn LLVMPreferredAlignmentOfType(TD: TargetDataRef, Ty: TypeRef)\n                                             -> c_uint;\n         /** Returns the minimum alignment of a type. */\n-        #[fast_ffi]\n         pub fn LLVMABIAlignmentOfType(TD: TargetDataRef, Ty: TypeRef)\n                                       -> c_uint;\n \n         /// Computes the byte offset of the indexed struct element for a\n         /// target.\n-        #[fast_ffi]\n         pub fn LLVMOffsetOfElement(TD: TargetDataRef,\n                                    StructTy: TypeRef,\n                                    Element: c_uint)\n@@ -1636,251 +1288,173 @@ pub mod llvm {\n         /**\n          * Returns the minimum alignment of a type when part of a call frame.\n          */\n-        #[fast_ffi]\n         pub fn LLVMCallFrameAlignmentOfType(TD: TargetDataRef, Ty: TypeRef)\n                                             -> c_uint;\n \n         /** Disposes target data. */\n-        #[fast_ffi]\n         pub fn LLVMDisposeTargetData(TD: TargetDataRef);\n \n         /** Creates a pass manager. */\n-        #[fast_ffi]\n         pub fn LLVMCreatePassManager() -> PassManagerRef;\n \n         /** Creates a function-by-function pass manager */\n-        #[fast_ffi]\n         pub fn LLVMCreateFunctionPassManagerForModule(M: ModuleRef)\n                                                       -> PassManagerRef;\n \n         /** Disposes a pass manager. */\n-        #[fast_ffi]\n         pub fn LLVMDisposePassManager(PM: PassManagerRef);\n \n         /** Runs a pass manager on a module. */\n-        #[fast_ffi]\n         pub fn LLVMRunPassManager(PM: PassManagerRef, M: ModuleRef) -> Bool;\n \n         /** Runs the function passes on the provided function. */\n-        #[fast_ffi]\n         pub fn LLVMRunFunctionPassManager(FPM: PassManagerRef, F: ValueRef)\n                                           -> Bool;\n \n         /** Initializes all the function passes scheduled in the manager */\n-        #[fast_ffi]\n         pub fn LLVMInitializeFunctionPassManager(FPM: PassManagerRef) -> Bool;\n \n         /** Finalizes all the function passes scheduled in the manager */\n-        #[fast_ffi]\n         pub fn LLVMFinalizeFunctionPassManager(FPM: PassManagerRef) -> Bool;\n \n-        #[fast_ffi]\n         pub fn LLVMInitializePasses();\n \n         /** Adds a verification pass. */\n-        #[fast_ffi]\n         pub fn LLVMAddVerifierPass(PM: PassManagerRef);\n \n-        #[fast_ffi]\n         pub fn LLVMAddGlobalOptimizerPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddIPSCCPPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddDeadArgEliminationPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddInstructionCombiningPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddCFGSimplificationPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddFunctionInliningPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddFunctionAttrsPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddScalarReplAggregatesPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddScalarReplAggregatesPassSSA(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddJumpThreadingPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddConstantPropagationPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddReassociatePass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddLoopRotatePass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddLICMPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddLoopUnswitchPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddLoopDeletionPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddLoopUnrollPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddGVNPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddMemCpyOptPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddSCCPPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddDeadStoreEliminationPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddStripDeadPrototypesPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddConstantMergePass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddArgumentPromotionPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddTailCallEliminationPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddIndVarSimplifyPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddAggressiveDCEPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddGlobalDCEPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddCorrelatedValuePropagationPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddPruneEHPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddSimplifyLibCallsPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddLoopIdiomPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddEarlyCSEPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddTypeBasedAliasAnalysisPass(PM: PassManagerRef);\n-        #[fast_ffi]\n         pub fn LLVMAddBasicAliasAnalysisPass(PM: PassManagerRef);\n \n-        #[fast_ffi]\n         pub fn LLVMPassManagerBuilderCreate() -> PassManagerBuilderRef;\n-        #[fast_ffi]\n         pub fn LLVMPassManagerBuilderDispose(PMB: PassManagerBuilderRef);\n-        #[fast_ffi]\n         pub fn LLVMPassManagerBuilderSetOptLevel(PMB: PassManagerBuilderRef,\n                                                  OptimizationLevel: c_uint);\n-        #[fast_ffi]\n         pub fn LLVMPassManagerBuilderSetSizeLevel(PMB: PassManagerBuilderRef,\n                                                   Value: Bool);\n-        #[fast_ffi]\n         pub fn LLVMPassManagerBuilderSetDisableUnitAtATime(\n             PMB: PassManagerBuilderRef,\n             Value: Bool);\n-        #[fast_ffi]\n         pub fn LLVMPassManagerBuilderSetDisableUnrollLoops(\n             PMB: PassManagerBuilderRef,\n             Value: Bool);\n-        #[fast_ffi]\n         pub fn LLVMPassManagerBuilderSetDisableSimplifyLibCalls(\n             PMB: PassManagerBuilderRef,\n             Value: Bool);\n-        #[fast_ffi]\n         pub fn LLVMPassManagerBuilderUseInlinerWithThreshold(\n             PMB: PassManagerBuilderRef,\n             threshold: c_uint);\n-        #[fast_ffi]\n         pub fn LLVMPassManagerBuilderPopulateModulePassManager(\n             PMB: PassManagerBuilderRef,\n             PM: PassManagerRef);\n \n-        #[fast_ffi]\n         pub fn LLVMPassManagerBuilderPopulateFunctionPassManager(\n             PMB: PassManagerBuilderRef,\n             PM: PassManagerRef);\n \n         /** Destroys a memory buffer. */\n-        #[fast_ffi]\n         pub fn LLVMDisposeMemoryBuffer(MemBuf: MemoryBufferRef);\n \n \n         /* Stuff that's in rustllvm/ because it's not upstream yet. */\n \n         /** Opens an object file. */\n-        #[fast_ffi]\n         pub fn LLVMCreateObjectFile(MemBuf: MemoryBufferRef) -> ObjectFileRef;\n         /** Closes an object file. */\n-        #[fast_ffi]\n         pub fn LLVMDisposeObjectFile(ObjFile: ObjectFileRef);\n \n         /** Enumerates the sections in an object file. */\n-        #[fast_ffi]\n         pub fn LLVMGetSections(ObjFile: ObjectFileRef) -> SectionIteratorRef;\n         /** Destroys a section iterator. */\n-        #[fast_ffi]\n         pub fn LLVMDisposeSectionIterator(SI: SectionIteratorRef);\n         /** Returns true if the section iterator is at the end of the section\n             list: */\n-        #[fast_ffi]\n         pub fn LLVMIsSectionIteratorAtEnd(ObjFile: ObjectFileRef,\n                                           SI: SectionIteratorRef)\n                                           -> Bool;\n         /** Moves the section iterator to point to the next section. */\n-        #[fast_ffi]\n         pub fn LLVMMoveToNextSection(SI: SectionIteratorRef);\n         /** Returns the current section name. */\n-        #[fast_ffi]\n         pub fn LLVMGetSectionName(SI: SectionIteratorRef) -> *c_char;\n         /** Returns the current section size. */\n-        #[fast_ffi]\n         pub fn LLVMGetSectionSize(SI: SectionIteratorRef) -> c_ulonglong;\n         /** Returns the current section contents as a string buffer. */\n-        #[fast_ffi]\n         pub fn LLVMGetSectionContents(SI: SectionIteratorRef) -> *c_char;\n \n         /** Reads the given file and returns it as a memory buffer. Use\n             LLVMDisposeMemoryBuffer() to get rid of it. */\n-        #[fast_ffi]\n         pub fn LLVMRustCreateMemoryBufferWithContentsOfFile(Path: *c_char)\n             -> MemoryBufferRef;\n \n         /** Returns a string describing the last error caused by an LLVMRust*\n             call. */\n-        #[fast_ffi]\n         pub fn LLVMRustGetLastError() -> *c_char;\n \n         /** Prepare the JIT. Returns a memory manager that can load crates. */\n-        #[fast_ffi]\n         pub fn LLVMRustPrepareJIT(__morestack: *()) -> *();\n \n         /** Load a crate into the memory manager. */\n-        #[fast_ffi]\n         pub fn LLVMRustLoadCrate(MM: *(), Filename: *c_char) -> bool;\n \n         /** Execute the JIT engine. */\n-        #[fast_ffi]\n         pub fn LLVMRustBuildJIT(MM: *(),\n                                 M: ModuleRef,\n                                 EnableSegmentedStacks: bool)\n                                 -> ExecutionEngineRef;\n \n         /// Print the pass timings since static dtors aren't picking them up.\n-        #[fast_ffi]\n         pub fn LLVMRustPrintPassTimings();\n \n-        #[fast_ffi]\n         pub fn LLVMRustStartMultithreading() -> bool;\n \n-        #[fast_ffi]\n         pub fn LLVMStructCreateNamed(C: ContextRef, Name: *c_char) -> TypeRef;\n \n-        #[fast_ffi]\n         pub fn LLVMStructSetBody(StructTy: TypeRef,\n                                  ElementTypes: *TypeRef,\n                                  ElementCount: c_uint,\n                                  Packed: Bool);\n \n-        #[fast_ffi]\n         pub fn LLVMConstNamedStruct(S: TypeRef,\n                                     ConstantVals: *ValueRef,\n                                     Count: c_uint)\n                                     -> ValueRef;\n \n         /** Enables LLVM debug output. */\n-        #[fast_ffi]\n         pub fn LLVMSetDebug(Enabled: c_int);\n \n         /** Prepares inline assembly. */\n-        #[fast_ffi]\n         pub fn LLVMInlineAsm(Ty: TypeRef,\n                              AsmString: *c_char,\n                              Constraints: *c_char,\n@@ -1890,16 +1464,12 @@ pub mod llvm {\n                              -> ValueRef;\n \n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreate(M: ModuleRef) -> DIBuilderRef;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderDispose(Builder: DIBuilderRef);\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderFinalize(Builder: DIBuilderRef);\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateCompileUnit(Builder: DIBuilderRef,\n                                               Lang: c_uint,\n                                               File: *c_char,\n@@ -1910,19 +1480,16 @@ pub mod llvm {\n                                               RuntimeVer: c_uint,\n                                               SplitName: *c_char);\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateFile(Builder: DIBuilderRef,\n                                        Filename: *c_char,\n                                        Directory: *c_char)\n                                        -> DIFile;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateSubroutineType(Builder: DIBuilderRef,\n                                                  File: DIFile,\n                                                  ParameterTypes: DIArray)\n                                                  -> DICompositeType;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateFunction(Builder: DIBuilderRef,\n                                            Scope: DIDescriptor,\n                                            Name: *c_char,\n@@ -1940,23 +1507,20 @@ pub mod llvm {\n                                            Decl: ValueRef)\n                                            -> DISubprogram;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateBasicType(Builder: DIBuilderRef,\n                                             Name: *c_char,\n                                             SizeInBits: c_ulonglong,\n                                             AlignInBits: c_ulonglong,\n                                             Encoding: c_uint)\n                                             -> DIBasicType;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreatePointerType(Builder: DIBuilderRef,\n                                               PointeeTy: DIType,\n                                               SizeInBits: c_ulonglong,\n                                               AlignInBits: c_ulonglong,\n                                               Name: *c_char)\n                                               -> DIDerivedType;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateStructType(Builder: DIBuilderRef,\n                                              Scope: DIDescriptor,\n                                              Name: *c_char,\n@@ -1972,7 +1536,6 @@ pub mod llvm {\n                                              UniqueId: *c_char)\n                                              -> DICompositeType;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateMemberType(Builder: DIBuilderRef,\n                                              Scope: DIDescriptor,\n                                              Name: *c_char,\n@@ -1985,15 +1548,13 @@ pub mod llvm {\n                                              Ty: DIType)\n                                              -> DIDerivedType;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateLexicalBlock(Builder: DIBuilderRef,\n                                                Scope: DIDescriptor,\n                                                File: DIFile,\n                                                Line: c_uint,\n                                                Col: c_uint)\n                                                -> DILexicalBlock;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateLocalVariable(Builder: DIBuilderRef,\n                                                 Tag: c_uint,\n                                                 Scope: DIDescriptor,\n@@ -2006,55 +1567,47 @@ pub mod llvm {\n                                                 ArgNo: c_uint)\n                                                 -> DIVariable;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateArrayType(Builder: DIBuilderRef,\n                                             Size: c_ulonglong,\n                                             AlignInBits: c_ulonglong,\n                                             Ty: DIType,\n                                             Subscripts: DIArray)\n                                             -> DIType;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateVectorType(Builder: DIBuilderRef,\n                                              Size: c_ulonglong,\n                                              AlignInBits: c_ulonglong,\n                                              Ty: DIType,\n                                              Subscripts: DIArray)\n                                              -> DIType;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderGetOrCreateSubrange(Builder: DIBuilderRef,\n                                                 Lo: c_longlong,\n                                                 Count: c_longlong)\n                                                 -> DISubrange;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderGetOrCreateArray(Builder: DIBuilderRef,\n                                              Ptr: *DIDescriptor,\n                                              Count: c_uint)\n                                              -> DIArray;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderInsertDeclareAtEnd(Builder: DIBuilderRef,\n                                                Val: ValueRef,\n                                                VarInfo: DIVariable,\n                                                InsertAtEnd: BasicBlockRef)\n                                                -> ValueRef;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderInsertDeclareBefore(Builder: DIBuilderRef,\n                                                 Val: ValueRef,\n                                                 VarInfo: DIVariable,\n                                                 InsertBefore: ValueRef)\n                                                 -> ValueRef;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateEnumerator(Builder: DIBuilderRef,\n                                              Name: *c_char,\n                                              Val: c_ulonglong)\n                                              -> ValueRef;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateEnumerationType(Builder: DIBuilderRef,\n                                                   Scope: ValueRef,\n                                                   Name: *c_char,\n@@ -2066,7 +1619,6 @@ pub mod llvm {\n                                                   ClassType: ValueRef)\n                                                   -> ValueRef;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateUnionType(Builder: DIBuilderRef,\n                                             Scope: ValueRef,\n                                             Name: *c_char,\n@@ -2079,10 +1631,8 @@ pub mod llvm {\n                                             RunTimeLang: c_uint)\n                                             -> ValueRef;\n \n-        #[fast_ffi]\n         pub fn LLVMSetUnnamedAddr(GlobalVar: ValueRef, UnnamedAddr: Bool);\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateTemplateTypeParameter(Builder: DIBuilderRef,\n                                                         Scope: ValueRef,\n                                                         Name: *c_char,\n@@ -2092,13 +1642,10 @@ pub mod llvm {\n                                                         ColumnNo: c_uint)\n                                                         -> ValueRef;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateOpDeref(IntType: TypeRef) -> ValueRef;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateOpPlus(IntType: TypeRef) -> ValueRef;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateComplexVariable(Builder: DIBuilderRef,\n             Tag: c_uint,\n             Scope: ValueRef,\n@@ -2111,21 +1658,17 @@ pub mod llvm {\n             ArgNo: c_uint)\n             -> ValueRef;\n \n-        #[fast_ffi]\n         pub fn LLVMDIBuilderCreateNameSpace(Builder: DIBuilderRef,\n                                             Scope: ValueRef,\n                                             Name: *c_char,\n                                             File: ValueRef,\n                                             LineNo: c_uint)\n                                             -> ValueRef;\n \n-        #[fast_ffi]\n         pub fn LLVMDICompositeTypeSetTypeArray(CompositeType: ValueRef, TypeArray: ValueRef);\n \n-        #[fast_ffi]\n         pub fn LLVMIsAArgument(value_ref: ValueRef) -> ValueRef;\n \n-        #[fast_ffi]\n         pub fn LLVMIsAAllocaInst(value_ref: ValueRef) -> ValueRef;\n \n         pub fn LLVMInitializeX86TargetInfo();"}, {"sha": "5b56b15e60136aba69a621c73448f7dbefb2cda6", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/313052aeb25b3de4501a062c963916e3455efbf1/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313052aeb25b3de4501a062c963916e3455efbf1/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=313052aeb25b3de4501a062c963916e3455efbf1", "patch": "@@ -2708,12 +2708,9 @@ pub mod funcs {\n                 pub fn setbuf(stream: *FILE, buf: *c_char);\n                 // Omitted: printf and scanf variants.\n                 pub fn fgetc(stream: *FILE) -> c_int;\n-                #[fast_ffi]\n                 pub fn fgets(buf: *mut c_char, n: c_int, stream: *FILE)\n                              -> *c_char;\n-                #[fast_ffi]\n                 pub fn fputc(c: c_int, stream: *FILE) -> c_int;\n-                #[fast_ffi]\n                 pub fn fputs(s: *c_char, stream: *FILE) -> *c_char;\n                 // Omitted: getc, getchar (might be macros).\n \n@@ -2723,13 +2720,11 @@ pub mod funcs {\n                 // Omitted: putc, putchar (might be macros).\n                 pub fn puts(s: *c_char) -> c_int;\n                 pub fn ungetc(c: c_int, stream: *FILE) -> c_int;\n-                #[fast_ffi]\n                 pub fn fread(ptr: *mut c_void,\n                              size: size_t,\n                              nobj: size_t,\n                              stream: *FILE)\n                              -> size_t;\n-                #[fast_ffi]\n                 pub fn fwrite(ptr: *c_void,\n                               size: size_t,\n                               nobj: size_t,\n@@ -2766,13 +2761,9 @@ pub mod funcs {\n                               -> c_long;\n                 pub fn strtoul(s: *c_char, endp: **c_char, base: c_int)\n                                -> c_ulong;\n-                #[fast_ffi]\n                 pub fn calloc(nobj: size_t, size: size_t) -> *c_void;\n-                #[fast_ffi]\n                 pub fn malloc(size: size_t) -> *c_void;\n-                #[fast_ffi]\n                 pub fn realloc(p: *mut c_void, size: size_t) -> *mut c_void;\n-                #[fast_ffi]\n                 pub fn free(p: *c_void);\n                 pub fn abort() -> !;\n                 pub fn exit(status: c_int) -> !;\n@@ -2865,7 +2856,6 @@ pub mod funcs {\n                 #[link_name = \"_pclose\"]\n                 pub fn pclose(stream: *FILE) -> c_int;\n                 #[link_name = \"_fdopen\"]\n-                #[fast_ffi]\n                 pub fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n                 #[link_name = \"_fileno\"]\n                 pub fn fileno(stream: *FILE) -> c_int;\n@@ -2933,15 +2923,13 @@ pub mod funcs {\n                 pub fn pipe(fds: *mut c_int, psize: c_uint, textmode: c_int)\n                             -> c_int;\n                 #[link_name = \"_read\"]\n-                #[fast_ffi]\n                 pub fn read(fd: c_int, buf: *mut c_void, count: c_uint)\n                             -> c_int;\n                 #[link_name = \"_rmdir\"]\n                 pub fn rmdir(path: *c_char) -> c_int;\n                 #[link_name = \"_unlink\"]\n                 pub fn unlink(c: *c_char) -> c_int;\n                 #[link_name = \"_write\"]\n-                #[fast_ffi]\n                 pub fn write(fd: c_int, buf: *c_void, count: c_uint) -> c_int;\n             }\n         }\n@@ -3095,7 +3083,6 @@ pub mod funcs {\n                 pub fn pathconf(path: *c_char, name: c_int) -> c_long;\n                 pub fn pause() -> c_int;\n                 pub fn pipe(fds: *mut c_int) -> c_int;\n-                #[fast_ffi]\n                 pub fn read(fd: c_int, buf: *mut c_void, count: size_t)\n                             -> ssize_t;\n                 pub fn rmdir(path: *c_char) -> c_int;\n@@ -3108,7 +3095,6 @@ pub mod funcs {\n                 pub fn tcgetpgrp(fd: c_int) -> pid_t;\n                 pub fn ttyname(fd: c_int) -> *c_char;\n                 pub fn unlink(c: *c_char) -> c_int;\n-                #[fast_ffi]\n                 pub fn write(fd: c_int, buf: *c_void, count: size_t)\n                              -> ssize_t;\n             }"}, {"sha": "f863ccacaf5c93753b4a0f5848266bc8223d0727", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/313052aeb25b3de4501a062c963916e3455efbf1/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313052aeb25b3de4501a062c963916e3455efbf1/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=313052aeb25b3de4501a062c963916e3455efbf1", "patch": "@@ -107,25 +107,18 @@ pub fn live_allocs() -> *raw::Box<()> {\n }\n \n extern {\n-    #[fast_ffi]\n     fn rust_new_memory_region(detailed_leaks: uintptr_t,\n                                poison_on_free: uintptr_t) -> *MemoryRegion;\n-    #[fast_ffi]\n     fn rust_delete_memory_region(region: *MemoryRegion);\n-    #[fast_ffi]\n     fn rust_new_boxed_region(region: *MemoryRegion,\n                              poison_on_free: uintptr_t) -> *BoxedRegion;\n-    #[fast_ffi]\n     fn rust_delete_boxed_region(region: *BoxedRegion);\n-    #[fast_ffi]\n     fn rust_boxed_region_malloc(region: *BoxedRegion,\n                                 td: *TypeDesc,\n                                 size: size_t) -> *OpaqueBox;\n-    #[fast_ffi]\n     fn rust_boxed_region_realloc(region: *BoxedRegion,\n                                  ptr: *OpaqueBox,\n                                  size: size_t) -> *OpaqueBox;\n-    #[fast_ffi]\n     fn rust_boxed_region_free(region: *BoxedRegion, box: *OpaqueBox);\n }\n "}, {"sha": "26eabca2d9d1e53c6faf97a20c7ad5b851451828", "filename": "src/libstd/rt/thread_local_storage.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/313052aeb25b3de4501a062c963916e3455efbf1/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313052aeb25b3de4501a062c963916e3455efbf1/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread_local_storage.rs?ref=313052aeb25b3de4501a062c963916e3455efbf1", "patch": "@@ -52,11 +52,8 @@ type pthread_key_t = ::libc::c_uint;\n \n #[cfg(unix)]\n extern {\n-    #[fast_ffi]\n     fn pthread_key_create(key: *mut pthread_key_t, dtor: *u8) -> c_int;\n-    #[fast_ffi]\n     fn pthread_setspecific(key: pthread_key_t, value: *mut c_void) -> c_int;\n-    #[fast_ffi]\n     fn pthread_getspecific(key: pthread_key_t) -> *mut c_void;\n }\n "}, {"sha": "d56fb98cab033894d97a05ca9be366da8d73a31f", "filename": "src/test/bench/shootout-pidigits.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/313052aeb25b3de4501a062c963916e3455efbf1/src%2Ftest%2Fbench%2Fshootout-pidigits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313052aeb25b3de4501a062c963916e3455efbf1/src%2Ftest%2Fbench%2Fshootout-pidigits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pidigits.rs?ref=313052aeb25b3de4501a062c963916e3455efbf1", "patch": "@@ -24,31 +24,22 @@ impl mpz_t {\n \n #[link_args=\"-lgmp\"]\n extern {\n-    #[fast_ffi]\n     #[link_name=\"__gmpz_add\"]\n     fn mpz_add(x: *mpz_t, y: *mpz_t, z: *mpz_t);\n-    #[fast_ffi]\n     #[link_name=\"__gmpz_cmp\"]\n     fn mpz_cmp(x: *mpz_t, y: *mpz_t) -> c_int;\n-    #[fast_ffi]\n     #[link_name=\"__gmpz_fdiv_qr\"]\n     fn mpz_fdiv_qr(a: *mpz_t, b: *mpz_t, c: *mpz_t, d: *mpz_t);\n-    #[fast_ffi]\n     #[link_name=\"__gmpz_get_ui\"]\n     fn mpz_get_ui(x: *mpz_t) -> c_uint;\n-    #[fast_ffi]\n     #[link_name=\"__gmpz_init\"]\n     fn mpz_init(x: *mpz_t);\n-    #[fast_ffi]\n     #[link_name=\"__gmpz_init_set_ui\"]\n     fn mpz_init_set_ui(x: *mpz_t, y: c_uint);\n-    #[fast_ffi]\n     #[link_name=\"__gmpz_mul_2exp\"]\n     fn mpz_mul_2exp(x: *mpz_t, y: *mpz_t, z: c_uint);\n-    #[fast_ffi]\n     #[link_name=\"__gmpz_mul_ui\"]\n     fn mpz_mul_ui(x: *mpz_t, y: *mpz_t, z: c_uint);\n-    #[fast_ffi]\n     #[link_name=\"__gmpz_submul_ui\"]\n     fn mpz_submul_ui(x: *mpz_t, y: *mpz_t, z: c_uint);\n }"}]}