{"sha": "3730dfdaf58057466a2c576184c4647840daaeac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MzBkZmRhZjU4MDU3NDY2YTJjNTc2MTg0YzQ2NDc4NDBkYWFlYWM=", "commit": {"author": {"name": "Matthias Devlamynck", "email": "matthias@chaplean.coop", "date": "2017-09-26T09:43:33Z"}, "committer": {"name": "Matthias Devlamynck", "email": "matthias@chaplean.coop", "date": "2017-09-26T15:48:23Z"}, "message": "impl Trait in argument position desugaring:\n\nAdd a flag to hir and ty TypeParameterDef and raise an error when using\nexplicit type parameters when calling a function using impl Trait in\nargument position.", "tree": {"sha": "767a5e3a101c1faa044554fe748c80b433af4356", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/767a5e3a101c1faa044554fe748c80b433af4356"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3730dfdaf58057466a2c576184c4647840daaeac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3730dfdaf58057466a2c576184c4647840daaeac", "html_url": "https://github.com/rust-lang/rust/commit/3730dfdaf58057466a2c576184c4647840daaeac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3730dfdaf58057466a2c576184c4647840daaeac/comments", "author": {"login": "mdevlamynck", "id": 4378377, "node_id": "MDQ6VXNlcjQzNzgzNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4378377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdevlamynck", "html_url": "https://github.com/mdevlamynck", "followers_url": "https://api.github.com/users/mdevlamynck/followers", "following_url": "https://api.github.com/users/mdevlamynck/following{/other_user}", "gists_url": "https://api.github.com/users/mdevlamynck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdevlamynck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdevlamynck/subscriptions", "organizations_url": "https://api.github.com/users/mdevlamynck/orgs", "repos_url": "https://api.github.com/users/mdevlamynck/repos", "events_url": "https://api.github.com/users/mdevlamynck/events{/privacy}", "received_events_url": "https://api.github.com/users/mdevlamynck/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mdevlamynck", "id": 4378377, "node_id": "MDQ6VXNlcjQzNzgzNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4378377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdevlamynck", "html_url": "https://github.com/mdevlamynck", "followers_url": "https://api.github.com/users/mdevlamynck/followers", "following_url": "https://api.github.com/users/mdevlamynck/following{/other_user}", "gists_url": "https://api.github.com/users/mdevlamynck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdevlamynck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdevlamynck/subscriptions", "organizations_url": "https://api.github.com/users/mdevlamynck/orgs", "repos_url": "https://api.github.com/users/mdevlamynck/repos", "events_url": "https://api.github.com/users/mdevlamynck/events{/privacy}", "received_events_url": "https://api.github.com/users/mdevlamynck/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82ae9682ca3f41f982b881c377a12bb081fead93", "url": "https://api.github.com/repos/rust-lang/rust/commits/82ae9682ca3f41f982b881c377a12bb081fead93", "html_url": "https://github.com/rust-lang/rust/commit/82ae9682ca3f41f982b881c377a12bb081fead93"}], "stats": {"total": 104, "additions": 102, "deletions": 2}, "files": [{"sha": "769f1cbcb5d0a341ce443a53925aa0af1695d9e5", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3730dfdaf58057466a2c576184c4647840daaeac", "patch": "@@ -1103,6 +1103,10 @@ impl<'a> LoweringContext<'a> {\n             default: tp.default.as_ref().map(|x| self.lower_ty(x)),\n             span: tp.span,\n             pure_wrt_drop: tp.attrs.iter().any(|attr| attr.check_name(\"may_dangle\")),\n+            synthetic: tp.attrs.iter()\n+                               .filter(|attr| attr.check_name(\"rustc_synthetic\"))\n+                               .map(|_| hir::SyntheticTyParamKind::ImplTrait)\n+                               .nth(0),\n         }\n     }\n "}, {"sha": "9bfedd7a381cb72d16bfbfaab95e9c0077ff9004", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=3730dfdaf58057466a2c576184c4647840daaeac", "patch": "@@ -351,6 +351,7 @@ pub struct TyParam {\n     pub default: Option<P<Ty>>,\n     pub span: Span,\n     pub pure_wrt_drop: bool,\n+    pub synthetic: Option<SyntheticTyParamKind>,\n }\n \n /// Represents lifetimes and type parameters attached to a declaration\n@@ -419,6 +420,13 @@ impl Generics {\n     }\n }\n \n+/// Synthetic Type Parameters are converted to an other form during lowering, this allows\n+/// to track the original form they had. Usefull for error messages.\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum SyntheticTyParamKind {\n+    ImplTrait\n+}\n+\n /// A `where` clause in a definition\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereClause {"}, {"sha": "776f85cf5da96accb66543bb23c75e7b580f5d9c", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=3730dfdaf58057466a2c576184c4647840daaeac", "patch": "@@ -177,7 +177,8 @@ impl_stable_hash_for!(struct hir::TyParam {\n     bounds,\n     default,\n     span,\n-    pure_wrt_drop\n+    pure_wrt_drop,\n+    synthetic\n });\n \n impl_stable_hash_for!(struct hir::Generics {\n@@ -187,6 +188,10 @@ impl_stable_hash_for!(struct hir::Generics {\n     span\n });\n \n+impl_stable_hash_for!(enum hir::SyntheticTyParamKind {\n+    ImplTrait\n+});\n+\n impl_stable_hash_for!(struct hir::WhereClause {\n     id,\n     predicates"}, {"sha": "fe060aaf4269e5ce6f55525d2bc16a3b8c866866", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=3730dfdaf58057466a2c576184c4647840daaeac", "patch": "@@ -463,7 +463,8 @@ impl_stable_hash_for!(struct ty::TypeParameterDef {\n     index,\n     has_default,\n     object_lifetime_default,\n-    pure_wrt_drop\n+    pure_wrt_drop,\n+    synthetic\n });\n \n impl<'gcx, T> HashStable<StableHashingContext<'gcx>>"}, {"sha": "da635ec80fc91081d5405b4a2fa919ce0fc94f28", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3730dfdaf58057466a2c576184c4647840daaeac", "patch": "@@ -675,6 +675,8 @@ pub struct TypeParameterDef {\n     /// on generic parameter `T`, asserts data behind the parameter\n     /// `T` won't be accessed during the parent type's `Drop` impl.\n     pub pure_wrt_drop: bool,\n+\n+    pub synthetic: Option<hir::SyntheticTyParamKind>,\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]"}, {"sha": "a06f7b7f63b6dcb1b13355e15e9971c787e797a3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3730dfdaf58057466a2c576184c4647840daaeac", "patch": "@@ -4647,6 +4647,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // a problem.\n         self.check_path_parameter_count(span, &mut type_segment, false);\n         self.check_path_parameter_count(span, &mut fn_segment, false);\n+        self.check_impl_trait(span, &mut fn_segment);\n \n         let (fn_start, has_self) = match (type_segment, fn_segment) {\n             (_, Some((_, generics))) => {\n@@ -4871,6 +4872,36 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// Report error if there is an explicit type parameter when using `impl Trait`.\n+    fn check_impl_trait(&self,\n+                        span: Span,\n+                        segment: &mut Option<(&hir::PathSegment, &ty::Generics)>) {\n+        use hir::SyntheticTyParamKind::*;\n+\n+        segment.map(|(path_segment, generics)| {\n+            let explicit = !path_segment.infer_types;\n+            let impl_trait = generics.types.iter()\n+                                           .any(|ty_param| {\n+                                               match ty_param.synthetic {\n+                                                   Some(ImplTrait) => true,\n+                                                   _ => false,\n+                                               }\n+                                           });\n+\n+            if explicit && impl_trait {\n+                let mut err = struct_span_err! {\n+                    self.tcx.sess,\n+                    span,\n+                    E0631,\n+                    \"cannot provide explicit type parameters when `impl Trait` is \\\n+                    used in argument position.\"\n+                };\n+\n+                err.emit();\n+            }\n+        });\n+    }\n+\n     fn structurally_resolve_type_or_else<F>(&self, sp: Span, ty: Ty<'tcx>, f: F)\n                                             -> Ty<'tcx>\n         where F: Fn() -> Ty<'tcx>"}, {"sha": "229a1084b0c1fea26a45ef2fdd81836dfb325295", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3730dfdaf58057466a2c576184c4647840daaeac", "patch": "@@ -922,6 +922,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         has_default: false,\n                         object_lifetime_default: rl::Set1::Empty,\n                         pure_wrt_drop: false,\n+                        synthetic: None,\n                     });\n \n                     allow_defaults = true;\n@@ -993,6 +994,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             object_lifetime_default:\n                 object_lifetime_defaults.as_ref().map_or(rl::Set1::Empty, |o| o[i]),\n             pure_wrt_drop: p.pure_wrt_drop,\n+            synthetic: p.synthetic,\n         }\n     });\n     let mut types: Vec<_> = opt_self.into_iter().chain(types).collect();\n@@ -1009,6 +1011,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 has_default: false,\n                 object_lifetime_default: rl::Set1::Empty,\n                 pure_wrt_drop: false,\n+                synthetic: None,\n             }));\n         });\n     }"}, {"sha": "4ad1697136a22a2cdd3b2d2bcaa717e001147b17", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=3730dfdaf58057466a2c576184c4647840daaeac", "patch": "@@ -4677,4 +4677,6 @@ register_diagnostics! {\n     E0592, // duplicate definitions with name `{}`\n //  E0613, // Removed (merged with E0609)\n     E0627, // yield statement outside of generator literal\n+    E0631, // cannot provide explicit type parameters when `impl Trait` is used in\n+           // argument position.\n }"}, {"sha": "246300a24a9ab7a86463bf8ab7c2085d089010a0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3730dfdaf58057466a2c576184c4647840daaeac/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3730dfdaf58057466a2c576184c4647840daaeac", "patch": "@@ -724,6 +724,12 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                                        is just used for rustc unit tests \\\n                                                        and will never be stable\",\n                                                       cfg_fn!(rustc_attrs))),\n+    (\"rustc_synthetic\", Whitelisted, Gated(Stability::Unstable,\n+                                                      \"rustc_attrs\",\n+                                                      \"this attribute \\\n+                                                       is just used for rustc unit tests \\\n+                                                       and will never be stable\",\n+                                                      cfg_fn!(rustc_attrs))),\n     (\"rustc_symbol_name\", Whitelisted, Gated(Stability::Unstable,\n                                              \"rustc_attrs\",\n                                              \"internal rustc attributes will never be stable\","}, {"sha": "a9762e383fe4e52e41dd3ea179f06c3e01e11975", "filename": "src/test/compile-fail/synthetic-param.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3730dfdaf58057466a2c576184c4647840daaeac/src%2Ftest%2Fcompile-fail%2Fsynthetic-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3730dfdaf58057466a2c576184c4647840daaeac/src%2Ftest%2Fcompile-fail%2Fsynthetic-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsynthetic-param.rs?ref=3730dfdaf58057466a2c576184c4647840daaeac", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generic_param_attrs, rustc_attrs)]\n+\n+fn func<#[rustc_synthetic] T>(_: T) {}\n+\n+struct Foo;\n+\n+impl Foo {\n+    pub fn func<#[rustc_synthetic] T>(_: T) {}\n+}\n+\n+struct Bar<S> {\n+    t: S\n+}\n+\n+impl<S> Bar<S> {\n+    pub fn func<#[rustc_synthetic] T>(_: T) {}\n+}\n+\n+fn main() {\n+    func::<u8>(42); //~ ERROR cannot provide explicit type parameters\n+    func(42); // Ok\n+\n+    Foo::func::<u8>(42); //~ ERROR cannot provide explicit type parameters\n+    Foo::func(42); // Ok\n+\n+    Bar::<i8>::func::<u8>(42); //~ ERROR cannot provide explicit type parameters\n+    Bar::<i8>::func(42); // Ok\n+}"}]}