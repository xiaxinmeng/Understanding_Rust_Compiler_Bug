{"sha": "f8e6617239a8412a983c9a6b6af79d0eff3cdce0", "node_id": "C_kwDOAAsO6NoAKGY4ZTY2MTcyMzlhODQxMmE5ODNjOWE2YjZhZjc5ZDBlZmYzY2RjZTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-03T20:29:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-03T20:29:31Z"}, "message": "Rollup merge of #100029 - hdelc:master, r=cjgillot\n\nPrevent ICE for `doc_alias` on match arm, statement, expression\n\nFixes #99777.\n\nThis is a pretty minimal fix that should be safe, since rustdoc doesn't generate documentation for match arms, statements, or expressions. I mentioned in the linked issue that the `doc_alias` target checking should probably be improved to avoid future ICEs, but as a new contributor, I'm not confident enough with the HIR types to make a larger change.", "tree": {"sha": "25158d9018976a994d5250be75c1519bd3228647", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25158d9018976a994d5250be75c1519bd3228647"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8e6617239a8412a983c9a6b6af79d0eff3cdce0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6tqrCRBK7hj4Ov3rIwAAi8gIAAdita86feYAeo7R0s1xIwur\nji5H5nN84ET6dIgLUnq8KKOGvsivfmbtoFO62l0dTJFg4Wkh0DIhcS02uAU42Trd\ng+yYh29nBbRj2BkOKpfckU0ZZNvCZ5v8ZG8q/CkBmBgnYvGAMEXVFxwKyzs4Z/8d\nga1tD5AgDLTMfS4V8FVyz6pW49Su0QxM7CStaA8D8Z9mUubNOZrD1h8qjNT+/nFx\nAeY2WlpVNAR/hFPh+nIzPfo2Ryx85oCLalGQzlxrWIwViArGDEi3lah1z1KzPXKc\n+etxEwaYGUAq4d90SY1C7oMSWeIN833wqr+ipB8UMrj8Kjy0DDpniiSe1y2QHbo=\n=jcs8\n-----END PGP SIGNATURE-----\n", "payload": "tree 25158d9018976a994d5250be75c1519bd3228647\nparent 02fcec2ac8d8be83103b9a954adc79dc6271e0e9\nparent 2be00947bfbb7e31cd6a5b6cf1e9e2f0bc1c4da6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659558571 +0200\ncommitter GitHub <noreply@github.com> 1659558571 +0200\n\nRollup merge of #100029 - hdelc:master, r=cjgillot\n\nPrevent ICE for `doc_alias` on match arm, statement, expression\n\nFixes #99777.\n\nThis is a pretty minimal fix that should be safe, since rustdoc doesn't generate documentation for match arms, statements, or expressions. I mentioned in the linked issue that the `doc_alias` target checking should probably be improved to avoid future ICEs, but as a new contributor, I'm not confident enough with the HIR types to make a larger change.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e6617239a8412a983c9a6b6af79d0eff3cdce0", "html_url": "https://github.com/rust-lang/rust/commit/f8e6617239a8412a983c9a6b6af79d0eff3cdce0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8e6617239a8412a983c9a6b6af79d0eff3cdce0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02fcec2ac8d8be83103b9a954adc79dc6271e0e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/02fcec2ac8d8be83103b9a954adc79dc6271e0e9", "html_url": "https://github.com/rust-lang/rust/commit/02fcec2ac8d8be83103b9a954adc79dc6271e0e9"}, {"sha": "2be00947bfbb7e31cd6a5b6cf1e9e2f0bc1c4da6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2be00947bfbb7e31cd6a5b6cf1e9e2f0bc1c4da6", "html_url": "https://github.com/rust-lang/rust/commit/2be00947bfbb7e31cd6a5b6cf1e9e2f0bc1c4da6"}], "stats": {"total": 169, "additions": 109, "deletions": 60}, "files": [{"sha": "6236dea10c88f3c23258a1821f56199c7bef3085", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/f8e6617239a8412a983c9a6b6af79d0eff3cdce0/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e6617239a8412a983c9a6b6af79d0eff3cdce0/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=f8e6617239a8412a983c9a6b6af79d0eff3cdce0", "patch": "@@ -60,51 +60,7 @@ pub enum Target {\n \n impl Display for Target {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(\n-            f,\n-            \"{}\",\n-            match *self {\n-                Target::ExternCrate => \"extern crate\",\n-                Target::Use => \"use\",\n-                Target::Static => \"static item\",\n-                Target::Const => \"constant item\",\n-                Target::Fn => \"function\",\n-                Target::Closure => \"closure\",\n-                Target::Mod => \"module\",\n-                Target::ForeignMod => \"foreign module\",\n-                Target::GlobalAsm => \"global asm\",\n-                Target::TyAlias => \"type alias\",\n-                Target::OpaqueTy => \"opaque type\",\n-                Target::Enum => \"enum\",\n-                Target::Variant => \"enum variant\",\n-                Target::Struct => \"struct\",\n-                Target::Field => \"struct field\",\n-                Target::Union => \"union\",\n-                Target::Trait => \"trait\",\n-                Target::TraitAlias => \"trait alias\",\n-                Target::Impl => \"item\",\n-                Target::Expression => \"expression\",\n-                Target::Statement => \"statement\",\n-                Target::Arm => \"match arm\",\n-                Target::AssocConst => \"associated const\",\n-                Target::Method(kind) => match kind {\n-                    MethodKind::Inherent => \"inherent method\",\n-                    MethodKind::Trait { body: false } => \"required trait method\",\n-                    MethodKind::Trait { body: true } => \"provided trait method\",\n-                },\n-                Target::AssocTy => \"associated type\",\n-                Target::ForeignFn => \"foreign function\",\n-                Target::ForeignStatic => \"foreign static item\",\n-                Target::ForeignTy => \"foreign type\",\n-                Target::GenericParam(kind) => match kind {\n-                    GenericParamKind::Type => \"type parameter\",\n-                    GenericParamKind::Lifetime => \"lifetime parameter\",\n-                    GenericParamKind::Const => \"const parameter\",\n-                },\n-                Target::MacroDef => \"macro def\",\n-                Target::Param => \"function param\",\n-            }\n-        )\n+        write!(f, \"{}\", Self::name(*self))\n     }\n }\n \n@@ -185,4 +141,48 @@ impl Target {\n             hir::GenericParamKind::Const { .. } => Target::GenericParam(GenericParamKind::Const),\n         }\n     }\n+\n+    pub fn name(self) -> &'static str {\n+        match self {\n+            Target::ExternCrate => \"extern crate\",\n+            Target::Use => \"use\",\n+            Target::Static => \"static item\",\n+            Target::Const => \"constant item\",\n+            Target::Fn => \"function\",\n+            Target::Closure => \"closure\",\n+            Target::Mod => \"module\",\n+            Target::ForeignMod => \"foreign module\",\n+            Target::GlobalAsm => \"global asm\",\n+            Target::TyAlias => \"type alias\",\n+            Target::OpaqueTy => \"opaque type\",\n+            Target::Enum => \"enum\",\n+            Target::Variant => \"enum variant\",\n+            Target::Struct => \"struct\",\n+            Target::Field => \"struct field\",\n+            Target::Union => \"union\",\n+            Target::Trait => \"trait\",\n+            Target::TraitAlias => \"trait alias\",\n+            Target::Impl => \"implementation block\",\n+            Target::Expression => \"expression\",\n+            Target::Statement => \"statement\",\n+            Target::Arm => \"match arm\",\n+            Target::AssocConst => \"associated const\",\n+            Target::Method(kind) => match kind {\n+                MethodKind::Inherent => \"inherent method\",\n+                MethodKind::Trait { body: false } => \"required trait method\",\n+                MethodKind::Trait { body: true } => \"provided trait method\",\n+            },\n+            Target::AssocTy => \"associated type\",\n+            Target::ForeignFn => \"foreign function\",\n+            Target::ForeignStatic => \"foreign static item\",\n+            Target::ForeignTy => \"foreign type\",\n+            Target::GenericParam(kind) => match kind {\n+                GenericParamKind::Type => \"type parameter\",\n+                GenericParamKind::Lifetime => \"lifetime parameter\",\n+                GenericParamKind::Const => \"const parameter\",\n+            },\n+            Target::MacroDef => \"macro def\",\n+            Target::Param => \"function param\",\n+        }\n+    }\n }"}, {"sha": "5b7d44e41cf6d35b317d3e710e70eb110831402f", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f8e6617239a8412a983c9a6b6af79d0eff3cdce0/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e6617239a8412a983c9a6b6af79d0eff3cdce0/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=f8e6617239a8412a983c9a6b6af79d0eff3cdce0", "patch": "@@ -596,8 +596,6 @@ impl CheckAttrVisitor<'_> {\n \n         let span = meta.span();\n         if let Some(location) = match target {\n-            Target::Impl => Some(\"implementation block\"),\n-            Target::ForeignMod => Some(\"extern block\"),\n             Target::AssocTy => {\n                 let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n                 let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n@@ -619,7 +617,34 @@ impl CheckAttrVisitor<'_> {\n             }\n             // we check the validity of params elsewhere\n             Target::Param => return false,\n-            _ => None,\n+            Target::Expression\n+            | Target::Statement\n+            | Target::Arm\n+            | Target::ForeignMod\n+            | Target::Closure\n+            | Target::Impl => Some(target.name()),\n+            Target::ExternCrate\n+            | Target::Use\n+            | Target::Static\n+            | Target::Const\n+            | Target::Fn\n+            | Target::Mod\n+            | Target::GlobalAsm\n+            | Target::TyAlias\n+            | Target::OpaqueTy\n+            | Target::Enum\n+            | Target::Variant\n+            | Target::Struct\n+            | Target::Field\n+            | Target::Union\n+            | Target::Trait\n+            | Target::TraitAlias\n+            | Target::Method(..)\n+            | Target::ForeignFn\n+            | Target::ForeignStatic\n+            | Target::ForeignTy\n+            | Target::GenericParam(..)\n+            | Target::MacroDef => None,\n         } {\n             tcx.sess.emit_err(errors::DocAliasBadLocation { span, attr_str, location });\n             return false;"}, {"sha": "85c9516236c94484872270dff3059572432e9d62", "filename": "src/test/rustdoc-ui/check-doc-alias-attr-location.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8e6617239a8412a983c9a6b6af79d0eff3cdce0/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8e6617239a8412a983c9a6b6af79d0eff3cdce0/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.stderr?ref=f8e6617239a8412a983c9a6b6af79d0eff3cdce0", "patch": "@@ -1,4 +1,4 @@\n-error: `#[doc(alias = \"...\")]` isn't allowed on extern block\n+error: `#[doc(alias = \"...\")]` isn't allowed on foreign module\n   --> $DIR/check-doc-alias-attr-location.rs:7:7\n    |\n LL | #[doc(alias = \"foo\")]"}, {"sha": "310d1f720eb7cb6800ed21c32312e80700d1ba9d", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8e6617239a8412a983c9a6b6af79d0eff3cdce0/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8e6617239a8412a983c9a6b6af79d0eff3cdce0/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=f8e6617239a8412a983c9a6b6af79d0eff3cdce0", "patch": "@@ -212,7 +212,7 @@ note: the lint level is defined here\n LL | #![warn(unused_attributes, unknown_lints)]\n    |         ^^^^^^^^^^^^^^^^^\n \n-warning: `#[automatically_derived]` only has an effect on items\n+warning: `#[automatically_derived]` only has an effect on implementation blocks\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:266:1\n    |\n LL | #[automatically_derived]\n@@ -515,25 +515,25 @@ warning: `#[path]` only has an effect on modules\n LL |     #[path = \"3800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^\n \n-warning: `#[automatically_derived]` only has an effect on items\n+warning: `#[automatically_derived]` only has an effect on implementation blocks\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:269:17\n    |\n LL |     mod inner { #![automatically_derived] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: `#[automatically_derived]` only has an effect on items\n+warning: `#[automatically_derived]` only has an effect on implementation blocks\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:272:5\n    |\n LL |     #[automatically_derived] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: `#[automatically_derived]` only has an effect on items\n+warning: `#[automatically_derived]` only has an effect on implementation blocks\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:275:5\n    |\n LL |     #[automatically_derived] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: `#[automatically_derived]` only has an effect on items\n+warning: `#[automatically_derived]` only has an effect on implementation blocks\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:278:5\n    |\n LL |     #[automatically_derived] type T = S;\n@@ -923,7 +923,7 @@ warning: `#[must_use]` has no effect when applied to a type alias\n LL |     #[must_use] type T = S;\n    |     ^^^^^^^^^^^\n \n-warning: `#[must_use]` has no effect when applied to an item\n+warning: `#[must_use]` has no effect when applied to an implementation block\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:614:5\n    |\n LL |     #[must_use] impl S { }"}, {"sha": "317d81c591d55cd5cdb0cec79b306eb14ae84376", "filename": "src/test/ui/lint/unused/unused_attributes-must_use.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8e6617239a8412a983c9a6b6af79d0eff3cdce0/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8e6617239a8412a983c9a6b6af79d0eff3cdce0/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr?ref=f8e6617239a8412a983c9a6b6af79d0eff3cdce0", "patch": "@@ -45,7 +45,7 @@ error: `#[must_use]` has no effect when applied to a static item\n LL | #[must_use]\n    | ^^^^^^^^^^^\n \n-error: `#[must_use]` has no effect when applied to an item\n+error: `#[must_use]` has no effect when applied to an implementation block\n   --> $DIR/unused_attributes-must_use.rs:33:1\n    |\n LL | #[must_use]\n@@ -69,7 +69,7 @@ error: `#[must_use]` has no effect when applied to a type parameter\n LL | fn qux<#[must_use] T>(_: T) {}\n    |        ^^^^^^^^^^^\n \n-error: `#[must_use]` has no effect when applied to an item\n+error: `#[must_use]` has no effect when applied to an implementation block\n   --> $DIR/unused_attributes-must_use.rs:79:1\n    |\n LL | #[must_use]"}, {"sha": "10609e5d8f4d99661e962928ed32bc4516510c5f", "filename": "src/test/ui/rustdoc/check-doc-alias-attr-location.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8e6617239a8412a983c9a6b6af79d0eff3cdce0/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e6617239a8412a983c9a6b6af79d0eff3cdce0/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.rs?ref=f8e6617239a8412a983c9a6b6af79d0eff3cdce0", "patch": "@@ -21,6 +21,12 @@ impl Foo for Bar {\n     type X = i32;\n     fn foo(#[doc(alias = \"qux\")] _x: u32) -> Self::X {\n         //~^ ERROR\n-        0\n+        #[doc(alias = \"stmt\")] //~ ERROR\n+        let x = 0;\n+        #[doc(alias = \"expr\")] //~ ERROR\n+        match x {\n+            #[doc(alias = \"arm\")] //~ ERROR\n+            _ => 0\n+        }\n     }\n }"}, {"sha": "23c93a4ed8bdb248a867de0ddae844175e3f80c7", "filename": "src/test/ui/rustdoc/check-doc-alias-attr-location.stderr", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8e6617239a8412a983c9a6b6af79d0eff3cdce0/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8e6617239a8412a983c9a6b6af79d0eff3cdce0/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.stderr?ref=f8e6617239a8412a983c9a6b6af79d0eff3cdce0", "patch": "@@ -4,7 +4,7 @@ error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed\n LL |     fn foo(#[doc(alias = \"qux\")] _x: u32) -> Self::X {\n    |            ^^^^^^^^^^^^^^^^^^^^^\n \n-error: `#[doc(alias = \"...\")]` isn't allowed on extern block\n+error: `#[doc(alias = \"...\")]` isn't allowed on foreign module\n   --> $DIR/check-doc-alias-attr-location.rs:9:7\n    |\n LL | #[doc(alias = \"foo\")]\n@@ -28,5 +28,23 @@ error: `#[doc(alias = \"...\")]` isn't allowed on type alias in implementation blo\n LL |     #[doc(alias = \"assoc\")]\n    |           ^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: `#[doc(alias = \"...\")]` isn't allowed on statement\n+  --> $DIR/check-doc-alias-attr-location.rs:24:15\n+   |\n+LL |         #[doc(alias = \"stmt\")]\n+   |               ^^^^^^^^^^^^^^\n+\n+error: `#[doc(alias = \"...\")]` isn't allowed on expression\n+  --> $DIR/check-doc-alias-attr-location.rs:26:15\n+   |\n+LL |         #[doc(alias = \"expr\")]\n+   |               ^^^^^^^^^^^^^^\n+\n+error: `#[doc(alias = \"...\")]` isn't allowed on match arm\n+  --> $DIR/check-doc-alias-attr-location.rs:28:19\n+   |\n+LL |             #[doc(alias = \"arm\")]\n+   |                   ^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n "}]}