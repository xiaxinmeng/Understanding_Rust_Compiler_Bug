{"sha": "4eb94b44072697be70fc2a74ed9989e88f9cd70c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYjk0YjQ0MDcyNjk3YmU3MGZjMmE3NGVkOTk4OWU4OGY5Y2Q3MGM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-04-21T12:29:58Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-04-21T12:29:58Z"}, "message": "AST/HIR: Use `Mutability` instead of bool in foreign statics", "tree": {"sha": "876462433c27a3f8b34f94bb4a57bc753677b1b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/876462433c27a3f8b34f94bb4a57bc753677b1b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eb94b44072697be70fc2a74ed9989e88f9cd70c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb94b44072697be70fc2a74ed9989e88f9cd70c", "html_url": "https://github.com/rust-lang/rust/commit/4eb94b44072697be70fc2a74ed9989e88f9cd70c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eb94b44072697be70fc2a74ed9989e88f9cd70c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ffcd96b7588669029467e5f23b699ff3283173", "url": "https://api.github.com/repos/rust-lang/rust/commits/53ffcd96b7588669029467e5f23b699ff3283173", "html_url": "https://github.com/rust-lang/rust/commit/53ffcd96b7588669029467e5f23b699ff3283173"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "99cae00fafc230ecc6c521b2600f660dfa3e8260", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4eb94b44072697be70fc2a74ed9989e88f9cd70c", "patch": "@@ -3742,7 +3742,7 @@ impl<'a> LoweringContext<'a> {\n                 }\n                 ForeignItemKind::Static(ref t, m) => {\n                     hir::ForeignItemKind::Static(\n-                        self.lower_ty(t, ImplTraitContext::disallowed()), m)\n+                        self.lower_ty(t, ImplTraitContext::disallowed()), self.lower_mutability(m))\n                 }\n                 ForeignItemKind::Ty => hir::ForeignItemKind::Type,\n                 ForeignItemKind::Macro(_) => panic!(\"shouldn't exist here\"),"}, {"sha": "630c163bcaf5415e667522de8fc2b0e86d5c75fc", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=4eb94b44072697be70fc2a74ed9989e88f9cd70c", "patch": "@@ -2405,9 +2405,8 @@ pub struct ForeignItem {\n pub enum ForeignItemKind {\n     /// A foreign function.\n     Fn(P<FnDecl>, HirVec<Ident>, Generics),\n-    /// A foreign static item (`static ext: u8`), with optional mutability\n-    /// (the boolean is true when mutable).\n-    Static(P<Ty>, bool),\n+    /// A foreign static item (`static ext: u8`).\n+    Static(P<Ty>, Mutability),\n     /// A foreign type.\n     Type,\n }"}, {"sha": "dc87e13b739d6042288c2218b18e02c8c7f1554d", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=4eb94b44072697be70fc2a74ed9989e88f9cd70c", "patch": "@@ -466,7 +466,7 @@ impl<'a> State<'a> {\n             }\n             hir::ForeignItemKind::Static(ref t, m) => {\n                 self.head(visibility_qualified(&item.vis, \"static\"))?;\n-                if m {\n+                if m == hir::MutMutable {\n                     self.word_space(\"mut\")?;\n                 }\n                 self.print_ident(item.ident)?;"}, {"sha": "a0f17a55a8756965f72d5448b80dd8020d760f9a", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=4eb94b44072697be70fc2a74ed9989e88f9cd70c", "patch": "@@ -1647,8 +1647,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 };\n                 EntryKind::ForeignFn(self.lazy(&data))\n             }\n-            hir::ForeignItemKind::Static(_, true) => EntryKind::ForeignMutStatic,\n-            hir::ForeignItemKind::Static(_, false) => EntryKind::ForeignImmStatic,\n+            hir::ForeignItemKind::Static(_, hir::MutMutable) => EntryKind::ForeignMutStatic,\n+            hir::ForeignItemKind::Static(_, hir::MutImmutable) => EntryKind::ForeignImmStatic,\n             hir::ForeignItemKind::Type => EntryKind::ForeignType,\n         };\n "}, {"sha": "90fe6a60dd77aba98c32ae4dfdab94593c6afa9d", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=4eb94b44072697be70fc2a74ed9989e88f9cd70c", "patch": "@@ -798,7 +798,7 @@ impl Sig for ast::ForeignItem {\n             }\n             ast::ForeignItemKind::Static(ref ty, m) => {\n                 let mut text = \"static \".to_owned();\n-                if m {\n+                if m == ast::Mutability::Mutable {\n                     text.push_str(\"mut \");\n                 }\n                 let name = self.ident.to_string();"}, {"sha": "afb30af054f3f81e6143d0fcd03318b76da10d45", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4eb94b44072697be70fc2a74ed9989e88f9cd70c", "patch": "@@ -2369,10 +2369,10 @@ fn static_mutability<'a, 'tcx>(\n     match tcx.hir().get_if_local(def_id) {\n         Some(Node::Item(&hir::Item {\n             node: hir::ItemKind::Static(_, mutbl, _), ..\n-        })) => Some(mutbl),\n+        })) |\n         Some(Node::ForeignItem( &hir::ForeignItem {\n             node: hir::ForeignItemKind::Static(_, mutbl), ..\n-        })) => Some(if mutbl { hir::MutMutable } else { hir::MutImmutable }),\n+        })) => Some(mutbl),\n         Some(_) => None,\n         _ => bug!(\"static_mutability applied to non-local def-id {:?}\", def_id),\n     }"}, {"sha": "586ae6659bb075e35c9e894c4655490fc0a20c1d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4eb94b44072697be70fc2a74ed9989e88f9cd70c", "patch": "@@ -4055,7 +4055,7 @@ impl Clean<Item> for hir::ForeignItem {\n             hir::ForeignItemKind::Static(ref ty, mutbl) => {\n                 ForeignStaticItem(Static {\n                     type_: ty.clean(cx),\n-                    mutability: if mutbl {Mutable} else {Immutable},\n+                    mutability: mutbl.clean(cx),\n                     expr: String::new(),\n                 })\n             }"}, {"sha": "a5472c622e645afabe80050611ac666c066f57a0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4eb94b44072697be70fc2a74ed9989e88f9cd70c", "patch": "@@ -2340,9 +2340,8 @@ pub struct ForeignItem {\n pub enum ForeignItemKind {\n     /// A foreign function.\n     Fn(P<FnDecl>, Generics),\n-    /// A foreign static item (`static ext: u8`), with optional mutability.\n-    /// (The boolean is `true` for mutable items).\n-    Static(P<Ty>, bool),\n+    /// A foreign static item (`static ext: u8`).\n+    Static(P<Ty>, Mutability),\n     /// A foreign type.\n     Ty,\n     /// A macro invocation."}, {"sha": "233ea472e98f4d64c1a2d4485562111779ebb515", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4eb94b44072697be70fc2a74ed9989e88f9cd70c", "patch": "@@ -7683,7 +7683,7 @@ impl<'a> Parser<'a> {\n     /// Assumes that the `static` keyword is already parsed.\n     fn parse_item_foreign_static(&mut self, vis: ast::Visibility, lo: Span, attrs: Vec<Attribute>)\n                                  -> PResult<'a, ForeignItem> {\n-        let mutbl = self.eat_keyword(keywords::Mut);\n+        let mutbl = self.parse_mutability();\n         let ident = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;"}, {"sha": "d94e4762e6718e4008f133df25ab1b53595ad53f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb94b44072697be70fc2a74ed9989e88f9cd70c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4eb94b44072697be70fc2a74ed9989e88f9cd70c", "patch": "@@ -1142,7 +1142,7 @@ impl<'a> State<'a> {\n             }\n             ast::ForeignItemKind::Static(ref t, m) => {\n                 self.head(visibility_qualified(&item.vis, \"static\"))?;\n-                if m {\n+                if m == ast::Mutability::Mutable {\n                     self.word_space(\"mut\")?;\n                 }\n                 self.print_ident(item.ident)?;"}]}