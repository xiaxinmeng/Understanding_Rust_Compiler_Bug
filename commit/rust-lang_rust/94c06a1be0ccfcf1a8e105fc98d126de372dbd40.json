{"sha": "94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YzA2YTFiZTBjY2ZjZjFhOGUxMDVmYzk4ZDEyNmRlMzcyZGJkNDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-10T11:15:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-10T11:15:52Z"}, "message": "Auto merge of #22026 - kmcallister:plugin, r=sfackler\n\n```rust\r\n#[plugin] #[no_link] extern crate bleh;\r\n```\r\n\r\nbecomes a crate attribute\r\n\r\n```rust\r\n#![plugin(bleh)]\r\n```\r\n\r\nThe feature gate is still required.\r\n\r\nIt's almost never correct to link a plugin into the resulting library / executable, because it will bring all of libsyntax and librustc with it. However if you really want this behavior, you can get it with a separate `extern crate` item in addition to the `plugin` attribute.\r\n\r\nFixes #21043.\r\nFixes #20769.\r\n\r\n[breaking-change]", "tree": {"sha": "34c42bfdc779516ea7be5d116b31ed1bf3507ef8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34c42bfdc779516ea7be5d116b31ed1bf3507ef8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "html_url": "https://github.com/rust-lang/rust/commit/94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de8bc44753881aacdaf435f5ba61de3c20916761", "url": "https://api.github.com/repos/rust-lang/rust/commits/de8bc44753881aacdaf435f5ba61de3c20916761", "html_url": "https://github.com/rust-lang/rust/commit/de8bc44753881aacdaf435f5ba61de3c20916761"}, {"sha": "1aedc45f85fe9feb70971f9d0c743c4af550a080", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aedc45f85fe9feb70971f9d0c743c4af550a080", "html_url": "https://github.com/rust-lang/rust/commit/1aedc45f85fe9feb70971f9d0c743c4af550a080"}], "stats": {"total": 321, "additions": 156, "deletions": 165}, "files": [{"sha": "999efc95c0e60b536103d64e4f96e02e11709e53", "filename": "src/doc/reference.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -2014,6 +2014,11 @@ type int8_t = i8;\n - `no_start` - disable linking to the `native` crate, which specifies the\n   \"start\" language item.\n - `no_std` - disable linking to the `std` crate.\n+- `plugin` \u2014 load a list of named crates as compiler plugins, e.g.\n+             `#![plugin(foo, bar)]`. Optional arguments for each plugin,\n+             i.e. `#![plugin(foo(... args ...))]`, are provided to the plugin's\n+             registrar function.  The `plugin` feature gate is required to use\n+             this attribute.\n \n ### Module-only attributes\n \n@@ -2082,7 +2087,7 @@ On `struct`s:\n   remove any padding between fields (note that this is very fragile and may\n   break platforms which require aligned access).\n \n-### Macro- and plugin-related attributes\n+### Macro-related attributes\n \n - `macro_use` on a `mod` \u2014 macros defined in this module will be visible in the\n   module's parent, after this module has been included.\n@@ -2097,13 +2102,8 @@ On `struct`s:\n \n - `macro_export` - export a macro for cross-crate usage.\n \n-- `plugin` on an `extern crate`\u00a0\u2014 load this crate as a [compiler\n-  plugin][plugin].  The `plugin` feature gate is required.  Any arguments to\n-  the attribute, e.g. `#[plugin=...]` or `#[plugin(...)]`, are provided to the\n-  plugin.\n-\n-- `no_link` on an `extern crate` \u2014 even if we load this crate for macros or\n-  compiler plugins, don't link it into the output.\n+- `no_link` on an `extern crate` \u2014 even if we load this crate for macros, don't\n+  link it into the output.\n \n See the [macros section of the\n book](book/macros.html#scoping-and-macro-import/export) for more information on"}, {"sha": "3dea1a66ffd72519732fcf64dafa452ed83ed8ad", "filename": "src/doc/trpl/plugins.md", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Fdoc%2Ftrpl%2Fplugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Fdoc%2Ftrpl%2Fplugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fplugins.md?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -30,14 +30,14 @@ information.\n extend the compiler's behavior with new syntax extensions, lint checks, etc.\n \n A plugin is a dynamic library crate with a designated *registrar* function that\n-registers extensions with `rustc`. Other crates can use these extensions by\n-loading the plugin crate with `#[plugin] extern crate`. See the\n+registers extensions with `rustc`. Other crates can load these extensions using\n+the crate attribute `#![plugin(...)]`.  See the\n [`rustc::plugin`](../rustc/plugin/index.html) documentation for more about the\n mechanics of defining and loading a plugin.\n \n-Arguments passed as `#[plugin=...]` or `#[plugin(...)]` are not interpreted by\n-rustc itself.  They are provided to the plugin through the `Registry`'s [`args`\n-method](../rustc/plugin/registry/struct.Registry.html#method.args).\n+If present, arguments passed as `#![plugin(foo(... args ...))]` are not\n+interpreted by rustc itself.  They are provided to the plugin through the\n+`Registry`'s [`args` method](../rustc/plugin/registry/struct.Registry.html#method.args).\n \n # Syntax extensions\n \n@@ -110,8 +110,7 @@ Then we can use `rn!()` like any other macro:\n \n ```ignore\n #![feature(plugin)]\n-\n-#[plugin] extern crate roman_numerals;\n+#![plugin(roman_numerals)]\n \n fn main() {\n     assert_eq!(rn!(MMXV), 2015);\n@@ -219,7 +218,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n Then code like\n \n ```ignore\n-#[plugin] extern crate lint_plugin_test;\n+#![plugin(lint_plugin_test)]\n \n fn lintme() { }\n ```"}, {"sha": "f6cd0e5add2102577f177f626140fba89e4193fb", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -26,7 +26,7 @@ use syntax::ast;\n use syntax::abi;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n-use syntax::codemap::{COMMAND_LINE_SP, Span, mk_sp};\n+use syntax::codemap::{Span, mk_sp};\n use syntax::parse;\n use syntax::parse::token::InternedString;\n use syntax::parse::token;\n@@ -457,13 +457,13 @@ impl<'a> CrateReader<'a> {\n             CrateOrString::Krate(c) => {\n                 (self.extract_crate_info(c).unwrap(), c.span)\n             }\n-            CrateOrString::Str(s) => {\n+            CrateOrString::Str(sp, s) => {\n                 (CrateInfo {\n                      name: s.to_string(),\n                      ident: s.to_string(),\n                      id: ast::DUMMY_NODE_ID,\n                      should_link: true,\n-                 }, COMMAND_LINE_SP)\n+                 }, sp)\n             }\n         };\n         let target_triple = &self.sess.opts.target_triple[];\n@@ -531,7 +531,7 @@ impl<'a> CrateReader<'a> {\n #[derive(Copy)]\n pub enum CrateOrString<'a> {\n     Krate(&'a ast::Item),\n-    Str(&'a str)\n+    Str(Span, &'a str)\n }\n \n impl<'a> PluginMetadata<'a> {"}, {"sha": "a2ce474eda84088597cf6c467f07fd0de48bcb40", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 58, "deletions": 42, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -18,9 +18,10 @@ use std::mem;\n use std::env;\n use std::dynamic_lib::DynamicLibrary;\n use std::collections::HashSet;\n+use std::borrow::ToOwned;\n use syntax::ast;\n use syntax::attr;\n-use syntax::codemap::Span;\n+use syntax::codemap::{Span, COMMAND_LINE_SP};\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::visit;\n@@ -33,7 +34,7 @@ pub type PluginRegistrarFun =\n \n pub struct PluginRegistrar {\n     pub fun: PluginRegistrarFun,\n-    pub args: P<ast::MetaItem>,\n+    pub args: Vec<P<ast::MetaItem>>,\n }\n \n /// Information about loaded plugins.\n@@ -81,10 +82,34 @@ pub fn load_plugins(sess: &Session, krate: &ast::Crate,\n \n     visit::walk_crate(&mut loader, krate);\n \n+    for attr in &krate.attrs {\n+        if !attr.check_name(\"plugin\") {\n+            continue;\n+        }\n+\n+        let plugins = match attr.meta_item_list() {\n+            Some(xs) => xs,\n+            None => {\n+                sess.span_err(attr.span, \"malformed plugin attribute\");\n+                continue;\n+            }\n+        };\n+\n+        for plugin in plugins {\n+            if plugin.value_str().is_some() {\n+                sess.span_err(attr.span, \"malformed plugin attribute\");\n+                continue;\n+            }\n+\n+            let args = plugin.meta_item_list().map(ToOwned::to_owned).unwrap_or_default();\n+            loader.load_plugin(CrateOrString::Str(plugin.span, &*plugin.name()),\n+                               args);\n+        }\n+    }\n+\n     if let Some(plugins) = addl_plugins {\n         for plugin in plugins {\n-            loader.load_plugin(CrateOrString::Str(&plugin),\n-                                                  None, None, None)\n+            loader.load_plugin(CrateOrString::Str(COMMAND_LINE_SP, &plugin), vec![]);\n         }\n     }\n \n@@ -104,21 +129,19 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n         }\n \n         // Parse the attributes relating to macro / plugin loading.\n-        let mut plugin_attr = None;\n         let mut macro_selection = Some(HashSet::new());  // None => load all\n         let mut reexport = HashSet::new();\n         for attr in &item.attrs {\n             let mut used = true;\n             match &attr.name()[] {\n                 \"phase\" => {\n-                    self.sess.span_err(attr.span, \"#[phase] is deprecated; use \\\n-                                       #[macro_use], #[plugin], and/or #[no_link]\");\n+                    self.sess.span_err(attr.span, \"#[phase] is deprecated\");\n                 }\n                 \"plugin\" => {\n-                    if plugin_attr.is_some() {\n-                        self.sess.span_err(attr.span, \"#[plugin] specified multiple times\");\n-                    }\n-                    plugin_attr = Some(attr.node.value.clone());\n+                    self.sess.span_err(attr.span, \"#[plugin] on `extern crate` is deprecated\");\n+                    self.sess.span_help(attr.span, &format!(\"use a crate attribute instead, \\\n+                                                            i.e. #![plugin({})]\",\n+                                                            item.ident.as_str())[]);\n                 }\n                 \"macro_use\" => {\n                     let names = attr.meta_item_list();\n@@ -160,10 +183,7 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n             }\n         }\n \n-        self.load_plugin(CrateOrString::Krate(item),\n-                         plugin_attr,\n-                         macro_selection,\n-                         Some(reexport))\n+        self.load_macros(item, macro_selection, Some(reexport))\n     }\n \n     fn visit_mac(&mut self, _: &ast::Mac) {\n@@ -173,38 +193,25 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n }\n \n impl<'a> PluginLoader<'a> {\n-    pub fn load_plugin<'b>(&mut self,\n-                           c: CrateOrString<'b>,\n-                           plugin_attr: Option<P<ast::MetaItem>>,\n+    pub fn load_macros<'b>(&mut self,\n+                           vi: &ast::Item,\n                            macro_selection: Option<HashSet<token::InternedString>>,\n                            reexport: Option<HashSet<token::InternedString>>) {\n-        let mut macros = vec![];\n-        let mut registrar = None;\n-\n-        let load_macros = match (macro_selection.as_ref(), reexport.as_ref()) {\n-            (Some(sel), Some(re)) => sel.len() != 0 || re.len() != 0,\n-            _ => true,\n-        };\n-        let load_registrar = plugin_attr.is_some();\n-\n-        if let CrateOrString::Krate(vi) = c {\n-            if load_macros && !self.span_whitelist.contains(&vi.span) {\n-                self.sess.span_err(vi.span, \"an `extern crate` loading macros must be at \\\n-                                             the crate root\");\n+        if let (Some(sel), Some(re)) = (macro_selection.as_ref(), reexport.as_ref()) {\n+            if sel.is_empty() && re.is_empty() {\n+                return;\n             }\n-       }\n+        }\n \n-        if load_macros || load_registrar {\n-            let pmd = self.reader.read_plugin_metadata(c);\n-            if load_macros {\n-                macros = pmd.exported_macros();\n-            }\n-            if load_registrar {\n-                registrar = pmd.plugin_registrar();\n-            }\n+        if !self.span_whitelist.contains(&vi.span) {\n+            self.sess.span_err(vi.span, \"an `extern crate` loading macros must be at \\\n+                                         the crate root\");\n+            return;\n         }\n \n-        for mut def in macros {\n+        let pmd = self.reader.read_plugin_metadata(CrateOrString::Krate(vi));\n+\n+        for mut def in pmd.exported_macros() {\n             let name = token::get_ident(def.ident);\n             def.use_locally = match macro_selection.as_ref() {\n                 None => true,\n@@ -217,12 +224,21 @@ impl<'a> PluginLoader<'a> {\n             };\n             self.plugins.macros.push(def);\n         }\n+    }\n+\n+    pub fn load_plugin<'b>(&mut self,\n+                           c: CrateOrString<'b>,\n+                           args: Vec<P<ast::MetaItem>>) {\n+        let registrar = {\n+            let pmd = self.reader.read_plugin_metadata(c);\n+            pmd.plugin_registrar()\n+        };\n \n         if let Some((lib, symbol)) = registrar {\n             let fun = self.dylink_registrar(c, lib, symbol);\n             self.plugins.registrars.push(PluginRegistrar {\n                 fun: fun,\n-                args: plugin_attr.unwrap(),\n+                args: args,\n             });\n         }\n     }"}, {"sha": "711ed43fe06062eec3590fa6b52ceeebeaaf398c", "filename": "src/librustc/plugin/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Flibrustc%2Fplugin%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Flibrustc%2Fplugin%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fmod.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -44,14 +44,9 @@\n //!\n //! ```rust\n //! #![feature(plugin)]\n-//!\n-//! #[plugin]\n-//! extern crate myplugin;\n+//! #![plugin(myplugin)]\n //! ```\n //!\n-//! If you don't need the plugin crate available at runtime, use\n-//! `#[no_link]` as well.\n-//!\n //! See [the compiler plugin guide](../../guide-plugin.html)\n //! for more examples.\n "}, {"sha": "12634204f8b12f2bd31c02dc36d8ccf8b973c8c1", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -37,7 +37,7 @@ pub struct Registry<'a> {\n     pub sess: &'a Session,\n \n     #[doc(hidden)]\n-    pub args_hidden: Option<P<ast::MetaItem>>,\n+    pub args_hidden: Option<Vec<P<ast::MetaItem>>>,\n \n     #[doc(hidden)]\n     pub krate_span: Span,\n@@ -65,11 +65,14 @@ impl<'a> Registry<'a> {\n         }\n     }\n \n-    /// Get the `#[plugin]` attribute used to load this plugin.\n+    /// Get the plugin's arguments, if any.\n     ///\n-    /// This gives access to arguments passed via `#[plugin=...]` or\n-    /// `#[plugin(...)]`.\n-    pub fn args<'b>(&'b self) -> &'b P<ast::MetaItem> {\n+    /// These are specified inside the `plugin` crate attribute as\n+    ///\n+    /// ```no_run\n+    /// #![plugin(my_plugin_name(... args ...))]\n+    /// ```\n+    pub fn args<'b>(&'b self) -> &'b Vec<P<ast::MetaItem>> {\n         self.args_hidden.as_ref().expect(\"args not set\")\n     }\n "}, {"sha": "ef6e84d3a7641dc77c9c89e470fd9c76756b919a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -70,7 +70,6 @@ use rustc::session::config::{Input, PrintRequest};\n use rustc::lint::Lint;\n use rustc::lint;\n use rustc::metadata;\n-use rustc::metadata::creader::CrateOrString::Str;\n use rustc::util::common::time;\n \n use std::cmp::Ordering::Equal;"}, {"sha": "72bbe1adfaa123730558b895fdcadad0d63ccc0e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -284,11 +284,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n         }\n         match i.node {\n             ast::ItemExternCrate(_) => {\n-                if attr::contains_name(&i.attrs[], \"plugin\") {\n-                    self.gate_feature(\"plugin\", i.span,\n-                                      \"compiler plugins are experimental \\\n-                                       and possibly buggy\");\n-                } else if attr::contains_name(&i.attrs[], \"macro_reexport\") {\n+                if attr::contains_name(&i.attrs[], \"macro_reexport\") {\n                     self.gate_feature(\"macro_reexport\", i.span,\n                                       \"macros reexports are experimental \\\n                                        and possibly buggy\");\n@@ -462,6 +458,10 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n         if attr.check_name(\"staged_api\") {\n             self.gate_feature(\"staged_api\", attr.span,\n                               \"staged_api is for use by rustc only\");\n+        } else if attr.check_name(\"plugin\") {\n+            self.gate_feature(\"plugin\", attr.span,\n+                              \"compiler plugins are experimental \\\n+                               and possibly buggy\");\n         }\n \n         if attr::contains_name(slice::ref_slice(attr), \"lang\") {"}, {"sha": "907d80b50db82729f77d4a5329e9e5018db18757", "filename": "src/test/auxiliary/plugin_args.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_args.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -27,18 +27,17 @@ use syntax::ptr::P;\n use rustc::plugin::Registry;\n \n struct Expander {\n-    args: P<ast::MetaItem>,\n+    args: Vec<P<ast::MetaItem>>,\n }\n \n impl TTMacroExpander for Expander {\n     fn expand<'cx>(&self,\n                    ecx: &'cx mut ExtCtxt,\n                    sp: Span,\n                    _: &[ast::TokenTree]) -> Box<MacResult+'cx> {\n-\n-        let attr = ecx.attribute(sp, self.args.clone());\n-        let src = pprust::attribute_to_string(&attr);\n-        let interned = token::intern_and_get_ident(&src);\n+        let args = self.args.iter().map(|i| pprust::meta_item_to_string(&*i))\n+            .collect::<Vec<_>>().connect(\", \");\n+        let interned = token::intern_and_get_ident(&args[]);\n         MacExpr::new(ecx.expr_str(sp, interned))\n     }\n }"}, {"sha": "338e04fbb074646cb9d46c06654ea662c68490a6", "filename": "src/test/auxiliary/syntax_extension_with_dll_deps_1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_1.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "previous_filename": "src/test/auxiliary/syntax-extension-with-dll-deps-1.rs"}, {"sha": "7a24dd76f32c8e6093da9d92424204c2b173ca5a", "filename": "src/test/auxiliary/syntax_extension_with_dll_deps_2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -13,7 +13,7 @@\n #![crate_type = \"dylib\"]\n #![feature(plugin_registrar, quote)]\n \n-extern crate \"syntax-extension-with-dll-deps-1\" as other;\n+extern crate \"syntax_extension_with_dll_deps_1\" as other;\n extern crate syntax;\n extern crate rustc;\n ", "previous_filename": "src/test/auxiliary/syntax-extension-with-dll-deps-2.rs"}, {"sha": "9fa93063ea3a5a4235427a250e8425e7df113574", "filename": "src/test/compile-fail-fulldeps/gated-plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-plugin.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -11,7 +11,7 @@\n // aux-build:macro_crate_test.rs\n // ignore-stage1\n \n-#[plugin] #[no_link] extern crate macro_crate_test;\n+#![plugin(macro_crate_test)]\n //~^ ERROR compiler plugins are experimental and possibly buggy\n \n fn main() {}"}, {"sha": "a523799278c01ba3b901acf82547ddebfea10e7a", "filename": "src/test/compile-fail-fulldeps/lint-group-plugin-deny-cmdline.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-group-plugin-deny-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-group-plugin-deny-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-group-plugin-deny-cmdline.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -13,9 +13,7 @@\n // compile-flags: -D lint-me\n \n #![feature(plugin)]\n-\n-#[plugin] #[no_link]\n-extern crate lint_group_plugin_test;\n+#![plugin(lint_group_plugin_test)]\n \n fn lintme() { } //~ ERROR item is named 'lintme'\n "}, {"sha": "e3dbdc331a763fd115558573c95878eb9c4bd5f1", "filename": "src/test/compile-fail-fulldeps/lint-plugin-deny-attr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-plugin-deny-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-plugin-deny-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-plugin-deny-attr.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -12,11 +12,9 @@\n // ignore-stage1\n \n #![feature(plugin)]\n+#![plugin(lint_plugin_test)]\n #![deny(test_lint)]\n \n-#[plugin] #[no_link]\n-extern crate lint_plugin_test;\n-\n fn lintme() { } //~ ERROR item is named 'lintme'\n \n pub fn main() {"}, {"sha": "41d25becd8452a87126f63c6f6f602a9dcf78c7c", "filename": "src/test/compile-fail-fulldeps/lint-plugin-deny-cmdline.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-plugin-deny-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-plugin-deny-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-plugin-deny-cmdline.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -13,9 +13,7 @@\n // compile-flags: -D test-lint\n \n #![feature(plugin)]\n-\n-#[plugin] #[no_link]\n-extern crate lint_plugin_test;\n+#![plugin(lint_plugin_test)]\n \n fn lintme() { } //~ ERROR item is named 'lintme'\n "}, {"sha": "83c845bfdf96ef413adc5fc39ddcae2383ebc702", "filename": "src/test/compile-fail-fulldeps/lint-plugin-forbid-attrs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-plugin-forbid-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-plugin-forbid-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-plugin-forbid-attrs.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -12,11 +12,9 @@\n // ignore-stage1\n \n #![feature(plugin)]\n+#![plugin(lint_plugin_test)]\n #![forbid(test_lint)]\n \n-#[plugin] #[no_link]\n-extern crate lint_plugin_test;\n-\n fn lintme() { } //~ ERROR item is named 'lintme'\n \n #[allow(test_lint)] //~ ERROR allow(test_lint) overruled by outer forbid(test_lint)"}, {"sha": "155294f8026abdc58e0517c8deadd5d8f82ca2e0", "filename": "src/test/compile-fail-fulldeps/lint-plugin-forbid-cmdline.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-plugin-forbid-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-plugin-forbid-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-plugin-forbid-cmdline.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -13,9 +13,7 @@\n // compile-flags: -F test-lint\n \n #![feature(plugin)]\n-\n-#[plugin] #[no_link]\n-extern crate lint_plugin_test;\n+#![plugin(lint_plugin_test)]\n \n fn lintme() { } //~ ERROR item is named 'lintme'\n "}, {"sha": "c9ca6e5326c69474a50fda738f119df4cf0b6502", "filename": "src/test/compile-fail-fulldeps/macro-crate-cannot-read-embedded-ident.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-cannot-read-embedded-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-cannot-read-embedded-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-cannot-read-embedded-ident.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -21,9 +21,7 @@\n // ident form.\n \n #![feature(plugin)]\n-\n-#[plugin] #[no_link]\n-extern crate macro_crate_test;\n+#![plugin(macro_crate_test)]\n \n fn main() {\n     let x = 0;"}, {"sha": "7d38d4352b0de6bbff13da1ce964b9cee31a8c18", "filename": "src/test/compile-fail-fulldeps/macro-crate-rlib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-rlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-rlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-rlib.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -15,7 +15,7 @@\n // ignore-cross-compile gives a different error message\n \n #![feature(plugin)]\n-#[plugin] #[no_link] extern crate rlib_crate_test;\n+#![plugin(rlib_crate_test)]\n //~^ ERROR: plugin crate `rlib_crate_test` only found in rlib format, but must be available in dylib format\n \n fn main() {}"}, {"sha": "68b27822d3d0d2d3dc5919e814459418e7c705e8", "filename": "src/test/compile-fail-fulldeps/plugin-MacroRulesTT.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-MacroRulesTT.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-MacroRulesTT.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-MacroRulesTT.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -14,8 +14,6 @@\n // error-pattern: plugin tried to register a new MacroRulesTT\n \n #![feature(plugin)]\n-\n-#[plugin] #[no_link]\n-extern crate macro_crate_MacroRulesTT;\n+#![plugin(macro_crate_MacroRulesTT)]\n \n fn main() { }"}, {"sha": "254a797ef1cd0a54462062b634db348fcf9d0e2b", "filename": "src/test/compile-fail/malformed-plugin-1.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-1.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[plugin]\n-#[plugin]  //~ ERROR #[plugin] specified multiple times\n-extern crate std;\n+#![plugin] //~ ERROR malformed plugin attribute\n \n fn main() {}", "previous_filename": "src/test/compile-fail/multi-plugin-attr.rs"}, {"sha": "884087b7bc534204f97f9c0513fc1102077962f6", "filename": "src/test/compile-fail/malformed-plugin-2.rs", "status": "renamed", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-2.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -8,15 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:plugin_args.rs\n-// ignore-stage1\n+#![plugin=\"bleh\"] //~ ERROR malformed plugin attribute\n \n-#![feature(plugin)]\n-\n-#[no_link]\n-#[plugin=\"foobar\"]\n-extern crate plugin_args;\n-\n-fn main() {\n-    assert_eq!(plugin_args!(), \"#[plugin = \\\"foobar\\\"]\");\n-}\n+fn main() {}", "previous_filename": "src/test/run-pass-fulldeps/plugin-args-4.rs"}, {"sha": "4885bb901df681fd68abd6daeb35db9aea4b5642", "filename": "src/test/compile-fail/malformed-plugin-3.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-3.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![plugin(foo=\"bleh\")] //~ ERROR malformed plugin attribute\n+\n+fn main() {}"}, {"sha": "ccda5cbdceba6b2e156dcf775ba51a2641026a46", "filename": "src/test/compile-fail/plugin-extern-crate-attr-deprecated.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail%2Fplugin-extern-crate-attr-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Fcompile-fail%2Fplugin-extern-crate-attr-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fplugin-extern-crate-attr-deprecated.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[plugin]  //~ ERROR #[plugin] on `extern crate` is deprecated\n+//~^ HELP use a crate attribute instead, i.e. #![plugin(std)]\n+extern crate std;\n+\n+fn main() {}"}, {"sha": "c59a3589c04af3eded86a01ca5d88d38038e6e55", "filename": "src/test/run-pass-fulldeps/issue_16723_multiple_items_syntax_ext.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fissue_16723_multiple_items_syntax_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fissue_16723_multiple_items_syntax_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue_16723_multiple_items_syntax_ext.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -12,8 +12,7 @@\n // ignore-android\n // aux-build:issue_16723_multiple_items_syntax_ext.rs\n #![feature(plugin)]\n-\n-#[plugin] #[no_link] extern crate issue_16723_multiple_items_syntax_ext;\n+#![plugin(issue_16723_multiple_items_syntax_ext)]\n \n multiple_items!();\n "}, {"sha": "1a639cdb9ddfa24e3edbd479e50f4f0b02250b4c", "filename": "src/test/run-pass-fulldeps/lint-group-plugin.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Flint-group-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Flint-group-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Flint-group-plugin.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -13,9 +13,7 @@\n // ignore-pretty\n \n #![feature(plugin)]\n-\n-#[plugin] #[no_link]\n-extern crate lint_group_plugin_test;\n+#![plugin(lint_group_plugin_test)]\n \n fn lintme() { } //~ WARNING item is named 'lintme'\n fn pleaselintme() { } //~ WARNING item is named 'pleaselintme'"}, {"sha": "204312064b582aee3be39012549a86f3b128205e", "filename": "src/test/run-pass-fulldeps/lint-plugin-cmdline-allow.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Flint-plugin-cmdline-allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Flint-plugin-cmdline-allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Flint-plugin-cmdline-allow.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -13,9 +13,7 @@\n // compile-flags: -A test-lint\n \n #![feature(plugin)]\n-\n-#[plugin] #[no_link]\n-extern crate lint_plugin_test;\n+#![plugin(lint_plugin_test)]\n \n fn lintme() { }\n "}, {"sha": "8311e188f922935c29517e1f74013c0c3bc01bce", "filename": "src/test/run-pass-fulldeps/lint-plugin.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Flint-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Flint-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Flint-plugin.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -13,9 +13,7 @@\n // ignore-pretty\n \n #![feature(plugin)]\n-\n-#[plugin] #[no_link]\n-extern crate lint_plugin_test;\n+#![plugin(lint_plugin_test)]\n \n fn lintme() { } //~ WARNING item is named 'lintme'\n "}, {"sha": "8ed47fe1f6f200127f4c821aa8be75cdaa93abb3", "filename": "src/test/run-pass-fulldeps/macro-crate-does-hygiene-work.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-does-hygiene-work.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-does-hygiene-work.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-does-hygiene-work.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -15,9 +15,7 @@\n // uses `quote_expr!` to rearrange it should be hygiene-preserving.\n \n #![feature(plugin)]\n-\n-#[plugin] #[no_link]\n-extern crate macro_crate_test;\n+#![plugin(macro_crate_test)]\n \n fn main() {\n     let x = 3;"}, {"sha": "9573d0c8c403044e57413f5011fdc2c5ae4d8edd", "filename": "src/test/run-pass-fulldeps/macro-crate-outlive-expansion-phase.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-outlive-expansion-phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-outlive-expansion-phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-outlive-expansion-phase.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -12,8 +12,6 @@\n // ignore-stage1\n \n #![feature(plugin)]\n-\n-#[plugin] #[no_link]\n-extern crate plugin_crate_outlive_expansion_phase;\n+#![plugin(plugin_crate_outlive_expansion_phase)]\n \n pub fn main() {}"}, {"sha": "58ccd79b7121dbe9afe8201db76283556de8a170", "filename": "src/test/run-pass-fulldeps/macro-crate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -12,8 +12,9 @@\n // ignore-stage1\n \n #![feature(plugin)]\n+#![plugin(macro_crate_test)]\n \n-#[macro_use] #[plugin] #[no_link]\n+#[macro_use] #[no_link]\n extern crate macro_crate_test;\n \n #[into_foo]"}, {"sha": "4d4f9092bc8251d377df2f1ced6cd1a90ead99c5", "filename": "src/test/run-pass-fulldeps/plugin-args-1.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-args-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-args-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-args-1.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -12,11 +12,8 @@\n // ignore-stage1\n \n #![feature(plugin)]\n-\n-#[no_link]\n-#[plugin]\n-extern crate plugin_args;\n+#![plugin(plugin_args)]\n \n fn main() {\n-    assert_eq!(plugin_args!(), \"#[plugin]\");\n+    assert_eq!(plugin_args!(), \"\");\n }"}, {"sha": "4da566aec4282f1c869f2d6df81bf8c4f3183511", "filename": "src/test/run-pass-fulldeps/plugin-args-2.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-args-2.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -12,11 +12,8 @@\n // ignore-stage1\n \n #![feature(plugin)]\n-\n-#[no_link]\n-#[plugin()]\n-extern crate plugin_args;\n+#![plugin(plugin_args())]\n \n fn main() {\n-    assert_eq!(plugin_args!(), \"#[plugin()]\");\n+    assert_eq!(plugin_args!(), \"\");\n }"}, {"sha": "0a064933aec4a4bb32cfa7bb7e1bca49a451b7b9", "filename": "src/test/run-pass-fulldeps/plugin-args-3.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-args-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-args-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-args-3.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -12,11 +12,8 @@\n // ignore-stage1\n \n #![feature(plugin)]\n-\n-#[no_link]\n-#[plugin(hello(there), how(are=\"you\"))]\n-extern crate plugin_args;\n+#![plugin(plugin_args(hello(there), how(are=\"you\")))]\n \n fn main() {\n-    assert_eq!(plugin_args!(), \"#[plugin(hello(there), how(are = \\\"you\\\"))]\");\n+    assert_eq!(plugin_args!(), \"hello(there), how(are = \\\"you\\\")\");\n }"}, {"sha": "0c27dba9c627f72dffe91c140e4991540d6032a5", "filename": "src/test/run-pass-fulldeps/plugin-plus-extern-crate.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-plus-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-plus-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-plus-extern-crate.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -16,8 +16,8 @@\n // libsyntax is not compiled for it.\n \n #![feature(plugin)]\n+#![plugin(macro_crate_test)]\n \n-#[plugin]\n extern crate macro_crate_test;\n \n fn main() {", "previous_filename": "src/test/run-pass-fulldeps/plugin-link-does-resolve.rs"}, {"sha": "81f5c649626c35f9eb375613b05fc840dd1085c2", "filename": "src/test/run-pass-fulldeps/roman-numerals-macro.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Froman-numerals-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Froman-numerals-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Froman-numerals-macro.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -12,9 +12,7 @@\n // ignore-stage1\n \n #![feature(plugin)]\n-\n-#[plugin] #[no_link]\n-extern crate roman_numerals;\n+#![plugin(roman_numerals)]\n \n pub fn main() {\n     assert_eq!(rn!(MMXV), 2015);"}, {"sha": "b7570eb09261286a84f9830a5fe7066bf1464639", "filename": "src/test/run-pass-fulldeps/syntax-extension-with-dll-deps.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-with-dll-deps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c06a1be0ccfcf1a8e105fc98d126de372dbd40/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-with-dll-deps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-with-dll-deps.rs?ref=94c06a1be0ccfcf1a8e105fc98d126de372dbd40", "patch": "@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:syntax-extension-with-dll-deps-1.rs\n-// aux-build:syntax-extension-with-dll-deps-2.rs\n+// aux-build:syntax_extension_with_dll_deps_1.rs\n+// aux-build:syntax_extension_with_dll_deps_2.rs\n // ignore-stage1\n \n #![feature(plugin)]\n-\n-#[plugin] #[no_link]\n-extern crate \"syntax-extension-with-dll-deps-2\" as extension;\n+#![plugin(syntax_extension_with_dll_deps_2)]\n \n fn main() {\n     foo!();"}]}