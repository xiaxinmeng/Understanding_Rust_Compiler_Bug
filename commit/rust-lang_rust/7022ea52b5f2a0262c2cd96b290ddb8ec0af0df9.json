{"sha": "7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMjJlYTUyYjVmMmEwMjYyYzJjZDk2YjI5MGRkYjhlYzBhZjBkZjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-07T11:15:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-07T11:15:02Z"}, "message": "AdtDef -> Adt", "tree": {"sha": "b5b73fc760b261fafda58a3e20e04b8e74559c60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5b73fc760b261fafda58a3e20e04b8e74559c60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9", "html_url": "https://github.com/rust-lang/rust/commit/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a87ec198b25c5938c651ef087f9ebf923c34f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a87ec198b25c5938c651ef087f9ebf923c34f8", "html_url": "https://github.com/rust-lang/rust/commit/75a87ec198b25c5938c651ef087f9ebf923c34f8"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "894fadcb2b060e9de464e4e3064adc1a2715721d", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9", "patch": "@@ -1816,9 +1816,9 @@ checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.10.0\"\n+version = \"1.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ce24866975a8858d3a35eba845efc6b42962c5067afd2bc1a07b9ce0108d335c\"\n+checksum = \"84c629795d377049f2a1dc5f42cf505dc5ba8b28a5df0a03f4183a24480e4a6a\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "2edf7b204b1714d9cb2f15cbc03209c1dda4594a", "filename": "crates/assists/src/handlers/add_lifetime_to_type.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_lifetime_to_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_lifetime_to_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_lifetime_to_type.rs?ref=7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9", "patch": "@@ -26,7 +26,7 @@ pub(crate) fn add_lifetime_to_type(acc: &mut Assists, ctx: &AssistContext) -> Op\n         return None;\n     }\n \n-    let node = ctx.find_node_at_offset::<ast::AdtDef>()?;\n+    let node = ctx.find_node_at_offset::<ast::Adt>()?;\n     let has_lifetime = node\n         .generic_param_list()\n         .map(|gen_list| gen_list.lifetime_params().count() > 0)\n@@ -66,9 +66,9 @@ pub(crate) fn add_lifetime_to_type(acc: &mut Assists, ctx: &AssistContext) -> Op\n     )\n }\n \n-fn fetch_borrowed_types(node: &ast::AdtDef) -> Option<Vec<RefType>> {\n+fn fetch_borrowed_types(node: &ast::Adt) -> Option<Vec<RefType>> {\n     let ref_types: Vec<RefType> = match node {\n-        ast::AdtDef::Enum(enum_) => {\n+        ast::Adt::Enum(enum_) => {\n             let variant_list = enum_.variant_list()?;\n             variant_list\n                 .variants()\n@@ -80,11 +80,11 @@ fn fetch_borrowed_types(node: &ast::AdtDef) -> Option<Vec<RefType>> {\n                 .flatten()\n                 .collect()\n         }\n-        ast::AdtDef::Struct(strukt) => {\n+        ast::Adt::Struct(strukt) => {\n             let field_list = strukt.field_list()?;\n             find_ref_types_from_field_list(&field_list)?\n         }\n-        ast::AdtDef::Union(un) => {\n+        ast::Adt::Union(un) => {\n             let record_field_list = un.record_field_list()?;\n             record_field_list\n                 .fields()"}, {"sha": "adae8ab7e92e978f087cd08b0071c983366b83fb", "filename": "crates/assists/src/handlers/generate_derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs?ref=7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9", "patch": "@@ -26,7 +26,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n pub(crate) fn generate_derive(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let cap = ctx.config.snippet_cap?;\n-    let nominal = ctx.find_node_at_offset::<ast::AdtDef>()?;\n+    let nominal = ctx.find_node_at_offset::<ast::Adt>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n     let target = nominal.syntax().text_range();\n     acc.add(\n@@ -58,7 +58,7 @@ pub(crate) fn generate_derive(acc: &mut Assists, ctx: &AssistContext) -> Option<\n }\n \n // Insert `derive` after doc comments.\n-fn derive_insertion_offset(nominal: &ast::AdtDef) -> Option<TextSize> {\n+fn derive_insertion_offset(nominal: &ast::Adt) -> Option<TextSize> {\n     let non_ws_child = nominal\n         .syntax()\n         .children_with_tokens()"}, {"sha": "9d6b161c98a9fe4d6d0253361dd726be21ed4004", "filename": "crates/assists/src/handlers/generate_enum_match_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs?ref=7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9", "patch": "@@ -49,7 +49,7 @@ pub(crate) fn generate_enum_match_method(acc: &mut Assists, ctx: &AssistContext)\n     // Return early if we've found an existing new fn\n     let impl_def = find_struct_impl(\n         &ctx,\n-        &ast::AdtDef::Enum(parent_enum.clone()),\n+        &ast::Adt::Enum(parent_enum.clone()),\n         format!(\"is_{}\", fn_name).as_str(),\n     )?;\n "}, {"sha": "61d1bd25c1300cf7ead9b6fc921aaaed235a3897", "filename": "crates/assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9", "patch": "@@ -27,7 +27,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let nominal = ctx.find_node_at_offset::<ast::AdtDef>()?;\n+    let nominal = ctx.find_node_at_offset::<ast::Adt>()?;\n     let name = nominal.name()?;\n     let target = nominal.syntax().text_range();\n "}, {"sha": "a9203d33f25b580e8562771344bac838bed4e44e", "filename": "crates/assists/src/handlers/generate_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     };\n \n     // Return early if we've found an existing new fn\n-    let impl_def = find_struct_impl(&ctx, &ast::AdtDef::Struct(strukt.clone()), \"new\")?;\n+    let impl_def = find_struct_impl(&ctx, &ast::Adt::Struct(strukt.clone()), \"new\")?;\n \n     let target = strukt.syntax().text_range();\n     acc.add(AssistId(\"generate_new\", AssistKind::Generate), \"Generate `new`\", target, |builder| {"}, {"sha": "cd80c29586a52d21a603789662195eee87dccb52", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9", "patch": "@@ -281,7 +281,7 @@ pub(crate) fn does_pat_match_variant(pat: &ast::Pat, var: &ast::Pat) -> bool {\n // FIXME: this partially overlaps with `find_impl_block`\n pub(crate) fn find_struct_impl(\n     ctx: &AssistContext,\n-    strukt: &ast::AdtDef,\n+    strukt: &ast::Adt,\n     name: &str,\n ) -> Option<Option<ast::Impl>> {\n     let db = ctx.db();\n@@ -290,9 +290,9 @@ pub(crate) fn find_struct_impl(\n     })?;\n \n     let struct_def = match strukt {\n-        ast::AdtDef::Enum(e) => Adt::Enum(ctx.sema.to_def(e)?),\n-        ast::AdtDef::Struct(s) => Adt::Struct(ctx.sema.to_def(s)?),\n-        ast::AdtDef::Union(u) => Adt::Union(ctx.sema.to_def(u)?),\n+        ast::Adt::Enum(e) => Adt::Enum(ctx.sema.to_def(e)?),\n+        ast::Adt::Struct(s) => Adt::Struct(ctx.sema.to_def(s)?),\n+        ast::Adt::Union(u) => Adt::Union(ctx.sema.to_def(u)?),\n     };\n \n     let block = module.descendants().filter_map(ast::Impl::cast).find_map(|impl_blk| {"}, {"sha": "3990305fce2827301ff1457b15b192c120a916cd", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn goto_implementation(\n \n     let krate = sema.to_module_def(position.file_id)?.krate();\n \n-    if let Some(nominal_def) = find_node_at_offset::<ast::AdtDef>(&syntax, position.offset) {\n+    if let Some(nominal_def) = find_node_at_offset::<ast::Adt>(&syntax, position.offset) {\n         return Some(RangeInfo::new(\n             nominal_def.syntax().text_range(),\n             impls_for_def(&sema, &nominal_def, krate)?,\n@@ -40,13 +40,13 @@ pub(crate) fn goto_implementation(\n \n fn impls_for_def(\n     sema: &Semantics<RootDatabase>,\n-    node: &ast::AdtDef,\n+    node: &ast::Adt,\n     krate: Crate,\n ) -> Option<Vec<NavigationTarget>> {\n     let ty = match node {\n-        ast::AdtDef::Struct(def) => sema.to_def(def)?.ty(sema.db),\n-        ast::AdtDef::Enum(def) => sema.to_def(def)?.ty(sema.db),\n-        ast::AdtDef::Union(def) => sema.to_def(def)?.ty(sema.db),\n+        ast::Adt::Struct(def) => sema.to_def(def)?.ty(sema.db),\n+        ast::Adt::Enum(def) => sema.to_def(def)?.ty(sema.db),\n+        ast::Adt::Union(def) => sema.to_def(def)?.ty(sema.db),\n     };\n \n     let impls = Impl::all_in_crate(sema.db, krate);"}, {"sha": "064931aece09c62262c13c1706af644623f3bc7b", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=7022ea52b5f2a0262c2cd96b290ddb8ec0af0df9", "patch": "@@ -1401,15 +1401,15 @@ pub enum FieldList {\n     TupleFieldList(TupleFieldList),\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum AdtDef {\n+pub enum Adt {\n     Enum(Enum),\n     Struct(Struct),\n     Union(Union),\n }\n-impl ast::AttrsOwner for AdtDef {}\n-impl ast::GenericParamsOwner for AdtDef {}\n-impl ast::NameOwner for AdtDef {}\n-impl ast::VisibilityOwner for AdtDef {}\n+impl ast::AttrsOwner for Adt {}\n+impl ast::GenericParamsOwner for Adt {}\n+impl ast::NameOwner for Adt {}\n+impl ast::VisibilityOwner for Adt {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum AssocItem {\n     Const(Const),\n@@ -3394,16 +3394,16 @@ impl AstNode for FieldList {\n         }\n     }\n }\n-impl From<Enum> for AdtDef {\n-    fn from(node: Enum) -> AdtDef { AdtDef::Enum(node) }\n+impl From<Enum> for Adt {\n+    fn from(node: Enum) -> Adt { Adt::Enum(node) }\n }\n-impl From<Struct> for AdtDef {\n-    fn from(node: Struct) -> AdtDef { AdtDef::Struct(node) }\n+impl From<Struct> for Adt {\n+    fn from(node: Struct) -> Adt { Adt::Struct(node) }\n }\n-impl From<Union> for AdtDef {\n-    fn from(node: Union) -> AdtDef { AdtDef::Union(node) }\n+impl From<Union> for Adt {\n+    fn from(node: Union) -> Adt { Adt::Union(node) }\n }\n-impl AstNode for AdtDef {\n+impl AstNode for Adt {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             ENUM | STRUCT | UNION => true,\n@@ -3412,18 +3412,18 @@ impl AstNode for AdtDef {\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n-            ENUM => AdtDef::Enum(Enum { syntax }),\n-            STRUCT => AdtDef::Struct(Struct { syntax }),\n-            UNION => AdtDef::Union(Union { syntax }),\n+            ENUM => Adt::Enum(Enum { syntax }),\n+            STRUCT => Adt::Struct(Struct { syntax }),\n+            UNION => Adt::Union(Union { syntax }),\n             _ => return None,\n         };\n         Some(res)\n     }\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n-            AdtDef::Enum(it) => &it.syntax,\n-            AdtDef::Struct(it) => &it.syntax,\n-            AdtDef::Union(it) => &it.syntax,\n+            Adt::Enum(it) => &it.syntax,\n+            Adt::Struct(it) => &it.syntax,\n+            Adt::Union(it) => &it.syntax,\n         }\n     }\n }\n@@ -3571,7 +3571,7 @@ impl std::fmt::Display for FieldList {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for AdtDef {\n+impl std::fmt::Display for Adt {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}]}