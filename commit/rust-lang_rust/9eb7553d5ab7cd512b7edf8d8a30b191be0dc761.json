{"sha": "9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "node_id": "C_kwDOAAsO6NoAKDllYjc1NTNkNWFiN2NkNTEyYjdlZGY4ZDhhMzBiMTkxYmUwZGM3NjE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-29T16:10:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-29T16:10:20Z"}, "message": "Merge #11842\n\n11842: Fix duplicate type mismatches with blocks r=flodiebold a=flodiebold\n\nE.g. when there's a type mismatch on the return value of a function. To fix this, we have to return the expected type as the type of the block when there's a mismatch. That meant some IDE code that expected otherwise had to be adapted, in particular the \"add return type\" assist. For the \"wrap in Ok/Some\" quickfix, this sadly means it usually can't be applied in all branches of an if expression at the same time anymore, because there's a type mismatch for each branch that has the wrong type.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "816fd2ec86cf2666dcd9e46aa12efca10f2a9bba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/816fd2ec86cf2666dcd9e46aa12efca10f2a9bba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiQy9tCRBK7hj4Ov3rIwAAagEIACZ8h9KLU1UnXnnm5+wF2bRp\nHSMCTPGEsT9sX5pm+F5tt3fb88uwdP5BOgbejaEbLMt00eUKdlkgnOvxZgS6imRy\nZpI34IOr6+cu4RvVlXrvXC5hixMxPbG3HsDzTEZjdaNQQO86QMFwwnv6KuDNIcaA\nGVzxhEuNnd+JKUxrTZWDKlhuZvvyePzqQ0BdkK0kmLOg7cWls2fusWRh6RusUQ85\nRIDZzLRjvBFH5TDlToSfXr7RealFNUNW3kFJqy6kBtciTLMJrlOx1EU111kS6goU\ncffIzyzv5kh3lyZNkSZm+xi6dbr/xOuzPtOyqv8CKkAVWOxZRGAWxaqfop3e7lg=\n=CK5P\n-----END PGP SIGNATURE-----\n", "payload": "tree 816fd2ec86cf2666dcd9e46aa12efca10f2a9bba\nparent 89d495eb306544ecb1c3e9471725cefb4c87d203\nparent 0c4bdd2f32d212158cf831720d5379de9907f0a6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1648570220 +0000\ncommitter GitHub <noreply@github.com> 1648570220 +0000\n\nMerge #11842\n\n11842: Fix duplicate type mismatches with blocks r=flodiebold a=flodiebold\n\nE.g. when there's a type mismatch on the return value of a function. To fix this, we have to return the expected type as the type of the block when there's a mismatch. That meant some IDE code that expected otherwise had to be adapted, in particular the \"add return type\" assist. For the \"wrap in Ok/Some\" quickfix, this sadly means it usually can't be applied in all branches of an if expression at the same time anymore, because there's a type mismatch for each branch that has the wrong type.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "html_url": "https://github.com/rust-lang/rust/commit/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89d495eb306544ecb1c3e9471725cefb4c87d203", "url": "https://api.github.com/repos/rust-lang/rust/commits/89d495eb306544ecb1c3e9471725cefb4c87d203", "html_url": "https://github.com/rust-lang/rust/commit/89d495eb306544ecb1c3e9471725cefb4c87d203"}, {"sha": "0c4bdd2f32d212158cf831720d5379de9907f0a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c4bdd2f32d212158cf831720d5379de9907f0a6", "html_url": "https://github.com/rust-lang/rust/commit/0c4bdd2f32d212158cf831720d5379de9907f0a6"}], "stats": {"total": 295, "additions": 212, "deletions": 83}, "files": [{"sha": "0b67f2c32e58d7e2c0336054f29d1c9d97999d30", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "patch": "@@ -69,12 +69,11 @@ impl<'a> InferenceContext<'a> {\n             match self.coerce(Some(expr), &ty, &target) {\n                 Ok(res) => res,\n                 Err(_) => {\n-                    self.result\n-                        .type_mismatches\n-                        .insert(expr.into(), TypeMismatch { expected: target, actual: ty.clone() });\n-                    // Return actual type when type mismatch.\n-                    // This is needed for diagnostic when return type mismatch.\n-                    ty\n+                    self.result.type_mismatches.insert(\n+                        expr.into(),\n+                        TypeMismatch { expected: target.clone(), actual: ty.clone() },\n+                    );\n+                    target\n                 }\n             }\n         } else {\n@@ -914,9 +913,16 @@ impl<'a> InferenceContext<'a> {\n                 self.table.new_maybe_never_var()\n             } else {\n                 if let Some(t) = expected.only_has_type(&mut self.table) {\n-                    let _ = self.coerce(Some(expr), &TyBuilder::unit(), &t);\n+                    if self.coerce(Some(expr), &TyBuilder::unit(), &t).is_err() {\n+                        self.result.type_mismatches.insert(\n+                            expr.into(),\n+                            TypeMismatch { expected: t.clone(), actual: TyBuilder::unit() },\n+                        );\n+                    }\n+                    t\n+                } else {\n+                    TyBuilder::unit()\n                 }\n-                TyBuilder::unit()\n             }\n         }\n     }"}, {"sha": "d2f13e4351c73b17cca725446ddfcbd772988e4f", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "patch": "@@ -8,6 +8,7 @@ mod method_resolution;\n mod macros;\n mod display_source_code;\n mod incremental;\n+mod diagnostics;\n \n use std::{collections::HashMap, env, sync::Arc};\n "}, {"sha": "268faf8cb3a0643a7fb842f604af28213673393b", "filename": "crates/hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "patch": "@@ -2,12 +2,10 @@ use super::{check, check_no_mismatches, check_types};\n \n #[test]\n fn block_expr_type_mismatch() {\n-    // FIXME fix double type mismatch\n     check(\n         r\"\n fn test() {\n     let a: i32 = { 1i64 };\n-              // ^^^^^^^^ expected i32, got i64\n                 // ^^^^ expected i32, got i64\n }\n         \","}, {"sha": "f00fa97294877f8d65343e5bcb87c23ef3a1157c", "filename": "crates/hir_ty/src/tests/diagnostics.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Ftests%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Ftests%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fdiagnostics.rs?ref=9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "patch": "@@ -0,0 +1,75 @@\n+use super::check;\n+\n+#[test]\n+fn function_return_type_mismatch_1() {\n+    check(\n+        r#\"\n+fn test() -> &'static str {\n+    5\n+  //^ expected &str, got i32\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn function_return_type_mismatch_2() {\n+    check(\n+        r#\"\n+fn test(x: bool) -> &'static str {\n+    if x {\n+        return 1;\n+             //^ expected &str, got i32\n+    }\n+    \"ok\"\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn function_return_type_mismatch_3() {\n+    check(\n+        r#\"\n+fn test(x: bool) -> &'static str {\n+    if x {\n+        return \"ok\";\n+    }\n+    1\n+  //^ expected &str, got i32\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn function_return_type_mismatch_4() {\n+    check(\n+        r#\"\n+fn test(x: bool) -> &'static str {\n+    if x {\n+        \"ok\"\n+    } else {\n+        1\n+      //^ expected &str, got i32\n+    }\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn function_return_type_mismatch_5() {\n+    check(\n+        r#\"\n+fn test(x: bool) -> &'static str {\n+    if x {\n+        1\n+      //^ expected &str, got i32\n+    } else {\n+        \"ok\"\n+    }\n+}\n+\"#,\n+    );\n+}"}, {"sha": "3ca0a5b391d060e42b0fcacf77238c5bfdacfd5d", "filename": "crates/hir_ty/src/tests/never_type.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Ftests%2Fnever_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Ftests%2Fnever_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fnever_type.rs?ref=9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "patch": "@@ -314,11 +314,10 @@ fn diverging_expression_2() {\n         expect![[r#\"\n             11..84 '{     ...\" }; }': ()\n             54..55 'x': u32\n-            63..81 '{ loop...foo\" }': &str\n+            63..81 '{ loop...foo\" }': u32\n             65..72 'loop {}': !\n             70..72 '{}': ()\n             74..79 '\"foo\"': &str\n-            63..81: expected u32, got &str\n             74..79: expected u32, got &str\n         \"#]],\n     );\n@@ -350,31 +349,30 @@ fn diverging_expression_3_break() {\n             let x: u32 = { while true { return; }; };\n         }\n         \",\n-        expect![[r\"\n+        expect![[r#\"\n             11..85 '{     ...} }; }': ()\n             54..55 'x': u32\n-            63..82 '{ loop...k; } }': ()\n+            63..82 '{ loop...k; } }': u32\n             65..80 'loop { break; }': ()\n             70..80 '{ break; }': ()\n             72..77 'break': !\n-            63..82: expected u32, got ()\n             65..80: expected u32, got ()\n             97..343 '{     ...; }; }': ()\n             140..141 'x': u32\n-            149..175 '{ for ...; }; }': ()\n+            149..175 '{ for ...; }; }': u32\n             151..172 'for a ...eak; }': ()\n             155..156 'a': {unknown}\n             160..161 'b': {unknown}\n             162..172 '{ break; }': ()\n             164..169 'break': !\n             226..227 'x': u32\n-            235..253 '{ for ... {}; }': ()\n+            235..253 '{ for ... {}; }': u32\n             237..250 'for a in b {}': ()\n             241..242 'a': {unknown}\n             246..247 'b': {unknown}\n             248..250 '{}': ()\n             304..305 'x': u32\n-            313..340 '{ for ...; }; }': ()\n+            313..340 '{ for ...; }; }': u32\n             315..337 'for a ...urn; }': ()\n             319..320 'a': {unknown}\n             324..325 'b': {unknown}\n@@ -385,26 +383,26 @@ fn diverging_expression_3_break() {\n             313..340: expected u32, got ()\n             355..654 '{     ...; }; }': ()\n             398..399 'x': u32\n-            407..433 '{ whil...; }; }': ()\n+            407..433 '{ whil...; }; }': u32\n             409..430 'while ...eak; }': ()\n             415..419 'true': bool\n             420..430 '{ break; }': ()\n             422..427 'break': !\n             537..538 'x': u32\n-            546..564 '{ whil... {}; }': ()\n+            546..564 '{ whil... {}; }': u32\n             548..561 'while true {}': ()\n             554..558 'true': bool\n             559..561 '{}': ()\n             615..616 'x': u32\n-            624..651 '{ whil...; }; }': ()\n+            624..651 '{ whil...; }; }': u32\n             626..648 'while ...urn; }': ()\n             632..636 'true': bool\n             637..648 '{ return; }': ()\n             639..645 'return': !\n             407..433: expected u32, got ()\n             546..564: expected u32, got ()\n             624..651: expected u32, got ()\n-        \"]],\n+        \"#]],\n     );\n }\n \n@@ -438,7 +436,7 @@ fn let_else_must_diverge() {\n             17..18 '1': i32\n             17..18 '1': i32\n             21..22 '2': i32\n-            28..30 '{}': ()\n+            28..30 '{}': !\n             28..30: expected !, got ()\n         \"#]],\n     );"}, {"sha": "2809b1e912a8dd409983aeb85a1fa4cc4cd4d275", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "patch": "@@ -367,7 +367,7 @@ fn bug_1030() {\n         }\n         \"#,\n         expect![[r#\"\n-            143..145 '{}': ()\n+            143..145 '{}': HashSet<T, H>\n             168..197 '{     ...t(); }': ()\n             174..192 'FxHash...efault': fn default<{unknown}, FxHasher>() -> HashSet<{unknown}, FxHasher>\n             174..194 'FxHash...ault()': HashSet<{unknown}, FxHasher>\n@@ -831,7 +831,7 @@ fn issue_4966() {\n         \"#,\n         expect![[r#\"\n             225..229 'iter': T\n-            244..246 '{}': ()\n+            244..246 '{}': Vec<A>\n             258..402 '{     ...r(); }': ()\n             268..273 'inner': Map<|&f64| -> f64>\n             276..300 'Map { ... 0.0 }': Map<|&f64| -> f64>\n@@ -914,7 +914,7 @@ fn flush(&self) {\n \"#,\n         expect![[r#\"\n             123..127 'self': &Mutex<T>\n-            150..152 '{}': ()\n+            150..152 '{}': MutexGuard<T>\n             234..238 'self': &{unknown}\n             240..290 '{     ...()); }': ()\n             250..251 'w': &Mutex<BufWriter>\n@@ -1039,18 +1039,18 @@ fn cfg_tail() {\n         }\n         \"#,\n         expect![[r#\"\n-            14..53 '{     ...)] 9 }': &str\n-            20..31 '{ \"first\" }': &str\n+            14..53 '{     ...)] 9 }': ()\n+            20..31 '{ \"first\" }': ()\n             22..29 '\"first\"': &str\n-            72..190 '{     ...] 13 }': &str\n+            72..190 '{     ...] 13 }': ()\n             78..88 '{ \"fake\" }': &str\n             80..86 '\"fake\"': &str\n             93..103 '{ \"fake\" }': &str\n             95..101 '\"fake\"': &str\n-            108..120 '{ \"second\" }': &str\n+            108..120 '{ \"second\" }': ()\n             110..118 '\"second\"': &str\n-            210..273 '{     ... 15; }': &str\n-            216..227 '{ \"third\" }': &str\n+            210..273 '{     ... 15; }': ()\n+            216..227 '{ \"third\" }': ()\n             218..225 '\"third\"': &str\n             293..357 '{     ...] 15 }': ()\n             299..311 '{ \"fourth\" }': &str"}, {"sha": "df7b3df3d5b2f1da8c9a0797a3d28ffbf89cffe7", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "patch": "@@ -996,9 +996,9 @@ fn main(foo: Foo) {\n             50..106 'if tru...     }': ()\n             53..57 'true': bool\n             58..66 '{      }': ()\n-            72..106 'if fal...     }': i32\n+            72..106 'if fal...     }': ()\n             75..80 'false': bool\n-            81..106 '{     ...     }': i32\n+            81..106 '{     ...     }': ()\n             91..94 'foo': Foo\n             91..100 'foo.field': i32\n         \"#]],\n@@ -1094,10 +1094,10 @@ fn infer_inherent_method() {\n         expect![[r#\"\n             31..35 'self': A\n             37..38 'x': u32\n-            52..54 '{}': ()\n+            52..54 '{}': i32\n             106..110 'self': &A\n             112..113 'x': u64\n-            127..129 '{}': ()\n+            127..129 '{}': i64\n             147..148 'a': A\n             153..201 '{     ...(1); }': ()\n             159..160 'a': A\n@@ -1129,7 +1129,7 @@ fn infer_inherent_method_str() {\n         \"#,\n         expect![[r#\"\n             39..43 'self': &str\n-            52..54 '{}': ()\n+            52..54 '{}': i32\n             68..88 '{     ...o(); }': ()\n             74..79 '\"foo\"': &str\n             74..85 '\"foo\".foo()': i32\n@@ -1419,7 +1419,7 @@ fn infer_impl_generics_basic() {\n             206..210 'self': A<X, Y>\n             206..212 'self.y': Y\n             214..215 't': T\n-            244..341 '{     ...(1); }': ()\n+            244..341 '{     ...(1); }': i128\n             254..255 'a': A<u64, i64>\n             258..280 'A { x:...1i64 }': A<u64, i64>\n             265..269 '1u64': u64\n@@ -1456,7 +1456,7 @@ fn infer_impl_generics_with_autoderef() {\n         \"#,\n         expect![[r#\"\n             77..81 'self': &Option<T>\n-            97..99 '{}': ()\n+            97..99 '{}': Option<&T>\n             110..111 'o': Option<u32>\n             126..164 '{     ...f(); }': ()\n             132..145 '(&o).as_ref()': Option<&u32>\n@@ -1852,7 +1852,7 @@ fn closure_return() {\n         }\n         \"#,\n         expect![[r#\"\n-            16..58 '{     ...; }; }': ()\n+            16..58 '{     ...; }; }': u32\n             26..27 'x': || -> usize\n             30..55 '|| -> ...n 1; }': || -> usize\n             42..55 '{ return 1; }': usize\n@@ -1871,7 +1871,7 @@ fn closure_return_unit() {\n         }\n         \"#,\n         expect![[r#\"\n-            16..47 '{     ...; }; }': ()\n+            16..47 '{     ...; }; }': u32\n             26..27 'x': || -> ()\n             30..44 '|| { return; }': || -> ()\n             33..44 '{ return; }': ()\n@@ -1889,7 +1889,7 @@ fn closure_return_inferred() {\n         }\n         \"#,\n         expect![[r#\"\n-            16..46 '{     ...\" }; }': ()\n+            16..46 '{     ...\" }; }': u32\n             26..27 'x': || -> &str\n             30..43 '|| { \"test\" }': || -> &str\n             33..43 '{ \"test\" }': &str\n@@ -2628,11 +2628,11 @@ fn main() {\n         expect![[r#\"\n             104..108 'self': &Box<T>\n             188..192 'self': &Box<Foo<T>>\n-            218..220 '{}': ()\n+            218..220 '{}': &T\n             242..246 'self': &Box<Foo<T>>\n-            275..277 '{}': ()\n+            275..277 '{}': &Foo<T>\n             297..301 'self': Box<Foo<T>>\n-            322..324 '{}': ()\n+            322..324 '{}': Foo<T>\n             338..559 '{     ...r(); }': ()\n             348..353 'boxed': Box<Foo<i32>>\n             356..359 'Box': Box<Foo<i32>>(Foo<i32>) -> Box<Foo<i32>>"}, {"sha": "5e58d5ad8381cb7325bf531f43d6e7722b2be334", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "patch": "@@ -1280,7 +1280,7 @@ fn test(x: dyn Trait<u64>, y: &dyn Trait<u64>) {\n         expect![[r#\"\n             29..33 'self': &Self\n             54..58 'self': &Self\n-            97..99 '{}': ()\n+            97..99 '{}': dyn Trait<u64>\n             109..110 'x': dyn Trait<u64>\n             128..129 'y': &dyn Trait<u64>\n             148..265 '{     ...2(); }': ()\n@@ -1361,10 +1361,10 @@ fn test(x: Trait, y: &Trait) -> u64 {\n }\"#,\n         expect![[r#\"\n             26..30 'self': &Self\n-            60..62 '{}': ()\n+            60..62 '{}': dyn Trait\n             72..73 'x': dyn Trait\n             82..83 'y': &dyn Trait\n-            100..175 '{     ...o(); }': ()\n+            100..175 '{     ...o(); }': u64\n             106..107 'x': dyn Trait\n             113..114 'y': &dyn Trait\n             124..125 'z': dyn Trait\n@@ -1449,9 +1449,9 @@ fn test<T: Trait<Type = u32>>(x: T, y: impl Trait<Type = i64>) {\n }\"#,\n         expect![[r#\"\n             49..50 't': T\n-            77..79 '{}': ()\n+            77..79 '{}': Trait::Type<T>\n             111..112 't': T\n-            122..124 '{}': ()\n+            122..124 '{}': U\n             154..155 't': T\n             165..168 '{t}': T\n             166..167 't': T\n@@ -1575,7 +1575,7 @@ fn test<T: Trait1, U: Trait2>(x: T, y: U) {\n }\"#,\n         expect![[r#\"\n             49..53 'self': &Self\n-            62..64 '{}': ()\n+            62..64 '{}': u32\n             181..182 'x': T\n             187..188 'y': U\n             193..222 '{     ...o(); }': ()\n@@ -1604,7 +1604,7 @@ fn test(x: &impl Trait1) {\n }\"#,\n         expect![[r#\"\n             49..53 'self': &Self\n-            62..64 '{}': ()\n+            62..64 '{}': u32\n             115..116 'x': &impl Trait1\n             132..148 '{     ...o(); }': ()\n             138..139 'x': &impl Trait1\n@@ -1653,7 +1653,7 @@ fn test() {\n }\"#,\n         expect![[r#\"\n             102..103 't': T\n-            113..115 '{}': ()\n+            113..115 '{}': U\n             145..146 't': T\n             156..159 '{t}': T\n             157..158 't': T\n@@ -1786,9 +1786,9 @@ fn test() {\n }\"#,\n         expect![[r#\"\n             36..40 'self': &Foo\n-            51..53 '{}': ()\n+            51..53 '{}': usize\n             131..132 'f': F\n-            151..153 '{}': ()\n+            151..153 '{}': Lazy<T, F>\n             251..497 '{     ...o(); }': ()\n             261..266 'lazy1': Lazy<Foo, || -> Foo>\n             283..292 'Lazy::new': fn new<Foo, || -> Foo>(|| -> Foo) -> Lazy<Foo, || -> Foo>\n@@ -1807,7 +1807,7 @@ fn test() {\n             478..480 'r2': usize\n             483..488 'lazy2': Lazy<Foo, fn() -> Foo>\n             483..494 'lazy2.foo()': usize\n-            357..359 '{}': ()\n+            357..359 '{}': Foo\n         \"#]],\n     );\n }\n@@ -2738,7 +2738,7 @@ fn test() {\n         expect![[r#\"\n             9..11 '{}': ()\n             28..29 'T': {unknown}\n-            36..38 '{}': ()\n+            36..38 '{}': T\n             36..38: expected T, got ()\n             113..117 'self': &Self\n             169..249 '{     ...t(); }': ()\n@@ -3167,7 +3167,7 @@ fn f() {\n }\"#,\n         expect![[r#\"\n             17..73 '{     ...   } }': ()\n-            39..71 '{     ...     }': ()\n+            39..71 '{     ...     }': S\n             53..54 's': S\n             57..62 'inner': fn inner() -> S\n             57..64 'inner()': S"}, {"sha": "c7172741e46de527b0f111336768fe7286bd5a6a", "filename": "crates/ide_assists/src/handlers/add_return_type.rs", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs?ref=9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "patch": "@@ -1,5 +1,5 @@\n use hir::HirDisplay;\n-use syntax::{ast, AstNode, SyntaxKind, SyntaxToken, TextRange, TextSize};\n+use syntax::{ast, match_ast, AstNode, SyntaxKind, SyntaxToken, TextRange, TextSize};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -18,7 +18,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n pub(crate) fn add_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let (fn_type, tail_expr, builder_edit_pos) = extract_tail(ctx)?;\n     let module = ctx.sema.scope(tail_expr.syntax()).module()?;\n-    let ty = ctx.sema.type_of_expr(&tail_expr)?.adjusted();\n+    let ty = ctx.sema.type_of_expr(&peel_blocks(tail_expr.clone()))?.original();\n     if ty.is_unit() {\n         return None;\n     }\n@@ -93,6 +93,45 @@ enum FnType {\n     Closure { wrap_expr: bool },\n }\n \n+/// If we're looking at a block that is supposed to return `()`, type inference\n+/// will just tell us it has type `()`. We have to look at the tail expression\n+/// to see the mismatched actual type. This 'unpeels' the various blocks to\n+/// hopefully let us see the type the user intends. (This still doesn't handle\n+/// all situations fully correctly; the 'ideal' way to handle this would be to\n+/// run type inference on the function again, but with a variable as the return\n+/// type.)\n+fn peel_blocks(mut expr: ast::Expr) -> ast::Expr {\n+    loop {\n+        match_ast! {\n+            match (expr.syntax()) {\n+                ast::BlockExpr(it) => {\n+                    if let Some(tail) = it.tail_expr() {\n+                        expr = tail.clone();\n+                    } else {\n+                        break;\n+                    }\n+                },\n+                ast::IfExpr(it) => {\n+                    if let Some(then_branch) = it.then_branch() {\n+                        expr = ast::Expr::BlockExpr(then_branch.clone());\n+                    } else {\n+                        break;\n+                    }\n+                },\n+                ast::MatchExpr(it) => {\n+                    if let Some(arm_expr) = it.match_arm_list().and_then(|l| l.arms().next()).and_then(|a| a.expr()) {\n+                        expr = arm_expr;\n+                    } else {\n+                        break;\n+                    }\n+                },\n+                _ => break,\n+            }\n+        }\n+    }\n+    expr\n+}\n+\n fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrReplace)> {\n     let (fn_type, tail_expr, return_type_range, action) =\n         if let Some(closure) = ctx.find_node_at_offset::<ast::ClosureExpr>() {\n@@ -248,6 +287,25 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn infer_return_type_nested_match() {\n+        check_assist(\n+            add_return_type,\n+            r#\"fn foo() {\n+    match true {\n+        true => { 3$0 },\n+        false => { 5 },\n+    }\n+}\"#,\n+            r#\"fn foo() -> i32 {\n+    match true {\n+        true => { 3 },\n+        false => { 5 },\n+    }\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn not_applicable_ret_type_specified() {\n         cov_mark::check!(existing_ret_type);"}, {"sha": "fcb4aaf065d4bab0269d46b4aa9f2e678c0da7b4", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "patch": "@@ -4162,15 +4162,15 @@ fn main() {\n     match 6 {\n         100 => $0{ 100 }$0\n         _ => 0,\n-    }\n+    };\n }\n \"#,\n             r#\"\n fn main() {\n     match 6 {\n         100 => fun_name(),\n         _ => 0,\n-    }\n+    };\n }\n \n fn $0fun_name() -> i32 {\n@@ -4185,15 +4185,15 @@ fn main() {\n     match 6 {\n         100 => $0{ 100 }$0,\n         _ => 0,\n-    }\n+    };\n }\n \"#,\n             r#\"\n fn main() {\n     match 6 {\n         100 => fun_name(),\n         _ => 0,\n-    }\n+    };\n }\n \n fn $0fun_name() -> i32 {"}, {"sha": "8ae9a0be5380499b9caec9bb83d909c629b4d346", "filename": "crates/ide_diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "patch": "@@ -1,8 +1,5 @@\n-use hir::{db::AstDatabase, HirDisplay, Type, TypeInfo};\n-use ide_db::{\n-    famous_defs::FamousDefs, source_change::SourceChange,\n-    syntax_helpers::node_ext::for_each_tail_expr,\n-};\n+use hir::{db::AstDatabase, HirDisplay, Type};\n+use ide_db::{famous_defs::FamousDefs, source_change::SourceChange};\n use syntax::{\n     ast::{BlockExpr, ExprStmt},\n     AstNode,\n@@ -77,9 +74,9 @@ fn add_missing_ok_or_some(\n     acc: &mut Vec<Assist>,\n ) -> Option<()> {\n     let root = ctx.sema.db.parse_or_expand(d.expr.file_id)?;\n-    let tail_expr = d.expr.value.to_node(&root);\n-    let tail_expr_range = tail_expr.syntax().text_range();\n-    let scope = ctx.sema.scope(tail_expr.syntax());\n+    let expr = d.expr.value.to_node(&root);\n+    let expr_range = expr.syntax().text_range();\n+    let scope = ctx.sema.scope(expr.syntax());\n \n     let expected_adt = d.expected.as_adt()?;\n     let expected_enum = expected_adt.as_enum()?;\n@@ -101,16 +98,12 @@ fn add_missing_ok_or_some(\n     }\n \n     let mut builder = TextEdit::builder();\n-    for_each_tail_expr(&tail_expr, &mut |expr| {\n-        if ctx.sema.type_of_expr(expr).map(TypeInfo::adjusted).as_ref() != Some(&d.expected) {\n-            builder.insert(expr.syntax().text_range().start(), format!(\"{}(\", variant_name));\n-            builder.insert(expr.syntax().text_range().end(), \")\".to_string());\n-        }\n-    });\n+    builder.insert(expr.syntax().text_range().start(), format!(\"{}(\", variant_name));\n+    builder.insert(expr.syntax().text_range().end(), \")\".to_string());\n     let source_change =\n         SourceChange::from_text_edit(d.expr.file_id.original_file(ctx.sema.db), builder.finish());\n     let name = format!(\"Wrap in {}\", variant_name);\n-    acc.push(fix(\"wrap_tail_expr\", &name, source_change, tail_expr_range));\n+    acc.push(fix(\"wrap_in_constructor\", &name, source_change, expr_range));\n     Some(())\n }\n \n@@ -330,12 +323,12 @@ fn div(x: i32, y: i32) -> Option<i32> {\n //- minicore: option, result\n fn div(x: i32, y: i32) -> Option<i32> {\n     if y == 0 {\n-        0\n+        Some(0)\n     } else if true {\n-        100\n+        100$0\n     } else {\n         None\n-    }$0\n+    }\n }\n \"#,\n             r#\""}, {"sha": "7cd79c7ceef58f703cd61f172d28fc91e96c3c85", "filename": "crates/ide_diagnostics/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fide_diagnostics%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb7553d5ab7cd512b7edf8d8a30b191be0dc761/crates%2Fide_diagnostics%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Ftests.rs?ref=9eb7553d5ab7cd512b7edf8d8a30b191be0dc761", "patch": "@@ -54,13 +54,13 @@ fn check_nth_fix(nth: usize, ra_fixture_before: &str, ra_fixture_after: &str) {\n         actual\n     };\n \n-    assert_eq_text!(&after, &actual);\n     assert!(\n         fix.target.contains_inclusive(file_position.offset),\n         \"diagnostic fix range {:?} does not touch cursor position {:?}\",\n         fix.target,\n         file_position.offset\n     );\n+    assert_eq_text!(&after, &actual);\n }\n \n /// Checks that there's a diagnostic *without* fix at `$0`."}]}