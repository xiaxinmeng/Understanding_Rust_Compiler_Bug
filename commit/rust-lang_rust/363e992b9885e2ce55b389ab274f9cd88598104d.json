{"sha": "363e992b9885e2ce55b389ab274f9cd88598104d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2M2U5OTJiOTg4NWUyY2U1NWIzODlhYjI3NGY5Y2Q4ODU5ODEwNGQ=", "commit": {"author": {"name": "Matthias Einwag", "email": "matthias.einwag@live.com", "date": "2019-02-05T09:30:00Z"}, "committer": {"name": "Matthias Einwag", "email": "matthias.einwag@live.com", "date": "2019-02-05T09:30:00Z"}, "message": "review suggestions", "tree": {"sha": "9c1480c1208d098fe29b97fea8fe15cf2dc581e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c1480c1208d098fe29b97fea8fe15cf2dc581e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/363e992b9885e2ce55b389ab274f9cd88598104d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/363e992b9885e2ce55b389ab274f9cd88598104d", "html_url": "https://github.com/rust-lang/rust/commit/363e992b9885e2ce55b389ab274f9cd88598104d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/363e992b9885e2ce55b389ab274f9cd88598104d/comments", "author": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1ec81459da4ba8e0633d90ddf440522a1587f35", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1ec81459da4ba8e0633d90ddf440522a1587f35", "html_url": "https://github.com/rust-lang/rust/commit/e1ec81459da4ba8e0633d90ddf440522a1587f35"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "459e8a927e75790c7ab60a264144409d362435e5", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/363e992b9885e2ce55b389ab274f9cd88598104d/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363e992b9885e2ce55b389ab274f9cd88598104d/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=363e992b9885e2ce55b389ab274f9cd88598104d", "patch": "@@ -68,13 +68,15 @@ pub trait Future {\n     /// typically do *not* suffer the same problems of \"all wakeups must poll\n     /// all events\"; they are more like `epoll(4)`.\n     ///\n-    /// An implementation of `poll` should strive to return quickly, and must\n-    /// *never* block. Returning quickly prevents unnecessarily clogging up\n+    /// An implementation of `poll` should strive to return quickly, and should\n+    /// not block. Returning quickly prevents unnecessarily clogging up\n     /// threads or event loops. If it is known ahead of time that a call to\n     /// `poll` may end up taking awhile, the work should be offloaded to a\n     /// thread pool (or something similar) to ensure that `poll` can return\n     /// quickly.\n     ///\n+    /// An implementation of `poll` may also never cause memory unsafety.\n+    ///\n     /// # Panics\n     ///\n     /// Once a future has completed (returned `Ready` from `poll`),"}, {"sha": "a877e033bc63bb305e0093614e84d0e4eac2592b", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/363e992b9885e2ce55b389ab274f9cd88598104d/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363e992b9885e2ce55b389ab274f9cd88598104d/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=363e992b9885e2ce55b389ab274f9cd88598104d", "patch": "@@ -29,6 +29,11 @@ pub struct RawWaker {\n ///\n /// The pointer passed to all functions inside the vtable is the `data` pointer\n /// from the enclosing [`RawWaker`] object.\n+///\n+/// The functions inside this struct are only intended be called on the `data`\n+/// pointer of a properly constructed [`RawWaker`] object from inside the\n+/// [`RawWaker`] implementation. Calling one of the contained functions using\n+/// any other `data` pointer will cause undefined behavior.\n #[derive(PartialEq, Copy, Clone, Debug)]\n pub struct RawWakerVTable {\n     /// This function will be called when the [`RawWaker`] gets cloned, e.g. when"}]}