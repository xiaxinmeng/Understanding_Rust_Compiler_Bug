{"sha": "fd8beaf5c4abac980d5730a4e19ec6c1879907b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkOGJlYWY1YzRhYmFjOTgwZDU3MzBhNGUxOWVjNmMxODc5OTA3YjY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-13T15:51:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-13T15:58:03Z"}, "message": "add option to disable alignment checks", "tree": {"sha": "b812cc6b60f917e8edf72e4cb3e8db94138cc6bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b812cc6b60f917e8edf72e4cb3e8db94138cc6bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd8beaf5c4abac980d5730a4e19ec6c1879907b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8beaf5c4abac980d5730a4e19ec6c1879907b6", "html_url": "https://github.com/rust-lang/rust/commit/fd8beaf5c4abac980d5730a4e19ec6c1879907b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd8beaf5c4abac980d5730a4e19ec6c1879907b6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbbd4428d0e771a9dc9adc98a150b410ba1b2b45", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbbd4428d0e771a9dc9adc98a150b410ba1b2b45", "html_url": "https://github.com/rust-lang/rust/commit/fbbd4428d0e771a9dc9adc98a150b410ba1b2b45"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "1ceb6e621a47b543e0ec0d59dbeca30d605da020", "filename": "src/bin/miri.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd8beaf5c4abac980d5730a4e19ec6c1879907b6/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8beaf5c4abac980d5730a4e19ec6c1879907b6/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=fd8beaf5c4abac980d5730a4e19ec6c1879907b6", "patch": "@@ -128,6 +128,7 @@ fn main() {\n     // Parse our arguments and split them across `rustc` and `miri`.\n     let mut validate = true;\n     let mut stacked_borrows = true;\n+    let mut check_alignment = true;\n     let mut communicate = false;\n     let mut ignore_leaks = false;\n     let mut seed: Option<u64> = None;\n@@ -152,6 +153,9 @@ fn main() {\n                 \"-Zmiri-disable-stacked-borrows\" => {\n                     stacked_borrows = false;\n                 }\n+                \"-Zmiri-disable-alignment-check\" => {\n+                    check_alignment = false;\n+                }\n                 \"-Zmiri-disable-isolation\" => {\n                     communicate = true;\n                 }\n@@ -243,6 +247,7 @@ fn main() {\n     let miri_config = miri::MiriConfig {\n         validate,\n         stacked_borrows,\n+        check_alignment,\n         communicate,\n         ignore_leaks,\n         excluded_env_vars,"}, {"sha": "b360b1bd8bbc50daf86fada55c8e6490c6677f29", "filename": "src/eval.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd8beaf5c4abac980d5730a4e19ec6c1879907b6/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8beaf5c4abac980d5730a4e19ec6c1879907b6/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=fd8beaf5c4abac980d5730a4e19ec6c1879907b6", "patch": "@@ -19,6 +19,8 @@ pub struct MiriConfig {\n     pub validate: bool,\n     /// Determines if Stacked Borrows is enabled.\n     pub stacked_borrows: bool,\n+    /// Determines if alignment checking is enabled.\n+    pub check_alignment: bool,\n     /// Determines if communication with the host environment is enabled.\n     pub communicate: bool,\n     /// Determines if memory leaks should be ignored.\n@@ -40,6 +42,7 @@ impl Default for MiriConfig {\n         MiriConfig {\n             validate: true,\n             stacked_borrows: true,\n+            check_alignment: true,\n             communicate: false,\n             ignore_leaks: false,\n             excluded_env_vars: vec![],\n@@ -72,6 +75,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             config.stacked_borrows,\n             config.tracked_pointer_tag,\n             config.tracked_alloc_id,\n+            config.check_alignment,\n         ),\n     );\n     // Complete initialization."}, {"sha": "54dfb49d798be55fd8e0d0a01718bd8094e906f6", "filename": "src/machine.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd8beaf5c4abac980d5730a4e19ec6c1879907b6/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8beaf5c4abac980d5730a4e19ec6c1879907b6/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=fd8beaf5c4abac980d5730a4e19ec6c1879907b6", "patch": "@@ -118,10 +118,19 @@ pub struct MemoryExtra {\n     /// An allocation ID to report when it is being allocated\n     /// (helps for debugging memory leaks).\n     tracked_alloc_id: Option<AllocId>,\n+\n+    /// Controls whether alignment of memory accesses is being checked.\n+    check_alignment: bool,\n }\n \n impl MemoryExtra {\n-    pub fn new(rng: StdRng, stacked_borrows: bool, tracked_pointer_tag: Option<PtrId>, tracked_alloc_id: Option<AllocId>) -> Self {\n+    pub fn new(\n+        rng: StdRng,\n+        stacked_borrows: bool,\n+        tracked_pointer_tag: Option<PtrId>,\n+        tracked_alloc_id: Option<AllocId>,\n+        check_alignment: bool,\n+    ) -> Self {\n         let stacked_borrows = if stacked_borrows {\n             Some(Rc::new(RefCell::new(stacked_borrows::GlobalState::new(tracked_pointer_tag))))\n         } else {\n@@ -133,6 +142,7 @@ impl MemoryExtra {\n             extern_statics: FxHashMap::default(),\n             rng: RefCell::new(rng),\n             tracked_alloc_id,\n+            check_alignment,\n         }\n     }\n \n@@ -299,7 +309,10 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n     const GLOBAL_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::Global);\n \n-    const CHECK_ALIGN: bool = true;\n+    #[inline(always)]\n+    fn enforce_alignment(memory_extra: &MemoryExtra) -> bool {\n+        memory_extra.check_alignment\n+    }\n \n     #[inline(always)]\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {"}, {"sha": "b732a949af8763f67ae3d266d0d43b480cb19bad", "filename": "tests/compile-fail/unaligned_pointers/alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd8beaf5c4abac980d5730a4e19ec6c1879907b6/tests%2Fcompile-fail%2Funaligned_pointers%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8beaf5c4abac980d5730a4e19ec6c1879907b6/tests%2Fcompile-fail%2Funaligned_pointers%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Falignment.rs?ref=fd8beaf5c4abac980d5730a4e19ec6c1879907b6", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     // miri always gives allocations the worst possible alignment, so a `u8` array is guaranteed\n     // to be at the virtual location 1 (so one byte offset from the ultimate alignemnt location 0)\n     let mut x = [0u8; 20];\n-    let x_ptr: *mut u8 = &mut x[0];\n+    let x_ptr: *mut u8 = x.as_mut_ptr();\n     let y_ptr = x_ptr as *mut u64;\n     unsafe {\n         *y_ptr = 42; //~ ERROR accessing memory with alignment 1, but alignment"}, {"sha": "2fb0dd8369df723831da9eb3db49993a45d73673", "filename": "tests/run-pass/disable-alignment-check.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd8beaf5c4abac980d5730a4e19ec6c1879907b6/tests%2Frun-pass%2Fdisable-alignment-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8beaf5c4abac980d5730a4e19ec6c1879907b6/tests%2Frun-pass%2Fdisable-alignment-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdisable-alignment-check.rs?ref=fd8beaf5c4abac980d5730a4e19ec6c1879907b6", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: -Zmiri-disable-alignment-check\n+\n+fn main() {\n+    let mut x = [0u8; 20];\n+    let x_ptr: *mut u8 = x.as_mut_ptr();\n+    // At least one of these is definitely unaligned.\n+    unsafe {\n+        *(x_ptr as *mut u64) = 42;\n+        *(x_ptr.add(1) as *mut u64) = 42;\n+    }\n+}"}]}