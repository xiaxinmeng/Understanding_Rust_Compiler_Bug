{"sha": "c3332ca92e646f7f360817b2a72f830fef9ad1b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMzMyY2E5MmU2NDZmN2YzNjA4MTdiMmE3MmY4MzBmZWY5YWQxYjM=", "commit": {"author": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-12T14:24:21Z"}, "committer": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-13T12:51:57Z"}, "message": "Fix panic with fake `Range` type", "tree": {"sha": "9d433660925381c146dc99461930e1313fe0e0a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d433660925381c146dc99461930e1313fe0e0a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3332ca92e646f7f360817b2a72f830fef9ad1b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3332ca92e646f7f360817b2a72f830fef9ad1b3", "html_url": "https://github.com/rust-lang/rust/commit/c3332ca92e646f7f360817b2a72f830fef9ad1b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3332ca92e646f7f360817b2a72f830fef9ad1b3/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0aa2c15878ce4303cc9079881d8d816be290a85", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0aa2c15878ce4303cc9079881d8d816be290a85", "html_url": "https://github.com/rust-lang/rust/commit/f0aa2c15878ce4303cc9079881d8d816be290a85"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "d162dea7f1104b260211875a2e338e687f1d570e", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c3332ca92e646f7f360817b2a72f830fef9ad1b3/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3332ca92e646f7f360817b2a72f830fef9ad1b3/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=c3332ca92e646f7f360817b2a72f830fef9ad1b3", "patch": "@@ -50,8 +50,7 @@ pub fn range(expr: &hir::Expr) -> Option<Range> {\n     fn get_field<'a>(name: &str, fields: &'a [hir::Field]) -> Option<&'a hir::Expr> {\n         let expr = &fields\n             .iter()\n-            .find(|field| field.name.node == name)\n-            .unwrap_or_else(|| panic!(\"missing {} field for range\", name))\n+            .find(|field| field.name.node == name)?\n             .expr;\n \n         Some(expr)\n@@ -77,32 +76,32 @@ pub fn range(expr: &hir::Expr) -> Option<Range> {\n             match_qpath(path, &paths::RANGE_FROM)\n         {\n             Some(Range {\n-                start: get_field(\"start\", fields),\n+                start: Some(get_field(\"start\", fields)?),\n                 end: None,\n                 limits: ast::RangeLimits::HalfOpen,\n             })\n         } else if match_qpath(path, &paths::RANGE_INCLUSIVE_STD) || match_qpath(path, &paths::RANGE_INCLUSIVE) {\n             Some(Range {\n-                start: get_field(\"start\", fields),\n-                end: get_field(\"end\", fields),\n+                start: Some(get_field(\"start\", fields)?),\n+                end: Some(get_field(\"end\", fields)?),\n                 limits: ast::RangeLimits::Closed,\n             })\n         } else if match_qpath(path, &paths::RANGE_STD) || match_qpath(path, &paths::RANGE) {\n             Some(Range {\n-                start: get_field(\"start\", fields),\n-                end: get_field(\"end\", fields),\n+                start: Some(get_field(\"start\", fields)?),\n+                end: Some(get_field(\"end\", fields)?),\n                 limits: ast::RangeLimits::HalfOpen,\n             })\n         } else if match_qpath(path, &paths::RANGE_TO_INCLUSIVE_STD) || match_qpath(path, &paths::RANGE_TO_INCLUSIVE) {\n             Some(Range {\n                 start: None,\n-                end: get_field(\"end\", fields),\n+                end: Some(get_field(\"end\", fields)?),\n                 limits: ast::RangeLimits::Closed,\n             })\n         } else if match_qpath(path, &paths::RANGE_TO_STD) || match_qpath(path, &paths::RANGE_TO) {\n             Some(Range {\n                 start: None,\n-                end: get_field(\"end\", fields),\n+                end: Some(get_field(\"end\", fields)?),\n                 limits: ast::RangeLimits::HalfOpen,\n             })\n         } else {"}, {"sha": "d9db28c8513f4a9077bcdd710e498b500ab7b0db", "filename": "tests/ui/range.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3332ca92e646f7f360817b2a72f830fef9ad1b3/tests%2Fui%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3332ca92e646f7f360817b2a72f830fef9ad1b3/tests%2Fui%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.rs?ref=c3332ca92e646f7f360817b2a72f830fef9ad1b3", "patch": "@@ -32,3 +32,12 @@ fn main() {\n     // check const eval\n     let _ = v1.iter().step_by(2/3);\n }\n+\n+#[allow(unused)]\n+fn no_panic_with_fake_range_types() {\n+    struct Range {\n+        foo: i32,\n+    }\n+\n+    let _ = Range { foo: 0 };\n+}"}]}