{"sha": "fab1c066464022613729a6d714dc83b7d698ece5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYjFjMDY2NDY0MDIyNjEzNzI5YTZkNzE0ZGM4M2I3ZDY5OGVjZTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-05T13:28:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-05T13:28:32Z"}, "message": "Merge #8343\n\n8343: internal: document hypothetical completion problem r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4e17e20186bad116272c7260f120630365b95ab9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e17e20186bad116272c7260f120630365b95ab9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fab1c066464022613729a6d714dc83b7d698ece5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgaxCACRBK7hj4Ov3rIwAAdHIIADSbUtFyEJU0Vy1mt9kYaUNC\nCKFYE8qLb4yiwbXyV+4aeDGuljiTuWbfQqqzKZJJ270Yh6DTerFhhigcsN0J7qsx\npGNMkTHUa60vZScxEEmMwhcscU6ucUt+OaYeTqF39Wkwb8RS7eKv1PZ1ZbTNKtWZ\nSleY+zsZZTYQEVv6ztcpBcy3VYbpJlcB3M9v1iKULe8SPLZ5vvc0aonRI/QbwG5P\nJ+pQAQEA34H9SkTCDYYSTl0BDzwjIoxX7zn9qc1RqBbvQ64UendDmFFa6QmFm3ek\nw89rhJCo1lUb1ygrpBIy2lS/MaPORGedD5GN7Gbz0fQTps259dwZffT62sMSico=\n=9ItG\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e17e20186bad116272c7260f120630365b95ab9\nparent 8a18f23df068dd8e3cfaea15391610dbda418aab\nparent 1f00191de28cf53c54936ee843c39b0d91ced43c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617629312 +0000\ncommitter GitHub <noreply@github.com> 1617629312 +0000\n\nMerge #8343\n\n8343: internal: document hypothetical completion problem r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fab1c066464022613729a6d714dc83b7d698ece5", "html_url": "https://github.com/rust-lang/rust/commit/fab1c066464022613729a6d714dc83b7d698ece5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fab1c066464022613729a6d714dc83b7d698ece5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a18f23df068dd8e3cfaea15391610dbda418aab", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a18f23df068dd8e3cfaea15391610dbda418aab", "html_url": "https://github.com/rust-lang/rust/commit/8a18f23df068dd8e3cfaea15391610dbda418aab"}, {"sha": "1f00191de28cf53c54936ee843c39b0d91ced43c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f00191de28cf53c54936ee843c39b0d91ced43c", "html_url": "https://github.com/rust-lang/rust/commit/1f00191de28cf53c54936ee843c39b0d91ced43c"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "6f3d5c5c57fb8d4cc3c8a6e71075b2d163f8303d", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fab1c066464022613729a6d714dc83b7d698ece5/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab1c066464022613729a6d714dc83b7d698ece5/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=fab1c066464022613729a6d714dc83b7d698ece5", "patch": "@@ -106,6 +106,34 @@ pub use crate::{\n /// `foo` *should* be present among the completion variants. Filtering by\n /// identifier prefix/fuzzy match should be done higher in the stack, together\n /// with ordering of completions (currently this is done by the client).\n+///\n+/// # Hypothetical Completion Problem\n+///\n+/// There's a curious unsolved problem in the current implementation. Often, you\n+/// want to compute completions on a *slightly different* text document.\n+///\n+/// In the simplest case, when the code looks like `let x = `, you want to\n+/// insert a fake identifier to get a better syntax tree: `let x = complete_me`.\n+///\n+/// We do this in `CompletionContext`, and it works OK-enough for *syntax*\n+/// analysis. However, we might want to, eg, ask for the type of `complete_me`\n+/// variable, and that's where our current infrastructure breaks down. salsa\n+/// doesn't allow such \"phantom\" inputs.\n+///\n+/// Another case where this would be instrumental is macro expansion. We want to\n+/// insert a fake ident and re-expand code. There's `expand_hypothetical` as a\n+/// work-around for this.\n+///\n+/// A different use-case is completion of injection (examples and links in doc\n+/// comments). When computing completion for a path in a doc-comment, you want\n+/// to inject a fake path expression into the item being documented and complete\n+/// that.\n+///\n+/// IntelliJ has CodeFragment/Context infrastructure for that. You can create a\n+/// temporary PSI node, and say that the context (\"parent\") of this node is some\n+/// existing node. Asking for, eg, type of this `CodeFragment` node works\n+/// correctly, as the underlying infrastructure makes use of contexts to do\n+/// analysis.\n pub fn completions(\n     db: &RootDatabase,\n     config: &CompletionConfig,"}]}