{"sha": "eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYWY1ZDdlMzhiMWVlMjMwNmNhYzFjY2JjYmYzYjE4YmRjNjIzNWM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-23T12:54:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-23T12:54:04Z"}, "message": "Rollup merge of #76965 - fusion-engineering-forks:fix-atomic-from-mut, r=Amanieu\n\nAdd cfg(target_has_atomic_equal_alignment) and use it for Atomic::from_mut.\n\nFixes some platform-specific problems with #74532 by using the actual alignment of the types instead of hardcoding a few `target_arch`s.\n\nr? @RalfJung", "tree": {"sha": "54a4256f3d5f33ca005db987915e4d2db0365feb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54a4256f3d5f33ca005db987915e4d2db0365feb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfa0VsCRBK7hj4Ov3rIwAAdHIIACYgJv6Ie4ifoIAYur6/pZe9\nY92ph9qLVgMWwMPt6g3XN27kxXKNXvaeFZ3xIh2utBYhEfDEiduYQ1RuC3odr2Ji\nselSRJF24LgDEi12NcF0a3m2fJK7RdZ9xt1C/Hrqo4mcaOiOcZCxY7P3a9H3HlvB\nacsbCFK91x2TkQydDzHIvOhcEUQYq6GQGJDyKYgv0cEv8jX97GDOrr+Y3oVOwRjC\nNqPyCbfq39Lncf+R2AvM1n2PB4UoRpP46fwGVjDkqf7fNcnwoMsvk0yMg/up0Dqq\nC3a0eHC0Cw4ozQt2JE42zKa2lhtgub7cWsZ/THwhuH0l2nr9fPuhJqtf644K1bs=\n=csaP\n-----END PGP SIGNATURE-----\n", "payload": "tree 54a4256f3d5f33ca005db987915e4d2db0365feb\nparent 98e5ee7df02c7812441ac31338819cb3f788f4f9\nparent bcc1d56917fe061071ebc539b5d2e304a44a7b00\nauthor Dylan DPC <dylan.dpc@gmail.com> 1600865644 +0200\ncommitter GitHub <noreply@github.com> 1600865644 +0200\n\nRollup merge of #76965 - fusion-engineering-forks:fix-atomic-from-mut, r=Amanieu\n\nAdd cfg(target_has_atomic_equal_alignment) and use it for Atomic::from_mut.\n\nFixes some platform-specific problems with #74532 by using the actual alignment of the types instead of hardcoding a few `target_arch`s.\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c", "html_url": "https://github.com/rust-lang/rust/commit/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98e5ee7df02c7812441ac31338819cb3f788f4f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e5ee7df02c7812441ac31338819cb3f788f4f9", "html_url": "https://github.com/rust-lang/rust/commit/98e5ee7df02c7812441ac31338819cb3f788f4f9"}, {"sha": "bcc1d56917fe061071ebc539b5d2e304a44a7b00", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc1d56917fe061071ebc539b5d2e304a44a7b00", "html_url": "https://github.com/rust-lang/rust/commit/bcc1d56917fe061071ebc539b5d2e304a44a7b00"}], "stats": {"total": 277, "additions": 272, "deletions": 5}, "files": [{"sha": "8b7fd59cd874ae57c665d559af0de011bad64126", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c", "patch": "@@ -26,6 +26,11 @@ const GATED_CFGS: &[GatedCfg] = &[\n     (sym::target_thread_local, sym::cfg_target_thread_local, cfg_fn!(cfg_target_thread_local)),\n     (sym::target_has_atomic, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n     (sym::target_has_atomic_load_store, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n+    (\n+        sym::target_has_atomic_equal_alignment,\n+        sym::cfg_target_has_atomic,\n+        cfg_fn!(cfg_target_has_atomic),\n+    ),\n     (sym::sanitize, sym::cfg_sanitize, cfg_fn!(cfg_sanitize)),\n     (sym::version, sym::cfg_version, cfg_fn!(cfg_version)),\n ];"}, {"sha": "ab96b0333f43fd3617dd0617e9962c7b8ca62779", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c", "patch": "@@ -12,6 +12,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::impl_stable_hash_via_hash;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n+use rustc_target::abi::{Align, TargetDataLayout};\n use rustc_target::spec::{Target, TargetTriple};\n \n use crate::parse::CrateConfig;\n@@ -748,6 +749,9 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n     let min_atomic_width = sess.target.target.min_atomic_width();\n     let max_atomic_width = sess.target.target.max_atomic_width();\n     let atomic_cas = sess.target.target.options.atomic_cas;\n+    let layout = TargetDataLayout::parse(&sess.target.target).unwrap_or_else(|err| {\n+        sess.fatal(&err);\n+    });\n \n     let mut ret = FxHashSet::default();\n     ret.reserve(6); // the minimum number of insertions\n@@ -769,18 +773,27 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n     if sess.target.target.options.has_elf_tls {\n         ret.insert((sym::target_thread_local, None));\n     }\n-    for &i in &[8, 16, 32, 64, 128] {\n+    for &(i, align) in &[\n+        (8, layout.i8_align.abi),\n+        (16, layout.i16_align.abi),\n+        (32, layout.i32_align.abi),\n+        (64, layout.i64_align.abi),\n+        (128, layout.i128_align.abi),\n+    ] {\n         if i >= min_atomic_width && i <= max_atomic_width {\n-            let mut insert_atomic = |s| {\n+            let mut insert_atomic = |s, align: Align| {\n                 ret.insert((sym::target_has_atomic_load_store, Some(Symbol::intern(s))));\n                 if atomic_cas {\n                     ret.insert((sym::target_has_atomic, Some(Symbol::intern(s))));\n                 }\n+                if align.bits() == i {\n+                    ret.insert((sym::target_has_atomic_equal_alignment, Some(Symbol::intern(s))));\n+                }\n             };\n             let s = i.to_string();\n-            insert_atomic(&s);\n+            insert_atomic(&s, align);\n             if &s == wordsz {\n-                insert_atomic(\"ptr\");\n+                insert_atomic(\"ptr\", layout.pointer_align.abi);\n             }\n         }\n     }"}, {"sha": "60688d26d4ce0dbd4c1f9f4638ec3ad2ced0717a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c", "patch": "@@ -1071,6 +1071,7 @@ symbols! {\n         target_feature,\n         target_feature_11,\n         target_has_atomic,\n+        target_has_atomic_equal_alignment,\n         target_has_atomic_load_store,\n         target_os,\n         target_pointer_width,"}, {"sha": "5c9cfe27101f07edbcfbbe669bf4074ec0385584", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c", "patch": "@@ -327,6 +327,28 @@ impl AtomicBool {\n         unsafe { &mut *(self.v.get() as *mut bool) }\n     }\n \n+    /// Get atomic access to a `&mut bool`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_mut)]\n+    /// use std::sync::atomic::{AtomicBool, Ordering};\n+    ///\n+    /// let mut some_bool = true;\n+    /// let a = AtomicBool::from_mut(&mut some_bool);\n+    /// a.store(false, Ordering::Relaxed);\n+    /// assert_eq!(some_bool, false);\n+    /// ```\n+    #[inline]\n+    #[cfg(target_has_atomic_equal_alignment = \"8\")]\n+    #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+    pub fn from_mut(v: &mut bool) -> &Self {\n+        // SAFETY: the mutable reference guarantees unique ownership, and\n+        // alignment of both `bool` and `Self` is 1.\n+        unsafe { &*(v as *mut bool as *mut Self) }\n+    }\n+\n     /// Consumes the atomic and returns the contained value.\n     ///\n     /// This is safe because passing `self` by value guarantees that no other threads are\n@@ -819,6 +841,32 @@ impl<T> AtomicPtr<T> {\n         self.p.get_mut()\n     }\n \n+    /// Get atomic access to a pointer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_mut)]\n+    /// use std::sync::atomic::{AtomicPtr, Ordering};\n+    ///\n+    /// let mut some_ptr = &mut 123 as *mut i32;\n+    /// let a = AtomicPtr::from_mut(&mut some_ptr);\n+    /// a.store(&mut 456, Ordering::Relaxed);\n+    /// assert_eq!(unsafe { *some_ptr }, 456);\n+    /// ```\n+    #[inline]\n+    #[cfg(target_has_atomic_equal_alignment = \"ptr\")]\n+    #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+    pub fn from_mut(v: &mut *mut T) -> &Self {\n+        use crate::mem::align_of;\n+        let [] = [(); align_of::<AtomicPtr<()>>() - align_of::<*mut ()>()];\n+        // SAFETY:\n+        //  - the mutable reference guarantees unique ownership.\n+        //  - the alignment of `*mut T` and `Self` is the same on all platforms\n+        //    supported by rust, as verified above.\n+        unsafe { &*(v as *mut *mut T as *mut Self) }\n+    }\n+\n     /// Consumes the atomic and returns the contained value.\n     ///\n     /// This is safe because passing `self` by value guarantees that no other threads are\n@@ -1113,6 +1161,7 @@ macro_rules! if_not_8_bit {\n #[cfg(target_has_atomic_load_store = \"8\")]\n macro_rules! atomic_int {\n     ($cfg_cas:meta,\n+     $cfg_align:meta,\n      $stable:meta,\n      $stable_cxchg:meta,\n      $stable_debug:meta,\n@@ -1231,6 +1280,45 @@ assert_eq!(some_var.load(Ordering::SeqCst), 5);\n                 }\n             }\n \n+            doc_comment! {\n+                concat!(\"Get atomic access to a `&mut \", stringify!($int_type), \"`.\n+\n+\",\n+if_not_8_bit! {\n+    $int_type,\n+    concat!(\n+        \"**Note:** This function is only available on targets where `\",\n+        stringify!($int_type), \"` has an alignment of \", $align, \" bytes.\"\n+    )\n+},\n+\"\n+\n+# Examples\n+\n+```\n+#![feature(atomic_from_mut)]\n+\", $extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\n+\n+let mut some_int = 123;\n+let a = \", stringify!($atomic_type), \"::from_mut(&mut some_int);\n+a.store(100, Ordering::Relaxed);\n+assert_eq!(some_int, 100);\n+```\n+                \"),\n+                #[inline]\n+                #[$cfg_align]\n+                #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+                pub fn from_mut(v: &mut $int_type) -> &Self {\n+                    use crate::mem::align_of;\n+                    let [] = [(); align_of::<Self>() - align_of::<$int_type>()];\n+                    // SAFETY:\n+                    //  - the mutable reference guarantees unique ownership.\n+                    //  - the alignment of `$int_type` and `Self` is the\n+                    //    same, as promised by $cfg_align and verified above.\n+                    unsafe { &*(v as *mut $int_type as *mut Self) }\n+                }\n+            }\n+\n             doc_comment! {\n                 concat!(\"Consumes the atomic and returns the contained value.\n \n@@ -1873,6 +1961,7 @@ let mut atomic = \", stringify!($atomic_type), \"::new(1);\n #[cfg(target_has_atomic_load_store = \"8\")]\n atomic_int! {\n     cfg(target_has_atomic = \"8\"),\n+    cfg(target_has_atomic_equal_alignment = \"8\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -1891,6 +1980,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"8\")]\n atomic_int! {\n     cfg(target_has_atomic = \"8\"),\n+    cfg(target_has_atomic_equal_alignment = \"8\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -1909,6 +1999,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"16\")]\n atomic_int! {\n     cfg(target_has_atomic = \"16\"),\n+    cfg(target_has_atomic_equal_alignment = \"16\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -1927,6 +2018,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"16\")]\n atomic_int! {\n     cfg(target_has_atomic = \"16\"),\n+    cfg(target_has_atomic_equal_alignment = \"16\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -1945,6 +2037,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"32\")]\n atomic_int! {\n     cfg(target_has_atomic = \"32\"),\n+    cfg(target_has_atomic_equal_alignment = \"32\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -1963,6 +2056,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"32\")]\n atomic_int! {\n     cfg(target_has_atomic = \"32\"),\n+    cfg(target_has_atomic_equal_alignment = \"32\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -1981,6 +2075,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"64\")]\n atomic_int! {\n     cfg(target_has_atomic = \"64\"),\n+    cfg(target_has_atomic_equal_alignment = \"64\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -1999,6 +2094,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"64\")]\n atomic_int! {\n     cfg(target_has_atomic = \"64\"),\n+    cfg(target_has_atomic_equal_alignment = \"64\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -2017,6 +2113,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"128\")]\n atomic_int! {\n     cfg(target_has_atomic = \"128\"),\n+    cfg(target_has_atomic_equal_alignment = \"128\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -2035,6 +2132,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"128\")]\n atomic_int! {\n     cfg(target_has_atomic = \"128\"),\n+    cfg(target_has_atomic_equal_alignment = \"128\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -2074,6 +2172,7 @@ macro_rules! ptr_width {\n #[cfg(target_has_atomic_load_store = \"ptr\")]\n atomic_int! {\n     cfg(target_has_atomic = \"ptr\"),\n+    cfg(target_has_atomic_equal_alignment = \"ptr\"),\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n@@ -2092,6 +2191,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"ptr\")]\n atomic_int! {\n     cfg(target_has_atomic = \"ptr\"),\n+    cfg(target_has_atomic_equal_alignment = \"ptr\"),\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),"}, {"sha": "bf946160075704d38ca7a525602daef209bcca0a", "filename": "src/test/ui/atomic-from-mut-not-available.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/src%2Ftest%2Fui%2Fatomic-from-mut-not-available.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/src%2Ftest%2Fui%2Fatomic-from-mut-not-available.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fatomic-from-mut-not-available.rs?ref=eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c", "patch": "@@ -0,0 +1,7 @@\n+// only-x86\n+// only-linux\n+\n+fn main() {\n+    core::sync::atomic::AtomicU64::from_mut(&mut 0u64);\n+    //~^ ERROR: no function or associated item named `from_mut` found for struct `AtomicU64`\n+}"}, {"sha": "d1ebca8a29e93121466649b7f50261de1e2d7563", "filename": "src/test/ui/atomic-from-mut-not-available.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/src%2Ftest%2Fui%2Fatomic-from-mut-not-available.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/src%2Ftest%2Fui%2Fatomic-from-mut-not-available.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fatomic-from-mut-not-available.stderr?ref=eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c", "patch": "@@ -0,0 +1,9 @@\n+error[E0599]: no function or associated item named `from_mut` found for struct `AtomicU64` in the current scope\n+  --> $DIR/atomic-from-mut-not-available.rs:5:36\n+   |\n+LL |     core::sync::atomic::AtomicU64::from_mut(&mut 0u64);\n+   |                                    ^^^^^^^^ function or associated item not found in `AtomicU64`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "049fdd84d8c22e71a8dae4a329b97cfbe60f74fe", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs?ref=eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c", "patch": "@@ -87,6 +87,30 @@ fn main() {\n     //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n     cfg!(target_has_atomic = \"ptr\");\n     //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n+    cfg!(target_has_atomic_load_store = \"8\");\n+    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n+    cfg!(target_has_atomic_load_store = \"16\");\n+    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n+    cfg!(target_has_atomic_load_store = \"32\");\n+    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n+    cfg!(target_has_atomic_load_store = \"64\");\n+    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n+    cfg!(target_has_atomic_load_store = \"128\");\n+    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n+    cfg!(target_has_atomic_load_store = \"ptr\");\n+    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"8\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"16\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"32\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"64\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"128\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"ptr\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n }\n \n #[macro_export]"}, {"sha": "16e1dc644008433ca55be33c2449b5fed9309028", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr", "status": "modified", "additions": 109, "deletions": 1, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr?ref=eaaf5d7e38b1ee2306cac1ccbcbf3b18bdc6235c", "patch": "@@ -160,6 +160,114 @@ LL |     cfg!(target_has_atomic = \"ptr\");\n    = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n-error: aborting due to 18 previous errors\n+error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:90:10\n+   |\n+LL |     cfg!(target_has_atomic_load_store = \"8\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n+   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:92:10\n+   |\n+LL |     cfg!(target_has_atomic_load_store = \"16\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n+   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:94:10\n+   |\n+LL |     cfg!(target_has_atomic_load_store = \"32\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n+   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:96:10\n+   |\n+LL |     cfg!(target_has_atomic_load_store = \"64\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n+   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:98:10\n+   |\n+LL |     cfg!(target_has_atomic_load_store = \"128\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n+   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:100:10\n+   |\n+LL |     cfg!(target_has_atomic_load_store = \"ptr\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n+   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:102:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"8\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n+   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:104:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"16\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n+   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:106:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"32\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n+   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:108:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"64\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n+   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:110:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"128\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n+   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:112:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"ptr\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n+   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n+\n+error: aborting due to 30 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}