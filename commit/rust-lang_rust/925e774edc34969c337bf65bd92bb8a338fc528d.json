{"sha": "925e774edc34969c337bf65bd92bb8a338fc528d", "node_id": "C_kwDOAAsO6NoAKDkyNWU3NzRlZGMzNDk2OWMzMzdiZjY1YmQ5MmJiOGEzMzhmYzUyOGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-13T01:25:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-13T01:25:28Z"}, "message": "Auto merge of #96493 - chbaker0:issue-96342-fix, r=Mark-Simulacrum\n\nAdd compiletest and bootstrap \"--skip\" option forwarded to libtest\n\nWith this PR,  \"x.py test --skip SKIP ...\" will run the specified test suite, but forward \"--skip SKIP\" to the test tool. libtest already supports this option. The PR also adds it to compiletest which itself just forwards it to libtest.\n\nAdds the functionality requested in https://github.com/rust-lang/rust/issues/96342. This is useful to work around tests broken upstream.\n\nhttps://github.com/rust-lang/rust/issues/96362#issuecomment-1108609893 is the specific test issue my project is trying to work around.", "tree": {"sha": "c6267cc7d4d54da2f7b185d5a72d2da05ed9b8f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6267cc7d4d54da2f7b185d5a72d2da05ed9b8f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/925e774edc34969c337bf65bd92bb8a338fc528d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/925e774edc34969c337bf65bd92bb8a338fc528d", "html_url": "https://github.com/rust-lang/rust/commit/925e774edc34969c337bf65bd92bb8a338fc528d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/925e774edc34969c337bf65bd92bb8a338fc528d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebb80ec4e90f8622440f3e33562db0d6e6c66555", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb80ec4e90f8622440f3e33562db0d6e6c66555", "html_url": "https://github.com/rust-lang/rust/commit/ebb80ec4e90f8622440f3e33562db0d6e6c66555"}, {"sha": "b2316c1a88b09dfebe7cabf889af9ceab8fef5f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2316c1a88b09dfebe7cabf889af9ceab8fef5f9", "html_url": "https://github.com/rust-lang/rust/commit/b2316c1a88b09dfebe7cabf889af9ceab8fef5f9"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "4ab502e90526fad6549987df50b2bb7262f1df33", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/925e774edc34969c337bf65bd92bb8a338fc528d/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925e774edc34969c337bf65bd92bb8a338fc528d/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=925e774edc34969c337bf65bd92bb8a338fc528d", "patch": "@@ -507,6 +507,7 @@ mod dist {\n         config.stage = 0;\n         config.cmd = Subcommand::Test {\n             paths: vec![\"library/std\".into()],\n+            skip: vec![],\n             test_args: vec![],\n             rustc_args: vec![],\n             fail_fast: true,\n@@ -577,6 +578,7 @@ mod dist {\n         let mut config = configure(&[\"A\"], &[\"A\"]);\n         config.cmd = Subcommand::Test {\n             paths: vec![],\n+            skip: vec![],\n             test_args: vec![],\n             rustc_args: vec![],\n             fail_fast: true,"}, {"sha": "4cd835ade6421128f0efe6d463c2f092bf65442b", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/925e774edc34969c337bf65bd92bb8a338fc528d/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925e774edc34969c337bf65bd92bb8a338fc528d/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=925e774edc34969c337bf65bd92bb8a338fc528d", "patch": "@@ -111,6 +111,7 @@ pub enum Subcommand {\n         compare_mode: Option<String>,\n         pass: Option<String>,\n         run: Option<String>,\n+        skip: Vec<String>,\n         test_args: Vec<String>,\n         rustc_args: Vec<String>,\n         fail_fast: bool,\n@@ -261,6 +262,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n         match subcommand {\n             Kind::Test => {\n                 opts.optflag(\"\", \"no-fail-fast\", \"Run all tests regardless of failure\");\n+                opts.optmulti(\"\", \"skip\", \"skips tests matching SUBSTRING, if supported by test tool. May be passed multiple times\", \"SUBSTRING\");\n                 opts.optmulti(\n                     \"\",\n                     \"test-args\",\n@@ -545,6 +547,7 @@ Arguments:\n                 compare_mode: matches.opt_str(\"compare-mode\"),\n                 pass: matches.opt_str(\"pass\"),\n                 run: matches.opt_str(\"run\"),\n+                skip: matches.opt_strs(\"skip\"),\n                 test_args: matches.opt_strs(\"test-args\"),\n                 rustc_args: matches.opt_strs(\"rustc-args\"),\n                 fail_fast: !matches.opt_present(\"no-fail-fast\"),\n@@ -689,12 +692,26 @@ impl Subcommand {\n     }\n \n     pub fn test_args(&self) -> Vec<&str> {\n+        let mut args = vec![];\n+\n+        match *self {\n+            Subcommand::Test { ref skip, .. } => {\n+                for s in skip {\n+                    args.push(\"--skip\");\n+                    args.push(s.as_str());\n+                }\n+            }\n+            _ => (),\n+        };\n+\n         match *self {\n             Subcommand::Test { ref test_args, .. } | Subcommand::Bench { ref test_args, .. } => {\n-                test_args.iter().flat_map(|s| s.split_whitespace()).collect()\n+                args.extend(test_args.iter().flat_map(|s| s.split_whitespace()))\n             }\n-            _ => Vec::new(),\n+            _ => (),\n         }\n+\n+        args\n     }\n \n     pub fn rustc_args(&self) -> Vec<&str> {"}, {"sha": "ea13ae13208ada66dc0008bbc38845d3a7dbc607", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/925e774edc34969c337bf65bd92bb8a338fc528d/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925e774edc34969c337bf65bd92bb8a338fc528d/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=925e774edc34969c337bf65bd92bb8a338fc528d", "patch": "@@ -246,6 +246,10 @@ pub struct Config {\n     /// Only run tests that match these filters\n     pub filters: Vec<String>,\n \n+    /// Skip tests tests matching these substrings. Corresponds to\n+    /// `test::TestOpts::skip`. `filter_exact` does not apply to these flags.\n+    pub skip: Vec<String>,\n+\n     /// Exactly match the filter, rather than a substring\n     pub filter_exact: bool,\n "}, {"sha": "e23cccf6cd1294320f0aa9ead725fb2e1318fe89", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/925e774edc34969c337bf65bd92bb8a338fc528d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925e774edc34969c337bf65bd92bb8a338fc528d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=925e774edc34969c337bf65bd92bb8a338fc528d", "patch": "@@ -91,6 +91,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         )\n         .optopt(\"\", \"run\", \"whether to execute run-* tests\", \"auto | always | never\")\n         .optflag(\"\", \"ignored\", \"run tests marked as ignored\")\n+        .optmulti(\"\", \"skip\", \"skip tests matching SUBSTRING. Can be passed multiple times\", \"SUBSTRING\")\n         .optflag(\"\", \"exact\", \"filters match exactly\")\n         .optopt(\n             \"\",\n@@ -236,6 +237,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         debugger: None,\n         run_ignored,\n         filters: matches.free.clone(),\n+        skip: matches.opt_strs(\"skip\"),\n         filter_exact: matches.opt_present(\"exact\"),\n         force_pass_mode: matches.opt_str(\"pass\").map(|mode| {\n             mode.parse::<PassMode>()\n@@ -312,6 +314,7 @@ pub fn log_config(config: &Config) {\n     logv(c, format!(\"mode: {}\", config.mode));\n     logv(c, format!(\"run_ignored: {}\", config.run_ignored));\n     logv(c, format!(\"filters: {:?}\", config.filters));\n+    logv(c, format!(\"skip: {:?}\", config.skip));\n     logv(c, format!(\"filter_exact: {}\", config.filter_exact));\n     logv(\n         c,\n@@ -506,7 +509,7 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n         shuffle: false,\n         shuffle_seed: None,\n         test_threads: None,\n-        skip: vec![],\n+        skip: config.skip.clone(),\n         list: false,\n         options: test::Options::new(),\n         time_options: None,\n@@ -595,6 +598,7 @@ fn collect_tests_from_dir(\n             debug!(\"found test file: {:?}\", file_path.display());\n             let paths =\n                 TestPaths { file: file_path, relative_dir: relative_dir_path.to_path_buf() };\n+\n             tests.extend(make_test(config, &paths, inputs))\n         } else if file_path.is_dir() {\n             let relative_file_path = relative_dir_path.join(file.file_name());"}]}