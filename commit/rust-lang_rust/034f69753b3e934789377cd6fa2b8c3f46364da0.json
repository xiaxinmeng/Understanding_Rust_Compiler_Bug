{"sha": "034f69753b3e934789377cd6fa2b8c3f46364da0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNGY2OTc1M2IzZTkzNDc4OTM3N2NkNmZhMmI4YzNmNDYzNjRkYTA=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-09-13T12:58:19Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:15:13Z"}, "message": "Generalized base::unsized_info", "tree": {"sha": "b5746f1c4883211b58111deec7c8b2b870c4d462", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5746f1c4883211b58111deec7c8b2b870c4d462"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/034f69753b3e934789377cd6fa2b8c3f46364da0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/034f69753b3e934789377cd6fa2b8c3f46364da0", "html_url": "https://github.com/rust-lang/rust/commit/034f69753b3e934789377cd6fa2b8c3f46364da0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/034f69753b3e934789377cd6fa2b8c3f46364da0/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "484e07c231e29febc68f2f21e970f8eb19818ad6", "url": "https://api.github.com/repos/rust-lang/rust/commits/484e07c231e29febc68f2f21e970f8eb19818ad6", "html_url": "https://github.com/rust-lang/rust/commit/484e07c231e29febc68f2f21e970f8eb19818ad6"}], "stats": {"total": 631, "additions": 341, "deletions": 290}, "files": [{"sha": "efb1ba52b0c8182a2cb9c5c3ef770c0810c5ad84", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -55,7 +55,6 @@ use builder::{Builder, MemFlags};\n use callee;\n use rustc_mir::monomorphize::item::DefPathBasedNames;\n use common::{self, IntPredicate, RealPredicate, TypeKind};\n-use consts;\n use context::CodegenCx;\n use debuginfo;\n use declare;\n@@ -188,16 +187,16 @@ pub fn compare_simd_types<'a, 'tcx: 'a, Builder: BuilderMethods<'a, 'tcx>>(\n /// The `old_info` argument is a bit funny. It is intended for use\n /// in an upcast, where the new vtable for an object will be derived\n /// from the old one.\n-pub fn unsized_info(\n-    cx: &CodegenCx<'ll, 'tcx>,\n+pub fn unsized_info<'tcx, Cx: CodegenMethods<'tcx>>(\n+    cx: &Cx,\n     source: Ty<'tcx>,\n     target: Ty<'tcx>,\n-    old_info: Option<&'ll Value>,\n-) -> &'ll Value {\n-    let (source, target) = cx.tcx.struct_lockstep_tails(source, target);\n+    old_info: Option<Cx::Value>,\n+) -> Cx::Value {\n+    let (source, target) = cx.tcx().struct_lockstep_tails(source, target);\n     match (&source.sty, &target.sty) {\n         (&ty::Array(_, len), &ty::Slice(_)) => {\n-            cx.const_usize(len.unwrap_usize(cx.tcx))\n+            cx.const_usize(len.unwrap_usize(cx.tcx()))\n         }\n         (&ty::Dynamic(..), &ty::Dynamic(..)) => {\n             // For now, upcasts are limited to changes in marker\n@@ -206,10 +205,10 @@ pub fn unsized_info(\n             old_info.expect(\"unsized_info: missing old info for trait upcast\")\n         }\n         (_, &ty::Dynamic(ref data, ..)) => {\n-            let vtable_ptr = cx.layout_of(cx.tcx.mk_mut_ptr(target))\n+            let vtable_ptr = cx.layout_of(cx.tcx().mk_mut_ptr(target))\n                 .field(cx, abi::FAT_PTR_EXTRA);\n-            consts::ptrcast(meth::get_vtable(cx, source, data.principal()),\n-                            vtable_ptr.llvm_type(cx))\n+            cx.static_ptrcast(meth::get_vtable(cx, source, data.principal()),\n+                            cx.backend_type(vtable_ptr))\n         }\n         _ => bug!(\"unsized_info: invalid unsizing {:?} -> {:?}\",\n                   source,"}, {"sha": "57e23766980fc50c1e1ac4a93ae9088077c92e31", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -15,8 +15,8 @@ use context::CodegenCx;\n use type_::Type;\n use value::Value;\n use libc::{c_uint, c_char};\n-use rustc::ty::TyCtxt;\n-use rustc::ty::layout::{Align, Size};\n+use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::layout::{Align, Size, TyLayout};\n use rustc::session::{config, Session};\n use rustc_data_structures::small_c_str::SmallCStr;\n use interfaces::*;\n@@ -56,7 +56,36 @@ bitflags! {\n     }\n }\n \n-impl HasCodegen for Builder<'a, 'll, 'tcx> {\n+impl BackendTypes for Builder<'_, 'll, '_> {\n+    type Value = &'ll Value;\n+    type BasicBlock = &'ll BasicBlock;\n+    type Type = &'ll Type;\n+    type Context = &'ll llvm::Context;\n+}\n+\n+impl ty::layout::HasDataLayout for Builder<'_, '_, '_> {\n+    fn data_layout(&self) -> &ty::layout::TargetDataLayout {\n+        self.cx.data_layout()\n+    }\n+}\n+\n+impl ty::layout::HasTyCtxt<'tcx> for Builder<'_, '_, 'tcx> {\n+    fn tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> {\n+        self.cx.tcx\n+    }\n+}\n+\n+impl ty::layout::LayoutOf for Builder<'_, '_, 'tcx> {\n+    type Ty = Ty<'tcx>;\n+    type TyLayout = TyLayout<'tcx>;\n+\n+    fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n+        self.cx.layout_of(ty)\n+    }\n+}\n+\n+\n+impl HasCodegen<'tcx> for Builder<'_, 'll, 'tcx> {\n     type CodegenCx = CodegenCx<'ll, 'tcx>;\n }\n \n@@ -98,10 +127,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         self.cx.sess()\n     }\n \n-    fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> {\n-        self.cx.tcx\n-    }\n-\n     fn llfn(&self) -> &'ll Value {\n         unsafe {\n             llvm::LLVMGetBasicBlockParent(self.llbb())"}, {"sha": "05d98ca068a01903703fac139f5618d344ecb898", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -22,7 +22,7 @@ use llvm;\n use monomorphize::Instance;\n use type_of::LayoutLlvmExt;\n use value::Value;\n-use interfaces::BaseTypeMethods;\n+use interfaces::*;\n \n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TypeFoldable};\n@@ -206,31 +206,33 @@ pub fn get_fn(\n     llfn\n }\n \n-pub fn resolve_and_get_fn(\n-    cx: &CodegenCx<'ll, 'tcx>,\n+pub fn resolve_and_get_fn<'tcx,\n+    Cx: Backend<'tcx> + MiscMethods<'tcx> + TypeMethods<'tcx>\n+>(\n+    cx: &Cx,\n     def_id: DefId,\n     substs: &'tcx Substs<'tcx>,\n-) -> &'ll Value {\n-    get_fn(\n-        cx,\n+) -> Cx::Value {\n+    cx.get_fn(\n         ty::Instance::resolve(\n-            cx.tcx,\n+            cx.tcx(),\n             ty::ParamEnv::reveal_all(),\n             def_id,\n             substs\n         ).unwrap()\n     )\n }\n \n-pub fn resolve_and_get_fn_for_vtable(\n-    cx: &CodegenCx<'ll, 'tcx>,\n+pub fn resolve_and_get_fn_for_vtable<'tcx,\n+    Cx: Backend<'tcx> + MiscMethods<'tcx> + TypeMethods<'tcx>\n+>(\n+    cx: &Cx,\n     def_id: DefId,\n     substs: &'tcx Substs<'tcx>,\n-) -> &'ll Value {\n-    get_fn(\n-        cx,\n+) -> Cx::Value {\n+    cx.get_fn(\n         ty::Instance::resolve_for_vtable(\n-            cx.tcx,\n+            cx.tcx(),\n             ty::ParamEnv::reveal_all(),\n             def_id,\n             substs"}, {"sha": "fb1f4df78fe9122c8d933f71bc496e0ceb3b6aa9", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -23,12 +23,11 @@ use declare;\n use type_::Type;\n use type_of::LayoutLlvmExt;\n use value::Value;\n-use interfaces::{Backend, ConstMethods, BaseTypeMethods};\n+use interfaces::{BackendTypes, BuilderMethods, ConstMethods, BaseTypeMethods};\n \n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{HasDataLayout, LayoutOf};\n use rustc::hir;\n-use interfaces::BuilderMethods;\n \n use libc::{c_uint, c_char};\n \n@@ -213,15 +212,14 @@ impl Funclet<'ll> {\n     }\n }\n \n-impl Backend for CodegenCx<'ll, 'tcx> {\n+impl BackendTypes for CodegenCx<'ll, 'tcx> {\n     type Value = &'ll Value;\n     type BasicBlock = &'ll BasicBlock;\n     type Type = &'ll Type;\n     type Context = &'ll llvm::Context;\n }\n \n-impl<'ll, 'tcx: 'll> ConstMethods for CodegenCx<'ll, 'tcx> {\n-\n+impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     // LLVM constant constructors.\n     fn const_null(&self, t: &'ll Type) -> &'ll Value {\n         unsafe {\n@@ -319,7 +317,7 @@ impl<'ll, 'tcx: 'll> ConstMethods for CodegenCx<'ll, 'tcx> {\n     fn const_str_slice(&self, s: LocalInternedString) -> &'ll Value {\n         let len = s.len();\n         let cs = consts::ptrcast(self.const_cstr(s, false),\n-            self.type_ptr_to(self.layout_of(self.tcx.mk_str()).llvm_type(&self)));\n+            self.type_ptr_to(self.layout_of(self.tcx.mk_str()).llvm_type(self)));\n         self.const_fat_ptr(cs, self.const_usize(len as u64))\n     }\n "}, {"sha": "2a5753ab27647f656869a1026ccca5a19680bdfa", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -201,7 +201,7 @@ impl StaticMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         let g = if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n \n-            let llty = self.layout_of(ty).llvm_type(&self);\n+            let llty = self.layout_of(ty).llvm_type(self);\n             let (g, attrs) = match self.tcx.hir.get(id) {\n                 Node::Item(&hir::Item {\n                     ref attrs, span, node: hir::ItemKind::Static(..), ..\n@@ -329,7 +329,7 @@ impl StaticMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n             let instance = Instance::mono(self.tcx, def_id);\n             let ty = instance.ty(self.tcx);\n-            let llty = self.layout_of(ty).llvm_type(&self);\n+            let llty = self.layout_of(ty).llvm_type(self);\n             let g = if val_llty == llty {\n                 g\n             } else {"}, {"sha": "f9f162bb823679ac76956b8ab214db267d30fa19", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -23,7 +23,7 @@ use value::Value;\n use monomorphize::partitioning::CodegenUnit;\n use type_::Type;\n use type_of::PointeeInfo;\n-use interfaces::{BaseTypeMethods, DerivedTypeMethods, IntrinsicDeclarationMethods};\n+use interfaces::*;\n \n use rustc_data_structures::base_n;\n use rustc_data_structures::small_c_str::SmallCStr;\n@@ -322,7 +322,18 @@ impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n     }\n }\n \n-impl IntrinsicDeclarationMethods for CodegenCx<'b, 'tcx> {\n+impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n+    fn vtables(&self) -> &RefCell<FxHashMap<(Ty<'tcx>,\n+                                ty::PolyExistentialTraitRef<'tcx>), &'ll Value>>\n+    {\n+        &self.vtables\n+    }\n+    fn get_fn(&self, instance: Instance<'tcx>) -> &'ll Value {\n+        callee::get_fn(&&self,instance)\n+    }\n+}\n+\n+impl IntrinsicDeclarationMethods<'tcx> for CodegenCx<'b, 'tcx> {\n     fn get_intrinsic(&self, key: &str) -> &'b Value {\n         if let Some(v) = self.intrinsics.borrow().get(key).cloned() {\n             return v;"}, {"sha": "923b04c0eccb48384990da08d954f0a41738e39f", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 54, "deletions": 51, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -17,6 +17,7 @@ use super::utils::{debug_context, DIB, span_start,\n use super::namespace::mangled_name_of_instance;\n use super::type_names::compute_debuginfo_type_name;\n use super::{CrateDebugContext};\n+use interfaces::*;\n use abi;\n use interfaces::ConstMethods;\n use value::Value;\n@@ -1983,58 +1984,60 @@ pub fn extend_scope_to_file(\n     }\n }\n \n-/// Creates debug information for the given vtable, which is for the\n-/// given type.\n-///\n-/// Adds the created metadata nodes directly to the crate's IR.\n-pub fn create_vtable_metadata(\n-    cx: &CodegenCx<'ll, 'tcx>,\n-    ty: ty::Ty<'tcx>,\n-    vtable: &'ll Value,\n-) {\n-    if cx.dbg_cx.is_none() {\n-        return;\n-    }\n-\n-    let type_metadata = type_metadata(cx, ty, syntax_pos::DUMMY_SP);\n-\n-    unsafe {\n-        // LLVMRustDIBuilderCreateStructType() wants an empty array. A null\n-        // pointer will lead to hard to trace and debug LLVM assertions\n-        // later on in llvm/lib/IR/Value.cpp.\n-        let empty_array = create_DIArray(DIB(cx), &[]);\n-\n-        let name = const_cstr!(\"vtable\");\n+impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n+    /// Creates debug information for the given vtable, which is for the\n+    /// given type.\n+    ///\n+    /// Adds the created metadata nodes directly to the crate's IR.\n+    fn create_vtable_metadata(\n+        &self,\n+        ty: ty::Ty<'tcx>,\n+        vtable: &'ll Value,\n+    ) {\n+        if self.dbg_cx.is_none() {\n+            return;\n+        }\n \n-        // Create a new one each time.  We don't want metadata caching\n-        // here, because each vtable will refer to a unique containing\n-        // type.\n-        let vtable_type = llvm::LLVMRustDIBuilderCreateStructType(\n-            DIB(cx),\n-            NO_SCOPE_METADATA,\n-            name.as_ptr(),\n-            unknown_file_metadata(cx),\n-            UNKNOWN_LINE_NUMBER,\n-            Size::ZERO.bits(),\n-            cx.tcx.data_layout.pointer_align.abi_bits() as u32,\n-            DIFlags::FlagArtificial,\n-            None,\n-            empty_array,\n-            0,\n-            Some(type_metadata),\n-            name.as_ptr()\n-        );\n+        let type_metadata = type_metadata(&self, ty, syntax_pos::DUMMY_SP);\n \n-        llvm::LLVMRustDIBuilderCreateStaticVariable(DIB(cx),\n-                                                    NO_SCOPE_METADATA,\n-                                                    name.as_ptr(),\n-                                                    ptr::null(),\n-                                                    unknown_file_metadata(cx),\n-                                                    UNKNOWN_LINE_NUMBER,\n-                                                    vtable_type,\n-                                                    true,\n-                                                    vtable,\n-                                                    None,\n-                                                    0);\n+        unsafe {\n+            // LLVMRustDIBuilderCreateStructType() wants an empty array. A null\n+            // pointer will lead to hard to trace and debug LLVM assertions\n+            // later on in llvm/lib/IR/Value.cpp.\n+            let empty_array = create_DIArray(DIB(&self), &[]);\n+\n+            let name = const_cstr!(\"vtable\");\n+\n+            // Create a new one each time.  We don't want metadata caching\n+            // here, because each vtable will refer to a unique containing\n+            // type.\n+            let vtable_type = llvm::LLVMRustDIBuilderCreateStructType(\n+                DIB(&self),\n+                NO_SCOPE_METADATA,\n+                name.as_ptr(),\n+                unknown_file_metadata(&self),\n+                UNKNOWN_LINE_NUMBER,\n+                Size::ZERO.bits(),\n+                self.tcx.data_layout.pointer_align.abi_bits() as u32,\n+                DIFlags::FlagArtificial,\n+                None,\n+                empty_array,\n+                0,\n+                Some(type_metadata),\n+                name.as_ptr()\n+            );\n+\n+            llvm::LLVMRustDIBuilderCreateStaticVariable(DIB(&self),\n+                                                        NO_SCOPE_METADATA,\n+                                                        name.as_ptr(),\n+                                                        ptr::null(),\n+                                                        unknown_file_metadata(&self),\n+                                                        UNKNOWN_LINE_NUMBER,\n+                                                        vtable_type,\n+                                                        true,\n+                                                        vtable,\n+                                                        None,\n+                                                        0);\n+        }\n     }\n }"}, {"sha": "9fcd57a1ec5a311bed1d41a88e084f6fb4b04791", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -58,7 +58,6 @@ mod source_loc;\n pub use self::create_scope_map::{create_mir_scopes, MirDebugScope};\n pub use self::source_loc::start_emitting_source_locations;\n pub use self::metadata::create_global_var_metadata;\n-pub use self::metadata::create_vtable_metadata;\n pub use self::metadata::extend_scope_to_file;\n pub use self::source_loc::set_source_location;\n "}, {"sha": "680f216589ea136b54d854b05cac1c8b9edbbd17", "filename": "src/librustc_codegen_llvm/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fglue.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -17,7 +17,7 @@ use std;\n use builder::Builder;\n use common::*;\n use meth;\n-use rustc::ty::layout::LayoutOf;\n+use rustc::ty::layout::{LayoutOf, HasTyCtxt};\n use rustc::ty::{self, Ty};\n use value::Value;\n use interfaces::{BuilderMethods, ConstMethods};"}, {"sha": "c470ad3b881b433fd2536f1fac602756bd7fb4e5", "filename": "src/librustc_codegen_llvm/interfaces/backend.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -8,11 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use rustc::ty::layout::{HasTyCtxt, LayoutOf, TyLayout};\n+use rustc::ty::Ty;\n use std::fmt::Debug;\n \n-pub trait Backend {\n+pub trait BackendTypes {\n     type Value: Debug + PartialEq + Copy;\n     type BasicBlock;\n     type Type: Debug + PartialEq + Copy;\n     type Context;\n }\n+\n+pub trait Backend<'tcx>:\n+    BackendTypes + HasTyCtxt<'tcx> + LayoutOf<Ty = Ty<'tcx>, TyLayout = TyLayout<'tcx>>\n+{\n+}\n+\n+impl<'tcx, T> Backend<'tcx> for T where\n+    Self: BackendTypes + HasTyCtxt<'tcx> + LayoutOf<Ty = Ty<'tcx>, TyLayout = TyLayout<'tcx>>\n+{}"}, {"sha": "2ddef097f36ce114c0c9efe9bdb406c5ed63012c", "filename": "src/librustc_codegen_llvm/interfaces/builder.rs", "status": "modified", "additions": 49, "deletions": 101, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -8,48 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use super::HasCodegen;\n+use builder::MemFlags;\n use common::*;\n use libc::c_char;\n-use rustc::ty::TyCtxt;\n-use rustc::ty::layout::{Align, Size};\n use rustc::session::Session;\n-use builder::MemFlags;\n-use super::backend::Backend;\n-use super::type_::TypeMethods;\n-use super::consts::ConstMethods;\n-use super::intrinsic::IntrinsicDeclarationMethods;\n+use rustc::ty::layout::{Align, Size};\n \n use std::borrow::Cow;\n use std::ops::Range;\n use syntax::ast::AsmDialect;\n \n-pub trait HasCodegen: Backend {\n-    type CodegenCx: TypeMethods + ConstMethods + IntrinsicDeclarationMethods + Backend<\n-        Value = Self::Value,\n-        BasicBlock = Self::BasicBlock,\n-        Type = Self::Type,\n-        Context = Self::Context,\n-    >;\n-}\n-\n-impl<T: HasCodegen> Backend for T {\n-    type Value = <T::CodegenCx as Backend>::Value;\n-    type BasicBlock = <T::CodegenCx as Backend>::BasicBlock;\n-    type Type = <T::CodegenCx as Backend>::Type;\n-    type Context = <T::CodegenCx as Backend>::Context;\n-}\n-\n-pub trait BuilderMethods<'a, 'tcx: 'a>: HasCodegen {\n-    fn new_block<'b>(\n-        cx: &'a Self::CodegenCx,\n-        llfn: Self::Value,\n-        name: &'b str\n-    ) -> Self;\n+pub trait BuilderMethods<'a, 'tcx: 'a>: HasCodegen<'tcx> {\n+    fn new_block<'b>(cx: &'a Self::CodegenCx, llfn: Self::Value, name: &'b str) -> Self;\n     fn with_cx(cx: &'a Self::CodegenCx) -> Self;\n     fn build_sibling_block<'b>(&self, name: &'b str) -> Self;\n     fn sess(&self) -> &Session;\n-    fn cx(&self) -> &'a Self::CodegenCx;\n-    fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx>;\n+    fn cx(&self) -> &'a Self::CodegenCx; // FIXME(eddyb) remove 'a\n     fn llfn(&self) -> Self::Value;\n     fn llbb(&self) -> Self::BasicBlock;\n     fn count_insn(&self, category: &str);\n@@ -60,25 +35,15 @@ pub trait BuilderMethods<'a, 'tcx: 'a>: HasCodegen {\n     fn ret_void(&self);\n     fn ret(&self, v: Self::Value);\n     fn br(&self, dest: Self::BasicBlock);\n-    fn cond_br(\n-        &self,\n-        cond: Self::Value,\n-        then_llbb: Self::BasicBlock,\n-        else_llbb: Self::BasicBlock,\n-    );\n-    fn switch(\n-        &self,\n-        v: Self::Value,\n-        else_llbb: Self::BasicBlock,\n-        num_cases: usize,\n-    ) -> Self::Value;\n+    fn cond_br(&self, cond: Self::Value, then_llbb: Self::BasicBlock, else_llbb: Self::BasicBlock);\n+    fn switch(&self, v: Self::Value, else_llbb: Self::BasicBlock, num_cases: usize) -> Self::Value;\n     fn invoke(\n         &self,\n         llfn: Self::Value,\n         args: &[Self::Value],\n         then: Self::BasicBlock,\n         catch: Self::BasicBlock,\n-        bundle: Option<&OperandBundleDef<Self::Value>>\n+        bundle: Option<&OperandBundleDef<Self::Value>>,\n     ) -> Self::Value;\n     fn unreachable(&self);\n     fn add(&self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n@@ -117,7 +82,7 @@ pub trait BuilderMethods<'a, 'tcx: 'a>: HasCodegen {\n         ty: Self::Type,\n         len: Self::Value,\n         name: &str,\n-        align: Align\n+        align: Align,\n     ) -> Self::Value;\n \n     fn load(&self, ptr: Self::Value, align: Align) -> Self::Value;\n@@ -135,13 +100,7 @@ pub trait BuilderMethods<'a, 'tcx: 'a>: HasCodegen {\n         align: Align,\n         flags: MemFlags,\n     ) -> Self::Value;\n-    fn atomic_store(\n-        &self,\n-        val: Self::Value,\n-        ptr: Self::Value,\n-        order: AtomicOrdering,\n-        size: Size\n-    );\n+    fn atomic_store(&self, val: Self::Value, ptr: Self::Value, order: AtomicOrdering, size: Size);\n \n     fn gep(&self, ptr: Self::Value, indices: &[Self::Value]) -> Self::Value;\n     fn inbounds_gep(&self, ptr: Self::Value, indices: &[Self::Value]) -> Self::Value;\n@@ -174,16 +133,27 @@ pub trait BuilderMethods<'a, 'tcx: 'a>: HasCodegen {\n         output: Self::Type,\n         volatile: bool,\n         alignstack: bool,\n-        dia: AsmDialect\n+        dia: AsmDialect,\n     ) -> Option<Self::Value>;\n \n-\n-    fn memcpy(&self, dst: Self::Value, dst_align: Align,\n-                  src: Self::Value, src_align: Align,\n-                  size: Self::Value, flags: MemFlags);\n-    fn memmove(&self, dst: Self::Value, dst_align: Align,\n-                  src: Self::Value, src_align: Align,\n-                  size: Self::Value, flags: MemFlags);\n+    fn memcpy(\n+        &self,\n+        dst: Self::Value,\n+        dst_align: Align,\n+        src: Self::Value,\n+        src_align: Align,\n+        size: Self::Value,\n+        flags: MemFlags,\n+    );\n+    fn memmove(\n+        &self,\n+        dst: Self::Value,\n+        dst_align: Align,\n+        src: Self::Value,\n+        src_align: Align,\n+        size: Self::Value,\n+        flags: MemFlags,\n+    );\n     fn memset(\n         &self,\n         ptr: Self::Value,\n@@ -196,18 +166,15 @@ pub trait BuilderMethods<'a, 'tcx: 'a>: HasCodegen {\n     fn minnum(&self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn maxnum(&self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn select(\n-        &self, cond: Self::Value,\n+        &self,\n+        cond: Self::Value,\n         then_val: Self::Value,\n         else_val: Self::Value,\n     ) -> Self::Value;\n \n     fn va_arg(&self, list: Self::Value, ty: Self::Type) -> Self::Value;\n     fn extract_element(&self, vec: Self::Value, idx: Self::Value) -> Self::Value;\n-    fn insert_element(\n-        &self, vec: Self::Value,\n-        elt: Self::Value,\n-        idx: Self::Value,\n-    ) -> Self::Value;\n+    fn insert_element(&self, vec: Self::Value, elt: Self::Value, idx: Self::Value) -> Self::Value;\n     fn shuffle_vector(&self, v1: Self::Value, v2: Self::Value, mask: Self::Value) -> Self::Value;\n     fn vector_splat(&self, num_elts: usize, elt: Self::Value) -> Self::Value;\n     fn vector_reduce_fadd_fast(&self, acc: Self::Value, src: Self::Value) -> Self::Value;\n@@ -224,36 +191,15 @@ pub trait BuilderMethods<'a, 'tcx: 'a>: HasCodegen {\n     fn vector_reduce_min(&self, src: Self::Value, is_signed: bool) -> Self::Value;\n     fn vector_reduce_max(&self, src: Self::Value, is_signed: bool) -> Self::Value;\n     fn extract_value(&self, agg_val: Self::Value, idx: u64) -> Self::Value;\n-    fn insert_value(\n-        &self,\n-        agg_val: Self::Value,\n-        elt: Self::Value,\n-        idx: u64\n-    ) -> Self::Value;\n+    fn insert_value(&self, agg_val: Self::Value, elt: Self::Value, idx: u64) -> Self::Value;\n \n-    fn landing_pad(\n-        &self,\n-        ty: Self::Type,\n-        pers_fn: Self::Value,\n-        num_clauses: usize\n-    ) -> Self::Value;\n+    fn landing_pad(&self, ty: Self::Type, pers_fn: Self::Value, num_clauses: usize) -> Self::Value;\n     fn add_clause(&self, landing_pad: Self::Value, clause: Self::Value);\n     fn set_cleanup(&self, landing_pad: Self::Value);\n     fn resume(&self, exn: Self::Value) -> Self::Value;\n-    fn cleanup_pad(\n-        &self,\n-        parent: Option<Self::Value>,\n-        args: &[Self::Value]\n-    ) -> Self::Value;\n-    fn cleanup_ret(\n-        &self, cleanup: Self::Value,\n-        unwind: Option<Self::BasicBlock>,\n-    ) -> Self::Value;\n-    fn catch_pad(\n-        &self,\n-        parent: Self::Value,\n-        args: &[Self::Value]\n-    ) -> Self::Value;\n+    fn cleanup_pad(&self, parent: Option<Self::Value>, args: &[Self::Value]) -> Self::Value;\n+    fn cleanup_ret(&self, cleanup: Self::Value, unwind: Option<Self::BasicBlock>) -> Self::Value;\n+    fn catch_pad(&self, parent: Self::Value, args: &[Self::Value]) -> Self::Value;\n     fn catch_ret(&self, pad: Self::Value, unwind: Self::BasicBlock) -> Self::Value;\n     fn catch_switch(\n         &self,\n@@ -285,23 +231,25 @@ pub trait BuilderMethods<'a, 'tcx: 'a>: HasCodegen {\n     fn add_incoming_to_phi(&self, phi: Self::Value, val: Self::Value, bb: Self::BasicBlock);\n     fn set_invariant_load(&self, load: Self::Value);\n \n-    fn check_store(\n-        &self,\n-        val: Self::Value,\n-        ptr: Self::Value\n-    ) -> Self::Value;\n+    fn check_store(&self, val: Self::Value, ptr: Self::Value) -> Self::Value;\n     fn check_call<'b>(\n         &self,\n         typ: &str,\n         llfn: Self::Value,\n-        args: &'b [Self::Value]\n-    ) -> Cow<'b, [Self::Value]> where [Self::Value]: ToOwned;\n+        args: &'b [Self::Value],\n+    ) -> Cow<'b, [Self::Value]>\n+    where\n+        [Self::Value]: ToOwned;\n     fn lifetime_start(&self, ptr: Self::Value, size: Size);\n     fn lifetime_end(&self, ptr: Self::Value, size: Size);\n \n     fn call_lifetime_intrinsic(&self, intrinsic: &str, ptr: Self::Value, size: Size);\n \n-    fn call(&self, llfn: Self::Value, args: &[Self::Value],\n-                bundle: Option<&OperandBundleDef<Self::Value>>) -> Self::Value;\n+    fn call(\n+        &self,\n+        llfn: Self::Value,\n+        args: &[Self::Value],\n+        bundle: Option<&OperandBundleDef<Self::Value>>,\n+    ) -> Self::Value;\n     fn zext(&self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;\n }"}, {"sha": "b5e0169472d06d96d40c47eb669a1f37f719473e", "filename": "src/librustc_codegen_llvm/interfaces/consts.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fconsts.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -11,7 +11,7 @@\n use super::Backend;\n use syntax::symbol::LocalInternedString;\n \n-pub trait ConstMethods: Backend {\n+pub trait ConstMethods<'tcx>: Backend<'tcx> {\n     // Constant constructors\n     fn const_null(&self, t: Self::Type) -> Self::Value;\n     fn const_undef(&self, t: Self::Type) -> Self::Value;\n@@ -24,22 +24,10 @@ pub trait ConstMethods: Backend {\n     fn const_u64(&self, i: u64) -> Self::Value;\n     fn const_usize(&self, i: u64) -> Self::Value;\n     fn const_u8(&self, i: u8) -> Self::Value;\n-    fn const_cstr(\n-        &self,\n-        s: LocalInternedString,\n-        null_terminated: bool,\n-    ) -> Self::Value;\n+    fn const_cstr(&self, s: LocalInternedString, null_terminated: bool) -> Self::Value;\n     fn const_str_slice(&self, s: LocalInternedString) -> Self::Value;\n-    fn const_fat_ptr(\n-        &self,\n-        ptr: Self::Value,\n-        meta: Self::Value\n-    ) -> Self::Value;\n-    fn const_struct(\n-        &self,\n-        elts: &[Self::Value],\n-        packed: bool\n-    ) -> Self::Value;\n+    fn const_fat_ptr(&self, ptr: Self::Value, meta: Self::Value) -> Self::Value;\n+    fn const_struct(&self, elts: &[Self::Value], packed: bool) -> Self::Value;\n     fn const_array(&self, ty: Self::Type, elts: &[Self::Value]) -> Self::Value;\n     fn const_vector(&self, elts: &[Self::Value]) -> Self::Value;\n     fn const_bytes(&self, bytes: &[u8]) -> Self::Value;"}, {"sha": "333fda226a9ead53c89e63a3fb73f315bf52da01", "filename": "src/librustc_codegen_llvm/interfaces/debuginfo.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdebuginfo.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use super::backend::Backend;\n+use rustc::ty::Ty;\n+\n+pub trait DebugInfoMethods<'tcx>: Backend<'tcx> {\n+    fn create_vtable_metadata(&self, ty: Ty<'tcx>, vtable: Self::Value);\n+}"}, {"sha": "f31a3adc5b8fef5fee8cc2e537a1e541398f7c3c", "filename": "src/librustc_codegen_llvm/interfaces/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fintrinsic.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n use super::backend::Backend;\n-use super::builder::HasCodegen;\n+use super::builder::BuilderMethods;\n+use abi::FnType;\n use mir::operand::OperandRef;\n use rustc::ty::Ty;\n-use abi::FnType;\n use syntax_pos::Span;\n \n-pub trait IntrinsicCallMethods<'a, 'tcx: 'a>: HasCodegen {\n+pub trait IntrinsicCallMethods<'a, 'tcx: 'a>: BuilderMethods<'a, 'tcx> {\n     fn codegen_intrinsic_call(\n         &self,\n         callee_ty: Ty<'tcx>,\n@@ -26,10 +26,7 @@ pub trait IntrinsicCallMethods<'a, 'tcx: 'a>: HasCodegen {\n     );\n }\n \n-pub trait IntrinsicDeclarationMethods: Backend {\n+pub trait IntrinsicDeclarationMethods<'tcx>: Backend<'tcx> {\n     fn get_intrinsic(&self, key: &str) -> Self::Value;\n-    fn declare_intrinsic(\n-        &self,\n-        key: &str\n-    ) -> Option<Self::Value>;\n+    fn declare_intrinsic(&self, key: &str) -> Option<Self::Value>;\n }"}, {"sha": "c483d82495de404900bda4c5c8c25584586d6165", "filename": "src/librustc_codegen_llvm/interfaces/misc.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmisc.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use super::backend::Backend;\n+use rustc::ty::{self, Instance, Ty};\n+use rustc::util::nodemap::FxHashMap;\n+use std::cell::RefCell;\n+\n+pub trait MiscMethods<'tcx>: Backend<'tcx> {\n+    fn vtables(\n+        &self,\n+    ) -> &RefCell<FxHashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>), Self::Value>>;\n+    fn get_fn(&self, instance: Instance<'tcx>) -> Self::Value;\n+}"}, {"sha": "a978e295967e50eb25edf1bdf544b8bea4559f0c", "filename": "src/librustc_codegen_llvm/interfaces/mod.rs", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -8,16 +8,49 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-mod builder;\n mod backend;\n+mod builder;\n mod consts;\n-mod type_;\n+mod debuginfo;\n mod intrinsic;\n+mod misc;\n mod statics;\n+mod type_;\n \n-pub use self::builder::{BuilderMethods, HasCodegen};\n-pub use self::backend::Backend;\n+pub use self::backend::{Backend, BackendTypes};\n+pub use self::builder::BuilderMethods;\n pub use self::consts::ConstMethods;\n-pub use self::type_::{TypeMethods, BaseTypeMethods, DerivedTypeMethods};\n+pub use self::debuginfo::DebugInfoMethods;\n pub use self::intrinsic::{IntrinsicCallMethods, IntrinsicDeclarationMethods};\n+pub use self::misc::MiscMethods;\n pub use self::statics::StaticMethods;\n+pub use self::type_::{BaseTypeMethods, DerivedTypeMethods, LayoutTypeMethods, TypeMethods};\n+\n+pub trait CodegenMethods<'tcx>:\n+    Backend<'tcx>\n+    + TypeMethods<'tcx>\n+    + MiscMethods<'tcx>\n+    + ConstMethods<'tcx>\n+    + StaticMethods<'tcx>\n+    + DebugInfoMethods<'tcx>\n+{\n+}\n+\n+impl<'tcx, T> CodegenMethods<'tcx> for T where\n+    Self: Backend<'tcx>\n+        + TypeMethods<'tcx>\n+        + MiscMethods<'tcx>\n+        + ConstMethods<'tcx>\n+        + StaticMethods<'tcx>\n+        + DebugInfoMethods<'tcx>\n+{}\n+\n+pub trait HasCodegen<'tcx>: Backend<'tcx> {\n+    type CodegenCx: CodegenMethods<'tcx>\n+        + BackendTypes<\n+            Value = Self::Value,\n+            BasicBlock = Self::BasicBlock,\n+            Type = Self::Type,\n+            Context = Self::Context,\n+        >;\n+}"}, {"sha": "a61087812316c8130fb6911496a72e460a15bf34", "filename": "src/librustc_codegen_llvm/interfaces/statics.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fstatics.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -8,29 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::ty::layout::Align;\n-use rustc::hir::def_id::DefId;\n use super::backend::Backend;\n+use rustc::hir::def_id::DefId;\n+use rustc::ty::layout::Align;\n \n-pub trait StaticMethods<'tcx>: Backend {\n+pub trait StaticMethods<'tcx>: Backend<'tcx> {\n     fn static_ptrcast(&self, val: Self::Value, ty: Self::Type) -> Self::Value;\n     fn static_bitcast(&self, val: Self::Value, ty: Self::Type) -> Self::Value;\n-    fn static_addr_of_mut(\n-        &self,\n-        cv: Self::Value,\n-        align: Align,\n-        kind: Option<&str>,\n-    ) -> Self::Value;\n-    fn static_addr_of(\n-        &self,\n-        cv: Self::Value,\n-        align: Align,\n-        kind: Option<&str>,\n-    ) -> Self::Value;\n+    fn static_addr_of_mut(&self, cv: Self::Value, align: Align, kind: Option<&str>) -> Self::Value;\n+    fn static_addr_of(&self, cv: Self::Value, align: Align, kind: Option<&str>) -> Self::Value;\n     fn get_static(&self, def_id: DefId) -> Self::Value;\n-    fn codegen_static(\n-        &self,\n-        def_id: DefId,\n-        is_mutable: bool,\n-    );\n+    fn codegen_static(&self, def_id: DefId, is_mutable: bool);\n }"}, {"sha": "e88e81a55665f5a679509cfbc81f8c74754b569a", "filename": "src/librustc_codegen_llvm/interfaces/type_.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -10,10 +10,14 @@\n \n use super::backend::Backend;\n use common::TypeKind;\n-use syntax::ast;\n+use rustc::ty::layout::TyLayout;\n use rustc::ty::layout::{self, Align, Size};\n+use rustc::ty::Ty;\n+use rustc::util::nodemap::FxHashMap;\n+use std::cell::RefCell;\n+use syntax::ast;\n \n-pub trait BaseTypeMethods: Backend {\n+pub trait BaseTypeMethods<'tcx>: Backend<'tcx> {\n     fn type_void(&self) -> Self::Type;\n     fn type_metadata(&self) -> Self::Type;\n     fn type_i1(&self) -> Self::Type;\n@@ -43,32 +47,31 @@ pub trait BaseTypeMethods: Backend {\n     fn int_width(&self, ty: Self::Type) -> u64;\n \n     fn val_ty(&self, v: Self::Value) -> Self::Type;\n+    fn scalar_lltypes(&self) -> &RefCell<FxHashMap<Ty<'tcx>, Self::Type>>;\n }\n \n-pub trait DerivedTypeMethods: Backend {\n+pub trait DerivedTypeMethods<'tcx>: Backend<'tcx> {\n     fn type_bool(&self) -> Self::Type;\n     fn type_i8p(&self) -> Self::Type;\n     fn type_isize(&self) -> Self::Type;\n     fn type_int(&self) -> Self::Type;\n-    fn type_int_from_ty(\n-        &self,\n-        t: ast::IntTy\n-    ) -> Self::Type;\n-    fn type_uint_from_ty(\n-        &self,\n-        t: ast::UintTy\n-    ) -> Self::Type;\n-    fn type_float_from_ty(\n-        &self,\n-        t: ast::FloatTy\n-    ) -> Self::Type;\n+    fn type_int_from_ty(&self, t: ast::IntTy) -> Self::Type;\n+    fn type_uint_from_ty(&self, t: ast::UintTy) -> Self::Type;\n+    fn type_float_from_ty(&self, t: ast::FloatTy) -> Self::Type;\n     fn type_from_integer(&self, i: layout::Integer) -> Self::Type;\n     fn type_pointee_for_abi_align(&self, align: Align) -> Self::Type;\n-    fn type_padding_filler(\n-        &self,\n-        size: Size,\n-        align: Align\n-    ) -> Self::Type;\n+    fn type_padding_filler(&self, size: Size, align: Align) -> Self::Type;\n+}\n+\n+pub trait LayoutTypeMethods<'tcx>: Backend<'tcx> {\n+    fn backend_type(&self, ty: TyLayout<'tcx>) -> Self::Type;\n+}\n+\n+pub trait TypeMethods<'tcx>:\n+    BaseTypeMethods<'tcx> + DerivedTypeMethods<'tcx> + LayoutTypeMethods<'tcx>\n+{\n }\n \n-pub trait TypeMethods: BaseTypeMethods + DerivedTypeMethods {}\n+impl<T> TypeMethods<'tcx> for T where\n+    Self: BaseTypeMethods<'tcx> + DerivedTypeMethods<'tcx> + LayoutTypeMethods<'tcx>\n+{}"}, {"sha": "60a7de477bdbb564045a612cb1cb36c5e7e16f6b", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -25,7 +25,7 @@ use glue;\n use type_::Type;\n use type_of::LayoutLlvmExt;\n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::LayoutOf;\n+use rustc::ty::layout::{LayoutOf, HasTyCtxt};\n use rustc::hir;\n use syntax::ast;\n use syntax::symbol::Symbol;"}, {"sha": "798cc8c83089e195242543e665f01b6cc0e04cb1", "filename": "src/librustc_codegen_llvm/meth.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmeth.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -10,16 +10,14 @@\n \n use abi::{FnType, FnTypeExt};\n use callee;\n-use context::CodegenCx;\n use builder::Builder;\n use monomorphize;\n use value::Value;\n \n-use interfaces::{BuilderMethods, ConstMethods, BaseTypeMethods, DerivedTypeMethods, StaticMethods};\n+use interfaces::*;\n \n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::HasDataLayout;\n-use debuginfo;\n+use rustc::ty::layout::HasTyCtxt;\n \n #[derive(Copy, Clone, Debug)]\n pub struct VirtualIndex(u64);\n@@ -82,17 +80,17 @@ impl<'a, 'tcx> VirtualIndex {\n /// The `trait_ref` encodes the erased self type. Hence if we are\n /// making an object `Foo<Trait>` from a value of type `Foo<T>`, then\n /// `trait_ref` would map `T:Trait`.\n-pub fn get_vtable(\n-    cx: &CodegenCx<'ll, 'tcx>,\n+pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n+    cx: &Cx,\n     ty: Ty<'tcx>,\n     trait_ref: ty::PolyExistentialTraitRef<'tcx>,\n-) -> &'ll Value {\n-    let tcx = cx.tcx;\n+) -> Cx::Value {\n+    let tcx = cx.tcx();\n \n     debug!(\"get_vtable(ty={:?}, trait_ref={:?})\", ty, trait_ref);\n \n     // Check the cache.\n-    if let Some(&val) = cx.vtables.borrow().get(&(ty, trait_ref)) {\n+    if let Some(&val) = cx.vtables().borrow().get(&(ty, trait_ref)) {\n         return val;\n     }\n \n@@ -106,13 +104,13 @@ pub fn get_vtable(\n         })\n     });\n \n-    let (size, align) = cx.size_and_align_of(ty);\n+    let (size, align) = cx.layout_of(ty).size_and_align();\n     // /////////////////////////////////////////////////////////////////////////////////////////////\n     // If you touch this code, be sure to also make the corresponding changes to\n     // `get_vtable` in rust_mir/interpret/traits.rs\n     // /////////////////////////////////////////////////////////////////////////////////////////////\n     let components: Vec<_> = [\n-        callee::get_fn(cx, monomorphize::resolve_drop_in_place(cx.tcx, ty)),\n+        cx.get_fn(monomorphize::resolve_drop_in_place(cx.tcx(), ty)),\n         cx.const_usize(size.bytes()),\n         cx.const_usize(align.abi())\n     ].iter().cloned().chain(methods).collect();\n@@ -121,8 +119,8 @@ pub fn get_vtable(\n     let align = cx.data_layout().pointer_align;\n     let vtable = cx.static_addr_of(vtable_const, align, Some(\"vtable\"));\n \n-    debuginfo::create_vtable_metadata(cx, ty, vtable);\n+    cx.create_vtable_metadata(ty, vtable);\n \n-    cx.vtables.borrow_mut().insert((ty, trait_ref), vtable);\n+    cx.vtables().borrow_mut().insert((ty, trait_ref), vtable);\n     vtable\n }"}, {"sha": "6a8a8948cc716dd791e333890da386db5dfb9d4a", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -11,7 +11,7 @@\n use llvm::{self, BasicBlock};\n use rustc::middle::lang_items;\n use rustc::ty::{self, Ty, TypeFoldable};\n-use rustc::ty::layout::{self, LayoutOf};\n+use rustc::ty::layout::{self, LayoutOf, HasTyCtxt};\n use rustc::mir;\n use rustc::mir::interpret::EvalErrorKind;\n use abi::{Abi, ArgType, ArgTypeExt, FnType, FnTypeExt, LlvmType, PassMode};\n@@ -57,7 +57,7 @@ impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n         debug!(\"codegen_terminator: {:?}\", terminator);\n \n         // Create the cleanup bundle, if needed.\n-        let tcx = bx.tcx();\n+        let tcx = self.cx.tcx;\n         let span = terminator.source_info.span;\n         let funclet_bb = self.cleanup_kinds[bb].funclet_bb(bb);\n         let funclet = funclet_bb.and_then(|funclet_bb| self.funclets[funclet_bb].as_ref());"}, {"sha": "5ccb20886b6f90505a5b15068d0ff53a00a1b60c", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -16,7 +16,7 @@ use rustc::mir;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc::mir::interpret::{GlobalId, Pointer, Scalar, Allocation, ConstValue, AllocType};\n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::{self, HasDataLayout, LayoutOf, Size};\n+use rustc::ty::layout::{self, HasDataLayout, LayoutOf, Size, HasTyCtxt};\n use builder::Builder;\n use common::{CodegenCx};\n use type_of::LayoutLlvmExt;"}, {"sha": "e3e3843476af486955c38879abf694baf78ac6bc", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -13,7 +13,7 @@ use llvm::{self, BasicBlock};\n use llvm::debuginfo::DIScope;\n use llvm_util;\n use rustc::ty::{self, Ty, TypeFoldable, UpvarSubsts};\n-use rustc::ty::layout::{LayoutOf, TyLayout};\n+use rustc::ty::layout::{LayoutOf, TyLayout, HasTyCtxt};\n use rustc::mir::{self, Mir};\n use rustc::ty::subst::Substs;\n use rustc::session::config::DebugInfo;"}, {"sha": "285cbb21aa14b39cc2815a47071d80512b7901d6", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -10,7 +10,7 @@\n \n use llvm::{self, LLVMConstInBoundsGEP};\n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::{self, Align, TyLayout, LayoutOf, Size, VariantIdx};\n+use rustc::ty::layout::{self, Align, TyLayout, LayoutOf, Size, VariantIdx, HasTyCtxt};\n use rustc::mir;\n use rustc::mir::tcx::PlaceTy;\n use base;"}, {"sha": "2b9d07a5234bc776d185f1db63c95b5f9c1755ae", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::ty::{self, Ty};\n use rustc::ty::cast::{CastTy, IntTy};\n-use rustc::ty::layout::{self, LayoutOf};\n+use rustc::ty::layout::{self, LayoutOf, HasTyCtxt};\n use rustc::mir;\n use rustc::middle::lang_items::ExchangeMallocFnLangItem;\n use rustc_apfloat::{ieee, Float, Status, Round};\n@@ -488,7 +488,7 @@ impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n             mir::Rvalue::NullaryOp(mir::NullOp::SizeOf, ty) => {\n                 assert!(bx.cx().type_is_sized(ty));\n                 let val = bx.cx().const_usize(bx.cx().size_of(ty).bytes());\n-                let tcx = bx.tcx();\n+                let tcx = self.cx.tcx;\n                 (bx, OperandRef {\n                     val: OperandValue::Immediate(val),\n                     layout: self.cx.layout_of(tcx.types.usize),"}, {"sha": "d806f159f95ddbfdd9a0d4fc75f9370d4999de6c", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69753b3e934789377cd6fa2b8c3f46364da0/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=034f69753b3e934789377cd6fa2b8c3f46364da0", "patch": "@@ -15,16 +15,21 @@ pub use llvm::Type;\n use llvm;\n use llvm::{Bool, False, True};\n use context::CodegenCx;\n-use interfaces::{BaseTypeMethods, DerivedTypeMethods, TypeMethods};\n+use interfaces::*;\n use value::Value;\n \n \n use syntax::ast;\n use rustc::ty::layout::{self, Align, Size};\n+use rustc::util::nodemap::FxHashMap;\n+use rustc::ty::Ty;\n+use rustc::ty::layout::TyLayout;\n use rustc_data_structures::small_c_str::SmallCStr;\n use common::{self, TypeKind};\n+use type_of::LayoutLlvmExt;\n \n use std::fmt;\n+use std::cell::RefCell;\n \n use libc::c_uint;\n \n@@ -42,7 +47,7 @@ impl fmt::Debug for Type {\n     }\n }\n \n-impl BaseTypeMethods for CodegenCx<'ll, 'tcx> {\n+impl BaseTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn type_void(&self) -> &'ll Type {\n         unsafe {\n             llvm::LLVMVoidTypeInContext(self.llcx)\n@@ -234,6 +239,10 @@ impl BaseTypeMethods for CodegenCx<'ll, 'tcx> {\n     fn val_ty(&self, v: &'ll Value) -> &'ll Type {\n         common::val_ty(v)\n     }\n+\n+    fn scalar_lltypes(&self) -> &RefCell<FxHashMap<Ty<'tcx>, Self::Type>> {\n+        &self.scalar_lltypes\n+    }\n }\n \n impl Type {\n@@ -264,7 +273,7 @@ impl Type {\n     }\n }\n \n-impl DerivedTypeMethods for CodegenCx<'ll, 'tcx> {\n+impl DerivedTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn type_bool(&self) -> &'ll Type {\n         self.type_i8()\n     }\n@@ -358,4 +367,8 @@ impl DerivedTypeMethods for CodegenCx<'ll, 'tcx> {\n     }\n }\n \n-impl TypeMethods for CodegenCx<'ll, 'tcx> {}\n+impl LayoutTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n+    fn backend_type(&self, ty: TyLayout<'tcx>) -> &'ll Type {\n+        ty.llvm_type(&self)\n+    }\n+}"}]}