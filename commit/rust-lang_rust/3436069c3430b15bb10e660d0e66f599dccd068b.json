{"sha": "3436069c3430b15bb10e660d0e66f599dccd068b", "node_id": "C_kwDOAAsO6NoAKDM0MzYwNjljMzQzMGIxNWJiMTBlNjYwZDBlNjZmNTk5ZGNjZDA2OGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-18T06:06:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-18T06:06:43Z"}, "message": "Rollup merge of #112734 - dswij:bounds-predicates-clause, r=compiler-errors\n\nMake `Bound::predicates`  use `Clause`\n\nPart of #107250\n\n`Bound::predicates` returns an iterator over `Binder<_, Clause>` instead of `Predicate`.\n\nI tried updating `explicit_predicates_of` as well, but it seems that it needs a lot more change than I thought. Will do it in a separate PR instead.", "tree": {"sha": "275264ac3e2c5b1ebed184ca58def3c7b8e6a8e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/275264ac3e2c5b1ebed184ca58def3c7b8e6a8e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3436069c3430b15bb10e660d0e66f599dccd068b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkjp7zCRBK7hj4Ov3rIwAAHW8IAI07Gil9+BmTMrGioUNRPBDv\nIe4ra6zrvl++NMIBB0f3h1qZLtIrK99Dtc6vr936VlQkr6zze2L73jGusKGdigJ1\nq1QSE7PMK/HKMiB3+i/iSBkeGO6B29M41RWhbvkrIcOyKlvDfWjcUaL7m0Suu+Io\ndShhIepDqk80/mR7AzSqe+V7mfHfR5jrbA1/3SiFeIo6UxKil2TY9vmbhi0HDTaC\n9gFTQxtzfgkeqSj3zcId+rjNhp6vKPWcKTvB2ScQrNKrBgNin0z/IoNeOCRG0kwA\nes/U9ULlxQs46CKVthvlHQYO8E5lrVjJPI6d6ndE9qR1mXR+MpaEP+jp/aT38r4=\n=w18Y\n-----END PGP SIGNATURE-----\n", "payload": "tree 275264ac3e2c5b1ebed184ca58def3c7b8e6a8e6\nparent a066e1b7a6c240a49cd00b7859671a8e95936213\nparent f874345784b0e1ac3cb7d03eb73cd23b2fc4dd85\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1687068403 +0200\ncommitter GitHub <noreply@github.com> 1687068403 +0200\n\nRollup merge of #112734 - dswij:bounds-predicates-clause, r=compiler-errors\n\nMake `Bound::predicates`  use `Clause`\n\nPart of #107250\n\n`Bound::predicates` returns an iterator over `Binder<_, Clause>` instead of `Predicate`.\n\nI tried updating `explicit_predicates_of` as well, but it seems that it needs a lot more change than I thought. Will do it in a separate PR instead.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3436069c3430b15bb10e660d0e66f599dccd068b", "html_url": "https://github.com/rust-lang/rust/commit/3436069c3430b15bb10e660d0e66f599dccd068b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3436069c3430b15bb10e660d0e66f599dccd068b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a066e1b7a6c240a49cd00b7859671a8e95936213", "url": "https://api.github.com/repos/rust-lang/rust/commits/a066e1b7a6c240a49cd00b7859671a8e95936213", "html_url": "https://github.com/rust-lang/rust/commit/a066e1b7a6c240a49cd00b7859671a8e95936213"}, {"sha": "f874345784b0e1ac3cb7d03eb73cd23b2fc4dd85", "url": "https://api.github.com/repos/rust-lang/rust/commits/f874345784b0e1ac3cb7d03eb73cd23b2fc4dd85", "html_url": "https://github.com/rust-lang/rust/commit/f874345784b0e1ac3cb7d03eb73cd23b2fc4dd85"}], "stats": {"total": 81, "additions": 57, "deletions": 24}, "files": [{"sha": "621569ab3215d45291eed6bd58fa0c1323feb0e0", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3436069c3430b15bb10e660d0e66f599dccd068b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3436069c3430b15bb10e660d0e66f599dccd068b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=3436069c3430b15bb10e660d0e66f599dccd068b", "patch": "@@ -31,9 +31,10 @@ use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, SubstsRef};\n+use rustc_middle::ty::DynKind;\n use rustc_middle::ty::GenericParamDefKind;\n+use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::{self, Const, IsSuggestable, Ty, TyCtxt, TypeVisitableExt};\n-use rustc_middle::ty::{DynKind, ToPredicate};\n use rustc_session::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, Ident, Symbol};\n@@ -944,7 +945,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let mut trait_bounds = vec![];\n         let mut projection_bounds = vec![];\n-        for (pred, span) in bounds.predicates() {\n+        for (clause, span) in bounds.predicates() {\n+            let pred: ty::Predicate<'tcx> = clause.to_predicate(tcx);\n             let bound_pred = pred.kind();\n             match bound_pred.skip_binder() {\n                 ty::PredicateKind::Clause(clause) => match clause {"}, {"sha": "8a318e984d7ae2cc4285bdd316b6a7f081a9f09e", "filename": "compiler/rustc_hir_analysis/src/bounds.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3436069c3430b15bb10e660d0e66f599dccd068b/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3436069c3430b15bb10e660d0e66f599dccd068b/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs?ref=3436069c3430b15bb10e660d0e66f599dccd068b", "patch": "@@ -2,6 +2,7 @@\n //! `ty` form from the HIR.\n \n use rustc_hir::LangItem;\n+use rustc_middle::ty::Binder;\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt};\n use rustc_span::Span;\n \n@@ -23,52 +24,58 @@ use rustc_span::Span;\n /// include the self type (e.g., `trait_bounds`) but in others we do not\n #[derive(Default, PartialEq, Eq, Clone, Debug)]\n pub struct Bounds<'tcx> {\n-    pub predicates: Vec<(ty::Predicate<'tcx>, Span)>,\n+    pub predicates: Vec<(Binder<'tcx, ty::Clause<'tcx>>, Span)>,\n }\n \n impl<'tcx> Bounds<'tcx> {\n     pub fn push_region_bound(\n         &mut self,\n-        tcx: TyCtxt<'tcx>,\n+        _tcx: TyCtxt<'tcx>,\n         region: ty::PolyTypeOutlivesPredicate<'tcx>,\n         span: Span,\n     ) {\n-        self.predicates.push((region.to_predicate(tcx), span));\n+        self.predicates.push((region.map_bound(|p| ty::Clause::TypeOutlives(p)), span));\n     }\n \n     pub fn push_trait_bound(\n         &mut self,\n-        tcx: TyCtxt<'tcx>,\n+        _tcx: TyCtxt<'tcx>,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         span: Span,\n         constness: ty::BoundConstness,\n         polarity: ty::ImplPolarity,\n     ) {\n         self.predicates.push((\n-            trait_ref\n-                .map_bound(|trait_ref| ty::TraitPredicate { trait_ref, constness, polarity })\n-                .to_predicate(tcx),\n+            trait_ref.map_bound(|trait_ref| {\n+                ty::Clause::Trait(ty::TraitPredicate { trait_ref, constness, polarity })\n+            }),\n             span,\n         ));\n     }\n \n     pub fn push_projection_bound(\n         &mut self,\n-        tcx: TyCtxt<'tcx>,\n+        _tcx: TyCtxt<'tcx>,\n         projection: ty::PolyProjectionPredicate<'tcx>,\n         span: Span,\n     ) {\n-        self.predicates.push((projection.to_predicate(tcx), span));\n+        self.predicates.push((projection.map_bound(|proj| ty::Clause::Projection(proj)), span));\n     }\n \n     pub fn push_sized(&mut self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) {\n         let sized_def_id = tcx.require_lang_item(LangItem::Sized, Some(span));\n         let trait_ref = ty::TraitRef::new(tcx, sized_def_id, [ty]);\n         // Preferable to put this obligation first, since we report better errors for sized ambiguity.\n-        self.predicates.insert(0, (trait_ref.without_const().to_predicate(tcx), span));\n+        self.predicates.insert(\n+            0,\n+            (\n+                ty::Binder::dummy(ty::Clause::Trait(trait_ref.without_const().to_predicate(tcx))),\n+                span,\n+            ),\n+        );\n     }\n \n-    pub fn predicates(&self) -> impl Iterator<Item = (ty::Predicate<'tcx>, Span)> + '_ {\n+    pub fn predicates(&self) -> impl Iterator<Item = (Binder<'tcx, ty::Clause<'tcx>>, Span)> + '_ {\n         self.predicates.iter().cloned()\n     }\n }"}, {"sha": "0479efceaad9060aa439cabf57ec8cc1579c6184", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3436069c3430b15bb10e660d0e66f599dccd068b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3436069c3430b15bb10e660d0e66f599dccd068b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=3436069c3430b15bb10e660d0e66f599dccd068b", "patch": "@@ -3,6 +3,7 @@ use crate::astconv::{AstConv, OnlySelfBounds};\n use rustc_hir as hir;\n use rustc_infer::traits::util;\n use rustc_middle::ty::subst::InternalSubsts;\n+use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::Span;\n@@ -44,7 +45,12 @@ fn associated_type_bounds<'tcx>(\n         }\n     });\n \n-    let all_bounds = tcx.arena.alloc_from_iter(bounds.predicates().chain(bounds_from_parent));\n+    let all_bounds = tcx.arena.alloc_from_iter(\n+        bounds\n+            .predicates()\n+            .map(|(clause, span)| (clause.to_predicate(tcx), span))\n+            .chain(bounds_from_parent),\n+    );\n     debug!(\n         \"associated_type_bounds({}) = {:?}\",\n         tcx.def_path_str(assoc_item_def_id.to_def_id()),\n@@ -72,7 +78,9 @@ fn opaque_type_bounds<'tcx>(\n         icx.astconv().add_implicitly_sized(&mut bounds, item_ty, ast_bounds, None, span);\n         debug!(?bounds);\n \n-        tcx.arena.alloc_from_iter(bounds.predicates())\n+        tcx.arena.alloc_from_iter(\n+            bounds.predicates().map(|(clause, span)| (clause.to_predicate(tcx), span)),\n+        )\n     })\n }\n "}, {"sha": "c905db06174092a437fdc00950e9bcb6a42a9142", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3436069c3430b15bb10e660d0e66f599dccd068b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3436069c3430b15bb10e660d0e66f599dccd068b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=3436069c3430b15bb10e660d0e66f599dccd068b", "patch": "@@ -126,7 +126,8 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n         predicates.extend(\n             icx.astconv()\n                 .compute_bounds(tcx.types.self_param, self_bounds, OnlySelfBounds(false))\n-                .predicates(),\n+                .predicates()\n+                .map(|(clause, span)| (clause.to_predicate(tcx), span)),\n         );\n     }\n \n@@ -175,7 +176,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n                     param.span,\n                 );\n                 trace!(?bounds);\n-                predicates.extend(bounds.predicates());\n+                predicates.extend(\n+                    bounds.predicates().map(|(clause, span)| (clause.to_predicate(tcx), span)),\n+                );\n                 trace!(?predicates);\n             }\n             GenericParamKind::Const { .. } => {\n@@ -234,7 +237,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n                     bound_vars,\n                     OnlySelfBounds(false),\n                 );\n-                predicates.extend(bounds.predicates());\n+                predicates.extend(\n+                    bounds.predicates().map(|(clause, span)| (clause.to_predicate(tcx), span)),\n+                );\n             }\n \n             hir::WherePredicate::RegionPredicate(region_pred) => {\n@@ -658,8 +663,12 @@ pub(super) fn implied_predicates_with_filter(\n     };\n \n     // Combine the two lists to form the complete set of superbounds:\n-    let implied_bounds =\n-        &*tcx.arena.alloc_from_iter(superbounds.predicates().chain(where_bounds_that_match));\n+    let implied_bounds = &*tcx.arena.alloc_from_iter(\n+        superbounds\n+            .predicates()\n+            .map(|(clause, span)| (clause.to_predicate(tcx), span))\n+            .chain(where_bounds_that_match),\n+    );\n     debug!(?implied_bounds);\n \n     // Now require that immediate supertraits are converted, which will, in\n@@ -816,7 +825,7 @@ impl<'tcx> ItemCtxt<'tcx> {\n             );\n         }\n \n-        bounds.predicates().collect()\n+        bounds.predicates().map(|(clause, span)| (clause.to_predicate(self.tcx), span)).collect()\n     }\n \n     #[instrument(level = \"trace\", skip(self))]"}, {"sha": "66aba98fe29654c987b47744c4976703e7cece75", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3436069c3430b15bb10e660d0e66f599dccd068b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3436069c3430b15bb10e660d0e66f599dccd068b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=3436069c3430b15bb10e660d0e66f599dccd068b", "patch": "@@ -1214,6 +1214,13 @@ impl<'tcx> ToPredicate<'tcx> for Clause<'tcx> {\n     }\n }\n \n+impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, Clause<'tcx>> {\n+    #[inline(always)]\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        tcx.mk_predicate(self.map_bound(|clause| ty::PredicateKind::Clause(clause)))\n+    }\n+}\n+\n impl<'tcx> ToPredicate<'tcx> for TraitRef<'tcx> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {"}, {"sha": "620aef9883bd9c0b0f977aac550a163074d04665", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3436069c3430b15bb10e660d0e66f599dccd068b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3436069c3430b15bb10e660d0e66f599dccd068b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=3436069c3430b15bb10e660d0e66f599dccd068b", "patch": "@@ -1270,13 +1270,13 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n             );\n \n             for (pred, _) in bounds.predicates() {\n-                match pred.kind().skip_binder() {\n-                    ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) => {\n+                match pred.skip_binder() {\n+                    ty::Clause::Trait(trait_predicate) => {\n                         if self.visit_trait(trait_predicate.trait_ref).is_break() {\n                             return;\n                         }\n                     }\n-                    ty::PredicateKind::Clause(ty::Clause::Projection(proj_predicate)) => {\n+                    ty::Clause::Projection(proj_predicate) => {\n                         let term = self.visit(proj_predicate.term);\n                         if term.is_break()\n                             || self.visit_projection_ty(proj_predicate.projection_ty).is_break()"}]}