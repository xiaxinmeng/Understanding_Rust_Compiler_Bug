{"sha": "a6885cb853390fc79a8ff0b223ea1471e261d60e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ODg1Y2I4NTMzOTBmYzc5YThmZjBiMjIzZWExNDcxZTI2MWQ2MGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-04T10:24:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-04T10:24:20Z"}, "message": "Auto merge of #45605 - Nashenas88:derive-newtype, r=nikomatsakis\n\nAdd derive and doc comment capabilities to newtype_index macro\n\nThis moves `RustcDecodable` and `RustcEncodable` out of the macro definition and into the macro uses. They were conflicting with `CrateNum`'s impls of `serialize::UseSpecializedEncodable` and `serialize::UseSpecializedDecodable`, and now it's not :). `CrateNum` is now defined with the `newtype_index` macro. I also added support for doc comments on constant definitions and allowed a type to remove the pub specification on the tuple param (otherwise a LOT of code would refuse to compile for `CrateNum`). I was getting dozens of errors like this if `CrateNum` was defined as `pub struct CrateNum(pub u32)`:\n```\nerror[E0530]: match bindings cannot shadow tuple structs\n   --> src/librustc/dep_graph/dep_node.rs:624:25\n    |\n63  | use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n    |                   -------- a tuple struct `CrateNum` is imported here\n...\n624 |     [] MissingLangItems(CrateNum),\n    |                         ^^^^^^^^ cannot be named the same as a tuple struct\n```\n\nI also cleaned up the formatting of the macro bodies as they were getting impossibly long. Should I go back and fix the matching rules to this style too?\n\nI also want to see what the test results look like because `CrateNum` used to just derive `Debug`, but the `newtype_index` macro has a custom implementation. This might require further pushes.\n\nFeel free to bikeshed on the macro language, I have no preference here.", "tree": {"sha": "732a966af0d57b74a079ae60311e7f81d02cea2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/732a966af0d57b74a079ae60311e7f81d02cea2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6885cb853390fc79a8ff0b223ea1471e261d60e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6885cb853390fc79a8ff0b223ea1471e261d60e", "html_url": "https://github.com/rust-lang/rust/commit/a6885cb853390fc79a8ff0b223ea1471e261d60e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6885cb853390fc79a8ff0b223ea1471e261d60e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9acc3331e187d329d29a70c788c44e25a79edf45", "url": "https://api.github.com/repos/rust-lang/rust/commits/9acc3331e187d329d29a70c788c44e25a79edf45", "html_url": "https://github.com/rust-lang/rust/commit/9acc3331e187d329d29a70c788c44e25a79edf45"}, {"sha": "97692afda9e493db65c833b931a6971fb58352b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/97692afda9e493db65c833b931a6971fb58352b2", "html_url": "https://github.com/rust-lang/rust/commit/97692afda9e493db65c833b931a6971fb58352b2"}], "stats": {"total": 311, "additions": 255, "deletions": 56}, "files": [{"sha": "cc30fdfaca6a32fcca5a33d5b378fe06a2f4cfbf", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a6885cb853390fc79a8ff0b223ea1471e261d60e/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6885cb853390fc79a8ff0b223ea1471e261d60e/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=a6885cb853390fc79a8ff0b223ea1471e261d60e", "patch": "@@ -16,30 +16,23 @@ use serialize::{self, Encoder, Decoder};\n use std::fmt;\n use std::u32;\n \n-#[derive(Clone, Copy, Eq, Ord, PartialOrd, PartialEq, Hash, Debug)]\n-pub struct CrateNum(u32);\n-\n-impl Idx for CrateNum {\n-    fn new(value: usize) -> Self {\n-        assert!(value < (u32::MAX) as usize);\n-        CrateNum(value as u32)\n-    }\n-\n-    fn index(self) -> usize {\n-        self.0 as usize\n-    }\n-}\n-\n-/// Item definitions in the currently-compiled crate would have the CrateNum\n-/// LOCAL_CRATE in their DefId.\n-pub const LOCAL_CRATE: CrateNum = CrateNum(0);\n-\n-/// Virtual crate for builtin macros\n-// FIXME(jseyfried): this is also used for custom derives until proc-macro crates get `CrateNum`s.\n-pub const BUILTIN_MACROS_CRATE: CrateNum = CrateNum(u32::MAX);\n-\n-/// A CrateNum value that indicates that something is wrong.\n-pub const INVALID_CRATE: CrateNum = CrateNum(u32::MAX - 1);\n+newtype_index!(CrateNum\n+    {\n+        derive[Debug]\n+        ENCODABLE = custom\n+\n+        /// Item definitions in the currently-compiled crate would have the CrateNum\n+        /// LOCAL_CRATE in their DefId.\n+        const LOCAL_CRATE = 0,\n+\n+        /// Virtual crate for builtin macros\n+        // FIXME(jseyfried): this is also used for custom derives until proc-macro crates get\n+        // `CrateNum`s.\n+        const BUILTIN_MACROS_CRATE = u32::MAX,\n+\n+        /// A CrateNum value that indicates that something is wrong.\n+        const INVALID_CRATE = u32::MAX - 1,\n+    });\n \n impl CrateNum {\n     pub fn new(x: usize) -> CrateNum {"}, {"sha": "89707839144ccdffb2a22be63a246f0f03012d8f", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6885cb853390fc79a8ff0b223ea1471e261d60e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6885cb853390fc79a8ff0b223ea1471e261d60e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=a6885cb853390fc79a8ff0b223ea1471e261d60e", "patch": "@@ -158,8 +158,8 @@ pub struct BlockRemainder {\n \n newtype_index!(FirstStatementIndex\n     {\n-        DEBUG_FORMAT = \"{}\",\n-        MAX = SCOPE_DATA_REMAINDER_MAX,\n+        pub idx\n+        MAX = SCOPE_DATA_REMAINDER_MAX\n     });\n \n impl From<ScopeData> for Scope {"}, {"sha": "2fc27de137faa13de7c59eb400e13ddc7e510711", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6885cb853390fc79a8ff0b223ea1471e261d60e/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6885cb853390fc79a8ff0b223ea1471e261d60e/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=a6885cb853390fc79a8ff0b223ea1471e261d60e", "patch": "@@ -1552,6 +1552,7 @@ pub struct Constant<'tcx> {\n \n newtype_index!(Promoted { DEBUG_FORMAT = \"promoted[{}]\" });\n \n+\n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum Literal<'tcx> {\n     Value {"}, {"sha": "dc169c67a763274eaea9188f322f75fea8c4d9ea", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 235, "deletions": 30, "changes": 265, "blob_url": "https://github.com/rust-lang/rust/blob/a6885cb853390fc79a8ff0b223ea1471e261d60e/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6885cb853390fc79a8ff0b223ea1471e261d60e/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=a6885cb853390fc79a8ff0b223ea1471e261d60e", "patch": "@@ -45,77 +45,282 @@ macro_rules! newtype_index {\n     // Use default constants\n     ($name:ident) => (\n         newtype_index!(\n-            @type[$name]\n-            @max[::std::u32::MAX]\n-            @debug_format[\"{}\"]);\n+            // Leave out derives marker so we can use its absence to ensure it comes first\n+            @type         [$name]\n+            @max          [::std::u32::MAX]\n+            @debug_format [\"{}\"]);\n     );\n \n     // Define any constants\n     ($name:ident { $($tokens:tt)+ }) => (\n         newtype_index!(\n-            @type[$name]\n-            @max[::std::u32::MAX]\n-            @debug_format[\"{}\"]\n-            $($tokens)+);\n+            // Leave out derives marker so we can use its absence to ensure it comes first\n+            @type         [$name]\n+            @max          [::std::u32::MAX]\n+            @debug_format [\"{}\"]\n+                          $($tokens)+);\n     );\n \n     // ---- private rules ----\n \n     // Base case, user-defined constants (if any) have already been defined\n-    (@type[$type:ident] @max[$max:expr] @debug_format[$debug_format:expr]) => (\n-        #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord,\n-            RustcEncodable, RustcDecodable)]\n-        pub struct $type(pub u32);\n+    (@derives      [$($derives:ident,)*]\n+     @pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]) => (\n+        #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n+        pub struct $type($($pub)* u32);\n \n         impl Idx for $type {\n             fn new(value: usize) -> Self {\n                 assert!(value < ($max) as usize);\n                 $type(value as u32)\n             }\n+\n             fn index(self) -> usize {\n                 self.0 as usize\n             }\n         }\n \n+        newtype_index!(\n+            @handle_debug\n+            @derives      [$($derives,)*]\n+            @type         [$type]\n+            @debug_format [$debug_format]);\n+    );\n+\n+    // base case for handle_debug where format is custom. No Debug implementation is emitted.\n+    (@handle_debug\n+     @derives      [$($_derives:ident,)*]\n+     @type         [$type:ident]\n+     @debug_format [custom]) => ();\n+\n+    // base case for handle_debug, no debug overrides found, so use default\n+    (@handle_debug\n+     @derives      []\n+     @type         [$type:ident]\n+     @debug_format [$debug_format:expr]) => (\n         impl ::std::fmt::Debug for $type {\n             fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n                 write!(fmt, $debug_format, self.0)\n             }\n         }\n     );\n \n+    // Debug is requested for derive, don't generate any Debug implementation.\n+    (@handle_debug\n+     @derives      [Debug, $($derives:ident,)*]\n+     @type         [$type:ident]\n+     @debug_format [$debug_format:expr]) => ();\n+\n+    // It's not Debug, so just pop it off the front of the derives stack and check the rest.\n+    (@handle_debug\n+     @derives      [$_derive:ident, $($derives:ident,)*]\n+     @type         [$type:ident]\n+     @debug_format [$debug_format:expr]) => (\n+        newtype_index!(\n+            @handle_debug\n+            @derives      [$($derives,)*]\n+            @type         [$type]\n+            @debug_format [$debug_format]);\n+    );\n+\n+    // Handle the case where someone wants to make the internal field public\n+    (@type         [$type:ident]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   pub idx\n+                   $($tokens:tt)*) => (\n+        newtype_index!(\n+            @pub          [pub]\n+            @type         [$type]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n+    );\n+\n+    // The default case is that the internal field is private\n+    (@type         [$type:ident]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   $($tokens:tt)*) => (\n+        newtype_index!(\n+            @pub          []\n+            @type         [$type]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n+    );\n+\n+    // Append comma to end of derives list if it's missing\n+    (@pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   derive [$($derives:ident),*]\n+                   $($tokens:tt)*) => (\n+        newtype_index!(\n+            @pub          [$($pub)*]\n+            @type         [$type]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          derive [$($derives,)*]\n+                          $($tokens)*);\n+    );\n+\n+    // By not including the @derives marker in this list nor in the default args, we can force it\n+    // to come first if it exists. When encodable is custom, just use the derives list as-is.\n+    (@pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   derive [$($derives:ident,)+]\n+                   ENCODABLE = custom\n+                   $($tokens:tt)*) => (\n+        newtype_index!(\n+            @derives      [$($derives,)+]\n+            @pub          [$($pub)*]\n+            @type         [$type]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n+    );\n+\n+    // By not including the @derives marker in this list nor in the default args, we can force it\n+    // to come first if it exists. When encodable isn't custom, add serialization traits by default.\n+    (@pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   derive [$($derives:ident,)+]\n+                   $($tokens:tt)*) => (\n+        newtype_index!(\n+            @derives      [$($derives,)+ RustcDecodable, RustcEncodable,]\n+            @pub          [$($pub)*]\n+            @type         [$type]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n+    );\n+\n+    // The case where no derives are added, but encodable is overriden. Don't\n+    // derive serialization traits\n+    (@pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   ENCODABLE = custom\n+                   $($tokens:tt)*) => (\n+        newtype_index!(\n+            @derives      []\n+            @pub          [$($pub)*]\n+            @type         [$type]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n+    );\n+\n+    // The case where no derives are added, add serialization derives by default\n+    (@pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   $($tokens:tt)*) => (\n+        newtype_index!(\n+            @derives      [RustcDecodable, RustcEncodable,]\n+            @pub          [$($pub)*]\n+            @type         [$type]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n+    );\n+\n     // Rewrite final without comma to one that includes comma\n-    (@type[$type:ident] @max[$max:expr] @debug_format[$debug_format:expr]\n-            $name:ident = $constant:expr) => (\n-        newtype_index!(@type[$type] @max[$max] @debug_format[$debug_format] $name = $constant,);\n+    (@derives      [$($derives:ident,)*]\n+     @pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   $name:ident = $constant:expr) => (\n+        newtype_index!(\n+            @derives      [$($derives,)*]\n+            @pub          [$($pub)*]\n+            @type         [$type]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $name = $constant,);\n     );\n \n     // Rewrite final const without comma to one that includes comma\n-    (@type[$type:ident] @max[$_max:expr] @debug_format[$debug_format:expr]\n-            const $name:ident = $constant:expr) => (\n-        newtype_index!(@type[$type]\n-                       @max[$max]\n-                       @debug_format[$debug_format]\n-                       const $name = $constant,);\n+    (@derives      [$($derives:ident,)*]\n+     @pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n+     @max          [$_max:expr]\n+     @debug_format [$debug_format:expr]\n+                   $(#[doc = $doc:expr])*\n+                   const $name:ident = $constant:expr) => (\n+        newtype_index!(\n+            @derives      [$($derives,)*]\n+            @pub          [$($pub)*]\n+            @type         [$type]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $(#[doc = $doc])* const $name = $constant,);\n     );\n \n     // Replace existing default for max\n-    (@type[$type:ident] @max[$_max:expr] @debug_format[$debug_format:expr]\n-            MAX = $max:expr, $($tokens:tt)*) => (\n-        newtype_index!(@type[$type] @max[$max] @debug_format[$debug_format] $($tokens)*);\n+    (@derives      [$($derives:ident,)*]\n+     @pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n+     @max          [$_max:expr]\n+     @debug_format [$debug_format:expr]\n+                   MAX = $max:expr,\n+                   $($tokens:tt)*) => (\n+        newtype_index!(\n+            @derives      [$($derives,)*]\n+            @pub          [$($pub)*]\n+            @type         [$type]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n     );\n \n     // Replace existing default for debug_format\n-    (@type[$type:ident] @max[$max:expr] @debug_format[$_debug_format:expr]\n-            DEBUG_FORMAT = $debug_format:expr, $($tokens:tt)*) => (\n-        newtype_index!(@type[$type] @max[$max] @debug_format[$debug_format] $($tokens)*);\n+    (@derives      [$($derives:ident,)*]\n+     @pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n+     @max          [$max:expr]\n+     @debug_format [$_debug_format:expr]\n+                   DEBUG_FORMAT = $debug_format:expr,\n+                   $($tokens:tt)*) => (\n+        newtype_index!(\n+            @derives      [$($derives,)*]\n+            @pub          [$($pub)*]\n+            @type         [$type]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n     );\n \n-    // Assign a user-defined constant (as final param)\n-    (@type[$type:ident] @max[$max:expr] @debug_format[$debug_format:expr]\n-            const $name:ident = $constant:expr, $($tokens:tt)*) => (\n+    // Assign a user-defined constant\n+    (@derives      [$($derives:ident,)*]\n+     @pub          [$($pub:tt)*]\n+     @type         [$type:ident]\n+     @max          [$max:expr]\n+     @debug_format [$debug_format:expr]\n+                   $(#[doc = $doc:expr])*\n+                   const $name:ident = $constant:expr,\n+                   $($tokens:tt)*) => (\n+        $(#[doc = $doc])*\n         pub const $name: $type = $type($constant);\n-        newtype_index!(@type[$type] @max[$max] @debug_format[$debug_format] $($tokens)*);\n+        newtype_index!(\n+            @derives      [$($derives,)*]\n+            @pub          [$($pub)*]\n+            @type         [$type]\n+            @max          [$max]\n+            @debug_format [$debug_format]\n+                          $($tokens)*);\n     );\n }\n "}]}