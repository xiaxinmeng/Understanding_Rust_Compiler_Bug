{"sha": "f239ecb5f2e46cb4c938b6bd481ec75fe137e414", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMzllY2I1ZjJlNDZjYjRjOTM4YjZiZDQ4MWVjNzVmZTEzN2U0MTQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-01T20:41:41Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-01T20:41:41Z"}, "message": "rustc: Switch from storing nullary tags as constants to storing their discriminants", "tree": {"sha": "8a6cc796899ab501d55000caf494d90744989bc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a6cc796899ab501d55000caf494d90744989bc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f239ecb5f2e46cb4c938b6bd481ec75fe137e414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f239ecb5f2e46cb4c938b6bd481ec75fe137e414", "html_url": "https://github.com/rust-lang/rust/commit/f239ecb5f2e46cb4c938b6bd481ec75fe137e414", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f239ecb5f2e46cb4c938b6bd481ec75fe137e414/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d8b3d985a02153a349e72bd9840231b43c51864", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d8b3d985a02153a349e72bd9840231b43c51864", "html_url": "https://github.com/rust-lang/rust/commit/8d8b3d985a02153a349e72bd9840231b43c51864"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "61da7f53d5cbe5e25a27aa1f27bf1cc694ab3566", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f239ecb5f2e46cb4c938b6bd481ec75fe137e414/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f239ecb5f2e46cb4c938b6bd481ec75fe137e414/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f239ecb5f2e46cb4c938b6bd481ec75fe137e414", "patch": "@@ -59,7 +59,11 @@ type glue_fns = rec(ValueRef activate_glue,\n                     ValueRef memcpy_glue,\n                     ValueRef bzero_glue);\n \n-type tag_info = rec(type_handle th, mutable uint size);\n+type tag_info = rec(\n+    type_handle th,\n+    mutable uint size,\n+    mutable @hashmap[ast.def_id,ValueRef] lldiscrims\n+);\n \n state type crate_ctxt = rec(session.session sess,\n                             ModuleRef llmod,\n@@ -2774,9 +2778,23 @@ fn trans_path(@block_ctxt cx, &ast.path p, &option.t[ast.def] dopt,\n                         }\n                         ret lval_generic_fn(cx, tup(params, fty), vid, ann);\n                     } else {\n-                        // Nullary variants are just scalar constants.\n-                        check (cx.fcx.ccx.item_ids.contains_key(vid));\n-                        ret lval_val(cx, cx.fcx.ccx.item_ids.get(vid));\n+                        // Nullary variant.\n+                        auto tag_ty = node_ann_type(cx.fcx.ccx, ann);\n+                        auto info = cx.fcx.ccx.tags.get(tag_ty);\n+                        check (info.lldiscrims.contains_key(vid));\n+                        auto lldiscrim_gv = info.lldiscrims.get(vid);\n+                        auto lldiscrim = cx.build.Load(lldiscrim_gv);\n+\n+                        auto alloc_result = alloc_ty(cx, tag_ty);\n+                        auto lltagblob = alloc_result.val;\n+                        auto lltagptr = alloc_result.bcx.build.PointerCast(\n+                            lltagblob, T_ptr(type_of(cx.fcx.ccx, tag_ty)));\n+\n+                        auto lldiscrimptr = alloc_result.bcx.build.GEP(\n+                            lltagptr, vec(C_int(0), C_int(0)));\n+                        alloc_result.bcx.build.Store(lldiscrim, lldiscrimptr);\n+\n+                        ret lval_val(alloc_result.bcx, lltagptr);\n                     }\n                 }\n                 case (ast.def_const(?did)) {\n@@ -4637,8 +4655,14 @@ fn collect_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n         case (ast.item_tag(_, ?variants, ?tps, ?tag_id)) {\n             auto vi = new_def_hash[uint]();\n             auto navi = new_def_hash[uint]();\n-            cx.tags.insert(mk_plain_tag(tag_id), @rec(th=mk_type_handle(),\n-                                                      mutable size=0u));\n+\n+            auto info = @rec(\n+                th=mk_type_handle(),\n+                mutable size=0u,\n+                mutable lldiscrims=@new_def_hash[ValueRef]()\n+            );\n+\n+            cx.tags.insert(mk_plain_tag(tag_id), info);\n             cx.items.insert(tag_id, i);\n         }\n \n@@ -4772,22 +4796,7 @@ fn trans_constant(&@crate_ctxt cx, @ast.item it) -> @crate_ctxt {\n                 llvm.LLVMSetLinkage(discrim_gvar, lib.llvm.LLVMPrivateLinkage\n                                     as llvm.Linkage);\n \n-                if (_vec.len[ast.variant_arg](variant.args) == 0u) {\n-                    // Nullary tags become constants. (N-ary tags are treated\n-                    // as functions and generated later.)\n-\n-                    auto union_val = C_zero_byte_arr(info.size as uint);\n-                    auto val = C_struct(vec(discrim_val, union_val));\n-\n-                    // FIXME: better name\n-                    auto gvar = llvm.LLVMAddGlobal(cx.llmod, val_ty(val),\n-                                                   _str.buf(\"tag\"));\n-                    llvm.LLVMSetInitializer(gvar, val);\n-                    llvm.LLVMSetGlobalConstant(gvar, True);\n-                    llvm.LLVMSetLinkage(gvar, lib.llvm.LLVMPrivateLinkage\n-                                        as llvm.Linkage);\n-                    cx.item_ids.insert(variant.id, gvar);\n-                }\n+                info.lldiscrims.insert(variant.id, discrim_gvar);\n \n                 i += 1u;\n             }"}]}