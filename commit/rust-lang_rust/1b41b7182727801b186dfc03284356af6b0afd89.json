{"sha": "1b41b7182727801b186dfc03284356af6b0afd89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNDFiNzE4MjcyNzgwMWIxODZkZmMwMzI4NDM1NmFmNmIwYWZkODk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-26T11:19:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-26T11:19:03Z"}, "message": "update for MUT_STATIC_KIND", "tree": {"sha": "2c1a3ac9b228ec2d5bc718f91cd388a2000be3be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c1a3ac9b228ec2d5bc718f91cd388a2000be3be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b41b7182727801b186dfc03284356af6b0afd89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b41b7182727801b186dfc03284356af6b0afd89", "html_url": "https://github.com/rust-lang/rust/commit/1b41b7182727801b186dfc03284356af6b0afd89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b41b7182727801b186dfc03284356af6b0afd89/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ba6140891cb1ecaddcb097d22007938bbb34dcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ba6140891cb1ecaddcb097d22007938bbb34dcd", "html_url": "https://github.com/rust-lang/rust/commit/1ba6140891cb1ecaddcb097d22007938bbb34dcd"}], "stats": {"total": 24, "additions": 3, "deletions": 21}, "files": [{"sha": "27abd03f2f9fa3a2075b77da4897b5c420903377", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1b41b7182727801b186dfc03284356af6b0afd89/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b41b7182727801b186dfc03284356af6b0afd89/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1b41b7182727801b186dfc03284356af6b0afd89", "patch": "@@ -274,10 +274,12 @@ impl<'tcx> Hash for MemoryData<'tcx> {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n+impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     type MemoryData = MemoryData<'tcx>;\n     type MemoryKinds = memory::MemoryKind;\n \n+    const MUT_STATIC_KIND: Option<memory::MemoryKind> = Some(memory::MemoryKind::MutStatic);\n+\n     /// Returns Ok() when the function was handled, fail otherwise\n     fn find_fn<'a>(\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n@@ -309,15 +311,6 @@ impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         ecx.ptr_op(bin_op, left, left_layout, right, right_layout)\n     }\n \n-    fn access_static_mut<'a, 'm>(\n-        mem: &'m mut Memory<'a, 'mir, 'tcx, Self>,\n-        id: AllocId,\n-    ) -> EvalResult<'tcx, &'m mut Allocation> {\n-        // Make a copy, use that.\n-        mem.deep_copy_static(id, MiriMemoryKind::MutStatic.into())?;\n-        mem.get_mut(id) // this is recursive, but now we know that `id` is in `alloc_map` now\n-    }\n-\n     fn box_alloc<'a>(\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         dest: PlaceTy<'tcx>,"}, {"sha": "d4575d677fa14094d9404524527ba1bb5640d922", "filename": "src/memory.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1b41b7182727801b186dfc03284356af6b0afd89/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b41b7182727801b186dfc03284356af6b0afd89/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=1b41b7182727801b186dfc03284356af6b0afd89", "patch": "@@ -1,5 +1,3 @@\n-use rustc_mir::interpret::IsStatic;\n-\n #[derive(Debug, PartialEq, Copy, Clone, Hash, Eq)]\n pub enum MemoryKind {\n     /// `__rust_alloc` memory\n@@ -12,15 +10,6 @@ pub enum MemoryKind {\n     MutStatic,\n }\n \n-impl IsStatic for MemoryKind {\n-    fn is_static(self) -> bool {\n-        match self {\n-            MemoryKind::MutStatic => true,\n-            _ => false,\n-        }\n-    }\n-}\n-\n impl Into<::rustc_mir::interpret::MemoryKind<MemoryKind>> for MemoryKind {\n     fn into(self) -> ::rustc_mir::interpret::MemoryKind<MemoryKind> {\n         ::rustc_mir::interpret::MemoryKind::Machine(self)"}]}