{"sha": "a422b421597202554a76bee32d07b54a15631681", "node_id": "C_kwDOAAsO6NoAKGE0MjJiNDIxNTk3MjAyNTU0YTc2YmVlMzJkMDdiNTRhMTU2MzE2ODE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-03T15:17:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-09T11:27:29Z"}, "message": "don't allow ZST in ScalarInt\n\nThere are several indications that we should not ZST as a ScalarInt:\n- We had two ways to have ZST valtrees, either an empty `Branch` or a `Leaf` with a ZST in it.\n  `ValTree::zst()` used the former, but the latter could possibly arise as well.\n- Likewise, the interpreter had `Immediate::Uninit` and `Immediate::Scalar(Scalar::ZST)`.\n- LLVM codegen already had to special-case ZST ScalarInt.\n\nSo instead add new ZST variants to those types that did not have other variants\nwhich could be used for this purpose.", "tree": {"sha": "06663bbc6dce4605f70148a3ce23eccead4e7b5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06663bbc6dce4605f70148a3ce23eccead4e7b5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a422b421597202554a76bee32d07b54a15631681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a422b421597202554a76bee32d07b54a15631681", "html_url": "https://github.com/rust-lang/rust/commit/a422b421597202554a76bee32d07b54a15631681", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a422b421597202554a76bee32d07b54a15631681/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4693bc946729393c087fb120af566395915d19d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4693bc946729393c087fb120af566395915d19d", "html_url": "https://github.com/rust-lang/rust/commit/c4693bc946729393c087fb120af566395915d19d"}], "stats": {"total": 139, "additions": 78, "deletions": 61}, "files": [{"sha": "77cbbf4c6cacf18822067e0cf6ed56c654e20a8c", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -13,7 +13,6 @@ use rustc_codegen_ssa::traits::*;\n use rustc_middle::bug;\n use rustc_middle::mir::interpret::{ConstAllocation, GlobalAlloc, Scalar};\n use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n-use rustc_middle::ty::ScalarInt;\n use rustc_target::abi::{self, AddressSpace, HasDataLayout, Pointer, Size};\n \n use libc::{c_char, c_uint};\n@@ -223,13 +222,13 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         })\n     }\n \n+    fn zst_to_backend(&self, _llty: &'ll Type) -> &'ll Value {\n+        self.const_undef(self.type_ix(0))\n+    }\n+\n     fn scalar_to_backend(&self, cv: Scalar, layout: abi::Scalar, llty: &'ll Type) -> &'ll Value {\n         let bitsize = if layout.is_bool() { 1 } else { layout.size(self).bits() };\n         match cv {\n-            Scalar::Int(ScalarInt::ZST) => {\n-                assert_eq!(0, layout.size(self).bytes());\n-                self.const_undef(self.type_ix(0))\n-            }\n             Scalar::Int(int) => {\n                 let data = int.assert_bits(layout.size(self));\n                 let llval = self.const_uint_big(self.type_ix(bitsize), data);"}, {"sha": "72d0d3e5482f2243ce64b4b1c9d748c5cf223670", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -84,6 +84,10 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n                 let llval = bx.scalar_to_backend(x, scalar, bx.immediate_backend_type(layout));\n                 OperandValue::Immediate(llval)\n             }\n+            ConstValue::ZST => {\n+                let llval = bx.zst_to_backend(bx.immediate_backend_type(layout));\n+                OperandValue::Immediate(llval)\n+            }\n             ConstValue::Slice { data, start, end } => {\n                 let Abi::ScalarPair(a_scalar, _) = layout.abi else {\n                     bug!(\"from_const: invalid ScalarPair layout: {:#?}\", layout);"}, {"sha": "8a91d4735ba0d5db6e46e9f3499e9be4b214d29f", "filename": "compiler/rustc_codegen_ssa/src/traits/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -29,6 +29,7 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n     fn const_data_from_alloc(&self, alloc: ConstAllocation<'tcx>) -> Self::Value;\n \n     fn scalar_to_backend(&self, cv: Scalar, layout: abi::Scalar, llty: Self::Type) -> Self::Value;\n+    fn zst_to_backend(&self, llty: Self::Type) -> Self::Value;\n     fn from_const_alloc(\n         &self,\n         layout: TyAndLayout<'tcx>,"}, {"sha": "251be589649f7544d88a11d7fa977f57f1a287a4", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -2,7 +2,7 @@ use super::{CompileTimeEvalContext, CompileTimeInterpreter, ConstEvalErr};\n use crate::interpret::eval_nullary_intrinsic;\n use crate::interpret::{\n     intern_const_alloc_recursive, Allocation, ConstAlloc, ConstValue, CtfeValidationMode, GlobalId,\n-    Immediate, InternKind, InterpCx, InterpResult, MPlaceTy, MemoryKind, OpTy, RefTracking, Scalar,\n+    Immediate, InternKind, InterpCx, InterpResult, MPlaceTy, MemoryKind, OpTy, RefTracking,\n     ScalarMaybeUninit, StackPopCleanup,\n };\n \n@@ -157,7 +157,7 @@ pub(super) fn op_to_const<'tcx>(\n                     \"this MPlaceTy must come from a validated constant, thus we can assume the \\\n                 alignment is correct\",\n                 );\n-                ConstValue::Scalar(Scalar::ZST)\n+                ConstValue::ZST\n             }\n         }\n     };"}, {"sha": "0ef55c63085d0c5faee6ce44cfab55b2972d90f9", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -272,7 +272,7 @@ pub fn valtree_to_const_value<'tcx>(\n     match ty.kind() {\n         ty::FnDef(..) => {\n             assert!(valtree.unwrap_branch().is_empty());\n-            ConstValue::Scalar(Scalar::ZST)\n+            ConstValue::ZST\n         }\n         ty::Bool | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Char => match valtree {\n             ty::ValTree::Leaf(scalar_int) => ConstValue::Scalar(Scalar::Int(scalar_int)),\n@@ -344,11 +344,7 @@ fn valtree_into_mplace<'tcx>(\n \n     match ty.kind() {\n         ty::FnDef(_, _) => {\n-            ecx.write_immediate(\n-                Immediate::Scalar(ScalarMaybeUninit::Scalar(Scalar::ZST)),\n-                &place.into(),\n-            )\n-            .unwrap();\n+            ecx.write_immediate(Immediate::Uninit, &place.into()).unwrap();\n         }\n         ty::Bool | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Char => {\n             let scalar_int = valtree.unwrap_leaf();"}, {"sha": "c95ae4f6e7a70118489ed941fb4b6f100f18146e", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -297,8 +297,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         let Some(alloc) = self.get_place_alloc(mplace)? else {\n             return Ok(Some(ImmTy {\n-                // zero-sized type\n-                imm: Scalar::ZST.into(),\n+                // zero-sized type can be left uninit\n+                imm: Immediate::Uninit,\n                 layout: mplace.layout,\n             }));\n         };\n@@ -441,8 +441,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // This makes several assumptions about what layouts we will encounter; we match what\n         // codegen does as good as we can (see `extract_field` in `rustc_codegen_ssa/src/mir/operand.rs`).\n         let field_val: Immediate<_> = match (*base, base.layout.abi) {\n-            // the field contains no information\n-            _ if field_layout.is_zst() => Scalar::ZST.into(),\n+            // the field contains no information, can be left uninit\n+            _ if field_layout.is_zst() => Immediate::Uninit,\n             // the field covers the entire type\n             _ if field_layout.size == base.layout.size => {\n                 assert!(match (base.layout.abi, field_layout.abi) {\n@@ -553,8 +553,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         let layout = self.layout_of_local(frame, local, layout)?;\n         let op = if layout.is_zst() {\n-            // Do not read from ZST, they might not be initialized\n-            Operand::Immediate(Scalar::ZST.into())\n+            // Bypass `access_local` (helps in ConstProp)\n+            Operand::Immediate(Immediate::Uninit)\n         } else {\n             *M::access_local(frame, local)?\n         };\n@@ -709,6 +709,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 Operand::Indirect(MemPlace::from_ptr(ptr.into()))\n             }\n             ConstValue::Scalar(x) => Operand::Immediate(tag_scalar(x)?.into()),\n+            ConstValue::ZST => Operand::Immediate(Immediate::Uninit),\n             ConstValue::Slice { data, start, end } => {\n                 // We rely on mutability being set correctly in `data` to prevent writes\n                 // where none should happen."}, {"sha": "ef06c457bf4bcfbbce6de68c79ed93647163f69f", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -59,6 +59,7 @@\n #![feature(drain_filter)]\n #![feature(intra_doc_pointers)]\n #![feature(yeet_expr)]\n+#![feature(const_option)]\n #![recursion_limit = \"512\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "59242b785c6ee74035a8cd8db3186d3d2efee866", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -29,11 +29,14 @@ pub struct ConstAlloc<'tcx> {\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Hash)]\n #[derive(HashStable)]\n pub enum ConstValue<'tcx> {\n-    /// Used only for types with `layout::abi::Scalar` ABI and ZSTs.\n+    /// Used only for types with `layout::abi::Scalar` ABI.\n     ///\n     /// Not using the enum `Value` to encode that this must not be `Uninit`.\n     Scalar(Scalar),\n \n+    /// Only used for ZSTs.\n+    ZST,\n+\n     /// Used only for `&[u8]` and `&str`\n     Slice { data: ConstAllocation<'tcx>, start: usize, end: usize },\n \n@@ -55,6 +58,7 @@ impl<'a, 'tcx> Lift<'tcx> for ConstValue<'a> {\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<ConstValue<'tcx>> {\n         Some(match self {\n             ConstValue::Scalar(s) => ConstValue::Scalar(s),\n+            ConstValue::ZST => ConstValue::ZST,\n             ConstValue::Slice { data, start, end } => {\n                 ConstValue::Slice { data: tcx.lift(data)?, start, end }\n             }\n@@ -69,7 +73,7 @@ impl<'tcx> ConstValue<'tcx> {\n     #[inline]\n     pub fn try_to_scalar(&self) -> Option<Scalar<AllocId>> {\n         match *self {\n-            ConstValue::ByRef { .. } | ConstValue::Slice { .. } => None,\n+            ConstValue::ByRef { .. } | ConstValue::Slice { .. } | ConstValue::ZST => None,\n             ConstValue::Scalar(val) => Some(val),\n         }\n     }\n@@ -111,10 +115,6 @@ impl<'tcx> ConstValue<'tcx> {\n     pub fn from_machine_usize(i: u64, cx: &impl HasDataLayout) -> Self {\n         ConstValue::Scalar(Scalar::from_machine_usize(i, cx))\n     }\n-\n-    pub fn zst() -> Self {\n-        Self::Scalar(Scalar::ZST)\n-    }\n }\n \n /// A `Scalar` represents an immediate, primitive value existing outside of a\n@@ -194,8 +194,6 @@ impl<Tag> From<ScalarInt> for Scalar<Tag> {\n }\n \n impl<Tag> Scalar<Tag> {\n-    pub const ZST: Self = Scalar::Int(ScalarInt::ZST);\n-\n     #[inline(always)]\n     pub fn from_pointer(ptr: Pointer<Tag>, cx: &impl HasDataLayout) -> Self {\n         Scalar::Ptr(ptr, u8::try_from(cx.pointer_size().bytes()).unwrap())"}, {"sha": "532b7f2bf0c76787f807b14e5e504660a04e28de", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -1711,7 +1711,7 @@ impl<'tcx> Operand<'tcx> {\n         Operand::Constant(Box::new(Constant {\n             span,\n             user_ty: None,\n-            literal: ConstantKind::Val(ConstValue::zst(), ty),\n+            literal: ConstantKind::Val(ConstValue::ZST, ty),\n         }))\n     }\n \n@@ -2196,7 +2196,7 @@ impl<'tcx> ConstantKind<'tcx> {\n \n     #[inline]\n     pub fn zero_sized(ty: Ty<'tcx>) -> Self {\n-        let cv = ConstValue::Scalar(Scalar::ZST);\n+        let cv = ConstValue::ZST;\n         Self::Val(cv, ty)\n     }\n "}, {"sha": "453e33efdd2933c814ce7dffb235c799cf091b17", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -449,6 +449,7 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n             }\n \n             let fmt_val = |val: &ConstValue<'tcx>| match val {\n+                ConstValue::ZST => format!(\"ZST\"),\n                 ConstValue::Scalar(s) => format!(\"Scalar({:?})\", s),\n                 ConstValue::Slice { .. } => format!(\"Slice(..)\"),\n                 ConstValue::ByRef { .. } => format!(\"ByRef(..)\"),\n@@ -679,6 +680,7 @@ pub fn write_allocations<'tcx>(\n             ConstValue::Scalar(interpret::Scalar::Int { .. }) => {\n                 Either::Left(Either::Right(std::iter::empty()))\n             }\n+            ConstValue::ZST => Either::Left(Either::Right(std::iter::empty())),\n             ConstValue::ByRef { alloc, .. } | ConstValue::Slice { data: alloc, .. } => {\n                 Either::Right(alloc_ids_from_alloc(alloc))\n             }"}, {"sha": "1938c56768da0194439aebc81fefa89d79644265", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -419,6 +419,10 @@ pub enum ExprKind<'tcx> {\n         lit: ty::ScalarInt,\n         user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n     },\n+    /// A literal of a ZST type.\n+    ZstLiteral {\n+        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n+    },\n     /// Associated constants and named constants\n     NamedConst {\n         def_id: DefId,\n@@ -456,7 +460,7 @@ pub enum ExprKind<'tcx> {\n \n impl<'tcx> ExprKind<'tcx> {\n     pub fn zero_sized_literal(user_ty: Option<Canonical<'tcx, UserType<'tcx>>>) -> Self {\n-        ExprKind::NonHirLiteral { lit: ty::ScalarInt::ZST, user_ty }\n+        ExprKind::ZstLiteral { user_ty }\n     }\n }\n "}, {"sha": "c8d09875c2896f1c4f8bfa78386cf369ba376d8b", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -129,6 +129,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n         Closure { closure_id: _, substs: _, upvars: _, movability: _, fake_reads: _ } => {}\n         Literal { lit: _, neg: _ } => {}\n         NonHirLiteral { lit: _, user_ty: _ } => {}\n+        ZstLiteral { user_ty: _ } => {}\n         NamedConst { def_id: _, substs: _, user_ty: _ } => {}\n         ConstParam { param: _, def_id: _ } => {}\n         StaticRef { alloc_id: _, ty: _, def_id: _ } => {}"}, {"sha": "7436f0f6f4d33928731324b9bf35ddcab5f96e22", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -4,6 +4,7 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_target::abi::Size;\n use std::convert::{TryFrom, TryInto};\n use std::fmt;\n+use std::num::NonZeroU8;\n \n use crate::ty::TyCtxt;\n \n@@ -123,7 +124,7 @@ pub struct ScalarInt {\n     /// The first `size` bytes of `data` are the value.\n     /// Do not try to read less or more bytes than that. The remaining bytes must be 0.\n     data: u128,\n-    size: u8,\n+    size: NonZeroU8,\n }\n \n // Cannot derive these, as the derives take references to the fields, and we\n@@ -135,33 +136,31 @@ impl<CTX> crate::ty::HashStable<CTX> for ScalarInt {\n         // Since `Self` is a packed struct, that would create a possibly unaligned reference,\n         // which is UB.\n         { self.data }.hash_stable(hcx, hasher);\n-        self.size.hash_stable(hcx, hasher);\n+        self.size.get().hash_stable(hcx, hasher);\n     }\n }\n \n impl<S: Encoder> Encodable<S> for ScalarInt {\n     fn encode(&self, s: &mut S) {\n         s.emit_u128(self.data);\n-        s.emit_u8(self.size);\n+        s.emit_u8(self.size.get());\n     }\n }\n \n impl<D: Decoder> Decodable<D> for ScalarInt {\n     fn decode(d: &mut D) -> ScalarInt {\n-        ScalarInt { data: d.read_u128(), size: d.read_u8() }\n+        ScalarInt { data: d.read_u128(), size: NonZeroU8::new(d.read_u8()).unwrap() }\n     }\n }\n \n impl ScalarInt {\n-    pub const TRUE: ScalarInt = ScalarInt { data: 1_u128, size: 1 };\n+    pub const TRUE: ScalarInt = ScalarInt { data: 1_u128, size: NonZeroU8::new(1).unwrap() };\n \n-    pub const FALSE: ScalarInt = ScalarInt { data: 0_u128, size: 1 };\n-\n-    pub const ZST: ScalarInt = ScalarInt { data: 0_u128, size: 0 };\n+    pub const FALSE: ScalarInt = ScalarInt { data: 0_u128, size: NonZeroU8::new(1).unwrap() };\n \n     #[inline]\n     pub fn size(self) -> Size {\n-        Size::from_bytes(self.size)\n+        Size::from_bytes(self.size.get())\n     }\n \n     /// Make sure the `data` fits in `size`.\n@@ -185,7 +184,7 @@ impl ScalarInt {\n \n     #[inline]\n     pub fn null(size: Size) -> Self {\n-        Self { data: 0, size: size.bytes() as u8 }\n+        Self { data: 0, size: NonZeroU8::new(size.bytes() as u8).unwrap() }\n     }\n \n     #[inline]\n@@ -197,7 +196,7 @@ impl ScalarInt {\n     pub fn try_from_uint(i: impl Into<u128>, size: Size) -> Option<Self> {\n         let data = i.into();\n         if size.truncate(data) == data {\n-            Some(Self { data, size: size.bytes() as u8 })\n+            Some(Self { data, size: NonZeroU8::new(size.bytes() as u8).unwrap() })\n         } else {\n             None\n         }\n@@ -209,7 +208,7 @@ impl ScalarInt {\n         // `into` performed sign extension, we have to truncate\n         let truncated = size.truncate(i as u128);\n         if size.sign_extend(truncated) as i128 == i {\n-            Some(Self { data: truncated, size: size.bytes() as u8 })\n+            Some(Self { data: truncated, size: NonZeroU8::new(size.bytes() as u8).unwrap() })\n         } else {\n             None\n         }\n@@ -225,7 +224,7 @@ impl ScalarInt {\n     #[inline]\n     pub fn to_bits(self, target_size: Size) -> Result<u128, Size> {\n         assert_ne!(target_size.bytes(), 0, \"you should never look at the bits of a ZST\");\n-        if target_size.bytes() == u64::from(self.size) {\n+        if target_size.bytes() == u64::from(self.size.get()) {\n             self.check_data();\n             Ok(self.data)\n         } else {\n@@ -339,7 +338,7 @@ macro_rules! from {\n                 fn from(u: $ty) -> Self {\n                     Self {\n                         data: u128::from(u),\n-                        size: std::mem::size_of::<$ty>() as u8,\n+                        size: NonZeroU8::new(std::mem::size_of::<$ty>() as u8).unwrap(),\n                     }\n                 }\n             }\n@@ -382,7 +381,7 @@ impl TryFrom<ScalarInt> for bool {\n impl From<char> for ScalarInt {\n     #[inline]\n     fn from(c: char) -> Self {\n-        Self { data: c as u128, size: std::mem::size_of::<char>() as u8 }\n+        Self { data: c as u128, size: NonZeroU8::new(std::mem::size_of::<char>() as u8).unwrap() }\n     }\n }\n \n@@ -409,7 +408,7 @@ impl From<Single> for ScalarInt {\n     #[inline]\n     fn from(f: Single) -> Self {\n         // We trust apfloat to give us properly truncated data.\n-        Self { data: f.to_bits(), size: 4 }\n+        Self { data: f.to_bits(), size: NonZeroU8::new((Single::BITS / 8) as u8).unwrap() }\n     }\n }\n \n@@ -425,7 +424,7 @@ impl From<Double> for ScalarInt {\n     #[inline]\n     fn from(f: Double) -> Self {\n         // We trust apfloat to give us properly truncated data.\n-        Self { data: f.to_bits(), size: 8 }\n+        Self { data: f.to_bits(), size: NonZeroU8::new((Double::BITS / 8) as u8).unwrap() }\n     }\n }\n \n@@ -439,13 +438,8 @@ impl TryFrom<ScalarInt> for Double {\n \n impl fmt::Debug for ScalarInt {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        if self.size == 0 {\n-            self.check_data();\n-            write!(f, \"<ZST>\")\n-        } else {\n-            // Dispatch to LowerHex below.\n-            write!(f, \"0x{:x}\", self)\n-        }\n+        // Dispatch to LowerHex below.\n+        write!(f, \"0x{:x}\", self)\n     }\n }\n \n@@ -463,7 +457,7 @@ impl fmt::LowerHex for ScalarInt {\n         // would thus borrow `self.data`. Since `Self`\n         // is a packed struct, that would create a possibly unaligned reference, which\n         // is UB.\n-        write!(f, \"{:01$x}\", { self.data }, self.size as usize * 2)\n+        write!(f, \"{:01$x}\", { self.data }, self.size.get() as usize * 2)\n     }\n }\n \n@@ -477,7 +471,7 @@ impl fmt::UpperHex for ScalarInt {\n         // would thus borrow `self.data`. Since `Self`\n         // is a packed struct, that would create a possibly unaligned reference, which\n         // is UB.\n-        write!(f, \"{:01$X}\", { self.data }, self.size as usize * 2)\n+        write!(f, \"{:01$X}\", { self.data }, self.size.get() as usize * 2)\n     }\n }\n "}, {"sha": "f721a175c9834bc0b7c0c1815c9debb3bc23d41d", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -1355,10 +1355,6 @@ pub trait PrettyPrinter<'tcx>:\n                     \" as \",\n                 )?;\n             }\n-            // For function type zsts just printing the path is enough\n-            ty::FnDef(d, s) if int == ScalarInt::ZST => {\n-                p!(print_value_path(*d, s))\n-            }\n             // Nontrivial types with scalar bit representation\n             _ => {\n                 let print = |mut this: Self| {"}, {"sha": "c3af9f2d2b76b081b60f6b7ae1dcf14e6be3feed", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -49,11 +49,22 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         inferred_ty: ty,\n                     })\n                 });\n-\n                 let literal = ConstantKind::Val(ConstValue::Scalar(Scalar::Int(lit)), ty);\n \n                 Constant { span, user_ty: user_ty, literal }\n             }\n+            ExprKind::ZstLiteral { user_ty } => {\n+                let user_ty = user_ty.map(|user_ty| {\n+                    this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n+                        span,\n+                        user_ty,\n+                        inferred_ty: ty,\n+                    })\n+                });\n+                let literal = ConstantKind::Val(ConstValue::ZST, ty);\n+\n+                Constant { span, user_ty: user_ty, literal }\n+            }\n             ExprKind::NamedConst { def_id, substs, user_ty } => {\n                 let user_ty = user_ty.map(|user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {"}, {"sha": "e88f9dc1f08f5bf81c1218c051399adcc561be3b", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -603,6 +603,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Literal { .. }\n             | ExprKind::NamedConst { .. }\n             | ExprKind::NonHirLiteral { .. }\n+            | ExprKind::ZstLiteral { .. }\n             | ExprKind::ConstParam { .. }\n             | ExprKind::ConstBlock { .. }\n             | ExprKind::StaticRef { .. }"}, {"sha": "15f2d17c4e08b2ddc45d181ea9f89d0a2c408cfa", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -415,6 +415,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::Literal { .. }\n             | ExprKind::NamedConst { .. }\n             | ExprKind::NonHirLiteral { .. }\n+            | ExprKind::ZstLiteral { .. }\n             | ExprKind::ConstParam { .. }\n             | ExprKind::ConstBlock { .. }\n             | ExprKind::StaticRef { .. } => {"}, {"sha": "a4386319dc1aa77c631124e49d90b859b7df94f5", "filename": "compiler/rustc_mir_build/src/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -72,6 +72,7 @@ impl Category {\n             ExprKind::ConstBlock { .. }\n             | ExprKind::Literal { .. }\n             | ExprKind::NonHirLiteral { .. }\n+            | ExprKind::ZstLiteral { .. }\n             | ExprKind::ConstParam { .. }\n             | ExprKind::StaticRef { .. }\n             | ExprKind::NamedConst { .. } => Some(Category::Constant),"}, {"sha": "017d43d10a9a917a52b5db18720d92a9f20a4f8d", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -559,6 +559,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Literal { .. }\n             | ExprKind::NamedConst { .. }\n             | ExprKind::NonHirLiteral { .. }\n+            | ExprKind::ZstLiteral { .. }\n             | ExprKind::ConstParam { .. }\n             | ExprKind::ThreadLocalRef(_)\n             | ExprKind::StaticRef { .. } => {"}, {"sha": "8585199faaf5a05431cd2466ede8317812a09bd6", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -307,6 +307,7 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             | ExprKind::Literal { .. }\n             | ExprKind::NamedConst { .. }\n             | ExprKind::NonHirLiteral { .. }\n+            | ExprKind::ZstLiteral { .. }\n             | ExprKind::ConstParam { .. }\n             | ExprKind::ConstBlock { .. }\n             | ExprKind::Deref { .. }"}, {"sha": "3a152eff485dbbc3fe93142c74a550ce8d00db50", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a422b421597202554a76bee32d07b54a15631681/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=a422b421597202554a76bee32d07b54a15631681", "patch": "@@ -451,6 +451,10 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 let val = ty::ValTree::from_scalar_int(lit);\n                 self.nodes.push(Node::Leaf(ty::Const::from_value(self.tcx, val, node.ty)))\n             }\n+            &ExprKind::ZstLiteral { user_ty: _ } => {\n+                let val = ty::ValTree::zst();\n+                self.nodes.push(Node::Leaf(ty::Const::from_value(self.tcx, val, node.ty)))\n+            }\n             &ExprKind::NamedConst { def_id, substs, user_ty: _ } => {\n                 let uneval = ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs);\n "}]}