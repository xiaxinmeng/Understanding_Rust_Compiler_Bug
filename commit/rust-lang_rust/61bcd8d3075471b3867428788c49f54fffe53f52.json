{"sha": "61bcd8d3075471b3867428788c49f54fffe53f52", "node_id": "C_kwDOAAsO6NoAKDYxYmNkOGQzMDc1NDcxYjM4Njc0Mjg3ODhjNDlmNTRmZmZlNTNmNTI", "commit": {"author": {"name": "Cormac Relf", "email": "web@cormacrelf.net", "date": "2021-10-13T07:34:29Z"}, "committer": {"name": "Cormac Relf", "email": "web@cormacrelf.net", "date": "2021-12-13T03:02:41Z"}, "message": "let-else: add tests for moved expressions, copy out of non-copy", "tree": {"sha": "10c515cb88d6bd23bcf1d0e8545fdaa67a9d5fe0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10c515cb88d6bd23bcf1d0e8545fdaa67a9d5fe0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61bcd8d3075471b3867428788c49f54fffe53f52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61bcd8d3075471b3867428788c49f54fffe53f52", "html_url": "https://github.com/rust-lang/rust/commit/61bcd8d3075471b3867428788c49f54fffe53f52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61bcd8d3075471b3867428788c49f54fffe53f52/comments", "author": {"login": "cormacrelf", "id": 378760, "node_id": "MDQ6VXNlcjM3ODc2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/378760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cormacrelf", "html_url": "https://github.com/cormacrelf", "followers_url": "https://api.github.com/users/cormacrelf/followers", "following_url": "https://api.github.com/users/cormacrelf/following{/other_user}", "gists_url": "https://api.github.com/users/cormacrelf/gists{/gist_id}", "starred_url": "https://api.github.com/users/cormacrelf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cormacrelf/subscriptions", "organizations_url": "https://api.github.com/users/cormacrelf/orgs", "repos_url": "https://api.github.com/users/cormacrelf/repos", "events_url": "https://api.github.com/users/cormacrelf/events{/privacy}", "received_events_url": "https://api.github.com/users/cormacrelf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cormacrelf", "id": 378760, "node_id": "MDQ6VXNlcjM3ODc2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/378760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cormacrelf", "html_url": "https://github.com/cormacrelf", "followers_url": "https://api.github.com/users/cormacrelf/followers", "following_url": "https://api.github.com/users/cormacrelf/following{/other_user}", "gists_url": "https://api.github.com/users/cormacrelf/gists{/gist_id}", "starred_url": "https://api.github.com/users/cormacrelf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cormacrelf/subscriptions", "organizations_url": "https://api.github.com/users/cormacrelf/orgs", "repos_url": "https://api.github.com/users/cormacrelf/repos", "events_url": "https://api.github.com/users/cormacrelf/events{/privacy}", "received_events_url": "https://api.github.com/users/cormacrelf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34a98192d513dea6b5ea4aaa74fec5b84b0fe6ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/34a98192d513dea6b5ea4aaa74fec5b84b0fe6ee", "html_url": "https://github.com/rust-lang/rust/commit/34a98192d513dea6b5ea4aaa74fec5b84b0fe6ee"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "79ed82dd124bd8f83a9241f54f7101945b99908f", "filename": "src/test/ui/let-else/let-else-non-copy.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/61bcd8d3075471b3867428788c49f54fffe53f52/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61bcd8d3075471b3867428788c49f54fffe53f52/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-copy.rs?ref=61bcd8d3075471b3867428788c49f54fffe53f52", "patch": "@@ -0,0 +1,45 @@\n+// run-pass\n+//\n+// This is derived from a change to compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs, in\n+// preparation for adopting let-else within the compiler (thanks @est31):\n+//\n+// ```\n+// -    let place = if let mir::VarDebugInfoContents::Place(p) = var.value { p } else { continue };\n+// +    let mir::VarDebugInfoContents::Place(place) = var.value else { continue };\n+// ```\n+//\n+// The move was due to mir::Place being Copy, but mir::VarDebugInfoContents not being Copy.\n+\n+#![feature(let_else)]\n+\n+#[derive(Copy, Clone)]\n+struct Copyable;\n+\n+enum NonCopy {\n+    Thing(Copyable),\n+    #[allow(unused)]\n+    Other,\n+}\n+\n+struct Wrapper {\n+    field: NonCopy,\n+}\n+\n+fn let_else() {\n+    let vec = vec![Wrapper { field: NonCopy::Thing(Copyable) }];\n+    for item in &vec {\n+        let NonCopy::Thing(_copyable) = item.field else { continue };\n+    }\n+}\n+\n+fn if_let() {\n+    let vec = vec![Wrapper { field: NonCopy::Thing(Copyable) }];\n+    for item in &vec {\n+        let _copyable = if let NonCopy::Thing(copyable) = item.field { copyable } else { continue };\n+    }\n+}\n+\n+fn main() {\n+    let_else();\n+    if_let();\n+}"}, {"sha": "2aa17ae8ceb1a4b920c209071ca30c72545bfab0", "filename": "src/test/ui/let-else/let-else-source-expr-nomove-pass.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/61bcd8d3075471b3867428788c49f54fffe53f52/src%2Ftest%2Fui%2Flet-else%2Flet-else-source-expr-nomove-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61bcd8d3075471b3867428788c49f54fffe53f52/src%2Ftest%2Fui%2Flet-else%2Flet-else-source-expr-nomove-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-source-expr-nomove-pass.rs?ref=61bcd8d3075471b3867428788c49f54fffe53f52", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+// issue #89688\n+\n+#![feature(let_else)]\n+\n+fn example_let_else(value: Option<String>) {\n+    let Some(inner) = value else {\n+        println!(\"other: {:?}\", value); // OK\n+        return;\n+    };\n+    println!(\"inner: {}\", inner);\n+}\n+\n+fn main() {\n+    example_let_else(Some(\"foo\".into()));\n+    example_let_else(None);\n+}"}]}