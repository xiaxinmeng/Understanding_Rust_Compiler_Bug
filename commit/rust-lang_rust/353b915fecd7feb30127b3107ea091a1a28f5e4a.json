{"sha": "353b915fecd7feb30127b3107ea091a1a28f5e4a", "node_id": "C_kwDOAAsO6NoAKDM1M2I5MTVmZWNkN2ZlYjMwMTI3YjMxMDdlYTA5MWExYTI4ZjVlNGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-16T14:39:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-16T14:39:45Z"}, "message": "Rollup merge of #104317 - RalfJung:ctfe-error-reporting, r=oli-obk\n\ncleanup and dedupe CTFE and Miri error reporting\n\nIt looks like most of the time, this error raised from const_prop_lint is just redundant -- it duplicates the error reported when evaluating the const-eval query. This lets us make `ConstEvalErr` private to the const_eval module which I think is a good step.\n\nThe Miri change mostly replaces a `match` by `if let`, and dedupes the \"this error is impossible in Miri\" checks.\n\nr? ``@oli-obk``\nFixes https://github.com/rust-lang/rust/issues/75461", "tree": {"sha": "09683fbdf0f8faa79ac77eafe6bc8ae492acff6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09683fbdf0f8faa79ac77eafe6bc8ae492acff6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/353b915fecd7feb30127b3107ea091a1a28f5e4a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjdPYxCRBK7hj4Ov3rIwAAFbwIADezlmI/729rTK7TKTcHwhvg\nQwEOsiZHTzqAeX5oHL5HmuQCJ06MOY5Xwl5msHN3J2yi7wJRu3HnZ0JQwDQAJRls\n1MvMm3gI3ZVUtHkd7dYlEi0TFdE0homQ9hM4z2DnX+fFSiOi+NVzNNbRPRTtFhBC\ndma2+K163IeOS8Zp/jFs/xwRhld3LPMc9JM5OtQejisTfPwTCIbRNstFdAwsHbPF\nh2qjk25YNLGCKq9FLyDy1GU1HaWVhdnD1RGVg/BT/FIuDC2/MYkdcWkwOw1KmXvG\nao9XbjxPM43kALQhDmz1iYT3RN1oxx8qpADtzuGdbjS4H2fAYa9euVqyrcUHrp0=\n=HHfQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 09683fbdf0f8faa79ac77eafe6bc8ae492acff6f\nparent fbcd751ea15e96c293f83655be31e64a5751fa36\nparent 1115ec601a7f7dc2406e26cd5da0faf031043b81\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668609585 +0100\ncommitter GitHub <noreply@github.com> 1668609585 +0100\n\nRollup merge of #104317 - RalfJung:ctfe-error-reporting, r=oli-obk\n\ncleanup and dedupe CTFE and Miri error reporting\n\nIt looks like most of the time, this error raised from const_prop_lint is just redundant -- it duplicates the error reported when evaluating the const-eval query. This lets us make `ConstEvalErr` private to the const_eval module which I think is a good step.\n\nThe Miri change mostly replaces a `match` by `if let`, and dedupes the \"this error is impossible in Miri\" checks.\n\nr? ``@oli-obk``\nFixes https://github.com/rust-lang/rust/issues/75461\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/353b915fecd7feb30127b3107ea091a1a28f5e4a", "html_url": "https://github.com/rust-lang/rust/commit/353b915fecd7feb30127b3107ea091a1a28f5e4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/353b915fecd7feb30127b3107ea091a1a28f5e4a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbcd751ea15e96c293f83655be31e64a5751fa36", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbcd751ea15e96c293f83655be31e64a5751fa36", "html_url": "https://github.com/rust-lang/rust/commit/fbcd751ea15e96c293f83655be31e64a5751fa36"}, {"sha": "1115ec601a7f7dc2406e26cd5da0faf031043b81", "url": "https://api.github.com/repos/rust-lang/rust/commits/1115ec601a7f7dc2406e26cd5da0faf031043b81", "html_url": "https://github.com/rust-lang/rust/commit/1115ec601a7f7dc2406e26cd5da0faf031043b81"}], "stats": {"total": 1293, "additions": 708, "deletions": 585}, "files": [{"sha": "5478caee57d4541a6b27aeaaee56c129c6ae8f93", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n         if let Err(err) = fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n             all_constants_ok = false;\n             match err {\n-                ErrorHandled::Reported(_) | ErrorHandled::Linted => {\n+                ErrorHandled::Reported(_) => {\n                     fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n                 }\n                 ErrorHandled::TooGeneric => {"}, {"sha": "f4a300ef2c534e4dd817f897f1c7a8086369b88e", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -189,7 +189,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             all_consts_ok = false;\n             match err {\n                 // errored or at least linted\n-                ErrorHandled::Reported(_) | ErrorHandled::Linted => {}\n+                ErrorHandled::Reported(_) => {}\n                 ErrorHandled::TooGeneric => {\n                     span_bug!(const_.span, \"codegen encountered polymorphic constant: {:?}\", err)\n                 }"}, {"sha": "e3dfd72d5f0e3ff60dba77499174cb40d443ad1a", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -55,7 +55,7 @@ impl Error for ConstEvalErrKind {}\n /// When const-evaluation errors, this type is constructed with the resulting information,\n /// and then used to emit the error as a lint or hard error.\n #[derive(Debug)]\n-pub struct ConstEvalErr<'tcx> {\n+pub(super) struct ConstEvalErr<'tcx> {\n     pub span: Span,\n     pub error: InterpError<'tcx>,\n     pub stacktrace: Vec<FrameInfo<'tcx>>,\n@@ -82,8 +82,8 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         ConstEvalErr { error: error.into_kind(), stacktrace, span }\n     }\n \n-    pub fn report_as_error(&self, tcx: TyCtxtAt<'tcx>, message: &str) -> ErrorHandled {\n-        self.struct_error(tcx, message, |_| {})\n+    pub(super) fn report(&self, tcx: TyCtxtAt<'tcx>, message: &str) -> ErrorHandled {\n+        self.report_decorated(tcx, message, |_| {})\n     }\n \n     /// Create a diagnostic for this const eval error.\n@@ -95,7 +95,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n     /// If `lint_root.is_some()` report it as a lint, else report it as a hard error.\n     /// (Except that for some errors, we ignore all that -- see `must_error` below.)\n     #[instrument(skip(self, tcx, decorate), level = \"debug\")]\n-    pub fn struct_error(\n+    pub(super) fn report_decorated(\n         &self,\n         tcx: TyCtxtAt<'tcx>,\n         message: &str,"}, {"sha": "f5942deaf9fa1ed2d7670a38eeeb934ac5579ea4", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -255,7 +255,7 @@ pub fn eval_to_const_value_raw_provider<'tcx>(\n         return eval_nullary_intrinsic(tcx, key.param_env, def_id, substs).map_err(|error| {\n             let span = tcx.def_span(def_id);\n             let error = ConstEvalErr { error: error.into_kind(), stacktrace: vec![], span };\n-            error.report_as_error(tcx.at(span), \"could not evaluate nullary intrinsic\")\n+            error.report(tcx.at(span), \"could not evaluate nullary intrinsic\")\n         });\n     }\n \n@@ -333,7 +333,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                 }\n             };\n \n-            Err(err.report_as_error(ecx.tcx.at(err.span), &msg))\n+            Err(err.report(ecx.tcx.at(err.span), &msg))\n         }\n         Ok(mplace) => {\n             // Since evaluation had no errors, validate the resulting constant.\n@@ -358,7 +358,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n             if let Err(error) = validation {\n                 // Validation failed, report an error. This is always a hard error.\n                 let err = ConstEvalErr::new(&ecx, error, None);\n-                Err(err.struct_error(\n+                Err(err.report_decorated(\n                     ecx.tcx,\n                     \"it is undefined behavior to use this value\",\n                     |diag| {"}, {"sha": "01b2b4b5d9cd32f64b9fb45e0438d20b52169b52", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -103,7 +103,7 @@ pub(crate) fn try_destructure_mir_constant<'tcx>(\n ) -> InterpResult<'tcx, mir::DestructuredConstant<'tcx>> {\n     trace!(\"destructure_mir_constant: {:?}\", val);\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n-    let op = ecx.const_to_op(&val, None)?;\n+    let op = ecx.eval_mir_constant(&val, None, None)?;\n \n     // We go to `usize` as we cannot allocate anything bigger anyway.\n     let (field_count, variant, down) = match val.ty().kind() {\n@@ -139,7 +139,7 @@ pub(crate) fn deref_mir_constant<'tcx>(\n     val: mir::ConstantKind<'tcx>,\n ) -> mir::ConstantKind<'tcx> {\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n-    let op = ecx.const_to_op(&val, None).unwrap();\n+    let op = ecx.eval_mir_constant(&val, None, None).unwrap();\n     let mplace = ecx.deref_operand(&op).unwrap();\n     if let Some(alloc_id) = mplace.ptr.provenance {\n         assert_eq!("}, {"sha": "ed69d8554d2cc8b6c82d755f278bfa709056db23", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -5,7 +5,7 @@ use std::mem;\n use rustc_hir::{self as hir, def_id::DefId, definitions::DefPathData};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::{InterpError, InvalidProgramInfo};\n+use rustc_middle::mir::interpret::{ErrorHandled, InterpError, InvalidProgramInfo};\n use rustc_middle::ty::layout::{\n     self, FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOf, LayoutOfHelpers,\n     TyAndLayout,\n@@ -696,12 +696,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         for ct in &body.required_consts {\n             let span = ct.span;\n             let ct = self.subst_from_current_frame_and_normalize_erasing_regions(ct.literal)?;\n-            self.const_to_op(&ct, None).map_err(|err| {\n-                // If there was an error, set the span of the current frame to this constant.\n-                // Avoiding doing this when evaluation succeeds.\n-                self.frame_mut().loc = Err(span);\n-                err\n-            })?;\n+            self.eval_mir_constant(&ct, Some(span), None)?;\n         }\n \n         // Most locals are initially dead.\n@@ -912,9 +907,32 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    pub fn eval_to_allocation(\n+    /// Call a query that can return `ErrorHandled`. If `span` is `Some`, point to that span when an error occurs.\n+    pub fn ctfe_query<T>(\n+        &self,\n+        span: Option<Span>,\n+        query: impl FnOnce(TyCtxtAt<'tcx>) -> Result<T, ErrorHandled>,\n+    ) -> InterpResult<'tcx, T> {\n+        // Use a precise span for better cycle errors.\n+        query(self.tcx.at(span.unwrap_or_else(|| self.cur_span()))).map_err(|err| {\n+            match err {\n+                ErrorHandled::Reported(err) => {\n+                    if let Some(span) = span {\n+                        // To make it easier to figure out where this error comes from, also add a note at the current location.\n+                        self.tcx.sess.span_note_without_error(span, \"erroneous constant used\");\n+                    }\n+                    err_inval!(AlreadyReported(err))\n+                }\n+                ErrorHandled::TooGeneric => err_inval!(TooGeneric),\n+            }\n+            .into()\n+        })\n+    }\n+\n+    pub fn eval_global(\n         &self,\n         gid: GlobalId<'tcx>,\n+        span: Option<Span>,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::Provenance>> {\n         // For statics we pick `ParamEnv::reveal_all`, because statics don't have generics\n         // and thus don't care about the parameter environment. While we could just use\n@@ -927,8 +945,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             self.param_env\n         };\n         let param_env = param_env.with_const();\n-        // Use a precise span for better cycle errors.\n-        let val = self.tcx.at(self.cur_span()).eval_to_allocation_raw(param_env.and(gid))?;\n+        let val = self.ctfe_query(span, |tcx| tcx.eval_to_allocation_raw(param_env.and(gid)))?;\n         self.raw_const_to_mplace(val)\n     }\n "}, {"sha": "6fc2407b778034044d558eac875a9cff2fe030f8", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -177,8 +177,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     sym::type_name => self.tcx.mk_static_str(),\n                     _ => bug!(),\n                 };\n-                let val =\n-                    self.tcx.const_eval_global_id(self.param_env, gid, Some(self.tcx.span))?;\n+                let val = self.ctfe_query(None, |tcx| {\n+                    tcx.const_eval_global_id(self.param_env, gid, Some(tcx.span))\n+                })?;\n                 let val = self.const_val_to_op(val, ty, Some(dest.layout))?;\n                 self.copy_op(&val, dest, /*allow_transmute*/ false)?;\n             }"}, {"sha": "528c1cb06c0ebadf1e2ca0cb324cc51bd8c0e794", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -501,8 +501,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     throw_unsup!(ReadExternStatic(def_id));\n                 }\n \n-                // Use a precise span for better cycle errors.\n-                (self.tcx.at(self.cur_span()).eval_static_initializer(def_id)?, Some(def_id))\n+                // We don't give a span -- statics don't need that, they cannot be generic or associated.\n+                let val = self.ctfe_query(None, |tcx| tcx.eval_static_initializer(def_id))?;\n+                (val, Some(def_id))\n             }\n         };\n         M::before_access_global(*self.tcx, &self.machine, id, alloc, def_id, is_write)?;"}, {"sha": "cf9202540c7fe48b0f9fc37dd0c33a8bbd0423cb", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 37, "deletions": 34, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -4,8 +4,9 @@\n use rustc_hir::def::Namespace;\n use rustc_middle::ty::layout::{LayoutOf, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter};\n-use rustc_middle::ty::{ConstInt, Ty};\n+use rustc_middle::ty::{ConstInt, Ty, ValTree};\n use rustc_middle::{mir, ty};\n+use rustc_span::Span;\n use rustc_target::abi::{self, Abi, Align, HasDataLayout, Size, TagEncoding};\n use rustc_target::abi::{VariantIdx, Variants};\n \n@@ -527,14 +528,14 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Copy(place) | Move(place) => self.eval_place_to_op(place, layout)?,\n \n             Constant(ref constant) => {\n-                let val =\n+                let c =\n                     self.subst_from_current_frame_and_normalize_erasing_regions(constant.literal)?;\n \n                 // This can still fail:\n                 // * During ConstProp, with `TooGeneric` or since the `required_consts` were not all\n                 //   checked yet.\n                 // * During CTFE, since promoteds in `const`/`static` initializer bodies can fail.\n-                self.const_to_op(&val, layout)?\n+                self.eval_mir_constant(&c, Some(constant.span), layout)?\n             }\n         };\n         trace!(\"{:?}: {:?}\", mir_op, *op);\n@@ -549,9 +550,35 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         ops.iter().map(|op| self.eval_operand(op, None)).collect()\n     }\n \n-    pub fn const_to_op(\n+    fn eval_ty_constant(\n+        &self,\n+        val: ty::Const<'tcx>,\n+        span: Option<Span>,\n+    ) -> InterpResult<'tcx, ValTree<'tcx>> {\n+        Ok(match val.kind() {\n+            ty::ConstKind::Param(_) | ty::ConstKind::Placeholder(..) => {\n+                throw_inval!(TooGeneric)\n+            }\n+            ty::ConstKind::Error(reported) => {\n+                throw_inval!(AlreadyReported(reported))\n+            }\n+            ty::ConstKind::Unevaluated(uv) => {\n+                let instance = self.resolve(uv.def, uv.substs)?;\n+                let cid = GlobalId { instance, promoted: None };\n+                self.ctfe_query(span, |tcx| tcx.eval_to_valtree(self.param_env.and(cid)))?\n+                    .unwrap_or_else(|| bug!(\"unable to create ValTree for {uv:?}\"))\n+            }\n+            ty::ConstKind::Bound(..) | ty::ConstKind::Infer(..) => {\n+                span_bug!(self.cur_span(), \"unexpected ConstKind in ctfe: {val:?}\")\n+            }\n+            ty::ConstKind::Value(valtree) => valtree,\n+        })\n+    }\n+\n+    pub fn eval_mir_constant(\n         &self,\n         val: &mir::ConstantKind<'tcx>,\n+        span: Option<Span>,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::Provenance>> {\n         // FIXME(const_prop): normalization needed b/c const prop lint in\n@@ -563,44 +590,20 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let val = self.tcx.normalize_erasing_regions(self.param_env, *val);\n         match val {\n             mir::ConstantKind::Ty(ct) => {\n-                match ct.kind() {\n-                    ty::ConstKind::Param(_) | ty::ConstKind::Placeholder(..) => {\n-                        throw_inval!(TooGeneric)\n-                    }\n-                    ty::ConstKind::Error(reported) => {\n-                        throw_inval!(AlreadyReported(reported))\n-                    }\n-                    ty::ConstKind::Unevaluated(uv) => {\n-                        // NOTE: We evaluate to a `ValTree` here as a check to ensure\n-                        // we're working with valid constants, even though we never need it.\n-                        let instance = self.resolve(uv.def, uv.substs)?;\n-                        let cid = GlobalId { instance, promoted: None };\n-                        let _valtree = self\n-                            .tcx\n-                            .eval_to_valtree(self.param_env.and(cid))?\n-                            .unwrap_or_else(|| bug!(\"unable to create ValTree for {uv:?}\"));\n-\n-                        Ok(self.eval_to_allocation(cid)?.into())\n-                    }\n-                    ty::ConstKind::Bound(..) | ty::ConstKind::Infer(..) => {\n-                        span_bug!(self.cur_span(), \"unexpected ConstKind in ctfe: {ct:?}\")\n-                    }\n-                    ty::ConstKind::Value(valtree) => {\n-                        let ty = ct.ty();\n-                        let const_val = self.tcx.valtree_to_const_val((ty, valtree));\n-                        self.const_val_to_op(const_val, ty, layout)\n-                    }\n-                }\n+                let ty = ct.ty();\n+                let valtree = self.eval_ty_constant(ct, span)?;\n+                let const_val = self.tcx.valtree_to_const_val((ty, valtree));\n+                self.const_val_to_op(const_val, ty, layout)\n             }\n             mir::ConstantKind::Val(val, ty) => self.const_val_to_op(val, ty, layout),\n             mir::ConstantKind::Unevaluated(uv, _) => {\n                 let instance = self.resolve(uv.def, uv.substs)?;\n-                Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())\n+                Ok(self.eval_global(GlobalId { instance, promoted: uv.promoted }, span)?.into())\n             }\n         }\n     }\n \n-    pub(crate) fn const_val_to_op(\n+    pub(super) fn const_val_to_op(\n         &self,\n         val_val: ConstValue<'tcx>,\n         ty: Ty<'tcx>,"}, {"sha": "ae0dbad8b08d737c0de6467fdb6994a1e37f1c05", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -16,8 +16,6 @@ pub enum ErrorHandled {\n     /// Already reported an error for this evaluation, and the compilation is\n     /// *guaranteed* to fail. Warnings/lints *must not* produce `Reported`.\n     Reported(ErrorGuaranteed),\n-    /// Already emitted a lint for this evaluation.\n-    Linted,\n     /// Don't emit an error, the evaluation failed because the MIR was generic\n     /// and the substs didn't fully monomorphize it.\n     TooGeneric,\n@@ -89,18 +87,6 @@ fn print_backtrace(backtrace: &Backtrace) {\n     eprintln!(\"\\n\\nAn error occurred in miri:\\n{}\", backtrace);\n }\n \n-impl From<ErrorHandled> for InterpErrorInfo<'_> {\n-    fn from(err: ErrorHandled) -> Self {\n-        match err {\n-            ErrorHandled::Reported(ErrorGuaranteed { .. }) | ErrorHandled::Linted => {\n-                err_inval!(ReferencedConstant)\n-            }\n-            ErrorHandled::TooGeneric => err_inval!(TooGeneric),\n-        }\n-        .into()\n-    }\n-}\n-\n impl From<ErrorGuaranteed> for InterpErrorInfo<'_> {\n     fn from(err: ErrorGuaranteed) -> Self {\n         InterpError::InvalidProgram(InvalidProgramInfo::AlreadyReported(err)).into()\n@@ -138,9 +124,6 @@ impl<'tcx> From<InterpError<'tcx>> for InterpErrorInfo<'tcx> {\n pub enum InvalidProgramInfo<'tcx> {\n     /// Resolution can fail if we are in a too generic context.\n     TooGeneric,\n-    /// Cannot compute this constant because it depends on another one\n-    /// which already produced an error.\n-    ReferencedConstant,\n     /// Abort in case errors are already reported.\n     AlreadyReported(ErrorGuaranteed),\n     /// An error occurred during layout computation.\n@@ -158,9 +141,11 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n         use InvalidProgramInfo::*;\n         match self {\n             TooGeneric => write!(f, \"encountered overly generic constant\"),\n-            ReferencedConstant => write!(f, \"referenced constant has errors\"),\n             AlreadyReported(ErrorGuaranteed { .. }) => {\n-                write!(f, \"encountered constants with type errors, stopping evaluation\")\n+                write!(\n+                    f,\n+                    \"an error has already been reported elsewhere (this sould not usually be printed)\"\n+                )\n             }\n             Layout(ref err) => write!(f, \"{err}\"),\n             FnAbiAdjustForForeignAbi(ref err) => write!(f, \"{err}\"),"}, {"sha": "b6c6e9d559c8cd6b5fd764ec8f259eb0e30b7be6", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -175,6 +175,8 @@ impl<'tcx> TyCtxt<'tcx> {\n \n impl<'tcx> TyCtxtAt<'tcx> {\n     /// Evaluate a static's initializer, returning the allocation of the initializer's memory.\n+    ///\n+    /// The span is entirely ignored here, but still helpful for better query cycle errors.\n     pub fn eval_static_initializer(\n         self,\n         def_id: DefId,\n@@ -187,6 +189,8 @@ impl<'tcx> TyCtxtAt<'tcx> {\n     }\n \n     /// Evaluate anything constant-like, returning the allocation of the final memory.\n+    ///\n+    /// The span is entirely ignored here, but still helpful for better query cycle errors.\n     fn eval_to_allocation(\n         self,\n         gid: GlobalId<'tcx>,"}, {"sha": "63f5678d3c813ea9838cad098af3ea9b387d42e7", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -2304,7 +2304,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 // FIXME: We might want to have a `try_eval`-like function on `Unevaluated`\n                 match tcx.const_eval_resolve(param_env, uneval, None) {\n                     Ok(val) => Self::Val(val, ty),\n-                    Err(ErrorHandled::TooGeneric | ErrorHandled::Linted) => self,\n+                    Err(ErrorHandled::TooGeneric) => self,\n                     Err(ErrorHandled::Reported(guar)) => {\n                         Self::Ty(tcx.const_error_with_guaranteed(ty, guar))\n                     }"}, {"sha": "137b59cf6c2e659f8342c9ed92ce31b1024234ef", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -463,9 +463,7 @@ impl<'tcx> AdtDef<'tcx> {\n             }\n             Err(err) => {\n                 let msg = match err {\n-                    ErrorHandled::Reported(_) | ErrorHandled::Linted => {\n-                        \"enum discriminant evaluation failed\"\n-                    }\n+                    ErrorHandled::Reported(_) => \"enum discriminant evaluation failed\",\n                     ErrorHandled::TooGeneric => \"enum discriminant depends on generics\",\n                 };\n                 tcx.sess.delay_span_bug(tcx.def_span(expr_did), msg);"}, {"sha": "321cba693d9ee2dc0e536ca1f585724042321122", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -226,7 +226,7 @@ impl<'tcx> ConstKind<'tcx> {\n                         // (which may be identity substs, see above),\n                         // can leak through `val` into the const we return.\n                         Ok(val) => Some(Ok(EvalResult::ValTree(val?))),\n-                        Err(ErrorHandled::TooGeneric | ErrorHandled::Linted) => None,\n+                        Err(ErrorHandled::TooGeneric) => None,\n                         Err(ErrorHandled::Reported(e)) => Some(Err(e)),\n                     }\n                 }\n@@ -237,7 +237,7 @@ impl<'tcx> ConstKind<'tcx> {\n                         // (which may be identity substs, see above),\n                         // can leak through `val` into the const we return.\n                         Ok(val) => Some(Ok(EvalResult::ConstVal(val))),\n-                        Err(ErrorHandled::TooGeneric | ErrorHandled::Linted) => None,\n+                        Err(ErrorHandled::TooGeneric) => None,\n                         Err(ErrorHandled::Reported(e)) => Some(Err(e)),\n                     }\n                 }"}, {"sha": "3f5890040c394112e9afab059c7d3db0990f4493", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -471,7 +471,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        self.ecx.const_to_op(&c.literal, None).ok()\n+        // No span, we don't want errors to be shown.\n+        self.ecx.eval_mir_constant(&c.literal, None, None).ok()\n     }\n \n     /// Returns the value, if any, of evaluating `place`."}, {"sha": "786063d538c0a7c923af72d273518b4af13eaffb", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -5,7 +5,6 @@ use crate::const_prop::CanConstProp;\n use crate::const_prop::ConstPropMachine;\n use crate::const_prop::ConstPropMode;\n use crate::MirLint;\n-use rustc_const_eval::const_eval::ConstEvalErr;\n use rustc_const_eval::interpret::Immediate;\n use rustc_const_eval::interpret::{\n     self, InterpCx, InterpResult, LocalState, LocalValue, MemoryKind, OpTy, Scalar, StackPopCleanup,\n@@ -286,25 +285,13 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     /// Returns the value, if any, of evaluating `c`.\n-    fn eval_constant(\n-        &mut self,\n-        c: &Constant<'tcx>,\n-        _source_info: SourceInfo,\n-    ) -> Option<OpTy<'tcx>> {\n+    fn eval_constant(&mut self, c: &Constant<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n         // FIXME we need to revisit this for #67176\n         if c.needs_subst() {\n             return None;\n         }\n \n-        match self.ecx.const_to_op(&c.literal, None) {\n-            Ok(op) => Some(op),\n-            Err(error) => {\n-                let tcx = self.ecx.tcx.at(c.span);\n-                let err = ConstEvalErr::new(&self.ecx, error, Some(c.span));\n-                err.report_as_error(tcx, \"erroneous constant used\");\n-                None\n-            }\n-        }\n+        self.use_ecx(source_info, |this| this.ecx.eval_mir_constant(&c.literal, Some(c.span), None))\n     }\n \n     /// Returns the value, if any, of evaluating `place`."}, {"sha": "cdf8011d4f5ab778dd9977c5cbba75ab95bb746c", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -773,7 +773,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     match self.tcx.const_eval_resolve(param_env, ct.expand(), None) {\n                         // The `monomorphize` call should have evaluated that constant already.\n                         Ok(val) => val,\n-                        Err(ErrorHandled::Reported(_) | ErrorHandled::Linted) => return,\n+                        Err(ErrorHandled::Reported(_)) => return,\n                         Err(ErrorHandled::TooGeneric) => span_bug!(\n                             self.body.source_info(location).span,\n                             \"collection encountered polymorphic constant: {:?}\",\n@@ -788,7 +788,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 match self.tcx.const_eval_resolve(param_env, uv, None) {\n                     // The `monomorphize` call should have evaluated that constant already.\n                     Ok(val) => val,\n-                    Err(ErrorHandled::Reported(_) | ErrorHandled::Linted) => return,\n+                    Err(ErrorHandled::Reported(_)) => return,\n                     Err(ErrorHandled::TooGeneric) => span_bug!(\n                         self.body.source_info(location).span,\n                         \"collection encountered polymorphic constant: {:?}\","}, {"sha": "db3ddc9208ae21b2c17e7659824226d3e4e0b04f", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -198,13 +198,6 @@ pub fn is_const_evaluatable<'tcx>(\n                     .sess\n                     .delay_span_bug(span, \"Missing value for constant, but no error reported?\"),\n             )),\n-            Err(ErrorHandled::Linted) => {\n-                let reported = infcx\n-                    .tcx\n-                    .sess\n-                    .delay_span_bug(span, \"constant in type had error reported as lint\");\n-                Err(NotConstEvaluatable::Error(reported))\n-            }\n             Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n             Ok(_) => Ok(()),\n         }\n@@ -254,11 +247,6 @@ pub fn is_const_evaluatable<'tcx>(\n \n                 Err(err)\n             },\n-            Err(ErrorHandled::Linted) => {\n-                let reported =\n-                    infcx.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n-                Err(NotConstEvaluatable::Error(reported))\n-            }\n             Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n             Ok(_) => Ok(()),\n         }"}, {"sha": "4905bb69cc5ca208382ede324ea98f7315d085cb", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -558,12 +558,6 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                                 NotConstEvaluatable::Error(reported),\n                             )),\n                         ),\n-                        (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => {\n-                            span_bug!(\n-                                obligation.cause.span(),\n-                                \"ConstEquate: const_eval_resolve returned an unexpected error\"\n-                            )\n-                        }\n                         (Err(ErrorHandled::TooGeneric), _) | (_, Err(ErrorHandled::TooGeneric)) => {\n                             if c1.has_non_region_infer() || c2.has_non_region_infer() {\n                                 ProcessResult::Unchanged"}, {"sha": "3a899c03b4c94c682b93a76ac8b0b8d7ad819a69", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -727,12 +727,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         }\n                         (Err(ErrorHandled::Reported(_)), _)\n                         | (_, Err(ErrorHandled::Reported(_))) => Ok(EvaluatedToErr),\n-                        (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => {\n-                            span_bug!(\n-                                obligation.cause.span(),\n-                                \"ConstEquate: const_eval_resolve returned an unexpected error\"\n-                            )\n-                        }\n                         (Err(ErrorHandled::TooGeneric), _) | (_, Err(ErrorHandled::TooGeneric)) => {\n                             if c1.has_non_region_infer() || c2.has_non_region_infer() {\n                                 Ok(EvaluatedToAmbig)"}, {"sha": "a1483911b297d97fe354f4d985b6be4db4f635ff", "filename": "src/test/ui/associated-consts/defaults-cyclic-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -1,14 +1,14 @@\n error[E0391]: cycle detected when const-evaluating + checking `Tr::A`\n-  --> $DIR/defaults-cyclic-fail.rs:5:5\n+  --> $DIR/defaults-cyclic-fail.rs:5:19\n    |\n LL |     const A: u8 = Self::B;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `Tr::B`...\n-  --> $DIR/defaults-cyclic-fail.rs:8:5\n+  --> $DIR/defaults-cyclic-fail.rs:8:19\n    |\n LL |     const B: u8 = Self::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^\n    = note: ...which again requires const-evaluating + checking `Tr::A`, completing the cycle\n note: cycle used when const-evaluating + checking `main::promoted[1]`\n   --> $DIR/defaults-cyclic-fail.rs:16:16"}, {"sha": "495dfb338ae31b5d737b45dce2b441114b3138f2", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -31,8 +31,7 @@ impl Tr for u32 {\n fn main() {\n     assert_eq!(<() as Tr>::A, 255);\n     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n-    //~^ ERROR evaluation of constant value failed\n-    //~| ERROR erroneous constant used\n+    //~^ constant\n \n     assert_eq!(<u8 as Tr>::A, 254);\n     assert_eq!(<u8 as Tr>::B, 255);"}, {"sha": "fb7159e40c996aae84f1a3de39250d936b9c9e70", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -4,20 +4,36 @@ error[E0080]: evaluation of `<() as Tr>::B` failed\n LL |     const B: u8 = Self::A + 1;\n    |                   ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/defaults-not-assumed-fail.rs:33:16\n    |\n LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n-   |                ^^^^^^^^^^^^^ referenced constant has errors\n+   |                ^^^^^^^^^^^^^\n \n-error[E0080]: erroneous constant used\n+note: erroneous constant used\n   --> $DIR/defaults-not-assumed-fail.rs:33:5\n    |\n LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this note originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 3 previous errors\n+note: erroneous constant used\n+  --> $DIR/defaults-not-assumed-fail.rs:33:5\n+   |\n+LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this note originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: erroneous constant used\n+  --> $DIR/defaults-not-assumed-fail.rs:33:5\n+   |\n+LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this note originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "be578176151769c1e1b1ff0d2cfc42006eecdd64", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -10,10 +10,10 @@ note: ...which requires const-evaluating + checking `IMPL_REF_BAR`...\n LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `IMPL_REF_BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n+  --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:27\n    |\n LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           ^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 11:19>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |"}, {"sha": "8347b260b5625200dc421612aeb272a669f845e7", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait-default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -10,10 +10,10 @@ note: ...which requires const-evaluating + checking `DEFAULT_REF_BAR`...\n LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `DEFAULT_REF_BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n+  --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:30\n    |\n LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `FooDefault::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |"}, {"sha": "3955a3120c47537f7da5ecb64d85ae37cdaecf47", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -10,10 +10,10 @@ note: ...which requires const-evaluating + checking `TRAIT_REF_BAR`...\n LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `TRAIT_REF_BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n+  --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:28\n    |\n LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                            ^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 11:28>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |"}, {"sha": "1f1af5c7e05029df285e81800b078e912741dc39", "filename": "src/test/ui/borrowck/issue-81899.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -2,13 +2,14 @@\n // The `panic!()` below is important to trigger the fixed ICE.\n \n const _CONST: &[u8] = &f(&[], |_| {});\n-//~^ ERROR constant\n+//~^ constant\n \n const fn f<F>(_: &[u8], _: F) -> &[u8]\n where\n     F: FnMut(&u8),\n {\n-    panic!() //~ ERROR: evaluation of constant value failed\n+    panic!() //~ ERROR evaluation of constant value failed\n+    //~^ panic\n }\n \n fn main() {}"}, {"sha": "a4d5f212188d6bb978734f4a8d5b3de0fa3771ec", "filename": "src/test/ui/borrowck/issue-81899.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -12,12 +12,12 @@ LL |     panic!()\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/issue-81899.rs:4:23\n    |\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   |                       ^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                       ^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "b75abcb731e23c9473b95f799acbdf1c6aa8865e", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -1,13 +1,14 @@\n // Regression test related to issue 88434\n \n const _CONST: &() = &f(&|_| {});\n-//~^ ERROR constant\n+//~^ constant\n \n const fn f<F>(_: &F)\n where\n     F: FnMut(&u8),\n {\n     panic!() //~ ERROR evaluation of constant value failed\n+    //~^ panic\n }\n \n fn main() { }"}, {"sha": "b95ddc49c9964da69cab2d90c0c83124a1fe5f14", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -12,12 +12,12 @@ LL |     panic!()\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/issue-88434-minimal-example.rs:3:21\n    |\n LL | const _CONST: &() = &f(&|_| {});\n-   |                     ^^^^^^^^^^^ referenced constant has errors\n+   |                     ^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "f9134e669dcabf209ab9f108fda7c4a2f5c4d48f", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -1,13 +1,14 @@\n // Regression test for issue 88434\n \n const _CONST: &[u8] = &f(&[], |_| {});\n-//~^ ERROR constant\n+//~^ constant\n \n const fn f<F>(_: &[u8], _: F) -> &[u8]\n where\n     F: FnMut(&u8),\n {\n     panic!() //~ ERROR evaluation of constant value failed\n+    //~^ panic\n }\n \n fn main() { }"}, {"sha": "604a6577639f458ff1db6ee86baf34b17e2a584e", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -12,12 +12,12 @@ LL |     panic!()\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/issue-88434-removal-index-should-be-less.rs:3:23\n    |\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   |                       ^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                       ^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "d2476e4934656f4fcf37bedd54b9174f9151a4c8", "filename": "src/test/ui/consts/const-err-late.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-err-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-err-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-late.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -16,7 +16,5 @@ impl<T> S<T> {\n }\n \n fn main() {\n-    black_box((S::<i32>::FOO, S::<u32>::FOO));\n-    //~^ ERROR erroneous constant\n-    //~| ERROR erroneous constant\n+    black_box((S::<i32>::FOO, S::<u32>::FOO)); //~ constant\n }"}, {"sha": "c5c668189b9521bf375ea5bf4101891fcd61bdbf", "filename": "src/test/ui/consts/const-err-late.stderr", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-err-late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-err-late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-late.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -4,24 +4,48 @@ error[E0080]: evaluation of `S::<i32>::FOO` failed\n LL |     const FOO: u8 = [5u8][1];\n    |                     ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n-error[E0080]: erroneous constant used\n+note: erroneous constant used\n   --> $DIR/const-err-late.rs:19:16\n    |\n LL |     black_box((S::<i32>::FOO, S::<u32>::FOO));\n-   |                ^^^^^^^^^^^^^ referenced constant has errors\n+   |                ^^^^^^^^^^^^^\n+\n+note: erroneous constant used\n+  --> $DIR/const-err-late.rs:19:16\n+   |\n+LL |     black_box((S::<i32>::FOO, S::<u32>::FOO));\n+   |                ^^^^^^^^^^^^^\n \n error[E0080]: evaluation of `S::<u32>::FOO` failed\n   --> $DIR/const-err-late.rs:13:21\n    |\n LL |     const FOO: u8 = [5u8][1];\n    |                     ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n-error[E0080]: erroneous constant used\n+note: erroneous constant used\n+  --> $DIR/const-err-late.rs:19:31\n+   |\n+LL |     black_box((S::<i32>::FOO, S::<u32>::FOO));\n+   |                               ^^^^^^^^^^^^^\n+\n+note: erroneous constant used\n+  --> $DIR/const-err-late.rs:19:31\n+   |\n+LL |     black_box((S::<i32>::FOO, S::<u32>::FOO));\n+   |                               ^^^^^^^^^^^^^\n+\n+note: erroneous constant used\n+  --> $DIR/const-err-late.rs:19:16\n+   |\n+LL |     black_box((S::<i32>::FOO, S::<u32>::FOO));\n+   |                ^^^^^^^^^^^^^\n+\n+note: erroneous constant used\n   --> $DIR/const-err-late.rs:19:31\n    |\n LL |     black_box((S::<i32>::FOO, S::<u32>::FOO));\n-   |                               ^^^^^^^^^^^^^ referenced constant has errors\n+   |                               ^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "b265bc4c4d84f4c99cf9cf6dedd62820c66026b8", "filename": "src/test/ui/consts/const-err-multi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -1,11 +1,11 @@\n pub const A: i8 = -i8::MIN;\n //~^ ERROR constant\n pub const B: i8 = A;\n-//~^ ERROR constant\n+//~^ constant\n pub const C: u8 = A as u8;\n-//~^ ERROR constant\n+//~^ constant\n pub const D: i8 = 50 - A;\n-//~^ ERROR constant\n+//~^ constant\n \n fn main() {\n     let _ = (A, B, C, D);"}, {"sha": "28af8e5eb0918d6b80b99511237bbd39b7de1d05", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -4,24 +4,24 @@ error[E0080]: evaluation of constant value failed\n LL | pub const A: i8 = -i8::MIN;\n    |                   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/const-err-multi.rs:3:19\n    |\n LL | pub const B: i8 = A;\n-   |                   ^ referenced constant has errors\n+   |                   ^\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/const-err-multi.rs:5:19\n    |\n LL | pub const C: u8 = A as u8;\n-   |                   ^ referenced constant has errors\n+   |                   ^\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/const-err-multi.rs:7:24\n    |\n LL | pub const D: i8 = 50 - A;\n-   |                        ^ referenced constant has errors\n+   |                        ^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "e0fd057a241a51efd95bf4b692749641406401eb", "filename": "src/test/ui/consts/const-eval/erroneous-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -10,7 +10,7 @@ const fn no_codegen<T>() {\n     if false {\n         // This bad constant is only used in dead code in a no-codegen function... and yet we still\n         // must make sure that the build fails.\n-        let _ = PrintName::<T>::VOID; //~ERROR could not evaluate static initializer\n+        let _ = PrintName::<T>::VOID; //~ constant\n     }\n }\n "}, {"sha": "03030392a5132d1f040ae1a9a76c6f98673ed51d", "filename": "src/test/ui/consts/const-eval/erroneous-const.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -4,18 +4,12 @@ error[E0080]: evaluation of `PrintName::<i32>::VOID` failed\n LL |     const VOID: () = [()][2];\n    |                      ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n \n-error[E0080]: could not evaluate static initializer\n+note: erroneous constant used\n   --> $DIR/erroneous-const.rs:13:17\n    |\n LL |         let _ = PrintName::<T>::VOID;\n    |                 ^^^^^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 referenced constant has errors\n-   |                 inside `no_codegen::<i32>` at $DIR/erroneous-const.rs:13:17\n-...\n-LL | pub static FOO: () = no_codegen::<i32>();\n-   |                      ------------------- inside `FOO` at $DIR/erroneous-const.rs:17:22\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "15c0f910728a971371e2307549bfbed05011bec7", "filename": "src/test/ui/consts/const-eval/erroneous-const2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -10,7 +10,7 @@ pub static FOO: () = {\n     if false {\n         // This bad constant is only used in dead code in a static initializer... and yet we still\n         // must make sure that the build fails.\n-        let _ = PrintName::<i32>::VOID; //~ERROR could not evaluate static initializer\n+        let _ = PrintName::<i32>::VOID; //~ constant\n     }\n };\n "}, {"sha": "8626f4d78339727299126a1f61f7f638eab0648b", "filename": "src/test/ui/consts/const-eval/erroneous-const2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -4,12 +4,12 @@ error[E0080]: evaluation of `PrintName::<i32>::VOID` failed\n LL |     const VOID: () = [()][2];\n    |                      ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n \n-error[E0080]: could not evaluate static initializer\n+note: erroneous constant used\n   --> $DIR/erroneous-const2.rs:13:17\n    |\n LL |         let _ = PrintName::<i32>::VOID;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "0d8b7c12d8abb798e2771f110146a36894f7532e", "filename": "src/test/ui/consts/const-eval/format.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -1,17 +1,13 @@\n const fn failure() {\n     panic!(\"{:?}\", 0);\n     //~^ ERROR cannot call non-const formatting macro in constant functions\n-    //~| ERROR erroneous constant used\n-    //~| ERROR erroneous constant used\n }\n \n const fn print() {\n     println!(\"{:?}\", 0);\n     //~^ ERROR cannot call non-const formatting macro in constant functions\n     //~| ERROR `Arguments::<'a>::new_v1` is not yet stable as a const fn\n     //~| ERROR cannot call non-const fn `_print` in constant functions\n-    //~| ERROR erroneous constant used\n-    //~| ERROR erroneous constant used\n }\n \n fn main() {}"}, {"sha": "4bf39db58746c7ea82c7aef4b2009954162056ff", "filename": "src/test/ui/consts/const-eval/format.stderr", "status": "modified", "additions": 45, "deletions": 18, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -8,7 +8,7 @@ LL |     panic!(\"{:?}\", 0);\n    = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: cannot call non-const formatting macro in constant functions\n-  --> $DIR/format.rs:9:22\n+  --> $DIR/format.rs:7:22\n    |\n LL |     println!(\"{:?}\", 0);\n    |                      ^\n@@ -17,7 +17,7 @@ LL |     println!(\"{:?}\", 0);\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `Arguments::<'a>::new_v1` is not yet stable as a const fn\n-  --> $DIR/format.rs:9:5\n+  --> $DIR/format.rs:7:5\n    |\n LL |     println!(\"{:?}\", 0);\n    |     ^^^^^^^^^^^^^^^^^^^\n@@ -26,43 +26,70 @@ LL |     println!(\"{:?}\", 0);\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: cannot call non-const fn `_print` in constant functions\n-  --> $DIR/format.rs:9:5\n+  --> $DIR/format.rs:7:5\n    |\n LL |     println!(\"{:?}\", 0);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n    = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: erroneous constant used\n+note: erroneous constant used\n   --> $DIR/format.rs:2:12\n    |\n LL |     panic!(\"{:?}\", 0);\n-   |            ^^^^^^ referenced constant has errors\n+   |            ^^^^^^\n \n-error[E0080]: erroneous constant used\n+note: erroneous constant used\n+  --> $DIR/format.rs:2:12\n+   |\n+LL |     panic!(\"{:?}\", 0);\n+   |            ^^^^^^\n+\n+note: erroneous constant used\n   --> $DIR/format.rs:2:20\n    |\n LL |     panic!(\"{:?}\", 0);\n-   |                    ^ referenced constant has errors\n+   |                    ^\n    |\n-   = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this note originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: erroneous constant used\n+  --> $DIR/format.rs:2:20\n+   |\n+LL |     panic!(\"{:?}\", 0);\n+   |                    ^\n+   |\n+   = note: this note originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: erroneous constant used\n-  --> $DIR/format.rs:9:14\n+note: erroneous constant used\n+  --> $DIR/format.rs:7:14\n    |\n LL |     println!(\"{:?}\", 0);\n-   |              ^^^^^^ referenced constant has errors\n+   |              ^^^^^^\n \n-error[E0080]: erroneous constant used\n-  --> $DIR/format.rs:9:22\n+note: erroneous constant used\n+  --> $DIR/format.rs:7:14\n    |\n LL |     println!(\"{:?}\", 0);\n-   |                      ^ referenced constant has errors\n+   |              ^^^^^^\n+\n+note: erroneous constant used\n+  --> $DIR/format.rs:7:22\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+LL |     println!(\"{:?}\", 0);\n+   |                      ^\n+   |\n+   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: erroneous constant used\n+  --> $DIR/format.rs:7:22\n+   |\n+LL |     println!(\"{:?}\", 0);\n+   |                      ^\n+   |\n+   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0015, E0080.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "e4dcc62302caa9a3cc2e5ef457ad0b3d078c0643", "filename": "src/test/ui/consts/const-eval/issue-44578.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -23,6 +23,5 @@ impl Foo for u16 {\n \n fn main() {\n     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-    //~^ ERROR evaluation of constant value failed\n-    //~| ERROR erroneous constant used\n+    //~^ constant\n }"}, {"sha": "0cbf5448000aebadbcec6b6283085a99cc455361", "filename": "src/test/ui/consts/const-eval/issue-44578.stderr", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -4,20 +4,36 @@ error[E0080]: evaluation of `<Bar<u16, u8> as Foo>::AMT` failed\n LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/issue-44578.rs:25:20\n    |\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0080]: erroneous constant used\n+note: erroneous constant used\n   --> $DIR/issue-44578.rs:25:20\n    |\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 3 previous errors\n+note: erroneous constant used\n+  --> $DIR/issue-44578.rs:25:20\n+   |\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: erroneous constant used\n+  --> $DIR/issue-44578.rs:25:20\n+   |\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "53eb7b149f931a4b93d44509186631fb4c79b355", "filename": "src/test/ui/consts/const-eval/issue-50814-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -15,7 +15,7 @@ impl<T: C> Foo<T> for A<T> {\n }\n \n fn foo<T: C>() -> &'static usize {\n-    &<A<T> as Foo<T>>::BAR //~ ERROR E0080\n+    &<A<T> as Foo<T>>::BAR //~ constant\n }\n \n impl C for () {"}, {"sha": "956f7aec9da8f0684de8da4203efa13728a469c3", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -4,18 +4,18 @@ error[E0080]: evaluation of `<A<()> as Foo<()>>::BAR` failed\n LL |     const BAR: usize = [5, 6, 7][T::BOO];\n    |                        ^^^^^^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 42\n \n-error[E0080]: evaluation of `foo::<()>` failed\n+note: erroneous constant used\n   --> $DIR/issue-50814-2.rs:18:6\n    |\n LL |     &<A<T> as Foo<T>>::BAR\n-   |      ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |      ^^^^^^^^^^^^^^^^^^^^^\n \n note: the above error was encountered while instantiating `fn foo::<()>`\n   --> $DIR/issue-50814-2.rs:30:22\n    |\n LL |     println!(\"{:x}\", foo::<()>() as *const usize as usize);\n    |                      ^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "374ed1d93df94a99abfce4b12f7a4d7a7273419f", "filename": "src/test/ui/consts/const-eval/issue-50814.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -18,7 +18,7 @@ impl<A: Unsigned, B: Unsigned> Unsigned for Sum<A, B> {\n \n fn foo<T>(_: T) -> &'static u8 {\n     &Sum::<U8, U8>::MAX\n-    //~^ ERROR evaluation of `foo::<i32>` failed [E0080]\n+    //~^ constant\n }\n \n fn main() {"}, {"sha": "05b6271f4e4d5a61a250eb657e68a2eb7f309de6", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -4,18 +4,18 @@ error[E0080]: evaluation of `<Sum<U8, U8> as Unsigned>::MAX` failed\n LL |     const MAX: u8 = A::MAX + B::MAX;\n    |                     ^^^^^^^^^^^^^^^ attempt to compute `u8::MAX + u8::MAX`, which would overflow\n \n-error[E0080]: evaluation of `foo::<i32>` failed\n+note: erroneous constant used\n   --> $DIR/issue-50814.rs:20:6\n    |\n LL |     &Sum::<U8, U8>::MAX\n-   |      ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |      ^^^^^^^^^^^^^^^^^^\n \n note: the above error was encountered while instantiating `fn foo::<i32>`\n   --> $DIR/issue-50814.rs:25:5\n    |\n LL |     foo(0);\n    |     ^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "28edf51440233a6f5779212745c395a3292a6bdf", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -11,6 +11,5 @@ impl PrintName {\n }\n \n fn main() {\n-    let _ = PrintName::VOID;\n-    //~^ ERROR erroneous constant used [E0080]\n+    let _ = PrintName::VOID; //~ constant\n }"}, {"sha": "7c36a3a426e9e2ae198563e894aaab9f871b7f12", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -6,12 +6,18 @@ LL |     const VOID: ! = panic!();\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: erroneous constant used\n+note: erroneous constant used\n   --> $DIR/panic-assoc-never-type.rs:14:13\n    |\n LL |     let _ = PrintName::VOID;\n-   |             ^^^^^^^^^^^^^^^ referenced constant has errors\n+   |             ^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+note: erroneous constant used\n+  --> $DIR/panic-assoc-never-type.rs:14:13\n+   |\n+LL |     let _ = PrintName::VOID;\n+   |             ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "e5b5c7a846c116f0cd6092036eed1473f323254c", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.32bit.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -60,29 +60,29 @@ LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/ub-ref-ptr.rs:34:38\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:38:86\n+  --> $DIR/ub-ref-ptr.rs:37:86\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    |                                                                                      ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:38:85\n+note: erroneous constant used\n+  --> $DIR/ub-ref-ptr.rs:37:85\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   |                                                                                     ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                                                                                     ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:42:1\n+  --> $DIR/ub-ref-ptr.rs:40:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (address 0x539 is unallocated)\n@@ -93,7 +93,7 @@ LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:45:1\n+  --> $DIR/ub-ref-ptr.rs:43:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (address 0x539 is unallocated)\n@@ -104,13 +104,13 @@ LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:48:41\n+  --> $DIR/ub-ref-ptr.rs:46:41\n    |\n LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:52:1\n+  --> $DIR/ub-ref-ptr.rs:50:1\n    |\n LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered null pointer, but expected a function pointer\n@@ -121,13 +121,13 @@ LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:54:38\n+  --> $DIR/ub-ref-ptr.rs:52:38\n    |\n LL | const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:57:1\n+  --> $DIR/ub-ref-ptr.rs:55:1\n    |\n LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0xd[noalloc], but expected a function pointer\n@@ -138,7 +138,7 @@ LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:59:1\n+  --> $DIR/ub-ref-ptr.rs:57:1\n    |\n LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered alloc41, but expected a function pointer\n@@ -148,6 +148,6 @@ LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n                \u257e\u2500alloc41\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n            }\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "607366cabc4e9d30c5a2ba70964fe4eb69854d61", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.64bit.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -60,29 +60,29 @@ LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/ub-ref-ptr.rs:34:38\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:38:86\n+  --> $DIR/ub-ref-ptr.rs:37:86\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    |                                                                                      ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:38:85\n+note: erroneous constant used\n+  --> $DIR/ub-ref-ptr.rs:37:85\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n-   |                                                                                     ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                                                                                     ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:42:1\n+  --> $DIR/ub-ref-ptr.rs:40:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (address 0x539 is unallocated)\n@@ -93,7 +93,7 @@ LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:45:1\n+  --> $DIR/ub-ref-ptr.rs:43:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (address 0x539 is unallocated)\n@@ -104,13 +104,13 @@ LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:48:41\n+  --> $DIR/ub-ref-ptr.rs:46:41\n    |\n LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:52:1\n+  --> $DIR/ub-ref-ptr.rs:50:1\n    |\n LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered null pointer, but expected a function pointer\n@@ -121,13 +121,13 @@ LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:54:38\n+  --> $DIR/ub-ref-ptr.rs:52:38\n    |\n LL | const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:57:1\n+  --> $DIR/ub-ref-ptr.rs:55:1\n    |\n LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0xd[noalloc], but expected a function pointer\n@@ -138,7 +138,7 @@ LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:59:1\n+  --> $DIR/ub-ref-ptr.rs:57:1\n    |\n LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered alloc41, but expected a function pointer\n@@ -148,6 +148,6 @@ LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc41\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "a1c81239009ac0569e45d8217764ccf07ad9c81a", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -33,11 +33,9 @@ const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n \n const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n //~^ ERROR evaluation of constant value failed\n-//~| ERROR evaluation of constant value failed\n \n const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n //~^ ERROR evaluation of constant value failed\n-//~| ERROR evaluation of constant value failed\n \n const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n //~^ ERROR it is undefined behavior to use this value"}, {"sha": "9994c2e5a83458c27cb6e3ad8ee66071eeabad14", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.32bit.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -139,11 +139,11 @@ LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n                \u257e\u2500allocN\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n            }\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/ub-wide-ptr.rs:83:40\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:90:1\n@@ -156,11 +156,11 @@ LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3\n                \u257eallocN\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n            }\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/ub-wide-ptr.rs:90:42\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:94:1\n@@ -173,11 +173,11 @@ LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::tran\n                \u257eallocN\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n            }\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/ub-wide-ptr.rs:94:42\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-wide-ptr.rs:102:1\n@@ -292,6 +292,6 @@ error[E0080]: could not evaluate static initializer\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable\n \n-error: aborting due to 32 previous errors\n+error: aborting due to 29 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "06a377d9f7c97982b8d7c29cac7a628b6eee2832", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -139,11 +139,11 @@ LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/ub-wide-ptr.rs:83:40\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:90:1\n@@ -156,11 +156,11 @@ LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/ub-wide-ptr.rs:90:42\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:94:1\n@@ -173,11 +173,11 @@ LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::tran\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/ub-wide-ptr.rs:94:42\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-wide-ptr.rs:102:1\n@@ -292,6 +292,6 @@ error[E0080]: could not evaluate static initializer\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable\n \n-error: aborting due to 32 previous errors\n+error: aborting due to 29 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "2894ef831884cda462a4acbf9bbd9d643bd9fb6d", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -82,18 +82,18 @@ const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n // bad data *inside* the slice\n const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n //~^ ERROR it is undefined behavior to use this value\n-//~| ERROR evaluation of constant value failed\n+//~| constant\n \n // good MySliceBool\n const MYSLICE_GOOD: &MySliceBool = &MySlice(true, [false]);\n // bad: sized field is not okay\n const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n //~^ ERROR it is undefined behavior to use this value\n-//~| ERROR evaluation of constant value failed\n+//~| constant\n // bad: unsized part is not okay\n const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n //~^ ERROR it is undefined behavior to use this value\n-//~| ERROR evaluation of constant value failed\n+//~| constant\n \n // # raw slice\n const RAW_SLICE_VALID: *const [u8] = unsafe { mem::transmute((&42u8, 1usize)) }; // ok"}, {"sha": "a94fcbbfa56342919cfe0c10250c3fa862ad5e17", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -29,7 +29,6 @@ const fn read_field3() -> Field3 {\n     //~^ ERROR evaluation of constant value failed\n     //~| uninitialized\n     FIELD3\n-    //~^ ERROR erroneous constant used [E0080]\n }\n \n fn main() {"}, {"sha": "9899c56c0ec3fe51470fd6063814524f0cda6348", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -4,12 +4,18 @@ error[E0080]: evaluation of constant value failed\n LL |     const FIELD3: Field3 = unsafe { UNION.field3 };\n    |                                     ^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n-error[E0080]: erroneous constant used\n+note: erroneous constant used\n   --> $DIR/union-const-eval-field.rs:31:5\n    |\n LL |     FIELD3\n-   |     ^^^^^^ referenced constant has errors\n+   |     ^^^^^^\n \n-error: aborting due to 2 previous errors\n+note: erroneous constant used\n+  --> $DIR/union-const-eval-field.rs:31:5\n+   |\n+LL |     FIELD3\n+   |     ^^^^^^\n+\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "c77e99abbf6d35dfa2a1c34ca59e250692fe6f3a", "filename": "src/test/ui/consts/const-float-bits-reject-conv.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -Zmir-opt-level=0\n+// error-pattern: cannot use f32::to_bits on a NaN\n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]\n \n@@ -25,43 +26,40 @@ fn f32() {\n     // 0xA is 0b1010; 0x5 is 0b0101 -- so these two together clobbers all the mantissa bits\n     // ...actually, let's just check that these break. :D\n     const MASKED_NAN1: u32 = f32::NAN.to_bits() ^ 0x002A_AAAA;\n+    //~^ inside\n     const MASKED_NAN2: u32 = f32::NAN.to_bits() ^ 0x0055_5555;\n+    //~^ inside\n+\n+    // The rest of the code is dead because the constants already fail to evaluate.\n \n     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n-    //~^ ERROR evaluation of constant value failed\n     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n-    //~^ ERROR evaluation of constant value failed\n \n     // LLVM does not guarantee that loads and stores of NaNs preserve their exact bit pattern.\n     // In practice, this seems to only cause a problem on x86, since the most widely used calling\n     // convention mandates that floating point values are returned on the x87 FPU stack. See #73328.\n-    if !cfg!(target_arch = \"x86\") {\n-        const_assert!(f32::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n-        //~^ ERROR evaluation of constant value failed\n-        const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n-        //~^ ERROR evaluation of constant value failed\n-    }\n+    // However, during CTFE we still preserve bit patterns (though that is not a guarantee).\n+    const_assert!(f32::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n+    const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n }\n \n fn f64() {\n     // Check that NaNs roundtrip their bits regardless of signalingness\n     // 0xA is 0b1010; 0x5 is 0b0101 -- so these two together clobbers all the mantissa bits\n     // ...actually, let's just check that these break. :D\n     const MASKED_NAN1: u64 = f64::NAN.to_bits() ^ 0x000A_AAAA_AAAA_AAAA;\n+    //~^ inside\n     const MASKED_NAN2: u64 = f64::NAN.to_bits() ^ 0x0005_5555_5555_5555;\n+    //~^ inside\n+\n+    // The rest of the code is dead because the constants already fail to evaluate.\n \n     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n-    //~^ ERROR evaluation of constant value failed\n     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n-    //~^ ERROR evaluation of constant value failed\n \n     // See comment above.\n-    if !cfg!(target_arch = \"x86\") {\n-        const_assert!(f64::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n-        //~^ ERROR evaluation of constant value failed\n-        const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n-        //~^ ERROR evaluation of constant value failed\n-    }\n+    const_assert!(f64::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n+    const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n }\n \n fn main() {"}, {"sha": "e1ad72416f264f02496400b43fa1caf19ad6be50", "filename": "src/test/ui/consts/const-float-bits-reject-conv.stderr", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -10,10 +10,10 @@ LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a\n LL |         unsafe { intrinsics::const_eval_select((self,), ct_f32_to_u32, rt_f32_to_u32) }\n    |                  -------------------------------------------------------------------- inside `core::f32::<impl f32>::to_bits` at $SRC_DIR/core/src/num/f32.rs:LL:COL\n    |\n-  ::: $DIR/const-float-bits-reject-conv.rs:27:30\n+  ::: $DIR/const-float-bits-reject-conv.rs:28:30\n    |\n LL |     const MASKED_NAN1: u32 = f32::NAN.to_bits() ^ 0x002A_AAAA;\n-   |                              ------------------ inside `f32::MASKED_NAN1` at $DIR/const-float-bits-reject-conv.rs:27:30\n+   |                              ------------------ inside `f32::MASKED_NAN1` at $DIR/const-float-bits-reject-conv.rs:28:30\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -29,36 +29,36 @@ LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a\n LL |         unsafe { intrinsics::const_eval_select((self,), ct_f32_to_u32, rt_f32_to_u32) }\n    |                  -------------------------------------------------------------------- inside `core::f32::<impl f32>::to_bits` at $SRC_DIR/core/src/num/f32.rs:LL:COL\n    |\n-  ::: $DIR/const-float-bits-reject-conv.rs:28:30\n+  ::: $DIR/const-float-bits-reject-conv.rs:30:30\n    |\n LL |     const MASKED_NAN2: u32 = f32::NAN.to_bits() ^ 0x0055_5555;\n-   |                              ------------------ inside `f32::MASKED_NAN2` at $DIR/const-float-bits-reject-conv.rs:28:30\n+   |                              ------------------ inside `f32::MASKED_NAN2` at $DIR/const-float-bits-reject-conv.rs:30:30\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-float-bits-reject-conv.rs:30:34\n+note: erroneous constant used\n+  --> $DIR/const-float-bits-reject-conv.rs:35:34\n    |\n LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n-   |                                  ^^^^^^^^^^^ referenced constant has errors\n+   |                                  ^^^^^^^^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-float-bits-reject-conv.rs:32:34\n+note: erroneous constant used\n+  --> $DIR/const-float-bits-reject-conv.rs:36:34\n    |\n LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n-   |                                  ^^^^^^^^^^^ referenced constant has errors\n+   |                                  ^^^^^^^^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-float-bits-reject-conv.rs:39:38\n+note: erroneous constant used\n+  --> $DIR/const-float-bits-reject-conv.rs:42:34\n    |\n-LL |         const_assert!(f32::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n-   |                                      ^^^^^^^^^^^ referenced constant has errors\n+LL |     const_assert!(f32::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n+   |                                  ^^^^^^^^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-float-bits-reject-conv.rs:41:38\n+note: erroneous constant used\n+  --> $DIR/const-float-bits-reject-conv.rs:43:34\n    |\n-LL |         const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n-   |                                      ^^^^^^^^^^^ referenced constant has errors\n+LL |     const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n+   |                                  ^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n@@ -91,37 +91,37 @@ LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a\n LL |         unsafe { intrinsics::const_eval_select((self,), ct_f64_to_u64, rt_f64_to_u64) }\n    |                  -------------------------------------------------------------------- inside `core::f64::<impl f64>::to_bits` at $SRC_DIR/core/src/num/f64.rs:LL:COL\n    |\n-  ::: $DIR/const-float-bits-reject-conv.rs:51:30\n+  ::: $DIR/const-float-bits-reject-conv.rs:52:30\n    |\n LL |     const MASKED_NAN2: u64 = f64::NAN.to_bits() ^ 0x0005_5555_5555_5555;\n-   |                              ------------------ inside `f64::MASKED_NAN2` at $DIR/const-float-bits-reject-conv.rs:51:30\n+   |                              ------------------ inside `f64::MASKED_NAN2` at $DIR/const-float-bits-reject-conv.rs:52:30\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-float-bits-reject-conv.rs:53:34\n+note: erroneous constant used\n+  --> $DIR/const-float-bits-reject-conv.rs:57:34\n    |\n LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n-   |                                  ^^^^^^^^^^^ referenced constant has errors\n+   |                                  ^^^^^^^^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-float-bits-reject-conv.rs:55:34\n+note: erroneous constant used\n+  --> $DIR/const-float-bits-reject-conv.rs:58:34\n    |\n LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n-   |                                  ^^^^^^^^^^^ referenced constant has errors\n+   |                                  ^^^^^^^^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-float-bits-reject-conv.rs:60:38\n+note: erroneous constant used\n+  --> $DIR/const-float-bits-reject-conv.rs:61:34\n    |\n-LL |         const_assert!(f64::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n-   |                                      ^^^^^^^^^^^ referenced constant has errors\n+LL |     const_assert!(f64::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n+   |                                  ^^^^^^^^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-float-bits-reject-conv.rs:62:38\n+note: erroneous constant used\n+  --> $DIR/const-float-bits-reject-conv.rs:62:34\n    |\n-LL |         const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n-   |                                      ^^^^^^^^^^^ referenced constant has errors\n+LL |     const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n+   |                                  ^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "4110ae3e45692942b7483952675715a737a73f16", "filename": "src/test/ui/consts/const-integer-bool-ops.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -6,7 +6,7 @@ const X: usize = 42 && 39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR: [i32; X] = [99; 34];\n-//~^ ERROR evaluation of constant value failed\n+//~^ constant\n \n const X1: usize = 42 || 39;\n //~^ ERROR mismatched types\n@@ -16,7 +16,7 @@ const X1: usize = 42 || 39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR1: [i32; X1] = [99; 47];\n-//~^ ERROR evaluation of constant value failed\n+//~^ constant\n \n const X2: usize = -42 || -39;\n //~^ ERROR mismatched types\n@@ -26,7 +26,7 @@ const X2: usize = -42 || -39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR2: [i32; X2] = [99; 18446744073709551607];\n-//~^ ERROR evaluation of constant value failed\n+//~^ constant\n \n const X3: usize = -42 && -39;\n //~^ ERROR mismatched types\n@@ -36,43 +36,43 @@ const X3: usize = -42 && -39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR3: [i32; X3] = [99; 6];\n-//~^ ERROR evaluation of constant value failed\n+//~^ constant\n \n const Y: usize = 42.0 == 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR: [i32; Y] = [99; 1];\n-//~^ ERROR evaluation of constant value failed\n+//~^ constant\n \n const Y1: usize = 42.0 >= 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR1: [i32; Y1] = [99; 1];\n-//~^ ERROR evaluation of constant value failed\n+//~^ constant\n \n const Y2: usize = 42.0 <= 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR2: [i32; Y2] = [99; 1];\n-//~^ ERROR evaluation of constant value failed\n+//~^ constant\n \n const Y3: usize = 42.0 > 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR3: [i32; Y3] = [99; 0];\n-//~^ ERROR evaluation of constant value failed\n+//~^ constant\n \n const Y4: usize = 42.0 < 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR4: [i32; Y4] = [99; 0];\n-//~^ ERROR evaluation of constant value failed\n+//~^ constant\n \n const Y5: usize = 42.0 != 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR5: [i32; Y5] = [99; 0];\n-//~^ ERROR evaluation of constant value failed\n+//~^ constant\n \n fn main() {\n     let _ = ARR;"}, {"sha": "b5c3b22fdbe3690af1f8605905d8a312059afd92", "filename": "src/test/ui/consts/const-integer-bool-ops.stderr", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -16,11 +16,11 @@ error[E0308]: mismatched types\n LL | const X: usize = 42 && 39;\n    |                  ^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/const-integer-bool-ops.rs:8:18\n    |\n LL | const ARR: [i32; X] = [99; 34];\n-   |                  ^ referenced constant has errors\n+   |                  ^\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:11:19\n@@ -40,11 +40,11 @@ error[E0308]: mismatched types\n LL | const X1: usize = 42 || 39;\n    |                   ^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/const-integer-bool-ops.rs:18:19\n    |\n LL | const ARR1: [i32; X1] = [99; 47];\n-   |                   ^^ referenced constant has errors\n+   |                   ^^\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:21:19\n@@ -64,11 +64,11 @@ error[E0308]: mismatched types\n LL | const X2: usize = -42 || -39;\n    |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/const-integer-bool-ops.rs:28:19\n    |\n LL | const ARR2: [i32; X2] = [99; 18446744073709551607];\n-   |                   ^^ referenced constant has errors\n+   |                   ^^\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:31:19\n@@ -88,85 +88,84 @@ error[E0308]: mismatched types\n LL | const X3: usize = -42 && -39;\n    |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/const-integer-bool-ops.rs:38:19\n    |\n LL | const ARR3: [i32; X3] = [99; 6];\n-   |                   ^^ referenced constant has errors\n+   |                   ^^\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:41:18\n    |\n LL | const Y: usize = 42.0 == 42.0;\n    |                  ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/const-integer-bool-ops.rs:44:19\n    |\n LL | const ARRR: [i32; Y] = [99; 1];\n-   |                   ^ referenced constant has errors\n+   |                   ^\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:47:19\n    |\n LL | const Y1: usize = 42.0 >= 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/const-integer-bool-ops.rs:50:20\n    |\n LL | const ARRR1: [i32; Y1] = [99; 1];\n-   |                    ^^ referenced constant has errors\n+   |                    ^^\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:53:19\n    |\n LL | const Y2: usize = 42.0 <= 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/const-integer-bool-ops.rs:56:20\n    |\n LL | const ARRR2: [i32; Y2] = [99; 1];\n-   |                    ^^ referenced constant has errors\n+   |                    ^^\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:59:19\n    |\n LL | const Y3: usize = 42.0 > 42.0;\n    |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/const-integer-bool-ops.rs:62:20\n    |\n LL | const ARRR3: [i32; Y3] = [99; 0];\n-   |                    ^^ referenced constant has errors\n+   |                    ^^\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:65:19\n    |\n LL | const Y4: usize = 42.0 < 42.0;\n    |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/const-integer-bool-ops.rs:68:20\n    |\n LL | const ARRR4: [i32; Y4] = [99; 0];\n-   |                    ^^ referenced constant has errors\n+   |                    ^^\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:71:19\n    |\n LL | const Y5: usize = 42.0 != 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/const-integer-bool-ops.rs:74:20\n    |\n LL | const ARRR5: [i32; Y5] = [99; 0];\n-   |                    ^^ referenced constant has errors\n+   |                    ^^\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 18 previous errors\n \n-Some errors have detailed explanations: E0080, E0308.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4544c8876ae09dd0caff8fb1b78cc61b91c8e616", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -9,5 +9,5 @@ const LEN: usize = ONE - TWO;\n \n fn main() {\n     let a: [i8; LEN] = unimplemented!();\n-//~^ ERROR E0080\n+//~^ constant\n }"}, {"sha": "269553631cc670df46a6c262316ee754d3dddc19", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -4,12 +4,12 @@ error[E0080]: evaluation of constant value failed\n LL | const LEN: usize = ONE - TWO;\n    |                    ^^^^^^^^^ attempt to compute `1_usize - 2_usize`, which would overflow\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/const-len-underflow-separate-spans.rs:11:17\n    |\n LL |     let a: [i8; LEN] = unimplemented!();\n-   |                 ^^^ referenced constant has errors\n+   |                 ^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "109d15a8e4d856a33e9aaee268990f87e1d34ade", "filename": "src/test/ui/consts/const-mut-refs/issue-76510.32bit.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -19,13 +19,13 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n LL | const S: &'static mut str = &mut \" hello \";\n    |                             ^^^^^^^^^^^^^^ cannot borrow as mutable\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/issue-76510.rs:11:70\n    |\n LL |         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n-   |                                                                      ^ referenced constant has errors\n+   |                                                                      ^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0080, E0596, E0658, E0764.\n-For more information about an error, try `rustc --explain E0080`.\n+Some errors have detailed explanations: E0596, E0658, E0764.\n+For more information about an error, try `rustc --explain E0596`."}, {"sha": "109d15a8e4d856a33e9aaee268990f87e1d34ade", "filename": "src/test/ui/consts/const-mut-refs/issue-76510.64bit.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -19,13 +19,13 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n LL | const S: &'static mut str = &mut \" hello \";\n    |                             ^^^^^^^^^^^^^^ cannot borrow as mutable\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/issue-76510.rs:11:70\n    |\n LL |         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n-   |                                                                      ^ referenced constant has errors\n+   |                                                                      ^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0080, E0596, E0658, E0764.\n-For more information about an error, try `rustc --explain E0080`.\n+Some errors have detailed explanations: E0596, E0658, E0764.\n+For more information about an error, try `rustc --explain E0596`."}, {"sha": "b853e2737f12608910e41da0473be25bb04018f1", "filename": "src/test/ui/consts/const-mut-refs/issue-76510.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -9,7 +9,7 @@ const S: &'static mut str = &mut \" hello \";\n \n const fn trigger() -> [(); unsafe {\n         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n-        //~^ ERROR evaluation of constant value failed\n+        //~^ constant\n         0\n     }] {\n     [(); 0]"}, {"sha": "778a212249c19d68aa0b944ac89ca36d78f250ba", "filename": "src/test/ui/consts/const-tup-index-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -4,7 +4,7 @@ const TUP: (usize,) = 5usize << 64;\n //~^ ERROR mismatched types\n //~| expected tuple, found `usize`\n const ARR: [i32; TUP.0] = [];\n-//~^ ERROR evaluation of constant value failed\n+//~^ constant\n \n fn main() {\n }"}, {"sha": "ad8468056172633d04debcdd183dfdca27121ebc", "filename": "src/test/ui/consts/const-tup-index-span.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -11,13 +11,12 @@ help: use a trailing comma to create a tuple with one element\n LL | const TUP: (usize,) = (5usize << 64,);\n    |                       +            ++\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/const-tup-index-span.rs:6:18\n    |\n LL | const ARR: [i32; TUP.0] = [];\n-   |                  ^^^ referenced constant has errors\n+   |                  ^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0308.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "9c239c8a100f991e60176a3364a15478940bf252", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -29,7 +29,7 @@ const UNALIGNED_PTR: () = unsafe {\n };\n \n const UNALIGNED_READ: () = {\n-    INNER; //[with_flag]~ERROR evaluation of constant value failed\n+    INNER; //[with_flag]~ constant\n     // There is an error here but its span is in the standard library so we cannot match it...\n     // so we have this in a *nested* const, such that the *outer* const fails to use it.\n     const INNER: () = unsafe {"}, {"sha": "4726905ade341e5d42d5daac35cbbda59ca49fef", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.with_flag.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -47,12 +47,12 @@ LL |         unsafe { read(self) }\n LL |         ptr.read();\n    |         ---------- inside `INNER` at $DIR/detect-extra-ub.rs:38:9\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/detect-extra-ub.rs:32:5\n    |\n LL |     INNER;\n-   |     ^^^^^ referenced constant has errors\n+   |     ^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "4758ea4ae881815c63f125e76a489cd37eedbe8a", "filename": "src/test/ui/consts/invalid-union.32bit.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -9,12 +9,24 @@ LL | fn main() {\n                \u257e\u2500alloc7\u2500\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n            }\n \n-error[E0080]: erroneous constant used\n-  --> $DIR/invalid-union.rs:42:25\n+note: erroneous constant used\n+  --> $DIR/invalid-union.rs:43:25\n    |\n LL |     let _: &'static _ = &C;\n-   |                         ^^ referenced constant has errors\n+   |                         ^^\n \n-error: aborting due to 2 previous errors\n+note: erroneous constant used\n+  --> $DIR/invalid-union.rs:43:25\n+   |\n+LL |     let _: &'static _ = &C;\n+   |                         ^^\n+\n+note: erroneous constant used\n+  --> $DIR/invalid-union.rs:43:25\n+   |\n+LL |     let _: &'static _ = &C;\n+   |                         ^^\n+\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "22b85d20ce9dd9becf600d2940b5ff1191a8b87e", "filename": "src/test/ui/consts/invalid-union.64bit.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -9,12 +9,24 @@ LL | fn main() {\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n-error[E0080]: erroneous constant used\n-  --> $DIR/invalid-union.rs:42:25\n+note: erroneous constant used\n+  --> $DIR/invalid-union.rs:43:25\n    |\n LL |     let _: &'static _ = &C;\n-   |                         ^^ referenced constant has errors\n+   |                         ^^\n \n-error: aborting due to 2 previous errors\n+note: erroneous constant used\n+  --> $DIR/invalid-union.rs:43:25\n+   |\n+LL |     let _: &'static _ = &C;\n+   |                         ^^\n+\n+note: erroneous constant used\n+  --> $DIR/invalid-union.rs:43:25\n+   |\n+LL |     let _: &'static _ = &C;\n+   |                         ^^\n+\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "28706b4a923e7659bcd2efb89cf6def5b7d7dcba", "filename": "src/test/ui/consts/invalid-union.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -39,5 +39,6 @@ const C: S = {\n };\n \n fn main() { //~ ERROR it is undefined behavior to use this value\n-    let _: &'static _ = &C; //~ ERROR erroneous constant used\n+    // FIXME the span here is wrong, sould be pointing at the line below, not above.\n+    let _: &'static _ = &C;\n }"}, {"sha": "7137c053847ce56bd5dd5cbc6fa1b6883182f93c", "filename": "src/test/ui/consts/issue-36163.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -5,10 +5,10 @@ LL |     B = A,\n    |         ^\n    |\n note: ...which requires const-evaluating + checking `A`...\n-  --> $DIR/issue-36163.rs:1:1\n+  --> $DIR/issue-36163.rs:1:18\n    |\n LL | const A: isize = Foo::B as isize;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating + checking `Foo::B::{constant#0}`, completing the cycle\n note: cycle used when simplifying constant for the type system `Foo::B::{constant#0}`\n   --> $DIR/issue-36163.rs:4:9"}, {"sha": "520bf508ff33905fe85ba75f767abb3b04f9803b", "filename": "src/test/ui/consts/issue-54954.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fissue-54954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fissue-54954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54954.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -9,8 +9,8 @@ trait Tt {\n }\n \n fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-  //~^ ERROR evaluation of constant value failed\n-  //~| ERROR evaluation of constant value failed\n+  //~^ constant\n+  //~| constant\n     z\n }\n "}, {"sha": "85055828737b3c55321895f0b5d4537088e4c022", "filename": "src/test/ui/consts/issue-54954.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54954.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -16,19 +16,19 @@ LL | |         core::mem::size_of::<T>()\n LL | |     }\n    | |_____- `Tt::const_val` defined here\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/issue-54954.rs:11:15\n    |\n LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-   |               ^^^^^^^ referenced constant has errors\n+   |               ^^^^^^^\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/issue-54954.rs:11:34\n    |\n LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-   |                                  ^^^^^^^ referenced constant has errors\n+   |                                  ^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0080, E0379, E0790.\n-For more information about an error, try `rustc --explain E0080`.\n+Some errors have detailed explanations: E0379, E0790.\n+For more information about an error, try `rustc --explain E0379`."}, {"sha": "22c257d0b08af5724f4175352646e86aba9ae926", "filename": "src/test/ui/consts/issue-56164.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -1,6 +1,5 @@\n const fn foo() { (||{})() }\n //~^ ERROR cannot call non-const closure\n-//~| ERROR erroneous constant used\n \n const fn bad(input: fn()) {\n     input()"}, {"sha": "2579b3e7827206b396474f1aa020375cbfa03fef", "filename": "src/test/ui/consts/issue-56164.stderr", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -8,18 +8,23 @@ LL | const fn foo() { (||{})() }\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n error: function pointer calls are not allowed in constant functions\n-  --> $DIR/issue-56164.rs:6:5\n+  --> $DIR/issue-56164.rs:5:5\n    |\n LL |     input()\n    |     ^^^^^^^\n \n-error[E0080]: erroneous constant used\n+note: erroneous constant used\n   --> $DIR/issue-56164.rs:1:18\n    |\n LL | const fn foo() { (||{})() }\n-   |                  ^^^^^^ referenced constant has errors\n+   |                  ^^^^^^\n \n-error: aborting due to 3 previous errors\n+note: erroneous constant used\n+  --> $DIR/issue-56164.rs:1:18\n+   |\n+LL | const fn foo() { (||{})() }\n+   |                  ^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0015, E0080.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "df45d01ec029953b4a1212ad24f588767e594583", "filename": "src/test/ui/consts/issue-66693.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -10,7 +10,6 @@ static _FOO: () = panic!(true);\n const fn _foo() {\n     panic!(&1);\n     //~^ ERROR: argument to `panic!()` in a const context must have type `&str`\n-    //~| ERROR: erroneous constant used\n }\n \n // ensure that conforming panics don't cause an error"}, {"sha": "e9a3fced61cc168d7946eb8844425dec0fb6e740", "filename": "src/test/ui/consts/issue-66693.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -22,12 +22,17 @@ LL |     panic!(&1);\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: erroneous constant used\n+note: erroneous constant used\n   --> $DIR/issue-66693.rs:11:12\n    |\n LL |     panic!(&1);\n-   |            ^^ referenced constant has errors\n+   |            ^^\n \n-error: aborting due to 4 previous errors\n+note: erroneous constant used\n+  --> $DIR/issue-66693.rs:11:12\n+   |\n+LL |     panic!(&1);\n+   |            ^^\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "7bb0c1b772ad1fe07eb0640e7d5c4fc2ce179c94", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -26,5 +26,5 @@ fn main() {\n     // this is fine, but would have been forbidden by the static checks on `F`\n     let x = <() as Bar<u32, ()>>::F;\n     // this test only causes errors due to the line below, so post-monomorphization\n-    let y = <String as Bar<Vec<u32>, String>>::F; //~ ERROR erroneous constant\n+    let y = <String as Bar<Vec<u32>, String>>::F; //~ constant\n }"}, {"sha": "33e7e4af276f7418cfb443c530f9a312d37fa828", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -13,11 +13,23 @@ LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n LL |     const F: u32 = (U::X, 42).1;\n    |                               - inside `<String as Bar<Vec<u32>, String>>::F` at $DIR/assoc_const.rs:12:31\n \n-error[E0080]: erroneous constant used\n+note: erroneous constant used\n   --> $DIR/assoc_const.rs:29:13\n    |\n LL |     let y = <String as Bar<Vec<u32>, String>>::F;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: erroneous constant used\n+  --> $DIR/assoc_const.rs:29:13\n+   |\n+LL |     let y = <String as Bar<Vec<u32>, String>>::F;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: erroneous constant used\n+  --> $DIR/assoc_const.rs:29:13\n+   |\n+LL |     let y = <String as Bar<Vec<u32>, String>>::F;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: skipping const checks\n    |\n@@ -27,6 +39,6 @@ help: skipping check that does not even have a feature gate\n LL |     const F: u32 = (U::X, 42).1;\n    |                    ^^^^^^^^^^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "aad5b34606ee318307f4bdf96cd44c1358580e4e", "filename": "src/test/ui/consts/miri_unleashed/assoc_const_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -24,5 +24,5 @@ impl Bar<String> for String {}\n fn main() {\n     let x = <() as Bar<()>>::F;\n     // this test only causes errors due to the line below, so post-monomorphization\n-    let y = <String as Bar<String>>::F; //~ ERROR erroneous constant\n+    let y = <String as Bar<String>>::F; //~ constant\n }"}, {"sha": "fc4b18056da5ba256df948b1465f9b9ee92d5a12", "filename": "src/test/ui/consts/miri_unleashed/assoc_const_2.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -4,12 +4,24 @@ error[E0080]: evaluation of `<std::string::String as Bar<std::string::String>>::\n LL |     const F: u32 = 100 / U::X;\n    |                    ^^^^^^^^^^ attempt to divide `100_u32` by zero\n \n-error[E0080]: erroneous constant used\n+note: erroneous constant used\n   --> $DIR/assoc_const_2.rs:27:13\n    |\n LL |     let y = <String as Bar<String>>::F;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+note: erroneous constant used\n+  --> $DIR/assoc_const_2.rs:27:13\n+   |\n+LL |     let y = <String as Bar<String>>::F;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: erroneous constant used\n+  --> $DIR/assoc_const_2.rs:27:13\n+   |\n+LL |     let y = <String as Bar<String>>::F;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "ca6449cce30d516cde02916971290a9bbf199781", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -15,5 +15,5 @@ trait Const {\n impl<T> Const for T {}\n \n pub fn main() -> () {\n-    dbg!(i32::CONSTANT); //~ ERROR erroneous constant used\n+    dbg!(i32::CONSTANT); //~ constant\n }"}, {"sha": "8b39f390bb47eb9ba0ba4c26e2d9d5cf575c7650", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -140,12 +140,24 @@ LL |     fake_type()\n LL |     const CONSTANT: i32 = unsafe { fake_type() };\n    |                                    ----------- inside `<i32 as Const>::CONSTANT` at $DIR/uninhabited-const-issue-61744.rs:12:36\n \n-error[E0080]: erroneous constant used\n+note: erroneous constant used\n   --> $DIR/uninhabited-const-issue-61744.rs:18:10\n    |\n LL |     dbg!(i32::CONSTANT);\n-   |          ^^^^^^^^^^^^^ referenced constant has errors\n+   |          ^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+note: erroneous constant used\n+  --> $DIR/uninhabited-const-issue-61744.rs:18:10\n+   |\n+LL |     dbg!(i32::CONSTANT);\n+   |          ^^^^^^^^^^^^^\n+\n+note: erroneous constant used\n+  --> $DIR/uninhabited-const-issue-61744.rs:18:10\n+   |\n+LL |     dbg!(i32::CONSTANT);\n+   |          ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "aca5242b29689596985f861a1efc6f291c3dcb4e", "filename": "src/test/ui/issues/issue-17252.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -1,8 +1,8 @@\n error[E0391]: cycle detected when const-evaluating + checking `FOO`\n-  --> $DIR/issue-17252.rs:1:1\n+  --> $DIR/issue-17252.rs:1:20\n    |\n LL | const FOO: usize = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^\n    |\n    = note: ...which immediately requires const-evaluating + checking `FOO` again\n note: cycle used when const-evaluating + checking `main::{constant#0}`"}, {"sha": "c6cafe575e51bd042d98319ff2638bb61acb1f58", "filename": "src/test/ui/issues/issue-23302-3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -1,14 +1,14 @@\n error[E0391]: cycle detected when const-evaluating + checking `A`\n-  --> $DIR/issue-23302-3.rs:1:1\n+  --> $DIR/issue-23302-3.rs:1:16\n    |\n LL | const A: i32 = B;\n-   | ^^^^^^^^^^^^^^^^^\n+   |                ^\n    |\n note: ...which requires const-evaluating + checking `B`...\n-  --> $DIR/issue-23302-3.rs:3:1\n+  --> $DIR/issue-23302-3.rs:3:16\n    |\n LL | const B: i32 = A;\n-   | ^^^^^^^^^^^^^^^^^\n+   |                ^\n    = note: ...which again requires const-evaluating + checking `A`, completing the cycle\n note: cycle used when simplifying constant for the type system `A`\n   --> $DIR/issue-23302-3.rs:1:1"}, {"sha": "07cad8796e169cf7174ad5c459508385f28cdccd", "filename": "src/test/ui/issues/issue-41394.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -5,7 +5,7 @@ enum Foo {\n \n enum Bar {\n     A = Foo::A as isize\n-    //~^ ERROR evaluation of constant value failed\n+    //~^ const\n }\n \n fn main() {}"}, {"sha": "1b5c64628a1557b0e1757a96d047eaf766abf302", "filename": "src/test/ui/issues/issue-41394.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -6,13 +6,12 @@ LL |     A = \"\" + 1\n    |         |\n    |         &str\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/issue-41394.rs:7:9\n    |\n LL |     A = Foo::A as isize\n-   |         ^^^^^^^^^^^^^^^ referenced constant has errors\n+   |         ^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0369.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0369`."}, {"sha": "e98affc5cc299a903ad683e5728135788fb76faf", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -19,5 +19,5 @@ impl TraitB for B { //~ ERROR not all trait items implemented, missing: `MyA`\n \n fn main() {\n     let _ = [0; B::VALUE];\n-    //~^ ERROR evaluation of constant value failed\n+    //~^ constant\n }"}, {"sha": "ba385d887fb39ae51b46abf0f119c24b3bef8705", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -13,13 +13,13 @@ LL |     type MyA: TraitA;\n LL | impl TraitB for B {\n    | ^^^^^^^^^^^^^^^^^ missing `MyA` in implementation\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/issue-69602-type-err-during-codegen-ice.rs:21:17\n    |\n LL |     let _ = [0; B::VALUE];\n-   |                 ^^^^^^^^ referenced constant has errors\n+   |                 ^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0046, E0080, E0437.\n+Some errors have detailed explanations: E0046, E0437.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "e35f9f14c7ecc0215ffa4ad4e7092a1ed7536093", "filename": "src/test/ui/limits/issue-55878.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -9,14 +9,30 @@ LL |     intrinsics::size_of::<T>()\n LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n    |                          ---------------------------------------------- inside `main` at $DIR/issue-55878.rs:7:26\n \n-error[E0080]: erroneous constant used\n+note: erroneous constant used\n   --> $DIR/issue-55878.rs:7:26\n    |\n LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 2 previous errors\n+note: erroneous constant used\n+  --> $DIR/issue-55878.rs:7:26\n+   |\n+LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: erroneous constant used\n+  --> $DIR/issue-55878.rs:7:26\n+   |\n+LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "72238a59198a7245021df150d7948e3a6ffb0b18", "filename": "src/test/ui/resolve/issue-50599.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     const N: u32 = 1_000;\n     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize; //~ ERROR cannot find value\n     let mut digits = [0u32; M];\n-    //~^ ERROR evaluation of constant value failed\n+    //~^ constant\n }"}, {"sha": "b07482c83ccc21c3980bbd118f5c875e6a836686", "filename": "src/test/ui/resolve/issue-50599.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -16,13 +16,12 @@ LL -     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize;\n LL +     const M: usize = (f64::from(N) * LOG10_2) as usize;\n    |\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/issue-50599.rs:4:29\n    |\n LL |     let mut digits = [0u32; M];\n-   |                             ^ referenced constant has errors\n+   |                             ^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0425.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "caf5bade5c75b5823eea6b65c0878ce0863c0bff", "filename": "src/test/ui/type/type-dependent-def-issue-49241.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     let v = vec![0];\n     const l: usize = v.count(); //~ ERROR attempt to use a non-constant value in a constant\n     let s: [u32; l] = v.into_iter().collect();\n-    //~^ERROR evaluation of constant value failed\n+    //~^ constant\n }"}, {"sha": "af16a6e8f84180a343492011ec05803ef64ae9cd", "filename": "src/test/ui/type/type-dependent-def-issue-49241.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -6,13 +6,12 @@ LL |     const l: usize = v.count();\n    |     |\n    |     help: consider using `let` instead of `const`: `let l`\n \n-error[E0080]: evaluation of constant value failed\n+note: erroneous constant used\n   --> $DIR/type-dependent-def-issue-49241.rs:4:18\n    |\n LL |     let s: [u32; l] = v.into_iter().collect();\n-   |                  ^ referenced constant has errors\n+   |                  ^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0435.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "d8b6e3f1262b735345660276aa3456cb759aad52", "filename": "src/tools/clippy/tests/ui/indexing_slicing_index.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -4,11 +4,11 @@ error[E0080]: evaluation of `main::{constant#3}` failed\n LL |     const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n    |              ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n \n-error[E0080]: erroneous constant used\n+note: erroneous constant used\n   --> $DIR/indexing_slicing_index.rs:31:5\n    |\n LL |     const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:22:5\n@@ -65,6 +65,6 @@ error[E0080]: evaluation of constant value failed\n LL | const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n    |                        ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "8fbee9a3522942e4ff634c4632ee0f00911b5054", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -712,7 +712,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             if tcx.is_foreign_item(def_id) {\n                 throw_unsup_format!(\"foreign thread-local statics are not supported\");\n             }\n-            let allocation = tcx.eval_static_initializer(def_id)?;\n+            // We don't give a span -- statics don't need that, they cannot be generic or associated.\n+            let allocation = this.ctfe_query(None, |tcx| tcx.eval_static_initializer(def_id))?;\n             let mut allocation = allocation.inner().clone();\n             // This allocation will be deallocated when the thread dies, so it is not in read-only memory.\n             allocation.mutability = Mutability::Mut;"}, {"sha": "7658cea10f9f8376af991b8958acaff15661503b", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 97, "deletions": 99, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -146,7 +146,9 @@ fn prune_stacktrace<'tcx>(\n     }\n }\n \n-/// Emit a custom diagnostic without going through the miri-engine machinery\n+/// Emit a custom diagnostic without going through the miri-engine machinery.\n+///\n+/// Returns `Some` if this was regular program termination with a given exit code, `None` otherwise.\n pub fn report_error<'tcx, 'mir>(\n     ecx: &InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>,\n     e: InterpErrorInfo<'tcx>,\n@@ -155,106 +157,102 @@ pub fn report_error<'tcx, 'mir>(\n \n     let mut msg = vec![];\n \n-    let (title, helps) = match &e.kind() {\n-        MachineStop(info) => {\n-            let info = info.downcast_ref::<TerminationInfo>().expect(\"invalid MachineStop payload\");\n-            use TerminationInfo::*;\n-            let title = match info {\n-                Exit(code) => return Some(*code),\n-                Abort(_) => Some(\"abnormal termination\"),\n-                UnsupportedInIsolation(_) | Int2PtrWithStrictProvenance =>\n-                    Some(\"unsupported operation\"),\n-                StackedBorrowsUb { .. } => Some(\"Undefined Behavior\"),\n-                Deadlock => Some(\"deadlock\"),\n-                MultipleSymbolDefinitions { .. } | SymbolShimClashing { .. } => None,\n-            };\n-            #[rustfmt::skip]\n-            let helps = match info {\n-                UnsupportedInIsolation(_) =>\n-                    vec![\n-                        (None, format!(\"pass the flag `-Zmiri-disable-isolation` to disable isolation;\")),\n-                        (None, format!(\"or pass `-Zmiri-isolation-error=warn` to configure Miri to return an error code from isolated operations (if supported for that operation) and continue with a warning\")),\n-                    ],\n-                StackedBorrowsUb { help, history, .. } => {\n-                    let url = \"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md\";\n-                    msg.extend(help.clone());\n-                    let mut helps = vec![\n-                        (None, format!(\"this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\")),\n-                        (None, format!(\"see {url} for further information\")),\n-                    ];\n-                    if let Some(TagHistory {created, invalidated, protected}) = history.clone() {\n-                        helps.push((Some(created.1), created.0));\n-                        if let Some((msg, span)) = invalidated {\n-                            helps.push((Some(span), msg));\n-                        }\n-                        if let Some((protector_msg, protector_span)) = protected {\n-                            helps.push((Some(protector_span), protector_msg));\n-                        }\n+    let (title, helps) = if let MachineStop(info) = e.kind() {\n+        let info = info.downcast_ref::<TerminationInfo>().expect(\"invalid MachineStop payload\");\n+        use TerminationInfo::*;\n+        let title = match info {\n+            Exit(code) => return Some(*code),\n+            Abort(_) => Some(\"abnormal termination\"),\n+            UnsupportedInIsolation(_) | Int2PtrWithStrictProvenance =>\n+                Some(\"unsupported operation\"),\n+            StackedBorrowsUb { .. } => Some(\"Undefined Behavior\"),\n+            Deadlock => Some(\"deadlock\"),\n+            MultipleSymbolDefinitions { .. } | SymbolShimClashing { .. } => None,\n+        };\n+        #[rustfmt::skip]\n+        let helps = match info {\n+            UnsupportedInIsolation(_) =>\n+                vec![\n+                    (None, format!(\"pass the flag `-Zmiri-disable-isolation` to disable isolation;\")),\n+                    (None, format!(\"or pass `-Zmiri-isolation-error=warn` to configure Miri to return an error code from isolated operations (if supported for that operation) and continue with a warning\")),\n+                ],\n+            StackedBorrowsUb { help, history, .. } => {\n+                let url = \"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md\";\n+                msg.extend(help.clone());\n+                let mut helps = vec![\n+                    (None, format!(\"this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\")),\n+                    (None, format!(\"see {url} for further information\")),\n+                ];\n+                if let Some(TagHistory {created, invalidated, protected}) = history.clone() {\n+                    helps.push((Some(created.1), created.0));\n+                    if let Some((msg, span)) = invalidated {\n+                        helps.push((Some(span), msg));\n+                    }\n+                    if let Some((protector_msg, protector_span)) = protected {\n+                        helps.push((Some(protector_span), protector_msg));\n                     }\n-                    helps\n                 }\n-                MultipleSymbolDefinitions { first, first_crate, second, second_crate, .. } =>\n-                    vec![\n-                        (Some(*first), format!(\"it's first defined here, in crate `{first_crate}`\")),\n-                        (Some(*second), format!(\"then it's defined here again, in crate `{second_crate}`\")),\n-                    ],\n-                SymbolShimClashing { link_name, span } =>\n-                    vec![(Some(*span), format!(\"the `{link_name}` symbol is defined here\"))],\n-                Int2PtrWithStrictProvenance =>\n-                    vec![(None, format!(\"use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead\"))],\n-                _ => vec![],\n-            };\n-            (title, helps)\n-        }\n-        _ => {\n-            #[rustfmt::skip]\n-            let title = match e.kind() {\n-                Unsupported(_) =>\n-                    \"unsupported operation\",\n-                UndefinedBehavior(_) =>\n-                    \"Undefined Behavior\",\n-                ResourceExhaustion(_) =>\n-                    \"resource exhaustion\",\n-                InvalidProgram(\n-                    InvalidProgramInfo::AlreadyReported(_) |\n-                    InvalidProgramInfo::Layout(..) |\n-                    InvalidProgramInfo::ReferencedConstant\n-                ) =>\n-                    \"post-monomorphization error\",\n-                kind =>\n-                    bug!(\"This error should be impossible in Miri: {kind:?}\"),\n-            };\n-            #[rustfmt::skip]\n-            let helps = match e.kind() {\n-                Unsupported(\n-                    UnsupportedOpInfo::ThreadLocalStatic(_) |\n-                    UnsupportedOpInfo::ReadExternStatic(_) |\n-                    UnsupportedOpInfo::PartialPointerOverwrite(_) |\n-                    UnsupportedOpInfo::PartialPointerCopy(_) |\n-                    UnsupportedOpInfo::ReadPointerAsBytes\n-                ) =>\n-                    panic!(\"Error should never be raised by Miri: {kind:?}\", kind = e.kind()),\n-                Unsupported(\n-                    UnsupportedOpInfo::Unsupported(_)\n-                ) =>\n-                    vec![(None, format!(\"this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\"))],\n-                UndefinedBehavior(UndefinedBehaviorInfo::AlignmentCheckFailed { .. })\n-                    if ecx.machine.check_alignment == AlignmentCheck::Symbolic\n-                =>\n-                    vec![\n-                        (None, format!(\"this usually indicates that your program performed an invalid operation and caused Undefined Behavior\")),\n-                        (None, format!(\"but due to `-Zmiri-symbolic-alignment-check`, alignment errors can also be false positives\")),\n-                    ],\n-                UndefinedBehavior(_) =>\n-                    vec![\n-                        (None, format!(\"this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\")),\n-                        (None, format!(\"see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\")),\n-                    ],\n-                InvalidProgram(_) | ResourceExhaustion(_) | MachineStop(_) =>\n-                    vec![],\n-            };\n-            (Some(title), helps)\n-        }\n+                helps\n+            }\n+            MultipleSymbolDefinitions { first, first_crate, second, second_crate, .. } =>\n+                vec![\n+                    (Some(*first), format!(\"it's first defined here, in crate `{first_crate}`\")),\n+                    (Some(*second), format!(\"then it's defined here again, in crate `{second_crate}`\")),\n+                ],\n+            SymbolShimClashing { link_name, span } =>\n+                vec![(Some(*span), format!(\"the `{link_name}` symbol is defined here\"))],\n+            Int2PtrWithStrictProvenance =>\n+                vec![(None, format!(\"use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead\"))],\n+            _ => vec![],\n+        };\n+        (title, helps)\n+    } else {\n+        #[rustfmt::skip]\n+        let title = match e.kind() {\n+            UndefinedBehavior(_) =>\n+                \"Undefined Behavior\",\n+            ResourceExhaustion(_) =>\n+                \"resource exhaustion\",\n+            Unsupported(\n+                // We list only the ones that can actually happen.\n+                UnsupportedOpInfo::Unsupported(_)\n+            ) =>\n+                \"unsupported operation\",\n+            InvalidProgram(\n+                // We list only the ones that can actually happen.\n+                InvalidProgramInfo::AlreadyReported(_) |\n+                InvalidProgramInfo::Layout(..)\n+            ) =>\n+                \"post-monomorphization error\",\n+            kind =>\n+                bug!(\"This error should be impossible in Miri: {kind:?}\"),\n+        };\n+        #[rustfmt::skip]\n+        let helps = match e.kind() {\n+            Unsupported(_) =>\n+                vec![(None, format!(\"this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\"))],\n+            UndefinedBehavior(UndefinedBehaviorInfo::AlignmentCheckFailed { .. })\n+                if ecx.machine.check_alignment == AlignmentCheck::Symbolic\n+            =>\n+                vec![\n+                    (None, format!(\"this usually indicates that your program performed an invalid operation and caused Undefined Behavior\")),\n+                    (None, format!(\"but due to `-Zmiri-symbolic-alignment-check`, alignment errors can also be false positives\")),\n+                ],\n+            UndefinedBehavior(_) =>\n+                vec![\n+                    (None, format!(\"this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\")),\n+                    (None, format!(\"see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\")),\n+                ],\n+            InvalidProgram(\n+                InvalidProgramInfo::AlreadyReported(rustc_errors::ErrorGuaranteed { .. })\n+            ) => {\n+                // This got already reported. No point in reporting it again.\n+                return None;\n+            }\n+            _ =>\n+                vec![],\n+        };\n+        (Some(title), helps)\n     };\n \n     let stacktrace = ecx.generate_stacktrace();"}, {"sha": "1fdf3e52a8b6540a16f0877f283388c4ca4ed513", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -117,7 +117,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let this = self.eval_context_ref();\n         let instance = this.resolve_path(path);\n         let cid = GlobalId { instance, promoted: None };\n-        let const_val = this.eval_to_allocation(cid)?;\n+        // We don't give a span -- this isn't actually used directly by the program anyway.\n+        let const_val = this.eval_global(cid, None)?;\n         this.read_scalar(&const_val.into())\n     }\n "}, {"sha": "66df0d737c087bf2f9bfb83047143f9798d21532", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -46,6 +46,7 @@ extern crate rustc_ast;\n extern crate rustc_middle;\n extern crate rustc_const_eval;\n extern crate rustc_data_structures;\n+extern crate rustc_errors;\n extern crate rustc_hir;\n extern crate rustc_index;\n extern crate rustc_session;"}, {"sha": "d37837c71931e468a57b48f71cb8f99dcf63c3de", "filename": "src/tools/miri/tests/fail/erroneous_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.rs?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -11,7 +11,7 @@ impl<T> PrintName<T> {\n \n fn no_codegen<T>() {\n     if false {\n-        let _ = PrintName::<T>::VOID; //~ERROR: post-monomorphization error\n+        let _ = PrintName::<T>::VOID; //~NOTE: constant\n     }\n }\n fn main() {"}, {"sha": "c32ebf67a1167b4ced2c23c9536b6f5ae3060f34", "filename": "src/tools/miri/tests/fail/erroneous_const.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353b915fecd7feb30127b3107ea091a1a28f5e4a/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.stderr?ref=353b915fecd7feb30127b3107ea091a1a28f5e4a", "patch": "@@ -6,21 +6,12 @@ LL |     const VOID: ! = panic!();\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: post-monomorphization error: referenced constant has errors\n+note: erroneous constant used\n   --> $DIR/erroneous_const.rs:LL:CC\n    |\n LL |         let _ = PrintName::<T>::VOID;\n-   |                 ^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = note: inside `no_codegen::<i32>` at $DIR/erroneous_const.rs:LL:CC\n-note: inside `main` at $DIR/erroneous_const.rs:LL:CC\n-  --> $DIR/erroneous_const.rs:LL:CC\n-   |\n-LL |     no_codegen::<i32>();\n-   |     ^^^^^^^^^^^^^^^^^^^\n-\n-note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+   |                 ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}]}