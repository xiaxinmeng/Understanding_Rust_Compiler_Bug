{"sha": "262b958a4bedf419335069c95f054a22da48a88a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MmI5NThhNGJlZGY0MTkzMzUwNjljOTVmMDU0YTIyZGE0OGE4OGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-22T06:44:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-24T21:22:35Z"}, "message": "Migrate std::run to libuv processes", "tree": {"sha": "85e225d8fe1f1418756687aec847a0f9b2166cae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85e225d8fe1f1418756687aec847a0f9b2166cae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/262b958a4bedf419335069c95f054a22da48a88a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/262b958a4bedf419335069c95f054a22da48a88a", "html_url": "https://github.com/rust-lang/rust/commit/262b958a4bedf419335069c95f054a22da48a88a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/262b958a4bedf419335069c95f054a22da48a88a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bb1df92511e7ecafe0554b01410f4e68d7bc66f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb1df92511e7ecafe0554b01410f4e68d7bc66f", "html_url": "https://github.com/rust-lang/rust/commit/6bb1df92511e7ecafe0554b01410f4e68d7bc66f"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "ae087099d1fa506b8ba9c104fe40e7c62aef72b9", "filename": "src/libstd/rt/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/262b958a4bedf419335069c95f054a22da48a88a/src%2Flibstd%2Frt%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262b958a4bedf419335069c95f054a22da48a88a/src%2Flibstd%2Frt%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fprocess.rs?ref=262b958a4bedf419335069c95f054a22da48a88a", "patch": "@@ -57,7 +57,7 @@ pub struct ProcessConfig<'self> {\n     ///     0 - stdin\n     ///     1 - stdout\n     ///     2 - stderr\n-    io: ~[StdioContainer]\n+    io: &'self [StdioContainer]\n }\n \n /// Describes what to do with a standard io stream for a child process."}, {"sha": "f0d0afeb6aa401de1f3f1898c5eae5140c6cebdc", "filename": "src/libstd/rt/uv/process.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/262b958a4bedf419335069c95f054a22da48a88a/src%2Flibstd%2Frt%2Fuv%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262b958a4bedf419335069c95f054a22da48a88a/src%2Flibstd%2Frt%2Fuv%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fprocess.rs?ref=262b958a4bedf419335069c95f054a22da48a88a", "patch": "@@ -12,7 +12,6 @@ use prelude::*;\n use cell::Cell;\n use libc;\n use ptr;\n-use util;\n use vec;\n \n use rt::io::process::*;\n@@ -42,7 +41,7 @@ impl Process {\n     ///\n     /// Returns either the corresponding process object or an error which\n     /// occurred.\n-    pub fn spawn(&mut self, loop_: &uv::Loop, mut config: ProcessConfig,\n+    pub fn spawn(&mut self, loop_: &uv::Loop, config: ProcessConfig,\n                  exit_cb: uv::ExitCallback)\n                     -> Result<~[Option<~UvPipeStream>], uv::UvError>\n     {\n@@ -62,12 +61,12 @@ impl Process {\n                                                        err);\n         }\n \n-        let io = util::replace(&mut config.io, ~[]);\n+        let io = config.io;\n         let mut stdio = vec::with_capacity::<uvll::uv_stdio_container_t>(io.len());\n         let mut ret_io = vec::with_capacity(io.len());\n         unsafe {\n             vec::raw::set_len(&mut stdio, io.len());\n-            for (slot, other) in stdio.iter().zip(io.move_iter()) {\n+            for (slot, other) in stdio.iter().zip(io.iter()) {\n                 let io = set_stdio(slot as *uvll::uv_stdio_container_t, other,\n                                    loop_);\n                 ret_io.push(io);\n@@ -126,9 +125,9 @@ impl Process {\n }\n \n unsafe fn set_stdio(dst: *uvll::uv_stdio_container_t,\n-                    io: StdioContainer,\n+                    io: &StdioContainer,\n                     loop_: &uv::Loop) -> Option<~UvPipeStream> {\n-    match io {\n+    match *io {\n         Ignored => {\n             uvll::set_stdio_container_flags(dst, uvll::STDIO_IGNORE);\n             None"}, {"sha": "40b509c4bc8621495d22ee124b44350e8ab00152", "filename": "src/libstd/run.rs", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/262b958a4bedf419335069c95f054a22da48a88a/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262b958a4bedf419335069c95f054a22da48a88a/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=262b958a4bedf419335069c95f054a22da48a88a", "patch": "@@ -17,7 +17,7 @@ use comm::{stream, SharedChan};\n use libc::{pid_t, c_int};\n use libc;\n use prelude::*;\n-use rt::io::native::process;\n+use rt::io::process;\n use rt::io;\n use rt::io::extensions::ReaderUtil;\n use task;\n@@ -122,8 +122,24 @@ impl Process {\n      */\n     pub fn new(prog: &str, args: &[~str], options: ProcessOptions) -> Process {\n         let ProcessOptions { env, dir, in_fd, out_fd, err_fd } = options;\n-        let inner = process::Process::new(prog, args, env, dir,\n-                                          in_fd, out_fd, err_fd);\n+        let env = env.as_ref().map(|a| a.as_slice());\n+        let cwd = dir.as_ref().map(|a| a.as_str().unwrap());\n+        fn rtify(fd: Option<c_int>, input: bool) -> process::StdioContainer {\n+            match fd {\n+                Some(fd) => process::InheritFd(fd),\n+                None => process::CreatePipe(input, !input),\n+            }\n+        }\n+        let rtio = [rtify(in_fd, true), rtify(out_fd, false),\n+                    rtify(err_fd, false)];\n+        let rtconfig = process::ProcessConfig {\n+            program: prog,\n+            args: args,\n+            env: env,\n+            cwd: cwd,\n+            io: rtio,\n+        };\n+        let inner = process::Process::new(rtconfig).unwrap();\n         Process { inner: inner }\n     }\n \n@@ -136,34 +152,40 @@ impl Process {\n      * Fails if there is no stdin available (it's already been removed by\n      * take_input)\n      */\n-    pub fn input<'a>(&'a mut self) -> &'a mut io::Writer { self.inner.input() }\n+    pub fn input<'a>(&'a mut self) -> &'a mut io::Writer {\n+        self.inner.io[0].get_mut_ref() as &mut io::Writer\n+    }\n \n     /**\n      * Returns an io::Reader that can be used to read from this Process's stdout.\n      *\n      * Fails if there is no stdout available (it's already been removed by\n      * take_output)\n      */\n-    pub fn output<'a>(&'a mut self) -> &'a mut io::Reader { self.inner.output() }\n+    pub fn output<'a>(&'a mut self) -> &'a mut io::Reader {\n+        self.inner.io[1].get_mut_ref() as &mut io::Reader\n+    }\n \n     /**\n      * Returns an io::Reader that can be used to read from this Process's stderr.\n      *\n      * Fails if there is no stderr available (it's already been removed by\n      * take_error)\n      */\n-    pub fn error<'a>(&'a mut self) -> &'a mut io::Reader { self.inner.error() }\n+    pub fn error<'a>(&'a mut self) -> &'a mut io::Reader {\n+        self.inner.io[2].get_mut_ref() as &mut io::Reader\n+    }\n \n     /**\n      * Closes the handle to the child process's stdin.\n      */\n     pub fn close_input(&mut self) {\n-        self.inner.take_input();\n+        self.inner.io[0].take();\n     }\n \n     fn close_outputs(&mut self) {\n-        self.inner.take_output();\n-        self.inner.take_error();\n+        self.inner.io[1].take();\n+        self.inner.io[2].take();\n     }\n \n     /**\n@@ -186,9 +208,9 @@ impl Process {\n      * were redirected to existing file descriptors.\n      */\n     pub fn finish_with_output(&mut self) -> ProcessOutput {\n-        self.inner.take_input(); // close stdin\n-        let output = Cell::new(self.inner.take_output());\n-        let error = Cell::new(self.inner.take_error());\n+        self.close_input();\n+        let output = Cell::new(self.inner.io[1].take());\n+        let error = Cell::new(self.inner.io[2].take());\n \n         // Spawn two entire schedulers to read both stdout and sterr\n         // in parallel so we don't deadlock while blocking on one"}]}