{"sha": "b742594f4a5cb73b2b69047625c8b92642c38c24", "node_id": "C_kwDOAAsO6NoAKGI3NDI1OTRmNGE1Y2I3M2IyYjY5MDQ3NjI1YzhiOTI2NDJjMzhjMjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-16T16:23:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-16T16:23:10Z"}, "message": "Rollup merge of #91947 - ibraheemdev:io-error-other, r=joshtriplett\n\nAdd `io::Error::other`\n\nThis PR adds a small utility constructor, `io::Error::other`, a shorthand for `io::Error::new(io::ErrorKind::Other, err)`, something I find myself writing often.\n\nFor some concrete stats, a quick search on [grep.app](https://grep.app) shows that more than half of the uses of `io::Error::new` use `ErrorKind::Other`:\n```\nError::new\\((?:std::)?(?:io::)?ErrorKind:: => 3,898 results\nError::new\\((?:std::)?(?:io::)?ErrorKind::Other => 2,186 results\n```", "tree": {"sha": "4cc55e7dc9bd86166530d368ae32a18ff7914ffd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cc55e7dc9bd86166530d368ae32a18ff7914ffd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b742594f4a5cb73b2b69047625c8b92642c38c24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhu2fuCRBK7hj4Ov3rIwAAdvAIACz+FMlKVwhdFYAbKGvS5sIH\nLEM7bQBCYVJQ59p0NrnqZ39zPOaybiMS4zUzmKovUCqMAZao1FCX2N4byHp1a9lP\n3BEvgd3YSVSYHaV0rqa5RlhwhB4qtjM9J7bRmyQCSiJz03McCHefq3wku6FvzwF3\ntJv87jNKlwksvP/AuExg9NjJwatHhr/e9RThduAeuj5IOqa3QhpnlRmrtptimsTR\npsy1sBTDR+BqM6XRAqLgpQZIp/ICSXzt6yx0MxnKgMQyQW9/OeUuZvU7AGGSFYL5\n5CSPnqJ3hjav4Jqy9NNAvZJ6mZLNgmCkLFor0x14W1wt1o5XRql5Fylfeq9/B0c=\n=HYO0\n-----END PGP SIGNATURE-----\n", "payload": "tree 4cc55e7dc9bd86166530d368ae32a18ff7914ffd\nparent 7e5c0711e49017f0b6cbef6c8ae45763e57db0f6\nparent 85f786cc9c85473166fee1daec2dfc550f46bed8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639671790 +0100\ncommitter GitHub <noreply@github.com> 1639671790 +0100\n\nRollup merge of #91947 - ibraheemdev:io-error-other, r=joshtriplett\n\nAdd `io::Error::other`\n\nThis PR adds a small utility constructor, `io::Error::other`, a shorthand for `io::Error::new(io::ErrorKind::Other, err)`, something I find myself writing often.\n\nFor some concrete stats, a quick search on [grep.app](https://grep.app) shows that more than half of the uses of `io::Error::new` use `ErrorKind::Other`:\n```\nError::new\\((?:std::)?(?:io::)?ErrorKind:: => 3,898 results\nError::new\\((?:std::)?(?:io::)?ErrorKind::Other => 2,186 results\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b742594f4a5cb73b2b69047625c8b92642c38c24", "html_url": "https://github.com/rust-lang/rust/commit/b742594f4a5cb73b2b69047625c8b92642c38c24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b742594f4a5cb73b2b69047625c8b92642c38c24/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "html_url": "https://github.com/rust-lang/rust/commit/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6"}, {"sha": "85f786cc9c85473166fee1daec2dfc550f46bed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/85f786cc9c85473166fee1daec2dfc550f46bed8", "html_url": "https://github.com/rust-lang/rust/commit/85f786cc9c85473166fee1daec2dfc550f46bed8"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "210a9ec718315b3c0e1336ec9d48d5689b01b840", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b742594f4a5cb73b2b69047625c8b92642c38c24/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b742594f4a5cb73b2b69047625c8b92642c38c24/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=b742594f4a5cb73b2b69047625c8b92642c38c24", "patch": "@@ -417,6 +417,33 @@ impl Error {\n         Self::_new(kind, error.into())\n     }\n \n+    /// Creates a new I/O error from an arbitrary error payload.\n+    ///\n+    /// This function is used to generically create I/O errors which do not\n+    /// originate from the OS itself. It is a shortcut for [`Error::new`]\n+    /// with [`ErrorKind::Other`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(io_error_other)]\n+    ///\n+    /// use std::io::Error;\n+    ///\n+    /// // errors can be created from strings\n+    /// let custom_error = Error::other(\"oh no!\");\n+    ///\n+    /// // errors can also be created from other errors\n+    /// let custom_error2 = Error::other(custom_error);\n+    /// ```\n+    #[unstable(feature = \"io_error_other\", issue = \"91946\")]\n+    pub fn other<E>(error: E) -> Error\n+    where\n+        E: Into<Box<dyn error::Error + Send + Sync>>,\n+    {\n+        Self::_new(ErrorKind::Other, error.into())\n+    }\n+\n     fn _new(kind: ErrorKind, error: Box<dyn error::Error + Send + Sync>) -> Error {\n         Error { repr: Repr::Custom(Box::new(Custom { kind, error })) }\n     }"}]}