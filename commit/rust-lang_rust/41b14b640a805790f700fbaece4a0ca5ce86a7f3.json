{"sha": "41b14b640a805790f700fbaece4a0ca5ce86a7f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYjE0YjY0MGE4MDU3OTBmNzAwZmJhZWNlNGEwY2E1Y2U4NmE3ZjM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-01-11T23:26:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-11T23:26:42Z"}, "message": "Merge pull request #2353 from davidalber/merge-print-diff\n\nConsolidating the logic for printing output", "tree": {"sha": "65870d1c0de899a663f436925743c742227a5cd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65870d1c0de899a663f436925743c742227a5cd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41b14b640a805790f700fbaece4a0ca5ce86a7f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaV/KyCRBK7hj4Ov3rIwAAdHIIAIjVti7qQ6EvJGgi9r//Vxdv\ng4jT1MBqEHKWmYnZnxaBUklucgkZUPk7jGSmhbJsLQXLyGD9np0OUl680KtdcesF\nN+aDJae/kWZKi2BLuj51vX9dR+rphappx7narMnSQnjR751tI/JjGTVJs6jJoPFf\nJ/uoTJ/+/aq+BmOfP7QbMWStDs56bz4P7ZvP00S6kioGqT9bG9ew6hmrtftuK+5H\nB0dHhUNVDMlONA2/wpI2v4asL3SXVe2r4EtjCBzZVt+7YB6EEOHJSD4hf7VB24zo\n3acyrP835WuVQWebRBwP8ii7+JbQpg1EJKFxSkrrtXvuSD/8+YlYOy6/tsm/Nho=\n=3z2b\n-----END PGP SIGNATURE-----\n", "payload": "tree 65870d1c0de899a663f436925743c742227a5cd6\nparent 1abbd74a7f2d9837867aee72a8c54741a1eaa30b\nparent 9f5f9d2250c03dc915ab949c59dbdbffead5b72b\nauthor Seiichi Uchida <seuchida@gmail.com> 1515713202 +0900\ncommitter GitHub <noreply@github.com> 1515713202 +0900\n\nMerge pull request #2353 from davidalber/merge-print-diff\n\nConsolidating the logic for printing output"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41b14b640a805790f700fbaece4a0ca5ce86a7f3", "html_url": "https://github.com/rust-lang/rust/commit/41b14b640a805790f700fbaece4a0ca5ce86a7f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41b14b640a805790f700fbaece4a0ca5ce86a7f3/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1abbd74a7f2d9837867aee72a8c54741a1eaa30b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1abbd74a7f2d9837867aee72a8c54741a1eaa30b", "html_url": "https://github.com/rust-lang/rust/commit/1abbd74a7f2d9837867aee72a8c54741a1eaa30b"}, {"sha": "9f5f9d2250c03dc915ab949c59dbdbffead5b72b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f5f9d2250c03dc915ab949c59dbdbffead5b72b", "html_url": "https://github.com/rust-lang/rust/commit/9f5f9d2250c03dc915ab949c59dbdbffead5b72b"}], "stats": {"total": 109, "additions": 44, "deletions": 65}, "files": [{"sha": "d563e6eee3c17b44438dca410c8002dedcd9c67a", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 42, "deletions": 61, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/41b14b640a805790f700fbaece4a0ca5ce86a7f3/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b14b640a805790f700fbaece4a0ca5ce86a7f3/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=41b14b640a805790f700fbaece4a0ca5ce86a7f3", "patch": "@@ -37,6 +37,43 @@ impl Mismatch {\n     }\n }\n \n+// This struct handles writing output to stdout and abstracts away the logic\n+// of printing in color, if it's possible in the executing environment.\n+pub struct OutputWriter {\n+    terminal: Option<Box<term::Terminal<Output = io::Stdout>>>,\n+}\n+\n+impl OutputWriter {\n+    // Create a new OutputWriter instance based on the caller's preference\n+    // for colorized output and the capabilities of the terminal.\n+    pub fn new(color: Color) -> Self {\n+        if let Some(t) = term::stdout() {\n+            if use_colored_tty(color) && t.supports_color() {\n+                return OutputWriter { terminal: Some(t) };\n+            }\n+        }\n+        OutputWriter { terminal: None }\n+    }\n+\n+    // Write output in the optionally specified color. The output is written\n+    // in the specified color if this OutputWriter instance contains a\n+    // Terminal in its `terminal` field.\n+    pub fn writeln(&mut self, msg: &str, color: Option<term::color::Color>) {\n+        match &mut self.terminal {\n+            Some(ref mut t) => {\n+                if let Some(color) = color {\n+                    t.fg(color).unwrap();\n+                }\n+                writeln!(t, \"{}\", msg).unwrap();\n+                if color.is_some() {\n+                    t.reset().unwrap();\n+                }\n+            }\n+            None => println!(\"{}\", msg),\n+        }\n+    }\n+}\n+\n // Produces a diff between the expected output and actual output of rustfmt.\n pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n     let mut line_number = 1;\n@@ -97,80 +134,24 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n     results\n }\n \n-// A representation of how to write output.\n-pub enum PrintType {\n-    Fancy, // want to output color and the terminal supports it\n-    Basic, // do not want to output color or the terminal does not support color\n-}\n-\n-impl PrintType {\n-    pub fn get(color: Color) -> Self {\n-        match term::stdout() {\n-            Some(ref t) if use_colored_tty(color) && t.supports_color() => PrintType::Fancy,\n-            _ => PrintType::Basic,\n-        }\n-    }\n-}\n-\n pub fn print_diff<F>(diff: Vec<Mismatch>, get_section_title: F, color: Color)\n where\n     F: Fn(u32) -> String,\n {\n-    match PrintType::get(color) {\n-        PrintType::Fancy => print_diff_fancy(diff, get_section_title, term::stdout().unwrap()),\n-        PrintType::Basic => print_diff_basic(diff, get_section_title),\n-    }\n-}\n-\n-fn print_diff_fancy<F>(\n-    diff: Vec<Mismatch>,\n-    get_section_title: F,\n-    mut t: Box<term::Terminal<Output = io::Stdout>>,\n-) where\n-    F: Fn(u32) -> String,\n-{\n-    for mismatch in diff {\n-        let title = get_section_title(mismatch.line_number);\n-        writeln!(t, \"{}\", title).unwrap();\n-\n-        for line in mismatch.lines {\n-            match line {\n-                DiffLine::Context(ref str) => {\n-                    t.reset().unwrap();\n-                    writeln!(t, \" {}\u23ce\", str).unwrap();\n-                }\n-                DiffLine::Expected(ref str) => {\n-                    t.fg(term::color::GREEN).unwrap();\n-                    writeln!(t, \"+{}\u23ce\", str).unwrap();\n-                }\n-                DiffLine::Resulting(ref str) => {\n-                    t.fg(term::color::RED).unwrap();\n-                    writeln!(t, \"-{}\u23ce\", str).unwrap();\n-                }\n-            }\n-        }\n-        t.reset().unwrap();\n-    }\n-}\n+    let mut writer = OutputWriter::new(color);\n \n-pub fn print_diff_basic<F>(diff: Vec<Mismatch>, get_section_title: F)\n-where\n-    F: Fn(u32) -> String,\n-{\n     for mismatch in diff {\n         let title = get_section_title(mismatch.line_number);\n-        println!(\"{}\", title);\n+        writer.writeln(&format!(\"{}\", title), None);\n \n         for line in mismatch.lines {\n             match line {\n-                DiffLine::Context(ref str) => {\n-                    println!(\" {}\u23ce\", str);\n-                }\n+                DiffLine::Context(ref str) => writer.writeln(&format!(\" {}\u23ce\", str), None),\n                 DiffLine::Expected(ref str) => {\n-                    println!(\"+{}\u23ce\", str);\n+                    writer.writeln(&format!(\"+{}\u23ce\", str), Some(term::color::GREEN))\n                 }\n                 DiffLine::Resulting(ref str) => {\n-                    println!(\"-{}\u23ce\", str);\n+                    writer.writeln(&format!(\"-{}\u23ce\", str), Some(term::color::RED))\n                 }\n             }\n         }"}, {"sha": "0671a845b2e1e4e2b21dec41c0a5fe34ed867bca", "filename": "tests/system.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41b14b640a805790f700fbaece4a0ca5ce86a7f3/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b14b640a805790f700fbaece4a0ca5ce86a7f3/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=41b14b640a805790f700fbaece4a0ca5ce86a7f3", "patch": "@@ -106,10 +106,8 @@ fn verify_config_test_names() {\n // using only one or the other will cause the output order to differ when\n // `print_diff` selects the approach not used.\n fn write_message(msg: String) {\n-    match PrintType::get(Color::Auto) {\n-        PrintType::Fancy => writeln!(term::stdout().unwrap(), \"{}\", msg).unwrap(),\n-        PrintType::Basic => println!(\"{}\", msg),\n-    }\n+    let mut writer = OutputWriter::new(Color::Auto);\n+    writer.writeln(&format!(\"{}\", msg), None);\n }\n \n // Integration tests. The files in the tests/source are formatted and compared"}]}