{"sha": "4f536f2c36622328e7eb1d859cb74ba0a7d34ac8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNTM2ZjJjMzY2MjIzMjhlN2ViMWQ4NTljYjc0YmEwYTdkMzRhYzg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-02T07:16:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-02T07:16:41Z"}, "message": "Rollup merge of #73938 - nbdd0121:checked_opt, r=nagisa\n\nOptimise fast path of checked_ops with `unlikely`\n\nThis PR marks paths returning `None` in checked_ops as unlikely to improvde codegen.\n\nFixes #73731", "tree": {"sha": "3eddb414597521e671c76f4c260246a171dbfc64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eddb414597521e671c76f4c260246a171dbfc64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f536f2c36622328e7eb1d859cb74ba0a7d34ac8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/YnaCRBK7hj4Ov3rIwAAdHIIAFxxE0Dago4RnzKF+gI7S096\nmynomxbgEXkWVa/Tt5q6RQ7KViqQndyx4K5g2xDPL1AiGeHfz2SAZIcrqbgtCq1q\nMxMVKrKIgAxHHWb9HvpxYYpmppvSAdu9doiwvab0S2uxh4YYFuDpsKn+eiNhxrjw\n1kUELiTFoS/UuX1n4NOmD7d+X/D6+4KyCBxhVCgGPH8J+towfXkmEcN/MQXLpyvJ\nPBQBRmT/p5QCTmR5j72mUkGf5JAXE7yuor5fqZ7Sm/MnBS2CthDLXSvfj9lI5lHk\nLw57bQyHWI8uosyVSBJUdzRjSu+y8YHpXELzXBd+Hl+JOQsgJGYYLgE1I5cHsJY=\n=mYXf\n-----END PGP SIGNATURE-----\n", "payload": "tree 3eddb414597521e671c76f4c260246a171dbfc64\nparent 061f1c6863f837e5cc11abe98243a93fa866c273\nparent 86d8644c1bfa4b8feddfa588e8e599e420acd040\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593674201 -0700\ncommitter GitHub <noreply@github.com> 1593674201 -0700\n\nRollup merge of #73938 - nbdd0121:checked_opt, r=nagisa\n\nOptimise fast path of checked_ops with `unlikely`\n\nThis PR marks paths returning `None` in checked_ops as unlikely to improvde codegen.\n\nFixes #73731\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f536f2c36622328e7eb1d859cb74ba0a7d34ac8", "html_url": "https://github.com/rust-lang/rust/commit/4f536f2c36622328e7eb1d859cb74ba0a7d34ac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f536f2c36622328e7eb1d859cb74ba0a7d34ac8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "061f1c6863f837e5cc11abe98243a93fa866c273", "url": "https://api.github.com/repos/rust-lang/rust/commits/061f1c6863f837e5cc11abe98243a93fa866c273", "html_url": "https://github.com/rust-lang/rust/commit/061f1c6863f837e5cc11abe98243a93fa866c273"}, {"sha": "86d8644c1bfa4b8feddfa588e8e599e420acd040", "url": "https://api.github.com/repos/rust-lang/rust/commits/86d8644c1bfa4b8feddfa588e8e599e420acd040", "html_url": "https://github.com/rust-lang/rust/commit/86d8644c1bfa4b8feddfa588e8e599e420acd040"}], "stats": {"total": 70, "additions": 43, "deletions": 27}, "files": [{"sha": "f4a1afd436adb7608a9e08695f0c839dccc86fac", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 43, "deletions": 27, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4f536f2c36622328e7eb1d859cb74ba0a7d34ac8/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f536f2c36622328e7eb1d859cb74ba0a7d34ac8/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=4f536f2c36622328e7eb1d859cb74ba0a7d34ac8", "patch": "@@ -21,6 +21,21 @@ macro_rules! try_opt {\n     };\n }\n \n+#[cfg(bootstrap)]\n+macro_rules! unlikely {\n+    ($e: expr) => {\n+        $e\n+    };\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[allow_internal_unstable(const_likely)]\n+macro_rules! unlikely {\n+    ($e: expr) => {\n+        intrinsics::unlikely($e)\n+    };\n+}\n+\n macro_rules! impl_nonzero_fmt {\n     ( #[$stability: meta] ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n         $(\n@@ -746,7 +761,7 @@ $EndFeature, \"\n             #[inline]\n             pub const fn checked_add(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_add(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -790,7 +805,7 @@ $EndFeature, \"\n             #[inline]\n             pub const fn checked_sub(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_sub(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -834,7 +849,7 @@ $EndFeature, \"\n             #[inline]\n             pub const fn checked_mul(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_mul(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -878,7 +893,7 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_div(self, rhs: Self) -> Option<Self> {\n-                if rhs == 0 || (self == Self::MIN && rhs == -1) {\n+                if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n                     None\n                 } else {\n                     // SAFETY: div by zero and by INT_MIN have been checked above\n@@ -907,7 +922,7 @@ assert_eq!((1\", stringify!($SelfT), \").checked_div_euclid(0), None);\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n-                if rhs == 0 || (self == Self::MIN && rhs == -1) {\n+                if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n                     None\n                 } else {\n                     Some(self.div_euclid(rhs))\n@@ -936,7 +951,7 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_rem(self, rhs: Self) -> Option<Self> {\n-                if rhs == 0 || (self == Self::MIN && rhs == -1) {\n+                if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n                     None\n                 } else {\n                     // SAFETY: div by zero and by INT_MIN have been checked above\n@@ -964,7 +979,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem_euclid(-1), None);\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n-                if rhs == 0 || (self == Self::MIN && rhs == -1) {\n+                if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n                     None\n                 } else {\n                     Some(self.rem_euclid(rhs))\n@@ -990,7 +1005,7 @@ $EndFeature, \"\n             #[inline]\n             pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -1014,7 +1029,7 @@ $EndFeature, \"\n             #[inline]\n             pub const fn checked_shl(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shl(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -1038,7 +1053,7 @@ $EndFeature, \"\n             #[inline]\n             pub const fn checked_shr(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shr(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -1745,7 +1760,7 @@ $EndFeature, \"\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n-                if self == Self::MIN && rhs == -1 {\n+                if unlikely!(self == Self::MIN && rhs == -1) {\n                     (self, true)\n                 } else {\n                     (self / rhs, false)\n@@ -1778,7 +1793,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_div_euclid(-1), (\", stringi\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n-                if self == Self::MIN && rhs == -1 {\n+                if unlikely!(self == Self::MIN && rhs == -1) {\n                     (self, true)\n                 } else {\n                     (self.div_euclid(rhs), false)\n@@ -1812,7 +1827,7 @@ $EndFeature, \"\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n-                if self == Self::MIN && rhs == -1 {\n+                if unlikely!(self == Self::MIN && rhs == -1) {\n                     (0, true)\n                 } else {\n                     (self % rhs, false)\n@@ -1845,7 +1860,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem_euclid(-1), (0, true));\n                           without modifying the original\"]\n             #[inline]\n             pub const fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n-                if self == Self::MIN && rhs == -1 {\n+                if unlikely!(self == Self::MIN && rhs == -1) {\n                     (0, true)\n                 } else {\n                     (self.rem_euclid(rhs), false)\n@@ -1876,7 +1891,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_neg(), (\", stringify!($Self\n             #[allow(unused_attributes)]\n             #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             pub const fn overflowing_neg(self) -> (Self, bool) {\n-                if self == Self::MIN {\n+                if unlikely!(self == Self::MIN) {\n                     (Self::MIN, true)\n                 } else {\n                     (-self, false)\n@@ -2988,7 +3003,7 @@ assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\", $EndFeat\n             #[inline]\n             pub const fn checked_add(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_add(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -3030,7 +3045,7 @@ assert_eq!(0\", stringify!($SelfT), \".checked_sub(1), None);\", $EndFeature, \"\n             #[inline]\n             pub const fn checked_sub(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_sub(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -3072,7 +3087,7 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.checked_mul(2), None);\", $EndFeature, \"\n             #[inline]\n             pub const fn checked_mul(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_mul(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -3113,11 +3128,12 @@ assert_eq!(1\", stringify!($SelfT), \".checked_div(0), None);\", $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_div(self, rhs: Self) -> Option<Self> {\n-                match rhs {\n-                    0 => None,\n+                if unlikely!(rhs == 0) {\n+                    None\n+                } else {\n                     // SAFETY: div by zero has been checked above and unsigned types have no other\n                     // failure modes for division\n-                    rhs => Some(unsafe { intrinsics::unchecked_div(self, rhs) }),\n+                    Some(unsafe { intrinsics::unchecked_div(self, rhs) })\n                 }\n             }\n         }\n@@ -3140,7 +3156,7 @@ assert_eq!(1\", stringify!($SelfT), \".checked_div_euclid(0), None);\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n-                if rhs == 0 {\n+                if unlikely!(rhs == 0) {\n                     None\n                 } else {\n                     Some(self.div_euclid(rhs))\n@@ -3167,7 +3183,7 @@ assert_eq!(5\", stringify!($SelfT), \".checked_rem(0), None);\", $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_rem(self, rhs: Self) -> Option<Self> {\n-                if rhs == 0 {\n+                if unlikely!(rhs == 0) {\n                     None\n                 } else {\n                     // SAFETY: div by zero has been checked above and unsigned types have no other\n@@ -3195,7 +3211,7 @@ assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n-                if rhs == 0 {\n+                if unlikely!(rhs == 0) {\n                     None\n                 } else {\n                     Some(self.rem_euclid(rhs))\n@@ -3222,7 +3238,7 @@ assert_eq!(1\", stringify!($SelfT), \".checked_neg(), None);\", $EndFeature, \"\n             #[inline]\n             pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -3245,7 +3261,7 @@ assert_eq!(0x10\", stringify!($SelfT), \".checked_shl(129), None);\", $EndFeature,\n             #[inline]\n             pub const fn checked_shl(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shl(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -3268,7 +3284,7 @@ assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(129), None);\", $EndFeature,\n             #[inline]\n             pub const fn checked_shr(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shr(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n "}]}