{"sha": "62b24c3dd5a54a59a7912be78505ee79f3466d84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYjI0YzNkZDVhNTRhNTlhNzkxMmJlNzg1MDVlZTc5ZjM0NjZkODQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-28T21:45:51Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-28T21:45:51Z"}, "message": "Rollup merge of 21662 - oli-obk:hashmap_enum_json, r=alexcrichton", "tree": {"sha": "199a80ec03deaa502643e1b5295558694246e671", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/199a80ec03deaa502643e1b5295558694246e671"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62b24c3dd5a54a59a7912be78505ee79f3466d84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62b24c3dd5a54a59a7912be78505ee79f3466d84", "html_url": "https://github.com/rust-lang/rust/commit/62b24c3dd5a54a59a7912be78505ee79f3466d84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62b24c3dd5a54a59a7912be78505ee79f3466d84/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "518ce538a9b8e753a35c7552b538410adc0a79ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/518ce538a9b8e753a35c7552b538410adc0a79ad", "html_url": "https://github.com/rust-lang/rust/commit/518ce538a9b8e753a35c7552b538410adc0a79ad"}, {"sha": "82b0b0fcc70593ff13176795f1bc82c86c7c618f", "url": "https://api.github.com/repos/rust-lang/rust/commits/82b0b0fcc70593ff13176795f1bc82c86c7c618f", "html_url": "https://github.com/rust-lang/rust/commit/82b0b0fcc70593ff13176795f1bc82c86c7c618f"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "9a14e738801b5a2fa1c571447868b40ead861a08", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/62b24c3dd5a54a59a7912be78505ee79f3466d84/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b24c3dd5a54a59a7912be78505ee79f3466d84/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=62b24c3dd5a54a59a7912be78505ee79f3466d84", "patch": "@@ -97,7 +97,7 @@\n //!     };\n //!\n //!     // Serialize using `json::encode`\n-//!     let encoded = json::encode(&object);\n+//!     let encoded = json::encode(&object).unwrap();\n //!\n //!     // Deserialize using `json::decode`\n //!     let decoded: TestStruct = json::decode(encoded.as_slice()).unwrap();\n@@ -143,7 +143,7 @@\n //!         uid: 1,\n //!         dsc: \"test\".to_string(),\n //!         val: num.to_json(),\n-//!     });\n+//!     }).unwrap();\n //!     println!(\"data: {}\", data);\n //!     // data: {\"uid\":1,\"dsc\":\"test\",\"val\":\"0.0001+12.539j\"};\n //! }\n@@ -316,13 +316,13 @@ pub fn decode<T: ::Decodable>(s: &str) -> DecodeResult<T> {\n }\n \n /// Shortcut function to encode a `T` into a JSON `String`\n-pub fn encode<T: ::Encodable>(object: &T) -> string::String {\n+pub fn encode<T: ::Encodable>(object: &T) -> Result<string::String, EncoderError> {\n     let mut s = String::new();\n     {\n         let mut encoder = Encoder::new(&mut s);\n-        let _ = object.encode(&mut encoder);\n+        try!(object.encode(&mut encoder));\n     }\n-    s\n+    Ok(s)\n }\n \n impl fmt::Display for ErrorCode {\n@@ -536,7 +536,6 @@ impl<'a> ::Encoder for Encoder<'a> {\n     fn emit_enum<F>(&mut self, _name: &str, f: F) -> EncodeResult where\n         F: FnOnce(&mut Encoder<'a>) -> EncodeResult,\n     {\n-        if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n         f(self)\n     }\n \n@@ -550,10 +549,10 @@ impl<'a> ::Encoder for Encoder<'a> {\n         // enums are encoded as strings or objects\n         // Bunny => \"Bunny\"\n         // Kangaroo(34,\"William\") => {\"variant\": \"Kangaroo\", \"fields\": [34,\"William\"]}\n-        if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n         if cnt == 0 {\n             escape_str(self.writer, name)\n         } else {\n+            if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n             try!(write!(self.writer, \"{{\\\"variant\\\":\"));\n             try!(escape_str(self.writer, name));\n             try!(write!(self.writer, \",\\\"fields\\\":[\"));\n@@ -785,7 +784,6 @@ impl<'a> ::Encoder for PrettyEncoder<'a> {\n     fn emit_enum<F>(&mut self, _name: &str, f: F) -> EncodeResult where\n         F: FnOnce(&mut PrettyEncoder<'a>) -> EncodeResult,\n     {\n-        if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n         f(self)\n     }\n \n@@ -797,10 +795,10 @@ impl<'a> ::Encoder for PrettyEncoder<'a> {\n                             -> EncodeResult where\n         F: FnOnce(&mut PrettyEncoder<'a>) -> EncodeResult,\n     {\n-        if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n         if cnt == 0 {\n             escape_str(self.writer, name)\n         } else {\n+            if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n             try!(write!(self.writer, \"{{\\n\"));\n             self.curr_indent += self.indent;\n             try!(spaces(self.writer, self.curr_indent));\n@@ -3537,6 +3535,24 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_hashmap_with_enum_key() {\n+        use std::collections::HashMap;\n+        use json;\n+        #[derive(RustcEncodable, Eq, Hash, PartialEq, RustcDecodable, Show)]\n+        enum Enum {\n+            Foo,\n+            #[allow(dead_code)]\n+            Bar,\n+        }\n+        let mut map = HashMap::new();\n+        map.insert(Enum::Foo, 0);\n+        let result = json::encode(&map).unwrap();\n+        assert_eq!(&result[], r#\"{\"Foo\":0}\"#);\n+        let decoded: HashMap<Enum, _> = json::decode(result.as_slice()).unwrap();\n+        assert_eq!(map, decoded);\n+    }\n+\n     #[test]\n     fn test_hashmap_with_numeric_key_can_handle_double_quote_delimited_key() {\n         use std::collections::HashMap;"}, {"sha": "0be7b605e5769cf758d87b14eebf6816a8841739", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62b24c3dd5a54a59a7912be78505ee79f3466d84/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b24c3dd5a54a59a7912be78505ee79f3466d84/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=62b24c3dd5a54a59a7912be78505ee79f3466d84", "patch": "@@ -854,7 +854,7 @@ mod test {\n     #[test]\n     fn string_to_tts_1 () {\n         let tts = string_to_tts(\"fn a (b : i32) { b; }\".to_string());\n-        assert_eq!(json::encode(&tts),\n+        assert_eq!(json::encode(&tts).unwrap(),\n         \"[\\\n     {\\\n         \\\"variant\\\":\\\"TtToken\\\",\\"}, {"sha": "a0888850aaf1408104bd6442fb2dc362300b5011", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62b24c3dd5a54a59a7912be78505ee79f3466d84/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b24c3dd5a54a59a7912be78505ee79f3466d84/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=62b24c3dd5a54a59a7912be78505ee79f3466d84", "patch": "@@ -24,7 +24,7 @@ struct A {\n \n fn main() {\n     let obj = A { foo: box [true, false] };\n-    let s = json::encode(&obj);\n+    let s = json::encode(&obj).unwrap();\n     let obj2: A = json::decode(s.as_slice()).unwrap();\n     assert!(obj.foo == obj2.foo);\n }"}, {"sha": "a5453d26170ad62833dfa45d88d3d6583bc3ea78", "filename": "src/test/run-pass/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62b24c3dd5a54a59a7912be78505ee79f3466d84/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b24c3dd5a54a59a7912be78505ee79f3466d84/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs?ref=62b24c3dd5a54a59a7912be78505ee79f3466d84", "patch": "@@ -35,7 +35,7 @@ fn main() {\n         foo: Cell::new(true),\n         bar: RefCell::new( A { baz: 2 } )\n     };\n-    let s = json::encode(&obj);\n+    let s = json::encode(&obj).unwrap();\n     let obj2: B = json::decode(s.as_slice()).unwrap();\n     assert!(obj.foo.get() == obj2.foo.get());\n     assert!(obj.bar.borrow().baz == obj2.bar.borrow().baz);"}, {"sha": "8c4dd7ddc9a3144bc13e5df294248651ec1a8ba1", "filename": "src/test/run-pass/issue-14021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62b24c3dd5a54a59a7912be78505ee79f3466d84/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b24c3dd5a54a59a7912be78505ee79f3466d84/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14021.rs?ref=62b24c3dd5a54a59a7912be78505ee79f3466d84", "patch": "@@ -20,7 +20,7 @@ struct UnitLikeStruct;\n \n pub fn main() {\n     let obj = UnitLikeStruct;\n-    let json_str: String = json::encode(&obj);\n+    let json_str: String = json::encode(&obj).unwrap();\n \n     let json_object = json::from_str(json_str.as_slice());\n     let mut decoder = json::Decoder::new(json_object.unwrap());"}]}