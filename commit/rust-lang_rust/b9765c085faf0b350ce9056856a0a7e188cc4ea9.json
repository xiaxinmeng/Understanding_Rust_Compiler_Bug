{"sha": "b9765c085faf0b350ce9056856a0a7e188cc4ea9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NzY1YzA4NWZhZjBiMzUwY2U5MDU2ODU2YTBhN2UxODhjYzRlYTk=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-01-19T16:32:55Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-01-19T23:02:29Z"}, "message": "trans: Exit earlier from base::trans_crate() when compiling rmeta crates.", "tree": {"sha": "bf69b44441b89c9a63ef64f19169fe64dd206309", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf69b44441b89c9a63ef64f19169fe64dd206309"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9765c085faf0b350ce9056856a0a7e188cc4ea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9765c085faf0b350ce9056856a0a7e188cc4ea9", "html_url": "https://github.com/rust-lang/rust/commit/b9765c085faf0b350ce9056856a0a7e188cc4ea9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9765c085faf0b350ce9056856a0a7e188cc4ea9/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c42ac173bee900979870ed986c760596d1fbdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c42ac173bee900979870ed986c760596d1fbdb", "html_url": "https://github.com/rust-lang/rust/commit/74c42ac173bee900979870ed986c760596d1fbdb"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "e4d22b76a75a4bfa93009fd08460ff29aeb7c1c8", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b9765c085faf0b350ce9056856a0a7e188cc4ea9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9765c085faf0b350ce9056856a0a7e188cc4ea9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=b9765c085faf0b350ce9056856a0a7e188cc4ea9", "patch": "@@ -667,7 +667,8 @@ pub fn run_passes(sess: &Session,\n \n     // Sanity check\n     assert!(trans.modules.len() == sess.opts.cg.codegen_units ||\n-            sess.opts.debugging_opts.incremental.is_some());\n+            sess.opts.debugging_opts.incremental.is_some() ||\n+            !sess.opts.output_types.should_trans());\n \n     let tm = create_target_machine(sess);\n \n@@ -756,7 +757,7 @@ pub fn run_passes(sess: &Session,\n     //       the compiler decides the number of codegen units (and will\n     //       potentially create hundreds of them).\n     let num_workers = work_items.len() - 1;\n-    if num_workers == 1 {\n+    if num_workers <= 1 {\n         run_work_singlethreaded(sess, &trans.exported_symbols, work_items);\n     } else {\n         run_work_multithreaded(sess, work_items, num_workers);"}, {"sha": "d006dccbccc58ef7bdea42d0866b0d9819014530", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b9765c085faf0b350ce9056856a0a7e188cc4ea9/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9765c085faf0b350ce9056856a0a7e188cc4ea9/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=b9765c085faf0b350ce9056856a0a7e188cc4ea9", "patch": "@@ -1145,6 +1145,23 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     };\n     let no_builtins = attr::contains_name(&krate.attrs, \"no_builtins\");\n \n+    // Skip crate items and just output metadata in -Z no-trans mode.\n+    if tcx.sess.opts.debugging_opts.no_trans ||\n+       !tcx.sess.opts.output_types.should_trans() {\n+        let empty_exported_symbols = ExportedSymbols::empty();\n+        let linker_info = LinkerInfo::new(&shared_ccx, &empty_exported_symbols);\n+        return CrateTranslation {\n+            modules: vec![],\n+            metadata_module: metadata_module,\n+            link: link_meta,\n+            metadata: metadata,\n+            exported_symbols: empty_exported_symbols,\n+            no_builtins: no_builtins,\n+            linker_info: linker_info,\n+            windows_subsystem: None,\n+        };\n+    }\n+\n     // Run the translation item collector and partition the collected items into\n     // codegen units.\n     let (codegen_units, symbol_map) = collect_and_partition_translation_items(&shared_ccx);\n@@ -1181,22 +1198,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     assert_module_sources::assert_module_sources(tcx, &modules);\n \n-    // Skip crate items and just output metadata in -Z no-trans mode.\n-    if tcx.sess.opts.debugging_opts.no_trans ||\n-       tcx.sess.opts.output_types.contains_key(&config::OutputType::Metadata) {\n-        let linker_info = LinkerInfo::new(&shared_ccx, &ExportedSymbols::empty());\n-        return CrateTranslation {\n-            modules: modules,\n-            metadata_module: metadata_module,\n-            link: link_meta,\n-            metadata: metadata,\n-            exported_symbols: ExportedSymbols::empty(),\n-            no_builtins: no_builtins,\n-            linker_info: linker_info,\n-            windows_subsystem: None,\n-        };\n-    }\n-\n     // Instantiate translation items without filling out definitions yet...\n     for ccx in crate_context_list.iter_need_trans() {\n         let cgu = ccx.codegen_unit();"}]}