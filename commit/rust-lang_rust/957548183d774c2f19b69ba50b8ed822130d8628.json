{"sha": "957548183d774c2f19b69ba50b8ed822130d8628", "node_id": "C_kwDOAAsO6NoAKDk1NzU0ODE4M2Q3NzRjMmYxOWI2OWJhNTBiOGVkODIyMTMwZDg2Mjg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-12T23:58:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-01T19:39:26Z"}, "message": "Remove trait_of_item query.", "tree": {"sha": "25242bfbca791f44efaf80aa0a0d535d6c0d52cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25242bfbca791f44efaf80aa0a0d535d6c0d52cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/957548183d774c2f19b69ba50b8ed822130d8628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/957548183d774c2f19b69ba50b8ed822130d8628", "html_url": "https://github.com/rust-lang/rust/commit/957548183d774c2f19b69ba50b8ed822130d8628", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/957548183d774c2f19b69ba50b8ed822130d8628/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7ea161b7e71f6a76868b1566bad31c1ca52824c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ea161b7e71f6a76868b1566bad31c1ca52824c", "html_url": "https://github.com/rust-lang/rust/commit/d7ea161b7e71f6a76868b1566bad31c1ca52824c"}], "stats": {"total": 61, "additions": 25, "deletions": 36}, "files": [{"sha": "0adb88a180f8becdb183157af41c32965b2c9521", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=957548183d774c2f19b69ba50b8ed822130d8628", "patch": "@@ -772,7 +772,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                             let mut nonconst_call_permission = false;\n                             if let Some(callee_trait) = tcx.trait_of_item(callee)\n                                 && tcx.has_attr(callee_trait, sym::const_trait)\n-                                && Some(callee_trait) == tcx.trait_of_item(caller)\n+                                && Some(callee_trait) == tcx.trait_of_item(caller.to_def_id())\n                                 // Can only call methods when it's `<Self as TheTrait>::f`.\n                                 && tcx.types.self_param == substs.type_at(0)\n                             {"}, {"sha": "710c4a01b244f81e79fe37c1eaa1d49ad591551d", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=957548183d774c2f19b69ba50b8ed822130d8628", "patch": "@@ -80,7 +80,7 @@ const BASE_STRUCT: &[&str] =\n /// Extra `DepNode`s for functions and methods.\n const EXTRA_ASSOCIATED: &[&str] = &[label_strs::associated_item];\n \n-const EXTRA_TRAIT: &[&str] = &[label_strs::trait_of_item];\n+const EXTRA_TRAIT: &[&str] = &[];\n \n // Fully Built Labels\n "}, {"sha": "40dc4fb052d9652767243e185465767954979847", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=957548183d774c2f19b69ba50b8ed822130d8628", "patch": "@@ -1303,19 +1303,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {\n-        let def_key = self.def_key(id);\n-        match def_key.disambiguated_data.data {\n-            DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),\n-            // Not an associated item\n-            _ => return None,\n-        }\n-        def_key.parent.and_then(|parent_index| match self.kind(parent_index) {\n-            EntryKind::Trait | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),\n-            _ => None,\n-        })\n-    }\n-\n     fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {\n         self.root.native_libraries.decode((self, sess))\n     }"}, {"sha": "38ce50e8323b173379e3feb956a3d6edd1b1a1a4", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=957548183d774c2f19b69ba50b8ed822130d8628", "patch": "@@ -235,7 +235,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     item_attrs => { tcx.arena.alloc_from_iter(cdata.get_item_attrs(def_id.index, tcx.sess)) }\n-    trait_of_item => { cdata.get_trait_of_item(def_id.index) }\n     is_mir_available => { cdata.is_item_mir_available(def_id.index) }\n     is_ctfe_mir_available => { cdata.is_ctfe_mir_available(def_id.index) }\n "}, {"sha": "d8483e7e40914eb3d64053f5c39817e879d76007", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=957548183d774c2f19b69ba50b8ed822130d8628", "patch": "@@ -1147,14 +1147,6 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    /// Given an `associated_item`, find the trait it belongs to.\n-    /// Return `None` if the `DefId` is not an associated item.\n-    query trait_of_item(associated_item: DefId) -> Option<DefId> {\n-        desc { |tcx| \"finding trait defining `{}`\", tcx.def_path_str(associated_item) }\n-        cache_on_disk_if { associated_item.is_local() }\n-        separate_provide_extern\n-    }\n-\n     query is_ctfe_mir_available(key: DefId) -> bool {\n         desc { |tcx| \"checking if item has ctfe mir available: `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }"}, {"sha": "1978f84c137065c6f1d440caaf5ef0915fdf6140", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=957548183d774c2f19b69ba50b8ed822130d8628", "patch": "@@ -2191,10 +2191,29 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.impl_trait_ref(def_id).map(|tr| tr.def_id)\n     }\n \n+    /// If the given `DefId` describes an item belonging to a trait,\n+    /// returns the `DefId` of the trait that the trait item belongs to;\n+    /// otherwise, returns `None`.\n+    pub fn trait_of_item(self, def_id: DefId) -> Option<DefId> {\n+        if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {\n+            let parent = self.parent(def_id);\n+            if let DefKind::Trait | DefKind::TraitAlias = self.def_kind(parent) {\n+                return Some(parent);\n+            }\n+        }\n+        None\n+    }\n+\n     /// If the given `DefId` describes a method belonging to an impl, returns the\n     /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.\n     pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {\n-        self.opt_associated_item(def_id).and_then(|trait_item| trait_item.impl_container(self))\n+        if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {\n+            let parent = self.parent(def_id);\n+            if let DefKind::Impl = self.def_kind(parent) {\n+                return Some(parent);\n+            }\n+        }\n+        None\n     }\n \n     /// If the given `DefId` belongs to a trait that was automatically derived, returns `true`."}, {"sha": "54d549fd66c95b2ce39cf40c8be61858cda61825", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=957548183d774c2f19b69ba50b8ed822130d8628", "patch": "@@ -14,7 +14,7 @@ pub(crate) fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n \n     if let DefKind::Fn | DefKind::AssocFn = tcx.def_kind(def_id) {\n         // If this is trait/impl method, extract the trait's substs.\n-        let trait_substs = match tcx.trait_of_item(def_id) {\n+        let trait_substs = match tcx.trait_of_item(def_id.to_def_id()) {\n             Some(trait_def_id) => {\n                 let trait_substs_count = tcx.generics_of(trait_def_id).count();\n                 &InternalSubsts::identity_for_item(tcx, def_id.to_def_id())[..trait_substs_count]"}, {"sha": "70518284cf91439ce218819084e699fcb79d59c9", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=957548183d774c2f19b69ba50b8ed822130d8628", "patch": "@@ -97,7 +97,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n \n             // If the function belongs to a trait, then it must enable the const_trait_impl\n             // feature to use that trait function (with a const default body).\n-            if tcx.trait_of_item(def_id).is_some() {\n+            if tcx.trait_of_item(def_id.to_def_id()).is_some() {\n                 return true;\n             }\n "}, {"sha": "e442c5c9189acfad504dfc5a433c5fb275f71ed3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=957548183d774c2f19b69ba50b8ed822130d8628", "patch": "@@ -2129,7 +2129,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                             }\n                         ] = path.segments\n                         && data.trait_ref.def_id == *trait_id\n-                        && self.tcx.trait_of_item(item_id) == Some(*trait_id)\n+                        && self.tcx.trait_of_item(*item_id) == Some(*trait_id)\n                         && !self.is_tainted_by_errors()\n                     {\n                         let (verb, noun) = match self.tcx.associated_item(item_id).kind {"}, {"sha": "515a73ead777ac61763f2d2c20d8d5f41533f8b4", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957548183d774c2f19b69ba50b8ed822130d8628/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=957548183d774c2f19b69ba50b8ed822130d8628", "patch": "@@ -9,7 +9,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         associated_item_def_ids,\n         associated_items,\n         impl_item_implementor_ids,\n-        trait_of_item,\n         ..*providers\n     };\n }\n@@ -40,13 +39,6 @@ fn impl_item_implementor_ids(tcx: TyCtxt<'_>, impl_id: DefId) -> FxHashMap<DefId\n         .collect()\n }\n \n-/// If the given `DefId` describes an item belonging to a trait,\n-/// returns the `DefId` of the trait that the trait item belongs to;\n-/// otherwise, returns `None`.\n-fn trait_of_item(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n-    tcx.opt_associated_item(def_id).and_then(|associated_item| associated_item.trait_container(tcx))\n-}\n-\n fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n     let id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n     let parent_def_id = tcx.hir().get_parent_item(id);"}]}