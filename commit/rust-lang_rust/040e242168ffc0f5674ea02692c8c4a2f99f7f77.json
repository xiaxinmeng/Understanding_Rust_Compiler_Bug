{"sha": "040e242168ffc0f5674ea02692c8c4a2f99f7f77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MGUyNDIxNjhmZmMwZjU2NzRlYTAyNjkyYzhjNGEyZjk5ZjdmNzc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-16T00:37:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-16T00:37:23Z"}, "message": "Rollup merge of #72090 - RalfJung:rustc_driver-exit-code, r=oli-obk\n\nrustc_driver: factor out computing the exit code\n\nIn a recent Miri PR I [added a convenience wrapper](https://github.com/rust-lang/miri/pull/1405/files#diff-c3d602c5c8035a16699ce9c015bfeceaR125) around `catch_fatal_errors` and `run_compiler` that @oli-obk suggested I could upstream. However, after seeing what could be shared between `rustc_driver::main`, clippy and Miri, really the only thing I found is computing the exit code -- so that's what this PR does.\n\nWhat prevents using the Miri convenience function in `rustc_driver::main` and clippy is that they do extra work inside `catch_fatal_errors`, and while I could abstract that away, clippy actually *computes the callbacks* inside there, and I fond no good way to abstract that and thus gave up. Maybe the clippy thing could be moved out, I am not sure if it ever can actually raise a `FatalErrorMarker` -- someone more knowledgeable in clippy would have to do that.", "tree": {"sha": "7da3a71552d630e078d169ca730f40a0ae897b08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7da3a71552d630e078d169ca730f40a0ae897b08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/040e242168ffc0f5674ea02692c8c4a2f99f7f77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJevzXDCRBK7hj4Ov3rIwAAdHIIAJ+ch1A9NbI1S1FUUv40YaiM\n7ZCNGIWMmZoxwmCW44QdDzs1YFJeK5udMthPdJ1QcQPMbXXUTkPq4mqPpUcpBh42\n70wpjQkTc15hYHNO+hf+/eWrPOmXiVhm/VlxnbumA/myB4cnRuEna0RkjT74mhRg\n3PZgpxieLVrIY1pK9ZnavVimpLNRfujCuzldoKOHG4d2LPCWnZ7ltDda5rFzgt1G\nSDlrEvkK1/qxms0yfSCI8K9fcClWKr/yMw9UfD2FqJKSyIGjvR8CMHloSbO06pUF\nIL3hWBr60Ok27pWfSPtoS7k/63tRSaQGA1+/uBODBru3q3F492CMsiAOkvXMvys=\n=FqsJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 7da3a71552d630e078d169ca730f40a0ae897b08\nparent badcf267df6ecfc62a765eea0e03d1ccf0cd3d02\nparent 51e466de3cbfb94b7d0736066a765d8ea31394e4\nauthor Dylan DPC <dylan.dpc@gmail.com> 1589589443 +0200\ncommitter GitHub <noreply@github.com> 1589589443 +0200\n\nRollup merge of #72090 - RalfJung:rustc_driver-exit-code, r=oli-obk\n\nrustc_driver: factor out computing the exit code\n\nIn a recent Miri PR I [added a convenience wrapper](https://github.com/rust-lang/miri/pull/1405/files#diff-c3d602c5c8035a16699ce9c015bfeceaR125) around `catch_fatal_errors` and `run_compiler` that @oli-obk suggested I could upstream. However, after seeing what could be shared between `rustc_driver::main`, clippy and Miri, really the only thing I found is computing the exit code -- so that's what this PR does.\n\nWhat prevents using the Miri convenience function in `rustc_driver::main` and clippy is that they do extra work inside `catch_fatal_errors`, and while I could abstract that away, clippy actually *computes the callbacks* inside there, and I fond no good way to abstract that and thus gave up. Maybe the clippy thing could be moved out, I am not sure if it ever can actually raise a `FatalErrorMarker` -- someone more knowledgeable in clippy would have to do that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/040e242168ffc0f5674ea02692c8c4a2f99f7f77", "html_url": "https://github.com/rust-lang/rust/commit/040e242168ffc0f5674ea02692c8c4a2f99f7f77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/040e242168ffc0f5674ea02692c8c4a2f99f7f77/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "url": "https://api.github.com/repos/rust-lang/rust/commits/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "html_url": "https://github.com/rust-lang/rust/commit/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02"}, {"sha": "51e466de3cbfb94b7d0736066a765d8ea31394e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e466de3cbfb94b7d0736066a765d8ea31394e4", "html_url": "https://github.com/rust-lang/rust/commit/51e466de3cbfb94b7d0736066a765d8ea31394e4"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "6847b175e60ebdb4b779a249fe8dfd933e5375d6", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/040e242168ffc0f5674ea02692c8c4a2f99f7f77/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040e242168ffc0f5674ea02692c8c4a2f99f7f77/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=040e242168ffc0f5674ea02692c8c4a2f99f7f77", "patch": "@@ -1138,6 +1138,16 @@ pub fn catch_fatal_errors<F: FnOnce() -> R, R>(f: F) -> Result<R, ErrorReported>\n     })\n }\n \n+/// Variant of `catch_fatal_errors` for the `interface::Result` return type\n+/// that also computes the exit code.\n+pub fn catch_with_exit_code(f: impl FnOnce() -> interface::Result<()>) -> i32 {\n+    let result = catch_fatal_errors(f).and_then(|result| result);\n+    match result {\n+        Ok(()) => EXIT_SUCCESS,\n+        Err(_) => EXIT_FAILURE,\n+    }\n+}\n+\n lazy_static! {\n     static ref DEFAULT_HOOK: Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static> = {\n         let hook = panic::take_hook();\n@@ -1228,12 +1238,12 @@ pub fn init_rustc_env_logger() {\n     env_logger::init_from_env(\"RUSTC_LOG\");\n }\n \n-pub fn main() {\n+pub fn main() -> ! {\n     let start = Instant::now();\n     init_rustc_env_logger();\n     let mut callbacks = TimePassesCallbacks::default();\n     install_ice_hook();\n-    let result = catch_fatal_errors(|| {\n+    let exit_code = catch_with_exit_code(|| {\n         let args = env::args_os()\n             .enumerate()\n             .map(|(i, arg)| {\n@@ -1246,13 +1256,8 @@ pub fn main() {\n             })\n             .collect::<Vec<_>>();\n         run_compiler(&args, &mut callbacks, None, None)\n-    })\n-    .and_then(|result| result);\n-    let exit_code = match result {\n-        Ok(_) => EXIT_SUCCESS,\n-        Err(_) => EXIT_FAILURE,\n-    };\n+    });\n     // The extra `\\t` is necessary to align this label with the others.\n     print_time_passes_entry(callbacks.time_passes, \"\\ttotal\", start.elapsed());\n-    process::exit(exit_code);\n+    process::exit(exit_code)\n }"}, {"sha": "1ce0300f23904c6a9dc80004cfd3bf3959725472", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/040e242168ffc0f5674ea02692c8c4a2f99f7f77/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040e242168ffc0f5674ea02692c8c4a2f99f7f77/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=040e242168ffc0f5674ea02692c8c4a2f99f7f77", "patch": "@@ -296,7 +296,7 @@ pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n     lazy_static::initialize(&ICE_HOOK);\n     exit(\n-        rustc_driver::catch_fatal_errors(move || {\n+        rustc_driver::catch_with_exit_code(move || {\n             let mut orig_args: Vec<String> = env::args().collect();\n \n             if orig_args.iter().any(|a| a == \"--version\" || a == \"-V\") {\n@@ -411,7 +411,5 @@ pub fn main() {\n                 if clippy_enabled { &mut clippy } else { &mut default };\n             rustc_driver::run_compiler(&args, callbacks, None, None)\n         })\n-        .and_then(|result| result)\n-        .is_err() as i32,\n     )\n }"}]}