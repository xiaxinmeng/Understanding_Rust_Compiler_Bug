{"sha": "ac1a27043a7481676502e383716e20c017122bcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMWEyNzA0M2E3NDgxNjc2NTAyZTM4MzcxNmUyMGMwMTcxMjJiY2I=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-11T04:27:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-14T00:24:08Z"}, "message": "syntax: Fix parsing << with closure types\n\nThis uses the trick of replacing the << token with a < token to parse closure\ntypes correctly.\n\nCloses #13324", "tree": {"sha": "10d6541971fbf080a023b29a64bb2b8782463ff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10d6541971fbf080a023b29a64bb2b8782463ff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac1a27043a7481676502e383716e20c017122bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac1a27043a7481676502e383716e20c017122bcb", "html_url": "https://github.com/rust-lang/rust/commit/ac1a27043a7481676502e383716e20c017122bcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac1a27043a7481676502e383716e20c017122bcb/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "042c8ae40e0bb642263d8b891ef7a0d4e81fe819", "url": "https://api.github.com/repos/rust-lang/rust/commits/042c8ae40e0bb642263d8b891ef7a0d4e81fe819", "html_url": "https://github.com/rust-lang/rust/commit/042c8ae40e0bb642263d8b891ef7a0d4e81fe819"}], "stats": {"total": 78, "additions": 71, "deletions": 7}, "files": [{"sha": "92e5f8da6aa7ec78a8f13a3908236f7225d10dfd", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ac1a27043a7481676502e383716e20c017122bcb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1a27043a7481676502e383716e20c017122bcb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ac1a27043a7481676502e383716e20c017122bcb", "patch": "@@ -587,16 +587,64 @@ impl<'a> Parser<'a> {\n                 self.replace_token(token::BINOP(token::OR), lo, self.span.hi)\n             }\n             _ => {\n-                let token_str = self.this_token_to_str();\n-                let found_token =\n+                let found_token = self.this_token_to_str();\n+                let token_str =\n                     Parser::token_to_str(&token::BINOP(token::OR));\n                 self.fatal(format!(\"expected `{}`, found `{}`\",\n-                                   found_token,\n-                                   token_str))\n+                                   token_str, found_token))\n             }\n         }\n     }\n \n+    // Attempt to consume a `<`. If `<<` is seen, replace it with a single\n+    // `<` and continue. If a `<` is not seen, return false.\n+    //\n+    // This is meant to be used when parsing generics on a path to get the\n+    // starting token. The `force` parameter is used to forcefully break up a\n+    // `<<` token. If `force` is false, then `<<` is only broken when a lifetime\n+    // shows up next. For example, consider the expression:\n+    //\n+    //      foo as bar << test\n+    //\n+    // The parser needs to know if `bar <<` is the start of a generic path or if\n+    // it's a left-shift token. If `test` were a lifetime, then it's impossible\n+    // for the token to be a left-shift, but if it's not a lifetime, then it's\n+    // considered a left-shift.\n+    //\n+    // The reason for this is that the only current ambiguity with `<<` is when\n+    // parsing closure types:\n+    //\n+    //      foo::<<'a> ||>();\n+    //      impl Foo<<'a> ||>() { ... }\n+    fn eat_lt(&mut self, force: bool) -> bool {\n+        match self.token {\n+            token::LT => { self.bump(); true }\n+            token::BINOP(token::SHL) => {\n+                let next_lifetime = self.look_ahead(1, |t| match *t {\n+                    token::LIFETIME(..) => true,\n+                    _ => false,\n+                });\n+                if force || next_lifetime {\n+                    let lo = self.span.lo + BytePos(1);\n+                    self.replace_token(token::LT, lo, self.span.hi);\n+                    true\n+                } else {\n+                    false\n+                }\n+            }\n+            _ => false,\n+        }\n+    }\n+\n+    fn expect_lt(&mut self) {\n+        if !self.eat_lt(true) {\n+            let found_token = self.this_token_to_str();\n+            let token_str = Parser::token_to_str(&token::LT);\n+            self.fatal(format!(\"expected `{}`, found `{}`\",\n+                               token_str, found_token))\n+        }\n+    }\n+\n     // Parse a sequence bracketed by `|` and `|`, stopping before the `|`.\n     fn parse_seq_to_before_or<T>(\n                               &mut self,\n@@ -1500,7 +1548,7 @@ impl<'a> Parser<'a> {\n \n             // Parse the `<` before the lifetime and types, if applicable.\n             let (any_lifetime_or_types, lifetimes, types) = {\n-                if mode != NoTypesAllowed && self.eat(&token::LT) {\n+                if mode != NoTypesAllowed && self.eat_lt(false) {\n                     let (lifetimes, types) =\n                         self.parse_generic_values_after_lt();\n                     (true, lifetimes, OwnedSlice::from_vec(types))\n@@ -1948,7 +1996,7 @@ impl<'a> Parser<'a> {\n                     hi = self.span.hi;\n                     self.bump();\n                     let (_, tys) = if self.eat(&token::MOD_SEP) {\n-                        self.expect(&token::LT);\n+                        self.expect_lt();\n                         self.parse_generic_values_after_lt()\n                     } else {\n                         (Vec::new(), Vec::new())"}, {"sha": "74ce8ef2e453162e18315081926b65adc525b25b", "filename": "src/test/run-pass/borrowck-pat-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac1a27043a7481676502e383716e20c017122bcb/src%2Ftest%2Frun-pass%2Fborrowck-pat-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1a27043a7481676502e383716e20c017122bcb/src%2Ftest%2Frun-pass%2Fborrowck-pat-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-pat-enum.rs?ref=ac1a27043a7481676502e383716e20c017122bcb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty\n+\n fn match_ref(v: Option<int>) -> int {\n     match v {\n       Some(ref i) => {"}, {"sha": "2bb0e6fa19c1590e95e1e0845d639e140c208631", "filename": "src/test/run-pass/closure-syntax.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ac1a27043a7481676502e383716e20c017122bcb/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1a27043a7481676502e383716e20c017122bcb/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs?ref=ac1a27043a7481676502e383716e20c017122bcb", "patch": "@@ -43,6 +43,12 @@ fn g<'a>(a: &'a int, f: proc<'b>(&'b int) -> &'b int) -> &'a int {\n     f(a)\n }\n \n+struct A;\n+\n+impl A {\n+    fn foo<T>(&self) {}\n+}\n+\n fn bar<'b>() {\n     foo::<||>();\n     foo::<|| -> ()>();\n@@ -58,17 +64,25 @@ fn bar<'b>() {\n     foo::<proc():Share>();\n     foo::<proc<'a>(int, f32, &'a int):'static + Share -> &'a int>();\n \n+    foo::<<'a>||>();\n+\n     // issue #11209\n     let _: ||: 'b; // for comparison\n     let _: <'a> ||;\n \n     let _: Option<||:'b>;\n-    // let _: Option<<'a>||>;\n+    let _: Option<<'a>||>;\n     let _: Option< <'a>||>;\n \n     // issue #11210\n     let _: ||: 'static;\n+\n+    let a = A;\n+    a.foo::<<'a>||>();\n }\n \n+struct B<T>;\n+impl<'b> B<<'a>||: 'b> {}\n+\n pub fn main() {\n }"}]}