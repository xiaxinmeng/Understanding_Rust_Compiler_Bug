{"sha": "d42e75883bda9a3f74c541edd0b070a82303d8f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MmU3NTg4M2JkYTlhM2Y3NGM1NDFlZGQwYjA3MGE4MjMwM2Q4ZjE=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-01-14T01:34:23Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-01-14T01:52:44Z"}, "message": "librustc: Don't translate an expr twice when implicitly coercing to a trait object. Fixes #11197.", "tree": {"sha": "418b101fb6a579ee3726542ffcc08cdbcc4eaafc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/418b101fb6a579ee3726542ffcc08cdbcc4eaafc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d42e75883bda9a3f74c541edd0b070a82303d8f1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d42e75883bda9a3f74c541edd0b070a82303d8f1", "html_url": "https://github.com/rust-lang/rust/commit/d42e75883bda9a3f74c541edd0b070a82303d8f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d42e75883bda9a3f74c541edd0b070a82303d8f1/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17f984c54b1bb5904dc4e833f69e7dbe83234d5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/17f984c54b1bb5904dc4e833f69e7dbe83234d5a", "html_url": "https://github.com/rust-lang/rust/commit/17f984c54b1bb5904dc4e833f69e7dbe83234d5a"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "8d3b953af1829898664d80cdf9597150f2215be6", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d42e75883bda9a3f74c541edd0b070a82303d8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d42e75883bda9a3f74c541edd0b070a82303d8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=d42e75883bda9a3f74c541edd0b070a82303d8f1", "patch": "@@ -229,19 +229,12 @@ pub fn trans_to_datum<'a>(bcx: &'a Block<'a>, expr: &ast::Expr)\n                 }\n             };\n         }\n-        AutoObject(ref sigil, ref region, _, _, _, _) => {\n+        AutoObject(..) => {\n \n             let adjusted_ty = ty::expr_ty_adjusted(bcx.tcx(), expr);\n             let scratch = scratch_datum(bcx, adjusted_ty, \"__adjust\", false);\n \n-            let trait_store = match *sigil {\n-                ast::BorrowedSigil => ty::RegionTraitStore(region.expect(\"expected valid region\")),\n-                ast::OwnedSigil => ty::UniqTraitStore,\n-                ast::ManagedSigil => ty::BoxTraitStore\n-            };\n-\n-            bcx = meth::trans_trait_cast(bcx, expr, expr.id, SaveIn(scratch.val),\n-                                         trait_store, false /* no adjustments */);\n+            bcx = meth::trans_trait_cast(bcx, expr, expr.id, SaveIn(scratch.val), Some(datum));\n \n             datum = scratch.to_appropriate_datum(bcx);\n             datum.add_clean(bcx);\n@@ -834,9 +827,9 @@ fn trans_rvalue_dps_unadjusted<'a>(\n         }\n         ast::ExprCast(val, _) => {\n             match ty::get(node_id_type(bcx, expr.id)).sty {\n-                ty::ty_trait(_, _, store, _, _) => {\n+                ty::ty_trait(..) => {\n                     return meth::trans_trait_cast(bcx, val, expr.id,\n-                                                  dest, store, true /* adjustments */);\n+                                                  dest, None);\n                 }\n                 _ => {\n                     bcx.tcx().sess.span_bug(expr.span,"}, {"sha": "f8aef908381189349342f8c93901c7bd318c5072", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d42e75883bda9a3f74c541edd0b070a82303d8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d42e75883bda9a3f74c541edd0b070a82303d8f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=d42e75883bda9a3f74c541edd0b070a82303d8f1", "patch": "@@ -637,22 +637,14 @@ pub fn trans_trait_cast<'a>(\n                         val: &ast::Expr,\n                         id: ast::NodeId,\n                         dest: expr::Dest,\n-                        _store: ty::TraitStore,\n-                        do_adjustments: bool)\n+                        obj: Option<Datum>)\n                         -> &'a Block<'a> {\n     let mut bcx = bcx;\n     let _icx = push_ctxt(\"impl::trans_cast\");\n \n-    // Pick the right trans function\n-    let trans_into = if do_adjustments {\n-        expr::trans_into\n-    } else {\n-        expr::trans_into_unadjusted\n-    };\n-\n     let lldest = match dest {\n         Ignore => {\n-            return trans_into(bcx, val, Ignore);\n+            return expr::trans_into(bcx, val, Ignore);\n         }\n         SaveIn(dest) => dest\n     };\n@@ -667,7 +659,12 @@ pub fn trans_trait_cast<'a>(\n     llboxdest = PointerCast(bcx,\n                             llboxdest,\n                             type_of(bcx.ccx(), v_ty).ptr_to());\n-    bcx = trans_into(bcx, val, SaveIn(llboxdest));\n+    bcx = match obj {\n+        Some(datum) => {\n+            datum.store_to_dest(bcx, SaveIn(llboxdest))\n+        }\n+        None => expr::trans_into(bcx, val, SaveIn(llboxdest))\n+    };\n \n     // Store the vtable into the pair or triple.\n     // This is structured a bit funny because of dynamic borrow failures."}, {"sha": "365831eda83dfc2d7049cf026545d9b68ec3653d", "filename": "src/test/run-pass/trait-coercion.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d42e75883bda9a3f74c541edd0b070a82303d8f1/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d42e75883bda9a3f74c541edd0b070a82303d8f1/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs?ref=d42e75883bda9a3f74c541edd0b070a82303d8f1", "patch": "@@ -10,6 +10,8 @@\n \n #[feature(managed_boxes)];\n \n+use std::io;\n+\n trait Trait {\n     fn f(&self);\n }\n@@ -29,6 +31,10 @@ fn f(x: @Trait) {\n     x.f();\n }\n \n+fn foo(mut a: ~Writer) {\n+    a.write(bytes!(\"Hello\\n\"));\n+}\n+\n pub fn main() {\n     let a = Struct { x: 1, y: 2 };\n     let b: @Trait = @a;\n@@ -38,5 +44,8 @@ pub fn main() {\n     let d: &Trait = &a;\n     d.f();\n     f(@a);\n+\n+    let out = io::stdout();\n+    foo(~out);\n }\n "}]}