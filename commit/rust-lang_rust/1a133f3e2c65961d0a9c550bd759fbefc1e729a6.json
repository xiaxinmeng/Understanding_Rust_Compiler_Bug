{"sha": "1a133f3e2c65961d0a9c550bd759fbefc1e729a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMTMzZjNlMmM2NTk2MWQwYTljNTUwYmQ3NTlmYmVmYzFlNzI5YTY=", "commit": {"author": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2015-02-14T01:41:49Z"}, "committer": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2015-02-16T14:32:07Z"}, "message": "Document std::num::Float with examples", "tree": {"sha": "1ee05554aeee403d95aaa08ca57703ad4cbcb799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ee05554aeee403d95aaa08ca57703ad4cbcb799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a133f3e2c65961d0a9c550bd759fbefc1e729a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a133f3e2c65961d0a9c550bd759fbefc1e729a6", "html_url": "https://github.com/rust-lang/rust/commit/1a133f3e2c65961d0a9c550bd759fbefc1e729a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a133f3e2c65961d0a9c550bd759fbefc1e729a6/comments", "author": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5db290bf6df986a6acd5ce993f278c18e55ca37", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5db290bf6df986a6acd5ce993f278c18e55ca37", "html_url": "https://github.com/rust-lang/rust/commit/c5db290bf6df986a6acd5ce993f278c18e55ca37"}], "stats": {"total": 819, "additions": 777, "deletions": 42}, "files": [{"sha": "4582dcd2b0392f117556dc807e9e42719b5fb6ea", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 777, "deletions": 42, "changes": 819, "blob_url": "https://github.com/rust-lang/rust/blob/1a133f3e2c65961d0a9c550bd759fbefc1e729a6/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a133f3e2c65961d0a9c550bd759fbefc1e729a6/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=1a133f3e2c65961d0a9c550bd759fbefc1e729a6", "patch": "@@ -51,71 +51,143 @@ pub trait Float\n     + Rem<Output=Self>\n {\n     // inlined methods from `num::Float`\n-    /// Returns the NaN value.\n+    /// Returns the `NaN` value.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let nan: f32 = Float::nan();\n+    ///\n+    /// assert!(nan.is_nan());\n+    /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"unsure about its place in the world\")]\n     fn nan() -> Self;\n     /// Returns the infinite value.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f32;\n+    ///\n+    /// let infinity: f32 = Float::infinity();\n+    ///\n+    /// assert!(infinity.is_infinite());\n+    /// assert!(!infinity.is_finite());\n+    /// assert!(infinity > f32::MAX);\n+    /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"unsure about its place in the world\")]\n     fn infinity() -> Self;\n     /// Returns the negative infinite value.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f32;\n+    ///\n+    /// let neg_infinity: f32 = Float::neg_infinity();\n+    ///\n+    /// assert!(neg_infinity.is_infinite());\n+    /// assert!(!neg_infinity.is_finite());\n+    /// assert!(neg_infinity < f32::MIN);\n+    /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"unsure about its place in the world\")]\n     fn neg_infinity() -> Self;\n-    /// Returns the `0` value.\n+    /// Returns `0.0`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let inf: f32 = Float::infinity();\n+    /// let zero: f32 = Float::zero();\n+    /// let neg_zero: f32 = Float::neg_zero();\n+    ///\n+    /// assert_eq!(zero, neg_zero);\n+    /// assert_eq!(7.0f32/inf, zero);\n+    /// assert_eq!(zero * 10.0, zero);\n+    /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"unsure about its place in the world\")]\n     fn zero() -> Self;\n-    /// Returns -0.0.\n+    /// Returns `-0.0`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let inf: f32 = Float::infinity();\n+    /// let zero: f32 = Float::zero();\n+    /// let neg_zero: f32 = Float::neg_zero();\n+    ///\n+    /// assert_eq!(zero, neg_zero);\n+    /// assert_eq!(7.0f32/inf, zero);\n+    /// assert_eq!(zero * 10.0, zero);\n+    /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"unsure about its place in the world\")]\n     fn neg_zero() -> Self;\n-    /// Returns the `1` value.\n+    /// Returns `1.0`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let one: f32 = Float::one();\n+    ///\n+    /// assert_eq!(one, 1.0f32);\n+    /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"unsure about its place in the world\")]\n     fn one() -> Self;\n \n     // FIXME (#5527): These should be associated constants\n \n-    /// Returns the number of binary digits of mantissa that this type supports.\n+    /// Deprecated: use `std::f32::MANTISSA_DIGITS` or `std::f64::MANTISSA_DIGITS`\n+    /// instead.\n     #[unstable(feature = \"std_misc\")]\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MANTISSA_DIGITS` or \\\n                            `std::f64::MANTISSA_DIGITS` as appropriate\")]\n     fn mantissa_digits(unused_self: Option<Self>) -> uint;\n-    /// Returns the number of base-10 digits of precision that this type supports.\n+    /// Deprecated: use `std::f32::DIGITS` or `std::f64::DIGITS` instead.\n     #[unstable(feature = \"std_misc\")]\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::DIGITS` or `std::f64::DIGITS` as appropriate\")]\n     fn digits(unused_self: Option<Self>) -> uint;\n-    /// Returns the difference between 1.0 and the smallest representable number larger than 1.0.\n+    /// Deprecated: use `std::f32::EPSILON` or `std::f64::EPSILON` instead.\n     #[unstable(feature = \"std_misc\")]\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::EPSILON` or `std::f64::EPSILON` as appropriate\")]\n     fn epsilon() -> Self;\n-    /// Returns the minimum binary exponent that this type can represent.\n+    /// Deprecated: use `std::f32::MIN_EXP` or `std::f64::MIN_EXP` instead.\n     #[unstable(feature = \"std_misc\")]\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MIN_EXP` or `std::f64::MIN_EXP` as appropriate\")]\n     fn min_exp(unused_self: Option<Self>) -> int;\n-    /// Returns the maximum binary exponent that this type can represent.\n+    /// Deprecated: use `std::f32::MAX_EXP` or `std::f64::MAX_EXP` instead.\n     #[unstable(feature = \"std_misc\")]\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MAX_EXP` or `std::f64::MAX_EXP` as appropriate\")]\n     fn max_exp(unused_self: Option<Self>) -> int;\n-    /// Returns the minimum base-10 exponent that this type can represent.\n+    /// Deprecated: use `std::f32::MIN_10_EXP` or `std::f64::MIN_10_EXP` instead.\n     #[unstable(feature = \"std_misc\")]\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MIN_10_EXP` or `std::f64::MIN_10_EXP` as appropriate\")]\n     fn min_10_exp(unused_self: Option<Self>) -> int;\n-    /// Returns the maximum base-10 exponent that this type can represent.\n+    /// Deprecated: use `std::f32::MAX_10_EXP` or `std::f64::MAX_10_EXP` instead.\n     #[unstable(feature = \"std_misc\")]\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MAX_10_EXP` or `std::f64::MAX_10_EXP` as appropriate\")]\n     fn max_10_exp(unused_self: Option<Self>) -> int;\n \n     /// Returns the smallest finite value that this type can represent.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x: f64 = Float::min_value();\n+    ///\n+    /// assert_eq!(x, f64::MIN);\n+    /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"unsure about its place in the world\")]\n     fn min_value() -> Self;\n@@ -124,225 +196,888 @@ pub trait Float\n                reason = \"unsure about its place in the world\")]\n     fn min_pos_value(unused_self: Option<Self>) -> Self;\n     /// Returns the largest finite value that this type can represent.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x: f64 = Float::max_value();\n+    /// assert_eq!(x, f64::MAX);\n+    /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"unsure about its place in the world\")]\n     fn max_value() -> Self;\n-\n-    /// Returns true if this value is NaN and false otherwise.\n+    /// Returns `true` if this value is `NaN` and false otherwise.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let nan = f64::NAN;\n+    /// let f = 7.0;\n+    ///\n+    /// assert!(nan.is_nan());\n+    /// assert!(!f.is_nan());\n+    /// ```\n     #[unstable(feature = \"std_misc\", reason = \"position is undecided\")]\n     fn is_nan(self) -> bool;\n-    /// Returns true if this value is positive infinity or negative infinity and\n+    /// Returns `true` if this value is positive infinity or negative infinity and\n     /// false otherwise.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f32;\n+    ///\n+    /// let f = 7.0f32;\n+    /// let inf: f32 = Float::infinity();\n+    /// let neg_inf: f32 = Float::neg_infinity();\n+    /// let nan: f32 = f32::NAN;\n+    ///\n+    /// assert!(!f.is_infinite());\n+    /// assert!(!nan.is_infinite());\n+    ///\n+    /// assert!(inf.is_infinite());\n+    /// assert!(neg_inf.is_infinite());\n+    /// ```\n     #[unstable(feature = \"std_misc\", reason = \"position is undecided\")]\n     fn is_infinite(self) -> bool;\n-    /// Returns true if this number is neither infinite nor NaN.\n+    /// Returns `true` if this number is neither infinite nor `NaN`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f32;\n+    ///\n+    /// let f = 7.0f32;\n+    /// let inf: f32 = Float::infinity();\n+    /// let neg_inf: f32 = Float::neg_infinity();\n+    /// let nan: f32 = f32::NAN;\n+    ///\n+    /// assert!(f.is_finite());\n+    ///\n+    /// assert!(!nan.is_finite());\n+    /// assert!(!inf.is_finite());\n+    /// assert!(!neg_inf.is_finite());\n+    /// ```\n     #[unstable(feature = \"std_misc\", reason = \"position is undecided\")]\n     fn is_finite(self) -> bool;\n-    /// Returns true if this number is neither zero, infinite, denormal, or NaN.\n+    /// Returns `true` if the number is neither zero, infinite,\n+    /// [subnormal][subnormal], or `NaN`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f32;\n+    ///\n+    /// let min = f32::MIN_POSITIVE; // 1.17549435e-38f32\n+    /// let max = f32::MAX;\n+    /// let lower_than_min = 1.0e-40_f32;\n+    /// let zero = 0.0f32;\n+    ///\n+    /// assert!(min.is_normal());\n+    /// assert!(max.is_normal());\n+    ///\n+    /// assert!(!zero.is_normal());\n+    /// assert!(!f32::NAN.is_normal());\n+    /// assert!(!f32::INFINITY.is_normal());\n+    /// // Values between `0` and `min` are Subnormal.\n+    /// assert!(!lower_than_min.is_normal());\n+    /// ```\n+    /// [subnormal]: http://en.wikipedia.org/wiki/Denormal_number\n     #[unstable(feature = \"std_misc\", reason = \"position is undecided\")]\n     fn is_normal(self) -> bool;\n-    /// Returns the category that this number falls into.\n+\n+    /// Returns the floating point category of the number. If only one property\n+    /// is going to be tested, it is generally faster to use the specific\n+    /// predicate instead.\n+    ///\n+    /// ```\n+    /// use std::num::{Float, FpCategory};\n+    /// use std::f32;\n+    ///\n+    /// let num = 12.4f32;\n+    /// let inf = f32::INFINITY;\n+    ///\n+    /// assert_eq!(num.classify(), FpCategory::Normal);\n+    /// assert_eq!(inf.classify(), FpCategory::Infinite);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn classify(self) -> FpCategory;\n \n-    /// Returns the mantissa, exponent and sign as integers, respectively.\n+    /// Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n+    /// The original number can be recovered by `sign * mantissa * 2 ^ exponent`.\n+    /// The floating point encoding is documented in the [Reference][floating-point].\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let num = 2.0f32;\n+    ///\n+    /// // (8388608u64, -22i16, 1i8)\n+    /// let (mantissa, exponent, sign) = num.integer_decode();\n+    /// let sign_f = sign as f32;\n+    /// let mantissa_f = mantissa as f32;\n+    /// let exponent_f = num.powf(exponent as f32);\n+    ///\n+    /// // 1 * 8388608 * 2^(-22) == 2\n+    /// let abs_difference = (sign_f * mantissa_f * exponent_f - num).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n+    /// [floating-point]: ../../../../../reference.html#machine-types\n     #[unstable(feature = \"std_misc\", reason = \"signature is undecided\")]\n     fn integer_decode(self) -> (u64, i16, i8);\n \n-    /// Return the largest integer less than or equal to a number.\n+    /// Returns the largest integer less than or equal to a number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 3.99;\n+    /// let g = 3.0;\n+    ///\n+    /// assert_eq!(f.floor(), 3.0);\n+    /// assert_eq!(g.floor(), 3.0);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn floor(self) -> Self;\n-    /// Return the smallest integer greater than or equal to a number.\n+    /// Returns the smallest integer greater than or equal to a number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 3.01;\n+    /// let g = 4.0;\n+    ///\n+    /// assert_eq!(f.ceil(), 4.0);\n+    /// assert_eq!(g.ceil(), 4.0);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn ceil(self) -> Self;\n-    /// Return the nearest integer to a number. Round half-way cases away from\n+    /// Returns the nearest integer to a number. Round half-way cases away from\n     /// `0.0`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 3.3;\n+    /// let g = -3.3;\n+    ///\n+    /// assert_eq!(f.round(), 3.0);\n+    /// assert_eq!(g.round(), -3.0);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn round(self) -> Self;\n     /// Return the integer part of a number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 3.3;\n+    /// let g = -3.7;\n+    ///\n+    /// assert_eq!(f.trunc(), 3.0);\n+    /// assert_eq!(g.trunc(), -3.0);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn trunc(self) -> Self;\n-    /// Return the fractional part of a number.\n+    /// Returns the fractional part of a number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 3.5;\n+    /// let y = -3.5;\n+    /// let abs_difference_x = (x.fract() - 0.5).abs();\n+    /// let abs_difference_y = (y.fract() - (-0.5)).abs();\n+    ///\n+    /// assert!(abs_difference_x < 1e-10);\n+    /// assert!(abs_difference_y < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fract(self) -> Self;\n-\n     /// Computes the absolute value of `self`. Returns `Float::nan()` if the\n     /// number is `Float::nan()`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = 3.5;\n+    /// let y = -3.5;\n+    ///\n+    /// let abs_difference_x = (x.abs() - x).abs();\n+    /// let abs_difference_y = (y.abs() - (-y)).abs();\n+    ///\n+    /// assert!(abs_difference_x < 1e-10);\n+    /// assert!(abs_difference_y < 1e-10);\n+    ///\n+    /// assert!(f64::NAN.abs().is_nan());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn abs(self) -> Self;\n     /// Returns a number that represents the sign of `self`.\n     ///\n     /// - `1.0` if the number is positive, `+0.0` or `Float::infinity()`\n     /// - `-1.0` if the number is negative, `-0.0` or `Float::neg_infinity()`\n     /// - `Float::nan()` if the number is `Float::nan()`\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let f = 3.5;\n+    ///\n+    /// assert_eq!(f.signum(), 1.0);\n+    /// assert_eq!(f64::NEG_INFINITY.signum(), -1.0);\n+    ///\n+    /// assert!(f64::NAN.signum().is_nan());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn signum(self) -> Self;\n     /// Returns `true` if `self` is positive, including `+0.0` and\n     /// `Float::infinity()`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let nan: f64 = f64::NAN;\n+    ///\n+    /// let f = 7.0;\n+    /// let g = -7.0;\n+    ///\n+    /// assert!(f.is_positive());\n+    /// assert!(!g.is_positive());\n+    /// // Requires both tests to determine if is `NaN`\n+    /// assert!(!nan.is_positive() && !nan.is_negative());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn is_positive(self) -> bool;\n     /// Returns `true` if `self` is negative, including `-0.0` and\n     /// `Float::neg_infinity()`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let nan = f64::NAN;\n+    ///\n+    /// let f = 7.0;\n+    /// let g = -7.0;\n+    ///\n+    /// assert!(!f.is_negative());\n+    /// assert!(g.is_negative());\n+    /// // Requires both tests to determine if is `NaN`.\n+    /// assert!(!nan.is_positive() && !nan.is_negative());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn is_negative(self) -> bool;\n \n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding\n     /// error. This produces a more accurate result with better performance than\n     /// a separate multiplication operation followed by an add.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let m = 10.0;\n+    /// let x = 4.0;\n+    /// let b = 60.0;\n+    ///\n+    /// // 100.0\n+    /// let abs_difference = (m.mul_add(x, b) - (m*x + b)).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"unsure about its place in the world\")]\n     fn mul_add(self, a: Self, b: Self) -> Self;\n     /// Take the reciprocal (inverse) of a number, `1/x`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 2.0;\n+    /// let abs_difference = (x.recip() - (1.0/x)).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"unsure about its place in the world\")]\n     fn recip(self) -> Self;\n \n     /// Raise a number to an integer power.\n     ///\n     /// Using this function is generally faster than using `powf`\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 2.0;\n+    /// let abs_difference = (x.powi(2) - x*x).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn powi(self, n: i32) -> Self;\n     /// Raise a number to a floating point power.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 2.0;\n+    /// let abs_difference = (x.powf(2.0) - x*x).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn powf(self, n: Self) -> Self;\n-\n     /// Take the square root of a number.\n     ///\n     /// Returns NaN if `self` is a negative number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let positive = 4.0;\n+    /// let negative = -4.0;\n+    ///\n+    /// let abs_difference = (positive.sqrt() - 2.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// assert!(negative.sqrt().is_nan());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn sqrt(self) -> Self;\n+\n     /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 4.0;\n+    ///\n+    /// let abs_difference = (f.rsqrt() - 0.5).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"unsure about its place in the world\")]\n     fn rsqrt(self) -> Self;\n \n     /// Returns `e^(self)`, (the exponential function).\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let one = 1.0;\n+    /// // e^1\n+    /// let e = one.exp();\n+    ///\n+    /// // ln(e) - 1 == 0\n+    /// let abs_difference = (e.ln() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn exp(self) -> Self;\n-    /// Returns 2 raised to the power of the number, `2^(self)`.\n+    /// Returns `2^(self)`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 2.0;\n+    ///\n+    /// // 2^2 - 4 == 0\n+    /// let abs_difference = (f.exp2() - 4.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn exp2(self) -> Self;\n     /// Returns the natural logarithm of the number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let one = 1.0;\n+    /// // e^1\n+    /// let e = one.exp();\n+    ///\n+    /// // ln(e) - 1 == 0\n+    /// let abs_difference = (e.ln() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn ln(self) -> Self;\n     /// Returns the logarithm of the number with respect to an arbitrary base.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let ten = 10.0;\n+    /// let two = 2.0;\n+    ///\n+    /// // log10(10) - 1 == 0\n+    /// let abs_difference_10 = (ten.log(10.0) - 1.0).abs();\n+    ///\n+    /// // log2(2) - 1 == 0\n+    /// let abs_difference_2 = (two.log(2.0) - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference_10 < 1e-10);\n+    /// assert!(abs_difference_2 < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn log(self, base: Self) -> Self;\n     /// Returns the base 2 logarithm of the number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let two = 2.0;\n+    ///\n+    /// // log2(2) - 1 == 0\n+    /// let abs_difference = (two.log2() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn log2(self) -> Self;\n     /// Returns the base 10 logarithm of the number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let ten = 10.0;\n+    ///\n+    /// // log10(10) - 1 == 0\n+    /// let abs_difference = (ten.log10() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn log10(self) -> Self;\n \n     /// Convert radians to degrees.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64::consts;\n+    ///\n+    /// let angle = consts::PI;\n+    ///\n+    /// let abs_difference = (angle.to_degrees() - 180.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[unstable(feature = \"std_misc\", reason = \"desirability is unclear\")]\n     fn to_degrees(self) -> Self;\n     /// Convert degrees to radians.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64::consts;\n+    ///\n+    /// let angle = 180.0;\n+    ///\n+    /// let abs_difference = (angle.to_radians() - consts::PI).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[unstable(feature = \"std_misc\", reason = \"desirability is unclear\")]\n     fn to_radians(self) -> Self;\n-\n-    /// Constructs a floating point number created by multiplying `x` by 2\n-    /// raised to the power of `exp`.\n+    /// Constructs a floating point number of `x*2^exp`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// // 3*2^2 - 12 == 0\n+    /// let abs_difference = (Float::ldexp(3.0, 2) - 12.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"pending integer conventions\")]\n     fn ldexp(x: Self, exp: int) -> Self;\n     /// Breaks the number into a normalized fraction and a base-2 exponent,\n     /// satisfying:\n     ///\n-    ///  * `self = x * pow(2, exp)`\n-    ///\n+    ///  * `self = x * 2^exp`\n     ///  * `0.5 <= abs(x) < 1.0`\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 4.0;\n+    ///\n+    /// // (1/2)*2^3 -> 1 * 8/2 -> 4.0\n+    /// let f = x.frexp();\n+    /// let abs_difference_0 = (f.0 - 0.5).abs();\n+    /// let abs_difference_1 = (f.1 as f64 - 3.0).abs();\n+    ///\n+    /// assert!(abs_difference_0 < 1e-10);\n+    /// assert!(abs_difference_1 < 1e-10);\n+    /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"pending integer conventions\")]\n     fn frexp(self) -> (Self, int);\n-\n     /// Returns the next representable floating-point value in the direction of\n     /// `other`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 1.0f32;\n+    ///\n+    /// let abs_diff = (x.next_after(2.0) - 1.00000011920928955078125_f32).abs();\n+    ///\n+    /// assert!(abs_diff < 1e-10);\n+    /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"unsure about its place in the world\")]\n     fn next_after(self, other: Self) -> Self;\n \n     /// Returns the maximum of the two numbers.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 1.0;\n+    /// let y = 2.0;\n+    ///\n+    /// assert_eq!(x.max(y), y);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn max(self, other: Self) -> Self;\n     /// Returns the minimum of the two numbers.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 1.0;\n+    /// let y = 2.0;\n+    ///\n+    /// assert_eq!(x.min(y), x);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn min(self, other: Self) -> Self;\n \n-    /// The positive difference of two numbers. Returns `0.0` if the number is\n-    /// less than or equal to `other`, otherwise the difference between`self`\n-    /// and `other` is returned.\n+    /// The positive difference of two numbers.\n+    ///\n+    /// * If `self <= other`: `0:0`\n+    /// * Else: `self - other`\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 3.0;\n+    /// let y = -3.0;\n+    ///\n+    /// let abs_difference_x = (x.abs_sub(1.0) - 2.0).abs();\n+    /// let abs_difference_y = (y.abs_sub(1.0) - 0.0).abs();\n+    ///\n+    /// assert!(abs_difference_x < 1e-10);\n+    /// assert!(abs_difference_y < 1e-10);\n+    /// ```\n     #[unstable(feature = \"std_misc\", reason = \"may be renamed\")]\n     fn abs_sub(self, other: Self) -> Self;\n-\n     /// Take the cubic root of a number.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 8.0;\n+    ///\n+    /// // x^(1/3) - 2 == 0\n+    /// let abs_difference = (x.cbrt() - 2.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[unstable(feature = \"std_misc\", reason = \"may be renamed\")]\n     fn cbrt(self) -> Self;\n     /// Calculate the length of the hypotenuse of a right-angle triangle given\n     /// legs of length `x` and `y`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 2.0;\n+    /// let y = 3.0;\n+    ///\n+    /// // sqrt(x^2 + y^2)\n+    /// let abs_difference = (x.hypot(y) - (x.powi(2) + y.powi(2)).sqrt()).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[unstable(feature = \"std_misc\",\n                reason = \"unsure about its place in the world\")]\n     fn hypot(self, other: Self) -> Self;\n \n     /// Computes the sine of a number (in radians).\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = f64::consts::PI/2.0;\n+    ///\n+    /// let abs_difference = (x.sin() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn sin(self) -> Self;\n     /// Computes the cosine of a number (in radians).\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = 2.0*f64::consts::PI;\n+    ///\n+    /// let abs_difference = (x.cos() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn cos(self) -> Self;\n     /// Computes the tangent of a number (in radians).\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = f64::consts::PI/4.0;\n+    /// let abs_difference = (x.tan() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-14);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn tan(self) -> Self;\n-\n     /// Computes the arcsine of a number. Return value is in radians in\n     /// the range [-pi/2, pi/2] or NaN if the number is outside the range\n     /// [-1, 1].\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let f = f64::consts::PI / 2.0;\n+    ///\n+    /// // asin(sin(pi/2))\n+    /// let abs_difference = (f.sin().asin() - f64::consts::PI / 2.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn asin(self) -> Self;\n     /// Computes the arccosine of a number. Return value is in radians in\n     /// the range [0, pi] or NaN if the number is outside the range\n     /// [-1, 1].\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let f = f64::consts::PI / 4.0;\n+    ///\n+    /// // acos(cos(pi/4))\n+    /// let abs_difference = (f.cos().acos() - f64::consts::PI / 4.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn acos(self) -> Self;\n     /// Computes the arctangent of a number. Return value is in radians in the\n     /// range [-pi/2, pi/2];\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let f = 1.0;\n+    ///\n+    /// // atan(tan(1))\n+    /// let abs_difference = (f.tan().atan() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn atan(self) -> Self;\n-    /// Computes the four quadrant arctangent of a number, `y`, and another\n-    /// number `x`. Return value is in radians in the range [-pi, pi].\n+    /// Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).\n+    ///\n+    /// * `x = 0`, `y = 0`: `0`\n+    /// * `x >= 0`: `arctan(y/x)` -> `[-pi/2, pi/2]`\n+    /// * `y >= 0`: `arctan(y/x) + pi` -> `(pi/2, pi]`\n+    /// * `y < 0`: `arctan(y/x) - pi` -> `(-pi, -pi/2)`\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let pi = f64::consts::PI;\n+    /// // All angles from horizontal right (+x)\n+    /// // 45 deg counter-clockwise\n+    /// let x1 = 3.0;\n+    /// let y1 = -3.0;\n+    ///\n+    /// // 135 deg clockwise\n+    /// let x2 = -3.0;\n+    /// let y2 = 3.0;\n+    ///\n+    /// let abs_difference_1 = (y1.atan2(x1) - (-pi/4.0)).abs();\n+    /// let abs_difference_2 = (y2.atan2(x2) - 3.0*pi/4.0).abs();\n+    ///\n+    /// assert!(abs_difference_1 < 1e-10);\n+    /// assert!(abs_difference_2 < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn atan2(self, other: Self) -> Self;\n     /// Simultaneously computes the sine and cosine of the number, `x`. Returns\n     /// `(sin(x), cos(x))`.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = f64::consts::PI/4.0;\n+    /// let f = x.sin_cos();\n+    ///\n+    /// let abs_difference_0 = (f.0 - x.sin()).abs();\n+    /// let abs_difference_1 = (f.1 - x.cos()).abs();\n+    ///\n+    /// assert!(abs_difference_0 < 1e-10);\n+    /// assert!(abs_difference_0 < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn sin_cos(self) -> (Self, Self);\n \n-    /// Returns the exponential of the number, minus 1, in a way that is\n-    /// accurate even if the number is close to zero.\n+    /// Returns `e^(self) - 1` in a way that is accurate even if the\n+    /// number is close to zero.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 7.0;\n+    ///\n+    /// // e^(ln(7)) - 1\n+    /// let abs_difference = (x.ln().exp_m1() - 6.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[unstable(feature = \"std_misc\", reason = \"may be renamed\")]\n     fn exp_m1(self) -> Self;\n-    /// Returns the natural logarithm of the number plus 1 (`ln(1+n)`) more\n-    /// accurately than if the operations were performed separately.\n+    /// Returns `ln(1+n)` (natural logarithm) more accurately than if\n+    /// the operations were performed separately.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let x = f64::consts::E - 1.0;\n+    ///\n+    /// // ln(1 + (e - 1)) == ln(e) == 1\n+    /// let abs_difference = (x.ln_1p() - 1.0).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[unstable(feature = \"std_misc\", reason = \"may be renamed\")]\n     fn ln_1p(self) -> Self;\n \n     /// Hyperbolic sine function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let e = f64::consts::E;\n+    /// let x = 1.0;\n+    ///\n+    /// let f = x.sinh();\n+    /// // Solving sinh() at 1 gives `(e^2-1)/(2e)`\n+    /// let g = (e*e - 1.0)/(2.0*e);\n+    /// let abs_difference = (f - g).abs();\n+    ///\n+    /// assert!(abs_difference < 1e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn sinh(self) -> Self;\n     /// Hyperbolic cosine function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let e = f64::consts::E;\n+    /// let x = 1.0;\n+    /// let f = x.cosh();\n+    /// // Solving cosh() at 1 gives this result\n+    /// let g = (e*e + 1.0)/(2.0*e);\n+    /// let abs_difference = (f - g).abs();\n+    ///\n+    /// // Same result\n+    /// assert!(abs_difference < 1.0e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn cosh(self) -> Self;\n     /// Hyperbolic tangent function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let e = f64::consts::E;\n+    /// let x = 1.0;\n+    ///\n+    /// let f = x.tanh();\n+    /// // Solving tanh() at 1 gives `(1 - e^(-2))/(1 + e^(-2))`\n+    /// let g = (1.0 - e.powi(-2))/(1.0 + e.powi(-2));\n+    /// let abs_difference = (f - g).abs();\n+    ///\n+    /// assert!(abs_difference < 1.0e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn tanh(self) -> Self;\n     /// Inverse hyperbolic sine function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 1.0;\n+    /// let f = x.sinh().asinh();\n+    ///\n+    /// let abs_difference = (f - x).abs();\n+    ///\n+    /// assert!(abs_difference < 1.0e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn asinh(self) -> Self;\n     /// Inverse hyperbolic cosine function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    ///\n+    /// let x = 1.0;\n+    /// let f = x.cosh().acosh();\n+    ///\n+    /// let abs_difference = (f - x).abs();\n+    ///\n+    /// assert!(abs_difference < 1.0e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn acosh(self) -> Self;\n     /// Inverse hyperbolic tangent function.\n+    ///\n+    /// ```\n+    /// use std::num::Float;\n+    /// use std::f64;\n+    ///\n+    /// let e = f64::consts::E;\n+    /// let f = e.tanh().atanh();\n+    ///\n+    /// let abs_difference = (f - e).abs();\n+    ///\n+    /// assert!(abs_difference < 1.0e-10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn atanh(self) -> Self;\n }"}]}