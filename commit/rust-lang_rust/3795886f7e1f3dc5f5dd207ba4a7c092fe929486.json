{"sha": "3795886f7e1f3dc5f5dd207ba4a7c092fe929486", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OTU4ODZmN2UxZjNkYzVmNWRkMjA3YmE0YTdjMDkyZmU5Mjk0ODY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-20T14:59:15Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-20T14:59:15Z"}, "message": "Split check for `PartialEq` impl into a method", "tree": {"sha": "1224c2408ea1cc18c77f3df65774b71b25fd1853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1224c2408ea1cc18c77f3df65774b71b25fd1853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3795886f7e1f3dc5f5dd207ba4a7c092fe929486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3795886f7e1f3dc5f5dd207ba4a7c092fe929486", "html_url": "https://github.com/rust-lang/rust/commit/3795886f7e1f3dc5f5dd207ba4a7c092fe929486", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3795886f7e1f3dc5f5dd207ba4a7c092fe929486/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2532a87306fafd097241a80f92f68b10df0cba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2532a87306fafd097241a80f92f68b10df0cba4", "html_url": "https://github.com/rust-lang/rust/commit/b2532a87306fafd097241a80f92f68b10df0cba4"}], "stats": {"total": 63, "additions": 35, "deletions": 28}, "files": [{"sha": "ebb71ea24ecc0ec9a71de3a78d5332e48d8a0e21", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3795886f7e1f3dc5f5dd207ba4a7c092fe929486/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3795886f7e1f3dc5f5dd207ba4a7c092fe929486/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=3795886f7e1f3dc5f5dd207ba4a7c092fe929486", "patch": "@@ -159,34 +159,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     }\n                 });\n \n-                // double-check there even *is* a semantic `PartialEq` to dispatch to.\n-                //\n-                // (If there isn't, then we can safely issue a hard\n-                // error, because that's never worked, due to compiler\n-                // using `PartialEq::eq` in this scenario in the past.)\n-                //\n-                // Note: To fix rust-lang/rust#65466, one could lift this check\n-                // *before* any structural-match checking, and unconditionally error\n-                // if `PartialEq` is not implemented. However, that breaks stable\n-                // code at the moment, because types like `for <'a> fn(&'a ())` do\n-                // not *yet* implement `PartialEq`. So for now we leave this here.\n-                let ty_is_partial_eq: bool = {\n-                    let partial_eq_trait_id =\n-                        self.tcx().require_lang_item(hir::LangItem::PartialEq, Some(self.span));\n-                    let obligation: PredicateObligation<'_> = predicate_for_trait_def(\n-                        self.tcx(),\n-                        self.param_env,\n-                        ObligationCause::misc(self.span, self.id),\n-                        partial_eq_trait_id,\n-                        0,\n-                        cv.ty,\n-                        &[],\n-                    );\n-                    // FIXME: should this call a `predicate_must_hold` variant instead?\n-                    self.infcx.predicate_may_hold(&obligation)\n-                };\n-\n-                if !ty_is_partial_eq {\n+                if !self.type_has_partial_eq_impl(cv.ty) {\n                     // span_fatal avoids ICE from resolution of non-existent method (rare case).\n                     self.tcx().sess.span_fatal(self.span, &msg);\n                 } else if mir_structural_match_violation {\n@@ -208,6 +181,40 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n         inlined_const_as_pat\n     }\n \n+    fn type_has_partial_eq_impl(&self, ty: Ty<'tcx>) -> bool {\n+        // double-check there even *is* a semantic `PartialEq` to dispatch to.\n+        //\n+        // (If there isn't, then we can safely issue a hard\n+        // error, because that's never worked, due to compiler\n+        // using `PartialEq::eq` in this scenario in the past.)\n+        let partial_eq_trait_id =\n+            self.tcx().require_lang_item(hir::LangItem::PartialEq, Some(self.span));\n+        let obligation: PredicateObligation<'_> = predicate_for_trait_def(\n+            self.tcx(),\n+            self.param_env,\n+            ObligationCause::misc(self.span, self.id),\n+            partial_eq_trait_id,\n+            0,\n+            ty,\n+            &[],\n+        );\n+        // FIXME: should this call a `predicate_must_hold` variant instead?\n+\n+        let has_impl = self.infcx.predicate_may_hold(&obligation);\n+\n+        // Note: To fix rust-lang/rust#65466, we could just remove this type\n+        // walk hack for function pointers, and unconditionally error\n+        // if `PartialEq` is not implemented. However, that breaks stable\n+        // code at the moment, because types like `for <'a> fn(&'a ())` do\n+        // not *yet* implement `PartialEq`. So for now we leave this here.\n+        has_impl\n+            || ty.walk().any(|t| match t.unpack() {\n+                ty::subst::GenericArgKind::Lifetime(_) => false,\n+                ty::subst::GenericArgKind::Type(t) => t.is_fn_ptr(),\n+                ty::subst::GenericArgKind::Const(_) => false,\n+            })\n+    }\n+\n     // Recursive helper for `to_pat`; invoke that (instead of calling this directly).\n     fn recur(&self, cv: &'tcx ty::Const<'tcx>) -> Pat<'tcx> {\n         let id = self.id;"}]}