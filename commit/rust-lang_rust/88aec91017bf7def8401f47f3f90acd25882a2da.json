{"sha": "88aec91017bf7def8401f47f3f90acd25882a2da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YWVjOTEwMTdiZjdkZWY4NDAxZjQ3ZjNmOTBhY2QyNTg4MmEyZGE=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2018-02-28T13:56:54Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2018-03-06T03:31:56Z"}, "message": "Add i128 tests for intrinsics", "tree": {"sha": "6f0810e2790085988d43cf3c1d30227b2a07c62e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f0810e2790085988d43cf3c1d30227b2a07c62e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88aec91017bf7def8401f47f3f90acd25882a2da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88aec91017bf7def8401f47f3f90acd25882a2da", "html_url": "https://github.com/rust-lang/rust/commit/88aec91017bf7def8401f47f3f90acd25882a2da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88aec91017bf7def8401f47f3f90acd25882a2da/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24fb4b766952edbd9daf71dc74dcdc62a7511711", "url": "https://api.github.com/repos/rust-lang/rust/commits/24fb4b766952edbd9daf71dc74dcdc62a7511711", "html_url": "https://github.com/rust-lang/rust/commit/24fb4b766952edbd9daf71dc74dcdc62a7511711"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "bfa3a1e128a9a3e97948d0e8a8b3c41bc28483dc", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/88aec91017bf7def8401f47f3f90acd25882a2da/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88aec91017bf7def8401f47f3f90acd25882a2da/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=88aec91017bf7def8401f47f3f90acd25882a2da", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(intrinsics)]\n+#![feature(intrinsics, i128_type)]\n \n mod rusti {\n     extern \"rust-intrinsic\" {\n@@ -30,106 +30,127 @@ pub fn main() {\n         assert_eq!(ctpop(0u16), 0); assert_eq!(ctpop(0i16), 0);\n         assert_eq!(ctpop(0u32), 0); assert_eq!(ctpop(0i32), 0);\n         assert_eq!(ctpop(0u64), 0); assert_eq!(ctpop(0i64), 0);\n+        assert_eq!(ctpop(0u128), 0); assert_eq!(ctpop(0i128), 0);\n \n         assert_eq!(ctpop(1u8), 1); assert_eq!(ctpop(1i8), 1);\n         assert_eq!(ctpop(1u16), 1); assert_eq!(ctpop(1i16), 1);\n         assert_eq!(ctpop(1u32), 1); assert_eq!(ctpop(1i32), 1);\n         assert_eq!(ctpop(1u64), 1); assert_eq!(ctpop(1i64), 1);\n+        assert_eq!(ctpop(1u128), 1); assert_eq!(ctpop(1i128), 1);\n \n         assert_eq!(ctpop(10u8), 2); assert_eq!(ctpop(10i8), 2);\n         assert_eq!(ctpop(10u16), 2); assert_eq!(ctpop(10i16), 2);\n         assert_eq!(ctpop(10u32), 2); assert_eq!(ctpop(10i32), 2);\n         assert_eq!(ctpop(10u64), 2); assert_eq!(ctpop(10i64), 2);\n+        assert_eq!(ctpop(10u128), 2); assert_eq!(ctpop(10i128), 2);\n \n         assert_eq!(ctpop(100u8), 3); assert_eq!(ctpop(100i8), 3);\n         assert_eq!(ctpop(100u16), 3); assert_eq!(ctpop(100i16), 3);\n         assert_eq!(ctpop(100u32), 3); assert_eq!(ctpop(100i32), 3);\n         assert_eq!(ctpop(100u64), 3); assert_eq!(ctpop(100i64), 3);\n+        assert_eq!(ctpop(100u128), 3); assert_eq!(ctpop(100i128), 3);\n \n         assert_eq!(ctpop(-1i8 as u8), 8); assert_eq!(ctpop(-1i8), 8);\n         assert_eq!(ctpop(-1i16 as u16), 16); assert_eq!(ctpop(-1i16), 16);\n         assert_eq!(ctpop(-1i32 as u32), 32); assert_eq!(ctpop(-1i32), 32);\n         assert_eq!(ctpop(-1i64 as u64), 64); assert_eq!(ctpop(-1i64), 64);\n+        assert_eq!(ctpop(-1i128 as u128), 128); assert_eq!(ctpop(-1i128), 128);\n \n         assert_eq!(ctlz(0u8), 8); assert_eq!(ctlz(0i8), 8);\n         assert_eq!(ctlz(0u16), 16); assert_eq!(ctlz(0i16), 16);\n         assert_eq!(ctlz(0u32), 32); assert_eq!(ctlz(0i32), 32);\n         assert_eq!(ctlz(0u64), 64); assert_eq!(ctlz(0i64), 64);\n+        assert_eq!(ctlz(0u128), 128); assert_eq!(ctlz(0i128), 128);\n \n         assert_eq!(ctlz(1u8), 7); assert_eq!(ctlz(1i8), 7);\n         assert_eq!(ctlz(1u16), 15); assert_eq!(ctlz(1i16), 15);\n         assert_eq!(ctlz(1u32), 31); assert_eq!(ctlz(1i32), 31);\n         assert_eq!(ctlz(1u64), 63); assert_eq!(ctlz(1i64), 63);\n+        assert_eq!(ctlz(1u128), 127); assert_eq!(ctlz(1i128), 127);\n \n         assert_eq!(ctlz(10u8), 4); assert_eq!(ctlz(10i8), 4);\n         assert_eq!(ctlz(10u16), 12); assert_eq!(ctlz(10i16), 12);\n         assert_eq!(ctlz(10u32), 28); assert_eq!(ctlz(10i32), 28);\n         assert_eq!(ctlz(10u64), 60); assert_eq!(ctlz(10i64), 60);\n+        assert_eq!(ctlz(10u128), 124); assert_eq!(ctlz(10i128), 124);\n \n         assert_eq!(ctlz(100u8), 1); assert_eq!(ctlz(100i8), 1);\n         assert_eq!(ctlz(100u16), 9); assert_eq!(ctlz(100i16), 9);\n         assert_eq!(ctlz(100u32), 25); assert_eq!(ctlz(100i32), 25);\n         assert_eq!(ctlz(100u64), 57); assert_eq!(ctlz(100i64), 57);\n+        assert_eq!(ctlz(100u128), 121); assert_eq!(ctlz(100i128), 121);\n \n         assert_eq!(ctlz_nonzero(1u8), 7); assert_eq!(ctlz_nonzero(1i8), 7);\n         assert_eq!(ctlz_nonzero(1u16), 15); assert_eq!(ctlz_nonzero(1i16), 15);\n         assert_eq!(ctlz_nonzero(1u32), 31); assert_eq!(ctlz_nonzero(1i32), 31);\n         assert_eq!(ctlz_nonzero(1u64), 63); assert_eq!(ctlz_nonzero(1i64), 63);\n+        assert_eq!(ctlz_nonzero(1u128), 127); assert_eq!(ctlz_nonzero(1i128), 127);\n \n         assert_eq!(ctlz_nonzero(10u8), 4); assert_eq!(ctlz_nonzero(10i8), 4);\n         assert_eq!(ctlz_nonzero(10u16), 12); assert_eq!(ctlz_nonzero(10i16), 12);\n         assert_eq!(ctlz_nonzero(10u32), 28); assert_eq!(ctlz_nonzero(10i32), 28);\n         assert_eq!(ctlz_nonzero(10u64), 60); assert_eq!(ctlz_nonzero(10i64), 60);\n+        assert_eq!(ctlz_nonzero(10u128), 124); assert_eq!(ctlz_nonzero(10i128), 124);\n \n         assert_eq!(ctlz_nonzero(100u8), 1); assert_eq!(ctlz_nonzero(100i8), 1);\n         assert_eq!(ctlz_nonzero(100u16), 9); assert_eq!(ctlz_nonzero(100i16), 9);\n         assert_eq!(ctlz_nonzero(100u32), 25); assert_eq!(ctlz_nonzero(100i32), 25);\n         assert_eq!(ctlz_nonzero(100u64), 57); assert_eq!(ctlz_nonzero(100i64), 57);\n+        assert_eq!(ctlz_nonzero(100u128), 121); assert_eq!(ctlz_nonzero(100i128), 121);\n \n         assert_eq!(cttz(-1i8 as u8), 0); assert_eq!(cttz(-1i8), 0);\n         assert_eq!(cttz(-1i16 as u16), 0); assert_eq!(cttz(-1i16), 0);\n         assert_eq!(cttz(-1i32 as u32), 0); assert_eq!(cttz(-1i32), 0);\n         assert_eq!(cttz(-1i64 as u64), 0); assert_eq!(cttz(-1i64), 0);\n+        assert_eq!(cttz(-1i128 as u128), 0); assert_eq!(cttz(-1i128), 0);\n \n         assert_eq!(cttz(0u8), 8); assert_eq!(cttz(0i8), 8);\n         assert_eq!(cttz(0u16), 16); assert_eq!(cttz(0i16), 16);\n         assert_eq!(cttz(0u32), 32); assert_eq!(cttz(0i32), 32);\n         assert_eq!(cttz(0u64), 64); assert_eq!(cttz(0i64), 64);\n+        assert_eq!(cttz(0u128), 128); assert_eq!(cttz(0i128), 128);\n \n         assert_eq!(cttz(1u8), 0); assert_eq!(cttz(1i8), 0);\n         assert_eq!(cttz(1u16), 0); assert_eq!(cttz(1i16), 0);\n         assert_eq!(cttz(1u32), 0); assert_eq!(cttz(1i32), 0);\n         assert_eq!(cttz(1u64), 0); assert_eq!(cttz(1i64), 0);\n+        assert_eq!(cttz(1u128), 0); assert_eq!(cttz(1i128), 0);\n \n         assert_eq!(cttz(10u8), 1); assert_eq!(cttz(10i8), 1);\n         assert_eq!(cttz(10u16), 1); assert_eq!(cttz(10i16), 1);\n         assert_eq!(cttz(10u32), 1); assert_eq!(cttz(10i32), 1);\n         assert_eq!(cttz(10u64), 1); assert_eq!(cttz(10i64), 1);\n+        assert_eq!(cttz(10u128), 1); assert_eq!(cttz(10i128), 1);\n \n         assert_eq!(cttz(100u8), 2); assert_eq!(cttz(100i8), 2);\n         assert_eq!(cttz(100u16), 2); assert_eq!(cttz(100i16), 2);\n         assert_eq!(cttz(100u32), 2); assert_eq!(cttz(100i32), 2);\n         assert_eq!(cttz(100u64), 2); assert_eq!(cttz(100i64), 2);\n+        assert_eq!(cttz(100u128), 2); assert_eq!(cttz(100i128), 2);\n \n         assert_eq!(cttz_nonzero(-1i8 as u8), 0); assert_eq!(cttz_nonzero(-1i8), 0);\n         assert_eq!(cttz_nonzero(-1i16 as u16), 0); assert_eq!(cttz_nonzero(-1i16), 0);\n         assert_eq!(cttz_nonzero(-1i32 as u32), 0); assert_eq!(cttz_nonzero(-1i32), 0);\n         assert_eq!(cttz_nonzero(-1i64 as u64), 0); assert_eq!(cttz_nonzero(-1i64), 0);\n+        assert_eq!(cttz_nonzero(-1i128 as u128), 0); assert_eq!(cttz_nonzero(-1i128), 0);\n \n         assert_eq!(cttz_nonzero(1u8), 0); assert_eq!(cttz_nonzero(1i8), 0);\n         assert_eq!(cttz_nonzero(1u16), 0); assert_eq!(cttz_nonzero(1i16), 0);\n         assert_eq!(cttz_nonzero(1u32), 0); assert_eq!(cttz_nonzero(1i32), 0);\n         assert_eq!(cttz_nonzero(1u64), 0); assert_eq!(cttz_nonzero(1i64), 0);\n+        assert_eq!(cttz_nonzero(1u128), 0); assert_eq!(cttz_nonzero(1i128), 0);\n \n         assert_eq!(cttz_nonzero(10u8), 1); assert_eq!(cttz_nonzero(10i8), 1);\n         assert_eq!(cttz_nonzero(10u16), 1); assert_eq!(cttz_nonzero(10i16), 1);\n         assert_eq!(cttz_nonzero(10u32), 1); assert_eq!(cttz_nonzero(10i32), 1);\n         assert_eq!(cttz_nonzero(10u64), 1); assert_eq!(cttz_nonzero(10i64), 1);\n+        assert_eq!(cttz_nonzero(10u128), 1); assert_eq!(cttz_nonzero(10i128), 1);\n \n         assert_eq!(cttz_nonzero(100u8), 2); assert_eq!(cttz_nonzero(100i8), 2);\n         assert_eq!(cttz_nonzero(100u16), 2); assert_eq!(cttz_nonzero(100i16), 2);\n         assert_eq!(cttz_nonzero(100u32), 2); assert_eq!(cttz_nonzero(100i32), 2);\n         assert_eq!(cttz_nonzero(100u64), 2); assert_eq!(cttz_nonzero(100i64), 2);\n+        assert_eq!(cttz_nonzero(100u128), 2); assert_eq!(cttz_nonzero(100i128), 2);\n \n         assert_eq!(bswap(0x0Au8), 0x0A); // no-op\n         assert_eq!(bswap(0x0Ai8), 0x0A); // no-op\n@@ -139,6 +160,8 @@ pub fn main() {\n         assert_eq!(bswap(0x0ABBCC0Di32), 0x0DCCBB0A);\n         assert_eq!(bswap(0x0122334455667708u64), 0x0877665544332201);\n         assert_eq!(bswap(0x0122334455667708i64), 0x0877665544332201);\n+        assert_eq!(bswap(0x0122334455667708u128), 0x08776655443322010000000000000000);\n+        assert_eq!(bswap(0x0122334455667708i128), 0x08776655443322010000000000000000);\n \n         assert_eq!(bitreverse(0x0Au8), 0x50);\n         assert_eq!(bitreverse(0x0Ai8), 0x50);\n@@ -148,5 +171,7 @@ pub fn main() {\n         assert_eq!(bitreverse(0x0ABBCC0Ei32), 0x7033DD50);\n         assert_eq!(bitreverse(0x0122334455667708u64), 0x10EE66AA22CC4480);\n         assert_eq!(bitreverse(0x0122334455667708i64), 0x10EE66AA22CC4480);\n+        assert_eq!(bitreverse(0x0122334455667708u128), 0x10EE66AA22CC44800000000000000000);\n+        assert_eq!(bitreverse(0x0122334455667708i128), 0x10EE66AA22CC44800000000000000000);\n     }\n }"}]}