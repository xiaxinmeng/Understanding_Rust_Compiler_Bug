{"sha": "c6e35eae534e827f864f9b95d9c65aec078ac998", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZTM1ZWFlNTM0ZTgyN2Y4NjRmOWI5NWQ5YzY1YWVjMDc4YWM5OTg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-05-08T15:16:01Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-05-08T15:16:01Z"}, "message": "Check that we don't treat any type but a range type as a range", "tree": {"sha": "b2f4fe3a38bcbb17c449b9062f584ac2610877ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2f4fe3a38bcbb17c449b9062f584ac2610877ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6e35eae534e827f864f9b95d9c65aec078ac998", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlrxvzEsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MARa\niQ//XH+r2vRkb5siddsMccnW+hWdFaNCLgLGPvkSNKFwkFub1eUvd/PEO01lF4xa\nP7Lxj2U+IiG22Jx/rgqfn/rYpXJkvJMhUm7gM/8KSO74BdI6y42i2zyYmbLry6dk\nA/AomUOUJG3tOSby1VJmyIg8hs5BJlOyN80oTJgeHWV3btiMl594U1mUUhSiwvdG\nkc4nZsAlsoIZ8tAR68uhylwJGA0O7HjL0u0Mulpv2mE6qXHGUyL/JC5YooL/e3hh\nJzK1bBBBjbfMBb9QhMLX0vZ0zZM3zEieoAx5FA1/LYaMTSQJy1Al39bwszonjDNO\n/dky2ndHCTcm+3qUZ2xF2q6om+u9zafUEa913oPOPiUr4DO9ZfctLop5CPWn5Cy2\n8XjM6vUTT8lNJldnL9EY8IHqPE+IZUF/IkcZY4rrKTpJ1u4dL/IKKieN1N/9ymC3\nlZ7yVYaTVeWYms1jpC1RFJldGLGzxb/7p9EPtKs+WyxEY8FD6+l9QvzQl+Xqx+rG\n8m+m7L4Fr+Oua/AJCSDpE0EA++B5/kof1hs83P0Bbyyyrss//RyZuYURExjCTJOj\nD5BxsT7ZVLu4rQnCKna0xrKiGCfVMRAwn0Mk3taBtZ/vVxxRKAtIZNhrIW0bbNJH\nKuo4pHI3qo3JDe11hQO8EtNMiVzmMIoK9B6/R+XS7LGgvmQ=\n=yfgE\n-----END PGP SIGNATURE-----", "payload": "tree b2f4fe3a38bcbb17c449b9062f584ac2610877ce\nparent e456241f18227c7eb8d78a45daa66c756a9b65e7\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1525792561 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1525792561 +0200\n\nCheck that we don't treat any type but a range type as a range\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e35eae534e827f864f9b95d9c65aec078ac998", "html_url": "https://github.com/rust-lang/rust/commit/c6e35eae534e827f864f9b95d9c65aec078ac998", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6e35eae534e827f864f9b95d9c65aec078ac998/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e456241f18227c7eb8d78a45daa66c756a9b65e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e456241f18227c7eb8d78a45daa66c756a9b65e7", "html_url": "https://github.com/rust-lang/rust/commit/e456241f18227c7eb8d78a45daa66c756a9b65e7"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "e07804468e178dc4d025034ce479c78a1ef97088", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6e35eae534e827f864f9b95d9c65aec078ac998/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e35eae534e827f864f9b95d9c65aec078ac998/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=c6e35eae534e827f864f9b95d9c65aec078ac998", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n                 }\n \n                 // Index is a constant range\n-                if let Some(range) = higher::range(index) {\n+                if let Some(range) = higher::range(cx, index) {\n                     if let Some((start, end)) = to_const_range(cx, range, size) {\n                         if start > size || end > size {\n                             utils::span_lint(cx, OUT_OF_BOUNDS_INDEXING, e.span, \"range is out of bounds\");\n@@ -83,7 +83,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n                 }\n             }\n \n-            if let Some(range) = higher::range(index) {\n+            if let Some(range) = higher::range(cx, index) {\n                 // Full ranges are always valid\n                 if range.start.is_none() && range.end.is_none() {\n                     return;"}, {"sha": "a2eea34674389de6c1430491b491e3f2f20a454f", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6e35eae534e827f864f9b95d9c65aec078ac998/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e35eae534e827f864f9b95d9c65aec078ac998/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=c6e35eae534e827f864f9b95d9c65aec078ac998", "patch": "@@ -167,7 +167,7 @@ fn is_infinite(cx: &LateContext, expr: &Expr) -> Finiteness {\n         } else {\n             Finite\n         },\n-        ExprStruct(..) => higher::range(expr)\n+        ExprStruct(..) => higher::range(cx, expr)\n             .map_or(false, |r| r.end.is_none())\n             .into(),\n         _ => Finite,"}, {"sha": "87ea98533c325a3bc611d7d68e75e9c033ea1257", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6e35eae534e827f864f9b95d9c65aec078ac998/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e35eae534e827f864f9b95d9c65aec078ac998/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=c6e35eae534e827f864f9b95d9c65aec078ac998", "patch": "@@ -888,7 +888,7 @@ fn detect_manual_memcpy<'a, 'tcx>(\n         start: Some(start),\n         ref end,\n         limits,\n-    }) = higher::range(arg)\n+    }) = higher::range(cx, arg)\n     {\n         // the var must be a single name\n         if let PatKind::Binding(_, canonical_id, _, _) = pat.node {\n@@ -982,7 +982,7 @@ fn check_for_loop_range<'a, 'tcx>(\n         start: Some(start),\n         ref end,\n         limits,\n-    }) = higher::range(arg)\n+    }) = higher::range(cx, arg)\n     {\n         // the var must be a single name\n         if let PatKind::Binding(_, canonical_id, ref ident, _) = pat.node {\n@@ -1118,7 +1118,7 @@ fn check_for_loop_reverse_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'tcx\n         start: Some(start),\n         end: Some(end),\n         limits,\n-    }) = higher::range(arg)\n+    }) = higher::range(cx, arg)\n     {\n         // ...and both sides are compile-time constant integers...\n         if let Some((start_idx, _)) = constant(cx, start) {\n@@ -1456,7 +1456,7 @@ fn check_for_mut_range_bound(cx: &LateContext, arg: &Expr, body: &Expr) {\n         start: Some(start),\n         end: Some(end),\n         ..\n-    }) = higher::range(arg)\n+    }) = higher::range(cx, arg)\n     {\n         let mut_ids = vec![\n             check_for_mutability(cx, start),"}, {"sha": "bc1ffc5700368accc41f87d615e3bf35c62c11e8", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6e35eae534e827f864f9b95d9c65aec078ac998/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e35eae534e827f864f9b95d9c65aec078ac998/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=c6e35eae534e827f864f9b95d9c65aec078ac998", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     if let ExprMethodCall(ref iter_path, _, ref iter_args ) = *iter;\n                     if iter_path.name == \"iter\";\n                     // range expression in .zip() call: 0..x.len()\n-                    if let Some(higher::Range { start: Some(start), end: Some(end), .. }) = higher::range(zip_arg);\n+                    if let Some(higher::Range { start: Some(start), end: Some(end), .. }) = higher::range(cx, zip_arg);\n                     if is_integer_literal(start, 0);\n                     // .len() call\n                     if let ExprMethodCall(ref len_path, _, ref len_args) = end.node;\n@@ -132,7 +132,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n         // exclusive range plus one: x..(y+1)\n         if_chain! {\n-            if let Some(higher::Range { start, end: Some(end), limits: RangeLimits::HalfOpen }) = higher::range(expr);\n+            if let Some(higher::Range { start, end: Some(end), limits: RangeLimits::HalfOpen }) = higher::range(cx, expr);\n             if let Some(y) = y_plus_one(end);\n             then {\n                 span_lint_and_then(\n@@ -153,7 +153,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n         // inclusive range minus one: x..=(y-1)\n         if_chain! {\n-            if let Some(higher::Range { start, end: Some(end), limits: RangeLimits::Closed }) = higher::range(expr);\n+            if let Some(higher::Range { start, end: Some(end), limits: RangeLimits::Closed }) = higher::range(cx, expr);\n             if let Some(y) = y_minus_one(end);\n             then {\n                 span_lint_and_then("}, {"sha": "9a4fcd45d8a60f35fb0875896a8bcbad668d1975", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c6e35eae534e827f864f9b95d9c65aec078ac998/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e35eae534e827f864f9b95d9c65aec078ac998/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=c6e35eae534e827f864f9b95d9c65aec078ac998", "patch": "@@ -3,7 +3,7 @@\n \n #![deny(missing_docs_in_private_items)]\n \n-use rustc::hir;\n+use rustc::{hir, ty};\n use rustc::lint::LateContext;\n use syntax::ast;\n use utils::{is_expn_of, match_def_path, match_qpath, opt_def_id, paths, resolve_node};\n@@ -44,7 +44,36 @@ pub struct Range<'a> {\n }\n \n /// Higher a `hir` range to something similar to `ast::ExprKind::Range`.\n-pub fn range(expr: &hir::Expr) -> Option<Range> {\n+pub fn range<'a, 'b, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'b hir::Expr) -> Option<Range<'b>> {\n+\n+    let def_path = match cx.tables.expr_ty(expr).sty {\n+        ty::TyAdt(def, _) => cx.tcx.def_path(def.did),\n+        _ => return None,\n+    };\n+\n+    // sanity checks for std::ops::RangeXXXX\n+    if def_path.data.len() != 3 {\n+        return None;\n+    }\n+    if def_path.data.get(0)?.data.as_interned_str() != \"ops\" {\n+        return None;\n+    }\n+    if def_path.data.get(1)?.data.as_interned_str() != \"range\" {\n+        return None;\n+    }\n+    let type_name = def_path.data.get(2)?.data.as_interned_str();\n+    let range_types = [\n+        \"RangeFrom\",\n+        \"RangeFull\",\n+        \"RangeInclusive\",\n+        \"Range\",\n+        \"RangeTo\",\n+        \"RangeToInclusive\",\n+    ];\n+    if !range_types.contains(&&*type_name.as_str()) {\n+        return None;\n+    }\n+\n     /// Find the field named `name` in the field. Always return `Some` for\n     /// convenience.\n     fn get_field<'a>(name: &str, fields: &'a [hir::Field]) -> Option<&'a hir::Expr> {"}, {"sha": "79c6f1c55db6b42dd080697d739ecc46b881543d", "filename": "tests/run-pass/ice-2727.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6e35eae534e827f864f9b95d9c65aec078ac998/tests%2Frun-pass%2Fice-2727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e35eae534e827f864f9b95d9c65aec078ac998/tests%2Frun-pass%2Fice-2727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-2727.rs?ref=c6e35eae534e827f864f9b95d9c65aec078ac998", "patch": "@@ -0,0 +1,5 @@\n+pub fn f(new: fn()) {\n+    new();\n+}\n+\n+fn main() {}"}]}