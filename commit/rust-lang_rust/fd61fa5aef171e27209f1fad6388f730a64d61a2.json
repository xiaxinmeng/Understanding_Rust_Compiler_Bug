{"sha": "fd61fa5aef171e27209f1fad6388f730a64d61a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNjFmYTVhZWYxNzFlMjcyMDlmMWZhZDYzODhmNzMwYTY0ZDYxYTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-30T16:31:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-05T14:37:39Z"}, "message": "rustc: Hide the `named_region_map` behind queries\n\nThis commit makes the `named_region_map` field of `GlobalCtxt` private by\nencapsulating the fields behind new queries, and the new queries are also\ntargeted at particular `HirId` nodes instead of accessing the entire map.", "tree": {"sha": "cf7bc3dc02e8431fddafe6dc65bcbe0be7c48f51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf7bc3dc02e8431fddafe6dc65bcbe0be7c48f51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd61fa5aef171e27209f1fad6388f730a64d61a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd61fa5aef171e27209f1fad6388f730a64d61a2", "html_url": "https://github.com/rust-lang/rust/commit/fd61fa5aef171e27209f1fad6388f730a64d61a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd61fa5aef171e27209f1fad6388f730a64d61a2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a70342e67f09b5326538b08990d1b0d2900a5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a70342e67f09b5326538b08990d1b0d2900a5b", "html_url": "https://github.com/rust-lang/rust/commit/64a70342e67f09b5326538b08990d1b0d2900a5b"}], "stats": {"total": 136, "additions": 95, "deletions": 41}, "files": [{"sha": "3efba6a5f22f6f33790612ff503c55a055ae911a", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd61fa5aef171e27209f1fad6388f730a64d61a2/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd61fa5aef171e27209f1fad6388f730a64d61a2/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=fd61fa5aef171e27209f1fad6388f730a64d61a2", "patch": "@@ -550,6 +550,10 @@ define_dep_nodes!( <'tcx>\n     [] IsStaticallyIncludedForeignItem(DefId),\n     [] NativeLibraryKind(DefId),\n     [] LinkArgs,\n+\n+    [] NamedRegion(HirId),\n+    [] IsLateBound(HirId),\n+    [] ObjectLifetimeDefaults(HirId),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "d3fff4c66af07850ccd08623776ad07d4c7ccfbb", "filename": "src/librustc/infer/error_reporting/anon_anon_conflict.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd61fa5aef171e27209f1fad6388f730a64d61a2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd61fa5aef171e27209f1fad6388f730a64d61a2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs?ref=fd61fa5aef171e27209f1fad6388f730a64d61a2", "patch": "@@ -209,18 +209,19 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n \n         match arg.node {\n             hir::TyRptr(ref lifetime, _) => {\n-                match self.infcx.tcx.named_region_map.defs.get(&lifetime.id) {\n+                let hir_id = self.infcx.tcx.hir.node_to_hir_id(lifetime.id);\n+                match self.infcx.tcx.named_region(hir_id) {\n                     // the lifetime of the TyRptr\n-                    Some(&rl::Region::LateBoundAnon(debruijn_index, anon_index)) => {\n+                    Some(rl::Region::LateBoundAnon(debruijn_index, anon_index)) => {\n                         if debruijn_index.depth == 1 && anon_index == br_index {\n                             self.found_type = Some(arg);\n                             return; // we can stop visiting now\n                         }\n                     }\n-                    Some(&rl::Region::Static) |\n-                    Some(&rl::Region::EarlyBound(_, _)) |\n-                    Some(&rl::Region::LateBound(_, _)) |\n-                    Some(&rl::Region::Free(_, _)) |\n+                    Some(rl::Region::Static) |\n+                    Some(rl::Region::EarlyBound(_, _)) |\n+                    Some(rl::Region::LateBound(_, _)) |\n+                    Some(rl::Region::Free(_, _)) |\n                     None => {\n                         debug!(\"no arg found\");\n                     }\n@@ -272,17 +273,18 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n             _ => return,\n         };\n \n-        match self.infcx.tcx.named_region_map.defs.get(&lifetime.id) {\n+        let hir_id = self.infcx.tcx.hir.node_to_hir_id(lifetime.id);\n+        match self.infcx.tcx.named_region(hir_id) {\n             // the lifetime of the TyPath!\n-            Some(&rl::Region::LateBoundAnon(debruijn_index, anon_index)) => {\n+            Some(rl::Region::LateBoundAnon(debruijn_index, anon_index)) => {\n                 if debruijn_index.depth == 1 && anon_index == br_index {\n                     self.found_it = true;\n                 }\n             }\n-            Some(&rl::Region::Static) |\n-            Some(&rl::Region::EarlyBound(_, _)) |\n-            Some(&rl::Region::LateBound(_, _)) |\n-            Some(&rl::Region::Free(_, _)) |\n+            Some(rl::Region::Static) |\n+            Some(rl::Region::EarlyBound(_, _)) |\n+            Some(rl::Region::LateBound(_, _)) |\n+            Some(rl::Region::Free(_, _)) |\n             None => {\n                 debug!(\"no arg found\");\n             }"}, {"sha": "f2e40e3693af935edf59550160a64727750f6237", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fd61fa5aef171e27209f1fad6388f730a64d61a2/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd61fa5aef171e27209f1fad6388f730a64d61a2/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=fd61fa5aef171e27209f1fad6388f730a64d61a2", "patch": "@@ -23,7 +23,7 @@ use lint::{self, Lint};\n use ich::{self, StableHashingContext, NodeIdHashingMode};\n use middle::free_region::FreeRegionMap;\n use middle::lang_items;\n-use middle::resolve_lifetime;\n+use middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use middle::stability;\n use mir::Mir;\n use mir::transform::Passes;\n@@ -822,7 +822,7 @@ pub struct GlobalCtxt<'tcx> {\n     /// Export map produced by name resolution.\n     export_map: FxHashMap<HirId, Rc<Vec<Export>>>,\n \n-    pub named_region_map: resolve_lifetime::NamedRegionMap,\n+    named_region_map: NamedRegionMap,\n \n     pub hir: hir_map::Map<'tcx>,\n \n@@ -1054,7 +1054,23 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             global_interners: interners,\n             dep_graph: dep_graph.clone(),\n             types: common_types,\n-            named_region_map,\n+            named_region_map: NamedRegionMap {\n+                defs:\n+                    named_region_map.defs\n+                        .into_iter()\n+                        .map(|(k, v)| (hir.node_to_hir_id(k), v))\n+                        .collect(),\n+                late_bound:\n+                    named_region_map.late_bound\n+                        .into_iter()\n+                        .map(|k| hir.node_to_hir_id(k))\n+                        .collect(),\n+                object_lifetime_defaults:\n+                    named_region_map.object_lifetime_defaults\n+                        .into_iter()\n+                        .map(|(k, v)| (hir.node_to_hir_id(k), Rc::new(v)))\n+                        .collect(),\n+            },\n             trait_map: resolutions.trait_map.into_iter().map(|(k, v)| {\n                 (hir.node_to_hir_id(k), Rc::new(v))\n             }).collect(),\n@@ -1978,19 +1994,18 @@ impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {\n     }\n }\n \n-fn in_scope_traits<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: HirId)\n-    -> Option<Rc<Vec<TraitCandidate>>>\n-{\n-    tcx.gcx.trait_map.get(&id).cloned()\n-}\n-\n-fn module_exports<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: HirId)\n-    -> Option<Rc<Vec<Export>>>\n-{\n-    tcx.gcx.export_map.get(&id).cloned()\n+struct NamedRegionMap {\n+    defs: FxHashMap<HirId, resolve_lifetime::Region>,\n+    late_bound: FxHashSet<HirId>,\n+    object_lifetime_defaults: FxHashMap<HirId, Rc<Vec<ObjectLifetimeDefault>>>,\n }\n \n pub fn provide(providers: &mut ty::maps::Providers) {\n-    providers.in_scope_traits = in_scope_traits;\n-    providers.module_exports = module_exports;\n+    providers.in_scope_traits = |tcx, id| tcx.gcx.trait_map.get(&id).cloned();\n+    providers.module_exports = |tcx, id| tcx.gcx.export_map.get(&id).cloned();\n+    providers.named_region = |tcx, id| tcx.gcx.named_region_map.defs.get(&id).cloned();\n+    providers.is_late_bound = |tcx, id| tcx.gcx.named_region_map.late_bound.contains(&id);\n+    providers.object_lifetime_defaults = |tcx, id| {\n+        tcx.gcx.named_region_map.object_lifetime_defaults.get(&id).cloned()\n+    };\n }"}, {"sha": "d4bd434add45911a8b36bcdf03fdf43362521e79", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd61fa5aef171e27209f1fad6388f730a64d61a2/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd61fa5aef171e27209f1fad6388f730a64d61a2/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=fd61fa5aef171e27209f1fad6388f730a64d61a2", "patch": "@@ -20,6 +20,8 @@ use middle::cstore::{ExternCrate, LinkagePreference, NativeLibrary};\n use middle::cstore::NativeLibraryKind;\n use middle::privacy::AccessLevels;\n use middle::region;\n+use middle::region::RegionMaps;\n+use middle::resolve_lifetime::{Region, ObjectLifetimeDefault};\n use mir;\n use mir::transform::{MirSuite, MirPassIndex};\n use session::CompileResult;\n@@ -649,6 +651,24 @@ impl<'tcx> QueryDescription for queries::link_args<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::named_region<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n+        format!(\"fetching info about a named region\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::is_late_bound<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n+        format!(\"testing whether a lifetime is late bound\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::object_lifetime_defaults<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n+        format!(\"fetching a list of ObjectLifetimeDefault for a lifetime\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1243,6 +1263,11 @@ define_maps! { <'tcx>\n     [] native_library_kind: NativeLibraryKind(DefId)\n         -> Option<NativeLibraryKind>,\n     [] link_args: link_args_node(CrateNum) -> Rc<Vec<String>>,\n+\n+    [] named_region: NamedRegion(HirId) -> Option<Region>,\n+    [] is_late_bound: IsLateBound(HirId) -> bool,\n+    [] object_lifetime_defaults: ObjectLifetimeDefaults(HirId)\n+        -> Option<Rc<Vec<ObjectLifetimeDefault>>>,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {"}, {"sha": "f391c2f9279dcea8b174a45598afc8fce5271a5b", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd61fa5aef171e27209f1fad6388f730a64d61a2/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd61fa5aef171e27209f1fad6388f730a64d61a2/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=fd61fa5aef171e27209f1fad6388f730a64d61a2", "patch": "@@ -96,22 +96,23 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         -> ty::Region<'tcx>\n     {\n         let tcx = self.tcx();\n-        let r = match tcx.named_region_map.defs.get(&lifetime.id) {\n-            Some(&rl::Region::Static) => {\n+        let hir_id = tcx.hir.node_to_hir_id(lifetime.id);\n+        let r = match tcx.named_region(hir_id) {\n+            Some(rl::Region::Static) => {\n                 tcx.types.re_static\n             }\n \n-            Some(&rl::Region::LateBound(debruijn, id)) => {\n+            Some(rl::Region::LateBound(debruijn, id)) => {\n                 let name = tcx.hir.name(id);\n                 tcx.mk_region(ty::ReLateBound(debruijn,\n                     ty::BrNamed(tcx.hir.local_def_id(id), name)))\n             }\n \n-            Some(&rl::Region::LateBoundAnon(debruijn, index)) => {\n+            Some(rl::Region::LateBoundAnon(debruijn, index)) => {\n                 tcx.mk_region(ty::ReLateBound(debruijn, ty::BrAnon(index)))\n             }\n \n-            Some(&rl::Region::EarlyBound(index, id)) => {\n+            Some(rl::Region::EarlyBound(index, id)) => {\n                 let name = tcx.hir.name(id);\n                 tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n                     def_id: tcx.hir.local_def_id(id),\n@@ -120,7 +121,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 }))\n             }\n \n-            Some(&rl::Region::Free(scope, id)) => {\n+            Some(rl::Region::Free(scope, id)) => {\n                 let name = tcx.hir.name(id);\n                 tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                     scope,\n@@ -627,7 +628,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             self.ast_region_to_region(lifetime, None)\n         } else {\n             self.compute_object_lifetime_bound(span, existential_predicates).unwrap_or_else(|| {\n-                if tcx.named_region_map.defs.contains_key(&lifetime.id) {\n+                let hir_id = tcx.hir.node_to_hir_id(lifetime.id);\n+                if tcx.named_region(hir_id).is_some() {\n                     self.ast_region_to_region(lifetime, None)\n                 } else {\n                     self.re_infer(span, None).unwrap_or_else(|| {"}, {"sha": "38b72677bc654cdbe524634cc2e14f936d9e0a25", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd61fa5aef171e27209f1fad6388f730a64d61a2/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd61fa5aef171e27209f1fad6388f730a64d61a2/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=fd61fa5aef171e27209f1fad6388f730a64d61a2", "patch": "@@ -812,7 +812,8 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         fn visit_lifetime(&mut self, lt: &'tcx hir::Lifetime) {\n             if self.has_late_bound_regions.is_some() { return }\n \n-            match self.tcx.named_region_map.defs.get(&lt.id).cloned() {\n+            let hir_id = self.tcx.hir.node_to_hir_id(lt.id);\n+            match self.tcx.named_region(hir_id) {\n                 Some(rl::Region::Static) | Some(rl::Region::EarlyBound(..)) => {}\n                 Some(rl::Region::LateBound(debruijn, _)) |\n                 Some(rl::Region::LateBoundAnon(debruijn, _))\n@@ -830,7 +831,8 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             tcx, binder_depth: 1, has_late_bound_regions: None\n         };\n         for lifetime in &generics.lifetimes {\n-            if tcx.named_region_map.late_bound.contains(&lifetime.lifetime.id) {\n+            let hir_id = tcx.hir.node_to_hir_id(lifetime.lifetime.id);\n+            if tcx.is_late_bound(hir_id) {\n                 return Some(lifetime.lifetime.span);\n             }\n         }\n@@ -987,8 +989,8 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }).collect::<Vec<_>>();\n \n-    let object_lifetime_defaults =\n-        tcx.named_region_map.object_lifetime_defaults.get(&node_id);\n+    let hir_id = tcx.hir.node_to_hir_id(node_id);\n+    let object_lifetime_defaults = tcx.object_lifetime_defaults(hir_id);\n \n     // Now create the real type parameters.\n     let type_start = own_start + regions.len() as u32;\n@@ -1014,7 +1016,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             def_id: tcx.hir.local_def_id(p.id),\n             has_default: p.default.is_some(),\n             object_lifetime_default:\n-                object_lifetime_defaults.map_or(rl::Set1::Empty, |o| o[i]),\n+                object_lifetime_defaults.as_ref().map_or(rl::Set1::Empty, |o| o[i]),\n             pure_wrt_drop: p.pure_wrt_drop,\n         }\n     });\n@@ -1343,7 +1345,10 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx>(\n     ast_generics\n         .lifetimes\n         .iter()\n-        .filter(move |l| !tcx.named_region_map.late_bound.contains(&l.lifetime.id))\n+        .filter(move |l| {\n+            let hir_id = tcx.hir.node_to_hir_id(l.lifetime.id);\n+            !tcx.is_late_bound(hir_id)\n+        })\n }\n \n fn predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "f446bf587bdcd0c30f904f351a789c13773638a1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd61fa5aef171e27209f1fad6388f730a64d61a2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd61fa5aef171e27209f1fad6388f730a64d61a2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fd61fa5aef171e27209f1fad6388f730a64d61a2", "patch": "@@ -830,7 +830,8 @@ impl Lifetime {\n \n impl Clean<Lifetime> for hir::Lifetime {\n     fn clean(&self, cx: &DocContext) -> Lifetime {\n-        let def = cx.tcx.named_region_map.defs.get(&self.id).cloned();\n+        let hir_id = cx.tcx.hir.node_to_hir_id(self.id);\n+        let def = cx.tcx.named_region(hir_id);\n         match def {\n             Some(rl::Region::EarlyBound(_, node_id)) |\n             Some(rl::Region::LateBound(_, node_id)) |"}]}