{"sha": "d793cd266c3163ab5ef8a109098dc409ba690e8e", "node_id": "C_kwDOAAsO6NoAKGQ3OTNjZDI2NmMzMTYzYWI1ZWY4YTEwOTA5OGRjNDA5YmE2OTBlOGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-20T17:45:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-20T17:45:17Z"}, "message": "Rollup merge of #100796 - TaKO8Ki:remove-unnecessary-string-searching, r=compiler-errors\n\nRefactor: remove unnecessary string searchings\n\nThis patch removes unnecessary string searchings for checking if function arguments have `&` and `&mut`.", "tree": {"sha": "e6eb6275fb4c66005fa06c354dc3e7a6e873859e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6eb6275fb4c66005fa06c354dc3e7a6e873859e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d793cd266c3163ab5ef8a109098dc409ba690e8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjAR2tCRBK7hj4Ov3rIwAAYnEIAE+fLRWvMJEuaqlsKEAn8MJg\nSOEgw9TJozMayDtFPN0LDCjuemp8DJC69BqogYzieg7ftIMv9GJly42jPtq+QTtV\nZO9jTx2b9oSwBRIw3Efn4O8z5p63NQuiHg1BFR21r7odRRDUtSg7KH5DjCR65Yvc\npgx/wtNBI0pyVE1IcZLPIOy5hPns+g4vQXbZZHkMRKzFcRAlrOVS9vSufjqmRPEQ\nsXl/+JU+ItGwuI1XWuORhkS7jOWfnqnYObY13Y8oPCLq0f4mG7ws8ppA+OhHFdBQ\nVhfk6fX41ksxVFAqwqusher8kCbK1rWx05q7Bc3FCOPm9zWeIswvrrlDR0rUkFs=\n=fH1S\n-----END PGP SIGNATURE-----\n", "payload": "tree e6eb6275fb4c66005fa06c354dc3e7a6e873859e\nparent 44894a7c51627df9bcd707a96b3a91f395c3da8e\nparent 973510749d955d72a8bf6f27775df3a5f8d652f2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661017517 +0200\ncommitter GitHub <noreply@github.com> 1661017517 +0200\n\nRollup merge of #100796 - TaKO8Ki:remove-unnecessary-string-searching, r=compiler-errors\n\nRefactor: remove unnecessary string searchings\n\nThis patch removes unnecessary string searchings for checking if function arguments have `&` and `&mut`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d793cd266c3163ab5ef8a109098dc409ba690e8e", "html_url": "https://github.com/rust-lang/rust/commit/d793cd266c3163ab5ef8a109098dc409ba690e8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d793cd266c3163ab5ef8a109098dc409ba690e8e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44894a7c51627df9bcd707a96b3a91f395c3da8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/44894a7c51627df9bcd707a96b3a91f395c3da8e", "html_url": "https://github.com/rust-lang/rust/commit/44894a7c51627df9bcd707a96b3a91f395c3da8e"}, {"sha": "973510749d955d72a8bf6f27775df3a5f8d652f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/973510749d955d72a8bf6f27775df3a5f8d652f2", "html_url": "https://github.com/rust-lang/rust/commit/973510749d955d72a8bf6f27775df3a5f8d652f2"}], "stats": {"total": 61, "additions": 35, "deletions": 26}, "files": [{"sha": "0d279069694a90ecf197a7ee03342a4c98e62415", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d793cd266c3163ab5ef8a109098dc409ba690e8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d793cd266c3163ab5ef8a109098dc409ba690e8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d793cd266c3163ab5ef8a109098dc409ba690e8e", "patch": "@@ -671,7 +671,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n         // It only make sense when suggesting dereferences for arguments\n-        let ObligationCauseCode::FunctionArgumentObligation { .. } = obligation.cause.code() else {\n+        let ObligationCauseCode::FunctionArgumentObligation { arg_hir_id, .. } = obligation.cause.code() else {\n             return false;\n         };\n         let param_env = obligation.param_env;\n@@ -702,19 +702,22 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     Some(steps).filter(|_| self.predicate_may_hold(&obligation))\n                 }) {\n                     if steps > 0 {\n-                        if let Ok(src) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                            // Don't care about `&mut` because `DerefMut` is used less\n-                            // often and user will not expect autoderef happens.\n-                            if src.starts_with('&') && !src.starts_with(\"&mut \") {\n-                                let derefs = \"*\".repeat(steps);\n-                                err.span_suggestion(\n-                                    span,\n-                                    \"consider dereferencing here\",\n-                                    format!(\"&{}{}\", derefs, &src[1..]),\n-                                    Applicability::MachineApplicable,\n-                                );\n-                                return true;\n-                            }\n+                        // Don't care about `&mut` because `DerefMut` is used less\n+                        // often and user will not expect autoderef happens.\n+                        if let Some(hir::Node::Expr(hir::Expr {\n+                            kind:\n+                                hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Not, expr),\n+                            ..\n+                        })) = self.tcx.hir().find(*arg_hir_id)\n+                        {\n+                            let derefs = \"*\".repeat(steps);\n+                            err.span_suggestion_verbose(\n+                                expr.span.shrink_to_lo(),\n+                                \"consider dereferencing here\",\n+                                derefs,\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return true;\n                         }\n                     }\n                 } else if real_trait_pred != trait_pred {"}, {"sha": "eb2b88059d485e0059be5f736f5e26b96911421f", "filename": "src/test/ui/traits/suggest-deferences/issue-39029.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d793cd266c3163ab5ef8a109098dc409ba690e8e/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d793cd266c3163ab5ef8a109098dc409ba690e8e/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr?ref=d793cd266c3163ab5ef8a109098dc409ba690e8e", "patch": "@@ -2,10 +2,8 @@ error[E0277]: the trait bound `NoToSocketAddrs: ToSocketAddrs` is not satisfied\n   --> $DIR/issue-39029.rs:16:37\n    |\n LL |     let _errors = TcpListener::bind(&bad);\n-   |                   ----------------- ^^^^\n-   |                   |                 |\n-   |                   |                 the trait `ToSocketAddrs` is not implemented for `NoToSocketAddrs`\n-   |                   |                 help: consider dereferencing here: `&*bad`\n+   |                   ----------------- ^^^^ the trait `ToSocketAddrs` is not implemented for `NoToSocketAddrs`\n+   |                   |\n    |                   required by a bound introduced by this call\n    |\n    = note: required for `&NoToSocketAddrs` to implement `ToSocketAddrs`\n@@ -14,6 +12,10 @@ note: required by a bound in `TcpListener::bind`\n    |\n LL |     pub fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {\n    |                    ^^^^^^^^^^^^^ required by this bound in `TcpListener::bind`\n+help: consider dereferencing here\n+   |\n+LL |     let _errors = TcpListener::bind(&*bad);\n+   |                                      +\n \n error: aborting due to previous error\n "}, {"sha": "e47ae0b65af0e62e07b084173955bb60dd9c3660", "filename": "src/test/ui/traits/suggest-deferences/issue-62530.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d793cd266c3163ab5ef8a109098dc409ba690e8e/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d793cd266c3163ab5ef8a109098dc409ba690e8e/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr?ref=d793cd266c3163ab5ef8a109098dc409ba690e8e", "patch": "@@ -2,17 +2,19 @@ error[E0277]: the trait bound `&String: SomeTrait` is not satisfied\n   --> $DIR/issue-62530.rs:13:26\n    |\n LL |     takes_type_parameter(&string);  // Error\n-   |     -------------------- ^^^^^^^\n-   |     |                    |\n-   |     |                    the trait `SomeTrait` is not implemented for `&String`\n-   |     |                    help: consider dereferencing here: `&*string`\n+   |     -------------------- ^^^^^^^ the trait `SomeTrait` is not implemented for `&String`\n+   |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `takes_type_parameter`\n   --> $DIR/issue-62530.rs:4:44\n    |\n LL | fn takes_type_parameter<T>(_x: T) where T: SomeTrait {}\n    |                                            ^^^^^^^^^ required by this bound in `takes_type_parameter`\n+help: consider dereferencing here\n+   |\n+LL |     takes_type_parameter(&*string);  // Error\n+   |                           +\n \n error: aborting due to previous error\n "}, {"sha": "6a4d4b8d5212f0aa472934f06f78f85e4639cdb0", "filename": "src/test/ui/traits/suggest-deferences/multiple-0.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d793cd266c3163ab5ef8a109098dc409ba690e8e/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d793cd266c3163ab5ef8a109098dc409ba690e8e/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr?ref=d793cd266c3163ab5ef8a109098dc409ba690e8e", "patch": "@@ -2,17 +2,19 @@ error[E0277]: the trait bound `&Baz: Happy` is not satisfied\n   --> $DIR/multiple-0.rs:34:9\n    |\n LL |     foo(&baz);\n-   |     --- ^^^^\n-   |     |   |\n-   |     |   the trait `Happy` is not implemented for `&Baz`\n-   |     |   help: consider dereferencing here: `&***baz`\n+   |     --- ^^^^ the trait `Happy` is not implemented for `&Baz`\n+   |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `foo`\n   --> $DIR/multiple-0.rs:30:26\n    |\n LL | fn foo<T>(_: T) where T: Happy {}\n    |                          ^^^^^ required by this bound in `foo`\n+help: consider dereferencing here\n+   |\n+LL |     foo(&***baz);\n+   |          +++\n \n error: aborting due to previous error\n "}]}