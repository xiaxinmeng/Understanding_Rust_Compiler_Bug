{"sha": "d0ef7f455cbbd0a0d8ac706f8e0ccbd30f15b0ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZWY3ZjQ1NWNiYmQwYTBkOGFjNzA2ZjhlMGNjYmQzMGYxNWIwZWM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-18T09:55:32Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-18T09:55:52Z"}, "message": "Add docs and expand some wildcard patterns", "tree": {"sha": "d34008f1f759c92d2eb9b9e8aae95517bd11198d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d34008f1f759c92d2eb9b9e8aae95517bd11198d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0ef7f455cbbd0a0d8ac706f8e0ccbd30f15b0ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ef7f455cbbd0a0d8ac706f8e0ccbd30f15b0ec", "html_url": "https://github.com/rust-lang/rust/commit/d0ef7f455cbbd0a0d8ac706f8e0ccbd30f15b0ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0ef7f455cbbd0a0d8ac706f8e0ccbd30f15b0ec/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af3234cfd746a1b6c16293baef5535b1f33ed99b", "url": "https://api.github.com/repos/rust-lang/rust/commits/af3234cfd746a1b6c16293baef5535b1f33ed99b", "html_url": "https://github.com/rust-lang/rust/commit/af3234cfd746a1b6c16293baef5535b1f33ed99b"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "40ddd2478a6de2d62ed84ce40298d497477d4445", "filename": "Readme.md", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d0ef7f455cbbd0a0d8ac706f8e0ccbd30f15b0ec/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0ef7f455cbbd0a0d8ac706f8e0ccbd30f15b0ec/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=d0ef7f455cbbd0a0d8ac706f8e0ccbd30f15b0ec", "patch": "@@ -0,0 +1,38 @@\n+# Work in progress cranelift codegen backend for rust\n+\n+> \u26a0\u26a0\u26a0 This doesn't do anything useful yet \u26a0\u26a0\u26a0\n+\n+## Building\n+\n+```bash\n+$ git clone https://github.com/bjorn3/rustc_codegen_cranelift\n+$ cd rustc_codegen_cranelift\n+$ git submodule update --init\n+$ cargo build\n+```\n+\n+## Usage\n+\n+```bash\n+$ rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.so my_crate.rs --crate-type lib -Og\n+```\n+\n+> You must compile with `-Og`, because checked binops are not yet supported.\n+\n+## Not yet supported\n+\n+* [ ] Checked binops\n+* [ ] Statics\n+* [ ] Drop glue\n+* [ ] Ints cast\n+\n+* [ ] Building libraries\n+* [ ] Other call abi's\n+* [ ] Unsized types\n+* [ ] Slice indexing\n+* [ ] Sub slice\n+* [ ] Closures\n+* [ ] Some rvalue's\n+\n+* [ ] Inline assembly\n+* [ ] Custom sections\n\\ No newline at end of file"}, {"sha": "6f72fadf487263486390147e1621471382cde7dd", "filename": "src/base.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d0ef7f455cbbd0a0d8ac706f8e0ccbd30f15b0ec/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ef7f455cbbd0a0d8ac706f8e0ccbd30f15b0ec/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=d0ef7f455cbbd0a0d8ac706f8e0ccbd30f15b0ec", "patch": "@@ -55,7 +55,9 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend\n             }\n             inst => cx.tcx.sess.warn(&format!(\"Unimplemented instance {:?}\", inst)),\n         }\n-        mono_item => cx.tcx.sess.warn(&format!(\"Unimplemented mono item {:?}\", mono_item)),\n+        MonoItem::Static(def_id) => cx.tcx.sess.err(&format!(\"Unimplemented static mono item {:?}\", def_id)),\n+        MonoItem::GlobalAsm(node_id) => cx.tcx.sess.err(&format!(\"Unimplemented global asm mono item {:?}\", node_id)),\n+        MonoItem::CustomSection(def_id) => cx.tcx.sess.err(&format!(\"Unimplemented custom section mono item {:?}\", def_id)),\n     }\n }\n \n@@ -367,6 +369,9 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx\n                     let layout = fx.layout_of(ty);\n                     lval.write_cvalue(fx, operand.unchecked_cast_to(layout));\n                 }\n+                Rvalue::Cast(CastKind::Misc, operand, ty) => unimplemented!(\"rval misc {:?} {:?}\", operand, ty),\n+                Rvalue::Cast(CastKind::ClosureFnPointer, operand, ty) => unimplemented!(\"rval closure_fn_ptr {:?} {:?}\", operand, ty),\n+                Rvalue::Cast(CastKind::Unsize, operand, ty) => unimplemented!(\"rval unsize {:?} {:?}\", operand, ty),\n                 Rvalue::Discriminant(place) => {\n                     let place = trans_place(fx, place);\n                     let dest_cton_ty = fx.cton_type(dest_layout.ty).unwrap();\n@@ -428,13 +433,17 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx\n                         }\n                     }\n                 }\n-                rval => unimplemented!(\"rval {:?}\", rval),\n+                Rvalue::Repeat(operand, times) => unimplemented!(\"rval repeat {:?} {:?}\", operand, times),\n+                Rvalue::Len(lval) => unimplemented!(\"rval len {:?}\", lval),\n+                Rvalue::NullaryOp(NullOp::Box, ty) => unimplemented!(\"rval box {:?}\", ty),\n+                Rvalue::NullaryOp(NullOp::SizeOf, ty) => unimplemented!(\"rval size_of {:?}\", ty),\n+                Rvalue::Aggregate(_, _) => bug!(\"shouldn't exist at trans {:?}\", rval),\n             }\n         }\n-        StatementKind::StorageLive(_) | StatementKind::StorageDead(_) | StatementKind::Nop => {\n+        StatementKind::StorageLive(_) | StatementKind::StorageDead(_) | StatementKind::Nop | StatementKind::ReadForMatch(_) | StatementKind::Validate(_, _) | StatementKind::EndRegion(_) | StatementKind::UserAssertTy(_, _) => {\n             fx.bcx.ins().nop();\n         }\n-        _ => unimplemented!(\"stmt {:?}\", stmt),\n+        StatementKind::InlineAsm { .. } => fx.tcx.sess.fatal(\"Inline assembly is not supported\"),\n     }\n \n     let inst = fx.bcx.func.layout.next_inst(nop_inst).unwrap();\n@@ -481,6 +490,7 @@ fn trans_int_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, l\n fn trans_place<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, place: &Place<'tcx>) -> CPlace<'tcx> {\n     match place {\n         Place::Local(local) => fx.get_local_place(*local),\n+        Place::Static(static_) => unimplemented!(\"static place {:?} ty {:?}\", static_.def_id, static_.ty),\n         Place::Projection(projection) => {\n             let base = trans_place(fx, &projection.base);\n             match projection.elem {\n@@ -490,13 +500,15 @@ fn trans_place<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, place: &Place<'tcx>)\n                 ProjectionElem::Field(field, _ty) => {\n                     base.place_field(fx, field)\n                 }\n+                ProjectionElem::Index(local) => unimplemented!(\"projection index {:?} {:?}\", projection.base, local),\n+                ProjectionElem::ConstantIndex { offset, min_length: _, from_end: false } => unimplemented!(\"projection const index {:?} offset {:?} not from end\", projection.base, offset),\n+                ProjectionElem::ConstantIndex { offset, min_length: _, from_end: true } => unimplemented!(\"projection const index {:?} offset {:?} from end\", projection.base, offset),\n+                ProjectionElem::Subslice { from, to } => unimplemented!(\"projection subslice {:?} from {} to {}\", projection.base, from, to),\n                 ProjectionElem::Downcast(_adt_def, variant) => {\n                     base.downcast_variant(fx, variant)\n                 }\n-                _ => unimplemented!(\"projection {:?}\", projection),\n             }\n         }\n-        place => unimplemented!(\"place {:?}\", place),\n     }\n }\n "}, {"sha": "5a47c9e7ad0a6c16918e6c508322c211849f1322", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0ef7f455cbbd0a0d8ac706f8e0ccbd30f15b0ec/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ef7f455cbbd0a0d8ac706f8e0ccbd30f15b0ec/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=d0ef7f455cbbd0a0d8ac706f8e0ccbd30f15b0ec", "patch": "@@ -61,6 +61,7 @@ fn cton_type_from_ty<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) ->\n     })\n }\n \n+/// A read-only value\n #[derive(Debug, Copy, Clone)]\n pub enum CValue<'tcx> {\n     ByRef(Value, TyLayout<'tcx>),\n@@ -158,6 +159,7 @@ impl<'tcx> CValue<'tcx> {\n     }\n }\n \n+/// A place where you can write a value to or read a value from\n #[derive(Debug, Copy, Clone)]\n pub enum CPlace<'tcx> {\n     Var(Variable, TyLayout<'tcx>),"}]}