{"sha": "af800c7873b7dfa28a8583e2e89d4c573d525bb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmODAwYzc4NzNiN2RmYTI4YTg1ODNlMmU4OWQ0YzU3M2Q1MjViYjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T00:10:56Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T00:13:06Z"}, "message": "typeck/expr.rs: move check_expr_assign here.", "tree": {"sha": "0189e74697fc80035f4eecadac91a66278ebc4f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0189e74697fc80035f4eecadac91a66278ebc4f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af800c7873b7dfa28a8583e2e89d4c573d525bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af800c7873b7dfa28a8583e2e89d4c573d525bb5", "html_url": "https://github.com/rust-lang/rust/commit/af800c7873b7dfa28a8583e2e89d4c573d525bb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af800c7873b7dfa28a8583e2e89d4c573d525bb5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a41cc1715accbfa9d5683240028db22ecbe54a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a41cc1715accbfa9d5683240028db22ecbe54a5", "html_url": "https://github.com/rust-lang/rust/commit/7a41cc1715accbfa9d5683240028db22ecbe54a5"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "7e8220573aec2f62a960c9c7959491b53f179863", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/af800c7873b7dfa28a8583e2e89d4c573d525bb5/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af800c7873b7dfa28a8583e2e89d4c573d525bb5/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=af800c7873b7dfa28a8583e2e89d4c573d525bb5", "patch": "@@ -90,7 +90,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_expr_return(expr_opt.deref(), expr)\n             }\n             ExprKind::Assign(ref lhs, ref rhs) => {\n-                self.check_assign(expr, expected, lhs, rhs)\n+                self.check_expr_assign(expr, expected, lhs, rhs)\n             }\n             ExprKind::While(ref cond, ref body, _) => {\n                 let ctxt = BreakableCtxt {\n@@ -742,4 +742,49 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         self.tcx.types.never\n     }\n+\n+    /// Type check assignment expression `expr` of form `lhs = rhs`.\n+    /// The expected type is `()` and is passsed to the function for the purposes of diagnostics.\n+    fn check_expr_assign(\n+        &self,\n+        expr: &'tcx hir::Expr,\n+        expected: Expectation<'tcx>,\n+        lhs: &'tcx hir::Expr,\n+        rhs: &'tcx hir::Expr,\n+    ) -> Ty<'tcx> {\n+        let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n+        let rhs_ty = self.check_expr_coercable_to_type(&rhs, lhs_ty);\n+\n+        let expected_ty = expected.coercion_target_type(self, expr.span);\n+        if expected_ty == self.tcx.types.bool {\n+            // The expected type is `bool` but this will result in `()` so we can reasonably\n+            // say that the user intended to write `lhs == rhs` instead of `lhs = rhs`.\n+            // The likely cause of this is `if foo = bar { .. }`.\n+            let actual_ty = self.tcx.mk_unit();\n+            let mut err = self.demand_suptype_diag(expr.span, expected_ty, actual_ty).unwrap();\n+            let msg = \"try comparing for equality\";\n+            let left = self.tcx.sess.source_map().span_to_snippet(lhs.span);\n+            let right = self.tcx.sess.source_map().span_to_snippet(rhs.span);\n+            if let (Ok(left), Ok(right)) = (left, right) {\n+                let help = format!(\"{} == {}\", left, right);\n+                err.span_suggestion(expr.span, msg, help, Applicability::MaybeIncorrect);\n+            } else {\n+                err.help(msg);\n+            }\n+            err.emit();\n+        } else if !lhs.is_place_expr() {\n+            struct_span_err!(self.tcx.sess, expr.span, E0070,\n+                                \"invalid left-hand side expression\")\n+                .span_label(expr.span, \"left-hand of expression not valid\")\n+                .emit();\n+        }\n+\n+        self.require_type_is_sized(lhs_ty, lhs.span, traits::AssignmentLhsSized);\n+\n+        if lhs_ty.references_error() || rhs_ty.references_error() {\n+            self.tcx.types.err\n+        } else {\n+            self.tcx.mk_unit()\n+        }\n+    }\n }"}, {"sha": "05e3fe1a9deb4e811ae3b2c28411ddb46dff5475", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/af800c7873b7dfa28a8583e2e89d4c573d525bb5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af800c7873b7dfa28a8583e2e89d4c573d525bb5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=af800c7873b7dfa28a8583e2e89d4c573d525bb5", "patch": "@@ -3983,51 +3983,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty\n     }\n \n-    /// Type check assignment expression `expr` of form `lhs = rhs`.\n-    /// The expected type is `()` and is passsed to the function for the purposes of diagnostics.\n-    fn check_assign(\n-        &self,\n-        expr: &'tcx hir::Expr,\n-        expected: Expectation<'tcx>,\n-        lhs: &'tcx hir::Expr,\n-        rhs: &'tcx hir::Expr,\n-    ) -> Ty<'tcx> {\n-        let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n-        let rhs_ty = self.check_expr_coercable_to_type(&rhs, lhs_ty);\n-\n-        let expected_ty = expected.coercion_target_type(self, expr.span);\n-        if expected_ty == self.tcx.types.bool {\n-            // The expected type is `bool` but this will result in `()` so we can reasonably\n-            // say that the user intended to write `lhs == rhs` instead of `lhs = rhs`.\n-            // The likely cause of this is `if foo = bar { .. }`.\n-            let actual_ty = self.tcx.mk_unit();\n-            let mut err = self.demand_suptype_diag(expr.span, expected_ty, actual_ty).unwrap();\n-            let msg = \"try comparing for equality\";\n-            let left = self.tcx.sess.source_map().span_to_snippet(lhs.span);\n-            let right = self.tcx.sess.source_map().span_to_snippet(rhs.span);\n-            if let (Ok(left), Ok(right)) = (left, right) {\n-                let help = format!(\"{} == {}\", left, right);\n-                err.span_suggestion(expr.span, msg, help, Applicability::MaybeIncorrect);\n-            } else {\n-                err.help(msg);\n-            }\n-            err.emit();\n-        } else if !lhs.is_place_expr() {\n-            struct_span_err!(self.tcx.sess, expr.span, E0070,\n-                                \"invalid left-hand side expression\")\n-                .span_label(expr.span, \"left-hand of expression not valid\")\n-                .emit();\n-        }\n-\n-        self.require_type_is_sized(lhs_ty, lhs.span, traits::AssignmentLhsSized);\n-\n-        if lhs_ty.references_error() || rhs_ty.references_error() {\n-            self.tcx.types.err\n-        } else {\n-            self.tcx.mk_unit()\n-        }\n-    }\n-\n     // Finish resolving a path in a struct expression or pattern `S::A { .. }` if necessary.\n     // The newly resolved definition is written into `type_dependent_defs`.\n     fn finish_resolving_struct_path(&self,"}]}