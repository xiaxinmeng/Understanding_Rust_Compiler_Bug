{"sha": "23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNDkxMDg0YmMzZTQ0ZGRjOWIyYjNmYmUwZjk1N2RjODkxYjRiMDg=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-10-04T00:45:12Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-10-06T18:14:25Z"}, "message": "Update to chalk 0.31. Implement some unimplemented. Ignore some tests in compare mode chalk don't finish.", "tree": {"sha": "5131d34f771723c13dc1be1f84f60f2d9c64d376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5131d34f771723c13dc1be1f84f60f2d9c64d376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "html_url": "https://github.com/rust-lang/rust/commit/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08e2d4616613716362b4b49980ff303f2b9ae654", "url": "https://api.github.com/repos/rust-lang/rust/commits/08e2d4616613716362b4b49980ff303f2b9ae654", "html_url": "https://github.com/rust-lang/rust/commit/08e2d4616613716362b4b49980ff303f2b9ae654"}], "stats": {"total": 242, "additions": 143, "deletions": 99}, "files": [{"sha": "41a66767aa9960a30b1f986dfe6b123bc024b7fd", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -442,9 +442,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.29.0\"\n+version = \"0.31.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3a7f257e3bcdc56d8877ae31c012bd69fba0be66929d588e603905f2632c0c59\"\n+checksum = \"ca40c97e20f43e4aac2282d342103d45fafad74ad9bfcbaaf0b5d386f9ce1f39\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -454,9 +454,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.29.0\"\n+version = \"0.31.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c43fcc7edf4d51b42f44ed50e2337bd90ddc8e088d0cd78a71db92a6f780f782\"\n+checksum = \"88e3d545394fbc4f7d8fe203c6a78d2b73f82bb119f21af98de1f924c2518e34\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -467,19 +467,19 @@ dependencies = [\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.29.0\"\n+version = \"0.31.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"03a4050029ecb2b5a1ff3bfc64c39279179b294821ec2e8891a4a5c6e3a08db0\"\n+checksum = \"8c4183955e084fcc387b515f867ed0e17e9e7301f5eee29c0338d5e63315bb41\"\n dependencies = [\n  \"chalk-derive\",\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.29.0\"\n+version = \"0.31.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"828c1f80d4eaf681027cce02050c54a3c97370f81988d31bf2a56df54048746c\"\n+checksum = \"50e8407bba06d9e760011a28060e8f3b3f87b82ea53fb8bfaa43614c19c14dcc\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -5121,9 +5121,9 @@ dependencies = [\n \n [[package]]\n name = \"tracing-serde\"\n-version = \"0.1.1\"\n+version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b6ccba2f8f16e0ed268fc765d9b7ff22e965e7185d32f8f1ec8294fe17d86e79\"\n+checksum = \"fb65ea441fbb84f9f6748fd496cf7f63ec9af5bca94dd86456978d055e8eb28b\"\n dependencies = [\n  \"serde\",\n  \"tracing-core\","}, {"sha": "f9a450305d0c504a06302141f890f861ea7b05f9", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -26,7 +26,7 @@ rustc_index = { path = \"../rustc_index\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-chalk-ir = \"0.29.0\"\n+chalk-ir = \"0.31.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"0.7.1\"\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "b176b150cd39ef4287db529c61f12305a3aabab7", "filename": "compiler/rustc_traits/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/compiler%2Frustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/compiler%2Frustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2FCargo.toml?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -12,9 +12,9 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-chalk-ir = \"0.29.0\"\n-chalk-solve = \"0.29.0\"\n-chalk-engine = \"0.29.0\"\n+chalk-ir = \"0.31.0\"\n+chalk-solve = \"0.31.0\"\n+chalk-engine = \"0.31.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }"}, {"sha": "3368c5b769902777789ce31d14f2dcbc29302414", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -22,7 +22,6 @@ use rustc_ast::ast;\n \n pub struct RustIrDatabase<'tcx> {\n     pub(crate) interner: RustInterner<'tcx>,\n-    pub(crate) restatic_placeholder: ty::Region<'tcx>,\n     pub(crate) reempty_placeholder: ty::Region<'tcx>,\n }\n \n@@ -39,11 +38,8 @@ impl<'tcx> RustIrDatabase<'tcx> {\n         bound_vars: SubstsRef<'tcx>,\n     ) -> Vec<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>> {\n         let predicates = self.interner.tcx.predicates_of(def_id).predicates;\n-        let mut regions_substitutor = lowering::RegionsSubstitutor::new(\n-            self.interner.tcx,\n-            self.restatic_placeholder,\n-            self.reempty_placeholder,\n-        );\n+        let mut regions_substitutor =\n+            lowering::RegionsSubstitutor::new(self.interner.tcx, self.reempty_placeholder);\n         predicates\n             .iter()\n             .map(|(wc, _)| wc.subst(self.interner.tcx, bound_vars))\n@@ -274,11 +270,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let trait_ref = self.interner.tcx.impl_trait_ref(def_id).expect(\"not an impl\");\n         let trait_ref = trait_ref.subst(self.interner.tcx, bound_vars);\n-        let mut regions_substitutor = lowering::RegionsSubstitutor::new(\n-            self.interner.tcx,\n-            self.restatic_placeholder,\n-            self.reempty_placeholder,\n-        );\n+        let mut regions_substitutor =\n+            lowering::RegionsSubstitutor::new(self.interner.tcx, self.reempty_placeholder);\n         let trait_ref = trait_ref.fold_with(&mut regions_substitutor);\n \n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n@@ -316,11 +309,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n             let self_ty = trait_ref.self_ty();\n             let self_ty = self_ty.subst(self.interner.tcx, bound_vars);\n-            let mut regions_substitutor = lowering::RegionsSubstitutor::new(\n-                self.interner.tcx,\n-                self.restatic_placeholder,\n-                self.reempty_placeholder,\n-            );\n+            let mut regions_substitutor =\n+                lowering::RegionsSubstitutor::new(self.interner.tcx, self.reempty_placeholder);\n             let self_ty = self_ty.fold_with(&mut regions_substitutor);\n             let lowered_ty = self_ty.lower_into(&self.interner);\n \n@@ -590,6 +580,20 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let substitution = &substs.as_slice(&self.interner)[0..substs.len(&self.interner) - 3];\n         chalk_ir::Substitution::from_iter(&self.interner, substitution)\n     }\n+\n+    fn generator_datum(\n+        &self,\n+        _generator_id: chalk_ir::GeneratorId<RustInterner<'tcx>>,\n+    ) -> Arc<chalk_solve::rust_ir::GeneratorDatum<RustInterner<'tcx>>> {\n+        unimplemented!()\n+    }\n+\n+    fn generator_witness_datum(\n+        &self,\n+        _generator_id: chalk_ir::GeneratorId<RustInterner<'tcx>>,\n+    ) -> Arc<chalk_solve::rust_ir::GeneratorWitnessDatum<RustInterner<'tcx>>> {\n+        unimplemented!()\n+    }\n }\n \n /// Creates a `InternalSubsts` that maps each generic parameter to a higher-ranked"}, {"sha": "391251b6fa554e9d781342e870e5b0533f79f56e", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -427,13 +427,20 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n                         chalk_ir::FloatTy::F64 => ty::Float(ast::FloatTy::F64),\n                     },\n                 },\n-                chalk_ir::TypeName::Array => unimplemented!(),\n+                chalk_ir::TypeName::Array => {\n+                    let substs = application_ty.substitution.as_slice(interner);\n+                    let ty = substs[0].assert_ty_ref(interner).lower_into(interner);\n+                    let c = substs[1].assert_const_ref(interner).lower_into(interner);\n+                    ty::Array(ty, interner.tcx.mk_const(c))\n+                }\n                 chalk_ir::TypeName::FnDef(id) => {\n                     ty::FnDef(id.0, application_ty.substitution.lower_into(interner))\n                 }\n                 chalk_ir::TypeName::Closure(closure) => {\n                     ty::Closure(closure.0, application_ty.substitution.lower_into(interner))\n                 }\n+                chalk_ir::TypeName::Generator(_) => unimplemented!(),\n+                chalk_ir::TypeName::GeneratorWitness(_) => unimplemented!(),\n                 chalk_ir::TypeName::Never => ty::Never,\n                 chalk_ir::TypeName::Tuple(_size) => {\n                     ty::Tuple(application_ty.substitution.lower_into(interner))\n@@ -483,7 +490,15 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n                 universe: ty::UniverseIndex::from_usize(placeholder.ui.counter),\n                 name: ty::BoundVar::from_usize(placeholder.idx),\n             }),\n-            TyData::Alias(_alias_ty) => unimplemented!(),\n+            chalk_ir::TyData::Alias(alias_ty) => match alias_ty {\n+                chalk_ir::AliasTy::Projection(projection) => ty::Projection(ty::ProjectionTy {\n+                    item_def_id: projection.associated_ty_id.0,\n+                    substs: projection.substitution.lower_into(interner),\n+                }),\n+                chalk_ir::AliasTy::Opaque(opaque) => {\n+                    ty::Opaque(opaque.opaque_ty_id.0, opaque.substitution.lower_into(interner))\n+                }\n+            },\n             TyData::Function(_quantified_ty) => unimplemented!(),\n             TyData::BoundVar(_bound) => ty::Bound(\n                 ty::DebruijnIndex::from_usize(_bound.debruijn.depth() as usize),\n@@ -519,8 +534,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n                 ty::BrEnv => unimplemented!(),\n             },\n             ReFree(_) => unimplemented!(),\n-            // FIXME(chalk): need to handle ReStatic\n-            ReStatic => unimplemented!(),\n+            ReStatic => chalk_ir::LifetimeData::Static.intern(interner),\n             ReVar(_) => unimplemented!(),\n             RePlaceholder(placeholder_region) => {\n                 chalk_ir::LifetimeData::Placeholder(chalk_ir::PlaceholderIndex {\n@@ -550,6 +564,7 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n                     name: ty::BoundRegion::BrAnon(p.idx as u32),\n                 })\n             }\n+            chalk_ir::LifetimeData::Static => ty::RegionKind::ReStatic,\n             chalk_ir::LifetimeData::Phantom(_, _) => unimplemented!(),\n         };\n         interner.tcx.mk_region(kind)\n@@ -701,7 +716,16 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n                     }),\n                 )\n             }\n-            ty::ExistentialPredicate::Projection(_predicate) => unimplemented!(),\n+            ty::ExistentialPredicate::Projection(predicate) => chalk_ir::Binders::new(\n+                chalk_ir::VariableKinds::empty(interner),\n+                chalk_ir::WhereClause::AliasEq(chalk_ir::AliasEq {\n+                    alias: chalk_ir::AliasTy::Projection(chalk_ir::ProjectionTy {\n+                        associated_ty_id: chalk_ir::AssocTypeId(predicate.item_def_id),\n+                        substitution: predicate.substs.lower_into(interner),\n+                    }),\n+                    ty: predicate.ty.lower_into(interner),\n+                }),\n+            ),\n             ty::ExistentialPredicate::AutoTrait(def_id) => chalk_ir::Binders::new(\n                 chalk_ir::VariableKinds::empty(interner),\n                 chalk_ir::WhereClause::Implemented(chalk_ir::TraitRef {\n@@ -1116,17 +1140,12 @@ impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n /// Used to substitute specific `Regions`s with placeholders.\n crate struct RegionsSubstitutor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    restatic_placeholder: ty::Region<'tcx>,\n     reempty_placeholder: ty::Region<'tcx>,\n }\n \n impl<'tcx> RegionsSubstitutor<'tcx> {\n-    crate fn new(\n-        tcx: TyCtxt<'tcx>,\n-        restatic_placeholder: ty::Region<'tcx>,\n-        reempty_placeholder: ty::Region<'tcx>,\n-    ) -> Self {\n-        RegionsSubstitutor { tcx, restatic_placeholder, reempty_placeholder }\n+    crate fn new(tcx: TyCtxt<'tcx>, reempty_placeholder: ty::Region<'tcx>) -> Self {\n+        RegionsSubstitutor { tcx, reempty_placeholder }\n     }\n }\n \n@@ -1137,7 +1156,6 @@ impl<'tcx> TypeFolder<'tcx> for RegionsSubstitutor<'tcx> {\n \n     fn fold_region(&mut self, r: Region<'tcx>) -> Region<'tcx> {\n         match r {\n-            ty::ReStatic => self.restatic_placeholder,\n             ty::ReEmpty(ui) => {\n                 assert_eq!(ui.as_usize(), 0);\n                 self.reempty_placeholder"}, {"sha": "f174a92274ed622849146650defef8ae10ba9a61", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -42,10 +42,6 @@ crate fn evaluate_goal<'tcx>(\n     let mut placeholders_collector = PlaceholdersCollector::new();\n     obligation.visit_with(&mut placeholders_collector);\n \n-    let restatic_placeholder = tcx.mk_region(ty::RegionKind::RePlaceholder(ty::Placeholder {\n-        universe: ty::UniverseIndex::ROOT,\n-        name: ty::BoundRegion::BrAnon(placeholders_collector.next_anon_region_placeholder),\n-    }));\n     let reempty_placeholder = tcx.mk_region(ty::RegionKind::RePlaceholder(ty::Placeholder {\n         universe: ty::UniverseIndex::ROOT,\n         name: ty::BoundRegion::BrAnon(placeholders_collector.next_anon_region_placeholder + 1),\n@@ -57,8 +53,7 @@ crate fn evaluate_goal<'tcx>(\n     // FIXME(chalk): we really should be substituting these back in the solution\n     let _params: FxHashMap<usize, ParamTy> = params_substitutor.params;\n \n-    let mut regions_substitutor =\n-        RegionsSubstitutor::new(tcx, restatic_placeholder, reempty_placeholder);\n+    let mut regions_substitutor = RegionsSubstitutor::new(tcx, reempty_placeholder);\n     let obligation = obligation.fold_with(&mut regions_substitutor);\n \n     let max_universe = obligation.max_universe.index();\n@@ -101,7 +96,7 @@ crate fn evaluate_goal<'tcx>(\n \n     use chalk_solve::Solver;\n     let mut solver = chalk_engine::solve::SLGSolver::new(32, None);\n-    let db = ChalkRustIrDatabase { interner, restatic_placeholder, reempty_placeholder };\n+    let db = ChalkRustIrDatabase { interner, reempty_placeholder };\n     let solution = chalk_solve::logging::with_tracing_logs(|| solver.solve(&db, &lowered_goal));\n \n     // Ideally, the code to convert *back* to rustc types would live close to"}, {"sha": "0c4907fd002943126756ce039cdc2623cdc19d78", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,6 @@\n // NOTE: rustc cannot currently handle bounds of the form `for<'a> <Foo as Bar<'a>>::Assoc: Baz`.\n // This should hopefully be fixed with Chalk.\n+// ignore-compare-mode-chalk\n \n #![feature(associated_type_bounds)]\n "}, {"sha": "1c493581bc953f9530ec9e2af40bde9b123363f7", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:26:5\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:5\n    |\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n@@ -11,7 +11,7 @@ LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Iterator {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:26:36\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:36\n    |\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                    ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n@@ -28,7 +28,7 @@ LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Send {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:26:93\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:93\n    |\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                                                                             ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely"}, {"sha": "a9aa2747e52af9b3bc0dece674e18e7ed1afeca2", "filename": "src/test/ui/associated-type-bounds/trait-params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-params.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,4 +1,5 @@\n // build-pass (FIXME(62277): could be check-pass?)\n+// ignore-compare-mode-chalk\n \n #![feature(associated_type_bounds)]\n "}, {"sha": "f1aab2a6da071696f7319932b23439bc1245a76f", "filename": "src/test/ui/associated-type-bounds/union-bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-compare-mode-chalk\n \n #![feature(associated_type_bounds)]\n #![feature(untagged_unions)]"}, {"sha": "220ee6af2fc9fed8a71e2347125492d384c9000a", "filename": "src/test/ui/associated-types/associated-types-stream.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-stream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-stream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-stream.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // Test references to the trait `Stream` in the bounds for associated\n // types defined on `Stream`. Issue #20551.\n+// ignore-compare-mode-chalk\n \n \n trait Stream {"}, {"sha": "a04144ba06b6577be3ce5b4be34c198abac95f63", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,3 +1,4 @@\n+// ignore-compare-mode-chalk\n trait Z<'a, T: ?Sized>\n where\n     T: Z<'a, u16>,"}, {"sha": "b48ff97f1211bde961a3049796e60c1f856c8936", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n+  --> $DIR/hr-associated-type-bound-param-2.rs:4:8\n    |\n LL | trait Z<'a, T: ?Sized>\n    |       - required by a bound in this\n@@ -15,7 +15,7 @@ LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n              <&mut T as Clone>\n \n error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-2.rs:15:14\n+  --> $DIR/hr-associated-type-bound-param-2.rs:16:14\n    |\n LL | trait Z<'a, T: ?Sized>\n    |       - required by a bound in this\n@@ -31,7 +31,7 @@ LL |     type W = str;\n              <&mut T as Clone>\n \n error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n+  --> $DIR/hr-associated-type-bound-param-2.rs:4:8\n    |\n LL | trait Z<'a, T: ?Sized>\n    |       - required by a bound in this"}, {"sha": "fc3a85171e273eedcad878c6c8111cbd28641fd7", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,3 +1,4 @@\n+// ignore-compare-mode-chalk\n trait Cycle: Sized {\n     type Next: Cycle<Next = Self>;\n }"}, {"sha": "df25f7ac953e7c5a4cabcfb52100e507981f88d4", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `for<'b> <Box<T> as X<'b, Box<T>>>::U: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:26:14\n+  --> $DIR/hr-associated-type-bound-param-5.rs:27:14\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this\n@@ -15,7 +15,7 @@ LL |     type U = str;\n              <&mut T as Clone>\n \n error[E0277]: the trait bound `for<'b> <Vec<T> as X<'b, Vec<T>>>::U: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:26:14\n+  --> $DIR/hr-associated-type-bound-param-5.rs:27:14\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this\n@@ -31,7 +31,7 @@ LL |     type U = str;\n              <&mut T as Clone>\n \n error[E0277]: the trait bound `for<'b> <Vec<T> as X<'b, Vec<T>>>::U: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:32:14\n+  --> $DIR/hr-associated-type-bound-param-5.rs:33:14\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this\n@@ -47,7 +47,7 @@ LL |     type U = str;\n              <&mut T as Clone>\n \n error[E0277]: the trait bound `for<'b> <Box<T> as X<'b, Box<T>>>::U: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:32:14\n+  --> $DIR/hr-associated-type-bound-param-5.rs:33:14\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this"}, {"sha": "13735ff2c5a1c57a2e1679f4432e26daec8520bf", "filename": "src/test/ui/deriving/deriving-associated-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fderiving%2Fderiving-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fderiving%2Fderiving-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-associated-types.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-compare-mode-chalk\n pub trait DeclaredTrait {\n     type Type;\n }"}, {"sha": "ffe297a5a6a2fa151cdad712ac1c2bf949606af9", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,3 +1,4 @@\n+// ignore-compare-mode-chalk\n use std::fmt::Debug;\n \n type Foo = impl Debug; //~ ERROR `impl Trait` in type aliases is unstable"}, {"sha": "b32cf94985497619f295bf3fd5a5f225831bde26", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:3:12\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:4:12\n    |\n LL | type Foo = impl Debug;\n    |            ^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | type Foo = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:11:16\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:12:16\n    |\n LL |     type Baa = impl Debug;\n    |                ^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     type Baa = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: associated type defaults are unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:22:5\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:23:5\n    |\n LL |     type Assoc = impl Debug;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Assoc = impl Debug;\n    = help: add `#![feature(associated_type_defaults)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:22:18\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:23:18\n    |\n LL |     type Assoc = impl Debug;\n    |                  ^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     type Assoc = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:28:24\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:29:24\n    |\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                        ^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:28:37\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:29:37\n    |\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                                     ^^^^^^^^^^\n@@ -53,7 +53,7 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:28:49\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:29:49\n    |\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -62,7 +62,7 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:28:70\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:29:70\n    |\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                                                                      ^^^^^^^^^^\n@@ -71,7 +71,7 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:39:21\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:40:21\n    |\n LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n    |                     ^^^^^^^^^^\n@@ -80,7 +80,7 @@ LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debu\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:39:34\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:40:34\n    |\n LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n    |                                  ^^^^^^^^^^\n@@ -89,7 +89,7 @@ LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debu\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:39:46\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:40:46\n    |\n LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -98,7 +98,7 @@ LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debu\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:39:67\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:40:67\n    |\n LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n    |                                                                   ^^^^^^^^^^\n@@ -107,7 +107,7 @@ LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debu\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:22:18\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:23:18\n    |\n LL |     type Assoc = impl Debug;\n    |                  ^^^^^^^^^^"}, {"sha": "238f3fa31ed7206e7909db43e061adde7ef3ad69", "filename": "src/test/ui/impl-trait/example-calendar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-compare-mode-chalk\n \n #![feature(fn_traits,\n            step_trait,"}, {"sha": "ee09a66ef537abc5e7af81b7a149089d9de6cff9", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,6 @@\n // edition:2018\n // ignore-tidy-linelength\n+// ignore-compare-mode-chalk\n \n #![feature(type_alias_impl_trait)]\n "}, {"sha": "f954ce9f090e6d5944f1322781ecb00a7fdf61b1", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:13:14\n+  --> $DIR/issue-55872-2.rs:14:14\n    |\n LL |     type E = impl std::marker::Copy;\n    |              ^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:15:28\n+  --> $DIR/issue-55872-2.rs:16:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^"}, {"sha": "b12bfbcda9dc353e5ffcd109acb3471c5bcb406a", "filename": "src/test/ui/impl-trait/issue-55872.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-linelength\n+// ignore-compare-mode-chalk\n #![feature(type_alias_impl_trait)]\n \n pub trait Bar {"}, {"sha": "41d7beb22fa22553d296d576900e7ef7c6ac90c6", "filename": "src/test/ui/impl-trait/issue-55872.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872.rs:13:28\n+  --> $DIR/issue-55872.rs:14:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^"}, {"sha": "efa4e614be5b0e4f3e29eb4176b50461f3df8e86", "filename": "src/test/ui/issues/issue-23122-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,3 +1,5 @@\n+// ignore-compare-mode-chalk\n+\n trait Next {\n     type Next: Next;\n }"}, {"sha": "8613c1ef8c201e2982293d726029bb64e5fe9ea8", "filename": "src/test/ui/issues/issue-23122-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,5 @@\n error[E0275]: overflow evaluating the requirement `<GetNext<T> as Next>::Next == _`\n-  --> $DIR/issue-23122-1.rs:8:5\n+  --> $DIR/issue-23122-1.rs:10:5\n    |\n LL |     type Next = <GetNext<T> as Next>::Next;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7866b931ec4b9d023e41fb3555d8ad86aef6a21c", "filename": "src/test/ui/issues/issue-23122-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,3 +1,4 @@\n+// ignore-compare-mode-chalk\n trait Next {\n     type Next: Next;\n }"}, {"sha": "ce3bffe602ca06721078a9f98297ac05d3e285d9", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,5 @@\n error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Sized`\n-  --> $DIR/issue-23122-2.rs:8:5\n+  --> $DIR/issue-23122-2.rs:9:5\n    |\n LL |     type Next = <GetNext<T::Next> as Next>::Next;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "184f5cb26c54633c1795eb1c69e215ff5ad773cd", "filename": "src/test/ui/issues/issue-28561.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// ignore-compare-mode-chalk\n #[derive(Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]\n struct Array<T> {\n     f00: [T; 00],"}, {"sha": "f6b56610ec7d93d18ae832d4f0cb62093a49e4a4", "filename": "src/test/ui/issues/issue-33187.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-33187.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-33187.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33187.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-compare-mode-chalk\n struct Foo<A: Repr>(<A as Repr>::Data);\n \n impl<A> Copy for Foo<A> where <A as Repr>::Data: Copy { }"}, {"sha": "e0c47197eaa034427219ccc538f435f3920500d8", "filename": "src/test/ui/issues/issue-37051.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// ignore-compare-mode-chalk\n \n #![feature(associated_type_defaults)]\n "}, {"sha": "4fcb41485d0e2bdbb6711125d0e55df719cf74c1", "filename": "src/test/ui/issues/issue-50301.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-50301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-50301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50301.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,6 @@\n // Tests that HRTBs are correctly accepted -- https://github.com/rust-lang/rust/issues/50301\n // check-pass\n+// ignore-compare-mode-chalk\n trait Trait\n where\n     for<'a> &'a Self::IntoIter: IntoIterator<Item = u32>,"}, {"sha": "61d4070d485e7df01ddeddc9e982e6db25f119b9", "filename": "src/test/ui/issues/issue-55796.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-55796.rs:16:9\n+  --> $DIR/issue-55796.rs:18:9\n    |\n LL | pub trait Graph<'a> {\n    |                 -- lifetime `'a` defined here\n@@ -10,7 +10,7 @@ LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-55796.rs:21:9\n+  --> $DIR/issue-55796.rs:23:9\n    |\n LL | pub trait Graph<'a> {\n    |                 -- lifetime `'a` defined here"}, {"sha": "1086669ee7463cb0c4bb7009f6c5eb6f87e21209", "filename": "src/test/ui/issues/issue-55796.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,3 +1,5 @@\n+// ignore-compare-mode-chalk\n+\n pub trait EdgeTrait<N> {\n     fn target(&self) -> N;\n }"}, {"sha": "ffe3bb737ad6a2f8afc28e97e8f774e645c04467", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,47 +1,47 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-55796.rs:16:9\n+  --> $DIR/issue-55796.rs:18:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the trait at 5:17...\n-  --> $DIR/issue-55796.rs:5:17\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the trait at 7:17...\n+  --> $DIR/issue-55796.rs:7:17\n    |\n LL | pub trait Graph<'a> {\n    |                 ^^\n-note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:16:40: 16:54]>` will meet its required lifetime bounds\n-  --> $DIR/issue-55796.rs:16:9\n+note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:18:40: 18:54]>` will meet its required lifetime bounds\n+  --> $DIR/issue-55796.rs:18:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the expression is assignable\n-  --> $DIR/issue-55796.rs:16:9\n+  --> $DIR/issue-55796.rs:18:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `Box<(dyn Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n               found `Box<dyn Iterator<Item = <Self as Graph<'a>>::Node>>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-55796.rs:21:9\n+  --> $DIR/issue-55796.rs:23:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the trait at 5:17...\n-  --> $DIR/issue-55796.rs:5:17\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the trait at 7:17...\n+  --> $DIR/issue-55796.rs:7:17\n    |\n LL | pub trait Graph<'a> {\n    |                 ^^\n-note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:21:39: 21:53]>` will meet its required lifetime bounds\n-  --> $DIR/issue-55796.rs:21:9\n+note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:23:39: 23:53]>` will meet its required lifetime bounds\n+  --> $DIR/issue-55796.rs:23:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the expression is assignable\n-  --> $DIR/issue-55796.rs:21:9\n+  --> $DIR/issue-55796.rs:23:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "44ea9f12d38ff8012f8a752e5ce1b7ccd6fafec2", "filename": "src/test/ui/issues/issue-74564-if-expr-stack-overflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-74564-if-expr-stack-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fissues%2Fissue-74564-if-expr-stack-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74564-if-expr-stack-overflow.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,6 @@\n // build-pass\n // ignore-tidy-filelength\n+// ignore-compare-mode-chalk\n #![crate_type = \"rlib\"]\n \n fn banana(v: &str) -> u32 {"}, {"sha": "d15e402460794c1e0b129a14074ebd9eeb483495", "filename": "src/test/ui/nll/ty-outlives/issue-53789-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-2.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,6 +1,7 @@\n // Regression test for #53789.\n //\n // check-pass\n+// ignore-compare-mode-chalk\n \n use std::collections::BTreeMap;\n use std::ops::Range;"}, {"sha": "6eb2aa980d1521b8b9029354d006e9b7b6d530bb", "filename": "src/test/ui/specialization/deafult-associated-type-bound-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,6 @@\n // Check that we check that default associated types satisfy the required\n // bounds on them.\n+// ignore-compare-mode-chalk\n \n #![feature(specialization)]\n //~^ WARNING `specialization` is incomplete"}, {"sha": "337972ea2b7936f2496c13d08dbba3017c3e4efc", "filename": "src/test/ui/specialization/deafult-associated-type-bound-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/deafult-associated-type-bound-1.rs:4:12\n+  --> $DIR/deafult-associated-type-bound-1.rs:5:12\n    |\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #![feature(specialization)]\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n \n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/deafult-associated-type-bound-1.rs:18:5\n+  --> $DIR/deafult-associated-type-bound-1.rs:19:5\n    |\n LL |     type U: Clone;\n    |             ----- required by this bound in `X::U`"}, {"sha": "add9662938069b557ff861a803dabe6f8c2ed398", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-linelength\n+// ignore-compare-mode-chalk\n #![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;"}, {"sha": "79e2682da3ea8ee4dcfb6bf3915e70d526f9f071", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-53598.rs:20:42\n+  --> $DIR/issue-53598.rs:21:42\n    |\n LL |       fn foo<T: Debug>(_: T) -> Self::Item {\n    |  __________________________________________^"}, {"sha": "c785ea2ee57d088fb5d96746caf56f250375b038", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-linelength\n+// ignore-compare-mode-chalk\n #![feature(arbitrary_self_types)]\n #![feature(type_alias_impl_trait)]\n "}, {"sha": "dc6be87ee9365839e100409c245c4ffefa7067be", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-57700.rs:16:58\n+  --> $DIR/issue-57700.rs:17:58\n    |\n LL |       fn foo(self: impl Deref<Target = Self>) -> Self::Bar {\n    |  __________________________________________________________^"}, {"sha": "14d21418ae853db0e24a4cc27a6c3b945a455334", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,3 +1,5 @@\n+// ignore-compare-mode-chalk\n+\n trait Bug {\n     type Item: Bug;\n "}, {"sha": "d8e514a2cf45b6c3055e68ea9a535f53184482c8", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23491084bc3e44ddc9b2b3fbe0f957dc891b4b08/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=23491084bc3e44ddc9b2b3fbe0f957dc891b4b08", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/issue-60371.rs:8:17\n+  --> $DIR/issue-60371.rs:10:17\n    |\n LL |     type Item = impl Bug;\n    |                 ^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     type Item = impl Bug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `(): Bug` is not satisfied\n-  --> $DIR/issue-60371.rs:8:17\n+  --> $DIR/issue-60371.rs:10:17\n    |\n LL |     type Item = impl Bug;\n    |                 ^^^^^^^^ the trait `Bug` is not implemented for `()`\n@@ -17,7 +17,7 @@ LL |     type Item = impl Bug;\n              <&() as Bug>\n \n error: could not find defining uses\n-  --> $DIR/issue-60371.rs:8:17\n+  --> $DIR/issue-60371.rs:10:17\n    |\n LL |     type Item = impl Bug;\n    |                 ^^^^^^^^"}]}