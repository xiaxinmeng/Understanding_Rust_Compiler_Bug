{"sha": "2aa1c23fed118900103f70e4ab3473e75215862c", "node_id": "C_kwDOAAsO6NoAKDJhYTFjMjNmZWQxMTg5MDAxMDNmNzBlNGFiMzQ3M2U3NTIxNTg2MmM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-08T08:46:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-09T17:27:58Z"}, "message": "Add a few comments.", "tree": {"sha": "438669081a9824ee1a5b80b75d02bfdf21f027ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/438669081a9824ee1a5b80b75d02bfdf21f027ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2aa1c23fed118900103f70e4ab3473e75215862c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa1c23fed118900103f70e4ab3473e75215862c", "html_url": "https://github.com/rust-lang/rust/commit/2aa1c23fed118900103f70e4ab3473e75215862c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2aa1c23fed118900103f70e4ab3473e75215862c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79c073746b46d621a75a5617737093db84dabee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/79c073746b46d621a75a5617737093db84dabee3", "html_url": "https://github.com/rust-lang/rust/commit/79c073746b46d621a75a5617737093db84dabee3"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "9232ea74d36925620a576973c426faf34c29bdd3", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2aa1c23fed118900103f70e4ab3473e75215862c/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aa1c23fed118900103f70e4ab3473e75215862c/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=2aa1c23fed118900103f70e4ab3473e75215862c", "patch": "@@ -632,11 +632,11 @@ impl Map {\n         tcx: TyCtxt<'tcx>,\n         body: &Body<'tcx>,\n         filter: impl Fn(Ty<'tcx>) -> bool,\n-        place_limit: Option<usize>,\n+        value_limit: Option<usize>,\n     ) -> Self {\n         let mut map = Self::new();\n         let exclude = excluded_locals(body);\n-        map.register_with_filter(tcx, body, filter, exclude, place_limit);\n+        map.register_with_filter(tcx, body, filter, exclude, value_limit);\n         debug!(\"registered {} places ({} nodes in total)\", map.value_count, map.places.len());\n         map\n     }\n@@ -648,10 +648,11 @@ impl Map {\n         body: &Body<'tcx>,\n         filter: impl Fn(Ty<'tcx>) -> bool,\n         exclude: BitSet<Local>,\n-        place_limit: Option<usize>,\n+        value_limit: Option<usize>,\n     ) {\n-        // We use this vector as stack, pushing and popping projections.\n-        let mut worklist = VecDeque::with_capacity(place_limit.unwrap_or(body.local_decls.len()));\n+        let mut worklist = VecDeque::with_capacity(value_limit.unwrap_or(body.local_decls.len()));\n+\n+        // Start by constructing the places for each bare local.\n         self.locals = IndexVec::from_elem(None, &body.local_decls);\n         for (local, decl) in body.local_decls.iter_enumerated() {\n             if exclude.contains(local) {\n@@ -668,8 +669,10 @@ impl Map {\n         }\n \n         // `place.elem1.elem2` with type `ty`.\n+        // `elem1` is either `Some(Variant(i))` or `None`.\n         while let Some((mut place, elem1, elem2, ty)) = worklist.pop_front() {\n-            if let Some(place_limit) = place_limit && self.value_count >= place_limit {\n+            // The user requires a bound on the number of created values.\n+            if let Some(value_limit) = value_limit && self.value_count >= value_limit {\n                 break\n             }\n \n@@ -688,6 +691,9 @@ impl Map {\n             self.register_children(tcx, place, ty, &filter, &mut worklist);\n         }\n \n+        // Pre-compute the tree of ValueIndex nested in each PlaceIndex.\n+        // `inner_values_buffer[inner_values[place]]` is the set of all the values\n+        // reachable by projecting `place`.\n         self.inner_values_buffer = Vec::with_capacity(self.value_count);\n         self.inner_values = IndexVec::from_elem(0..0, &self.places);\n         for local in body.local_decls.indices() {"}]}