{"sha": "ec409f95bf52c5891084e309fed91fa9b6ce10b4", "node_id": "C_kwDOAAsO6NoAKGVjNDA5Zjk1YmY1MmM1ODkxMDg0ZTMwOWZlZDkxZmE5YjZjZTEwYjQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-07T05:20:20Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-18T21:09:40Z"}, "message": "Apply `Lrc` later to `sess` and `codegen_backend`.\n\nThis avoids the need for a degenerate `Lrc::get_mut` call.", "tree": {"sha": "894c71ba5a5c5d0b185990e08036efe0d1ea9929", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/894c71ba5a5c5d0b185990e08036efe0d1ea9929"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec409f95bf52c5891084e309fed91fa9b6ce10b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec409f95bf52c5891084e309fed91fa9b6ce10b4", "html_url": "https://github.com/rust-lang/rust/commit/ec409f95bf52c5891084e309fed91fa9b6ce10b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec409f95bf52c5891084e309fed91fa9b6ce10b4/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6ae1453cbe677deea362628c69efa501b4faa4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ae1453cbe677deea362628c69efa501b4faa4b", "html_url": "https://github.com/rust-lang/rust/commit/b6ae1453cbe677deea362628c69efa501b4faa4b"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "a3bf7cde9ff71d31193d83498c2fece1bf651992", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec409f95bf52c5891084e309fed91fa9b6ce10b4/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec409f95bf52c5891084e309fed91fa9b6ce10b4/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=ec409f95bf52c5891084e309fed91fa9b6ce10b4", "patch": "@@ -298,18 +298,14 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n             );\n \n             if let Some(parse_sess_created) = config.parse_sess_created {\n-                parse_sess_created(\n-                    &mut Lrc::get_mut(&mut sess)\n-                        .expect(\"create_session() should never share the returned session\")\n-                        .parse_sess,\n-                );\n+                parse_sess_created(&mut sess.parse_sess);\n             }\n \n             let temps_dir = sess.opts.unstable_opts.temps_dir.as_ref().map(|o| PathBuf::from(&o));\n \n             let compiler = Compiler {\n-                sess,\n-                codegen_backend,\n+                sess: Lrc::new(sess),\n+                codegen_backend: Lrc::new(codegen_backend),\n                 input: config.input,\n                 input_path: config.input_path,\n                 output_dir: config.output_dir,"}, {"sha": "afc43745b1827ee70e0e9de21a501f2fb561bcc6", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec409f95bf52c5891084e309fed91fa9b6ce10b4/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec409f95bf52c5891084e309fed91fa9b6ce10b4/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=ec409f95bf52c5891084e309fed91fa9b6ce10b4", "patch": "@@ -5,7 +5,6 @@ use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n #[cfg(parallel_compiler)]\n use rustc_data_structures::jobserver;\n-use rustc_data_structures::sync::Lrc;\n use rustc_errors::registry::Registry;\n #[cfg(parallel_compiler)]\n use rustc_middle::ty::tls;\n@@ -72,7 +71,7 @@ pub fn create_session(\n         Box<dyn FnOnce(&config::Options) -> Box<dyn CodegenBackend> + Send>,\n     >,\n     descriptions: Registry,\n-) -> (Lrc<Session>, Lrc<Box<dyn CodegenBackend>>) {\n+) -> (Session, Box<dyn CodegenBackend>) {\n     let codegen_backend = if let Some(make_codegen_backend) = make_codegen_backend {\n         make_codegen_backend(&sopts)\n     } else {\n@@ -119,7 +118,7 @@ pub fn create_session(\n     sess.parse_sess.config = cfg;\n     sess.parse_sess.check_config = check_cfg;\n \n-    (Lrc::new(sess), Lrc::new(codegen_backend))\n+    (sess, codegen_backend)\n }\n \n const STACK_SIZE: usize = 8 * 1024 * 1024;"}]}