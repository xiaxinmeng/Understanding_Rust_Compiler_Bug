{"sha": "c648884397bfdb779c447fa31964dc1fce94bd95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NDg4ODQzOTdiZmRiNzc5YzQ0N2ZhMzE5NjRkYzFmY2U5NGJkOTU=", "commit": {"author": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-09-03T07:55:24Z"}, "committer": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-10-08T02:04:21Z"}, "message": "Differentiate method/tymethod by determining 'defaultness'\n\nCurrently a method only has defaultness if it is a provided trait\nmethod, but this will change when specialisation is available and may\nneed to become a concept known to hir.\n\nI opted to go for a 'fewest changes' approach given specialisation is\nstill under development.", "tree": {"sha": "276467ffe91360d31f285ce04bf16c0753c61a10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/276467ffe91360d31f285ce04bf16c0753c61a10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c648884397bfdb779c447fa31964dc1fce94bd95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c648884397bfdb779c447fa31964dc1fce94bd95", "html_url": "https://github.com/rust-lang/rust/commit/c648884397bfdb779c447fa31964dc1fce94bd95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c648884397bfdb779c447fa31964dc1fce94bd95/comments", "author": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62b76e7004bc215a375e41bd204b2eab5acdf9c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/62b76e7004bc215a375e41bd204b2eab5acdf9c2", "html_url": "https://github.com/rust-lang/rust/commit/62b76e7004bc215a375e41bd204b2eab5acdf9c2"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "0b24f247c7afd38cda744f1393ccc603bb8ec5be", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c648884397bfdb779c447fa31964dc1fce94bd95/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c648884397bfdb779c447fa31964dc1fce94bd95/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=c648884397bfdb779c447fa31964dc1fce94bd95", "patch": "@@ -772,7 +772,14 @@ impl Function {\n         hir_ty::diagnostics::validate_body(db, self.id.into(), sink)\n     }\n \n-    pub fn parent_def(self, db: &dyn HirDatabase) -> Option<MethodOwner> {\n+    /// Whether this function declaration has a definition.\n+    ///\n+    /// This is false in the case of required (not provided) trait methods.\n+    pub fn has_body(self, db: &dyn HirDatabase) -> bool {\n+        db.function_data(self.id).has_body\n+    }\n+\n+    pub fn method_owner(self, db: &dyn HirDatabase) -> Option<MethodOwner> {\n         match self.as_assoc_item(db).map(|assoc| assoc.container(db)) {\n             Some(AssocItemContainer::Trait(t)) => Some(t.into()),\n             Some(AssocItemContainer::ImplDef(imp)) => {"}, {"sha": "687abe6ca1828dea8f07e703e4497da890522a0b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c648884397bfdb779c447fa31964dc1fce94bd95/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c648884397bfdb779c447fa31964dc1fce94bd95/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c648884397bfdb779c447fa31964dc1fce94bd95", "patch": "@@ -35,8 +35,8 @@ pub use crate::{\n     code_model::{\n         Access, Adt, AsAssocItem, AssocItem, AssocItemContainer, Callable, CallableKind, Const,\n         Crate, CrateDependency, DefWithBody, Enum, EnumVariant, Field, FieldSource, Function,\n-        GenericDef, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, ScopeDef, Static,\n-        Struct, Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n+        GenericDef, HasVisibility, ImplDef, Local, MacroDef, MethodOwner, Module, ModuleDef,\n+        ScopeDef, Static, Struct, Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n     },\n     has_source::HasSource,\n     semantics::{original_range, PathResolution, Semantics, SemanticsScope},"}, {"sha": "ff1ef0df64e597e0473d16304d2571c8b231a828", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c648884397bfdb779c447fa31964dc1fce94bd95/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c648884397bfdb779c447fa31964dc1fce94bd95/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=c648884397bfdb779c447fa31964dc1fce94bd95", "patch": "@@ -25,6 +25,7 @@ pub struct FunctionData {\n     /// True if the first param is `self`. This is relevant to decide whether this\n     /// can be called as a method.\n     pub has_self_param: bool,\n+    pub has_body: bool,\n     pub is_unsafe: bool,\n     pub is_varargs: bool,\n     pub visibility: RawVisibility,\n@@ -42,6 +43,7 @@ impl FunctionData {\n             ret_type: func.ret_type.clone(),\n             attrs: item_tree.attrs(ModItem::from(loc.id.value).into()).clone(),\n             has_self_param: func.has_self_param,\n+            has_body: func.has_body,\n             is_unsafe: func.is_unsafe,\n             is_varargs: func.is_varargs,\n             visibility: item_tree[func.visibility].clone(),"}, {"sha": "8a1121bbdfbc3a9bd46b9422aeb939dfed53d349", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c648884397bfdb779c447fa31964dc1fce94bd95/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c648884397bfdb779c447fa31964dc1fce94bd95/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=c648884397bfdb779c447fa31964dc1fce94bd95", "patch": "@@ -505,6 +505,7 @@ pub struct Function {\n     pub visibility: RawVisibilityId,\n     pub generic_params: GenericParamsId,\n     pub has_self_param: bool,\n+    pub has_body: bool,\n     pub is_unsafe: bool,\n     pub params: Box<[TypeRef]>,\n     pub is_varargs: bool,"}, {"sha": "3328639cfe3f1fba288308c32b887fd3e382ecc1", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c648884397bfdb779c447fa31964dc1fce94bd95/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c648884397bfdb779c447fa31964dc1fce94bd95/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=c648884397bfdb779c447fa31964dc1fce94bd95", "patch": "@@ -330,12 +330,15 @@ impl Ctx {\n             ret_type\n         };\n \n+        let has_body = func.body().is_some();\n+\n         let ast_id = self.source_ast_id_map.ast_id(func);\n         let mut res = Function {\n             name,\n             visibility,\n             generic_params: GenericParamsId::EMPTY,\n             has_self_param,\n+            has_body,\n             is_unsafe: func.unsafe_token().is_some(),\n             params: params.into_boxed_slice(),\n             is_varargs,"}, {"sha": "2f6c59c4065f7d0958d0e9828241382445f13d03", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c648884397bfdb779c447fa31964dc1fce94bd95/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c648884397bfdb779c447fa31964dc1fce94bd95/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=c648884397bfdb779c447fa31964dc1fce94bd95", "patch": "@@ -13,7 +13,7 @@ use ide_db::{defs::Definition, RootDatabase};\n \n use hir::{\n     db::{DefDatabase, HirDatabase},\n-    Adt, AsName, AssocItem, Crate, Field, HasAttrs, ItemInNs, ModuleDef,\n+    Adt, AsName, AssocItem, Crate, Field, HasAttrs, ItemInNs, MethodOwner, ModuleDef,\n };\n use ide_db::{\n     defs::{classify_name, classify_name_ref, Definition},\n@@ -117,7 +117,7 @@ fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n     let target_def: ModuleDef = match definition {\n         Definition::ModuleDef(moddef) => match moddef {\n             ModuleDef::Function(f) => {\n-                f.parent_def(db).map(|mowner| mowner.into()).unwrap_or_else(|| f.clone().into())\n+                f.method_owner(db).map(|mowner| mowner.into()).unwrap_or_else(|| f.clone().into())\n             }\n             moddef => moddef,\n         },\n@@ -401,9 +401,18 @@ fn get_symbol_fragment(db: &dyn HirDatabase, field_or_assoc: &FieldOrAssocItem)\n     Some(match field_or_assoc {\n         FieldOrAssocItem::Field(field) => format!(\"#structfield.{}\", field.name(db)),\n         FieldOrAssocItem::AssocItem(assoc) => match assoc {\n-            // TODO: Rustdoc sometimes uses tymethod instead of method. This case needs to be investigated.\n-            AssocItem::Function(function) => format!(\"#method.{}\", function.name(db)),\n-            // TODO: This might be the old method for documenting associated constants, i32::MAX uses a separate page...\n+            AssocItem::Function(function) => {\n+                let is_trait_method =\n+                    matches!(function.method_owner(db), Some(MethodOwner::Trait(..)));\n+                // This distinction may get more complicated when specialisation is available.\n+                // In particular this decision is made based on whether a method 'has defaultness'.\n+                // Currently this is only the case for provided trait methods.\n+                if is_trait_method && !function.has_body(db) {\n+                    format!(\"#tymethod.{}\", function.name(db))\n+                } else {\n+                    format!(\"#method.{}\", function.name(db))\n+                }\n+            }\n             AssocItem::Const(constant) => format!(\"#associatedconstant.{}\", constant.name(db)?),\n             AssocItem::TypeAlias(ty) => format!(\"#associatedtype.{}\", ty.name(db)),\n         },"}, {"sha": "1445e41d3cb0a92c0a10890ab8546897a5e1005e", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c648884397bfdb779c447fa31964dc1fce94bd95/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c648884397bfdb779c447fa31964dc1fce94bd95/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=c648884397bfdb779c447fa31964dc1fce94bd95", "patch": "@@ -425,7 +425,7 @@ export function openDocs(ctx: Ctx): Cmd {\n         const client = ctx.client;\n         const editor = vscode.window.activeTextEditor;\n         if (!editor || !client) {\n-            return\n+            return;\n         };\n \n         const position = editor.selection.active;"}]}