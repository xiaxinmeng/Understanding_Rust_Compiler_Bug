{"sha": "738133b379b172a37f8699085daff62b5a7d16a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczODEzM2IzNzliMTcyYTM3Zjg2OTkwODVkYWZmNjJiNWE3ZDE2YTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-25T16:09:49Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-27T07:16:58Z"}, "message": "complete setup routine: instal rust-src, build libstd, use it", "tree": {"sha": "af4246448e129de7b0dbc3588d19861375105fd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af4246448e129de7b0dbc3588d19861375105fd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/738133b379b172a37f8699085daff62b5a7d16a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/738133b379b172a37f8699085daff62b5a7d16a5", "html_url": "https://github.com/rust-lang/rust/commit/738133b379b172a37f8699085daff62b5a7d16a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/738133b379b172a37f8699085daff62b5a7d16a5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c945e30d100a79a2d2c73358d54d7545d03093ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c945e30d100a79a2d2c73358d54d7545d03093ac", "html_url": "https://github.com/rust-lang/rust/commit/c945e30d100a79a2d2c73358d54d7545d03093ac"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "111b47a551a825c66f12ae714d5cb96d0ed89157", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/738133b379b172a37f8699085daff62b5a7d16a5/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/738133b379b172a37f8699085daff62b5a7d16a5/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=738133b379b172a37f8699085daff62b5a7d16a5", "patch": "@@ -35,6 +35,7 @@ required-features = [\"rustc_tests\"]\n [dependencies]\n byteorder = { version = \"1.1\", features = [\"i128\"]}\n cargo_metadata = { version = \"0.6\", optional = true }\n+dirs = { version = \"1.0.4\", optional = true }\n env_logger = \"0.5\"\n log = \"0.4\"\n \n@@ -43,7 +44,7 @@ vergen = \"3\"\n \n [features]\n default = [\"cargo_miri\"]\n-cargo_miri = [\"cargo_metadata\"]\n+cargo_miri = [\"cargo_metadata\", \"dirs\"]\n rustc_tests = []\n \n [dev-dependencies]"}, {"sha": "1a5553ca10945e361ea129fe44e1d33aea0a4c22", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/738133b379b172a37f8699085daff62b5a7d16a5/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738133b379b172a37f8699085daff62b5a7d16a5/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=738133b379b172a37f8699085daff62b5a7d16a5", "patch": "@@ -5,7 +5,7 @@ extern crate cargo_metadata;\n use std::path::{PathBuf, Path};\n use std::io::{self, Write};\n use std::process::Command;\n-\n+use std::fs::{self, File};\n \n const CARGO_MIRI_HELP: &str = r#\"Interprets bin crates\n \n@@ -133,6 +133,59 @@ fn setup(ask_user: bool) {\n             show_error(format!(\"Failed to install xargo\"));\n         }\n     }\n+\n+    // Then, we also need rust-src.  Let's see if it is already installed.\n+    let sysroot = Command::new(\"rustc\").args(&[\"--print\", \"sysroot\"]).output().unwrap().stdout;\n+    let sysroot = std::str::from_utf8(&sysroot[..]).unwrap();\n+    let src = Path::new(sysroot.trim_end_matches('\\n')).join(\"lib/rustlib/src\");\n+    if !src.exists() {\n+        println!(\"Could not find {:?}\", src);\n+        if ask_user {\n+            ask(\"It seems you do not have the rust-src component installed. I will run `rustup component add rust-src`. Proceed?\");\n+        }\n+        if !Command::new(\"rustup\").args(&[\"component\", \"add\", \"rust-src\"]).status().unwrap().success() {\n+            show_error(format!(\"Failed to install rust-src component\"));\n+        }\n+    }\n+\n+    // Next, we need our own libstd. We will do this work in ~/.miri.\n+    let dir = dirs::home_dir().unwrap().join(\".miri\");\n+    if !dir.exists() {\n+        fs::create_dir(&dir).unwrap();\n+    }\n+    // The interesting bit: Xargo.toml\n+    File::create(dir.join(\"Xargo.toml\")).unwrap()\n+        .write_all(br#\"\n+[dependencies.std]\n+features = [\"panic_unwind\", \"backtrace\"]\n+\n+[dependencies.test]\n+stage = 1\n+        \"#).unwrap();\n+    // The boring bits: A dummy project for xargo\n+    File::create(dir.join(\"Cargo.toml\")).unwrap()\n+        .write_all(br#\"\n+[package]\n+name = \"miri-xargo\"\n+description = \"A dummy project for building libstd with xargo.\"\n+version = \"0.0.0\"\n+\n+[lib]\n+path = \"lib.rs\"\n+        \"#).unwrap();\n+    File::create(dir.join(\"lib.rs\")).unwrap();\n+    // Run xargo\n+    if !Command::new(\"xargo\").arg(\"build\")\n+        .current_dir(&dir)\n+        .env(\"RUSTFLAGS\", miri::miri_default_args().join(\" \"))\n+        .env(\"XARGO_HOME\", dir.to_str().unwrap())\n+        .status().unwrap().success()\n+    {\n+        show_error(format!(\"Failed to run xargo\"));\n+    }\n+\n+    // That should be it!\n+    std::env::set_var(\"MIRI_SYSROOT\", dir.join(\"HOST\"));\n }\n \n fn main() {"}]}