{"sha": "49be827dcae4b226a2cb6f56e49083d49908fa6f", "node_id": "C_kwDOAAsO6NoAKDQ5YmU4MjdkY2FlNGIyMjZhMmNiNmY1NmU0OTA4M2Q0OTkwOGZhNmY", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-08T21:59:58Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-08T21:59:58Z"}, "message": "comment", "tree": {"sha": "8019b86c688cfac87e14bf658f612a90c78ea589", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8019b86c688cfac87e14bf658f612a90c78ea589"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49be827dcae4b226a2cb6f56e49083d49908fa6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49be827dcae4b226a2cb6f56e49083d49908fa6f", "html_url": "https://github.com/rust-lang/rust/commit/49be827dcae4b226a2cb6f56e49083d49908fa6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49be827dcae4b226a2cb6f56e49083d49908fa6f/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0889a6005ecac3d304009e734baa97b37b534d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0889a6005ecac3d304009e734baa97b37b534d2", "html_url": "https://github.com/rust-lang/rust/commit/c0889a6005ecac3d304009e734baa97b37b534d2"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "c64177eea3f831f388189c3879f89ef9aa9c8567", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/49be827dcae4b226a2cb6f56e49083d49908fa6f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49be827dcae4b226a2cb6f56e49083d49908fa6f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=49be827dcae4b226a2cb6f56e49083d49908fa6f", "patch": "@@ -1834,6 +1834,27 @@ fn is_late_bound_map(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<&FxIndexSet<\n     debug!(?late_bound);\n     return Some(tcx.arena.alloc(late_bound));\n \n+    /// Visits a `ty::Ty` collecting information about what generic parameters are constrained.\n+    ///\n+    /// The visitor does not operate on `hir::Ty` so that it can be called on the rhs of a `type Alias<...> = ...;`\n+    /// which may live in a separate crate so there would not be any hir available. Instead we use the `type_of`\n+    /// query to obtain a `ty::Ty` which will be present even in cross crate scenarios. It also naturally\n+    /// handles cycle detection as we go through the query system.\n+    ///\n+    /// This is necessary in the first place for the following case:\n+    /// ```\n+    /// type Alias<'a, T> = <T as Trait<'a>>::Assoc;\n+    /// fn foo<'a>(_: Alias<'a, ()>) -> Alias<'a, ()> { ... }\n+    /// ```\n+    ///\n+    /// If we conservatively considered `'a` unconstrained then we could break users who had written code before\n+    /// we started correctly handling aliases. If we considered `'a` constrained then it would become late bound\n+    /// causing an error during astconv as the `'a` is not constrained by the input type `<() as Trait<'a>>::Assoc`\n+    /// but appears in the output type `<() as Trait<'a>>::Assoc`.\n+    ///\n+    /// We must therefore \"look into\" the `Alias` to see whether we should consider `'a` constrained or not.\n+    ///\n+    /// See #100508 #85533 #47511 for additional context\n     struct ConstrainedCollectorPostAstConv {\n         arg_is_constrained: Box<[bool]>,\n     }\n@@ -1886,17 +1907,8 @@ fn is_late_bound_map(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<&FxIndexSet<\n                     None,\n                     hir::Path { res: Res::Def(DefKind::TyAlias, alias_def), segments, span },\n                 )) => {\n-                    // If this is a top level type alias attempt to \"look through\" it to see if the args\n-                    // are constrained, instead of assuming they are and inserting all the lifetimes.\n-                    // This is necessary for the following case:\n-                    // ```\n-                    // type Alias<'a, T> = <T as Trait<'a>>::Assoc;\n-                    // fn foo<'a>(_: Alias<'a, ()>) -> Alias<'a, ()> { ... }\n-                    // ```\n-                    // If we considered `'a` constrained then it would become late bound causing an error\n-                    // during astconv as the `'a` is not constrained by the input type `<() as Trait<'a>>::Assoc`\n-                    // but appears in the output type `<() as Trait<'a>>::Assoc`.\n-\n+                    // See comments on `ConstrainedCollectorPostAstConv` for why this arm does not just consider\n+                    // substs to be unconstrained.\n                     let generics = self.tcx.generics_of(alias_def);\n                     let mut walker = ConstrainedCollectorPostAstConv {\n                         arg_is_constrained: vec![false; generics.params.len()].into_boxed_slice(),"}]}