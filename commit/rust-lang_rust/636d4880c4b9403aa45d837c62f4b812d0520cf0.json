{"sha": "636d4880c4b9403aa45d837c62f4b812d0520cf0", "node_id": "C_kwDOAAsO6NoAKDYzNmQ0ODgwYzRiOTQwM2FhNDVkODM3YzYyZjRiODEyZDA1MjBjZjA", "commit": {"author": {"name": "Felici\u00e1n N\u00e9meth", "email": "felician.nemeth@gmail.com", "date": "2022-03-27T08:45:57Z"}, "committer": {"name": "Felici\u00e1n N\u00e9meth", "email": "felician.nemeth@gmail.com", "date": "2022-05-22T08:39:18Z"}, "message": "internal: Allow OnTypeFormatting to send SnippetTextEdit\n\nBut continue to send TextEdit only.", "tree": {"sha": "718bd74b8c3741d3ca1fb5f491fc8e8879dd9b32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/718bd74b8c3741d3ca1fb5f491fc8e8879dd9b32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/636d4880c4b9403aa45d837c62f4b812d0520cf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/636d4880c4b9403aa45d837c62f4b812d0520cf0", "html_url": "https://github.com/rust-lang/rust/commit/636d4880c4b9403aa45d837c62f4b812d0520cf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/636d4880c4b9403aa45d837c62f4b812d0520cf0/comments", "author": {"login": "nemethf", "id": 1453824, "node_id": "MDQ6VXNlcjE0NTM4MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1453824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nemethf", "html_url": "https://github.com/nemethf", "followers_url": "https://api.github.com/users/nemethf/followers", "following_url": "https://api.github.com/users/nemethf/following{/other_user}", "gists_url": "https://api.github.com/users/nemethf/gists{/gist_id}", "starred_url": "https://api.github.com/users/nemethf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nemethf/subscriptions", "organizations_url": "https://api.github.com/users/nemethf/orgs", "repos_url": "https://api.github.com/users/nemethf/repos", "events_url": "https://api.github.com/users/nemethf/events{/privacy}", "received_events_url": "https://api.github.com/users/nemethf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nemethf", "id": 1453824, "node_id": "MDQ6VXNlcjE0NTM4MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1453824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nemethf", "html_url": "https://github.com/nemethf", "followers_url": "https://api.github.com/users/nemethf/followers", "following_url": "https://api.github.com/users/nemethf/following{/other_user}", "gists_url": "https://api.github.com/users/nemethf/gists{/gist_id}", "starred_url": "https://api.github.com/users/nemethf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nemethf/subscriptions", "organizations_url": "https://api.github.com/users/nemethf/orgs", "repos_url": "https://api.github.com/users/nemethf/repos", "events_url": "https://api.github.com/users/nemethf/events{/privacy}", "received_events_url": "https://api.github.com/users/nemethf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3de03d4c61d2405b66337b96ea97aa21f7d04e4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de03d4c61d2405b66337b96ea97aa21f7d04e4b", "html_url": "https://github.com/rust-lang/rust/commit/3de03d4c61d2405b66337b96ea97aa21f7d04e4b"}], "stats": {"total": 53, "additions": 38, "deletions": 15}, "files": [{"sha": "d423d8a05462fb908babfb456101c08c74da0a67", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/636d4880c4b9403aa45d837c62f4b812d0520cf0/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636d4880c4b9403aa45d837c62f4b812d0520cf0/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=636d4880c4b9403aa45d837c62f4b812d0520cf0", "patch": "@@ -34,6 +34,11 @@ pub(crate) use on_enter::on_enter;\n // Don't forget to add new trigger characters to `server_capabilities` in `caps.rs`.\n pub(crate) const TRIGGER_CHARS: &str = \".=>{\";\n \n+struct ExtendedTextEdit {\n+    edit: TextEdit,\n+    is_snippet: bool,\n+}\n+\n // Feature: On Typing Assists\n //\n // Some features trigger on typing certain characters:\n@@ -68,22 +73,27 @@ pub(crate) fn on_char_typed(\n         return None;\n     }\n     let edit = on_char_typed_inner(file, position.offset, char_typed)?;\n-    Some(SourceChange::from_text_edit(position.file_id, edit))\n+    let mut sc = SourceChange::from_text_edit(position.file_id, edit.edit);\n+    sc.is_snippet = edit.is_snippet;\n+    Some(sc)\n }\n \n fn on_char_typed_inner(\n     file: &Parse<SourceFile>,\n     offset: TextSize,\n     char_typed: char,\n-) -> Option<TextEdit> {\n+) -> Option<ExtendedTextEdit> {\n+    fn conv(text_edit: Option<TextEdit>) -> Option<ExtendedTextEdit> {\n+        Some(ExtendedTextEdit { edit: text_edit?, is_snippet: false })\n+    }\n     if !stdx::always!(TRIGGER_CHARS.contains(char_typed)) {\n         return None;\n     }\n     match char_typed {\n-        '.' => on_dot_typed(&file.tree(), offset),\n-        '=' => on_eq_typed(&file.tree(), offset),\n-        '>' => on_arrow_typed(&file.tree(), offset),\n-        '{' => on_opening_brace_typed(file, offset),\n+        '.' => conv(on_dot_typed(&file.tree(), offset)),\n+        '=' => conv(on_eq_typed(&file.tree(), offset)),\n+        '>' => conv(on_arrow_typed(&file.tree(), offset)),\n+        '{' => conv(on_opening_brace_typed(file, offset)),\n         _ => unreachable!(),\n     }\n }"}, {"sha": "a16f0d904ce960d3d07873d9c1a13a312fcec69b", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/636d4880c4b9403aa45d837c62f4b812d0520cf0/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636d4880c4b9403aa45d837c62f4b812d0520cf0/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=636d4880c4b9403aa45d837c62f4b812d0520cf0", "patch": "@@ -276,7 +276,7 @@ pub(crate) fn handle_on_enter(\n pub(crate) fn handle_on_type_formatting(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::DocumentOnTypeFormattingParams,\n-) -> Result<Option<Vec<lsp_types::TextEdit>>> {\n+) -> Result<Option<Vec<lsp_ext::SnippetTextEdit>>> {\n     let _p = profile::span(\"handle_on_type_formatting\");\n     let mut position = from_proto::file_position(&snap, params.text_document_position)?;\n     let line_index = snap.file_line_index(position.file_id)?;\n@@ -306,9 +306,9 @@ pub(crate) fn handle_on_type_formatting(\n     };\n \n     // This should be a single-file edit\n-    let (_, edit) = edit.source_file_edits.into_iter().next().unwrap();\n+    let (_, text_edit) = edit.source_file_edits.into_iter().next().unwrap();\n \n-    let change = to_proto::text_edit_vec(&line_index, edit);\n+    let change = to_proto::snippet_text_edit_vec(&line_index, edit.is_snippet, text_edit);\n     Ok(Some(change))\n }\n "}, {"sha": "5f0e108624b2ef4991cbd065c4611d49b8c2613e", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/636d4880c4b9403aa45d837c62f4b812d0520cf0/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636d4880c4b9403aa45d837c62f4b812d0520cf0/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=636d4880c4b9403aa45d837c62f4b812d0520cf0", "patch": "@@ -4,8 +4,8 @@ use std::{collections::HashMap, path::PathBuf};\n \n use lsp_types::request::Request;\n use lsp_types::{\n-    notification::Notification, CodeActionKind, PartialResultParams, Position, Range,\n-    TextDocumentIdentifier, WorkDoneProgressParams,\n+    notification::Notification, CodeActionKind, DocumentOnTypeFormattingParams,\n+    PartialResultParams, Position, Range, TextDocumentIdentifier, WorkDoneProgressParams,\n };\n use serde::{Deserialize, Serialize};\n \n@@ -512,6 +512,19 @@ pub enum WorkspaceSymbolSearchKind {\n     AllSymbols,\n }\n \n+/// The document on type formatting request is sent from the client to\n+/// the server to format parts of the document during typing.  This is\n+/// almost same as lsp_types::request::OnTypeFormatting, but the\n+/// result has SnippetTextEdit in it instead of TextEdit.\n+#[derive(Debug)]\n+pub enum OnTypeFormatting {}\n+\n+impl Request for OnTypeFormatting {\n+    type Params = DocumentOnTypeFormattingParams;\n+    type Result = Option<Vec<SnippetTextEdit>>;\n+    const METHOD: &'static str = \"textDocument/onTypeFormatting\";\n+}\n+\n #[derive(Debug, Serialize, Deserialize)]\n pub struct CompletionResolveData {\n     pub position: lsp_types::TextDocumentPositionParams,"}, {"sha": "3c879687433d3574ec3a323277e0450a019d2350", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636d4880c4b9403aa45d837c62f4b812d0520cf0/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636d4880c4b9403aa45d837c62f4b812d0520cf0/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=636d4880c4b9403aa45d837c62f4b812d0520cf0", "patch": "@@ -605,7 +605,7 @@ impl GlobalState {\n             .on::<lsp_ext::OpenCargoToml>(handlers::handle_open_cargo_toml)\n             .on::<lsp_ext::MoveItem>(handlers::handle_move_item)\n             .on::<lsp_ext::WorkspaceSymbol>(handlers::handle_workspace_symbol)\n-            .on::<lsp_types::request::OnTypeFormatting>(handlers::handle_on_type_formatting)\n+            .on::<lsp_ext::OnTypeFormatting>(handlers::handle_on_type_formatting)\n             .on::<lsp_types::request::DocumentSymbolRequest>(handlers::handle_document_symbol)\n             .on::<lsp_types::request::GotoDefinition>(handlers::handle_goto_definition)\n             .on::<lsp_types::request::GotoDeclaration>(handlers::handle_goto_declaration)"}, {"sha": "983d8e1ac095dfb2ca0f4ea54cd5ed20944d7b74", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/636d4880c4b9403aa45d837c62f4b812d0520cf0/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/636d4880c4b9403aa45d837c62f4b812d0520cf0/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=636d4880c4b9403aa45d837c62f4b812d0520cf0", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 44e8238e4fbd4128\n+lsp_ext.rs hash: 2a188defec26cc7c\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:\n@@ -47,7 +47,7 @@ If a language client does not know about `rust-analyzer`'s configuration options\n \n **Experimental Client Capability:** `{ \"snippetTextEdit\": boolean }`\n \n-If this capability is set, `WorkspaceEdit`s returned from `codeAction` requests might contain `SnippetTextEdit`s instead of usual `TextEdit`s:\n+If this capability is set, `WorkspaceEdit`s returned from `codeAction` requests and `TextEdit`s returned from `textDocument/onTypeFormatting` requests might contain `SnippetTextEdit`s instead of usual `TextEdit`s:\n \n ```typescript\n interface SnippetTextEdit extends TextEdit {\n@@ -63,7 +63,7 @@ export interface TextDocumentEdit {\n }\n ```\n \n-When applying such code action, the editor should insert snippet, with tab stops and placeholder.\n+When applying such code action or text edit, the editor should insert snippet, with tab stops and placeholder.\n At the moment, rust-analyzer guarantees that only a single edit will have `InsertTextFormat.Snippet`.\n \n ### Example"}]}