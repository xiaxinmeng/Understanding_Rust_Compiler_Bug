{"sha": "711cad188abfc36e0a3d178ece2af41487ec5a45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMWNhZDE4OGFiZmMzNmUwYTNkMTc4ZWNlMmFmNDE0ODdlYzVhNDU=", "commit": {"author": {"name": "scott-linder", "email": "scott.b.linder@wmich.edu", "date": "2017-02-01T04:19:33Z"}, "committer": {"name": "scott-linder", "email": "scott.b.linder@wmich.edu", "date": "2017-06-11T16:19:11Z"}, "message": "check for borrowed box types", "tree": {"sha": "e496845fa9f985706349baf51ce54ed0984cada9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e496845fa9f985706349baf51ce54ed0984cada9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/711cad188abfc36e0a3d178ece2af41487ec5a45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/711cad188abfc36e0a3d178ece2af41487ec5a45", "html_url": "https://github.com/rust-lang/rust/commit/711cad188abfc36e0a3d178ece2af41487ec5a45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/711cad188abfc36e0a3d178ece2af41487ec5a45/comments", "author": null, "committer": null, "parents": [{"sha": "55cb63adfe08a22efcb668d4f7dd02c89eb5835f", "url": "https://api.github.com/repos/rust-lang/rust/commits/55cb63adfe08a22efcb668d4f7dd02c89eb5835f", "html_url": "https://github.com/rust-lang/rust/commit/55cb63adfe08a22efcb668d4f7dd02c89eb5835f"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "d2b5f6f2fe7c3dbe7c2dd2e4f33be82ef70e2e43", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/711cad188abfc36e0a3d178ece2af41487ec5a45/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/711cad188abfc36e0a3d178ece2af41487ec5a45/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=711cad188abfc36e0a3d178ece2af41487ec5a45", "patch": "@@ -364,6 +364,7 @@ All notable changes to this project will be documented in this file.\n [`block_in_if_condition_expr`]: https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_expr\n [`block_in_if_condition_stmt`]: https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_stmt\n [`bool_comparison`]: https://github.com/Manishearth/rust-clippy/wiki#bool_comparison\n+[`borrowed_box`]: https://github.com/Manishearth/rust-clippy/wiki#borrowed_box\n [`box_vec`]: https://github.com/Manishearth/rust-clippy/wiki#box_vec\n [`boxed_local`]: https://github.com/Manishearth/rust-clippy/wiki#boxed_local\n [`builtin_type_shadow`]: https://github.com/Manishearth/rust-clippy/wiki#builtin_type_shadow"}, {"sha": "1cd64745f123a08058b972e5b740ba106fa63a68", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/711cad188abfc36e0a3d178ece2af41487ec5a45/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/711cad188abfc36e0a3d178ece2af41487ec5a45/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=711cad188abfc36e0a3d178ece2af41487ec5a45", "patch": "@@ -194,6 +194,7 @@ name\n [block_in_if_condition_expr](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_expr)               | warn    | braces that can be eliminated in conditions, e.g. `if { true } ...`\n [block_in_if_condition_stmt](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_stmt)               | warn    | complex blocks in conditions, e.g. `if { let x = true; x } ...`\n [bool_comparison](https://github.com/Manishearth/rust-clippy/wiki#bool_comparison)                                     | warn    | comparing a variable to a boolean, e.g. `if x == true`\n+[borrowed_box](https://github.com/Manishearth/rust-clippy/wiki#borrowed_box)                                           | warn    | a borrow of a boxed type\n [box_vec](https://github.com/Manishearth/rust-clippy/wiki#box_vec)                                                     | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n [boxed_local](https://github.com/Manishearth/rust-clippy/wiki#boxed_local)                                             | warn    | using `Box<T>` where unnecessary\n [builtin_type_shadow](https://github.com/Manishearth/rust-clippy/wiki#builtin_type_shadow)                             | warn    | shadowing a builtin type"}, {"sha": "70b2e0c43856ba9b13053cb8f2eca1ba58d1c641", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/711cad188abfc36e0a3d178ece2af41487ec5a45/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/711cad188abfc36e0a3d178ece2af41487ec5a45/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=711cad188abfc36e0a3d178ece2af41487ec5a45", "patch": "@@ -506,6 +506,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         transmute::USELESS_TRANSMUTE,\n         transmute::WRONG_TRANSMUTE,\n         types::ABSURD_EXTREME_COMPARISONS,\n+        types::BORROWED_BOX,\n         types::BOX_VEC,\n         types::CHAR_LIT_AS_U8,\n         types::LET_UNIT_VALUE,"}, {"sha": "a073e7e98523de58729165bef31c88ea8e615f09", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/711cad188abfc36e0a3d178ece2af41487ec5a45/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/711cad188abfc36e0a3d178ece2af41487ec5a45/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=711cad188abfc36e0a3d178ece2af41487ec5a45", "patch": "@@ -65,9 +65,25 @@ declare_lint! {\n      structure like a VecDeque\"\n }\n \n+/// **What it does:** Checks for use of `&Box<T>` anywhere in the code.\n+///\n+/// **Why is this bad?** Any `&Box<T>` can also be a `&T`, which is more general.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn foo(bar: &Box<T>) { ... }\n+/// ```\n+declare_lint! {\n+    pub BORROWED_BOX,\n+    Warn,\n+    \"a borrow of a boxed type\"\n+}\n+\n impl LintPass for TypePass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(BOX_VEC, LINKEDLIST)\n+        lint_array!(BOX_VEC, LINKEDLIST, BORROWED_BOX)\n     }\n }\n \n@@ -161,11 +177,28 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty) {\n                 },\n             }\n         },\n+        TyRptr(_, MutTy { ref ty, .. }) => {\n+            match ty.node {\n+                TyPath(ref qpath) => {\n+                    let def = cx.tables.qpath_def(qpath, ast_ty.id);\n+                    if let Some(def_id) = opt_def_id(def) {\n+                        if Some(def_id) == cx.tcx.lang_items.owned_box() {\n+                            span_help_and_lint(cx,\n+                                               BOX_VEC,\n+                                               ast_ty.span,\n+                                               \"you seem to be trying to use `&Box<T>`. Consider using just `&T`\",\n+                                               \"replace `&Box<T>` with simply `&T`\");\n+                            return; // don't recurse into the type\n+                        }\n+                    }\n+                },\n+                _ => check_ty(cx, ty),\n+            }\n+        },\n         // recurse\n         TySlice(ref ty) |\n         TyArray(ref ty, _) |\n-        TyPtr(MutTy { ref ty, .. }) |\n-        TyRptr(_, MutTy { ref ty, .. }) => check_ty(cx, ty),\n+        TyPtr(MutTy { ref ty, .. }) => check_ty(cx, ty),\n         TyTup(ref tys) => {\n             for ty in tys {\n                 check_ty(cx, ty);"}, {"sha": "54dee4f901611288f785c17d56fa330b42c2c13c", "filename": "tests/compile-fail/borrow_box.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/711cad188abfc36e0a3d178ece2af41487ec5a45/tests%2Fcompile-fail%2Fborrow_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/711cad188abfc36e0a3d178ece2af41487ec5a45/tests%2Fcompile-fail%2Fborrow_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fborrow_box.rs?ref=711cad188abfc36e0a3d178ece2af41487ec5a45", "patch": "@@ -0,0 +1,14 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(clippy)]\n+#![allow(boxed_local)]\n+#![allow(blacklisted_name)]\n+\n+pub fn test(foo: &Box<bool>) { //~ ERROR you seem to be trying to use `&Box<T>`\n+    println!(\"{:?}\", foo)\n+}\n+\n+fn main(){\n+    test(&Box::new(false));\n+}"}]}