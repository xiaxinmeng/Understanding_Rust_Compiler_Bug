{"sha": "ddf92ffae4b8fc74474241f064f41f09db585ed8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZjkyZmZhZTRiOGZjNzQ0NzQyNDFmMDY0ZjQxZjA5ZGI1ODVlZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-06T19:29:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-06T19:29:28Z"}, "message": "Auto merge of #35393 - GuillaumeGomez:err_codes2, r=jonathandturner\n\nErr codes\n\nr? @jonathandturner", "tree": {"sha": "b3856998022b85a5795c4a26a41716f016f07608", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3856998022b85a5795c4a26a41716f016f07608"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddf92ffae4b8fc74474241f064f41f09db585ed8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf92ffae4b8fc74474241f064f41f09db585ed8", "html_url": "https://github.com/rust-lang/rust/commit/ddf92ffae4b8fc74474241f064f41f09db585ed8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddf92ffae4b8fc74474241f064f41f09db585ed8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "444ff9fbfb1f2a8e6645f67684f8a9ad99b343d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/444ff9fbfb1f2a8e6645f67684f8a9ad99b343d3", "html_url": "https://github.com/rust-lang/rust/commit/444ff9fbfb1f2a8e6645f67684f8a9ad99b343d3"}, {"sha": "4e2dd8d24ae58fad215416b89bf00e2444a5128e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2dd8d24ae58fad215416b89bf00e2444a5128e", "html_url": "https://github.com/rust-lang/rust/commit/4e2dd8d24ae58fad215416b89bf00e2444a5128e"}], "stats": {"total": 265, "additions": 243, "deletions": 22}, "files": [{"sha": "9cdc76f25a63f1a6b77cc446269daa3054b592f7", "filename": "src/librustc_const_eval/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fdiagnostics.rs?ref=ddf92ffae4b8fc74474241f064f41f09db585ed8", "patch": "@@ -25,8 +25,8 @@ one is too specific or the ordering is incorrect.\n \n For example, the following `match` block has too many arms:\n \n-```compile_fail\n-match foo {\n+```compile_fail,E0001\n+match Some(0) {\n     Some(bar) => {/* ... */}\n     None => {/* ... */}\n     _ => {/* ... */} // All possible cases have already been handled\n@@ -108,7 +108,7 @@ one or more possible inputs to a match expression. Guaranteed matches are\n required in order to assign values to match expressions, or alternatively,\n determine the flow of execution. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0004\n enum Terminator {\n     HastaLaVistaBaby,\n     TalkToMyHand,\n@@ -153,7 +153,7 @@ E0005: r##\"\n Patterns used to bind names must be irrefutable, that is, they must guarantee\n that a name will be extracted in all cases. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0005\n let x = Some(1);\n let Some(y) = x;\n // error: refutable pattern in local binding: `None` not covered\n@@ -187,7 +187,7 @@ like the following is invalid as it requires the entire `Option<String>` to be\n moved into a variable called `op_string` while simultaneously requiring the\n inner `String` to be moved into a variable called `s`.\n \n-```compile_fail\n+```compile_fail,E0007\n let x = Some(\"s\".to_string());\n \n match x {\n@@ -205,7 +205,7 @@ name is bound by move in a pattern, it should also be moved to wherever it is\n referenced in the pattern guard code. Doing so however would prevent the name\n from being available in the body of the match arm. Consider the following:\n \n-```compile_fail\n+```compile_fail,E0008\n match Some(\"hi\".to_string()) {\n     Some(s) if s.len() == 0 => {}, // use s.\n     _ => {},\n@@ -229,7 +229,7 @@ match Some(\"hi\".to_string()) {\n Though this example seems innocuous and easy to solve, the problem becomes clear\n when it encounters functions which consume the value:\n \n-```compile_fail\n+```compile_fail,E0008\n struct A{}\n \n impl A {\n@@ -283,7 +283,7 @@ This limitation may be removed in a future version of Rust.\n \n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0009\n struct X { x: (), }\n \n let x = Some((X { x: () }, X { x: () }));\n@@ -351,25 +351,25 @@ An if-let pattern attempts to match the pattern, and enters the body if the\n match was successful. If the match is irrefutable (when it cannot fail to\n match), use a regular `let`-binding instead. For instance:\n \n-```compile_fail\n+```compile_fail,E0162\n struct Irrefutable(i32);\n let irr = Irrefutable(0);\n \n // This fails to compile because the match is irrefutable.\n if let Irrefutable(x) = irr {\n     // This body will always be executed.\n-    foo(x);\n+    // ...\n }\n ```\n \n Try this instead:\n \n-```ignore\n+```\n struct Irrefutable(i32);\n let irr = Irrefutable(0);\n \n let Irrefutable(x) = irr;\n-foo(x);\n+println!(\"{}\", x);\n ```\n \"##,\n \n@@ -378,7 +378,7 @@ A while-let pattern attempts to match the pattern, and enters the body if the\n match was successful. If the match is irrefutable (when it cannot fail to\n match), use a regular `let`-binding inside a `loop` instead. For instance:\n \n-```compile_fail\n+```compile_fail,E0165\n struct Irrefutable(i32);\n let irr = Irrefutable(0);\n \n@@ -455,7 +455,7 @@ that a name will be extracted in all cases. Instead of pattern matching the\n loop variable, consider using a `match` or `if let` inside the loop body. For\n instance:\n \n-```compile_fail\n+```compile_fail,E0297\n let xs : Vec<Option<i32>> = vec!(Some(1), None);\n \n // This fails because `None` is not covered.\n@@ -497,7 +497,7 @@ on which the match depends in such a way, that the match would not be\n exhaustive. For instance, the following would not match any arm if mutable\n borrows were allowed:\n \n-```compile_fail\n+```compile_fail,E0301\n match Some(()) {\n     None => { },\n     option if option.take().is_none() => {\n@@ -515,10 +515,10 @@ on which the match depends in such a way, that the match would not be\n exhaustive. For instance, the following would not match any arm if assignments\n were allowed:\n \n-```compile_fail\n+```compile_fail,E0302\n match Some(()) {\n     None => { },\n-    option if { option = None; false } { },\n+    option if { option = None; false } => { },\n     Some(_) => { } // When the previous match failed, the option became `None`.\n }\n ```\n@@ -529,14 +529,18 @@ In certain cases it is possible for sub-bindings to violate memory safety.\n Updates to the borrow checker in a future version of Rust may remove this\n restriction, but for now patterns must be rewritten without sub-bindings.\n \n-```ignore\n-// Before.\n+Before:\n+\n+```compile_fail,E0303\n match Some(\"hi\".to_string()) {\n     ref op_string_ref @ Some(s) => {},\n     None => {},\n }\n+```\n+\n+After:\n \n-// After.\n+```\n match Some(\"hi\".to_string()) {\n     Some(ref s) => {\n         let op_string_ref = &Some(s);\n@@ -556,7 +560,7 @@ This error indicates that the compiler was unable to sensibly evaluate an\n constant expression that had to be evaluated. Attempting to divide by 0\n or causing integer overflow are two ways to induce this error. For example:\n \n-```compile_fail\n+```compile_fail,E0080\n enum Enum {\n     X = (1 << 500),\n     Y = (1 / 0)\n@@ -575,7 +579,7 @@ E0306: r##\"\n In an array literal `[x; N]`, `N` is the number of elements in the array. This\n must be an unsigned integer. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0306\n let x = [0i32; true]; // error: expected positive integer for repeat count,\n                       //        found boolean\n ```"}, {"sha": "d322c8b1caf56068a6a9d969239540c2a52f8234", "filename": "src/test/compile-fail/E0271.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0271.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0271.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0271.rs?ref=ddf92ffae4b8fc74474241f064f41f09db585ed8", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Trait { type AssociatedType; }\n+\n+fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n+    println!(\"in foo\");\n+}\n+\n+impl Trait for i8 { type AssociatedType = &'static str; }\n+\n+fn main() {\n+    foo(3_i8); //~ ERROR E0271\n+}"}, {"sha": "8dfd1d9b4afc95a4f14054b4b0a859e1bf1e52c9", "filename": "src/test/compile-fail/E0275.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0275.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0275.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0275.rs?ref=ddf92ffae4b8fc74474241f064f41f09db585ed8", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {}\n+\n+struct Bar<T>(T);\n+\n+impl<T> Foo for T where Bar<T>: Foo {} //~ ERROR E0275\n+\n+fn main() {\n+}"}, {"sha": "62e43b02ca85f1df60821e828032167a3d77612b", "filename": "src/test/compile-fail/E0276.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0276.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0276.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0276.rs?ref=ddf92ffae4b8fc74474241f064f41f09db585ed8", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn foo<T>(x: T);\n+}\n+\n+impl Foo for bool {\n+    fn foo<T>(x: T) where T: Copy {} //~ ERROR E0276\n+}\n+\n+fn main() {\n+}"}, {"sha": "7737f12ac371400c5f8e372475b70591b16198f5", "filename": "src/test/compile-fail/E0277.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0277.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0277.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0277.rs?ref=ddf92ffae4b8fc74474241f064f41f09db585ed8", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn bar(&self);\n+}\n+\n+fn some_func<T: Foo>(foo: T) {\n+    foo.bar();\n+}\n+\n+fn main() {\n+    some_func(5i32); //~ ERROR E0277\n+}"}, {"sha": "d468cd3ff1bf429171f1625a9071879c39b4ca9e", "filename": "src/test/compile-fail/E0281.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0281.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0281.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0281.rs?ref=ddf92ffae4b8fc74474241f064f41f09db585ed8", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo<F: Fn()>(x: F) { }\n+\n+fn main() {\n+    foo(|y| { }); //~ ERROR E0281\n+                  //~^ ERROR E0281\n+}"}, {"sha": "dfc702670ce460d31e165e9317e88af1a8b5d206", "filename": "src/test/compile-fail/E0282.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0282.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0282.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0282.rs?ref=ddf92ffae4b8fc74474241f064f41f09db585ed8", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = \"hello\".chars().rev().collect(); //~ ERROR E0282\n+}"}, {"sha": "844c47f41b81a2c9035b923962fdee9b6578b275", "filename": "src/test/compile-fail/E0283.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0283.rs?ref=ddf92ffae4b8fc74474241f064f41f09db585ed8", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Generator {\n+    fn create() -> u32;\n+}\n+\n+struct Impl;\n+\n+impl Generator for Impl {\n+    fn create() -> u32 { 1 }\n+}\n+\n+struct AnotherImpl;\n+\n+impl Generator for AnotherImpl {\n+    fn create() -> u32 { 2 }\n+}\n+\n+fn main() {\n+    let cont: u32 = Generator::create(); //~ ERROR E0283\n+}"}, {"sha": "562fd00a18aa655687cbbfaaf17790b4d514b2b1", "filename": "src/test/compile-fail/E0296.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0296.rs?ref=ddf92ffae4b8fc74474241f064f41f09db585ed8", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![recursion_limit] //~ ERROR E0296\n+\n+fn main() {}"}, {"sha": "43166c1a9e83e4f4a53a2e9bde49d1b6c1ec0771", "filename": "src/test/compile-fail/E0297.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0297.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0297.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0297.rs?ref=ddf92ffae4b8fc74474241f064f41f09db585ed8", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let xs : Vec<Option<i32>> = vec!(Some(1), None);\n+\n+    for Some(x) in xs {} //~ ERROR E0297\n+}"}, {"sha": "06e98289b0d57ab20c9b9aa481b16713fd00479d", "filename": "src/test/compile-fail/E0301.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0301.rs?ref=ddf92ffae4b8fc74474241f064f41f09db585ed8", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    match Some(()) {\n+        None => { },\n+        option if option.take().is_none() => {}, //~ ERROR E0301\n+        Some(_) => { }\n+    }\n+}"}, {"sha": "6a5ad40b10907222bad96a92c9b4096b46d019d4", "filename": "src/test/compile-fail/E0302.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0302.rs?ref=ddf92ffae4b8fc74474241f064f41f09db585ed8", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    match Some(()) {\n+        None => { },\n+        option if { option = None; false } => { }, //~ ERROR E0302\n+        Some(_) => { }\n+    }\n+}"}, {"sha": "67947fd087c05d40e99114ce1f55071822c749f4", "filename": "src/test/compile-fail/E0303.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0303.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf92ffae4b8fc74474241f064f41f09db585ed8/src%2Ftest%2Fcompile-fail%2FE0303.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0303.rs?ref=ddf92ffae4b8fc74474241f064f41f09db585ed8", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    match Some(\"hi\".to_string()) {\n+        ref op_string_ref @ Some(s) => {}, //~ ERROR E0303\n+                                           //~^ ERROR E0009\n+        None => {},\n+    }\n+}"}]}