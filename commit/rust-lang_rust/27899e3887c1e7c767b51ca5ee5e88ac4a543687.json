{"sha": "27899e3887c1e7c767b51ca5ee5e88ac4a543687", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ODk5ZTM4ODdjMWU3Yzc2N2I1MWNhNWVlNWU4OGFjNGE1NDM2ODc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-26T11:32:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-26T11:32:06Z"}, "message": "Rollup merge of #85625 - SkiFire13:fix-85613-vec-dedup-drop-panics, r=nagisa\n\nPrevent double drop in `Vec::dedup_by` if a destructor panics\n\nFixes #85613", "tree": {"sha": "8d51c2ab81bc1e9b7c6753b4eaaea07cf942b8b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d51c2ab81bc1e9b7c6753b4eaaea07cf942b8b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27899e3887c1e7c767b51ca5ee5e88ac4a543687", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrjG3CRBK7hj4Ov3rIwAANegIAJVnbWx8IbqVjgogZA0oBHgr\nv3X+YUJ0sZp+4EpQQy/2Xe3dSvubEA0Gvjf7y6eYlQRbWfJaOOZ9l6H06Yc7lCKf\nLvbd8oIxS64OkzvXaczKMMVXrpiDPVXFsmFStmS0Z/YD8oqe7BC5jXynTeOPcOQk\nCTdI4SpkVl4yWYzkPCq3UfiQVLnkKVyfUfNAd5ll43uluntWehioZ1pbi2AzcsTX\n68/F52n3cc/JsUNq0CZV9apH390aIwmWeWKtcKt3jT/BxEaGAxM54KX+eXQ6dWGk\nau0QKDZYjVVCfy1I4GdrMrrw2lLx1AKFSseDvbCTK7oEZCPCFNoEci1US0I3dyo=\n=X5dV\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d51c2ab81bc1e9b7c6753b4eaaea07cf942b8b2\nparent 69c78a98ee2fb1e96675beb50115495bffca9777\nparent c9595faa2850b01966c64682d2bb8b32e0955625\nauthor Dylan DPC <dylan.dpc@gmail.com> 1622028726 +0200\ncommitter GitHub <noreply@github.com> 1622028726 +0200\n\nRollup merge of #85625 - SkiFire13:fix-85613-vec-dedup-drop-panics, r=nagisa\n\nPrevent double drop in `Vec::dedup_by` if a destructor panics\n\nFixes #85613\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27899e3887c1e7c767b51ca5ee5e88ac4a543687", "html_url": "https://github.com/rust-lang/rust/commit/27899e3887c1e7c767b51ca5ee5e88ac4a543687", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27899e3887c1e7c767b51ca5ee5e88ac4a543687/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c78a98ee2fb1e96675beb50115495bffca9777", "url": "https://api.github.com/repos/rust-lang/rust/commits/69c78a98ee2fb1e96675beb50115495bffca9777", "html_url": "https://github.com/rust-lang/rust/commit/69c78a98ee2fb1e96675beb50115495bffca9777"}, {"sha": "c9595faa2850b01966c64682d2bb8b32e0955625", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9595faa2850b01966c64682d2bb8b32e0955625", "html_url": "https://github.com/rust-lang/rust/commit/c9595faa2850b01966c64682d2bb8b32e0955625"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "105c60e7bf0851c270b853db941db50806f43350", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27899e3887c1e7c767b51ca5ee5e88ac4a543687/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27899e3887c1e7c767b51ca5ee5e88ac4a543687/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=27899e3887c1e7c767b51ca5ee5e88ac4a543687", "patch": "@@ -1619,6 +1619,8 @@ impl<T, A: Allocator> Vec<T, A> {\n                 let prev_ptr = ptr.add(gap.write.wrapping_sub(1));\n \n                 if same_bucket(&mut *read_ptr, &mut *prev_ptr) {\n+                    // Increase `gap.read` now since the drop may panic.\n+                    gap.read += 1;\n                     /* We have found duplicate, drop it in-place */\n                     ptr::drop_in_place(read_ptr);\n                 } else {\n@@ -1631,9 +1633,8 @@ impl<T, A: Allocator> Vec<T, A> {\n \n                     /* We have filled that place, so go further */\n                     gap.write += 1;\n+                    gap.read += 1;\n                 }\n-\n-                gap.read += 1;\n             }\n \n             /* Technically we could let `gap` clean up with its Drop, but"}, {"sha": "36c81b49709735cb3a126faf27733355b261ccbb", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/27899e3887c1e7c767b51ca5ee5e88ac4a543687/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27899e3887c1e7c767b51ca5ee5e88ac4a543687/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=27899e3887c1e7c767b51ca5ee5e88ac4a543687", "patch": "@@ -2234,48 +2234,50 @@ fn test_vec_dedup() {\n #[test]\n fn test_vec_dedup_panicking() {\n     #[derive(Debug)]\n-    struct Panic {\n-        drop_counter: &'static AtomicU32,\n+    struct Panic<'a> {\n+        drop_counter: &'a Cell<u32>,\n         value: bool,\n         index: usize,\n     }\n \n-    impl PartialEq for Panic {\n+    impl<'a> PartialEq for Panic<'a> {\n         fn eq(&self, other: &Self) -> bool {\n             self.value == other.value\n         }\n     }\n \n-    impl Drop for Panic {\n+    impl<'a> Drop for Panic<'a> {\n         fn drop(&mut self) {\n-            let x = self.drop_counter.fetch_add(1, Ordering::SeqCst);\n-            assert!(x != 4);\n+            self.drop_counter.set(self.drop_counter.get() + 1);\n+            if !std::thread::panicking() {\n+                assert!(self.index != 4);\n+            }\n         }\n     }\n \n-    static DROP_COUNTER: AtomicU32 = AtomicU32::new(0);\n+    let drop_counter = &Cell::new(0);\n     let expected = [\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 0 },\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 5 },\n-        Panic { drop_counter: &DROP_COUNTER, value: true, index: 6 },\n-        Panic { drop_counter: &DROP_COUNTER, value: true, index: 7 },\n+        Panic { drop_counter, value: false, index: 0 },\n+        Panic { drop_counter, value: false, index: 5 },\n+        Panic { drop_counter, value: true, index: 6 },\n+        Panic { drop_counter, value: true, index: 7 },\n     ];\n     let mut vec = vec![\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 0 },\n+        Panic { drop_counter, value: false, index: 0 },\n         // these elements get deduplicated\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 1 },\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 2 },\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 3 },\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 4 },\n-        // here it panics\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 5 },\n-        Panic { drop_counter: &DROP_COUNTER, value: true, index: 6 },\n-        Panic { drop_counter: &DROP_COUNTER, value: true, index: 7 },\n+        Panic { drop_counter, value: false, index: 1 },\n+        Panic { drop_counter, value: false, index: 2 },\n+        Panic { drop_counter, value: false, index: 3 },\n+        Panic { drop_counter, value: false, index: 4 },\n+        // here it panics while dropping the item with index==4\n+        Panic { drop_counter, value: false, index: 5 },\n+        Panic { drop_counter, value: true, index: 6 },\n+        Panic { drop_counter, value: true, index: 7 },\n     ];\n \n-    let _ = std::panic::catch_unwind(std::panic::AssertUnwindSafe(|| {\n-        vec.dedup();\n-    }));\n+    let _ = catch_unwind(AssertUnwindSafe(|| vec.dedup())).unwrap_err();\n+\n+    assert_eq!(drop_counter.get(), 4);\n \n     let ok = vec.iter().zip(expected.iter()).all(|(x, y)| x.index == y.index);\n "}]}