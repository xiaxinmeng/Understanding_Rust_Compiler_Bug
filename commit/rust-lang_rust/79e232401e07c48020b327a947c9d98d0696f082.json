{"sha": "79e232401e07c48020b327a947c9d98d0696f082", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZTIzMjQwMWUwN2M0ODAyMGIzMjdhOTQ3YzlkOThkMDY5NmYwODI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-27T12:13:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-27T12:13:57Z"}, "message": "Rename lifetimes.", "tree": {"sha": "468f06b033aa2c36235d0870a02f611885694bcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/468f06b033aa2c36235d0870a02f611885694bcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79e232401e07c48020b327a947c9d98d0696f082", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79e232401e07c48020b327a947c9d98d0696f082", "html_url": "https://github.com/rust-lang/rust/commit/79e232401e07c48020b327a947c9d98d0696f082", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79e232401e07c48020b327a947c9d98d0696f082/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e72b36299d54eb3e39991c9b2a9cbaeacccda3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e72b36299d54eb3e39991c9b2a9cbaeacccda3e", "html_url": "https://github.com/rust-lang/rust/commit/7e72b36299d54eb3e39991c9b2a9cbaeacccda3e"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "d3e29fa11113002d802afc1e13dfd4645a1d35e1", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/79e232401e07c48020b327a947c9d98d0696f082/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e232401e07c48020b327a947c9d98d0696f082/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=79e232401e07c48020b327a947c9d98d0696f082", "patch": "@@ -743,10 +743,10 @@ pub fn default_provide_extern(providers: &mut ty::query::Providers<'_>) {\n \n pub struct BoxedGlobalCtxt<'tcx>(&'tcx GlobalCtxt<'tcx>);\n \n-impl<'gcx> BoxedGlobalCtxt<'gcx> {\n+impl<'tcx> BoxedGlobalCtxt<'tcx> {\n     pub fn enter<F, R>(&mut self, f: F) -> R\n     where\n-        F: for<'tcx> FnOnce(TyCtxt<'tcx>) -> R,\n+        F: FnOnce(TyCtxt<'tcx>) -> R,\n     {\n         ty::tls::enter_global(self.0, |tcx| f(tcx))\n     }\n@@ -756,17 +756,17 @@ impl<'gcx> BoxedGlobalCtxt<'gcx> {\n     }\n }\n \n-pub fn create_global_ctxt<'gcx>(\n-    compiler: &'gcx Compiler,\n+pub fn create_global_ctxt<'tcx>(\n+    compiler: &'tcx Compiler,\n     lint_store: Lrc<lint::LintStore>,\n-    hir_forest: &'gcx hir::map::Forest,\n+    hir_forest: &'tcx hir::map::Forest,\n     mut resolver_outputs: ResolverOutputs,\n     outputs: OutputFilenames,\n     crate_name: &str,\n-    global_ctxt: &'gcx Once<GlobalCtxt<'gcx>>,\n-    arenas: &'gcx Once<AllArenas>,\n-    local_arena: &'gcx WorkerLocal<Arena<'gcx>>,\n-) -> BoxedGlobalCtxt<'gcx> {\n+    global_ctxt: &'tcx Once<GlobalCtxt<'tcx>>,\n+    arenas: &'tcx Once<AllArenas>,\n+    local_arena: &'tcx WorkerLocal<Arena<'tcx>>,\n+) -> BoxedGlobalCtxt<'tcx> {\n     let sess = &compiler.session();\n     let defs = mem::take(&mut resolver_outputs.definitions);\n "}, {"sha": "04bf04189bd46933d2c55adaf1d744421c11f445", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/79e232401e07c48020b327a947c9d98d0696f082/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e232401e07c48020b327a947c9d98d0696f082/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=79e232401e07c48020b327a947c9d98d0696f082", "patch": "@@ -69,28 +69,28 @@ impl<T> Default for Query<T> {\n     }\n }\n \n-pub struct Queries<'comp> {\n-    compiler: &'comp Compiler,\n-    gcx: Once<GlobalCtxt<'comp>>,\n+pub struct Queries<'tcx> {\n+    compiler: &'tcx Compiler,\n+    gcx: Once<GlobalCtxt<'tcx>>,\n     arenas: Once<AllArenas>,\n     forest: Once<hir::map::Forest>,\n \n-    local_arena: WorkerLocal<Arena<'comp>>,\n+    local_arena: WorkerLocal<Arena<'tcx>>,\n \n     dep_graph_future: Query<Option<DepGraphFuture>>,\n     parse: Query<ast::Crate>,\n     crate_name: Query<String>,\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n     expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n-    lower_to_hir: Query<(&'comp hir::map::Forest, Steal<ResolverOutputs>)>,\n+    lower_to_hir: Query<(&'tcx hir::map::Forest, Steal<ResolverOutputs>)>,\n     prepare_outputs: Query<OutputFilenames>,\n-    global_ctxt: Query<BoxedGlobalCtxt<'comp>>,\n+    global_ctxt: Query<BoxedGlobalCtxt<'tcx>>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n }\n \n-impl<'comp> Queries<'comp> {\n-    pub fn new(compiler: &'comp Compiler) -> Queries<'comp> {\n+impl<'tcx> Queries<'tcx> {\n+    pub fn new(compiler: &'tcx Compiler) -> Queries<'tcx> {\n         Queries {\n             compiler,\n             gcx: Once::new(),\n@@ -219,8 +219,8 @@ impl<'comp> Queries<'comp> {\n     }\n \n     pub fn lower_to_hir(\n-        &'comp self,\n-    ) -> Result<&Query<(&'comp hir::map::Forest, Steal<ResolverOutputs>)>> {\n+        &'tcx self,\n+    ) -> Result<&Query<(&'tcx hir::map::Forest, Steal<ResolverOutputs>)>> {\n         self.lower_to_hir.compute(|| {\n             let expansion_result = self.expansion()?;\n             let peeked = expansion_result.peek();\n@@ -253,7 +253,7 @@ impl<'comp> Queries<'comp> {\n         })\n     }\n \n-    pub fn global_ctxt(&'comp self) -> Result<&Query<BoxedGlobalCtxt<'comp>>> {\n+    pub fn global_ctxt(&'tcx self) -> Result<&Query<BoxedGlobalCtxt<'tcx>>> {\n         self.global_ctxt.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let outputs = self.prepare_outputs()?.peek().clone();\n@@ -274,7 +274,7 @@ impl<'comp> Queries<'comp> {\n         })\n     }\n \n-    pub fn ongoing_codegen(&'comp self) -> Result<&Query<Box<dyn Any>>> {\n+    pub fn ongoing_codegen(&'tcx self) -> Result<&Query<Box<dyn Any>>> {\n         self.ongoing_codegen.compute(|| {\n             let outputs = self.prepare_outputs()?;\n             self.global_ctxt()?.peek_mut().enter(|tcx| {\n@@ -292,7 +292,7 @@ impl<'comp> Queries<'comp> {\n         })\n     }\n \n-    pub fn linker(&'comp self) -> Result<Linker> {\n+    pub fn linker(&'tcx self) -> Result<Linker> {\n         let dep_graph = self.dep_graph()?;\n         let prepare_outputs = self.prepare_outputs()?;\n         let ongoing_codegen = self.ongoing_codegen()?;"}]}