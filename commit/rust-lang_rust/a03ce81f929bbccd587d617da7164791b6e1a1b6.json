{"sha": "a03ce81f929bbccd587d617da7164791b6e1a1b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwM2NlODFmOTI5YmJjY2Q1ODdkNjE3ZGE3MTY0NzkxYjZlMWExYjY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-16T06:01:05Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T00:53:40Z"}, "message": "Rollup merge of #22273 - nagisa:doc-deprecated, r=alexcrichton\n\n Since we don\u2019t have Deprecated stability level anymore, the only other source of information is\ndeprecated-since version, which conveniently to us, only exists if the symbol is deprecated.\n\nFixes #21789", "tree": {"sha": "64705ed0dbfd5d12b6d6fdb03d327a3b2853dcbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64705ed0dbfd5d12b6d6fdb03d327a3b2853dcbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a03ce81f929bbccd587d617da7164791b6e1a1b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a03ce81f929bbccd587d617da7164791b6e1a1b6", "html_url": "https://github.com/rust-lang/rust/commit/a03ce81f929bbccd587d617da7164791b6e1a1b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a03ce81f929bbccd587d617da7164791b6e1a1b6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d264ef2b11683337c24cfb16e0335ab386df02ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/d264ef2b11683337c24cfb16e0335ab386df02ab", "html_url": "https://github.com/rust-lang/rust/commit/d264ef2b11683337c24cfb16e0335ab386df02ab"}, {"sha": "6a67d8600026865a1f291b1ea84ac28d4e7515a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a67d8600026865a1f291b1ea84ac28d4e7515a5", "html_url": "https://github.com/rust-lang/rust/commit/6a67d8600026865a1f291b1ea84ac28d4e7515a5"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "7ef48378af183415d595255c30b3541896a698b3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a03ce81f929bbccd587d617da7164791b6e1a1b6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03ce81f929bbccd587d617da7164791b6e1a1b6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a03ce81f929bbccd587d617da7164791b6e1a1b6", "patch": "@@ -2490,6 +2490,7 @@ pub struct Stability {\n     pub level: attr::StabilityLevel,\n     pub feature: String,\n     pub since: String,\n+    pub deprecated_since: String,\n     pub reason: String\n }\n \n@@ -2500,6 +2501,8 @@ impl Clean<Stability> for attr::Stability {\n             feature: self.feature.to_string(),\n             since: self.since.as_ref().map_or(\"\".to_string(),\n                                               |interned| interned.to_string()),\n+            deprecated_since: self.deprecated_since.as_ref().map_or(\"\".to_string(),\n+                                                                    |istr| istr.to_string()),\n             reason: self.reason.as_ref().map_or(\"\".to_string(),\n                                                 |interned| interned.to_string()),\n         }"}, {"sha": "ed7f051408c45894303ab703902b7d49a155d1a6", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a03ce81f929bbccd587d617da7164791b6e1a1b6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03ce81f929bbccd587d617da7164791b6e1a1b6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=a03ce81f929bbccd587d617da7164791b6e1a1b6", "patch": "@@ -711,7 +711,11 @@ impl<'a> fmt::Display for Stability<'a> {\n         match *stab {\n             Some(ref stability) => {\n                 write!(f, \"<a class='stability {lvl}' title='{reason}'>{lvl}</a>\",\n-                       lvl = stability.level,\n+                       lvl = if stability.deprecated_since.is_empty() {\n+                           format!(\"{}\", stability.level)\n+                       } else {\n+                           \"Deprecated\".to_string()\n+                       },\n                        reason = stability.reason)\n             }\n             None => Ok(())\n@@ -725,7 +729,11 @@ impl<'a> fmt::Display for ConciseStability<'a> {\n         match *stab {\n             Some(ref stability) => {\n                 write!(f, \"<a class='stability {lvl}' title='{lvl}{colon}{reason}'></a>\",\n-                       lvl = stability.level,\n+                       lvl = if stability.deprecated_since.is_empty() {\n+                           format!(\"{}\", stability.level)\n+                       } else {\n+                           \"Deprecated\".to_string()\n+                       },\n                        colon = if stability.reason.len() > 0 { \": \" } else { \"\" },\n                        reason = stability.reason)\n             }\n@@ -763,6 +771,9 @@ impl fmt::Display for ModuleSummary {\n             try!(write!(f, \"<span class='summary Unstable' \\\n                             style='width: {:.4}%; display: inline-block'>&nbsp</span>\",\n                         (100 * cnt.unstable) as f64/tot as f64));\n+            try!(write!(f, \"<span class='summary Deprecated' \\\n+                            style='width: {:.4}%; display: inline-block'>&nbsp</span>\",\n+                        (100 * cnt.deprecated) as f64/tot as f64));\n             try!(write!(f, \"<span class='summary Unmarked' \\\n                             style='width: {:.4}%; display: inline-block'>&nbsp</span>\",\n                         (100 * cnt.unmarked) as f64/tot as f64));\n@@ -778,11 +789,12 @@ impl fmt::Display for ModuleSummary {\n         let mut context = Vec::new();\n \n         let tot = self.counts.total();\n-        let (stable, unstable, unmarked) = if tot == 0 {\n-            (0, 0, 0)\n+        let (stable, unstable, deprecated, unmarked) = if tot == 0 {\n+            (0, 0, 0, 0)\n         } else {\n             ((100 * self.counts.stable)/tot,\n              (100 * self.counts.unstable)/tot,\n+             (100 * self.counts.deprecated)/tot,\n              (100 * self.counts.unmarked)/tot)\n         };\n \n@@ -794,11 +806,12 @@ its children (percentages total for {name}):\n <blockquote>\n <a class='stability Stable'></a> stable ({}%),<br/>\n <a class='stability Unstable'></a> unstable ({}%),<br/>\n+<a class='stability Deprecated'></a> deprecated ({}%),<br/>\n <a class='stability Unmarked'></a> unmarked ({}%)\n </blockquote>\n The counts do not include methods or trait\n implementations that are visible only through a re-exported type.\",\n-stable, unstable, unmarked,\n+stable, unstable, deprecated, unmarked,\n name=self.name));\n         try!(write!(f, \"<table>\"));\n         try!(fmt_inner(f, &mut context, self));"}, {"sha": "47918ba78a270f060a4c684dd6d4adb91d275936", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a03ce81f929bbccd587d617da7164791b6e1a1b6/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03ce81f929bbccd587d617da7164791b6e1a1b6/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=a03ce81f929bbccd587d617da7164791b6e1a1b6", "patch": "@@ -29,18 +29,20 @@ use html::render::cache;\n /// The counts for each stability level.\n #[derive(Copy)]\n pub struct Counts {\n-    pub unstable: uint,\n-    pub stable: uint,\n+    pub deprecated: u64,\n+    pub unstable: u64,\n+    pub stable: u64,\n \n     /// No stability level, inherited or otherwise.\n-    pub unmarked: uint,\n+    pub unmarked: u64,\n }\n \n impl Add for Counts {\n     type Output = Counts;\n \n     fn add(self, other: Counts) -> Counts {\n         Counts {\n+            deprecated:   self.deprecated   + other.deprecated,\n             unstable:     self.unstable     + other.unstable,\n             stable:       self.stable       + other.stable,\n             unmarked:     self.unmarked     + other.unmarked,\n@@ -51,14 +53,15 @@ impl Add for Counts {\n impl Counts {\n     fn zero() -> Counts {\n         Counts {\n+            deprecated:   0,\n             unstable:     0,\n             stable:       0,\n             unmarked:     0,\n         }\n     }\n \n-    pub fn total(&self) -> uint {\n-        self.unstable + self.stable + self.unmarked\n+    pub fn total(&self) -> u64 {\n+        self.deprecated + self.unstable + self.stable + self.unmarked\n     }\n }\n \n@@ -94,9 +97,14 @@ fn visible(item: &Item) -> bool {\n fn count_stability(stab: Option<&Stability>) -> Counts {\n     match stab {\n         None            => Counts { unmarked: 1,     .. Counts::zero() },\n-        Some(ref stab) => match stab.level {\n-            Unstable    => Counts { unstable: 1,     .. Counts::zero() },\n-            Stable      => Counts { stable: 1,       .. Counts::zero() },\n+        Some(ref stab) => {\n+            if !stab.deprecated_since.is_empty() {\n+                return Counts { deprecated: 1, .. Counts::zero() };\n+            }\n+            match stab.level {\n+                Unstable    => Counts { unstable: 1,     .. Counts::zero() },\n+                Stable      => Counts { stable: 1,       .. Counts::zero() },\n+            }\n         }\n     }\n }"}]}