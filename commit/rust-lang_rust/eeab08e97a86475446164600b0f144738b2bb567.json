{"sha": "eeab08e97a86475446164600b0f144738b2bb567", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYWIwOGU5N2E4NjQ3NTQ0NjE2NDYwMGIwZjE0NDczOGIyYmI1Njc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-14T15:59:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-14T15:59:07Z"}, "message": "Rollup merge of #53226 - QuietMisdreavus:editions-for-all, r=estebank\n\ndriver: set the syntax edition in phase 1\n\nFixes https://github.com/rust-lang/rust/issues/53203\n\nIt seems the way libsyntax handles the desired edition is to use a global, set via `syntax_pos::hygiene::set_default_edition`. Right now, this is set in the driver in `run_compiler`, which is the entry point for running the compiler all the way through to emitting files. Since rustdoc doesn't use this function, it wasn't properly setting this global. (When initially setting up editions in rustdoc, i'd assumed that setting `sessopts.edition` would have done this... `>_>`) This was \"fixed\" for doctests in https://github.com/rust-lang/rust/pull/52385, but rather than patching in a call to `set_default_edition` in all the places rustdoc sets up the compiler, i've instead moved the call in the driver to be farther in the process. This means that any use of `phase_1_parse_input` with the right session options will have the edition properly set without having to also remember to set libsyntax up separately.\n\nr? @rust-lang/compiler", "tree": {"sha": "af59b6ebdf27ceb504a33a2a07349dd7602ba53e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af59b6ebdf27ceb504a33a2a07349dd7602ba53e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeab08e97a86475446164600b0f144738b2bb567", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbcvxLCRBK7hj4Ov3rIwAAdHIIAHHHEb5vUrTutwWHhPmHdpq9\nL9qFbCWquoIKGbC0xOcDrLjIhkbxxPqNJ0rWnPIrG1BEbQnnK9GPqN7DW/v011AR\njuGZY/JPZY3WWgqoC5pBVoLuQ1efJXBblJNjYKL5DEo3Z0w3K7twVCKXBMMjvpdl\nfAV5SRitnS7W2j/U/bjnYLvjngJHyQ8Dm/x4LZEW4Yinw7gzMEQxUY2vvOULFEbl\n2PYsFo/WCydiJLY+OYGKW46mHzR6qgoj3wrc/BWob7Fv+CwYueaSgYXuS01ZXpKa\nMKGsAKCdKOG5qA/MD7lvoYKJc7jCu//8rOOazGqFgZ8mk7A1iwrO2BDNjLtnxWQ=\n=kTn3\n-----END PGP SIGNATURE-----\n", "payload": "tree af59b6ebdf27ceb504a33a2a07349dd7602ba53e\nparent 700c5e89f22f4015e601984344c09cc6a3129caf\nparent 0511b01506434b7ee070ebf4ec6c5aacb406ab6a\nauthor kennytm <kennytm@gmail.com> 1534262347 +0800\ncommitter GitHub <noreply@github.com> 1534262347 +0800\n\nRollup merge of #53226 - QuietMisdreavus:editions-for-all, r=estebank\n\ndriver: set the syntax edition in phase 1\n\nFixes https://github.com/rust-lang/rust/issues/53203\n\nIt seems the way libsyntax handles the desired edition is to use a global, set via `syntax_pos::hygiene::set_default_edition`. Right now, this is set in the driver in `run_compiler`, which is the entry point for running the compiler all the way through to emitting files. Since rustdoc doesn't use this function, it wasn't properly setting this global. (When initially setting up editions in rustdoc, i'd assumed that setting `sessopts.edition` would have done this... `>_>`) This was \"fixed\" for doctests in https://github.com/rust-lang/rust/pull/52385, but rather than patching in a call to `set_default_edition` in all the places rustdoc sets up the compiler, i've instead moved the call in the driver to be farther in the process. This means that any use of `phase_1_parse_input` with the right session options will have the edition properly set without having to also remember to set libsyntax up separately.\n\nr? @rust-lang/compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeab08e97a86475446164600b0f144738b2bb567", "html_url": "https://github.com/rust-lang/rust/commit/eeab08e97a86475446164600b0f144738b2bb567", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeab08e97a86475446164600b0f144738b2bb567/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "700c5e89f22f4015e601984344c09cc6a3129caf", "url": "https://api.github.com/repos/rust-lang/rust/commits/700c5e89f22f4015e601984344c09cc6a3129caf", "html_url": "https://github.com/rust-lang/rust/commit/700c5e89f22f4015e601984344c09cc6a3129caf"}, {"sha": "0511b01506434b7ee070ebf4ec6c5aacb406ab6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0511b01506434b7ee070ebf4ec6c5aacb406ab6a", "html_url": "https://github.com/rust-lang/rust/commit/0511b01506434b7ee070ebf4ec6c5aacb406ab6a"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "e5042a4a02076634d1d6f3d5662541a93613f50c", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eeab08e97a86475446164600b0f144738b2bb567/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeab08e97a86475446164600b0f144738b2bb567/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=eeab08e97a86475446164600b0f144738b2bb567", "patch": "@@ -57,7 +57,7 @@ use syntax::ext::base::ExtCtxt;\n use syntax::fold::Folder;\n use syntax::parse::{self, PResult};\n use syntax::util::node_count::NodeCounter;\n-use syntax_pos::FileName;\n+use syntax_pos::{FileName, hygiene};\n use syntax_ext;\n \n use derive_registrar;\n@@ -670,6 +670,7 @@ pub fn phase_1_parse_input<'a>(\n ) -> PResult<'a, ast::Crate> {\n     sess.diagnostic()\n         .set_continue_after_error(control.continue_parse_after_error);\n+    hygiene::set_default_edition(sess.edition());\n \n     if sess.profile_queries() {\n         profile::begin(sess);"}, {"sha": "81267f7293c43a17087c1d4adcf47c1d02e6ad97", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eeab08e97a86475446164600b0f144738b2bb567/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeab08e97a86475446164600b0f144738b2bb567/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=eeab08e97a86475446164600b0f144738b2bb567", "patch": "@@ -110,7 +110,7 @@ use syntax::ast;\n use syntax::codemap::{CodeMap, FileLoader, RealFileLoader};\n use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n use syntax::parse::{self, PResult};\n-use syntax_pos::{hygiene, DUMMY_SP, MultiSpan, FileName};\n+use syntax_pos::{DUMMY_SP, MultiSpan, FileName};\n \n #[cfg(test)]\n mod test;\n@@ -478,7 +478,6 @@ pub fn run_compiler<'a>(args: &[String],\n         };\n \n         let (sopts, cfg) = config::build_session_options_and_crate_config(&matches);\n-        hygiene::set_default_edition(sopts.edition);\n \n         driver::spawn_thread_pool(sopts, |sopts| {\n             run_compiler_with_pool(matches, sopts, cfg, callbacks, file_loader, emitter_dest)"}, {"sha": "569815c833adaa533fad4dfee5143cbd959a01e0", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eeab08e97a86475446164600b0f144738b2bb567/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeab08e97a86475446164600b0f144738b2bb567/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=eeab08e97a86475446164600b0f144738b2bb567", "patch": "@@ -37,7 +37,7 @@ use syntax::codemap::CodeMap;\n use syntax::edition::Edition;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::with_globals;\n-use syntax_pos::{BytePos, DUMMY_SP, Pos, Span, FileName, hygiene};\n+use syntax_pos::{BytePos, DUMMY_SP, Pos, Span, FileName};\n use errors;\n use errors::emitter::ColorConfig;\n \n@@ -562,7 +562,6 @@ impl Collector {\n                     rustc_driver::in_named_rustc_thread(name, move || with_globals(move || {\n                         io::set_panic(panic);\n                         io::set_print(print);\n-                        hygiene::set_default_edition(edition);\n                         run_test(&test,\n                                  &cratename,\n                                  &filename,"}, {"sha": "21ad5159946fd701d89b9e30617664b95b92b0fb", "filename": "src/test/rustdoc/async-fn.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eeab08e97a86475446164600b0f144738b2bb567/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeab08e97a86475446164600b0f144738b2bb567/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=eeab08e97a86475446164600b0f144738b2bb567", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+// compile-flags:-Z unstable-options\n+\n+// FIXME: once `--edition` is stable in rustdoc, remove that `compile-flags` directive\n+\n+#![feature(rust_2018_preview, async_await, futures_api)]\n+\n+// @has async_fn/struct.S.html\n+// @has - '//code' 'pub async fn f()'\n+pub struct S;\n+\n+impl S {\n+    pub async fn f() {}\n+}"}]}