{"sha": "e549f0b3d61c5bd56a469325e5324a829e5bd2d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NDlmMGIzZDYxYzViZDU2YTQ2OTMyNWU1MzI0YTgyOWU1YmQyZDI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-29T08:58:28Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:13Z"}, "message": "Simplify const SIMD shuffle in trans", "tree": {"sha": "22db80ee60db17a758a57bace76992c649ac074e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22db80ee60db17a758a57bace76992c649ac074e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e549f0b3d61c5bd56a469325e5324a829e5bd2d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53UACgkQpp+NIls6\n19mW6w//S2cBOrh1xIJ49j6R9ttf9mZ4uYHvM5HYulv8sZ65Ui4SH1Jd36aCBG/F\nAVnk8JSgfU9ckhPfKJ5+vfvKDIRbY0r5Ig5GRKcjl7TQpRYuWaYfIb+pQWTmoXvs\nAa55/hKfnHpqbvcUR22FERcGghAro1AXciCbd4htZKXzB6bP1lqbH2iGfbsfa7c8\n364pYX+MVIx3wZ0ILYfbeOw7jY/XSulbQPtoFz6+1PdvuPpekFa9GE2v3N8Tbn3q\nhk9is5vj8uCEVaU+EmAghgwQLNzHxb7R4FMpwSR9DLqYzEuYEx732nDBrlWfQWLW\nEOUNr/sy1MWq+xGL7lBoHOdmNDnsf+GD+knlCEA3ZBEObwdoLygUbiqB2cxAgiGo\nVmIIgIcmrXaadarjo9nt+mHqGnmEtOevJf9wz5cvgjzj8xDjIKB04AC6G65vcDMu\nbhQfPtF4etlg43pa9bL5hDXDlYWM7ghzgYgdbNQolIK84gAcVjvJiCY4oY0jQIpw\n9DguDXSa086I4Gp71ymz1eFqfzUK4PYl7Dp+RXJL+7877A/tml6UGDXACUl6Kb5h\nk8s7Sf7xxVGhVWQ5chKItp/icFCvJKyC06j0SMVi+WS4EiJQZYBgyrLXvtYtXCwX\nZ+qbzloZw2YPwVK051Z2b7fGn1ZRn8v3r9rowygUrZLCXOH9eLc=\n=V1xd\n-----END PGP SIGNATURE-----", "payload": "tree 22db80ee60db17a758a57bace76992c649ac074e\nparent 00c95b29bce5a6aa0acb10f78418760d5249394a\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517216308 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494453 +0100\n\nSimplify const SIMD shuffle in trans\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e549f0b3d61c5bd56a469325e5324a829e5bd2d2", "html_url": "https://github.com/rust-lang/rust/commit/e549f0b3d61c5bd56a469325e5324a829e5bd2d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e549f0b3d61c5bd56a469325e5324a829e5bd2d2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00c95b29bce5a6aa0acb10f78418760d5249394a", "url": "https://api.github.com/repos/rust-lang/rust/commits/00c95b29bce5a6aa0acb10f78418760d5249394a", "html_url": "https://github.com/rust-lang/rust/commit/00c95b29bce5a6aa0acb10f78418760d5249394a"}], "stats": {"total": 91, "additions": 30, "deletions": 61}, "files": [{"sha": "6aa8b7e5449fd1e6037d0e0ef7cfa2b41ee762df", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 30, "deletions": 61, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/e549f0b3d61c5bd56a469325e5324a829e5bd2d2/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e549f0b3d61c5bd56a469325e5324a829e5bd2d2/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=e549f0b3d61c5bd56a469325e5324a829e5bd2d2", "patch": "@@ -191,70 +191,39 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n         bx: &Builder<'a, 'tcx>,\n         constant: &mir::Constant<'tcx>,\n     ) -> (ValueRef, Ty<'tcx>) {\n-        let layout = bx.cx.layout_of(constant.ty);\n         self.mir_constant_to_miri_value(bx, constant)\n             .and_then(|c| {\n-                let llval = match c {\n-                    MiriValue::ByVal(val) => {\n-                        let scalar = match layout.abi {\n-                            layout::Abi::Scalar(ref x) => x,\n-                            _ => bug!(\"from_const: invalid ByVal layout: {:#?}\", layout)\n-                        };\n-                        primval_to_llvm(bx.cx, val, scalar, layout.immediate_llvm_type(bx.cx))\n-                    },\n-                    MiriValue::ByValPair(a_val, b_val) => {\n-                        let (a_scalar, b_scalar) = match layout.abi {\n-                            layout::Abi::ScalarPair(ref a, ref b) => (a, b),\n-                            _ => bug!(\"from_const: invalid ByValPair layout: {:#?}\", layout)\n-                        };\n-                        let a_llval = primval_to_llvm(\n-                            bx.cx,\n-                            a_val,\n-                            a_scalar,\n-                            layout.scalar_pair_element_llvm_type(bx.cx, 0),\n-                        );\n-                        let b_llval = primval_to_llvm(\n-                            bx.cx,\n-                            b_val,\n-                            b_scalar,\n-                            layout.scalar_pair_element_llvm_type(bx.cx, 1),\n-                        );\n-                        C_struct(bx.cx, &[a_llval, b_llval], false)\n-                    },\n-                    MiriValue::ByRef(..) => {\n-                        let field_ty = constant.ty.builtin_index().unwrap();\n-                        let fields = match constant.ty.sty {\n-                            ty::TyArray(_, n) => n.val.unwrap_u64(),\n-                            ref other => bug!(\"invalid simd shuffle type: {}\", other),\n-                        };\n-                        let values: Result<Vec<ValueRef>, _> = (0..fields).map(|field| {\n-                            let field = const_val_field(\n-                                bx.tcx(),\n-                                ty::ParamEnv::empty(traits::Reveal::All),\n-                                self.instance,\n-                                None,\n-                                mir::Field::new(field as usize),\n-                                c,\n-                                constant.ty,\n-                            )?;\n-                            match field.val {\n-                                ConstVal::Value(MiriValue::ByVal(prim)) => {\n-                                    let layout = bx.cx.layout_of(field_ty);\n-                                    let scalar = match layout.abi {\n-                                        layout::Abi::Scalar(ref x) => x,\n-                                        _ => bug!(\"from_const: invalid ByVal layout: {:#?}\", layout)\n-                                    };\n-                                    Ok(primval_to_llvm(\n-                                        bx.cx, prim, scalar,\n-                                        layout.immediate_llvm_type(bx.cx),\n-                                    ))\n-                                },\n-                                other => bug!(\"simd shuffle field {:?}, {}\", other, constant.ty),\n-                            }\n-                        }).collect();\n-                        C_struct(bx.cx, &values?, false)\n-                    },\n+                let field_ty = constant.ty.builtin_index().unwrap();\n+                let fields = match constant.ty.sty {\n+                    ty::TyArray(_, n) => n.val.unwrap_u64(),\n+                    ref other => bug!(\"invalid simd shuffle type: {}\", other),\n                 };\n+                let values: Result<Vec<ValueRef>, _> = (0..fields).map(|field| {\n+                    let field = const_val_field(\n+                        bx.tcx(),\n+                        ty::ParamEnv::empty(traits::Reveal::All),\n+                        self.instance,\n+                        None,\n+                        mir::Field::new(field as usize),\n+                        c,\n+                        constant.ty,\n+                    )?;\n+                    match field.val {\n+                        ConstVal::Value(MiriValue::ByVal(prim)) => {\n+                            let layout = bx.cx.layout_of(field_ty);\n+                            let scalar = match layout.abi {\n+                                layout::Abi::Scalar(ref x) => x,\n+                                _ => bug!(\"from_const: invalid ByVal layout: {:#?}\", layout)\n+                            };\n+                            Ok(primval_to_llvm(\n+                                bx.cx, prim, scalar,\n+                                layout.immediate_llvm_type(bx.cx),\n+                            ))\n+                        },\n+                        other => bug!(\"simd shuffle field {:?}, {}\", other, constant.ty),\n+                    }\n+                }).collect();\n+                let llval = C_struct(bx.cx, &values?, false);\n                 Ok((llval, constant.ty))\n             })\n             .unwrap_or_else(|e| {"}]}