{"sha": "95186201724a087bacafc74317722314f203cfdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MTg2MjAxNzI0YTA4N2JhY2FmYzc0MzE3NzIyMzE0ZjIwM2NmZGM=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-22T04:00:55Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-14T04:37:48Z"}, "message": "Use `ResultsCursor` for `elaborate_drops`\n\nThe old code hard-coded the transfer function for the initialized places\nanalyses.", "tree": {"sha": "0415ed548a892b0c99a5ddfc5826b77de4b745ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0415ed548a892b0c99a5ddfc5826b77de4b745ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95186201724a087bacafc74317722314f203cfdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95186201724a087bacafc74317722314f203cfdc", "html_url": "https://github.com/rust-lang/rust/commit/95186201724a087bacafc74317722314f203cfdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95186201724a087bacafc74317722314f203cfdc/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ed25f069768c046464e68fd382c867ddb04a1e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed25f069768c046464e68fd382c867ddb04a1e3", "html_url": "https://github.com/rust-lang/rust/commit/2ed25f069768c046464e68fd382c867ddb04a1e3"}], "stats": {"total": 114, "additions": 33, "deletions": 81}, "files": [{"sha": "28a50547b190cd96c7e6967d9f1569e5e98fb6e3", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 33, "deletions": 81, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/95186201724a087bacafc74317722314f203cfdc/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95186201724a087bacafc74317722314f203cfdc/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=95186201724a087bacafc74317722314f203cfdc", "patch": "@@ -1,8 +1,8 @@\n use crate::dataflow;\n-use crate::dataflow::generic::{Analysis, Results};\n+use crate::dataflow::generic::{Analysis, ResultsCursor};\n use crate::dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n+use crate::dataflow::on_lookup_result_bits;\n use crate::dataflow::MoveDataParamEnv;\n-use crate::dataflow::{drop_flag_effects_for_location, on_lookup_result_bits};\n use crate::dataflow::{on_all_children_bits, on_all_drop_children_bits};\n use crate::dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n use crate::transform::{MirPass, MirSource};\n@@ -41,22 +41,23 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n             let env = MoveDataParamEnv { move_data, param_env };\n             let dead_unwinds = find_dead_unwinds(tcx, body, def_id, &env);\n \n-            let flow_inits = MaybeInitializedPlaces::new(tcx, body, &env)\n+            let inits = MaybeInitializedPlaces::new(tcx, body, &env)\n                 .into_engine(tcx, body, def_id)\n                 .dead_unwinds(&dead_unwinds)\n-                .iterate_to_fixpoint();\n+                .iterate_to_fixpoint()\n+                .into_results_cursor(body);\n \n-            let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &env)\n+            let uninits = MaybeUninitializedPlaces::new(tcx, body, &env)\n                 .into_engine(tcx, body, def_id)\n                 .dead_unwinds(&dead_unwinds)\n-                .iterate_to_fixpoint();\n+                .iterate_to_fixpoint()\n+                .into_results_cursor(body);\n \n             ElaborateDropsCtxt {\n                 tcx,\n                 body,\n                 env: &env,\n-                flow_inits,\n-                flow_uninits,\n+                init_data: InitializationData { inits, uninits },\n                 drop_flags: Default::default(),\n                 patch: MirPatch::new(body),\n             }\n@@ -79,25 +80,18 @@ fn find_dead_unwinds<'tcx>(\n     // We only need to do this pass once, because unwind edges can only\n     // reach cleanup blocks, which can't have unwind edges themselves.\n     let mut dead_unwinds = BitSet::new_empty(body.basic_blocks().len());\n-    let flow_inits = MaybeInitializedPlaces::new(tcx, body, &env)\n+    let mut flow_inits = MaybeInitializedPlaces::new(tcx, body, &env)\n         .into_engine(tcx, body, def_id)\n-        .iterate_to_fixpoint();\n+        .iterate_to_fixpoint()\n+        .into_results_cursor(body);\n     for (bb, bb_data) in body.basic_blocks().iter_enumerated() {\n         let location = match bb_data.terminator().kind {\n             TerminatorKind::Drop { ref location, unwind: Some(_), .. }\n             | TerminatorKind::DropAndReplace { ref location, unwind: Some(_), .. } => location,\n             _ => continue,\n         };\n \n-        let mut init_data = InitializationData {\n-            live: flow_inits.entry_set_for_block(bb).clone(),\n-            dead: BitSet::new_empty(env.move_data.move_paths.len()),\n-        };\n-        debug!(\"find_dead_unwinds @ {:?}: {:?}; init_data={:?}\", bb, bb_data, init_data.live);\n-        for stmt in 0..bb_data.statements.len() {\n-            let loc = Location { block: bb, statement_index: stmt };\n-            init_data.apply_location(tcx, body, env, loc);\n-        }\n+        debug!(\"find_dead_unwinds @ {:?}: {:?}; init_data={:?}\", bb, bb_data, flow_inits.get());\n \n         let path = match env.move_data.rev_lookup.find(location.as_ref()) {\n             LookupResult::Exact(e) => e,\n@@ -109,10 +103,10 @@ fn find_dead_unwinds<'tcx>(\n \n         debug!(\"find_dead_unwinds @ {:?}: path({:?})={:?}\", bb, location, path);\n \n+        flow_inits.seek_after(body.terminator_loc(bb));\n         let mut maybe_live = false;\n         on_all_drop_children_bits(tcx, body, &env, path, |child| {\n-            let (child_maybe_live, _) = init_data.state(child);\n-            maybe_live |= child_maybe_live;\n+            maybe_live |= flow_inits.contains(child);\n         });\n \n         debug!(\"find_dead_unwinds @ {:?}: maybe_live={}\", bb, maybe_live);\n@@ -124,41 +118,23 @@ fn find_dead_unwinds<'tcx>(\n     dead_unwinds\n }\n \n-struct InitializationData {\n-    live: BitSet<MovePathIndex>,\n-    dead: BitSet<MovePathIndex>,\n+struct InitializationData<'mir, 'tcx> {\n+    inits: ResultsCursor<'mir, 'tcx, MaybeInitializedPlaces<'mir, 'tcx>>,\n+    uninits: ResultsCursor<'mir, 'tcx, MaybeUninitializedPlaces<'mir, 'tcx>>,\n }\n \n-impl InitializationData {\n-    fn apply_location<'tcx>(\n-        &mut self,\n-        tcx: TyCtxt<'tcx>,\n-        body: &Body<'tcx>,\n-        env: &MoveDataParamEnv<'tcx>,\n-        loc: Location,\n-    ) {\n-        drop_flag_effects_for_location(tcx, body, env, loc, |path, df| {\n-            debug!(\"at location {:?}: setting {:?} to {:?}\", loc, path, df);\n-            match df {\n-                DropFlagState::Present => {\n-                    self.live.insert(path);\n-                    self.dead.remove(path);\n-                }\n-                DropFlagState::Absent => {\n-                    self.dead.insert(path);\n-                    self.live.remove(path);\n-                }\n-            }\n-        });\n+impl InitializationData<'_, '_> {\n+    fn seek_after(&mut self, loc: Location) {\n+        self.inits.seek_after(loc);\n+        self.uninits.seek_after(loc);\n     }\n \n     fn state(&self, path: MovePathIndex) -> (bool, bool) {\n-        (self.live.contains(path), self.dead.contains(path))\n+        (self.inits.contains(path), self.uninits.contains(path))\n     }\n }\n \n struct Elaborator<'a, 'b, 'tcx> {\n-    init_data: &'a InitializationData,\n     ctxt: &'a mut ElaborateDropsCtxt<'b, 'tcx>,\n }\n \n@@ -189,13 +165,13 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n \n     fn drop_style(&self, path: Self::Path, mode: DropFlagMode) -> DropStyle {\n         let ((maybe_live, maybe_dead), multipart) = match mode {\n-            DropFlagMode::Shallow => (self.init_data.state(path), false),\n+            DropFlagMode::Shallow => (self.ctxt.init_data.state(path), false),\n             DropFlagMode::Deep => {\n                 let mut some_live = false;\n                 let mut some_dead = false;\n                 let mut children_count = 0;\n                 on_all_drop_children_bits(self.tcx(), self.body(), self.ctxt.env, path, |child| {\n-                    let (live, dead) = self.init_data.state(child);\n+                    let (live, dead) = self.ctxt.init_data.state(child);\n                     debug!(\"elaborate_drop: state({:?}) = {:?}\", child, (live, dead));\n                     some_live |= live;\n                     some_dead |= dead;\n@@ -269,8 +245,7 @@ struct ElaborateDropsCtxt<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n     env: &'a MoveDataParamEnv<'tcx>,\n-    flow_inits: Results<'tcx, MaybeInitializedPlaces<'a, 'tcx>>,\n-    flow_uninits: Results<'tcx, MaybeUninitializedPlaces<'a, 'tcx>>,\n+    init_data: InitializationData<'a, 'tcx>,\n     drop_flags: FxHashMap<MovePathIndex, Local>,\n     patch: MirPatch<'tcx>,\n }\n@@ -284,25 +259,6 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         self.env.param_env\n     }\n \n-    // FIXME(ecstaticmorse): This duplicates `dataflow::ResultsCursor` but hardcodes the transfer\n-    // function for `Maybe{Un,}InitializedPlaces` directly. It should be replaced by a a pair of\n-    // `ResultsCursor`s.\n-    fn initialization_data_at(&self, loc: Location) -> InitializationData {\n-        let mut data = InitializationData {\n-            live: self.flow_inits.entry_set_for_block(loc.block).to_owned(),\n-            dead: self.flow_uninits.entry_set_for_block(loc.block).to_owned(),\n-        };\n-        for stmt in 0..loc.statement_index {\n-            data.apply_location(\n-                self.tcx,\n-                self.body,\n-                self.env,\n-                Location { block: loc.block, statement_index: stmt },\n-            );\n-        }\n-        data\n-    }\n-\n     fn create_drop_flag(&mut self, index: MovePathIndex, span: Span) {\n         let tcx = self.tcx;\n         let patch = &mut self.patch;\n@@ -338,10 +294,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 _ => continue,\n             };\n \n-            let init_data = self.initialization_data_at(Location {\n-                block: bb,\n-                statement_index: data.statements.len(),\n-            });\n+            self.init_data.seek_after(self.body.terminator_loc(bb));\n \n             let path = self.move_data().rev_lookup.find(location.as_ref());\n             debug!(\"collect_drop_flags: {:?}, place {:?} ({:?})\", bb, location, path);\n@@ -350,7 +303,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 LookupResult::Exact(e) => e,\n                 LookupResult::Parent(None) => continue,\n                 LookupResult::Parent(Some(parent)) => {\n-                    let (_maybe_live, maybe_dead) = init_data.state(parent);\n+                    let (_maybe_live, maybe_dead) = self.init_data.state(parent);\n                     if maybe_dead {\n                         span_bug!(\n                             terminator.source_info.span,\n@@ -365,7 +318,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             };\n \n             on_all_drop_children_bits(self.tcx, self.body, self.env, path, |child| {\n-                let (maybe_live, maybe_dead) = init_data.state(child);\n+                let (maybe_live, maybe_dead) = self.init_data.state(child);\n                 debug!(\n                     \"collect_drop_flags: collecting {:?} from {:?}@{:?} - {:?}\",\n                     child,\n@@ -388,10 +341,10 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             let resume_block = self.patch.resume_block();\n             match terminator.kind {\n                 TerminatorKind::Drop { ref location, target, unwind } => {\n-                    let init_data = self.initialization_data_at(loc);\n+                    self.init_data.seek_after(loc);\n                     match self.move_data().rev_lookup.find(location.as_ref()) {\n                         LookupResult::Exact(path) => elaborate_drop(\n-                            &mut Elaborator { init_data: &init_data, ctxt: self },\n+                            &mut Elaborator { ctxt: self },\n                             terminator.source_info,\n                             location,\n                             path,\n@@ -471,10 +424,9 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         match self.move_data().rev_lookup.find(location.as_ref()) {\n             LookupResult::Exact(path) => {\n                 debug!(\"elaborate_drop_and_replace({:?}) - tracked {:?}\", terminator, path);\n-                let init_data = self.initialization_data_at(loc);\n-\n+                self.init_data.seek_after(loc);\n                 elaborate_drop(\n-                    &mut Elaborator { init_data: &init_data, ctxt: self },\n+                    &mut Elaborator { ctxt: self },\n                     terminator.source_info,\n                     location,\n                     path,"}]}