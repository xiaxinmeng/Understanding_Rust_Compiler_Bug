{"sha": "4f82dd83dfd6f64708b4f0d572c567dfeb7b2092", "node_id": "C_kwDOAAsO6NoAKDRmODJkZDgzZGZkNmY2NDcwOGI0ZjBkNTcyYzU2N2RmZWI3YjIwOTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-12T18:17:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-12T18:17:18Z"}, "message": "Auto merge of #7948 - 5225225:castlosslessbool, r=llogiq\n\nLint for bool to integer casts in `cast_lossless`\n\nThe lint description says\n\n> Checks for casts between *numerical* types that may be replaced by safe conversion functions.\n\nWhich is strictly speaking being violated here, but it seems within the spirit of the lint. I think it is still a useful lint to have, and having a different lint for just this feels excessive. Thoughts?\n\nFixes #7947\n\nchangelog: Lint for bool to integer casts in [`cast_lossless`]", "tree": {"sha": "ee8fcd725965b4b674500aefbe2eaea058fe2ec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee8fcd725965b4b674500aefbe2eaea058fe2ec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092", "html_url": "https://github.com/rust-lang/rust/commit/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "610b381966fd984e801272ab790eb4194b1c93de", "url": "https://api.github.com/repos/rust-lang/rust/commits/610b381966fd984e801272ab790eb4194b1c93de", "html_url": "https://github.com/rust-lang/rust/commit/610b381966fd984e801272ab790eb4194b1c93de"}, {"sha": "d4c8cb63a474c2365664a68e35153adef3cdd9b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c8cb63a474c2365664a68e35153adef3cdd9b9", "html_url": "https://github.com/rust-lang/rust/commit/d4c8cb63a474c2365664a68e35153adef3cdd9b9"}], "stats": {"total": 242, "additions": 221, "deletions": 21}, "files": [{"sha": "d0b8c52a36a92e9891c33dd1bee45e7ef6fab7b5", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=4f82dd83dfd6f64708b4f0d572c567dfeb7b2092", "patch": "@@ -73,7 +73,7 @@ impl<'tcx> LateLintPass<'tcx> for BoolAssertComparison {\n             if let Some(span) = is_direct_expn_of(expr.span, mac) {\n                 if let Some(args) = higher::extract_assert_macro_args(expr) {\n                     if let [a, b, ..] = args[..] {\n-                        let nb_bool_args = is_bool_lit(a) as usize + is_bool_lit(b) as usize;\n+                        let nb_bool_args = usize::from(is_bool_lit(a)) + usize::from(is_bool_lit(b));\n \n                         if nb_bool_args != 1 {\n                             // If there are two boolean arguments, we definitely don't understand"}, {"sha": "4a95bed1148dc4f89df5069527f7d6c0d4b3f7c4", "filename": "clippy_lints/src/casts/cast_lossless.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs?ref=4f82dd83dfd6f64708b4f0d572c567dfeb7b2092", "patch": "@@ -1,16 +1,24 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::in_constant;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::is_isize_or_usize;\n+use clippy_utils::{in_constant, meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n+use rustc_semver::RustcVersion;\n \n use super::{utils, CAST_LOSSLESS};\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_op: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n-    if !should_lint(cx, expr, cast_from, cast_to) {\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    cast_op: &Expr<'_>,\n+    cast_from: Ty<'_>,\n+    cast_to: Ty<'_>,\n+    msrv: &Option<RustcVersion>,\n+) {\n+    if !should_lint(cx, expr, cast_from, cast_to, msrv) {\n         return;\n     }\n \n@@ -32,21 +40,36 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_op: &Expr<'_>, c\n         },\n     );\n \n+    let message = if cast_from.is_bool() {\n+        format!(\n+            \"casting `{0:}` to `{1:}` is more cleanly stated with `{1:}::from(_)`\",\n+            cast_from, cast_to\n+        )\n+    } else {\n+        format!(\n+            \"casting `{}` to `{}` may become silently lossy if you later change the type\",\n+            cast_from, cast_to\n+        )\n+    };\n+\n     span_lint_and_sugg(\n         cx,\n         CAST_LOSSLESS,\n         expr.span,\n-        &format!(\n-            \"casting `{}` to `{}` may become silently lossy if you later change the type\",\n-            cast_from, cast_to\n-        ),\n+        &message,\n         \"try\",\n         format!(\"{}::from({})\", cast_to, sugg),\n         applicability,\n     );\n }\n \n-fn should_lint(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) -> bool {\n+fn should_lint(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    cast_from: Ty<'_>,\n+    cast_to: Ty<'_>,\n+    msrv: &Option<RustcVersion>,\n+) -> bool {\n     // Do not suggest using From in consts/statics until it is valid to do so (see #2267).\n     if in_constant(cx, expr.hir_id) {\n         return false;\n@@ -72,7 +95,7 @@ fn should_lint(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to\n             };\n             from_nbits < to_nbits\n         },\n-\n+        (false, true) if matches!(cast_from.kind(), ty::Bool) && meets_msrv(msrv.as_ref(), &msrvs::FROM_BOOL) => true,\n         (_, _) => {\n             matches!(cast_from.kind(), ty::Float(FloatTy::F32)) && matches!(cast_to.kind(), ty::Float(FloatTy::F64))\n         },"}, {"sha": "aee1e50b94a2a549d199daa74d19d7dabbfa0a69", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=4f82dd83dfd6f64708b4f0d572c567dfeb7b2092", "patch": "@@ -439,12 +439,16 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             fn_to_numeric_cast_any::check(cx, expr, cast_expr, cast_from, cast_to);\n             fn_to_numeric_cast::check(cx, expr, cast_expr, cast_from, cast_to);\n             fn_to_numeric_cast_with_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n-            if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {\n-                cast_possible_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n-                cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n-                cast_precision_loss::check(cx, expr, cast_from, cast_to);\n-                cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to);\n-                cast_sign_loss::check(cx, expr, cast_expr, cast_from, cast_to);\n+\n+            if cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {\n+                if cast_from.is_numeric() {\n+                    cast_possible_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n+                    cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n+                    cast_precision_loss::check(cx, expr, cast_from, cast_to);\n+                    cast_sign_loss::check(cx, expr, cast_expr, cast_from, cast_to);\n+                }\n+\n+                cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n             }\n         }\n "}, {"sha": "0cec7d6a5e402aa13a05395c23bf5dd630a5d587", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=4f82dd83dfd6f64708b4f0d572c567dfeb7b2092", "patch": "@@ -28,6 +28,7 @@ msrv_aliases! {\n     1,35,0 { OPTION_COPIED, RANGE_CONTAINS }\n     1,34,0 { TRY_FROM }\n     1,30,0 { ITERATOR_FIND_MAP, TOOL_ATTRIBUTES }\n+    1,28,0 { FROM_BOOL }\n     1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST }\n     1,16,0 { STR_REPEAT }\n }"}, {"sha": "d928317259da0f23b875300b02f3fe3c650b20c1", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=4f82dd83dfd6f64708b4f0d572c567dfeb7b2092", "patch": "@@ -128,7 +128,7 @@ pub fn reindent_multiline(s: Cow<'_, str>, ignore_first: bool, indent: Option<us\n fn reindent_multiline_inner(s: &str, ignore_first: bool, indent: Option<usize>, ch: char) -> String {\n     let x = s\n         .lines()\n-        .skip(ignore_first as usize)\n+        .skip(usize::from(ignore_first))\n         .filter_map(|l| {\n             if l.is_empty() {\n                 None"}, {"sha": "9e2da45c37858297a38a18a163b86993b8ea70e4", "filename": "tests/ui/cast_lossless_bool.fixed", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/tests%2Fui%2Fcast_lossless_bool.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/tests%2Fui%2Fcast_lossless_bool.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_bool.fixed?ref=4f82dd83dfd6f64708b4f0d572c567dfeb7b2092", "patch": "@@ -0,0 +1,42 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+#![warn(clippy::cast_lossless)]\n+\n+fn main() {\n+    // Test clippy::cast_lossless with casts to integer types\n+    let _ = u8::from(true);\n+    let _ = u16::from(true);\n+    let _ = u32::from(true);\n+    let _ = u64::from(true);\n+    let _ = u128::from(true);\n+    let _ = usize::from(true);\n+\n+    let _ = i8::from(true);\n+    let _ = i16::from(true);\n+    let _ = i32::from(true);\n+    let _ = i64::from(true);\n+    let _ = i128::from(true);\n+    let _ = isize::from(true);\n+\n+    // Test with an expression wrapped in parens\n+    let _ = u16::from(true | false);\n+}\n+\n+// The lint would suggest using `u32::from(input)` here but the `XX::from` function is not const,\n+// so we skip the lint if the expression is in a const fn.\n+// See #3656\n+const fn abc(input: bool) -> u32 {\n+    input as u32\n+}\n+\n+// Same as the above issue. We can't suggest `::from` in const fns in impls\n+mod cast_lossless_in_impl {\n+    struct A;\n+\n+    impl A {\n+        pub const fn convert(x: bool) -> u64 {\n+            x as u64\n+        }\n+    }\n+}"}, {"sha": "b6f6c59a01f951905bf6195765a221d4c884b8a4", "filename": "tests/ui/cast_lossless_bool.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/tests%2Fui%2Fcast_lossless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/tests%2Fui%2Fcast_lossless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_bool.rs?ref=4f82dd83dfd6f64708b4f0d572c567dfeb7b2092", "patch": "@@ -0,0 +1,42 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+#![warn(clippy::cast_lossless)]\n+\n+fn main() {\n+    // Test clippy::cast_lossless with casts to integer types\n+    let _ = true as u8;\n+    let _ = true as u16;\n+    let _ = true as u32;\n+    let _ = true as u64;\n+    let _ = true as u128;\n+    let _ = true as usize;\n+\n+    let _ = true as i8;\n+    let _ = true as i16;\n+    let _ = true as i32;\n+    let _ = true as i64;\n+    let _ = true as i128;\n+    let _ = true as isize;\n+\n+    // Test with an expression wrapped in parens\n+    let _ = (true | false) as u16;\n+}\n+\n+// The lint would suggest using `u32::from(input)` here but the `XX::from` function is not const,\n+// so we skip the lint if the expression is in a const fn.\n+// See #3656\n+const fn abc(input: bool) -> u32 {\n+    input as u32\n+}\n+\n+// Same as the above issue. We can't suggest `::from` in const fns in impls\n+mod cast_lossless_in_impl {\n+    struct A;\n+\n+    impl A {\n+        pub const fn convert(x: bool) -> u64 {\n+            x as u64\n+        }\n+    }\n+}"}, {"sha": "6b148336011d5924f42311a47507a9ba08635f37", "filename": "tests/ui/cast_lossless_bool.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/tests%2Fui%2Fcast_lossless_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/tests%2Fui%2Fcast_lossless_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_bool.stderr?ref=4f82dd83dfd6f64708b4f0d572c567dfeb7b2092", "patch": "@@ -0,0 +1,82 @@\n+error: casting `bool` to `u8` is more cleanly stated with `u8::from(_)`\n+  --> $DIR/cast_lossless_bool.rs:8:13\n+   |\n+LL |     let _ = true as u8;\n+   |             ^^^^^^^^^^ help: try: `u8::from(true)`\n+   |\n+   = note: `-D clippy::cast-lossless` implied by `-D warnings`\n+\n+error: casting `bool` to `u16` is more cleanly stated with `u16::from(_)`\n+  --> $DIR/cast_lossless_bool.rs:9:13\n+   |\n+LL |     let _ = true as u16;\n+   |             ^^^^^^^^^^^ help: try: `u16::from(true)`\n+\n+error: casting `bool` to `u32` is more cleanly stated with `u32::from(_)`\n+  --> $DIR/cast_lossless_bool.rs:10:13\n+   |\n+LL |     let _ = true as u32;\n+   |             ^^^^^^^^^^^ help: try: `u32::from(true)`\n+\n+error: casting `bool` to `u64` is more cleanly stated with `u64::from(_)`\n+  --> $DIR/cast_lossless_bool.rs:11:13\n+   |\n+LL |     let _ = true as u64;\n+   |             ^^^^^^^^^^^ help: try: `u64::from(true)`\n+\n+error: casting `bool` to `u128` is more cleanly stated with `u128::from(_)`\n+  --> $DIR/cast_lossless_bool.rs:12:13\n+   |\n+LL |     let _ = true as u128;\n+   |             ^^^^^^^^^^^^ help: try: `u128::from(true)`\n+\n+error: casting `bool` to `usize` is more cleanly stated with `usize::from(_)`\n+  --> $DIR/cast_lossless_bool.rs:13:13\n+   |\n+LL |     let _ = true as usize;\n+   |             ^^^^^^^^^^^^^ help: try: `usize::from(true)`\n+\n+error: casting `bool` to `i8` is more cleanly stated with `i8::from(_)`\n+  --> $DIR/cast_lossless_bool.rs:15:13\n+   |\n+LL |     let _ = true as i8;\n+   |             ^^^^^^^^^^ help: try: `i8::from(true)`\n+\n+error: casting `bool` to `i16` is more cleanly stated with `i16::from(_)`\n+  --> $DIR/cast_lossless_bool.rs:16:13\n+   |\n+LL |     let _ = true as i16;\n+   |             ^^^^^^^^^^^ help: try: `i16::from(true)`\n+\n+error: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`\n+  --> $DIR/cast_lossless_bool.rs:17:13\n+   |\n+LL |     let _ = true as i32;\n+   |             ^^^^^^^^^^^ help: try: `i32::from(true)`\n+\n+error: casting `bool` to `i64` is more cleanly stated with `i64::from(_)`\n+  --> $DIR/cast_lossless_bool.rs:18:13\n+   |\n+LL |     let _ = true as i64;\n+   |             ^^^^^^^^^^^ help: try: `i64::from(true)`\n+\n+error: casting `bool` to `i128` is more cleanly stated with `i128::from(_)`\n+  --> $DIR/cast_lossless_bool.rs:19:13\n+   |\n+LL |     let _ = true as i128;\n+   |             ^^^^^^^^^^^^ help: try: `i128::from(true)`\n+\n+error: casting `bool` to `isize` is more cleanly stated with `isize::from(_)`\n+  --> $DIR/cast_lossless_bool.rs:20:13\n+   |\n+LL |     let _ = true as isize;\n+   |             ^^^^^^^^^^^^^ help: try: `isize::from(true)`\n+\n+error: casting `bool` to `u16` is more cleanly stated with `u16::from(_)`\n+  --> $DIR/cast_lossless_bool.rs:23:13\n+   |\n+LL |     let _ = (true | false) as u16;\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::from(true | false)`\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "c5f221220ece7374caeab1c21dc14c35e6b8751e", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=4f82dd83dfd6f64708b4f0d572c567dfeb7b2092", "patch": "@@ -140,6 +140,11 @@ fn unnest_or_patterns() {\n #[cfg_attr(rustfmt, rustfmt_skip)]\n fn deprecated_cfg_attr() {}\n \n+#[warn(clippy::cast_lossless)]\n+fn int_from_bool() -> u8 {\n+    true as u8\n+}\n+\n fn main() {\n     filter_map_next();\n     checked_conversion();\n@@ -156,6 +161,7 @@ fn main() {\n     map_unwrap_or();\n     missing_const_for_fn();\n     unnest_or_patterns();\n+    int_from_bool();\n }\n \n mod just_under_msrv {"}, {"sha": "6b3fdb0844b49e1a0e2dd23dfc6c0fc70dcc4942", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f82dd83dfd6f64708b4f0d572c567dfeb7b2092/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=4f82dd83dfd6f64708b4f0d572c567dfeb7b2092", "patch": "@@ -1,12 +1,12 @@\n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:180:24\n+  --> $DIR/min_rust_version_attr.rs:186:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::manual-strip` implied by `-D warnings`\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:179:9\n+  --> $DIR/min_rust_version_attr.rs:185:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,13 +17,13 @@ LL ~             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:192:24\n+  --> $DIR/min_rust_version_attr.rs:198:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:191:9\n+  --> $DIR/min_rust_version_attr.rs:197:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}