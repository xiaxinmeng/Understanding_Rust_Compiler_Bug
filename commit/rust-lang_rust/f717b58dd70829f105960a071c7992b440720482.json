{"sha": "f717b58dd70829f105960a071c7992b440720482", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MTdiNThkZDcwODI5ZjEwNTk2MGEwNzFjNzk5MmI0NDA3MjA0ODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-04T05:24:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-04T05:24:54Z"}, "message": "Auto merge of #59089 - petrhosek:llvm-unwind, r=petrhosek\n\nSupport using LLVM's libunwind as the unwinder implementation\n\nThis avoids the dependency on host libraries such as libgcc_s which\nmay be undesirable in some deployment environments where these aren't\navailable.", "tree": {"sha": "93d798116dc2a7156982905e6cfcd536a6a0777a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93d798116dc2a7156982905e6cfcd536a6a0777a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f717b58dd70829f105960a071c7992b440720482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f717b58dd70829f105960a071c7992b440720482", "html_url": "https://github.com/rust-lang/rust/commit/f717b58dd70829f105960a071c7992b440720482", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f717b58dd70829f105960a071c7992b440720482/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5dfdc589a1b44f01cb640cd0244372dcbbd6f37", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5dfdc589a1b44f01cb640cd0244372dcbbd6f37", "html_url": "https://github.com/rust-lang/rust/commit/a5dfdc589a1b44f01cb640cd0244372dcbbd6f37"}, {"sha": "86d1678403a46cd30019487dcc21166c1d09a597", "url": "https://api.github.com/repos/rust-lang/rust/commits/86d1678403a46cd30019487dcc21166c1d09a597", "html_url": "https://github.com/rust-lang/rust/commit/86d1678403a46cd30019487dcc21166c1d09a597"}], "stats": {"total": 91, "additions": 89, "deletions": 2}, "files": [{"sha": "4a71884cb086e0dadb4863572ac7439a6310531f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f717b58dd70829f105960a071c7992b440720482/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f717b58dd70829f105960a071c7992b440720482/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f717b58dd70829f105960a071c7992b440720482", "patch": "@@ -3849,6 +3849,7 @@ dependencies = [\n name = \"unwind\"\n version = \"0.0.0\"\n dependencies = [\n+ \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "8b2153cd2e63caa15d3d49c56081f4f755c27683", "filename": "config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f717b58dd70829f105960a071c7992b440720482/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/f717b58dd70829f105960a071c7992b440720482/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=f717b58dd70829f105960a071c7992b440720482", "patch": "@@ -421,6 +421,9 @@\n # development of NLL\n #test-compare-mode = false\n \n+# Use LLVM libunwind as the implementation for Rust's unwinder.\n+#llvm-libunwind = false\n+\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "0c31c41ceda86d808a9e9567397e2a73b776b50a", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f717b58dd70829f105960a071c7992b440720482/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f717b58dd70829f105960a071c7992b440720482/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=f717b58dd70829f105960a071c7992b440720482", "patch": "@@ -48,6 +48,7 @@ pub struct Config {\n     pub exclude: Vec<PathBuf>,\n     pub rustc_error_format: Option<String>,\n     pub test_compare_mode: bool,\n+    pub llvm_libunwind: bool,\n \n     pub run_host_only: bool,\n \n@@ -329,6 +330,7 @@ struct Rust {\n     remap_debuginfo: Option<bool>,\n     jemalloc: Option<bool>,\n     test_compare_mode: Option<bool>,\n+    llvm_libunwind: Option<bool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -548,6 +550,7 @@ impl Config {\n             set(&mut config.rust_rpath, rust.rpath);\n             set(&mut config.jemalloc, rust.jemalloc);\n             set(&mut config.test_compare_mode, rust.test_compare_mode);\n+            set(&mut config.llvm_libunwind, rust.llvm_libunwind);\n             set(&mut config.backtrace, rust.backtrace);\n             set(&mut config.channel, rust.channel.clone());\n             set(&mut config.rust_dist_src, rust.dist_src);"}, {"sha": "ade8afee7c10930942660bdf2cf70814c2cb21e7", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f717b58dd70829f105960a071c7992b440720482/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/f717b58dd70829f105960a071c7992b440720482/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=f717b58dd70829f105960a071c7992b440720482", "patch": "@@ -68,6 +68,8 @@ def v(*args):\n o(\"cxxflags\", \"llvm.cxxflags\", \"build LLVM with these extra compiler flags\")\n o(\"ldflags\", \"llvm.ldflags\", \"build LLVM with these extra linker flags\")\n \n+o(\"llvm-libunwind\", \"rust.llvm_libunwind\", \"use LLVM libunwind\")\n+\n # Optimization and debugging options. These may be overridden by the release\n # channel, etc.\n o(\"optimize\", \"rust.optimize\", \"build optimized rust code\")"}, {"sha": "bcd28e9cf5e700b50c2af547f44d710d0cf25436", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f717b58dd70829f105960a071c7992b440720482/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f717b58dd70829f105960a071c7992b440720482/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=f717b58dd70829f105960a071c7992b440720482", "patch": "@@ -506,6 +506,9 @@ impl Build {\n     fn std_features(&self) -> String {\n         let mut features = \"panic-unwind\".to_string();\n \n+        if self.config.llvm_libunwind {\n+            features.push_str(\" llvm-libunwind\");\n+        }\n         if self.config.backtrace {\n             features.push_str(\" backtrace\");\n         }"}, {"sha": "875483518e8725c9611c471d8dd0e72403ad9c17", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f717b58dd70829f105960a071c7992b440720482/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f717b58dd70829f105960a071c7992b440720482/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=f717b58dd70829f105960a071c7992b440720482", "patch": "@@ -54,6 +54,7 @@ backtrace = [\"backtrace-sys\"]\n panic-unwind = [\"panic_unwind\"]\n profiler = [\"profiler_builtins\"]\n compiler_builtins_c = [\"compiler_builtins/c\"]\n+llvm-libunwind = [\"unwind/llvm-libunwind\"]\n \n # Make panics and failed asserts immediately abort without formatting any message\n panic_immediate_abort = [\"core/panic_immediate_abort\"]"}, {"sha": "4ddc878997ee5c89669086c6ba4ab20000bb4801", "filename": "src/libunwind/Cargo.toml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f717b58dd70829f105960a071c7992b440720482/src%2Flibunwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f717b58dd70829f105960a071c7992b440720482/src%2Flibunwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2FCargo.toml?ref=f717b58dd70829f105960a071c7992b440720482", "patch": "@@ -4,6 +4,9 @@ name = \"unwind\"\n version = \"0.0.0\"\n build = \"build.rs\"\n edition = \"2018\"\n+include = [\n+  '/libunwind/*',\n+]\n \n [lib]\n name = \"unwind\"\n@@ -16,3 +19,9 @@ doc = false\n core = { path = \"../libcore\" }\n libc = { version = \"0.2.43\", features = ['rustc-dep-of-std'], default-features = false }\n compiler_builtins = \"0.1.0\"\n+\n+[build-dependencies]\n+cc = { optional = true, version = \"1.0.1\" }\n+\n+[features]\n+llvm-libunwind = [\"cc\"]"}, {"sha": "f3fda9eaa75f4bddddf4d162a7f20f6e5b325af1", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f717b58dd70829f105960a071c7992b440720482/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f717b58dd70829f105960a071c7992b440720482/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=f717b58dd70829f105960a071c7992b440720482", "patch": "@@ -4,7 +4,13 @@ fn main() {\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n \n-    if target.contains(\"linux\") {\n+    if cfg!(feature = \"llvm-libunwind\") &&\n+        (target.contains(\"linux\") ||\n+         target.contains(\"fuchsia\")) {\n+        // Build the unwinding from libunwind C/C++ source code.\n+        #[cfg(feature = \"llvm-libunwind\")]\n+        llvm_libunwind::compile();\n+    } else if target.contains(\"linux\") {\n         if target.contains(\"musl\") {\n             // musl is handled in lib.rs\n         } else if !target.contains(\"android\") {\n@@ -37,3 +43,62 @@ fn main() {\n         println!(\"cargo:rustc-link-lib=unwind\");\n     }\n }\n+\n+#[cfg(feature = \"llvm-libunwind\")]\n+mod llvm_libunwind {\n+    use std::env;\n+    use std::path::Path;\n+\n+    /// Compile the libunwind C/C++ source code.\n+    pub fn compile() {\n+        let target_env = env::var(\"CARGO_CFG_TARGET_ENV\").unwrap();\n+        let target_vendor = env::var(\"CARGO_CFG_TARGET_VENDOR\").unwrap();\n+        let cfg = &mut cc::Build::new();\n+\n+        cfg.cpp(true);\n+        cfg.cpp_set_stdlib(None);\n+        cfg.warnings(false);\n+\n+        if target_env == \"msvc\" {\n+            // Don't pull in extra libraries on MSVC\n+            cfg.flag(\"/Zl\");\n+            cfg.flag(\"/EHsc\");\n+            cfg.define(\"_CRT_SECURE_NO_WARNINGS\", None);\n+            cfg.define(\"_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS\", None);\n+        } else {\n+            cfg.flag(\"-std=c99\");\n+            cfg.flag(\"-std=c++11\");\n+            cfg.flag(\"-nostdinc++\");\n+            if cfg.is_flag_supported(\"-funwind-tables\").unwrap_or_default() &&\n+               cfg.is_flag_supported(\"-fno-exceptions\").unwrap_or_default() {\n+                cfg.flag(\"-funwind-tables\");\n+                cfg.flag(\"-fno-exceptions\");\n+            }\n+            cfg.flag(\"-fno-rtti\");\n+            cfg.flag(\"-fstrict-aliasing\");\n+        }\n+\n+        let mut unwind_sources = vec![\n+            \"Unwind-EHABI.cpp\",\n+            \"Unwind-seh.cpp\",\n+            \"Unwind-sjlj.c\",\n+            \"UnwindLevel1-gcc-ext.c\",\n+            \"UnwindLevel1.c\",\n+            \"UnwindRegistersRestore.S\",\n+            \"UnwindRegistersSave.S\",\n+            \"libunwind.cpp\",\n+        ];\n+\n+        if target_vendor == \"apple\" {\n+            unwind_sources.push(\"Unwind_AppleExtras.cpp\");\n+        }\n+\n+        let root = Path::new(\"../llvm-project/libunwind\");\n+        cfg.include(root.join(\"include\"));\n+        for src in unwind_sources {\n+            cfg.file(root.join(\"src\").join(src));\n+        }\n+\n+        cfg.compile(\"unwind\");\n+    }\n+}"}, {"sha": "84abffda0e03b03c62bdfc3cfeda1c2cf1f88c85", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=f717b58dd70829f105960a071c7992b440720482", "patch": "@@ -1 +1 @@\n-Subproject commit 1f484cbe0e863e9e215f1b3d7198063444d60873\n+Subproject commit 84abffda0e03b03c62bdfc3cfeda1c2cf1f88c85"}]}