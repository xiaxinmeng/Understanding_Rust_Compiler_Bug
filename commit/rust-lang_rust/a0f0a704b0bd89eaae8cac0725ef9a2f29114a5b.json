{"sha": "a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZjBhNzA0YjBiZDg5ZWFhZThjYWMwNzI1ZWY5YTJmMjkxMTRhNWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-10T08:04:09Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-10T08:35:02Z"}, "message": "core: Clean up comments and exports", "tree": {"sha": "feab05a0e8ff18d263fdff47d32862e4efe28307", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feab05a0e8ff18d263fdff47d32862e4efe28307"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b", "html_url": "https://github.com/rust-lang/rust/commit/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93a082149ac8735013313604637029659da9ea45", "url": "https://api.github.com/repos/rust-lang/rust/commits/93a082149ac8735013313604637029659da9ea45", "html_url": "https://github.com/rust-lang/rust/commit/93a082149ac8735013313604637029659da9ea45"}], "stats": {"total": 173, "additions": 135, "deletions": 38}, "files": [{"sha": "c1ce3c72a30b048b2aed78a1f21a7067d8e4dfc7", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b", "patch": "@@ -1,36 +1,38 @@\n-//\n-// We consider the following specs reasonably normative with respect\n-// to interoperating with the C standard library (libc/msvcrt):\n-//\n-//   - ISO 9899:1990 ('C95', 'ANSI C', 'Standard C'), NA1, 1995.\n-//   - ISO 9899:1999 ('C99' or 'C9x').\n-//   - ISO 9945:1988 / IEEE 1003.1-1988 ('POSIX.1').\n-//   - ISO 9945:2001 / IEEE 1003.1-2001 ('POSIX:2001', 'SUSv3').\n-//   - ISO 9945:2008 / IEEE 1003.1-2008 ('POSIX:2008', 'SUSv4').\n-//\n-// Despite having several names each, these are *reasonably* coherent\n-// point-in-time, list-of-definition sorts of specs. You can get each under a\n-// variety of names but will wind up with the same definition in each case.\n-//\n-// Our interface to these libraries is complicated by the non-universality of\n-// conformance to any of them. About the only thing universally supported is\n-// the first (C95), beyond that definitions quickly become absent on various\n-// platforms.\n-//\n-// We therefore wind up dividing our module-space up (mostly for the sake of\n-// sanity while editing, filling-in-details and eliminating duplication) into\n-// definitions common-to-all (held in modules named c95, c99, posix88, posix01\n-// and posix08) and definitions that appear only on *some* platforms (named\n-// 'extra'). This would be things like significant OSX foundation kit, or\n-// win32 library kernel32.dll, or various fancy glibc, linux or BSD\n-// extensions.\n-//\n-// In addition to the per-platform 'extra' modules, we define a module of\n-// \"common BSD\" libc routines that never quite made it into POSIX but show up\n-// in multiple derived systems. This is the 4.4BSD r2 / 1995 release, the\n-// final one from Berkeley after the lawsuits died down and the CSRG\n-// dissolved.\n-//\n+#[doc = \"\n+Bindings for libc.\n+\n+We consider the following specs reasonably normative with respect\n+to interoperating with the C standard library (libc/msvcrt):\n+\n+* ISO 9899:1990 ('C95', 'ANSI C', 'Standard C'), NA1, 1995.\n+* ISO 9899:1999 ('C99' or 'C9x').\n+* ISO 9945:1988 / IEEE 1003.1-1988 ('POSIX.1').\n+* ISO 9945:2001 / IEEE 1003.1-2001 ('POSIX:2001', 'SUSv3').\n+* ISO 9945:2008 / IEEE 1003.1-2008 ('POSIX:2008', 'SUSv4').\n+\n+Despite having several names each, these are *reasonably* coherent\n+point-in-time, list-of-definition sorts of specs. You can get each under a\n+variety of names but will wind up with the same definition in each case.\n+\n+Our interface to these libraries is complicated by the non-universality of\n+conformance to any of them. About the only thing universally supported is\n+the first (C95), beyond that definitions quickly become absent on various\n+platforms.\n+\n+We therefore wind up dividing our module-space up (mostly for the sake of\n+sanity while editing, filling-in-details and eliminating duplication) into\n+definitions common-to-all (held in modules named c95, c99, posix88, posix01\n+and posix08) and definitions that appear only on *some* platforms (named\n+'extra'). This would be things like significant OSX foundation kit, or\n+win32 library kernel32.dll, or various fancy glibc, linux or BSD\n+extensions.\n+\n+In addition to the per-platform 'extra' modules, we define a module of\n+'common BSD' libc routines that never quite made it into POSIX but show up\n+in multiple derived systems. This is the 4.4BSD r2 / 1995 release, the\n+final one from Berkeley after the lawsuits died down and the CSRG\n+dissolved.\n+\"];\n \n // Initial glob-exports mean that all the contents of all the modules\n // wind up exported, if you're interested in writing platform-specific code."}, {"sha": "8206cdd45f71a2a9ba01d41b59e886c68b0d2061", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b", "patch": "@@ -1,4 +1,13 @@\n-#[doc = \"Unsafe pointer utility functions\"]\n+#[doc = \"Unsafe pointer utility functions\"];\n+\n+export addr_of;\n+export mut_addr_of;\n+export offset;\n+export mut_offset;\n+export null;\n+export memcpy;\n+export memmove;\n+\n \n #[abi = \"rust-intrinsic\"]\n native mod rusti {"}, {"sha": "fc166df7fd4333a90dd9f04a4b41de01ba7628aa", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b", "patch": "@@ -1,4 +1,13 @@\n-#[doc = \"Misc low level stuff\"]\n+#[doc = \"Misc low level stuff\"];\n+\n+export type_desc;\n+export get_type_desc;\n+export last_os_error;\n+export size_of;\n+export align_of;\n+export refcount;\n+export log_str;\n+export set_exit_status;\n \n enum type_desc = {\n     first_param: **ctypes::c_int,"}, {"sha": "50c16a217b10f3527c1969a3913538a77eaa00c2", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b", "patch": "@@ -2,6 +2,77 @@ import option::{some, none};\n import uint::next_power_of_two;\n import ptr::addr_of;\n \n+export init_op;\n+export is_empty;\n+export is_not_empty;\n+export same_length;\n+export reserve;\n+export len;\n+export init_fn;\n+export init_elt;\n+export to_mut;\n+export from_mut;\n+export head;\n+export tail;\n+export tail_n;\n+export init;\n+export last;\n+export last_opt;\n+export slice;\n+export split;\n+export splitn;\n+export rsplit;\n+export rsplitn;\n+export shift;\n+export pop;\n+export push;\n+export grow;\n+export grow_fn;\n+export grow_set;\n+export map;\n+export map2;\n+export filter_map;\n+export filter;\n+export concat;\n+export connect;\n+export foldl;\n+export foldr;\n+export any;\n+export any2;\n+export all;\n+export all2;\n+export contains;\n+export count;\n+export find;\n+export find_from;\n+export rfind;\n+export rfind_from;\n+export position_elt;\n+export position;\n+export position_from;\n+export position_elt;\n+export rposition;\n+export rposition_from;\n+export unzip;\n+export zip;\n+export swap;\n+export reverse;\n+export reversed;\n+export enum_chars;\n+export enum_uints;\n+export iter;\n+export iter2;\n+export iteri;\n+export riter;\n+export riteri;\n+export permute;\n+export windowed;\n+export as_buf;\n+export as_mut_buf;\n+export vec_len;\n+export unsafe;\n+export u8;\n+\n #[abi = \"rust-intrinsic\"]\n native mod rusti {\n     fn vec_len<T>(&&v: [const T]) -> ctypes::size_t;\n@@ -808,6 +879,7 @@ impl vec_len<T> for [T] {\n }\n \n mod unsafe {\n+    // FIXME: This should have crate visibility\n     type vec_repr = {mutable fill: uint, mutable alloc: uint, data: u8};\n \n     #[doc = \""}, {"sha": "56d5f7f052ae7f1d18aafea22290e692d931ebf7", "filename": "src/test/auxiliary/native_lib.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b/src%2Ftest%2Fauxiliary%2Fnative_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b/src%2Ftest%2Fauxiliary%2Fnative_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnative_lib.rs?ref=a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b", "patch": "@@ -0,0 +1,3 @@\n+native mod rustrt {\n+    fn last_os_error() -> str;\n+}\n\\ No newline at end of file"}, {"sha": "6f6e45343136a1a566eb49ad90b9af17c63a0bea", "filename": "src/test/run-pass/invoke-external-native.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b/src%2Ftest%2Frun-pass%2Finvoke-external-native.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b/src%2Ftest%2Frun-pass%2Finvoke-external-native.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finvoke-external-native.rs?ref=a0f0a704b0bd89eaae8cac0725ef9a2f29114a5b", "patch": "@@ -1,10 +1,12 @@\n-use std;\n-import sys;\n+// xfail-fast\n+// aux-build:native_lib.rs\n \n // The purpose of this test is to check that we can\n // successfully (and safely) invoke external, cdecl\n // functions from outside the crate.\n \n+use native_lib;\n+\n fn main() {\n-    let foo = sys::rustrt::last_os_error();\n+    let foo = native_lib::rustrt::last_os_error();\n }"}]}