{"sha": "ceb173d64773736e0c60ba6104912c725f07c2c9", "node_id": "C_kwDOAAsO6NoAKGNlYjE3M2Q2NDc3MzczNmUwYzYwYmE2MTA0OTEyYzcyNWYwN2MyYzk", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-05-29T11:03:45Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-06-06T18:15:59Z"}, "message": "Move logic out of machine.rs", "tree": {"sha": "c1d79f55dc2cc628611445183b9086991a29b74f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1d79f55dc2cc628611445183b9086991a29b74f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceb173d64773736e0c60ba6104912c725f07c2c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmKeRF8ACgkQGBtJ+fOP\nM3TvUQv/Q5WoxfI/xSwWJe9lStQErGJgsCXvDDr/6BVgF2h2/ouyhmzzBAzdGycf\nn3Hna6pDWRDVII6zI2n75WkIxJjuaMLldLZfPKYBhsgqKONP9DlcQmOl7cNp5KkS\nPIT6H6t2EgPWVhyMgwE8k2/5QOkZ7WocRiE4NKMUZrDsXeBgeIx1mFOXzjOg6u6k\nCpLUAchqCX1jWs4+ISqP/wf9p6joTeg/jOdT5IIFgN2mM6OaEgzKtZ8piVA1OZTS\n3zrqPlsXTMMA+2Ca684TVEXxH371xYByC/jRm2bISnwMR91byOHOIL/oh9mGyEsT\nOmJyxl8Ldk5D5FZAUGX1JfBUO2EtyYrHgkGXEE6f2wuEVvXyEhkMYAqk1FJr76KF\nnLv+dewyfzAqTC9yc/My6bIDaofHrG5ru20GCf4EILQi6XZJYlYiqzeglr5S51Ap\nTDFK5e5z3g+8gTyCoyhiTooe2e6rHeDROUs7ME2D5tt5y4VoJA5PGkGj5uPSGfNd\nczJp+yVL\n=iwZ2\n-----END PGP SIGNATURE-----", "payload": "tree c1d79f55dc2cc628611445183b9086991a29b74f\nparent a7c832b04a2e11c39c58606182d2666b853c3602\nauthor Andy Wang <cbeuw.andy@gmail.com> 1653822225 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1654539359 +0100\n\nMove logic out of machine.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb173d64773736e0c60ba6104912c725f07c2c9", "html_url": "https://github.com/rust-lang/rust/commit/ceb173d64773736e0c60ba6104912c725f07c2c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceb173d64773736e0c60ba6104912c725f07c2c9/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7c832b04a2e11c39c58606182d2666b853c3602", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c832b04a2e11c39c58606182d2666b853c3602", "html_url": "https://github.com/rust-lang/rust/commit/a7c832b04a2e11c39c58606182d2666b853c3602"}], "stats": {"total": 39, "additions": 17, "deletions": 22}, "files": [{"sha": "3c692783d145b5fa499a96c4608ff1eb92f5f2b7", "filename": "src/concurrency/weak_memory.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ceb173d64773736e0c60ba6104912c725f07c2c9/src%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb173d64773736e0c60ba6104912c725f07c2c9/src%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fweak_memory.rs?ref=ceb173d64773736e0c60ba6104912c725f07c2c9", "patch": "@@ -135,20 +135,22 @@ impl StoreBufferAlloc {\n \n     /// When a non-atomic access happens on a location that has been atomically accessed\n     /// before without data race, we can determine that the non-atomic access fully happens\n-    /// before all the prior atomic accesses so the location no longer needs to exhibit\n+    /// after all the prior atomic accesses so the location no longer needs to exhibit\n     /// any weak memory behaviours until further atomic accesses.\n-    pub fn destroy_atomicity<'tcx>(&self, range: AllocRange) {\n-        let mut buffers = self.store_buffers.borrow_mut();\n-        let access_type = buffers.access_type(range);\n-        match access_type {\n-            AccessType::PerfectlyOverlapping(pos) => {\n-                buffers.remove_from_pos(pos);\n-            }\n-            AccessType::ImperfectlyOverlapping(pos_range) => {\n-                buffers.remove_pos_range(pos_range);\n-            }\n-            AccessType::Empty(_) => {\n-                // Do nothing\n+    pub fn memory_accessed<'tcx>(&self, range: AllocRange, global: &GlobalState) {\n+        if !global.ongoing_atomic_access() {\n+            let mut buffers = self.store_buffers.borrow_mut();\n+            let access_type = buffers.access_type(range);\n+            match access_type {\n+                AccessType::PerfectlyOverlapping(pos) => {\n+                    buffers.remove_from_pos(pos);\n+                }\n+                AccessType::ImperfectlyOverlapping(pos_range) => {\n+                    buffers.remove_pos_range(pos_range);\n+                }\n+                AccessType::Empty(_) => {\n+                    // The range had no weak behaivours attached, do nothing\n+                }\n             }\n         }\n     }"}, {"sha": "5ee2d9a9abd4126f2b0497aa5e867449374a75f9", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ceb173d64773736e0c60ba6104912c725f07c2c9/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb173d64773736e0c60ba6104912c725f07c2c9/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=ceb173d64773736e0c60ba6104912c725f07c2c9", "patch": "@@ -741,12 +741,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n             )?;\n         }\n         if let Some(weak_memory) = &alloc_extra.weak_memory {\n-            if !machine.data_race.as_ref().unwrap().ongoing_atomic_access() {\n-                // This is a non-atomic access. And if we are accessing a previously atomically\n-                // accessed location without racing with them, then the location no longer\n-                // exhibits weak-memory behaviors until a fresh atomic access happens.\n-                weak_memory.destroy_atomicity(range);\n-            }\n+            weak_memory.memory_accessed(range, machine.data_race.as_ref().unwrap());\n         }\n         Ok(())\n     }\n@@ -772,9 +767,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n             )?;\n         }\n         if let Some(weak_memory) = &alloc_extra.weak_memory {\n-            if !machine.data_race.as_ref().unwrap().ongoing_atomic_access() {\n-                weak_memory.destroy_atomicity(range);\n-            }\n+            weak_memory.memory_accessed(range, machine.data_race.as_ref().unwrap());\n         }\n         Ok(())\n     }"}]}