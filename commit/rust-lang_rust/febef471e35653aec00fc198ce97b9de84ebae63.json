{"sha": "febef471e35653aec00fc198ce97b9de84ebae63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYmVmNDcxZTM1NjUzYWVjMDBmYzE5OGNlOTdiOWRlODRlYmFlNjM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-09T01:46:46Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-25T22:22:12Z"}, "message": "Refactor how the prelude is handled", "tree": {"sha": "88acc5af3f7dd44981ee5902ea0d485259b7dd87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88acc5af3f7dd44981ee5902ea0d485259b7dd87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/febef471e35653aec00fc198ce97b9de84ebae63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/febef471e35653aec00fc198ce97b9de84ebae63", "html_url": "https://github.com/rust-lang/rust/commit/febef471e35653aec00fc198ce97b9de84ebae63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/febef471e35653aec00fc198ce97b9de84ebae63/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21064d097eb7d1de444fc53af32197b67704c36d", "url": "https://api.github.com/repos/rust-lang/rust/commits/21064d097eb7d1de444fc53af32197b67704c36d", "html_url": "https://github.com/rust-lang/rust/commit/21064d097eb7d1de444fc53af32197b67704c36d"}], "stats": {"total": 51, "additions": 21, "deletions": 30}, "files": [{"sha": "479fc5ebf907e74133683f4f045166f51d33b0a6", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/febef471e35653aec00fc198ce97b9de84ebae63/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/febef471e35653aec00fc198ce97b9de84ebae63/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=febef471e35653aec00fc198ce97b9de84ebae63", "patch": "@@ -634,11 +634,14 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 module_.increment_outstanding_references_for(target, ValueNS, is_public);\n                 module_.increment_outstanding_references_for(target, TypeNS, is_public);\n             }\n-            GlobImport => {\n+            GlobImport if !is_prelude => {\n                 // Set the glob flag. This tells us that we don't know the\n                 // module's exports ahead of time.\n                 module_.inc_glob_count(is_public)\n             }\n+            // Prelude imports are not included in the glob counts since they do not get added to\n+            // `resolved_globs` -- they are handled separately in `resolve_imports`.\n+            GlobImport => {}\n         }\n \n         let directive ="}, {"sha": "65d40edd9584c3d0d6f4b7715991f63d294c2e0a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/febef471e35653aec00fc198ce97b9de84ebae63/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/febef471e35653aec00fc198ce97b9de84ebae63/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=febef471e35653aec00fc198ce97b9de84ebae63", "patch": "@@ -820,7 +820,7 @@ pub struct ModuleS<'a> {\n     // entry block for `f`.\n     module_children: RefCell<NodeMap<Module<'a>>>,\n \n-    shadowed_traits: RefCell<Vec<&'a NameBinding<'a>>>,\n+    prelude: RefCell<Option<Module<'a>>>,\n \n     glob_importers: RefCell<Vec<(Module<'a>, &'a ImportDirective)>>,\n     resolved_globs: RefCell<(Vec<Module<'a>> /* public */, Vec<Module<'a>> /* private */)>,\n@@ -855,7 +855,7 @@ impl<'a> ModuleS<'a> {\n             resolutions: RefCell::new(HashMap::new()),\n             unresolved_imports: RefCell::new(Vec::new()),\n             module_children: RefCell::new(NodeMap()),\n-            shadowed_traits: RefCell::new(Vec::new()),\n+            prelude: RefCell::new(None),\n             glob_importers: RefCell::new(Vec::new()),\n             resolved_globs: RefCell::new((Vec::new(), Vec::new())),\n             public_glob_count: Cell::new(0),\n@@ -3336,33 +3336,25 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n \n             // Look for trait children.\n-            build_reduced_graph::populate_module_if_necessary(self, &search_module);\n-\n-            search_module.for_each_child(|_, ns, name_binding| {\n+            let mut search_in_module = |module: Module<'a>| module.for_each_child(|_, ns, binding| {\n                 if ns != TypeNS { return }\n-                let trait_def_id = match name_binding.def() {\n+                let trait_def_id = match binding.def() {\n                     Some(Def::Trait(trait_def_id)) => trait_def_id,\n                     Some(..) | None => return,\n                 };\n                 if self.trait_item_map.contains_key(&(name, trait_def_id)) {\n                     add_trait_info(&mut found_traits, trait_def_id, name);\n                     let trait_name = self.get_trait_name(trait_def_id);\n-                    self.record_use(trait_name, TypeNS, name_binding);\n-                }\n-            });\n-\n-            // Look for shadowed traits.\n-            for binding in search_module.shadowed_traits.borrow().iter() {\n-                let did = binding.def().unwrap().def_id();\n-                if self.trait_item_map.contains_key(&(name, did)) {\n-                    add_trait_info(&mut found_traits, did, name);\n-                    let trait_name = self.get_trait_name(did);\n                     self.record_use(trait_name, TypeNS, binding);\n                 }\n-            }\n+            });\n+            search_in_module(search_module);\n \n             match search_module.parent_link {\n-                NoParentLink | ModuleParentLink(..) => break,\n+                NoParentLink | ModuleParentLink(..) => {\n+                    search_module.prelude.borrow().map(search_in_module);\n+                    break;\n+                }\n                 BlockParentLink(parent_module, _) => {\n                     search_module = parent_module;\n                 }"}, {"sha": "91bbb154bbeb716553622fb883de73c658d56fa2", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/febef471e35653aec00fc198ce97b9de84ebae63/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/febef471e35653aec00fc198ce97b9de84ebae63/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=febef471e35653aec00fc198ce97b9de84ebae63", "patch": "@@ -98,9 +98,6 @@ impl ImportDirective {\n         if let GlobImport = self.subclass {\n             modifiers = modifiers | DefModifiers::GLOB_IMPORTED;\n         }\n-        if self.is_prelude {\n-            modifiers = modifiers | DefModifiers::PRELUDE;\n-        }\n \n         NameBinding {\n             kind: NameBindingKind::Import {\n@@ -252,7 +249,8 @@ impl<'a> ::ModuleS<'a> {\n             }\n         }\n \n-        resolution.result(true)\n+        self.prelude.borrow().map(|prelude| prelude.resolve_name(name, ns, false))\n+                             .unwrap_or(Failed(None))\n     }\n \n     // Define the name or return the existing binding if there is a collision.\n@@ -616,6 +614,11 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         }\n         build_reduced_graph::populate_module_if_necessary(self.resolver, target_module);\n \n+        if directive.is_prelude {\n+            *module_.prelude.borrow_mut() = Some(target_module);\n+            return Success(());\n+        }\n+\n         // Add to target_module's glob_importers and module_'s resolved_globs\n         target_module.glob_importers.borrow_mut().push((module_, directive));\n         match *module_.resolved_globs.borrow_mut() {\n@@ -678,13 +681,6 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                     self.resolver.session.add_lint(lint, id, binding.span.unwrap(), msg);\n                 }\n             }\n-\n-            // We can always use methods from the prelude traits\n-            for glob_binding in resolution.duplicate_globs.iter() {\n-                if glob_binding.defined_with(DefModifiers::PRELUDE) {\n-                    module.shadowed_traits.borrow_mut().push(glob_binding);\n-                }\n-            }\n         }\n \n         if reexports.len() > 0 {"}]}