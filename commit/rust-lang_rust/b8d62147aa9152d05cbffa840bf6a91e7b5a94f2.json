{"sha": "b8d62147aa9152d05cbffa840bf6a91e7b5a94f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZDYyMTQ3YWE5MTUyZDA1Y2JmZmE4NDBiZjZhOTFlN2I1YTk0ZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-16T20:11:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-16T20:11:30Z"}, "message": "auto merge of #13418 : ktt3ja/rust/move-out-of, r=brson\n\nThis commit changes the way move errors are reported when some value is\r\ncaptured by a PatIdent. First, we collect all of the \"cannot move out\r\nof\" errors before reporting them, and those errors with the same \"move\r\nsource\" are reported together. If the move is caused by a PatIdent (that\r\nbinds by value), we add a note indicating where it is and suggest the\r\nuser to put `ref` if they don't want the value to move. This makes the\r\n\"cannot move out of\" error in match expression nicer (though the extra\r\nnote may not feel that helpful in other places :P). For example, with\r\nthe following code snippet,\r\n\r\n```rust\r\nenum Foo {\r\n    Foo1(~u32, ~u32),\r\n    Foo2(~u32),\r\n    Foo3,\r\n}\r\n\r\nfn main() {\r\n    let f = &Foo1(~1u32, ~2u32);\r\n    match *f {\r\n        Foo1(num1, num2) => (),\r\n        Foo2(num) => (),\r\n        Foo3 => ()\r\n    }\r\n}\r\n```\r\n\r\nErrors before the change:\r\n\r\n```rust\r\ntest.rs:10:9: 10:25 error: cannot move out of dereference of `&`-pointer\r\ntest.rs:10         Foo1(num1, num2) => (),\r\n                   ^~~~~~~~~~~~~~~~\r\ntest.rs:10:9: 10:25 error: cannot move out of dereference of `&`-pointer\r\ntest.rs:10         Foo1(num1, num2) => (),\r\n                   ^~~~~~~~~~~~~~~~\r\ntest.rs:11:9: 11:18 error: cannot move out of dereference of `&`-pointer\r\ntest.rs:11         Foo2(num) => (),\r\n                   ^~~~~~~~~\r\n```\r\n\r\nAfter:\r\n\r\n```rust\r\ntest.rs:9:11: 9:13 error: cannot move out of dereference of `&`-pointer\r\ntest.rs:9     match *f {\r\n                    ^~\r\ntest.rs:10:14: 10:18 note: attempting to move value to here (to prevent the move, use `ref num1` or `ref mut num1` to capture value by reference)\r\ntest.rs:10         Foo1(num1, num2) => (),\r\n                        ^~~~\r\ntest.rs:10:20: 10:24 note: and here (use `ref num2` or `ref mut num2`)\r\ntest.rs:10         Foo1(num1, num2) => (),\r\n                              ^~~~\r\ntest.rs:11:14: 11:17 note: and here (use `ref num` or `ref mut num`)\r\ntest.rs:11         Foo2(num) => (),\r\n                        ^~~\r\n```\r\n\r\nClose #8064", "tree": {"sha": "18a38bfea153786cb904dba93476bfb2c1d702af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18a38bfea153786cb904dba93476bfb2c1d702af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2", "html_url": "https://github.com/rust-lang/rust/commit/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfaf171c6dff38faecf4de29abcedc6a128c4cec", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfaf171c6dff38faecf4de29abcedc6a128c4cec", "html_url": "https://github.com/rust-lang/rust/commit/bfaf171c6dff38faecf4de29abcedc6a128c4cec"}, {"sha": "13d6c35c56b4dfbfb0cd4775ef27a5cc38305591", "url": "https://api.github.com/repos/rust-lang/rust/commits/13d6c35c56b4dfbfb0cd4775ef27a5cc38305591", "html_url": "https://github.com/rust-lang/rust/commit/13d6c35c56b4dfbfb0cd4775ef27a5cc38305591"}], "stats": {"total": 372, "additions": 323, "deletions": 49}, "files": [{"sha": "f250b105d0b4caf35f3105bfc74ad99f87746d24", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 67, "deletions": 32, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=b8d62147aa9152d05cbffa840bf6a91e7b5a94f2", "patch": "@@ -14,12 +14,21 @@\n \n use mc = middle::mem_categorization;\n use middle::borrowck::*;\n+use middle::borrowck::gather_loans::move_error::{MoveError, MoveErrorCollector};\n+use middle::borrowck::gather_loans::move_error::MoveSpanAndPath;\n use middle::borrowck::move_data::*;\n use middle::moves;\n use middle::ty;\n use syntax::ast;\n use syntax::codemap::Span;\n-use util::ppaux::{Repr, UserString};\n+use util::ppaux::Repr;\n+\n+struct GatherMoveInfo {\n+    id: ast::NodeId,\n+    kind: MoveKind,\n+    cmt: mc::cmt,\n+    span_path_opt: Option<MoveSpanAndPath>\n+}\n \n pub fn gather_decl(bccx: &BorrowckCtxt,\n                    move_data: &MoveData,\n@@ -32,28 +41,56 @@ pub fn gather_decl(bccx: &BorrowckCtxt,\n \n pub fn gather_move_from_expr(bccx: &BorrowckCtxt,\n                              move_data: &MoveData,\n+                             move_error_collector: &MoveErrorCollector,\n                              move_expr: &ast::Expr,\n                              cmt: mc::cmt) {\n-    gather_move(bccx, move_data, move_expr.id, MoveExpr, cmt);\n+    let move_info = GatherMoveInfo {\n+        id: move_expr.id,\n+        kind: MoveExpr,\n+        cmt: cmt,\n+        span_path_opt: None,\n+    };\n+    gather_move(bccx, move_data, move_error_collector, move_info);\n }\n \n pub fn gather_move_from_pat(bccx: &BorrowckCtxt,\n                             move_data: &MoveData,\n+                            move_error_collector: &MoveErrorCollector,\n                             move_pat: &ast::Pat,\n                             cmt: mc::cmt) {\n-    gather_move(bccx, move_data, move_pat.id, MovePat, cmt);\n+    let pat_span_path_opt = match move_pat.node {\n+        ast::PatIdent(_, ref path, _) => {\n+            Some(MoveSpanAndPath::with_span_and_path(move_pat.span,\n+                                                     (*path).clone()))\n+        },\n+        _ => None,\n+    };\n+    let move_info = GatherMoveInfo {\n+        id: move_pat.id,\n+        kind: MovePat,\n+        cmt: cmt,\n+        span_path_opt: pat_span_path_opt,\n+    };\n+    gather_move(bccx, move_data, move_error_collector, move_info);\n }\n \n pub fn gather_captures(bccx: &BorrowckCtxt,\n                        move_data: &MoveData,\n+                       move_error_collector: &MoveErrorCollector,\n                        closure_expr: &ast::Expr) {\n     for captured_var in bccx.capture_map.get(&closure_expr.id).iter() {\n         match captured_var.mode {\n             moves::CapMove => {\n                 let cmt = bccx.cat_captured_var(closure_expr.id,\n                                                 closure_expr.span,\n                                                 captured_var);\n-                gather_move(bccx, move_data, closure_expr.id, Captured, cmt);\n+                let move_info = GatherMoveInfo {\n+                    id: closure_expr.id,\n+                    kind: Captured,\n+                    cmt: cmt,\n+                    span_path_opt: None\n+                };\n+                gather_move(bccx, move_data, move_error_collector, move_info);\n             }\n             moves::CapCopy | moves::CapRef => {}\n         }\n@@ -62,19 +99,27 @@ pub fn gather_captures(bccx: &BorrowckCtxt,\n \n fn gather_move(bccx: &BorrowckCtxt,\n                move_data: &MoveData,\n-               move_id: ast::NodeId,\n-               move_kind: MoveKind,\n-               cmt: mc::cmt) {\n+               move_error_collector: &MoveErrorCollector,\n+               move_info: GatherMoveInfo) {\n     debug!(\"gather_move(move_id={}, cmt={})\",\n-           move_id, cmt.repr(bccx.tcx));\n-\n-    if !check_is_legal_to_move_from(bccx, cmt, cmt) {\n-        return;\n+           move_info.id, move_info.cmt.repr(bccx.tcx));\n+\n+    let potentially_illegal_move =\n+                check_and_get_illegal_move_origin(bccx, move_info.cmt);\n+    match potentially_illegal_move {\n+        Some(illegal_move_origin) => {\n+            let error = MoveError::with_move_info(illegal_move_origin,\n+                                                  move_info.span_path_opt);\n+            move_error_collector.add_error(error);\n+            return\n+        }\n+        None => ()\n     }\n \n-    match opt_loan_path(cmt) {\n+    match opt_loan_path(move_info.cmt) {\n         Some(loan_path) => {\n-            move_data.add_move(bccx.tcx, loan_path, move_id, move_kind);\n+            move_data.add_move(bccx.tcx, loan_path,\n+                               move_info.id, move_info.kind);\n         }\n         None => {\n             // move from rvalue or unsafe pointer, hence ok\n@@ -110,59 +155,49 @@ pub fn gather_move_and_assignment(bccx: &BorrowckCtxt,\n                              true);\n }\n \n-fn check_is_legal_to_move_from(bccx: &BorrowckCtxt,\n-                               cmt0: mc::cmt,\n-                               cmt: mc::cmt) -> bool {\n+fn check_and_get_illegal_move_origin(bccx: &BorrowckCtxt,\n+                                     cmt: mc::cmt) -> Option<mc::cmt> {\n     match cmt.cat {\n         mc::cat_deref(_, _, mc::BorrowedPtr(..)) |\n         mc::cat_deref(_, _, mc::GcPtr) |\n         mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n         mc::cat_upvar(..) | mc::cat_static_item |\n         mc::cat_copied_upvar(mc::CopiedUpvar { onceness: ast::Many, .. }) => {\n-            bccx.span_err(\n-                cmt0.span,\n-                format!(\"cannot move out of {}\",\n-                        bccx.cmt_to_str(cmt)));\n-            false\n+            Some(cmt)\n         }\n \n         // Can move out of captured upvars only if the destination closure\n         // type is 'once'. 1-shot stack closures emit the copied_upvar form\n         // (see mem_categorization.rs).\n         mc::cat_copied_upvar(mc::CopiedUpvar { onceness: ast::Once, .. }) => {\n-            true\n+            None\n         }\n \n         mc::cat_rvalue(..) |\n         mc::cat_local(..) |\n         mc::cat_arg(..) => {\n-            true\n+            None\n         }\n \n         mc::cat_downcast(b) |\n         mc::cat_interior(b, _) => {\n             match ty::get(b.ty).sty {\n                 ty::ty_struct(did, _) | ty::ty_enum(did, _) => {\n                     if ty::has_dtor(bccx.tcx, did) {\n-                        bccx.span_err(\n-                            cmt0.span,\n-                            format!(\"cannot move out of type `{}`, \\\n-                                  which defines the `Drop` trait\",\n-                                 b.ty.user_string(bccx.tcx)));\n-                        false\n+                        Some(cmt)\n                     } else {\n-                        check_is_legal_to_move_from(bccx, cmt0, b)\n+                        check_and_get_illegal_move_origin(bccx, b)\n                     }\n                 }\n                 _ => {\n-                    check_is_legal_to_move_from(bccx, cmt0, b)\n+                    check_and_get_illegal_move_origin(bccx, b)\n                 }\n             }\n         }\n \n         mc::cat_deref(b, _, mc::OwnedPtr) |\n         mc::cat_discr(b, _) => {\n-            check_is_legal_to_move_from(bccx, cmt0, b)\n+            check_and_get_illegal_move_origin(bccx, b)\n         }\n     }\n }"}, {"sha": "dd9f2eb970bee60c6828b5e5d5a283f3ca4fa10a", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=b8d62147aa9152d05cbffa840bf6a91e7b5a94f2", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -39,6 +39,7 @@ use syntax::ast::{Expr, FnDecl, Block, NodeId, Stmt, Pat, Local};\n mod lifetime;\n mod restrictions;\n mod gather_moves;\n+mod move_error;\n \n /// Context used while gathering loans:\n ///\n@@ -70,6 +71,7 @@ struct GatherLoanCtxt<'a> {\n     bccx: &'a BorrowckCtxt<'a>,\n     id_range: IdRange,\n     move_data: move_data::MoveData,\n+    move_error_collector: move_error::MoveErrorCollector,\n     all_loans: Vec<Loan>,\n     item_ub: ast::NodeId,\n     repeating_ids: Vec<ast::NodeId> }\n@@ -121,11 +123,13 @@ pub fn gather_loans_in_fn(bccx: &BorrowckCtxt, decl: &ast::FnDecl, body: &ast::B\n         all_loans: Vec::new(),\n         item_ub: body.id,\n         repeating_ids: vec!(body.id),\n-        move_data: MoveData::new()\n+        move_data: MoveData::new(),\n+        move_error_collector: move_error::MoveErrorCollector::new(),\n     };\n     glcx.gather_fn_arg_patterns(decl, body);\n \n     glcx.visit_block(body, ());\n+    glcx.report_potential_errors();\n     let GatherLoanCtxt { id_range, all_loans, move_data, .. } = glcx;\n     (id_range, all_loans, move_data)\n }\n@@ -180,7 +184,7 @@ fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n     if this.bccx.is_move(ex.id) {\n         let cmt = this.bccx.cat_expr(ex);\n         gather_moves::gather_move_from_expr(\n-            this.bccx, &this.move_data, ex, cmt);\n+            this.bccx, &this.move_data, &this.move_error_collector, ex, cmt);\n     }\n \n     // Special checks for various kinds of expressions:\n@@ -270,7 +274,8 @@ fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n       }\n \n       ast::ExprFnBlock(..) | ast::ExprProc(..) => {\n-          gather_moves::gather_captures(this.bccx, &this.move_data, ex);\n+          gather_moves::gather_captures(this.bccx, &this.move_data,\n+                                        &this.move_error_collector, ex);\n           this.guarantee_captures(ex);\n           visit::walk_expr(this, ex, ());\n       }\n@@ -865,7 +870,8 @@ impl<'a> GatherLoanCtxt<'a> {\n                       // No borrows here, but there may be moves\n                       if self.bccx.is_move(pat.id) {\n                           gather_moves::gather_move_from_pat(\n-                              self.bccx, &self.move_data, pat, cmt);\n+                              self.bccx, &self.move_data,\n+                              &self.move_error_collector, pat, cmt);\n                       }\n                   }\n                 }\n@@ -916,6 +922,10 @@ impl<'a> GatherLoanCtxt<'a> {\n     pub fn pat_is_binding(&self, pat: &ast::Pat) -> bool {\n         pat_util::pat_is_binding(self.bccx.tcx.def_map, pat)\n     }\n+\n+    pub fn report_potential_errors(&self) {\n+        self.move_error_collector.report_potential_errors(self.bccx);\n+    }\n }\n \n /// Context used while gathering loans on static initializers"}, {"sha": "c9a8df0f5359550dd279b6bfc589a8dde37b8e6c", "filename": "src/librustc/middle/borrowck/gather_loans/move_error.rs", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=b8d62147aa9152d05cbffa840bf6a91e7b5a94f2", "patch": "@@ -0,0 +1,169 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use mc = middle::mem_categorization;\n+use middle::borrowck::BorrowckCtxt;\n+use middle::ty;\n+\n+use std::cell::RefCell;\n+use syntax::ast;\n+use syntax::codemap;\n+use syntax::print::pprust;\n+use util::ppaux::UserString;\n+\n+pub struct MoveErrorCollector {\n+    errors: RefCell<Vec<MoveError>>\n+}\n+\n+impl MoveErrorCollector {\n+    pub fn new() -> MoveErrorCollector {\n+        MoveErrorCollector {\n+            errors: RefCell::new(Vec::new())\n+        }\n+    }\n+\n+    pub fn add_error(&self, error: MoveError) {\n+        self.errors.borrow_mut().push(error);\n+    }\n+\n+    pub fn report_potential_errors(&self, bccx: &BorrowckCtxt) {\n+        report_move_errors(bccx, self.errors.borrow().deref())\n+    }\n+}\n+\n+pub struct MoveError {\n+    move_from: mc::cmt,\n+    move_to: Option<MoveSpanAndPath>\n+}\n+\n+impl MoveError {\n+    pub fn with_move_info(move_from: mc::cmt,\n+                          move_to: Option<MoveSpanAndPath>)\n+                          -> MoveError {\n+        MoveError {\n+            move_from: move_from,\n+            move_to: move_to,\n+        }\n+    }\n+}\n+\n+#[deriving(Clone)]\n+pub struct MoveSpanAndPath {\n+    span: codemap::Span,\n+    path: ast::Path\n+}\n+\n+impl MoveSpanAndPath {\n+    pub fn with_span_and_path(span: codemap::Span,\n+                              path: ast::Path)\n+                              -> MoveSpanAndPath {\n+        MoveSpanAndPath {\n+            span: span,\n+            path: path,\n+        }\n+    }\n+}\n+\n+pub struct GroupedMoveErrors {\n+    move_from: mc::cmt,\n+    move_to_places: Vec<MoveSpanAndPath>\n+}\n+\n+fn report_move_errors(bccx: &BorrowckCtxt, errors: &Vec<MoveError>) {\n+    let grouped_errors = group_errors_with_same_origin(errors);\n+    for error in grouped_errors.iter() {\n+        report_cannot_move_out_of(bccx, error.move_from);\n+        let mut is_first_note = true;\n+        for move_to in error.move_to_places.iter() {\n+            note_move_destination(bccx, move_to.span,\n+                                  &move_to.path, is_first_note);\n+            is_first_note = false;\n+        }\n+    }\n+}\n+\n+fn group_errors_with_same_origin(errors: &Vec<MoveError>)\n+                                 -> Vec<GroupedMoveErrors> {\n+    let mut grouped_errors = Vec::new();\n+    for error in errors.iter() {\n+        append_to_grouped_errors(&mut grouped_errors, error)\n+    }\n+    return grouped_errors;\n+\n+    fn append_to_grouped_errors(grouped_errors: &mut Vec<GroupedMoveErrors>,\n+                                error: &MoveError) {\n+        let move_from_id = error.move_from.id;\n+        let move_to = if error.move_to.is_some() {\n+            vec!(error.move_to.clone().unwrap())\n+        } else {\n+            Vec::new()\n+        };\n+        for ge in grouped_errors.mut_iter() {\n+            if move_from_id == ge.move_from.id && error.move_to.is_some() {\n+                ge.move_to_places.push_all_move(move_to);\n+                return\n+            }\n+        }\n+        grouped_errors.push(GroupedMoveErrors {\n+            move_from: error.move_from,\n+            move_to_places: move_to\n+        })\n+    }\n+}\n+\n+fn report_cannot_move_out_of(bccx: &BorrowckCtxt, move_from: mc::cmt) {\n+    match move_from.cat {\n+        mc::cat_deref(_, _, mc::BorrowedPtr(..)) |\n+        mc::cat_deref(_, _, mc::GcPtr) |\n+        mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n+        mc::cat_upvar(..) | mc::cat_static_item |\n+        mc::cat_copied_upvar(mc::CopiedUpvar { onceness: ast::Many, .. }) => {\n+            bccx.span_err(\n+                move_from.span,\n+                format!(\"cannot move out of {}\",\n+                        bccx.cmt_to_str(move_from)));\n+        }\n+\n+        mc::cat_downcast(b) |\n+        mc::cat_interior(b, _) => {\n+            match ty::get(b.ty).sty {\n+                ty::ty_struct(did, _)\n+                | ty::ty_enum(did, _) if ty::has_dtor(bccx.tcx, did) => {\n+                    bccx.span_err(\n+                        move_from.span,\n+                        format!(\"cannot move out of type `{}`, \\\n+                                 which defines the `Drop` trait\",\n+                                b.ty.user_string(bccx.tcx)));\n+                },\n+                _ => fail!(\"this path should not cause illegal move\")\n+            }\n+        }\n+        _ => fail!(\"this path should not cause illegal move\")\n+    }\n+}\n+\n+fn note_move_destination(bccx: &BorrowckCtxt,\n+                         move_to_span: codemap::Span,\n+                         pat_ident_path: &ast::Path,\n+                         is_first_note: bool) {\n+    let pat_name = pprust::path_to_str(pat_ident_path);\n+    if is_first_note {\n+        bccx.span_note(\n+            move_to_span,\n+            format!(\"attempting to move value to here (to prevent the move, \\\n+                     use `ref {0}` or `ref mut {0}` to capture value by \\\n+                     reference)\",\n+                    pat_name));\n+    } else {\n+        bccx.span_note(move_to_span,\n+                       format!(\"and here (use `ref {0}` or `ref mut {0}`)\",\n+                               pat_name));\n+    }\n+}"}, {"sha": "ecc9e40c4c2a067e53c224a447b0a09f0878b760", "filename": "src/test/compile-fail/borrowck-move-error-with-note.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs?ref=b8d62147aa9152d05cbffa840bf6a91e7b5a94f2", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Foo {\n+    Foo1(~u32, ~u32),\n+    Foo2(~u32),\n+    Foo3,\n+}\n+\n+fn blah() {\n+    let f = &Foo1(~1u32, ~2u32);\n+    match *f {             //~ ERROR cannot move out of\n+        Foo1(num1,         //~ NOTE attempting to move value to here\n+             num2) => (),  //~ NOTE and here\n+        Foo2(num) => (),   //~ NOTE and here\n+        Foo3 => ()\n+    }\n+}\n+\n+struct S {f:~str, g:~str}\n+impl Drop for S {\n+    fn drop(&mut self) { println!(\"{}\", self.f); }\n+}\n+\n+fn move_in_match() {\n+    match S {f:~\"foo\", g:~\"bar\"} {\n+        S {         //~ ERROR cannot move out of type `S`, which defines the `Drop` trait\n+            f: _s,  //~ NOTE attempting to move value to here\n+            g: _t   //~ NOTE and here\n+        } => {}\n+    }\n+}\n+\n+// from issue-8064\n+struct A {\n+    a: ~int\n+}\n+\n+fn free<T>(_: T) {}\n+\n+fn blah2() {\n+    let a = &A { a: ~1 };\n+    match a.a {           //~ ERROR cannot move out of\n+        n => {            //~ NOTE attempting to move value to here\n+            free(n)\n+        }\n+    }\n+    free(a)\n+}\n+\n+fn main() {}"}, {"sha": "e834e61efdd898acb8140a54b9da0ff34b78c551", "filename": "src/test/compile-fail/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs?ref=b8d62147aa9152d05cbffa840bf6a91e7b5a94f2", "patch": "@@ -25,9 +25,10 @@ pub fn main() {\n     match x {\n         [_, ..tail] => {\n             match tail {\n-                [Foo { string: a }, Foo { string: b }] => {\n-                    //~^ ERROR cannot move out of dereference of `&`-pointer\n-                    //~^^ ERROR cannot move out of dereference of `&`-pointer\n+                [Foo { string: a }, //~ ERROR cannot move out of dereference of `&`-pointer\n+                 Foo { string: b }] => {\n+                    //~^^ NOTE attempting to move value to here\n+                    //~^^ NOTE and here\n                 }\n                 _ => {\n                     unreachable!();"}, {"sha": "7f0a6c84f8cad7a955adf37c855975afad2eaaab", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=b8d62147aa9152d05cbffa840bf6a91e7b5a94f2", "patch": "@@ -31,8 +31,8 @@ fn c() {\n     let mut vec = vec!(~1, ~2, ~3);\n     let vec: &mut [~int] = vec.as_mut_slice();\n     match vec {\n-        [_a, .._b] => {\n-            //~^ ERROR cannot move out\n+        [_a,         //~ ERROR cannot move out\n+         .._b] => {  //~^ NOTE attempting to move value to here\n \n             // Note: `_a` is *moved* here, but `b` is borrowing,\n             // hence illegal.\n@@ -49,9 +49,8 @@ fn d() {\n     let mut vec = vec!(~1, ~2, ~3);\n     let vec: &mut [~int] = vec.as_mut_slice();\n     match vec {\n-        [.._a, _b] => {\n-            //~^ ERROR cannot move out\n-        }\n+        [.._a,     //~ ERROR cannot move out\n+         _b] => {} //~ NOTE attempting to move value to here\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n@@ -62,11 +61,13 @@ fn e() {\n     let vec: &mut [~int] = vec.as_mut_slice();\n     match vec {\n         [_a, _b, _c] => {}  //~ ERROR cannot move out\n-        //~^ ERROR cannot move out\n-        //~^^ ERROR cannot move out\n+        //~^ NOTE attempting to move value to here\n+        //~^^ NOTE and here\n+        //~^^^ NOTE and here\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n+    //~^ NOTE attempting to move value to here\n }\n \n fn main() {}"}, {"sha": "4ec0831c588eff7616b18720cffbd6d1e58b84de", "filename": "src/test/compile-fail/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs?ref=b8d62147aa9152d05cbffa840bf6a91e7b5a94f2", "patch": "@@ -26,9 +26,9 @@ fn main() {\n     let s = S { x: ~Bar(~42) };\n     loop {\n         f(&s, |hellothere| {\n-            match hellothere.x {\n+            match hellothere.x { //~ ERROR cannot move out\n                 ~Foo(_) => {}\n-                ~Bar(x) => println!(\"{}\", x.to_str()), //~ ERROR cannot move out\n+                ~Bar(x) => println!(\"{}\", x.to_str()), //~ NOTE attempting to move value to here\n                 ~Baz => {}\n             }\n         })"}]}