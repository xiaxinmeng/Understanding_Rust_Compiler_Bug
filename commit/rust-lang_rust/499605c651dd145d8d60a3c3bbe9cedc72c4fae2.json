{"sha": "499605c651dd145d8d60a3c3bbe9cedc72c4fae2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5OTYwNWM2NTFkZDE0NWQ4ZDYwYTNjM2JiZTljZWRjNzJjNGZhZTI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-01T16:46:55Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-19T23:09:49Z"}, "message": "debuginfo: Make DW_TAG_subroutine DIEs for inherent methods children of their self-type DIEs.", "tree": {"sha": "6b1cc5b9f2fd350a944bb022ef79333032f5e64d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b1cc5b9f2fd350a944bb022ef79333032f5e64d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/499605c651dd145d8d60a3c3bbe9cedc72c4fae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/499605c651dd145d8d60a3c3bbe9cedc72c4fae2", "html_url": "https://github.com/rust-lang/rust/commit/499605c651dd145d8d60a3c3bbe9cedc72c4fae2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/499605c651dd145d8d60a3c3bbe9cedc72c4fae2/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb6f8e2c94a7041877ed8460f2621974c5233f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb6f8e2c94a7041877ed8460f2621974c5233f7", "html_url": "https://github.com/rust-lang/rust/commit/2fb6f8e2c94a7041877ed8460f2621974c5233f7"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "6c1bd715f13a50911e3b909461a4e6bcf0279b38", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/499605c651dd145d8d60a3c3bbe9cedc72c4fae2/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/499605c651dd145d8d60a3c3bbe9cedc72c4fae2/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=499605c651dd145d8d60a3c3bbe9cedc72c4fae2", "patch": "@@ -14,8 +14,7 @@ mod doc;\n use self::VariableAccess::*;\n use self::VariableKind::*;\n \n-use self::utils::{DIB, span_start, create_DIArray, is_node_local_to_unit,\n-                  get_namespace_and_span_for_item};\n+use self::utils::{DIB, span_start, create_DIArray, is_node_local_to_unit};\n use self::namespace::mangled_name_of_item;\n use self::type_names::compute_debuginfo_type_name;\n use self::metadata::{type_metadata, diverging_type_metadata};\n@@ -33,7 +32,7 @@ use rustc::hir;\n \n use abi::Abi;\n use common::{NodeIdAndSpan, CrateContext, FunctionContext, Block, BlockAndBuilder};\n-use monomorphize::Instance;\n+use monomorphize::{self, Instance};\n use rustc::ty::{self, Ty};\n use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use util::nodemap::{DefIdMap, NodeMap, FnvHashMap, FnvHashSet};\n@@ -240,8 +239,9 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     // Do this here already, in case we do an early exit from this function.\n     source_loc::set_debug_location(cx, None, UnknownLocation);\n \n+    let (containing_scope, span) = get_containing_scope_and_span(cx, instance);\n+\n     // This can be the case for functions inlined from another crate\n-    let (containing_scope, span) = get_namespace_and_span_for_item(cx, instance.def);\n     if span == codemap::DUMMY_SP {\n         return FunctionDebugContext::FunctionWithoutDebugInfo;\n     }\n@@ -283,6 +283,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     let function_name = CString::new(name).unwrap();\n     let linkage_name = CString::new(linkage_name).unwrap();\n+\n     let fn_metadata = unsafe {\n         llvm::LLVMDIBuilderCreateFunction(\n             DIB(cx),\n@@ -404,6 +405,47 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n         return create_DIArray(DIB(cx), &template_params[..]);\n     }\n+\n+    fn get_containing_scope_and_span<'ccx, 'tcx>(cx: &CrateContext<'ccx, 'tcx>,\n+                                                 instance: Instance<'tcx>)\n+                                                 -> (DIScope, Span) {\n+        // First, let's see if this is a method within an inherent impl. Because\n+        // if yes, we want to make the result subroutine DIE a child of the\n+        // subroutine's self-type.\n+        let self_type = cx.tcx().impl_of_method(instance.def).and_then(|impl_def_id| {\n+            // If the method does *not* belong to a trait, proceed\n+            if cx.tcx().trait_id_of_impl(impl_def_id).is_none() {\n+                let impl_self_ty = cx.tcx().lookup_item_type(impl_def_id).ty;\n+                let impl_self_ty = cx.tcx().erase_regions(&impl_self_ty);\n+                let impl_self_ty = monomorphize::apply_param_substs(cx.tcx(),\n+                                                                    instance.substs,\n+                                                                    &impl_self_ty);\n+                Some(type_metadata(cx, impl_self_ty, codemap::DUMMY_SP))\n+            } else {\n+                // For trait method impls we still use the \"parallel namespace\"\n+                // strategy\n+                None\n+            }\n+        });\n+\n+        let containing_scope = self_type.unwrap_or_else(|| {\n+            namespace::item_namespace(cx, DefId {\n+                krate: instance.def.krate,\n+                index: cx.tcx()\n+                         .def_key(instance.def)\n+                         .parent\n+                         .expect(\"get_containing_scope_and_span: missing parent?\")\n+            })\n+        });\n+\n+        // Try to get some span information, if we have an inlined item.\n+        let definition_span = match cx.external().borrow().get(&instance.def) {\n+            Some(&Some(node_id)) => cx.tcx().map.span(node_id),\n+            _ => cx.tcx().map.def_id_span(instance.def, codemap::DUMMY_SP)\n+        };\n+\n+        (containing_scope, definition_span)\n+    }\n }\n \n /// Computes the scope map for a function given its declaration and body."}]}