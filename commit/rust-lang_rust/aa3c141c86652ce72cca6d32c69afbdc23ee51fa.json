{"sha": "aa3c141c86652ce72cca6d32c69afbdc23ee51fa", "node_id": "C_kwDOAAsO6NoAKGFhM2MxNDFjODY2NTJjZTcyY2NhNmQzMmM2OWFmYmRjMjNlZTUxZmE", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2022-04-07T20:44:57Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2022-04-07T20:44:57Z"}, "message": "reword panic vs result section to remove recoverable vs unrecoverable framing", "tree": {"sha": "1d307a88dd529009eeb9d2e3372c1bcc02ac9440", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d307a88dd529009eeb9d2e3372c1bcc02ac9440"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa3c141c86652ce72cca6d32c69afbdc23ee51fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3c141c86652ce72cca6d32c69afbdc23ee51fa", "html_url": "https://github.com/rust-lang/rust/commit/aa3c141c86652ce72cca6d32c69afbdc23ee51fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa3c141c86652ce72cca6d32c69afbdc23ee51fa/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd38eea722c1f6f970a314435533e91cc2c14ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd38eea722c1f6f970a314435533e91cc2c14ffb", "html_url": "https://github.com/rust-lang/rust/commit/dd38eea722c1f6f970a314435533e91cc2c14ffb"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "98fb7e9e41d7a0c2837be360d0fd00d0cbff27c1", "filename": "library/core/src/macros/panic.md", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aa3c141c86652ce72cca6d32c69afbdc23ee51fa/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "raw_url": "https://github.com/rust-lang/rust/raw/aa3c141c86652ce72cca6d32c69afbdc23ee51fa/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md?ref=aa3c141c86652ce72cca6d32c69afbdc23ee51fa", "patch": "@@ -24,20 +24,30 @@ See also the macro [`compile_error!`], for raising errors during compilation.\n \n # When to use `panic!` vs `Result`\n \n-The Rust model of error handling groups errors into two major categories:\n-recoverable and unrecoverable errors. For a recoverable error, such as a file\n-not found error, it\u2019s reasonable to report the problem to the user and retry\n-the operation. Unrecoverable errors are always symptoms of bugs, like trying to\n-access a location beyond the end of an array.\n+The Rust language provides two complementary systems for constructing /\n+representing, reporting, propagating, reacting to, and discarding errors. These\n+responsibilities are collectively known as \"error handling.\" `panic!` and\n+`Result` are similar in that they are each the primary interface of their\n+respective error handling systems; however, the meaning these interfaces attach\n+to their errors and the responsibilities they fulfill within their respective\n+error handling systems differ.\n \n-The Rust language and standard library provides `Result` and `panic!` as parts\n-of two complementary systems for representing, reporting, propagating, reacting\n-to, and discarding errors for in these two categories.\n+The `panic!` macro is used to construct errors that represent a bug that has\n+been detected in your program. With `panic!` you provide a message that\n+describes the bug and the language then constructs an error with that message,\n+reports it, and propagates it for you.\n \n-The `panic!` macro is provided to represent unrecoverable errors, whereas the\n-`Result` enum is provided to represent recoverable errors. For more detailed\n-information about error handling check out the [book] or the [`std::result`]\n-module docs.\n+`Result` on the other hand is used to wrap other types that represent either\n+the successful result of some computation, `Ok(T)`, or error types that\n+represent an anticipated runtime failure mode of that computation, `Err(E)`.\n+`Result` is used alongside user defined types which represent the various\n+anticipated runtime failure modes that the associated computation could\n+encounter. `Result` must be propagated manually, often with the the help of the\n+`?` operator and `Try` trait, and they must be reported manually, often with\n+the help of the `Error` trait.\n+\n+For more detailed information about error handling check out the [book] or the\n+[`std::result`] module docs.\n \n [ounwrap]: Option::unwrap\n [runwrap]: Result::unwrap"}]}