{"sha": "31c1999505ccb51584dee45fb9fa1ffe16b1608e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYzE5OTk1MDVjY2I1MTU4NGRlZTQ1ZmI5ZmExZmZlMTZiMTYwOGU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-06T21:28:36Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-06T21:28:36Z"}, "message": "Merge #440\n\n440: Implement type inference for boolean operators r=flodiebold a=marcusklaas\n\nTried implementing the easiest part of https://github.com/rust-analyzer/rust-analyzer/issues/390. Hope this is somewhat close to what the intent of the issue was. Found it surprisingly easy to find my way around the repository - it's well organized!\r\n\r\nVery grateful for any pointers.\n\nCo-authored-by: Marcus Klaas de Vries <mail@marcusklaas.nl>", "tree": {"sha": "64404f418c59cbbf7dcb52a834da0d44d444a8c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64404f418c59cbbf7dcb52a834da0d44d444a8c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31c1999505ccb51584dee45fb9fa1ffe16b1608e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31c1999505ccb51584dee45fb9fa1ffe16b1608e", "html_url": "https://github.com/rust-lang/rust/commit/31c1999505ccb51584dee45fb9fa1ffe16b1608e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31c1999505ccb51584dee45fb9fa1ffe16b1608e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "0d59422b18de8dce416d792b9e7dbe9b8d5aa30a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d59422b18de8dce416d792b9e7dbe9b8d5aa30a", "html_url": "https://github.com/rust-lang/rust/commit/0d59422b18de8dce416d792b9e7dbe9b8d5aa30a"}, {"sha": "82d9a77dade454ee8d09f198fa839e7755ff7bfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/82d9a77dade454ee8d09f198fa839e7755ff7bfb", "html_url": "https://github.com/rust-lang/rust/commit/82d9a77dade454ee8d09f198fa839e7755ff7bfb"}], "stats": {"total": 142, "additions": 140, "deletions": 2}, "files": [{"sha": "b685259d7a98335f035460f93b8e1d6f3eb739fe", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/31c1999505ccb51584dee45fb9fa1ffe16b1608e/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c1999505ccb51584dee45fb9fa1ffe16b1608e/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=31c1999505ccb51584dee45fb9fa1ffe16b1608e", "patch": "@@ -26,7 +26,7 @@ use ena::unify::{InPlaceUnificationTable, UnifyKey, UnifyValue, NoError};\n \n use ra_db::{LocalSyntaxPtr, Cancelable};\n use ra_syntax::{\n-    ast::{self, AstNode, LoopBodyOwner, ArgListOwner, PrefixOp},\n+    ast::{self, AstNode, LoopBodyOwner, ArgListOwner, PrefixOp, BinOp},\n     SyntaxNodeRef\n };\n \n@@ -527,6 +527,20 @@ struct InferenceContext<'a, D: HirDatabase> {\n     return_ty: Ty,\n }\n \n+// helper function that determines whether a binary operator\n+// always returns a boolean\n+fn is_boolean_operator(op: BinOp) -> bool {\n+    match op {\n+        BinOp::BooleanOr\n+        | BinOp::BooleanAnd\n+        | BinOp::EqualityTest\n+        | BinOp::LesserEqualTest\n+        | BinOp::GreaterEqualTest\n+        | BinOp::LesserTest\n+        | BinOp::GreaterTest => true,\n+    }\n+}\n+\n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn new(\n         db: &'a D,\n@@ -899,7 +913,24 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 }\n             }\n             ast::Expr::RangeExpr(_e) => Ty::Unknown,\n-            ast::Expr::BinExpr(_e) => Ty::Unknown,\n+            ast::Expr::BinExpr(e) => match e.op() {\n+                Some(op) => {\n+                    let subtype_expectation = match op {\n+                        BinOp::BooleanAnd | BinOp::BooleanOr => Expectation::has_type(Ty::Bool),\n+                        _ => Expectation::none(),\n+                    };\n+                    let (lhs, rhs) = e.sub_exprs();\n+                    let _lhs_ty = self.infer_expr_opt(lhs, &subtype_expectation)?;\n+                    let _rhs_ty = self.infer_expr_opt(rhs, &subtype_expectation)?;\n+\n+                    if is_boolean_operator(op) {\n+                        Ty::Bool\n+                    } else {\n+                        Ty::Unknown\n+                    }\n+                }\n+                _ => Ty::Unknown,\n+            },\n             ast::Expr::Literal(_e) => Ty::Unknown,\n         };\n         // use a new type variable if we got Ty::Unknown here"}, {"sha": "25a354947e49fb0362bbc77a1ac73d944808e851", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/31c1999505ccb51584dee45fb9fa1ffe16b1608e/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c1999505ccb51584dee45fb9fa1ffe16b1608e/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=31c1999505ccb51584dee45fb9fa1ffe16b1608e", "patch": "@@ -156,6 +156,30 @@ impl S {\n     );\n }\n \n+#[test]\n+fn infer_boolean_op() {\n+    check_inference(\n+        r#\"\n+fn f(x: bool) -> i32 {\n+    0i32\n+}\n+\n+fn test() {\n+    let x = a && b;\n+    let y = true || false;\n+    let z = x == y;\n+    let h = CONST_1 <= CONST_2;\n+    let c = f(z || y) + 5;\n+    let d = b;\n+    let e = 3i32 && \"hello world\";\n+\n+    10 < 3\n+}\n+\"#,\n+        \"0008_boolean_op.txt\",\n+    );\n+}\n+\n fn infer(content: &str) -> String {\n     let (db, _, file_id) = MockDatabase::with_single_file(content);\n     let source_file = db.source_file(file_id);"}, {"sha": "ca01ad15934ecadc867d0ee18b2f281437b97222", "filename": "crates/ra_hir/src/ty/tests/data/0008_boolean_op.txt", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/31c1999505ccb51584dee45fb9fa1ffe16b1608e/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0008_boolean_op.txt", "raw_url": "https://github.com/rust-lang/rust/raw/31c1999505ccb51584dee45fb9fa1ffe16b1608e/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0008_boolean_op.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0008_boolean_op.txt?ref=31c1999505ccb51584dee45fb9fa1ffe16b1608e", "patch": "@@ -0,0 +1,31 @@\n+[28; 32) '0i32': i32\n+[22; 34) '{     0i32 }': i32\n+[6; 7) 'x': [unknown]\n+[127; 134) 'CONST_1': [unknown]\n+[201; 205) '3i32': bool\n+[76; 77) 'y': bool\n+[65; 66) 'b': bool\n+[60; 66) 'a && b': bool\n+[127; 145) 'CONST_...ONST_2': bool\n+[182; 183) 'd': [unknown]\n+[229; 231) '10': [unknown]\n+[209; 222) '\"hello world\"': bool\n+[229; 235) '10 < 3': bool\n+[186; 187) 'b': [unknown]\n+[159; 172) 'f(z || y) + 5': [unknown]\n+[56; 57) 'x': bool\n+[112; 113) 'y': bool\n+[201; 222) '3i32 &...world\"': bool\n+[234; 235) '3': [unknown]\n+[138; 145) 'CONST_2': [unknown]\n+[80; 93) 'true || false': bool\n+[46; 237) '{     ... < 3 }': bool\n+[197; 198) 'e': bool\n+[107; 113) 'x == y': bool\n+[88; 93) 'false': bool\n+[80; 84) 'true': bool\n+[123; 124) 'h': bool\n+[155; 156) 'c': [unknown]\n+[103; 104) 'z': bool\n+[60; 61) 'a': bool\n+[107; 108) 'x': bool"}, {"sha": "9df8ec6637f6a5b069cf5e964f9c33f596b8d8e1", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/31c1999505ccb51584dee45fb9fa1ffe16b1608e/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c1999505ccb51584dee45fb9fa1ffe16b1608e/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=31c1999505ccb51584dee45fb9fa1ffe16b1608e", "patch": "@@ -488,6 +488,58 @@ impl<'a> PrefixExpr<'a> {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum BinOp {\n+    /// The `||` operator for boolean OR\n+    BooleanOr,\n+    /// The `&&` operator for boolean AND\n+    BooleanAnd,\n+    /// The `==` operator for equality testing\n+    EqualityTest,\n+    /// The `<=` operator for lesser-equal testing\n+    LesserEqualTest,\n+    /// The `>=` operator for greater-equal testing\n+    GreaterEqualTest,\n+    /// The `<` operator for comparison\n+    LesserTest,\n+    /// The `>` operator for comparison\n+    GreaterTest,\n+    // TODO: lots of others\n+}\n+\n+impl<'a> BinExpr<'a> {\n+    pub fn op(&self) -> Option<BinOp> {\n+        self.syntax()\n+            .children()\n+            .filter_map(|c| match c.kind() {\n+                PIPEPIPE => Some(BinOp::BooleanOr),\n+                AMPAMP => Some(BinOp::BooleanAnd),\n+                EQEQ => Some(BinOp::EqualityTest),\n+                LTEQ => Some(BinOp::LesserEqualTest),\n+                GTEQ => Some(BinOp::GreaterEqualTest),\n+                L_ANGLE => Some(BinOp::LesserTest),\n+                R_ANGLE => Some(BinOp::GreaterTest),\n+                _ => None,\n+            })\n+            .next()\n+    }\n+\n+    pub fn lhs(self) -> Option<Expr<'a>> {\n+        children(self).nth(0)\n+    }\n+\n+    pub fn rhs(self) -> Option<Expr<'a>> {\n+        children(self).nth(1)\n+    }\n+\n+    pub fn sub_exprs(self) -> (Option<Expr<'a>>, Option<Expr<'a>>) {\n+        let mut children = children(self);\n+        let first = children.next();\n+        let second = children.next();\n+        (first, second)\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum SelfParamFlavor {\n     /// self"}]}