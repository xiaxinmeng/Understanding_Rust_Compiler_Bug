{"sha": "eb86913dcf72dcb628d9b5250aabd2da0ca7df49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViODY5MTNkY2Y3MmRjYjYyOGQ5YjUyNTBhYWJkMmRhMGNhN2RmNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-26T03:21:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-26T03:21:32Z"}, "message": "auto merge of #12505 : alexcrichton/rust/fix-stack-overflow, r=brson\n\nThe printing of the error message on stack overflow had two sometimes false\r\nassumptions previously. The first is that a local task was always available (it\r\ncalled Local::take) and the second is that it used `println!` instead of\r\nmanually writing.\r\n\r\nThe first assumption isn't necessarily true because while stack overflow will\r\nlikely only be detected in situations that a local task is available, it's not\r\nguaranteed to always be in TLS. For example, during a `println!` call a task\r\nmay be blocking, causing it to be unavailable. By using Local::try_take(), we\r\ncan be resilient against these occurrences.\r\n\r\nThe second assumption could lead to odd behavior because the stdout logger can\r\nbe overwritten to run arbitrary code. Currently this should be possible, but the\r\nutility is much diminished because a stack overflow translates to an abort()\r\ninstead of a failure.", "tree": {"sha": "fc178df8b5aa1ca3f9ed5fb24e7a69baafcc71fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc178df8b5aa1ca3f9ed5fb24e7a69baafcc71fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb86913dcf72dcb628d9b5250aabd2da0ca7df49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb86913dcf72dcb628d9b5250aabd2da0ca7df49", "html_url": "https://github.com/rust-lang/rust/commit/eb86913dcf72dcb628d9b5250aabd2da0ca7df49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb86913dcf72dcb628d9b5250aabd2da0ca7df49/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e1cfae94382734d9c75f49bbfe8a6896e98f8c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e1cfae94382734d9c75f49bbfe8a6896e98f8c3", "html_url": "https://github.com/rust-lang/rust/commit/2e1cfae94382734d9c75f49bbfe8a6896e98f8c3"}, {"sha": "4f4d43bf6cf6f36d5d0b3a1f890b1d88aec85538", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4d43bf6cf6f36d5d0b3a1f890b1d88aec85538", "html_url": "https://github.com/rust-lang/rust/commit/4f4d43bf6cf6f36d5d0b3a1f890b1d88aec85538"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "963ff000c4ad186ee5b278bfbc40fefb9e261a9c", "filename": "src/libstd/rt/stack.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb86913dcf72dcb628d9b5250aabd2da0ca7df49/src%2Flibstd%2Frt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb86913dcf72dcb628d9b5250aabd2da0ca7df49/src%2Flibstd%2Frt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fstack.rs?ref=eb86913dcf72dcb628d9b5250aabd2da0ca7df49", "patch": "@@ -36,7 +36,7 @@ pub static RED_ZONE: uint = 20 * 1024;\n                   //   irrelevant for documentation purposes.\n #[cfg(not(test))] // in testing, use the original libstd's version\n pub extern \"C\" fn rust_stack_exhausted() {\n-    use option::None;\n+    use option::{Option, None, Some};\n     use rt::local::Local;\n     use rt::task::Task;\n     use str::Str;\n@@ -85,16 +85,21 @@ pub extern \"C\" fn rust_stack_exhausted() {\n         //  #9854 - unwinding on windows through __morestack has never worked\n         //  #2361 - possible implementation of not using landing pads\n \n-        let mut task = Local::borrow(None::<Task>);\n-        let n = task.get().name.as_ref()\n-                    .map(|n| n.as_slice()).unwrap_or(\"<unnamed>\");\n+        let task: Option<~Task> = Local::try_take();\n+        let name = match task {\n+            Some(ref task) => {\n+                task.name.as_ref().map(|n| n.as_slice())\n+            }\n+            None => None\n+        };\n+        let name = name.unwrap_or(\"<unknown>\");\n \n         // See the message below for why this is not emitted to the\n         // task's logger. This has the additional conundrum of the\n         // logger may not be initialized just yet, meaning that an FFI\n         // call would happen to initialized it (calling out to libuv),\n         // and the FFI call needs 2MB of stack when we just ran out.\n-        println!(\"task '{}' has overflowed its stack\", n);\n+        rterrln!(\"task '{}' has overflowed its stack\", name);\n \n         intrinsics::abort();\n     }"}, {"sha": "9344c29d5ca2b51741ccb892493457bd8edecf7d", "filename": "src/test/run-pass/out-of-stack.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/eb86913dcf72dcb628d9b5250aabd2da0ca7df49/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb86913dcf72dcb628d9b5250aabd2da0ca7df49/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack.rs?ref=eb86913dcf72dcb628d9b5250aabd2da0ca7df49", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-fast\n+\n+#[feature(asm)];\n+\n+use std::io::Process;\n+use std::os;\n+use std::str;\n+\n+// lifted from the test module\n+pub fn black_box<T>(dummy: T) { unsafe { asm!(\"\" : : \"r\"(&dummy)) } }\n+\n+fn silent_recurse() {\n+    let buf = [0, ..1000];\n+    black_box(buf);\n+    silent_recurse();\n+}\n+\n+fn loud_recurse() {\n+    println!(\"hello!\");\n+    loud_recurse();\n+}\n+\n+fn main() {\n+    let args = os::args();\n+    if args.len() > 1 && args[1].as_slice() == \"silent\" {\n+        silent_recurse();\n+    } else if args.len() > 1 && args[1].as_slice() == \"loud\" {\n+        loud_recurse();\n+    } else {\n+        let silent = Process::output(args[0], [~\"silent\"]).unwrap();\n+        assert!(!silent.status.success());\n+        let error = str::from_utf8_lossy(silent.error);\n+        assert!(error.as_slice().contains(\"has overflowed its stack\"));\n+\n+        let loud = Process::output(args[0], [~\"loud\"]).unwrap();\n+        assert!(!loud.status.success());\n+        let error = str::from_utf8_lossy(silent.error);\n+        assert!(error.as_slice().contains(\"has overflowed its stack\"));\n+    }\n+}"}]}