{"sha": "a70ef4cb49295563a09b254de4751c016c79e262", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MGVmNGNiNDkyOTU1NjNhMDliMjU0ZGU0NzUxYzAxNmM3OWUyNjI=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-05-12T12:07:20Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-05-12T12:07:20Z"}, "message": "Set PrepareForThinLTO flag when using ThinLTO\n\nThe LLVM PassManager has a PrepareForThinLTO flag, which is intended\nwhen compilation occurs in conjunction with linking by ThinLTO. The\nflag has two effects:\n\n * The NameAnonGlobal pass is run after all other passes, which\n   ensures that all globals have a name.\n * In optimized builds, a number of late passes (mainly related to\n   vectorization and unrolling) are disabled, on the rationale that\n   these a) will increase codesize of the intermediate artifacts\n   and b) will be run by ThinLTO again anyway.\n\nThis patch enables the use of PrepareForThinLTO if Thin or ThinLocal\nlinking is used.\n\nThe background for this change is the CI failure in #49479, which\nwe assume to be caused by the NameAnonGlobal pass not being run.\nAs this changes which passes LLVM runs, this might have performance\n(or other) impact, so we want to land this separately.", "tree": {"sha": "9f326ad2710a9d1d9d698ec6096a3a9a11a38264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f326ad2710a9d1d9d698ec6096a3a9a11a38264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a70ef4cb49295563a09b254de4751c016c79e262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a70ef4cb49295563a09b254de4751c016c79e262", "html_url": "https://github.com/rust-lang/rust/commit/a70ef4cb49295563a09b254de4751c016c79e262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a70ef4cb49295563a09b254de4751c016c79e262/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c705877b1df780acfb2dcba4ebca6f30102dd8a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c705877b1df780acfb2dcba4ebca6f30102dd8a2", "html_url": "https://github.com/rust-lang/rust/commit/c705877b1df780acfb2dcba4ebca6f30102dd8a2"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "c1e32c7c0226ed94898566f5e3423e9579563392", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a70ef4cb49295563a09b254de4751c016c79e262/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70ef4cb49295563a09b254de4751c016c79e262/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=a70ef4cb49295563a09b254de4751c016c79e262", "patch": "@@ -1651,6 +1651,7 @@ extern \"C\" {\n                                                MergeFunctions: bool,\n                                                SLPVectorize: bool,\n                                                LoopVectorize: bool,\n+                                               PrepareForThinLTO: bool,\n                                                PGOGenPath: *const c_char,\n                                                PGOUsePath: *const c_char);\n     pub fn LLVMRustAddLibraryInfo(PM: PassManagerRef,"}, {"sha": "bbb5f7eecc82c28223cd4e6edad47cca48769d17", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a70ef4cb49295563a09b254de4751c016c79e262/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70ef4cb49295563a09b254de4751c016c79e262/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=a70ef4cb49295563a09b254de4751c016c79e262", "patch": "@@ -482,7 +482,7 @@ fn run_pass_manager(cgcx: &CodegenContext,\n             llvm::CodeGenOptLevel::None => llvm::CodeGenOptLevel::Less,\n             level => level,\n         };\n-        with_llvm_pmb(llmod, config, opt_level, &mut |b| {\n+        with_llvm_pmb(llmod, config, opt_level, false, &mut |b| {\n             if thin {\n                 if !llvm::LLVMRustPassManagerBuilderPopulateThinLTOPassManager(b, pm) {\n                     panic!(\"this version of LLVM does not support ThinLTO\");"}, {"sha": "57fe0729375f67f2ccf5f57301b3ea89922f6146", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a70ef4cb49295563a09b254de4751c016c79e262/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70ef4cb49295563a09b254de4751c016c79e262/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=a70ef4cb49295563a09b254de4751c016c79e262", "patch": "@@ -547,7 +547,8 @@ unsafe fn optimize(cgcx: &CodegenContext,\n             llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n             llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n             let opt_level = config.opt_level.unwrap_or(llvm::CodeGenOptLevel::None);\n-            with_llvm_pmb(llmod, &config, opt_level, &mut |b| {\n+            let prepare_for_thin_lto = cgcx.lto == Lto::Thin || cgcx.lto == Lto::ThinLocal;\n+            with_llvm_pmb(llmod, &config, opt_level, prepare_for_thin_lto, &mut |b| {\n                 llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(b, fpm);\n                 llvm::LLVMPassManagerBuilderPopulateModulePassManager(b, mpm);\n             })\n@@ -2042,6 +2043,7 @@ pub fn run_assembler(cgcx: &CodegenContext, handler: &Handler, assembly: &Path,\n pub unsafe fn with_llvm_pmb(llmod: ModuleRef,\n                             config: &ModuleConfig,\n                             opt_level: llvm::CodeGenOptLevel,\n+                            prepare_for_thin_lto: bool,\n                             f: &mut FnMut(llvm::PassManagerBuilderRef)) {\n     use std::ptr;\n \n@@ -2069,6 +2071,7 @@ pub unsafe fn with_llvm_pmb(llmod: ModuleRef,\n         config.merge_functions,\n         config.vectorize_slp,\n         config.vectorize_loop,\n+        prepare_for_thin_lto,\n         pgo_gen_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n         pgo_use_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n     );"}, {"sha": "8593f543619a59ba5aa1b4e0db00bfaa9e20e3b2", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a70ef4cb49295563a09b254de4751c016c79e262/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a70ef4cb49295563a09b254de4751c016c79e262/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=a70ef4cb49295563a09b254de4751c016c79e262", "patch": "@@ -428,13 +428,16 @@ extern \"C\" void LLVMRustAddAnalysisPasses(LLVMTargetMachineRef TM,\n \n extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n     LLVMPassManagerBuilderRef PMBR, LLVMRustCodeGenOptLevel OptLevel,\n-    bool MergeFunctions, bool SLPVectorize, bool LoopVectorize,\n+    bool MergeFunctions, bool SLPVectorize, bool LoopVectorize, bool PrepareForThinLTO,\n     const char* PGOGenPath, const char* PGOUsePath) {\n   // Ignore mergefunc for now as enabling it causes crashes.\n   // unwrap(PMBR)->MergeFunctions = MergeFunctions;\n   unwrap(PMBR)->SLPVectorize = SLPVectorize;\n   unwrap(PMBR)->OptLevel = fromRust(OptLevel);\n   unwrap(PMBR)->LoopVectorize = LoopVectorize;\n+#if LLVM_VERSION_GE(4, 0)\n+  unwrap(PMBR)->PrepareForThinLTO = PrepareForThinLTO;\n+#endif\n \n #ifdef PGO_AVAILABLE\n   if (PGOGenPath) {"}]}