{"sha": "977f26f692790fa2d024e9f3d726d34c0fd3616d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3N2YyNmY2OTI3OTBmYTJkMDI0ZTlmM2Q3MjZkMzRjMGZkMzYxNmQ=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-04-17T17:00:14Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-04-17T17:00:14Z"}, "message": "Add some common shuffles", "tree": {"sha": "3895a712fca25820ed71cbf3c0955153cb22a789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3895a712fca25820ed71cbf3c0955153cb22a789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/977f26f692790fa2d024e9f3d726d34c0fd3616d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/977f26f692790fa2d024e9f3d726d34c0fd3616d", "html_url": "https://github.com/rust-lang/rust/commit/977f26f692790fa2d024e9f3d726d34c0fd3616d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/977f26f692790fa2d024e9f3d726d34c0fd3616d/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e73985f25d1616c48caf9f66786320f05cc0b1db", "url": "https://api.github.com/repos/rust-lang/rust/commits/e73985f25d1616c48caf9f66786320f05cc0b1db", "html_url": "https://github.com/rust-lang/rust/commit/e73985f25d1616c48caf9f66786320f05cc0b1db"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "4f7ffd3a9554018adfa8a82c527890a04bd79db7", "filename": "crates/core_simd/src/permute.rs", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/977f26f692790fa2d024e9f3d726d34c0fd3616d/crates%2Fcore_simd%2Fsrc%2Fpermute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977f26f692790fa2d024e9f3d726d34c0fd3616d/crates%2Fcore_simd%2Fsrc%2Fpermute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fpermute.rs?ref=977f26f692790fa2d024e9f3d726d34c0fd3616d", "patch": "@@ -13,6 +13,89 @@ macro_rules! impl_shuffle_lane {\n             pub fn shuffle<const IDX: [u32; $n]>(self, second: Self) -> Self {\n                 unsafe { crate::intrinsics::$fn(self, second, IDX) }\n             }\n+\n+            /// Reverse the order of the lanes in the vector.\n+            #[inline]\n+            pub fn reverse(self) -> Self {\n+                const fn idx() -> [u32; $n] {\n+                    let mut idx = [0u32; $n];\n+                    let mut i = 0;\n+                    while i < $n {\n+                        idx[i] = ($n - i - 1) as u32;\n+                        i += 1;\n+                    }\n+                    idx\n+                }\n+                self.shuffle::<{ idx() }>(self)\n+            }\n+\n+            /// Interleave two vectors.\n+            ///\n+            /// The even lanes of the first result contain the lower half of `self`, and the odd\n+            /// lanes contain the lower half of `other`.\n+            ///\n+            /// The even lanes of the second result contain the upper half of `self`, and the odd\n+            /// lanes contain the upper half of `other`.\n+            #[inline]\n+            pub fn interleave(self, other: Self) -> (Self, Self) {\n+                const fn lo() -> [u32; $n] {\n+                    let mut idx = [0u32; $n];\n+                    let mut i = 0;\n+                    while i < $n {\n+                        let offset = i / 2;\n+                        idx[i] = if i % 2 == 0 {\n+                            offset\n+                        } else {\n+                            $n + offset\n+                        } as u32;\n+                        i += 1;\n+                    }\n+                    idx\n+                }\n+                const fn hi() -> [u32; $n] {\n+                    let mut idx = [0u32; $n];\n+                    let mut i = 0;\n+                    while i < $n {\n+                        let offset = ($n + i) / 2;\n+                        idx[i] = if i % 2 == 0 {\n+                            offset\n+                        } else {\n+                            $n + offset\n+                        } as u32;\n+                        i += 1;\n+                    }\n+                    idx\n+                }\n+                (self.shuffle::<{ lo() }>(other), self.shuffle::<{ hi() }>(other))\n+            }\n+\n+            /// Deinterleave two vectors.\n+            ///\n+            /// The first result contains the even lanes of `self` and `other` concatenated.\n+            ///\n+            /// The second result contains the odd lanes of `self` and `other` concatenated.\n+            #[inline]\n+            pub fn deinterleave(self, other: Self) -> (Self, Self) {\n+                const fn even() -> [u32; $n] {\n+                    let mut idx = [0u32; $n];\n+                    let mut i = 0;\n+                    while i < $n {\n+                        idx[i] = 2 * i as u32;\n+                        i += 1;\n+                    }\n+                    idx\n+                }\n+                const fn odd() -> [u32; $n] {\n+                    let mut idx = [0u32; $n];\n+                    let mut i = 0;\n+                    while i < $n {\n+                        idx[i] = 1 + 2 * i as u32;\n+                        i += 1;\n+                    }\n+                    idx\n+                }\n+                (self.shuffle::<{ even() }>(other), self.shuffle::<{ odd() }>(other))\n+            }\n         }\n     }\n }"}, {"sha": "2be43c9cf3cea6457c06ee47696c260786d8275e", "filename": "crates/core_simd/tests/permute.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/977f26f692790fa2d024e9f3d726d34c0fd3616d/crates%2Fcore_simd%2Ftests%2Fpermute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977f26f692790fa2d024e9f3d726d34c0fd3616d/crates%2Fcore_simd%2Ftests%2Fpermute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fpermute.rs?ref=977f26f692790fa2d024e9f3d726d34c0fd3616d", "patch": "@@ -13,3 +13,23 @@ fn simple_shuffle() {\n     let b = a;\n     assert_eq!(a.shuffle::<{ [3, 1, 4, 6] }>(b).to_array(), [9, 4, 2, 1]);\n }\n+\n+#[test]\n+#[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n+fn reverse() {\n+    let a = SimdU32::from_array([0, 1, 2, 3, 4, 5, 6, 7]);\n+    assert_eq!(a.reverse().to_array(), [7, 6, 5, 4, 3, 2, 1, 0]);\n+}\n+\n+#[test]\n+#[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n+fn interleave() {\n+    let a = SimdU32::from_array([0, 1, 2, 3, 4, 5, 6, 7]);\n+    let b = SimdU32::from_array([8, 9, 10, 11, 12, 13, 14, 15]);\n+    let (lo, hi) = a.interleave(b);\n+    assert_eq!(lo.to_array(), [0, 8, 1, 9, 2, 10, 3, 11]);\n+    assert_eq!(hi.to_array(), [4, 12, 5, 13, 6, 14, 7, 15]);\n+    let (even, odd) = lo.deinterleave(hi);\n+    assert_eq!(even, a);\n+    assert_eq!(odd, b);\n+}"}]}