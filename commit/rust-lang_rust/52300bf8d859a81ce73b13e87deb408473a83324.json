{"sha": "52300bf8d859a81ce73b13e87deb408473a83324", "node_id": "C_kwDOAAsO6NoAKDUyMzAwYmY4ZDg1OWE4MWNlNzNiMTNlODdkZWI0MDg0NzNhODMzMjQ", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-12T17:30:15Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-06-08T09:41:34Z"}, "message": "Uplift clippy::undropped_manually_drops to rustc", "tree": {"sha": "b672b77ecd5b156c9d5b85e615cd98d666a15821", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b672b77ecd5b156c9d5b85e615cd98d666a15821"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52300bf8d859a81ce73b13e87deb408473a83324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52300bf8d859a81ce73b13e87deb408473a83324", "html_url": "https://github.com/rust-lang/rust/commit/52300bf8d859a81ce73b13e87deb408473a83324", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52300bf8d859a81ce73b13e87deb408473a83324/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9baa16482ba4100df529ccba39c787f27ad0475", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9baa16482ba4100df529ccba39c787f27ad0475", "html_url": "https://github.com/rust-lang/rust/commit/a9baa16482ba4100df529ccba39c787f27ad0475"}], "stats": {"total": 128, "additions": 126, "deletions": 2}, "files": [{"sha": "51eb8210d46d5bb706a0b81797482ea2e70784b5", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52300bf8d859a81ce73b13e87deb408473a83324/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/52300bf8d859a81ce73b13e87deb408473a83324/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=52300bf8d859a81ce73b13e87deb408473a83324", "patch": "@@ -492,6 +492,10 @@ lint_tykind = usage of `ty::TyKind`\n lint_tykind_kind = usage of `ty::TyKind::<kind>`\n     .suggestion = try using `ty::<kind>` directly\n \n+lint_undropped_manually_drops = calls to `std::mem::drop` with `std::mem::ManuallyDrop` instead of the inner value does nothing\n+    .label = argument has type `{$arg_ty}`\n+    .suggestion = use `std::mem::ManuallyDrop::into_inner` to get the inner value\n+\n lint_ungated_async_fn_track_caller = `#[track_caller]` on async functions is a no-op\n      .label = this function will not propagate the caller location\n "}, {"sha": "4cea6169dc3d98d6fce91dbb70dd75ef35ef395a", "filename": "compiler/rustc_lint/src/drop_forget_useless.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/52300bf8d859a81ce73b13e87deb408473a83324/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52300bf8d859a81ce73b13e87deb408473a83324/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs?ref=52300bf8d859a81ce73b13e87deb408473a83324", "patch": "@@ -1,8 +1,12 @@\n use rustc_hir::{Arm, Expr, ExprKind, Node};\n+use rustc_middle::ty;\n use rustc_span::sym;\n \n use crate::{\n-    lints::{DropCopyDiag, DropRefDiag, ForgetCopyDiag, ForgetRefDiag},\n+    lints::{\n+        DropCopyDiag, DropRefDiag, ForgetCopyDiag, ForgetRefDiag, UndroppedManuallyDropsDiag,\n+        UndroppedManuallyDropsSuggestion,\n+    },\n     LateContext, LateLintPass, LintContext,\n };\n \n@@ -109,7 +113,29 @@ declare_lint! {\n     \"calls to `std::mem::forget` with a value that implements Copy\"\n }\n \n-declare_lint_pass!(DropForgetUseless => [DROPPING_REFERENCES, FORGETTING_REFERENCES, DROPPING_COPY_TYPES, FORGETTING_COPY_TYPES]);\n+declare_lint! {\n+    /// The `undropped_manually_drops` lint check for calls to `std::mem::drop` with\n+    /// a value of `std::mem::ManuallyDrop` which doesn't drop.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// struct S;\n+    /// drop(std::mem::ManuallyDrop::new(S));\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// `ManuallyDrop` does not drop it's inner value so calling `std::mem::drop` will\n+    /// not drop the inner value of the `ManuallyDrop` either.\n+    pub UNDROPPED_MANUALLY_DROPS,\n+    Deny,\n+    \"calls to `std::mem::drop` with `std::mem::ManuallyDrop` instead of it's inner value\"\n+}\n+\n+declare_lint_pass!(DropForgetUseless => [DROPPING_REFERENCES, FORGETTING_REFERENCES, DROPPING_COPY_TYPES, FORGETTING_COPY_TYPES, UNDROPPED_MANUALLY_DROPS]);\n \n impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n@@ -134,6 +160,20 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n                 sym::mem_forget if is_copy => {\n                     cx.emit_spanned_lint(FORGETTING_COPY_TYPES, expr.span, ForgetCopyDiag { arg_ty, label: arg.span });\n                 }\n+                sym::mem_drop if let ty::Adt(adt, _) = arg_ty.kind() && adt.is_manually_drop() => {\n+                    cx.emit_spanned_lint(\n+                        UNDROPPED_MANUALLY_DROPS,\n+                        expr.span,\n+                        UndroppedManuallyDropsDiag {\n+                            arg_ty,\n+                            label: arg.span,\n+                            suggestion: UndroppedManuallyDropsSuggestion {\n+                                start_span: arg.span.shrink_to_lo(),\n+                                end_span: arg.span.shrink_to_hi()\n+                            }\n+                        }\n+                    );\n+                }\n                 _ => return,\n             };\n         }"}, {"sha": "03dbffcc2c435dc8f5e376bcdc919d8e3b2c8106", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/52300bf8d859a81ce73b13e87deb408473a83324/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52300bf8d859a81ce73b13e87deb408473a83324/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=52300bf8d859a81ce73b13e87deb408473a83324", "patch": "@@ -699,6 +699,25 @@ pub struct ForgetCopyDiag<'a> {\n     pub label: Span,\n }\n \n+#[derive(LintDiagnostic)]\n+#[diag(lint_undropped_manually_drops)]\n+pub struct UndroppedManuallyDropsDiag<'a> {\n+    pub arg_ty: Ty<'a>,\n+    #[label]\n+    pub label: Span,\n+    #[subdiagnostic]\n+    pub suggestion: UndroppedManuallyDropsSuggestion,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(lint_suggestion, applicability = \"machine-applicable\")]\n+pub struct UndroppedManuallyDropsSuggestion {\n+    #[suggestion_part(code = \"std::mem::ManuallyDrop::into_inner(\")]\n+    pub start_span: Span,\n+    #[suggestion_part(code = \")\")]\n+    pub end_span: Span,\n+}\n+\n // invalid_from_utf8.rs\n #[derive(LintDiagnostic)]\n pub enum InvalidFromUtf8Diag {"}, {"sha": "7286121a4048323ccf31d356e5cd12fe09737529", "filename": "tests/ui/lint/undropped_manually_drops.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/52300bf8d859a81ce73b13e87deb408473a83324/tests%2Fui%2Flint%2Fundropped_manually_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52300bf8d859a81ce73b13e87deb408473a83324/tests%2Fui%2Flint%2Fundropped_manually_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fundropped_manually_drops.rs?ref=52300bf8d859a81ce73b13e87deb408473a83324", "patch": "@@ -0,0 +1,19 @@\n+// check-fail\n+\n+struct S;\n+\n+fn main() {\n+    let mut manual1 = std::mem::ManuallyDrop::new(S);\n+    let mut manual2 = std::mem::ManuallyDrop::new(S);\n+    let mut manual3 = std::mem::ManuallyDrop::new(S);\n+\n+    drop(std::mem::ManuallyDrop::new(S)); //~ ERROR calls to `std::mem::drop`\n+    drop(manual1); //~ ERROR calls to `std::mem::drop`\n+    drop({ manual3 }); //~ ERROR calls to `std::mem::drop`\n+\n+    // These lines will drop `S` and should be okay.\n+    unsafe {\n+        std::mem::ManuallyDrop::drop(&mut std::mem::ManuallyDrop::new(S));\n+        std::mem::ManuallyDrop::drop(&mut manual2);\n+    }\n+}"}, {"sha": "156b647ebd3a77756ce05047e2a3fb2407bbc551", "filename": "tests/ui/lint/undropped_manually_drops.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/52300bf8d859a81ce73b13e87deb408473a83324/tests%2Fui%2Flint%2Fundropped_manually_drops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52300bf8d859a81ce73b13e87deb408473a83324/tests%2Fui%2Flint%2Fundropped_manually_drops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fundropped_manually_drops.stderr?ref=52300bf8d859a81ce73b13e87deb408473a83324", "patch": "@@ -0,0 +1,42 @@\n+error: calls to `std::mem::drop` with `std::mem::ManuallyDrop` instead of the inner value does nothing\n+  --> $DIR/undropped_manually_drops.rs:10:5\n+   |\n+LL |     drop(std::mem::ManuallyDrop::new(S));\n+   |     ^^^^^------------------------------^\n+   |          |\n+   |          argument has type `ManuallyDrop<S>`\n+   |\n+   = note: `#[deny(undropped_manually_drops)]` on by default\n+help: use `std::mem::ManuallyDrop::into_inner` to get the inner value\n+   |\n+LL |     drop(std::mem::ManuallyDrop::into_inner(std::mem::ManuallyDrop::new(S)));\n+   |          +++++++++++++++++++++++++++++++++++                              +\n+\n+error: calls to `std::mem::drop` with `std::mem::ManuallyDrop` instead of the inner value does nothing\n+  --> $DIR/undropped_manually_drops.rs:11:5\n+   |\n+LL |     drop(manual1);\n+   |     ^^^^^-------^\n+   |          |\n+   |          argument has type `ManuallyDrop<S>`\n+   |\n+help: use `std::mem::ManuallyDrop::into_inner` to get the inner value\n+   |\n+LL |     drop(std::mem::ManuallyDrop::into_inner(manual1));\n+   |          +++++++++++++++++++++++++++++++++++       +\n+\n+error: calls to `std::mem::drop` with `std::mem::ManuallyDrop` instead of the inner value does nothing\n+  --> $DIR/undropped_manually_drops.rs:12:5\n+   |\n+LL |     drop({ manual3 });\n+   |     ^^^^^-----------^\n+   |          |\n+   |          argument has type `ManuallyDrop<S>`\n+   |\n+help: use `std::mem::ManuallyDrop::into_inner` to get the inner value\n+   |\n+LL |     drop(std::mem::ManuallyDrop::into_inner({ manual3 }));\n+   |          +++++++++++++++++++++++++++++++++++           +\n+\n+error: aborting due to 3 previous errors\n+"}]}