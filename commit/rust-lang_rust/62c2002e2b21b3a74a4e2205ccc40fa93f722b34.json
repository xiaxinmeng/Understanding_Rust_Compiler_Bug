{"sha": "62c2002e2b21b3a74a4e2205ccc40fa93f722b34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYzIwMDJlMmIyMWIzYTc0YTRlMjIwNWNjYzQwZmE5M2Y3MjJiMzQ=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2019-08-11T12:47:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-25T09:55:55Z"}, "message": "Add test that ok-wrapping handles type aliases", "tree": {"sha": "d0cce1d3a5b5e9002c8bf377a63f5b28fcc3b80b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0cce1d3a5b5e9002c8bf377a63f5b28fcc3b80b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62c2002e2b21b3a74a4e2205ccc40fa93f722b34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62c2002e2b21b3a74a4e2205ccc40fa93f722b34", "html_url": "https://github.com/rust-lang/rust/commit/62c2002e2b21b3a74a4e2205ccc40fa93f722b34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62c2002e2b21b3a74a4e2205ccc40fa93f722b34/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d025016f92866a932729394c22603b615cb458df", "url": "https://api.github.com/repos/rust-lang/rust/commits/d025016f92866a932729394c22603b615cb458df", "html_url": "https://github.com/rust-lang/rust/commit/d025016f92866a932729394c22603b615cb458df"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "5e25991c6241779a8a2388c085dedb22e151fdec", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/62c2002e2b21b3a74a4e2205ccc40fa93f722b34/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c2002e2b21b3a74a4e2205ccc40fa93f722b34/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=62c2002e2b21b3a74a4e2205ccc40fa93f722b34", "patch": "@@ -281,6 +281,44 @@ fn div(x: i32, y: i32) -> Result<i32, String> {\n         check_apply_diagnostic_fix_for_target_file(\"/main.rs\", before, after);\n     }\n \n+    #[test]\n+    fn test_wrap_return_type_handles_type_aliases() {\n+        let before = r#\"\n+            //- /main.rs\n+            use std::{string::String, result::Result::{self, Ok, Err}};\n+\n+            type MyResult<T> = Result<T, String>;\n+\n+            fn div(x: i32, y: i32) -> MyResult<i32> {\n+                if y == 0 {\n+                    return Err(\"div by zero\".into());\n+                }\n+                x / y\n+            }\n+\n+            //- /std/lib.rs\n+            pub mod string {\n+                pub struct String { }\n+            }\n+            pub mod result {\n+                pub enum Result<T, E> { Ok(T), Err(E) }\n+            }\n+        \"#;\n+// The formatting here is a bit odd due to how the parse_fixture function works in test_utils -\n+// it strips empty lines and leading whitespace. The important part of this test is that the final\n+// `x / y` expr is now wrapped in `Ok(..)`\n+        let after = r#\"use std::{string::String, result::Result::{self, Ok, Err}};\n+type MyResult<T> = Result<T, String>;\n+fn div(x: i32, y: i32) -> MyResult<i32> {\n+    if y == 0 {\n+        return Err(\"div by zero\".into());\n+    }\n+    Ok(x / y)\n+}\n+\"#;\n+        check_apply_diagnostic_fix_for_target_file(\"/main.rs\", before, after);\n+    }\n+\n     #[test]\n     fn test_wrap_return_type_not_applicable() {\n         let content = r#\""}]}