{"sha": "e3f2edc75bf2becb57d7d770bba20606da1c4224", "node_id": "C_kwDOAAsO6NoAKGUzZjJlZGM3NWJmMmJlY2I1N2Q3ZDc3MGJiYTIwNjA2ZGExYzQyMjQ", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-10-31T01:01:24Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-04-06T08:34:16Z"}, "message": "Rename `Abort` terminator to `Terminate`\n\nUnify terminology used in unwind action and terminator, and reflect\nthe fact that a nounwind panic is triggered instead of an immediate\nabort is triggered for this terminator.", "tree": {"sha": "e9a882f5219677941d8a0c5112e65a32b28b746f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9a882f5219677941d8a0c5112e65a32b28b746f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3f2edc75bf2becb57d7d770bba20606da1c4224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f2edc75bf2becb57d7d770bba20606da1c4224", "html_url": "https://github.com/rust-lang/rust/commit/e3f2edc75bf2becb57d7d770bba20606da1c4224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3f2edc75bf2becb57d7d770bba20606da1c4224/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a5dac3062ffc80a283943e49e2ada08f0b0eaf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5dac3062ffc80a283943e49e2ada08f0b0eaf7", "html_url": "https://github.com/rust-lang/rust/commit/0a5dac3062ffc80a283943e49e2ada08f0b0eaf7"}], "stats": {"total": 179, "additions": 112, "deletions": 67}, "files": [{"sha": "498d254da65361bbfbf1b87c3a24089caab15304", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -198,7 +198,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 }\n             }\n             TerminatorKind::Goto { target: _ }\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Unreachable\n             | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }\n             | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {"}, {"sha": "3d876155fc9521ba82d0d57d2fa53f4008a6d31d", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -801,7 +801,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n             }\n \n             TerminatorKind::Goto { target: _ }\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Resume\n             | TerminatorKind::Return\n@@ -845,7 +845,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                 }\n             }\n \n-            TerminatorKind::Abort\n+            TerminatorKind::Terminate\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::Drop { .. }"}, {"sha": "fb80552304236f4fa2fb37032227c86c69feb42d", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -1300,7 +1300,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         match &term.kind {\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Unreachable\n@@ -1584,7 +1584,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     span_mirbug!(self, block_data, \"resume on non-cleanup block!\")\n                 }\n             }\n-            TerminatorKind::Abort => {\n+            TerminatorKind::Terminate => {\n                 if !is_cleanup {\n                     span_mirbug!(self, block_data, \"abort on non-cleanup block!\")\n                 }"}, {"sha": "f5301f9f7f10b30077d16892c01b8a77d5a35d49", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -488,7 +488,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                     *destination,\n                 );\n             }\n-            TerminatorKind::Abort => {\n+            TerminatorKind::Terminate => {\n                 codegen_panic_cannot_unwind(fx, source_info);\n             }\n             TerminatorKind::Resume => {"}, {"sha": "e87f4e258911a60f807d22319155e7cc95e2881f", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -549,7 +549,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                     TerminatorKind::Goto { .. }\n                     | TerminatorKind::SwitchInt { .. }\n                     | TerminatorKind::Resume\n-                    | TerminatorKind::Abort\n+                    | TerminatorKind::Terminate\n                     | TerminatorKind::Return\n                     | TerminatorKind::Unreachable\n                     | TerminatorKind::Drop { .. }"}, {"sha": "115a41050d2a3f5804896a3c1e39e9c0c3e929e2", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -284,7 +284,7 @@ pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKi\n             match data.terminator().kind {\n                 TerminatorKind::Goto { .. }\n                 | TerminatorKind::Resume\n-                | TerminatorKind::Abort\n+                | TerminatorKind::Terminate\n                 | TerminatorKind::Return\n                 | TerminatorKind::GeneratorDrop\n                 | TerminatorKind::Unreachable"}, {"sha": "65b20142efee56c069ff5f6a324adebf4fc64eba", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -630,7 +630,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         MergingSucc::False\n     }\n \n-    fn codegen_abort_terminator(\n+    fn codegen_terminate_terminator(\n         &mut self,\n         helper: TerminatorCodegenHelper<'tcx>,\n         bx: &mut Bx,\n@@ -1263,8 +1263,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 MergingSucc::False\n             }\n \n-            mir::TerminatorKind::Abort => {\n-                self.codegen_abort_terminator(helper, bx, terminator);\n+            mir::TerminatorKind::Terminate => {\n+                self.codegen_terminate_terminator(helper, bx, terminator);\n                 MergingSucc::False\n             }\n "}, {"sha": "c06b534451460b9baa881d3d76e734c2454512f6", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -73,7 +73,7 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     /// Cached unreachable block\n     unreachable_block: Option<Bx::BasicBlock>,\n \n-    /// Cached double unwind guarding block\n+    /// Cached terminate upon unwinding block\n     terminate_block: Option<Bx::BasicBlock>,\n \n     /// The location where each MIR arg/var/tmp/ret is stored. This is"}, {"sha": "0291cca7378a4543b3da851a6bbe2550a2f4a6be", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -218,7 +218,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         unwind: mir::UnwindAction,\n     ) -> InterpResult<'tcx>;\n \n-    /// Called to evaluate `Abort` MIR terminator.\n+    /// Called to abort evaluation.\n     fn abort(_ecx: &mut InterpCx<'mir, 'tcx, Self>, _msg: String) -> InterpResult<'tcx, !> {\n         throw_unsup_format!(\"aborting execution is not supported\")\n     }"}, {"sha": "eef5518a1f83463dd3574f3ea7eaac7075a02689", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -144,7 +144,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 }\n             }\n \n-            Abort => {\n+            Terminate => {\n                 M::abort(self, \"the program aborted execution\".to_owned())?;\n             }\n "}, {"sha": "9dad947905397e87f561ad07bdb3c45ba2817f63", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -1031,9 +1031,9 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 self.check_op(ops::Generator(hir::GeneratorKind::Gen))\n             }\n \n-            TerminatorKind::Abort => {\n+            TerminatorKind::Terminate => {\n                 // Cleanup blocks are skipped for const checking (see `visit_basic_block_data`).\n-                span_bug!(self.span, \"`Abort` terminator outside of cleanup block\")\n+                span_bug!(self.span, \"`Terminate` terminator outside of cleanup block\")\n             }\n \n             TerminatorKind::Assert { .. }"}, {"sha": "1f1640fd80ae61b1b12ef47302e75482e34c3734", "filename": "compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -104,7 +104,7 @@ impl<'tcx> Visitor<'tcx> for CheckLiveDrops<'_, 'tcx> {\n                 }\n             }\n \n-            mir::TerminatorKind::Abort\n+            mir::TerminatorKind::Terminate\n             | mir::TerminatorKind::Call { .. }\n             | mir::TerminatorKind::Assert { .. }\n             | mir::TerminatorKind::FalseEdge { .. }"}, {"sha": "18372b5df011a97bf6dea023720cd769d438e307", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -1015,10 +1015,13 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n-            TerminatorKind::Resume | TerminatorKind::Abort => {\n+            TerminatorKind::Resume | TerminatorKind::Terminate => {\n                 let bb = location.block;\n                 if !self.body.basic_blocks[bb].is_cleanup {\n-                    self.fail(location, \"Cannot `Resume` or `Abort` from non-cleanup basic block\")\n+                    self.fail(\n+                        location,\n+                        \"Cannot `Resume` or `Terminate` from non-cleanup basic block\",\n+                    )\n                 }\n             }\n             TerminatorKind::Return => {"}, {"sha": "d7e699e085db31fe11f48fe5dec360f275941921", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -37,7 +37,19 @@ impl<'tcx> MirPatch<'tcx> {\n             // Check if we already have a resume block\n             if let TerminatorKind::Resume = block.terminator().kind && block.statements.is_empty() {\n                 result.resume_block = Some(bb);\n-                break;\n+                continue;\n+            }\n+\n+            // Check if we already have an unreachable block\n+            if let TerminatorKind::Unreachable = block.terminator().kind && block.statements.is_empty() {\n+                result.unreachable_block = Some(bb);\n+                continue;\n+            }\n+\n+            // Check if we already have a terminate block\n+            if let TerminatorKind::Terminate = block.terminator().kind && block.statements.is_empty() {\n+                result.terminate_block = Some(bb);\n+                continue;\n             }\n         }\n \n@@ -61,6 +73,40 @@ impl<'tcx> MirPatch<'tcx> {\n         bb\n     }\n \n+    pub fn unreachable_block(&mut self) -> BasicBlock {\n+        if let Some(bb) = self.unreachable_block {\n+            return bb;\n+        }\n+\n+        let bb = self.new_block(BasicBlockData {\n+            statements: vec![],\n+            terminator: Some(Terminator {\n+                source_info: SourceInfo::outermost(self.body_span),\n+                kind: TerminatorKind::Unreachable,\n+            }),\n+            is_cleanup: true,\n+        });\n+        self.unreachable_block = Some(bb);\n+        bb\n+    }\n+\n+    pub fn terminate_block(&mut self) -> BasicBlock {\n+        if let Some(bb) = self.terminate_block {\n+            return bb;\n+        }\n+\n+        let bb = self.new_block(BasicBlockData {\n+            statements: vec![],\n+            terminator: Some(Terminator {\n+                source_info: SourceInfo::outermost(self.body_span),\n+                kind: TerminatorKind::Terminate,\n+            }),\n+            is_cleanup: true,\n+        });\n+        self.terminate_block = Some(bb);\n+        bb\n+    }\n+\n     pub fn is_patched(&self, bb: BasicBlock) -> bool {\n         self.patch_map[bb].is_some()\n     }"}, {"sha": "2165403da2671a2fb3dd15fd218bb0b0b2327417", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -262,7 +262,7 @@ pub fn terminator_kind_name(term: &Terminator<'_>) -> &'static str {\n         Goto { .. } => \"Goto\",\n         SwitchInt { .. } => \"SwitchInt\",\n         Resume => \"Resume\",\n-        Abort => \"Abort\",\n+        Terminate => \"Terminate\",\n         Return => \"Return\",\n         Unreachable => \"Unreachable\",\n         Drop { .. } => \"Drop\","}, {"sha": "2dfa116ecefc917b316c571fc961ce86f12929e6", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -522,8 +522,8 @@ pub struct CopyNonOverlapping<'tcx> {\n ///\n /// The basic block pointed to by a `Cleanup` unwind action must have its `cleanup` flag set.\n /// `cleanup` basic blocks have a couple restrictions:\n-///  1. All `unwind` fields in them must be `UnwindAction::Continue`.\n-///  2. `Return` terminators are not allowed in them. `Abort` and `Unwind` terminators are.\n+///  1. All `unwind` fields in them must be `UnwindAction::Terminate` or `UnwindAction::Unreachable`.\n+///  2. `Return` terminators are not allowed in them. `Terminate` and `Unwind` terminators are.\n ///  3. All other basic blocks (in the current body) that are reachable from `cleanup` basic blocks\n ///     must also be `cleanup`. This is a part of the type system and checked statically, so it is\n ///     still an error to have such an edge in the CFG even if it's known that it won't be taken at\n@@ -565,11 +565,11 @@ pub enum TerminatorKind<'tcx> {\n     /// deaggregation runs.\n     Resume,\n \n-    /// Indicates that the landing pad is finished and that the process should abort.\n+    /// Indicates that the landing pad is finished and that the process should terminate.\n     ///\n     /// Used to prevent unwinding for foreign items or with `-C unwind=abort`. Only permitted in\n     /// cleanup blocks.\n-    Abort,\n+    Terminate,\n \n     /// Returns from the function.\n     ///"}, {"sha": "2c6126cdd29cdeded6a14af1ee513b608290b187", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 Some(t).into_iter().chain((&[]).into_iter().copied())\n             }\n             Resume\n-            | Abort\n+            | Terminate\n             | GeneratorDrop\n             | Return\n             | Unreachable\n@@ -197,7 +197,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 Some(t).into_iter().chain(&mut [])\n             }\n             Resume\n-            | Abort\n+            | Terminate\n             | GeneratorDrop\n             | Return\n             | Unreachable\n@@ -214,7 +214,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n         match *self {\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::GeneratorDrop\n@@ -233,7 +233,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n         match *self {\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::GeneratorDrop\n@@ -310,7 +310,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             Return => write!(fmt, \"return\"),\n             GeneratorDrop => write!(fmt, \"generator_drop\"),\n             Resume => write!(fmt, \"resume\"),\n-            Abort => write!(fmt, \"abort\"),\n+            Terminate => write!(fmt, \"abort\"),\n             Yield { value, resume_arg, .. } => write!(fmt, \"{:?} = yield({:?})\", resume_arg, value),\n             Unreachable => write!(fmt, \"unreachable\"),\n             Drop { place, .. } => write!(fmt, \"drop({:?})\", place),\n@@ -389,7 +389,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n     pub fn fmt_successor_labels(&self) -> Vec<Cow<'static, str>> {\n         use self::TerminatorKind::*;\n         match *self {\n-            Return | Resume | Abort | Unreachable | GeneratorDrop => vec![],\n+            Return | Resume | Terminate | Unreachable | GeneratorDrop => vec![],\n             Goto { .. } => vec![\"\".into()],\n             SwitchInt { ref targets, .. } => targets\n                 .values"}, {"sha": "6c4ea065abeb3a522d53f2c6ced9701cf432127e", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -462,7 +462,7 @@ macro_rules! make_mir_visitor {\n                 match kind {\n                     TerminatorKind::Goto { .. } |\n                     TerminatorKind::Resume |\n-                    TerminatorKind::Abort |\n+                    TerminatorKind::Terminate |\n                     TerminatorKind::GeneratorDrop |\n                     TerminatorKind::Unreachable |\n                     TerminatorKind::FalseEdge { .. } |"}, {"sha": "2c401405f92831bd09b7ea3d924fffb5d1e23d2f", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -1454,7 +1454,7 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::SwitchInt { .. }\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Yield { .. }"}, {"sha": "8e41957af0ebabc4c964b4ea1938247c15e11ed0", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -108,7 +108,7 @@ impl<'mir, 'tcx> TriColorVisitor<BasicBlocks<'tcx>> for Search<'mir, 'tcx> {\n \n         match self.body[bb].terminator().kind {\n             // These terminators return control flow to the caller.\n-            TerminatorKind::Abort\n+            TerminatorKind::Terminate\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Resume\n             | TerminatorKind::Return"}, {"sha": "c8fe1af6674c8b33e19443865dc56718077577f3", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -474,7 +474,7 @@ impl Direction for Forward {\n     {\n         use mir::TerminatorKind::*;\n         match bb_data.terminator().kind {\n-            Return | Resume | Abort | GeneratorDrop | Unreachable => {}\n+            Return | Resume | Terminate | GeneratorDrop | Unreachable => {}\n \n             Goto { target } => propagate(target, exit_state),\n "}, {"sha": "92d30f254a6af2a62c06b367934f7377c173163c", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -125,7 +125,7 @@ where\n                 }\n             }\n \n-            TerminatorKind::Abort\n+            TerminatorKind::Terminate\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::FalseEdge { .. }"}, {"sha": "4a5d9d520108ec58520d760847538f1d26e7ec6e", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -200,7 +200,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n \n             // Nothing to do for these. Match exhaustively so this fails to compile when new\n             // variants are added.\n-            TerminatorKind::Abort\n+            TerminatorKind::Terminate\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Drop { .. }\n             | TerminatorKind::FalseEdge { .. }\n@@ -237,7 +237,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n             // Nothing to do for these. Match exhaustively so this fails to compile when new\n             // variants are added.\n             TerminatorKind::Yield { .. }\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Drop { .. }\n             | TerminatorKind::FalseEdge { .. }"}, {"sha": "64ed7a29f6f3d0aa8fe505fc6324c917b8847d0b", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -375,7 +375,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             // need recording.\n             | TerminatorKind::Return\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. } => {}"}, {"sha": "d908f6b3a9b544a95239e8efe3ee1d43ed57eba0", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::FalseEdge { .. }"}, {"sha": "f0266051f3787e5d077d6b11abef4691e74bf582", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -959,7 +959,7 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n             // None of these have Operands to const-propagate.\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }"}, {"sha": "1a96fddcd730025c4e6789d8ecebfb40c01bef45", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -686,7 +686,7 @@ impl<'tcx> Visitor<'tcx> for ConstPropagator<'_, 'tcx> {\n             // None of these have Operands to const-propagate.\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }"}, {"sha": "725883b83fa92d91b4f8fb83d4700b2cd754c0a1", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -818,7 +818,7 @@ pub(super) fn term_type(kind: &TerminatorKind<'_>) -> &'static str {\n         TerminatorKind::Goto { .. } => \"Goto\",\n         TerminatorKind::SwitchInt { .. } => \"SwitchInt\",\n         TerminatorKind::Resume => \"Resume\",\n-        TerminatorKind::Abort => \"Abort\",\n+        TerminatorKind::Terminate => \"Terminate\",\n         TerminatorKind::Return => \"Return\",\n         TerminatorKind::Unreachable => \"Unreachable\",\n         TerminatorKind::Drop { .. } => \"Drop\","}, {"sha": "7391a77b0a66b614fc405caebe2f5ccf861912d0", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -122,7 +122,7 @@ impl CoverageGraph {\n \n             match term.kind {\n                 TerminatorKind::Return { .. }\n-                | TerminatorKind::Abort\n+                | TerminatorKind::Terminate\n                 | TerminatorKind::Yield { .. }\n                 | TerminatorKind::SwitchInt { .. } => {\n                     // The `bb` has more than one _outgoing_ edge, or exits the function. Save the\n@@ -136,7 +136,7 @@ impl CoverageGraph {\n                     debug!(\"  because term.kind = {:?}\", term.kind);\n                     // Note that this condition is based on `TerminatorKind`, even though it\n                     // theoretically boils down to `successors().len() != 1`; that is, either zero\n-                    // (e.g., `Return`, `Abort`) or multiple successors (e.g., `SwitchInt`), but\n+                    // (e.g., `Return`, `Terminate`) or multiple successors (e.g., `SwitchInt`), but\n                     // since the BCB CFG ignores things like unwind branches (which exist in the\n                     // `Terminator`s `successors()` list) checking the number of successors won't\n                     // work."}, {"sha": "287ae2170875f347370931f387dc442a6d3fd59a", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -869,7 +869,7 @@ pub(super) fn filtered_terminator_span(terminator: &Terminator<'_>) -> Option<Sp\n \n         // Retain spans from all other terminators\n         TerminatorKind::Resume\n-        | TerminatorKind::Abort\n+        | TerminatorKind::Terminate\n         | TerminatorKind::Return\n         | TerminatorKind::Yield { .. }\n         | TerminatorKind::GeneratorDrop"}, {"sha": "811935aa9908282627deb2d264a3e16e31680f07", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -645,8 +645,8 @@ impl WriteInfo {\n                 }\n             }\n             TerminatorKind::Goto { .. }\n-            | TerminatorKind::Resume { .. }\n-            | TerminatorKind::Abort { .. }\n+            | TerminatorKind::Resume\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable { .. } => (),\n             TerminatorKind::Drop { .. } => {"}, {"sha": "c77ea6e3472735d1ef77afdf6e32cf1724cf0994", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -1194,7 +1194,7 @@ fn can_unwind<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n             // These never unwind.\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::SwitchInt { .. }\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::GeneratorDrop\n@@ -1701,7 +1701,7 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n             | TerminatorKind::Goto { .. }\n             | TerminatorKind::SwitchInt { .. }\n             | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }"}, {"sha": "f0cb317f449f352666d3930ffd14f26fec19d851", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -1136,19 +1136,15 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n                     TerminatorKind::Unreachable\n                 }\n             }\n-            TerminatorKind::Resume => match self.cleanup_block {\n-                UnwindAction::Cleanup(tgt) => {\n-                    terminator.kind = TerminatorKind::Goto { target: tgt };\n-                }\n-                UnwindAction::Continue => (),\n-                UnwindAction::Unreachable | UnwindAction::Terminate => {\n-                    // If the action is terminate, then we would have mapped marked\n-                    // all our call-sites as `UnwindAction::Terminate` and no cleanup\n-                    // blocks would ever be executed.\n-                    terminator.kind = TerminatorKind::Unreachable;\n-                }\n-            },\n-            TerminatorKind::Abort => {}\n+            TerminatorKind::Resume => {\n+                terminator.kind = match self.cleanup_block {\n+                    UnwindAction::Cleanup(tgt) => TerminatorKind::Goto { target: tgt },\n+                    UnwindAction::Continue => TerminatorKind::Resume,\n+                    UnwindAction::Unreachable => TerminatorKind::Unreachable,\n+                    UnwindAction::Terminate => TerminatorKind::Terminate,\n+                };\n+            }\n+            TerminatorKind::Terminate => {}\n             TerminatorKind::Unreachable => {}\n             TerminatorKind::FalseEdge { ref mut real_target, ref mut imaginary_target } => {\n                 *real_target = self.map_block(*real_target);"}, {"sha": "4941c9edce3058d642b7e3b488558762b4142c8b", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -72,7 +72,7 @@ impl RemoveNoopLandingPads {\n             TerminatorKind::GeneratorDrop\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::Return\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::Assert { .. }"}, {"sha": "ef367faf6a70791cae313bd44f2aad5a7b6fea8c", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -112,7 +112,7 @@ pub fn separate_const_switch(body: &mut Body<'_>) -> usize {\n                         | TerminatorKind::Assert { .. }\n                         | TerminatorKind::FalseUnwind { .. }\n                         | TerminatorKind::Yield { .. }\n-                        | TerminatorKind::Abort\n+                        | TerminatorKind::Terminate\n                         | TerminatorKind::Return\n                         | TerminatorKind::Unreachable\n                         | TerminatorKind::InlineAsm { .. }\n@@ -164,7 +164,7 @@ pub fn separate_const_switch(body: &mut Body<'_>) -> usize {\n             }\n \n             TerminatorKind::Resume\n-            | TerminatorKind::Abort\n+            | TerminatorKind::Terminate\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::GeneratorDrop"}, {"sha": "7bcff7e07fb34ff703d2d870a5e80a7c69735fc4", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f2edc75bf2becb57d7d770bba20606da1c4224/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=e3f2edc75bf2becb57d7d770bba20606da1c4224", "patch": "@@ -852,7 +852,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     self.output.push(create_fn_mono_item(tcx, instance, source));\n                 }\n             }\n-            mir::TerminatorKind::Abort { .. } => {\n+            mir::TerminatorKind::Terminate { .. } => {\n                 let instance = Instance::mono(\n                     tcx,\n                     tcx.require_lang_item(LangItem::PanicCannotUnwind, Some(source)),"}]}