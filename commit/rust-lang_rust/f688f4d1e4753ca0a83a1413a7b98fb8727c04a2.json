{"sha": "f688f4d1e4753ca0a83a1413a7b98fb8727c04a2", "node_id": "C_kwDOAAsO6NoAKGY2ODhmNGQxZTQ3NTNjYTBhODNhMTQxM2E3Yjk4ZmI4NzI3YzA0YTI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-28T17:47:33Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-28T18:38:36Z"}, "message": "Reduce usage of Symbol in the linker code\n\nInterning here doesn't save us anything. It rather costs a bit of time.", "tree": {"sha": "a7fed053c5d3dc25450b02f4fa7db06fb42a8c1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7fed053c5d3dc25450b02f4fa7db06fb42a8c1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f688f4d1e4753ca0a83a1413a7b98fb8727c04a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f688f4d1e4753ca0a83a1413a7b98fb8727c04a2", "html_url": "https://github.com/rust-lang/rust/commit/f688f4d1e4753ca0a83a1413a7b98fb8727c04a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f688f4d1e4753ca0a83a1413a7b98fb8727c04a2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de57dbcefd50da2d512929a6fb8e205751793f7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/de57dbcefd50da2d512929a6fb8e205751793f7d", "html_url": "https://github.com/rust-lang/rust/commit/de57dbcefd50da2d512929a6fb8e205751793f7d"}], "stats": {"total": 115, "additions": 55, "deletions": 60}, "files": [{"sha": "1cb8d3423812937658391356d9b8ec3a9c2ef9e1", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f688f4d1e4753ca0a83a1413a7b98fb8727c04a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688f4d1e4753ca0a83a1413a7b98fb8727c04a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=f688f4d1e4753ca0a83a1413a7b98fb8727c04a2", "patch": "@@ -1,13 +1,12 @@\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_session::cstore::DllImport;\n use rustc_session::Session;\n-use rustc_span::symbol::Symbol;\n \n use std::io;\n use std::path::{Path, PathBuf};\n \n pub(super) fn find_library(\n-    name: Symbol,\n+    name: &str,\n     verbatim: bool,\n     search_paths: &[PathBuf],\n     sess: &Session,"}, {"sha": "9b0ba34135c11efd00a6e2ffd128e074c1e0ef5b", "filename": "compiler/rustc_codegen_ssa/src/back/command.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f688f4d1e4753ca0a83a1413a7b98fb8727c04a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688f4d1e4753ca0a83a1413a7b98fb8727c04a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs?ref=f688f4d1e4753ca0a83a1413a7b98fb8727c04a2", "patch": "@@ -7,7 +7,6 @@ use std::io;\n use std::mem;\n use std::process::{self, Output};\n \n-use rustc_span::symbol::Symbol;\n use rustc_target::spec::LldFlavor;\n \n #[derive(Clone)]\n@@ -47,11 +46,6 @@ impl Command {\n         self\n     }\n \n-    pub fn sym_arg(&mut self, arg: Symbol) -> &mut Command {\n-        self.arg(arg.as_str());\n-        self\n-    }\n-\n     pub fn args<I>(&mut self, args: I) -> &mut Command\n     where\n         I: IntoIterator<Item: AsRef<OsStr>>,"}, {"sha": "697a27b9879c6293e3ef06708b15b0278acf7a14", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f688f4d1e4753ca0a83a1413a7b98fb8727c04a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688f4d1e4753ca0a83a1413a7b98fb8727c04a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=f688f4d1e4753ca0a83a1413a7b98fb8727c04a2", "patch": "@@ -354,7 +354,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n         }\n         if let Some(name) = lib.name {\n             let location =\n-                find_library(name, lib.verbatim.unwrap_or(false), &lib_search_paths, sess);\n+                find_library(name.as_str(), lib.verbatim.unwrap_or(false), &lib_search_paths, sess);\n             ab.add_archive(&location, |_| false).unwrap_or_else(|e| {\n                 sess.fatal(&format!(\n                     \"failed to add native library {}: {}\",\n@@ -1117,7 +1117,7 @@ fn link_sanitizer_runtime(sess: &Session, linker: &mut dyn Linker, name: &str) {\n         let path = find_sanitizer_runtime(&sess, &filename);\n         let rpath = path.to_str().expect(\"non-utf8 component in path\");\n         linker.args(&[\"-Wl,-rpath\", \"-Xlinker\", rpath]);\n-        linker.link_dylib(Symbol::intern(&filename), false, true);\n+        linker.link_dylib(&filename, false, true);\n     } else {\n         let filename = format!(\"librustc{}_rt.{}.a\", channel, name);\n         let path = find_sanitizer_runtime(&sess, &filename).join(&filename);\n@@ -2199,6 +2199,7 @@ fn add_local_native_libraries(\n         let Some(name) = lib.name else {\n             continue;\n         };\n+        let name = name.as_str();\n \n         // Skip if this library is the same as the last.\n         last = if (lib.name, lib.kind, lib.verbatim) == last {\n@@ -2362,6 +2363,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n                         let Some(name) = lib.name else {\n                             continue;\n                         };\n+                        let name = name.as_str();\n                         if !relevant_lib(sess, lib) {\n                             continue;\n                         }\n@@ -2519,7 +2521,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n         }\n         let filestem = cratepath.file_stem().unwrap().to_str().unwrap();\n         cmd.link_rust_dylib(\n-            Symbol::intern(&unlib(&sess.target, filestem)),\n+            &unlib(&sess.target, filestem),\n             parent.unwrap_or_else(|| Path::new(\"\")),\n         );\n     }\n@@ -2551,6 +2553,7 @@ fn add_upstream_native_libraries(\n             let Some(name) = lib.name else {\n                 continue;\n             };\n+            let name = name.as_str();\n             if !relevant_lib(sess, &lib) {\n                 continue;\n             }"}, {"sha": "955ee245b28aebe4091d8c433f43c4e9d813946d", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 48, "deletions": 49, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/f688f4d1e4753ca0a83a1413a7b98fb8727c04a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688f4d1e4753ca0a83a1413a7b98fb8727c04a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=f688f4d1e4753ca0a83a1413a7b98fb8727c04a2", "patch": "@@ -16,7 +16,6 @@ use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo, S\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{self, CrateType, DebugInfo, LinkerPluginLto, Lto, OptLevel, Strip};\n use rustc_session::Session;\n-use rustc_span::symbol::Symbol;\n use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor};\n \n use cc::windows_registry;\n@@ -163,13 +162,13 @@ pub fn get_linker<'a>(\n pub trait Linker {\n     fn cmd(&mut self) -> &mut Command;\n     fn set_output_kind(&mut self, output_kind: LinkOutputKind, out_filename: &Path);\n-    fn link_dylib(&mut self, lib: Symbol, verbatim: bool, as_needed: bool);\n-    fn link_rust_dylib(&mut self, lib: Symbol, path: &Path);\n-    fn link_framework(&mut self, framework: Symbol, as_needed: bool);\n-    fn link_staticlib(&mut self, lib: Symbol, verbatim: bool);\n+    fn link_dylib(&mut self, lib: &str, verbatim: bool, as_needed: bool);\n+    fn link_rust_dylib(&mut self, lib: &str, path: &Path);\n+    fn link_framework(&mut self, framework: &str, as_needed: bool);\n+    fn link_staticlib(&mut self, lib: &str, verbatim: bool);\n     fn link_rlib(&mut self, lib: &Path);\n     fn link_whole_rlib(&mut self, lib: &Path);\n-    fn link_whole_staticlib(&mut self, lib: Symbol, verbatim: bool, search_path: &[PathBuf]);\n+    fn link_whole_staticlib(&mut self, lib: &str, verbatim: bool, search_path: &[PathBuf]);\n     fn include_path(&mut self, path: &Path);\n     fn framework_path(&mut self, path: &Path);\n     fn output_filename(&mut self, path: &Path);\n@@ -423,8 +422,8 @@ impl<'a> Linker for GccLinker<'a> {\n         }\n     }\n \n-    fn link_dylib(&mut self, lib: Symbol, verbatim: bool, as_needed: bool) {\n-        if self.sess.target.os == \"illumos\" && lib.as_str() == \"c\" {\n+    fn link_dylib(&mut self, lib: &str, verbatim: bool, as_needed: bool) {\n+        if self.sess.target.os == \"illumos\" && lib == \"c\" {\n             // libc will be added via late_link_args on illumos so that it will\n             // appear last in the library search order.\n             // FIXME: This should be replaced by a more complete and generic\n@@ -454,7 +453,7 @@ impl<'a> Linker for GccLinker<'a> {\n             }\n         }\n     }\n-    fn link_staticlib(&mut self, lib: Symbol, verbatim: bool) {\n+    fn link_staticlib(&mut self, lib: &str, verbatim: bool) {\n         self.hint_static();\n         self.cmd.arg(format!(\"-l{}{}\", if verbatim { \":\" } else { \"\" }, lib));\n     }\n@@ -484,20 +483,20 @@ impl<'a> Linker for GccLinker<'a> {\n         self.linker_arg(\"-znorelro\");\n     }\n \n-    fn link_rust_dylib(&mut self, lib: Symbol, _path: &Path) {\n+    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n         self.hint_dynamic();\n         self.cmd.arg(format!(\"-l{}\", lib));\n     }\n \n-    fn link_framework(&mut self, framework: Symbol, as_needed: bool) {\n+    fn link_framework(&mut self, framework: &str, as_needed: bool) {\n         self.hint_dynamic();\n         if !as_needed {\n             // FIXME(81490): ld64 as of macOS 11 supports the -needed_framework\n             // flag but we have no way to detect that here.\n-            // self.cmd.arg(\"-needed_framework\").sym_arg(framework);\n+            // self.cmd.arg(\"-needed_framework\").arg(framework);\n             self.sess.warn(\"`as-needed` modifier not implemented yet for ld64\");\n         }\n-        self.cmd.arg(\"-framework\").sym_arg(framework);\n+        self.cmd.arg(\"-framework\").arg(framework);\n     }\n \n     // Here we explicitly ask that the entire archive is included into the\n@@ -506,7 +505,7 @@ impl<'a> Linker for GccLinker<'a> {\n     // don't otherwise explicitly reference them. This can occur for\n     // libraries which are just providing bindings, libraries with generic\n     // functions, etc.\n-    fn link_whole_staticlib(&mut self, lib: Symbol, verbatim: bool, search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: &str, verbatim: bool, search_path: &[PathBuf]) {\n         self.hint_static();\n         let target = &self.sess.target;\n         if !target.is_like_osx {\n@@ -836,11 +835,11 @@ impl<'a> Linker for MsvcLinker<'a> {\n         self.cmd.arg(\"/OPT:NOREF,NOICF\");\n     }\n \n-    fn link_dylib(&mut self, lib: Symbol, verbatim: bool, _as_needed: bool) {\n+    fn link_dylib(&mut self, lib: &str, verbatim: bool, _as_needed: bool) {\n         self.cmd.arg(format!(\"{}{}\", lib, if verbatim { \"\" } else { \".lib\" }));\n     }\n \n-    fn link_rust_dylib(&mut self, lib: Symbol, path: &Path) {\n+    fn link_rust_dylib(&mut self, lib: &str, path: &Path) {\n         // When producing a dll, the MSVC linker may not actually emit a\n         // `foo.lib` file if the dll doesn't actually export any symbols, so we\n         // check to see if the file is there and just omit linking to it if it's\n@@ -851,7 +850,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n         }\n     }\n \n-    fn link_staticlib(&mut self, lib: Symbol, verbatim: bool) {\n+    fn link_staticlib(&mut self, lib: &str, verbatim: bool) {\n         self.cmd.arg(format!(\"{}{}\", lib, if verbatim { \"\" } else { \".lib\" }));\n     }\n \n@@ -890,11 +889,11 @@ impl<'a> Linker for MsvcLinker<'a> {\n     fn framework_path(&mut self, _path: &Path) {\n         bug!(\"frameworks are not supported on windows\")\n     }\n-    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+    fn link_framework(&mut self, _framework: &str, _as_needed: bool) {\n         bug!(\"frameworks are not supported on windows\")\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: Symbol, verbatim: bool, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: &str, verbatim: bool, _search_path: &[PathBuf]) {\n         self.cmd.arg(format!(\"/WHOLEARCHIVE:{}{}\", lib, if verbatim { \"\" } else { \".lib\" }));\n     }\n     fn link_whole_rlib(&mut self, path: &Path) {\n@@ -1047,8 +1046,8 @@ impl<'a> Linker for EmLinker<'a> {\n         self.cmd.arg(\"-L\").arg(path);\n     }\n \n-    fn link_staticlib(&mut self, lib: Symbol, _verbatim: bool) {\n-        self.cmd.arg(\"-l\").sym_arg(lib);\n+    fn link_staticlib(&mut self, lib: &str, _verbatim: bool) {\n+        self.cmd.arg(\"-l\").arg(lib);\n     }\n \n     fn output_filename(&mut self, path: &Path) {\n@@ -1059,12 +1058,12 @@ impl<'a> Linker for EmLinker<'a> {\n         self.cmd.arg(path);\n     }\n \n-    fn link_dylib(&mut self, lib: Symbol, verbatim: bool, _as_needed: bool) {\n+    fn link_dylib(&mut self, lib: &str, verbatim: bool, _as_needed: bool) {\n         // Emscripten always links statically\n         self.link_staticlib(lib, verbatim);\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: Symbol, verbatim: bool, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: &str, verbatim: bool, _search_path: &[PathBuf]) {\n         // not supported?\n         self.link_staticlib(lib, verbatim);\n     }\n@@ -1074,7 +1073,7 @@ impl<'a> Linker for EmLinker<'a> {\n         self.link_rlib(lib);\n     }\n \n-    fn link_rust_dylib(&mut self, lib: Symbol, _path: &Path) {\n+    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n         self.link_dylib(lib, false, true);\n     }\n \n@@ -1098,7 +1097,7 @@ impl<'a> Linker for EmLinker<'a> {\n         bug!(\"frameworks are not supported on Emscripten\")\n     }\n \n-    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+    fn link_framework(&mut self, _framework: &str, _as_needed: bool) {\n         bug!(\"frameworks are not supported on Emscripten\")\n     }\n \n@@ -1237,12 +1236,12 @@ impl<'a> Linker for WasmLd<'a> {\n         }\n     }\n \n-    fn link_dylib(&mut self, lib: Symbol, _verbatim: bool, _as_needed: bool) {\n-        self.cmd.arg(\"-l\").sym_arg(lib);\n+    fn link_dylib(&mut self, lib: &str, _verbatim: bool, _as_needed: bool) {\n+        self.cmd.arg(\"-l\").arg(lib);\n     }\n \n-    fn link_staticlib(&mut self, lib: Symbol, _verbatim: bool) {\n-        self.cmd.arg(\"-l\").sym_arg(lib);\n+    fn link_staticlib(&mut self, lib: &str, _verbatim: bool) {\n+        self.cmd.arg(\"-l\").arg(lib);\n     }\n \n     fn link_rlib(&mut self, lib: &Path) {\n@@ -1271,16 +1270,16 @@ impl<'a> Linker for WasmLd<'a> {\n \n     fn no_relro(&mut self) {}\n \n-    fn link_rust_dylib(&mut self, lib: Symbol, _path: &Path) {\n-        self.cmd.arg(\"-l\").sym_arg(lib);\n+    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n+        self.cmd.arg(\"-l\").arg(lib);\n     }\n \n-    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+    fn link_framework(&mut self, _framework: &str, _as_needed: bool) {\n         panic!(\"frameworks not supported\")\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: Symbol, _verbatim: bool, _search_path: &[PathBuf]) {\n-        self.cmd.arg(\"-l\").sym_arg(lib);\n+    fn link_whole_staticlib(&mut self, lib: &str, _verbatim: bool, _search_path: &[PathBuf]) {\n+        self.cmd.arg(\"-l\").arg(lib);\n     }\n \n     fn link_whole_rlib(&mut self, lib: &Path) {\n@@ -1360,10 +1359,10 @@ pub struct L4Bender<'a> {\n }\n \n impl<'a> Linker for L4Bender<'a> {\n-    fn link_dylib(&mut self, _lib: Symbol, _verbatim: bool, _as_needed: bool) {\n+    fn link_dylib(&mut self, _lib: &str, _verbatim: bool, _as_needed: bool) {\n         bug!(\"dylibs are not supported on L4Re\");\n     }\n-    fn link_staticlib(&mut self, lib: Symbol, _verbatim: bool) {\n+    fn link_staticlib(&mut self, lib: &str, _verbatim: bool) {\n         self.hint_static();\n         self.cmd.arg(format!(\"-PC{}\", lib));\n     }\n@@ -1404,15 +1403,15 @@ impl<'a> Linker for L4Bender<'a> {\n \n     fn set_output_kind(&mut self, _output_kind: LinkOutputKind, _out_filename: &Path) {}\n \n-    fn link_rust_dylib(&mut self, _: Symbol, _: &Path) {\n+    fn link_rust_dylib(&mut self, _: &str, _: &Path) {\n         panic!(\"Rust dylibs not supported\");\n     }\n \n-    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+    fn link_framework(&mut self, _framework: &str, _as_needed: bool) {\n         bug!(\"frameworks not supported on L4Re\");\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: Symbol, _verbatim: bool, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: &str, _verbatim: bool, _search_path: &[PathBuf]) {\n         self.hint_static();\n         self.cmd.arg(\"--whole-archive\").arg(format!(\"-l{}\", lib));\n         self.cmd.arg(\"--no-whole-archive\");\n@@ -1617,27 +1616,27 @@ impl<'a> Linker for PtxLinker<'a> {\n         self.cmd.arg(\"-o\").arg(path);\n     }\n \n-    fn link_dylib(&mut self, _lib: Symbol, _verbatim: bool, _as_needed: bool) {\n+    fn link_dylib(&mut self, _lib: &str, _verbatim: bool, _as_needed: bool) {\n         panic!(\"external dylibs not supported\")\n     }\n \n-    fn link_rust_dylib(&mut self, _lib: Symbol, _path: &Path) {\n+    fn link_rust_dylib(&mut self, _lib: &str, _path: &Path) {\n         panic!(\"external dylibs not supported\")\n     }\n \n-    fn link_staticlib(&mut self, _lib: Symbol, _verbatim: bool) {\n+    fn link_staticlib(&mut self, _lib: &str, _verbatim: bool) {\n         panic!(\"staticlibs not supported\")\n     }\n \n-    fn link_whole_staticlib(&mut self, _lib: Symbol, _verbatim: bool, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, _lib: &str, _verbatim: bool, _search_path: &[PathBuf]) {\n         panic!(\"staticlibs not supported\")\n     }\n \n     fn framework_path(&mut self, _path: &Path) {\n         panic!(\"frameworks not supported\")\n     }\n \n-    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+    fn link_framework(&mut self, _framework: &str, _as_needed: bool) {\n         panic!(\"frameworks not supported\")\n     }\n \n@@ -1717,27 +1716,27 @@ impl<'a> Linker for BpfLinker<'a> {\n         self.cmd.arg(\"-o\").arg(path);\n     }\n \n-    fn link_dylib(&mut self, _lib: Symbol, _verbatim: bool, _as_needed: bool) {\n+    fn link_dylib(&mut self, _lib: &str, _verbatim: bool, _as_needed: bool) {\n         panic!(\"external dylibs not supported\")\n     }\n \n-    fn link_rust_dylib(&mut self, _lib: Symbol, _path: &Path) {\n+    fn link_rust_dylib(&mut self, _lib: &str, _path: &Path) {\n         panic!(\"external dylibs not supported\")\n     }\n \n-    fn link_staticlib(&mut self, _lib: Symbol, _verbatim: bool) {\n+    fn link_staticlib(&mut self, _lib: &str, _verbatim: bool) {\n         panic!(\"staticlibs not supported\")\n     }\n \n-    fn link_whole_staticlib(&mut self, _lib: Symbol, _verbatim: bool, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, _lib: &str, _verbatim: bool, _search_path: &[PathBuf]) {\n         panic!(\"staticlibs not supported\")\n     }\n \n     fn framework_path(&mut self, _path: &Path) {\n         panic!(\"frameworks not supported\")\n     }\n \n-    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+    fn link_framework(&mut self, _framework: &str, _as_needed: bool) {\n         panic!(\"frameworks not supported\")\n     }\n "}]}