{"sha": "4cae9add8c9471126aa405cacecac2623232083a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYWU5YWRkOGM5NDcxMTI2YWE0MDVjYWNlY2FjMjYyMzIzMjA4M2E=", "commit": {"author": {"name": "Colin Sherratt", "email": "colin.sherratt@gmail.com", "date": "2014-11-11T02:16:29Z"}, "committer": {"name": "Colin Sherratt", "email": "colin.sherratt@gmail.com", "date": "2014-11-14T08:41:07Z"}, "message": "Added some extra debug_asserts to ring_buf.", "tree": {"sha": "be65dd509b51b99934bad76dc3e7f246ec4c1d3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be65dd509b51b99934bad76dc3e7f246ec4c1d3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cae9add8c9471126aa405cacecac2623232083a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cae9add8c9471126aa405cacecac2623232083a", "html_url": "https://github.com/rust-lang/rust/commit/4cae9add8c9471126aa405cacecac2623232083a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cae9add8c9471126aa405cacecac2623232083a/comments", "author": {"login": "csherratt", "id": 26073376, "node_id": "MDQ6VXNlcjI2MDczMzc2", "avatar_url": "https://avatars.githubusercontent.com/u/26073376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csherratt", "html_url": "https://github.com/csherratt", "followers_url": "https://api.github.com/users/csherratt/followers", "following_url": "https://api.github.com/users/csherratt/following{/other_user}", "gists_url": "https://api.github.com/users/csherratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/csherratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csherratt/subscriptions", "organizations_url": "https://api.github.com/users/csherratt/orgs", "repos_url": "https://api.github.com/users/csherratt/repos", "events_url": "https://api.github.com/users/csherratt/events{/privacy}", "received_events_url": "https://api.github.com/users/csherratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csherratt", "id": 26073376, "node_id": "MDQ6VXNlcjI2MDczMzc2", "avatar_url": "https://avatars.githubusercontent.com/u/26073376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csherratt", "html_url": "https://github.com/csherratt", "followers_url": "https://api.github.com/users/csherratt/followers", "following_url": "https://api.github.com/users/csherratt/following{/other_user}", "gists_url": "https://api.github.com/users/csherratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/csherratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csherratt/subscriptions", "organizations_url": "https://api.github.com/users/csherratt/orgs", "repos_url": "https://api.github.com/users/csherratt/repos", "events_url": "https://api.github.com/users/csherratt/events{/privacy}", "received_events_url": "https://api.github.com/users/csherratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba24e3302102eb97c253ad8d0ad08a5678428ae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba24e3302102eb97c253ad8d0ad08a5678428ae5", "html_url": "https://github.com/rust-lang/rust/commit/ba24e3302102eb97c253ad8d0ad08a5678428ae5"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "f08c53340006b4e9b29d890408ac4711756598ea", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4cae9add8c9471126aa405cacecac2623232083a/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cae9add8c9471126aa405cacecac2623232083a/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=4cae9add8c9471126aa405cacecac2623232083a", "patch": "@@ -209,7 +209,7 @@ impl<T> RingBuf<T> {\n         assert!(i < self.len());\n         assert!(j < self.len());\n         let ri = wrap_index(self.tail + i, self.cap);\n-        let rj = wrap_index(self.tail + j, self.cap);\n+        let rj = wrap_index(self.tail + j, self.cap);;\n         unsafe {\n             ptr::swap(self.ptr.offset(ri as int), self.ptr.offset(rj as int))\n         }\n@@ -320,6 +320,7 @@ impl<T> RingBuf<T> {\n                     );\n                 }\n                 self.head += oldcap;\n+                debug_assert!(self.head > self.tail);\n             } else { // C\n                 unsafe {\n                     ptr::copy_nonoverlapping_memory(\n@@ -329,7 +330,10 @@ impl<T> RingBuf<T> {\n                     );\n                 }\n                 self.tail = count - (oldcap - self.tail);\n+                debug_assert!(self.head < self.tail);\n             }\n+            debug_assert!(self.head < self.cap);\n+            debug_assert!(self.tail < self.cap);\n         }\n     }\n \n@@ -564,7 +568,10 @@ impl<T> RingBuf<T> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn push_front(&mut self, t: T) {\n-        if self.is_full() { self.reserve(1) }\n+        if self.is_full() {\n+            self.reserve(1);\n+            debug_assert!(!self.is_full());\n+        }\n \n         self.tail = wrap_index(self.tail - 1, self.cap);\n         let tail = self.tail;\n@@ -591,7 +598,10 @@ impl<T> RingBuf<T> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn push_back(&mut self, t: T) {\n-        if self.is_full() { self.reserve(1) }\n+        if self.is_full() {\n+            self.reserve(1);\n+            debug_assert!(!self.is_full());\n+        }\n \n         let head = self.head;\n         self.head = wrap_index(self.head + 1, self.cap);\n@@ -634,7 +644,9 @@ impl<T> RingBuf<T> {\n #[inline]\n fn wrap_index(index: uint, size: uint) -> uint {\n     // size is always a power of 2\n-    index & (size - 1)\n+    let idx = index & (size - 1);\n+    debug_assert!(idx < size);\n+    idx\n }\n \n /// Calculate the number of elements left to be read in the buffer"}]}