{"sha": "ea9c5c405ecea256721c6d65b7de21bffe21056b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhOWM1YzQwNWVjZWEyNTY3MjFjNmQ2NWI3ZGUyMWJmZmUyMTA1NmI=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-04T15:10:09Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-06T02:05:08Z"}, "message": "std: Remove uint::iterate, replaced by `range`", "tree": {"sha": "362448fe447c9ceabde252b35cac9f19b96a6960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/362448fe447c9ceabde252b35cac9f19b96a6960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea9c5c405ecea256721c6d65b7de21bffe21056b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea9c5c405ecea256721c6d65b7de21bffe21056b", "html_url": "https://github.com/rust-lang/rust/commit/ea9c5c405ecea256721c6d65b7de21bffe21056b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea9c5c405ecea256721c6d65b7de21bffe21056b/comments", "author": null, "committer": null, "parents": [{"sha": "08d0b70213df7e112409eeea85bcfcc630f5dda4", "url": "https://api.github.com/repos/rust-lang/rust/commits/08d0b70213df7e112409eeea85bcfcc630f5dda4", "html_url": "https://github.com/rust-lang/rust/commit/08d0b70213df7e112409eeea85bcfcc630f5dda4"}], "stats": {"total": 38, "additions": 6, "deletions": 32}, "files": [{"sha": "6dedd9ee4dd266f95da9777cf67bd7737e8edc18", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ea9c5c405ecea256721c6d65b7de21bffe21056b/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9c5c405ecea256721c6d65b7de21bffe21056b/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=ea9c5c405ecea256721c6d65b7de21bffe21056b", "patch": "@@ -206,14 +206,13 @@ impl BigBitv {\n     #[inline]\n     pub fn equals(&self, b: &BigBitv, nbits: uint) -> bool {\n         let len = b.storage.len();\n-        do uint::iterate(0, len) |i| {\n+        for i in range(0, len) {\n             let mask = big_mask(nbits, i);\n             if mask & self.storage[i] != mask & b.storage[i] {\n-                false\n-            } else {\n-                true\n+                return false;\n             }\n         }\n+        true\n     }\n }\n "}, {"sha": "86bc98e53fcb6605cca989137c733653f47326df", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ea9c5c405ecea256721c6d65b7de21bffe21056b/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9c5c405ecea256721c6d65b7de21bffe21056b/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=ea9c5c405ecea256721c6d65b7de21bffe21056b", "patch": "@@ -70,30 +70,6 @@ pub fn div_round(x: uint, y: uint) -> uint {\n ///\n pub fn div_floor(x: uint, y: uint) -> uint { return x / y; }\n \n-///\n-/// Iterate over the range [`lo`..`hi`), or stop when requested\n-///\n-/// # Arguments\n-///\n-/// * lo - The integer at which to start the loop (included)\n-/// * hi - The integer at which to stop the loop (excluded)\n-/// * it - A block to execute with each consecutive integer of the range.\n-///        Return `true` to continue, `false` to stop.\n-///\n-/// # Return value\n-///\n-/// `true` If execution proceeded correctly, `false` if it was interrupted,\n-/// that is if `it` returned `false` at any point.\n-///\n-pub fn iterate(lo: uint, hi: uint, it: &fn(uint) -> bool) -> bool {\n-    let mut i = lo;\n-    while i < hi {\n-        if (!it(i)) { return false; }\n-        i += 1u;\n-    }\n-    return true;\n-}\n-\n impl iter::Times for uint {\n     #[inline]\n     ///"}, {"sha": "dfd11f9227d413e5b37725b91a34e54d024f3eea", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ea9c5c405ecea256721c6d65b7de21bffe21056b/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9c5c405ecea256721c6d65b7de21bffe21056b/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=ea9c5c405ecea256721c6d65b7de21bffe21056b", "patch": "@@ -12,6 +12,7 @@\n \n use cast;\n use clone::Clone;\n+use iterator::{range, Iterator};\n use option::{Option, Some, None};\n use unstable::intrinsics;\n use util::swap;\n@@ -20,7 +21,6 @@ use util::swap;\n #[cfg(not(test))] use num::Int;\n \n #[cfg(not(test))] use cmp::{Eq, Ord};\n-use uint;\n \n /// Calculate the offset from a pointer\n #[inline]\n@@ -240,11 +240,10 @@ pub unsafe fn array_each_with_len<T>(arr: **T, len: uint, cb: &fn(*T)) {\n         fail!(\"ptr::array_each_with_len failure: arr input is null pointer\");\n     }\n     //let start_ptr = *arr;\n-    uint::iterate(0, len, |e| {\n+    for e in range(0, len) {\n         let n = offset(arr, e as int);\n         cb(*n);\n-        true\n-    });\n+    }\n     debug!(\"array_each_with_len: after iterate\");\n }\n "}]}