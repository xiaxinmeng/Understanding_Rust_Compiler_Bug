{"sha": "372be4f360ce42b1a10126a711189796f8440ab4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MmJlNGYzNjBjZTQyYjFhMTAxMjZhNzExMTg5Nzk2Zjg0NDBhYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-14T20:50:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-14T20:50:26Z"}, "message": "Auto merge of #60834 - Centril:rollup-fikyi9i, r=Centril\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #60130 (Add implementations of last in terms of next_back on a bunch of DoubleEndedIterators)\n - #60443 (as_ptr returns a read-only pointer)\n - #60444 (forego caching for all participants in cycles, apart from root node)\n - #60719 (Allow subdirectories to be tested by x.py test)\n - #60780 (fix Miri)\n - #60788 (default to $ARCH-apple-macosx10.7.0 LLVM triple for darwin targets)\n - #60799 (Allow late-bound regions in existential types)\n - #60808 (Improve the \"must use\" lint for `Future`)\n - #60819 (submodules: update clippy from 3710ec59 to ad3269c4)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "aa31fd8b1b3e65c640222f29ec4c671dbceb08fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa31fd8b1b3e65c640222f29ec4c671dbceb08fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/372be4f360ce42b1a10126a711189796f8440ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/372be4f360ce42b1a10126a711189796f8440ab4", "html_url": "https://github.com/rust-lang/rust/commit/372be4f360ce42b1a10126a711189796f8440ab4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/372be4f360ce42b1a10126a711189796f8440ab4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f59c71eb8ed808347c1e4245b842d673c75daeb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f59c71eb8ed808347c1e4245b842d673c75daeb6", "html_url": "https://github.com/rust-lang/rust/commit/f59c71eb8ed808347c1e4245b842d673c75daeb6"}, {"sha": "2e844ef4491675e93d22be7d5bfbfd62df904959", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e844ef4491675e93d22be7d5bfbfd62df904959", "html_url": "https://github.com/rust-lang/rust/commit/2e844ef4491675e93d22be7d5bfbfd62df904959"}], "stats": {"total": 408, "additions": 379, "deletions": 29}, "files": [{"sha": "7826ac9471806043c1b00505e13cbe9ffab424c6", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -1184,8 +1184,19 @@ impl Step for Compiletest {\n                     Err(_) => p,\n                 }\n             })\n-            .filter(|p| p.starts_with(suite_path) && p.is_file())\n-            .map(|p| p.strip_prefix(suite_path).unwrap().to_str().unwrap())\n+            .filter(|p| p.starts_with(suite_path) && (p.is_dir() || p.is_file()))\n+            .filter_map(|p| {\n+                // Since test suite paths are themselves directories, if we don't\n+                // specify a directory or file, we'll get an empty string here\n+                // (the result of the test suite directory without its suite prefix).\n+                // Therefore, we need to filter these out, as only the first --test-args\n+                // flag is respected, so providing an empty --test-args conflicts with\n+                // any following it.\n+                match p.strip_prefix(suite_path).ok().and_then(|p| p.to_str()) {\n+                    Some(s) if s != \"\" => Some(s),\n+                    _ => None,\n+                }\n+            })\n             .collect();\n \n         test_args.append(&mut builder.config.cmd.test_args());"}, {"sha": "39fcfaa789377bb575fabda5be8fccc790468885", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -992,6 +992,11 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1047,6 +1052,11 @@ impl<T> Iterator for IntoIter<T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1093,6 +1103,11 @@ impl<T> Iterator for Drain<'_, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]"}, {"sha": "414abb00ef1fa760161d49cbaa0327939675ce94", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -1193,6 +1193,11 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.length, Some(self.length))\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -1253,6 +1258,11 @@ impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.length, Some(self.length))\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1359,6 +1369,11 @@ impl<K, V> Iterator for IntoIter<K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.length, Some(self.length))\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<(K, V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1421,6 +1436,11 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a K> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1458,6 +1478,11 @@ impl<'a, K, V> Iterator for Values<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a V> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1495,6 +1520,11 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n             unsafe { Some(self.next_unchecked()) }\n         }\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -1508,6 +1538,11 @@ impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a mut V> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -1626,6 +1661,11 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n             unsafe { Some(self.next_unchecked()) }\n         }\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next_back()\n+    }\n }\n \n impl<'a, K, V> RangeMut<'a, K, V> {"}, {"sha": "6f2467dfd6b513de6b41e7fec1a95a85f61feed9", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -1019,6 +1019,11 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n@@ -1044,6 +1049,11 @@ impl<T> Iterator for IntoIter<T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<T> {\n+        self.next_back()\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> DoubleEndedIterator for IntoIter<T> {\n@@ -1073,6 +1083,11 @@ impl<'a, T> Iterator for Range<'a, T> {\n     fn next(&mut self) -> Option<&'a T> {\n         self.iter.next().map(|(k, _)| k)\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]"}, {"sha": "63f7769fee56a794583404c020b421c6354373e7", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -2377,6 +2377,10 @@ impl Iterator for Drain<'_> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+    #[inline]\n+    fn last(mut self) -> Option<char> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]"}, {"sha": "c0cdffe596babc85e61fce4813ef1616682df183", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -2395,6 +2395,11 @@ impl<T> Iterator for IntoIter<T> {\n     fn count(self) -> usize {\n         self.len()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2514,6 +2519,11 @@ impl<T> Iterator for Drain<'_, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n@@ -2583,6 +2593,10 @@ impl<I: Iterator> Iterator for Splice<'_, I> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.drain.size_hint()\n     }\n+\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"vec_splice\", since = \"1.21.0\")]"}, {"sha": "ddee02ea232d1cf43f6428b8f82440ba21b4c943", "filename": "src/libcore/ascii.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibcore%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibcore%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fascii.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -117,6 +117,8 @@ impl Iterator for EscapeDefault {\n     type Item = u8;\n     fn next(&mut self) -> Option<u8> { self.range.next().map(|i| self.data[i]) }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.range.size_hint() }\n+    #[inline]\n+    fn last(mut self) -> Option<u8> { self.next_back() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl DoubleEndedIterator for EscapeDefault {"}, {"sha": "3f76ac20192ba092734225342772b827165e627b", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -23,7 +23,7 @@ use crate::task::{Context, Poll};\n /// When using a future, you generally won't call `poll` directly, but instead\n /// `await!` the value.\n #[doc(spotlight)]\n-#[must_use = \"futures do nothing unless polled\"]\n+#[must_use = \"futures do nothing unless you `.await` or poll them\"]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub trait Future {\n     /// The type of value produced on completion."}, {"sha": "64e588f65b4688b5800b4c616455fc2a17b66c35", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -73,6 +73,11 @@ impl<I> Iterator for Rev<I> where I: DoubleEndedIterator {\n     {\n         self.iter.position(predicate)\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "d06d107d32a41cabbe8a3fca7e35bf6ed950d277", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -359,6 +359,10 @@ impl<T> [T] {\n     /// The caller must ensure that the slice outlives the pointer this\n     /// function returns, or else it will end up pointing to garbage.\n     ///\n+    /// The caller must also ensure that the memory the pointer (non-transitively) points to\n+    /// is never written to (except inside an `UnsafeCell`) using this pointer or any pointer\n+    /// derived from it. If you need to mutate the contents of the slice, use [`as_mut_ptr`].\n+    ///\n     /// Modifying the container referenced by this slice may cause its buffer\n     /// to be reallocated, which would also make any pointers to it invalid.\n     ///\n@@ -374,6 +378,8 @@ impl<T> [T] {\n     ///     }\n     /// }\n     /// ```\n+    ///\n+    /// [`as_mut_ptr`]: #method.as_mut_ptr\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub const fn as_ptr(&self) -> *const T {\n@@ -3541,6 +3547,11 @@ impl<'a, T, P> Iterator for Split<'a, T, P> where P: FnMut(&T) -> bool {\n             (1, Some(self.v.len() + 1))\n         }\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -3639,6 +3650,11 @@ impl<'a, T, P> Iterator for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n             (1, Some(self.v.len() + 1))\n         }\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -3704,6 +3720,11 @@ impl<'a, T, P> Iterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n@@ -3768,6 +3789,11 @@ impl<'a, T, P> Iterator for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]"}, {"sha": "0e8a2da3c110d70a413a0a8b9ae76909116a982a", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -1333,6 +1333,11 @@ impl<'a> Iterator for Lines<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.0.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1379,6 +1384,11 @@ impl<'a> Iterator for LinesAny<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.0.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2188,7 +2198,11 @@ impl str {\n     /// [`u8`]. This pointer will be pointing to the first byte of the string\n     /// slice.\n     ///\n+    /// The caller must ensure that the returned pointer is never written to.\n+    /// If you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n+    ///\n     /// [`u8`]: primitive.u8.html\n+    /// [`as_mut_ptr`]: #method.as_mut_ptr\n     ///\n     /// # Examples\n     ///\n@@ -4217,6 +4231,11 @@ impl<'a> Iterator for SplitWhitespace<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n@@ -4243,6 +4262,11 @@ impl<'a> Iterator for SplitAsciiWhitespace<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"}, {"sha": "c4be85050dbc2a04b9a82ef2c70bc419458ca0c9", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -43,6 +43,7 @@ use crate::hir;\n use rustc_data_structures::bit_set::GrowableBitSet;\n use rustc_data_structures::sync::Lock;\n use rustc_target::spec::abi::Abi;\n+use std::cell::Cell;\n use std::cmp;\n use std::fmt::{self, Display};\n use std::iter;\n@@ -153,6 +154,36 @@ struct TraitObligationStack<'prev, 'tcx: 'prev> {\n     /// selection-context's freshener. Used to check for recursion.\n     fresh_trait_ref: ty::PolyTraitRef<'tcx>,\n \n+    /// Starts out as false -- if, during evaluation, we encounter a\n+    /// cycle, then we will set this flag to true for all participants\n+    /// in the cycle (apart from the \"head\" node). These participants\n+    /// will then forego caching their results. This is not the most\n+    /// efficient solution, but it addresses #60010. The problem we\n+    /// are trying to prevent:\n+    ///\n+    /// - If you have `A: AutoTrait` requires `B: AutoTrait` and `C: NonAutoTrait`\n+    /// - `B: AutoTrait` requires `A: AutoTrait` (coinductive cycle, ok)\n+    /// - `C: NonAutoTrait` requires `A: AutoTrait` (non-coinductive cycle, not ok)\n+    ///\n+    /// you don't want to cache that `B: AutoTrait` or `A: AutoTrait`\n+    /// is `EvaluatedToOk`; this is because they were only considered\n+    /// ok on the premise that if `A: AutoTrait` held, but we indeed\n+    /// encountered a problem (later on) with `A: AutoTrait. So we\n+    /// currently set a flag on the stack node for `B: AutoTrait` (as\n+    /// well as the second instance of `A: AutoTrait`) to supress\n+    /// caching.\n+    ///\n+    /// This is a simple, targeted fix. A more-performant fix requires\n+    /// deeper changes, but would permit more caching: we could\n+    /// basically defer caching until we have fully evaluated the\n+    /// tree, and then cache the entire tree at once. In any case, the\n+    /// performance impact here shouldn't be so horrible: every time\n+    /// this is hit, we do cache at least one trait, so we only\n+    /// evaluate each member of a cycle up to N times, where N is the\n+    /// length of the cycle. This means the performance impact is\n+    /// bounded and we shouldn't have any terrible worst-cases.\n+    in_cycle: Cell<bool>,\n+\n     previous: TraitObligationStackList<'prev, 'tcx>,\n }\n \n@@ -840,8 +871,16 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         let (result, dep_node) = self.in_task(|this| this.evaluate_stack(&stack));\n         let result = result?;\n \n-        debug!(\"CACHE MISS: EVAL({:?})={:?}\", fresh_trait_ref, result);\n-        self.insert_evaluation_cache(obligation.param_env, fresh_trait_ref, dep_node, result);\n+        if !stack.in_cycle.get() {\n+            debug!(\"CACHE MISS: EVAL({:?})={:?}\", fresh_trait_ref, result);\n+            self.insert_evaluation_cache(obligation.param_env, fresh_trait_ref, dep_node, result);\n+        } else {\n+            debug!(\n+                \"evaluate_trait_predicate_recursively: skipping cache because {:?} \\\n+                 is a cycle participant\",\n+                fresh_trait_ref,\n+            );\n+        }\n \n         Ok(result)\n     }\n@@ -948,6 +987,17 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         {\n             debug!(\"evaluate_stack({:?}) --> recursive\", stack.fresh_trait_ref);\n \n+            // If we have a stack like `A B C D E A`, where the top of\n+            // the stack is the final `A`, then this will iterate over\n+            // `A, E, D, C, B` -- i.e., all the participants apart\n+            // from the cycle head. We mark them as participating in a\n+            // cycle. This suppresses caching for those nodes. See\n+            // `in_cycle` field for more details.\n+            for item in stack.iter().take(rec_index + 1) {\n+                debug!(\"evaluate_stack: marking {:?} as cycle participant\", item.fresh_trait_ref);\n+                item.in_cycle.set(true);\n+            }\n+\n             // Subtle: when checking for a coinductive cycle, we do\n             // not compare using the \"freshened trait refs\" (which\n             // have erased regions) but rather the fully explicit\n@@ -3690,6 +3740,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         TraitObligationStack {\n             obligation,\n             fresh_trait_ref,\n+            in_cycle: Cell::new(false),\n             previous: previous_stack,\n         }\n     }"}, {"sha": "53364e72bfe3ad70e71e49efe893799c8d4ed8b5", "filename": "src/librustc_target/spec/apple_base.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_base.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -14,7 +14,7 @@ pub fn opts() -> TargetOptions {\n     //\n     // Here we detect what version is being requested, defaulting to 10.7. ELF\n     // TLS is flagged as enabled if it looks to be supported.\n-    let version = macos_deployment_target().unwrap_or((10, 7));\n+    let version = macos_deployment_target();\n \n     TargetOptions {\n         // macOS has -dead_strip, which doesn't rely on function_sections\n@@ -35,7 +35,7 @@ pub fn opts() -> TargetOptions {\n     }\n }\n \n-fn macos_deployment_target() -> Option<(u32, u32)> {\n+fn macos_deployment_target() -> (u32, u32) {\n     let deployment_target = env::var(\"MACOSX_DEPLOYMENT_TARGET\").ok();\n     let version = deployment_target.as_ref().and_then(|s| {\n         let mut i = s.splitn(2, '.');\n@@ -44,17 +44,10 @@ fn macos_deployment_target() -> Option<(u32, u32)> {\n         a.parse::<u32>().and_then(|a| b.parse::<u32>().map(|b| (a, b))).ok()\n     });\n \n-    version\n+    version.unwrap_or((10, 7))\n }\n \n pub fn macos_llvm_target(arch: &str) -> String {\n-    let version = macos_deployment_target();\n-    let llvm_target = match version {\n-        Some((major, minor)) => {\n-            format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n-        },\n-        None => format!(\"{}-apple-darwin\", arch)\n-    };\n-\n-    llvm_target\n+    let (major, minor) = macos_deployment_target();\n+    format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n }"}, {"sha": "13baf667808f817293c72f6f13ed44dac147ae29", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -466,6 +466,8 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n             let hir_id = self.tcx().hir().as_local_hir_id(def_id).unwrap();\n             let instantiated_ty = self.resolve(&opaque_defn.concrete_ty, &hir_id);\n \n+            debug_assert!(!instantiated_ty.has_escaping_bound_vars());\n+\n             let generics = self.tcx().generics_of(def_id);\n \n             let definition_ty = if generics.parent.is_some() {\n@@ -524,8 +526,9 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                     },\n                     lt_op: |region| {\n                         match region {\n-                            // ignore static regions\n-                            ty::ReStatic => region,\n+                            // Skip static and bound regions: they don't\n+                            // require substitution.\n+                            ty::ReStatic | ty::ReLateBound(..) => region,\n                             _ => {\n                                 trace!(\"checking {:?}\", region);\n                                 for (subst, p) in opaque_defn.substs.iter().zip(&generics.params) {"}, {"sha": "39896ac2fcd272bc49e7f876a4976dd8f056488b", "filename": "src/libstd/env.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -746,6 +746,10 @@ impl Iterator for Args {\n         self.inner.next().map(|s| s.into_string().unwrap())\n     }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+    #[inline]\n+    fn last(mut self) -> Option<String> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"env\", since = \"1.0.0\")]\n@@ -781,6 +785,8 @@ impl Iterator for ArgsOs {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> { self.inner.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+    #[inline]\n+    fn last(mut self) -> Option<OsString> { self.next_back() }\n }\n \n #[stable(feature = \"env\", since = \"1.0.0\")]"}, {"sha": "5c6c43017cf6402be3528a88c17dde88ad3fb055", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -43,7 +43,9 @@ use crate::sys;\n /// `CString` implements a [`as_ptr`] method through the [`Deref`]\n /// trait. This method will give you a `*const c_char` which you can\n /// feed directly to extern functions that expect a nul-terminated\n-/// string, like C's `strdup()`.\n+/// string, like C's `strdup()`. Notice that [`as_ptr`] returns a\n+/// read-only pointer; if the C code writes to it, that causes\n+/// undefined behavior.\n ///\n /// # Extracting a slice of the whole C string\n ///\n@@ -61,7 +63,7 @@ use crate::sys;\n ///\n /// Once you have the kind of slice you need (with or without a nul\n /// terminator), you can call the slice's own\n-/// [`as_ptr`][slice.as_ptr] method to get a raw pointer to pass to\n+/// [`as_ptr`][slice.as_ptr] method to get a read-only raw pointer to pass to\n /// extern functions. See the documentation for that function for a\n /// discussion on ensuring the lifetime of the raw pointer.\n ///\n@@ -1043,6 +1045,9 @@ impl CStr {\n     ///\n     /// **WARNING**\n     ///\n+    /// The returned pointer is read-only; writing to it (including passing it\n+    /// to C code that writes to it) causes undefined behavior.\n+    ///\n     /// It is your responsibility to make sure that the underlying memory is not\n     /// freed too early. For example, the following code will cause undefined\n     /// behavior when `ptr` is used inside the `unsafe` block:"}, {"sha": "59f9e439add244a4955c74191188b02d15740582", "filename": "src/libstd/path.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -888,6 +888,11 @@ impl<'a> Iterator for Iter<'a> {\n     fn next(&mut self) -> Option<&'a OsStr> {\n         self.inner.next().map(Component::as_os_str)\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a OsStr> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -951,6 +956,11 @@ impl<'a> Iterator for Components<'a> {\n         }\n         None\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "f0594bb21bd83245969f91011b9360574accb538", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -35,6 +35,8 @@ impl Iterator for Args {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> { self.iter.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n+    #[inline]\n+    fn last(mut self) -> Option<OsString> { self.next_back() }\n }\n \n impl ExactSizeIterator for Args {"}, {"sha": "77f1439e17b10324c7d67d25ab036d7755a27922", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -13,7 +13,6 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n \n #[cfg(all(unix,\n           not(target_os = \"ios\"),\n-          not(all(target_os = \"macos\", miri)),\n           not(target_os = \"openbsd\"),\n           not(target_os = \"freebsd\"),\n           not(target_os = \"fuchsia\")))]\n@@ -107,9 +106,7 @@ mod imp {\n // once per thread in `hashmap_random_keys`. Therefore `SecRandomCopyBytes` is\n // only used on iOS where direct access to `/dev/urandom` is blocked by the\n // sandbox.\n-// HACK: However, we do use this when running in Miri on macOS; intercepting this is much\n-// easier than intercepting accesses to /dev/urandom.\n-#[cfg(any(target_os = \"ios\", all(target_os = \"macos\", miri)))]\n+#[cfg(target_os = \"ios\")]\n mod imp {\n     use crate::io;\n     use crate::ptr;"}, {"sha": "6766099c1ece13d05520f6f5ba04ed1c453f7adc", "filename": "src/libstd/sys/wasm/args.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fsys%2Fwasm%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fsys%2Fwasm%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fargs.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -37,6 +37,10 @@ impl Iterator for Args {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+    #[inline]\n+    fn last(mut self) -> Option<OsString> {\n+        self.next_back()\n+    }\n }\n \n impl ExactSizeIterator for Args {"}, {"sha": "744d7ec59d3a3e76303da40a4589bf099af936d1", "filename": "src/libstd/sys/windows/args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -181,6 +181,8 @@ impl Iterator for Args {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> { self.parsed_args_list.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.parsed_args_list.size_hint() }\n+    #[inline]\n+    fn last(mut self) -> Option<OsString> { self.next_back() }\n }\n \n impl DoubleEndedIterator for Args {"}, {"sha": "1cebc49236feedf66de871e825385ee66413d068", "filename": "src/test/codegen/i686-no-macosx-deployment-target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Ftest%2Fcodegen%2Fi686-no-macosx-deployment-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Ftest%2Fcodegen%2Fi686-no-macosx-deployment-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fi686-no-macosx-deployment-target.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -19,7 +19,7 @@ pub struct Bool {\n     b: bool,\n }\n \n-// CHECK: target triple = \"i686-apple-darwin\"\n+// CHECK: target triple = \"i686-apple-macosx10.7.0\"\n #[no_mangle]\n pub extern \"C\" fn structbool() -> Bool {\n     Bool { b: true }"}, {"sha": "c5ac73b54e186c065fc32343ccd3d41925e42875", "filename": "src/test/codegen/x86_64-no-macosx-deployment-target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Ftest%2Fcodegen%2Fx86_64-no-macosx-deployment-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Ftest%2Fcodegen%2Fx86_64-no-macosx-deployment-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fx86_64-no-macosx-deployment-target.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -19,7 +19,7 @@ pub struct Bool {\n     b: bool,\n }\n \n-// CHECK: target triple = \"x86_64-apple-darwin\"\n+// CHECK: target triple = \"x86_64-apple-macosx10.7.0\"\n #[no_mangle]\n pub extern \"C\" fn structbool() -> Bool {\n     Bool { b: true }"}, {"sha": "a4fe86501299fc80009856d93a13e32fe2c8ef3e", "filename": "src/test/ui/existential_types/issue-60655-latebound-regions.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Ftest%2Fui%2Fexistential_types%2Fissue-60655-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Ftest%2Fui%2Fexistential_types%2Fissue-60655-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fissue-60655-latebound-regions.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -0,0 +1,30 @@\n+// Test that existential types are allowed to contain late-bound regions.\n+\n+// compile-pass\n+// edition:2018\n+\n+#![feature(async_await, existential_type)]\n+\n+use std::future::Future;\n+\n+pub existential type Func: Sized;\n+\n+// Late bound region should be allowed to escape the function, since it's bound\n+// in the type.\n+fn null_function_ptr() -> Func {\n+    None::<for<'a> fn(&'a ())>\n+}\n+\n+async fn async_nop(_: &u8) {}\n+\n+pub existential type ServeFut: Future<Output=()>;\n+\n+// Late bound regions occur in the generator witness type here.\n+fn serve() -> ServeFut {\n+    async move {\n+        let x = 5;\n+        async_nop(&x).await\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "45aa1b3c52239e5ebe5f923c3f381951545fd8b7", "filename": "src/test/ui/traits/cycle-cache-err-60010.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -0,0 +1,71 @@\n+// Test that we properly detect the cycle amongst the traits\n+// here and report an error.\n+\n+use std::panic::RefUnwindSafe;\n+\n+trait Database {\n+    type Storage;\n+}\n+trait HasQueryGroup {}\n+trait Query<DB> {\n+    type Data;\n+}\n+trait SourceDatabase {\n+    fn parse(&self) {\n+        loop {}\n+    }\n+}\n+\n+struct ParseQuery;\n+struct RootDatabase {\n+    _runtime: Runtime<RootDatabase>,\n+}\n+struct Runtime<DB: Database> {\n+    _storage: Box<DB::Storage>,\n+}\n+struct SalsaStorage {\n+    _parse: <ParseQuery as Query<RootDatabase>>::Data, //~ ERROR overflow\n+}\n+\n+impl Database for RootDatabase { //~ ERROR overflow\n+    type Storage = SalsaStorage;\n+}\n+impl HasQueryGroup for RootDatabase {}\n+impl<DB> Query<DB> for ParseQuery\n+where\n+    DB: SourceDatabase,\n+    DB: Database,\n+{\n+    type Data = RootDatabase;\n+}\n+impl<T> SourceDatabase for T\n+where\n+    T: RefUnwindSafe,\n+    T: HasQueryGroup,\n+{\n+}\n+\n+pub(crate) fn goto_implementation(db: &RootDatabase) -> u32 {\n+    // This is not satisfied:\n+    //\n+    // - `RootDatabase: SourceDatabase`\n+    //   - requires `RootDatabase: RefUnwindSafe` + `RootDatabase: HasQueryGroup`\n+    // - `RootDatabase: RefUnwindSafe`\n+    //   - requires `Runtime<RootDatabase>: RefUnwindSafe`\n+    // - `Runtime<RootDatabase>: RefUnwindSafe`\n+    //   - requires `DB::Storage: RefUnwindSafe` (`SalsaStorage: RefUnwindSafe`)\n+    // - `SalsaStorage: RefUnwindSafe`\n+    //    - requires `<ParseQuery as Query<RootDatabase>>::Data: RefUnwindSafe`,\n+    //      which means `ParseQuery: Query<RootDatabase>`\n+    // - `ParseQuery: Query<RootDatabase>`\n+    //    - requires `RootDatabase: SourceDatabase`,\n+    // - `RootDatabase: SourceDatabase` is already on the stack, so we have a\n+    //   cycle with non-coinductive participants\n+    //\n+    // we used to fail to report an error here because we got the\n+    // caching wrong.\n+    SourceDatabase::parse(db);\n+    22\n+}\n+\n+fn main() {}"}, {"sha": "9192f7ba2e3b0af8092cdf72376babfdd9fb5b80", "filename": "src/test/ui/traits/cycle-cache-err-60010.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -0,0 +1,20 @@\n+error[E0275]: overflow evaluating the requirement `RootDatabase: SourceDatabase`\n+  --> $DIR/cycle-cache-err-60010.rs:27:5\n+   |\n+LL |     _parse: <ParseQuery as Query<RootDatabase>>::Data,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n+\n+error[E0275]: overflow evaluating the requirement `RootDatabase: SourceDatabase`\n+  --> $DIR/cycle-cache-err-60010.rs:30:6\n+   |\n+LL | impl Database for RootDatabase {\n+   |      ^^^^^^^^\n+   |\n+   = note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n+   = note: required because it appears within the type `SalsaStorage`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "ad3269c4b510b94b7c0082f4bb341bee6ed1eca4", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -1 +1 @@\n-Subproject commit 3710ec59962295336ab4aed100267b584dd7df7d\n+Subproject commit ad3269c4b510b94b7c0082f4bb341bee6ed1eca4"}, {"sha": "bc0c76d861a178911f3f506196a7404eda1e690d", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -1 +1 @@\n-Subproject commit 053aa694990a212ad8942dd72101ede23597c0e9\n+Subproject commit bc0c76d861a178911f3f506196a7404eda1e690d"}]}