{"sha": "fc67d8fac48d48bcdeaab1c8e0a2770e0f246247", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNjdkOGZhYzQ4ZDQ4YmNkZWFhYjFjOGUwYTI3NzBlMGYyNDYyNDc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-08-31T00:01:26Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-10-25T20:48:44Z"}, "message": "Give each PathSegment a NodeId", "tree": {"sha": "61da5926212793f34606e7cffeb3e66384577afe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61da5926212793f34606e7cffeb3e66384577afe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc67d8fac48d48bcdeaab1c8e0a2770e0f246247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc67d8fac48d48bcdeaab1c8e0a2770e0f246247", "html_url": "https://github.com/rust-lang/rust/commit/fc67d8fac48d48bcdeaab1c8e0a2770e0f246247", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc67d8fac48d48bcdeaab1c8e0a2770e0f246247/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ec22e7ec7ed0da2add0763d239e77c5474f3d4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec22e7ec7ed0da2add0763d239e77c5474f3d4a", "html_url": "https://github.com/rust-lang/rust/commit/8ec22e7ec7ed0da2add0763d239e77c5474f3d4a"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "7548c2988547b151aaca9e05f4ee0bc7f1a5f9c6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc67d8fac48d48bcdeaab1c8e0a2770e0f246247/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc67d8fac48d48bcdeaab1c8e0a2770e0f246247/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=fc67d8fac48d48bcdeaab1c8e0a2770e0f246247", "patch": "@@ -129,6 +129,8 @@ pub struct PathSegment {\n     /// The identifier portion of this path segment.\n     pub ident: Ident,\n \n+    pub id: NodeId,\n+\n     /// Type/lifetime parameters attached to this path. They come in\n     /// two flavors: `Path<A,B,C>` and `Path(A,B) -> C`.\n     /// `None` means that no parameter list is supplied (`Path`),\n@@ -140,10 +142,14 @@ pub struct PathSegment {\n \n impl PathSegment {\n     pub fn from_ident(ident: Ident) -> Self {\n-        PathSegment { ident, args: None }\n+        PathSegment { ident, id: DUMMY_NODE_ID, args: None }\n     }\n     pub fn crate_root(span: Span) -> Self {\n-        PathSegment::from_ident(Ident::new(keywords::CrateRoot.name(), span))\n+        PathSegment {\n+            ident: Ident::new(keywords::CrateRoot.name(), span),\n+            id: CRATE_NODE_ID,\n+            args: None,\n+        }\n     }\n }\n "}, {"sha": "7928ec1606b1d5b986db8f9a7df31474016d851d", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc67d8fac48d48bcdeaab1c8e0a2770e0f246247/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc67d8fac48d48bcdeaab1c8e0a2770e0f246247/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=fc67d8fac48d48bcdeaab1c8e0a2770e0f246247", "patch": "@@ -329,7 +329,11 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         } else {\n             None\n         };\n-        segments.push(ast::PathSegment { ident: last_ident.with_span_pos(span), args });\n+        segments.push(ast::PathSegment {\n+            ident: last_ident.with_span_pos(span),\n+            id: ast::DUMMY_NODE_ID,\n+            args,\n+        });\n         let mut path = ast::Path { span, segments };\n         if global {\n             if let Some(seg) = path.make_root() {\n@@ -366,7 +370,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         } else {\n             None\n         };\n-        path.segments.push(ast::PathSegment { ident, args });\n+        path.segments.push(ast::PathSegment { ident, id: ast::DUMMY_NODE_ID, args });\n \n         (ast::QSelf {\n             ty: self_type,"}, {"sha": "bec193548e176389edb161ce37aad598fb831653", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc67d8fac48d48bcdeaab1c8e0a2770e0f246247/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc67d8fac48d48bcdeaab1c8e0a2770e0f246247/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=fc67d8fac48d48bcdeaab1c8e0a2770e0f246247", "patch": "@@ -468,8 +468,9 @@ pub fn noop_fold_usize<T: Folder>(i: usize, _: &mut T) -> usize {\n \n pub fn noop_fold_path<T: Folder>(Path { segments, span }: Path, fld: &mut T) -> Path {\n     Path {\n-        segments: segments.move_map(|PathSegment { ident, args }| PathSegment {\n+        segments: segments.move_map(|PathSegment { ident, id, args }| PathSegment {\n             ident: fld.fold_ident(ident),\n+            id: fld.new_id(id),\n             args: args.map(|args| args.map(|args| fld.fold_generic_args(args))),\n         }),\n         span: fld.new_span(span)\n@@ -1234,6 +1235,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n                 ExprKind::MethodCall(\n                     PathSegment {\n                         ident: folder.fold_ident(seg.ident),\n+                        id: folder.new_id(seg.id),\n                         args: seg.args.map(|args| {\n                             args.map(|args| folder.fold_generic_args(args))\n                         }),"}, {"sha": "619a53e1c7c95ad63d4b8b702038941cf38b266f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc67d8fac48d48bcdeaab1c8e0a2770e0f246247/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc67d8fac48d48bcdeaab1c8e0a2770e0f246247/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fc67d8fac48d48bcdeaab1c8e0a2770e0f246247", "patch": "@@ -2134,10 +2134,10 @@ impl<'a> Parser<'a> {\n                 ParenthesisedArgs { inputs, output, span }.into()\n             };\n \n-            PathSegment { ident, args }\n+            PathSegment { ident, args, id: ast::DUMMY_NODE_ID }\n         } else {\n             // Generic arguments are not found.\n-            PathSegment::from_ident(ident)\n+            PathSegment::from_ident(ident,)\n         })\n     }\n "}]}