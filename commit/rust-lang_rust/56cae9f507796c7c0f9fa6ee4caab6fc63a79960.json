{"sha": "56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2Y2FlOWY1MDc3OTZjN2MwZjlmYTZlZTRjYWFiNmZjNjNhNzk5NjA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-15T11:58:28Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-15T11:58:28Z"}, "message": "Rollup merge of #30787 - nikomatsakis:future-incompatible-lint, r=brson\n\nThere is now more structure to the report, so that you can specify e.g. an RFC/PR/issue number and other explanatory details.\n\nExample message:\n\n```\ntype-parameter-invalid-lint.rs:14:8: 14:9 error: defaults for type parameters are only allowed on type definitions, like `struct` or `enum`\ntype-parameter-invalid-lint.rs:14 fn avg<T=i32>(_: T) {}\n                                         ^\ntype-parameter-invalid-lint.rs:14:8: 14:9 warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\ntype-parameter-invalid-lint.rs:14:8: 14:9 note: for more information, see PR 30742 <https://github.com/rust-lang/rust/pull/30724>\ntype-parameter-invalid-lint.rs:11:9: 11:28 note: lint level defined here\ntype-parameter-invalid-lint.rs:11 #![deny(future_incompatible)]\n                                          ^~~~~~~~~~~~~~~~~~~\nerror: aborting due to previous error\n```\n\nr? @brson\n\nI would really like feedback also on the specific messages!\n\nFixes #30746", "tree": {"sha": "8f61820aab7a6f9bdbe6d36abb7e8c8ffb9b76ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f61820aab7a6f9bdbe6d36abb7e8c8ffb9b76ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "html_url": "https://github.com/rust-lang/rust/commit/56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8637da87b6f7c025e29caf76d168dbfad2ec9964", "url": "https://api.github.com/repos/rust-lang/rust/commits/8637da87b6f7c025e29caf76d168dbfad2ec9964", "html_url": "https://github.com/rust-lang/rust/commit/8637da87b6f7c025e29caf76d168dbfad2ec9964"}, {"sha": "0704279dd366d09f107014027647a64f8bfefed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0704279dd366d09f107014027647a64f8bfefed9", "html_url": "https://github.com/rust-lang/rust/commit/0704279dd366d09f107014027647a64f8bfefed9"}], "stats": {"total": 149, "additions": 127, "deletions": 22}, "files": [{"sha": "3689312bed1d4e3a204c7436a762a89bd7a356d9", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "patch": "@@ -16,9 +16,6 @@\n \n use lint::{LintPass, LateLintPass, LintArray};\n \n-// name of the future-incompatible group\n-pub const FUTURE_INCOMPATIBLE: &'static str = \"future_incompatible\";\n-\n declare_lint! {\n     pub CONST_ERR,\n     Warn,"}, {"sha": "1abfa2bfc59d1bf5b7d67ad0f68bfad9580481f3", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "patch": "@@ -76,10 +76,22 @@ pub struct LintStore {\n     /// is true if the lint group was added by a plugin.\n     lint_groups: FnvHashMap<&'static str, (Vec<LintId>, bool)>,\n \n+    /// Extra info for future incompatibility lints, descibing the\n+    /// issue or RFC that caused the incompatibility.\n+    future_incompatible: FnvHashMap<LintId, FutureIncompatibleInfo>,\n+\n     /// Maximum level a lint can be\n     lint_cap: Option<Level>,\n }\n \n+/// Extra information for a future incompatibility lint. See the call\n+/// to `register_future_incompatible` in `librustc_lint/lib.rs` for\n+/// guidelines.\n+pub struct FutureIncompatibleInfo {\n+    pub id: LintId,\n+    pub reference: &'static str // e.g., a URL for an issue/PR/RFC or error code\n+}\n+\n /// The targed of the `by_name` map, which accounts for renaming/deprecation.\n enum TargetLint {\n     /// A direct lint target\n@@ -124,6 +136,7 @@ impl LintStore {\n             late_passes: Some(vec!()),\n             by_name: FnvHashMap(),\n             levels: FnvHashMap(),\n+            future_incompatible: FnvHashMap(),\n             lint_groups: FnvHashMap(),\n             lint_cap: None,\n         }\n@@ -183,6 +196,20 @@ impl LintStore {\n         }\n     }\n \n+    pub fn register_future_incompatible(&mut self,\n+                                        sess: Option<&Session>,\n+                                        lints: Vec<FutureIncompatibleInfo>) {\n+        let ids = lints.iter().map(|f| f.id).collect();\n+        self.register_group(sess, false, \"future_incompatible\", ids);\n+        for info in lints {\n+            self.future_incompatible.insert(info.id, info);\n+        }\n+    }\n+\n+    pub fn future_incompatible(&self, id: LintId) -> Option<&FutureIncompatibleInfo> {\n+        self.future_incompatible.get(&id)\n+    }\n+\n     pub fn register_group(&mut self, sess: Option<&Session>,\n                           from_plugin: bool, name: &'static str,\n                           to: Vec<LintId>) {\n@@ -418,14 +445,18 @@ pub fn raw_struct_lint<'a>(sess: &'a Session,\n     };\n \n     // Check for future incompatibility lints and issue a stronger warning.\n-    let future_incompat_lints = &lints.lint_groups[builtin::FUTURE_INCOMPATIBLE];\n-    let this_id = LintId::of(lint);\n-    if future_incompat_lints.0.iter().any(|&id| id == this_id) {\n-        let msg = \"this lint will become a HARD ERROR in a future release!\";\n+    if let Some(future_incompatible) = lints.future_incompatible(LintId::of(lint)) {\n+        let explanation = format!(\"this was previously accepted by the compiler \\\n+                                   but is being phased out; \\\n+                                   it will become a hard error in a future release!\");\n+        let citation = format!(\"for more information, see {}\",\n+                               future_incompatible.reference);\n         if let Some(sp) = span {\n-            err.span_note(sp, msg);\n+            err.fileline_warn(sp, &explanation);\n+            err.fileline_note(sp, &citation);\n         } else {\n-            err.note(msg);\n+            err.warn(&explanation);\n+            err.note(&citation);\n         }\n     }\n "}, {"sha": "6061525ef398cc09da3749f08068d88c4113e3c6", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "patch": "@@ -41,7 +41,7 @@ use rustc_front::hir;\n \n pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         raw_emit_lint, check_crate, check_ast_crate, gather_attrs,\n-                        raw_struct_lint, GatherNodeLevels};\n+                        raw_struct_lint, GatherNodeLevels, FutureIncompatibleInfo};\n \n /// Specification of a single lint.\n #[derive(Copy, Clone, Debug)]"}, {"sha": "53acbe3af67433f500bffd3aae1476c82493513d", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "patch": "@@ -54,6 +54,7 @@ pub use rustc::util as util;\n \n use session::Session;\n use lint::LintId;\n+use lint::FutureIncompatibleInfo;\n \n mod bad_style;\n mod builtin;\n@@ -144,9 +145,29 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_MUT, UNREACHABLE_CODE, UNUSED_MUST_USE,\n                     UNUSED_UNSAFE, PATH_STATEMENTS, UNUSED_ATTRIBUTES);\n \n-    add_lint_group!(sess, FUTURE_INCOMPATIBLE,\n-                    PRIVATE_IN_PUBLIC, INVALID_TYPE_PARAM_DEFAULT,\n-                    MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT);\n+    // Guidelines for creating a future incompatibility lint:\n+    //\n+    // - Create a lint defaulting to warn as normal, with ideally the same error\n+    //   message you would normally give\n+    // - Add a suitable reference, typically an RFC or tracking issue. Go ahead\n+    //   and include the full URL.\n+    // - Later, change lint to error\n+    // - Eventually, remove lint\n+    store.register_future_incompatible(sess, vec![\n+        FutureIncompatibleInfo {\n+            id: LintId::of(PRIVATE_IN_PUBLIC),\n+            reference: \"the explanation for E0446 (`--explain E0446`)\",\n+        },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n+            reference: \"PR 30742 <https://github.com/rust-lang/rust/pull/30724>\",\n+        },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT),\n+            reference: \"RFC 218 <https://github.com/rust-lang/rfcs/blob/\\\n+                        master/text/0218-empty-struct-with-braces.md>\",\n+        },\n+        ]);\n \n     // We have one lint pass defined specially\n     store.register_late_pass(sess, false, box lint::GatherNodeLevels);"}, {"sha": "73a1ecf7fc5dc926769311a8c21c75b87f346379", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "patch": "@@ -1528,7 +1528,7 @@ impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a,\n                                         lint::builtin::PRIVATE_IN_PUBLIC,\n                                         node_id,\n                                         ty.span,\n-                                        \"private type in public interface (error E0446)\".to_string()\n+                                        format!(\"private type in public interface\"),\n                                     );\n                                 }\n                             }"}, {"sha": "dfa144699b217ad0a6ec540dbf96f096ca41dccc", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "patch": "@@ -595,14 +595,10 @@ fn bad_struct_kind_err(sess: &Session, pat: &hir::Pat, path: &hir::Path, lint: b\n     let name = pprust::path_to_string(path);\n     let msg = format!(\"`{}` does not name a tuple variant or a tuple struct\", name);\n     if lint {\n-        let expanded_msg =\n-            format!(\"{}; RFC 218 disallowed matching of unit variants or unit structs via {}(..)\",\n-                    msg,\n-                    name);\n         sess.add_lint(lint::builtin::MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n                       pat.id,\n                       pat.span,\n-                      expanded_msg);\n+                      msg);\n     } else {\n         span_err!(sess, pat.span, E0164, \"{}\", msg);\n     }"}, {"sha": "af2824d0930d2e8ed8058264054a10d95d0185d0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "patch": "@@ -1917,8 +1917,8 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                 lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n                 param.id,\n                 param.span,\n-                format!(\"defaults for type parameters are only allowed \\\n-                         on `struct` or `enum` definitions (see issue #27336)\"));\n+                format!(\"defaults for type parameters are only allowed on type definitions, \\\n+                         like `struct` or `enum`\"));\n         }\n     }\n "}, {"sha": "6983c74696ac833979307e9c7dd632a663152e1e", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "patch": "@@ -161,6 +161,17 @@ impl<'a> DiagnosticBuilder<'a> {\n         self.sub(Level::Note, msg, Some(sp), None);\n         self\n     }\n+    pub fn warn(&mut self, msg: &str) -> &mut DiagnosticBuilder<'a>  {\n+        self.sub(Level::Warning, msg, None, None);\n+        self\n+    }\n+    pub fn span_warn(&mut self,\n+                     sp: Span,\n+                     msg: &str)\n+                     -> &mut DiagnosticBuilder<'a> {\n+        self.sub(Level::Warning, msg, Some(sp), None);\n+        self\n+    }\n     pub fn help(&mut self , msg: &str) -> &mut DiagnosticBuilder<'a>  {\n         self.sub(Level::Help, msg, None, None);\n         self\n@@ -190,6 +201,13 @@ impl<'a> DiagnosticBuilder<'a> {\n         self.sub(Level::Note, msg, Some(sp), Some(EndSpan(sp)));\n         self\n     }\n+    pub fn fileline_warn(&mut self ,\n+                         sp: Span,\n+                         msg: &str)\n+                         -> &mut DiagnosticBuilder<'a>  {\n+        self.sub(Level::Warning, msg, Some(sp), Some(FileLine(sp)));\n+        self\n+    }\n     pub fn fileline_note(&mut self ,\n                          sp: Span,\n                          msg: &str)"}, {"sha": "cffd9fd9b49385d49e438ce866b1b5c098adbbcf", "filename": "src/test/compile-fail/empty-struct-unit-pat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs?ref=56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "patch": "@@ -32,12 +32,14 @@ fn main() { //~ ERROR: compilation successful\n     // }\n     match e1 {\n         Empty1(..) => () //~ WARN `Empty1` does not name a tuple variant or a tuple struct\n+            //~^ WARN hard error\n     }\n     // Rejected by parser as yet\n     // match e2 {\n     //     E::Empty2() => () // ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n     // }\n     match e2 {\n         E::Empty2(..) => () //~ WARN `E::Empty2` does not name a tuple variant or a tuple struct\n+            //~^ WARN hard error\n     }\n }"}, {"sha": "9aab06ce14ee16b324075fcaed44fbedc7c63766", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "patch": "@@ -26,23 +26,34 @@ mod types {\n     }\n \n     pub type Alias = Priv; //~ WARN private type in public interface\n+    //~^ WARNING hard error\n     pub enum E {\n         V1(Priv), //~ WARN private type in public interface\n+        //~^ WARNING hard error\n         V2 { field: Priv }, //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n     pub trait Tr {\n         const C: Priv = Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n         type Alias = Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n         fn f1(arg: Priv) {} //~ WARN private type in public interface\n+        //~^ WARNING hard error\n         fn f2() -> Priv { panic!() } //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n     extern {\n         pub static ES: Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n         pub fn ef1(arg: Priv); //~ WARN private type in public interface\n+        //~^ WARNING hard error\n         pub fn ef2() -> Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n     impl PubTr for Pub {\n         type Alias = Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n }\n \n@@ -53,14 +64,21 @@ mod traits {\n \n     pub type Alias<T: PrivTr> = T; //~ WARN private trait in public interface\n     //~^ WARN trait bounds are not (yet) enforced in type definitions\n+    //~| WARNING hard error\n     pub trait Tr1: PrivTr {} //~ WARN private trait in public interface\n+    //~^ WARNING hard error\n     pub trait Tr2<T: PrivTr> {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     pub trait Tr3 {\n         type Alias: PrivTr; //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n         fn f<T: PrivTr>(arg: T) {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     }\n     impl<T: PrivTr> Pub<T> {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     impl<T: PrivTr> PubTr for Pub<T> {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n }\n \n mod traits_where {\n@@ -69,12 +87,17 @@ mod traits_where {\n     pub trait PubTr {}\n \n     pub type Alias<T> where T: PrivTr = T; //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     pub trait Tr2<T> where T: PrivTr {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     pub trait Tr3 {\n         fn f<T>(arg: T) where T: PrivTr {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     }\n     impl<T> Pub<T> where T: PrivTr {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     impl<T> PubTr for Pub<T> where T: PrivTr {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n }\n \n mod generics {\n@@ -84,9 +107,13 @@ mod generics {\n     pub trait PubTr<T> {}\n \n     pub trait Tr1: PrivTr<Pub> {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     pub trait Tr2: PubTr<Priv> {} //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     pub trait Tr3: PubTr<[Priv; 1]> {} //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     pub trait Tr4: PubTr<Pub<Priv>> {} //~ WARN private type in public interface\n+        //~^ WARNING hard error\n }\n \n mod impls {\n@@ -113,6 +140,7 @@ mod impls {\n     }\n     impl PubTr for Pub {\n         type Alias = Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n }\n \n@@ -179,22 +207,27 @@ mod aliases_pub {\n     pub trait Tr1: PrivUseAliasTr {} // OK\n     // This should be OK, if type aliases are substituted\n     pub trait Tr2: PrivUseAliasTr<PrivAlias> {} //~ WARN private type in public interface\n+        //~^ WARNING hard error\n \n     impl PrivAlias {\n         pub fn f(arg: Priv) {} //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n     // This doesn't even parse\n     // impl <Priv as PrivTr>::AssocAlias {\n     //     pub fn f(arg: Priv) {} // WARN private type in public interface\n     // }\n     impl PrivUseAliasTr for PrivUseAlias {\n         type Check = Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n     impl PrivUseAliasTr for PrivAlias {\n         type Check = Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n     impl PrivUseAliasTr for <Priv as PrivTr>::AssocAlias {\n         type Check = Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n }\n \n@@ -217,8 +250,11 @@ mod aliases_priv {\n     impl PrivTr for Priv {}\n \n     pub trait Tr1: PrivUseAliasTr {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     pub trait Tr2: PrivUseAliasTr<PrivAlias> {} //~ WARN private trait in public interface\n      //~^ WARN private type in public interface\n+        //~| WARNING hard error\n+        //~| WARNING hard error\n \n     impl PrivUseAlias {\n         pub fn f(arg: Priv) {} // OK"}, {"sha": "06f08dc13c6b484ed2684904133954a128413d84", "filename": "src/test/compile-fail/private-variant-reexport.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs?ref=56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "patch": "@@ -13,18 +13,22 @@\n \n mod m1 {\n     pub use ::E::V; //~ WARN variant `V` is private, and cannot be reexported\n+    //~^ WARNING hard error\n }\n \n mod m2 {\n     pub use ::E::{V}; //~ WARN variant `V` is private, and cannot be reexported\n+    //~^ WARNING hard error\n }\n \n mod m3 {\n     pub use ::E::V::{self}; //~ WARN variant `V` is private, and cannot be reexported\n+    //~^ WARNING hard error\n }\n \n mod m4 {\n     pub use ::E::*; //~ WARN variant `V` is private, and cannot be reexported\n+    //~^ WARNING hard error\n }\n \n enum E { V }"}, {"sha": "9291329fac37f6b75c3e0504efe9769f6259f0fa", "filename": "src/test/compile-fail/type-parameter-invalid-lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cae9f507796c7c0f9fa6ee4caab6fc63a79960/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs?ref=56cae9f507796c7c0f9fa6ee4caab6fc63a79960", "patch": "@@ -13,5 +13,5 @@\n \n fn avg<T=i32>(_: T) {}\n //~^ ERROR defaults for type parameters are only allowed\n-//~| NOTE HARD ERROR\n+//~| WARNING hard error\n fn main() {}"}]}