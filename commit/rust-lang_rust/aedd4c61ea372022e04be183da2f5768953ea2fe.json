{"sha": "aedd4c61ea372022e04be183da2f5768953ea2fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZGQ0YzYxZWEzNzIwMjJlMDRiZTE4M2RhMmY1NzY4OTUzZWEyZmU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-05T09:21:11Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:35:38Z"}, "message": "Regenerate tests", "tree": {"sha": "9c8d3660fad7623defb60a5f050c61a1eb289db7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c8d3660fad7623defb60a5f050c61a1eb289db7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aedd4c61ea372022e04be183da2f5768953ea2fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg58oACgkQpp+NIls6\n19kBIQ/6AjpZEScAev/S9br1DR8W4gfhg6ju79S25Z2iLdpmLeSeIXLlVwUG+7dc\n5UiZyJt4V9k5sIo7+enpIb6Y94e6UVBL9S1GhPPG+EXdewkNC/oTH/TYyqgE/mDf\n7VEGwHxuvlcYQ6c+Yw2o12fChkN1mRMz+A1lpB8P409sSJr6+gcFMZLGOSWSmlZq\nM1McVlgaAozKlKPkScbXRHqJCzbZJQye4vnujtB96H/J3lDEVif6MHWkBOgeMPZg\nxq4RzfdsIOyniVqKiUuyfmU4iHHvNXsjYpArmWe1Ge2ykeLdBDKxldBF+h6UD7BP\nyyQvEOnThvBLX3ddPoFzTfkIiYhrp5Wuq5G+tKlBAlABYbikBPS1uc12kWEy8AKg\nSJF5d10nNAKn9BiXlf9vg3FV4+7e+3nhpLPmzbTjiGuZJECKwe+TiKCqdQzay52j\nEK/Dkr9vxwV+vMA3BiA3pHANa0HbqGilXyyPNR4M9SeIMcRQjrY7QmrDyrlvbhNL\n4gaM5gOCCQEGwEQT+Gpahl++I+46cwDc3XQ93z5xi/iHLKk1wjypVDURamky+G+d\nPHyUm5HHqOppVCVp+WCZTxJWAAObtD0xbQ34WQ15DLNe614DDWfYPJ2vOEEtFATz\nzaiVqOdNdBXtm3Xg1Dr+sYFUtbh4gZLFQAUAoU3fu7BCvGtYZ2k=\n=ZLhK\n-----END PGP SIGNATURE-----", "payload": "tree 9c8d3660fad7623defb60a5f050c61a1eb289db7\nparent 6cfda078bf36e081323b118082af822bacd8aef5\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520241671 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494538 +0100\n\nRegenerate tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aedd4c61ea372022e04be183da2f5768953ea2fe", "html_url": "https://github.com/rust-lang/rust/commit/aedd4c61ea372022e04be183da2f5768953ea2fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aedd4c61ea372022e04be183da2f5768953ea2fe/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cfda078bf36e081323b118082af822bacd8aef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cfda078bf36e081323b118082af822bacd8aef5", "html_url": "https://github.com/rust-lang/rust/commit/6cfda078bf36e081323b118082af822bacd8aef5"}], "stats": {"total": 530, "additions": 247, "deletions": 283}, "files": [{"sha": "34c077a6f7a0362da3938d9cd6f59e443d9cc183", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1858,20 +1858,6 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n-[[package]]\n-name = \"rustc_const_eval\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"arena 0.0.0\",\n- \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc 0.0.0\",\n- \"rustc_const_math 0.0.0\",\n- \"rustc_data_structures 0.0.0\",\n- \"rustc_errors 0.0.0\",\n- \"syntax 0.0.0\",\n- \"syntax_pos 0.0.0\",\n-]\n-\n [[package]]\n name = \"rustc_const_math\"\n version = \"0.0.0\"\n@@ -1914,7 +1900,6 @@ dependencies = [\n  \"rustc_allocator 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_borrowck 0.0.0\",\n- \"rustc_const_eval 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_incremental 0.0.0\",\n@@ -1964,7 +1949,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc_const_eval 0.0.0\",\n+ \"rustc_mir 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -2012,6 +1997,7 @@ dependencies = [\n name = \"rustc_mir\"\n version = \"0.0.0\"\n dependencies = [\n+ \"arena 0.0.0\",\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n@@ -2020,7 +2006,6 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_apfloat 0.0.0\",\n  \"rustc_back 0.0.0\",\n- \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -2046,10 +2031,10 @@ version = \"0.0.0\"\n dependencies = [\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n+ \"rustc_mir 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]"}, {"sha": "d927a151610ef88e401092139b58b0c17cda9b28", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -61,10 +61,10 @@ for ty::subst::Kind<'gcx> {\n     }\n }\n \n-impl<'gcx> HashStable<StableHashingContext<'gcx>>\n+impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n for ty::subst::UnpackedKind<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'gcx>,\n+                                          hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         match self {\n             ty::subst::UnpackedKind::Lifetime(lt) => lt.hash_stable(hcx, hasher),"}, {"sha": "49c4b8bc49d8ce4bcd4469cf1adaf9f23ad3d259", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -362,6 +362,7 @@ impl<'sess> OnDiskCache<'sess> {\n             cnum_map: cnum_map.as_ref().unwrap(),\n             file_index_to_file: &self.file_index_to_file,\n             file_index_to_stable_id: &self.file_index_to_stable_id,\n+            synthetic_expansion_infos: &self.synthetic_expansion_infos,\n             interpret_alloc_cache: FxHashMap::default(),\n         };\n "}, {"sha": "c9cf3f3b81fe6d68de94b0568f2a6ac625500ca6", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -36,7 +36,7 @@ use rustc_typeck as typeck;\n use rustc_privacy;\n use rustc_plugin::registry::Registry;\n use rustc_plugin as plugin;\n-use rustc_passes::{self, ast_validation, loops, consts, hir_stats};\n+use rustc_passes::{self, ast_validation, loops, rvalue_promotion, hir_stats};\n use super::Compilation;\n \n use serialize::json;"}, {"sha": "1774c95af0f052dedfdb18b22716a302f3b61119", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -373,13 +373,17 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                      PatternKind::Constant { value: hi }) => {\n                         use std::cmp::Ordering;\n                         match (end, compare_const_vals(&lo.val, &hi.val, ty).unwrap()) {\n-                            (RangeEnd::Excluded, Ordering::Less) => {},\n-                            (RangeEnd::Excluded, _) => span_err!(\n-                                self.tcx.sess,\n-                                lo_expr.span,\n-                                E0579,\n-                                \"lower range bound must be less than upper\",\n-                            ),\n+                            (RangeEnd::Excluded, Ordering::Less) =>\n+                                PatternKind::Range { lo, hi, end },\n+                            (RangeEnd::Excluded, _) => {\n+                                span_err!(\n+                                    self.tcx.sess,\n+                                    lo_expr.span,\n+                                    E0579,\n+                                    \"lower range bound must be less than upper\",\n+                                );\n+                                PatternKind::Wild\n+                            },\n                             (RangeEnd::Included, Ordering::Greater) => {\n                                 let mut err = struct_span_err!(\n                                     self.tcx.sess,\n@@ -399,10 +403,10 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                               to be less than or equal to the end of the range.\");\n                                 }\n                                 err.emit();\n+                                PatternKind::Wild\n                             },\n-                            (RangeEnd::Included, _) => {}\n+                            (RangeEnd::Included, _) => PatternKind::Range { lo, hi, end },\n                         }\n-                        PatternKind::Range { lo, hi, end }\n                     }\n                     _ => PatternKind::Wild\n                 }"}, {"sha": "f6b47efca31cd7decc2cdde09e17608996158eaf", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1090,8 +1090,7 @@ fn collect_miri<'a, 'tcx>(\n         let instance = Instance::mono(tcx, did);\n         if should_monomorphize_locally(tcx, &instance) {\n             trace!(\"collecting static {:?}\", did);\n-            let node_id = tcx.hir.as_local_node_id(did).unwrap();\n-            output.push(MonoItem::Static(node_id));\n+            output.push(MonoItem::Static(did));\n         }\n     } else if let Some(alloc) = tcx.interpret_interner.get_alloc(alloc_id) {\n         trace!(\"collecting {:?} with {:#?}\", alloc_id, alloc);"}, {"sha": "9cc3ffb30638fe78945d485a482235b0ee7e0f92", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -203,7 +203,7 @@ impl MirPass for RestoreSubsliceArrayMoveOut {\n                         let opt_size = opt_src_place.and_then(|src_place| {\n                             let src_ty = src_place.ty(mir, tcx).to_ty(tcx);\n                             if let ty::TyArray(_, ref size_o) = src_ty.sty {\n-                                size_o.val.to_const_int().and_then(|v| v.to_u64())\n+                                size_o.val.to_raw_bits().map(|n| n as u64)\n                             } else {\n                                 None\n                             }"}, {"sha": "16278c37a0cc0cba6a06e1c2b72197f1734aa125", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -32,7 +32,7 @@ use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::maps::{queries, Providers};\n+use rustc::ty::maps::Providers;\n use rustc::ty::subst::Substs;\n use rustc::traits::Reveal;\n use rustc::util::nodemap::{ItemLocalSet, NodeSet};\n@@ -325,16 +325,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n                         // Don't peek inside trait associated constants.\n                         false\n                     } else {\n-                        queries::const_is_rvalue_promotable_to_static::try_get(v.tcx, e.span, did)\n-                            .unwrap_or_else(|mut err| {\n-                                // A cycle between constants ought to be reported elsewhere.\n-                                err.cancel();\n-                                v.tcx.sess.delay_span_bug(\n-                                    e.span,\n-                                    &format!(\"cycle encountered during const qualification: {:?}\",\n-                                             did));\n-                                false\n-                            })\n+                        v.tcx.at(e.span).const_is_rvalue_promotable_to_static(did)\n                     };\n \n                     // Just in case the type is more specific than the definition,"}, {"sha": "f376de7cc4c1746fec1ae7d8ba65aa57d188d427", "filename": "src/test/ui/const-eval-overflow-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -5,7 +5,7 @@ LL | const NEG_NEG_128: i8 = -NEG_128;\n    |                         ^^^^^^^^ attempt to negate with overflow\n    |\n note: for pattern here\n-  --> $DIR/const-eval-overflow-2.rs:27:9\n+  --> $DIR/const-eval-overflow-2.rs:26:9\n    |\n LL |         NEG_NEG_128 => println!(\"A\"),\n    |         ^^^^^^^^^^^"}, {"sha": "e967f024ae3d73d7dc4675c8bc8e7653e557aff8", "filename": "src/test/ui/const-eval-overflow-4.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1,11 +1,3 @@\n-warning: constant evaluation error: attempt to add with overflow\n-  --> $DIR/const-eval-overflow-4.rs:23:13\n-   |\n-LL |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(const_err)] on by default\n-\n error[E0080]: constant evaluation error\n   --> $DIR/const-eval-overflow-4.rs:23:13\n    |"}, {"sha": "8d421f401caa5e82c88149054f7e733d1cc232a9", "filename": "src/test/ui/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1,26 +1,15 @@\n error[E0080]: constant evaluation error\n-  --> $DIR/conditional_array_execution.rs:13:19\n-   |\n-13 | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize]; //~ E0080\n-   |                   ^^^^^ attempt to subtract with overflow\n-   |\n-note: inside call to FOO\n-  --> $DIR/conditional_array_execution.rs:13:1\n+  --> $DIR/conditional_array_execution.rs:16:20\n    |\n-13 | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize]; //~ E0080\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     println!(\"{}\", FOO); //~ E0080\n+   |                    ^^^ referenced constant has errors\n \n error[E0080]: constant evaluation error\n-  --> $DIR/conditional_array_execution.rs:16:20\n-   |\n-16 |     println!(\"{}\", FOO); //~ E0080\n-   |                    ^^^ attempt to subtract with overflow\n-   |\n-note: inside call to main\n-  --> $DIR/conditional_array_execution.rs:16:20\n+  --> $DIR/conditional_array_execution.rs:13:19\n    |\n-16 |     println!(\"{}\", FOO); //~ E0080\n-   |                    ^^^\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize]; //~ E0080\n+   |                   ^^^^^ attempt to subtract with overflow\n \n error: aborting due to 2 previous errors\n \n+If you want more information on this error, try using \"rustc --explain E0080\""}, {"sha": "7651fb257e3ceb16ddddd3ae4c5f9e7117d17540", "filename": "src/test/ui/const-eval/index_out_of_bound.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bound.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: constant evaluation error\n+  --> $DIR/index_out_of_bound.rs:11:19\n+   |\n+LL | static FOO: i32 = [][0];\n+   |                   ^^^^^ index out of bounds: the len is 0 but the index is 0 at $DIR/index_out_of_bound.rs:11:19: 11:24\n+\n+error: aborting due to previous error\n+\n+If you want more information on this error, try using \"rustc --explain E0080\""}, {"sha": "21b9a282c485ea07aecbd513dc28bd7d7c06d1d6", "filename": "src/test/ui/const-eval/issue-43197.stderr", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1,29 +1,27 @@\n-warning: constant evaluation error: attempt to subtract with overflow\n-  --> $DIR/issue-43197.rs:18:20\n+error[E0080]: constant evaluation error\n+  --> $DIR/issue-43197.rs:20:23\n    |\n-LL |     const X: u32 = 0-1; //~ ERROR constant evaluation error\n-   |                    ^^^\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^ referenced constant has errors\n+\n+error[E0080]: constant evaluation error\n+  --> $DIR/issue-43197.rs:20:26\n    |\n-   = note: #[warn(const_err)] on by default\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^ referenced constant has errors\n \n-warning: constant evaluation error: attempt to subtract with overflow\n-  --> $DIR/issue-43197.rs:20:20\n+error[E0080]: constant evaluation error\n+  --> $DIR/issue-43197.rs:19:24\n    |\n LL |     const Y: u32 = foo(0-1); //~ ERROR constant evaluation error\n-   |                    ^^^^^^^^\n+   |                        ^^^ attempt to subtract with overflow\n \n error[E0080]: constant evaluation error\n   --> $DIR/issue-43197.rs:18:20\n    |\n LL |     const X: u32 = 0-1; //~ ERROR constant evaluation error\n    |                    ^^^ attempt to subtract with overflow\n \n-error[E0080]: constant evaluation error\n-  --> $DIR/issue-43197.rs:20:24\n-   |\n-LL |     const Y: u32 = foo(0-1); //~ ERROR constant evaluation error\n-   |                        ^^^ attempt to subtract with overflow\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n If you want more information on this error, try using \"rustc --explain E0080\""}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/const-expr-addr-operator.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-expr-addr-operator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-expr-addr-operator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-expr-addr-operator.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1,15 +0,0 @@\n-error[E0080]: constant evaluation error\n-  --> $DIR/const-expr-addr-operator.rs:15:29\n-   |\n-LL |     const X: &'static u32 = &22; //~ ERROR constant evaluation error\n-   |                             ^^^ unimplemented constant expression: address operator\n-   |\n-note: for pattern here\n-  --> $DIR/const-expr-addr-operator.rs:17:9\n-   |\n-LL |         X => 0,\n-   |         ^\n-\n-error: aborting due to previous error\n-\n-If you want more information on this error, try using \"rustc --explain E0080\""}, {"sha": "d57efce0dffc0a4d8c4a5e5eca4632b05a403c75", "filename": "src/test/ui/const-fn-error.stderr", "status": "modified", "additions": 10, "deletions": 37, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1,62 +1,35 @@\n-<<<<<<< HEAD\n-warning: constant evaluation error: non-constant path in constant expression\n-  --> $DIR/const-fn-error.rs:27:19\n-   |\n-LL |     let a : [i32; f(X)];\n-   |                   ^^^^\n-   |\n-   = note: #[warn(const_err)] on by default\n-\n-error[E0016]: blocks in constant functions are limited to items and tail expressions\n-  --> $DIR/const-fn-error.rs:16:19\n-   |\n-LL |     let mut sum = 0; //~ ERROR blocks in constant functions are limited\n-=======\n error[E0016]: blocks in constant functions are limited to items and tail expressions\n   --> $DIR/const-fn-error.rs:16:19\n    |\n-16 |     let mut sum = 0;\n->>>>>>> Produce  instead of pointers\n+LL |     let mut sum = 0;\n    |                   ^\n \n error[E0015]: calls in constant functions are limited to constant functions, struct and enum constructors\n   --> $DIR/const-fn-error.rs:18:14\n    |\n-<<<<<<< HEAD\n-LL |     for i in 0..x { //~ ERROR calls in constant functions\n-=======\n-18 |     for i in 0..x {\n->>>>>>> Report errors in statics during collecting instead of translating\n+LL |     for i in 0..x {\n    |              ^^^^\n \n error[E0019]: constant function contains unimplemented expression type\n   --> $DIR/const-fn-error.rs:18:14\n    |\n-<<<<<<< HEAD\n-LL |     for i in 0..x { //~ ERROR calls in constant functions\n-=======\n-18 |     for i in 0..x {\n->>>>>>> Report errors in statics during collecting instead of translating\n+LL |     for i in 0..x {\n    |              ^^^^\n \n error[E0080]: constant evaluation error\n-<<<<<<< HEAD\n-  --> $DIR/const-fn-error.rs:21:5\n+  --> $DIR/const-fn-error.rs:18:14\n    |\n-LL |     sum //~ ERROR E0080\n-   |     ^^^ non-constant path in constant expression\n+LL |     for i in 0..x {\n+   |              ^^^^ calling non-const fn `<I as std::iter::IntoIterator><std::ops::Range<usize>>::into_iter`\n+...\n+LL |     let a : [i32; f(X)];\n+   |                   ---- inside call to `f`\n    |\n note: for constant expression here\n-  --> $DIR/const-fn-error.rs:27:13\n+  --> $DIR/const-fn-error.rs:29:13\n    |\n LL |     let a : [i32; f(X)];\n    |             ^^^^^^^^^^^\n-=======\n-  --> $DIR/const-fn-error.rs:28:19\n-   |\n-28 |     let a : [i32; f(X)];\n-   |                   ^^^^ miri failed: machine error: Cannot evaluate within constants: \"calling non-const fn `<I as std::iter::IntoIterator><std::ops::Range<usize>>::into_iter`\"\n->>>>>>> Produce  instead of pointers\n \n error: aborting due to 4 previous errors\n "}, {"sha": "301b063885c19caf6b70fe8845d78f00cbb51113", "filename": "src/test/ui/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1,23 +1,15 @@\n-warning: constant evaluation error: attempt to subtract with overflow\n-  --> $DIR/const-len-underflow-separate-spans.rs:17:20\n-   |\n-LL | const LEN: usize = ONE - TWO;\n-   |                    ^^^^^^^^^\n-   |\n-   = note: #[warn(const_err)] on by default\n-\n error[E0080]: constant evaluation error\n   --> $DIR/const-len-underflow-separate-spans.rs:17:20\n    |\n LL | const LEN: usize = ONE - TWO;\n    |                    ^^^^^^^^^ attempt to subtract with overflow\n-   |\n-note: for constant expression here\n-  --> $DIR/const-len-underflow-separate-spans.rs:22:12\n+\n+error[E0080]: constant evaluation error\n+  --> $DIR/const-len-underflow-separate-spans.rs:21:17\n    |\n LL |     let a: [i8; LEN] = unimplemented!();\n-   |            ^^^^^^^^^\n+   |                 ^^^ referenced constant has errors\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n If you want more information on this error, try using \"rustc --explain E0080\""}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/const-pattern-not-const-evaluable.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1,15 +0,0 @@\n-error[E0080]: constant evaluation error\n-  --> $DIR/const-pattern-not-const-evaluable.rs:22:31\n-   |\n-LL | const BOO: Pair<Cake, Cake> = Pair(Marmor, BlackForest);\n-   |                               ^^^^ unimplemented constant expression: tuple struct constructors\n-   |\n-note: for pattern here\n-  --> $DIR/const-pattern-not-const-evaluable.rs:37:9\n-   |\n-LL |         FOO => println!(\"hi\"),\n-   |         ^^^\n-\n-error: aborting due to previous error\n-\n-If you want more information on this error, try using \"rustc --explain E0080\""}, {"sha": "6162766b58705099f8dd489dec58a0b99e5423c5", "filename": "src/test/ui/discrim-overflow-2.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fdiscrim-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fdiscrim-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow-2.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -2,65 +2,65 @@ error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:27:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 127i8\n+   |         ^^^^ overflowed on value after 127\n    |\n-   = note: explicitly set `OhNo = -128i8` if that is desired outcome\n+   = note: explicitly set `OhNo = -128` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:36:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 255u8\n+   |         ^^^^ overflowed on value after 255\n    |\n-   = note: explicitly set `OhNo = 0u8` if that is desired outcome\n+   = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:45:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 32767i16\n+   |         ^^^^ overflowed on value after 32767\n    |\n-   = note: explicitly set `OhNo = -32768i16` if that is desired outcome\n+   = note: explicitly set `OhNo = -32768` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:54:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 65535u16\n+   |         ^^^^ overflowed on value after 65535\n    |\n-   = note: explicitly set `OhNo = 0u16` if that is desired outcome\n+   = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:63:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 2147483647i32\n+   |         ^^^^ overflowed on value after 2147483647\n    |\n-   = note: explicitly set `OhNo = -2147483648i32` if that is desired outcome\n+   = note: explicitly set `OhNo = -2147483648` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:72:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 4294967295u32\n+   |         ^^^^ overflowed on value after 4294967295\n    |\n-   = note: explicitly set `OhNo = 0u32` if that is desired outcome\n+   = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:81:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 9223372036854775807i64\n+   |         ^^^^ overflowed on value after 9223372036854775807\n    |\n-   = note: explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n+   = note: explicitly set `OhNo = -9223372036854775808` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow-2.rs:90:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 18446744073709551615u64\n+   |         ^^^^ overflowed on value after 18446744073709551615\n    |\n-   = note: explicitly set `OhNo = 0u64` if that is desired outcome\n+   = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error: aborting due to 8 previous errors\n "}, {"sha": "a713aea1b21ef5e5f45f2a23de5554fd24a3023d", "filename": "src/test/ui/discrim-overflow.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fdiscrim-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fdiscrim-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -2,65 +2,65 @@ error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow.rs:25:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 127i8\n+   |         ^^^^ overflowed on value after 127\n    |\n-   = note: explicitly set `OhNo = -128i8` if that is desired outcome\n+   = note: explicitly set `OhNo = -128` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow.rs:36:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 255u8\n+   |         ^^^^ overflowed on value after 255\n    |\n-   = note: explicitly set `OhNo = 0u8` if that is desired outcome\n+   = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow.rs:47:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 32767i16\n+   |         ^^^^ overflowed on value after 32767\n    |\n-   = note: explicitly set `OhNo = -32768i16` if that is desired outcome\n+   = note: explicitly set `OhNo = -32768` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow.rs:58:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 65535u16\n+   |         ^^^^ overflowed on value after 65535\n    |\n-   = note: explicitly set `OhNo = 0u16` if that is desired outcome\n+   = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow.rs:70:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 2147483647i32\n+   |         ^^^^ overflowed on value after 2147483647\n    |\n-   = note: explicitly set `OhNo = -2147483648i32` if that is desired outcome\n+   = note: explicitly set `OhNo = -2147483648` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow.rs:82:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 4294967295u32\n+   |         ^^^^ overflowed on value after 4294967295\n    |\n-   = note: explicitly set `OhNo = 0u32` if that is desired outcome\n+   = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow.rs:94:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 9223372036854775807i64\n+   |         ^^^^ overflowed on value after 9223372036854775807\n    |\n-   = note: explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n+   = note: explicitly set `OhNo = -9223372036854775808` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n   --> $DIR/discrim-overflow.rs:106:9\n    |\n LL |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-   |         ^^^^ overflowed on value after 18446744073709551615u64\n+   |         ^^^^ overflowed on value after 18446744073709551615\n    |\n-   = note: explicitly set `OhNo = 0u64` if that is desired outcome\n+   = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error: aborting due to 8 previous errors\n "}, {"sha": "2af32eda62be9043f47149c046768e301618d042", "filename": "src/test/ui/error-codes/E0030-teach.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.rs?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -11,7 +11,7 @@\n // compile-flags: -Z teach\n \n fn main() {\n-    match 5u32 { //~ERROR non-exhaustive patterns: `_` not covered\n+    match 5u32 {\n         1000 ... 5 => {}\n         //~^ ERROR lower range bound must be less than or equal to upper\n     }"}, {"sha": "ef3bded4beffbfb8dd9badf22ca7691c997b6e8c", "filename": "src/test/ui/error-codes/E0030.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Ferror-codes%2FE0030.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Ferror-codes%2FE0030.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030.rs?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -10,7 +10,7 @@\n \n \n fn main() {\n-    match 5u32 { //~ ERROR non-exhaustive patterns\n+    match 5u32 {\n         1000 ... 5 => {}\n         //~^ ERROR lower range bound must be less than or equal to upper\n     }"}, {"sha": "501051b9fe617ed513a4af26e1b754b511bb9b2d", "filename": "src/test/ui/error-codes/E0080.stderr", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1,29 +1,37 @@\n-warning: constant evaluation error: attempt to shift left with overflow\n+error: bitshift exceeds the type's number of bits\n   --> $DIR/E0080.rs:12:9\n    |\n LL |     X = (1 << 500), //~ ERROR E0080\n    |         ^^^^^^^^^^\n    |\n-   = note: #[warn(const_err)] on by default\n+   = note: #[deny(exceeding_bitshifts)] on by default\n \n error[E0080]: constant evaluation error\n   --> $DIR/E0080.rs:12:9\n    |\n LL |     X = (1 << 500), //~ ERROR E0080\n    |         ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: constant evaluation error: attempt to divide by zero\n-  --> $DIR/E0080.rs:14:9\n+warning: constant evaluation error\n+  --> $DIR/E0080.rs:15:9\n+   |\n+LL |     Y = (1 / 0) //~ ERROR E0080\n+   |         ^^^^^^^ attempt to divide by zero\n+   |\n+   = note: #[warn(const_err)] on by default\n+\n+warning: constant evaluation error\n+  --> $DIR/E0080.rs:15:9\n    |\n LL |     Y = (1 / 0) //~ ERROR E0080\n-   |         ^^^^^^^\n+   |         ^^^^^^^ attempted to do overflowing math\n \n error[E0080]: constant evaluation error\n-  --> $DIR/E0080.rs:14:9\n+  --> $DIR/E0080.rs:15:9\n    |\n LL |     Y = (1 / 0) //~ ERROR E0080\n    |         ^^^^^^^ attempt to divide by zero\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n If you want more information on this error, try using \"rustc --explain E0080\""}, {"sha": "e1133c1fc587e6b1f592a96e40b38c64812e8ec2", "filename": "src/test/ui/error-codes/E0081.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1,10 +1,10 @@\n-error[E0081]: discriminant value `3isize` already exists\n+error[E0081]: discriminant value `3` already exists\n   --> $DIR/E0081.rs:13:9\n    |\n LL |     P = 3,\n-   |         - first use of `3isize`\n+   |         - first use of `3`\n LL |     X = 3,\n-   |         ^ enum already has `3isize`\n+   |         ^ enum already has `3`\n \n error: aborting due to previous error\n "}, {"sha": "60e077e063e09af170aba97b1d55fbceafa082bd", "filename": "src/test/ui/error-codes/E0370.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Ferror-codes%2FE0370.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Ferror-codes%2FE0370.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0370.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -2,9 +2,9 @@ error[E0370]: enum discriminant overflowed\n   --> $DIR/E0370.rs:17:5\n    |\n LL |     Y, //~ ERROR E0370\n-   |     ^ overflowed on value after 9223372036854775807i64\n+   |     ^ overflowed on value after 9223372036854775807\n    |\n-   = note: explicitly set `Y = -9223372036854775808i64` if that is desired outcome\n+   = note: explicitly set `Y = -9223372036854775808` if that is desired outcome\n \n error: aborting due to previous error\n "}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/feature-gate-const-indexing.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Ffeature-gate-const-indexing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Ffeature-gate-const-indexing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-const-indexing.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1,9 +0,0 @@\n-error[E0080]: constant evaluation error\n-  --> $DIR/feature-gate-const-indexing.rs:16:24\n-   |\n-LL |     const BLUB: [i32; (ARR[0] - 41) as usize] = [5]; //~ ERROR constant evaluation error\n-   |                        ^^^^^^ the index operation on const values is unstable\n-\n-error: aborting due to previous error\n-\n-If you want more information on this error, try using \"rustc --explain E0080\""}, {"sha": "bc062ecce2587b21fd0b4020cf67f050c0c7490d", "filename": "src/test/ui/infinite-recursion-const-fn.stderr", "status": "modified", "additions": 67, "deletions": 3, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Finfinite-recursion-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Finfinite-recursion-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite-recursion-const-fn.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1,8 +1,72 @@\n error[E0080]: constant evaluation error\n-  --> $DIR/infinite-recursion-const-fn.rs:16:18\n+  --> $DIR/infinite-recursion-const-fn.rs:14:25\n    |\n-16 | const ARR: [i32; a()] = [5; 6]; //~ ERROR constant evaluation error\n-   |                  ^^^ miri failed: reached the configured maximum number of stack frames\n+LL | const fn a() -> usize { b() } //~ ERROR constant evaluation error\n+   |                         ^^^\n+   |                         |\n+   |                         reached the configured maximum number of stack frames\n+   |                         inside call to `b`\n+LL | const fn b() -> usize { a() }\n+   |                         ---\n+   |                         |\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+   |                         inside call to `a`\n+LL | const ARR: [i32; a()] = [5; 6];\n+   |                  --- inside call to `a`\n+   |\n+note: for constant expression here\n+  --> $DIR/infinite-recursion-const-fn.rs:16:1\n+   |\n+LL | const ARR: [i32; a()] = [5; 6];\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+If you want more information on this error, try using \"rustc --explain E0080\""}, {"sha": "e26766eca373de6fb4547b6b7d2dfbeb576bdd68", "filename": "src/test/ui/issue-15524.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fissue-15524.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fissue-15524.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-15524.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1,28 +1,28 @@\n-error[E0081]: discriminant value `1isize` already exists\n+error[E0081]: discriminant value `1` already exists\n   --> $DIR/issue-15524.rs:15:9\n    |\n LL |     A = 1,\n-   |         - first use of `1isize`\n+   |         - first use of `1`\n LL |     B = 1,\n-   |         ^ enum already has `1isize`\n+   |         ^ enum already has `1`\n \n-error[E0081]: discriminant value `1isize` already exists\n+error[E0081]: discriminant value `1` already exists\n   --> $DIR/issue-15524.rs:18:5\n    |\n LL |     A = 1,\n-   |         - first use of `1isize`\n+   |         - first use of `1`\n ...\n LL |     D,\n-   |     ^ enum already has `1isize`\n+   |     ^ enum already has `1`\n \n-error[E0081]: discriminant value `1isize` already exists\n+error[E0081]: discriminant value `1` already exists\n   --> $DIR/issue-15524.rs:21:9\n    |\n LL |     A = 1,\n-   |         - first use of `1isize`\n+   |         - first use of `1`\n ...\n LL |     E = N,\n-   |         ^ enum already has `1isize`\n+   |         ^ enum already has `1`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "087eae43a299419331bdc20b442bf12dc801e130", "filename": "src/test/ui/issue-23302-1.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fissue-23302-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fissue-23302-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302-1.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -5,10 +5,15 @@ LL |     A = X::A as isize, //~ ERROR E0391\n    |         ^^^^^^^^^^^^^ cyclic reference\n    |\n note: the cycle begins when const-evaluating `X::A::{{initializer}}`...\n-  --> $DIR/issue-23302-1.rs:14:5\n+  --> $DIR/issue-23302-1.rs:14:9\n+   |\n+LL |     A = X::A as isize, //~ ERROR E0391\n+   |         ^^^^^^^^^^^^^\n+note: ...which then requires computing layout of `X`...\n+  --> $DIR/issue-23302-1.rs:14:9\n    |\n LL |     A = X::A as isize, //~ ERROR E0391\n-   |     ^^^^^^^^^^^^^^^^^\n+   |         ^^^^\n    = note: ...which then again requires const-evaluating `X::A::{{initializer}}`, completing the cycle.\n \n error: aborting due to previous error"}, {"sha": "66ba5c3258211c464295da2c1ff627a46b663a00", "filename": "src/test/ui/issue-23302-2.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fissue-23302-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fissue-23302-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302-2.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -5,10 +5,15 @@ LL |     A = Y::B as isize, //~ ERROR E0391\n    |         ^^^^^^^^^^^^^ cyclic reference\n    |\n note: the cycle begins when const-evaluating `Y::A::{{initializer}}`...\n-  --> $DIR/issue-23302-2.rs:14:5\n+  --> $DIR/issue-23302-2.rs:14:9\n+   |\n+LL |     A = Y::B as isize, //~ ERROR E0391\n+   |         ^^^^^^^^^^^^^\n+note: ...which then requires computing layout of `Y`...\n+  --> $DIR/issue-23302-2.rs:14:9\n    |\n LL |     A = Y::B as isize, //~ ERROR E0391\n-   |     ^^^^^^^^^^^^^^^^^\n+   |         ^^^^\n    = note: ...which then again requires const-evaluating `Y::A::{{initializer}}`, completing the cycle.\n \n error: aborting due to previous error"}, {"sha": "5903acc8b7a6d51c58079b71af97ebed169818eb", "filename": "src/test/ui/issue-23302-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fissue-23302-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fissue-23302-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302-3.rs?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const A: i32 = B; //~ ERROR E0391\n+const A: i32 = B;\n \n-const B: i32 = A;\n+const B: i32 = A; //~ ERROR cyclic dependency detected\n \n fn main() { }"}, {"sha": "31168579394d3b74958e6facaecf1eb28fc4ac85", "filename": "src/test/ui/issue-23302-3.stderr", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fissue-23302-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fissue-23302-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302-3.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1,20 +1,30 @@\n error[E0391]: cyclic dependency detected\n-  --> $DIR/issue-23302-3.rs:11:16\n+  --> $DIR/issue-23302-3.rs:13:16\n    |\n-LL | const A: i32 = B; //~ ERROR E0391\n+LL | const B: i32 = A; //~ ERROR cyclic dependency detected\n    |                ^ cyclic reference\n    |\n-note: the cycle begins when processing `B`...\n-  --> $DIR/issue-23302-3.rs:13:1\n+note: the cycle begins when const checking if rvalue is promotable to static `A`...\n+  --> $DIR/issue-23302-3.rs:11:1\n    |\n-LL | const B: i32 = A;\n+LL | const A: i32 = B;\n    | ^^^^^^^^^^^^^^^^^\n-note: ...which then requires processing `A`...\n-  --> $DIR/issue-23302-3.rs:13:16\n+note: ...which then requires checking which parts of `A` are promotable to static...\n+  --> $DIR/issue-23302-3.rs:11:1\n+   |\n+LL | const A: i32 = B;\n+   | ^^^^^^^^^^^^^^^^^\n+note: ...which then requires const checking if rvalue is promotable to static `B`...\n+  --> $DIR/issue-23302-3.rs:11:16\n    |\n-LL | const B: i32 = A;\n+LL | const A: i32 = B;\n    |                ^\n-   = note: ...which then again requires processing `B`, completing the cycle.\n+note: ...which then requires checking which parts of `B` are promotable to static...\n+  --> $DIR/issue-23302-3.rs:13:1\n+   |\n+LL | const B: i32 = A; //~ ERROR cyclic dependency detected\n+   | ^^^^^^^^^^^^^^^^^\n+   = note: ...which then again requires const checking if rvalue is promotable to static `A`, completing the cycle.\n \n error: aborting due to previous error\n "}, {"sha": "4323eb4858f404f7a710dffdbc5c1ad8f9e5bc3b", "filename": "src/test/ui/issue-36163.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36163.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -5,15 +5,25 @@ LL |     B = A, //~ ERROR E0391\n    |         ^ cyclic reference\n    |\n note: the cycle begins when const-evaluating `Foo::B::{{initializer}}`...\n-  --> $DIR/issue-36163.rs:14:5\n+  --> $DIR/issue-36163.rs:14:9\n    |\n LL |     B = A, //~ ERROR E0391\n-   |     ^^^^^\n-note: ...which then requires const-evaluating `A`...\n+   |         ^\n+note: ...which then requires processing `Foo::B::{{initializer}}`...\n   --> $DIR/issue-36163.rs:14:9\n    |\n LL |     B = A, //~ ERROR E0391\n    |         ^\n+note: ...which then requires const-evaluating `A`...\n+  --> $DIR/issue-36163.rs:11:1\n+   |\n+LL | const A: isize = Foo::B as isize;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which then requires computing layout of `Foo`...\n+  --> $DIR/issue-36163.rs:11:18\n+   |\n+LL | const A: isize = Foo::B as isize;\n+   |                  ^^^^^^\n    = note: ...which then again requires const-evaluating `Foo::B::{{initializer}}`, completing the cycle.\n \n error: aborting due to previous error"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/issue-38875/issue_38875.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fissue-38875%2Fissue_38875.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Fissue-38875%2Fissue_38875.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-38875%2Fissue_38875.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1,15 +0,0 @@\n-error[E0080]: constant evaluation error\n-  --> $DIR/auxiliary/issue_38875_b.rs:11:24\n-   |\n-LL | pub const FOO: usize = *&0;\n-   |                        ^^^ unimplemented constant expression: deref operation\n-   |\n-note: for constant expression here\n-  --> $DIR/issue_38875.rs:16:22\n-   |\n-LL |     let test_x = [0; issue_38875_b::FOO];\n-   |                      ^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-If you want more information on this error, try using \"rustc --explain E0080\""}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/union/union-const-eval.stderr", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Funion%2Funion-const-eval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedd4c61ea372022e04be183da2f5768953ea2fe/src%2Ftest%2Fui%2Funion%2Funion-const-eval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-const-eval.stderr?ref=aedd4c61ea372022e04be183da2f5768953ea2fe", "patch": "@@ -1,17 +0,0 @@\n-warning: constant evaluation error: nonexistent struct field\n-  --> $DIR/union-const-eval.rs:21:21\n-   |\n-LL |         let b: [u8; C.b]; //~ ERROR constant evaluation error\n-   |                     ^^^\n-   |\n-   = note: #[warn(const_err)] on by default\n-\n-error[E0080]: constant evaluation error\n-  --> $DIR/union-const-eval.rs:21:21\n-   |\n-LL |         let b: [u8; C.b]; //~ ERROR constant evaluation error\n-   |                     ^^^ nonexistent struct field\n-\n-error: aborting due to previous error\n-\n-If you want more information on this error, try using \"rustc --explain E0080\""}]}