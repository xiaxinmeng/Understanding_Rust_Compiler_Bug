{"sha": "033cf9880d00cb1632c152888a8a96e26021c047", "node_id": "C_kwDOAAsO6NoAKDAzM2NmOTg4MGQwMGNiMTYzMmMxNTI4ODhhOGE5NmUyNjAyMWMwNDc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-10T19:36:04Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-10T19:36:14Z"}, "message": "Support DoubleEndedIterator for subst_iter and subst_iter_copied", "tree": {"sha": "337b1b9068a2a554938270b04bd48d1a316372e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/337b1b9068a2a554938270b04bd48d1a316372e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/033cf9880d00cb1632c152888a8a96e26021c047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/033cf9880d00cb1632c152888a8a96e26021c047", "html_url": "https://github.com/rust-lang/rust/commit/033cf9880d00cb1632c152888a8a96e26021c047", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/033cf9880d00cb1632c152888a8a96e26021c047/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34115d040b43d9a0dcc313c6282520a86d1e6f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/34115d040b43d9a0dcc313c6282520a86d1e6f61", "html_url": "https://github.com/rust-lang/rust/commit/34115d040b43d9a0dcc313c6282520a86d1e6f61"}], "stats": {"total": 78, "additions": 69, "deletions": 9}, "files": [{"sha": "ec7cb971168789863da29a79594fc9477665a9eb", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 69, "deletions": 9, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/033cf9880d00cb1632c152888a8a96e26021c047/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033cf9880d00cb1632c152888a8a96e26021c047/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=033cf9880d00cb1632c152888a8a96e26021c047", "patch": "@@ -6,7 +6,6 @@ use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n use crate::ty::visit::{TypeVisitable, TypeVisitor};\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n-use rustc_data_structures::captures::Captures;\n use rustc_data_structures::intern::{Interned, WithStableHash};\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n@@ -19,7 +18,7 @@ use std::fmt;\n use std::marker::PhantomData;\n use std::mem;\n use std::num::NonZeroUsize;\n-use std::ops::ControlFlow;\n+use std::ops::{ControlFlow, Deref};\n use std::slice;\n \n /// An entity in the Rust type system, which can be one of\n@@ -559,25 +558,86 @@ impl<T, U> EarlyBinder<(T, U)> {\n     }\n }\n \n-impl<'tcx, 's, T: IntoIterator<Item = I>, I: TypeFoldable<'tcx>> EarlyBinder<T> {\n+impl<'tcx, 's, I: IntoIterator> EarlyBinder<I>\n+where\n+    I::Item: TypeFoldable<'tcx>,\n+{\n     pub fn subst_iter(\n         self,\n         tcx: TyCtxt<'tcx>,\n         substs: &'s [GenericArg<'tcx>],\n-    ) -> impl Iterator<Item = I> + Captures<'s> + Captures<'tcx> {\n-        self.0.into_iter().map(move |t| EarlyBinder(t).subst(tcx, substs))\n+    ) -> SubstIter<'s, 'tcx, I> {\n+        SubstIter { it: self.0.into_iter(), tcx, substs }\n+    }\n+}\n+\n+pub struct SubstIter<'s, 'tcx, I: IntoIterator> {\n+    it: I::IntoIter,\n+    tcx: TyCtxt<'tcx>,\n+    substs: &'s [GenericArg<'tcx>],\n+}\n+\n+impl<'tcx, I: IntoIterator> Iterator for SubstIter<'_, 'tcx, I>\n+where\n+    I::Item: TypeFoldable<'tcx>,\n+{\n+    type Item = I::Item;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        Some(EarlyBinder(self.it.next()?).subst(self.tcx, self.substs))\n+    }\n+}\n+\n+impl<'tcx, I: IntoIterator> DoubleEndedIterator for SubstIter<'_, 'tcx, I>\n+where\n+    I::IntoIter: DoubleEndedIterator,\n+    I::Item: TypeFoldable<'tcx>,\n+{\n+    fn next_back(&mut self) -> Option<Self::Item> {\n+        Some(EarlyBinder(self.it.next_back()?).subst(self.tcx, self.substs))\n     }\n }\n \n-impl<'tcx, 's, 'a, T: IntoIterator<Item = &'a I>, I: Copy + TypeFoldable<'tcx> + 'a>\n-    EarlyBinder<T>\n+impl<'tcx, 's, I: IntoIterator> EarlyBinder<I>\n+where\n+    I::Item: Deref,\n+    <I::Item as Deref>::Target: Copy + TypeFoldable<'tcx>,\n {\n     pub fn subst_iter_copied(\n         self,\n         tcx: TyCtxt<'tcx>,\n         substs: &'s [GenericArg<'tcx>],\n-    ) -> impl Iterator<Item = I> + Captures<'s> + Captures<'tcx> + Captures<'a> {\n-        self.0.into_iter().map(move |t| EarlyBinder(*t).subst(tcx, substs))\n+    ) -> SubstIterCopied<'s, 'tcx, I> {\n+        SubstIterCopied { it: self.0.into_iter(), tcx, substs }\n+    }\n+}\n+\n+pub struct SubstIterCopied<'a, 'tcx, I: IntoIterator> {\n+    it: I::IntoIter,\n+    tcx: TyCtxt<'tcx>,\n+    substs: &'a [GenericArg<'tcx>],\n+}\n+\n+impl<'tcx, I: IntoIterator> Iterator for SubstIterCopied<'_, 'tcx, I>\n+where\n+    I::Item: Deref,\n+    <I::Item as Deref>::Target: Copy + TypeFoldable<'tcx>,\n+{\n+    type Item = <I::Item as Deref>::Target;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        Some(EarlyBinder(*self.it.next()?).subst(self.tcx, self.substs))\n+    }\n+}\n+\n+impl<'tcx, I: IntoIterator> DoubleEndedIterator for SubstIterCopied<'_, 'tcx, I>\n+where\n+    I::IntoIter: DoubleEndedIterator,\n+    I::Item: Deref,\n+    <I::Item as Deref>::Target: Copy + TypeFoldable<'tcx>,\n+{\n+    fn next_back(&mut self) -> Option<Self::Item> {\n+        Some(EarlyBinder(*self.it.next_back()?).subst(self.tcx, self.substs))\n     }\n }\n "}]}