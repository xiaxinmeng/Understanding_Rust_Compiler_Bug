{"sha": "ab204c5b20742d153968390bae0f3ff1095e2946", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMjA0YzViMjA3NDJkMTUzOTY4MzkwYmFlMGYzZmYxMDk1ZTI5NDY=", "commit": {"author": {"name": "Amos Onn", "email": "amosonn@gmail.com", "date": "2020-08-05T00:54:59Z"}, "committer": {"name": "Amos Onn", "email": "amosonn@gmail.com", "date": "2020-08-05T06:32:10Z"}, "message": "Add {Box,Rc,Arc}::new_zeroed_slice", "tree": {"sha": "d52169444c7e070a686ca49b2ba5c834cee13763", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d52169444c7e070a686ca49b2ba5c834cee13763"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab204c5b20742d153968390bae0f3ff1095e2946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab204c5b20742d153968390bae0f3ff1095e2946", "html_url": "https://github.com/rust-lang/rust/commit/ab204c5b20742d153968390bae0f3ff1095e2946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab204c5b20742d153968390bae0f3ff1095e2946/comments", "author": {"login": "amosonn", "id": 3142573, "node_id": "MDQ6VXNlcjMxNDI1NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3142573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amosonn", "html_url": "https://github.com/amosonn", "followers_url": "https://api.github.com/users/amosonn/followers", "following_url": "https://api.github.com/users/amosonn/following{/other_user}", "gists_url": "https://api.github.com/users/amosonn/gists{/gist_id}", "starred_url": "https://api.github.com/users/amosonn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amosonn/subscriptions", "organizations_url": "https://api.github.com/users/amosonn/orgs", "repos_url": "https://api.github.com/users/amosonn/repos", "events_url": "https://api.github.com/users/amosonn/events{/privacy}", "received_events_url": "https://api.github.com/users/amosonn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amosonn", "id": 3142573, "node_id": "MDQ6VXNlcjMxNDI1NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3142573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amosonn", "html_url": "https://github.com/amosonn", "followers_url": "https://api.github.com/users/amosonn/followers", "following_url": "https://api.github.com/users/amosonn/following{/other_user}", "gists_url": "https://api.github.com/users/amosonn/gists{/gist_id}", "starred_url": "https://api.github.com/users/amosonn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amosonn/subscriptions", "organizations_url": "https://api.github.com/users/amosonn/orgs", "repos_url": "https://api.github.com/users/amosonn/repos", "events_url": "https://api.github.com/users/amosonn/events{/privacy}", "received_events_url": "https://api.github.com/users/amosonn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "361f668c4996c1f21aee39ea1a105a3067612c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/361f668c4996c1f21aee39ea1a105a3067612c11", "html_url": "https://github.com/rust-lang/rust/commit/361f668c4996c1f21aee39ea1a105a3067612c11"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "9183edef30d663c0499bb7b754989d2a0e1d7b6b", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ab204c5b20742d153968390bae0f3ff1095e2946/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab204c5b20742d153968390bae0f3ff1095e2946/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=ab204c5b20742d153968390bae0f3ff1095e2946", "patch": "@@ -273,6 +273,29 @@ impl<T> Box<[T]> {\n     pub fn new_uninit_slice(len: usize) -> Box<[mem::MaybeUninit<T>]> {\n         unsafe { RawVec::with_capacity(len).into_box(len) }\n     }\n+\n+    /// Constructs a new boxed slice with uninitialized contents, with the memory\n+    /// being filled with `0` bytes.\n+    ///\n+    /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\n+    /// of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(new_uninit)]\n+    ///\n+    /// let values = Box::<[u32]>::new_zeroed_slice(3);\n+    /// let values = unsafe { values.assume_init() };\n+    ///\n+    /// assert_eq!(*values, [0, 0, 0])\n+    /// ```\n+    ///\n+    /// [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn new_zeroed_slice(len: usize) -> Box<[mem::MaybeUninit<T>]> {\n+        unsafe { RawVec::with_capacity_zeroed(len).into_box(len) }\n+    }\n }\n \n impl<T> Box<mem::MaybeUninit<T>> {"}, {"sha": "c847cb7e1f1aebe09fb44b18ab05a0e14f7de169", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ab204c5b20742d153968390bae0f3ff1095e2946/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab204c5b20742d153968390bae0f3ff1095e2946/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=ab204c5b20742d153968390bae0f3ff1095e2946", "patch": "@@ -469,6 +469,40 @@ impl<T> Rc<[T]> {\n     pub fn new_uninit_slice(len: usize) -> Rc<[mem::MaybeUninit<T>]> {\n         unsafe { Rc::from_ptr(Rc::allocate_for_slice(len)) }\n     }\n+\n+    /// Constructs a new reference-counted slice with uninitialized contents, with the memory being\n+    /// filled with `0` bytes.\n+    ///\n+    /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and\n+    /// incorrect usage of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(new_uninit)]\n+    ///\n+    /// use std::rc::Rc;\n+    ///\n+    /// let values = Rc::<[u32]>::new_zeroed_slice(3);\n+    /// let values = unsafe { values.assume_init() };\n+    ///\n+    /// assert_eq!(*values, [0, 0, 0])\n+    /// ```\n+    ///\n+    /// [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn new_zeroed_slice(len: usize) -> Rc<[mem::MaybeUninit<T>]> {\n+        unsafe {\n+            Rc::from_ptr(Rc::allocate_for_layout(\n+                Layout::array::<T>(len).unwrap(),\n+                |layout| Global.alloc_zeroed(layout),\n+                |mem| {\n+                    ptr::slice_from_raw_parts_mut(mem as *mut T, len)\n+                        as *mut RcBox<[mem::MaybeUninit<T>]>\n+                },\n+            ))\n+        }\n+    }\n }\n \n impl<T> Rc<mem::MaybeUninit<T>> {"}, {"sha": "9daccbc336bc86a68d506b10198b2f3f73cb8e9a", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ab204c5b20742d153968390bae0f3ff1095e2946/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab204c5b20742d153968390bae0f3ff1095e2946/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=ab204c5b20742d153968390bae0f3ff1095e2946", "patch": "@@ -468,6 +468,40 @@ impl<T> Arc<[T]> {\n     pub fn new_uninit_slice(len: usize) -> Arc<[mem::MaybeUninit<T>]> {\n         unsafe { Arc::from_ptr(Arc::allocate_for_slice(len)) }\n     }\n+\n+    /// Constructs a new atomically reference-counted slice with uninitialized contents, with the memory being\n+    /// filled with `0` bytes.\n+    ///\n+    /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and\n+    /// incorrect usage of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(new_uninit)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let values = Arc::<[u32]>::new_zeroed_slice(3);\n+    /// let values = unsafe { values.assume_init() };\n+    ///\n+    /// assert_eq!(*values, [0, 0, 0])\n+    /// ```\n+    ///\n+    /// [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn new_zeroed_slice(len: usize) -> Arc<[mem::MaybeUninit<T>]> {\n+        unsafe {\n+            Arc::from_ptr(Arc::allocate_for_layout(\n+                Layout::array::<T>(len).unwrap(),\n+                |layout| Global.alloc_zeroed(layout),\n+                |mem| {\n+                    ptr::slice_from_raw_parts_mut(mem as *mut T, len)\n+                        as *mut ArcInner<[mem::MaybeUninit<T>]>\n+                },\n+            ))\n+        }\n+    }\n }\n \n impl<T> Arc<mem::MaybeUninit<T>> {"}]}