{"sha": "3c1ab7819698b374d833e8818e39ef011a48eb83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMWFiNzgxOTY5OGIzNzRkODMzZTg4MThlMzllZjAxMWE0OGViODM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-23T21:25:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-23T21:25:06Z"}, "message": "review failing compile-fail tests", "tree": {"sha": "81449fda7baf68f4a533b4decc20c6822d208b4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81449fda7baf68f4a533b4decc20c6822d208b4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c1ab7819698b374d833e8818e39ef011a48eb83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1ab7819698b374d833e8818e39ef011a48eb83", "html_url": "https://github.com/rust-lang/rust/commit/3c1ab7819698b374d833e8818e39ef011a48eb83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c1ab7819698b374d833e8818e39ef011a48eb83/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c094d42504c41ebd4e452542f3fa2cbc303fc975", "url": "https://api.github.com/repos/rust-lang/rust/commits/c094d42504c41ebd4e452542f3fa2cbc303fc975", "html_url": "https://github.com/rust-lang/rust/commit/c094d42504c41ebd4e452542f3fa2cbc303fc975"}], "stats": {"total": 167, "additions": 74, "deletions": 93}, "files": [{"sha": "6dad2a4727306f2bdf33e4e7e5b8719ac72240cc", "filename": "tests/compile-fail/cast_box_int_to_fn_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs?ref=3c1ab7819698b374d833e8818e39ef011a48eb83", "patch": "@@ -4,8 +4,8 @@\n fn main() {\n     let b = Box::new(42);\n     let g = unsafe {\n-        std::mem::transmute::<&usize, &fn(i32)>(&b)\n+        std::mem::transmute::<&Box<usize>, &fn(i32)>(&b)\n     };\n \n-    (*g)(42) //~ ERROR a memory access tried to interpret some bytes as a pointer\n+    (*g)(42) //~ ERROR tried to treat a memory pointer as a function pointer\n }"}, {"sha": "4fd14751a279a38921665409efdf033f6041a4b4", "filename": "tests/compile-fail/cast_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs?ref=3c1ab7819698b374d833e8818e39ef011a48eb83", "patch": "@@ -6,5 +6,5 @@ fn main() {\n         std::mem::transmute::<usize, fn(i32)>(42)\n     };\n \n-    g(42) //~ ERROR a memory access tried to interpret some bytes as a pointer\n+    g(42) //~ ERROR dangling pointer was dereferenced\n }"}, {"sha": "246893a5c640f2e30132abeba8431e7a991ed79c", "filename": "tests/compile-fail/getrandom.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fgetrandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fgetrandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fgetrandom.rs?ref=c094d42504c41ebd4e452542f3fa2cbc303fc975", "patch": "@@ -1,13 +0,0 @@\n-// ignore-macos: Uses Linux-only APIs\n-// ignore-windows: Uses Linux-only APIs\n-\n-#![feature(rustc_private)]\n-extern crate libc;\n-\n-fn main() {\n-    let mut buf = [0u8; 5];\n-    unsafe {\n-        libc::syscall(libc::SYS_getrandom, buf.as_mut_ptr() as *mut libc::c_void, 5 as libc::size_t, 0 as libc::c_uint);\n-        //~^ ERROR miri does not support gathering system entropy in deterministic mode!\n-    }\n-}"}, {"sha": "ddb9bc1f995f28448c6ca1b7dccc05a09225bbc6", "filename": "tests/compile-fail/pointer_byte_read.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Fcompile-fail%2Fpointer_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Fcompile-fail%2Fpointer_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read.rs?ref=3c1ab7819698b374d833e8818e39ef011a48eb83", "previous_filename": "tests/compile-fail/pointer_byte_read_2.rs"}, {"sha": "a584863654cef267071ce6724fae3a0a0a074141", "filename": "tests/compile-fail/pointer_byte_read_1.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs?ref=c094d42504c41ebd4e452542f3fa2cbc303fc975", "patch": "@@ -1,7 +0,0 @@\n-fn main() {\n-    let x = 13;\n-    let y = &x;\n-    let z = &y as *const &i32 as *const usize;\n-    let ptr_bytes = unsafe { *z }; // the actual deref is fine, because we read the entire pointer at once\n-    let _val = ptr_bytes / 432; //~ ERROR invalid arithmetic on pointers that would leak base addresses\n-}"}, {"sha": "2706b0970d7d586212d8c1e6d1e97212ec61332f", "filename": "tests/compile-fail/ptr_bitops1.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_bitops1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_bitops1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_bitops1.rs?ref=c094d42504c41ebd4e452542f3fa2cbc303fc975", "patch": "@@ -1,7 +0,0 @@\n-fn main() {\n-    let bytes = [0i8, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n-    let one = bytes.as_ptr().wrapping_offset(1);\n-    let three = bytes.as_ptr().wrapping_offset(3);\n-    let res = (one as usize) | (three as usize); //~ ERROR invalid arithmetic on pointers that would leak base addresses\n-    println!(\"{}\", res);\n-}"}, {"sha": "5d5eab155083b4f6e34ca4f69e2f62a751e13c79", "filename": "tests/compile-fail/ptr_bitops2.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_bitops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_bitops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_bitops2.rs?ref=c094d42504c41ebd4e452542f3fa2cbc303fc975", "patch": "@@ -1,5 +0,0 @@\n-fn main() {\n-    let val = 13usize;\n-    let addr = &val as *const _ as usize;\n-    let _val = addr & 13; //~ ERROR access part of a pointer value as raw bytes\n-}"}, {"sha": "5badf099e4391ae5b939aa4f23abbdd2b5826224", "filename": "tests/compile-fail/ptr_eq_dangling.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_eq_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_eq_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_eq_dangling.rs?ref=c094d42504c41ebd4e452542f3fa2cbc303fc975", "patch": "@@ -1,10 +0,0 @@\n-fn main() {\n-    let b = Box::new(0);\n-    let x = &*b as *const i32; // soon-to-be dangling\n-    drop(b);\n-    let b = Box::new(0);\n-    let y = &*b as *const i32; // different allocation\n-    // We cannot compare these even though both are inbounds -- they *could* be\n-    // equal if memory was reused.\n-    assert!(x != y); //~ ERROR invalid arithmetic on pointers\n-}"}, {"sha": "396abaf4493b13c961e5c82c38c0db5758c98548", "filename": "tests/compile-fail/ptr_eq_integer.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_eq_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_eq_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_eq_integer.rs?ref=c094d42504c41ebd4e452542f3fa2cbc303fc975", "patch": "@@ -1,6 +0,0 @@\n-fn main() {\n-    let b = Box::new(0);\n-    let x = &*b as *const i32;\n-    // We cannot compare this with a non-NULL integer. After all, these *could* be equal (with the right base address).\n-    assert!(x != 64 as *const i32); //~ ERROR invalid arithmetic on pointers\n-}"}, {"sha": "7efa446d7fca489f97254dd90bb0bdd9b428d979", "filename": "tests/compile-fail/ptr_eq_out_of_bounds.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_eq_out_of_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_eq_out_of_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_eq_out_of_bounds.rs?ref=c094d42504c41ebd4e452542f3fa2cbc303fc975", "patch": "@@ -1,9 +0,0 @@\n-fn main() {\n-    let b = Box::new(0);\n-    let x = (&*b as *const i32).wrapping_sub(0x800); // out-of-bounds\n-    let b = Box::new(0);\n-    let y = &*b as *const i32; // different allocation\n-    // We cannot compare these even though both allocations are live -- they *could* be\n-    // equal (with the right base addresses).\n-    assert!(x != y); //~ ERROR invalid arithmetic on pointers\n-}"}, {"sha": "3b7b51fc19954f50394f787b587b6b01836b88bb", "filename": "tests/compile-fail/ptr_eq_out_of_bounds_null.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_eq_out_of_bounds_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_eq_out_of_bounds_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_eq_out_of_bounds_null.rs?ref=c094d42504c41ebd4e452542f3fa2cbc303fc975", "patch": "@@ -1,6 +0,0 @@\n-fn main() {\n-    let b = Box::new(0);\n-    let x = (&*b as *const i32).wrapping_sub(0x800); // out-of-bounds\n-    // We cannot compare this with NULL. After all, this *could* be NULL (with the right base address).\n-    assert!(x != std::ptr::null()); //~ ERROR invalid arithmetic on pointers\n-}"}, {"sha": "a823a0f49b630fe8454ccf99700f077e653558a0", "filename": "tests/compile-fail/ptr_int_cast.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_int_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_int_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_int_cast.rs?ref=c094d42504c41ebd4e452542f3fa2cbc303fc975", "patch": "@@ -1,8 +0,0 @@\n-fn main() {\n-    let x = &1;\n-    // Casting down to u8 and back up to a pointer loses too much precision; this must not work.\n-    let x = x as *const i32;\n-    let x = x as u8; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n-    let x = x as *const i32;\n-    let _val = unsafe { *x };\n-}"}, {"sha": "051874696b11629fa8678adeb791f5fba13406cb", "filename": "tests/compile-fail/ptr_offset_int_plus_int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs?ref=3c1ab7819698b374d833e8818e39ef011a48eb83", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: tried to interpret some bytes as a pointer\n+// error-pattern: dangling pointer was dereferenced\n \n fn main() {\n     // Can't offset an integer pointer by non-zero offset."}, {"sha": "bd90d06909177a3aabf19fe4083c796c9e71bebb", "filename": "tests/compile-fail/ptr_offset_int_plus_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Fcompile-fail%2Fptr_offset_int_plus_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Fcompile-fail%2Fptr_offset_int_plus_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_int_plus_ptr.rs?ref=3c1ab7819698b374d833e8818e39ef011a48eb83", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: pointer value as raw bytes\n+// error-pattern: dangling pointer was dereferenced\n \n fn main() {\n     let ptr = Box::into_raw(Box::new(0u32));"}, {"sha": "dfc91e9dc1b12eba0805296eab816917dec8b9f2", "filename": "tests/compile-fail/ptr_rem.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_rem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_rem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_rem.rs?ref=c094d42504c41ebd4e452542f3fa2cbc303fc975", "patch": "@@ -1,5 +0,0 @@\n-fn main() {\n-    let val = 13usize;\n-    let addr = &val as *const _ as usize;\n-    let _val = addr % 16; //~ ERROR access part of a pointer value as raw bytes\n-}"}, {"sha": "eacb9f07fffd79be6663c124841bd785bcca0859", "filename": "tests/compile-fail/ptr_wrapping_offset_int_plus_ptr.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_wrapping_offset_int_plus_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c094d42504c41ebd4e452542f3fa2cbc303fc975/tests%2Fcompile-fail%2Fptr_wrapping_offset_int_plus_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_wrapping_offset_int_plus_ptr.rs?ref=c094d42504c41ebd4e452542f3fa2cbc303fc975", "patch": "@@ -1,8 +0,0 @@\n-// error-pattern: pointer value as raw bytes\n-\n-fn main() {\n-    let ptr = Box::into_raw(Box::new(0u32));\n-    // Can't start with an integer pointer and get to something usable\n-    let ptr = (1 as *mut u8).wrapping_offset(ptr as isize);\n-    let _val = unsafe { *ptr };\n-}"}, {"sha": "194445b1ad7e1758a0be54b0ee42ed98b1f53b1e", "filename": "tests/compile-fail/validity/dangling_ref1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs?ref=3c1ab7819698b374d833e8818e39ef011a48eb83", "patch": "@@ -1,5 +1,5 @@\n use std::mem;\n \n fn main() {\n-    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR dangling reference (created from integer)\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR dangling reference (not entirely in bounds)\n }"}, {"sha": "ae32f7d5562bde9bb890b3ce18ae94a89baaf067", "filename": "tests/compile-fail/wild_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwild_pointer_deref.rs?ref=3c1ab7819698b374d833e8818e39ef011a48eb83", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let p = 44 as *const i32;\n-    let x = unsafe { *p }; //~ ERROR a memory access tried to interpret some bytes as a pointer\n+    let x = unsafe { *p }; //~ ERROR dangling pointer was dereferenced\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "f7bf7f9ff58bcc0687e0a40b77772245fb324d9e", "filename": "tests/run-pass/bitop-beyond-alignment.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Frun-pass%2Fbitop-beyond-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Frun-pass%2Fbitop-beyond-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbitop-beyond-alignment.rs?ref=3c1ab7819698b374d833e8818e39ef011a48eb83", "patch": "@@ -28,7 +28,7 @@ fn mk_rec() -> Rec {\n fn is_u64_aligned(u: &Tag<u64>) -> bool {\n     let p: usize = unsafe { mem::transmute(u) };\n     let u64_align = std::mem::align_of::<u64>();\n-    return (p & (u64_align + 1)) == 0; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n+    return (p & (u64_align + 1)) == 0;\n }\n \n pub fn main() {", "previous_filename": "tests/compile-fail/bitop-beyond-alignment.rs"}, {"sha": "c2711f9845d0f4bb2e30f5cdd48bd5ebcbd283b9", "filename": "tests/run-pass/intptrcast.rs", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Frun-pass%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1ab7819698b374d833e8818e39ef011a48eb83/tests%2Frun-pass%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintptrcast.rs?ref=3c1ab7819698b374d833e8818e39ef011a48eb83", "patch": "@@ -3,22 +3,87 @@ fn transmute_ptr_to_int<T>(x: *const T) -> usize {\n     unsafe { std::mem::transmute(x) }\n }\n \n-fn main() {\n+fn cast() {\n     // Some casting-to-int with arithmetic.\n     let x = &42 as *const i32 as usize;\n     let y = x * 2;\n     assert_eq!(y, x + x);\n     let z = y as u8 as usize;\n     assert_eq!(z, y % 256);\n+}\n \n+fn format() {\n     // Pointer string formatting! We can't check the output as it changes when libstd changes,\n     // but we can make sure Miri does not error.\n     format!(\"{:?}\", &mut 13 as *mut _);\n+}\n \n+fn transmute() {\n     // Check that intptrcast is triggered for explicit casts and that it is consistent with\n     // transmuting.\n     let a: *const i32 = &42;\n     let b = transmute_ptr_to_int(a) as u8;\n     let c = a as usize as u8;\n     assert_eq!(b, c);\n }\n+\n+fn ptr_bitops1() {\n+    let bytes = [0i8, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n+    let one = bytes.as_ptr().wrapping_offset(1);\n+    let three = bytes.as_ptr().wrapping_offset(3);\n+    let res = (one as usize) | (three as usize);\n+    format!(\"{}\", res);\n+}\n+\n+fn ptr_bitops2() {\n+    let val = 13usize;\n+    let addr = &val as *const _ as usize;\n+    let _val = addr & 13;\n+}\n+\n+fn ptr_eq_dangling() {\n+    let b = Box::new(0);\n+    let x = &*b as *const i32; // soon-to-be dangling\n+    drop(b);\n+    let b = Box::new(0);\n+    let y = &*b as *const i32; // different allocation\n+    // We cannot compare these even though both are inbounds -- they *could* be\n+    // equal if memory was reused.\n+    assert!(x != y);\n+}\n+\n+fn ptr_eq_out_of_bounds() {\n+    let b = Box::new(0);\n+    let x = (&*b as *const i32).wrapping_sub(0x800); // out-of-bounds\n+    let b = Box::new(0);\n+    let y = &*b as *const i32; // different allocation\n+    // We cannot compare these even though both allocations are live -- they *could* be\n+    // equal (with the right base addresses).\n+    assert!(x != y);\n+}\n+\n+fn ptr_eq_out_of_bounds_null() {\n+    let b = Box::new(0);\n+    let x = (&*b as *const i32).wrapping_sub(0x800); // out-of-bounds\n+    // We cannot compare this with NULL. After all, this *could* be NULL (with the right base address).\n+    assert!(x != std::ptr::null());\n+}\n+\n+fn ptr_eq_integer() {\n+    let b = Box::new(0);\n+    let x = &*b as *const i32;\n+    // We cannot compare this with a non-NULL integer. After all, these *could* be equal (with the right base address).\n+    assert!(x != 64 as *const i32);\n+}\n+\n+fn main() {\n+    cast();\n+    format();\n+    transmute();\n+    ptr_bitops1();\n+    ptr_bitops2();\n+    ptr_eq_dangling();\n+    ptr_eq_out_of_bounds();\n+    ptr_eq_out_of_bounds_null();\n+    ptr_eq_integer();\n+}"}]}