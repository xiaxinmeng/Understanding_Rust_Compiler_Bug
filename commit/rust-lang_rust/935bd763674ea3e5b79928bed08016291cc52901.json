{"sha": "935bd763674ea3e5b79928bed08016291cc52901", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNWJkNzYzNjc0ZWEzZTViNzk5MjhiZWQwODAxNjI5MWNjNTI5MDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-14T02:32:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-14T02:32:17Z"}, "message": "Auto merge of #34776 - cuviper:solaris-readdir, r=alexcrichton\n\nstd: fix `readdir` errors for solaris\n\nA `NULL` from `readdir` could be the end of stream or an error.  The only\nway to know is to check `errno`, so it must be set to a known value first,\nlike a 0 that POSIX will never use.\n\nThis currently only matters for solaris targets, as the other unix platforms\nare using `readdir_r` with a direct error return indication.  However, this is\ngetting deprecated (#34668) so they should all eventually switch to `readdir`.\n\nThis PR adds `set_errno`, uses it to clear the value before calling `readdir`,\nthen checks it again after to see the reason for a `NULL`.  A few other small\nfixes are included just to get solaris compiling at all.\n\nI couldn't get cross-compilation completely going, so I don't have a good way\nto test this beyond a smoke-test cargo build of std.  I'd appreciate input from\nsomeone more familiar with solaris -- cc @nbaksalyar?", "tree": {"sha": "be4885c9792ca6abe3f8a12b7a33533b0d9980d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be4885c9792ca6abe3f8a12b7a33533b0d9980d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/935bd763674ea3e5b79928bed08016291cc52901", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/935bd763674ea3e5b79928bed08016291cc52901", "html_url": "https://github.com/rust-lang/rust/commit/935bd763674ea3e5b79928bed08016291cc52901", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/935bd763674ea3e5b79928bed08016291cc52901/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dbbe2f716a09246939ad371125617c5526fd3fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbbe2f716a09246939ad371125617c5526fd3fd", "html_url": "https://github.com/rust-lang/rust/commit/3dbbe2f716a09246939ad371125617c5526fd3fd"}, {"sha": "79fb5522bd5bf79c7dad7adfd516ad364dff3e9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/79fb5522bd5bf79c7dad7adfd516ad364dff3e9e", "html_url": "https://github.com/rust-lang/rust/commit/79fb5522bd5bf79c7dad7adfd516ad364dff3e9e"}], "stats": {"total": 64, "additions": 41, "deletions": 23}, "files": [{"sha": "b0d62534d48b711c8978d1bbe8cca0558ae7b1cb", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=935bd763674ea3e5b79928bed08016291cc52901", "patch": "@@ -1 +1 @@\n-Subproject commit 45d85899e99d33e291b2bf3259881b46cc5365d7\n+Subproject commit b0d62534d48b711c8978d1bbe8cca0558ae7b1cb"}, {"sha": "442618c55b337f5dc157db2e81893ff8e481e496", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/935bd763674ea3e5b79928bed08016291cc52901/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935bd763674ea3e5b79928bed08016291cc52901/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=935bd763674ea3e5b79928bed08016291cc52901", "patch": "@@ -25,19 +25,23 @@ use time::Duration;\n \n #[cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n           target_os = \"ios\", target_os = \"macos\",\n-          target_os = \"openbsd\", target_os = \"netbsd\"))]\n+          target_os = \"openbsd\", target_os = \"netbsd\",\n+          target_os = \"solaris\"))]\n use sys::net::netc::IPV6_JOIN_GROUP as IPV6_ADD_MEMBERSHIP;\n #[cfg(not(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n               target_os = \"ios\", target_os = \"macos\",\n-          target_os = \"openbsd\", target_os = \"netbsd\")))]\n+              target_os = \"openbsd\", target_os = \"netbsd\",\n+              target_os = \"solaris\")))]\n use sys::net::netc::IPV6_ADD_MEMBERSHIP;\n #[cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n           target_os = \"ios\", target_os = \"macos\",\n-          target_os = \"openbsd\", target_os = \"netbsd\"))]\n+          target_os = \"openbsd\", target_os = \"netbsd\",\n+          target_os = \"solaris\"))]\n use sys::net::netc::IPV6_LEAVE_GROUP as IPV6_DROP_MEMBERSHIP;\n #[cfg(not(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n               target_os = \"ios\", target_os = \"macos\",\n-          target_os = \"openbsd\", target_os = \"netbsd\")))]\n+              target_os = \"openbsd\", target_os = \"netbsd\",\n+              target_os = \"solaris\")))]\n use sys::net::netc::IPV6_DROP_MEMBERSHIP;\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "b315e6762633b3fd982566c5a311360a3ad4065b", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/935bd763674ea3e5b79928bed08016291cc52901/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935bd763674ea3e5b79928bed08016291cc52901/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=935bd763674ea3e5b79928bed08016291cc52901", "patch": "@@ -205,9 +205,15 @@ impl Iterator for ReadDir {\n                 // of the thread safety, on Illumos the readdir(3C) function is safe to use\n                 // in threaded applications and it is generally preferred over the\n                 // readdir_r(3C) function.\n+                super::os::set_errno(0);\n                 let entry_ptr = libc::readdir(self.dirp.0);\n                 if entry_ptr.is_null() {\n-                    return None\n+                    // NULL can mean either the end is reached or an error occurred.\n+                    // So we had to clear errno beforehand to check for an error now.\n+                    return match super::os::errno() {\n+                        0 => None,\n+                        e => Some(Err(Error::from_raw_os_error(e))),\n+                    }\n                 }\n \n                 let name = (*entry_ptr).d_name.as_ptr();"}, {"sha": "34b36b854f495833cee3f24a691be75b98a8b789", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/935bd763674ea3e5b79928bed08016291cc52901/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935bd763674ea3e5b79928bed08016291cc52901/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=935bd763674ea3e5b79928bed08016291cc52901", "patch": "@@ -35,28 +35,37 @@ use vec;\n const TMPBUF_SZ: usize = 128;\n static ENV_LOCK: Mutex = Mutex::new();\n \n+\n+extern {\n+    #[cfg_attr(any(target_os = \"linux\", target_os = \"emscripten\"),\n+               link_name = \"__errno_location\")]\n+    #[cfg_attr(any(target_os = \"bitrig\",\n+                   target_os = \"netbsd\",\n+                   target_os = \"openbsd\",\n+                   target_os = \"android\",\n+                   target_env = \"newlib\"),\n+               link_name = \"__errno\")]\n+    #[cfg_attr(target_os = \"solaris\", link_name = \"___errno\")]\n+    #[cfg_attr(any(target_os = \"macos\",\n+                   target_os = \"ios\",\n+                   target_os = \"freebsd\"),\n+               link_name = \"__error\")]\n+    fn errno_location() -> *mut c_int;\n+}\n+\n /// Returns the platform-specific value of errno\n #[cfg(not(target_os = \"dragonfly\"))]\n pub fn errno() -> i32 {\n-    extern {\n-        #[cfg_attr(any(target_os = \"linux\", target_os = \"emscripten\"),\n-                   link_name = \"__errno_location\")]\n-        #[cfg_attr(any(target_os = \"bitrig\",\n-                       target_os = \"netbsd\",\n-                       target_os = \"openbsd\",\n-                       target_os = \"android\",\n-                       target_env = \"newlib\"),\n-                   link_name = \"__errno\")]\n-        #[cfg_attr(target_os = \"solaris\", link_name = \"___errno\")]\n-        #[cfg_attr(any(target_os = \"macos\",\n-                       target_os = \"ios\",\n-                       target_os = \"freebsd\"),\n-                   link_name = \"__error\")]\n-        fn errno_location() -> *const c_int;\n+    unsafe {\n+        (*errno_location()) as i32\n     }\n+}\n \n+/// Sets the platform-specific value of errno\n+#[cfg(target_os = \"solaris\")] // only needed for readdir so far\n+pub fn set_errno(e: i32) {\n     unsafe {\n-        (*errno_location()) as i32\n+        *errno_location() = e as c_int\n     }\n }\n "}, {"sha": "1061ca87f6470894dda944ed69fb36d5e5ac75dc", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/935bd763674ea3e5b79928bed08016291cc52901/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935bd763674ea3e5b79928bed08016291cc52901/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=935bd763674ea3e5b79928bed08016291cc52901", "patch": "@@ -12,7 +12,6 @@ use prelude::v1::*;\n \n use alloc::boxed::FnBox;\n use cmp;\n-#[cfg(not(any(target_env = \"newlib\", target_os = \"solaris\")))]\n use ffi::CStr;\n use io;\n use libc;"}]}