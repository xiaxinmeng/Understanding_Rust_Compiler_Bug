{"sha": "05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1Y2RkYTNhMmMxNDdmZGM4Y2FlZjRlNmM2NjJmNTE4ZWMzMjVlMGE=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-05T19:10:33Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-06T17:42:40Z"}, "message": "Plumbing and parsing for item-position macros.", "tree": {"sha": "fba957706d8588512bfd259d7873edd615854d36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fba957706d8588512bfd259d7873edd615854d36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "html_url": "https://github.com/rust-lang/rust/commit/05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a787f4001388a394d5219b74113a718d980e4c90", "url": "https://api.github.com/repos/rust-lang/rust/commits/a787f4001388a394d5219b74113a718d980e4c90", "html_url": "https://github.com/rust-lang/rust/commit/a787f4001388a394d5219b74113a718d980e4c90"}], "stats": {"total": 145, "additions": 135, "deletions": 10}, "files": [{"sha": "4c0be731df4ba960d5abf31de450e0aa9dda83d5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -704,6 +704,7 @@ enum item_ {\n     item_trait(~[ty_param], region_param, ~[ty_method]),\n     item_impl(~[ty_param], region_param, option<@trait_ref> /* trait */,\n               @ty /* self */, ~[@method]),\n+    item_mac(mac),\n }\n \n #[auto_serialize]"}, {"sha": "0e6cce27b2b85832680ce1e3a65b4f3720cc35ad", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -17,19 +17,28 @@ type item_decorator =\n type syntax_expander_tt = {expander: syntax_expander_tt_, span: option<span>};\n type syntax_expander_tt_ = fn@(ext_ctxt, span, ast::token_tree) -> @ast::expr;\n \n+type syntax_expander_tt_item\n+    = {expander: syntax_expander_tt_item_, span: option<span>};\n+type syntax_expander_tt_item_\n+    = fn@(ext_ctxt, span, ast::ident, ast::token_tree) -> @ast::item;\n+\n enum syntax_extension {\n     normal(syntax_expander),\n     macro_defining(macro_definer),\n     item_decorator(item_decorator),\n \n-    normal_tt(syntax_expander_tt)\n+    normal_tt(syntax_expander_tt),\n+    item_tt(syntax_expander_tt_item),\n }\n \n // A temporary hard-coded map of methods for expanding syntax extension\n // AST nodes into full ASTs\n fn syntax_expander_table() -> hashmap<str, syntax_extension> {\n     fn builtin(f: syntax_expander_) -> syntax_extension\n         {normal({expander: f, span: none})}\n+    fn builtin_item_tt(f: syntax_expander_tt_item_) -> syntax_extension {\n+        item_tt({expander: f, span: none})\n+    }\n     let syntax_expanders = str_hash::<syntax_extension>();\n     syntax_expanders.insert(\"fmt\", builtin(ext::fmt::expand_syntax_ext));\n     syntax_expanders.insert(\"auto_serialize\",\n@@ -61,6 +70,8 @@ fn syntax_expander_table() -> hashmap<str, syntax_extension> {\n                             builtin(ext::source_util::expand_include_bin));\n     syntax_expanders.insert(\"mod\",\n                             builtin(ext::source_util::expand_mod));\n+    syntax_expanders.insert(\"proto\",\n+                            builtin_item_tt(ext::pipes::expand_proto));\n     ret syntax_expanders;\n }\n "}, {"sha": "63b3c0881e14fc92914cbfa08821c804329510ec", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -1,7 +1,7 @@\n import std::map::hashmap;\n \n import ast::{crate, expr_, expr_mac, mac_invoc, mac_invoc_tt,\n-             tt_delim, tt_flat};\n+             tt_delim, tt_flat, item_mac};\n import fold::*;\n import ext::base::*;\n import ext::qquote::{qq_helper};\n@@ -52,6 +52,10 @@ fn expand_expr(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n                                   #fmt[\"this tt-style macro should be \\\n                                         invoked '%s!{...}'\", *extname])\n                   }\n+                  some(item_tt(*)) {\n+                    cx.span_fatal(pth.span,\n+                                  \"cannot use item macros in this context\");\n+                  }\n                 }\n               }\n               mac_invoc_tt(pth, tt) {\n@@ -109,7 +113,7 @@ fn expand_mod_items(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n             };\n             alt exts.find(*mname) {\n               none | some(normal(_)) | some(macro_defining(_))\n-              | some(normal_tt(_)) {\n+              | some(normal_tt(_)) | some(item_tt(*)) {\n                 items\n               }\n \n@@ -124,20 +128,50 @@ fn expand_mod_items(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n }\n \n /* record module we enter for `#mod` */\n-fn expand_item(cx: ext_ctxt, &&it: @ast::item, fld: ast_fold,\n+fn expand_item(exts: hashmap<str, syntax_extension>,\n+               cx: ext_ctxt, &&it: @ast::item, fld: ast_fold,\n                orig: fn@(&&@ast::item, ast_fold) -> @ast::item)\n     -> @ast::item\n {\n     let is_mod = alt it.node {\n       ast::item_mod(_) | ast::item_foreign_mod(_) {true}\n       _ {false}\n     };\n+    let it = alt it.node {\n+      ast::item_mac(*) {\n+        expand_item_mac(exts, cx, it)\n+      }\n+      _ { it }\n+    };\n     if is_mod { cx.mod_push(it.ident); }\n     let ret_val = orig(it, fld);\n     if is_mod { cx.mod_pop(); }\n     ret ret_val;\n }\n \n+fn expand_item_mac(exts: hashmap<str, syntax_extension>,\n+                   cx: ext_ctxt, &&it: @ast::item) -> @ast::item {\n+    alt it.node {\n+      item_mac({node: mac_invoc_tt(pth, tt), span}) {\n+        let extname = pth.idents[0];\n+        alt exts.find(*extname) {\n+          none {\n+            cx.span_fatal(pth.span,\n+                          #fmt(\"macro undefined: '%s'\", *extname))\n+          }\n+          some(item_tt(expand)) {\n+            expand.expander(cx, it.span, it.ident, tt)\n+          }\n+          _ { cx.span_fatal(it.span,\n+                            #fmt(\"%s is not a legal here\", *extname)) }\n+        }\n+      }\n+      _ {\n+        cx.span_bug(it.span, \"invalid item macro invocation\");\n+      }\n+    }\n+}\n+\n fn new_span(cx: ext_ctxt, sp: span) -> span {\n     /* this discards information in the case of macro-defining macros */\n     ret {lo: sp.lo, hi: sp.hi, expn_info: cx.backtrace()};\n@@ -166,7 +200,7 @@ fn expand_crate(parse_sess: parse::parse_sess,\n     let f_pre =\n         @{fold_expr: |a,b,c| expand_expr(exts, cx, a, b, c, afp.fold_expr),\n           fold_mod: |a,b| expand_mod_items(exts, cx, a, b, afp.fold_mod),\n-          fold_item: |a,b| expand_item(cx, a, b, afp.fold_item),\n+          fold_item: |a,b| expand_item(exts, cx, a, b, afp.fold_item),\n           new_span: |a|new_span(cx, a)\n           with *afp};\n     let f = make_fold(f_pre);"}, {"sha": "23bd95226c37c7c998183d0d16084169edf5b066", "filename": "src/libsyntax/ext/pipes.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fext%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fext%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -0,0 +1,10 @@\n+\n+import codemap::span;\n+import ext::base::ext_ctxt;\n+\n+fn expand_proto(cx: ext_ctxt, span: span, id: ast::ident, tt: ast::token_tree)\n+    -> @ast::item\n+{\n+    cx.span_unimpl(span,\n+                   \"Protocol compiler\")\n+}\n\\ No newline at end of file"}, {"sha": "75977ba6169314282577d10420205ca6ac022633", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -283,6 +283,10 @@ fn noop_fold_item_underscore(i: item_, fld: ast_fold) -> item_ {\n                        rp,\n                        /* FIXME (#2543) */ copy methods)\n           }\n+      item_mac(m) {\n+        // TODO: we might actually want to do something here.\n+        item_mac(m)\n+      }\n         };\n }\n "}, {"sha": "b2d06311e673a27ba544f67b7fe067d3b9efa254", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -12,6 +12,9 @@ export parse_crate_from_source_str;\n export parse_expr_from_source_str, parse_item_from_source_str;\n export parse_from_source_str;\n \n+// this used to be `import common::parser_common`, but it was causing\n+// unresolved import errors. Maybe resolve3 will fix it.\n+import common::*;\n import parser::parser;\n //import attr::parser_attr;\n import attr::*; //resolve bug?\n@@ -20,8 +23,7 @@ import common::*; //resolve bug?\n import ast::node_id;\n import util::interner;\n // FIXME (#1935): resolve badness\n-import lexer::{string_reader_as_reader, tt_reader_as_reader, reader,\n-               string_reader, tt_reader};\n+import lexer::*;\n import diagnostic::{span_handler, mk_span_handler, mk_handler, emitter};\n \n type parse_sess = @{"}, {"sha": "e62de46f5dbf14bf19c9f6211ecd508dafc9a7ee", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -1,7 +1,6 @@\n import either::{either, left, right};\n import ast_util::spanned;\n import common::*; //resolve bug?\n-//import common::{parser_common, seq_sep_trailing_disallowed};\n \n export attr_or_ext;\n export parser_attr;"}, {"sha": "16059b473bbb6b172ac77bbc1cc8b96d6d644379", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -92,6 +92,15 @@ impl parser_common for parser {\n         self.token_is_keyword(word, self.token)\n     }\n \n+    fn is_any_keyword(tok: token::token) -> bool {\n+        alt tok {\n+          token::IDENT(sid, false) {\n+            self.keywords.contains_key(*self.get_str(sid))\n+          }\n+          _ { false }\n+        }\n+    }\n+\n     fn eat_keyword(word: str) -> bool {\n         self.require_keyword(word);\n "}, {"sha": "2f4fe783b4903ca647c7ce7a985f47d7891a456a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -9,7 +9,7 @@ import lexer::reader;\n import prec::{as_prec, token_to_binop};\n import attr::parser_attr;\n import common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed,\n-                seq_sep_none, token_to_str, parser_common};\n+                seq_sep_none, token_to_str};\n import dvec::{dvec, extensions};\n import vec::{push};\n import ast::*;\n@@ -2595,6 +2595,21 @@ class parser {\n             self.parse_item_impl()\n         } else if self.eat_keyword(\"class\") {\n             self.parse_item_class()\n+        } else if !self.is_any_keyword(copy self.token)\n+            && self.look_ahead(1) == token::NOT\n+        {\n+            // item macro.\n+            let pth = self.parse_path_without_tps();\n+            #error(\"parsing invocation of %s\", *pth.idents[0]);\n+            self.expect(token::NOT);\n+            let id = self.parse_ident();\n+            let tt = self.parse_token_tree();\n+            let m = ast::mac_invoc_tt(pth, tt);\n+            let m: ast::mac = {node: m,\n+                               span: {lo: self.span.lo,\n+                                      hi: self.span.hi,\n+                                      expn_info: none}};\n+            (id, item_mac(m), none)\n         } else { ret none; };\n         some(self.mk_item(lo, self.last_span.hi, ident, item_, vis,\n                           alt extra_attrs {"}, {"sha": "5220ecdce936335870218211f506e18d1507e51e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -589,6 +589,9 @@ fn print_item(s: ps, &&item: @ast::item) {\n         for methods.each |meth| { print_ty_method(s, meth); }\n         bclose(s, item.span);\n       }\n+      ast::item_mac(_m) {\n+        fail \"item macros unimplemented\"\n+      }\n     }\n     s.ann.post(ann_node);\n }"}, {"sha": "5a384f04cb3383b178fbb5a8217e8bc44ed65707", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -78,4 +78,6 @@ mod ext {\n     mod log_syntax;\n     mod auto_serialize;\n     mod source_util;\n+\n+    mod pipes;\n }"}, {"sha": "ed54ad3308b0bc57148eaf9d734dc48c8ff2bc58", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -163,6 +163,7 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n             v.visit_ty(m.decl.output, e, v);\n         }\n       }\n+      item_mac(_m) { fail \"item macros unimplemented\" }\n     }\n }\n "}, {"sha": "46a3cd84be3ba59d2a08314b8674f97f3420e418", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -217,6 +217,7 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n               }\n           }\n           item_impl(*) {}\n+          item_mac(*) { fail \"item macros unimplemented\" }\n         }\n     }\n }\n@@ -749,6 +750,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_path(ebml_w, path, ast_map::path_name(item.ident));\n         ebml_w.end_tag();\n       }\n+      item_mac(*) { fail \"item macros unimplemented\" }\n     }\n }\n "}, {"sha": "d8b1f4db6401073f897a282937dbbf1c25fd79dd", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -1352,6 +1352,7 @@ fn found_def_item(i: @ast::item, ns: namespace) -> option<def> {\n           }\n       }\n       ast::item_impl(*) { /* ??? */ }\n+      ast::item_mac(*) { fail \"item macros unimplemented\" }\n     }\n     ret none;\n }\n@@ -1658,6 +1659,9 @@ fn index_mod(md: ast::_mod) -> mod_index {\n               // add the class name itself\n               add_to_index(index, it.ident, mie_item(it));\n           }\n+          ast::item_mac(*) {\n+            fail \"item macros unimplemented\"\n+          }\n         }\n     }\n     ret index;"}, {"sha": "6ca613d528103a9ac22d3da3df52c3ec38b15909", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -13,7 +13,7 @@ import syntax::ast::{expr_binary, expr_cast, expr_field, expr_fn};\n import syntax::ast::{expr_fn_block, expr_index, expr_new, expr_path};\n import syntax::ast::{expr_unary, fn_decl, foreign_item, foreign_item_fn};\n import syntax::ast::{ident, trait_ref, impure_fn, instance_var, item};\n-import syntax::ast::{item_class, item_const, item_enum, item_fn};\n+import syntax::ast::{item_class, item_const, item_enum, item_fn, item_mac};\n import syntax::ast::{item_foreign_mod, item_trait, item_impl, item_mod};\n import syntax::ast::{item_ty, local, local_crate, method, node_id, pat};\n import syntax::ast::{pat_enum, pat_ident, path, prim_ty, stmt_decl, ty};\n@@ -871,6 +871,10 @@ class Resolver {\n                 (*name_bindings).define_type(def_ty(local_def(item.id)));\n                 visit_item(item, new_parent, visitor);\n             }\n+\n+          item_mac(*) {\n+            fail \"item macros unimplemented\"\n+          }\n         }\n     }\n \n@@ -2854,6 +2858,10 @@ class Resolver {\n             item_const(*) {\n                 visit_item(item, (), visitor);\n             }\n+\n+          item_mac(*) {\n+            fail \"item macros unimplemented\"\n+          }\n         }\n \n         self.xray_context = orig_xray_flag;"}, {"sha": "f9b031f1a51dfc9e9555b208b524516296e8bc75", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -148,6 +148,7 @@ fn traverse_public_item(cx: ctx, item: @item) {\n       }\n       item_const(*) |\n       item_enum(*) | item_trait(*) {}\n+      item_mac(*) { fail \"item macros unimplemented\" }\n     }\n }\n "}, {"sha": "545f6ad6aa97c4096afe6eff98f805c00f10abde", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -55,6 +55,7 @@ fn find_pre_post_item(ccx: crate_ctxt, i: item) {\n       item_impl(_, _, _, _, ms) {\n         for ms.each |m| { find_pre_post_method(ccx, m); }\n       }\n+      item_mac(*) { fail \"item macros unimplemented\" }\n     }\n }\n "}, {"sha": "4bae90d22144b667659641f408a8b34063fe7e8d", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -537,6 +537,7 @@ fn ty_of_item(ccx: @crate_ctxt, it: @ast::item)\n       }\n       ast::item_impl(*) | ast::item_mod(_) |\n       ast::item_foreign_mod(_) { fail; }\n+      ast::item_mac(*) { fail \"item macros unimplemented\" }\n     }\n }\n "}, {"sha": "0afacb99c159603e1c5779038f5aae3ba7b1f9e4", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdda3a2c147fdc8caef4e6c662f518ec325e0a/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=05cdda3a2c147fdc8caef4e6c662f518ec325e0a", "patch": "@@ -0,0 +1,17 @@\n+// xfail-test\n+\n+// An example to make sure the protocol parsing syntax extension works.\n+\n+proto! pingpong {\n+    ping:send {\n+        ping -> pong\n+    }\n+\n+    pong:recv {\n+        pong -> ping\n+    }\n+}\n+\n+fn main() {\n+    // TODO: do something with the protocol\n+}\n\\ No newline at end of file"}]}