{"sha": "5014a2a4132fca05c39c34a6584e1a172b9008d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMTRhMmE0MTMyZmNhMDVjMzljMzRhNjU4NGUxYTE3MmI5MDA4ZDY=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-06-26T13:53:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-29T22:41:56Z"}, "message": "std: whitespace/comment clean", "tree": {"sha": "381269433d58577ad9b10aebba8b52f2d20945df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/381269433d58577ad9b10aebba8b52f2d20945df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5014a2a4132fca05c39c34a6584e1a172b9008d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5014a2a4132fca05c39c34a6584e1a172b9008d6", "html_url": "https://github.com/rust-lang/rust/commit/5014a2a4132fca05c39c34a6584e1a172b9008d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5014a2a4132fca05c39c34a6584e1a172b9008d6/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61cc8a07f8373eacb19fad74ea0f6159a9a16c42", "url": "https://api.github.com/repos/rust-lang/rust/commits/61cc8a07f8373eacb19fad74ea0f6159a9a16c42", "html_url": "https://github.com/rust-lang/rust/commit/61cc8a07f8373eacb19fad74ea0f6159a9a16c42"}], "stats": {"total": 43, "additions": 14, "deletions": 29}, "files": [{"sha": "0e13a2c590c402cad3c97dad5ff454d3c2e36c35", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5014a2a4132fca05c39c34a6584e1a172b9008d6/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5014a2a4132fca05c39c34a6584e1a172b9008d6/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=5014a2a4132fca05c39c34a6584e1a172b9008d6", "patch": "@@ -84,7 +84,6 @@ crust fn get_addr_cb(handle: *uv_getaddrinfo_t, status: libc::c_int,\n     if status == 0i32 {\n         if res != (ptr::null::<addrinfo>()) {\n             let mut out_vec = [];\n-            let mut addr_strings = [];\n             log(debug, #fmt(\"initial addrinfo: %?\", res));\n             let mut curr_addr = res;\n             loop {\n@@ -96,17 +95,6 @@ crust fn get_addr_cb(handle: *uv_getaddrinfo_t, status: libc::c_int,\n                     ipv6(copy((\n                         *ll::addrinfo_as_sockaddr_in6(curr_addr))))\n                 };\n-                // we're doing this check to avoid adding multiple\n-                // ip_addrs to the out_vec that are duplicates.. on\n-                // 64bit unbuntu a call to uv_getaddrinfo against\n-                // localhost seems to return three addrinfos, all\n-                // distinct (by ptr addr), that are all ipv4\n-                // addresses and all point to 127.0.0.1\n-                let addr_str = format_addr(new_ip_addr);\n-                if !vec::contains(addr_strings, addr_str) {\n-                    addr_strings += [addr_str];\n-                    out_vec += [new_ip_addr];\n-                }\n \n                 let next_addr = ll::get_next_addrinfo(curr_addr);\n                 if next_addr == ptr::null::<addrinfo>() as *addrinfo {"}, {"sha": "da8c55c3d95800d4c9ca6599c087942b82116e52", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5014a2a4132fca05c39c34a6584e1a172b9008d6/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5014a2a4132fca05c39c34a6584e1a172b9008d6/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=5014a2a4132fca05c39c34a6584e1a172b9008d6", "patch": "@@ -7,7 +7,8 @@ import uv::iotask;\n import uv::iotask::iotask;\n import comm::methods;\n import future_spawn = future::spawn;\n-// FIXME: should be able to replace w/ result::{result, extensions};\n+// FIXME #1935\n+// should be able to, but can't atm, replace w/ result::{result, extensions};\n import result::*;\n import libc::size_t;\n import str::extensions;\n@@ -589,7 +590,7 @@ fn listen_common(-host_ip: ip::ip_addr, port: uint, backlog: uint,\n     let server_data_ptr = ptr::addr_of(server_data);\n \n     let setup_result = comm::listen {|setup_ch|\n-        // FIXME this is to address a compiler warning about\n+        // this is to address a compiler warning about\n         // an implicit copy.. it seems that double nested\n         // will defeat a move sigil, as is done to the host_ip\n         // arg above.. this same pattern works w/o complaint in\n@@ -1239,9 +1240,6 @@ mod test {\n                 impl_gl_tcp_ipv4_server_address_in_use();\n             }\n             #[test]\n-            // FIXME: this probably needs to be ignored on windows.\n-            // ... need to verify (someday we'll have 64bit windows! :)\n-            //#[ignore(cfg(target_os = \"win32\"))]\n             fn test_gl_tcp_server_access_denied() unsafe {\n                 impl_gl_tcp_ipv4_server_access_denied();\n             }\n@@ -1270,9 +1268,6 @@ mod test {\n             }\n             #[test]\n             #[ignore(cfg(target_os = \"linux\"))]\n-            // FIXME: this probably needs to be ignored on windows.\n-            // ... need to verify\n-            //#[ignore(cfg(target_os = \"win32\"))]\n             fn test_gl_tcp_server_access_denied() unsafe {\n                 impl_gl_tcp_ipv4_server_access_denied();\n             }"}, {"sha": "35fa5d4e57ee2e900825a528c279f783741efc0b", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5014a2a4132fca05c39c34a6584e1a172b9008d6/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5014a2a4132fca05c39c34a6584e1a172b9008d6/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=5014a2a4132fca05c39c34a6584e1a172b9008d6", "patch": "@@ -223,14 +223,15 @@ type sockaddr_in = {\n     mut sin_zero: (u8, u8, u8, u8, u8, u8, u8, u8)\n };\n \n-// unix size: 28 .. FIXME: stuck with 32 becuse of rust padding structs?\n+// unix size: 28 .. FIXME #1645\n+// stuck with 32 becuse of rust padding structs?\n type sockaddr_in6 = {\n     a0: *u8, a1: *u8,\n     a2: *u8, a3: *u8\n };\n \n-// unix size: 28\n-// unix size: 28 .. FIXME: stuck with 32 becuse of rust padding structs?\n+// unix size: 28 .. FIXME #1645\n+// stuck with 32 becuse of rust padding structs?\n type addr_in = {\n     a0: *u8, a1: *u8,\n     a2: *u8, a3: *u8\n@@ -755,11 +756,12 @@ unsafe fn ip4_name(src: &sockaddr_in) -> str {\n     vec::as_buf(dst) {|dst_buf|\n         rustrt::rust_uv_ip4_name(src as *sockaddr_in,\n                                               dst_buf, size);\n-        // FIXME: seems that checking the result of uv_ip4_name\n+        // seems that checking the result of uv_ip4_name\n         // doesn't work too well..\n-        // libuv will actually map a malformed input ip to INADDR_NONE,\n-        // which is going to be 255.255.255.255 on most\n-        // platforms.\n+        // you're stuck looking at the value of dst_buf\n+        // to see if it is the string representation of\n+        // INADDR_NONE (0xffffffff or 255.255.255.255 on\n+        // many platforms)\n         str::unsafe::from_buf(dst_buf)\n     }\n }\n@@ -1506,7 +1508,7 @@ mod test {\n         let output = #fmt(\"sockaddr_in -- native: %u rust: %u\",\n                           native_handle_size as uint, rust_handle_size);\n         log(debug, output);\n-        // FIXME .. rust appears to pad structs to the nearest byte..?\n+        // FIXME #1645 .. rust appears to pad structs to the nearest byte..?\n         // .. can't get the uv::ll::sockaddr_in6 to == 28 :/\n         // .. so the type always appears to be 32 in size.. which is\n         // good, i guess.. better too big than too little\n@@ -1521,7 +1523,7 @@ mod test {\n         let output = #fmt(\"addr_in -- native: %u rust: %u\",\n                           native_handle_size as uint, rust_handle_size);\n         log(debug, output);\n-        // FIXME .. see note above about struct padding\n+        // FIXME #1645 .. see note above about struct padding\n         assert (4u+native_handle_size as uint) == rust_handle_size;\n     }\n "}]}