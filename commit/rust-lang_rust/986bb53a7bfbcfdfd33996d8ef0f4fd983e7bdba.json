{"sha": "986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NmJiNTNhN2JmYmNmZGZkMzM5OTZkOGVmMGY0ZmQ5ODNlN2JkYmE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-06-16T23:12:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-16T23:12:04Z"}, "message": "Rollup merge of #34298 - nrc:save-parent, r=eddyb\n\nsave-analysis: some tweaks", "tree": {"sha": "b3ec10703c673490757aeba42346d00e9e57c1bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3ec10703c673490757aeba42346d00e9e57c1bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba", "html_url": "https://github.com/rust-lang/rust/commit/986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f28719efd4268bcd8747b65810646e86901155", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f28719efd4268bcd8747b65810646e86901155", "html_url": "https://github.com/rust-lang/rust/commit/18f28719efd4268bcd8747b65810646e86901155"}, {"sha": "a835d7487cc729a2a64149709229fb62af2d78fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a835d7487cc729a2a64149709229fb62af2d78fc", "html_url": "https://github.com/rust-lang/rust/commit/a835d7487cc729a2a64149709229fb62af2d78fc"}], "stats": {"total": 162, "additions": 127, "deletions": 35}, "files": [{"sha": "15aaa77cc3518fe3ef7a6a587b0fa539c58c4ef9", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba", "patch": "@@ -102,6 +102,8 @@ pub struct EnumData {\n     pub qualname: String,\n     pub span: Span,\n     pub scope: NodeId,\n+    pub variants: Vec<NodeId>,\n+\n }\n \n /// Data for extern crates.\n@@ -212,6 +214,7 @@ pub struct MethodData {\n     pub span: Span,\n     pub scope: NodeId,\n     pub value: String,\n+    pub decl_id: Option<DefId>,\n }\n \n /// Data for modules.\n@@ -223,6 +226,7 @@ pub struct ModData {\n     pub span: Span,\n     pub scope: NodeId,\n     pub filename: String,\n+    pub items: Vec<NodeId>,\n }\n \n /// Data for a reference to a module.\n@@ -242,7 +246,8 @@ pub struct StructData {\n     pub ctor_id: NodeId,\n     pub qualname: String,\n     pub scope: NodeId,\n-    pub value: String\n+    pub value: String,\n+    pub fields: Vec<NodeId>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -263,7 +268,8 @@ pub struct TraitData {\n     pub name: String,\n     pub qualname: String,\n     pub scope: NodeId,\n-    pub value: String\n+    pub value: String,\n+    pub items: Vec<NodeId>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -317,6 +323,7 @@ pub struct UseGlobData {\n #[derive(Debug, RustcEncodable)]\n pub struct VariableData {\n     pub id: NodeId,\n+    pub kind: VariableKind,\n     pub name: String,\n     pub qualname: String,\n     pub span: Span,\n@@ -325,6 +332,14 @@ pub struct VariableData {\n     pub type_value: String,\n }\n \n+#[derive(Debug, RustcEncodable)]\n+pub enum VariableKind {\n+    Static,\n+    Const,\n+    Local,\n+    Field,\n+}\n+\n /// Data for the use of some item (e.g., the use of a local variable, which\n /// will refer to that variables declaration (by ref_id)).\n #[derive(Debug, RustcEncodable)]"}, {"sha": "56c7436a8fe5c3b08875bfa642fe81b21493322e", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 48, "deletions": 23, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba", "patch": "@@ -30,7 +30,7 @@\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::session::Session;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, TyCtxt, ImplOrTraitItem, ImplOrTraitItemContainer};\n \n use std::collections::HashSet;\n use std::hash::*;\n@@ -356,6 +356,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 if !self.span.filter_generated(sub_span, p.span) {\n                     self.dumper.variable(VariableData {\n                         id: id,\n+                        kind: VariableKind::Local,\n                         span: sub_span.expect(\"No span found for variable\"),\n                         name: path_to_string(p),\n                         qualname: format!(\"{}::{}\", qualname, path_to_string(p)),\n@@ -380,24 +381,42 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n \n             let sig_str = ::make_signature(&sig.decl, &sig.generics);\n             if body.is_some() {\n-                if !self.span.filter_generated(Some(method_data.span), span) {\n-                    let mut data = method_data.clone();\n-                    data.value = sig_str;\n-                    self.dumper.function(data.lower(self.tcx));\n-                }\n                 self.process_formals(&sig.decl.inputs, &method_data.qualname);\n-            } else {\n-                if !self.span.filter_generated(Some(method_data.span), span) {\n-                    self.dumper.method(MethodData {\n-                        id: method_data.id,\n-                        name: method_data.name,\n-                        span: method_data.span,\n-                        scope: method_data.scope,\n-                        qualname: method_data.qualname.clone(),\n-                        value: sig_str,\n-                    }.lower(self.tcx));\n-                }\n             }\n+\n+            // If the method is defined in an impl, then try and find the corresponding\n+            // method decl in a trait, and if there is one, make a decl_id for it. This\n+            // requires looking up the impl, then the trait, then searching for a method\n+            // with the right name.\n+            if !self.span.filter_generated(Some(method_data.span), span) {\n+                let container =\n+                    self.tcx.impl_or_trait_item(self.tcx.map.local_def_id(id)).container();\n+                let decl_id = if let ImplOrTraitItemContainer::ImplContainer(id) = container {\n+                    self.tcx.trait_id_of_impl(id).and_then(|id| {\n+                        for item in &**self.tcx.trait_items(id) {\n+                            if let &ImplOrTraitItem::MethodTraitItem(ref m) = item {\n+                                if m.name == name {\n+                                    return Some(m.def_id);\n+                                }\n+                            }\n+                        }\n+                        None\n+                    })\n+                } else {\n+                    None\n+                };\n+\n+                self.dumper.method(MethodData {\n+                    id: method_data.id,\n+                    name: method_data.name,\n+                    span: method_data.span,\n+                    scope: method_data.scope,\n+                    qualname: method_data.qualname.clone(),\n+                    value: sig_str,\n+                    decl_id: decl_id,\n+                }.lower(self.tcx));\n+            }\n+\n             self.process_generic_params(&sig.generics, span, &method_data.qualname, id);\n         }\n \n@@ -519,6 +538,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         if !self.span.filter_generated(sub_span, span) {\n             self.dumper.variable(VariableData {\n                 span: sub_span.expect(\"No span found for variable\"),\n+                kind: VariableKind::Const,\n                 id: id,\n                 name: name.to_string(),\n                 qualname: qualname,\n@@ -542,17 +562,18 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n \n         let sub_span = self.span.sub_span_after_keyword(item.span, keywords::Struct);\n-        let val = if let ast::ItemKind::Struct(ast::VariantData::Struct(ref fields, _), _) =\n-                    item.node {\n+        let (val, fields) =\n+            if let ast::ItemKind::Struct(ast::VariantData::Struct(ref fields, _), _) = item.node\n+        {\n             let fields_str = fields.iter()\n                                    .enumerate()\n                                    .map(|(i, f)| f.ident.map(|i| i.to_string())\n                                                   .unwrap_or(i.to_string()))\n                                    .collect::<Vec<_>>()\n                                    .join(\", \");\n-            format!(\"{} {{ {} }}\", name, fields_str)\n+            (format!(\"{} {{ {} }}\", name, fields_str), fields.iter().map(|f| f.id).collect())\n         } else {\n-            String::new()\n+            (String::new(), vec![])\n         };\n \n         if !self.span.filter_generated(sub_span, item.span) {\n@@ -563,7 +584,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 ctor_id: def.id(),\n                 qualname: qualname.clone(),\n                 scope: self.cur_scope,\n-                value: val\n+                value: val,\n+                fields: fields,\n             }.lower(self.tcx));\n         }\n \n@@ -718,7 +740,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 name: name,\n                 qualname: qualname.clone(),\n                 scope: self.cur_scope,\n-                value: val\n+                value: val,\n+                items: methods.iter().map(|i| i.id).collect(),\n             }.lower(self.tcx));\n         }\n \n@@ -958,6 +981,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             if !self.span.filter_generated(sub_span, p.span) {\n                 self.dumper.variable(VariableData {\n                     span: sub_span.expect(\"No span found for variable\"),\n+                    kind: VariableKind::Local,\n                     id: id,\n                     name: path_to_string(p),\n                     qualname: format!(\"{}${}\", path_to_string(p), id),\n@@ -1366,6 +1390,7 @@ impl<'v, 'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'v> for DumpVisitor<'l, 'tcx,\n                     if !self.span.filter_generated(Some(p.span), p.span) {\n                         self.dumper.variable(VariableData {\n                             span: p.span,\n+                            kind: VariableKind::Local,\n                             id: id,\n                             name: path_to_string(p),\n                             qualname: format!(\"{}${}\", path_to_string(p), id),"}, {"sha": "7efd2624561e7ff915b8099df602d96cfe1c83fe", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba", "patch": "@@ -14,7 +14,7 @@ use rustc::ty::TyCtxt;\n use syntax::ast::{CrateNum, NodeId};\n use syntax::codemap::{Span, CodeMap};\n \n-use super::data;\n+use data;\n \n // FIXME: this should be pub(crate), but the current snapshot doesn't allow it yet\n pub trait Lower {\n@@ -90,6 +90,7 @@ pub struct EnumData {\n     pub qualname: String,\n     pub span: SpanData,\n     pub scope: DefId,\n+    pub variants: Vec<DefId>\n }\n \n impl Lower for data::EnumData {\n@@ -103,6 +104,7 @@ impl Lower for data::EnumData {\n             qualname: self.qualname,\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.map),\n+            variants: self.variants.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n         }\n     }\n }\n@@ -319,6 +321,7 @@ pub struct MethodData {\n     pub span: SpanData,\n     pub scope: DefId,\n     pub value: String,\n+    pub decl_id: Option<DefId>,\n }\n \n impl Lower for data::MethodData {\n@@ -332,6 +335,7 @@ impl Lower for data::MethodData {\n             id: make_def_id(self.id, &tcx.map),\n             qualname: self.qualname,\n             value: self.value,\n+            decl_id: self.decl_id,\n         }\n     }\n }\n@@ -345,6 +349,7 @@ pub struct ModData {\n     pub span: SpanData,\n     pub scope: DefId,\n     pub filename: String,\n+    pub items: Vec<DefId>,\n }\n \n impl Lower for data::ModData {\n@@ -358,6 +363,7 @@ impl Lower for data::ModData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.map),\n             filename: self.filename,\n+            items: self.items.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n         }\n     }\n }\n@@ -392,7 +398,8 @@ pub struct StructData {\n     pub ctor_id: DefId,\n     pub qualname: String,\n     pub scope: DefId,\n-    pub value: String\n+    pub value: String,\n+    pub fields: Vec<DefId>,\n }\n \n impl Lower for data::StructData {\n@@ -406,7 +413,8 @@ impl Lower for data::StructData {\n             ctor_id: make_def_id(self.ctor_id, &tcx.map),\n             qualname: self.qualname,\n             scope: make_def_id(self.scope, &tcx.map),\n-            value: self.value\n+            value: self.value,\n+            fields: self.fields.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n         }\n     }\n }\n@@ -445,7 +453,8 @@ pub struct TraitData {\n     pub id: DefId,\n     pub qualname: String,\n     pub scope: DefId,\n-    pub value: String\n+    pub value: String,\n+    pub items: Vec<DefId>,\n }\n \n impl Lower for data::TraitData {\n@@ -459,6 +468,7 @@ impl Lower for data::TraitData {\n             qualname: self.qualname,\n             scope: make_def_id(self.scope, &tcx.map),\n             value: self.value,\n+            items: self.items.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n         }\n     }\n }\n@@ -585,6 +595,7 @@ impl Lower for data::UseGlobData {\n pub struct VariableData {\n     pub id: DefId,\n     pub name: String,\n+    pub kind: data::VariableKind,\n     pub qualname: String,\n     pub span: SpanData,\n     pub scope: DefId,\n@@ -598,6 +609,7 @@ impl Lower for data::VariableData {\n     fn lower(self, tcx: TyCtxt) -> VariableData {\n         VariableData {\n             id: make_def_id(self.id, &tcx.map),\n+            kind: self.kind,\n             name: self.name,\n             qualname: self.qualname,\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),"}, {"sha": "b1955cbd7b8016cc9b0d85ea99b2f52d17c7286a", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba", "patch": "@@ -13,8 +13,9 @@ use std::io::Write;\n use rustc::hir::def_id::DefId;\n use rustc_serialize::json::as_json;\n \n-use super::external_data::*;\n-use super::dump::Dump;\n+use external_data::*;\n+use data::VariableKind;\n+use dump::Dump;\n \n pub struct JsonDumper<'b, W: Write + 'b> {\n     output: &'b mut W,\n@@ -180,6 +181,8 @@ struct Def {\n     name: String,\n     qualname: String,\n     value: String,\n+    children: Vec<Id>,\n+    decl_id: Option<Id>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -194,14 +197,19 @@ enum DefKind {\n     Trait,\n     // value = type + generics\n     Function,\n+    // value = type + generics\n+    Method,\n     // No id, no value.\n     Macro,\n     // value = file_name\n     Mod,\n     // value = aliased type\n     Type,\n-    // value = type and init expression\n-    Variable,\n+    // value = type and init expression (for all variable kinds).\n+    Local,\n+    Static,\n+    Const,\n+    Field,\n }\n \n impl From<EnumData> for Def {\n@@ -213,6 +221,8 @@ impl From<EnumData> for Def {\n             name: data.name,\n             qualname: data.qualname,\n             value: data.value,\n+            children: data.variants.into_iter().map(|id| From::from(id)).collect(),\n+            decl_id: None,\n         }\n     }\n }\n@@ -226,6 +236,8 @@ impl From<TupleVariantData> for Def {\n             name: data.name,\n             qualname: data.qualname,\n             value: data.value,\n+            children: vec![],\n+            decl_id: None,\n         }\n     }\n }\n@@ -238,6 +250,8 @@ impl From<StructVariantData> for Def {\n             name: data.name,\n             qualname: data.qualname,\n             value: data.value,\n+            children: vec![],\n+            decl_id: None,\n         }\n     }\n }\n@@ -250,6 +264,8 @@ impl From<StructData> for Def {\n             name: data.name,\n             qualname: data.qualname,\n             value: data.value,\n+            children: data.fields.into_iter().map(|id| From::from(id)).collect(),\n+            decl_id: None,\n         }\n     }\n }\n@@ -262,6 +278,8 @@ impl From<TraitData> for Def {\n             name: data.name,\n             qualname: data.qualname,\n             value: data.value,\n+            children: data.items.into_iter().map(|id| From::from(id)).collect(),\n+            decl_id: None,\n         }\n     }\n }\n@@ -274,18 +292,22 @@ impl From<FunctionData> for Def {\n             name: data.name,\n             qualname: data.qualname,\n             value: data.value,\n+            children: vec![],\n+            decl_id: None,\n         }\n     }\n }\n impl From<MethodData> for Def {\n     fn from(data: MethodData) -> Def {\n         Def {\n-            kind: DefKind::Function,\n+            kind: DefKind::Method,\n             id: From::from(data.id),\n             span: data.span,\n             name: data.name,\n             qualname: data.qualname,\n             value: data.value,\n+            children: vec![],\n+            decl_id: data.decl_id.map(|id| From::from(id)),\n         }\n     }\n }\n@@ -298,6 +320,8 @@ impl From<MacroData> for Def {\n             name: data.name,\n             qualname: data.qualname,\n             value: String::new(),\n+            children: vec![],\n+            decl_id: None,\n         }\n     }\n }\n@@ -310,6 +334,8 @@ impl From<ModData> for Def {\n             name: data.name,\n             qualname: data.qualname,\n             value: data.filename,\n+            children: data.items.into_iter().map(|id| From::from(id)).collect(),\n+            decl_id: None,\n         }\n     }\n }\n@@ -322,18 +348,27 @@ impl From<TypeDefData> for Def {\n             name: data.name,\n             qualname: data.qualname,\n             value: data.value,\n+            children: vec![],\n+            decl_id: None,\n         }\n     }\n }\n impl From<VariableData> for Def {\n     fn from(data: VariableData) -> Def {\n         Def {\n-            kind: DefKind::Variable,\n+            kind: match data.kind {\n+                VariableKind::Static => DefKind::Static,\n+                VariableKind::Const => DefKind::Const,\n+                VariableKind::Local => DefKind::Local,\n+                VariableKind::Field => DefKind::Field,\n+            },\n             id: From::from(data.id),\n             span: data.span,\n             name: data.name,\n             qualname: data.qualname,\n             value: data.value,\n+            children: vec![],\n+            decl_id: None,\n         }\n     }\n }"}, {"sha": "3335133816043eedb916c632434817d57c093b74", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=986bb53a7bfbcfdfd33996d8ef0f4fd983e7bdba", "patch": "@@ -153,6 +153,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 filter!(self.span_utils, sub_span, item.span, None);\n                 Some(Data::VariableData(VariableData {\n                     id: item.id,\n+                    kind: VariableKind::Static,\n                     name: item.ident.to_string(),\n                     qualname: qualname,\n                     span: sub_span.unwrap(),\n@@ -167,6 +168,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 filter!(self.span_utils, sub_span, item.span, None);\n                 Some(Data::VariableData(VariableData {\n                     id: item.id,\n+                    kind: VariableKind::Const,\n                     name: item.ident.to_string(),\n                     qualname: qualname,\n                     span: sub_span.unwrap(),\n@@ -190,6 +192,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     span: sub_span.unwrap(),\n                     scope: self.enclosing_scope(item.id),\n                     filename: filename,\n+                    items: m.items.iter().map(|i| i.id).collect(),\n                 }))\n             }\n             ast::ItemKind::Enum(ref def, _) => {\n@@ -209,6 +212,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     span: sub_span.unwrap(),\n                     qualname: qualname,\n                     scope: self.enclosing_scope(item.id),\n+                    variants: def.variants.iter().map(|v| v.node.data.id()).collect(),\n                 }))\n             }\n             ast::ItemKind::Impl(_, _, _, ref trait_ref, ref typ, _) => {\n@@ -266,6 +270,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             filter!(self.span_utils, sub_span, field.span, None);\n             Some(VariableData {\n                 id: field.id,\n+                kind: VariableKind::Field,\n                 name: ident.to_string(),\n                 qualname: qualname,\n                 span: sub_span.unwrap(),"}]}