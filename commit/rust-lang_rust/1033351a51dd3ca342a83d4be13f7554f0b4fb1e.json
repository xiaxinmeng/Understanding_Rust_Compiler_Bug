{"sha": "1033351a51dd3ca342a83d4be13f7554f0b4fb1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMzMzNTFhNTFkZDNjYTM0MmE4M2Q0YmUxM2Y3NTU0ZjBiNGZiMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-25T22:52:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-25T22:52:59Z"}, "message": "Auto merge of #71858 - petrochenkov:env, r=Mark-Simulacrum\n\nPrint environment variables accessed by rustc as special comments into depinfo files\n\nSo cargo (and perhaps others tools) can use them for linting (at least) or for actually rebuilding crates on env var changes.\n\n---\nI've recently observed one more forgotten environment variable in a build script https://github.com/rust-lang/rust/pull/71314/commits/8a77d1ca3fc2df789157f7986ddbaf2a377ff0fe and thought it would be nice to provide the list of accessed variables to cargo automatically as a part of depinfo.\n\nUnsurprisingly, I wasn't the first who had this idea - cc https://github.com/rust-lang/rust/issues/70517 https://github.com/rust-lang/rust/issues/40364 https://github.com/rust-lang/rust/issues/44074.\n\nAlso, there are dozens of uses of `(option_)env!` in rustc repo and, like, half of them are not registered in build scripts.\n\n---\nDescription:\n- depinfo files are extended with special comments containing info about environment variables accessed during compilation.\n- Comment format for environment variables with successfully retrieved value: `# env-dep:KEY=VALUE`.\n- Comment format for environment variables without successfully retrieved value: `# env-dep:KEY` (can happen with `option_env!`).\n- `KEY` and `VALUE` are minimally escaped (`\\n`, `\\r`, `\\\\`) so they don't break makefile comments and can be unescaped by anything that can unescape standard `escape_default` and friends.\n\nFCP report: https://github.com/rust-lang/rust/pull/71858#issuecomment-633071488\n\nCloses https://github.com/rust-lang/rust/issues/70517\nCloses https://github.com/rust-lang/rust/issues/40364\nCloses https://github.com/rust-lang/rust/issues/44074\nA new issue in the cargo repo will be needed to track the cargo side of this feature.\n\nr? @ehuss", "tree": {"sha": "de82ec4b5eefbef6f58767a7ac5c823fbf8776be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de82ec4b5eefbef6f58767a7ac5c823fbf8776be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1033351a51dd3ca342a83d4be13f7554f0b4fb1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1033351a51dd3ca342a83d4be13f7554f0b4fb1e", "html_url": "https://github.com/rust-lang/rust/commit/1033351a51dd3ca342a83d4be13f7554f0b4fb1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1033351a51dd3ca342a83d4be13f7554f0b4fb1e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50fc24d8a172a853b5dfe40702d6550e3b8562ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/50fc24d8a172a853b5dfe40702d6550e3b8562ba", "html_url": "https://github.com/rust-lang/rust/commit/50fc24d8a172a853b5dfe40702d6550e3b8562ba"}, {"sha": "69b2179afe695d1a93b792cfd7c4197ca63ce658", "url": "https://api.github.com/repos/rust-lang/rust/commits/69b2179afe695d1a93b792cfd7c4197ca63ce658", "html_url": "https://github.com/rust-lang/rust/commit/69b2179afe695d1a93b792cfd7c4197ca63ce658"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "6c3a1ce0958ec5d1f90a90f3cdf34ef1f9462a74", "filename": "src/librustc_builtin_macros/env.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1033351a51dd3ca342a83d4be13f7554f0b4fb1e/src%2Flibrustc_builtin_macros%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1033351a51dd3ca342a83d4be13f7554f0b4fb1e/src%2Flibrustc_builtin_macros%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fenv.rs?ref=1033351a51dd3ca342a83d4be13f7554f0b4fb1e", "patch": "@@ -22,8 +22,10 @@ pub fn expand_option_env<'cx>(\n     };\n \n     let sp = cx.with_def_site_ctxt(sp);\n-    let e = match env::var(&var.as_str()) {\n-        Err(..) => {\n+    let value = env::var(&var.as_str()).ok().as_deref().map(Symbol::intern);\n+    cx.parse_sess.env_depinfo.borrow_mut().insert((Symbol::intern(&var), value));\n+    let e = match value {\n+        None => {\n             let lt = cx.lifetime(sp, Ident::new(kw::StaticLifetime, sp));\n             cx.expr_path(cx.path_all(\n                 sp,\n@@ -37,10 +39,10 @@ pub fn expand_option_env<'cx>(\n                 ))],\n             ))\n         }\n-        Ok(s) => cx.expr_call_global(\n+        Some(value) => cx.expr_call_global(\n             sp,\n             cx.std_path(&[sym::option, sym::Option, sym::Some]),\n-            vec![cx.expr_str(sp, Symbol::intern(&s))],\n+            vec![cx.expr_str(sp, value)],\n         ),\n     };\n     MacEager::expr(e)\n@@ -78,12 +80,14 @@ pub fn expand_env<'cx>(\n     }\n \n     let sp = cx.with_def_site_ctxt(sp);\n-    let e = match env::var(&*var.as_str()) {\n-        Err(_) => {\n+    let value = env::var(&*var.as_str()).ok().as_deref().map(Symbol::intern);\n+    cx.parse_sess.env_depinfo.borrow_mut().insert((var, value));\n+    let e = match value {\n+        None => {\n             cx.span_err(sp, &msg.as_str());\n             return DummyResult::any(sp);\n         }\n-        Ok(s) => cx.expr_str(sp, Symbol::intern(&s)),\n+        Some(value) => cx.expr_str(sp, value),\n     };\n     MacEager::expr(e)\n }"}, {"sha": "f56d8a372a73e3fbf9e515c889852c41fe03d700", "filename": "src/librustc_builtin_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1033351a51dd3ca342a83d4be13f7554f0b4fb1e/src%2Flibrustc_builtin_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1033351a51dd3ca342a83d4be13f7554f0b4fb1e/src%2Flibrustc_builtin_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flib.rs?ref=1033351a51dd3ca342a83d4be13f7554f0b4fb1e", "patch": "@@ -5,6 +5,7 @@\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n+#![feature(inner_deref)]\n #![feature(nll)]\n #![feature(or_patterns)]\n #![feature(proc_macro_internals)]"}, {"sha": "ed5e715ce7084a44e901c0211897e4936fd5c81f", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1033351a51dd3ca342a83d4be13f7554f0b4fb1e/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1033351a51dd3ca342a83d4be13f7554f0b4fb1e/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=1033351a51dd3ca342a83d4be13f7554f0b4fb1e", "patch": "@@ -549,6 +549,22 @@ fn escape_dep_filename(filename: &FileName) -> String {\n     filename.to_string().replace(\" \", \"\\\\ \")\n }\n \n+// Makefile comments only need escaping newlines and `\\`.\n+// The result can be unescaped by anything that can unescape `escape_default` and friends.\n+fn escape_dep_env(symbol: Symbol) -> String {\n+    let s = symbol.as_str();\n+    let mut escaped = String::with_capacity(s.len());\n+    for c in s.chars() {\n+        match c {\n+            '\\n' => escaped.push_str(r\"\\n\"),\n+            '\\r' => escaped.push_str(r\"\\r\"),\n+            '\\\\' => escaped.push_str(r\"\\\\\"),\n+            _ => escaped.push(c),\n+        }\n+    }\n+    escaped\n+}\n+\n fn write_out_deps(\n     sess: &Session,\n     boxed_resolver: &Steal<Rc<RefCell<BoxedResolver>>>,\n@@ -604,6 +620,25 @@ fn write_out_deps(\n         for path in files {\n             writeln!(file, \"{}:\", path)?;\n         }\n+\n+        // Emit special comments with information about accessed environment variables.\n+        let env_depinfo = sess.parse_sess.env_depinfo.borrow();\n+        if !env_depinfo.is_empty() {\n+            let mut envs: Vec<_> = env_depinfo\n+                .iter()\n+                .map(|(k, v)| (escape_dep_env(*k), v.map(escape_dep_env)))\n+                .collect();\n+            envs.sort_unstable();\n+            writeln!(file)?;\n+            for (k, v) in envs {\n+                write!(file, \"# env-dep:{}\", k)?;\n+                if let Some(v) = v {\n+                    write!(file, \"={}\", v)?;\n+                }\n+                writeln!(file)?;\n+            }\n+        }\n+\n         Ok(())\n     })();\n "}, {"sha": "93b27cabfb67b34e8a35d986bdfa356634c66ba2", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1033351a51dd3ca342a83d4be13f7554f0b4fb1e/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1033351a51dd3ca342a83d4be13f7554f0b4fb1e/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=1033351a51dd3ca342a83d4be13f7554f0b4fb1e", "patch": "@@ -135,6 +135,8 @@ pub struct ParseSess {\n     pub symbol_gallery: SymbolGallery,\n     /// The parser has reached `Eof` due to an unclosed brace. Used to silence unnecessary errors.\n     pub reached_eof: Lock<bool>,\n+    /// Environment variables accessed during the build and their values when they exist.\n+    pub env_depinfo: Lock<FxHashSet<(Symbol, Option<Symbol>)>>,\n }\n \n impl ParseSess {\n@@ -160,6 +162,7 @@ impl ParseSess {\n             gated_spans: GatedSpans::default(),\n             symbol_gallery: SymbolGallery::default(),\n             reached_eof: Lock::new(false),\n+            env_depinfo: Default::default(),\n         }\n     }\n "}, {"sha": "2be0b4b324b08eae95b4ba093d84792a7ff8eec3", "filename": "src/test/run-make/env-dep-info/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1033351a51dd3ca342a83d4be13f7554f0b4fb1e/src%2Ftest%2Frun-make%2Fenv-dep-info%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1033351a51dd3ca342a83d4be13f7554f0b4fb1e/src%2Ftest%2Frun-make%2Fenv-dep-info%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fenv-dep-info%2FMakefile?ref=1033351a51dd3ca342a83d4be13f7554f0b4fb1e", "patch": "@@ -0,0 +1,8 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\tEXISTING_ENV=1 EXISTING_OPT_ENV=1 $(RUSTC) --emit dep-info main.rs\n+\t$(CGREP) \"# env-dep:EXISTING_ENV=1\" < $(TMPDIR)/main.d\n+\t$(CGREP) \"# env-dep:EXISTING_OPT_ENV=1\" < $(TMPDIR)/main.d\n+\t$(CGREP) \"# env-dep:NONEXISTENT_OPT_ENV\" < $(TMPDIR)/main.d\n+\t$(CGREP) \"# env-dep:ESCAPE\\nESCAPE\\\\\" < $(TMPDIR)/main.d"}, {"sha": "a25246bac792cb1ba6c51804a315fa4591abcc06", "filename": "src/test/run-make/env-dep-info/main.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1033351a51dd3ca342a83d4be13f7554f0b4fb1e/src%2Ftest%2Frun-make%2Fenv-dep-info%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1033351a51dd3ca342a83d4be13f7554f0b4fb1e/src%2Ftest%2Frun-make%2Fenv-dep-info%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fenv-dep-info%2Fmain.rs?ref=1033351a51dd3ca342a83d4be13f7554f0b4fb1e", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    env!(\"EXISTING_ENV\");\n+    option_env!(\"EXISTING_OPT_ENV\");\n+    option_env!(\"NONEXISTENT_OPT_ENV\");\n+    option_env!(\"ESCAPE\\nESCAPE\\\\\");\n+}"}]}