{"sha": "fb35311e9a92e482b3e68042e2d604212b210adb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMzUzMTFlOWE5MmU0ODJiM2U2ODA0MmUyZDYwNDIxMmIyMTBhZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-17T06:48:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-17T06:48:53Z"}, "message": "Auto merge of #4278 - phansch:uitestcleanup_indexing, r=flip1995\n\nUI Test Cleanup: Split out out_of_bounds_indexing\n\nThis moves the `out_of_bounds_indexing` lint tests to their own\ndirectory.\n\nchangelog: none\n\ncc #2038", "tree": {"sha": "56cd17b74a4ab4e886e8af4ae0bc80ab078ff61a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56cd17b74a4ab4e886e8af4ae0bc80ab078ff61a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb35311e9a92e482b3e68042e2d604212b210adb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb35311e9a92e482b3e68042e2d604212b210adb", "html_url": "https://github.com/rust-lang/rust/commit/fb35311e9a92e482b3e68042e2d604212b210adb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb35311e9a92e482b3e68042e2d604212b210adb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7498a5f13c8d47db3e4c2238014d48b79b312888", "url": "https://api.github.com/repos/rust-lang/rust/commits/7498a5f13c8d47db3e4c2238014d48b79b312888", "html_url": "https://github.com/rust-lang/rust/commit/7498a5f13c8d47db3e4c2238014d48b79b312888"}, {"sha": "38b6156a51f119f9ad4fd75e190434726de3f0a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/38b6156a51f119f9ad4fd75e190434726de3f0a3", "html_url": "https://github.com/rust-lang/rust/commit/38b6156a51f119f9ad4fd75e190434726de3f0a3"}], "stats": {"total": 351, "additions": 194, "deletions": 157}, "files": [{"sha": "8dd6ae1462513c26207f2f4af8236d92fea9c67d", "filename": "tests/ui/indexing_slicing.rs", "status": "modified", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.rs?ref=fb35311e9a92e482b3e68042e2d604212b210adb", "patch": "@@ -1,5 +1,7 @@\n #![feature(plugin)]\n #![warn(clippy::indexing_slicing)]\n+// We also check the out_of_bounds_indexing lint here, because it lints similar things and\n+// we want to avoid false positives.\n #![warn(clippy::out_of_bounds_indexing)]\n #![allow(clippy::no_effect, clippy::unnecessary_operation)]\n \n@@ -15,21 +17,10 @@ fn main() {\n     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n     x[4]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n     x[1 << 3]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-    &x[..=4];\n-    &x[1..5];\n-    &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n-    &x[5..];\n-    &x[..5];\n-    &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n-    &x[0..=4];\n+    &x[5..][..10]; // Two lint reports, one for out of bounds [5..] and another for slicing [..10].\n     &x[0..][..3];\n     &x[1..][..5];\n \n-    &x[4..]; // Ok, should not produce stderr.\n-    &x[..4]; // Ok, should not produce stderr.\n-    &x[..]; // Ok, should not produce stderr.\n-    &x[1..]; // Ok, should not produce stderr.\n-    &x[2..].iter().map(|x| 2 * x).collect::<Vec<i32>>(); // Ok, should not produce stderr.\n     &x[0..].get(..3); // Ok, should not produce stderr.\n     x[0]; // Ok, should not produce stderr.\n     x[3]; // Ok, should not produce stderr.\n@@ -43,21 +34,6 @@ fn main() {\n \n     &y[..]; // Ok, should not produce stderr.\n \n-    let empty: [i8; 0] = [];\n-    empty[0]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-    &empty[1..5];\n-    &empty[0..=4];\n-    &empty[..=4];\n-    &empty[1..];\n-    &empty[..4];\n-    &empty[0..=0];\n-    &empty[..=0];\n-\n-    &empty[0..]; // Ok, should not produce stderr.\n-    &empty[0..0]; // Ok, should not produce stderr.\n-    &empty[..0]; // Ok, should not produce stderr.\n-    &empty[..]; // Ok, should not produce stderr.\n-\n     let v = vec![0; 5];\n     v[0];\n     v[10];\n@@ -79,9 +55,4 @@ fn main() {\n     x[M]; // Ok, should not produce stderr.\n     v[N];\n     v[M];\n-\n-    // issue 3102\n-    let num = 1;\n-    &x[num..10]; // should trigger out of bounds error\n-    &x[10..num]; // should trigger out of bounds error\n }"}, {"sha": "f075de50686d28dc543a73a9e43472dfad9efdad", "filename": "tests/ui/indexing_slicing.stderr", "status": "modified", "additions": 29, "deletions": 125, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Findexing_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Findexing_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.stderr?ref=fb35311e9a92e482b3e68042e2d604212b210adb", "patch": "@@ -1,31 +1,25 @@\n error: index out of bounds: the len is 4 but the index is 4\n-  --> $DIR/indexing_slicing.rs:16:5\n+  --> $DIR/indexing_slicing.rs:18:5\n    |\n LL |     x[4]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n    |     ^^^^\n    |\n    = note: #[deny(const_err)] on by default\n \n error: index out of bounds: the len is 4 but the index is 8\n-  --> $DIR/indexing_slicing.rs:17:5\n+  --> $DIR/indexing_slicing.rs:19:5\n    |\n LL |     x[1 << 3]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n    |     ^^^^^^^^^\n \n-error: index out of bounds: the len is 0 but the index is 0\n-  --> $DIR/indexing_slicing.rs:47:5\n-   |\n-LL |     empty[0]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-   |     ^^^^^^^^\n-\n error: index out of bounds: the len is 4 but the index is 15\n-  --> $DIR/indexing_slicing.rs:78:5\n+  --> $DIR/indexing_slicing.rs:54:5\n    |\n LL |     x[N]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n    |     ^^^^\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:11:5\n+  --> $DIR/indexing_slicing.rs:13:5\n    |\n LL |     x[index];\n    |     ^^^^^^^^\n@@ -34,276 +28,186 @@ LL |     x[index];\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:12:6\n+  --> $DIR/indexing_slicing.rs:14:6\n    |\n LL |     &x[index..];\n    |      ^^^^^^^^^^\n    |\n    = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:13:6\n+  --> $DIR/indexing_slicing.rs:15:6\n    |\n LL |     &x[..index];\n    |      ^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:14:6\n+  --> $DIR/indexing_slicing.rs:16:6\n    |\n LL |     &x[index_from..index_to];\n    |      ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:15:6\n+  --> $DIR/indexing_slicing.rs:17:6\n    |\n LL |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:15:6\n+  --> $DIR/indexing_slicing.rs:17:6\n    |\n LL |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n    |      ^^^^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:18:11\n-   |\n-LL |     &x[..=4];\n-   |           ^\n-   |\n-   = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:19:11\n-   |\n-LL |     &x[1..5];\n-   |           ^\n-\n error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:20:6\n    |\n-LL |     &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n+LL |     &x[5..][..10]; // Two lint reports, one for out of bounds [5..] and another for slicing [..10].\n    |      ^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n   --> $DIR/indexing_slicing.rs:20:8\n    |\n-LL |     &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n+LL |     &x[5..][..10]; // Two lint reports, one for out of bounds [5..] and another for slicing [..10].\n    |        ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:21:8\n-   |\n-LL |     &x[5..];\n-   |        ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:22:10\n-   |\n-LL |     &x[..5];\n-   |          ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:23:8\n-   |\n-LL |     &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n-   |        ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:24:12\n    |\n-LL |     &x[0..=4];\n-   |            ^\n+   = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:25:6\n+  --> $DIR/indexing_slicing.rs:21:6\n    |\n LL |     &x[0..][..3];\n    |      ^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:26:6\n+  --> $DIR/indexing_slicing.rs:22:6\n    |\n LL |     &x[1..][..5];\n    |      ^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:39:5\n+  --> $DIR/indexing_slicing.rs:30:5\n    |\n LL |     y[0];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:40:6\n+  --> $DIR/indexing_slicing.rs:31:6\n    |\n LL |     &y[1..2];\n    |      ^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:41:6\n+  --> $DIR/indexing_slicing.rs:32:6\n    |\n LL |     &y[0..=4];\n    |      ^^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:42:6\n+  --> $DIR/indexing_slicing.rs:33:6\n    |\n LL |     &y[..=4];\n    |      ^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:48:12\n-   |\n-LL |     &empty[1..5];\n-   |            ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:49:16\n-   |\n-LL |     &empty[0..=4];\n-   |                ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:50:15\n-   |\n-LL |     &empty[..=4];\n-   |               ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:51:12\n-   |\n-LL |     &empty[1..];\n-   |            ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:52:14\n-   |\n-LL |     &empty[..4];\n-   |              ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:53:16\n-   |\n-LL |     &empty[0..=0];\n-   |                ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:54:15\n-   |\n-LL |     &empty[..=0];\n-   |               ^\n-\n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:62:5\n+  --> $DIR/indexing_slicing.rs:38:5\n    |\n LL |     v[0];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:63:5\n+  --> $DIR/indexing_slicing.rs:39:5\n    |\n LL |     v[10];\n    |     ^^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:64:5\n+  --> $DIR/indexing_slicing.rs:40:5\n    |\n LL |     v[1 << 3];\n    |     ^^^^^^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:65:6\n+  --> $DIR/indexing_slicing.rs:41:6\n    |\n LL |     &v[10..100];\n    |      ^^^^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:66:6\n+  --> $DIR/indexing_slicing.rs:42:6\n    |\n LL |     &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n    |      ^^^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:66:8\n+  --> $DIR/indexing_slicing.rs:42:8\n    |\n LL |     &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n    |        ^^\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:67:6\n+  --> $DIR/indexing_slicing.rs:43:6\n    |\n LL |     &v[10..];\n    |      ^^^^^^^\n    |\n    = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:68:6\n+  --> $DIR/indexing_slicing.rs:44:6\n    |\n LL |     &v[..100];\n    |      ^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:80:5\n+  --> $DIR/indexing_slicing.rs:56:5\n    |\n LL |     v[N];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:81:5\n+  --> $DIR/indexing_slicing.rs:57:5\n    |\n LL |     v[M];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:85:13\n-   |\n-LL |     &x[num..10]; // should trigger out of bounds error\n-   |             ^^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:86:8\n-   |\n-LL |     &x[10..num]; // should trigger out of bounds error\n-   |        ^^\n-\n-error: aborting due to 43 previous errors\n+error: aborting due to 27 previous errors\n "}, {"sha": "884e46eb4ee163fdf8efb7895018b4bff9a95578", "filename": "tests/ui/out_of_bounds_indexing/empty_array.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.rs?ref=fb35311e9a92e482b3e68042e2d604212b210adb", "patch": "@@ -0,0 +1,19 @@\n+#![warn(clippy::out_of_bounds_indexing)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n+\n+fn main() {\n+    let empty: [i8; 0] = [];\n+    empty[0];\n+    &empty[1..5];\n+    &empty[0..=4];\n+    &empty[..=4];\n+    &empty[1..];\n+    &empty[..4];\n+    &empty[0..=0];\n+    &empty[..=0];\n+\n+    &empty[0..]; // Ok, should not produce stderr.\n+    &empty[0..0]; // Ok, should not produce stderr.\n+    &empty[..0]; // Ok, should not produce stderr.\n+    &empty[..]; // Ok, should not produce stderr.\n+}"}, {"sha": "2372bf860c52a279758cf4e26884b1adb15e1f9d", "filename": "tests/ui/out_of_bounds_indexing/empty_array.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.stderr?ref=fb35311e9a92e482b3e68042e2d604212b210adb", "patch": "@@ -0,0 +1,54 @@\n+error: index out of bounds: the len is 0 but the index is 0\n+  --> $DIR/empty_array.rs:6:5\n+   |\n+LL |     empty[0];\n+   |     ^^^^^^^^\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:7:12\n+   |\n+LL |     &empty[1..5];\n+   |            ^\n+   |\n+   = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:8:16\n+   |\n+LL |     &empty[0..=4];\n+   |                ^\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:9:15\n+   |\n+LL |     &empty[..=4];\n+   |               ^\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:10:12\n+   |\n+LL |     &empty[1..];\n+   |            ^\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:11:14\n+   |\n+LL |     &empty[..4];\n+   |              ^\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:12:16\n+   |\n+LL |     &empty[0..=0];\n+   |                ^\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:13:15\n+   |\n+LL |     &empty[..=0];\n+   |               ^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "edd2123d48a557fbdf4339e120acdb89b051e6ee", "filename": "tests/ui/out_of_bounds_indexing/issue-3102.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.rs?ref=fb35311e9a92e482b3e68042e2d604212b210adb", "patch": "@@ -0,0 +1,11 @@\n+#![warn(clippy::out_of_bounds_indexing)]\n+#![allow(clippy::no_effect)]\n+\n+fn main() {\n+    let x = [1, 2, 3, 4];\n+\n+    // issue 3102\n+    let num = 1;\n+    &x[num..10]; // should trigger out of bounds error\n+    &x[10..num]; // should trigger out of bounds error\n+}"}, {"sha": "516c1df40be0acfc0edcabcdba0aa5b4c1bbc33a", "filename": "tests/ui/out_of_bounds_indexing/issue-3102.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.stderr?ref=fb35311e9a92e482b3e68042e2d604212b210adb", "patch": "@@ -0,0 +1,16 @@\n+error: range is out of bounds\n+  --> $DIR/issue-3102.rs:9:13\n+   |\n+LL |     &x[num..10]; // should trigger out of bounds error\n+   |             ^^\n+   |\n+   = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n+\n+error: range is out of bounds\n+  --> $DIR/issue-3102.rs:10:8\n+   |\n+LL |     &x[10..num]; // should trigger out of bounds error\n+   |        ^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4c541c23f5f472608eba394c39f180ee3ea7892f", "filename": "tests/ui/out_of_bounds_indexing/simple.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.rs?ref=fb35311e9a92e482b3e68042e2d604212b210adb", "patch": "@@ -0,0 +1,22 @@\n+#![warn(clippy::out_of_bounds_indexing)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n+\n+fn main() {\n+    let x = [1, 2, 3, 4];\n+\n+    &x[..=4];\n+    &x[1..5];\n+    &x[5..];\n+    &x[..5];\n+    &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n+    &x[0..=4];\n+\n+    &x[4..]; // Ok, should not produce stderr.\n+    &x[..4]; // Ok, should not produce stderr.\n+    &x[..]; // Ok, should not produce stderr.\n+    &x[1..]; // Ok, should not produce stderr.\n+    &x[2..].iter().map(|x| 2 * x).collect::<Vec<i32>>(); // Ok, should not produce stderr.\n+\n+    &x[0..].get(..3); // Ok, should not produce stderr.\n+    &x[0..3]; // Ok, should not produce stderr.\n+}"}, {"sha": "3d95afcdab23397d94debef7f27842c149a6eb8f", "filename": "tests/ui/out_of_bounds_indexing/simple.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb35311e9a92e482b3e68042e2d604212b210adb/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.stderr?ref=fb35311e9a92e482b3e68042e2d604212b210adb", "patch": "@@ -0,0 +1,40 @@\n+error: range is out of bounds\n+  --> $DIR/simple.rs:7:11\n+   |\n+LL |     &x[..=4];\n+   |           ^\n+   |\n+   = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n+\n+error: range is out of bounds\n+  --> $DIR/simple.rs:8:11\n+   |\n+LL |     &x[1..5];\n+   |           ^\n+\n+error: range is out of bounds\n+  --> $DIR/simple.rs:9:8\n+   |\n+LL |     &x[5..];\n+   |        ^\n+\n+error: range is out of bounds\n+  --> $DIR/simple.rs:10:10\n+   |\n+LL |     &x[..5];\n+   |          ^\n+\n+error: range is out of bounds\n+  --> $DIR/simple.rs:11:8\n+   |\n+LL |     &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n+   |        ^\n+\n+error: range is out of bounds\n+  --> $DIR/simple.rs:12:12\n+   |\n+LL |     &x[0..=4];\n+   |            ^\n+\n+error: aborting due to 6 previous errors\n+"}]}