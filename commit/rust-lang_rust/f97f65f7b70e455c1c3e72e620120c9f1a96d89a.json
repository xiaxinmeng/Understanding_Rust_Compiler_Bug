{"sha": "f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5N2Y2NWY3YjcwZTQ1NWMxYzNlNzJlNjIwMTIwYzlmMWE5NmQ4OWE=", "commit": {"author": {"name": "Stuart Pernsteiner", "email": "spernsteiner@mozilla.com", "date": "2014-07-25T16:41:09Z"}, "committer": {"name": "Stuart Pernsteiner", "email": "spernsteiner@mozilla.com", "date": "2014-07-30T19:07:26Z"}, "message": "avoid redundant translation of items during monomorphization", "tree": {"sha": "adc953ebcd3c1681b67e1b3243d5d7e14dee73d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adc953ebcd3c1681b67e1b3243d5d7e14dee73d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "html_url": "https://github.com/rust-lang/rust/commit/f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/comments", "author": {"login": "spernsteiner", "id": 3031136, "node_id": "MDQ6VXNlcjMwMzExMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3031136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spernsteiner", "html_url": "https://github.com/spernsteiner", "followers_url": "https://api.github.com/users/spernsteiner/followers", "following_url": "https://api.github.com/users/spernsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/spernsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/spernsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spernsteiner/subscriptions", "organizations_url": "https://api.github.com/users/spernsteiner/orgs", "repos_url": "https://api.github.com/users/spernsteiner/repos", "events_url": "https://api.github.com/users/spernsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/spernsteiner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spernsteiner", "id": 3031136, "node_id": "MDQ6VXNlcjMwMzExMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3031136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spernsteiner", "html_url": "https://github.com/spernsteiner", "followers_url": "https://api.github.com/users/spernsteiner/followers", "following_url": "https://api.github.com/users/spernsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/spernsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/spernsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spernsteiner/subscriptions", "organizations_url": "https://api.github.com/users/spernsteiner/orgs", "repos_url": "https://api.github.com/users/spernsteiner/repos", "events_url": "https://api.github.com/users/spernsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/spernsteiner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab170ffc5e45d31eef85db8fd7a3b68764f77c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab170ffc5e45d31eef85db8fd7a3b68764f77c2", "html_url": "https://github.com/rust-lang/rust/commit/3ab170ffc5e45d31eef85db8fd7a3b68764f77c2"}], "stats": {"total": 102, "additions": 81, "deletions": 21}, "files": [{"sha": "ea301784c930e0966412a5ae13b8c2bad6d1ac16", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "patch": "@@ -1235,7 +1235,8 @@ pub fn new_fn_ctxt<'a>(ccx: &'a CrateContext,\n                        output_type: ty::t,\n                        param_substs: &'a param_substs,\n                        sp: Option<Span>,\n-                       block_arena: &'a TypedArena<Block<'a>>)\n+                       block_arena: &'a TypedArena<Block<'a>>,\n+                       handle_items: HandleItemsFlag)\n                        -> FunctionContext<'a> {\n     param_substs.validate();\n \n@@ -1268,7 +1269,8 @@ pub fn new_fn_ctxt<'a>(ccx: &'a CrateContext,\n           block_arena: block_arena,\n           ccx: ccx,\n           debug_context: debug_context,\n-          scopes: RefCell::new(Vec::new())\n+          scopes: RefCell::new(Vec::new()),\n+          handle_items: handle_items,\n     };\n \n     if has_env {\n@@ -1579,7 +1581,8 @@ pub fn trans_closure(ccx: &CrateContext,\n                      abi: Abi,\n                      has_env: bool,\n                      is_unboxed_closure: IsUnboxedClosureFlag,\n-                     maybe_load_env: <'a> |&'a Block<'a>| -> &'a Block<'a>) {\n+                     maybe_load_env: <'a> |&'a Block<'a>| -> &'a Block<'a>,\n+                     handle_items: HandleItemsFlag) {\n     ccx.stats.n_closures.set(ccx.stats.n_closures.get() + 1);\n \n     let _icx = push_ctxt(\"trans_closure\");\n@@ -1596,7 +1599,8 @@ pub fn trans_closure(ccx: &CrateContext,\n                           output_type,\n                           param_substs,\n                           Some(body.span),\n-                          &arena);\n+                          &arena,\n+                          handle_items);\n     let mut bcx = init_function(&fcx, false, output_type);\n \n     // cleanup scope for the incoming arguments\n@@ -1698,7 +1702,8 @@ pub fn trans_fn(ccx: &CrateContext,\n                 llfndecl: ValueRef,\n                 param_substs: &param_substs,\n                 id: ast::NodeId,\n-                attrs: &[ast::Attribute]) {\n+                attrs: &[ast::Attribute],\n+                handle_items: HandleItemsFlag) {\n     let _s = StatRecorder::new(ccx, ccx.tcx.map.path_to_string(id).to_string());\n     debug!(\"trans_fn(param_substs={})\", param_substs.repr(ccx.tcx()));\n     let _icx = push_ctxt(\"trans_fn\");\n@@ -1718,7 +1723,8 @@ pub fn trans_fn(ccx: &CrateContext,\n                   abi,\n                   false,\n                   NotUnboxedClosure,\n-                  |bcx| bcx);\n+                  |bcx| bcx,\n+                  handle_items);\n }\n \n pub fn trans_enum_variant(ccx: &CrateContext,\n@@ -1824,7 +1830,7 @@ fn trans_enum_variant_or_tuple_like_struct(ccx: &CrateContext,\n \n     let arena = TypedArena::new();\n     let fcx = new_fn_ctxt(ccx, llfndecl, ctor_id, false, result_ty,\n-                          param_substs, None, &arena);\n+                          param_substs, None, &arena, TranslateItems);\n     let bcx = init_function(&fcx, false, result_ty);\n \n     let arg_tys = ty::ty_fn_args(ctor_ty);\n@@ -1925,7 +1931,8 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n                      llfn,\n                      &param_substs::empty(),\n                      item.id,\n-                     item.attrs.as_slice());\n+                     item.attrs.as_slice(),\n+                     TranslateItems);\n         } else {\n             // Be sure to travel more than just one layer deep to catch nested\n             // items in blocks and such."}, {"sha": "f186af48321c3d8dd64db0769811eb5e7ca8bfa9", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "patch": "@@ -339,7 +339,8 @@ pub fn trans_unboxing_shim(bcx: &Block,\n                           return_type,\n                           &empty_param_substs,\n                           None,\n-                          &block_arena);\n+                          &block_arena,\n+                          TranslateItems);\n     let mut bcx = init_function(&fcx, false, return_type);\n \n     // Create the substituted versions of the self type."}, {"sha": "98b2ebb70f3cb211c732c68810d8cadb454bd914", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "patch": "@@ -394,7 +394,8 @@ pub fn trans_expr_fn<'a>(\n                   ty::ty_fn_abi(fty),\n                   true,\n                   NotUnboxedClosure,\n-                  |bcx| load_environment(bcx, cdata_ty, &freevars, store));\n+                  |bcx| load_environment(bcx, cdata_ty, &freevars, store),\n+                  bcx.fcx.handle_items);\n     fill_fn_pair(bcx, dest_addr, llfn, llbox);\n     bcx\n }\n@@ -486,7 +487,8 @@ pub fn trans_unboxed_closure<'a>(\n                   ty::ty_fn_abi(function_type),\n                   true,\n                   IsUnboxedClosure,\n-                  |bcx| load_unboxed_closure_environment(bcx, freevars_ptr));\n+                  |bcx| load_unboxed_closure_environment(bcx, freevars_ptr),\n+                  bcx.fcx.handle_items);\n \n     // Don't hoist this to the top of the function. It's perfectly legitimate\n     // to have a zero-size unboxed closure (in which case dest will be\n@@ -573,7 +575,7 @@ pub fn get_wrapper_for_bare_fn(ccx: &CrateContext,\n     let arena = TypedArena::new();\n     let empty_param_substs = param_substs::empty();\n     let fcx = new_fn_ctxt(ccx, llfn, -1, true, f.sig.output,\n-                          &empty_param_substs, None, &arena);\n+                          &empty_param_substs, None, &arena, TranslateItems);\n     let bcx = init_function(&fcx, true, f.sig.output);\n \n     let args = create_datums_for_fn_args(&fcx,"}, {"sha": "71ddc2e40459c241ff48727876e23d99e7ac98b0", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "patch": "@@ -221,6 +221,12 @@ impl<T:Subst+Clone> SubstP for T {\n pub type RvalueDatum = datum::Datum<datum::Rvalue>;\n pub type LvalueDatum = datum::Datum<datum::Lvalue>;\n \n+#[deriving(Clone, Eq, PartialEq)]\n+pub enum HandleItemsFlag {\n+    IgnoreItems,\n+    TranslateItems,\n+}\n+\n // Function context.  Every LLVM function we create will have one of\n // these.\n pub struct FunctionContext<'a> {\n@@ -289,6 +295,9 @@ pub struct FunctionContext<'a> {\n \n     // Cleanup scopes.\n     pub scopes: RefCell<Vec<cleanup::CleanupScope<'a>> >,\n+\n+    // How to handle items encountered during translation of this function.\n+    pub handle_items: HandleItemsFlag,\n }\n \n impl<'a> FunctionContext<'a> {"}, {"sha": "dd8fe5e9303a56145601274cdb087f4af69652d1", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "patch": "@@ -68,7 +68,12 @@ pub fn trans_stmt<'a>(cx: &'a Block<'a>,\n                         debuginfo::create_local_var_metadata(bcx, &**local);\n                     }\n                 }\n-                ast::DeclItem(ref i) => trans_item(cx.fcx.ccx, &**i)\n+                ast::DeclItem(ref i) => {\n+                    match fcx.handle_items {\n+                        TranslateItems => trans_item(cx.fcx.ccx, &**i),\n+                        IgnoreItems => {}\n+                    }\n+                }\n             }\n         }\n         ast::StmtMac(..) => cx.tcx().sess.bug(\"unexpanded macro\")"}, {"sha": "cb46d62fca9e9f56b81fdff0e432981f16ab4cf0", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "patch": "@@ -601,7 +601,8 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n \n         let llfn = base::decl_internal_rust_fn(ccx, t, ps.as_slice());\n         base::set_llvm_fn_attrs(attrs, llfn);\n-        base::trans_fn(ccx, decl, body, llfn, &param_substs::empty(), id, []);\n+        base::trans_fn(ccx, decl, body, llfn, &param_substs::empty(), id, [],\n+                       TranslateItems);\n         llfn\n     }\n "}, {"sha": "40288a33930e5ebdb96131d92b2d24a9490bd1fd", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "patch": "@@ -468,7 +468,7 @@ fn make_generic_glue(ccx: &CrateContext,\n     let arena = TypedArena::new();\n     let empty_param_substs = param_substs::empty();\n     let fcx = new_fn_ctxt(ccx, llfn, -1, false, ty::mk_nil(),\n-                          &empty_param_substs, None, &arena);\n+                          &empty_param_substs, None, &arena, TranslateItems);\n \n     let bcx = init_function(&fcx, false, ty::mk_nil());\n "}, {"sha": "877dd647c3b20bb32eb05fd46c96585e7984ca7d", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "patch": "@@ -133,7 +133,7 @@ pub fn maybe_instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n           if unparameterized {\n               let llfn = get_item_val(ccx, mth.id);\n                 trans_fn(ccx, &*mth.pe_fn_decl(), &*mth.pe_body(), llfn,\n-                       &param_substs::empty(), mth.id, []);\n+                       &param_substs::empty(), mth.id, [], TranslateItems);\n           }\n           local_def(mth.id)\n         }"}, {"sha": "4e6250883ebf09809dc7083eaa2c750db380821d", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "patch": "@@ -75,7 +75,8 @@ pub fn trans_impl(ccx: &CrateContext,\n                      llfn,\n                      &param_substs::empty(),\n                      method.id,\n-                     []);\n+                     [],\n+                     TranslateItems);\n         } else {\n             let mut v = TransItemVisitor{ ccx: ccx };\n             visit::walk_method_helper(&mut v, &**method, ());"}, {"sha": "986d3328f2c3a7a97f8ab94660909cfd54cb9530", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "patch": "@@ -149,7 +149,8 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n               } => {\n                   let d = mk_lldecl();\n                   set_llvm_fn_attrs(i.attrs.as_slice(), d);\n-                  trans_fn(ccx, &**decl, &**body, d, &psubsts, fn_id.node, []);\n+                  trans_fn(ccx, &**decl, &**body, d, &psubsts, fn_id.node, [],\n+                           IgnoreItems);\n                   d\n               }\n               _ => {\n@@ -181,7 +182,8 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n         ast_map::NodeMethod(mth) => {\n             let d = mk_lldecl();\n             set_llvm_fn_attrs(mth.attrs.as_slice(), d);\n-            trans_fn(ccx, &*mth.pe_fn_decl(), &*mth.pe_body(), d, &psubsts, mth.id, []);\n+            trans_fn(ccx, &*mth.pe_fn_decl(), &*mth.pe_body(), d, &psubsts, mth.id, [],\n+                     IgnoreItems);\n             d\n         }\n         ast_map::NodeTraitMethod(method) => {\n@@ -190,7 +192,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n                     let d = mk_lldecl();\n                     set_llvm_fn_attrs(mth.attrs.as_slice(), d);\n                     trans_fn(ccx, &*mth.pe_fn_decl(), &*mth.pe_body(), d,\n-                             &psubsts, mth.id, []);\n+                             &psubsts, mth.id, [], IgnoreItems);\n                     d\n                 }\n                 _ => {"}, {"sha": "eb0d77da5519fbc389e4c4376adda48282ca13f3", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "patch": "@@ -312,7 +312,7 @@ impl<'a, 'b> Reflector<'a, 'b> {\n                 let empty_param_substs = param_substs::empty();\n                 let fcx = new_fn_ctxt(ccx, llfdecl, -1, false,\n                                       ty::mk_u64(), &empty_param_substs,\n-                                      None, &arena);\n+                                      None, &arena, TranslateItems);\n                 let bcx = init_function(&fcx, false, ty::mk_u64());\n \n                 // we know the return type of llfdecl is an int here, so"}, {"sha": "18ba80a712d11c4ebfe488165142feabbef0bd47", "filename": "src/test/run-make/issue-7349/Makefile", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Ftest%2Frun-make%2Fissue-7349%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Ftest%2Frun-make%2Fissue-7349%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-7349%2FMakefile?ref=f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "patch": "@@ -0,0 +1,11 @@\n+-include ../tools.mk\n+\n+# Test to make sure that inner functions within a polymorphic outer function\n+# don't get re-translated when the outer function is monomorphized.  The test\n+# code monomorphizes the outer function several times, but the magic constant\n+# `8675309` used in the inner function should appear only once in the generated\n+# IR.\n+\n+all:\n+\t$(RUSTC) foo.rs --emit=ir\n+\t[ \"$$(grep -c 8675309 \"$(TMPDIR)/foo.ll\")\" -eq \"1\" ]"}, {"sha": "775b7314841cc288a0928048d5efd134b48019c1", "filename": "src/test/run-make/issue-7349/foo.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Ftest%2Frun-make%2Fissue-7349%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97f65f7b70e455c1c3e72e620120c9f1a96d89a/src%2Ftest%2Frun-make%2Fissue-7349%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-7349%2Ffoo.rs?ref=f97f65f7b70e455c1c3e72e620120c9f1a96d89a", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn outer<T>() {\n+    #[allow(dead_code)]\n+    fn inner() -> uint {\n+        8675309\n+    }\n+}\n+\n+fn main() {\n+    outer::<int>();\n+    outer::<uint>();\n+}"}]}