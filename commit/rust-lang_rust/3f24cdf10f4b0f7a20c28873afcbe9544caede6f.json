{"sha": "3f24cdf10f4b0f7a20c28873afcbe9544caede6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMjRjZGYxMGY0YjBmN2EyMGMyODg3M2FmY2JlOTU0NGNhZWRlNmY=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2018-12-04T13:57:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-04T13:57:19Z"}, "message": "Merge pull request #3490 from phansch/extract_single_match_else_ui_test\n\nExtract single_match_else UI test", "tree": {"sha": "72d11aa2118191eb4de3676ad655b2d584935355", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72d11aa2118191eb4de3676ad655b2d584935355"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f24cdf10f4b0f7a20c28873afcbe9544caede6f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcBoe/CRBK7hj4Ov3rIwAAdHIIAEMPnw8HLmBxobAsfhVYSDUF\n4c2ypns/pnbonI2dSjX0prBXHFe+pB9ZItkADII4wbhgtjxFyGO699hRuHZPGpGG\nqi9MMXsvSpILpaCKID6yOip+NOIHkihiYpL+e4DdBcHXxb6ykDdXOsimjCE3GCia\nXYdDCoBg5qkFDNqZV9rEdEecottQVqGm9o1z4TP70M2cdqAPQM98iFuEw7IMENWE\nJ5X1nXwqlPTelweKH/69ncI+QVr0A7Ju71wRocs5SN48hFcOHbiqt6G3eYLhe6u6\nqMjzFFJvKt3pYMCVZybLgOEURDBRyGeq1D5zMhU1UG0ND4GcxqwCJARQOS8YQj0=\n=I7mH\n-----END PGP SIGNATURE-----\n", "payload": "tree 72d11aa2118191eb4de3676ad655b2d584935355\nparent 68bb900eba6e399ddb7a263b976eca0a39aa845f\nparent 3f72d4d63084b82dcced7ec0d18e60da688c857f\nauthor Philipp Krones <hello@philkrones.com> 1543931839 +0100\ncommitter GitHub <noreply@github.com> 1543931839 +0100\n\nMerge pull request #3490 from phansch/extract_single_match_else_ui_test\n\nExtract single_match_else UI test"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f24cdf10f4b0f7a20c28873afcbe9544caede6f", "html_url": "https://github.com/rust-lang/rust/commit/3f24cdf10f4b0f7a20c28873afcbe9544caede6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f24cdf10f4b0f7a20c28873afcbe9544caede6f/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68bb900eba6e399ddb7a263b976eca0a39aa845f", "url": "https://api.github.com/repos/rust-lang/rust/commits/68bb900eba6e399ddb7a263b976eca0a39aa845f", "html_url": "https://github.com/rust-lang/rust/commit/68bb900eba6e399ddb7a263b976eca0a39aa845f"}, {"sha": "3f72d4d63084b82dcced7ec0d18e60da688c857f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f72d4d63084b82dcced7ec0d18e60da688c857f", "html_url": "https://github.com/rust-lang/rust/commit/3f72d4d63084b82dcced7ec0d18e60da688c857f"}], "stats": {"total": 333, "additions": 176, "deletions": 157}, "files": [{"sha": "3ef8d5348611c8677bef6ee7a3cbab8d910e4c8a", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3f24cdf10f4b0f7a20c28873afcbe9544caede6f/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f24cdf10f4b0f7a20c28873afcbe9544caede6f/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=3f24cdf10f4b0f7a20c28873afcbe9544caede6f", "patch": "@@ -45,24 +45,37 @@ declare_clippy_lint! {\n     \"a match statement with a single nontrivial arm (i.e. where the other arm is `_ => {}`) instead of `if let`\"\n }\n \n-/// **What it does:** Checks for matches with a two arms where an `if let` will\n+/// **What it does:** Checks for matches with a two arms where an `if let else` will\n /// usually suffice.\n ///\n /// **Why is this bad?** Just readability \u2013 `if let` nests less than a `match`.\n ///\n /// **Known problems:** Personal style preferences may differ.\n ///\n /// **Example:**\n+///\n+/// Using `match`:\n+///\n /// ```rust\n /// match x {\n ///     Some(ref foo) => bar(foo),\n ///     _ => bar(other_ref),\n /// }\n /// ```\n+///\n+/// Using `if let` with `else`:\n+///\n+/// ```rust\n+/// if let Some(ref foo) = x {\n+///     bar(foo);\n+/// } else {\n+///     bar(other_ref);\n+/// }\n+/// ```\n declare_clippy_lint! {\n     pub SINGLE_MATCH_ELSE,\n     pedantic,\n-    \"a match statement with a two arms where the second arm's pattern is a wildcard instead of `if let`\"\n+    \"a match statement with a two arms where the second arm's pattern is a placeholder instead of a specific match pattern\"\n }\n \n /// **What it does:** Checks for matches where all arms match a reference,"}, {"sha": "e5b8f6f4c1cf6a489c4e2a9054bfa33989a70e07", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f24cdf10f4b0f7a20c28873afcbe9544caede6f/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f24cdf10f4b0f7a20c28873afcbe9544caede6f/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=3f24cdf10f4b0f7a20c28873afcbe9544caede6f", "patch": "@@ -14,26 +14,12 @@\n \n #![warn(clippy::all)]\n #![allow(unused, clippy::redundant_pattern_matching)]\n-#![warn(clippy::single_match_else, clippy::match_same_arms)]\n+#![warn(clippy::match_same_arms)]\n \n-enum ExprNode {\n-    ExprAddrOf,\n-    Butterflies,\n-    Unicorns,\n-}\n-\n-static NODE: ExprNode = ExprNode::Unicorns;\n \n fn dummy() {\n }\n \n-fn unwrap_addr() -> Option<&'static ExprNode> {\n-    match ExprNode::Butterflies {\n-        ExprNode::ExprAddrOf => Some(&NODE),\n-        _ => { let x = 5; None },\n-    }\n-}\n-\n fn ref_pats() {\n     {\n         let v = &Some(0);"}, {"sha": "53e61efa83a518bfbd379ac6daa5375401ea6918", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 120, "deletions": 140, "changes": 260, "blob_url": "https://github.com/rust-lang/rust/blob/3f24cdf10f4b0f7a20c28873afcbe9544caede6f/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f24cdf10f4b0f7a20c28873afcbe9544caede6f/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=3f24cdf10f4b0f7a20c28873afcbe9544caede6f", "patch": "@@ -1,302 +1,282 @@\n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n-  --> $DIR/matches.rs:31:5\n-   |\n-31 | /     match ExprNode::Butterflies {\n-32 | |         ExprNode::ExprAddrOf => Some(&NODE),\n-33 | |         _ => { let x = 5; None },\n-34 | |     }\n-   | |_____^ help: try this: `if let ExprNode::ExprAddrOf = ExprNode::Butterflies { Some(&NODE) } else { let x = 5; None }`\n-   |\n-   = note: `-D clippy::single-match-else` implied by `-D warnings`\n-\n error: you don't need to add `&` to all patterns\n-  --> $DIR/matches.rs:40:9\n+  --> $DIR/matches.rs:26:9\n    |\n-40 | /         match v {\n-41 | |             &Some(v) => println!(\"{:?}\", v),\n-42 | |             &None => println!(\"none\"),\n-43 | |         }\n+26 | /         match v {\n+27 | |             &Some(v) => println!(\"{:?}\", v),\n+28 | |             &None => println!(\"none\"),\n+29 | |         }\n    | |_________^\n    |\n    = note: `-D clippy::match-ref-pats` implied by `-D warnings`\n help: instead of prefixing all patterns with `&`, you can dereference the expression\n    |\n-40 |         match *v {\n-41 |             Some(v) => println!(\"{:?}\", v),\n-42 |             None => println!(\"none\"),\n+26 |         match *v {\n+27 |             Some(v) => println!(\"{:?}\", v),\n+28 |             None => println!(\"none\"),\n    |\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n-  --> $DIR/matches.rs:50:5\n-   |\n-50 | /     match tup {\n-51 | |         &(v, 1) => println!(\"{}\", v),\n-52 | |         _ => println!(\"none\"),\n-53 | |     }\n-   | |_____^ help: try this: `if let &(v, 1) = tup { println!(\"{}\", v) } else { println!(\"none\") }`\n-\n error: you don't need to add `&` to all patterns\n-  --> $DIR/matches.rs:50:5\n+  --> $DIR/matches.rs:36:5\n    |\n-50 | /     match tup {\n-51 | |         &(v, 1) => println!(\"{}\", v),\n-52 | |         _ => println!(\"none\"),\n-53 | |     }\n+36 | /     match tup {\n+37 | |         &(v, 1) => println!(\"{}\", v),\n+38 | |         _ => println!(\"none\"),\n+39 | |     }\n    | |_____^\n help: instead of prefixing all patterns with `&`, you can dereference the expression\n    |\n-50 |     match *tup {\n-51 |         (v, 1) => println!(\"{}\", v),\n+36 |     match *tup {\n+37 |         (v, 1) => println!(\"{}\", v),\n    |\n \n error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/matches.rs:56:5\n+  --> $DIR/matches.rs:42:5\n    |\n-56 | /     match &w {\n-57 | |         &Some(v) => println!(\"{:?}\", v),\n-58 | |         &None => println!(\"none\"),\n-59 | |     }\n+42 | /     match &w {\n+43 | |         &Some(v) => println!(\"{:?}\", v),\n+44 | |         &None => println!(\"none\"),\n+45 | |     }\n    | |_____^\n help: try\n    |\n-56 |     match w {\n-57 |         Some(v) => println!(\"{:?}\", v),\n-58 |         None => println!(\"none\"),\n+42 |     match w {\n+43 |         Some(v) => println!(\"{:?}\", v),\n+44 |         None => println!(\"none\"),\n    |\n \n error: you don't need to add `&` to all patterns\n-  --> $DIR/matches.rs:67:5\n+  --> $DIR/matches.rs:53:5\n    |\n-67 | /     if let &None = a {\n-68 | |         println!(\"none\");\n-69 | |     }\n+53 | /     if let &None = a {\n+54 | |         println!(\"none\");\n+55 | |     }\n    | |_____^\n help: instead of prefixing all patterns with `&`, you can dereference the expression\n    |\n-67 |     if let None = *a {\n+53 |     if let None = *a {\n    |            ^^^^   ^^\n \n error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/matches.rs:72:5\n+  --> $DIR/matches.rs:58:5\n    |\n-72 | /     if let &None = &b {\n-73 | |         println!(\"none\");\n-74 | |     }\n+58 | /     if let &None = &b {\n+59 | |         println!(\"none\");\n+60 | |     }\n    | |_____^\n help: try\n    |\n-72 |     if let None = b {\n+58 |     if let None = b {\n    |            ^^^^   ^\n \n error: Err(_) will match all errors, maybe not a good idea\n-  --> $DIR/matches.rs:83:9\n+  --> $DIR/matches.rs:69:9\n    |\n-83 |         Err(_) => panic!(\"err\")\n+69 |         Err(_) => panic!(\"err\")\n    |         ^^^^^^\n    |\n    = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n    = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:82:18\n+  --> $DIR/matches.rs:68:18\n    |\n-82 |         Ok(_) => println!(\"ok\"),\n+68 |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::match-same-arms` implied by `-D warnings`\n note: same as this\n-  --> $DIR/matches.rs:81:18\n+  --> $DIR/matches.rs:67:18\n    |\n-81 |         Ok(3) => println!(\"ok\"),\n+67 |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:81:18\n+  --> $DIR/matches.rs:67:18\n    |\n-81 |         Ok(3) => println!(\"ok\"),\n+67 |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n-  --> $DIR/matches.rs:89:9\n+  --> $DIR/matches.rs:75:9\n    |\n-89 |         Err(_) => {panic!()}\n+75 |         Err(_) => {panic!()}\n    |         ^^^^^^\n    |\n    = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:88:18\n+  --> $DIR/matches.rs:74:18\n    |\n-88 |         Ok(_) => println!(\"ok\"),\n+74 |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:87:18\n+  --> $DIR/matches.rs:73:18\n    |\n-87 |         Ok(3) => println!(\"ok\"),\n+73 |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:87:18\n+  --> $DIR/matches.rs:73:18\n    |\n-87 |         Ok(3) => println!(\"ok\"),\n+73 |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n-  --> $DIR/matches.rs:95:9\n+  --> $DIR/matches.rs:81:9\n    |\n-95 |         Err(_) => {panic!();}\n+81 |         Err(_) => {panic!();}\n    |         ^^^^^^\n    |\n    = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:94:18\n+  --> $DIR/matches.rs:80:18\n    |\n-94 |         Ok(_) => println!(\"ok\"),\n+80 |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:93:18\n+  --> $DIR/matches.rs:79:18\n    |\n-93 |         Ok(3) => println!(\"ok\"),\n+79 |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:93:18\n+  --> $DIR/matches.rs:79:18\n    |\n-93 |         Ok(3) => println!(\"ok\"),\n+79 |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:101:18\n-    |\n-101 |         Ok(_) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-    |\n+  --> $DIR/matches.rs:87:18\n+   |\n+87 |         Ok(_) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n+   |\n note: same as this\n-   --> $DIR/matches.rs:100:18\n-    |\n-100 |         Ok(3) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n+  --> $DIR/matches.rs:86:18\n+   |\n+86 |         Ok(3) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:100:18\n-    |\n-100 |         Ok(3) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+  --> $DIR/matches.rs:86:18\n+   |\n+86 |         Ok(3) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:108:18\n-    |\n-108 |         Ok(_) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-    |\n+  --> $DIR/matches.rs:94:18\n+   |\n+94 |         Ok(_) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n+   |\n note: same as this\n-   --> $DIR/matches.rs:107:18\n-    |\n-107 |         Ok(3) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n+  --> $DIR/matches.rs:93:18\n+   |\n+93 |         Ok(3) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:107:18\n-    |\n-107 |         Ok(3) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+  --> $DIR/matches.rs:93:18\n+   |\n+93 |         Ok(3) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:114:18\n+   --> $DIR/matches.rs:100:18\n     |\n-114 |         Ok(_) => println!(\"ok\"),\n+100 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:113:18\n+   --> $DIR/matches.rs:99:18\n     |\n-113 |         Ok(3) => println!(\"ok\"),\n+99  |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:113:18\n+   --> $DIR/matches.rs:99:18\n     |\n-113 |         Ok(3) => println!(\"ok\"),\n+99  |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:120:18\n+   --> $DIR/matches.rs:106:18\n     |\n-120 |         Ok(_) => println!(\"ok\"),\n+106 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:119:18\n+   --> $DIR/matches.rs:105:18\n     |\n-119 |         Ok(3) => println!(\"ok\"),\n+105 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:119:18\n+   --> $DIR/matches.rs:105:18\n     |\n-119 |         Ok(3) => println!(\"ok\"),\n+105 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:141:29\n+   --> $DIR/matches.rs:127:29\n     |\n-141 |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n+127 |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n     |                             ^^^^^^^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:140:29\n+   --> $DIR/matches.rs:126:29\n     |\n-140 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+126 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n     |                             ^^^^^^^^^^^^^^^^^^^^\n note: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n-   --> $DIR/matches.rs:140:29\n+   --> $DIR/matches.rs:126:29\n     |\n-140 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+126 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n     |                             ^^^^^^^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:156:18\n+   --> $DIR/matches.rs:142:18\n     |\n-156 |         Ok(_) => println!(\"ok\"),\n+142 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:155:18\n+   --> $DIR/matches.rs:141:18\n     |\n-155 |         Ok(3) => println!(\"ok\"),\n+141 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:155:18\n+   --> $DIR/matches.rs:141:18\n     |\n-155 |         Ok(3) => println!(\"ok\"),\n+141 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: use as_ref() instead\n-   --> $DIR/matches.rs:163:33\n+   --> $DIR/matches.rs:149:33\n     |\n-163 |       let borrowed: Option<&()> = match owned {\n+149 |       let borrowed: Option<&()> = match owned {\n     |  _________________________________^\n-164 | |         None => None,\n-165 | |         Some(ref v) => Some(v),\n-166 | |     };\n+150 | |         None => None,\n+151 | |         Some(ref v) => Some(v),\n+152 | |     };\n     | |_____^ help: try this: `owned.as_ref()`\n     |\n     = note: `-D clippy::match-as-ref` implied by `-D warnings`\n \n error: use as_mut() instead\n-   --> $DIR/matches.rs:169:39\n+   --> $DIR/matches.rs:155:39\n     |\n-169 |       let borrow_mut: Option<&mut ()> = match mut_owned {\n+155 |       let borrow_mut: Option<&mut ()> = match mut_owned {\n     |  _______________________________________^\n-170 | |         None => None,\n-171 | |         Some(ref mut v) => Some(v),\n-172 | |     };\n+156 | |         None => None,\n+157 | |         Some(ref mut v) => Some(v),\n+158 | |     };\n     | |_____^ help: try this: `mut_owned.as_mut()`\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 19 previous errors\n "}, {"sha": "a7c28c578a4c00b05ce3e9bf609a4212d44c141f", "filename": "tests/ui/single_match_else.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3f24cdf10f4b0f7a20c28873afcbe9544caede6f/tests%2Fui%2Fsingle_match_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f24cdf10f4b0f7a20c28873afcbe9544caede6f/tests%2Fui%2Fsingle_match_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match_else.rs?ref=3f24cdf10f4b0f7a20c28873afcbe9544caede6f", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![warn(clippy::single_match_else)]\n+\n+enum ExprNode {\n+    ExprAddrOf,\n+    Butterflies,\n+    Unicorns,\n+}\n+\n+static NODE: ExprNode = ExprNode::Unicorns;\n+\n+fn unwrap_addr() -> Option<&'static ExprNode> {\n+    match ExprNode::Butterflies {\n+        ExprNode::ExprAddrOf => Some(&NODE),\n+        _ => { let x = 5; None },\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0b488b2fcf4fba81630935ee15560684e2038d0a", "filename": "tests/ui/single_match_else.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3f24cdf10f4b0f7a20c28873afcbe9544caede6f/tests%2Fui%2Fsingle_match_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f24cdf10f4b0f7a20c28873afcbe9544caede6f/tests%2Fui%2Fsingle_match_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match_else.stderr?ref=3f24cdf10f4b0f7a20c28873afcbe9544caede6f", "patch": "@@ -0,0 +1,13 @@\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match_else.rs:21:5\n+   |\n+21 | /     match ExprNode::Butterflies {\n+22 | |         ExprNode::ExprAddrOf => Some(&NODE),\n+23 | |         _ => { let x = 5; None },\n+24 | |     }\n+   | |_____^ help: try this: `if let ExprNode::ExprAddrOf = ExprNode::Butterflies { Some(&NODE) } else { let x = 5; None }`\n+   |\n+   = note: `-D clippy::single-match-else` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}