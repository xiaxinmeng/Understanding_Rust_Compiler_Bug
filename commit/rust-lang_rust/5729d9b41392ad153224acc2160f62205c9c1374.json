{"sha": "5729d9b41392ad153224acc2160f62205c9c1374", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MjlkOWI0MTM5MmFkMTUzMjI0YWNjMjE2MGY2MjIwNWM5YzEzNzQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-04-20T06:53:37Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-04-23T03:44:24Z"}, "message": "Review changes", "tree": {"sha": "5212891cbd6388a945459c02ff738e0a8effe354", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5212891cbd6388a945459c02ff738e0a8effe354"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5729d9b41392ad153224acc2160f62205c9c1374", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5729d9b41392ad153224acc2160f62205c9c1374", "html_url": "https://github.com/rust-lang/rust/commit/5729d9b41392ad153224acc2160f62205c9c1374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5729d9b41392ad153224acc2160f62205c9c1374/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0540a59382769dcb1981f0542cd227796fc8ecf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0540a59382769dcb1981f0542cd227796fc8ecf1", "html_url": "https://github.com/rust-lang/rust/commit/0540a59382769dcb1981f0542cd227796fc8ecf1"}], "stats": {"total": 95, "additions": 44, "deletions": 51}, "files": [{"sha": "1c5f09482458a4969f6bbd50b78991789151b106", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5729d9b41392ad153224acc2160f62205c9c1374/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5729d9b41392ad153224acc2160f62205c9c1374/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5729d9b41392ad153224acc2160f62205c9c1374", "patch": "@@ -2590,30 +2590,7 @@ pub fn type_is_machine(ty: t) -> bool {\n // Is the type's representation size known at compile time?\n #[allow(dead_code)] // leaving in for DST\n pub fn type_is_sized(cx: &ctxt, ty: ty::t) -> bool {\n-    match get(ty).sty {\n-        ty_param(tp) => {\n-            assert_eq!(tp.def_id.krate, ast::LOCAL_CRATE);\n-\n-            let ty_param_defs = cx.ty_param_defs.borrow();\n-            let param_def = ty_param_defs.get(&tp.def_id.node);\n-            param_def.bounds.builtin_bounds.contains_elem(BoundSized)\n-        },\n-        ty_self(def_id) => {\n-            let trait_def = lookup_trait_def(cx, def_id);\n-            trait_def.bounds.contains_elem(BoundSized)\n-        },\n-        ty_struct(def_id, ref substs) => {\n-            let flds = lookup_struct_fields(cx, def_id);\n-            let mut tps = flds.iter().map(|f| lookup_field_type(cx, def_id, f.id, substs));\n-            !tps.any(|ty| !type_is_sized(cx, ty))\n-        }\n-        ty_tup(ref ts) => !ts.iter().any(|t| !type_is_sized(cx, *t)),\n-        ty_enum(did, ref substs) => {\n-            let variants = substd_enum_variants(cx, did, substs);\n-            !variants.iter().any(|v| v.args.iter().any(|t| !type_is_sized(cx, *t)))\n-        }\n-        _ => true\n-    }\n+    type_contents(cx, ty).is_sized(cx)\n }\n \n // Whether a type is enum like, that is an enum type with only nullary"}, {"sha": "5e05be1ac915245a0dca96577f7d12452977873b", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5729d9b41392ad153224acc2160f62205c9c1374/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5729d9b41392ad153224acc2160f62205c9c1374/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=5729d9b41392ad153224acc2160f62205c9c1374", "patch": "@@ -576,15 +576,20 @@ fn check_for_field_shadowing(tcx: &ty::ctxt,\n }\n \n fn check_fields_sized(tcx: &ty::ctxt,\n-                      struct_def: @ast::StructDef) {\n+                      struct_def: &ast::StructDef) {\n     let len = struct_def.fields.len();\n-    for i in range(0, len) {\n-        let f = struct_def.fields.get(i);\n+    if len == 0 {\n+        return;\n+    }\n+    for f in struct_def.fields.slice_to(len - 1).iter() {\n         let t = ty::node_id_to_type(tcx, f.node.id);\n-        if !ty::type_is_sized(tcx, t) && i < (len - 1) {\n+        if !ty::type_is_sized(tcx, t) {\n             match f.node.kind {\n                 ast::NamedField(ident, _) => {\n-                    tcx.sess.span_err(f.span, format!(\"type of field {} is dynamically sized\",\n+                    tcx.sess.span_err(f.span, format!(\"type `{}` is dynamically sized. \\\n+                                                       dynamically sized types may only \\\n+                                                       appear as the type of the final \\\n+                                                       field in a struct\",\n                                                       token::get_ident(ident)));\n                 }\n                 ast::UnnamedField(_) => {\n@@ -3519,16 +3524,18 @@ pub fn check_representable(tcx: &ty::ctxt,\n /// is representable, but not instantiable.\n pub fn check_instantiable(tcx: &ty::ctxt,\n                           sp: Span,\n-                          item_id: ast::NodeId) -> bool {\n+                          item_id: ast::NodeId)\n+                          -> bool {\n     let item_ty = ty::node_id_to_type(tcx, item_id);\n     if !ty::is_instantiable(tcx, item_ty) {\n         tcx.sess.span_err(sp, format!(\"this type cannot be instantiated \\\n                   without an instance of itself; \\\n                   consider using `Option<{}>`\",\n                                    ppaux::ty_to_str(tcx, item_ty)));\n-        return false\n+        false\n+    } else {\n+        true\n     }\n-    true\n }\n \n pub fn check_simd(tcx: &ty::ctxt, sp: Span, id: ast::NodeId) {\n@@ -3567,12 +3574,20 @@ pub fn check_enum_variants_sized(ccx: &CrateCtxt,\n             ast::TupleVariantKind(ref args) if args.len() > 0 => {\n                 let ctor_ty = ty::node_id_to_type(ccx.tcx, v.node.id);\n                 let arg_tys: Vec<ty::t> = ty::ty_fn_args(ctor_ty).iter().map(|a| *a).collect();\n-                for i in range(0, args.len()) {\n-                    let t = arg_tys.get(i);\n+                let len = arg_tys.len();\n+                if len == 0 {\n+                    return;\n+                }\n+                for (i, t) in arg_tys.slice_to(len - 1).iter().enumerate() {\n                     // Allow the last field in an enum to be unsized.\n-                    if !ty::type_is_sized(ccx.tcx, *t) && i < args.len() -1 {\n+                    // We want to do this so that we can support smart pointers.\n+                    // A struct value with an unsized final field is itself\n+                    // unsized and we must track this in the type system.\n+                    if !ty::type_is_sized(ccx.tcx, *t) {\n                         ccx.tcx.sess.span_err(args.get(i).ty.span,\n-                                              format!(\"type {} is dynamically sized\",\n+                                              format!(\"type `{}` is dynamically sized. \\\n+                                                       dynamically sized types may only \\\n+                                                       appear as the final type in a variant\",\n                                                       ppaux::ty_to_str(ccx.tcx, *t)));\n                     }\n                 }"}, {"sha": "9c49512d4dc0d76dc3a8c4d9d107e242b9010dbf", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5729d9b41392ad153224acc2160f62205c9c1374/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5729d9b41392ad153224acc2160f62205c9c1374/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=5729d9b41392ad153224acc2160f62205c9c1374", "patch": "@@ -1141,14 +1141,12 @@ fn ty_generics(ccx: &CrateCtxt,\n                                                  param_bounds.trait_bounds.as_slice(),\n                                                  |trait_ref| {\n                 let trait_def = ty::lookup_trait_def(tcx, trait_ref.def_id);\n-                for bound in trait_def.bounds.iter() {\n-                    if bound == ty::BoundSized {\n-                        tcx.sess.span_err(span,\n-                            format!(\"incompatible bounds on type parameter {}, \\\n-                                     bound {} does not allow unsized type\",\n-                            token::get_ident(ident),\n-                            ppaux::trait_ref_to_str(tcx, trait_ref)));\n-                    }\n+                if trait_def.bounds.contains_elem(ty::BoundSized) {\n+                    tcx.sess.span_err(span,\n+                        format!(\"incompatible bounds on type parameter {}, \\\n+                                 bound {} does not allow unsized type\",\n+                        token::get_ident(ident),\n+                        ppaux::trait_ref_to_str(tcx, &*trait_ref)));\n                 }\n                 true\n             });"}, {"sha": "f768bf22ce0ceb190d5cbbc5c7f2e6bedc8828dc", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5729d9b41392ad153224acc2160f62205c9c1374/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5729d9b41392ad153224acc2160f62205c9c1374/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5729d9b41392ad153224acc2160f62205c9c1374", "patch": "@@ -678,7 +678,8 @@ impl<'a> State<'a> {\n                 try!(self.print_ident(item.ident));\n                 try!(self.print_generics(generics));\n                 if *sized == ast::DynSize {\n-                    try!(self.word_space(\"for type\"));\n+                    try!(space(&mut self.s));\n+                    try!(word(&mut self.s, \"for type\"));\n                 }\n                 if traits.len() != 0u {\n                     try!(word(&mut self.s, \":\"));"}, {"sha": "9608b7e6b202335e34cc72f99221770ea9296919", "filename": "src/test/compile-fail/unsized5.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5729d9b41392ad153224acc2160f62205c9c1374/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5729d9b41392ad153224acc2160f62205c9c1374/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized5.rs?ref=5729d9b41392ad153224acc2160f62205c9c1374", "patch": "@@ -23,18 +23,18 @@ fn f6<type X: T>(x: &X) {\n }*/\n \n struct S1<type X> {\n-    f1: X, //~ ERROR type of field f1 is dynamically sized\n+    f1: X, //~ ERROR type `f1` is dynamically sized. dynamically sized types may only appear as the\n     f2: int,\n }\n struct S2<type X> {\n     f: int,\n-    g: X, //~ ERROR type of field g is dynamically sized\n+    g: X, //~ ERROR type `g` is dynamically sized. dynamically sized types may only appear as the ty\n     h: int,\n }\n \n enum E<type X> {\n-    V1(X, int), //~ERROR type X is dynamically sized\n-    V2{f1: X, f: int}, //~ERROR type of field f1 is dynamically sized\n+    V1(X, int), //~ERROR type `X` is dynamically sized. dynamically sized types may only appear as t\n+    V2{f1: X, f: int}, //~ERROR type `f1` is dynamically sized. dynamically sized types may only app\n }\n \n pub fn main() {"}, {"sha": "7883adad46a3791365fc6a0e417da939881ba002", "filename": "src/test/run-pass/unsized2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5729d9b41392ad153224acc2160f62205c9c1374/src%2Ftest%2Frun-pass%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5729d9b41392ad153224acc2160f62205c9c1374/src%2Ftest%2Frun-pass%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized2.rs?ref=5729d9b41392ad153224acc2160f62205c9c1374", "patch": "@@ -66,7 +66,8 @@ trait T4<X> {\n     fn m2(x: &T5<X>);\n }\n trait T5<type X> {\n-    fn m1(x: &T4<X>); // not an error (for now)\n+    // not an error (for now)\n+    fn m1(x: &T4<X>);\n     fn m2(x: &T5<X>);\n }\n \n@@ -75,7 +76,8 @@ trait T6<X: T> {\n     fn m2(x: &T5<X>);\n }\n trait T7<type X: T> {\n-    fn m1(x: &T4<X>); // not an error (for now)\n+    // not an error (for now)\n+    fn m1(x: &T4<X>);\n     fn m2(x: &T5<X>);\n }\n "}]}