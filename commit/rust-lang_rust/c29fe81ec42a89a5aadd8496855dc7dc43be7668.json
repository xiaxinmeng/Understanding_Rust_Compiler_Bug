{"sha": "c29fe81ec42a89a5aadd8496855dc7dc43be7668", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyOWZlODFlYzQyYTg5YTVhYWRkODQ5Njg1NWRjN2RjNDNiZTc2Njg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-08T08:27:32Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-15T07:22:13Z"}, "message": "move maybe_report_invalid_custom_discriminants to feature_gate", "tree": {"sha": "9755a80bcc17e06f90c1c92636ec7ed04f564bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9755a80bcc17e06f90c1c92636ec7ed04f564bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c29fe81ec42a89a5aadd8496855dc7dc43be7668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c29fe81ec42a89a5aadd8496855dc7dc43be7668", "html_url": "https://github.com/rust-lang/rust/commit/c29fe81ec42a89a5aadd8496855dc7dc43be7668", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c29fe81ec42a89a5aadd8496855dc7dc43be7668/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e369d87b015a84653343032833d65d0545fd3f26", "url": "https://api.github.com/repos/rust-lang/rust/commits/e369d87b015a84653343032833d65d0545fd3f26", "html_url": "https://github.com/rust-lang/rust/commit/e369d87b015a84653343032833d65d0545fd3f26"}], "stats": {"total": 105, "additions": 50, "deletions": 55}, "files": [{"sha": "2f6d98213e5b64107a573b2f6d400d5a01fc080c", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c29fe81ec42a89a5aadd8496855dc7dc43be7668/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29fe81ec42a89a5aadd8496855dc7dc43be7668/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=c29fe81ec42a89a5aadd8496855dc7dc43be7668", "patch": "@@ -5,14 +5,13 @@ use super::builtin_attrs::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n \n use crate::ast::{\n     self, AssocTyConstraint, AssocTyConstraintKind, NodeId, GenericParam, GenericParamKind,\n-    PatKind, RangeEnd,\n+    PatKind, RangeEnd, VariantData,\n };\n use crate::attr::{self, check_builtin_attribute};\n use crate::source_map::Spanned;\n use crate::edition::{ALL_EDITIONS, Edition};\n use crate::visit::{self, FnKind, Visitor};\n use crate::parse::{token, ParseSess};\n-use crate::parse::parser::Parser;\n use crate::symbol::{Symbol, sym};\n use crate::tokenstream::TokenTree;\n \n@@ -246,6 +245,51 @@ impl<'a> PostExpansionVisitor<'a> {\n             Abi::System => {}\n         }\n     }\n+\n+    fn maybe_report_invalid_custom_discriminants(&self, variants: &[ast::Variant]) {\n+        let has_fields = variants.iter().any(|variant| match variant.data {\n+            VariantData::Tuple(..) | VariantData::Struct(..) => true,\n+            VariantData::Unit(..) => false,\n+        });\n+\n+        let discriminant_spans = variants.iter().filter(|variant| match variant.data {\n+            VariantData::Tuple(..) | VariantData::Struct(..) => false,\n+            VariantData::Unit(..) => true,\n+        })\n+        .filter_map(|variant| variant.disr_expr.as_ref().map(|c| c.value.span))\n+        .collect::<Vec<_>>();\n+\n+        if !discriminant_spans.is_empty() && has_fields {\n+            let mut err = feature_err(\n+                self.parse_sess,\n+                sym::arbitrary_enum_discriminant,\n+                discriminant_spans.clone(),\n+                crate::feature_gate::GateIssue::Language,\n+                \"custom discriminant values are not allowed in enums with tuple or struct variants\",\n+            );\n+            for sp in discriminant_spans {\n+                err.span_label(sp, \"disallowed custom discriminant\");\n+            }\n+            for variant in variants.iter() {\n+                match &variant.data {\n+                    VariantData::Struct(..) => {\n+                        err.span_label(\n+                            variant.span,\n+                            \"struct variant defined here\",\n+                        );\n+                    }\n+                    VariantData::Tuple(..) => {\n+                        err.span_label(\n+                            variant.span,\n+                            \"tuple variant defined here\",\n+                        );\n+                    }\n+                    VariantData::Unit(..) => {}\n+                }\n+            }\n+            err.emit();\n+        }\n+    }\n }\n \n impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n@@ -353,7 +397,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n                 let has_feature = self.features.arbitrary_enum_discriminant;\n                 if !has_feature && !i.span.allows_unstable(sym::arbitrary_enum_discriminant) {\n-                    Parser::maybe_report_invalid_custom_discriminants(self.parse_sess, &variants);\n+                    self.maybe_report_invalid_custom_discriminants(&variants);\n                 }\n             }\n "}, {"sha": "943838d9dda76b9fdfe2a8b0bdd281f9ea5e47f8", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 52, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c29fe81ec42a89a5aadd8496855dc7dc43be7668/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29fe81ec42a89a5aadd8496855dc7dc43be7668/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=c29fe81ec42a89a5aadd8496855dc7dc43be7668", "patch": "@@ -1,9 +1,8 @@\n use crate::ast::{\n     self, Param, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, ItemKind,\n-    Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind, VariantData,\n+    Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind,\n };\n-use crate::feature_gate::feature_err;\n-use crate::parse::{SeqSep, PResult, Parser, ParseSess};\n+use crate::parse::{SeqSep, PResult, Parser};\n use crate::parse::parser::{BlockMode, PathStyle, SemiColonMode, TokenType, TokenExpectType};\n use crate::parse::token::{self, TokenKind};\n use crate::print::pprust;\n@@ -715,55 +714,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    crate fn maybe_report_invalid_custom_discriminants(\n-        sess: &ParseSess,\n-        variants: &[ast::Variant],\n-    ) {\n-        let has_fields = variants.iter().any(|variant| match variant.data {\n-            VariantData::Tuple(..) | VariantData::Struct(..) => true,\n-            VariantData::Unit(..) => false,\n-        });\n-\n-        let discriminant_spans = variants.iter().filter(|variant| match variant.data {\n-            VariantData::Tuple(..) | VariantData::Struct(..) => false,\n-            VariantData::Unit(..) => true,\n-        })\n-        .filter_map(|variant| variant.disr_expr.as_ref().map(|c| c.value.span))\n-        .collect::<Vec<_>>();\n-\n-        if !discriminant_spans.is_empty() && has_fields {\n-            let mut err = feature_err(\n-                sess,\n-                sym::arbitrary_enum_discriminant,\n-                discriminant_spans.clone(),\n-                crate::feature_gate::GateIssue::Language,\n-                \"custom discriminant values are not allowed in enums with tuple or struct variants\",\n-            );\n-            for sp in discriminant_spans {\n-                err.span_label(sp, \"disallowed custom discriminant\");\n-            }\n-            for variant in variants.iter() {\n-                match &variant.data {\n-                    VariantData::Struct(..) => {\n-                        err.span_label(\n-                            variant.span,\n-                            \"struct variant defined here\",\n-                        );\n-                    }\n-                    VariantData::Tuple(..) => {\n-                        err.span_label(\n-                            variant.span,\n-                            \"tuple variant defined here\",\n-                        );\n-                    }\n-                    VariantData::Unit(..) => {}\n-                }\n-            }\n-            err.emit();\n-        }\n-    }\n-\n-    crate fn maybe_recover_from_bad_type_plus(\n+    pub(super) fn maybe_recover_from_bad_type_plus(\n         &mut self,\n         allow_plus: bool,\n         ty: &Ty,"}]}