{"sha": "c8fc4c106cfb7594dedf3372e33959e9b859c228", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZmM0YzEwNmNmYjc1OTRkZWRmMzM3MmUzMzk1OWU5Yjg1OWMyMjg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T10:27:43Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T10:50:44Z"}, "message": "extract parse_pat_{tuple_}struct + recover_one_fewer_dotdot", "tree": {"sha": "96b75cbeb5fecb2f8bc522e1ca0abd0293b589ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96b75cbeb5fecb2f8bc522e1ca0abd0293b589ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8fc4c106cfb7594dedf3372e33959e9b859c228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8fc4c106cfb7594dedf3372e33959e9b859c228", "html_url": "https://github.com/rust-lang/rust/commit/c8fc4c106cfb7594dedf3372e33959e9b859c228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8fc4c106cfb7594dedf3372e33959e9b859c228/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddf734deb2c48247e06603262145aec3eedbb315", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf734deb2c48247e06603262145aec3eedbb315", "html_url": "https://github.com/rust-lang/rust/commit/ddf734deb2c48247e06603262145aec3eedbb315"}], "stats": {"total": 90, "additions": 51, "deletions": 39}, "files": [{"sha": "53f4d0998c3e1b7df6f3e2a28ecd573c006de91b", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 51, "deletions": 39, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/c8fc4c106cfb7594dedf3372e33959e9b859c228/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8fc4c106cfb7594dedf3372e33959e9b859c228/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=c8fc4c106cfb7594dedf3372e33959e9b859c228", "patch": "@@ -169,34 +169,8 @@ impl<'a> Parser<'a> {\n                     token::DotDotDot | token::DotDotEq | token::DotDot => {\n                         self.parse_pat_range_starting_with_path(lo, qself, path)?\n                     }\n-                    token::OpenDelim(token::Brace) => {\n-                        if qself.is_some() {\n-                            let msg = \"unexpected `{` after qualified path\";\n-                            let mut err = self.fatal(msg);\n-                            err.span_label(self.token.span, msg);\n-                            return Err(err);\n-                        }\n-                        // Parse struct pattern\n-                        self.bump();\n-                        let (fields, etc) = self.parse_pat_fields().unwrap_or_else(|mut e| {\n-                            e.emit();\n-                            self.recover_stmt();\n-                            (vec![], true)\n-                        });\n-                        self.bump();\n-                        PatKind::Struct(path, fields, etc)\n-                    }\n-                    token::OpenDelim(token::Paren) => {\n-                        if qself.is_some() {\n-                            let msg = \"unexpected `(` after qualified path\";\n-                            let mut err = self.fatal(msg);\n-                            err.span_label(self.token.span, msg);\n-                            return Err(err);\n-                        }\n-                        // Parse tuple struct or enum pattern\n-                        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat(None))?;\n-                        PatKind::TupleStruct(path, fields)\n-                    }\n+                    token::OpenDelim(token::Brace) => self.parse_pat_struct(qself, path)?,\n+                    token::OpenDelim(token::Paren) => self.parse_pat_tuple_struct(qself, path)?,\n                     _ => PatKind::Path(qself, path),\n                 }\n             } else {\n@@ -481,6 +455,37 @@ impl<'a> Parser<'a> {\n         Ok(PatKind::Ident(binding_mode, ident, sub))\n     }\n \n+    /// Parse a struct (\"record\") pattern (e.g. `Foo { ... }` or `Foo::Bar { ... }`).\n+    fn parse_pat_struct(&mut self, qself: Option<QSelf>, path: Path) -> PResult<'a, PatKind> {\n+        if qself.is_some() {\n+            let msg = \"unexpected `{` after qualified path\";\n+            let mut err = self.fatal(msg);\n+            err.span_label(self.token.span, msg);\n+            return Err(err);\n+        }\n+\n+        self.bump();\n+        let (fields, etc) = self.parse_pat_fields().unwrap_or_else(|mut e| {\n+            e.emit();\n+            self.recover_stmt();\n+            (vec![], true)\n+        });\n+        self.bump();\n+        Ok(PatKind::Struct(path, fields, etc))\n+    }\n+\n+    /// Parse tuple struct or tuple variant pattern (e.g. `Foo(...)` or `Foo::Bar(...)`).\n+    fn parse_pat_tuple_struct(&mut self, qself: Option<QSelf>, path: Path) -> PResult<'a, PatKind> {\n+        if qself.is_some() {\n+            let msg = \"unexpected `(` after qualified path\";\n+            let mut err = self.fatal(msg);\n+            err.span_label(self.token.span, msg);\n+            return Err(err);\n+        }\n+        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat(None))?;\n+        Ok(PatKind::TupleStruct(path, fields))\n+    }\n+\n     /// Parses the fields of a struct-like pattern.\n     fn parse_pat_fields(&mut self) -> PResult<'a, (Vec<Spanned<FieldPat>>, bool)> {\n         let mut fields = Vec::new();\n@@ -515,17 +520,7 @@ impl<'a> Parser<'a> {\n                 etc = true;\n                 let mut etc_sp = self.token.span;\n \n-                if self.token == token::DotDotDot { // Issue #46718\n-                    // Accept `...` as if it were `..` to avoid further errors\n-                    self.struct_span_err(self.token.span, \"expected field pattern, found `...`\")\n-                        .span_suggestion(\n-                            self.token.span,\n-                            \"to omit remaining fields, use one fewer `.`\",\n-                            \"..\".to_owned(),\n-                            Applicability::MachineApplicable\n-                        )\n-                        .emit();\n-                }\n+                self.recover_one_fewer_dotdot();\n                 self.bump();  // `..` || `...`\n \n                 if self.token == token::CloseDelim(token::Brace) {\n@@ -607,6 +602,23 @@ impl<'a> Parser<'a> {\n         return Ok((fields, etc));\n     }\n \n+    /// Recover on `...` as if it were `..` to avoid further errors.\n+    /// See issue #46718.\n+    fn recover_one_fewer_dotdot(&self) {\n+        if self.token != token::DotDotDot {\n+            return;\n+        }\n+\n+        self.struct_span_err(self.token.span, \"expected field pattern, found `...`\")\n+            .span_suggestion(\n+                self.token.span,\n+                \"to omit remaining fields, use one fewer `.`\",\n+                \"..\".to_owned(),\n+                Applicability::MachineApplicable\n+            )\n+            .emit();\n+    }\n+\n     fn parse_pat_field(\n         &mut self,\n         lo: Span,"}]}