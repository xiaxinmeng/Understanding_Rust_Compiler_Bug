{"sha": "941d9159420123d4a439ff7052f4c08ce33581be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MWQ5MTU5NDIwMTIzZDRhNDM5ZmY3MDUyZjRjMDhjZTMzNTgxYmU=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-26T23:56:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-26T23:56:05Z"}, "message": "Rollup merge of #66128 - emilio:new-zeroed, r=SimonSapin\n\nalloc: Add new_zeroed() versions like new_uninit().\n\nMaybeUninit has both uninit() and zeroed(), it seems reasonable to have the same\nsurface on Box/Rc/Arc.\n\nNeeds tests.\n\ncc #63291", "tree": {"sha": "d320c81f9aba2ba5d0dfa341ce40302bb98eb3b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d320c81f9aba2ba5d0dfa341ce40302bb98eb3b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/941d9159420123d4a439ff7052f4c08ce33581be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd3buVCRBK7hj4Ov3rIwAAdHIIAC9/Ym2WaZ+ltu+TR4uzHA5A\nEim7QgOzymtZxTW1l2rCFg/hOxWY9464RuWHnR9jSmY6TVn/Wfkq1FoKzI80/f3q\n9IfardvMVvmAbSa/U79uHBrQz59tWUfHhk50v/u9OhWQO8Qr9M2YLJxk/eiHrfW8\nl8QQCQcwPua2sQux/Dnw9V3c2gNH2hAlfU7SFYUIAW0le3ubiNfebHMiq8VxeMzM\nU4dBbTVGgOnIzUpXPXiiZnLm6CuPuy7cIDgm1tSRH2G0QZprTUmXC/311Bp6iF+9\ngXDWwYwCxD+8Lt6v66dmMLUqfTIkQ+fALPt2fnYglBBIbnu3vgZvM4pBYPbSNAk=\n=N0cJ\n-----END PGP SIGNATURE-----\n", "payload": "tree d320c81f9aba2ba5d0dfa341ce40302bb98eb3b9\nparent 797fd92628842c1f5face9fb93b0fe4f1f9d297f\nparent b12e142bc5a6f6312ce2fd3305f449d03410a37a\nauthor Tyler Mandry <tmandry@gmail.com> 1574812565 -0600\ncommitter GitHub <noreply@github.com> 1574812565 -0600\n\nRollup merge of #66128 - emilio:new-zeroed, r=SimonSapin\n\nalloc: Add new_zeroed() versions like new_uninit().\n\nMaybeUninit has both uninit() and zeroed(), it seems reasonable to have the same\nsurface on Box/Rc/Arc.\n\nNeeds tests.\n\ncc #63291\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/941d9159420123d4a439ff7052f4c08ce33581be", "html_url": "https://github.com/rust-lang/rust/commit/941d9159420123d4a439ff7052f4c08ce33581be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/941d9159420123d4a439ff7052f4c08ce33581be/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "797fd92628842c1f5face9fb93b0fe4f1f9d297f", "url": "https://api.github.com/repos/rust-lang/rust/commits/797fd92628842c1f5face9fb93b0fe4f1f9d297f", "html_url": "https://github.com/rust-lang/rust/commit/797fd92628842c1f5face9fb93b0fe4f1f9d297f"}, {"sha": "b12e142bc5a6f6312ce2fd3305f449d03410a37a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b12e142bc5a6f6312ce2fd3305f449d03410a37a", "html_url": "https://github.com/rust-lang/rust/commit/b12e142bc5a6f6312ce2fd3305f449d03410a37a"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "51ad3a04e87fe6b7791ce14af0ff204f094b864b", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/941d9159420123d4a439ff7052f4c08ce33581be/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/941d9159420123d4a439ff7052f4c08ce33581be/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=941d9159420123d4a439ff7052f4c08ce33581be", "patch": "@@ -152,6 +152,33 @@ impl<T> Box<T> {\n         Box(ptr.cast().into())\n     }\n \n+    /// Constructs a new `Box` with uninitialized contents, with the memory\n+    /// being filled with `0` bytes.\n+    ///\n+    /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\n+    /// of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(new_uninit)]\n+    ///\n+    /// let zero = Box::<u32>::new_zeroed();\n+    /// let zero = unsafe { zero.assume_init() };\n+    ///\n+    /// assert_eq!(*zero, 0)\n+    /// ```\n+    ///\n+    /// [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {\n+        unsafe {\n+            let mut uninit = Self::new_uninit();\n+            ptr::write_bytes::<T>(uninit.as_mut_ptr(), 0, 1);\n+            uninit\n+        }\n+    }\n+\n     /// Constructs a new `Pin<Box<T>>`. If `T` does not implement `Unpin`, then\n     /// `x` will be pinned in memory and unable to be moved.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]"}, {"sha": "ec08965674ad7d62f223c39d4f33d8aed7194109", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/941d9159420123d4a439ff7052f4c08ce33581be/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/941d9159420123d4a439ff7052f4c08ce33581be/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=941d9159420123d4a439ff7052f4c08ce33581be", "patch": "@@ -361,6 +361,35 @@ impl<T> Rc<T> {\n         }\n     }\n \n+    /// Constructs a new `Rc` with uninitialized contents, with the memory\n+    /// being filled with `0` bytes.\n+    ///\n+    /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and\n+    /// incorrect usage of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(new_uninit)]\n+    ///\n+    /// use std::rc::Rc;\n+    ///\n+    /// let zero = Rc::<u32>::new_zeroed();\n+    /// let zero = unsafe { zero.assume_init() };\n+    ///\n+    /// assert_eq!(*zero, 0)\n+    /// ```\n+    ///\n+    /// [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn new_zeroed() -> Rc<mem::MaybeUninit<T>> {\n+        unsafe {\n+            let mut uninit = Self::new_uninit();\n+            ptr::write_bytes::<T>(Rc::get_mut_unchecked(&mut uninit).as_mut_ptr(), 0, 1);\n+            uninit\n+        }\n+    }\n+\n     /// Constructs a new `Pin<Rc<T>>`. If `T` does not implement `Unpin`, then\n     /// `value` will be pinned in memory and unable to be moved.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]"}, {"sha": "0deb321d6231f7ced4deefa306fed276b4ce4e68", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/941d9159420123d4a439ff7052f4c08ce33581be/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/941d9159420123d4a439ff7052f4c08ce33581be/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=941d9159420123d4a439ff7052f4c08ce33581be", "patch": "@@ -341,6 +341,35 @@ impl<T> Arc<T> {\n         }\n     }\n \n+    /// Constructs a new `Arc` with uninitialized contents, with the memory\n+    /// being filled with `0` bytes.\n+    ///\n+    /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\n+    /// of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(new_uninit)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let zero = Arc::<u32>::new_zeroed();\n+    /// let zero = unsafe { zero.assume_init() };\n+    ///\n+    /// assert_eq!(*zero, 0)\n+    /// ```\n+    ///\n+    /// [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn new_zeroed() -> Arc<mem::MaybeUninit<T>> {\n+        unsafe {\n+            let mut uninit = Self::new_uninit();\n+            ptr::write_bytes::<T>(Arc::get_mut_unchecked(&mut uninit).as_mut_ptr(), 0, 1);\n+            uninit\n+        }\n+    }\n+\n     /// Constructs a new `Pin<Arc<T>>`. If `T` does not implement `Unpin`, then\n     /// `data` will be pinned in memory and unable to be moved.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]"}]}