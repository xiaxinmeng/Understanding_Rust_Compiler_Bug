{"sha": "09287625626925b30ea0689ef9d051f3a8889149", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5Mjg3NjI1NjI2OTI1YjMwZWEwNjg5ZWY5ZDA1MWYzYTg4ODkxNDk=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-06T13:49:49Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-06T13:49:49Z"}, "message": "Use SnippetProvider in FmtVisitor and RewriteContext", "tree": {"sha": "43382e8e5e40c3d9a59a914e67944731c693c159", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43382e8e5e40c3d9a59a914e67944731c693c159"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09287625626925b30ea0689ef9d051f3a8889149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09287625626925b30ea0689ef9d051f3a8889149", "html_url": "https://github.com/rust-lang/rust/commit/09287625626925b30ea0689ef9d051f3a8889149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09287625626925b30ea0689ef9d051f3a8889149/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98860ab89066c69e9ebefbbe914ca30b6f198d16", "url": "https://api.github.com/repos/rust-lang/rust/commits/98860ab89066c69e9ebefbbe914ca30b6f198d16", "html_url": "https://github.com/rust-lang/rust/commit/98860ab89066c69e9ebefbbe914ca30b6f198d16"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "5e4d00518a54c3856f901ab45b58d837cfd19a2f", "filename": "src/rewrite.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09287625626925b30ea0689ef9d051f3a8889149/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09287625626925b30ea0689ef9d051f3a8889149/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=09287625626925b30ea0689ef9d051f3a8889149", "patch": "@@ -15,6 +15,7 @@ use syntax::parse::ParseSess;\n \n use config::{Config, IndentStyle};\n use shape::Shape;\n+use visitor::SnippetProvider;\n \n pub trait Rewrite {\n     /// Rewrite self into shape.\n@@ -34,11 +35,12 @@ pub struct RewriteContext<'a> {\n     pub is_if_else_block: bool,\n     // When rewriting chain, veto going multi line except the last element\n     pub force_one_line_chain: bool,\n+    pub snippet_provider: &'a SnippetProvider,\n }\n \n impl<'a> RewriteContext<'a> {\n-    pub fn snippet(&self, span: Span) -> String {\n-        self.codemap.span_to_snippet(span).unwrap()\n+    pub fn snippet(&self, span: Span) -> &str {\n+        self.snippet_provider.span_to_snippet(span).unwrap()\n     }\n \n     /// Return true if we should use block indent style for rewriting function call."}, {"sha": "1a4d55a779bbe4b1787609ac33ffacebee23a3a3", "filename": "src/visitor.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/09287625626925b30ea0689ef9d051f3a8889149/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09287625626925b30ea0689ef9d051f3a8889149/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=09287625626925b30ea0689ef9d051f3a8889149", "patch": "@@ -84,6 +84,7 @@ pub struct FmtVisitor<'a> {\n     pub block_indent: Indent,\n     pub config: &'a Config,\n     pub is_if_else_block: bool,\n+    pub snippet_provier: SnippetProvider,\n }\n \n impl<'a> FmtVisitor<'a> {\n@@ -538,25 +539,18 @@ impl<'a> FmtVisitor<'a> {\n             block_indent: Indent::empty(),\n             config: config,\n             is_if_else_block: false,\n+            snippet_provier: SnippetProvider::from_codemap(parse_session.codemap(), span),\n         }\n     }\n \n-    pub fn opt_snippet(&self, span: Span) -> Option<String> {\n-        self.codemap.span_to_snippet(span).ok()\n+    pub fn opt_snippet<'b: 'a>(&'a self, span: Span) -> Option<&'b str> {\n+        self.snippet_provier\n+            .span_to_snippet(span)\n+            .map(|s| unsafe { mem::transmute::<&'a str, &'b str>(s) })\n     }\n \n-    pub fn snippet(&self, span: Span) -> String {\n-        match self.codemap.span_to_snippet(span) {\n-            Ok(s) => s,\n-            Err(_) => {\n-                eprintln!(\n-                    \"Couldn't make snippet for span {:?}->{:?}\",\n-                    self.codemap.lookup_char_pos(span.lo()),\n-                    self.codemap.lookup_char_pos(span.hi())\n-                );\n-                \"\".to_owned()\n-            }\n-        }\n+    pub fn snippet<'b: 'a>(&'a self, span: Span) -> &'b str {\n+        self.opt_snippet(span).unwrap()\n     }\n \n     // Returns true if we should skip the following item.\n@@ -753,6 +747,7 @@ impl<'a> FmtVisitor<'a> {\n             use_block: false,\n             is_if_else_block: false,\n             force_one_line_chain: false,\n+            snippet_provider: &self.snippet_provier,\n         }\n     }\n }"}]}