{"sha": "04ccba8728be6d8c4271034d13d17e012bf99bfa", "node_id": "C_kwDOAAsO6NoAKDA0Y2NiYTg3MjhiZTZkOGM0MjcxMDM0ZDEzZDE3ZTAxMmJmOTliZmE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-16T05:12:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-16T05:12:48Z"}, "message": "Rollup merge of #96070 - Gumichocopengin8:test/btree-map, r=thomcc\n\n[test] Add test cases for untested functions for BTreeMap\n\n- add `pop_first()`, `pop_last()`, `get_key_value()` and `try_insert()` test cases", "tree": {"sha": "e96300a7a55191d8b4a3c7f9fdcba439f205b80b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e96300a7a55191d8b4a3c7f9fdcba439f205b80b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04ccba8728be6d8c4271034d13d17e012bf99bfa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiWlBQCRBK7hj4Ov3rIwAAdIUIAAZ7Oq3RoLlQ7POPi6EjXWmV\nsNI6Qd26pNats0oyWCTYxFycdfpm4W8ogG5REEAn55uIii3eQT6jeWyuSNpYRmCa\ne4Nemjwrl2T8tdAE8FD4WTa6BAb7Q+zzoNz4LT0D1hfNVr2iOxdWzCDsI5CmSQ3P\nQYrUOeRkABgdGLimWoybHUgyPm0psmuxCKv2wB4o7lB7qh1R11Gug9JRx7Uxz0as\nBuajqX5Zt5ZYV/T4aG5I1PqRg5vdpYTiIb86hwmO0z6qBpsG32Rqjjs+VTzJRbcq\nX3Pttvv34hP1DDRUFUpPCRh+gHRAbPxvjyxNgoZjWl86QRmQ/fQpKEhQ7rcY3Uc=\n=IRNL\n-----END PGP SIGNATURE-----\n", "payload": "tree e96300a7a55191d8b4a3c7f9fdcba439f205b80b\nparent ab7fb29878826cc7278785ae1be28577826f5d18\nparent 3f46ba6028ccbe1fa63d7423c77d5ccbb8abdbc4\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650085968 +0200\ncommitter GitHub <noreply@github.com> 1650085968 +0200\n\nRollup merge of #96070 - Gumichocopengin8:test/btree-map, r=thomcc\n\n[test] Add test cases for untested functions for BTreeMap\n\n- add `pop_first()`, `pop_last()`, `get_key_value()` and `try_insert()` test cases\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04ccba8728be6d8c4271034d13d17e012bf99bfa", "html_url": "https://github.com/rust-lang/rust/commit/04ccba8728be6d8c4271034d13d17e012bf99bfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04ccba8728be6d8c4271034d13d17e012bf99bfa/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab7fb29878826cc7278785ae1be28577826f5d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7fb29878826cc7278785ae1be28577826f5d18", "html_url": "https://github.com/rust-lang/rust/commit/ab7fb29878826cc7278785ae1be28577826f5d18"}, {"sha": "3f46ba6028ccbe1fa63d7423c77d5ccbb8abdbc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f46ba6028ccbe1fa63d7423c77d5ccbb8abdbc4", "html_url": "https://github.com/rust-lang/rust/commit/3f46ba6028ccbe1fa63d7423c77d5ccbb8abdbc4"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "47ba1777ae90327e6ead8404c4508a33332d7210", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/04ccba8728be6d8c4271034d13d17e012bf99bfa/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04ccba8728be6d8c4271034d13d17e012bf99bfa/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=04ccba8728be6d8c4271034d13d17e012bf99bfa", "patch": "@@ -1878,6 +1878,96 @@ fn test_first_last_entry() {\n     a.check();\n }\n \n+#[test]\n+fn test_pop_first_last() {\n+    let mut map = BTreeMap::new();\n+    assert_eq!(map.pop_first(), None);\n+    assert_eq!(map.pop_last(), None);\n+\n+    map.insert(1, 10);\n+    map.insert(2, 20);\n+    map.insert(3, 30);\n+    map.insert(4, 40);\n+\n+    assert_eq!(map.len(), 4);\n+\n+    let (key, val) = map.pop_first().unwrap();\n+    assert_eq!(key, 1);\n+    assert_eq!(val, 10);\n+    assert_eq!(map.len(), 3);\n+\n+    let (key, val) = map.pop_first().unwrap();\n+    assert_eq!(key, 2);\n+    assert_eq!(val, 20);\n+    assert_eq!(map.len(), 2);\n+    let (key, val) = map.pop_last().unwrap();\n+    assert_eq!(key, 4);\n+    assert_eq!(val, 40);\n+    assert_eq!(map.len(), 1);\n+\n+    map.insert(5, 50);\n+    map.insert(6, 60);\n+    assert_eq!(map.len(), 3);\n+\n+    let (key, val) = map.pop_first().unwrap();\n+    assert_eq!(key, 3);\n+    assert_eq!(val, 30);\n+    assert_eq!(map.len(), 2);\n+\n+    let (key, val) = map.pop_last().unwrap();\n+    assert_eq!(key, 6);\n+    assert_eq!(val, 60);\n+    assert_eq!(map.len(), 1);\n+\n+    let (key, val) = map.pop_last().unwrap();\n+    assert_eq!(key, 5);\n+    assert_eq!(val, 50);\n+    assert_eq!(map.len(), 0);\n+\n+    assert_eq!(map.pop_first(), None);\n+    assert_eq!(map.pop_last(), None);\n+\n+    map.insert(7, 70);\n+    map.insert(8, 80);\n+\n+    let (key, val) = map.pop_last().unwrap();\n+    assert_eq!(key, 8);\n+    assert_eq!(val, 80);\n+    assert_eq!(map.len(), 1);\n+\n+    let (key, val) = map.pop_last().unwrap();\n+    assert_eq!(key, 7);\n+    assert_eq!(val, 70);\n+    assert_eq!(map.len(), 0);\n+\n+    assert_eq!(map.pop_first(), None);\n+    assert_eq!(map.pop_last(), None);\n+}\n+\n+#[test]\n+fn test_get_key_value() {\n+    let mut map = BTreeMap::new();\n+\n+    assert!(map.is_empty());\n+    assert_eq!(map.get_key_value(&1), None);\n+    assert_eq!(map.get_key_value(&2), None);\n+\n+    map.insert(1, 10);\n+    map.insert(2, 20);\n+    map.insert(3, 30);\n+\n+    assert_eq!(map.len(), 3);\n+    assert_eq!(map.get_key_value(&1), Some((&1, &10)));\n+    assert_eq!(map.get_key_value(&3), Some((&3, &30)));\n+    assert_eq!(map.get_key_value(&4), None);\n+\n+    map.remove(&3);\n+\n+    assert_eq!(map.len(), 2);\n+    assert_eq!(map.get_key_value(&3), None);\n+    assert_eq!(map.get_key_value(&2), Some((&2, &20)));\n+}\n+\n #[test]\n fn test_insert_into_full_height_0() {\n     let size = node::CAPACITY;\n@@ -1904,6 +1994,21 @@ fn test_insert_into_full_height_1() {\n     }\n }\n \n+#[test]\n+fn test_try_insert() {\n+    let mut map = BTreeMap::new();\n+\n+    assert!(map.is_empty());\n+\n+    assert_eq!(map.try_insert(1, 10).unwrap(), &10);\n+    assert_eq!(map.try_insert(2, 20).unwrap(), &20);\n+\n+    let err = map.try_insert(2, 200).unwrap_err();\n+    assert_eq!(err.entry.key(), &2);\n+    assert_eq!(err.entry.get(), &20);\n+    assert_eq!(err.value, 200);\n+}\n+\n macro_rules! create_append_test {\n     ($name:ident, $len:expr) => {\n         #[test]"}]}