{"sha": "9e4052cc2ee12751ba94909ff479bd03df141ac4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNDA1MmNjMmVlMTI3NTFiYTk0OTA5ZmY0NzliZDAzZGYxNDFhYzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T11:56:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T11:56:08Z"}, "message": "Test utils", "tree": {"sha": "2e7c3a063369c5151fd851910c997e5d1020a164", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e7c3a063369c5151fd851910c997e5d1020a164"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e4052cc2ee12751ba94909ff479bd03df141ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4052cc2ee12751ba94909ff479bd03df141ac4", "html_url": "https://github.com/rust-lang/rust/commit/9e4052cc2ee12751ba94909ff479bd03df141ac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e4052cc2ee12751ba94909ff479bd03df141ac4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3", "html_url": "https://github.com/rust-lang/rust/commit/18f9e50b2d1aaf91992be9fd2f2a7e1866a943d3"}], "stats": {"total": 213, "additions": 131, "deletions": 82}, "files": [{"sha": "043f97752791a8b83b960c472e9d90300b1a36fe", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e4052cc2ee12751ba94909ff479bd03df141ac4/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9e4052cc2ee12751ba94909ff479bd03df141ac4/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=9e4052cc2ee12751ba94909ff479bd03df141ac4", "patch": "@@ -12,4 +12,4 @@ file = \"1.1.1\"\n ron = \"0.1.5\"\n \n [dev-dependencies]\n-difference = \"1.0.0\"\n+testutils = { path = \"./tests/testutils\" }\n\\ No newline at end of file"}, {"sha": "e1f717714a206181353059d3142bcfabc90f0af9", "filename": "src/parser/event_parser/grammar.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9e4052cc2ee12751ba94909ff479bd03df141ac4/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4052cc2ee12751ba94909ff479bd03df141ac4/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar.rs?ref=9e4052cc2ee12751ba94909ff479bd03df141ac4", "patch": "@@ -8,7 +8,12 @@ pub fn file(p: &mut Parser) {\n     node(p, FILE, |p| {\n         shebang(p);\n         inner_attributes(p);\n-        many(p, |p| skip_to_first(p, item_first, item));\n+        many(p, |p| {\n+            skip_to_first(\n+                p, item_first, item,\n+                \"expected item\",\n+            )\n+        });\n     })\n }\n \n@@ -84,19 +89,34 @@ fn comma_list<F: Fn(&mut Parser) -> bool>(p: &mut Parser, f: F) {\n }\n \n \n-fn skip_to_first<C, F>(p: &mut Parser, cond: C, f: F) -> bool\n+fn skip_to_first<C, F>(p: &mut Parser, cond: C, f: F, message: &str) -> bool\n where\n     C: Fn(&Parser) -> bool,\n     F: FnOnce(&mut Parser),\n {\n+    let mut skipped = false;\n     loop {\n         if cond(p) {\n+            if skipped {\n+                p.finish();\n+            }\n             f(p);\n             return true;\n         }\n-        if p.bump().is_none() {\n+        if p.is_eof() {\n+            if skipped {\n+                p.finish();\n+            }\n             return false;\n         }\n+        if !skipped {\n+            p.start(ERROR);\n+            p.error()\n+                .message(message)\n+                .emit();\n+        }\n+        p.bump().unwrap();\n+        skipped = true;\n     }\n }\n "}, {"sha": "37bd5b2c879785bf5935f609182f2bff984c809e", "filename": "src/tree/file_builder.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9e4052cc2ee12751ba94909ff479bd03df141ac4/src%2Ftree%2Ffile_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4052cc2ee12751ba94909ff479bd03df141ac4/src%2Ftree%2Ffile_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Ffile_builder.rs?ref=9e4052cc2ee12751ba94909ff479bd03df141ac4", "patch": "@@ -73,7 +73,9 @@ impl FileBuilder {\n     pub fn finish(self) -> File {\n         assert!(\n             self.in_progress.is_empty(),\n-            \"some nodes in FileBuilder are unfinished\"\n+            \"some nodes in FileBuilder are unfinished: {:?}\",\n+            self.in_progress.iter().map(|&(idx, _)| self.nodes[idx].kind)\n+                .collect::<Vec<_>>()\n         );\n         assert!(\n             self.pos == (self.text.len() as u32).into(),\n@@ -122,11 +124,6 @@ impl FileBuilder {\n         let idx = self.current_id();\n         &mut self.nodes[idx]\n     }\n-\n-    fn current_sibling(&mut self) -> Option<&mut NodeData> {\n-        let idx = self.in_progress.last().unwrap().1?;\n-        Some(&mut self.nodes[idx])\n-    }\n }\n \n fn fill<T>(slot: &mut Option<T>, value: T) {"}, {"sha": "98f23de1f225931091dde18b7099d8fd1b2321ef", "filename": "tests/data/parser/err/0001_item_recovery_in_file.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e4052cc2ee12751ba94909ff479bd03df141ac4/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4052cc2ee12751ba94909ff479bd03df141ac4/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.rs?ref=9e4052cc2ee12751ba94909ff479bd03df141ac4", "patch": "@@ -0,0 +1,3 @@\n+if match\n+\n+struct S {}\n\\ No newline at end of file"}, {"sha": "730367694b3f069edcde85cb8b8f27835dbe8897", "filename": "tests/data/parser/err/0001_item_recovery_in_file.txt", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e4052cc2ee12751ba94909ff479bd03df141ac4/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9e4052cc2ee12751ba94909ff479bd03df141ac4/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt?ref=9e4052cc2ee12751ba94909ff479bd03df141ac4", "patch": "@@ -0,0 +1,14 @@\n+FILE@[0; 21)\n+  ERROR@[0; 10)\n+  err: `expected item`\n+    IDENT@[0; 2)\n+    WHITESPACE@[2; 3)\n+    IDENT@[3; 8)\n+    WHITESPACE@[8; 10)\n+  STRUCT_ITEM@[10; 21)\n+    STRUCT_KW@[10; 16)\n+    WHITESPACE@[16; 17)\n+    IDENT@[17; 18)\n+    WHITESPACE@[18; 19)\n+    L_CURLY@[19; 20)\n+    R_CURLY@[20; 21)"}, {"sha": "6c7531596e4f8ed5e60fc643bfa9ad9b8ce227bf", "filename": "tests/lexer.rs", "status": "modified", "additions": 7, "deletions": 32, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9e4052cc2ee12751ba94909ff479bd03df141ac4/tests%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4052cc2ee12751ba94909ff479bd03df141ac4/tests%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flexer.rs?ref=9e4052cc2ee12751ba94909ff479bd03df141ac4", "patch": "@@ -1,56 +1,31 @@\n extern crate file;\n-#[macro_use(assert_diff)]\n-extern crate difference;\n extern crate libsyntax2;\n+extern crate testutils;\n \n-use std::path::{PathBuf, Path};\n-use std::fs::read_dir;\n+use std::path::{Path};\n use std::fmt::Write;\n \n use libsyntax2::{Token, tokenize};\n+use testutils::{assert_equal_text, collect_tests};\n \n #[test]\n fn lexer_tests() {\n-    for test_case in lexer_test_cases() {\n+    for test_case in collect_tests(&[\"lexer\"]) {\n         lexer_test_case(&test_case);\n     }\n }\n \n-fn lexer_test_dir() -> PathBuf {\n-    let dir = env!(\"CARGO_MANIFEST_DIR\");\n-    PathBuf::from(dir).join(\"tests/data/lexer\")\n-}\n-\n-fn lexer_test_cases() -> Vec<PathBuf> {\n-    let mut acc = Vec::new();\n-    let dir = lexer_test_dir();\n-    for file in read_dir(&dir).unwrap() {\n-        let file = file.unwrap();\n-        let path = file.path();\n-        if path.extension().unwrap_or_default() == \"rs\" {\n-            acc.push(path);\n-        }\n-    }\n-    acc.sort();\n-    acc\n-}\n-\n fn lexer_test_case(path: &Path) {\n     let actual = {\n         let text = file::get_text(path).unwrap();\n         let tokens = tokenize(&text);\n         dump_tokens(&tokens, &text)\n     };\n-    let expected = file::get_text(&path.with_extension(\"txt\")).unwrap();\n+    let path = path.with_extension(\"txt\");\n+    let expected = file::get_text(&path).unwrap();\n     let expected = expected.as_str();\n     let actual = actual.as_str();\n-    if expected == actual {\n-        return\n-    }\n-    if expected.trim() == actual.trim() {\n-        panic!(\"Whitespace difference!\")\n-    }\n-    assert_diff!(expected, actual, \"\\n\", 0)\n+    assert_equal_text(expected, actual, &path)\n }\n \n fn dump_tokens(tokens: &[Token], text: &str) -> String {"}, {"sha": "518852bb2fc1951a467734f3baa1eeb017c6ef96", "filename": "tests/parser.rs", "status": "modified", "additions": 8, "deletions": 40, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9e4052cc2ee12751ba94909ff479bd03df141ac4/tests%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4052cc2ee12751ba94909ff479bd03df141ac4/tests%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser.rs?ref=9e4052cc2ee12751ba94909ff479bd03df141ac4", "patch": "@@ -1,66 +1,34 @@\n extern crate file;\n-#[macro_use(assert_diff)]\n-extern crate difference;\n extern crate libsyntax2;\n+extern crate testutils;\n \n-use std::path::{PathBuf, Path};\n-use std::fs::read_dir;\n+use std::path::{Path};\n use std::fmt::Write;\n \n use libsyntax2::{tokenize, parse, Node, File};\n+use testutils::{collect_tests, assert_equal_text};\n \n #[test]\n fn parser_tests() {\n-    for test_case in parser_test_cases() {\n+    for test_case in collect_tests(&[\"parser/ok\", \"parser/err\"]) {\n         parser_test_case(&test_case);\n     }\n }\n \n-fn parser_test_dir() -> PathBuf {\n-    let dir = env!(\"CARGO_MANIFEST_DIR\");\n-    PathBuf::from(dir).join(\"tests/data/parser\")\n-}\n-\n-fn test_from_dir(dir: &Path) -> Vec<PathBuf> {\n-    let mut acc = Vec::new();\n-    for file in read_dir(&dir).unwrap() {\n-        let file = file.unwrap();\n-        let path = file.path();\n-        if path.extension().unwrap_or_default() == \"rs\" {\n-            acc.push(path);\n-        }\n-    }\n-    acc.sort();\n-    acc\n-}\n-\n-fn parser_test_cases() -> Vec<PathBuf> {\n-    let mut acc = Vec::new();\n-    acc.extend(test_from_dir(&parser_test_dir().join(\"ok\")));\n-    acc.extend(test_from_dir(&parser_test_dir().join(\"err\")));\n-    acc\n-}\n-\n fn parser_test_case(path: &Path) {\n     let actual = {\n         let text = file::get_text(path).unwrap();\n         let tokens = tokenize(&text);\n         let file = parse(text, &tokens);\n         dump_tree(&file)\n     };\n-    let expected = path.with_extension(\"txt\");\n-    let expected = file::get_text(&expected).expect(\n-        &format!(\"Can't read {}\", expected.display())\n+    let expected_path = path.with_extension(\"txt\");\n+    let expected = file::get_text(&expected_path).expect(\n+        &format!(\"Can't read {}\", expected_path.display())\n     );\n     let expected = expected.as_str();\n     let actual = actual.as_str();\n-    if expected == actual {\n-        return\n-    }\n-    if expected.trim() == actual.trim() {\n-        panic!(\"Whitespace difference! {}\", path.display())\n-    }\n-    assert_diff!(expected, actual, \"\\n\", 0)\n+    assert_equal_text(expected, actual, &expected_path);\n }\n \n fn dump_tree(file: &File) -> String {"}, {"sha": "9003822eee46e6c4cdd3b0648a3e4deae5838a30", "filename": "tests/testutils/Cargo.toml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e4052cc2ee12751ba94909ff479bd03df141ac4/tests%2Ftestutils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9e4052cc2ee12751ba94909ff479bd03df141ac4/tests%2Ftestutils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftestutils%2FCargo.toml?ref=9e4052cc2ee12751ba94909ff479bd03df141ac4", "patch": "@@ -0,0 +1,8 @@\n+[package]\n+name = \"testutils\"\n+version = \"0.1.0\"\n+authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n+\n+[dependencies]\n+file = \"1.0\"\n+difference = \"1.0.0\""}, {"sha": "9fc85cc24cb964b40b027b08c6d91cb6d8c2ec4a", "filename": "tests/testutils/src/lib.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9e4052cc2ee12751ba94909ff479bd03df141ac4/tests%2Ftestutils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4052cc2ee12751ba94909ff479bd03df141ac4/tests%2Ftestutils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftestutils%2Fsrc%2Flib.rs?ref=9e4052cc2ee12751ba94909ff479bd03df141ac4", "patch": "@@ -0,0 +1,64 @@\n+extern crate difference;\n+extern crate file;\n+\n+use std::path::{PathBuf, Path};\n+use std::fs::read_dir;\n+\n+use difference::Changeset;\n+\n+pub fn assert_equal_text(\n+    expected: &str,\n+    actual: &str,\n+    path: &Path\n+) {\n+    if expected != actual {\n+        print_difference(expected, actual, path)\n+    }\n+}\n+\n+pub fn collect_tests(paths: &[&str]) -> Vec<PathBuf> {\n+    paths.iter().flat_map(|path|  {\n+        let path = test_data_dir().join(path);\n+        test_from_dir(&path).into_iter()\n+    }).collect()\n+}\n+\n+fn test_from_dir(dir: &Path) -> Vec<PathBuf> {\n+    let mut acc = Vec::new();\n+    for file in read_dir(&dir).unwrap() {\n+        let file = file.unwrap();\n+        let path = file.path();\n+        if path.extension().unwrap_or_default() == \"rs\" {\n+            acc.push(path);\n+        }\n+    }\n+    acc.sort();\n+    acc\n+}\n+\n+fn print_difference(expected: &str, actual: &str, path: &Path) {\n+    let dir = project_dir();\n+    let path = path.strip_prefix(&dir).unwrap_or_else(|_| path);\n+    println!(\"\\nfile: {}\", path.display());\n+    if expected.trim() == actual.trim() {\n+        println!(\"whitespace difference\");\n+        println!(\"rewriting the file\");\n+        file::put_text(path, actual).unwrap();\n+    } else {\n+        let changeset = Changeset::new(actual, expected, \"\\n\");\n+        println!(\"{}\", changeset);\n+    }\n+    panic!(\"Comparison failed\")\n+}\n+\n+fn project_dir() -> PathBuf {\n+    let dir = env!(\"CARGO_MANIFEST_DIR\");\n+    PathBuf::from(dir)\n+        .parent().unwrap()\n+        .parent().unwrap()\n+        .to_owned()\n+}\n+\n+fn test_data_dir() -> PathBuf {\n+    project_dir().join(\"tests/data\")\n+}\n\\ No newline at end of file"}]}