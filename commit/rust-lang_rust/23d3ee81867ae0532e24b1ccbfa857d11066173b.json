{"sha": "23d3ee81867ae0532e24b1ccbfa857d11066173b", "node_id": "C_kwDOAAsO6NoAKDIzZDNlZTgxODY3YWUwNTMyZTI0YjFjY2JmYTg1N2QxMTA2NjE3M2I", "commit": {"author": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-01-02T23:35:16Z"}, "committer": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-01-04T00:27:03Z"}, "message": "Revert \"bootstrap: Get rid of `tail_args` in `stream_cargo`\"\n\nThis reverts commit 9dfe50440e6d48bd2fd40a4b7b3992998e55eace.\n\nFixes `x clippy`.", "tree": {"sha": "0788c6f139887db56ebc3d19cbf0eb57f209056a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0788c6f139887db56ebc3d19cbf0eb57f209056a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23d3ee81867ae0532e24b1ccbfa857d11066173b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23d3ee81867ae0532e24b1ccbfa857d11066173b", "html_url": "https://github.com/rust-lang/rust/commit/23d3ee81867ae0532e24b1ccbfa857d11066173b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23d3ee81867ae0532e24b1ccbfa857d11066173b/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312c9a37f26d1f0a98fc410109abb961e945b85e", "url": "https://api.github.com/repos/rust-lang/rust/commits/312c9a37f26d1f0a98fc410109abb961e945b85e", "html_url": "https://github.com/rust-lang/rust/commit/312c9a37f26d1f0a98fc410109abb961e945b85e"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "2771bd2264ce2b55c9a06c928097ea7da119149a", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/23d3ee81867ae0532e24b1ccbfa857d11066173b/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d3ee81867ae0532e24b1ccbfa857d11066173b/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=23d3ee81867ae0532e24b1ccbfa857d11066173b", "patch": "@@ -99,13 +99,20 @@ impl Step for Std {\n             cargo_subcommand(builder.kind),\n         );\n         std_cargo(builder, target, compiler.stage, &mut cargo);\n-        cargo.args(args(builder));\n \n         builder.info(&format!(\n             \"Checking stage{} library artifacts ({} -> {})\",\n             builder.top_stage, &compiler.host, target\n         ));\n-        run_cargo(builder, cargo, &libstd_stamp(builder, compiler, target), vec![], true, false);\n+        run_cargo(\n+            builder,\n+            cargo,\n+            args(builder),\n+            &libstd_stamp(builder, compiler, target),\n+            vec![],\n+            true,\n+            false,\n+        );\n \n         // We skip populating the sysroot in non-zero stage because that'll lead\n         // to rlib/rmeta conflicts if std gets built during this session.\n@@ -149,7 +156,6 @@ impl Step for Std {\n         for krate in builder.in_tree_crates(\"test\", Some(target)) {\n             cargo.arg(\"-p\").arg(krate.name);\n         }\n-        cargo.args(args(builder));\n \n         builder.info(&format!(\n             \"Checking stage{} library test/bench/example targets ({} -> {})\",\n@@ -158,6 +164,7 @@ impl Step for Std {\n         run_cargo(\n             builder,\n             cargo,\n+            args(builder),\n             &libstd_test_stamp(builder, compiler, target),\n             vec![],\n             true,\n@@ -226,13 +233,20 @@ impl Step for Rustc {\n         for krate in builder.in_tree_crates(\"rustc-main\", Some(target)) {\n             cargo.arg(\"-p\").arg(krate.name);\n         }\n-        cargo.args(args(builder));\n \n         builder.info(&format!(\n             \"Checking stage{} compiler artifacts ({} -> {})\",\n             builder.top_stage, &compiler.host, target\n         ));\n-        run_cargo(builder, cargo, &librustc_stamp(builder, compiler, target), vec![], true, false);\n+        run_cargo(\n+            builder,\n+            cargo,\n+            args(builder),\n+            &librustc_stamp(builder, compiler, target),\n+            vec![],\n+            true,\n+            false,\n+        );\n \n         let libdir = builder.sysroot_libdir(compiler, target);\n         let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n@@ -279,7 +293,6 @@ impl Step for CodegenBackend {\n             .arg(\"--manifest-path\")\n             .arg(builder.src.join(format!(\"compiler/rustc_codegen_{}/Cargo.toml\", backend)));\n         rustc_cargo_env(builder, &mut cargo, target);\n-        cargo.args(args(builder));\n \n         builder.info(&format!(\n             \"Checking stage{} {} artifacts ({} -> {})\",\n@@ -289,6 +302,7 @@ impl Step for CodegenBackend {\n         run_cargo(\n             builder,\n             cargo,\n+            args(builder),\n             &codegen_backend_stamp(builder, compiler, target, backend),\n             vec![],\n             true,\n@@ -345,13 +359,19 @@ impl Step for RustAnalyzer {\n             cargo.arg(\"--benches\");\n         }\n \n-        cargo.args(args(builder));\n-\n         builder.info(&format!(\n             \"Checking stage{} {} artifacts ({} -> {})\",\n             compiler.stage, \"rust-analyzer\", &compiler.host.triple, target.triple\n         ));\n-        run_cargo(builder, cargo, &stamp(builder, compiler, target), vec![], true, false);\n+        run_cargo(\n+            builder,\n+            cargo,\n+            args(builder),\n+            &stamp(builder, compiler, target),\n+            vec![],\n+            true,\n+            false,\n+        );\n \n         /// Cargo's output path in a given stage, compiled by a particular\n         /// compiler for the specified target.\n@@ -405,8 +425,6 @@ macro_rules! tool_check_step {\n                     cargo.arg(\"--all-targets\");\n                 }\n \n-                cargo.args(args(builder));\n-\n                 // Enable internal lints for clippy and rustdoc\n                 // NOTE: this doesn't enable lints for any other tools unless they explicitly add `#![warn(rustc::internal)]`\n                 // See https://github.com/rust-lang/rust/pull/80573#issuecomment-754010776\n@@ -422,6 +440,7 @@ macro_rules! tool_check_step {\n                 run_cargo(\n                     builder,\n                     cargo,\n+                    args(builder),\n                     &stamp(builder, compiler, target),\n                     vec![],\n                     true,"}, {"sha": "6b211d3ec6e890f74e67b7ed5c9960cb065b8ac4", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23d3ee81867ae0532e24b1ccbfa857d11066173b/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d3ee81867ae0532e24b1ccbfa857d11066173b/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=23d3ee81867ae0532e24b1ccbfa857d11066173b", "patch": "@@ -144,6 +144,7 @@ impl Step for Std {\n         run_cargo(\n             builder,\n             cargo,\n+            vec![],\n             &libstd_stamp(builder, compiler, target),\n             target_deps,\n             false,\n@@ -738,6 +739,7 @@ impl Step for Rustc {\n         run_cargo(\n             builder,\n             cargo,\n+            vec![],\n             &librustc_stamp(builder, compiler, target),\n             vec![],\n             false,\n@@ -998,7 +1000,7 @@ impl Step for CodegenBackend {\n             \"Building stage{} codegen backend {} ({} -> {})\",\n             compiler.stage, backend, &compiler.host, target\n         ));\n-        let files = run_cargo(builder, cargo, &tmp_stamp, vec![], false, false);\n+        let files = run_cargo(builder, cargo, vec![], &tmp_stamp, vec![], false, false);\n         if builder.config.dry_run() {\n             return;\n         }\n@@ -1422,6 +1424,7 @@ pub fn add_to_sysroot(\n pub fn run_cargo(\n     builder: &Builder<'_>,\n     cargo: Cargo,\n+    tail_args: Vec<String>,\n     stamp: &Path,\n     additional_target_deps: Vec<(PathBuf, DependencyType)>,\n     is_check: bool,\n@@ -1448,7 +1451,7 @@ pub fn run_cargo(\n     // files we need to probe for later.\n     let mut deps = Vec::new();\n     let mut toplevel = Vec::new();\n-    let ok = stream_cargo(builder, cargo, &mut |msg| {\n+    let ok = stream_cargo(builder, cargo, tail_args, &mut |msg| {\n         let (filenames, crate_types) = match msg {\n             CargoMessage::CompilerArtifact {\n                 filenames,\n@@ -1585,6 +1588,7 @@ pub fn run_cargo(\n pub fn stream_cargo(\n     builder: &Builder<'_>,\n     cargo: Cargo,\n+    tail_args: Vec<String>,\n     cb: &mut dyn FnMut(CargoMessage<'_>),\n ) -> bool {\n     let mut cargo = Command::from(cargo);\n@@ -1604,6 +1608,10 @@ pub fn stream_cargo(\n     }\n     cargo.arg(\"--message-format\").arg(message_format).stdout(Stdio::piped());\n \n+    for arg in tail_args {\n+        cargo.arg(arg);\n+    }\n+\n     builder.verbose(&format!(\"running: {:?}\", cargo));\n     let mut child = match cargo.spawn() {\n         Ok(child) => child,"}, {"sha": "24b033cc0dc5eb4f6e63104efc065a507d35a114", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3ee81867ae0532e24b1ccbfa857d11066173b/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d3ee81867ae0532e24b1ccbfa857d11066173b/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=23d3ee81867ae0532e24b1ccbfa857d11066173b", "patch": "@@ -72,7 +72,7 @@ impl Step for ToolBuild {\n \n         builder.info(&format!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target));\n         let mut duplicates = Vec::new();\n-        let is_expected = compile::stream_cargo(builder, cargo, &mut |msg| {\n+        let is_expected = compile::stream_cargo(builder, cargo, vec![], &mut |msg| {\n             // Only care about big things like the RLS/Cargo for now\n             match tool {\n                 \"rls\" | \"cargo\" | \"clippy-driver\" | \"miri\" | \"rustfmt\" => {}"}]}