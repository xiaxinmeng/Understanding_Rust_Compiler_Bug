{"sha": "7895ec2d5752c5a5dacd17d463e401d9e85fac13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4OTVlYzJkNTc1MmM1YTVkYWNkMTdkNDYzZTQwMWQ5ZTg1ZmFjMTM=", "commit": {"author": {"name": "Craig Hills", "email": "chills@gmail.com", "date": "2015-10-06T14:30:33Z"}, "committer": {"name": "Craig Hills", "email": "chills@gmail.com", "date": "2015-10-06T14:30:33Z"}, "message": "address review concerns", "tree": {"sha": "a7644b41ce36981e2859c2f44fec887e7e123d4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7644b41ce36981e2859c2f44fec887e7e123d4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7895ec2d5752c5a5dacd17d463e401d9e85fac13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7895ec2d5752c5a5dacd17d463e401d9e85fac13", "html_url": "https://github.com/rust-lang/rust/commit/7895ec2d5752c5a5dacd17d463e401d9e85fac13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7895ec2d5752c5a5dacd17d463e401d9e85fac13/comments", "author": {"login": "chills42", "id": 800409, "node_id": "MDQ6VXNlcjgwMDQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/800409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chills42", "html_url": "https://github.com/chills42", "followers_url": "https://api.github.com/users/chills42/followers", "following_url": "https://api.github.com/users/chills42/following{/other_user}", "gists_url": "https://api.github.com/users/chills42/gists{/gist_id}", "starred_url": "https://api.github.com/users/chills42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chills42/subscriptions", "organizations_url": "https://api.github.com/users/chills42/orgs", "repos_url": "https://api.github.com/users/chills42/repos", "events_url": "https://api.github.com/users/chills42/events{/privacy}", "received_events_url": "https://api.github.com/users/chills42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chills42", "id": 800409, "node_id": "MDQ6VXNlcjgwMDQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/800409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chills42", "html_url": "https://github.com/chills42", "followers_url": "https://api.github.com/users/chills42/followers", "following_url": "https://api.github.com/users/chills42/following{/other_user}", "gists_url": "https://api.github.com/users/chills42/gists{/gist_id}", "starred_url": "https://api.github.com/users/chills42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chills42/subscriptions", "organizations_url": "https://api.github.com/users/chills42/orgs", "repos_url": "https://api.github.com/users/chills42/repos", "events_url": "https://api.github.com/users/chills42/events{/privacy}", "received_events_url": "https://api.github.com/users/chills42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a78a874ebb8c3348f2e1cb7a687636ab26a85a1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a78a874ebb8c3348f2e1cb7a687636ab26a85a1c", "html_url": "https://github.com/rust-lang/rust/commit/a78a874ebb8c3348f2e1cb7a687636ab26a85a1c"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "7d4452a4c847047d9478913034bcef43148ff17b", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7895ec2d5752c5a5dacd17d463e401d9e85fac13/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/7895ec2d5752c5a5dacd17d463e401d9e85fac13/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=7895ec2d5752c5a5dacd17d463e401d9e85fac13", "patch": "@@ -1,9 +1,9 @@\n % Closures\n \n-Sometimes it is useful to wrap up a function and free variables for better\n-clarity and reuse. The _free variables_ that can be used come from the\n-enclosing scope and are \"closed over\" when used in the function. From this, we\n-get the name \"closures\" and Rust provides a really great implementation of\n+Sometimes it is useful to wrap up a function and _free variables_ for better\n+clarity and reuse. The free variables that can be used come from the\n+enclosing scope and are \u2018closed over\u2019 when used in the function. From this, we\n+get the name \u2018closures\u2019 and Rust provides a really great implementation of\n them, as we\u2019ll see.\n \n # Syntax\n@@ -46,10 +46,11 @@ assert_eq!(2, plus_one(1));\n ```\n \n But we don\u2019t have to. Why is this? Basically, it was chosen for ergonomic\n-reasons.  While specifying the full type for named functions is helpful with\n-things like documentation and type inference, types within closures are rarely\n-documented since they\u2019re anonymous, and they don\u2019t cause the kinds of\n-error-at-a-distance problems that inferring named function types can.\n+reasons. While specifying the full type for named functions is helpful with\n+things like documentation and type inference, the full type signatures of\n+closures are rarely documented since they\u2019re anonymous, and they don\u2019t cause\n+the kinds of error-at-a-distance problems that inferring named function types\n+can.\n \n The second is that the syntax is similar, but a bit different. I\u2019ve added\n spaces here for easier comparison:\n@@ -65,7 +66,7 @@ Small differences, but they\u2019re similar.\n # Closures and their environment\n \n The environment for a closure can include bindings from its enclosing scope in\n-addition to parameters and local bindings.  It looks like this:\n+addition to parameters and local bindings. It looks like this:\n \n ```rust\n let num = 5;\n@@ -454,7 +455,7 @@ autogenerated name.\n The error also points out that the return type is expected to be a reference,\n but what we are trying to return is not. Further, we cannot directly assign a\n `'static` lifetime to an object. So we'll take a different approach and return\n-a \"trait object\" by `Box`ing up the `Fn`. This _almost_ works:\n+a \u2018trait object\u2019 by `Box`ing up the `Fn`. This _almost_ works:\n \n ```rust,ignore\n fn factory() -> Box<Fn(i32) -> i32> {"}]}