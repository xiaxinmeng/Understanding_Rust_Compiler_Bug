{"sha": "3a223a917378f439fd9107e26ee7355f5f92c62d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMjIzYTkxNzM3OGY0MzlmZDkxMDdlMjZlZTczNTVmNWY5MmM2MmQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-03T17:28:20Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-09T14:50:51Z"}, "message": "Support registering attributes and attribute tools using crate-level attributes", "tree": {"sha": "973b335a5debf2e4be2791df7af0f85d666bd133", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/973b335a5debf2e4be2791df7af0f85d666bd133"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a223a917378f439fd9107e26ee7355f5f92c62d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a223a917378f439fd9107e26ee7355f5f92c62d", "html_url": "https://github.com/rust-lang/rust/commit/3a223a917378f439fd9107e26ee7355f5f92c62d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a223a917378f439fd9107e26ee7355f5f92c62d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a5027519a4a634baa6cde5b698b907d27fbe6b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5027519a4a634baa6cde5b698b907d27fbe6b3", "html_url": "https://github.com/rust-lang/rust/commit/5a5027519a4a634baa6cde5b698b907d27fbe6b3"}], "stats": {"total": 230, "additions": 210, "deletions": 20}, "files": [{"sha": "486d6dfb095092c6a1e7fada7303a5a4cf26483d", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=3a223a917378f439fd9107e26ee7355f5f92c62d", "patch": "@@ -40,6 +40,8 @@ pub enum NonMacroAttrKind {\n     Tool,\n     /// Single-segment custom attribute registered by a derive macro (`#[serde(default)]`).\n     DeriveHelper,\n+    /// Single-segment custom attribute registered with `#[register_attr]`.\n+    Registered,\n     /// Single-segment custom attribute registered by a legacy plugin (`register_attribute`).\n     LegacyPluginHelper,\n     /// Single-segment custom attribute not registered in any way (`#[my_attr]`).\n@@ -329,6 +331,7 @@ impl NonMacroAttrKind {\n             NonMacroAttrKind::Builtin => \"built-in attribute\",\n             NonMacroAttrKind::Tool => \"tool attribute\",\n             NonMacroAttrKind::DeriveHelper => \"derive helper attribute\",\n+            NonMacroAttrKind::Registered => \"explicitly registered attribute\",\n             NonMacroAttrKind::LegacyPluginHelper => \"legacy plugin helper attribute\",\n             NonMacroAttrKind::Custom => \"custom attribute\",\n         }"}, {"sha": "771519b86c151850eac8f5131971e1b23ca25df8", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=3a223a917378f439fd9107e26ee7355f5f92c62d", "patch": "@@ -19,7 +19,7 @@ use syntax_pos::hygiene::MacroKind;\n use syntax_pos::{BytePos, Span, MultiSpan};\n \n use crate::resolve_imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};\n-use crate::{path_names_to_string, KNOWN_TOOLS};\n+use crate::path_names_to_string;\n use crate::{BindingError, CrateLint, HasGenericParams, LegacyScope, Module, ModuleOrUniformRoot};\n use crate::{PathResult, ParentScope, ResolutionError, Resolver, Scope, ScopeSet, Segment};\n \n@@ -400,6 +400,14 @@ impl<'a> Resolver<'a> {\n                 Scope::Module(module) => {\n                     this.add_module_candidates(module, &mut suggestions, filter_fn);\n                 }\n+                Scope::RegisteredAttrs => {\n+                    let res = Res::NonMacroAttr(NonMacroAttrKind::Registered);\n+                    if filter_fn(res) {\n+                        suggestions.extend(this.registered_attrs.iter().map(|ident| {\n+                            TypoSuggestion::from_res(ident.name, res)\n+                        }));\n+                    }\n+                }\n                 Scope::MacroUsePrelude => {\n                     suggestions.extend(this.macro_use_prelude.iter().filter_map(|(name, binding)| {\n                         let res = binding.res();\n@@ -439,8 +447,8 @@ impl<'a> Resolver<'a> {\n                 }\n                 Scope::ToolPrelude => {\n                     let res = Res::NonMacroAttr(NonMacroAttrKind::Tool);\n-                    suggestions.extend(KNOWN_TOOLS.iter().map(|name| {\n-                        TypoSuggestion::from_res(*name, res)\n+                    suggestions.extend(this.registered_tools.iter().map(|ident| {\n+                        TypoSuggestion::from_res(ident.name, res)\n                     }));\n                 }\n                 Scope::StdLibPrelude => {"}, {"sha": "6aefacef92c11a624eb46103dbaa56e023074b90", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3a223a917378f439fd9107e26ee7355f5f92c62d", "patch": "@@ -74,8 +74,6 @@ mod check_unused;\n mod build_reduced_graph;\n mod resolve_imports;\n \n-const KNOWN_TOOLS: &[Name] = &[sym::clippy, sym::rustfmt];\n-\n enum Weak {\n     Yes,\n     No,\n@@ -102,6 +100,7 @@ enum Scope<'a> {\n     MacroRules(LegacyScope<'a>),\n     CrateRoot,\n     Module(Module<'a>),\n+    RegisteredAttrs,\n     MacroUsePrelude,\n     BuiltinAttrs,\n     LegacyPluginHelpers,\n@@ -916,6 +915,8 @@ pub struct Resolver<'a> {\n     crate_loader: CrateLoader<'a>,\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Name, SyntaxExtension>,\n+    registered_attrs: FxHashSet<Ident>,\n+    registered_tools: FxHashSet<Ident>,\n     macro_use_prelude: FxHashMap<Name, &'a NameBinding<'a>>,\n     all_macros: FxHashMap<Name, Res>,\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n@@ -1132,6 +1133,9 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n+        let (registered_attrs, registered_tools) =\n+            macros::registered_attrs_and_tools(session, &krate.attrs);\n+\n         let mut invocation_parent_scopes = FxHashMap::default();\n         invocation_parent_scopes.insert(ExpnId::root(), ParentScope::module(graph_root));\n \n@@ -1201,6 +1205,8 @@ impl<'a> Resolver<'a> {\n             crate_loader: CrateLoader::new(session, metadata_loader, crate_name),\n             macro_names: FxHashSet::default(),\n             builtin_macros: Default::default(),\n+            registered_attrs,\n+            registered_tools,\n             macro_use_prelude: FxHashMap::default(),\n             all_macros: FxHashMap::default(),\n             macro_map: FxHashMap::default(),\n@@ -1469,6 +1475,7 @@ impl<'a> Resolver<'a> {\n                 Scope::MacroRules(..) => true,\n                 Scope::CrateRoot => true,\n                 Scope::Module(..) => true,\n+                Scope::RegisteredAttrs => true,\n                 Scope::MacroUsePrelude => use_prelude || rust_2015,\n                 Scope::BuiltinAttrs => true,\n                 Scope::LegacyPluginHelpers => use_prelude || rust_2015,\n@@ -1513,11 +1520,12 @@ impl<'a> Resolver<'a> {\n                             match ns {\n                                 TypeNS => Scope::ExternPrelude,\n                                 ValueNS => Scope::StdLibPrelude,\n-                                MacroNS => Scope::MacroUsePrelude,\n+                                MacroNS => Scope::RegisteredAttrs,\n                             }\n                         }\n                     }\n                 }\n+                Scope::RegisteredAttrs => Scope::MacroUsePrelude,\n                 Scope::MacroUsePrelude => Scope::StdLibPrelude,\n                 Scope::BuiltinAttrs => Scope::LegacyPluginHelpers,\n                 Scope::LegacyPluginHelpers => break, // nowhere else to search\n@@ -1673,11 +1681,11 @@ impl<'a> Resolver<'a> {\n                 if let Some(binding) = self.extern_prelude_get(ident, !record_used) {\n                     return Some(LexicalScopeBinding::Item(binding));\n                 }\n-            }\n-            if ns == TypeNS && KNOWN_TOOLS.contains(&ident.name) {\n-                let binding = (Res::ToolMod, ty::Visibility::Public,\n-                               DUMMY_SP, ExpnId::root()).to_name_binding(self.arenas);\n-                return Some(LexicalScopeBinding::Item(binding));\n+                if let Some(ident) = self.registered_tools.get(&ident) {\n+                    let binding = (Res::ToolMod, ty::Visibility::Public,\n+                                   ident.span, ExpnId::root()).to_name_binding(self.arenas);\n+                    return Some(LexicalScopeBinding::Item(binding));\n+                }\n             }\n             if let Some(prelude) = self.prelude {\n                 if let Ok(binding) = self.resolve_ident_in_module_unadjusted("}, {"sha": "9d8d035ab701e3eb8d002116fe2f5dfd09559e26", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 60, "deletions": 9, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=3a223a917378f439fd9107e26ee7355f5f92c62d", "patch": "@@ -3,16 +3,17 @@\n \n use crate::{AmbiguityError, AmbiguityKind, AmbiguityErrorMisc, Determinacy};\n use crate::{CrateLint, Resolver, ResolutionError, Scope, ScopeSet, ParentScope, Weak};\n-use crate::{ModuleKind, NameBinding, PathResult, Segment, ToNameBinding};\n-use crate::{ModuleOrUniformRoot, KNOWN_TOOLS};\n+use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment, ToNameBinding};\n use crate::Namespace::*;\n use crate::resolve_imports::ImportResolver;\n use rustc::hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc::hir::def_id;\n use rustc::middle::stability;\n+use rustc::session::Session;\n+use rustc::util::nodemap::FxHashSet;\n use rustc::{ty, lint, span_bug};\n use syntax::ast::{self, NodeId, Ident};\n-use syntax::attr::StabilityLevel;\n+use syntax::attr::{self, StabilityLevel};\n use syntax::edition::Edition;\n use syntax::feature_gate::{emit_feature_err, is_builtin_attr_name};\n use syntax::feature_gate::GateIssue;\n@@ -93,6 +94,45 @@ fn fast_print_path(path: &ast::Path) -> Symbol {\n     }\n }\n \n+fn registered_idents(\n+    sess: &Session,\n+    attrs: &[ast::Attribute],\n+    attr_name: Symbol,\n+    descr: &str,\n+) -> FxHashSet<Ident> {\n+    let mut registered = FxHashSet::default();\n+    for attr in attr::filter_by_name(attrs, attr_name) {\n+        for nested_meta in attr.meta_item_list().unwrap_or_default() {\n+            match nested_meta.ident() {\n+                Some(ident) => if let Some(old_ident) = registered.replace(ident) {\n+                    let msg = format!(\"{} `{}` was already registered\", descr, ident);\n+                    sess.struct_span_err(ident.span, &msg)\n+                        .span_label(old_ident.span, \"already registered here\").emit();\n+                }\n+                None => {\n+                    let msg = format!(\"`{}` only accepts identifiers\", attr_name);\n+                    let span = nested_meta.span();\n+                    sess.struct_span_err(span, &msg).span_label(span, \"not an identifier\").emit();\n+                }\n+            }\n+        }\n+    }\n+    registered\n+}\n+\n+crate fn registered_attrs_and_tools(\n+    sess: &Session,\n+    attrs: &[ast::Attribute],\n+) -> (FxHashSet<Ident>, FxHashSet<Ident>) {\n+    let registered_attrs = registered_idents(sess, attrs, sym::register_attr, \"attribute\");\n+    let mut registered_tools = registered_idents(sess, attrs, sym::register_tool, \"tool\");\n+    // We implicitly add `rustfmt` and `clippy` to known tools,\n+    // but it's not an error to register them explicitly.\n+    let predefined_tools = [sym::clippy, sym::rustfmt];\n+    registered_tools.extend(predefined_tools.iter().cloned().map(Ident::with_dummy_span));\n+    (registered_attrs, registered_tools)\n+}\n+\n impl<'a> base::Resolver for Resolver<'a> {\n     fn next_node_id(&mut self) -> NodeId {\n         self.session.next_node_id()\n@@ -531,6 +571,15 @@ impl<'a> Resolver<'a> {\n                         Err((Determinacy::Determined, _)) => Err(Determinacy::Determined),\n                     }\n                 }\n+                Scope::RegisteredAttrs => match this.registered_attrs.get(&ident).cloned() {\n+                    Some(ident) => {\n+                        let binding = (Res::NonMacroAttr(NonMacroAttrKind::Registered),\n+                                       ty::Visibility::Public, ident.span, ExpnId::root())\n+                                       .to_name_binding(this.arenas);\n+                        Ok((binding, Flags::PRELUDE))\n+                    }\n+                    None => Err(Determinacy::Determined)\n+                }\n                 Scope::MacroUsePrelude => match this.macro_use_prelude.get(&ident.name).cloned() {\n                     Some(binding) => Ok((binding, Flags::PRELUDE | Flags::MISC_FROM_PRELUDE)),\n                     None => Err(Determinacy::determined(\n@@ -560,12 +609,14 @@ impl<'a> Resolver<'a> {\n                         this.graph_root.unexpanded_invocations.borrow().is_empty()\n                     )),\n                 }\n-                Scope::ToolPrelude => if KNOWN_TOOLS.contains(&ident.name) {\n-                    let binding = (Res::ToolMod, ty::Visibility::Public, DUMMY_SP, ExpnId::root())\n-                                   .to_name_binding(this.arenas);\n-                    Ok((binding, Flags::PRELUDE))\n-                } else {\n-                    Err(Determinacy::Determined)\n+                Scope::ToolPrelude => match this.registered_tools.get(&ident).cloned() {\n+                    Some(ident) => {\n+                        let binding = (Res::ToolMod,\n+                                       ty::Visibility::Public, ident.span, ExpnId::root())\n+                                       .to_name_binding(this.arenas);\n+                        Ok((binding, Flags::PRELUDE))\n+                    }\n+                    None => Err(Determinacy::Determined)\n                 }\n                 Scope::StdLibPrelude => {\n                     let mut result = Err(Determinacy::Determined);"}, {"sha": "087a754b27ee33b4f117eb7e1751a0451641bed7", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=3a223a917378f439fd9107e26ee7355f5f92c62d", "patch": "@@ -526,6 +526,12 @@ declare_features! (\n     /// Allows using the `efiapi` ABI.\n     (active, abi_efiapi, \"1.40.0\", Some(65815), None),\n \n+    /// Allows using the `#[register_attr]` attribute.\n+    (active, register_attr, \"1.41.0\", Some(29642), None),\n+\n+    /// Allows using the `#[register_attr]` attribute.\n+    (active, register_tool, \"1.41.0\", Some(44690), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "3e77b4cf4954fefd80dfef48f2250d3deed0ed4a", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=3a223a917378f439fd9107e26ee7355f5f92c62d", "patch": "@@ -329,6 +329,14 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     gated!(ffi_returns_twice, Whitelisted, template!(Word), experimental!(ffi_returns_twice)),\n     gated!(track_caller, Whitelisted, template!(Word), experimental!(track_caller)),\n+    gated!(\n+        register_attr, Whitelisted, template!(List: \"attr1, attr2, ...\"),\n+        experimental!(register_attr),\n+    ),\n+    gated!(\n+        register_tool, Whitelisted, template!(List: \"tool1, tool2, ...\"),\n+        experimental!(register_tool),\n+    ),\n \n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:"}, {"sha": "4df9530ac79e594c18fe59d3653449edb4a3dd04", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=3a223a917378f439fd9107e26ee7355f5f92c62d", "patch": "@@ -545,6 +545,8 @@ symbols! {\n         recursion_limit,\n         reexport_test_harness_main,\n         reflect,\n+        register_attr,\n+        register_tool,\n         relaxed_adts,\n         repr,\n         repr128,"}, {"sha": "84736be844ba688682e734aeed48b52b7f509cb4", "filename": "src/test/ui/attributes/register-attr-tool-fail.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.rs?ref=3a223a917378f439fd9107e26ee7355f5f92c62d", "patch": "@@ -0,0 +1,13 @@\n+#![feature(register_attr)]\n+#![feature(register_tool)]\n+\n+#![register_attr] //~ ERROR malformed `register_attr` attribute input\n+#![register_tool] //~ ERROR malformed `register_tool` attribute input\n+\n+#![register_attr(a::b)] //~ ERROR `register_attr` only accepts identifiers\n+#![register_tool(a::b)] //~ ERROR `register_tool` only accepts identifiers\n+\n+#![register_attr(attr, attr)] //~ ERROR attribute `attr` was already registered\n+#![register_tool(tool, tool)] //~ ERROR tool `tool` was already registered\n+\n+fn main() {}"}, {"sha": "77acfcd87cf75cdeaadf131592c211248c1181a2", "filename": "src/test/ui/attributes/register-attr-tool-fail.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.stderr?ref=3a223a917378f439fd9107e26ee7355f5f92c62d", "patch": "@@ -0,0 +1,42 @@\n+error: `register_attr` only accepts identifiers\n+  --> $DIR/register-attr-tool-fail.rs:7:18\n+   |\n+LL | #![register_attr(a::b)]\n+   |                  ^^^^ not an identifier\n+\n+error: attribute `attr` was already registered\n+  --> $DIR/register-attr-tool-fail.rs:10:24\n+   |\n+LL | #![register_attr(attr, attr)]\n+   |                  ----  ^^^^\n+   |                  |\n+   |                  already registered here\n+\n+error: `register_tool` only accepts identifiers\n+  --> $DIR/register-attr-tool-fail.rs:8:18\n+   |\n+LL | #![register_tool(a::b)]\n+   |                  ^^^^ not an identifier\n+\n+error: tool `tool` was already registered\n+  --> $DIR/register-attr-tool-fail.rs:11:24\n+   |\n+LL | #![register_tool(tool, tool)]\n+   |                  ----  ^^^^\n+   |                  |\n+   |                  already registered here\n+\n+error: malformed `register_attr` attribute input\n+  --> $DIR/register-attr-tool-fail.rs:4:1\n+   |\n+LL | #![register_attr]\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[register_attr(attr1, attr2, ...)]`\n+\n+error: malformed `register_tool` attribute input\n+  --> $DIR/register-attr-tool-fail.rs:5:1\n+   |\n+LL | #![register_tool]\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[register_tool(tool1, tool2, ...)]`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "ee9da74d4fb1ca2e672d8c8eae74824f5793114f", "filename": "src/test/ui/attributes/register-attr-tool.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool.rs?ref=3a223a917378f439fd9107e26ee7355f5f92c62d", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+// compile-flags: --cfg foo\n+\n+#![feature(register_attr)]\n+#![feature(register_tool)]\n+\n+#![register_attr(attr)]\n+#![register_tool(tool)]\n+#![register_tool(rustfmt, clippy)] // OK\n+#![cfg_attr(foo, register_attr(conditional_attr))]\n+#![cfg_attr(foo, register_tool(conditional_tool))]\n+\n+#[attr]\n+#[tool::attr]\n+#[rustfmt::attr]\n+#[clippy::attr]\n+#[conditional_attr]\n+#[conditional_tool::attr]\n+fn main() {}"}, {"sha": "36dce2aa7b9e0e8b0deadc066960b5c19f811ee4", "filename": "src/test/ui/feature-gates/feature-gate-register_attr.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_attr.rs?ref=3a223a917378f439fd9107e26ee7355f5f92c62d", "patch": "@@ -0,0 +1,3 @@\n+#![register_attr(attr)] //~ ERROR the `#[register_attr]` attribute is an experimental feature\n+\n+fn main() {}"}, {"sha": "b097f578bf2f33c5e449652c2cfd45ee0f15b6fc", "filename": "src/test/ui/feature-gates/feature-gate-register_attr.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_attr.stderr?ref=3a223a917378f439fd9107e26ee7355f5f92c62d", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[register_attr]` attribute is an experimental feature\n+  --> $DIR/feature-gate-register_attr.rs:1:1\n+   |\n+LL | #![register_attr(attr)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(register_attr)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e599593283b35cc783cd83102cf69265acf4f2e3", "filename": "src/test/ui/feature-gates/feature-gate-register_tool.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_tool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_tool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_tool.rs?ref=3a223a917378f439fd9107e26ee7355f5f92c62d", "patch": "@@ -0,0 +1,3 @@\n+#![register_tool(tool)] //~ ERROR the `#[register_tool]` attribute is an experimental feature\n+\n+fn main() {}"}, {"sha": "85a86d2daf8c40732264dfd32b921842e9644f27", "filename": "src/test/ui/feature-gates/feature-gate-register_tool.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_tool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a223a917378f439fd9107e26ee7355f5f92c62d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_tool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_tool.stderr?ref=3a223a917378f439fd9107e26ee7355f5f92c62d", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[register_tool]` attribute is an experimental feature\n+  --> $DIR/feature-gate-register_tool.rs:1:1\n+   |\n+LL | #![register_tool(tool)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44690\n+   = help: add `#![feature(register_tool)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}