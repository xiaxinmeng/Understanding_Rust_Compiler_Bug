{"sha": "17df5cfec316d798f5cca703093a0e4a8fb2fcc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZGY1Y2ZlYzMxNmQ3OThmNWNjYTcwMzA5M2EwZTRhOGZiMmZjYzg=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-30T04:13:31Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-30T04:13:31Z"}, "message": "Move substs stack management into main stack managment fns.", "tree": {"sha": "bcdb2c387b7a4ef6bab3341dbb410245d40ff236", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcdb2c387b7a4ef6bab3341dbb410245d40ff236"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17df5cfec316d798f5cca703093a0e4a8fb2fcc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17df5cfec316d798f5cca703093a0e4a8fb2fcc8", "html_url": "https://github.com/rust-lang/rust/commit/17df5cfec316d798f5cca703093a0e4a8fb2fcc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17df5cfec316d798f5cca703093a0e4a8fb2fcc8/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a8bb2c1c09f791a3a8a7f259933e73daeb0c28c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a8bb2c1c09f791a3a8a7f259933e73daeb0c28c", "html_url": "https://github.com/rust-lang/rust/commit/6a8bb2c1c09f791a3a8a7f259933e73daeb0c28c"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "45145e039516e4e207178a9392c1fe9a88286f81", "filename": "src/interpreter.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/17df5cfec316d798f5cca703093a0e4a8fb2fcc8/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17df5cfec316d798f5cca703093a0e4a8fb2fcc8/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=17df5cfec316d798f5cca703093a0e4a8fb2fcc8", "patch": "@@ -161,7 +161,6 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                     TerminatorTarget::Block(block) => current_block = block,\n                     TerminatorTarget::Return => {\n                         self.pop_stack_frame();\n-                        self.substs_stack.pop();\n                         continue 'outer;\n                     }\n                     TerminatorTarget::Call => continue 'outer,\n@@ -172,7 +171,11 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         Ok(())\n     }\n \n-    fn push_stack_frame(&mut self, mir: CachedMir<'a, 'tcx>, return_ptr: Option<Pointer>) {\n+    fn push_stack_frame(&mut self, mir: CachedMir<'a, 'tcx>, substs: &'tcx Substs<'tcx>,\n+        return_ptr: Option<Pointer>)\n+    {\n+        self.substs_stack.push(substs);\n+\n         let arg_tys = mir.arg_decls.iter().map(|a| a.ty);\n         let var_tys = mir.var_decls.iter().map(|v| v.ty);\n         let temp_tys = mir.temp_decls.iter().map(|t| t.ty);\n@@ -198,6 +201,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n     fn pop_stack_frame(&mut self) {\n         let _frame = self.stack.pop().expect(\"tried to pop a stack frame, but there were none\");\n         // TODO(tsion): Deallocate local variables.\n+        self.substs_stack.pop();\n     }\n \n     fn eval_terminator(&mut self, terminator: &mir::Terminator<'tcx>)\n@@ -315,8 +319,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                                 }\n \n                                 let mir = self.load_mir(def_id);\n-                                self.substs_stack.push(substs);\n-                                self.push_stack_frame(mir, return_ptr);\n+                                self.push_stack_frame(mir, substs, return_ptr);\n \n                                 for (i, (src, size)) in arg_srcs.into_iter().enumerate() {\n                                     let dest = self.frame().locals[i];\n@@ -1155,10 +1158,10 @@ pub fn interpret_start_points<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &MirMap<'tcx>)\n                     }\n                     ty::FnDiverging => None,\n                 };\n-                miri.push_stack_frame(CachedMir::Ref(mir), return_ptr);\n-                if let Err(_e) = miri.run() {\n-                    // // TODO(tsion): report error\n-                    // let err = tcx.struct_err()\n+                let substs = miri.tcx.mk_substs(Substs::empty());\n+                miri.push_stack_frame(CachedMir::Ref(mir), substs, return_ptr);\n+                if let Err(e) = miri.run() {\n+                    tcx.sess.err(&e.to_string());\n                 }\n                 tcx.sess.abort_if_errors();\n "}]}