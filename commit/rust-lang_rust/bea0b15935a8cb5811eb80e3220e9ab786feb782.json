{"sha": "bea0b15935a8cb5811eb80e3220e9ab786feb782", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYTBiMTU5MzVhOGNiNTgxMWViODBlMzIyMGU5YWI3ODZmZWI3ODI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-19T16:20:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:34Z"}, "message": "Implement drop translation and add lint for unions with drop fields\n\nFix some typeck bugs blocking drop tests", "tree": {"sha": "91d526980e25410e80e15773d15b8273208230fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91d526980e25410e80e15773d15b8273208230fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bea0b15935a8cb5811eb80e3220e9ab786feb782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bea0b15935a8cb5811eb80e3220e9ab786feb782", "html_url": "https://github.com/rust-lang/rust/commit/bea0b15935a8cb5811eb80e3220e9ab786feb782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bea0b15935a8cb5811eb80e3220e9ab786feb782/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc", "html_url": "https://github.com/rust-lang/rust/commit/e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc"}], "stats": {"total": 148, "additions": 134, "deletions": 14}, "files": [{"sha": "1702c1c0edc9a73e22893838307c3b322bece5b5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bea0b15935a8cb5811eb80e3220e9ab786feb782/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0b15935a8cb5811eb80e3220e9ab786feb782/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=bea0b15935a8cb5811eb80e3220e9ab786feb782", "patch": "@@ -1164,3 +1164,36 @@ impl LateLintPass for UnstableFeatures {\n         }\n     }\n }\n+\n+/// Lint for unions that contain fields with possibly non-trivial destructors.\n+pub struct UnionsWithDropFields;\n+\n+declare_lint! {\n+    UNIONS_WITH_DROP_FIELDS,\n+    Warn,\n+    \"use of unions that contain fields with possibly non-trivial drop code\"\n+}\n+\n+impl LintPass for UnionsWithDropFields {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(UNIONS_WITH_DROP_FIELDS)\n+    }\n+}\n+\n+impl LateLintPass for UnionsWithDropFields {\n+    fn check_item(&mut self, ctx: &LateContext, item: &hir::Item) {\n+        if let hir::ItemUnion(ref vdata, _) = item.node {\n+            let param_env = &ty::ParameterEnvironment::for_item(ctx.tcx, item.id);\n+            for field in vdata.fields() {\n+                let field_ty = ctx.tcx.node_id_to_type(field.id);\n+                if ctx.tcx.type_needs_drop_given_env(field_ty, param_env) {\n+                    ctx.span_lint(UNIONS_WITH_DROP_FIELDS,\n+                                  field.span,\n+                                  \"union contains a field with possibly non-trivial drop code, \\\n+                                   drop code of union fields is ignored when dropping the union\");\n+                    return;\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "c3b752d605f97cbd4fbe38c3044e1e9a868380ca", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0b15935a8cb5811eb80e3220e9ab786feb782/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0b15935a8cb5811eb80e3220e9ab786feb782/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=bea0b15935a8cb5811eb80e3220e9ab786feb782", "patch": "@@ -128,6 +128,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  InvalidNoMangleItems,\n                  PluginAsLibrary,\n                  MutableTransmutes,\n+                 UnionsWithDropFields,\n                  );\n \n     add_builtin_with_new!(sess,"}, {"sha": "0d62a63b89fc9d7686b53798d30da5e25938ce53", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bea0b15935a8cb5811eb80e3220e9ab786feb782/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0b15935a8cb5811eb80e3220e9ab786feb782/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=bea0b15935a8cb5811eb80e3220e9ab786feb782", "patch": "@@ -267,7 +267,8 @@ pub fn implement_drop_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                  t: Ty<'tcx>,\n-                                 v0: ValueRef)\n+                                 v0: ValueRef,\n+                                 shallow_drop: bool)\n                                  -> Block<'blk, 'tcx>\n {\n     debug!(\"trans_struct_drop t: {}\", t);\n@@ -286,7 +287,9 @@ fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     // Issue #23611: schedule cleanup of contents, re-inspecting the\n     // discriminant (if any) in case of variant swap in drop code.\n-    bcx.fcx.schedule_drop_adt_contents(contents_scope, v0, t);\n+    if !shallow_drop {\n+        bcx.fcx.schedule_drop_adt_contents(contents_scope, v0, t);\n+    }\n \n     let (sized_args, unsized_args);\n     let args: &[ValueRef] = if type_is_sized(tcx, t) {\n@@ -470,9 +473,6 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n                 trans_exchange_free_ty(bcx, llbox, content_ty, DebugLoc::None)\n             }\n         }\n-        ty::TyUnion(..) => {\n-            unimplemented_unions!();\n-        }\n         ty::TyTrait(..) => {\n             // No support in vtable for distinguishing destroying with\n             // versus without calling Drop::drop. Assert caller is\n@@ -491,6 +491,13 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n                 if def.dtor_kind().is_present() && !skip_dtor => {\n             trans_struct_drop(bcx, t, v0)\n         }\n+        ty::TyUnion(def, _) => {\n+            if def.dtor_kind().is_present() && !skip_dtor {\n+                trans_struct_drop(bcx, t, v0, true)\n+            } else {\n+                bcx\n+            }\n+        }\n         _ => {\n             if bcx.fcx.type_needs_drop(t) {\n                 drop_structural_ty(bcx, v0, t)"}, {"sha": "f4fea5542b3ded5bb9363e1d5ca3a073c08fb8c5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bea0b15935a8cb5811eb80e3220e9ab786feb782/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0b15935a8cb5811eb80e3220e9ab786feb782/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bea0b15935a8cb5811eb80e3220e9ab786feb782", "patch": "@@ -3235,11 +3235,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 Some((type_did, self.tcx.expect_variant_def(def)))\n             }\n             Def::TyAlias(did) => {\n-                if let Some(&ty::TyStruct(adt, _)) = self.tcx.opt_lookup_item_type(did)\n-                                                             .map(|scheme| &scheme.ty.sty) {\n-                    Some((did, adt.struct_variant()))\n-                } else {\n-                    None\n+                match self.tcx.opt_lookup_item_type(did).map(|scheme| &scheme.ty.sty) {\n+                    Some(&ty::TyStruct(adt, _)) |\n+                    Some(&ty::TyUnion(adt, _)) => Some((did, adt.struct_variant())),\n+                    _ => None,\n                 }\n             }\n             _ => None"}, {"sha": "31f28b3803d662a275ea33aedb0f72b0ac8d7de5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0b15935a8cb5811eb80e3220e9ab786feb782/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0b15935a8cb5811eb80e3220e9ab786feb782/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=bea0b15935a8cb5811eb80e3220e9ab786feb782", "patch": "@@ -1450,7 +1450,8 @@ fn generics_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n                     ItemTy(_, ref generics) |\n                     ItemEnum(_, ref generics) |\n-                    ItemStruct(_, ref generics) => {\n+                    ItemStruct(_, ref generics) |\n+                    ItemUnion(_, ref generics) => {\n                         allow_defaults = true;\n                         generics\n                     }"}, {"sha": "87a72efbe08e51fe8f77d5fdd857739112f28c63", "filename": "src/test/compile-fail/union-with-drop-fields-lint.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bea0b15935a8cb5811eb80e3220e9ab786feb782/src%2Ftest%2Fcompile-fail%2Funion-with-drop-fields-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0b15935a8cb5811eb80e3220e9ab786feb782/src%2Ftest%2Fcompile-fail%2Funion-with-drop-fields-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion-with-drop-fields-lint.rs?ref=bea0b15935a8cb5811eb80e3220e9ab786feb782", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+#![allow(dead_code)]\n+#![deny(unions_with_drop_fields)]\n+\n+union U {\n+    a: u8, // OK\n+}\n+\n+union W {\n+    a: String, //~ ERROR union contains a field with possibly non-trivial drop code\n+    b: String, // OK, only one field is reported\n+}\n+\n+struct S(String);\n+\n+// `S` doesn't implement `Drop` trait, but still has non-trivial destructor\n+union Y {\n+    a: S, //~ ERROR union contains a field with possibly non-trivial drop code\n+}\n+\n+// We don't know if `T` is trivially-destructable or not until trans\n+union J<T> {\n+    a: T, //~ ERROR union contains a field with possibly non-trivial drop code\n+}\n+\n+union H<T: Copy> {\n+    a: T, // OK, `T` is `Copy`, no destructor\n+}\n+\n+fn main() {}"}, {"sha": "2ca68dc3b6e39dd0102e843d78e256eb20bae9b7", "filename": "src/test/run-pass/union-drop.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bea0b15935a8cb5811eb80e3220e9ab786feb782/src%2Ftest%2Frun-pass%2Funion-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0b15935a8cb5811eb80e3220e9ab786feb782/src%2Ftest%2Frun-pass%2Funion-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion-drop.rs?ref=bea0b15935a8cb5811eb80e3220e9ab786feb782", "patch": "@@ -12,15 +12,54 @@\n \n #![feature(untagged_unions)]\n \n+struct S;\n+\n union U {\n     a: u8\n }\n \n+union W {\n+    a: S,\n+}\n+\n+union Y {\n+    a: S,\n+}\n+\n+impl Drop for S {\n+    fn drop(&mut self) {\n+        unsafe { CHECK += 10; }\n+    }\n+}\n+\n impl Drop for U {\n-    fn drop(&mut self) {}\n+    fn drop(&mut self) {\n+        unsafe { CHECK += 1; }\n+    }\n }\n \n+impl Drop for W {\n+    fn drop(&mut self) {\n+        unsafe { CHECK += 1; }\n+    }\n+}\n+\n+static mut CHECK: u8 = 0;\n+\n fn main() {\n-    // 'unions are not fully implemented', src/librustc_trans/glue.rs:567\n-    // let u = U { a: 1 };\n+    unsafe {\n+        assert_eq!(CHECK, 0);\n+        {\n+            let u = U { a: 1 };\n+        }\n+        assert_eq!(CHECK, 1); // 1, dtor of U is called\n+        {\n+            let w = W { a: S };\n+        }\n+        assert_eq!(CHECK, 2); // 2, not 11, dtor of S is not called\n+        {\n+            let y = Y { a: S };\n+        }\n+        assert_eq!(CHECK, 2); // 2, not 12, dtor of S is not called\n+    }\n }"}]}