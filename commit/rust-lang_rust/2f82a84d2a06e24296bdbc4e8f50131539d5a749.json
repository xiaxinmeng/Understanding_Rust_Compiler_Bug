{"sha": "2f82a84d2a06e24296bdbc4e8f50131539d5a749", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmODJhODRkMmEwNmUyNDI5NmJkYmM0ZThmNTAxMzE1MzlkNWE3NDk=", "commit": {"author": {"name": "Sahandevs", "email": "sahandevs@gmail.com", "date": "2021-02-07T18:36:16Z"}, "committer": {"name": "Sahandevs", "email": "sahandevs@gmail.com", "date": "2021-02-07T18:36:16Z"}, "message": "fix errors", "tree": {"sha": "302b1d5a48f84d1b41ff9d0296597fc701bd6558", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/302b1d5a48f84d1b41ff9d0296597fc701bd6558"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f82a84d2a06e24296bdbc4e8f50131539d5a749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f82a84d2a06e24296bdbc4e8f50131539d5a749", "html_url": "https://github.com/rust-lang/rust/commit/2f82a84d2a06e24296bdbc4e8f50131539d5a749", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f82a84d2a06e24296bdbc4e8f50131539d5a749/comments", "author": {"login": "sahandevs", "id": 1113944, "node_id": "MDQ6VXNlcjExMTM5NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1113944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sahandevs", "html_url": "https://github.com/sahandevs", "followers_url": "https://api.github.com/users/sahandevs/followers", "following_url": "https://api.github.com/users/sahandevs/following{/other_user}", "gists_url": "https://api.github.com/users/sahandevs/gists{/gist_id}", "starred_url": "https://api.github.com/users/sahandevs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sahandevs/subscriptions", "organizations_url": "https://api.github.com/users/sahandevs/orgs", "repos_url": "https://api.github.com/users/sahandevs/repos", "events_url": "https://api.github.com/users/sahandevs/events{/privacy}", "received_events_url": "https://api.github.com/users/sahandevs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sahandevs", "id": 1113944, "node_id": "MDQ6VXNlcjExMTM5NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1113944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sahandevs", "html_url": "https://github.com/sahandevs", "followers_url": "https://api.github.com/users/sahandevs/followers", "following_url": "https://api.github.com/users/sahandevs/following{/other_user}", "gists_url": "https://api.github.com/users/sahandevs/gists{/gist_id}", "starred_url": "https://api.github.com/users/sahandevs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sahandevs/subscriptions", "organizations_url": "https://api.github.com/users/sahandevs/orgs", "repos_url": "https://api.github.com/users/sahandevs/repos", "events_url": "https://api.github.com/users/sahandevs/events{/privacy}", "received_events_url": "https://api.github.com/users/sahandevs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a0234d60f924cdec4a3fa2fccfe7ed85567f0bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0234d60f924cdec4a3fa2fccfe7ed85567f0bc", "html_url": "https://github.com/rust-lang/rust/commit/3a0234d60f924cdec4a3fa2fccfe7ed85567f0bc"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "aec5c70c0768a9fe338f088d864e2add89312d9b", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f82a84d2a06e24296bdbc4e8f50131539d5a749/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/2f82a84d2a06e24296bdbc4e8f50131539d5a749/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=2f82a84d2a06e24296bdbc4e8f50131539d5a749", "patch": "@@ -138,7 +138,7 @@ export function createClient(serverPath: string, cwd: string, extraEnv: Env): lc\n                                 command: \"rust-analyzer.applyActionGroup\",\n                                 title: \"\",\n                                 arguments: [items.map((item) => {\n-                                    return { label: item.title, arguments: item.command.arguments[0] };\n+                                    return { label: item.title, arguments: item.command!.arguments![0] };\n                                 })],\n                             };\n "}, {"sha": "c72a7b2788805554ed3752bfe5ef760a403ed0e7", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f82a84d2a06e24296bdbc4e8f50131539d5a749/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/2f82a84d2a06e24296bdbc4e8f50131539d5a749/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=2f82a84d2a06e24296bdbc4e8f50131539d5a749", "patch": "@@ -87,12 +87,14 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n     if (ctx.config.debug.openDebugPane) {\n         debugOutput.show(true);\n     }\n-\n-    const isMultiFolderWorkspace = vscode.workspace.workspaceFolders.length > 1;\n-    const firstWorkspace = vscode.workspace.workspaceFolders[0]; // folder exists or RA is not active.\n+    // folder exists or RA is not active.\n+    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n+    const workspaceFolders = vscode.workspace.workspaceFolders!;\n+    const isMultiFolderWorkspace = workspaceFolders.length > 1;\n+    const firstWorkspace = workspaceFolders[0];\n     const workspace = !isMultiFolderWorkspace || !runnable.args.workspaceRoot ?\n         firstWorkspace :\n-        vscode.workspace.workspaceFolders.find(w => runnable.args.workspaceRoot?.includes(w.uri.fsPath)) || firstWorkspace;\n+        workspaceFolders.find(w => runnable.args.workspaceRoot?.includes(w.uri.fsPath)) || firstWorkspace;\n \n     const wsFolder = path.normalize(workspace.uri.fsPath);\n     const workspaceQualifier = isMultiFolderWorkspace ? `:${workspace.name}` : '';"}, {"sha": "331f85cd3cb819cec394d0323e0feb0e453357d2", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f82a84d2a06e24296bdbc4e8f50131539d5a749/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/2f82a84d2a06e24296bdbc4e8f50131539d5a749/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=2f82a84d2a06e24296bdbc4e8f50131539d5a749", "patch": "@@ -146,7 +146,8 @@ export async function createTask(runnable: ra.Runnable, config: Config): Promise\n         overrideCargo: runnable.args.overrideCargo,\n     };\n \n-    const target = vscode.workspace.workspaceFolders[0]; // safe, see main activate()\n+    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n+    const target = vscode.workspace.workspaceFolders![0]; // safe, see main activate()\n     const cargoTask = await tasks.buildCargoTask(target, definition, runnable.label, args, config.cargoRunner, true);\n     cargoTask.presentationOptions.clear = true;\n "}, {"sha": "dc53ebe2eeb662c3497f0501ef07b62c49783494", "filename": "editors/code/src/snippets.ts", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f82a84d2a06e24296bdbc4e8f50131539d5a749/editors%2Fcode%2Fsrc%2Fsnippets.ts", "raw_url": "https://github.com/rust-lang/rust/raw/2f82a84d2a06e24296bdbc4e8f50131539d5a749/editors%2Fcode%2Fsrc%2Fsnippets.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsnippets.ts?ref=2f82a84d2a06e24296bdbc4e8f50131539d5a749", "patch": "@@ -62,6 +62,8 @@ function parseSnippet(snip: string): [string, [number, number]] | undefined {\n     const m = snip.match(/\\$(0|\\{0:([^}]*)\\})/);\n     if (!m) return undefined;\n     const placeholder = m[2] ?? \"\";\n+    if (m.index == null)\n+        return undefined;\n     const range: [number, number] = [m.index, placeholder.length];\n     const insert = snip.replace(m[0], placeholder);\n     return [insert, range];"}]}