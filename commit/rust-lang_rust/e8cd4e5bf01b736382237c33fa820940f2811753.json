{"sha": "e8cd4e5bf01b736382237c33fa820940f2811753", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4Y2Q0ZTViZjAxYjczNjM4MjIzN2MzM2ZhODIwOTQwZjI4MTE3NTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-10T15:32:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-10T15:32:16Z"}, "message": "Auto merge of #7660 - HKalbasi:derivable-impls, r=camsteffen\n\nFix derivable impl false positives\n\nfix #7654\nfix #7655\n\nchangelog: none (not released)", "tree": {"sha": "84825e188b26f77b0c3dccd26493f0c5afc1d0f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84825e188b26f77b0c3dccd26493f0c5afc1d0f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8cd4e5bf01b736382237c33fa820940f2811753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8cd4e5bf01b736382237c33fa820940f2811753", "html_url": "https://github.com/rust-lang/rust/commit/e8cd4e5bf01b736382237c33fa820940f2811753", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8cd4e5bf01b736382237c33fa820940f2811753/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5595e55a240c370761319062ef32872604100e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5595e55a240c370761319062ef32872604100e0", "html_url": "https://github.com/rust-lang/rust/commit/d5595e55a240c370761319062ef32872604100e0"}, {"sha": "5aff720e1adb8efc1903c25c20cdee701c9e4f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aff720e1adb8efc1903c25c20cdee701c9e4f3a", "html_url": "https://github.com/rust-lang/rust/commit/5aff720e1adb8efc1903c25c20cdee701c9e4f3a"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "15252ef96cd1d7fbaf5662eaf4615eafb54873c8", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e8cd4e5bf01b736382237c33fa820940f2811753/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cd4e5bf01b736382237c33fa820940f2811753/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=e8cd4e5bf01b736382237c33fa820940f2811753", "patch": "@@ -2,10 +2,9 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::{in_macro, is_automatically_derived, is_default_equivalent, remove_blocks};\n use rustc_hir::{\n     def::{DefKind, Res},\n-    Body, Expr, ExprKind, Impl, ImplItemKind, Item, ItemKind, Node, QPath,\n+    Body, Expr, ExprKind, GenericArg, Impl, ImplItemKind, Item, ItemKind, Node, PathSegment, QPath, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TypeFoldable;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n@@ -68,6 +67,7 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n             if let ItemKind::Impl(Impl {\n                 of_trait: Some(ref trait_ref),\n                 items: [child],\n+                self_ty,\n                 ..\n             }) = item.kind;\n             if let attrs = cx.tcx.hir().attrs(item.hir_id());\n@@ -80,9 +80,18 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n             if let ImplItemKind::Fn(_, b) = &impl_item.kind;\n             if let Body { value: func_expr, .. } = cx.tcx.hir().body(*b);\n             if let Some(adt_def) = cx.tcx.type_of(item.def_id).ty_adt_def();\n+            if !attrs.iter().any(|attr| attr.doc_str().is_some());\n+            if let child_attrs = cx.tcx.hir().attrs(impl_item_hir);\n+            if !child_attrs.iter().any(|attr| attr.doc_str().is_some());\n             then {\n-                if cx.tcx.type_of(item.def_id).definitely_has_param_types_or_consts(cx.tcx) {\n-                    return;\n+                if let TyKind::Path(QPath::Resolved(_, p)) = self_ty.kind {\n+                    if let Some(PathSegment { args: Some(a), .. }) = p.segments.last() {\n+                        for arg in a.args {\n+                            if !matches!(arg, GenericArg::Lifetime(_)) {\n+                                return;\n+                            }\n+                        }\n+                    }\n                 }\n                 let should_emit = match remove_blocks(func_expr).kind {\n                     ExprKind::Tup(fields) => fields.iter().all(|e| is_default_equivalent(cx, e)),"}, {"sha": "ebbc0c77e32656caae3a17245d8042c2de0f6af3", "filename": "tests/ui/derivable_impls.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e8cd4e5bf01b736382237c33fa820940f2811753/tests%2Fui%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cd4e5bf01b736382237c33fa820940f2811753/tests%2Fui%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderivable_impls.rs?ref=e8cd4e5bf01b736382237c33fa820940f2811753", "patch": "@@ -167,4 +167,44 @@ impl Default for WithoutSelfParan {\n     }\n }\n \n+// https://github.com/rust-lang/rust-clippy/issues/7655\n+\n+pub struct SpecializedImpl2<T> {\n+    v: Vec<T>,\n+}\n+\n+impl Default for SpecializedImpl2<String> {\n+    fn default() -> Self {\n+        Self { v: Vec::new() }\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/7654\n+\n+pub struct Color {\n+    pub r: u8,\n+    pub g: u8,\n+    pub b: u8,\n+}\n+\n+/// `#000000`\n+impl Default for Color {\n+    fn default() -> Self {\n+        Color { r: 0, g: 0, b: 0 }\n+    }\n+}\n+\n+pub struct Color2 {\n+    pub r: u8,\n+    pub g: u8,\n+    pub b: u8,\n+}\n+\n+impl Default for Color2 {\n+    /// `#000000`\n+    fn default() -> Self {\n+        Self { r: 0, g: 0, b: 0 }\n+    }\n+}\n+\n fn main() {}"}]}