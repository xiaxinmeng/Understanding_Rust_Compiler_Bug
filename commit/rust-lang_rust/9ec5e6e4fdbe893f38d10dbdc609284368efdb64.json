{"sha": "9ec5e6e4fdbe893f38d10dbdc609284368efdb64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYzVlNmU0ZmRiZTg5M2YzOGQxMGRiZGM2MDkyODQzNjhlZmRiNjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-06T13:22:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-06T13:22:26Z"}, "message": "Clearer naming", "tree": {"sha": "959faf13c99465ae23ff0bb1fd67b0a3b246c5bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/959faf13c99465ae23ff0bb1fd67b0a3b246c5bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ec5e6e4fdbe893f38d10dbdc609284368efdb64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec5e6e4fdbe893f38d10dbdc609284368efdb64", "html_url": "https://github.com/rust-lang/rust/commit/9ec5e6e4fdbe893f38d10dbdc609284368efdb64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ec5e6e4fdbe893f38d10dbdc609284368efdb64/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad02bfe58fd52293d9ae4a049f98f475df9d3abb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad02bfe58fd52293d9ae4a049f98f475df9d3abb", "html_url": "https://github.com/rust-lang/rust/commit/ad02bfe58fd52293d9ae4a049f98f475df9d3abb"}], "stats": {"total": 76, "additions": 47, "deletions": 29}, "files": [{"sha": "f09ad37e33a14bffc0ac76bff8b6371ca4bd041c", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5e6e4fdbe893f38d10dbdc609284368efdb64/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5e6e4fdbe893f38d10dbdc609284368efdb64/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=9ec5e6e4fdbe893f38d10dbdc609284368efdb64", "patch": "@@ -1,6 +1,7 @@\n //! Thin wrappers around `std::path`, distinguishing between absolute and\n //! relative paths.\n use std::{\n+    borrow::Borrow,\n     convert::{TryFrom, TryInto},\n     ops,\n     path::{Component, Path, PathBuf},\n@@ -35,6 +36,12 @@ impl AsRef<AbsPath> for AbsPathBuf {\n     }\n }\n \n+impl Borrow<AbsPath> for AbsPathBuf {\n+    fn borrow(&self) -> &AbsPath {\n+        self.as_path()\n+    }\n+}\n+\n impl TryFrom<PathBuf> for AbsPathBuf {\n     type Error = PathBuf;\n     fn try_from(path_buf: PathBuf) -> Result<AbsPathBuf, PathBuf> {"}, {"sha": "fdf4b2d5515f2feebf251f548399ce2cf542ec6a", "filename": "crates/project_model/src/build_data.rs", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5e6e4fdbe893f38d10dbdc609284368efdb64/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5e6e4fdbe893f38d10dbdc609284368efdb64/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs?ref=9ec5e6e4fdbe893f38d10dbdc609284368efdb64", "patch": "@@ -18,7 +18,7 @@ use stdx::JodChild;\n use crate::{cfg_flag::CfgFlag, CargoConfig};\n \n #[derive(Debug, Clone, Default, PartialEq, Eq)]\n-pub(crate) struct BuildData {\n+pub(crate) struct PackageBuildData {\n     /// List of config flags defined by this package's build script\n     pub(crate) cfgs: Vec<CfgFlag>,\n     /// List of cargo-related environment variables with their value\n@@ -32,6 +32,16 @@ pub(crate) struct BuildData {\n     pub(crate) proc_macro_dylib_path: Option<AbsPathBuf>,\n }\n \n+#[derive(Debug, Default, PartialEq, Eq, Clone)]\n+pub(crate) struct WorkspaceBuildData {\n+    per_package: FxHashMap<String, PackageBuildData>,\n+}\n+\n+#[derive(Debug, Default, PartialEq, Eq, Clone)]\n+pub struct BuildDataResult {\n+    per_workspace: FxHashMap<AbsPathBuf, WorkspaceBuildData>,\n+}\n+\n #[derive(Clone, Debug)]\n pub(crate) struct BuildDataConfig {\n     cargo_toml: AbsPathBuf,\n@@ -52,13 +62,6 @@ pub struct BuildDataCollector {\n     configs: FxHashMap<AbsPathBuf, BuildDataConfig>,\n }\n \n-#[derive(Debug, Default, PartialEq, Eq, Clone)]\n-pub struct BuildDataResult {\n-    data: FxHashMap<AbsPathBuf, BuildDataMap>,\n-}\n-\n-pub(crate) type BuildDataMap = FxHashMap<String, BuildData>;\n-\n impl BuildDataCollector {\n     pub(crate) fn add_config(&mut self, workspace_root: &AbsPath, config: BuildDataConfig) {\n         self.configs.insert(workspace_root.to_path_buf(), config);\n@@ -67,7 +70,7 @@ impl BuildDataCollector {\n     pub fn collect(&mut self, progress: &dyn Fn(String)) -> Result<BuildDataResult> {\n         let mut res = BuildDataResult::default();\n         for (path, config) in self.configs.iter() {\n-            res.data.insert(\n+            res.per_workspace.insert(\n                 path.clone(),\n                 collect_from_workspace(\n                     &config.cargo_toml,\n@@ -81,9 +84,15 @@ impl BuildDataCollector {\n     }\n }\n \n+impl WorkspaceBuildData {\n+    pub(crate) fn get(&self, package_id: &str) -> Option<&PackageBuildData> {\n+        self.per_package.get(package_id)\n+    }\n+}\n+\n impl BuildDataResult {\n-    pub(crate) fn get(&self, root: &AbsPath) -> Option<&BuildDataMap> {\n-        self.data.get(&root.to_path_buf())\n+    pub(crate) fn get(&self, workspace_root: &AbsPath) -> Option<&WorkspaceBuildData> {\n+        self.per_workspace.get(workspace_root)\n     }\n }\n \n@@ -102,7 +111,7 @@ fn collect_from_workspace(\n     cargo_features: &CargoConfig,\n     packages: &Vec<cargo_metadata::Package>,\n     progress: &dyn Fn(String),\n-) -> Result<BuildDataMap> {\n+) -> Result<WorkspaceBuildData> {\n     let mut cmd = Command::new(toolchain::cargo());\n     cmd.args(&[\"check\", \"--workspace\", \"--message-format=json\", \"--manifest-path\"])\n         .arg(cargo_toml.as_ref());\n@@ -136,7 +145,7 @@ fn collect_from_workspace(\n     let child_stdout = child.stdout.take().unwrap();\n     let stdout = BufReader::new(child_stdout);\n \n-    let mut res = BuildDataMap::default();\n+    let mut res = WorkspaceBuildData::default();\n     for message in cargo_metadata::Message::parse_stream(stdout).flatten() {\n         match message {\n             Message::BuildScriptExecuted(BuildScript {\n@@ -154,16 +163,17 @@ fn collect_from_workspace(\n                     }\n                     acc\n                 };\n-                let res = res.entry(package_id.repr.clone()).or_default();\n+                let package_build_data =\n+                    res.per_package.entry(package_id.repr.clone()).or_default();\n                 // cargo_metadata crate returns default (empty) path for\n                 // older cargos, which is not absolute, so work around that.\n                 if !out_dir.as_str().is_empty() {\n                     let out_dir = AbsPathBuf::assert(PathBuf::from(out_dir.into_os_string()));\n-                    res.out_dir = Some(out_dir);\n-                    res.cfgs = cfgs;\n+                    package_build_data.out_dir = Some(out_dir);\n+                    package_build_data.cfgs = cfgs;\n                 }\n \n-                res.envs = env;\n+                package_build_data.envs = env;\n             }\n             Message::CompilerArtifact(message) => {\n                 progress(format!(\"metadata {}\", message.target.name));\n@@ -173,8 +183,9 @@ fn collect_from_workspace(\n                     // Skip rmeta file\n                     if let Some(filename) = message.filenames.iter().find(|name| is_dylib(name)) {\n                         let filename = AbsPathBuf::assert(PathBuf::from(&filename));\n-                        let res = res.entry(package_id.repr.clone()).or_default();\n-                        res.proc_macro_dylib_path = Some(filename);\n+                        let package_build_data =\n+                            res.per_package.entry(package_id.repr.clone()).or_default();\n+                        package_build_data.proc_macro_dylib_path = Some(filename);\n                     }\n                 }\n             }\n@@ -188,12 +199,12 @@ fn collect_from_workspace(\n     }\n \n     for package in packages {\n-        let build_data = res.entry(package.id.repr.clone()).or_default();\n-        inject_cargo_env(package, build_data);\n-        if let Some(out_dir) = &build_data.out_dir {\n+        let package_build_data = res.per_package.entry(package.id.repr.clone()).or_default();\n+        inject_cargo_env(package, package_build_data);\n+        if let Some(out_dir) = &package_build_data.out_dir {\n             // NOTE: cargo and rustc seem to hide non-UTF-8 strings from env! and option_env!()\n             if let Some(out_dir) = out_dir.to_str().map(|s| s.to_owned()) {\n-                build_data.envs.push((\"OUT_DIR\".to_string(), out_dir));\n+                package_build_data.envs.push((\"OUT_DIR\".to_string(), out_dir));\n             }\n         }\n     }\n@@ -212,7 +223,7 @@ fn is_dylib(path: &Utf8Path) -> bool {\n /// Recreates the compile-time environment variables that Cargo sets.\n ///\n /// Should be synced with <https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates>\n-fn inject_cargo_env(package: &cargo_metadata::Package, build_data: &mut BuildData) {\n+fn inject_cargo_env(package: &cargo_metadata::Package, build_data: &mut PackageBuildData) {\n     let env = &mut build_data.envs;\n \n     // FIXME: Missing variables:"}, {"sha": "2fcd0f8facee8957f1f75151d53c2534d7c450e0", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5e6e4fdbe893f38d10dbdc609284368efdb64/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5e6e4fdbe893f38d10dbdc609284368efdb64/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=9ec5e6e4fdbe893f38d10dbdc609284368efdb64", "patch": "@@ -12,7 +12,7 @@ use proc_macro_api::ProcMacroClient;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n-    build_data::{BuildData, BuildDataMap, BuildDataResult},\n+    build_data::{BuildDataResult, PackageBuildData, WorkspaceBuildData},\n     cargo_workspace,\n     cfg_flag::CfgFlag,\n     rustc_cfg,\n@@ -354,10 +354,10 @@ fn cargo_to_crate_graph(\n     proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     cargo: &CargoWorkspace,\n-    build_data_map: Option<&BuildDataMap>,\n+    build_data_map: Option<&WorkspaceBuildData>,\n     sysroot: &Sysroot,\n     rustc: &Option<CargoWorkspace>,\n-    rustc_build_data_map: Option<&BuildDataMap>,\n+    rustc_build_data_map: Option<&WorkspaceBuildData>,\n ) -> CrateGraph {\n     let _p = profile::span(\"cargo_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n@@ -464,7 +464,7 @@ fn handle_rustc_crates(\n     rustc_workspace: &CargoWorkspace,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     crate_graph: &mut CrateGraph,\n-    rustc_build_data_map: Option<&FxHashMap<String, BuildData>>,\n+    rustc_build_data_map: Option<&WorkspaceBuildData>,\n     cfg_options: &CfgOptions,\n     proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n     pkg_to_lib_crate: &mut FxHashMap<la_arena::Idx<crate::PackageData>, CrateId>,\n@@ -555,7 +555,7 @@ fn handle_rustc_crates(\n fn add_target_crate_root(\n     crate_graph: &mut CrateGraph,\n     pkg: &cargo_workspace::PackageData,\n-    build_data: Option<&BuildData>,\n+    build_data: Option<&PackageBuildData>,\n     cfg_options: &CfgOptions,\n     proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n     file_id: FileId,"}]}