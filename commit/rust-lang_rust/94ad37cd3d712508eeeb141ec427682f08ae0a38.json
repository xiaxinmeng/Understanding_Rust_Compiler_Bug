{"sha": "94ad37cd3d712508eeeb141ec427682f08ae0a38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YWQzN2NkM2Q3MTI1MDhlZWViMTQxZWM0Mjc2ODJmMDhhZTBhMzg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-12T17:25:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-12T17:25:17Z"}, "message": "Sync from rust c7dbe7a830100c70d59994fd940bf75bb6e39b39", "tree": {"sha": "619e74af83937b077e8a74923fb9efbeb4c169c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/619e74af83937b077e8a74923fb9efbeb4c169c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94ad37cd3d712508eeeb141ec427682f08ae0a38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94ad37cd3d712508eeeb141ec427682f08ae0a38", "html_url": "https://github.com/rust-lang/rust/commit/94ad37cd3d712508eeeb141ec427682f08ae0a38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94ad37cd3d712508eeeb141ec427682f08ae0a38/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7736e0afb86a54ca68c36d96262e902761f02f80", "url": "https://api.github.com/repos/rust-lang/rust/commits/7736e0afb86a54ca68c36d96262e902761f02f80", "html_url": "https://github.com/rust-lang/rust/commit/7736e0afb86a54ca68c36d96262e902761f02f80"}, {"sha": "a81217c12d70ec6707b4956e1f70c9f58ce992ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/a81217c12d70ec6707b4956e1f70c9f58ce992ac", "html_url": "https://github.com/rust-lang/rust/commit/a81217c12d70ec6707b4956e1f70c9f58ce992ac"}], "stats": {"total": 55, "additions": 24, "deletions": 31}, "files": [{"sha": "7a51293f5cda5411b59f58e48702de53011e7d0b", "filename": "scripts/filter_profile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ad37cd3d712508eeeb141ec427682f08ae0a38/scripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ad37cd3d712508eeeb141ec427682f08ae0a38/scripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ffilter_profile.rs?ref=94ad37cd3d712508eeeb141ec427682f08ae0a38", "patch": "@@ -42,7 +42,7 @@ fn main() -> Result<(), Box<dyn std::error::Error>> {\n             continue;\n         }\n \n-        if stack.contains(\"rustc_mir::monomorphize::partitioning::collect_and_partition_mono_items\")\n+        if stack.contains(\"rustc_monomorphize::partitioning::collect_and_partition_mono_items\")\n             || stack.contains(\"rustc_incremental::assert_dep_graph::assert_dep_graph\")\n             || stack.contains(\"rustc_symbol_mangling::test::report_symbol_names\")\n         {\n@@ -81,7 +81,7 @@ fn main() -> Result<(), Box<dyn std::error::Error>> {\n         }\n \n         const COLLECT_AND_PARTITION_MONO_ITEMS: &str =\n-            \"rustc_mir::monomorphize::partitioning::collect_and_partition_mono_items\";\n+            \"rustc_monomorphize::partitioning::collect_and_partition_mono_items\";\n         if let Some(index) = stack.find(COLLECT_AND_PARTITION_MONO_ITEMS) {\n             stack = &stack[..index + COLLECT_AND_PARTITION_MONO_ITEMS.len()];\n         }"}, {"sha": "2144e7ed67acbc75a7e4ca0c3781e27148f5294c", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/94ad37cd3d712508eeeb141ec427682f08ae0a38/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ad37cd3d712508eeeb141ec427682f08ae0a38/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=94ad37cd3d712508eeeb141ec427682f08ae0a38", "patch": "@@ -92,9 +92,9 @@ impl<'tcx> ArgAbiExt<'tcx> for ArgAbi<'tcx, Ty<'tcx>> {\n     fn get_abi_param(&self, tcx: TyCtxt<'tcx>) -> SmallVec<[AbiParam; 2]> {\n         match self.mode {\n             PassMode::Ignore => smallvec![],\n-            PassMode::Direct(attrs) => match &self.layout.abi {\n+            PassMode::Direct(attrs) => match self.layout.abi {\n                 Abi::Scalar(scalar) => smallvec![apply_arg_attrs_to_abi_param(\n-                    AbiParam::new(scalar_to_clif_type(tcx, scalar.clone())),\n+                    AbiParam::new(scalar_to_clif_type(tcx, scalar)),\n                     attrs\n                 )],\n                 Abi::Vector { .. } => {\n@@ -103,10 +103,10 @@ impl<'tcx> ArgAbiExt<'tcx> for ArgAbi<'tcx, Ty<'tcx>> {\n                 }\n                 _ => unreachable!(\"{:?}\", self.layout.abi),\n             },\n-            PassMode::Pair(attrs_a, attrs_b) => match &self.layout.abi {\n+            PassMode::Pair(attrs_a, attrs_b) => match self.layout.abi {\n                 Abi::ScalarPair(a, b) => {\n-                    let a = scalar_to_clif_type(tcx, a.clone());\n-                    let b = scalar_to_clif_type(tcx, b.clone());\n+                    let a = scalar_to_clif_type(tcx, a);\n+                    let b = scalar_to_clif_type(tcx, b);\n                     smallvec![\n                         apply_arg_attrs_to_abi_param(AbiParam::new(a), attrs_a),\n                         apply_arg_attrs_to_abi_param(AbiParam::new(b), attrs_b),\n@@ -139,20 +139,20 @@ impl<'tcx> ArgAbiExt<'tcx> for ArgAbi<'tcx, Ty<'tcx>> {\n     fn get_abi_return(&self, tcx: TyCtxt<'tcx>) -> (Option<AbiParam>, Vec<AbiParam>) {\n         match self.mode {\n             PassMode::Ignore => (None, vec![]),\n-            PassMode::Direct(_) => match &self.layout.abi {\n+            PassMode::Direct(_) => match self.layout.abi {\n                 Abi::Scalar(scalar) => {\n-                    (None, vec![AbiParam::new(scalar_to_clif_type(tcx, scalar.clone()))])\n+                    (None, vec![AbiParam::new(scalar_to_clif_type(tcx, scalar))])\n                 }\n                 Abi::Vector { .. } => {\n                     let vector_ty = crate::intrinsics::clif_vector_type(tcx, self.layout).unwrap();\n                     (None, vec![AbiParam::new(vector_ty)])\n                 }\n                 _ => unreachable!(\"{:?}\", self.layout.abi),\n             },\n-            PassMode::Pair(_, _) => match &self.layout.abi {\n+            PassMode::Pair(_, _) => match self.layout.abi {\n                 Abi::ScalarPair(a, b) => {\n-                    let a = scalar_to_clif_type(tcx, a.clone());\n-                    let b = scalar_to_clif_type(tcx, b.clone());\n+                    let a = scalar_to_clif_type(tcx, a);\n+                    let b = scalar_to_clif_type(tcx, b);\n                     (None, vec![AbiParam::new(a), AbiParam::new(b)])\n                 }\n                 _ => unreachable!(\"{:?}\", self.layout.abi),"}, {"sha": "46a7485e4ef9ce2e0a7d859a1fa240c17fcaa39f", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94ad37cd3d712508eeeb141ec427682f08ae0a38/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ad37cd3d712508eeeb141ec427682f08ae0a38/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=94ad37cd3d712508eeeb141ec427682f08ae0a38", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     let mir = tcx.instance_mir(instance.def);\n     let _mir_guard = crate::PrintOnPanic(|| {\n         let mut buf = Vec::new();\n-        rustc_mir::util::write_mir_pretty(tcx, Some(instance.def_id()), &mut buf).unwrap();\n+        rustc_middle::mir::write_mir_pretty(tcx, Some(instance.def_id()), &mut buf).unwrap();\n         String::from_utf8_lossy(&buf).into_owned()\n     });\n "}, {"sha": "8b62b44df8ab30a0be927472792cee36ced3a8a6", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ad37cd3d712508eeeb141ec427682f08ae0a38/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ad37cd3d712508eeeb141ec427682f08ae0a38/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=94ad37cd3d712508eeeb141ec427682f08ae0a38", "patch": "@@ -143,8 +143,8 @@ macro validate_simd_type($fx:ident, $intrinsic:ident, $span:ident, $ty:expr) {\n }\n \n pub(crate) fn clif_vector_type<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>) -> Option<Type> {\n-    let (element, count) = match &layout.abi {\n-        Abi::Vector { element, count } => (element.clone(), *count),\n+    let (element, count) = match layout.abi {\n+        Abi::Vector { element, count } => (element, count),\n         _ => unreachable!(),\n     };\n "}, {"sha": "2ceccdd34994d038781f6509bac70cb76f00d086", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94ad37cd3d712508eeeb141ec427682f08ae0a38/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ad37cd3d712508eeeb141ec427682f08ae0a38/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=94ad37cd3d712508eeeb141ec427682f08ae0a38", "patch": "@@ -17,7 +17,6 @@ extern crate rustc_incremental;\n extern crate rustc_index;\n extern crate rustc_interface;\n extern crate rustc_metadata;\n-extern crate rustc_mir;\n extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;"}, {"sha": "30d5340935f14d90ea4773316340420a2fa11334", "filename": "src/value_and_place.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/94ad37cd3d712508eeeb141ec427682f08ae0a38/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ad37cd3d712508eeeb141ec427682f08ae0a38/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=94ad37cd3d712508eeeb141ec427682f08ae0a38", "patch": "@@ -49,11 +49,7 @@ fn codegen_field<'tcx>(\n     }\n }\n \n-fn scalar_pair_calculate_b_offset(\n-    tcx: TyCtxt<'_>,\n-    a_scalar: &Scalar,\n-    b_scalar: &Scalar,\n-) -> Offset32 {\n+fn scalar_pair_calculate_b_offset(tcx: TyCtxt<'_>, a_scalar: Scalar, b_scalar: Scalar) -> Offset32 {\n     let b_offset = a_scalar.value.size(&tcx).align_to(b_scalar.value.align(&tcx).abi);\n     Offset32::new(b_offset.bytes().try_into().unwrap())\n }\n@@ -124,12 +120,10 @@ impl<'tcx> CValue<'tcx> {\n         match self.0 {\n             CValueInner::ByRef(ptr, None) => {\n                 let clif_ty = match layout.abi {\n-                    Abi::Scalar(ref scalar) => scalar_to_clif_type(fx.tcx, scalar.clone()),\n-                    Abi::Vector { ref element, count } => {\n-                        scalar_to_clif_type(fx.tcx, element.clone())\n-                            .by(u16::try_from(count).unwrap())\n-                            .unwrap()\n-                    }\n+                    Abi::Scalar(scalar) => scalar_to_clif_type(fx.tcx, scalar),\n+                    Abi::Vector { element, count } => scalar_to_clif_type(fx.tcx, element)\n+                        .by(u16::try_from(count).unwrap())\n+                        .unwrap(),\n                     _ => unreachable!(\"{:?}\", layout.ty),\n                 };\n                 let mut flags = MemFlags::new();\n@@ -147,13 +141,13 @@ impl<'tcx> CValue<'tcx> {\n         let layout = self.1;\n         match self.0 {\n             CValueInner::ByRef(ptr, None) => {\n-                let (a_scalar, b_scalar) = match &layout.abi {\n+                let (a_scalar, b_scalar) = match layout.abi {\n                     Abi::ScalarPair(a, b) => (a, b),\n                     _ => unreachable!(\"load_scalar_pair({:?})\", self),\n                 };\n                 let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n-                let clif_ty1 = scalar_to_clif_type(fx.tcx, a_scalar.clone());\n-                let clif_ty2 = scalar_to_clif_type(fx.tcx, b_scalar.clone());\n+                let clif_ty1 = scalar_to_clif_type(fx.tcx, a_scalar);\n+                let clif_ty2 = scalar_to_clif_type(fx.tcx, b_scalar);\n                 let mut flags = MemFlags::new();\n                 flags.set_notrap();\n                 let val1 = ptr.load(fx, clif_ty1, flags);\n@@ -564,7 +558,7 @@ impl<'tcx> CPlace<'tcx> {\n                 to_ptr.store(fx, val, flags);\n                 return;\n             }\n-            Abi::ScalarPair(ref a_scalar, ref b_scalar) => {\n+            Abi::ScalarPair(a_scalar, b_scalar) => {\n                 let (value, extra) = from.load_scalar_pair(fx);\n                 let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n                 to_ptr.store(fx, value, flags);"}]}