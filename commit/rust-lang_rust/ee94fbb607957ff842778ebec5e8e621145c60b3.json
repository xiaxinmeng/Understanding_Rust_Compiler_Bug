{"sha": "ee94fbb607957ff842778ebec5e8e621145c60b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOTRmYmI2MDc5NTdmZjg0Mjc3OGViZWM1ZThlNjIxMTQ1YzYwYjM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T20:05:54Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-30T17:58:01Z"}, "message": "Make allocator_kind a query.", "tree": {"sha": "deda1971dd41569d6ca75b3567fa4b1f46a262c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deda1971dd41569d6ca75b3567fa4b1f46a262c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee94fbb607957ff842778ebec5e8e621145c60b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee94fbb607957ff842778ebec5e8e621145c60b3", "html_url": "https://github.com/rust-lang/rust/commit/ee94fbb607957ff842778ebec5e8e621145c60b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee94fbb607957ff842778ebec5e8e621145c60b3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1e69495582a6073717c1f68ee84084fbbeefb0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e69495582a6073717c1f68ee84084fbbeefb0a", "html_url": "https://github.com/rust-lang/rust/commit/e1e69495582a6073717c1f68ee84084fbbeefb0a"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "1976e4ad3c9fc73e4fe06f704990a7bcebacff7c", "filename": "compiler/rustc_ast/src/expand/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs?ref=ee94fbb607957ff842778ebec5e8e621145c60b3", "patch": "@@ -1,6 +1,6 @@\n use rustc_span::symbol::{sym, Symbol};\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Debug, Copy, HashStable_Generic)]\n pub enum AllocatorKind {\n     Global,\n     Default,"}, {"sha": "d39486c2f1002e485f849fb0c27fb3564c384e46", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=ee94fbb607957ff842778ebec5e8e621145c60b3", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn codegen(\n     });\n     if any_dynamic_crate {\n         false\n-    } else if let Some(kind) = tcx.allocator_kind() {\n+    } else if let Some(kind) = tcx.allocator_kind(()) {\n         codegen_inner(module, unwind_context, kind);\n         true\n     } else {"}, {"sha": "b3c674de2c65f2e2861afc3fc5f92fc2f4a4c8d1", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=ee94fbb607957ff842778ebec5e8e621145c60b3", "patch": "@@ -180,7 +180,7 @@ fn exported_symbols_provider_local(\n         symbols.push((exported_symbol, SymbolExportLevel::C));\n     }\n \n-    if tcx.allocator_kind().is_some() {\n+    if tcx.allocator_kind(()).is_some() {\n         for method in ALLOCATOR_METHODS {\n             let symbol_name = format!(\"__rust_{}\", method.name);\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, &symbol_name));"}, {"sha": "c7f6b9cbd14124e0a746b4922171db12ae812165", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=ee94fbb607957ff842778ebec5e8e621145c60b3", "patch": "@@ -517,7 +517,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     });\n     let allocator_module = if any_dynamic_crate {\n         None\n-    } else if let Some(kind) = tcx.allocator_kind() {\n+    } else if let Some(kind) = tcx.allocator_kind(()) {\n         let llmod_id =\n             cgu_name_builder.build_cgu_name(LOCAL_CRATE, &[\"crate\"], Some(\"allocator\")).to_string();\n         let mut modules = backend.new_metadata(tcx, &llmod_id);"}, {"sha": "8476929eaeced2b1d230e5e6f6d964e2e7d2a088", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=ee94fbb607957ff842778ebec5e8e621145c60b3", "patch": "@@ -285,7 +285,7 @@ pub type DepNode = rustc_query_system::dep_graph::DepNode<DepKind>;\n // required that their size stay the same, but we don't want to change\n // it inadvertently. This assert just ensures we're aware of any change.\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-static_assert_size!(DepNode, 17);\n+static_assert_size!(DepNode, 18);\n \n #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n static_assert_size!(DepNode, 24);"}, {"sha": "28a03155b27b4569fc880a27712431cdac6ccd72", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ee94fbb607957ff842778ebec5e8e621145c60b3", "patch": "@@ -1412,6 +1412,9 @@ rustc_queries! {\n         eval_always\n         desc { \"generating a postorder list of CrateNums\" }\n     }\n+    query allocator_kind(_: ()) -> Option<AllocatorKind> {\n+        desc { \"allocator kind for the current crate\" }\n+    }\n \n     query upvars_mentioned(def_id: DefId) -> Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>> {\n         desc { |tcx| \"collecting upvars mentioned in `{}`\", tcx.def_path_str(def_id) }"}, {"sha": "42c90f0d1150f9503775cf35273b8e9249be3bb9", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=ee94fbb607957ff842778ebec5e8e621145c60b3", "patch": "@@ -25,7 +25,6 @@ use crate::ty::{\n     TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy,\n };\n use rustc_ast as ast;\n-use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n@@ -1207,10 +1206,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.all_crate_nums(())\n     }\n \n-    pub fn allocator_kind(self) -> Option<AllocatorKind> {\n-        self.untracked_resolutions.cstore.allocator_kind()\n-    }\n-\n     pub fn features(self) -> &'tcx rustc_feature::Features {\n         self.features_query(())\n     }\n@@ -2817,4 +2812,5 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         // We want to check if the panic handler was defined in this crate\n         tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())\n     };\n+    providers.allocator_kind = |tcx, ()| tcx.resolutions(()).cstore.allocator_kind();\n }"}, {"sha": "247a250a6c0512638e4f572423e2f109dbd48f7e", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee94fbb607957ff842778ebec5e8e621145c60b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=ee94fbb607957ff842778ebec5e8e621145c60b3", "patch": "@@ -33,6 +33,7 @@ use crate::traits::{self, ImplSource};\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n+use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;"}]}