{"sha": "5911ccaba8ff0a308660c83e4d307609f8236146", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MTFjY2FiYThmZjBhMzA4NjYwYzgzZTRkMzA3NjA5ZjgyMzYxNDY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-23T13:50:08Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-29T08:45:18Z"}, "message": "merge multiple equal terminals into one", "tree": {"sha": "c01a3b2c42379f99448f76092e7e4e7eeab681e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c01a3b2c42379f99448f76092e7e4e7eeab681e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5911ccaba8ff0a308660c83e4d307609f8236146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5911ccaba8ff0a308660c83e4d307609f8236146", "html_url": "https://github.com/rust-lang/rust/commit/5911ccaba8ff0a308660c83e4d307609f8236146", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5911ccaba8ff0a308660c83e4d307609f8236146/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25ed62ff23eca4b6757bbd18f53061feebb09ae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/25ed62ff23eca4b6757bbd18f53061feebb09ae4", "html_url": "https://github.com/rust-lang/rust/commit/25ed62ff23eca4b6757bbd18f53061feebb09ae4"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "4369a05d2d8f8833f9ed8dcd4f6241d70602f553", "filename": "src/booleans.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5911ccaba8ff0a308660c83e4d307609f8236146/src%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5911ccaba8ff0a308660c83e4d307609f8236146/src%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbooleans.rs?ref=5911ccaba8ff0a308660c83e4d307609f8236146", "patch": "@@ -34,10 +34,13 @@ impl LateLintPass for NonminimalBool {\n struct NonminimalBoolVisitor<'a, 'tcx: 'a>(&'a LateContext<'a, 'tcx>);\n \n use quine_mc_cluskey::Bool;\n-struct Hir2Qmm<'tcx>(Vec<&'tcx Expr>);\n+struct Hir2Qmm<'a, 'tcx: 'a, 'v> {\n+    terminals: Vec<&'v Expr>,\n+    cx: &'a LateContext<'a, 'tcx>\n+}\n \n-impl<'tcx> Hir2Qmm<'tcx> {\n-    fn extract(&mut self, op: BinOp_, a: &[&'tcx Expr], mut v: Vec<Bool>) -> Result<Vec<Bool>, String> {\n+impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n+    fn extract(&mut self, op: BinOp_, a: &[&'v Expr], mut v: Vec<Bool>) -> Result<Vec<Bool>, String> {\n         for a in a {\n             if let ExprBinary(binop, ref lhs, ref rhs) = a.node {\n                 if binop.node == op {\n@@ -50,7 +53,7 @@ impl<'tcx> Hir2Qmm<'tcx> {\n         Ok(v)\n     }\n \n-    fn run(&mut self, e: &'tcx Expr) -> Result<Bool, String> {\n+    fn run(&mut self, e: &'v Expr) -> Result<Bool, String> {\n         match e.node {\n             ExprUnary(UnNot, ref inner) => return Ok(Bool::Not(box self.run(inner)?)),\n             ExprBinary(binop, ref lhs, ref rhs) => {\n@@ -69,8 +72,15 @@ impl<'tcx> Hir2Qmm<'tcx> {\n             },\n             _ => {},\n         }\n-        let n = self.0.len();\n-        self.0.push(e);\n+        if let Some((n, _)) = self.terminals\n+                                  .iter()\n+                                  .enumerate()\n+                                  .find(|&(_, expr)| SpanlessEq::new(self.cx).ignore_fn().eq_expr(e, expr)) {\n+            #[allow(cast_possible_truncation)]\n+            return Ok(Bool::Term(n as u8));\n+        }\n+        let n = self.terminals.len();\n+        self.terminals.push(e);\n         if n < 32 {\n             #[allow(cast_possible_truncation)]\n             Ok(Bool::Term(n as u8))\n@@ -157,7 +167,10 @@ fn simple_negate(b: Bool) -> Bool {\n \n impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n     fn bool_expr(&self, e: &Expr) {\n-        let mut h2q = Hir2Qmm(Vec::new());\n+        let mut h2q = Hir2Qmm {\n+            terminals: Vec::new(),\n+            cx: self.0,\n+        };\n         if let Ok(expr) = h2q.run(e) {\n             let mut simplified = expr.simplify();\n             for simple in Bool::Not(Box::new(expr.clone())).simplify() {\n@@ -170,7 +183,7 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n             if !simplified.iter().any(|s| *s == expr) {\n                 span_lint_and_then(self.0, NONMINIMAL_BOOL, e.span, \"this boolean expression can be simplified\", |db| {\n                     for suggestion in &simplified {\n-                        db.span_suggestion(e.span, \"try\", suggest(self.0, suggestion, &h2q.0));\n+                        db.span_suggestion(e.span, \"try\", suggest(self.0, suggestion, &h2q.terminals));\n                     }\n                 });\n             }"}]}