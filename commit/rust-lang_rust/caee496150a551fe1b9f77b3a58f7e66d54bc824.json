{"sha": "caee496150a551fe1b9f77b3a58f7e66d54bc824", "node_id": "C_kwDOAAsO6NoAKGNhZWU0OTYxNTBhNTUxZmUxYjlmNzdiM2E1OGY3ZTY2ZDU0YmM4MjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-04T03:52:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-04T03:52:29Z"}, "message": "Auto merge of #100120 - matthiaskrgr:rollup-g6ycykq, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #98771 (Add support for link-flavor rust-lld for iOS, tvOS and watchOS)\n - #98835 (relate `closure_substs.parent_substs()` to parent fn in NLL)\n - #99746 (Use `TraitEngine` in more places that don't specifically need `FulfillmentContext::new_in_snapshot`)\n - #99786 (Recover from C++ style `enum struct`)\n - #99795 (Delay a bug when failed to normalize trait ref during specialization)\n - #100029 (Prevent ICE for `doc_alias` on match arm, statement, expression)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "77717b7ad2e32bc0d7b20c637953a81601cffaa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77717b7ad2e32bc0d7b20c637953a81601cffaa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caee496150a551fe1b9f77b3a58f7e66d54bc824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caee496150a551fe1b9f77b3a58f7e66d54bc824", "html_url": "https://github.com/rust-lang/rust/commit/caee496150a551fe1b9f77b3a58f7e66d54bc824", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caee496150a551fe1b9f77b3a58f7e66d54bc824/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ad56350cd3d7f8260c44433800f687f8e0ede28", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad56350cd3d7f8260c44433800f687f8e0ede28", "html_url": "https://github.com/rust-lang/rust/commit/1ad56350cd3d7f8260c44433800f687f8e0ede28"}, {"sha": "f8e6617239a8412a983c9a6b6af79d0eff3cdce0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e6617239a8412a983c9a6b6af79d0eff3cdce0", "html_url": "https://github.com/rust-lang/rust/commit/f8e6617239a8412a983c9a6b6af79d0eff3cdce0"}], "stats": {"total": 598, "additions": 496, "deletions": 102}, "files": [{"sha": "d32b1edcd8fd75b7e942d5d4e833f04eea9e4c3c", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -2619,6 +2619,34 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             );\n         }\n \n+        // Now equate closure substs to regions inherited from `typeck_root_def_id`. Fixes #98589.\n+        let typeck_root_def_id = tcx.typeck_root_def_id(self.body.source.def_id());\n+        let typeck_root_substs = ty::InternalSubsts::identity_for_item(tcx, typeck_root_def_id);\n+\n+        let parent_substs = match tcx.def_kind(def_id) {\n+            DefKind::Closure => substs.as_closure().parent_substs(),\n+            DefKind::Generator => substs.as_generator().parent_substs(),\n+            DefKind::InlineConst => substs.as_inline_const().parent_substs(),\n+            other => bug!(\"unexpected item {:?}\", other),\n+        };\n+        let parent_substs = tcx.mk_substs(parent_substs.iter());\n+\n+        assert_eq!(typeck_root_substs.len(), parent_substs.len());\n+        if let Err(_) = self.eq_substs(\n+            typeck_root_substs,\n+            parent_substs,\n+            location.to_locations(),\n+            ConstraintCategory::BoringNoLocation,\n+        ) {\n+            span_mirbug!(\n+                self,\n+                def_id,\n+                \"could not relate closure to parent {:?} != {:?}\",\n+                typeck_root_substs,\n+                parent_substs\n+            );\n+        }\n+\n         tcx.predicates_of(def_id).instantiate(tcx, substs)\n     }\n "}, {"sha": "c97a6a1a6587a56aa13f07c564c1e4af4430ee99", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -38,6 +38,23 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         .relate(a, b)?;\n         Ok(())\n     }\n+\n+    /// Add sufficient constraints to ensure `a == b`. See also [Self::relate_types].\n+    pub(super) fn eq_substs(\n+        &mut self,\n+        a: ty::SubstsRef<'tcx>,\n+        b: ty::SubstsRef<'tcx>,\n+        locations: Locations,\n+        category: ConstraintCategory<'tcx>,\n+    ) -> Fallible<()> {\n+        TypeRelating::new(\n+            self.infcx,\n+            NllTypeRelatingDelegate::new(self, locations, category, UniverseInfo::other()),\n+            ty::Variance::Invariant,\n+        )\n+        .relate(a, b)?;\n+        Ok(())\n+    }\n }\n \n struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {"}, {"sha": "63207803e327f0ced4f561b193934dae9c3c2b88", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -2675,7 +2675,7 @@ fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     let llvm_target = &sess.target.llvm_target;\n     if sess.target.vendor != \"apple\"\n         || !matches!(os.as_ref(), \"ios\" | \"tvos\" | \"watchos\")\n-        || flavor != LinkerFlavor::Gcc\n+        || (flavor != LinkerFlavor::Gcc && flavor != LinkerFlavor::Lld(LldFlavor::Ld64))\n     {\n         return;\n     }\n@@ -2706,13 +2706,16 @@ fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n             return;\n         }\n     };\n-    if llvm_target.contains(\"macabi\") {\n-        cmd.args(&[\"-target\", llvm_target])\n-    } else {\n-        let arch_name = llvm_target.split('-').next().expect(\"LLVM target must have a hyphen\");\n-        cmd.args(&[\"-arch\", arch_name])\n+\n+    match flavor {\n+        LinkerFlavor::Gcc => {\n+            cmd.args(&[\"-isysroot\", &sdk_root, \"-Wl,-syslibroot\", &sdk_root]);\n+        }\n+        LinkerFlavor::Lld(LldFlavor::Ld64) => {\n+            cmd.args(&[\"-syslibroot\", &sdk_root]);\n+        }\n+        _ => unreachable!(),\n     }\n-    cmd.args(&[\"-isysroot\", &sdk_root, \"-Wl,-syslibroot\", &sdk_root]);\n }\n \n fn get_apple_sdk_root(sdk_name: &str) -> Result<String, String> {"}, {"sha": "c8a63c9c3f8d34b2b49d12bcb84397ac29d8844d", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{self, subst::SubstsRef, AdtDef, Ty};\n use rustc_span::DUMMY_SP;\n use rustc_trait_selection::traits::{\n-    self, FulfillmentContext, ImplSource, Obligation, ObligationCause, SelectionContext,\n+    self, ImplSource, Obligation, ObligationCause, SelectionContext, TraitEngineExt,\n };\n \n use super::ConstCx;\n@@ -191,7 +191,7 @@ impl Qualif for NeedsNonConstDrop {\n \n             // If we successfully found one, then select all of the predicates\n             // implied by our const drop impl.\n-            let mut fcx = FulfillmentContext::new();\n+            let mut fcx = <dyn TraitEngine<'tcx>>::new(cx.tcx);\n             for nested in impl_src.nested_obligations() {\n                 fcx.register_predicate_obligation(&infcx, nested);\n             }"}, {"sha": "6236dea10c88f3c23258a1821f56199c7bef3085", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -60,51 +60,7 @@ pub enum Target {\n \n impl Display for Target {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(\n-            f,\n-            \"{}\",\n-            match *self {\n-                Target::ExternCrate => \"extern crate\",\n-                Target::Use => \"use\",\n-                Target::Static => \"static item\",\n-                Target::Const => \"constant item\",\n-                Target::Fn => \"function\",\n-                Target::Closure => \"closure\",\n-                Target::Mod => \"module\",\n-                Target::ForeignMod => \"foreign module\",\n-                Target::GlobalAsm => \"global asm\",\n-                Target::TyAlias => \"type alias\",\n-                Target::OpaqueTy => \"opaque type\",\n-                Target::Enum => \"enum\",\n-                Target::Variant => \"enum variant\",\n-                Target::Struct => \"struct\",\n-                Target::Field => \"struct field\",\n-                Target::Union => \"union\",\n-                Target::Trait => \"trait\",\n-                Target::TraitAlias => \"trait alias\",\n-                Target::Impl => \"item\",\n-                Target::Expression => \"expression\",\n-                Target::Statement => \"statement\",\n-                Target::Arm => \"match arm\",\n-                Target::AssocConst => \"associated const\",\n-                Target::Method(kind) => match kind {\n-                    MethodKind::Inherent => \"inherent method\",\n-                    MethodKind::Trait { body: false } => \"required trait method\",\n-                    MethodKind::Trait { body: true } => \"provided trait method\",\n-                },\n-                Target::AssocTy => \"associated type\",\n-                Target::ForeignFn => \"foreign function\",\n-                Target::ForeignStatic => \"foreign static item\",\n-                Target::ForeignTy => \"foreign type\",\n-                Target::GenericParam(kind) => match kind {\n-                    GenericParamKind::Type => \"type parameter\",\n-                    GenericParamKind::Lifetime => \"lifetime parameter\",\n-                    GenericParamKind::Const => \"const parameter\",\n-                },\n-                Target::MacroDef => \"macro def\",\n-                Target::Param => \"function param\",\n-            }\n-        )\n+        write!(f, \"{}\", Self::name(*self))\n     }\n }\n \n@@ -185,4 +141,48 @@ impl Target {\n             hir::GenericParamKind::Const { .. } => Target::GenericParam(GenericParamKind::Const),\n         }\n     }\n+\n+    pub fn name(self) -> &'static str {\n+        match self {\n+            Target::ExternCrate => \"extern crate\",\n+            Target::Use => \"use\",\n+            Target::Static => \"static item\",\n+            Target::Const => \"constant item\",\n+            Target::Fn => \"function\",\n+            Target::Closure => \"closure\",\n+            Target::Mod => \"module\",\n+            Target::ForeignMod => \"foreign module\",\n+            Target::GlobalAsm => \"global asm\",\n+            Target::TyAlias => \"type alias\",\n+            Target::OpaqueTy => \"opaque type\",\n+            Target::Enum => \"enum\",\n+            Target::Variant => \"enum variant\",\n+            Target::Struct => \"struct\",\n+            Target::Field => \"struct field\",\n+            Target::Union => \"union\",\n+            Target::Trait => \"trait\",\n+            Target::TraitAlias => \"trait alias\",\n+            Target::Impl => \"implementation block\",\n+            Target::Expression => \"expression\",\n+            Target::Statement => \"statement\",\n+            Target::Arm => \"match arm\",\n+            Target::AssocConst => \"associated const\",\n+            Target::Method(kind) => match kind {\n+                MethodKind::Inherent => \"inherent method\",\n+                MethodKind::Trait { body: false } => \"required trait method\",\n+                MethodKind::Trait { body: true } => \"provided trait method\",\n+            },\n+            Target::AssocTy => \"associated type\",\n+            Target::ForeignFn => \"foreign function\",\n+            Target::ForeignStatic => \"foreign static item\",\n+            Target::ForeignTy => \"foreign type\",\n+            Target::GenericParam(kind) => match kind {\n+                GenericParamKind::Type => \"type parameter\",\n+                GenericParamKind::Lifetime => \"lifetime parameter\",\n+                GenericParamKind::Const => \"const parameter\",\n+            },\n+            Target::MacroDef => \"macro def\",\n+            Target::Param => \"function param\",\n+        }\n+    }\n }"}, {"sha": "5670729253dace0bce275dc43bfe4304af8d2a7d", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -1216,6 +1216,25 @@ impl<'a> Parser<'a> {\n \n     /// Parses an enum declaration.\n     fn parse_item_enum(&mut self) -> PResult<'a, ItemInfo> {\n+        if self.token.is_keyword(kw::Struct) {\n+            let mut err = self.struct_span_err(\n+                self.prev_token.span.to(self.token.span),\n+                \"`enum` and `struct` are mutually exclusive\",\n+            );\n+            err.span_suggestion(\n+                self.prev_token.span.to(self.token.span),\n+                \"replace `enum struct` with\",\n+                \"enum\",\n+                Applicability::MachineApplicable,\n+            );\n+            if self.look_ahead(1, |t| t.is_ident()) {\n+                self.bump();\n+                err.emit();\n+            } else {\n+                return Err(err);\n+            }\n+        }\n+\n         let id = self.parse_ident()?;\n         let mut generics = self.parse_generics()?;\n         generics.where_clause = self.parse_where_clause()?;"}, {"sha": "5b7d44e41cf6d35b317d3e710e70eb110831402f", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -596,8 +596,6 @@ impl CheckAttrVisitor<'_> {\n \n         let span = meta.span();\n         if let Some(location) = match target {\n-            Target::Impl => Some(\"implementation block\"),\n-            Target::ForeignMod => Some(\"extern block\"),\n             Target::AssocTy => {\n                 let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n                 let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n@@ -619,7 +617,34 @@ impl CheckAttrVisitor<'_> {\n             }\n             // we check the validity of params elsewhere\n             Target::Param => return false,\n-            _ => None,\n+            Target::Expression\n+            | Target::Statement\n+            | Target::Arm\n+            | Target::ForeignMod\n+            | Target::Closure\n+            | Target::Impl => Some(target.name()),\n+            Target::ExternCrate\n+            | Target::Use\n+            | Target::Static\n+            | Target::Const\n+            | Target::Fn\n+            | Target::Mod\n+            | Target::GlobalAsm\n+            | Target::TyAlias\n+            | Target::OpaqueTy\n+            | Target::Enum\n+            | Target::Variant\n+            | Target::Struct\n+            | Target::Field\n+            | Target::Union\n+            | Target::Trait\n+            | Target::TraitAlias\n+            | Target::Method(..)\n+            | Target::ForeignFn\n+            | Target::ForeignStatic\n+            | Target::ForeignTy\n+            | Target::GenericParam(..)\n+            | Target::MacroDef => None,\n         } {\n             tcx.sess.emit_err(errors::DocAliasBadLocation { span, attr_str, location });\n             return false;"}, {"sha": "1dad07a9a42a4012046a6af46a92ff87dcb9c89b", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_macabi.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -1,9 +1,14 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{FramePointer, Target, TargetOptions};\n+use crate::spec::{FramePointer, LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n+    let llvm_target = \"arm64-apple-ios14.0-macabi\";\n+\n+    let mut base = opts(\"ios\", Arch::Arm64_macabi);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-target\", llvm_target]);\n+\n     Target {\n-        llvm_target: \"arm64-apple-ios14.0-macabi\".into(),\n+        llvm_target: llvm_target.into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"aarch64\".into(),\n@@ -21,7 +26,7 @@ pub fn target() -> Target {\n                 -disable-llvm-passes\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..opts(\"ios\", Arch::Arm64_macabi)\n+            ..base\n         },\n     }\n }"}, {"sha": "15e4fb9be6303e520e909c05685c7f6cc3afb2b8", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -109,15 +109,34 @@ pub fn ios_llvm_target(arch: &str) -> String {\n     format!(\"{}-apple-ios{}.{}.0\", arch, major, minor)\n }\n \n+pub fn ios_lld_platform_version() -> String {\n+    let (major, minor) = ios_deployment_target();\n+    format!(\"{}.{}\", major, minor)\n+}\n+\n pub fn ios_sim_llvm_target(arch: &str) -> String {\n     let (major, minor) = ios_deployment_target();\n     format!(\"{}-apple-ios{}.{}.0-simulator\", arch, major, minor)\n }\n \n+fn tvos_deployment_target() -> (u32, u32) {\n+    deployment_target(\"TVOS_DEPLOYMENT_TARGET\").unwrap_or((7, 0))\n+}\n+\n+pub fn tvos_lld_platform_version() -> String {\n+    let (major, minor) = tvos_deployment_target();\n+    format!(\"{}.{}\", major, minor)\n+}\n+\n fn watchos_deployment_target() -> (u32, u32) {\n     deployment_target(\"WATCHOS_DEPLOYMENT_TARGET\").unwrap_or((5, 0))\n }\n \n+pub fn watchos_lld_platform_version() -> String {\n+    let (major, minor) = watchos_deployment_target();\n+    format!(\"{}.{}\", major, minor)\n+}\n+\n pub fn watchos_sim_llvm_target(arch: &str) -> String {\n     let (major, minor) = watchos_deployment_target();\n     format!(\"{}-apple-watchos{}.{}.0-simulator\", arch, major, minor)"}, {"sha": "d77558f0f842940ce991f701a5989d761e9c427c", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -1,4 +1,4 @@\n-use crate::{spec::cvs, spec::TargetOptions};\n+use crate::spec::{cvs, LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n use std::borrow::Cow;\n \n use Arch::*;\n@@ -17,6 +17,18 @@ pub enum Arch {\n     Arm64_sim,\n }\n \n+fn target_arch_name(arch: Arch) -> &'static str {\n+    match arch {\n+        Armv7 => \"armv7\",\n+        Armv7k => \"armv7k\",\n+        Armv7s => \"armv7s\",\n+        Arm64 | Arm64_macabi | Arm64_sim => \"arm64\",\n+        Arm64_32 => \"arm64_32\",\n+        I386 => \"i386\",\n+        X86_64 | X86_64_macabi => \"x86_64\",\n+    }\n+}\n+\n fn target_abi(arch: Arch) -> &'static str {\n     match arch {\n         Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 => \"\",\n@@ -49,11 +61,51 @@ fn link_env_remove(arch: Arch) -> Cow<'static, [Cow<'static, str>]> {\n     }\n }\n \n+fn pre_link_args(os: &'static str, arch: Arch) -> LinkArgs {\n+    let mut args = LinkArgs::new();\n+\n+    let target_abi = target_abi(arch);\n+\n+    let platform_name = match target_abi {\n+        \"sim\" => format!(\"{}-simulator\", os),\n+        \"macabi\" => \"mac-catalyst\".to_string(),\n+        _ => os.to_string(),\n+    };\n+\n+    let platform_version = match os.as_ref() {\n+        \"ios\" => super::apple_base::ios_lld_platform_version(),\n+        \"tvos\" => super::apple_base::tvos_lld_platform_version(),\n+        \"watchos\" => super::apple_base::watchos_lld_platform_version(),\n+        _ => unreachable!(),\n+    };\n+\n+    let arch_str = target_arch_name(arch);\n+\n+    if target_abi != \"macabi\" {\n+        args.insert(LinkerFlavor::Gcc, vec![\"-arch\".into(), arch_str.into()]);\n+    }\n+\n+    args.insert(\n+        LinkerFlavor::Lld(LldFlavor::Ld64),\n+        vec![\n+            \"-arch\".into(),\n+            arch_str.into(),\n+            \"-platform_version\".into(),\n+            platform_name.into(),\n+            platform_version.clone().into(),\n+            platform_version.into(),\n+        ],\n+    );\n+\n+    args\n+}\n+\n pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n     TargetOptions {\n         abi: target_abi(arch).into(),\n         cpu: target_cpu(arch).into(),\n         dynamic_linking: false,\n+        pre_link_args: pre_link_args(os, arch),\n         link_env_remove: link_env_remove(arch),\n         has_thread_local: false,\n         ..super::apple_base::opts(os)"}, {"sha": "1db6db78b17e4f8e0e7125270f6110ccbf843b55", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -46,7 +46,10 @@ impl Target {\n                         )\n                     }\n                     (LinkerFlavor::Gcc, LldFlavor::Ld64) => {\n-                        assert_matches!(flavor, LinkerFlavor::Gcc)\n+                        assert_matches!(\n+                            flavor,\n+                            LinkerFlavor::Lld(LldFlavor::Ld64) | LinkerFlavor::Gcc\n+                        )\n                     }\n                     (LinkerFlavor::Msvc | LinkerFlavor::Lld(LldFlavor::Link), LldFlavor::Link) => {\n                         assert_matches!("}, {"sha": "2122bcd37fc07aae6f95e39968884bd7ee3e43ce", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -1,10 +1,14 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{StackProbeType, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"ios\", Arch::X86_64_macabi);\n+    let llvm_target = \"x86_64-apple-ios13.0-macabi\";\n+\n+    let mut base = opts(\"ios\", Arch::X86_64_macabi);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-target\", llvm_target]);\n+\n     Target {\n-        llvm_target: \"x86_64-apple-ios13.0-macabi\".into(),\n+        llvm_target: llvm_target.into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),"}, {"sha": "294c81d0b2111590f5e408a6a2d1d42b7f2cee8d", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -205,7 +205,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             // At this point, we already have all of the bounds we need. FulfillmentContext is used\n             // to store all of the necessary region/lifetime bounds in the InferContext, as well as\n             // an additional sanity check.\n-            let mut fulfill = FulfillmentContext::new();\n+            let mut fulfill = <dyn TraitEngine<'tcx>>::new(tcx);\n             fulfill.register_bound(&infcx, full_env, ty, trait_did, ObligationCause::dummy());\n             let errors = fulfill.select_all_or_error(&infcx);\n "}, {"sha": "c0700748c79f9d7df78b0bf21458e92ebd509974", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -5,7 +5,7 @@\n \n use crate::infer::{DefiningAnchor, TyCtxtInferExt};\n use crate::traits::{\n-    FulfillmentContext, ImplSource, Obligation, ObligationCause, SelectionContext, TraitEngine,\n+    ImplSource, Obligation, ObligationCause, SelectionContext, TraitEngine, TraitEngineExt,\n     Unimplemented,\n };\n use rustc_middle::traits::CodegenObligationError;\n@@ -53,7 +53,7 @@ pub fn codegen_fulfill_obligation<'tcx>(\n         // Currently, we use a fulfillment context to completely resolve\n         // all nested obligations. This is because they can inform the\n         // inference of the impl's type parameters.\n-        let mut fulfill_cx = FulfillmentContext::new();\n+        let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new(tcx);\n         let impl_source = selection.map(|predicate| {\n             fulfill_cx.register_predicate_obligation(&infcx, predicate);\n         });"}, {"sha": "1c8cdf4ca8fff52aa9f44ab4f868d53b012a9593", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -11,7 +11,7 @@ use crate::traits::util::impl_subject_and_oblig;\n use crate::traits::SkipLeakCheck;\n use crate::traits::{\n     self, FulfillmentContext, Normalized, Obligation, ObligationCause, PredicateObligation,\n-    PredicateObligations, SelectionContext,\n+    PredicateObligations, SelectionContext, TraitEngineExt,\n };\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::Diagnostic;\n@@ -385,7 +385,7 @@ fn resolve_negative_obligation<'cx, 'tcx>(\n         return false;\n     };\n \n-    let mut fulfillment_cx = FulfillmentContext::new();\n+    let mut fulfillment_cx = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n     fulfillment_cx.register_predicate_obligation(infcx, o);\n \n     let errors = fulfillment_cx.select_all_or_error(infcx);"}, {"sha": "9c6bb0731f441583c18b7cb9fe7d69869eb0f293", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -164,7 +164,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n         // The handling of regions in this area of the code is terrible,\n         // see issue #29149. We should be able to improve on this with\n         // NLL.\n-        let mut fulfill_cx = FulfillmentContext::new();\n+        let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n \n         // We can use a dummy node-id here because we won't pay any mind\n         // to region obligations that arise (there shouldn't really be any"}, {"sha": "6223c5ea33913e2dc300c25320abeb1997ee9eeb", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -14,7 +14,9 @@ use specialization_graph::GraphExt;\n \n use crate::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use crate::traits::select::IntercrateAmbiguityCause;\n-use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n+use crate::traits::{\n+    self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine, TraitEngineExt,\n+};\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_errors::{struct_span_err, EmissionGuarantee, LintDiagnosticBuilder};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -24,8 +26,8 @@ use rustc_session::lint::builtin::COHERENCE_LEAK_CHECK;\n use rustc_session::lint::builtin::ORDER_DEPENDENT_TRAIT_OBJECTS;\n use rustc_span::{Span, DUMMY_SP};\n \n-use super::util;\n-use super::{FulfillmentContext, SelectionContext};\n+use super::SelectionContext;\n+use super::{util, FulfillmentContext};\n \n /// Information pertinent to an overlapping impl error.\n #[derive(Debug)]\n@@ -149,8 +151,6 @@ pub(super) fn specializes(tcx: TyCtxt<'_>, (impl1_def_id, impl2_def_id): (DefId,\n \n     // Create an infcx, taking the predicates of impl1 as assumptions:\n     tcx.infer_ctxt().enter(|infcx| {\n-        // Normalize the trait reference. The WF rules ought to ensure\n-        // that this always succeeds.\n         let impl1_trait_ref = match traits::fully_normalize(\n             &infcx,\n             FulfillmentContext::new(),\n@@ -159,8 +159,12 @@ pub(super) fn specializes(tcx: TyCtxt<'_>, (impl1_def_id, impl2_def_id): (DefId,\n             impl1_trait_ref,\n         ) {\n             Ok(impl1_trait_ref) => impl1_trait_ref,\n-            Err(err) => {\n-                bug!(\"failed to fully normalize {:?}: {:?}\", impl1_trait_ref, err);\n+            Err(_errors) => {\n+                tcx.sess.delay_span_bug(\n+                    tcx.def_span(impl1_def_id),\n+                    format!(\"failed to fully normalize {impl1_trait_ref}\"),\n+                );\n+                impl1_trait_ref\n             }\n         };\n \n@@ -207,7 +211,7 @@ fn fulfill_implication<'a, 'tcx>(\n     // (which are packed up in penv)\n \n     infcx.save_and_restore_in_snapshot_flag(|infcx| {\n-        let mut fulfill_cx = FulfillmentContext::new();\n+        let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n         for oblig in obligations.chain(more_obligations) {\n             fulfill_cx.register_predicate_obligation(&infcx, oblig);\n         }"}, {"sha": "5829a0f92ee410a6ac17997a64629163fd6a600a", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::{InferCtxt, TyCtxtInferExt};\n use crate::traits::ObligationCause;\n-use crate::traits::{self, TraitEngine};\n+use crate::traits::{TraitEngine, TraitEngineExt};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n@@ -72,7 +72,7 @@ fn type_marked_structural<'tcx>(\n     adt_ty: Ty<'tcx>,\n     cause: ObligationCause<'tcx>,\n ) -> bool {\n-    let mut fulfillment_cx = traits::FulfillmentContext::new();\n+    let mut fulfillment_cx = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n     // require `#[derive(PartialEq)]`\n     let structural_peq_def_id =\n         infcx.tcx.require_lang_item(LangItem::StructuralPeq, Some(cause.span));"}, {"sha": "e3e78f70b15ef9014ba115a63405fde35b50a283", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -14,8 +14,7 @@ use rustc_span::source_map::DUMMY_SP;\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n use rustc_trait_selection::traits::query::{CanonicalTyGoal, Fallible, NoSolution};\n use rustc_trait_selection::traits::wf;\n-use rustc_trait_selection::traits::FulfillmentContext;\n-use rustc_trait_selection::traits::TraitEngine;\n+use rustc_trait_selection::traits::{TraitEngine, TraitEngineExt};\n use smallvec::{smallvec, SmallVec};\n \n pub(crate) fn provide(p: &mut Providers) {\n@@ -52,7 +51,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n \n     let mut implied_bounds = vec![];\n \n-    let mut fulfill_cx = FulfillmentContext::new();\n+    let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new(tcx);\n \n     while let Some(arg) = wf_args.pop() {\n         if !checked_wf_args.insert(arg) {"}, {"sha": "50946cc1def0c64656009ac0872fe6fc78db8a76", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -109,7 +109,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                 // it is not immediately clear why Copy is not implemented for a field, since\n                 // all we point at is the field itself.\n                 tcx.infer_ctxt().ignoring_regions().enter(|infcx| {\n-                    let mut fulfill_cx = traits::FulfillmentContext::new();\n+                    let mut fulfill_cx = <dyn TraitEngine<'_>>::new(tcx);\n                     fulfill_cx.register_bound(\n                         &infcx,\n                         param_env,"}, {"sha": "55c7a15f9bcd13f2993c8e8ba339084a6b604f70", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -7,7 +7,7 @@ use rustc_infer::traits::TraitEngine;\n use rustc_infer::traits::{ObligationCause, WellFormedLoc};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Region, ToPredicate, TyCtxt, TypeFoldable, TypeFolder};\n-use rustc_trait_selection::traits;\n+use rustc_trait_selection::traits::{self, TraitEngineExt};\n \n pub fn provide(providers: &mut Providers) {\n     *providers = Providers { diagnostic_hir_wf_check, ..*providers };\n@@ -66,7 +66,7 @@ fn diagnostic_hir_wf_check<'tcx>(\n     impl<'tcx> Visitor<'tcx> for HirWfCheck<'tcx> {\n         fn visit_ty(&mut self, ty: &'tcx hir::Ty<'tcx>) {\n             self.tcx.infer_ctxt().enter(|infcx| {\n-                let mut fulfill = traits::FulfillmentContext::new();\n+                let mut fulfill = <dyn TraitEngine<'tcx>>::new(self.tcx);\n                 let tcx_ty =\n                     self.icx.to_ty(ty).fold_with(&mut EraseAllBoundRegions { tcx: self.tcx });\n                 let cause = traits::ObligationCause::new("}, {"sha": "229a64650848cff7eae1401fe3a5cff720d1354a", "filename": "compiler/rustc_typeck/src/outlives/outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -3,7 +3,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_trait_selection::infer::InferCtxt;\n use rustc_trait_selection::traits::query::type_op::{self, TypeOp, TypeOpOutput};\n use rustc_trait_selection::traits::query::NoSolution;\n-use rustc_trait_selection::traits::{FulfillmentContext, ObligationCause, TraitEngine};\n+use rustc_trait_selection::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n \n pub use rustc_middle::traits::query::OutlivesBound;\n \n@@ -63,7 +63,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         if let Some(constraints) = constraints {\n             // Instantiation may have produced new inference variables and constraints on those\n             // variables. Process these constraints.\n-            let mut fulfill_cx = FulfillmentContext::new();\n+            let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new(self.tcx);\n             let cause = ObligationCause::misc(span, body_id);\n             for &constraint in &constraints.outlives {\n                 let obligation = self.query_outlives_constraint_to_obligation("}, {"sha": "71f070f2678b36c910f9868ff94ea0c86762ac76", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -24,7 +24,10 @@ pub(crate) struct AutoTraitFinder<'a, 'tcx> {\n     pub(crate) cx: &'a mut core::DocContext<'tcx>,\n }\n \n-impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n+impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx>\n+where\n+    'tcx: 'a, // should be an implied bound; rustc bug #98852.\n+{\n     pub(crate) fn new(cx: &'a mut core::DocContext<'tcx>) -> Self {\n         AutoTraitFinder { cx }\n     }"}, {"sha": "85c9516236c94484872270dff3059572432e9d62", "filename": "src/test/rustdoc-ui/check-doc-alias-attr-location.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.stderr?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -1,4 +1,4 @@\n-error: `#[doc(alias = \"...\")]` isn't allowed on extern block\n+error: `#[doc(alias = \"...\")]` isn't allowed on foreign module\n   --> $DIR/check-doc-alias-attr-location.rs:7:7\n    |\n LL | #[doc(alias = \"foo\")]"}, {"sha": "310d1f720eb7cb6800ed21c32312e80700d1ba9d", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -212,7 +212,7 @@ note: the lint level is defined here\n LL | #![warn(unused_attributes, unknown_lints)]\n    |         ^^^^^^^^^^^^^^^^^\n \n-warning: `#[automatically_derived]` only has an effect on items\n+warning: `#[automatically_derived]` only has an effect on implementation blocks\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:266:1\n    |\n LL | #[automatically_derived]\n@@ -515,25 +515,25 @@ warning: `#[path]` only has an effect on modules\n LL |     #[path = \"3800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^\n \n-warning: `#[automatically_derived]` only has an effect on items\n+warning: `#[automatically_derived]` only has an effect on implementation blocks\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:269:17\n    |\n LL |     mod inner { #![automatically_derived] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: `#[automatically_derived]` only has an effect on items\n+warning: `#[automatically_derived]` only has an effect on implementation blocks\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:272:5\n    |\n LL |     #[automatically_derived] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: `#[automatically_derived]` only has an effect on items\n+warning: `#[automatically_derived]` only has an effect on implementation blocks\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:275:5\n    |\n LL |     #[automatically_derived] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: `#[automatically_derived]` only has an effect on items\n+warning: `#[automatically_derived]` only has an effect on implementation blocks\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:278:5\n    |\n LL |     #[automatically_derived] type T = S;\n@@ -923,7 +923,7 @@ warning: `#[must_use]` has no effect when applied to a type alias\n LL |     #[must_use] type T = S;\n    |     ^^^^^^^^^^^\n \n-warning: `#[must_use]` has no effect when applied to an item\n+warning: `#[must_use]` has no effect when applied to an implementation block\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:614:5\n    |\n LL |     #[must_use] impl S { }"}, {"sha": "317d81c591d55cd5cdb0cec79b306eb14ae84376", "filename": "src/test/ui/lint/unused/unused_attributes-must_use.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -45,7 +45,7 @@ error: `#[must_use]` has no effect when applied to a static item\n LL | #[must_use]\n    | ^^^^^^^^^^^\n \n-error: `#[must_use]` has no effect when applied to an item\n+error: `#[must_use]` has no effect when applied to an implementation block\n   --> $DIR/unused_attributes-must_use.rs:33:1\n    |\n LL | #[must_use]\n@@ -69,7 +69,7 @@ error: `#[must_use]` has no effect when applied to a type parameter\n LL | fn qux<#[must_use] T>(_: T) {}\n    |        ^^^^^^^^^^^\n \n-error: `#[must_use]` has no effect when applied to an item\n+error: `#[must_use]` has no effect when applied to an implementation block\n   --> $DIR/unused_attributes-must_use.rs:79:1\n    |\n LL | #[must_use]"}, {"sha": "6cc4340bbd7335a747167b051036cd618136dde7", "filename": "src/test/ui/nll/issue-98589-closures-relate-named-regions.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -0,0 +1,36 @@\n+// Regression test for #98589.\n+// Previously, named lifetime `'a` that appears in the closure was unrelated to `'a`\n+// that appears in the parent function iff `'a` is early-bound.\n+// This made the following tests pass borrowck.\n+\n+// check-fail\n+\n+// The bound `'a: 'a` ensures that `'a` is early-bound.\n+fn test_early_early<'a: 'a, 'b: 'b>() {\n+    || { None::<&'a &'b ()>; };\n+    //~^ ERROR lifetime may not live long enough\n+}\n+\n+fn test_early_late<'a: 'a, 'b>() {\n+    || { None::<&'a &'b ()>; };\n+    //~^ ERROR lifetime may not live long enough\n+}\n+\n+// No early-bound lifetime; included for completeness.\n+fn test_late_late<'a, 'b>() {\n+    || { None::<&'a &'b ()>; };\n+    //~^ ERROR lifetime may not live long enough\n+}\n+\n+fn test_early_type<'a: 'a, T>() {\n+    || { None::<&'a T>; };\n+    //~^ ERROR the parameter type `T` may not live long enough\n+}\n+\n+// No early-bound lifetime; included for completeness.\n+fn test_late_type<'a, T>() {\n+    || { None::<&'a T>; };\n+    //~^ ERROR the parameter type `T` may not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "6def5602e70b3a4499bed252c82d7318794f11c4", "filename": "src/test/ui/nll/issue-98589-closures-relate-named-regions.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.stderr?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -0,0 +1,61 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:10:5\n+   |\n+LL | fn test_early_early<'a: 'a, 'b: 'b>() {\n+   |                     --      -- lifetime `'b` defined here\n+   |                     |\n+   |                     lifetime `'a` defined here\n+LL |     || { None::<&'a &'b ()>; };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:15:10\n+   |\n+LL | fn test_early_late<'a: 'a, 'b>() {\n+   |                    --      -- lifetime `'b` defined here\n+   |                    |\n+   |                    lifetime `'a` defined here\n+LL |     || { None::<&'a &'b ()>; };\n+   |          ^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:21:10\n+   |\n+LL | fn test_late_late<'a, 'b>() {\n+   |                   --  -- lifetime `'b` defined here\n+   |                   |\n+   |                   lifetime `'a` defined here\n+LL |     || { None::<&'a &'b ()>; };\n+   |          ^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:26:5\n+   |\n+LL |     || { None::<&'a T>; };\n+   |     ^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn test_early_type<'a: 'a, T: 'a>() {\n+   |                             ++++\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:32:5\n+   |\n+LL |     || { None::<&'a T>; };\n+   |     ^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn test_late_type<'a, T: 'a>() {\n+   |                        ++++\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "4b4a416b1ac828fa0ef7c6091032136f4a0e518e", "filename": "src/test/ui/parser/issue-99625-enum-struct-mutually-exclusive.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fparser%2Fissue-99625-enum-struct-mutually-exclusive.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fparser%2Fissue-99625-enum-struct-mutually-exclusive.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-99625-enum-struct-mutually-exclusive.fixed?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+\n+pub enum Range {\n+    //~^ ERROR `enum` and `struct` are mutually exclusive\n+    Valid {\n+        begin: u32,\n+        len: u32,\n+    },\n+    Out,\n+}\n+\n+fn main() {\n+}"}, {"sha": "9cc886641293b3731fb5fcb781143ded6dc0ba85", "filename": "src/test/ui/parser/issue-99625-enum-struct-mutually-exclusive.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fparser%2Fissue-99625-enum-struct-mutually-exclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fparser%2Fissue-99625-enum-struct-mutually-exclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-99625-enum-struct-mutually-exclusive.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+\n+pub enum struct Range {\n+    //~^ ERROR `enum` and `struct` are mutually exclusive\n+    Valid {\n+        begin: u32,\n+        len: u32,\n+    },\n+    Out,\n+}\n+\n+fn main() {\n+}"}, {"sha": "edc640bf5ec22c3c35c12263666b0d007bbde050", "filename": "src/test/ui/parser/issue-99625-enum-struct-mutually-exclusive.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fparser%2Fissue-99625-enum-struct-mutually-exclusive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fparser%2Fissue-99625-enum-struct-mutually-exclusive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-99625-enum-struct-mutually-exclusive.stderr?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -0,0 +1,8 @@\n+error: `enum` and `struct` are mutually exclusive\n+  --> $DIR/issue-99625-enum-struct-mutually-exclusive.rs:3:5\n+   |\n+LL | pub enum struct Range {\n+   |     ^^^^^^^^^^^ help: replace `enum struct` with: `enum`\n+\n+error: aborting due to previous error\n+"}, {"sha": "10609e5d8f4d99661e962928ed32bc4516510c5f", "filename": "src/test/ui/rustdoc/check-doc-alias-attr-location.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -21,6 +21,12 @@ impl Foo for Bar {\n     type X = i32;\n     fn foo(#[doc(alias = \"qux\")] _x: u32) -> Self::X {\n         //~^ ERROR\n-        0\n+        #[doc(alias = \"stmt\")] //~ ERROR\n+        let x = 0;\n+        #[doc(alias = \"expr\")] //~ ERROR\n+        match x {\n+            #[doc(alias = \"arm\")] //~ ERROR\n+            _ => 0\n+        }\n     }\n }"}, {"sha": "23c93a4ed8bdb248a867de0ddae844175e3f80c7", "filename": "src/test/ui/rustdoc/check-doc-alias-attr-location.stderr", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.stderr?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -4,7 +4,7 @@ error: allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed\n LL |     fn foo(#[doc(alias = \"qux\")] _x: u32) -> Self::X {\n    |            ^^^^^^^^^^^^^^^^^^^^^\n \n-error: `#[doc(alias = \"...\")]` isn't allowed on extern block\n+error: `#[doc(alias = \"...\")]` isn't allowed on foreign module\n   --> $DIR/check-doc-alias-attr-location.rs:9:7\n    |\n LL | #[doc(alias = \"foo\")]\n@@ -28,5 +28,23 @@ error: `#[doc(alias = \"...\")]` isn't allowed on type alias in implementation blo\n LL |     #[doc(alias = \"assoc\")]\n    |           ^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: `#[doc(alias = \"...\")]` isn't allowed on statement\n+  --> $DIR/check-doc-alias-attr-location.rs:24:15\n+   |\n+LL |         #[doc(alias = \"stmt\")]\n+   |               ^^^^^^^^^^^^^^\n+\n+error: `#[doc(alias = \"...\")]` isn't allowed on expression\n+  --> $DIR/check-doc-alias-attr-location.rs:26:15\n+   |\n+LL |         #[doc(alias = \"expr\")]\n+   |               ^^^^^^^^^^^^^^\n+\n+error: `#[doc(alias = \"...\")]` isn't allowed on match arm\n+  --> $DIR/check-doc-alias-attr-location.rs:28:19\n+   |\n+LL |             #[doc(alias = \"arm\")]\n+   |                   ^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "c49119f9c095b73e07a3361c57e6d72bfeb69dd5", "filename": "src/test/ui/specialization/issue-43037.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -0,0 +1,20 @@\n+#![feature(specialization)]\n+#![allow(incomplete_features)]\n+\n+trait X {}\n+trait Y: X {}\n+trait Z {\n+    type Assoc: Y;\n+}\n+struct A<T>(T);\n+\n+impl<T> Y for T where T: X {}\n+impl<T: X> Z for A<T> {\n+    type Assoc = T;\n+}\n+\n+// this impl is invalid, but causes an ICE anyway\n+impl<T> From<<A<T> as Z>::Assoc> for T {}\n+//~^ ERROR type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+\n+fn main() {}"}, {"sha": "4249cd89477160e549188d49c1bf642336c99235", "filename": "src/test/ui/specialization/issue-43037.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.stderr?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -0,0 +1,12 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+  --> $DIR/issue-43037.rs:17:6\n+   |\n+LL | impl<T> From<<A<T> as Z>::Assoc> for T {}\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which it is implemented is local\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0210`."}, {"sha": "8ee5d3e2e58da627b5b3d942493867a70035300d", "filename": "src/test/ui/specialization/issue-45814.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.rs?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -0,0 +1,12 @@\n+//~ ERROR overflow evaluating the requirement `T: Trait<_>`\n+\n+#![feature(specialization)]\n+#![allow(incomplete_features)]\n+\n+pub trait Trait<T> {}\n+\n+default impl<T, U> Trait<T> for U {}\n+\n+impl<T> Trait<<T as Iterator>::Item> for T {}\n+\n+fn main() {}"}, {"sha": "ab6adf477c97888b7b4a7e182f9fbf5276263a35", "filename": "src/test/ui/specialization/issue-45814.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caee496150a551fe1b9f77b3a58f7e66d54bc824/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.stderr?ref=caee496150a551fe1b9f77b3a58f7e66d54bc824", "patch": "@@ -0,0 +1,14 @@\n+error[E0275]: overflow evaluating the requirement `T: Trait<_>`\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_45814`)\n+note: required because of the requirements on the impl of `Trait<_>` for `T`\n+  --> $DIR/issue-45814.rs:8:20\n+   |\n+LL | default impl<T, U> Trait<T> for U {}\n+   |                    ^^^^^^^^     ^\n+   = note: 128 redundant requirements hidden\n+   = note: required because of the requirements on the impl of `Trait<_>` for `T`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}]}