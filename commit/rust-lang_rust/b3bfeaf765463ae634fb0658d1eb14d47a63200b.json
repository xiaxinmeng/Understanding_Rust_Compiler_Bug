{"sha": "b3bfeaf765463ae634fb0658d1eb14d47a63200b", "node_id": "C_kwDOAAsO6NoAKGIzYmZlYWY3NjU0NjNhZTYzNGZiMDY1OGQxZWIxNGQ0N2E2MzIwMGI", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-28T18:18:02Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-28T18:18:02Z"}, "message": "effvis: Stop considering crate root its own parent\n\nIt helped to reuse `update_def` for the crate root, but it created confusion and caused some mistakes when I implemented #109500", "tree": {"sha": "2e98b56e1b4a6f1f3b24b5efd50edfea50fef91a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e98b56e1b4a6f1f3b24b5efd50edfea50fef91a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3bfeaf765463ae634fb0658d1eb14d47a63200b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3bfeaf765463ae634fb0658d1eb14d47a63200b", "html_url": "https://github.com/rust-lang/rust/commit/b3bfeaf765463ae634fb0658d1eb14d47a63200b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3bfeaf765463ae634fb0658d1eb14d47a63200b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ede21e8932224f4a51d024c5d6b37189a701f2e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ede21e8932224f4a51d024c5d6b37189a701f2e4", "html_url": "https://github.com/rust-lang/rust/commit/ede21e8932224f4a51d024c5d6b37189a701f2e4"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "967fed687b6a8de21f9d27c20d5c695766314fe4", "filename": "compiler/rustc_middle/src/middle/privacy.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3bfeaf765463ae634fb0658d1eb14d47a63200b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3bfeaf765463ae634fb0658d1eb14d47a63200b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs?ref=b3bfeaf765463ae634fb0658d1eb14d47a63200b", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n-use rustc_span::def_id::LocalDefId;\n+use rustc_span::def_id::{LocalDefId, CRATE_DEF_ID};\n use std::hash::Hash;\n \n /// Represents the levels of effective visibility an item can have.\n@@ -107,6 +107,10 @@ impl EffectiveVisibilities {\n         })\n     }\n \n+    pub fn update_root(&mut self) {\n+        self.map.insert(CRATE_DEF_ID, EffectiveVisibility::from_vis(Visibility::Public));\n+    }\n+\n     // FIXME: Share code with `fn update`.\n     pub fn update_eff_vis(\n         &mut self,"}, {"sha": "3673f603d16767eae28d95f800c980cb3136fa58", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b3bfeaf765463ae634fb0658d1eb14d47a63200b/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3bfeaf765463ae634fb0658d1eb14d47a63200b/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=b3bfeaf765463ae634fb0658d1eb14d47a63200b", "patch": "@@ -61,7 +61,7 @@ impl Resolver<'_, '_> {\n         // For mod items `nearest_normal_mod` returns its argument, but we actually need its parent.\n         let normal_mod_id = self.nearest_normal_mod(def_id);\n         if normal_mod_id == def_id {\n-            self.tcx.opt_local_parent(def_id).map_or(Visibility::Public, Visibility::Restricted)\n+            Visibility::Restricted(self.tcx.local_parent(def_id))\n         } else {\n             Visibility::Restricted(normal_mod_id)\n         }\n@@ -80,12 +80,11 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n             r,\n             def_effective_visibilities: Default::default(),\n             import_effective_visibilities: Default::default(),\n-            current_private_vis: Visibility::Public,\n+            current_private_vis: Visibility::Restricted(CRATE_DEF_ID),\n             changed: false,\n         };\n \n-        visitor.update(CRATE_DEF_ID, CRATE_DEF_ID);\n-        visitor.current_private_vis = Visibility::Restricted(CRATE_DEF_ID);\n+        visitor.def_effective_visibilities.update_root();\n         visitor.set_bindings_effective_visibilities(CRATE_DEF_ID);\n \n         while visitor.changed {\n@@ -202,7 +201,7 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n         );\n     }\n \n-    fn update(&mut self, def_id: LocalDefId, parent_id: LocalDefId) {\n+    fn update_field(&mut self, def_id: LocalDefId, parent_id: LocalDefId) {\n         self.update_def(def_id, self.r.visibilities[&def_id], ParentId::Def(parent_id));\n     }\n }\n@@ -234,14 +233,14 @@ impl<'r, 'ast, 'tcx> Visitor<'ast> for EffectiveVisibilitiesVisitor<'ast, 'r, 't\n                 for variant in variants {\n                     let variant_def_id = self.r.local_def_id(variant.id);\n                     for field in variant.data.fields() {\n-                        self.update(self.r.local_def_id(field.id), variant_def_id);\n+                        self.update_field(self.r.local_def_id(field.id), variant_def_id);\n                     }\n                 }\n             }\n \n             ast::ItemKind::Struct(ref def, _) | ast::ItemKind::Union(ref def, _) => {\n                 for field in def.fields() {\n-                    self.update(self.r.local_def_id(field.id), def_id);\n+                    self.update_field(self.r.local_def_id(field.id), def_id);\n                 }\n             }\n "}]}