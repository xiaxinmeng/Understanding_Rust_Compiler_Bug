{"sha": "5610d22c8d58d12748308efb6e331e65618d11dc", "node_id": "C_kwDOAAsO6NoAKDU2MTBkMjJjOGQ1OGQxMjc0ODMwOGVmYjZlMzMxZTY1NjE4ZDExZGM", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-11-25T15:36:22Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-11-25T15:36:22Z"}, "message": "Re-enable `uninlined_format_args` on multiline `format!`\n\nBut do not display the code suggestion which can be sometimes completely broken (fortunately when applied it's valid)", "tree": {"sha": "1d467ade4f7bf5ea42f086f7e7de29f346052704", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d467ade4f7bf5ea42f086f7e7de29f346052704"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5610d22c8d58d12748308efb6e331e65618d11dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5610d22c8d58d12748308efb6e331e65618d11dc", "html_url": "https://github.com/rust-lang/rust/commit/5610d22c8d58d12748308efb6e331e65618d11dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5610d22c8d58d12748308efb6e331e65618d11dc/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efadb55733f1f852e18427376d3c5268139225cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/efadb55733f1f852e18427376d3c5268139225cd", "html_url": "https://github.com/rust-lang/rust/commit/efadb55733f1f852e18427376d3c5268139225cd"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "fd3ce2f3d6cd6ab503011cfe479a104abcb63a86", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5610d22c8d58d12748308efb6e331e65618d11dc/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5610d22c8d58d12748308efb6e331e65618d11dc/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=5610d22c8d58d12748308efb6e331e65618d11dc", "patch": "@@ -9,7 +9,10 @@ use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use itertools::Itertools;\n-use rustc_errors::Applicability;\n+use rustc_errors::{\n+    Applicability,\n+    SuggestionStyle::{CompletelyHidden, ShowCode},\n+};\n use rustc_hir::{Expr, ExprKind, HirId, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n@@ -286,18 +289,22 @@ fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_si\n         return;\n     }\n \n-    // Temporarily ignore multiline spans: https://github.com/rust-lang/rust/pull/102729#discussion_r988704308\n-    if fixes.iter().any(|(span, _)| cx.sess().source_map().is_multiline(*span)) {\n-        return;\n-    }\n+    // multiline span display suggestion is sometimes broken: https://github.com/rust-lang/rust/pull/102729#discussion_r988704308\n+    // in those cases, make the code suggestion hidden\n+    let multiline_fix = fixes.iter().any(|(span, _)| cx.sess().source_map().is_multiline(*span));\n \n     span_lint_and_then(\n         cx,\n         UNINLINED_FORMAT_ARGS,\n         call_site,\n         \"variables can be used directly in the `format!` string\",\n         |diag| {\n-            diag.multipart_suggestion(\"change this to\", fixes, Applicability::MachineApplicable);\n+            diag.multipart_suggestion_with_style(\n+                \"change this to\",\n+                fixes,\n+                Applicability::MachineApplicable,\n+                if multiline_fix { CompletelyHidden } else { ShowCode },\n+            );\n         },\n     );\n }"}, {"sha": "ca56c95c23f403f354212cf3dc789934b677de65", "filename": "tests/ui/uninlined_format_args.fixed", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5610d22c8d58d12748308efb6e331e65618d11dc/tests%2Fui%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5610d22c8d58d12748308efb6e331e65618d11dc/tests%2Fui%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.fixed?ref=5610d22c8d58d12748308efb6e331e65618d11dc", "patch": "@@ -44,9 +44,7 @@ fn tester(fn_arg: i32) {\n     println!(\"val='{local_i32}'\"); // space+tab\n     println!(\"val='{local_i32}'\"); // tab+space\n     println!(\n-        \"val='{\n-    }'\",\n-        local_i32\n+        \"val='{local_i32}'\"\n     );\n     println!(\"{local_i32}\");\n     println!(\"{fn_arg}\");\n@@ -110,8 +108,7 @@ fn tester(fn_arg: i32) {\n     println!(\"{local_f64:width$.prec$}\");\n     println!(\"{local_f64:width$.prec$} {local_f64} {width} {prec}\");\n     println!(\n-        \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n-        local_i32, width, prec,\n+        \"{local_i32:width$.prec$} {local_i32:prec$.width$} {width:local_i32$.prec$} {width:prec$.local_i32$} {prec:local_i32$.width$} {prec:width$.local_i32$}\",\n     );\n     println!(\n         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$} {3}\",\n@@ -142,9 +139,7 @@ fn tester(fn_arg: i32) {\n     println!(no_param_str!(), local_i32);\n \n     println!(\n-        \"{}\",\n-        // comment with a comma , in it\n-        val,\n+        \"{val}\",\n     );\n     println!(\"{val}\");\n "}, {"sha": "1182d57ce9b7e066d0275e808d04d2364e08feaa", "filename": "tests/ui/uninlined_format_args.stderr", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5610d22c8d58d12748308efb6e331e65618d11dc/tests%2Fui%2Funinlined_format_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5610d22c8d58d12748308efb6e331e65618d11dc/tests%2Fui%2Funinlined_format_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.stderr?ref=5610d22c8d58d12748308efb6e331e65618d11dc", "patch": "@@ -59,6 +59,16 @@ LL -     println!(\"val='{     }'\", local_i32); // tab+space\n LL +     println!(\"val='{local_i32}'\"); // tab+space\n    |\n \n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:46:5\n+   |\n+LL | /     println!(\n+LL | |         \"val='{\n+LL | |     }'\",\n+LL | |         local_i32\n+LL | |     );\n+   | |_____^\n+\n error: variables can be used directly in the `format!` string\n   --> $DIR/uninlined_format_args.rs:51:5\n    |\n@@ -767,6 +777,15 @@ LL -     println!(\"{:1$.2$} {0} {1} {2}\", local_f64, width, prec);\n LL +     println!(\"{local_f64:width$.prec$} {local_f64} {width} {prec}\");\n    |\n \n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:112:5\n+   |\n+LL | /     println!(\n+LL | |         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n+LL | |         local_i32, width, prec,\n+LL | |     );\n+   | |_____^\n+\n error: variables can be used directly in the `format!` string\n   --> $DIR/uninlined_format_args.rs:123:5\n    |\n@@ -815,6 +834,16 @@ LL -     println!(\"{}\", format!(\"{}\", local_i32));\n LL +     println!(\"{}\", format!(\"{local_i32}\"));\n    |\n \n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:144:5\n+   |\n+LL | /     println!(\n+LL | |         \"{}\",\n+LL | |         // comment with a comma , in it\n+LL | |         val,\n+LL | |     );\n+   | |_____^\n+\n error: variables can be used directly in the `format!` string\n   --> $DIR/uninlined_format_args.rs:149:5\n    |\n@@ -875,5 +904,5 @@ LL -     println!(\"expand='{}'\", local_i32);\n LL +     println!(\"expand='{local_i32}'\");\n    |\n \n-error: aborting due to 73 previous errors\n+error: aborting due to 76 previous errors\n "}]}