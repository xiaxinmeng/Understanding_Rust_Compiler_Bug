{"sha": "4baff4e15f003260de0cc17f419c418332e77149", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYWZmNGUxNWYwMDMyNjBkZTBjYzE3ZjQxOWM0MTgzMzJlNzcxNDk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-04-30T23:49:12Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-04-30T23:49:12Z"}, "message": "librustc: Remove `~\"string\"` and `&\"string\"` from the language", "tree": {"sha": "0946dec00c29f67e175970eb1792103e0a2e568d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0946dec00c29f67e175970eb1792103e0a2e568d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4baff4e15f003260de0cc17f419c418332e77149", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4baff4e15f003260de0cc17f419c418332e77149", "html_url": "https://github.com/rust-lang/rust/commit/4baff4e15f003260de0cc17f419c418332e77149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4baff4e15f003260de0cc17f419c418332e77149/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3f9f37014c77cda1ae53bf0984190e877aa413a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f9f37014c77cda1ae53bf0984190e877aa413a", "html_url": "https://github.com/rust-lang/rust/commit/a3f9f37014c77cda1ae53bf0984190e877aa413a"}], "stats": {"total": 130, "additions": 58, "deletions": 72}, "files": [{"sha": "9feceff537555a3692d5f6c4042272539d7da495", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=4baff4e15f003260de0cc17f419c418332e77149", "patch": "@@ -220,7 +220,9 @@ impl<'a> Parser<'a> {\n                         try!(self.parse_group_opts())\n                     } else {\n                         self.caps += 1;\n-                        self.stack.push(Paren(self.flags, self.caps, ~\"\"))\n+                        self.stack.push(Paren(self.flags,\n+                                              self.caps,\n+                                              \"\".to_owned()))\n                     }\n                 }\n                 ')' => {\n@@ -769,7 +771,7 @@ impl<'a> Parser<'a> {\n                     }\n                     if self.cur() == ':' {\n                         // Save the old flags with the opening paren.\n-                        self.stack.push(Paren(self.flags, 0, ~\"\"));\n+                        self.stack.push(Paren(self.flags, 0, \"\".to_owned()));\n                     }\n                     self.flags = flags;\n                     return Ok(())"}, {"sha": "f3c95490c1df2a248251aa5dc24741e3212fc7f0", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=4baff4e15f003260de0cc17f419c418332e77149", "patch": "@@ -1070,16 +1070,16 @@ pub fn build_session_(sopts: session::Options,\n \n pub fn parse_pretty(sess: &Session, name: &str) -> PpMode {\n     match name {\n-      &\"normal\" => PpmNormal,\n-      &\"expanded\" => PpmExpanded,\n-      &\"typed\" => PpmTyped,\n-      &\"expanded,identified\" => PpmExpandedIdentified,\n-      &\"identified\" => PpmIdentified,\n-      _ => {\n-        sess.fatal(\"argument to `pretty` must be one of `normal`, \\\n-                    `expanded`, `typed`, `identified`, \\\n-                    or `expanded,identified`\");\n-      }\n+        \"normal\" => PpmNormal,\n+        \"expanded\" => PpmExpanded,\n+        \"typed\" => PpmTyped,\n+        \"expanded,identified\" => PpmExpandedIdentified,\n+        \"identified\" => PpmIdentified,\n+        _ => {\n+            sess.fatal(\"argument to `pretty` must be one of `normal`, \\\n+                        `expanded`, `typed`, `identified`, \\\n+                        or `expanded,identified`\");\n+        }\n     }\n }\n "}, {"sha": "a0b9792d692f66e63b49dc9d147dabf4b6216f5e", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4baff4e15f003260de0cc17f419c418332e77149", "patch": "@@ -300,7 +300,7 @@ pub fn run_compiler(args: &[~str]) {\n         None::<d::PpMode> => {/* continue */ }\n     }\n \n-    if r.contains(&~\"ls\") {\n+    if r.contains(&(\"ls\".to_owned())) {\n         match input {\n             d::FileInput(ref ifile) => {\n                 let mut stdout = io::stdout();"}, {"sha": "ff84a7b0ca4672a0a5b0dc47bebe1635eeed797e", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=4baff4e15f003260de0cc17f419c418332e77149", "patch": "@@ -1036,7 +1036,7 @@ fn check_crate_attrs_usage(cx: &Context, attrs: &[ast::Attribute]) {\n         if !iter.any(|other_attr| { name.equiv(other_attr) }) {\n             cx.span_lint(AttributeUsage, attr.span, \"unknown crate attribute\");\n         }\n-        if name.equiv(& &\"link\") {\n+        if name.equiv(&(\"link\")) {\n             cx.tcx.sess.span_err(attr.span,\n                                  \"obsolete crate `link` attribute\");\n             cx.tcx.sess.note(\"the link attribute has been superceded by the crate_id \\"}, {"sha": "e54a24af9605911e02534ac8dfa682915c8a72a9", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=4baff4e15f003260de0cc17f419c418332e77149", "patch": "@@ -189,9 +189,9 @@ impl<'a, 'b> Reflector<'a, 'b> {\n           ty::ty_rptr(_, ref mt) => {\n               match ty::get(mt.ty).sty {\n                   ty::ty_vec(ref mt, None) => {\n-                      let (name, extra) = (~\"slice\", Vec::new());\n+                      let (name, extra) = (\"slice\".to_owned(), Vec::new());\n                       let extra = extra.append(self.c_mt(mt).as_slice());\n-                      self.visit(~\"evec_\" + name, extra.as_slice())\n+                      self.visit(\"evec_\".to_owned() + name, extra.as_slice())\n                   }\n                   ty::ty_str => self.visit(\"estr_slice\".to_owned(), &[]),\n                   _ => {"}, {"sha": "9c8e02b8e21979c407dbd06523b9e6bab2de2de9", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=4baff4e15f003260de0cc17f419c418332e77149", "patch": "@@ -647,8 +647,8 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n               ty::ty_vec(mt, None) => {\n                   fcx.type_error_message(pat.span,\n                                          |_| {\n-                                          ~\"unique vector patterns are no \\\n-                                            longer supported\"\n+                                            \"unique vector patterns are no \\\n+                                             longer supported\".to_owned()\n                                          },\n                                          expected,\n                                          None);"}, {"sha": "cc899b849b61adbe46d9411f7eba530f811c893f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=4baff4e15f003260de0cc17f419c418332e77149", "patch": "@@ -2566,10 +2566,6 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n     match expr.node {\n       ast::ExprVstore(ev, vst) => {\n         let typ = match ev.node {\n-          ast::ExprLit(lit) if ast_util::lit_is_str(lit) => {\n-            ast_expr_vstore_to_ty(fcx, ev, vst, || ty::mt{ ty: ty::mk_str(tcx),\n-                                                           mutbl: ast::MutImmutable })\n-          }\n           ast::ExprVec(ref args) => {\n             let mutability = match vst {\n                 ast::ExprVstoreMutSlice => ast::MutMutable,\n@@ -2622,8 +2618,13 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                             mutbl: mutability})\n             }\n           }\n-          _ =>\n-            tcx.sess.span_bug(expr.span, \"vstore modifier on non-sequence\")\n+          ast::ExprLit(_) => {\n+            tcx.sess.span_err(expr.span,\n+                              \"`~\\\"string\\\"` has been removed; use `\\\"string\\\".to_owned()` \\\n+                               instead\");\n+            ty::mk_err()\n+          }\n+          _ => tcx.sess.span_bug(expr.span, \"vstore modifier on non-sequence\"),\n         };\n         fcx.write_ty(ev.id, typ);\n         fcx.write_ty(id, typ);"}, {"sha": "da10561aa9e8b4d59869cdb8b1eb090295776cb4", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=4baff4e15f003260de0cc17f419c418332e77149", "patch": "@@ -1740,7 +1740,7 @@ impl<T: Iterator<char>> Builder<T> {\n             Some(NumberValue(n)) => { Ok(Number(n)) }\n             Some(BooleanValue(b)) => { Ok(Boolean(b)) }\n             Some(StringValue(ref mut s)) => {\n-                let mut temp = ~\"\";\n+                let mut temp = \"\".to_owned();\n                 swap(s, &mut temp);\n                 Ok(String(temp))\n             }"}, {"sha": "34c4f77bc4382bdcde0d35d7d1a9a145235226c3", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=4baff4e15f003260de0cc17f419c418332e77149", "patch": "@@ -270,22 +270,22 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n     }\n \n     let mut syntax_expanders = SyntaxEnv::new();\n-    syntax_expanders.insert(intern(&\"macro_rules\"),\n+    syntax_expanders.insert(intern(\"macro_rules\"),\n                             IdentTT(~BasicIdentMacroExpander {\n                                 expander: ext::tt::macro_rules::add_new_extension,\n                                 span: None,\n                             },\n                             None));\n-    syntax_expanders.insert(intern(&\"fmt\"),\n+    syntax_expanders.insert(intern(\"fmt\"),\n                             builtin_normal_expander(\n                                 ext::fmt::expand_syntax_ext));\n-    syntax_expanders.insert(intern(&\"format_args\"),\n+    syntax_expanders.insert(intern(\"format_args\"),\n                             builtin_normal_expander(\n                                 ext::format::expand_args));\n-    syntax_expanders.insert(intern(&\"env\"),\n+    syntax_expanders.insert(intern(\"env\"),\n                             builtin_normal_expander(\n                                     ext::env::expand_env));\n-    syntax_expanders.insert(intern(&\"option_env\"),\n+    syntax_expanders.insert(intern(\"option_env\"),\n                             builtin_normal_expander(\n                                     ext::env::expand_option_env));\n     syntax_expanders.insert(intern(\"bytes\"),\n@@ -297,63 +297,63 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"concat\"),\n                             builtin_normal_expander(\n                                     ext::concat::expand_syntax_ext));\n-    syntax_expanders.insert(intern(&\"log_syntax\"),\n+    syntax_expanders.insert(intern(\"log_syntax\"),\n                             builtin_normal_expander(\n                                     ext::log_syntax::expand_syntax_ext));\n-    syntax_expanders.insert(intern(&\"deriving\"),\n+    syntax_expanders.insert(intern(\"deriving\"),\n                             ItemDecorator(ext::deriving::expand_meta_deriving));\n \n     // Quasi-quoting expanders\n-    syntax_expanders.insert(intern(&\"quote_tokens\"),\n+    syntax_expanders.insert(intern(\"quote_tokens\"),\n                        builtin_normal_expander(\n                             ext::quote::expand_quote_tokens));\n-    syntax_expanders.insert(intern(&\"quote_expr\"),\n+    syntax_expanders.insert(intern(\"quote_expr\"),\n                        builtin_normal_expander(\n                             ext::quote::expand_quote_expr));\n-    syntax_expanders.insert(intern(&\"quote_ty\"),\n+    syntax_expanders.insert(intern(\"quote_ty\"),\n                        builtin_normal_expander(\n                             ext::quote::expand_quote_ty));\n-    syntax_expanders.insert(intern(&\"quote_item\"),\n+    syntax_expanders.insert(intern(\"quote_item\"),\n                        builtin_normal_expander(\n                             ext::quote::expand_quote_item));\n-    syntax_expanders.insert(intern(&\"quote_pat\"),\n+    syntax_expanders.insert(intern(\"quote_pat\"),\n                        builtin_normal_expander(\n                             ext::quote::expand_quote_pat));\n-    syntax_expanders.insert(intern(&\"quote_stmt\"),\n+    syntax_expanders.insert(intern(\"quote_stmt\"),\n                        builtin_normal_expander(\n                             ext::quote::expand_quote_stmt));\n \n-    syntax_expanders.insert(intern(&\"line\"),\n+    syntax_expanders.insert(intern(\"line\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_line));\n-    syntax_expanders.insert(intern(&\"col\"),\n+    syntax_expanders.insert(intern(\"col\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_col));\n-    syntax_expanders.insert(intern(&\"file\"),\n+    syntax_expanders.insert(intern(\"file\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_file));\n-    syntax_expanders.insert(intern(&\"stringify\"),\n+    syntax_expanders.insert(intern(\"stringify\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_stringify));\n-    syntax_expanders.insert(intern(&\"include\"),\n+    syntax_expanders.insert(intern(\"include\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_include));\n-    syntax_expanders.insert(intern(&\"include_str\"),\n+    syntax_expanders.insert(intern(\"include_str\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_include_str));\n-    syntax_expanders.insert(intern(&\"include_bin\"),\n+    syntax_expanders.insert(intern(\"include_bin\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_include_bin));\n-    syntax_expanders.insert(intern(&\"module_path\"),\n+    syntax_expanders.insert(intern(\"module_path\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_mod));\n-    syntax_expanders.insert(intern(&\"asm\"),\n+    syntax_expanders.insert(intern(\"asm\"),\n                             builtin_normal_expander(\n                                     ext::asm::expand_asm));\n-    syntax_expanders.insert(intern(&\"cfg\"),\n+    syntax_expanders.insert(intern(\"cfg\"),\n                             builtin_normal_expander(\n                                     ext::cfg::expand_cfg));\n-    syntax_expanders.insert(intern(&\"trace_macros\"),\n+    syntax_expanders.insert(intern(\"trace_macros\"),\n                             builtin_normal_expander(\n                                     ext::trace_macros::expand_trace_macros));\n     syntax_expanders"}, {"sha": "5d8443b64d5ef5d342f8f50894899cd49ea2d419", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4baff4e15f003260de0cc17f419c418332e77149", "patch": "@@ -2779,28 +2779,11 @@ impl<'a> Parser<'a> {\n             }\n           }\n           token::BINOP(token::AND) | token::ANDAND => {\n-              // parse &pat\n-              let lo = self.span.lo;\n-              self.expect_and();\n-              let sub = self.parse_pat();\n-              hi = sub.span.hi;\n-              // HACK: parse &\"...\" as a literal of a borrowed str\n-              pat = match sub.node {\n-                  PatLit(e) => {\n-                      match e.node {\n-                        ExprLit(lit) if lit_is_str(lit) => {\n-                          let vst = @Expr {\n-                              id: ast::DUMMY_NODE_ID,\n-                              node: ExprVstore(e, ExprVstoreSlice),\n-                              span: mk_sp(lo, hi)\n-                          };\n-                          PatLit(vst)\n-                        }\n-                        _ => PatRegion(sub),\n-                      }\n-                  }\n-                  _ => PatRegion(sub),\n-            };\n+            // parse &pat\n+            let lo = self.span.lo;\n+            self.expect_and();\n+            let sub = self.parse_pat();\n+            pat = PatRegion(sub);\n             hi = self.last_span.hi;\n             return @ast::Pat {\n                 id: ast::DUMMY_NODE_ID,"}, {"sha": "05d38b3d0c162df413924c7b712d69f47257e8a5", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4baff4e15f003260de0cc17f419c418332e77149/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=4baff4e15f003260de0cc17f419c418332e77149", "patch": "@@ -534,7 +534,7 @@ impl<T: Writer> ConsoleTestState<T> {\n \n     pub fn write_run_start(&mut self, len: uint) -> io::IoResult<()> {\n         self.total = len;\n-        let noun = if len != 1 { &\"tests\" } else { &\"test\" };\n+        let noun = if len != 1 { \"tests\" } else { \"test\" };\n         self.write_plain(format!(\"\\nrunning {} {}\\n\", len, noun))\n     }\n "}]}