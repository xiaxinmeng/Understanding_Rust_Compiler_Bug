{"sha": "4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNTZiYmViMTljNDhlZGY2YTIxMTQ0OGE2ZmI1YjY3YjI5ZWNlZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-19T05:39:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-19T05:39:14Z"}, "message": "Auto merge of #43170 - kyrias:full-relro, r=alexcrichton\n\nAdd support for full RELRO\n\nThis commit adds support for full RELRO, and enables it for the\nplatforms I know have support for it.\n\nFull RELRO makes the PLT+GOT data read-only on startup, preventing it\nfrom being overwritten.\n\nhttp://tk-blog.blogspot.com/2009/02/relro-not-so-well-known-memory.html\n\nFixes rust-lang/rust#29877.\n\n---\n\nI'm not entirely certain if this is the best way to do it, but I figured mimicking the way it's done for PIE seemed like a good start at least.  I'm not sure whether we want to have it enabled by default globally and then disabling it explicitly for targets that don't support it though.  I'm also not sure whether the `full_relro` function should call `bug!()` or something like it for linkers that don't support it rather than no-opping.", "tree": {"sha": "274e665d416a6c8f93ffe0a1b0dbbfd9ec96a5f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/274e665d416a6c8f93ffe0a1b0dbbfd9ec96a5f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "html_url": "https://github.com/rust-lang/rust/commit/4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88e2c396a4062d59ca6be3a74ac432bd1f878942", "url": "https://api.github.com/repos/rust-lang/rust/commits/88e2c396a4062d59ca6be3a74ac432bd1f878942", "html_url": "https://github.com/rust-lang/rust/commit/88e2c396a4062d59ca6be3a74ac432bd1f878942"}, {"sha": "2161fb25ca9986c11212e447d88da592bcf736ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/2161fb25ca9986c11212e447d88da592bcf736ce", "html_url": "https://github.com/rust-lang/rust/commit/2161fb25ca9986c11212e447d88da592bcf736ce"}], "stats": {"total": 157, "additions": 143, "deletions": 14}, "files": [{"sha": "5661c4123022d09a54be2c6f07a1ca4f81b2d3b1", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "patch": "@@ -19,7 +19,7 @@ pub use self::DebugInfoLevel::*;\n use session::{early_error, early_warn, Session};\n use session::search_paths::SearchPaths;\n \n-use rustc_back::{LinkerFlavor, PanicStrategy};\n+use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n use rustc_back::target::Target;\n use lint;\n use middle::cstore;\n@@ -654,6 +654,8 @@ macro_rules! options {\n             Some(\"a number\");\n         pub const parse_panic_strategy: Option<&'static str> =\n             Some(\"either `panic` or `abort`\");\n+        pub const parse_relro_level: Option<&'static str> =\n+            Some(\"one of: `full`, `partial`, or `off`\");\n         pub const parse_sanitizer: Option<&'static str> =\n             Some(\"one of: `address`, `leak`, `memory` or `thread`\");\n         pub const parse_linker_flavor: Option<&'static str> =\n@@ -665,7 +667,7 @@ macro_rules! options {\n     #[allow(dead_code)]\n     mod $mod_set {\n         use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer};\n-        use rustc_back::{LinkerFlavor, PanicStrategy};\n+        use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n \n         $(\n             pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {\n@@ -786,6 +788,19 @@ macro_rules! options {\n             true\n         }\n \n+        fn parse_relro_level(slot: &mut Option<RelroLevel>, v: Option<&str>) -> bool {\n+            match v {\n+                Some(s) => {\n+                    match s.parse::<RelroLevel>() {\n+                        Ok(level) => *slot = Some(level),\n+                        _ => return false\n+                    }\n+                },\n+                _ => return false\n+            }\n+            true\n+        }\n+\n         fn parse_sanitizer(slote: &mut Option<Sanitizer>, v: Option<&str>) -> bool {\n             match v {\n                 Some(\"address\") => *slote = Some(Sanitizer::Address),\n@@ -1043,6 +1058,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n                      \"insert profiling code\"),\n+    relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n+        \"choose which RELRO level to use\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -1776,7 +1793,7 @@ mod dep_tracking {\n     use super::{Passes, CrateType, OptLevel, DebugInfoLevel,\n                 OutputTypes, Externs, ErrorOutputType, Sanitizer};\n     use syntax::feature_gate::UnstableFeatures;\n-    use rustc_back::PanicStrategy;\n+    use rustc_back::{PanicStrategy, RelroLevel};\n \n     pub trait DepTrackingHash {\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType);\n@@ -1818,11 +1835,13 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<String>);\n     impl_dep_tracking_hash_via_hash!(Option<(String, u64)>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n+    impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n     impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n     impl_dep_tracking_hash_via_hash!(Option<cstore::NativeLibraryKind>);\n     impl_dep_tracking_hash_via_hash!(CrateType);\n     impl_dep_tracking_hash_via_hash!(PanicStrategy);\n+    impl_dep_tracking_hash_via_hash!(RelroLevel);\n     impl_dep_tracking_hash_via_hash!(Passes);\n     impl_dep_tracking_hash_via_hash!(OptLevel);\n     impl_dep_tracking_hash_via_hash!(DebugInfoLevel);\n@@ -1904,7 +1923,7 @@ mod tests {\n     use std::path::PathBuf;\n     use std::rc::Rc;\n     use super::{OutputType, OutputTypes, Externs};\n-    use rustc_back::PanicStrategy;\n+    use rustc_back::{PanicStrategy, RelroLevel};\n     use syntax::symbol::Symbol;\n \n     fn optgroups() -> getopts::Options {\n@@ -2582,5 +2601,9 @@ mod tests {\n         opts = reference.clone();\n         opts.debugging_opts.mir_opt_level = 3;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+        opts = reference.clone();\n+        opts.debugging_opts.relro_level = Some(RelroLevel::Full);\n+        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n     }\n }"}, {"sha": "55b39f226701fb450f5120b32b8021c26240022b", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "patch": "@@ -47,6 +47,8 @@ pub mod target;\n pub mod slice;\n pub mod dynamic_lib;\n \n+use std::str::FromStr;\n+\n use serialize::json::{Json, ToJson};\n \n macro_rules! linker_flavor {\n@@ -114,3 +116,43 @@ impl ToJson for PanicStrategy {\n         }\n     }\n }\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+pub enum RelroLevel {\n+    Full,\n+    Partial,\n+    Off,\n+}\n+\n+impl RelroLevel {\n+    pub fn desc(&self) -> &str {\n+        match *self {\n+            RelroLevel::Full => \"full\",\n+            RelroLevel::Partial => \"partial\",\n+            RelroLevel::Off => \"off\",\n+        }\n+    }\n+}\n+\n+impl FromStr for RelroLevel {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<RelroLevel, ()> {\n+        match s {\n+            \"full\" => Ok(RelroLevel::Full),\n+            \"partial\" => Ok(RelroLevel::Partial),\n+            \"off\" => Ok(RelroLevel::Off),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl ToJson for RelroLevel {\n+    fn to_json(&self) -> Json {\n+        match *self {\n+            RelroLevel::Full => \"full\".to_json(),\n+            RelroLevel::Partial => \"partial\".to_json(),\n+            RelroLevel::Off => \"off\".to_json(),\n+        }\n+    }\n+}"}, {"sha": "45ceb2d5a6046f45b428ca992fab9df58daeb880", "filename": "src/librustc_back/target/bitrig_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs?ref=4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetOptions;\n+use target::{TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n@@ -19,6 +19,7 @@ pub fn opts() -> TargetOptions {\n         linker_is_gnu: true,\n         has_rpath: true,\n         position_independent_executables: true,\n+        relro_level: RelroLevel::Full,\n \n         .. Default::default()\n     }"}, {"sha": "21dca99aa500504c8924fae1ee5735ca895a7355", "filename": "src/librustc_back/target/dragonfly_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs?ref=4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions};\n+use target::{LinkArgs, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n@@ -33,6 +33,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n+        relro_level: RelroLevel::Full,\n         exe_allocation_crate: super::maybe_jemalloc(),\n         .. Default::default()\n     }"}, {"sha": "21dca99aa500504c8924fae1ee5735ca895a7355", "filename": "src/librustc_back/target/freebsd_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs?ref=4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions};\n+use target::{LinkArgs, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n@@ -33,6 +33,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n+        relro_level: RelroLevel::Full,\n         exe_allocation_crate: super::maybe_jemalloc(),\n         .. Default::default()\n     }"}, {"sha": "21410dcd4126448967a4aa3e40434ce3aad81d46", "filename": "src/librustc_back/target/haiku_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs?ref=4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetOptions;\n+use target::{TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n@@ -18,6 +18,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         has_rpath: false,\n         target_family: Some(\"unix\".to_string()),\n+        relro_level: RelroLevel::Full,\n         linker_is_gnu: true,\n         no_integrated_as: true,\n         .. Default::default()"}, {"sha": "52f700ac7519f51f134d552f27cb640abea45b62", "filename": "src/librustc_back/target/linux_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs?ref=4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions};\n+use target::{LinkArgs, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n@@ -36,6 +36,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n+        relro_level: RelroLevel::Full,\n         exe_allocation_crate: super::maybe_jemalloc(),\n         has_elf_tls: true,\n         .. Default::default()"}, {"sha": "0dbfdb4d809e025722f78dfce92a63bded502144", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "patch": "@@ -50,7 +50,7 @@ use std::default::Default;\n use std::io::prelude::*;\n use syntax::abi::{Abi, lookup as lookup_abi};\n \n-use {LinkerFlavor, PanicStrategy};\n+use {LinkerFlavor, PanicStrategy, RelroLevel};\n \n mod android_base;\n mod apple_base;\n@@ -367,6 +367,10 @@ pub struct TargetOptions {\n     /// the functions in the executable are not randomized and can be used\n     /// during an exploit of a vulnerability in any code.\n     pub position_independent_executables: bool,\n+    /// Either partial, full, or off. Full RELRO makes the dynamic linker\n+    /// resolve all symbols at startup and marks the GOT read-only before\n+    /// starting the program, preventing overwriting the GOT.\n+    pub relro_level: RelroLevel,\n     /// Format that archives should be emitted in. This affects whether we use\n     /// LLVM to assemble an archive or fall back to the system linker, and\n     /// currently only \"gnu\" is used to fall into LLVM. Unknown strings cause\n@@ -454,6 +458,7 @@ impl Default for TargetOptions {\n             has_rpath: false,\n             no_default_libraries: true,\n             position_independent_executables: false,\n+            relro_level: RelroLevel::Off,\n             pre_link_objects_exe: Vec::new(),\n             pre_link_objects_dll: Vec::new(),\n             post_link_objects: Vec::new(),\n@@ -580,6 +585,18 @@ impl Target {\n                 Some(Ok(()))\n             })).unwrap_or(Ok(()))\n             } );\n+            ($key_name:ident, RelroLevel) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                    match s.parse::<RelroLevel>() {\n+                        Ok(level) => base.options.$key_name = level,\n+                        _ => return Some(Err(format!(\"'{}' is not a valid value for \\\n+                                                      relro-level. Use 'full', 'partial, or 'off'.\",\n+                                                      s))),\n+                    }\n+                    Some(Ok(()))\n+                })).unwrap_or(Ok(()))\n+            } );\n             ($key_name:ident, list) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).map(|o| o.as_array()\n@@ -683,6 +700,7 @@ impl Target {\n         key!(has_rpath, bool);\n         key!(no_default_libraries, bool);\n         key!(position_independent_executables, bool);\n+        try!(key!(relro_level, RelroLevel));\n         key!(archive_format);\n         key!(allow_asm, bool);\n         key!(custom_unwind_resume, bool);\n@@ -870,6 +888,7 @@ impl ToJson for Target {\n         target_option_val!(has_rpath);\n         target_option_val!(no_default_libraries);\n         target_option_val!(position_independent_executables);\n+        target_option_val!(relro_level);\n         target_option_val!(archive_format);\n         target_option_val!(allow_asm);\n         target_option_val!(custom_unwind_resume);"}, {"sha": "1cb311371938e54bf332f8f99597e876ce04c120", "filename": "src/librustc_back/target/netbsd_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs?ref=4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions};\n+use target::{LinkArgs, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n@@ -33,6 +33,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n+        relro_level: RelroLevel::Full,\n         .. Default::default()\n     }\n }"}, {"sha": "a5f8e7ae5f91bf2bd00f7f8be8d7ef99600f2a72", "filename": "src/librustc_back/target/openbsd_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs?ref=4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions};\n+use target::{LinkArgs, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n@@ -34,6 +34,7 @@ pub fn opts() -> TargetOptions {\n         is_like_openbsd: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n+        relro_level: RelroLevel::Full,\n         .. Default::default()\n     }\n }"}, {"sha": "7b038ac007396e37c09636170ebbf4fde8d8f6d6", "filename": "src/librustc_back/target/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs?ref=4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "patch": "@@ -9,14 +9,18 @@\n // except according to those terms.\n \n use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use target::{Target, TargetResult, RelroLevel};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"ppc64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n+    // ld.so in at least RHEL6 on ppc64 has a bug related to BIND_NOW, so only enable partial RELRO\n+    // for now. https://github.com/rust-lang/rust/pull/43170#issuecomment-315411474\n+    base.relro_level = RelroLevel::Partial;\n+\n     // see #36994\n     base.exe_allocation_crate = None;\n "}, {"sha": "5e85771217b95e0253e99c6287a2a152bea43ece", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "patch": "@@ -27,7 +27,7 @@ use rustc::dep_graph::{DepKind, DepNode};\n use rustc::hir::def_id::CrateNum;\n use rustc::hir::svh::Svh;\n use rustc_back::tempdir::TempDir;\n-use rustc_back::PanicStrategy;\n+use rustc_back::{PanicStrategy, RelroLevel};\n use rustc_incremental::IncrementalHashesMap;\n use context::get_reloc_model;\n use llvm;\n@@ -1029,6 +1029,20 @@ fn link_args(cmd: &mut Linker,\n         }\n     }\n \n+    let relro_level = match sess.opts.debugging_opts.relro_level {\n+        Some(level) => level,\n+        None => t.options.relro_level,\n+    };\n+    match relro_level {\n+        RelroLevel::Full => {\n+            cmd.full_relro();\n+        },\n+        RelroLevel::Partial => {\n+            cmd.partial_relro();\n+        },\n+        RelroLevel::Off => {},\n+    }\n+\n     // Pass optimization flags down to the linker.\n     cmd.optimize();\n "}, {"sha": "89ebfd0d254ecfd1df144d7d6fc5589b5e4434c1", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e56bbeb19c48edf6a211448a6fb5b67b29eceec/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=4e56bbeb19c48edf6a211448a6fb5b67b29eceec", "patch": "@@ -104,6 +104,8 @@ pub trait Linker {\n     fn add_object(&mut self, path: &Path);\n     fn gc_sections(&mut self, keep_metadata: bool);\n     fn position_independent_executable(&mut self);\n+    fn partial_relro(&mut self);\n+    fn full_relro(&mut self);\n     fn optimize(&mut self);\n     fn debuginfo(&mut self);\n     fn no_default_libraries(&mut self);\n@@ -175,6 +177,8 @@ impl<'a> Linker for GccLinker<'a> {\n     fn output_filename(&mut self, path: &Path) { self.cmd.arg(\"-o\").arg(path); }\n     fn add_object(&mut self, path: &Path) { self.cmd.arg(path); }\n     fn position_independent_executable(&mut self) { self.cmd.arg(\"-pie\"); }\n+    fn partial_relro(&mut self) { self.linker_arg(\"-z,relro\"); }\n+    fn full_relro(&mut self) { self.linker_arg(\"-z,relro,-z,now\"); }\n     fn args(&mut self, args: &[String]) { self.cmd.args(args); }\n \n     fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n@@ -428,6 +432,14 @@ impl<'a> Linker for MsvcLinker<'a> {\n         // noop\n     }\n \n+    fn partial_relro(&mut self) {\n+        // noop\n+    }\n+\n+    fn full_relro(&mut self) {\n+        // noop\n+    }\n+\n     fn no_default_libraries(&mut self) {\n         // Currently we don't pass the /NODEFAULTLIB flag to the linker on MSVC\n         // as there's been trouble in the past of linking the C++ standard\n@@ -595,6 +607,14 @@ impl<'a> Linker for EmLinker<'a> {\n         // noop\n     }\n \n+    fn partial_relro(&mut self) {\n+        // noop\n+    }\n+\n+    fn full_relro(&mut self) {\n+        // noop\n+    }\n+\n     fn args(&mut self, args: &[String]) {\n         self.cmd.args(args);\n     }"}]}