{"sha": "babb7daf354d0c7224fa7fdb7638e520008f1815", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYmI3ZGFmMzU0ZDBjNzIyNGZhN2ZkYjc2MzhlNTIwMDA4ZjE4MTU=", "commit": {"author": {"name": "Aidan Hobson Sayers", "email": "aidanhs@cantab.net", "date": "2016-12-24T16:04:48Z"}, "committer": {"name": "Aidan Hobson Sayers", "email": "aidanhs@cantab.net", "date": "2016-12-24T17:15:07Z"}, "message": "Teach `rustdoc --test` about `--sysroot`, pass it when testing rust\n\nThis permits rustdoc tests to work in stage0", "tree": {"sha": "fbcaff69a10887ccd63f1bdb5291a5ef8fa50783", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbcaff69a10887ccd63f1bdb5291a5ef8fa50783"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/babb7daf354d0c7224fa7fdb7638e520008f1815", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/babb7daf354d0c7224fa7fdb7638e520008f1815", "html_url": "https://github.com/rust-lang/rust/commit/babb7daf354d0c7224fa7fdb7638e520008f1815", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/babb7daf354d0c7224fa7fdb7638e520008f1815/comments", "author": {"login": "aidanhs", "id": 1050652, "node_id": "MDQ6VXNlcjEwNTA2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1050652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanhs", "html_url": "https://github.com/aidanhs", "followers_url": "https://api.github.com/users/aidanhs/followers", "following_url": "https://api.github.com/users/aidanhs/following{/other_user}", "gists_url": "https://api.github.com/users/aidanhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanhs/subscriptions", "organizations_url": "https://api.github.com/users/aidanhs/orgs", "repos_url": "https://api.github.com/users/aidanhs/repos", "events_url": "https://api.github.com/users/aidanhs/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanhs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aidanhs", "id": 1050652, "node_id": "MDQ6VXNlcjEwNTA2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1050652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanhs", "html_url": "https://github.com/aidanhs", "followers_url": "https://api.github.com/users/aidanhs/followers", "following_url": "https://api.github.com/users/aidanhs/following{/other_user}", "gists_url": "https://api.github.com/users/aidanhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanhs/subscriptions", "organizations_url": "https://api.github.com/users/aidanhs/orgs", "repos_url": "https://api.github.com/users/aidanhs/repos", "events_url": "https://api.github.com/users/aidanhs/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanhs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17d873c2db77d029b8fe26d57b676e5797e99441", "url": "https://api.github.com/repos/rust-lang/rust/commits/17d873c2db77d029b8fe26d57b676e5797e99441", "html_url": "https://github.com/rust-lang/rust/commit/17d873c2db77d029b8fe26d57b676e5797e99441"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "129798836e03b7d1012f27de6866fe78020a0044", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/babb7daf354d0c7224fa7fdb7638e520008f1815/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babb7daf354d0c7224fa7fdb7638e520008f1815/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=babb7daf354d0c7224fa7fdb7638e520008f1815", "patch": "@@ -67,6 +67,7 @@ fn main() {\n         (\"RUSTC_REAL\", \"RUSTC_LIBDIR\")\n     };\n     let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n+    let sysroot = env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\");\n \n     let rustc = env::var_os(rustc).unwrap_or_else(|| panic!(\"{:?} was not set\", rustc));\n     let libdir = env::var_os(libdir).unwrap_or_else(|| panic!(\"{:?} was not set\", libdir));\n@@ -83,7 +84,7 @@ fn main() {\n     if let Some(target) = target {\n         // The stage0 compiler has a special sysroot distinct from what we\n         // actually downloaded, so we just always pass the `--sysroot` option.\n-        cmd.arg(\"--sysroot\").arg(env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\"));\n+        cmd.arg(\"--sysroot\").arg(sysroot);\n \n         // When we build Rust dylibs they're all intended for intermediate\n         // usage, so make sure we pass the -Cprefer-dynamic flag instead of"}, {"sha": "e9ca430f1582b4723529255bb17cfb7309fc4d36", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/babb7daf354d0c7224fa7fdb7638e520008f1815/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babb7daf354d0c7224fa7fdb7638e520008f1815/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=babb7daf354d0c7224fa7fdb7638e520008f1815", "patch": "@@ -25,6 +25,7 @@ fn main() {\n     let rustdoc = env::var_os(\"RUSTDOC_REAL\").expect(\"RUSTDOC_REAL was not set\");\n     let libdir = env::var_os(\"RUSTC_LIBDIR\").expect(\"RUSTC_LIBDIR was not set\");\n     let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n+    let sysroot = env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\");\n \n     let mut dylib_path = bootstrap::util::dylib_path();\n     dylib_path.insert(0, PathBuf::from(libdir));\n@@ -35,6 +36,8 @@ fn main() {\n         .arg(format!(\"stage{}\", stage))\n         .arg(\"--cfg\")\n         .arg(\"dox\")\n+        .arg(\"--sysroot\")\n+        .arg(sysroot)\n         .env(bootstrap::util::dylib_path_var(),\n              env::join_paths(&dylib_path).unwrap());\n     std::process::exit(match cmd.status() {"}, {"sha": "47616044879cd0df8396712cb5157048c8654daa", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/babb7daf354d0c7224fa7fdb7638e520008f1815/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babb7daf354d0c7224fa7fdb7638e520008f1815/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=babb7daf354d0c7224fa7fdb7638e520008f1815", "patch": "@@ -267,13 +267,14 @@ pub fn main_args(args: &[String]) -> isize {\n     };\n     let crate_name = matches.opt_str(\"crate-name\");\n     let playground_url = matches.opt_str(\"playground-url\");\n+    let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n \n     match (should_test, markdown_input) {\n         (true, true) => {\n-            return markdown::test(input, cfgs, libs, externs, test_args)\n+            return markdown::test(input, cfgs, libs, externs, test_args, maybe_sysroot)\n         }\n         (true, false) => {\n-            return test::run(input, cfgs, libs, externs, test_args, crate_name)\n+            return test::run(input, cfgs, libs, externs, test_args, crate_name, maybe_sysroot)\n         }\n         (false, true) => return markdown::render(input,\n                                                  output.unwrap_or(PathBuf::from(\"doc\")),"}, {"sha": "369e18948ad5b44dbd18e4ad1c0ff8bd8a31b456", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/babb7daf354d0c7224fa7fdb7638e520008f1815/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babb7daf354d0c7224fa7fdb7638e520008f1815/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=babb7daf354d0c7224fa7fdb7638e520008f1815", "patch": "@@ -144,7 +144,7 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n \n /// Run any tests/code examples in the markdown file `input`.\n pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n-            mut test_args: Vec<String>) -> isize {\n+            mut test_args: Vec<String>, maybe_sysroot: Option<PathBuf>) -> isize {\n     let input_str = match load_string(input) {\n         Ok(s) => s,\n         Err(LoadStringError::ReadFail) => return 1,\n@@ -154,7 +154,7 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     let mut opts = TestOptions::default();\n     opts.no_crate_inject = true;\n     let mut collector = Collector::new(input.to_string(), cfgs, libs, externs,\n-                                       true, opts);\n+                                       true, opts, maybe_sysroot);\n     find_testable_code(&input_str, &mut collector);\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests);"}, {"sha": "d81165ba00f0f253045a231241f15f6d0b6e47c5", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/babb7daf354d0c7224fa7fdb7638e520008f1815/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babb7daf354d0c7224fa7fdb7638e520008f1815/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=babb7daf354d0c7224fa7fdb7638e520008f1815", "patch": "@@ -54,14 +54,15 @@ pub fn run(input: &str,\n            libs: SearchPaths,\n            externs: Externs,\n            mut test_args: Vec<String>,\n-           crate_name: Option<String>)\n+           crate_name: Option<String>,\n+           maybe_sysroot: Option<PathBuf>)\n            -> isize {\n     let input_path = PathBuf::from(input);\n     let input = config::Input::File(input_path.clone());\n \n     let sessopts = config::Options {\n-        maybe_sysroot: Some(env::current_exe().unwrap().parent().unwrap()\n-                                              .parent().unwrap().to_path_buf()),\n+        maybe_sysroot: maybe_sysroot.clone().or_else(\n+            || Some(env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_path_buf())),\n         search_paths: libs.clone(),\n         crate_types: vec![config::CrateTypeDylib],\n         externs: externs.clone(),\n@@ -99,7 +100,8 @@ pub fn run(input: &str,\n                                        libs,\n                                        externs,\n                                        false,\n-                                       opts);\n+                                       opts,\n+                                       maybe_sysroot);\n \n     {\n         let dep_graph = DepGraph::new(false);\n@@ -157,7 +159,8 @@ fn scrape_test_config(krate: &::rustc::hir::Crate) -> TestOptions {\n fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n            externs: Externs,\n            should_panic: bool, no_run: bool, as_test_harness: bool,\n-           compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions) {\n+           compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n+           maybe_sysroot: Option<PathBuf>) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n     let test = maketest(test, Some(cratename), as_test_harness, opts);\n@@ -168,8 +171,8 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     let outputs = OutputTypes::new(&[(OutputType::Exe, None)]);\n \n     let sessopts = config::Options {\n-        maybe_sysroot: Some(env::current_exe().unwrap().parent().unwrap()\n-                                              .parent().unwrap().to_path_buf()),\n+        maybe_sysroot: maybe_sysroot.or_else(\n+            || Some(env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_path_buf())),\n         search_paths: libs,\n         crate_types: vec![config::CrateTypeExecutable],\n         output_types: outputs,\n@@ -379,11 +382,12 @@ pub struct Collector {\n     current_header: Option<String>,\n     cratename: String,\n     opts: TestOptions,\n+    maybe_sysroot: Option<PathBuf>,\n }\n \n impl Collector {\n     pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n-               use_headers: bool, opts: TestOptions) -> Collector {\n+               use_headers: bool, opts: TestOptions, maybe_sysroot: Option<PathBuf>) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -395,6 +399,7 @@ impl Collector {\n             current_header: None,\n             cratename: cratename,\n             opts: opts,\n+            maybe_sysroot: maybe_sysroot,\n         }\n     }\n \n@@ -413,6 +418,7 @@ impl Collector {\n         let externs = self.externs.clone();\n         let cratename = self.cratename.to_string();\n         let opts = self.opts.clone();\n+        let maybe_sysroot = self.maybe_sysroot.clone();\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n@@ -432,7 +438,8 @@ impl Collector {\n                         as_test_harness,\n                         compile_fail,\n                         error_codes,\n-                        &opts);\n+                        &opts,\n+                        maybe_sysroot);\n             })\n         });\n     }"}]}