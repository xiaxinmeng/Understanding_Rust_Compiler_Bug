{"sha": "aad911fb0cd772e809270be3e0a526d4738b9dd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZDkxMWZiMGNkNzcyZTgwOTI3MGJlM2UwYTUyNmQ0NzM4YjlkZDU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-18T15:20:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-18T15:20:57Z"}, "message": "Speedup ty tests\n\nCloses #5792", "tree": {"sha": "071693ea923db713b5e590a5e7cecfa2fff04185", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/071693ea923db713b5e590a5e7cecfa2fff04185"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aad911fb0cd772e809270be3e0a526d4738b9dd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aad911fb0cd772e809270be3e0a526d4738b9dd5", "html_url": "https://github.com/rust-lang/rust/commit/aad911fb0cd772e809270be3e0a526d4738b9dd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aad911fb0cd772e809270be3e0a526d4738b9dd5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e81c310b6224946318b8e6af56a55021716ea9b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e81c310b6224946318b8e6af56a55021716ea9b5", "html_url": "https://github.com/rust-lang/rust/commit/e81c310b6224946318b8e6af56a55021716ea9b5"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "91c9d38c52c3a4941d5221f8a31afb4d5e75055b", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aad911fb0cd772e809270be3e0a526d4738b9dd5/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad911fb0cd772e809270be3e0a526d4738b9dd5/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=aad911fb0cd772e809270be3e0a526d4738b9dd5", "patch": "@@ -8,7 +8,7 @@ mod method_resolution;\n mod macros;\n mod display_source_code;\n \n-use std::sync::Arc;\n+use std::{env, sync::Arc};\n \n use base_db::{fixture::WithFixture, FileRange, SourceDatabase, SourceDatabaseExt};\n use expect::Expect;\n@@ -22,12 +22,14 @@ use hir_def::{\n     AssocItemId, DefWithBodyId, LocalModuleId, Lookup, ModuleDefId,\n };\n use hir_expand::{db::AstDatabase, InFile};\n-use stdx::format_to;\n+use stdx::{format_to, RacyFlag};\n use syntax::{\n     algo,\n     ast::{self, AstNode},\n     SyntaxNode,\n };\n+use tracing_subscriber::{layer::SubscriberExt, EnvFilter, Registry};\n+use tracing_tree::HierarchicalLayer;\n \n use crate::{\n     db::HirDatabase, display::HirDisplay, infer::TypeMismatch, test_db::TestDB, InferenceResult, Ty,\n@@ -37,17 +39,20 @@ use crate::{\n // against snapshots of the expected results using expect. Use\n // `env UPDATE_EXPECT=1 cargo test -p hir_ty` to update the snapshots.\n \n-fn setup_tracing() -> tracing::subscriber::DefaultGuard {\n-    use tracing_subscriber::{layer::SubscriberExt, EnvFilter, Registry};\n-    use tracing_tree::HierarchicalLayer;\n+fn setup_tracing() -> Option<tracing::subscriber::DefaultGuard> {\n+    static ENABLE: RacyFlag = RacyFlag::new();\n+    if !ENABLE.get(|| env::var(\"CHALK_DEBUG\").is_ok()) {\n+        return None;\n+    }\n+\n     let filter = EnvFilter::from_env(\"CHALK_DEBUG\");\n     let layer = HierarchicalLayer::default()\n         .with_indent_lines(true)\n         .with_ansi(false)\n         .with_indent_amount(2)\n         .with_writer(std::io::stderr);\n     let subscriber = Registry::default().with(filter).with(layer);\n-    tracing::subscriber::set_default(subscriber)\n+    Some(tracing::subscriber::set_default(subscriber))\n }\n \n fn check_types(ra_fixture: &str) {"}, {"sha": "5d60f02190ce65782ae600902b87436580dc05d7", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/aad911fb0cd772e809270be3e0a526d4738b9dd5/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad911fb0cd772e809270be3e0a526d4738b9dd5/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=aad911fb0cd772e809270be3e0a526d4738b9dd5", "patch": "@@ -1,5 +1,8 @@\n //! Missing batteries for standard libraries.\n-use std::time::Instant;\n+use std::{\n+    sync::atomic::{AtomicUsize, Ordering},\n+    time::Instant,\n+};\n \n mod macros;\n \n@@ -134,6 +137,31 @@ where\n     left\n }\n \n+pub struct RacyFlag(AtomicUsize);\n+\n+impl RacyFlag {\n+    pub const fn new() -> RacyFlag {\n+        RacyFlag(AtomicUsize::new(0))\n+    }\n+\n+    pub fn get(&self, init: impl FnMut() -> bool) -> bool {\n+        let mut init = Some(init);\n+        self.get_impl(&mut || init.take().map_or(false, |mut f| f()))\n+    }\n+\n+    fn get_impl(&self, init: &mut dyn FnMut() -> bool) -> bool {\n+        match self.0.load(Ordering::Relaxed) {\n+            0 => false,\n+            1 => true,\n+            _ => {\n+                let res = init();\n+                self.0.store(if res { 1 } else { 0 }, Ordering::Relaxed);\n+                res\n+            }\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}]}