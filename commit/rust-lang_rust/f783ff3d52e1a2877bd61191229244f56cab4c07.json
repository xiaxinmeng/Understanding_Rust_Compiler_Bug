{"sha": "f783ff3d52e1a2877bd61191229244f56cab4c07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ODNmZjNkNTJlMWEyODc3YmQ2MTE5MTIyOTI0NGY1NmNhYjRjMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-19T08:21:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-19T08:21:42Z"}, "message": "Auto merge of #4535 - rust-lang:unsafe-doc, r=flip1995\n\nNew lint: Require `# Safety` section in pub unsafe fn docs\n\nchangelog: add `missing_safety_doc` lint\n\nThis fixes #2207", "tree": {"sha": "7550387e7c0f8c0cd77d7e5c4dfe06ce0f2e39a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7550387e7c0f8c0cd77d7e5c4dfe06ce0f2e39a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f783ff3d52e1a2877bd61191229244f56cab4c07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f783ff3d52e1a2877bd61191229244f56cab4c07", "html_url": "https://github.com/rust-lang/rust/commit/f783ff3d52e1a2877bd61191229244f56cab4c07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f783ff3d52e1a2877bd61191229244f56cab4c07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e568bcc87fa8ce4c04a95b2441167e28e9458f", "html_url": "https://github.com/rust-lang/rust/commit/a5e568bcc87fa8ce4c04a95b2441167e28e9458f"}, {"sha": "70a7dab773b5d97fd46541a46bdb6de7abf77b2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/70a7dab773b5d97fd46541a46bdb6de7abf77b2f", "html_url": "https://github.com/rust-lang/rust/commit/70a7dab773b5d97fd46541a46bdb6de7abf77b2f"}], "stats": {"total": 164, "additions": 133, "deletions": 31}, "files": [{"sha": "c39b2e69df91d4375c9c59137c2fad06e29ff900", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f783ff3d52e1a2877bd61191229244f56cab4c07/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f783ff3d52e1a2877bd61191229244f56cab4c07/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f783ff3d52e1a2877bd61191229244f56cab4c07", "patch": "@@ -1056,6 +1056,7 @@ Released 2018-09-13\n [`missing_const_for_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n [`missing_inline_in_public_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\n+[`missing_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n [`mistyped_literal_suffixes`]: https://rust-lang.github.io/rust-clippy/master/index.html#mistyped_literal_suffixes\n [`mixed_case_hex_literals`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_case_hex_literals\n [`module_inception`]: https://rust-lang.github.io/rust-clippy/master/index.html#module_inception"}, {"sha": "4541af9c844e2d81c666a6af8dca6379a7f0763a", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f783ff3d52e1a2877bd61191229244f56cab4c07/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f783ff3d52e1a2877bd61191229244f56cab4c07/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f783ff3d52e1a2877bd61191229244f56cab4c07", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 313 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 314 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "423e13e9dd5afdd3df7c985f0651bb3e34f15b8a", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f783ff3d52e1a2877bd61191229244f56cab4c07/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f783ff3d52e1a2877bd61191229244f56cab4c07/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=f783ff3d52e1a2877bd61191229244f56cab4c07", "patch": "@@ -27,7 +27,7 @@ semver = \"0.9.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n toml = \"0.5.3\"\n unicode-normalization = \"0.1\"\n-pulldown-cmark = \"0.5.3\"\n+pulldown-cmark = \"0.6.0\"\n url = { version =  \"2.1.0\", features = [\"serde\"] } # cargo requires serde feat in its url dep\n # see https://github.com/rust-lang/rust/pull/63587#issuecomment-522343864\n if_chain = \"1.0.0\""}, {"sha": "86d83bf9602ed47a838582575fb320c499118dae", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 83, "deletions": 28, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/f783ff3d52e1a2877bd61191229244f56cab4c07/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f783ff3d52e1a2877bd61191229244f56cab4c07/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=f783ff3d52e1a2877bd61191229244f56cab4c07", "patch": "@@ -34,6 +34,40 @@ declare_clippy_lint! {\n     \"presence of `_`, `::` or camel-case outside backticks in documentation\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for the doc comments of publicly visible\n+    /// unsafe functions and warns if there is no `# Safety` section.\n+    ///\n+    /// **Why is this bad?** Unsafe functions should document their safety\n+    /// preconditions, so that users can be sure they are using them safely.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Examples**:\n+    /// ```rust\n+    ///# type Universe = ();\n+    /// /// This function should really be documented\n+    /// pub unsafe fn start_apocalypse(u: &mut Universe) {\n+    ///     unimplemented!();\n+    /// }\n+    /// ```\n+    ///\n+    /// At least write a line about safety:\n+    ///\n+    /// ```rust\n+    ///# type Universe = ();\n+    /// /// # Safety\n+    /// ///\n+    /// /// This function should not be called before the horsemen are ready.\n+    /// pub unsafe fn start_apocalypse(u: &mut Universe) {\n+    ///     unimplemented!();\n+    /// }\n+    /// ```\n+    pub MISSING_SAFETY_DOC,\n+    style,\n+    \"`pub unsafe fn` without `# Safety` docs\"\n+}\n+\n #[allow(clippy::module_name_repetitions)]\n #[derive(Clone)]\n pub struct DocMarkdown {\n@@ -46,15 +80,28 @@ impl DocMarkdown {\n     }\n }\n \n-impl_lint_pass!(DocMarkdown => [DOC_MARKDOWN]);\n+impl_lint_pass!(DocMarkdown => [DOC_MARKDOWN, MISSING_SAFETY_DOC]);\n \n impl EarlyLintPass for DocMarkdown {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &ast::Crate) {\n         check_attrs(cx, &self.valid_idents, &krate.attrs);\n     }\n \n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n-        check_attrs(cx, &self.valid_idents, &item.attrs);\n+        if check_attrs(cx, &self.valid_idents, &item.attrs) {\n+            return;\n+        }\n+        // no safety header\n+        if let ast::ItemKind::Fn(_, ref header, ..) = item.node {\n+            if item.vis.node.is_pub() && header.unsafety == ast::Unsafety::Unsafe {\n+                span_lint(\n+                    cx,\n+                    MISSING_SAFETY_DOC,\n+                    item.span,\n+                    \"unsafe function's docs miss `# Safety` section\",\n+                );\n+            }\n+        }\n     }\n }\n \n@@ -115,7 +162,7 @@ pub fn strip_doc_comment_decoration(comment: &str, span: Span) -> (String, Vec<(\n     panic!(\"not a doc-comment: {}\", comment);\n }\n \n-pub fn check_attrs<'a>(cx: &EarlyContext<'_>, valid_idents: &FxHashSet<String>, attrs: &'a [ast::Attribute]) {\n+pub fn check_attrs<'a>(cx: &EarlyContext<'_>, valid_idents: &FxHashSet<String>, attrs: &'a [ast::Attribute]) -> bool {\n     let mut doc = String::new();\n     let mut spans = vec![];\n \n@@ -129,7 +176,7 @@ pub fn check_attrs<'a>(cx: &EarlyContext<'_>, valid_idents: &FxHashSet<String>,\n             }\n         } else if attr.check_name(sym!(doc)) {\n             // ignore mix of sugared and non-sugared doc\n-            return;\n+            return true; // don't trigger the safety check\n         }\n     }\n \n@@ -140,57 +187,64 @@ pub fn check_attrs<'a>(cx: &EarlyContext<'_>, valid_idents: &FxHashSet<String>,\n         current += offset_copy;\n     }\n \n-    if !doc.is_empty() {\n-        let parser = pulldown_cmark::Parser::new(&doc).into_offset_iter();\n-        // Iterate over all `Events` and combine consecutive events into one\n-        let events = parser.coalesce(|previous, current| {\n-            use pulldown_cmark::Event::*;\n-\n-            let previous_range = previous.1;\n-            let current_range = current.1;\n-\n-            match (previous.0, current.0) {\n-                (Text(previous), Text(current)) => {\n-                    let mut previous = previous.to_string();\n-                    previous.push_str(&current);\n-                    Ok((Text(previous.into()), previous_range))\n-                },\n-                (previous, current) => Err(((previous, previous_range), (current, current_range))),\n-            }\n-        });\n-        check_doc(cx, valid_idents, events, &spans);\n+    if doc.is_empty() {\n+        return false;\n     }\n+\n+    let parser = pulldown_cmark::Parser::new(&doc).into_offset_iter();\n+    // Iterate over all `Events` and combine consecutive events into one\n+    let events = parser.coalesce(|previous, current| {\n+        use pulldown_cmark::Event::*;\n+\n+        let previous_range = previous.1;\n+        let current_range = current.1;\n+\n+        match (previous.0, current.0) {\n+            (Text(previous), Text(current)) => {\n+                let mut previous = previous.to_string();\n+                previous.push_str(&current);\n+                Ok((Text(previous.into()), previous_range))\n+            },\n+            (previous, current) => Err(((previous, previous_range), (current, current_range))),\n+        }\n+    });\n+    check_doc(cx, valid_idents, events, &spans)\n }\n \n fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize>)>>(\n     cx: &EarlyContext<'_>,\n     valid_idents: &FxHashSet<String>,\n     events: Events,\n     spans: &[(usize, Span)],\n-) {\n+) -> bool {\n+    // true if a safety header was found\n     use pulldown_cmark::Event::*;\n     use pulldown_cmark::Tag::*;\n \n+    let mut safety_header = false;\n     let mut in_code = false;\n     let mut in_link = None;\n+    let mut in_heading = false;\n \n     for (event, range) in events {\n         match event {\n             Start(CodeBlock(_)) => in_code = true,\n             End(CodeBlock(_)) => in_code = false,\n             Start(Link(_, url, _)) => in_link = Some(url),\n             End(Link(..)) => in_link = None,\n-            Start(_tag) | End(_tag) => (),         // We don't care about other tags\n-            Html(_html) | InlineHtml(_html) => (), // HTML is weird, just ignore it\n-            SoftBreak | HardBreak | TaskListMarker(_) | Code(_) => (),\n+            Start(Heading(_)) => in_heading = true,\n+            End(Heading(_)) => in_heading = false,\n+            Start(_tag) | End(_tag) => (), // We don't care about other tags\n+            Html(_html) => (),             // HTML is weird, just ignore it\n+            SoftBreak | HardBreak | TaskListMarker(_) | Code(_) | Rule => (),\n             FootnoteReference(text) | Text(text) => {\n                 if Some(&text) == in_link.as_ref() {\n                     // Probably a link of the form `<http://example.com>`\n                     // Which are represented as a link to \"http://example.com\" with\n                     // text \"http://example.com\" by pulldown-cmark\n                     continue;\n                 }\n-\n+                safety_header |= in_heading && text.trim() == \"Safety\";\n                 if !in_code {\n                     let index = match spans.binary_search_by(|c| c.0.cmp(&range.start)) {\n                         Ok(o) => o,\n@@ -207,6 +261,7 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n             },\n         }\n     }\n+    safety_header\n }\n \n fn check_text(cx: &EarlyContext<'_>, valid_idents: &FxHashSet<String>, text: &str, span: Span) {"}, {"sha": "2892c6c417db045c5b04c36de3d13ffc291b30a2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f783ff3d52e1a2877bd61191229244f56cab4c07/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f783ff3d52e1a2877bd61191229244f56cab4c07/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f783ff3d52e1a2877bd61191229244f56cab4c07", "patch": "@@ -708,6 +708,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         copies::IFS_SAME_COND,\n         copies::IF_SAME_THEN_ELSE,\n         derive::DERIVE_HASH_XOR_EQ,\n+        doc::MISSING_SAFETY_DOC,\n         double_comparison::DOUBLE_COMPARISONS,\n         double_parens::DOUBLE_PARENS,\n         drop_bounds::DROP_BOUNDS,\n@@ -929,6 +930,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR,\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n         collapsible_if::COLLAPSIBLE_IF,\n+        doc::MISSING_SAFETY_DOC,\n         enum_variants::ENUM_VARIANT_NAMES,\n         enum_variants::MODULE_INCEPTION,\n         eq_op::OP_REF,"}, {"sha": "f45c240014fd14f7759849e43121747058a2a4e4", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f783ff3d52e1a2877bd61191229244f56cab4c07/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f783ff3d52e1a2877bd61191229244f56cab4c07/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=f783ff3d52e1a2877bd61191229244f56cab4c07", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 313] = [\n+pub const ALL_LINTS: [Lint; 314] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1078,6 +1078,13 @@ pub const ALL_LINTS: [Lint; 313] = [\n         deprecation: None,\n         module: \"missing_inline\",\n     },\n+    Lint {\n+        name: \"missing_safety_doc\",\n+        group: \"style\",\n+        desc: \"`pub unsafe fn` without `# Safety` docs\",\n+        deprecation: None,\n+        module: \"doc\",\n+    },\n     Lint {\n         name: \"mistyped_literal_suffixes\",\n         group: \"correctness\","}, {"sha": "7b26e86b40b8d1a74392af6d7a8849b8ea8bd9eb", "filename": "tests/ui/doc_unsafe.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f783ff3d52e1a2877bd61191229244f56cab4c07/tests%2Fui%2Fdoc_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f783ff3d52e1a2877bd61191229244f56cab4c07/tests%2Fui%2Fdoc_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.rs?ref=f783ff3d52e1a2877bd61191229244f56cab4c07", "patch": "@@ -0,0 +1,25 @@\n+/// This is not sufficiently documented\n+pub unsafe fn destroy_the_planet() {\n+    unimplemented!();\n+}\n+\n+/// This one is\n+///\n+/// # Safety\n+///\n+/// This function shouldn't be called unless the horsemen are ready\n+pub unsafe fn apocalypse(universe: &mut ()) {\n+    unimplemented!();\n+}\n+\n+/// This is a private function, so docs aren't necessary\n+unsafe fn you_dont_see_me() {\n+    unimplemented!();\n+}\n+\n+fn main() {\n+    you_dont_see_me();\n+    destroy_the_planet();\n+    let mut universe = ();\n+    apocalypse(&mut universe);\n+}"}, {"sha": "d6d1cd2d4faf469ec97b2e5d51ba9446a4e7dde0", "filename": "tests/ui/doc_unsafe.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f783ff3d52e1a2877bd61191229244f56cab4c07/tests%2Fui%2Fdoc_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f783ff3d52e1a2877bd61191229244f56cab4c07/tests%2Fui%2Fdoc_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.stderr?ref=f783ff3d52e1a2877bd61191229244f56cab4c07", "patch": "@@ -0,0 +1,12 @@\n+error: unsafe function's docs miss `# Safety` section\n+  --> $DIR/doc_unsafe.rs:2:1\n+   |\n+LL | / pub unsafe fn destroy_the_planet() {\n+LL | |     unimplemented!();\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::missing-safety-doc` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}