{"sha": "7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNThjNmQxZGVlYzI1YzM3YzkzYWU0Y2Y5ZWMyNDMyOTE4YmMzNjA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-01-26T16:14:49Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-01-26T22:27:38Z"}, "message": "Replace deprecated ATOMIC_INIT consts", "tree": {"sha": "9f3c97f64498d562b514adeae98bedd1fe3f95a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f3c97f64498d562b514adeae98bedd1fe3f95a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "html_url": "https://github.com/rust-lang/rust/commit/7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abe36c4741e780ba3ed3e9b48d823ac8007f786a", "url": "https://api.github.com/repos/rust-lang/rust/commits/abe36c4741e780ba3ed3e9b48d823ac8007f786a", "html_url": "https://github.com/rust-lang/rust/commit/abe36c4741e780ba3ed3e9b48d823ac8007f786a"}], "stats": {"total": 148, "additions": 89, "deletions": 59}, "files": [{"sha": "94ae43237d19c3309d732cecfc756f747888e6ea", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -2,7 +2,7 @@ use std::cmp;\n use std::collections::BinaryHeap;\n use std::collections::binary_heap::{Drain, PeekMut};\n use std::panic::{self, AssertUnwindSafe};\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n use rand::{thread_rng, seq::SliceRandom};\n \n@@ -283,7 +283,7 @@ fn assert_covariance() {\n // Destructors must be called exactly once per element.\n #[test]\n fn panic_safe() {\n-    static DROP_COUNTER: AtomicUsize = ATOMIC_USIZE_INIT;\n+    static DROP_COUNTER: AtomicUsize = AtomicUsize::new(0);\n \n     #[derive(Eq, PartialEq, Ord, Clone, Debug)]\n     struct PanicOrd<T>(T, bool);"}, {"sha": "0300bd7f3f6d4bb1f7ac0ba58ae66c797a8557cb", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -5,7 +5,7 @@ use std::mem;\n use std::panic;\n use std::rc::Rc;\n use std::sync::atomic::Ordering::Relaxed;\n-use std::sync::atomic::{ATOMIC_USIZE_INIT, AtomicUsize};\n+use std::sync::atomic::AtomicUsize;\n use std::thread;\n \n use rand::{Rng, RngCore, thread_rng, seq::SliceRandom};\n@@ -1500,7 +1500,7 @@ static DROP_COUNTS: [AtomicUsize; MAX_LEN] = [\n     AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n ];\n \n-static VERSIONS: AtomicUsize = ATOMIC_USIZE_INIT;\n+static VERSIONS: AtomicUsize = AtomicUsize::new(0);\n \n #[derive(Clone, Eq)]\n struct DropCounter {"}, {"sha": "bcedff5abc70c0aba73f766ea5088369e55a7c97", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -2413,12 +2413,11 @@ pub fn fence(order: Ordering) {\n ///\n /// ```\n /// use std::sync::atomic::{AtomicBool, AtomicUsize};\n-/// use std::sync::atomic::{ATOMIC_BOOL_INIT, ATOMIC_USIZE_INIT};\n /// use std::sync::atomic::Ordering;\n /// use std::sync::atomic::compiler_fence;\n ///\n-/// static IMPORTANT_VARIABLE: AtomicUsize = ATOMIC_USIZE_INIT;\n-/// static IS_READY: AtomicBool = ATOMIC_BOOL_INIT;\n+/// static IMPORTANT_VARIABLE: AtomicUsize = AtomicUsize::new(0);\n+/// static IS_READY: AtomicBool = AtomicBool::new(false);\n ///\n /// fn main() {\n ///     IMPORTANT_VARIABLE.store(42, Ordering::Relaxed);"}, {"sha": "a95ce810ffaeba4af138c518fa3495677b6d8c4f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -91,7 +91,7 @@ use std::panic;\n use std::path::{PathBuf, Path};\n use std::process::{self, Command, Stdio};\n use std::str;\n-use std::sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT, Ordering};\n+use std::sync::atomic::{AtomicBool, Ordering};\n use std::sync::{Once, ONCE_INIT};\n use std::thread;\n \n@@ -254,7 +254,7 @@ fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n     // general this assertion never trips due to the once guard in `get_codegen_backend`,\n     // but there's a few manual calls to this function in this file we protect\n     // against.\n-    static LOADED: AtomicBool = ATOMIC_BOOL_INIT;\n+    static LOADED: AtomicBool = AtomicBool::new(false);\n     assert!(!LOADED.fetch_or(true, Ordering::SeqCst),\n             \"cannot load the default codegen backend twice\");\n "}, {"sha": "74394165a5f84c9e7c55a6eaa0652b6c4fcbfd58", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -1127,9 +1127,9 @@ A borrow of a constant containing interior mutability was attempted. Erroneous\n code example:\n \n ```compile_fail,E0492\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::AtomicUsize;\n \n-const A: AtomicUsize = ATOMIC_USIZE_INIT;\n+const A: AtomicUsize = AtomicUsize::new(0);\n static B: &'static AtomicUsize = &A;\n // error: cannot borrow a constant which may contain interior mutability,\n //        create a static instead\n@@ -1145,9 +1145,9 @@ explicitly a single memory location, which can be mutated at will.\n So, in order to solve this error, either use statics which are `Sync`:\n \n ```\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::AtomicUsize;\n \n-static A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static A: AtomicUsize = AtomicUsize::new(0);\n static B: &'static AtomicUsize = &A; // ok!\n ```\n "}, {"sha": "8b6e5680c2d6c324159678da3e4da9b057243273", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -95,11 +95,11 @@ pub use alloc_crate::alloc::*;\n ///\n /// ```rust\n /// use std::alloc::{System, GlobalAlloc, Layout};\n-/// use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering::SeqCst};\n+/// use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n ///\n /// struct Counter;\n ///\n-/// static ALLOCATED: AtomicUsize = ATOMIC_USIZE_INIT;\n+/// static ALLOCATED: AtomicUsize = AtomicUsize::new(0);\n ///\n /// unsafe impl GlobalAlloc for Counter {\n ///     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {"}, {"sha": "a1929b941659d9c0d9b005f5f1f8e9f2d4f8af75", "filename": "src/libstd/sys/redox/thread_local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibstd%2Fsys%2Fredox%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibstd%2Fsys%2Fredox%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fthread_local.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -2,13 +2,13 @@\n \n use collections::BTreeMap;\n use ptr;\n-use sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use sync::atomic::{AtomicUsize, Ordering};\n \n pub type Key = usize;\n \n type Dtor = unsafe extern fn(*mut u8);\n \n-static NEXT_KEY: AtomicUsize = ATOMIC_USIZE_INIT;\n+static NEXT_KEY: AtomicUsize = AtomicUsize::new(0);\n \n static mut KEYS: *mut BTreeMap<Key, Option<Dtor>> = ptr::null_mut();\n "}, {"sha": "b8e09d58debaddb4b4c99971092f83c47216d275", "filename": "src/libstd/sys/sgx/abi/tls.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -1,4 +1,4 @@\n-use sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use sync::atomic::{AtomicUsize, Ordering};\n use ptr;\n use mem;\n use cell::Cell;\n@@ -15,7 +15,40 @@ macro_rules! dup {\n     ((* $($exp:tt)*) $($val:tt)*) => (dup!( ($($exp)*) $($val)* $($val)* ));\n     (() $($val:tt)*) => ([$($val),*])\n }\n-static TLS_DESTRUCTOR: [AtomicUsize; TLS_KEYS] = dup!((* * * * * * *) ATOMIC_USIZE_INIT);\n+static TLS_DESTRUCTOR: [AtomicUsize; TLS_KEYS] = [\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+];\n \n extern \"C\" {\n     fn get_tls_ptr() -> *const u8;\n@@ -119,7 +152,7 @@ impl Tls {\n }\n \n mod sync_bitset {\n-    use sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+    use sync::atomic::{AtomicUsize, Ordering};\n     use iter::{Enumerate, Peekable};\n     use slice::Iter;\n     use super::{TLS_KEYS_BITSET_SIZE, USIZE_BITS};\n@@ -128,7 +161,7 @@ mod sync_bitset {\n     pub(super) struct SyncBitset([AtomicUsize; TLS_KEYS_BITSET_SIZE]);\n \n     pub(super) const SYNC_BITSET_INIT: SyncBitset =\n-        SyncBitset([ATOMIC_USIZE_INIT, ATOMIC_USIZE_INIT]);\n+        SyncBitset([AtomicUsize::new(0), AtomicUsize::new(0)]);\n \n     impl SyncBitset {\n         pub fn get(&self, index: usize) -> bool {"}, {"sha": "a746d982c6ca9d4db144d9ab20de5c0ba2cb083a", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -1,7 +1,7 @@\n use io;\n use libc::{self, c_int};\n use mem;\n-use sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT, Ordering};\n+use sync::atomic::{AtomicBool, Ordering};\n use sys::fd::FileDesc;\n use sys::{cvt, cvt_r};\n \n@@ -13,7 +13,7 @@ pub struct AnonPipe(FileDesc);\n \n pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n     syscall! { fn pipe2(fds: *mut c_int, flags: c_int) -> c_int }\n-    static INVALID: AtomicBool = ATOMIC_BOOL_INIT;\n+    static INVALID: AtomicBool = AtomicBool::new(false);\n \n     let mut fds = [0; 2];\n "}, {"sha": "0d9195a5c971672b9f4007ab2defd67c46a8bf3f", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -7,7 +7,7 @@ use path::Path;\n use ptr;\n use slice;\n use sync::atomic::Ordering::SeqCst;\n-use sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n+use sync::atomic::AtomicUsize;\n use sys::c;\n use sys::fs::{File, OpenOptions};\n use sys::handle::Handle;\n@@ -148,7 +148,7 @@ pub fn anon_pipe(ours_readable: bool) -> io::Result<Pipes> {\n }\n \n fn random_number() -> usize {\n-    static N: AtomicUsize = ATOMIC_USIZE_INIT;\n+    static N: AtomicUsize = AtomicUsize::new(0);\n     loop {\n         if N.load(SeqCst) != 0 {\n             return N.fetch_add(1, SeqCst)"}, {"sha": "a5e96e7750184a5e1e4bd0e3dd6891f858ae2db0", "filename": "src/test/run-pass/allocator/auxiliary/custom-as-global.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom-as-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom-as-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom-as-global.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -4,12 +4,12 @@\n \n extern crate custom;\n \n-use std::sync::atomic::{ATOMIC_USIZE_INIT, Ordering};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n use custom::A;\n \n #[global_allocator]\n-static ALLOCATOR: A = A(ATOMIC_USIZE_INIT);\n+static ALLOCATOR: A = A(AtomicUsize::new(0));\n \n pub fn get() -> usize {\n     ALLOCATOR.0.load(Ordering::SeqCst)"}, {"sha": "71f72ae46c23f26a673a4ae5cf5840c2bdd2a57a", "filename": "src/test/run-pass/allocator/custom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fallocator%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fallocator%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator%2Fcustom.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -8,9 +8,9 @@\n extern crate helper;\n \n use std::alloc::{self, Global, Alloc, System, Layout};\n-use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n-static HITS: AtomicUsize = ATOMIC_USIZE_INIT;\n+static HITS: AtomicUsize = AtomicUsize::new(0);\n \n struct A;\n "}, {"sha": "039c70e77bedfb10beea0bf3dbb9c0287237c8ee", "filename": "src/test/run-pass/allocator/xcrate-use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -10,10 +10,10 @@ extern crate custom;\n extern crate helper;\n \n use std::alloc::{Global, Alloc, System, Layout};\n-use std::sync::atomic::{Ordering, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::{Ordering, AtomicUsize};\n \n #[global_allocator]\n-static GLOBAL: custom::A = custom::A(ATOMIC_USIZE_INIT);\n+static GLOBAL: custom::A = custom::A(AtomicUsize::new(0));\n \n fn main() {\n     unsafe {"}, {"sha": "d8478fb5eaa41960bf1551ab34dfbfb2e8f847a4", "filename": "src/test/run-pass/allocator/xcrate-use2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use2.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -12,9 +12,9 @@ extern crate custom_as_global;\n extern crate helper;\n \n use std::alloc::{alloc, dealloc, GlobalAlloc, System, Layout};\n-use std::sync::atomic::{Ordering, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n-static GLOBAL: custom::A = custom::A(ATOMIC_USIZE_INIT);\n+static GLOBAL: custom::A = custom::A(AtomicUsize::new(0));\n \n fn main() {\n     unsafe {\n@@ -45,4 +45,3 @@ fn main() {\n         assert_eq!(GLOBAL.0.load(Ordering::SeqCst), 2);\n     }\n }\n-"}, {"sha": "8522493232f98dcad580658a7d1238953413cd7d", "filename": "src/test/run-pass/atomic-access-bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fatomic-access-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fatomic-access-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fatomic-access-bool.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -1,9 +1,9 @@\n #![allow(stable_features)]\n #![feature(atomic_access)]\n-use std::sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT};\n+use std::sync::atomic::AtomicBool;\n use std::sync::atomic::Ordering::*;\n \n-static mut ATOMIC: AtomicBool = ATOMIC_BOOL_INIT;\n+static mut ATOMIC: AtomicBool = AtomicBool::new(false);\n \n fn main() {\n     unsafe {"}, {"sha": "77da820e07c56c2dfd3c6b8869d46d2deb6d80f9", "filename": "src/test/run-pass/atomic-compare_exchange.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fatomic-compare_exchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fatomic-compare_exchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fatomic-compare_exchange.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -1,10 +1,10 @@\n #![allow(stable_features)]\n \n #![feature(extended_compare_and_swap)]\n-use std::sync::atomic::{AtomicIsize, ATOMIC_ISIZE_INIT};\n+use std::sync::atomic::AtomicIsize;\n use std::sync::atomic::Ordering::*;\n \n-static ATOMIC: AtomicIsize = ATOMIC_ISIZE_INIT;\n+static ATOMIC: AtomicIsize = AtomicIsize::new(0);\n \n fn main() {\n     // Make sure codegen can emit all the intrinsics correctly"}, {"sha": "78d74a11ffc8b4e96fd19d75ed87664b20e2ccf2", "filename": "src/test/run-pass/deriving/deriving-copyclone.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-copyclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-copyclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-copyclone.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -2,15 +2,15 @@\n //! Test that #[derive(Copy, Clone)] produces a shallow copy\n //! even when a member violates RFC 1521\n \n-use std::sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT, Ordering};\n+use std::sync::atomic::{AtomicBool, Ordering};\n \n /// A struct that pretends to be Copy, but actually does something\n /// in its Clone impl\n #[derive(Copy)]\n struct Liar;\n \n /// Static cooperating with the rogue Clone impl\n-static CLONED: AtomicBool = ATOMIC_BOOL_INIT;\n+static CLONED: AtomicBool = AtomicBool::new(false);\n \n impl Clone for Liar {\n     fn clone(&self) -> Self {\n@@ -36,4 +36,3 @@ fn main() {\n     // if Innocent was byte-for-byte copied, CLONED will still be false\n     assert!(!CLONED.load(Ordering::SeqCst));\n }\n-"}, {"sha": "766eef9e3f3c34525a7a420839466934ab13e1be", "filename": "src/test/run-pass/generator/conditional-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fgenerator%2Fconditional-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fgenerator%2Fconditional-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fconditional-drop.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -3,9 +3,9 @@\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n-static A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static A: AtomicUsize = AtomicUsize::new(0);\n \n struct B;\n "}, {"sha": "252f2c0f07da70deb3274fec2635be1a329e48df", "filename": "src/test/run-pass/generator/drop-env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -3,9 +3,9 @@\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n-static A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static A: AtomicUsize = AtomicUsize::new(0);\n \n struct B;\n "}, {"sha": "8640a6539195b27b52f1557b070fc13a7adc8b61", "filename": "src/test/run-pass/generator/panic-drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -6,9 +6,9 @@\n \n use std::ops::Generator;\n use std::panic;\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n-static A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static A: AtomicUsize = AtomicUsize::new(0);\n \n struct B;\n "}, {"sha": "fa23ae8f95bee94fc6e37f4b2842e6b5a0e93ba1", "filename": "src/test/run-pass/issues/issue-34053.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fissues%2Fissue-34053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fissues%2Fissue-34053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-34053.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n-static DROP_COUNTER: AtomicUsize = ATOMIC_USIZE_INIT;\n+static DROP_COUNTER: AtomicUsize = AtomicUsize::new(0);\n \n struct A(i32);\n "}, {"sha": "d865c3499b2703dac6e770424309c3077c314e18", "filename": "src/test/run-pass/mir/mir_fat_ptr_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fmir%2Fmir_fat_ptr_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fmir%2Fmir_fat_ptr_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir%2Fmir_fat_ptr_drop.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -10,7 +10,7 @@\n use std::sync::atomic;\n use std::sync::atomic::Ordering::SeqCst;\n \n-static COUNTER: atomic::AtomicUsize = atomic::ATOMIC_USIZE_INIT;\n+static COUNTER: atomic::AtomicUsize = atomic::AtomicUsize::new(0);\n \n struct DropMe {\n }"}, {"sha": "7969336ca749bacf1e97ba991de8940fa26d44b1", "filename": "src/test/run-pass/panics/panic-recover-propagate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-recover-propagate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-recover-propagate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-recover-propagate.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -1,11 +1,11 @@\n // run-pass\n // ignore-emscripten no threads support\n \n-use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n use std::panic;\n use std::thread;\n \n-static A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static A: AtomicUsize = AtomicUsize::new(0);\n \n fn main() {\n     panic::set_hook(Box::new(|_| {"}, {"sha": "193c18151059a0a357cdcf401f8cfa4e948e38bc", "filename": "src/test/run-pass/threads-sendsync/tls-init-on-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fthreads-sendsync%2Ftls-init-on-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Frun-pass%2Fthreads-sendsync%2Ftls-init-on-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads-sendsync%2Ftls-init-on-init.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -6,13 +6,13 @@\n #![feature(thread_local_try_with)]\n \n use std::thread;\n-use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n struct Foo { cnt: usize }\n \n thread_local!(static FOO: Foo = Foo::init());\n \n-static CNT: AtomicUsize = ATOMIC_USIZE_INIT;\n+static CNT: AtomicUsize = AtomicUsize::new(0);\n \n impl Foo {\n     fn init() -> Foo {"}, {"sha": "7477947b89ca4b9794a1243351e69a7026deeb77", "filename": "src/test/ui/borrowck/issue-47215-ice-from-drop-elab.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -10,7 +10,7 @@\n #![feature(thread_local)]\n \n #[thread_local]\n-static mut X: ::std::sync::atomic::AtomicUsize = ::std::sync::atomic::ATOMIC_USIZE_INIT;\n+static mut X: ::std::sync::atomic::AtomicUsize = ::std::sync::atomic::AtomicUsize::new(0);\n \n fn main() {\n     unsafe {"}, {"sha": "2de4c12eb64fbef3547c5a04c9a3198dac872b98", "filename": "src/test/ui/error-codes/E0492.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Fui%2Ferror-codes%2FE0492.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftest%2Fui%2Ferror-codes%2FE0492.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0492.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -1,6 +1,6 @@\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::AtomicUsize;\n \n-const A: AtomicUsize = ATOMIC_USIZE_INIT;\n+const A: AtomicUsize = AtomicUsize::new(0);\n static B: &'static AtomicUsize = &A; //~ ERROR E0492\n \n fn main() {"}, {"sha": "3f56d4da6a3ed588392b744ac8cbc87314ab1df8", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a58c6d1deec25c37c93ae4cf9ec2432918bc360/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=7a58c6d1deec25c37c93ae4cf9ec2432918bc360", "patch": "@@ -20,7 +20,7 @@ use std::os::unix::prelude::*;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::str;\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n use std::sync::{Arc, Mutex};\n use std::thread;\n \n@@ -31,7 +31,7 @@ macro_rules! t {\n     })\n }\n \n-static TEST: AtomicUsize = ATOMIC_USIZE_INIT;\n+static TEST: AtomicUsize = AtomicUsize::new(0);\n \n struct Config {\n     pub remote: bool,"}]}