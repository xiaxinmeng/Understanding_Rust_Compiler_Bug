{"sha": "a33966b2f2a93b5108d0fd4464b18912da270e15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMzk2NmIyZjJhOTNiNTEwOGQwZmQ0NDY0YjE4OTEyZGEyNzBlMTU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-13T05:47:00Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-13T05:48:30Z"}, "message": "add Option methods for swap_unwrap and map_consume", "tree": {"sha": "68746dbd20b5245dbb111889d2d20f68efb50ae7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68746dbd20b5245dbb111889d2d20f68efb50ae7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a33966b2f2a93b5108d0fd4464b18912da270e15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a33966b2f2a93b5108d0fd4464b18912da270e15", "html_url": "https://github.com/rust-lang/rust/commit/a33966b2f2a93b5108d0fd4464b18912da270e15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a33966b2f2a93b5108d0fd4464b18912da270e15/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "802d4751903ba4913255a195f6aa9d582e3bb7f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/802d4751903ba4913255a195f6aa9d582e3bb7f2", "html_url": "https://github.com/rust-lang/rust/commit/802d4751903ba4913255a195f6aa9d582e3bb7f2"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "215812978945a01944a5fb4c86f3336f51c4cbe3", "filename": "src/libcore/option.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a33966b2f2a93b5108d0fd4464b18912da270e15/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a33966b2f2a93b5108d0fd4464b18912da270e15/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=a33966b2f2a93b5108d0fd4464b18912da270e15", "patch": "@@ -264,6 +264,13 @@ impl<T> Option<T> {\n     #[inline(always)]\n     pure fn map<U>(&self, f: fn(x: &T) -> U) -> Option<U> { map(self, f) }\n \n+    /// As `map`, but consumes the option and gives `f` ownership to avoid\n+    /// copying.\n+    #[inline(always)]\n+    pure fn map_consume<U>(self, f: fn(v: T) -> U) -> Option<U> {\n+        map_consume(self, f)\n+    }\n+\n     /// Applies a function to the contained value or returns a default\n     #[inline(always)]\n     pure fn map_default<U>(&self, def: U, f: fn(x: &T) -> U) -> U {\n@@ -301,6 +308,17 @@ impl<T> Option<T> {\n     #[inline(always)]\n     pure fn unwrap(self) -> T { unwrap(self) }\n \n+    /**\n+     * The option dance. Moves a value out of an option type and returns it,\n+     * replacing the original with `None`.\n+     *\n+     * # Failure\n+     *\n+     * Fails if the value equals `None`.\n+     */\n+    #[inline(always)]\n+    fn swap_unwrap(&mut self) -> T { swap_unwrap(self) }\n+\n     /**\n      * Gets the value out of an option, printing a specified message on\n      * failure"}]}