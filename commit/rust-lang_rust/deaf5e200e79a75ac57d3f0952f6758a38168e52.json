{"sha": "deaf5e200e79a75ac57d3f0952f6758a38168e52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYWY1ZTIwMGU3OWE3NWFjNTdkM2YwOTUyZjY3NThhMzgxNjhlNTI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-05-17T12:49:04Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-05-26T09:18:10Z"}, "message": "Move \"global\" code into anonymous functions", "tree": {"sha": "72217b08ef6d57a315fbbf95a851b1b1debc9bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72217b08ef6d57a315fbbf95a851b1b1debc9bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deaf5e200e79a75ac57d3f0952f6758a38168e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deaf5e200e79a75ac57d3f0952f6758a38168e52", "html_url": "https://github.com/rust-lang/rust/commit/deaf5e200e79a75ac57d3f0952f6758a38168e52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deaf5e200e79a75ac57d3f0952f6758a38168e52/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fa4762a807a8e637aeaa805bc705c52a1c70d13", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa4762a807a8e637aeaa805bc705c52a1c70d13", "html_url": "https://github.com/rust-lang/rust/commit/0fa4762a807a8e637aeaa805bc705c52a1c70d13"}], "stats": {"total": 506, "additions": 258, "deletions": 248}, "files": [{"sha": "28003084f5700f5fd1de95ed7860b6518eb95e1e", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 258, "deletions": 248, "changes": 506, "blob_url": "https://github.com/rust-lang/rust/blob/deaf5e200e79a75ac57d3f0952f6758a38168e52/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/deaf5e200e79a75ac57d3f0952f6758a38168e52/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=deaf5e200e79a75ac57d3f0952f6758a38168e52", "patch": "@@ -450,7 +450,7 @@ function defocusSearchBar() {\n                 set_fragment(cur_line_id);\n             }\n         }\n-    })();\n+    }());\n \n     document.addEventListener(\"click\", function(ev) {\n         if (hasClass(ev.target, \"collapse-toggle\")) {\n@@ -476,27 +476,29 @@ function defocusSearchBar() {\n         }\n     });\n \n-    var x = document.getElementsByClassName(\"version-selector\");\n-    if (x.length > 0) {\n-        x[0].onchange = function() {\n-            var i, match,\n-                url = document.location.href,\n-                stripped = \"\",\n-                len = rootPath.match(/\\.\\.\\//g).length + 1;\n+    (function() {\n+        var x = document.getElementsByClassName(\"version-selector\");\n+        if (x.length > 0) {\n+            x[0].onchange = function() {\n+                var i, match,\n+                    url = document.location.href,\n+                    stripped = \"\",\n+                    len = rootPath.match(/\\.\\.\\//g).length + 1;\n \n-            for (i = 0; i < len; ++i) {\n-                match = url.match(/\\/[^\\/]*$/);\n-                if (i < len - 1) {\n-                    stripped = match[0] + stripped;\n+                for (i = 0; i < len; ++i) {\n+                    match = url.match(/\\/[^\\/]*$/);\n+                    if (i < len - 1) {\n+                        stripped = match[0] + stripped;\n+                    }\n+                    url = url.substring(0, url.length - match[0].length);\n                 }\n-                url = url.substring(0, url.length - match[0].length);\n-            }\n \n-            url += \"/\" + document.getElementsByClassName(\"version-selector\")[0].value + stripped;\n+                url += \"/\" + document.getElementsByClassName(\"version-selector\")[0].value + stripped;\n \n-            document.location.href = url;\n-        };\n-    }\n+                document.location.href = url;\n+            };\n+        }\n+    }());\n \n     /**\n      * A function to compute the Levenshtein distance between two strings\n@@ -2259,7 +2261,7 @@ function defocusSearchBar() {\n         }\n     }\n \n-    function collapser(e, collapse) {\n+    function collapser(pageId, e, collapse) {\n         // inherent impl ids are like \"impl\" or impl-<number>'.\n         // they will never be hidden by default.\n         var n = e.parentElement;\n@@ -2279,15 +2281,15 @@ function defocusSearchBar() {\n \n             if (impl_list !== null) {\n                 onEachLazy(impl_list.getElementsByClassName(\"collapse-toggle\"), function(e) {\n-                    collapser(e, collapse);\n+                    collapser(pageId, e, collapse);\n                 });\n             }\n \n             var blanket_list = document.getElementById(\"blanket-implementations-list\");\n \n             if (blanket_list !== null) {\n                 onEachLazy(blanket_list.getElementsByClassName(\"collapse-toggle\"), function(e) {\n-                    collapser(e, collapse);\n+                    collapser(pageId, e, collapse);\n                 });\n             }\n         }\n@@ -2311,103 +2313,7 @@ function defocusSearchBar() {\n         return toggle;\n     }\n \n-    var toggle = createSimpleToggle(false);\n-    var hideMethodDocs = getCurrentValue(\"rustdoc-auto-hide-method-docs\") === \"true\";\n-    var pageId = getPageId();\n-\n-    var func = function(e) {\n-        var next = e.nextElementSibling;\n-        if (!next) {\n-            return;\n-        }\n-        if (hasClass(next, \"docblock\") === true ||\n-            (hasClass(next, \"stability\") === true &&\n-             hasClass(next.nextElementSibling, \"docblock\") === true)) {\n-            var newToggle = toggle.cloneNode(true);\n-            insertAfter(newToggle, e.childNodes[e.childNodes.length - 1]);\n-            if (hideMethodDocs === true && hasClass(e, \"method\") === true) {\n-                collapseDocs(newToggle, \"hide\", pageId);\n-            }\n-        }\n-    };\n-\n-    var funcImpl = function(e) {\n-        var next = e.nextElementSibling;\n-        if (next && hasClass(next, \"docblock\")) {\n-            next = next.nextElementSibling;\n-        }\n-        if (!next) {\n-            return;\n-        }\n-        if (next.getElementsByClassName(\"method\").length > 0 && hasClass(e, \"impl\")) {\n-            insertAfter(toggle.cloneNode(true), e.childNodes[e.childNodes.length - 1]);\n-        }\n-    };\n-\n-    onEachLazy(document.getElementsByClassName(\"method\"), func);\n-    onEachLazy(document.getElementsByClassName(\"associatedconstant\"), func);\n-    onEachLazy(document.getElementsByClassName(\"impl\"), funcImpl);\n-    var impl_call = function() {};\n-    if (hideMethodDocs === true) {\n-        impl_call = function(e, newToggle, pageId) {\n-            if (e.id.match(/^impl(?:-\\d+)?$/) === null) {\n-                // Automatically minimize all non-inherent impls\n-                if (hasClass(e, \"impl\") === true) {\n-                    collapseDocs(newToggle, \"hide\", pageId);\n-                }\n-            }\n-        };\n-    }\n-    var newToggle = document.createElement(\"a\");\n-    newToggle.href = \"javascript:void(0)\";\n-    newToggle.className = \"collapse-toggle hidden-default collapsed\";\n-    newToggle.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(true) +\n-                          \"</span>] Show hidden undocumented items\";\n-    function toggleClicked() {\n-        if (hasClass(this, \"collapsed\")) {\n-            removeClass(this, \"collapsed\");\n-            onEachLazy(this.parentNode.getElementsByClassName(\"hidden\"), function(x) {\n-                if (hasClass(x, \"content\") === false) {\n-                    removeClass(x, \"hidden\");\n-                    addClass(x, \"x\");\n-                }\n-            }, true);\n-            this.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(false) +\n-                             \"</span>] Hide undocumented items\";\n-        } else {\n-            addClass(this, \"collapsed\");\n-            onEachLazy(this.parentNode.getElementsByClassName(\"x\"), function(x) {\n-                if (hasClass(x, \"content\") === false) {\n-                    addClass(x, \"hidden\");\n-                    removeClass(x, \"x\");\n-                }\n-            }, true);\n-            this.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(true) +\n-                             \"</span>] Show hidden undocumented items\";\n-        }\n-    }\n-    onEachLazy(document.getElementsByClassName(\"impl-items\"), function(e) {\n-        onEachLazy(e.getElementsByClassName(\"associatedconstant\"), func);\n-        var hiddenElems = e.getElementsByClassName(\"hidden\");\n-        var needToggle = false;\n-\n-        var hlength = hiddenElems.length;\n-        for (var i = 0; i < hlength; ++i) {\n-            if (hasClass(hiddenElems[i], \"content\") === false &&\n-                hasClass(hiddenElems[i], \"docblock\") === false) {\n-                needToggle = true;\n-                break;\n-            }\n-        }\n-        if (needToggle === true) {\n-            var inner_toggle = newToggle.cloneNode(true);\n-            inner_toggle.onclick = toggleClicked;\n-            e.insertBefore(inner_toggle, e.firstChild);\n-            impl_call(e.previousSibling, inner_toggle, pageId);\n-        }\n-    });\n-\n-    function createToggle(otherMessage, fontSize, extraClass, show) {\n+    function createToggle(toggle, otherMessage, fontSize, extraClass, show) {\n         var span = document.createElement(\"span\");\n         span.className = \"toggle-label\";\n         if (show) {\n@@ -2442,97 +2348,197 @@ function defocusSearchBar() {\n         return wrapper;\n     }\n \n-    var currentType = document.getElementsByClassName(\"type-decl\")[0];\n-    var className = null;\n-    if (currentType) {\n-        currentType = currentType.getElementsByClassName(\"rust\")[0];\n-        if (currentType) {\n-            currentType.classList.forEach(function(item) {\n-                if (item !== \"main\") {\n-                    className = item;\n-                    return true;\n+    (function() {\n+        var toggle = createSimpleToggle(false);\n+        var hideMethodDocs = getCurrentValue(\"rustdoc-auto-hide-method-docs\") === \"true\";\n+        var pageId = getPageId();\n+\n+        var func = function(e) {\n+            var next = e.nextElementSibling;\n+            if (!next) {\n+                return;\n+            }\n+            if (hasClass(next, \"docblock\") === true ||\n+                (hasClass(next, \"stability\") === true &&\n+                 hasClass(next.nextElementSibling, \"docblock\") === true)) {\n+                var newToggle = toggle.cloneNode(true);\n+                insertAfter(newToggle, e.childNodes[e.childNodes.length - 1]);\n+                if (hideMethodDocs === true && hasClass(e, \"method\") === true) {\n+                    collapseDocs(newToggle, \"hide\", pageId);\n                 }\n-            });\n+            }\n+        };\n+\n+        var funcImpl = function(e) {\n+            var next = e.nextElementSibling;\n+            if (next && hasClass(next, \"docblock\")) {\n+                next = next.nextElementSibling;\n+            }\n+            if (!next) {\n+                return;\n+            }\n+            if (next.getElementsByClassName(\"method\").length > 0 && hasClass(e, \"impl\")) {\n+                insertAfter(toggle.cloneNode(true), e.childNodes[e.childNodes.length - 1]);\n+            }\n+        };\n+\n+        onEachLazy(document.getElementsByClassName(\"method\"), func);\n+        onEachLazy(document.getElementsByClassName(\"associatedconstant\"), func);\n+        onEachLazy(document.getElementsByClassName(\"impl\"), funcImpl);\n+        var impl_call = function() {};\n+        if (hideMethodDocs === true) {\n+            impl_call = function(e, newToggle) {\n+                if (e.id.match(/^impl(?:-\\d+)?$/) === null) {\n+                    // Automatically minimize all non-inherent impls\n+                    if (hasClass(e, \"impl\") === true) {\n+                        collapseDocs(newToggle, \"hide\", pageId);\n+                    }\n+                }\n+            };\n         }\n-    }\n-    var showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-\" + className);\n-    if (showItemDeclarations === null) {\n-        if (className === \"enum\" || className === \"macro\") {\n-            showItemDeclarations = \"false\";\n-        } else if (className === \"struct\" || className === \"union\" || className === \"trait\") {\n-            showItemDeclarations = \"true\";\n-        } else {\n-            // In case we found an unknown type, we just use the \"parent\" value.\n-            showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-declarations\");\n+        var newToggle = document.createElement(\"a\");\n+        newToggle.href = \"javascript:void(0)\";\n+        newToggle.className = \"collapse-toggle hidden-default collapsed\";\n+        newToggle.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(true) +\n+                              \"</span>] Show hidden undocumented items\";\n+        function toggleClicked() {\n+            if (hasClass(this, \"collapsed\")) {\n+                removeClass(this, \"collapsed\");\n+                onEachLazy(this.parentNode.getElementsByClassName(\"hidden\"), function(x) {\n+                    if (hasClass(x, \"content\") === false) {\n+                        removeClass(x, \"hidden\");\n+                        addClass(x, \"x\");\n+                    }\n+                }, true);\n+                this.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(false) +\n+                                 \"</span>] Hide undocumented items\";\n+            } else {\n+                addClass(this, \"collapsed\");\n+                onEachLazy(this.parentNode.getElementsByClassName(\"x\"), function(x) {\n+                    if (hasClass(x, \"content\") === false) {\n+                        addClass(x, \"hidden\");\n+                        removeClass(x, \"x\");\n+                    }\n+                }, true);\n+                this.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(true) +\n+                                 \"</span>] Show hidden undocumented items\";\n+            }\n         }\n-    }\n-    showItemDeclarations = showItemDeclarations === \"false\";\n-    function buildToggleWrapper(e) {\n-        if (hasClass(e, \"autohide\")) {\n-            var wrap = e.previousElementSibling;\n-            if (wrap && hasClass(wrap, \"toggle-wrapper\")) {\n-                var inner_toggle = wrap.childNodes[0];\n-                var extra = e.childNodes[0].tagName === \"H3\";\n-\n-                e.style.display = \"none\";\n-                addClass(wrap, \"collapsed\");\n-                onEachLazy(inner_toggle.getElementsByClassName(\"inner\"), function(e) {\n-                    e.innerHTML = labelForToggleButton(true);\n-                });\n-                onEachLazy(inner_toggle.getElementsByClassName(\"toggle-label\"), function(e) {\n-                    e.style.display = \"inline-block\";\n-                    if (extra === true) {\n-                        i_e.innerHTML = \" Show \" + e.childNodes[0].innerHTML;\n+        onEachLazy(document.getElementsByClassName(\"impl-items\"), function(e) {\n+            onEachLazy(e.getElementsByClassName(\"associatedconstant\"), func);\n+            var hiddenElems = e.getElementsByClassName(\"hidden\");\n+            var needToggle = false;\n+\n+            var hlength = hiddenElems.length;\n+            for (var i = 0; i < hlength; ++i) {\n+                if (hasClass(hiddenElems[i], \"content\") === false &&\n+                    hasClass(hiddenElems[i], \"docblock\") === false) {\n+                    needToggle = true;\n+                    break;\n+                }\n+            }\n+            if (needToggle === true) {\n+                var inner_toggle = newToggle.cloneNode(true);\n+                inner_toggle.onclick = toggleClicked;\n+                e.insertBefore(inner_toggle, e.firstChild);\n+                impl_call(e.previousSibling, inner_toggle);\n+            }\n+        });\n+\n+        var currentType = document.getElementsByClassName(\"type-decl\")[0];\n+        var className = null;\n+        if (currentType) {\n+            currentType = currentType.getElementsByClassName(\"rust\")[0];\n+            if (currentType) {\n+                currentType.classList.forEach(function(item) {\n+                    if (item !== \"main\") {\n+                        className = item;\n+                        return true;\n                     }\n                 });\n             }\n         }\n-        if (e.parentNode.id === \"main\") {\n-            var otherMessage = \"\";\n-            var fontSize;\n-            var extraClass;\n-\n-            if (hasClass(e, \"type-decl\")) {\n-                fontSize = \"20px\";\n-                otherMessage = \"&nbsp;Show&nbsp;declaration\";\n-                if (showItemDeclarations === false) {\n-                    extraClass = \"collapsed\";\n-                }\n-            } else if (hasClass(e, \"sub-variant\")) {\n-                otherMessage = \"&nbsp;Show&nbsp;fields\";\n-            } else if (hasClass(e, \"non-exhaustive\")) {\n-                otherMessage = \"&nbsp;This&nbsp;\";\n-                if (hasClass(e, \"non-exhaustive-struct\")) {\n-                    otherMessage += \"struct\";\n-                } else if (hasClass(e, \"non-exhaustive-enum\")) {\n-                    otherMessage += \"enum\";\n-                } else if (hasClass(e, \"non-exhaustive-variant\")) {\n-                    otherMessage += \"enum variant\";\n-                } else if (hasClass(e, \"non-exhaustive-type\")) {\n-                    otherMessage += \"type\";\n-                }\n-                otherMessage += \"&nbsp;is&nbsp;marked&nbsp;as&nbsp;non-exhaustive\";\n-            } else if (hasClass(e.childNodes[0], \"impl-items\")) {\n-                extraClass = \"marg-left\";\n-            }\n-\n-            e.parentNode.insertBefore(\n-                createToggle(otherMessage,\n-                             fontSize,\n-                             extraClass,\n-                             hasClass(e, \"type-decl\") === false || showItemDeclarations === true),\n-                e);\n-            if (hasClass(e, \"type-decl\") === true && showItemDeclarations === true) {\n-                collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n-            }\n-            if (hasClass(e, \"non-exhaustive\") === true) {\n-                collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n+        var showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-\" + className);\n+        if (showItemDeclarations === null) {\n+            if (className === \"enum\" || className === \"macro\") {\n+                showItemDeclarations = \"false\";\n+            } else if (className === \"struct\" || className === \"union\" || className === \"trait\") {\n+                showItemDeclarations = \"true\";\n+            } else {\n+                // In case we found an unknown type, we just use the \"parent\" value.\n+                showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-declarations\");\n+            }\n+        }\n+        showItemDeclarations = showItemDeclarations === \"false\";\n+        function buildToggleWrapper(e) {\n+            if (hasClass(e, \"autohide\")) {\n+                var wrap = e.previousElementSibling;\n+                if (wrap && hasClass(wrap, \"toggle-wrapper\")) {\n+                    var inner_toggle = wrap.childNodes[0];\n+                    var extra = e.childNodes[0].tagName === \"H3\";\n+\n+                    e.style.display = \"none\";\n+                    addClass(wrap, \"collapsed\");\n+                    onEachLazy(inner_toggle.getElementsByClassName(\"inner\"), function(e) {\n+                        e.innerHTML = labelForToggleButton(true);\n+                    });\n+                    onEachLazy(inner_toggle.getElementsByClassName(\"toggle-label\"), function(e) {\n+                        e.style.display = \"inline-block\";\n+                        if (extra === true) {\n+                            i_e.innerHTML = \" Show \" + e.childNodes[0].innerHTML;\n+                        }\n+                    });\n+                }\n+            }\n+            if (e.parentNode.id === \"main\") {\n+                var otherMessage = \"\";\n+                var fontSize;\n+                var extraClass;\n+\n+                if (hasClass(e, \"type-decl\")) {\n+                    fontSize = \"20px\";\n+                    otherMessage = \"&nbsp;Show&nbsp;declaration\";\n+                    if (showItemDeclarations === false) {\n+                        extraClass = \"collapsed\";\n+                    }\n+                } else if (hasClass(e, \"sub-variant\")) {\n+                    otherMessage = \"&nbsp;Show&nbsp;fields\";\n+                } else if (hasClass(e, \"non-exhaustive\")) {\n+                    otherMessage = \"&nbsp;This&nbsp;\";\n+                    if (hasClass(e, \"non-exhaustive-struct\")) {\n+                        otherMessage += \"struct\";\n+                    } else if (hasClass(e, \"non-exhaustive-enum\")) {\n+                        otherMessage += \"enum\";\n+                    } else if (hasClass(e, \"non-exhaustive-variant\")) {\n+                        otherMessage += \"enum variant\";\n+                    } else if (hasClass(e, \"non-exhaustive-type\")) {\n+                        otherMessage += \"type\";\n+                    }\n+                    otherMessage += \"&nbsp;is&nbsp;marked&nbsp;as&nbsp;non-exhaustive\";\n+                } else if (hasClass(e.childNodes[0], \"impl-items\")) {\n+                    extraClass = \"marg-left\";\n+                }\n+\n+                e.parentNode.insertBefore(\n+                    createToggle(\n+                        toggle,\n+                        otherMessage,\n+                        fontSize,\n+                        extraClass,\n+                        hasClass(e, \"type-decl\") === false || showItemDeclarations === true),\n+                    e);\n+                if (hasClass(e, \"type-decl\") === true && showItemDeclarations === true) {\n+                    collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n+                }\n+                if (hasClass(e, \"non-exhaustive\") === true) {\n+                    collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n+                }\n             }\n         }\n-    }\n \n-    onEachLazy(document.getElementsByClassName(\"docblock\"), buildToggleWrapper);\n-    onEachLazy(document.getElementsByClassName(\"sub-variant\"), buildToggleWrapper);\n+        onEachLazy(document.getElementsByClassName(\"docblock\"), buildToggleWrapper);\n+        onEachLazy(document.getElementsByClassName(\"sub-variant\"), buildToggleWrapper);\n+    }());\n \n     function createToggleWrapper(tog) {\n         var span = document.createElement(\"span\");\n@@ -2547,56 +2553,60 @@ function defocusSearchBar() {\n         return wrapper;\n     }\n \n-    // To avoid checking on \"rustdoc-item-attributes\" value on every loop...\n-    var itemAttributesFunc = function() {};\n-    if (getCurrentValue(\"rustdoc-auto-hide-attributes\") !== \"false\") {\n-        itemAttributesFunc = function(x) {\n-            collapseDocs(x.previousSibling.childNodes[0], \"toggle\");\n-        };\n-    }\n-    var attributesToggle = createToggleWrapper(createSimpleToggle(false));\n-    onEachLazy(main.getElementsByClassName(\"attributes\"), function(i_e) {\n-        var attr_tog = attributesToggle.cloneNode(true);\n-        if (hasClass(i_e, \"top-attr\") === true) {\n-            addClass(attr_tog, \"top-attr\");\n-        }\n-        i_e.parentNode.insertBefore(attr_tog, i_e);\n-        itemAttributesFunc(i_e);\n-    });\n-\n-    // To avoid checking on \"rustdoc-line-numbers\" value on every loop...\n-    var lineNumbersFunc = function() {};\n-    if (getCurrentValue(\"rustdoc-line-numbers\") === \"true\") {\n-        lineNumbersFunc = function(x) {\n-            var count = x.textContent.split(\"\\n\").length;\n-            var elems = [];\n-            for (var i = 0; i < count; ++i) {\n-                elems.push(i + 1);\n-            }\n-            var node = document.createElement(\"pre\");\n-            addClass(node, \"line-number\");\n-            node.innerHTML = elems.join(\"\\n\");\n-            x.parentNode.insertBefore(node, x);\n-        };\n-    }\n-    onEachLazy(document.getElementsByClassName(\"rust-example-rendered\"), function(e) {\n-        if (hasClass(e, \"compile_fail\")) {\n-            e.addEventListener(\"mouseover\", function(event) {\n-                this.parentElement.previousElementSibling.childNodes[0].style.color = \"#f00\";\n-            });\n-            e.addEventListener(\"mouseout\", function(event) {\n-                this.parentElement.previousElementSibling.childNodes[0].style.color = \"\";\n-            });\n-        } else if (hasClass(e, \"ignore\")) {\n-            e.addEventListener(\"mouseover\", function(event) {\n-                this.parentElement.previousElementSibling.childNodes[0].style.color = \"#ff9200\";\n-            });\n-            e.addEventListener(\"mouseout\", function(event) {\n-                this.parentElement.previousElementSibling.childNodes[0].style.color = \"\";\n-            });\n+    (function() {\n+        // To avoid checking on \"rustdoc-item-attributes\" value on every loop...\n+        var itemAttributesFunc = function() {};\n+        if (getCurrentValue(\"rustdoc-auto-hide-attributes\") !== \"false\") {\n+            itemAttributesFunc = function(x) {\n+                collapseDocs(x.previousSibling.childNodes[0], \"toggle\");\n+            };\n         }\n-        lineNumbersFunc(e);\n-    });\n+        var attributesToggle = createToggleWrapper(createSimpleToggle(false));\n+        onEachLazy(main.getElementsByClassName(\"attributes\"), function(i_e) {\n+            var attr_tog = attributesToggle.cloneNode(true);\n+            if (hasClass(i_e, \"top-attr\") === true) {\n+                addClass(attr_tog, \"top-attr\");\n+            }\n+            i_e.parentNode.insertBefore(attr_tog, i_e);\n+            itemAttributesFunc(i_e);\n+        });\n+    }());\n+\n+    (function() {\n+        // To avoid checking on \"rustdoc-line-numbers\" value on every loop...\n+        var lineNumbersFunc = function() {};\n+        if (getCurrentValue(\"rustdoc-line-numbers\") === \"true\") {\n+            lineNumbersFunc = function(x) {\n+                var count = x.textContent.split(\"\\n\").length;\n+                var elems = [];\n+                for (var i = 0; i < count; ++i) {\n+                    elems.push(i + 1);\n+                }\n+                var node = document.createElement(\"pre\");\n+                addClass(node, \"line-number\");\n+                node.innerHTML = elems.join(\"\\n\");\n+                x.parentNode.insertBefore(node, x);\n+            };\n+        }\n+        onEachLazy(document.getElementsByClassName(\"rust-example-rendered\"), function(e) {\n+            if (hasClass(e, \"compile_fail\")) {\n+                e.addEventListener(\"mouseover\", function(event) {\n+                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"#f00\";\n+                });\n+                e.addEventListener(\"mouseout\", function(event) {\n+                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"\";\n+                });\n+            } else if (hasClass(e, \"ignore\")) {\n+                e.addEventListener(\"mouseover\", function(event) {\n+                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"#ff9200\";\n+                });\n+                e.addEventListener(\"mouseout\", function(event) {\n+                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"\";\n+                });\n+            }\n+            lineNumbersFunc(e);\n+        });\n+    }());\n \n     // In the search display, allows to switch between tabs.\n     function printTab(nb) {"}]}