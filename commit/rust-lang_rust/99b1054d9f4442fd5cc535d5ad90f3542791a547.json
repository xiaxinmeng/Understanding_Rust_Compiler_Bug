{"sha": "99b1054d9f4442fd5cc535d5ad90f3542791a547", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YjEwNTRkOWY0NDQyZmQ1Y2M1MzVkNWFkOTBmMzU0Mjc5MWE1NDc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-02-23T21:42:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-02-26T17:24:41Z"}, "message": "Anonymize remaining line numbers at line starts", "tree": {"sha": "7cd9070451c55bddcac33ef9b486afcd2e49c909", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cd9070451c55bddcac33ef9b486afcd2e49c909"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99b1054d9f4442fd5cc535d5ad90f3542791a547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99b1054d9f4442fd5cc535d5ad90f3542791a547", "html_url": "https://github.com/rust-lang/rust/commit/99b1054d9f4442fd5cc535d5ad90f3542791a547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99b1054d9f4442fd5cc535d5ad90f3542791a547/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e650eef8b045c57be36d230f2a911a3775aefd1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e650eef8b045c57be36d230f2a911a3775aefd1e", "html_url": "https://github.com/rust-lang/rust/commit/e650eef8b045c57be36d230f2a911a3775aefd1e"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "d04a210a9049e94f238a61f9df47b41e81f2b81f", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/99b1054d9f4442fd5cc535d5ad90f3542791a547/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b1054d9f4442fd5cc535d5ad90f3542791a547/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=99b1054d9f4442fd5cc535d5ad90f3542791a547", "patch": "@@ -193,6 +193,14 @@ impl EmitterWriter {\n         Self { ui_testing, ..self }\n     }\n \n+    fn maybe_anonymized(&self, line_num: usize) -> String {\n+        if self.ui_testing {\n+            ANONYMIZED_LINE_NUM.to_string()\n+        } else {\n+            line_num.to_string()\n+        }\n+    }\n+\n     fn preprocess_annotations(&mut self, msp: &MultiSpan) -> Vec<FileWithAnnotatedLines> {\n         fn add_annotation_to_file(file_vec: &mut Vec<FileWithAnnotatedLines>,\n                                   file: Rc<FileMap>,\n@@ -344,14 +352,9 @@ impl EmitterWriter {\n \n         // First create the source line we will highlight.\n         buffer.puts(line_offset, code_offset, &source_string, Style::Quotation);\n-        let line_index = if self.ui_testing {\n-            ANONYMIZED_LINE_NUM.to_string()\n-        } else {\n-            line.line_index.to_string()\n-        };\n         buffer.puts(line_offset,\n                     0,\n-                    &line_index,\n+                    &self.maybe_anonymized(line.line_index),\n                     Style::LineNumber);\n \n         draw_col_separator(buffer, line_offset, width_offset - 2);\n@@ -1174,8 +1177,8 @@ impl EmitterWriter {\n \n                             buffer.puts(last_buffer_line_num,\n                                         0,\n-                                        &(annotated_file.lines[line_idx + 1].line_index - 1)\n-                                            .to_string(),\n+                                        &self.maybe_anonymized(annotated_file.lines[line_idx + 1]\n+                                                                             .line_index - 1),\n                                         Style::LineNumber);\n                             draw_col_separator(&mut buffer,\n                                                last_buffer_line_num,\n@@ -1250,7 +1253,7 @@ impl EmitterWriter {\n                     // Print the span column to avoid confusion\n                     buffer.puts(row_num,\n                                 0,\n-                                &((line_start + line_pos).to_string()),\n+                                &self.maybe_anonymized(line_start + line_pos),\n                                 Style::LineNumber);\n                     // print the suggestion\n                     draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);"}]}