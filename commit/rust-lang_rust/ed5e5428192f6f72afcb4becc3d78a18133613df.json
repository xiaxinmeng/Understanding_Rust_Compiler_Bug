{"sha": "ed5e5428192f6f72afcb4becc3d78a18133613df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNWU1NDI4MTkyZjZmNzJhZmNiNGJlY2MzZDc4YTE4MTMzNjEzZGY=", "commit": {"author": {"name": "Mathieu Poumeyrol", "email": "kali@zoy.org", "date": "2016-09-27T14:16:49Z"}, "committer": {"name": "Mathieu Poumeyrol", "email": "mathieu.poumeyrol@snips.ai", "date": "2016-09-28T17:43:11Z"}, "message": "MSG_NOSIGNAL on linux", "tree": {"sha": "9d800b1ae90dcff672a7acbaf228213616d91a2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d800b1ae90dcff672a7acbaf228213616d91a2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed5e5428192f6f72afcb4becc3d78a18133613df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed5e5428192f6f72afcb4becc3d78a18133613df", "html_url": "https://github.com/rust-lang/rust/commit/ed5e5428192f6f72afcb4becc3d78a18133613df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed5e5428192f6f72afcb4becc3d78a18133613df/comments", "author": {"login": "kali", "id": 53657, "node_id": "MDQ6VXNlcjUzNjU3", "avatar_url": "https://avatars.githubusercontent.com/u/53657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kali", "html_url": "https://github.com/kali", "followers_url": "https://api.github.com/users/kali/followers", "following_url": "https://api.github.com/users/kali/following{/other_user}", "gists_url": "https://api.github.com/users/kali/gists{/gist_id}", "starred_url": "https://api.github.com/users/kali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kali/subscriptions", "organizations_url": "https://api.github.com/users/kali/orgs", "repos_url": "https://api.github.com/users/kali/repos", "events_url": "https://api.github.com/users/kali/events{/privacy}", "received_events_url": "https://api.github.com/users/kali/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kali", "id": 53657, "node_id": "MDQ6VXNlcjUzNjU3", "avatar_url": "https://avatars.githubusercontent.com/u/53657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kali", "html_url": "https://github.com/kali", "followers_url": "https://api.github.com/users/kali/followers", "following_url": "https://api.github.com/users/kali/following{/other_user}", "gists_url": "https://api.github.com/users/kali/gists{/gist_id}", "starred_url": "https://api.github.com/users/kali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kali/subscriptions", "organizations_url": "https://api.github.com/users/kali/orgs", "repos_url": "https://api.github.com/users/kali/repos", "events_url": "https://api.github.com/users/kali/events{/privacy}", "received_events_url": "https://api.github.com/users/kali/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f6e261e20fd1a770cb3477205c192dd158897f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6e261e20fd1a770cb3477205c192dd158897f8", "html_url": "https://github.com/rust-lang/rust/commit/6f6e261e20fd1a770cb3477205c192dd158897f8"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "d0d387c6ed9b9c53ca5caf7e7b16b344346b52a6", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ed5e5428192f6f72afcb4becc3d78a18133613df/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5e5428192f6f72afcb4becc3d78a18133613df/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=ed5e5428192f6f72afcb4becc3d78a18133613df", "patch": "@@ -42,6 +42,11 @@ use sys::net::netc::IPV6_LEAVE_GROUP as IPV6_DROP_MEMBERSHIP;\n               target_os = \"solaris\", target_os = \"haiku\")))]\n use sys::net::netc::IPV6_DROP_MEMBERSHIP;\n \n+#[cfg(target_os = \"linux\")]\n+const MSG_NOSIGNAL: c_int = 0x4000;\n+#[cfg(not(target_os = \"linux\"))]\n+const MSG_NOSIGNAL: c_int = 0x0; // unused dummy value\n+\n ////////////////////////////////////////////////////////////////////////////////\n // sockaddr and misc bindings\n ////////////////////////////////////////////////////////////////////////////////\n@@ -221,11 +226,12 @@ impl TcpStream {\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;\n+        let flags = if cfg!(target_os = \"linux\") { MSG_NOSIGNAL } else { 0 };\n         let ret = cvt(unsafe {\n             c::send(*self.inner.as_inner(),\n                     buf.as_ptr() as *const c_void,\n                     len,\n-                    0)\n+                    flags)\n         })?;\n         Ok(ret as usize)\n     }\n@@ -446,10 +452,11 @@ impl UdpSocket {\n     pub fn send_to(&self, buf: &[u8], dst: &SocketAddr) -> io::Result<usize> {\n         let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;\n         let (dstp, dstlen) = dst.into_inner();\n+        let flags = if cfg!(target_os = \"linux\") { MSG_NOSIGNAL } else { 0 };\n         let ret = cvt(unsafe {\n             c::sendto(*self.inner.as_inner(),\n                       buf.as_ptr() as *const c_void, len,\n-                      0, dstp, dstlen)\n+                      flags, dstp, dstlen)\n         })?;\n         Ok(ret as usize)\n     }\n@@ -569,11 +576,12 @@ impl UdpSocket {\n \n     pub fn send(&self, buf: &[u8]) -> io::Result<usize> {\n         let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;\n+        let flags = if cfg!(target_os = \"linux\") { MSG_NOSIGNAL } else { 0 };\n         let ret = cvt(unsafe {\n             c::send(*self.inner.as_inner(),\n                     buf.as_ptr() as *const c_void,\n                     len,\n-                    0)\n+                    flags)\n         })?;\n         Ok(ret as usize)\n     }"}, {"sha": "f2e40714b469fa147eb4c62b9589b8bfcb1d272b", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed5e5428192f6f72afcb4becc3d78a18133613df/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5e5428192f6f72afcb4becc3d78a18133613df/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=ed5e5428192f6f72afcb4becc3d78a18133613df", "patch": "@@ -28,6 +28,11 @@ use sys::cvt;\n use sys::net::Socket;\n use sys_common::{AsInner, FromInner, IntoInner};\n \n+#[cfg(target_os = \"linux\")]\n+const MSG_NOSIGNAL: libc::c_int = 0x4000;\n+#[cfg(not(target_os = \"linux\"))]\n+const MSG_NOSIGNAL: libc::c_int = 0x0; // unused dummy value\n+\n fn sun_path_offset() -> usize {\n     unsafe {\n         // Work with an actual instance of the type since using a null pointer is UB\n@@ -686,11 +691,12 @@ impl UnixDatagram {\n         fn inner(d: &UnixDatagram, buf: &[u8], path: &Path) -> io::Result<usize> {\n             unsafe {\n                 let (addr, len) = sockaddr_un(path)?;\n+                let flags = if cfg!(target_os = \"linux\") { MSG_NOSIGNAL } else { 0 };\n \n                 let count = cvt(libc::sendto(*d.0.as_inner(),\n                                              buf.as_ptr() as *const _,\n                                              buf.len(),\n-                                             0,\n+                                             flags,\n                                              &addr as *const _ as *const _,\n                                              len))?;\n                 Ok(count as usize)"}]}