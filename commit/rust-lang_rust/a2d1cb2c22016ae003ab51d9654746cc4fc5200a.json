{"sha": "a2d1cb2c22016ae003ab51d9654746cc4fc5200a", "node_id": "C_kwDOAAsO6NoAKGEyZDFjYjJjMjIwMTZhZTAwM2FiNTFkOTY1NDc0NmNjNGZjNTIwMGE", "commit": {"author": {"name": "dimi", "email": "dimi.polonski@gmail.com", "date": "2022-05-24T21:56:19Z"}, "committer": {"name": "dimi", "email": "dimi.polonski@gmail.com", "date": "2023-01-24T11:06:12Z"}, "message": "impl DispatchFromDyn for Cell and UnsafeCell", "tree": {"sha": "9b609eb38217e279be5b296fd90bdd7ed494de41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b609eb38217e279be5b296fd90bdd7ed494de41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2d1cb2c22016ae003ab51d9654746cc4fc5200a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2d1cb2c22016ae003ab51d9654746cc4fc5200a", "html_url": "https://github.com/rust-lang/rust/commit/a2d1cb2c22016ae003ab51d9654746cc4fc5200a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2d1cb2c22016ae003ab51d9654746cc4fc5200a/comments", "author": {"login": "dimpolo", "id": 33688001, "node_id": "MDQ6VXNlcjMzNjg4MDAx", "avatar_url": "https://avatars.githubusercontent.com/u/33688001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimpolo", "html_url": "https://github.com/dimpolo", "followers_url": "https://api.github.com/users/dimpolo/followers", "following_url": "https://api.github.com/users/dimpolo/following{/other_user}", "gists_url": "https://api.github.com/users/dimpolo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimpolo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimpolo/subscriptions", "organizations_url": "https://api.github.com/users/dimpolo/orgs", "repos_url": "https://api.github.com/users/dimpolo/repos", "events_url": "https://api.github.com/users/dimpolo/events{/privacy}", "received_events_url": "https://api.github.com/users/dimpolo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dimpolo", "id": 33688001, "node_id": "MDQ6VXNlcjMzNjg4MDAx", "avatar_url": "https://avatars.githubusercontent.com/u/33688001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimpolo", "html_url": "https://github.com/dimpolo", "followers_url": "https://api.github.com/users/dimpolo/followers", "following_url": "https://api.github.com/users/dimpolo/following{/other_user}", "gists_url": "https://api.github.com/users/dimpolo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimpolo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimpolo/subscriptions", "organizations_url": "https://api.github.com/users/dimpolo/orgs", "repos_url": "https://api.github.com/users/dimpolo/repos", "events_url": "https://api.github.com/users/dimpolo/events{/privacy}", "received_events_url": "https://api.github.com/users/dimpolo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8e6a9e8b6251bbc8276cb78cabe1998deecbed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e6a9e8b6251bbc8276cb78cabe1998deecbed7", "html_url": "https://github.com/rust-lang/rust/commit/c8e6a9e8b6251bbc8276cb78cabe1998deecbed7"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "7f109491350f0a21c2bbb5bc3f6b0badd193e4e8", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a2d1cb2c22016ae003ab51d9654746cc4fc5200a/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d1cb2c22016ae003ab51d9654746cc4fc5200a/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=a2d1cb2c22016ae003ab51d9654746cc4fc5200a", "patch": "@@ -196,7 +196,7 @@ use crate::cmp::Ordering;\n use crate::fmt::{self, Debug, Display};\n use crate::marker::{PhantomData, Unsize};\n use crate::mem;\n-use crate::ops::{CoerceUnsized, Deref, DerefMut};\n+use crate::ops::{CoerceUnsized, Deref, DerefMut, DispatchFromDyn};\n use crate::ptr::{self, NonNull};\n \n mod lazy;\n@@ -571,6 +571,16 @@ impl<T: Default> Cell<T> {\n #[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<Cell<U>> for Cell<T> {}\n \n+// Allow types that wrap `Cell` to also implement `DispatchFromDyn`\n+// and become object safe method receivers.\n+// Note that currently `Cell` itself cannot be a method receiver\n+// because it does not implement Deref.\n+// In other words:\n+// `self: Cell<&Self>` won't work\n+// `self: CellWrapper<Self>` becomes possible\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n+impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<Cell<U>> for Cell<T> {}\n+\n impl<T> Cell<[T]> {\n     /// Returns a `&[Cell<T>]` from a `&Cell<[T]>`\n     ///\n@@ -2078,6 +2088,16 @@ impl<T> const From<T> for UnsafeCell<T> {\n #[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<UnsafeCell<U>> for UnsafeCell<T> {}\n \n+// Allow types that wrap `UnsafeCell` to also implement `DispatchFromDyn`\n+// and become object safe method receivers.\n+// Note that currently `UnsafeCell` itself cannot be a method receiver\n+// because it does not implement Deref.\n+// In other words:\n+// `self: UnsafeCell<&Self>` won't work\n+// `self: UnsafeCellWrapper<Self>` becomes possible\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n+impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<UnsafeCell<U>> for UnsafeCell<T> {}\n+\n /// [`UnsafeCell`], but [`Sync`].\n ///\n /// This is just an `UnsafeCell`, except it implements `Sync`\n@@ -2169,6 +2189,17 @@ impl<T> const From<T> for SyncUnsafeCell<T> {\n //#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<SyncUnsafeCell<U>> for SyncUnsafeCell<T> {}\n \n+// Allow types that wrap `SyncUnsafeCell` to also implement `DispatchFromDyn`\n+// and become object safe method receivers.\n+// Note that currently `SyncUnsafeCell` itself cannot be a method receiver\n+// because it does not implement Deref.\n+// In other words:\n+// `self: SyncUnsafeCell<&Self>` won't work\n+// `self: SyncUnsafeCellWrapper<Self>` becomes possible\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n+//#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<SyncUnsafeCell<U>> for SyncUnsafeCell<T> {}\n+\n #[allow(unused)]\n fn assert_coerce_unsized(\n     a: UnsafeCell<&i32>,"}, {"sha": "91aacedfc577897b70c0bad4de441d3633bd38a4", "filename": "tests/ui/self/arbitrary_self_types_pointers_and_wrappers.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a2d1cb2c22016ae003ab51d9654746cc4fc5200a/tests%2Fui%2Fself%2Farbitrary_self_types_pointers_and_wrappers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d1cb2c22016ae003ab51d9654746cc4fc5200a/tests%2Fui%2Fself%2Farbitrary_self_types_pointers_and_wrappers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary_self_types_pointers_and_wrappers.rs?ref=a2d1cb2c22016ae003ab51d9654746cc4fc5200a", "patch": "@@ -3,6 +3,7 @@\n #![feature(rustc_attrs)]\n \n use std::{\n+    cell::Cell,\n     ops::{Deref, CoerceUnsized, DispatchFromDyn},\n     marker::Unsize,\n };\n@@ -20,6 +21,20 @@ impl<T: ?Sized> Deref for Ptr<T> {\n impl<T: Unsize<U> + ?Sized, U: ?Sized> CoerceUnsized<Ptr<U>> for Ptr<T> {}\n impl<T: Unsize<U> + ?Sized, U: ?Sized> DispatchFromDyn<Ptr<U>> for Ptr<T> {}\n \n+\n+struct CellPtr<'a, T: ?Sized>(Cell<&'a T>);\n+\n+impl<'a, T: ?Sized> Deref for CellPtr<'a, T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        self.0.get()\n+    }\n+}\n+\n+impl<'a, T: Unsize<U> + ?Sized, U: ?Sized> CoerceUnsized<CellPtr<'a, U>> for CellPtr<'a, T> {}\n+impl<'a, T: Unsize<U> + ?Sized, U: ?Sized> DispatchFromDyn<CellPtr<'a, U>> for CellPtr<'a, T> {}\n+\n struct Wrapper<T: ?Sized>(T);\n \n impl<T: ?Sized> Deref for Wrapper<T> {\n@@ -42,6 +57,7 @@ trait Trait {\n     fn ptr_wrapper(self: Ptr<Wrapper<Self>>) -> i32;\n     fn wrapper_ptr(self: Wrapper<Ptr<Self>>) -> i32;\n     fn wrapper_ptr_wrapper(self: Wrapper<Ptr<Wrapper<Self>>>) -> i32;\n+    fn cell(self: CellPtr<Self>) -> i32;\n }\n \n impl Trait for i32 {\n@@ -54,6 +70,9 @@ impl Trait for i32 {\n     fn wrapper_ptr_wrapper(self: Wrapper<Ptr<Wrapper<Self>>>) -> i32 {\n         ***self\n     }\n+    fn cell(self: CellPtr<Self>) -> i32 {\n+        *self\n+    }\n }\n \n fn main() {\n@@ -65,4 +84,7 @@ fn main() {\n \n     let wpw = Wrapper(Ptr(Box::new(Wrapper(7)))) as Wrapper<Ptr<Wrapper<dyn Trait>>>;\n     assert_eq!(wpw.wrapper_ptr_wrapper(), 7);\n+\n+    let c = CellPtr(Cell::new(&8)) as CellPtr<dyn Trait>;\n+    assert_eq!(c.cell(), 8);\n }"}]}