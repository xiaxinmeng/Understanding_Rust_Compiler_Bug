{"sha": "3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMGNmNmViZTFhNDJjM2EzOGYzYWI4YTdiMmUxMDExMGVkOTFlZTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-23T12:37:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-23T12:44:24Z"}, "message": "rename persistent hir database -> def database", "tree": {"sha": "2b9ba6289fc865889775dab7c6b029faea7161ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b9ba6289fc865889775dab7c6b029faea7161ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "html_url": "https://github.com/rust-lang/rust/commit/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "331220fee2c8c6d9f6e87c371ab101baace205dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/331220fee2c8c6d9f6e87c371ab101baace205dc", "html_url": "https://github.com/rust-lang/rust/commit/331220fee2c8c6d9f6e87c371ab101baace205dc"}], "stats": {"total": 266, "additions": 106, "deletions": 160}, "files": [{"sha": "3bbcdb0b8846de7e000b7bc7f9ea14bb857b2091", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -16,11 +16,7 @@ use vfs_filter::IncludeRustFiles;\n \n type Result<T> = std::result::Result<T, failure::Error>;\n \n-#[salsa::database(\n-    ra_db::SourceDatabaseStorage,\n-    db::HirDatabaseStorage,\n-    db::PersistentHirDatabaseStorage\n-)]\n+#[salsa::database(ra_db::SourceDatabaseStorage, db::HirDatabaseStorage, db::DefDatabaseStorage)]\n #[derive(Debug)]\n pub struct BatchDatabase {\n     runtime: salsa::Runtime<BatchDatabase>,"}, {"sha": "78ea8976b96e31afdf5bcfcbaf95d078e3ffb6f9", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -12,7 +12,7 @@ use ra_syntax::{\n use crate::{\n     Name, AsName, Struct, Enum, EnumVariant, Crate,\n     HirDatabase, HirFileId, StructField, FieldSource,\n-    type_ref::TypeRef, PersistentHirDatabase,\n+    type_ref::TypeRef, DefDatabase,\n };\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n@@ -33,7 +33,7 @@ impl AdtDef {\n }\n \n impl Struct {\n-    pub(crate) fn variant_data(&self, db: &impl PersistentHirDatabase) -> Arc<VariantData> {\n+    pub(crate) fn variant_data(&self, db: &impl DefDatabase) -> Arc<VariantData> {\n         db.struct_data((*self).into()).variant_data.clone()\n     }\n }\n@@ -52,10 +52,7 @@ impl StructData {\n         StructData { name, variant_data }\n     }\n \n-    pub(crate) fn struct_data_query(\n-        db: &impl PersistentHirDatabase,\n-        struct_: Struct,\n-    ) -> Arc<StructData> {\n+    pub(crate) fn struct_data_query(db: &impl DefDatabase, struct_: Struct) -> Arc<StructData> {\n         let (_, struct_def) = struct_.source(db);\n         Arc::new(StructData::new(&*struct_def))\n     }\n@@ -68,7 +65,7 @@ fn variants(enum_def: &ast::EnumDef) -> impl Iterator<Item = &ast::EnumVariant>\n impl EnumVariant {\n     pub(crate) fn source_impl(\n         &self,\n-        db: &impl PersistentHirDatabase,\n+        db: &impl DefDatabase,\n     ) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n         let (file_id, enum_def) = self.parent.source(db);\n         let var = variants(&*enum_def)\n@@ -79,7 +76,7 @@ impl EnumVariant {\n             .to_owned();\n         (file_id, var)\n     }\n-    pub(crate) fn variant_data(&self, db: &impl PersistentHirDatabase) -> Arc<VariantData> {\n+    pub(crate) fn variant_data(&self, db: &impl DefDatabase) -> Arc<VariantData> {\n         db.enum_data(self.parent).variants[self.id].variant_data.clone()\n     }\n }\n@@ -91,7 +88,7 @@ pub struct EnumData {\n }\n \n impl EnumData {\n-    pub(crate) fn enum_data_query(db: &impl PersistentHirDatabase, e: Enum) -> Arc<EnumData> {\n+    pub(crate) fn enum_data_query(db: &impl DefDatabase, e: Enum) -> Arc<EnumData> {\n         let (_file_id, enum_def) = e.source(db);\n         let name = enum_def.name().map(|n| n.as_name());\n         let variants = variants(&*enum_def)\n@@ -189,7 +186,7 @@ impl VariantDef {\n             VariantDef::EnumVariant(it) => it.field(db, name),\n         }\n     }\n-    pub(crate) fn variant_data(self, db: &impl PersistentHirDatabase) -> Arc<VariantData> {\n+    pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n         match self {\n             VariantDef::Struct(it) => it.variant_data(db),\n             VariantDef::EnumVariant(it) => it.variant_data(db),\n@@ -198,7 +195,7 @@ impl VariantDef {\n }\n \n impl StructField {\n-    pub(crate) fn source_impl(&self, db: &impl PersistentHirDatabase) -> (HirFileId, FieldSource) {\n+    pub(crate) fn source_impl(&self, db: &impl DefDatabase) -> (HirFileId, FieldSource) {\n         let var_data = self.parent.variant_data(db);\n         let fields = var_data.fields().unwrap();\n         let ss;"}, {"sha": "3f2e14bc84c6f9098f3edd54296c93212a1a5f7b", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 37, "deletions": 46, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -6,7 +6,7 @@ use ra_syntax::{ast::self, TreeArc, SyntaxNode};\n \n use crate::{\n     Name, ScopesWithSourceMap, Ty, HirFileId,\n-    HirDatabase, PersistentHirDatabase,\n+    HirDatabase, DefDatabase,\n     type_ref::TypeRef,\n     nameres::{ModuleScope, Namespace, ImportId, CrateModuleId},\n     expr::{Body, BodySourceMap},\n@@ -38,24 +38,21 @@ impl Crate {\n         self.crate_id\n     }\n \n-    pub fn dependencies(&self, db: &impl PersistentHirDatabase) -> Vec<CrateDependency> {\n+    pub fn dependencies(&self, db: &impl DefDatabase) -> Vec<CrateDependency> {\n         self.dependencies_impl(db)\n     }\n \n-    pub fn root_module(&self, db: &impl PersistentHirDatabase) -> Option<Module> {\n+    pub fn root_module(&self, db: &impl DefDatabase) -> Option<Module> {\n         self.root_module_impl(db)\n     }\n \n-    pub fn edition(&self, db: &impl PersistentHirDatabase) -> Edition {\n+    pub fn edition(&self, db: &impl DefDatabase) -> Edition {\n         let crate_graph = db.crate_graph();\n         crate_graph.edition(self.crate_id)\n     }\n \n     // FIXME: should this be in source_binder?\n-    pub fn source_root_crates(\n-        db: &impl PersistentHirDatabase,\n-        source_root: SourceRootId,\n-    ) -> Vec<Crate> {\n+    pub fn source_root_crates(db: &impl DefDatabase, source_root: SourceRootId) -> Vec<Crate> {\n         let crate_ids = db.source_root_crates(source_root);\n         crate_ids.iter().map(|&crate_id| Crate { crate_id }).collect()\n     }\n@@ -111,7 +108,7 @@ impl Module {\n     }\n \n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n-    pub fn definition_source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, ModuleSource) {\n+    pub fn definition_source(&self, db: &impl DefDatabase) -> (HirFileId, ModuleSource) {\n         self.definition_source_impl(db)\n     }\n \n@@ -134,14 +131,14 @@ impl Module {\n     }\n \n     /// Returns the crate this module is part of.\n-    pub fn krate(&self, _db: &impl PersistentHirDatabase) -> Option<Crate> {\n+    pub fn krate(&self, _db: &impl DefDatabase) -> Option<Crate> {\n         Some(self.krate)\n     }\n \n     /// Topmost parent of this module. Every module has a `crate_root`, but some\n     /// might be missing `krate`. This can happen if a module's file is not included\n     /// in the module tree of any target in `Cargo.toml`.\n-    pub fn crate_root(&self, db: &impl PersistentHirDatabase) -> Module {\n+    pub fn crate_root(&self, db: &impl DefDatabase) -> Module {\n         self.crate_root_impl(db)\n     }\n \n@@ -151,12 +148,12 @@ impl Module {\n     }\n \n     /// Iterates over all child modules.\n-    pub fn children(&self, db: &impl PersistentHirDatabase) -> impl Iterator<Item = Module> {\n+    pub fn children(&self, db: &impl DefDatabase) -> impl Iterator<Item = Module> {\n         self.children_impl(db)\n     }\n \n     /// Finds a parent module.\n-    pub fn parent(&self, db: &impl PersistentHirDatabase) -> Option<Module> {\n+    pub fn parent(&self, db: &impl DefDatabase) -> Option<Module> {\n         self.parent_impl(db)\n     }\n \n@@ -229,7 +226,7 @@ impl StructField {\n         self.parent.variant_data(db).fields().unwrap()[self.id].name.clone()\n     }\n \n-    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, FieldSource) {\n+    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, FieldSource) {\n         self.source_impl(db)\n     }\n \n@@ -257,7 +254,7 @@ pub struct Struct {\n }\n \n impl Struct {\n-    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::StructDef>) {\n+    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::StructDef>) {\n         self.id.source(db)\n     }\n \n@@ -289,7 +286,7 @@ impl Struct {\n             .map(|(id, _)| StructField { parent: (*self).into(), id })\n     }\n \n-    pub fn generic_params(&self, db: &impl PersistentHirDatabase) -> Arc<GenericParams> {\n+    pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n \n@@ -325,7 +322,7 @@ pub struct Enum {\n }\n \n impl Enum {\n-    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::EnumDef>) {\n+    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::EnumDef>) {\n         self.id.source(db)\n     }\n \n@@ -337,23 +334,23 @@ impl Enum {\n         db.enum_data(*self).name.clone()\n     }\n \n-    pub fn variants(&self, db: &impl PersistentHirDatabase) -> Vec<EnumVariant> {\n+    pub fn variants(&self, db: &impl DefDatabase) -> Vec<EnumVariant> {\n         db.enum_data(*self)\n             .variants\n             .iter()\n             .map(|(id, _)| EnumVariant { parent: *self, id })\n             .collect()\n     }\n \n-    pub fn variant(&self, db: &impl PersistentHirDatabase, name: &Name) -> Option<EnumVariant> {\n+    pub fn variant(&self, db: &impl DefDatabase, name: &Name) -> Option<EnumVariant> {\n         db.enum_data(*self)\n             .variants\n             .iter()\n             .find(|(_id, data)| data.name.as_ref() == Some(name))\n             .map(|(id, _)| EnumVariant { parent: *self, id })\n     }\n \n-    pub fn generic_params(&self, db: &impl PersistentHirDatabase) -> Arc<GenericParams> {\n+    pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n \n@@ -386,20 +383,17 @@ pub struct EnumVariant {\n }\n \n impl EnumVariant {\n-    pub fn source(\n-        &self,\n-        db: &impl PersistentHirDatabase,\n-    ) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n+    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n         self.source_impl(db)\n     }\n     pub fn module(&self, db: &impl HirDatabase) -> Module {\n         self.parent.module(db)\n     }\n-    pub fn parent_enum(&self, _db: &impl PersistentHirDatabase) -> Enum {\n+    pub fn parent_enum(&self, _db: &impl DefDatabase) -> Enum {\n         self.parent\n     }\n \n-    pub fn name(&self, db: &impl PersistentHirDatabase) -> Option<Name> {\n+    pub fn name(&self, db: &impl DefDatabase) -> Option<Name> {\n         db.enum_data(self.parent).variants[self.id].name.clone()\n     }\n \n@@ -465,11 +459,11 @@ impl FnSignature {\n }\n \n impl Function {\n-    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::FnDef>) {\n+    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::FnDef>) {\n         self.id.source(db)\n     }\n \n-    pub fn module(&self, db: &impl PersistentHirDatabase) -> Module {\n+    pub fn module(&self, db: &impl DefDatabase) -> Module {\n         self.id.module(db)\n     }\n \n@@ -503,12 +497,12 @@ impl Function {\n         db.infer(*self)\n     }\n \n-    pub fn generic_params(&self, db: &impl PersistentHirDatabase) -> Arc<GenericParams> {\n+    pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n \n     /// The containing impl block, if this is a method.\n-    pub fn impl_block(&self, db: &impl PersistentHirDatabase) -> Option<ImplBlock> {\n+    pub fn impl_block(&self, db: &impl DefDatabase) -> Option<ImplBlock> {\n         let module_impls = db.impls_in_module(self.module(db));\n         ImplBlock::containing(module_impls, (*self).into())\n     }\n@@ -540,11 +534,11 @@ pub struct Const {\n }\n \n impl Const {\n-    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::ConstDef>) {\n+    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::ConstDef>) {\n         self.id.source(db)\n     }\n \n-    pub fn module(&self, db: &impl PersistentHirDatabase) -> Module {\n+    pub fn module(&self, db: &impl DefDatabase) -> Module {\n         self.id.module(db)\n     }\n \n@@ -553,7 +547,7 @@ impl Const {\n     }\n \n     /// The containing impl block, if this is a method.\n-    pub fn impl_block(&self, db: &impl PersistentHirDatabase) -> Option<ImplBlock> {\n+    pub fn impl_block(&self, db: &impl DefDatabase) -> Option<ImplBlock> {\n         let module_impls = db.impls_in_module(self.module(db));\n         ImplBlock::containing(module_impls, (*self).into())\n     }\n@@ -599,11 +593,11 @@ pub struct Static {\n }\n \n impl Static {\n-    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::StaticDef>) {\n+    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::StaticDef>) {\n         self.id.source(db)\n     }\n \n-    pub fn module(&self, db: &impl PersistentHirDatabase) -> Module {\n+    pub fn module(&self, db: &impl DefDatabase) -> Module {\n         self.id.module(db)\n     }\n \n@@ -630,15 +624,15 @@ pub struct Trait {\n }\n \n impl Trait {\n-    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::TraitDef>) {\n+    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::TraitDef>) {\n         self.id.source(db)\n     }\n \n-    pub fn module(&self, db: &impl PersistentHirDatabase) -> Module {\n+    pub fn module(&self, db: &impl DefDatabase) -> Module {\n         self.id.module(db)\n     }\n \n-    pub fn generic_params(&self, db: &impl PersistentHirDatabase) -> Arc<GenericParams> {\n+    pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n }\n@@ -655,28 +649,25 @@ pub struct TypeAlias {\n }\n \n impl TypeAlias {\n-    pub fn source(\n-        &self,\n-        db: &impl PersistentHirDatabase,\n-    ) -> (HirFileId, TreeArc<ast::TypeAliasDef>) {\n+    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::TypeAliasDef>) {\n         self.id.source(db)\n     }\n \n-    pub fn generic_params(&self, db: &impl PersistentHirDatabase) -> Arc<GenericParams> {\n+    pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n \n-    pub fn module(&self, db: &impl PersistentHirDatabase) -> Module {\n+    pub fn module(&self, db: &impl DefDatabase) -> Module {\n         self.id.module(db)\n     }\n \n     /// The containing impl block, if this is a method.\n-    pub fn impl_block(&self, db: &impl PersistentHirDatabase) -> Option<ImplBlock> {\n+    pub fn impl_block(&self, db: &impl DefDatabase) -> Option<ImplBlock> {\n         let module_impls = db.impls_in_module(self.module(db));\n         ImplBlock::containing(module_impls, (*self).into())\n     }\n \n-    pub fn type_ref(self, db: &impl PersistentHirDatabase) -> Arc<TypeRef> {\n+    pub fn type_ref(self, db: &impl DefDatabase) -> Arc<TypeRef> {\n         db.type_alias_ref(self)\n     }\n "}, {"sha": "334cb302b372d0d06fbbc0895ea68b566d072be0", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -5,14 +5,11 @@ use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n use crate::{\n     Name, AsName, Function, FnSignature,\n     type_ref::{TypeRef, Mutability},\n-    PersistentHirDatabase,\n+    DefDatabase,\n };\n \n impl FnSignature {\n-    pub(crate) fn fn_signature_query(\n-        db: &impl PersistentHirDatabase,\n-        func: Function,\n-    ) -> Arc<FnSignature> {\n+    pub(crate) fn fn_signature_query(db: &impl DefDatabase, func: Function) -> Arc<FnSignature> {\n         let (_, node) = func.source(db);\n         let name = node.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n         let mut params = Vec::new();"}, {"sha": "db4e5ce5cd146a99f826b63b9626ab7bddaa867c", "filename": "crates/ra_hir/src/code_model_impl/konst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::ast::{NameOwner, TypeAscriptionOwner};\n use crate::{\r\n     Name, AsName, Const, ConstSignature, Static,\r\n     type_ref::{TypeRef},\r\n-    PersistentHirDatabase,\r\n+    DefDatabase,\r\n };\r\n \r\n fn const_signature_for<N: NameOwner + TypeAscriptionOwner>(node: &N) -> Arc<ConstSignature> {\r\n@@ -17,15 +17,15 @@ fn const_signature_for<N: NameOwner + TypeAscriptionOwner>(node: &N) -> Arc<Cons\n \r\n impl ConstSignature {\r\n     pub(crate) fn const_signature_query(\r\n-        db: &impl PersistentHirDatabase,\r\n+        db: &impl DefDatabase,\r\n         konst: Const,\r\n     ) -> Arc<ConstSignature> {\r\n         let (_, node) = konst.source(db);\r\n         const_signature_for(&*node)\r\n     }\r\n \r\n     pub(crate) fn static_signature_query(\r\n-        db: &impl PersistentHirDatabase,\r\n+        db: &impl DefDatabase,\r\n         konst: Static,\r\n     ) -> Arc<ConstSignature> {\r\n         let (_, node) = konst.source(db);\r"}, {"sha": "914414fc3e0eaa5f7167f3887e6d3f708d7dd343", "filename": "crates/ra_hir/src/code_model_impl/krate.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -1,12 +1,9 @@\n use crate::{\n-    Crate, CrateDependency, AsName, Module, PersistentHirDatabase,\n+    Crate, CrateDependency, AsName, Module, DefDatabase,\n };\n \n impl Crate {\n-    pub(crate) fn dependencies_impl(\n-        &self,\n-        db: &impl PersistentHirDatabase,\n-    ) -> Vec<CrateDependency> {\n+    pub(crate) fn dependencies_impl(&self, db: &impl DefDatabase) -> Vec<CrateDependency> {\n         let crate_graph = db.crate_graph();\n         crate_graph\n             .dependencies(self.crate_id)\n@@ -17,7 +14,7 @@ impl Crate {\n             })\n             .collect()\n     }\n-    pub(crate) fn root_module_impl(&self, db: &impl PersistentHirDatabase) -> Option<Module> {\n+    pub(crate) fn root_module_impl(&self, db: &impl DefDatabase) -> Option<Module> {\n         let module_id = db.crate_def_map(*self).root();\n         let module = Module { krate: *self, module_id };\n         Some(module)"}, {"sha": "52a33e981ff6d76f3e0bf92ee181a33ac53c6f46", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -4,13 +4,13 @@ use ra_syntax::{ast, SyntaxNode, TreeArc, AstNode};\n use crate::{\n     Module, ModuleSource, Problem, Name,\n     nameres::{CrateModuleId, ImportId},\n-    HirDatabase, PersistentHirDatabase,\n+    HirDatabase, DefDatabase,\n     HirFileId, SourceItemId,\n };\n \n impl ModuleSource {\n     pub(crate) fn new(\n-        db: &impl PersistentHirDatabase,\n+        db: &impl DefDatabase,\n         file_id: Option<FileId>,\n         decl_id: Option<SourceItemId>,\n     ) -> ModuleSource {\n@@ -49,7 +49,7 @@ impl Module {\n \n     pub(crate) fn definition_source_impl(\n         &self,\n-        db: &impl PersistentHirDatabase,\n+        db: &impl DefDatabase,\n     ) -> (HirFileId, ModuleSource) {\n         let def_map = db.crate_def_map(self.krate);\n         let decl_id = def_map[self.module_id].declaration;\n@@ -80,7 +80,7 @@ impl Module {\n         source_map.get(&source, import)\n     }\n \n-    pub(crate) fn crate_root_impl(&self, db: &impl PersistentHirDatabase) -> Module {\n+    pub(crate) fn crate_root_impl(&self, db: &impl DefDatabase) -> Module {\n         let def_map = db.crate_def_map(self.krate);\n         self.with_module_id(def_map.root())\n     }\n@@ -93,10 +93,7 @@ impl Module {\n     }\n \n     /// Iterates over all child modules.\n-    pub(crate) fn children_impl(\n-        &self,\n-        db: &impl PersistentHirDatabase,\n-    ) -> impl Iterator<Item = Module> {\n+    pub(crate) fn children_impl(&self, db: &impl DefDatabase) -> impl Iterator<Item = Module> {\n         let def_map = db.crate_def_map(self.krate);\n         let children = def_map[self.module_id]\n             .children\n@@ -106,7 +103,7 @@ impl Module {\n         children.into_iter()\n     }\n \n-    pub(crate) fn parent_impl(&self, db: &impl PersistentHirDatabase) -> Option<Module> {\n+    pub(crate) fn parent_impl(&self, db: &impl DefDatabase) -> Option<Module> {\n         let def_map = db.crate_def_map(self.krate);\n         let parent_id = def_map[self.module_id].parent?;\n         Some(self.with_module_id(parent_id))"}, {"sha": "d3908f8accd69e5b583a9e5d8d158d7b21a9d0a3", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -16,8 +16,8 @@ use crate::{\n     type_ref::TypeRef,\n };\n \n-#[salsa::query_group(PersistentHirDatabaseStorage)]\n-pub trait PersistentHirDatabase: SourceDatabase + AsRef<HirInterner> {\n+#[salsa::query_group(DefDatabaseStorage)]\n+pub trait DefDatabase: SourceDatabase + AsRef<HirInterner> {\n     #[salsa::invoke(HirFileId::hir_parse)]\n     fn hir_parse(&self, file_id: HirFileId) -> TreeArc<SourceFile>;\n \n@@ -71,7 +71,7 @@ pub trait PersistentHirDatabase: SourceDatabase + AsRef<HirInterner> {\n }\n \n #[salsa::query_group(HirDatabaseStorage)]\n-pub trait HirDatabase: PersistentHirDatabase {\n+pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(ExprScopes::expr_scopes_query)]\n     fn expr_scopes(&self, func: Function) -> Arc<ExprScopes>;\n "}, {"sha": "84fe94289810a0b9121d6f9c4892a0d85684d9d7", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -8,7 +8,7 @@ use std::sync::Arc;\n use ra_syntax::ast::{self, NameOwner, TypeParamsOwner};\n \n use crate::{\n-    db::PersistentHirDatabase,\n+    db::DefDatabase,\n     Name, AsName, Function, Struct, Enum, Trait, TypeAlias, ImplBlock\n };\n \n@@ -40,7 +40,7 @@ impl_froms!(GenericDef: Function, Struct, Enum, Trait, TypeAlias, ImplBlock);\n \n impl GenericParams {\n     pub(crate) fn generic_params_query(\n-        db: &impl PersistentHirDatabase,\n+        db: &impl DefDatabase,\n         def: GenericDef,\n     ) -> Arc<GenericParams> {\n         let mut generics = GenericParams::default();"}, {"sha": "18401f865956e7535b77d5fc3c5e314859523fe1", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -10,7 +10,7 @@ use ra_arena::{Arena, RawId, ArenaId, impl_arena_id};\n \n use crate::{\n     Module,\n-    PersistentHirDatabase,\n+    DefDatabase,\n };\n \n #[derive(Debug, Default)]\n@@ -63,7 +63,7 @@ pub struct HirFileId(HirFileIdRepr);\n impl HirFileId {\n     /// For macro-expansion files, returns the file original source file the\n     /// expansion originated from.\n-    pub fn original_file(self, db: &impl PersistentHirDatabase) -> FileId {\n+    pub fn original_file(self, db: &impl DefDatabase) -> FileId {\n         match self.0 {\n             HirFileIdRepr::File(file_id) => file_id,\n             HirFileIdRepr::Macro(macro_call_id) => {\n@@ -83,10 +83,7 @@ impl HirFileId {\n         }\n     }\n \n-    pub(crate) fn hir_parse(\n-        db: &impl PersistentHirDatabase,\n-        file_id: HirFileId,\n-    ) -> TreeArc<SourceFile> {\n+    pub(crate) fn hir_parse(db: &impl DefDatabase, file_id: HirFileId) -> TreeArc<SourceFile> {\n         match file_id.0 {\n             HirFileIdRepr::File(file_id) => db.parse(file_id),\n             HirFileIdRepr::Macro(macro_call_id) => {\n@@ -97,10 +94,7 @@ impl HirFileId {\n     }\n }\n \n-fn parse_macro(\n-    db: &impl PersistentHirDatabase,\n-    macro_call_id: MacroCallId,\n-) -> Option<TreeArc<SourceFile>> {\n+fn parse_macro(db: &impl DefDatabase, macro_call_id: MacroCallId) -> Option<TreeArc<SourceFile>> {\n     let loc = macro_call_id.loc(db);\n     let syntax = db.file_item(loc.source_item_id);\n     let macro_call = ast::MacroCall::cast(&syntax).unwrap();\n@@ -190,7 +184,7 @@ pub(crate) struct LocationCtx<DB> {\n     file_id: HirFileId,\n }\n \n-impl<'a, DB: PersistentHirDatabase> LocationCtx<&'a DB> {\n+impl<'a, DB: DefDatabase> LocationCtx<&'a DB> {\n     pub(crate) fn new(db: &'a DB, module: Module, file_id: HirFileId) -> LocationCtx<&'a DB> {\n         LocationCtx { db, module, file_id }\n     }\n@@ -205,29 +199,29 @@ impl<'a, DB: PersistentHirDatabase> LocationCtx<&'a DB> {\n \n pub(crate) trait AstItemDef<N: AstNode>: ArenaId + Clone {\n     fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<N>, Self>;\n-    fn from_ast(ctx: LocationCtx<&impl PersistentHirDatabase>, ast: &N) -> Self {\n+    fn from_ast(ctx: LocationCtx<&impl DefDatabase>, ast: &N) -> Self {\n         let items = ctx.db.file_items(ctx.file_id);\n         let item_id = items.id_of(ctx.file_id, ast.syntax());\n         Self::from_source_item_id_unchecked(ctx, item_id)\n     }\n     fn from_source_item_id_unchecked(\n-        ctx: LocationCtx<&impl PersistentHirDatabase>,\n+        ctx: LocationCtx<&impl DefDatabase>,\n         item_id: SourceFileItemId,\n     ) -> Self {\n         let raw = SourceItemId { file_id: ctx.file_id, item_id };\n         let loc = ItemLoc { module: ctx.module, raw, _ty: PhantomData };\n \n         Self::interner(ctx.db.as_ref()).loc2id(&loc)\n     }\n-    fn source(self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<N>) {\n+    fn source(self, db: &impl DefDatabase) -> (HirFileId, TreeArc<N>) {\n         let int = Self::interner(db.as_ref());\n         let loc = int.id2loc(self);\n         let syntax = db.file_item(loc.raw);\n         let ast =\n             N::cast(&syntax).unwrap_or_else(|| panic!(\"invalid ItemLoc: {:?}\", loc.raw)).to_owned();\n         (loc.raw.file_id, ast)\n     }\n-    fn module(self, db: &impl PersistentHirDatabase) -> Module {\n+    fn module(self, db: &impl DefDatabase) -> Module {\n         let int = Self::interner(db.as_ref());\n         let loc = int.id2loc(self);\n         loc.module\n@@ -324,15 +318,15 @@ pub struct SourceFileItems {\n \n impl SourceFileItems {\n     pub(crate) fn file_items_query(\n-        db: &impl PersistentHirDatabase,\n+        db: &impl DefDatabase,\n         file_id: HirFileId,\n     ) -> Arc<SourceFileItems> {\n         let source_file = db.hir_parse(file_id);\n         Arc::new(SourceFileItems::from_source_file(&source_file, file_id))\n     }\n \n     pub(crate) fn file_item_query(\n-        db: &impl PersistentHirDatabase,\n+        db: &impl DefDatabase,\n         source_item_id: SourceItemId,\n     ) -> TreeArc<SyntaxNode> {\n         let source_file = db.hir_parse(source_item_id.file_id);"}, {"sha": "40d368cd9f6dac625027c9824061d0183dd54cf5", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::{\n \n use crate::{\n     Const, TypeAlias, Function, HirFileId,\n-    HirDatabase, PersistentHirDatabase,\n+    HirDatabase, DefDatabase,\n     ModuleDef, Trait, Resolution,\n     type_ref::TypeRef,\n     ids::LocationCtx,\n@@ -59,7 +59,7 @@ impl ImplBlock {\n     }\n \n     /// Returns the syntax of the impl block\n-    pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::ImplBlock>) {\n+    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::ImplBlock>) {\n         let source_map = db.impls_in_module_source_map(self.module);\n         let (file_id, source) = self.module.definition_source(db);\n         (file_id, source_map.get(&source, self.impl_id))\n@@ -73,11 +73,11 @@ impl ImplBlock {\n         self.module\n     }\n \n-    pub fn target_trait_ref(&self, db: &impl PersistentHirDatabase) -> Option<TypeRef> {\n+    pub fn target_trait_ref(&self, db: &impl DefDatabase) -> Option<TypeRef> {\n         db.impls_in_module(self.module).impls[self.impl_id].target_trait().cloned()\n     }\n \n-    pub fn target_type(&self, db: &impl PersistentHirDatabase) -> TypeRef {\n+    pub fn target_type(&self, db: &impl DefDatabase) -> TypeRef {\n         db.impls_in_module(self.module).impls[self.impl_id].target_type().clone()\n     }\n \n@@ -97,11 +97,11 @@ impl ImplBlock {\n         None\n     }\n \n-    pub fn items(&self, db: &impl PersistentHirDatabase) -> Vec<ImplItem> {\n+    pub fn items(&self, db: &impl DefDatabase) -> Vec<ImplItem> {\n         db.impls_in_module(self.module).impls[self.impl_id].items().to_vec()\n     }\n \n-    pub fn generic_params(&self, db: &impl PersistentHirDatabase) -> Arc<GenericParams> {\n+    pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n \n@@ -124,7 +124,7 @@ pub struct ImplData {\n \n impl ImplData {\n     pub(crate) fn from_ast(\n-        db: &impl PersistentHirDatabase,\n+        db: &impl DefDatabase,\n         file_id: HirFileId,\n         module: Module,\n         node: &ast::ImplBlock,\n@@ -193,11 +193,7 @@ pub struct ModuleImplBlocks {\n }\n \n impl ModuleImplBlocks {\n-    fn collect(\n-        db: &impl PersistentHirDatabase,\n-        module: Module,\n-        source_map: &mut ImplSourceMap,\n-    ) -> Self {\n+    fn collect(db: &impl DefDatabase, module: Module, source_map: &mut ImplSourceMap) -> Self {\n         let mut m = ModuleImplBlocks {\n             module,\n             impls: Arena::default(),\n@@ -228,7 +224,7 @@ impl ModuleImplBlocks {\n }\n \n pub(crate) fn impls_in_module_with_source_map_query(\n-    db: &impl PersistentHirDatabase,\n+    db: &impl DefDatabase,\n     module: Module,\n ) -> (Arc<ModuleImplBlocks>, Arc<ImplSourceMap>) {\n     let mut source_map = ImplSourceMap::default();\n@@ -238,15 +234,12 @@ pub(crate) fn impls_in_module_with_source_map_query(\n     (Arc::new(result), Arc::new(source_map))\n }\n \n-pub(crate) fn impls_in_module(\n-    db: &impl PersistentHirDatabase,\n-    module: Module,\n-) -> Arc<ModuleImplBlocks> {\n+pub(crate) fn impls_in_module(db: &impl DefDatabase, module: Module) -> Arc<ModuleImplBlocks> {\n     db.impls_in_module_with_source_map(module).0\n }\n \n pub(crate) fn impls_in_module_source_map_query(\n-    db: &impl PersistentHirDatabase,\n+    db: &impl DefDatabase,\n     module: Module,\n ) -> Arc<ImplSourceMap> {\n     db.impls_in_module_with_source_map(module).1"}, {"sha": "a89c916f889b53b47d3bb48a1d548d03ce85b536", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -43,7 +43,7 @@ mod code_model_impl;\n mod marks;\n \n use crate::{\n-    db::{HirDatabase, PersistentHirDatabase},\n+    db::{HirDatabase, DefDatabase},\n     name::{AsName, KnownName},\n     ids::{SourceItemId, SourceFileItems},\n };"}, {"sha": "10d4c1b8ccb79f0b271e32ce96da9148f7ec7803", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -13,11 +13,7 @@ use crate::{db, HirInterner};\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n \n-#[salsa::database(\n-    ra_db::SourceDatabaseStorage,\n-    db::HirDatabaseStorage,\n-    db::PersistentHirDatabaseStorage\n-)]\n+#[salsa::database(ra_db::SourceDatabaseStorage, db::HirDatabaseStorage, db::DefDatabaseStorage)]\n #[derive(Debug)]\n pub struct MockDatabase {\n     events: Mutex<Option<Vec<salsa::Event<MockDatabase>>>>,"}, {"sha": "d361cf9e62b1c55e3ffc14de1687225132d2729b", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -62,7 +62,7 @@ use test_utils::tested_by;\n \n use crate::{\n     ModuleDef, Name, Crate, Module, Problem,\n-    PersistentHirDatabase, Path, PathKind, HirFileId,\n+    DefDatabase, Path, PathKind, HirFileId,\n     ids::{SourceItemId, SourceFileItemId, MacroCallId},\n };\n \n@@ -196,10 +196,7 @@ enum ReachedFixedPoint {\n }\n \n impl CrateDefMap {\n-    pub(crate) fn crate_def_map_query(\n-        db: &impl PersistentHirDatabase,\n-        krate: Crate,\n-    ) -> Arc<CrateDefMap> {\n+    pub(crate) fn crate_def_map_query(db: &impl DefDatabase, krate: Crate) -> Arc<CrateDefMap> {\n         let start = std::time::Instant::now();\n         let def_map = {\n             let edition = krate.edition(db);\n@@ -268,7 +265,7 @@ impl CrateDefMap {\n \n     pub(crate) fn resolve_path(\n         &self,\n-        db: &impl PersistentHirDatabase,\n+        db: &impl DefDatabase,\n         original_module: CrateModuleId,\n         path: &Path,\n     ) -> (PerNs<ModuleDef>, Option<usize>) {\n@@ -280,7 +277,7 @@ impl CrateDefMap {\n     // the result.\n     fn resolve_path_fp(\n         &self,\n-        db: &impl PersistentHirDatabase,\n+        db: &impl DefDatabase,\n         mode: ResolveMode,\n         original_module: CrateModuleId,\n         path: &Path,\n@@ -422,7 +419,7 @@ impl CrateDefMap {\n \n     pub(crate) fn resolve_name_in_module(\n         &self,\n-        db: &impl PersistentHirDatabase,\n+        db: &impl DefDatabase,\n         module: CrateModuleId,\n         name: &Name,\n     ) -> PerNs<ModuleDef> {\n@@ -442,7 +439,7 @@ impl CrateDefMap {\n         self.extern_prelude.get(name).map_or(PerNs::none(), |&it| PerNs::types(it))\n     }\n \n-    fn resolve_in_prelude(&self, db: &impl PersistentHirDatabase, name: &Name) -> PerNs<ModuleDef> {\n+    fn resolve_in_prelude(&self, db: &impl DefDatabase, name: &Name) -> PerNs<ModuleDef> {\n         if let Some(prelude) = self.prelude {\n             let resolution = if prelude.krate == self.krate {\n                 self[prelude.module_id].scope.items.get(name).cloned()"}, {"sha": "c5b73cfbee11a3db38797775e6606306abea6c32", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -6,18 +6,15 @@ use ra_db::FileId;\n \n use crate::{\n     Function, Module, Struct, Enum, Const, Static, Trait, TypeAlias,\n-    PersistentHirDatabase, HirFileId, Name, Path, Problem, Crate,\n+    DefDatabase, HirFileId, Name, Path, Problem, Crate,\n     KnownName,\n     nameres::{Resolution, PerNs, ModuleDef, ReachedFixedPoint, ResolveMode, raw},\n     ids::{AstItemDef, LocationCtx, MacroCallLoc, SourceItemId, MacroCallId},\n };\n \n use super::{CrateDefMap, CrateModuleId, ModuleData, CrateMacroId};\n \n-pub(super) fn collect_defs(\n-    db: &impl PersistentHirDatabase,\n-    mut def_map: CrateDefMap,\n-) -> CrateDefMap {\n+pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n     // populate external prelude\n     for dep in def_map.krate.dependencies(db) {\n         log::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.krate);\n@@ -57,7 +54,7 @@ struct DefCollector<DB> {\n \n impl<'a, DB> DefCollector<&'a DB>\n where\n-    DB: PersistentHirDatabase,\n+    DB: DefDatabase,\n {\n     fn collect(&mut self) {\n         let crate_graph = self.db.crate_graph();\n@@ -370,7 +367,7 @@ struct ModCollector<'a, D> {\n \n impl<DB> ModCollector<'_, &'_ mut DefCollector<&'_ DB>>\n where\n-    DB: PersistentHirDatabase,\n+    DB: DefDatabase,\n {\n     fn collect(&mut self, items: &[raw::RawItem]) {\n         for item in items {\n@@ -523,7 +520,7 @@ fn is_macro_rules(path: &Path) -> bool {\n }\n \n fn resolve_submodule(\n-    db: &impl PersistentHirDatabase,\n+    db: &impl DefDatabase,\n     file_id: HirFileId,\n     name: &Name,\n     is_root: bool,"}, {"sha": "f8ba398ecf5fe9f7c9903da4b01b2b6c33896589", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -12,7 +12,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    PersistentHirDatabase, Name, AsName, Path, HirFileId, ModuleSource,\n+    DefDatabase, Name, AsName, Path, HirFileId, ModuleSource,\n     ids::{SourceFileItemId, SourceFileItems},\n };\n \n@@ -47,15 +47,12 @@ impl ImportSourceMap {\n }\n \n impl RawItems {\n-    pub(crate) fn raw_items_query(\n-        db: &impl PersistentHirDatabase,\n-        file_id: FileId,\n-    ) -> Arc<RawItems> {\n+    pub(crate) fn raw_items_query(db: &impl DefDatabase, file_id: FileId) -> Arc<RawItems> {\n         db.raw_items_with_source_map(file_id).0\n     }\n \n     pub(crate) fn raw_items_with_source_map_query(\n-        db: &impl PersistentHirDatabase,\n+        db: &impl DefDatabase,\n         file_id: FileId,\n     ) -> (Arc<RawItems>, Arc<ImportSourceMap>) {\n         let mut collector = RawItemsCollector {"}, {"sha": "e35adcb2fd7c498b1dc3c16a2611cd15c0cffe79", "filename": "crates/ra_hir/src/type_alias.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -2,12 +2,9 @@\n \n use std::sync::Arc;\n \n-use crate::{TypeAlias, db::PersistentHirDatabase, type_ref::TypeRef};\n+use crate::{TypeAlias, db::DefDatabase, type_ref::TypeRef};\n \n-pub(crate) fn type_alias_ref_query(\n-    db: &impl PersistentHirDatabase,\n-    typ: TypeAlias,\n-) -> Arc<TypeRef> {\n+pub(crate) fn type_alias_ref_query(db: &impl DefDatabase, typ: TypeAlias) -> Arc<TypeRef> {\n     let (_, node) = typ.source(db);\n     Arc::new(TypeRef::from_ast_opt(node.type_ref()))\n }"}, {"sha": "ea4255d356ad1f990508cb2d78ddf25dfb1b571c", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=3f0cf6ebe1a42c3a38f3ab8a7b2e10110ed91ee1", "patch": "@@ -15,7 +15,7 @@ use crate::{LineIndex, symbol_index::{self, SymbolsDatabase}};\n     LineIndexDatabaseStorage,\n     symbol_index::SymbolsDatabaseStorage,\n     hir::db::HirDatabaseStorage,\n-    hir::db::PersistentHirDatabaseStorage\n+    hir::db::DefDatabaseStorage\n )]\n #[derive(Debug)]\n pub(crate) struct RootDatabase {"}]}