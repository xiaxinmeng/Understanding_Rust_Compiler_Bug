{"sha": "75e037fcf75691a3a87d0cb37ea660dd7105ffba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZTAzN2ZjZjc1NjkxYTNhODdkMGNiMzdlYTY2MGRkNzEwNWZmYmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-01T11:29:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-01T11:29:25Z"}, "message": "Merge #6688\n\n6688: Place cursor correctly when completing assoc fns with self r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0a08b79f8fb8f5da53e5d700d827d325cd326178", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a08b79f8fb8f5da53e5d700d827d325cd326178"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75e037fcf75691a3a87d0cb37ea660dd7105ffba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfxikVCRBK7hj4Ov3rIwAAdHIIAHBSwHsQEz/sHpWy+bskPVQy\nnvYLQet3mpne0dk4IG4lsB1r+57RD3dK/ELrPzJr9qnNqvmfkU9vbECC8B6GManp\nX+3kcDPkGBJB6IWdSKhKN9XSLqfXAn562PoRUTv5tiMuIe/yRmh0oS/k3d3oDlKk\nQWd4dfELyTRqjFTOtZYMUmPa3AoMypoJ1ZFzPkMBi/r7zt+tPJ/ns5fRxrK4eWUi\nnm2VdYnehfuk4OSi1kNuvwvv3QfwkbZmU3lv6j2AN1RuFx0lz73u2E2HXG4Hq0jO\nbxo5n1mgDhk61QN9orLGReT19BkdeE/1kJKEZJvfzMnTWTp/mbUqB1g3mLpT3EU=\n=onOX\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a08b79f8fb8f5da53e5d700d827d325cd326178\nparent 455a0cfda2121596deb13ca3f40a83c98b32863c\nparent 9d94ffad44f2b250e498f162cd498aed62877c8e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606822165 +0000\ncommitter GitHub <noreply@github.com> 1606822165 +0000\n\nMerge #6688\n\n6688: Place cursor correctly when completing assoc fns with self r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75e037fcf75691a3a87d0cb37ea660dd7105ffba", "html_url": "https://github.com/rust-lang/rust/commit/75e037fcf75691a3a87d0cb37ea660dd7105ffba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75e037fcf75691a3a87d0cb37ea660dd7105ffba/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "455a0cfda2121596deb13ca3f40a83c98b32863c", "url": "https://api.github.com/repos/rust-lang/rust/commits/455a0cfda2121596deb13ca3f40a83c98b32863c", "html_url": "https://github.com/rust-lang/rust/commit/455a0cfda2121596deb13ca3f40a83c98b32863c"}, {"sha": "9d94ffad44f2b250e498f162cd498aed62877c8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d94ffad44f2b250e498f162cd498aed62877c8e", "html_url": "https://github.com/rust-lang/rust/commit/9d94ffad44f2b250e498f162cd498aed62877c8e"}], "stats": {"total": 130, "additions": 87, "deletions": 43}, "files": [{"sha": "bc23bea3fafa8266e7d8adea49883ef8e7909dd1", "filename": "crates/completion/src/completions/qualified_path.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/75e037fcf75691a3a87d0cb37ea660dd7105ffba/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e037fcf75691a3a87d0cb37ea660dd7105ffba/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=75e037fcf75691a3a87d0cb37ea660dd7105ffba", "patch": "@@ -353,10 +353,10 @@ impl S {\n fn foo() { let _ = S::<|> }\n \"#,\n             expect![[r#\"\n-                ct C   const C: i32 = 42;\n-                ta T   type T = i32;\n-                fn a() fn a()\n-                me b() fn b(&self)\n+                ct C    const C: i32 = 42;\n+                ta T    type T = i32;\n+                fn a()  fn a()\n+                me b(\u2026) fn b(&self)\n             \"#]],\n         );\n     }\n@@ -503,14 +503,14 @@ trait Sub: Super {\n fn foo<T: Sub>() { T::<|> }\n \"#,\n             expect![[r#\"\n-                ct C2          const C2: ();\n-                ct CONST       const CONST: u8;\n-                ta SubTy       type SubTy;\n-                ta Ty          type Ty;\n-                fn func()      fn func()\n-                me method()    fn method(&self)\n-                fn subfunc()   fn subfunc()\n-                me submethod() fn submethod(&self)\n+                ct C2           const C2: ();\n+                ct CONST        const CONST: u8;\n+                ta SubTy        type SubTy;\n+                ta Ty           type Ty;\n+                fn func()       fn func()\n+                me method(\u2026)    fn method(&self)\n+                fn subfunc()    fn subfunc()\n+                me submethod(\u2026) fn submethod(&self)\n             \"#]],\n         );\n     }\n@@ -543,14 +543,14 @@ impl<T> Sub for Wrap<T> {\n }\n \"#,\n             expect![[r#\"\n-                ct C2          const C2: () = ();\n-                ct CONST       const CONST: u8 = 0;\n-                ta SubTy       type SubTy;\n-                ta Ty          type Ty;\n-                fn func()      fn func()\n-                me method()    fn method(&self)\n-                fn subfunc()   fn subfunc()\n-                me submethod() fn submethod(&self)\n+                ct C2           const C2: () = ();\n+                ct CONST        const CONST: u8 = 0;\n+                ta SubTy        type SubTy;\n+                ta Ty           type Ty;\n+                fn func()       fn func()\n+                me method(\u2026)    fn method(&self)\n+                fn subfunc()    fn subfunc()\n+                me submethod(\u2026) fn submethod(&self)\n             \"#]],\n         );\n     }"}, {"sha": "e2fe44aff9fa17cabc1b672527db33028e6d1aab", "filename": "crates/completion/src/completions/trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75e037fcf75691a3a87d0cb37ea660dd7105ffba/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e037fcf75691a3a87d0cb37ea660dd7105ffba/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=75e037fcf75691a3a87d0cb37ea660dd7105ffba", "patch": "@@ -139,7 +139,7 @@ fn add_function_impl(\n ) {\n     let fn_name = func.name(ctx.db).to_string();\n \n-    let label = if func.params(ctx.db).is_empty() {\n+    let label = if func.assoc_fn_params(ctx.db).is_empty() {\n         format!(\"fn {}()\", fn_name)\n     } else {\n         format!(\"fn {}(..)\", fn_name)"}, {"sha": "ce8718bd542de50ae2961f870c9f8db1989b90c3", "filename": "crates/completion/src/render/builder_ext.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75e037fcf75691a3a87d0cb37ea660dd7105ffba/crates%2Fcompletion%2Fsrc%2Frender%2Fbuilder_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e037fcf75691a3a87d0cb37ea660dd7105ffba/crates%2Fcompletion%2Fsrc%2Frender%2Fbuilder_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fbuilder_ext.rs?ref=75e037fcf75691a3a87d0cb37ea660dd7105ffba", "patch": "@@ -5,6 +5,7 @@ use test_utils::mark;\n \n use crate::{item::Builder, CompletionContext};\n \n+#[derive(Debug)]\n pub(super) enum Params {\n     Named(Vec<String>),\n     Anonymous(usize),\n@@ -24,7 +25,7 @@ impl Params {\n }\n \n impl Builder {\n-    pub(super) fn should_add_parems(&self, ctx: &CompletionContext) -> bool {\n+    fn should_add_parens(&self, ctx: &CompletionContext) -> bool {\n         if !ctx.config.add_call_parenthesis {\n             return false;\n         }\n@@ -58,7 +59,7 @@ impl Builder {\n         name: String,\n         params: Params,\n     ) -> Builder {\n-        if !self.should_add_parems(ctx) {\n+        if !self.should_add_parens(ctx) {\n             return self;\n         }\n "}, {"sha": "00e3eb203e3ac4bb5bc3f0055d325d568feef873", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 52, "deletions": 17, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/75e037fcf75691a3a87d0cb37ea660dd7105ffba/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e037fcf75691a3a87d0cb37ea660dd7105ffba/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=75e037fcf75691a3a87d0cb37ea660dd7105ffba", "patch": "@@ -2,6 +2,7 @@\n \n use hir::{HasSource, Type};\n use syntax::{ast::Fn, display::function_declaration};\n+use test_utils::mark;\n \n use crate::{\n     item::{CompletionItem, CompletionItemKind, CompletionKind, ImportToAdd},\n@@ -22,7 +23,7 @@ pub(crate) fn render_fn<'a>(\n struct FunctionRender<'a> {\n     ctx: RenderContext<'a>,\n     name: String,\n-    fn_: hir::Function,\n+    func: hir::Function,\n     ast_node: Fn,\n }\n \n@@ -35,15 +36,15 @@ impl<'a> FunctionRender<'a> {\n         let name = local_name.unwrap_or_else(|| fn_.name(ctx.db()).to_string());\n         let ast_node = fn_.source(ctx.db()).value;\n \n-        FunctionRender { ctx, name, fn_, ast_node }\n+        FunctionRender { ctx, name, func: fn_, ast_node }\n     }\n \n     fn render(self, import_to_add: Option<ImportToAdd>) -> CompletionItem {\n         let params = self.params();\n         CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), self.name.clone())\n             .kind(self.kind())\n-            .set_documentation(self.ctx.docs(self.fn_))\n-            .set_deprecated(self.ctx.is_deprecated(self.fn_))\n+            .set_documentation(self.ctx.docs(self.func))\n+            .set_deprecated(self.ctx.is_deprecated(self.func))\n             .detail(self.detail())\n             .add_call_parens(self.ctx.completion, self.name, params)\n             .add_import(import_to_add)\n@@ -67,27 +68,39 @@ impl<'a> FunctionRender<'a> {\n     }\n \n     fn params(&self) -> Params {\n-        let params_ty = self.fn_.params(self.ctx.db());\n-        let params = self\n-            .ast_node\n-            .param_list()\n+        let ast_params = match self.ast_node.param_list() {\n+            Some(it) => it,\n+            None => return Params::Named(Vec::new()),\n+        };\n+\n+        let mut params_pats = Vec::new();\n+        let params_ty = if self.ctx.completion.dot_receiver.is_some() {\n+            self.func.method_params(self.ctx.db()).unwrap_or_default()\n+        } else {\n+            if let Some(s) = ast_params.self_param() {\n+                mark::hit!(parens_for_method_call_as_assoc_fn);\n+                params_pats.push(Some(s.to_string()));\n+            }\n+            self.func.assoc_fn_params(self.ctx.db())\n+        };\n+        params_pats\n+            .extend(ast_params.params().into_iter().map(|it| it.pat().map(|it| it.to_string())));\n+\n+        let params = params_pats\n             .into_iter()\n-            .flat_map(|it| it.params())\n             .zip(params_ty)\n-            .flat_map(|(it, param_ty)| {\n-                if let Some(pat) = it.pat() {\n-                    let name = pat.to_string();\n-                    let arg = name.trim_start_matches(\"mut \").trim_start_matches('_');\n-                    return Some(self.add_arg(arg, param_ty.ty()));\n-                }\n-                None\n+            .flat_map(|(pat, param_ty)| {\n+                let pat = pat?;\n+                let name = pat.to_string();\n+                let arg = name.trim_start_matches(\"mut \").trim_start_matches('_');\n+                Some(self.add_arg(arg, param_ty.ty()))\n             })\n             .collect();\n         Params::Named(params)\n     }\n \n     fn kind(&self) -> CompletionItemKind {\n-        if self.fn_.self_param(self.ctx.db()).is_some() {\n+        if self.func.self_param(self.ctx.db()).is_some() {\n             CompletionItemKind::Method\n         } else {\n             CompletionItemKind::Function\n@@ -172,6 +185,28 @@ fn bar(s: &S) {\n         );\n     }\n \n+    #[test]\n+    fn parens_for_method_call_as_assoc_fn() {\n+        mark::check!(parens_for_method_call_as_assoc_fn);\n+        check_edit(\n+            \"foo\",\n+            r#\"\n+struct S;\n+impl S {\n+    fn foo(&self) {}\n+}\n+fn main() { S::f<|> }\n+\"#,\n+            r#\"\n+struct S;\n+impl S {\n+    fn foo(&self) {}\n+}\n+fn main() { S::foo(${1:&self})$0 }\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn suppress_arg_snippets() {\n         mark::check!(suppress_arg_snippets);"}, {"sha": "4500050f1bdb0c2ec54e498cde96c03bc238f923", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75e037fcf75691a3a87d0cb37ea660dd7105ffba/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e037fcf75691a3a87d0cb37ea660dd7105ffba/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=75e037fcf75691a3a87d0cb37ea660dd7105ffba", "patch": "@@ -744,14 +744,13 @@ impl Function {\n         Some(SelfParam { func: self.id })\n     }\n \n-    pub fn params(self, db: &dyn HirDatabase) -> Vec<Param> {\n+    pub fn assoc_fn_params(self, db: &dyn HirDatabase) -> Vec<Param> {\n         let resolver = self.id.resolver(db.upcast());\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n         let environment = TraitEnvironment::lower(db, &resolver);\n         db.function_data(self.id)\n             .params\n             .iter()\n-            .skip(if self.self_param(db).is_some() { 1 } else { 0 })\n             .map(|type_ref| {\n                 let ty = Type {\n                     krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate,\n@@ -764,6 +763,14 @@ impl Function {\n             })\n             .collect()\n     }\n+    pub fn method_params(self, db: &dyn HirDatabase) -> Option<Vec<Param>> {\n+        if self.self_param(db).is_none() {\n+            return None;\n+        }\n+        let mut res = self.assoc_fn_params(db);\n+        res.remove(0);\n+        Some(res)\n+    }\n \n     pub fn is_unsafe(self, db: &dyn HirDatabase) -> bool {\n         db.function_data(self.id).is_unsafe\n@@ -799,6 +806,7 @@ impl From<Mutability> for Access {\n     }\n }\n \n+#[derive(Debug)]\n pub struct Param {\n     ty: Type,\n }"}, {"sha": "64fe8bd654cab8aa651982ecbeeeef733b6eb6a2", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75e037fcf75691a3a87d0cb37ea660dd7105ffba/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e037fcf75691a3a87d0cb37ea660dd7105ffba/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=75e037fcf75691a3a87d0cb37ea660dd7105ffba", "patch": "@@ -241,7 +241,7 @@ fn rename_to_self(\n         return Err(RenameError(\"Method already has a self parameter\".to_string()));\n     }\n \n-    let params = fn_def.params(sema.db);\n+    let params = fn_def.assoc_fn_params(sema.db);\n     let first_param =\n         params.first().ok_or_else(|| RenameError(\"Method has no parameters\".into()))?;\n     let first_param_ty = first_param.ty();"}]}