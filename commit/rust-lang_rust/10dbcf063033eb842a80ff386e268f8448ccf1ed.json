{"sha": "10dbcf063033eb842a80ff386e268f8448ccf1ed", "node_id": "C_kwDOAAsO6NoAKDEwZGJjZjA2MzAzM2ViODQyYTgwZmYzODZlMjY4Zjg0NDhjY2YxZWQ", "commit": {"author": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2023-01-05T17:12:37Z"}, "committer": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2023-01-06T05:21:13Z"}, "message": "fix [type error] for error E0029 and E0277\ncheck explicitly for the type references error\nif ty.references_error() is true change the error to be err.delay_as_bug()\nand prevent the error E0029 and E0277 from emitting out\nthis fix #105946", "tree": {"sha": "8f08d8140c76190ff43f4d826cc14ae84dcac829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f08d8140c76190ff43f4d826cc14ae84dcac829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10dbcf063033eb842a80ff386e268f8448ccf1ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10dbcf063033eb842a80ff386e268f8448ccf1ed", "html_url": "https://github.com/rust-lang/rust/commit/10dbcf063033eb842a80ff386e268f8448ccf1ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10dbcf063033eb842a80ff386e268f8448ccf1ed/comments", "author": null, "committer": null, "parents": [{"sha": "df756439df8110e8e5ff490b68d2886c8c6ae221", "url": "https://api.github.com/repos/rust-lang/rust/commits/df756439df8110e8e5ff490b68d2886c8c6ae221", "html_url": "https://github.com/rust-lang/rust/commit/df756439df8110e8e5ff490b68d2886c8c6ae221"}], "stats": {"total": 79, "additions": 75, "deletions": 4}, "files": [{"sha": "1dff671b8c6be85eae5e22c6dddf12642f4c6c1f", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10dbcf063033eb842a80ff386e268f8448ccf1ed/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10dbcf063033eb842a80ff386e268f8448ccf1ed/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=10dbcf063033eb842a80ff386e268f8448ccf1ed", "patch": "@@ -553,6 +553,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             (lhs, Some((true, rhs_ty, rhs_sp))) => one_side_err(rhs_sp, rhs_ty, lhs),\n             _ => span_bug!(span, \"Impossible, verified above.\"),\n         }\n+        if (lhs, rhs).references_error() {\n+            err.downgrade_to_delayed_bug();\n+        }\n         if self.tcx.sess.teach(&err.get_code().unwrap()) {\n             err.note(\n                 \"In a match expression, only numbers and characters can be matched \\"}, {"sha": "8ec14526d1530aa0645c7fbeddb6a078b6bb5f26", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10dbcf063033eb842a80ff386e268f8448ccf1ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10dbcf063033eb842a80ff386e268f8448ccf1ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=10dbcf063033eb842a80ff386e268f8448ccf1ed", "patch": "@@ -1387,7 +1387,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         self.note_obligation_cause(&mut err, &obligation);\n         self.point_at_returns_when_relevant(&mut err, &obligation);\n-\n         err.emit();\n     }\n }"}, {"sha": "83e3486540a53871a340fa1d4f403aee90d43947", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10dbcf063033eb842a80ff386e268f8448ccf1ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10dbcf063033eb842a80ff386e268f8448ccf1ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=10dbcf063033eb842a80ff386e268f8448ccf1ed", "patch": "@@ -248,7 +248,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n \n     fn point_at_returns_when_relevant(\n         &self,\n-        err: &mut Diagnostic,\n+        err: &mut DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n         obligation: &PredicateObligation<'tcx>,\n     );\n \n@@ -1686,7 +1686,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n     fn point_at_returns_when_relevant(\n         &self,\n-        err: &mut Diagnostic,\n+        err: &mut DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n         obligation: &PredicateObligation<'tcx>,\n     ) {\n         match obligation.cause.code().peel_derives() {\n@@ -1708,7 +1708,15 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             for expr in &visitor.returns {\n                 if let Some(returned_ty) = typeck_results.node_type_opt(expr.hir_id) {\n                     let ty = self.resolve_vars_if_possible(returned_ty);\n-                    err.span_label(expr.span, &format!(\"this returned value is of type `{}`\", ty));\n+                    if ty.references_error() {\n+                        // don't print out the [type error] here\n+                        err.delay_as_bug();\n+                    } else {\n+                        err.span_label(\n+                            expr.span,\n+                            &format!(\"this returned value is of type `{}`\", ty),\n+                        );\n+                    }\n                 }\n             }\n         }"}, {"sha": "bf01751d5f6eeefb65e3e87765304c878d549783", "filename": "src/test/ui/typeck/issue-105946.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10dbcf063033eb842a80ff386e268f8448ccf1ed/src%2Ftest%2Fui%2Ftypeck%2Fissue-105946.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10dbcf063033eb842a80ff386e268f8448ccf1ed/src%2Ftest%2Fui%2Ftypeck%2Fissue-105946.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-105946.rs?ref=10dbcf063033eb842a80ff386e268f8448ccf1ed", "patch": "@@ -0,0 +1,12 @@\n+fn digit() -> str {\n+  return {};\n+  //~^ ERROR: mismatched types [E0308]\n+}\n+fn main() {\n+    let [_y..] = [box 1, box 2];\n+    //~^ ERROR: cannot find value `_y` in this scope [E0425]\n+    //~| ERROR: `X..` patterns in slices are experimental [E0658]\n+    //~| ERROR: box expression syntax is experimental; you can call `Box::new` instead [E0658]\n+    //~| ERROR: box expression syntax is experimental; you can call `Box::new` instead [E0658]\n+    //~| ERROR: pattern requires 1 element but array has 2 [E0527]\n+}"}, {"sha": "d803de4df47276ebdd70a8f345d7eb0f075b51cd", "filename": "src/test/ui/typeck/issue-105946.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/10dbcf063033eb842a80ff386e268f8448ccf1ed/src%2Ftest%2Fui%2Ftypeck%2Fissue-105946.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10dbcf063033eb842a80ff386e268f8448ccf1ed/src%2Ftest%2Fui%2Ftypeck%2Fissue-105946.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-105946.stderr?ref=10dbcf063033eb842a80ff386e268f8448ccf1ed", "patch": "@@ -0,0 +1,49 @@\n+error[E0425]: cannot find value `_y` in this scope\n+  --> $DIR/issue-105946.rs:6:10\n+   |\n+LL |     let [_y..] = [box 1, box 2];\n+   |          ^^ not found in this scope\n+\n+error[E0658]: `X..` patterns in slices are experimental\n+  --> $DIR/issue-105946.rs:6:10\n+   |\n+LL |     let [_y..] = [box 1, box 2];\n+   |          ^^^^\n+   |\n+   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n+   = help: add `#![feature(half_open_range_patterns_in_slices)]` to the crate attributes to enable\n+\n+error[E0658]: box expression syntax is experimental; you can call `Box::new` instead\n+  --> $DIR/issue-105946.rs:6:19\n+   |\n+LL |     let [_y..] = [box 1, box 2];\n+   |                   ^^^^^\n+   |\n+   = note: see issue #49733 <https://github.com/rust-lang/rust/issues/49733> for more information\n+   = help: add `#![feature(box_syntax)]` to the crate attributes to enable\n+\n+error[E0658]: box expression syntax is experimental; you can call `Box::new` instead\n+  --> $DIR/issue-105946.rs:6:26\n+   |\n+LL |     let [_y..] = [box 1, box 2];\n+   |                          ^^^^^\n+   |\n+   = note: see issue #49733 <https://github.com/rust-lang/rust/issues/49733> for more information\n+   = help: add `#![feature(box_syntax)]` to the crate attributes to enable\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-105946.rs:2:10\n+   |\n+LL |   return {};\n+   |          ^^ expected `str`, found `()`\n+\n+error[E0527]: pattern requires 1 element but array has 2\n+  --> $DIR/issue-105946.rs:6:9\n+   |\n+LL |     let [_y..] = [box 1, box 2];\n+   |         ^^^^^^ expected 2 elements\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0308, E0425, E0527, E0658.\n+For more information about an error, try `rustc --explain E0308`."}]}