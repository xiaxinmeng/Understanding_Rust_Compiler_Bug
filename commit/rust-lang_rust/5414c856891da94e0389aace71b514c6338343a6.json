{"sha": "5414c856891da94e0389aace71b514c6338343a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MTRjODU2ODkxZGE5NGUwMzg5YWFjZTcxYjUxNGM2MzM4MzQzYTY=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-08-07T19:27:47Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-08-07T21:10:16Z"}, "message": "Revise `Fn`/`FnMut`/`FnOnce` documentation\n\nPart of #29365.\n* Moved explanations out of Examples section and expanded on them.\n* Made the super-/subtrait relationships more explicit.\n* Added links to the other traits, TRPL and the nomicon where appropriate\n* Changed method summaries to be in 3rd person singular\n* General copyediting", "tree": {"sha": "f3f9702dfa0e74ff80b0612b7035e8cb4be52263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3f9702dfa0e74ff80b0612b7035e8cb4be52263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5414c856891da94e0389aace71b514c6338343a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5414c856891da94e0389aace71b514c6338343a6", "html_url": "https://github.com/rust-lang/rust/commit/5414c856891da94e0389aace71b514c6338343a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5414c856891da94e0389aace71b514c6338343a6/comments", "author": null, "committer": null, "parents": [{"sha": "ffa327b3a44315bc664b726e01c04b13768ebee4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa327b3a44315bc664b726e01c04b13768ebee4", "html_url": "https://github.com/rust-lang/rust/commit/ffa327b3a44315bc664b726e01c04b13768ebee4"}], "stats": {"total": 95, "additions": 74, "deletions": 21}, "files": [{"sha": "5a61e9b68b8609c06306db1bb81de47787130430", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 74, "deletions": 21, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/5414c856891da94e0389aace71b514c6338343a6/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5414c856891da94e0389aace71b514c6338343a6/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=5414c856891da94e0389aace71b514c6338343a6", "patch": "@@ -10,24 +10,37 @@\n \n /// A version of the call operator that takes an immutable receiver.\n ///\n-/// # Examples\n+/// Closures only taking immutable references to captured variables\n+/// automatically implement this trait, which allows them to be invoked.\n+/// For mutably referenced captures, see [`FnMut`], and for consuming the\n+/// capture, see [`FnOnce`].\n+///\n+/// You can use the [`Fn`] traits when you want to accept a closure as a\n+/// parameter. Since both [`FnMut`] and [`FnOnce`] are supertraits of `Fn`, any\n+/// instance of `Fn` can be used where a [`FnMut`] or [`FnOnce`] is expected.\n+///\n+/// See the [chapter on closures in *The Rust Programming Language*][book] for\n+/// more information about closures in general.\n ///\n-/// Closures automatically implement this trait, which allows them to be\n-/// invoked. Note, however, that `Fn` takes an immutable reference to any\n-/// captured variables. To take a mutable capture, implement [`FnMut`], and to\n-/// consume the capture, implement [`FnOnce`].\n+/// Also of note is the special syntax for `Fn` traits (e.g.\n+/// `Fn(usize, bool) -> usize`). Those interested in the technical details of\n+/// this can refer to [the relevant section in *The Rustonomicon*][nomicon].\n ///\n+/// [book]: ../../book/second-edition/ch13-01-closures.html\n /// [`FnMut`]: trait.FnMut.html\n /// [`FnOnce`]: trait.FnOnce.html\n+/// [nomicon]: ../../nomicon/hrtb.html\n+///\n+/// # Examples\n+///\n+/// ## Calling a closure\n ///\n /// ```\n /// let square = |x| x * x;\n /// assert_eq!(square(5), 25);\n /// ```\n ///\n-/// Closures can also be passed to higher-level functions through a `Fn`\n-/// parameter (or a `FnMut` or `FnOnce` parameter, which are supertraits of\n-/// `Fn`).\n+/// ## Using a `Fn` parameter\n ///\n /// ```\n /// fn call_with_one<F>(func: F) -> usize\n@@ -43,17 +56,39 @@\n #[rustc_paren_sugar]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n pub trait Fn<Args> : FnMut<Args> {\n-    /// This is called when the call operator is used.\n+    /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n     extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n }\n \n /// A version of the call operator that takes a mutable receiver.\n ///\n+/// Closures that might mutably reference captured variables automatically\n+/// implement this trait, which allows them to be invoked. For immutably\n+/// referenced captures, see [`Fn`], and for consuming the captures, see\n+/// [`FnOnce`].\n+///\n+/// You can use the [`Fn`] traits when you want to accept a closure as a\n+/// parameter. Since [`FnOnce`] is a supertrait of `FnMut`, any instance of\n+/// `FnMut` can be used where a [`FnOnce`] is expected, and since [`Fn`] is a\n+/// subtrait of `FnMut`, any instance of [`Fn`] can be used where [`FnMut`] is\n+/// expected.\n+///\n+/// See the [chapter on closures in *The Rust Programming Language*][book] for\n+/// more information about closures in general.\n+///\n+/// Also of note is the special syntax for `Fn` traits (e.g.\n+/// `Fn(usize, bool) -> usize`). Those interested in the technical details of\n+/// this can refer to [the relevant section in *The Rustonomicon*][nomicon].\n+///\n+/// [book]: ../../book/second-edition/ch13-01-closures.html\n+/// [`Fn`]: trait.Fnhtml\n+/// [`FnOnce`]: trait.FnOnce.html\n+/// [nomicon]: ../../nomicon/hrtb.html\n+///\n /// # Examples\n ///\n-/// Closures that mutably capture variables automatically implement this trait,\n-/// which allows them to be invoked.\n+/// ## Calling a mutably capturing closure\n ///\n /// ```\n /// let mut x = 5;\n@@ -64,8 +99,7 @@ pub trait Fn<Args> : FnMut<Args> {\n /// assert_eq!(x, 25);\n /// ```\n ///\n-/// Closures can also be passed to higher-level functions through a `FnMut`\n-/// parameter (or a `FnOnce` parameter, which is a supertrait of `FnMut`).\n+/// ## Using a `FnMut` parameter\n ///\n /// ```\n /// fn do_twice<F>(mut func: F)\n@@ -88,39 +122,58 @@ pub trait Fn<Args> : FnMut<Args> {\n #[rustc_paren_sugar]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n pub trait FnMut<Args> : FnOnce<Args> {\n-    /// This is called when the call operator is used.\n+    /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n }\n \n /// A version of the call operator that takes a by-value receiver.\n ///\n+/// Closures that might take ownership of captured variables automatically\n+/// implement this trait, which allows them to be invoked. For immutably\n+/// referenced captures, see [`Fn`], and for mutably referenced captures,\n+/// see [`FnMut`].\n+///\n+/// You can use the [`Fn`] traits when you want to accept a closure as a\n+/// parameter. Since both [`Fn`] and [`FnMut`] are subtraits of `FnOnce`, any\n+/// instance of [`Fn`] or [`FnMut`] can be used where a `FnOnce` is expected.\n+///\n+/// See the [chapter on closures in *The Rust Programming Language*][book] for\n+/// more information about closures in general.\n+///\n+/// Also of note is the special syntax for `Fn` traits (e.g.\n+/// `Fn(usize, bool) -> usize`). Those interested in the technical details of\n+/// this can refer to [the relevant section in *The Rustonomicon*][nomicon].\n+///\n+/// [book]: ../../book/second-edition/ch13-01-closures.html\n+/// [`Fn`]: trait.Fn.html\n+/// [`FnMut`]: trait.FnMut.html\n+/// [nomicon]: ../../nomicon/hrtb.html\n+///\n /// # Examples\n ///\n-/// By-value closures automatically implement this trait, which allows them to\n-/// be invoked.\n+/// ## Calling a by-value closure\n ///\n /// ```\n /// let x = 5;\n /// let square_x = move || x * x;\n /// assert_eq!(square_x(), 25);\n /// ```\n ///\n-/// By-value Closures can also be passed to higher-level functions through a\n-/// `FnOnce` parameter.\n+/// ## Using a `FnOnce` parameter\n ///\n /// ```\n /// fn consume_with_relish<F>(func: F)\n ///     where F: FnOnce() -> String\n /// {\n ///     // `func` consumes its captured variables, so it cannot be run more\n-///     // than once\n+///     // than once.\n ///     println!(\"Consumed: {}\", func());\n ///\n ///     println!(\"Delicious!\");\n ///\n ///     // Attempting to invoke `func()` again will throw a `use of moved\n-///     // value` error for `func`\n+///     // value` error for `func`.\n /// }\n ///\n /// let x = String::from(\"x\");\n@@ -138,7 +191,7 @@ pub trait FnOnce<Args> {\n     #[stable(feature = \"fn_once_output\", since = \"1.12.0\")]\n     type Output;\n \n-    /// This is called when the call operator is used.\n+    /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n }"}]}