{"sha": "6d3ff105365318fe41c907c424c6ff2b2ba80dae", "node_id": "C_kwDOAAsO6NoAKDZkM2ZmMTA1MzY1MzE4ZmU0MWM5MDdjNDI0YzZmZjJiMmJhODBkYWU", "commit": {"author": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2023-04-25T03:02:36Z"}, "committer": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2023-06-10T20:47:44Z"}, "message": "run `cargo update` weekly\n\n- Keep Cargo.lock dependencies current\n- Presents output from `cargo update` in commit and PR\n- Edit existing open PR, otherwise open a new one\n- Skip if existing open PR is S-waiting-on-bors", "tree": {"sha": "53314995cf8c199f430699cc91499304bfe18a27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53314995cf8c199f430699cc91499304bfe18a27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d3ff105365318fe41c907c424c6ff2b2ba80dae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3ff105365318fe41c907c424c6ff2b2ba80dae", "html_url": "https://github.com/rust-lang/rust/commit/6d3ff105365318fe41c907c424c6ff2b2ba80dae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d3ff105365318fe41c907c424c6ff2b2ba80dae/comments", "author": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "788c98df5995c9fe360ba9ba5efb103ee69d05c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/788c98df5995c9fe360ba9ba5efb103ee69d05c4", "html_url": "https://github.com/rust-lang/rust/commit/788c98df5995c9fe360ba9ba5efb103ee69d05c4"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "2eccd28e5bb1fb76ae98d7a4d18b7ba1158daa72", "filename": ".github/workflows/dependencies.yml", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/6d3ff105365318fe41c907c424c6ff2b2ba80dae/.github%2Fworkflows%2Fdependencies.yml", "raw_url": "https://github.com/rust-lang/rust/raw/6d3ff105365318fe41c907c424c6ff2b2ba80dae/.github%2Fworkflows%2Fdependencies.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fdependencies.yml?ref=6d3ff105365318fe41c907c424c6ff2b2ba80dae", "patch": "@@ -0,0 +1,139 @@\n+# Automatically run `cargo update` periodically\n+\n+---\n+name: Bump dependencies in Cargo.lock\n+on:\n+  schedule:\n+    # Run weekly\n+    - cron: '0 0 * * Sun'\n+  workflow_dispatch:\n+    # Needed so we can run it manually\n+permissions:\n+  contents: read\n+defaults:\n+  run:\n+    shell: bash\n+env:\n+  # So cargo doesn't complain about unstable features\n+  RUSTC_BOOTSTRAP: 1\n+  PR_TITLE: Weekly `cargo update`\n+  PR_MESSAGE: |\n+    Automation to keep dependencies in `Cargo.lock` current.\n+\n+    The following is the output from `cargo update`:\n+  COMMIT_MESSAGE: \"cargo update \\n\\n\"\n+\n+jobs:\n+  not-waiting-on-bors:\n+    name: skip if S-waiting-on-bors\n+    runs-on: ubuntu-latest\n+    steps:\n+      - env:\n+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n+        run: |\n+          # Fetch state and labels of PR\n+          # Or exit successfully if PR does not exist\n+          JSON=$(gh pr view cargo_update --repo $GITHUB_REPOSITORY --json labels,state || exit 0)\n+          STATE=$(echo \"$JSON\" | jq -r '.state')\n+          WAITING_ON_BORS=$(echo \"$JSON\" | jq '.labels[] | any(.name == \"S-waiting-on-bors\"; .)')\n+\n+          # Exit with error if open and S-waiting-on-bors\n+          if [[ \"$STATE\" == \"OPEN\" && \"$WAITING_ON_BORS\" == \"true\" ]]; then\n+            exit 1\n+          fi\n+\n+  update:\n+    name: update dependencies\n+    needs: not-waiting-on-bors\n+    runs-on: ubuntu-latest\n+    steps:\n+      - name: checkout the source code\n+        uses: actions/checkout@v3\n+        with:\n+          submodules: recursive\n+      - name: install the bootstrap toolchain\n+        run: |\n+          # Extract the stage0 version\n+          TOOLCHAIN=$(jq -r '.compiler | {version,date} | join(\"-\")' -- src/stage0.json)\n+          # Install and set as default\n+          rustup toolchain install --no-self-update --profile minimal $TOOLCHAIN\n+          rustup default $TOOLCHAIN\n+\n+      - name: cargo update\n+        # Remove first line that always just says \"Updating crates.io index\"\n+        run: cargo update 2>&1 | sed '/crates.io index/d' | tee -a cargo_update.log\n+      - name: upload Cargo.lock artifact for use in PR\n+        uses: actions/upload-artifact@v3\n+        with:\n+          name: Cargo-lock\n+          path: Cargo.lock\n+          retention-days: 1\n+      - name: upload cargo-update log artifact for use in PR\n+        uses: actions/upload-artifact@v3\n+        with:\n+          name: cargo-updates\n+          path: cargo_update.log\n+          retention-days: 1\n+\n+  pr:\n+    name: amend PR\n+    needs: update\n+    runs-on: ubuntu-latest\n+    permissions:\n+      contents: write\n+      pull-requests: write\n+    steps:\n+      - name: checkout the source code\n+        uses: actions/checkout@v3\n+\n+      - name: download Cargo.lock from update job\n+        uses: actions/download-artifact@v3\n+        with:\n+          name: Cargo-lock\n+      - name: download cargo-update log from update job\n+        uses: actions/download-artifact@v3\n+        with:\n+          name: cargo-updates\n+\n+      - name: craft PR body and commit message\n+        run: |\n+          echo \"${COMMIT_MESSAGE}\" > commit.txt\n+          cat cargo_update.log >> commit.txt\n+\n+          echo \"${PR_MESSAGE}\" > body.md\n+          echo '```txt' >> body.md\n+          cat cargo_update.log >> body.md\n+          echo '```' >> body.md\n+\n+      - name: commit\n+        run: |\n+          git config user.name github-actions\n+          git config user.email github-actions@github.com\n+          git switch --force-create cargo_update\n+          git add ./Cargo.lock\n+          git commit --no-verify --file=commit.txt\n+\n+      - name: push\n+        run: git push --no-verify --force --set-upstream origin cargo_update\n+\n+      - name: edit existing open pull request\n+        id: edit\n+        # Don't fail job if we need to open new PR\n+        continue-on-error: true\n+        env:\n+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n+        run: |\n+          # Exit with error if PR is closed\n+          STATE=$(gh pr view cargo_update --repo $GITHUB_REPOSITORY --json state --jq '.state')\n+          if [[ \"$STATE\" != \"OPEN\" ]]; then\n+            exit 1\n+          fi\n+\n+          gh pr edit cargo_update --title \"${PR_TITLE}\" --body-file body.md --repo $GITHUB_REPOSITORY\n+\n+      - name: open new pull request\n+        # Only run if there wasn't an existing PR\n+        if: steps.edit.outcome != 'success'\n+        env:\n+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n+        run: gh pr create --title \"${PR_TITLE}\" --body-file body.md --repo $GITHUB_REPOSITORY"}]}