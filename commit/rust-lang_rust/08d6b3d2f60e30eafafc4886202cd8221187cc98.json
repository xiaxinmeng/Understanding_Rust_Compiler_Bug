{"sha": "08d6b3d2f60e30eafafc4886202cd8221187cc98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZDZiM2QyZjYwZTMwZWFmYWZjNDg4NjIwMmNkODIyMTE4N2NjOTg=", "commit": {"author": {"name": "Ryan Cumming", "email": "etaoins@gmail.com", "date": "2018-08-02T07:57:49Z"}, "committer": {"name": "Ryan Cumming", "email": "etaoins@gmail.com", "date": "2018-08-02T07:57:49Z"}, "message": "Allow pass by ref when returning ADT with ref\n\nThis is a follow-up to #2951 that extends the logic to allow for\nreturning references inside structs/enums/unions. This was a simple\noversight in the first version and it's surprisingly easy to handle.", "tree": {"sha": "ce800e3715ab797b8c686cec0b4cbfe2a29bfcf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce800e3715ab797b8c686cec0b4cbfe2a29bfcf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08d6b3d2f60e30eafafc4886202cd8221187cc98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08d6b3d2f60e30eafafc4886202cd8221187cc98", "html_url": "https://github.com/rust-lang/rust/commit/08d6b3d2f60e30eafafc4886202cd8221187cc98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08d6b3d2f60e30eafafc4886202cd8221187cc98/comments", "author": {"login": "etaoins", "id": 687534, "node_id": "MDQ6VXNlcjY4NzUzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/687534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etaoins", "html_url": "https://github.com/etaoins", "followers_url": "https://api.github.com/users/etaoins/followers", "following_url": "https://api.github.com/users/etaoins/following{/other_user}", "gists_url": "https://api.github.com/users/etaoins/gists{/gist_id}", "starred_url": "https://api.github.com/users/etaoins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etaoins/subscriptions", "organizations_url": "https://api.github.com/users/etaoins/orgs", "repos_url": "https://api.github.com/users/etaoins/repos", "events_url": "https://api.github.com/users/etaoins/events{/privacy}", "received_events_url": "https://api.github.com/users/etaoins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "etaoins", "id": 687534, "node_id": "MDQ6VXNlcjY4NzUzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/687534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etaoins", "html_url": "https://github.com/etaoins", "followers_url": "https://api.github.com/users/etaoins/followers", "following_url": "https://api.github.com/users/etaoins/following{/other_user}", "gists_url": "https://api.github.com/users/etaoins/gists{/gist_id}", "starred_url": "https://api.github.com/users/etaoins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etaoins/subscriptions", "organizations_url": "https://api.github.com/users/etaoins/orgs", "repos_url": "https://api.github.com/users/etaoins/repos", "events_url": "https://api.github.com/users/etaoins/events{/privacy}", "received_events_url": "https://api.github.com/users/etaoins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c27cdcaf71fb9bb10d3da2ecd9e9d2def741ef9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c27cdcaf71fb9bb10d3da2ecd9e9d2def741ef9f", "html_url": "https://github.com/rust-lang/rust/commit/c27cdcaf71fb9bb10d3da2ecd9e9d2def741ef9f"}], "stats": {"total": 79, "additions": 48, "deletions": 31}, "files": [{"sha": "a01a1c5ae31bd241267bf942497ef21d5ee74a88", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08d6b3d2f60e30eafafc4886202cd8221187cc98/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08d6b3d2f60e30eafafc4886202cd8221187cc98/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=08d6b3d2f60e30eafafc4886202cd8221187cc98", "patch": "@@ -124,10 +124,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n         // Use lifetimes to determine if we're returning a reference to the\n         // argument. In that case we can't switch to pass-by-value as the\n         // argument will not live long enough.\n-        let output_lt = if let TypeVariants::TyRef(output_lt, _, _) = fn_sig.output().sty {\n-            Some(output_lt)\n-        } else {\n-            None\n+        let output_lts = match fn_sig.output().sty {\n+            TypeVariants::TyRef(output_lt, _, _) => vec![output_lt],\n+            TypeVariants::TyAdt(_, substs) => substs.regions().collect(),\n+            _ => vec![],\n         };\n \n         for ((input, &ty), arg) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.arguments) {\n@@ -138,7 +138,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n \n             if_chain! {\n                 if let TypeVariants::TyRef(input_lt, ty, Mutability::MutImmutable) = ty.sty;\n-                if Some(input_lt) != output_lt;\n+                if !output_lts.contains(&input_lt);\n                 if is_copy(cx, ty);\n                 if let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes());\n                 if size <= self.limit;"}, {"sha": "9b905e8d62888ebe60b4eaffe67a5c29df98df06", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/08d6b3d2f60e30eafafc4886202cd8221187cc98/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08d6b3d2f60e30eafafc4886202cd8221187cc98/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=08d6b3d2f60e30eafafc4886202cd8221187cc98", "patch": "@@ -6,6 +6,10 @@ struct Foo(u32);\n #[derive(Copy, Clone)]\n struct Bar([u8; 24]);\n \n+struct FooRef<'a> {\n+    foo: &'a Foo,\n+}\n+\n type Baz = u32;\n \n fn good(a: &mut u32, b: u32, c: &Bar) {\n@@ -20,6 +24,19 @@ fn good_return_explicit_lt_ref<'a>(foo: &'a Foo) -> &'a u32 {\n     &foo.0\n }\n \n+fn good_return_implicit_lt_struct(foo: &Foo) -> FooRef {\n+    FooRef {\n+        foo,\n+    }\n+}\n+\n+#[allow(needless_lifetimes)]\n+fn good_return_explicit_lt_struct<'a>(foo: &'a Foo) -> FooRef<'a> {\n+    FooRef {\n+        foo,\n+    }\n+}\n+\n fn bad(x: &u32, y: &Foo, z: &Baz) {\n }\n "}, {"sha": "757b6b4c9a98e2838a94168f26772b575c82a327", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/08d6b3d2f60e30eafafc4886202cd8221187cc98/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08d6b3d2f60e30eafafc4886202cd8221187cc98/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=08d6b3d2f60e30eafafc4886202cd8221187cc98", "patch": "@@ -1,81 +1,81 @@\n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:23:11\n+  --> $DIR/trivially_copy_pass_by_ref.rs:40:11\n    |\n-23 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+40 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n    |           ^^^^ help: consider passing by value instead: `u32`\n    |\n    = note: `-D trivially-copy-pass-by-ref` implied by `-D warnings`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:23:20\n+  --> $DIR/trivially_copy_pass_by_ref.rs:40:20\n    |\n-23 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+40 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n    |                    ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:23:29\n+  --> $DIR/trivially_copy_pass_by_ref.rs:40:29\n    |\n-23 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+40 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n    |                             ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:33:12\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:12\n    |\n-33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+50 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |            ^^^^^ help: consider passing by value instead: `self`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:33:22\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:22\n    |\n-33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+50 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |                      ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:33:31\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:31\n    |\n-33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+50 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |                               ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:33:40\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:40\n    |\n-33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+50 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |                                        ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:36:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:53:16\n    |\n-36 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+53 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:36:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:53:25\n    |\n-36 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+53 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:36:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:53:34\n    |\n-36 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+53 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:67:16\n    |\n-50 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+67 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:67:25\n    |\n-50 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+67 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:67:34\n    |\n-50 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+67 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: aborting due to 13 previous errors"}]}