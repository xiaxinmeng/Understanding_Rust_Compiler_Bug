{"sha": "af8e471908841ff2ca925b49871dae4c68ddf86e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmOGU0NzE5MDg4NDFmZjJjYTkyNWI0OTg3MWRhZTRjNjhkZGY4NmU=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-14T11:09:01Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-14T22:54:16Z"}, "message": "Fixed type resolution error in math tests", "tree": {"sha": "e84b1e37f32438e10e0bf191ffe1f0dd80812acd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e84b1e37f32438e10e0bf191ffe1f0dd80812acd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af8e471908841ff2ca925b49871dae4c68ddf86e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af8e471908841ff2ca925b49871dae4c68ddf86e", "html_url": "https://github.com/rust-lang/rust/commit/af8e471908841ff2ca925b49871dae4c68ddf86e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af8e471908841ff2ca925b49871dae4c68ddf86e/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50db7ce906b9731a5dc02a1a87fbe87f55f13b42", "url": "https://api.github.com/repos/rust-lang/rust/commits/50db7ce906b9731a5dc02a1a87fbe87f55f13b42", "html_url": "https://github.com/rust-lang/rust/commit/50db7ce906b9731a5dc02a1a87fbe87f55f13b42"}], "stats": {"total": 78, "additions": 70, "deletions": 8}, "files": [{"sha": "cddea420cc8364bb1f00124a83b2874426abbd21", "filename": "src/libstd/mtypes.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/af8e471908841ff2ca925b49871dae4c68ddf86e/src%2Flibstd%2Fmtypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8e471908841ff2ca925b49871dae4c68ddf86e/src%2Flibstd%2Fmtypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmtypes.rs?ref=af8e471908841ff2ca925b49871dae4c68ddf86e", "patch": "@@ -0,0 +1,64 @@\n+/*\n+\n+Module: mtypes\n+\n+Machine type equivalents of rust int, uint, float, and complex.\n+\n+Types useful for interop with C when writing bindings that exist\n+for different types (float, f32, f64, ...; cf float.rs for an example)\n+*/\n+\n+export m_int, m_uint, m_float;\n+\n+// PORT Change this when porting to a new architecture\n+\n+/*\n+Type: m_int\n+\n+Machine type equivalent of an int\n+*/\n+#[cfg(target_arch=\"x86\")]\n+type m_int = i32;\n+#[cfg(target_arch=\"x86_64\")]\n+type m_int = i64;\n+\n+// PORT Change this when porting to a new architecture\n+\n+/*\n+Type: m_uint\n+\n+Machine type equivalent of a uint\n+*/\n+#[cfg(target_arch=\"x86\")]\n+type m_uint = u32;\n+#[cfg(target_arch=\"x86_64\")]\n+type m_uint = u64;\n+\n+// PORT *must* match with \"import m_float = fXX\" in std::math per arch\n+\n+/*\n+Type: m_float\n+\n+Machine type equivalent of a float\n+*/\n+type m_float = f64;\n+\n+// PORT  *must* match \"import m_complex = ...\" in std::complex per arch\n+\n+/*\n+FIXME Type m_complex\n+\n+Machine type representing a complex value that uses floats for\n+both the real and the imaginary part.\n+*/\n+// type m_complex = complex_c64::t;\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "458013a912c9c4d2787108c7024f78ab75b49627", "filename": "src/test/compile-fail/non-triv-cast-be.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af8e471908841ff2ca925b49871dae4c68ddf86e/src%2Ftest%2Fcompile-fail%2Fnon-triv-cast-be.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8e471908841ff2ca925b49871dae4c68ddf86e/src%2Ftest%2Fcompile-fail%2Fnon-triv-cast-be.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-triv-cast-be.rs?ref=af8e471908841ff2ca925b49871dae4c68ddf86e", "patch": "@@ -1,7 +1,5 @@\n // error-pattern: non-trivial cast of tail-call return value\n-use std;\n-\n-import ctypes::*;\n+import core::mtypes::*;\n \n fn foo_float() -> m_float { ret 0.0 as m_float; }\n fn bar_float() -> bool { be foo_float() as bool; }"}, {"sha": "0fbb1ad283009e230bd6bae5646a7610e457f092", "filename": "src/test/run-pass/triv-cast-be.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af8e471908841ff2ca925b49871dae4c68ddf86e/src%2Ftest%2Frun-pass%2Ftriv-cast-be.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8e471908841ff2ca925b49871dae4c68ddf86e/src%2Ftest%2Frun-pass%2Ftriv-cast-be.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftriv-cast-be.rs?ref=af8e471908841ff2ca925b49871dae4c68ddf86e", "patch": "@@ -1,6 +1,8 @@\n-use std;\n+import core::ctypes::*;\n \n-import ctypes::*;\n+import core::mtypes::m_float;\n+import core::mtypes::m_int;\n+import core::mtypes::m_uint;\n \n fn foo_float() -> m_float { ret 0.0 as m_float; }\n fn bar_float() -> float { be foo_float() as float; }"}, {"sha": "0880fc82c48dbbc26bf5a3aa56c441b674dbec11", "filename": "src/test/run-pass/triv-cast-const.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af8e471908841ff2ca925b49871dae4c68ddf86e/src%2Ftest%2Frun-pass%2Ftriv-cast-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8e471908841ff2ca925b49871dae4c68ddf86e/src%2Ftest%2Frun-pass%2Ftriv-cast-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftriv-cast-const.rs?ref=af8e471908841ff2ca925b49871dae4c68ddf86e", "patch": "@@ -1,6 +1,4 @@\n-use std;\n-\n-import ctypes::*;\n+import core::mtypes::m_int;\n \n // This will be more interesting once there is support\n // for consts that refer to other consts, i.e. math_f64::consts::pi as m_float"}]}