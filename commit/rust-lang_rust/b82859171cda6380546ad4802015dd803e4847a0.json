{"sha": "b82859171cda6380546ad4802015dd803e4847a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4Mjg1OTE3MWNkYTYzODA1NDZhZDQ4MDIwMTVkZDgwM2U0ODQ3YTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-13T11:34:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-13T11:34:44Z"}, "message": "Rollup merge of #65360 - Centril:mbrpt, r=petrochenkov\n\nmbe: reduce panictry! uses.\n\nExtracted from https://github.com/rust-lang/rust/pull/65324.\n\nr? @petrochenkov", "tree": {"sha": "c2cd4ba7039146bc964171693b6978296f585a72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2cd4ba7039146bc964171693b6978296f585a72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b82859171cda6380546ad4802015dd803e4847a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdowvUCRBK7hj4Ov3rIwAAdHIIAIwibhcKcCR1PGW+gnZssgtU\n/OVZ32H3ANx7enKGMLxGnyz+ZKEkCq3bR5QaY3Hr0BKEDqhBWyby5Pw3cCI8ZBoO\nb0e6C1R8mdpDGtepypqmCHorLNZWKrZl0ONY/2GVeT4n09hDepe69zQouM+k+nrG\nlLSwLKW4XU8DxrsvbYIea29Ako5SwQHUulgoWz9RJjNcTfvY4EPtJoV8BSWw+5nq\nhTIcT9rlMuV2i55K3gwaDB/Z2vpOUhRzE3xhVwQPJiMAcv+lFASONma40cAlRXfP\nbBMd6HEB2vs3ypgBpdcbsSwIShRMVwxrDB4/pi1b6dfPRatO9hIQkRG0V8dZKm8=\n=G18W\n-----END PGP SIGNATURE-----\n", "payload": "tree c2cd4ba7039146bc964171693b6978296f585a72\nparent af54a3e91d9b48ff36e2be7604fb2a231dd4c131\nparent 94db37a4f5add29a0a7d993eafc5595f4df01574\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570966484 +0200\ncommitter GitHub <noreply@github.com> 1570966484 +0200\n\nRollup merge of #65360 - Centril:mbrpt, r=petrochenkov\n\nmbe: reduce panictry! uses.\n\nExtracted from https://github.com/rust-lang/rust/pull/65324.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b82859171cda6380546ad4802015dd803e4847a0", "html_url": "https://github.com/rust-lang/rust/commit/b82859171cda6380546ad4802015dd803e4847a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b82859171cda6380546ad4802015dd803e4847a0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af54a3e91d9b48ff36e2be7604fb2a231dd4c131", "url": "https://api.github.com/repos/rust-lang/rust/commits/af54a3e91d9b48ff36e2be7604fb2a231dd4c131", "html_url": "https://github.com/rust-lang/rust/commit/af54a3e91d9b48ff36e2be7604fb2a231dd4c131"}, {"sha": "94db37a4f5add29a0a7d993eafc5595f4df01574", "url": "https://api.github.com/repos/rust-lang/rust/commits/94db37a4f5add29a0a7d993eafc5595f4df01574", "html_url": "https://github.com/rust-lang/rust/commit/94db37a4f5add29a0a7d993eafc5595f4df01574"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "0cb5eff1ef29a5adcab6f681de21053ad74e1c0e", "filename": "src/libsyntax/ext/mbe/macro_parser.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b82859171cda6380546ad4802015dd803e4847a0/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82859171cda6380546ad4802015dd803e4847a0/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_parser.rs?ref=b82859171cda6380546ad4802015dd803e4847a0", "patch": "@@ -76,7 +76,7 @@ use TokenTreeOrTokenTreeSlice::*;\n \n use crate::ast::{Ident, Name};\n use crate::ext::mbe::{self, TokenTree};\n-use crate::parse::{Directory, ParseSess};\n+use crate::parse::{Directory, ParseSess, PResult};\n use crate::parse::parser::{Parser, PathStyle};\n use crate::parse::token::{self, DocComment, Nonterminal, Token};\n use crate::print::pprust;\n@@ -893,48 +893,50 @@ fn parse_nt(p: &mut Parser<'_>, sp: Span, name: Symbol) -> Nonterminal {\n     }\n     // check at the beginning and the parser checks after each bump\n     p.process_potential_macro_variable();\n-    match name {\n-        sym::item => match panictry!(p.parse_item()) {\n+    match parse_nt_inner(p, sp, name) {\n+        Ok(nt) => nt,\n+        Err(mut err) => {\n+            err.emit();\n+            FatalError.raise();\n+        }\n+    }\n+}\n+\n+fn parse_nt_inner<'a>(p: &mut Parser<'a>, sp: Span, name: Symbol) -> PResult<'a, Nonterminal> {\n+    Ok(match name {\n+        sym::item => match p.parse_item()? {\n             Some(i) => token::NtItem(i),\n-            None => {\n-                p.fatal(\"expected an item keyword\").emit();\n-                FatalError.raise();\n-            }\n+            None => return Err(p.fatal(\"expected an item keyword\")),\n         },\n-        sym::block => token::NtBlock(panictry!(p.parse_block())),\n-        sym::stmt => match panictry!(p.parse_stmt()) {\n+        sym::block => token::NtBlock(p.parse_block()?),\n+        sym::stmt => match p.parse_stmt()? {\n             Some(s) => token::NtStmt(s),\n-            None => {\n-                p.fatal(\"expected a statement\").emit();\n-                FatalError.raise();\n-            }\n+            None => return Err(p.fatal(\"expected a statement\")),\n         },\n-        sym::pat => token::NtPat(panictry!(p.parse_pat(None))),\n-        sym::expr => token::NtExpr(panictry!(p.parse_expr())),\n-        sym::literal => token::NtLiteral(panictry!(p.parse_literal_maybe_minus())),\n-        sym::ty => token::NtTy(panictry!(p.parse_ty())),\n+        sym::pat => token::NtPat(p.parse_pat(None)?),\n+        sym::expr => token::NtExpr(p.parse_expr()?),\n+        sym::literal => token::NtLiteral(p.parse_literal_maybe_minus()?),\n+        sym::ty => token::NtTy(p.parse_ty()?),\n         // this could be handled like a token, since it is one\n         sym::ident => if let Some((name, is_raw)) = get_macro_name(&p.token) {\n             let span = p.token.span;\n             p.bump();\n             token::NtIdent(Ident::new(name, span), is_raw)\n         } else {\n             let token_str = pprust::token_to_string(&p.token);\n-            p.fatal(&format!(\"expected ident, found {}\", &token_str)).emit();\n-            FatalError.raise()\n+            return Err(p.fatal(&format!(\"expected ident, found {}\", &token_str)));\n         }\n-        sym::path => token::NtPath(panictry!(p.parse_path(PathStyle::Type))),\n-        sym::meta => token::NtMeta(panictry!(p.parse_attr_item())),\n-        sym::vis => token::NtVis(panictry!(p.parse_visibility(true))),\n+        sym::path => token::NtPath(p.parse_path(PathStyle::Type)?),\n+        sym::meta => token::NtMeta(p.parse_attr_item()?),\n+        sym::vis => token::NtVis(p.parse_visibility(true)?),\n         sym::lifetime => if p.check_lifetime() {\n             token::NtLifetime(p.expect_lifetime().ident)\n         } else {\n             let token_str = pprust::token_to_string(&p.token);\n-            p.fatal(&format!(\"expected a lifetime, found `{}`\", &token_str)).emit();\n-            FatalError.raise();\n+            return Err(p.fatal(&format!(\"expected a lifetime, found `{}`\", &token_str)));\n         }\n         // this is not supposed to happen, since it has been checked\n         // when compiling the macro.\n         _ => p.span_bug(sp, \"invalid fragment specifier\"),\n-    }\n+    })\n }"}]}