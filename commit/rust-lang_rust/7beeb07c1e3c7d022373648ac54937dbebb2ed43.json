{"sha": "7beeb07c1e3c7d022373648ac54937dbebb2ed43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZWViMDdjMWUzYzdkMDIyMzczNjQ4YWM1NDkzN2RiZWJiMmVkNDM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-13T10:57:43Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-13T11:24:29Z"}, "message": "Clean up rustdoc passes", "tree": {"sha": "e6ddac5108ee21247de7c3458ffd0a4822759c31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6ddac5108ee21247de7c3458ffd0a4822759c31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7beeb07c1e3c7d022373648ac54937dbebb2ed43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7beeb07c1e3c7d022373648ac54937dbebb2ed43", "html_url": "https://github.com/rust-lang/rust/commit/7beeb07c1e3c7d022373648ac54937dbebb2ed43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7beeb07c1e3c7d022373648ac54937dbebb2ed43/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e022fc2b8eecbc16c090a99efbbd262c37ec962", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e022fc2b8eecbc16c090a99efbbd262c37ec962", "html_url": "https://github.com/rust-lang/rust/commit/0e022fc2b8eecbc16c090a99efbbd262c37ec962"}], "stats": {"total": 346, "additions": 176, "deletions": 170}, "files": [{"sha": "2591650e3f97fa5359f75e99501b84638e81cd28", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 4, "deletions": 170, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/7beeb07c1e3c7d022373648ac54937dbebb2ed43/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7beeb07c1e3c7d022373648ac54937dbebb2ed43/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=7beeb07c1e3c7d022373648ac54937dbebb2ed43", "patch": "@@ -1,16 +1,15 @@\n //! Contains information about \"passes\", used to modify crate information during the documentation\n //! process.\n \n-use rustc_hir::def_id::{DefId, DefIdSet};\n-use rustc_middle::middle::privacy::AccessLevels;\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n-use std::mem;\n use std::ops::Range;\n \n use self::Condition::*;\n-use crate::clean::{self, DocFragmentKind, GetDefId, Item};\n+use crate::clean::{self, DocFragmentKind};\n use crate::core::DocContext;\n-use crate::fold::{DocFolder, StripItem};\n+\n+mod stripper;\n+pub use stripper::*;\n \n mod collapse_docs;\n pub use self::collapse_docs::COLLAPSE_DOCS;\n@@ -149,171 +148,6 @@ pub fn find_pass(pass_name: &str) -> Option<Pass> {\n     PASSES.iter().find(|p| p.name == pass_name).copied()\n }\n \n-struct Stripper<'a> {\n-    retained: &'a mut DefIdSet,\n-    access_levels: &'a AccessLevels<DefId>,\n-    update_retained: bool,\n-}\n-\n-impl<'a> DocFolder for Stripper<'a> {\n-    fn fold_item(&mut self, i: Item) -> Option<Item> {\n-        match i.inner {\n-            clean::StrippedItem(..) => {\n-                // We need to recurse into stripped modules to strip things\n-                // like impl methods but when doing so we must not add any\n-                // items to the `retained` set.\n-                debug!(\"Stripper: recursing into stripped {:?} {:?}\", i.type_(), i.name);\n-                let old = mem::replace(&mut self.update_retained, false);\n-                let ret = self.fold_item_recur(i);\n-                self.update_retained = old;\n-                return ret;\n-            }\n-            // These items can all get re-exported\n-            clean::OpaqueTyItem(..)\n-            | clean::TypedefItem(..)\n-            | clean::StaticItem(..)\n-            | clean::StructItem(..)\n-            | clean::EnumItem(..)\n-            | clean::TraitItem(..)\n-            | clean::FunctionItem(..)\n-            | clean::VariantItem(..)\n-            | clean::MethodItem(..)\n-            | clean::ForeignFunctionItem(..)\n-            | clean::ForeignStaticItem(..)\n-            | clean::ConstantItem(..)\n-            | clean::UnionItem(..)\n-            | clean::AssocConstItem(..)\n-            | clean::TraitAliasItem(..)\n-            | clean::ForeignTypeItem => {\n-                if i.def_id.is_local() {\n-                    if !self.access_levels.is_exported(i.def_id) {\n-                        debug!(\"Stripper: stripping {:?} {:?}\", i.type_(), i.name);\n-                        return None;\n-                    }\n-                }\n-            }\n-\n-            clean::StructFieldItem(..) => {\n-                if i.visibility != clean::Public {\n-                    return StripItem(i).strip();\n-                }\n-            }\n-\n-            clean::ModuleItem(..) => {\n-                if i.def_id.is_local() && i.visibility != clean::Public {\n-                    debug!(\"Stripper: stripping module {:?}\", i.name);\n-                    let old = mem::replace(&mut self.update_retained, false);\n-                    let ret = StripItem(self.fold_item_recur(i).unwrap()).strip();\n-                    self.update_retained = old;\n-                    return ret;\n-                }\n-            }\n-\n-            // handled in the `strip-priv-imports` pass\n-            clean::ExternCrateItem(..) | clean::ImportItem(..) => {}\n-\n-            clean::ImplItem(..) => {}\n-\n-            // tymethods/macros have no control over privacy\n-            clean::MacroItem(..) | clean::TyMethodItem(..) => {}\n-\n-            // Proc-macros are always public\n-            clean::ProcMacroItem(..) => {}\n-\n-            // Primitives are never stripped\n-            clean::PrimitiveItem(..) => {}\n-\n-            // Associated types are never stripped\n-            clean::AssocTypeItem(..) => {}\n-\n-            // Keywords are never stripped\n-            clean::KeywordItem(..) => {}\n-        }\n-\n-        let fastreturn = match i.inner {\n-            // nothing left to do for traits (don't want to filter their\n-            // methods out, visibility controlled by the trait)\n-            clean::TraitItem(..) => true,\n-\n-            // implementations of traits are always public.\n-            clean::ImplItem(ref imp) if imp.trait_.is_some() => true,\n-            // Struct variant fields have inherited visibility\n-            clean::VariantItem(clean::Variant { kind: clean::VariantKind::Struct(..) }) => true,\n-            _ => false,\n-        };\n-\n-        let i = if fastreturn {\n-            if self.update_retained {\n-                self.retained.insert(i.def_id);\n-            }\n-            return Some(i);\n-        } else {\n-            self.fold_item_recur(i)\n-        };\n-\n-        if let Some(ref i) = i {\n-            if self.update_retained {\n-                self.retained.insert(i.def_id);\n-            }\n-        }\n-        i\n-    }\n-}\n-\n-// This stripper discards all impls which reference stripped items\n-struct ImplStripper<'a> {\n-    retained: &'a DefIdSet,\n-}\n-\n-impl<'a> DocFolder for ImplStripper<'a> {\n-    fn fold_item(&mut self, i: Item) -> Option<Item> {\n-        if let clean::ImplItem(ref imp) = i.inner {\n-            // emptied none trait impls can be stripped\n-            if imp.trait_.is_none() && imp.items.is_empty() {\n-                return None;\n-            }\n-            if let Some(did) = imp.for_.def_id() {\n-                if did.is_local() && !imp.for_.is_generic() && !self.retained.contains(&did) {\n-                    debug!(\"ImplStripper: impl item for stripped type; removing\");\n-                    return None;\n-                }\n-            }\n-            if let Some(did) = imp.trait_.def_id() {\n-                if did.is_local() && !self.retained.contains(&did) {\n-                    debug!(\"ImplStripper: impl item for stripped trait; removing\");\n-                    return None;\n-                }\n-            }\n-            if let Some(generics) = imp.trait_.as_ref().and_then(|t| t.generics()) {\n-                for typaram in generics {\n-                    if let Some(did) = typaram.def_id() {\n-                        if did.is_local() && !self.retained.contains(&did) {\n-                            debug!(\n-                                \"ImplStripper: stripped item in trait's generics; removing impl\"\n-                            );\n-                            return None;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        self.fold_item_recur(i)\n-    }\n-}\n-\n-// This stripper discards all private import statements (`use`, `extern crate`)\n-struct ImportStripper;\n-impl DocFolder for ImportStripper {\n-    fn fold_item(&mut self, i: Item) -> Option<Item> {\n-        match i.inner {\n-            clean::ExternCrateItem(..) | clean::ImportItem(..) if i.visibility != clean::Public => {\n-                None\n-            }\n-            _ => self.fold_item_recur(i),\n-        }\n-    }\n-}\n-\n /// Returns a span encompassing all the given attributes.\n crate fn span_of_attrs(attrs: &clean::Attributes) -> Option<Span> {\n     if attrs.doc_strings.is_empty() {"}, {"sha": "9b4f62235f5e8c3457e12a31f62f76077409c936", "filename": "src/librustdoc/passes/stripper.rs", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/7beeb07c1e3c7d022373648ac54937dbebb2ed43/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7beeb07c1e3c7d022373648ac54937dbebb2ed43/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=7beeb07c1e3c7d022373648ac54937dbebb2ed43", "patch": "@@ -0,0 +1,172 @@\n+use rustc_hir::def_id::{DefId, DefIdSet};\n+use rustc_middle::middle::privacy::AccessLevels;\n+use std::mem;\n+\n+use crate::clean::{self, GetDefId, Item};\n+use crate::fold::{DocFolder, StripItem};\n+\n+pub struct Stripper<'a> {\n+    pub retained: &'a mut DefIdSet,\n+    pub access_levels: &'a AccessLevels<DefId>,\n+    pub update_retained: bool,\n+}\n+\n+impl<'a> DocFolder for Stripper<'a> {\n+    fn fold_item(&mut self, i: Item) -> Option<Item> {\n+        match i.inner {\n+            clean::StrippedItem(..) => {\n+                // We need to recurse into stripped modules to strip things\n+                // like impl methods but when doing so we must not add any\n+                // items to the `retained` set.\n+                debug!(\"Stripper: recursing into stripped {:?} {:?}\", i.type_(), i.name);\n+                let old = mem::replace(&mut self.update_retained, false);\n+                let ret = self.fold_item_recur(i);\n+                self.update_retained = old;\n+                return ret;\n+            }\n+            // These items can all get re-exported\n+            clean::OpaqueTyItem(..)\n+            | clean::TypedefItem(..)\n+            | clean::StaticItem(..)\n+            | clean::StructItem(..)\n+            | clean::EnumItem(..)\n+            | clean::TraitItem(..)\n+            | clean::FunctionItem(..)\n+            | clean::VariantItem(..)\n+            | clean::MethodItem(..)\n+            | clean::ForeignFunctionItem(..)\n+            | clean::ForeignStaticItem(..)\n+            | clean::ConstantItem(..)\n+            | clean::UnionItem(..)\n+            | clean::AssocConstItem(..)\n+            | clean::TraitAliasItem(..)\n+            | clean::ForeignTypeItem => {\n+                if i.def_id.is_local() {\n+                    if !self.access_levels.is_exported(i.def_id) {\n+                        debug!(\"Stripper: stripping {:?} {:?}\", i.type_(), i.name);\n+                        return None;\n+                    }\n+                }\n+            }\n+\n+            clean::StructFieldItem(..) => {\n+                if i.visibility != clean::Public {\n+                    return StripItem(i).strip();\n+                }\n+            }\n+\n+            clean::ModuleItem(..) => {\n+                if i.def_id.is_local() && i.visibility != clean::Public {\n+                    debug!(\"Stripper: stripping module {:?}\", i.name);\n+                    let old = mem::replace(&mut self.update_retained, false);\n+                    let ret = StripItem(self.fold_item_recur(i).unwrap()).strip();\n+                    self.update_retained = old;\n+                    return ret;\n+                }\n+            }\n+\n+            // handled in the `strip-priv-imports` pass\n+            clean::ExternCrateItem(..) | clean::ImportItem(..) => {}\n+\n+            clean::ImplItem(..) => {}\n+\n+            // tymethods/macros have no control over privacy\n+            clean::MacroItem(..) | clean::TyMethodItem(..) => {}\n+\n+            // Proc-macros are always public\n+            clean::ProcMacroItem(..) => {}\n+\n+            // Primitives are never stripped\n+            clean::PrimitiveItem(..) => {}\n+\n+            // Associated types are never stripped\n+            clean::AssocTypeItem(..) => {}\n+\n+            // Keywords are never stripped\n+            clean::KeywordItem(..) => {}\n+        }\n+\n+        let fastreturn = match i.inner {\n+            // nothing left to do for traits (don't want to filter their\n+            // methods out, visibility controlled by the trait)\n+            clean::TraitItem(..) => true,\n+\n+            // implementations of traits are always public.\n+            clean::ImplItem(ref imp) if imp.trait_.is_some() => true,\n+            // Struct variant fields have inherited visibility\n+            clean::VariantItem(clean::Variant { kind: clean::VariantKind::Struct(..) }) => true,\n+            _ => false,\n+        };\n+\n+        let i = if fastreturn {\n+            if self.update_retained {\n+                self.retained.insert(i.def_id);\n+            }\n+            return Some(i);\n+        } else {\n+            self.fold_item_recur(i)\n+        };\n+\n+        if let Some(ref i) = i {\n+            if self.update_retained {\n+                self.retained.insert(i.def_id);\n+            }\n+        }\n+        i\n+    }\n+}\n+\n+/// This stripper discards all impls which reference stripped items\n+pub struct ImplStripper<'a> {\n+    pub retained: &'a DefIdSet,\n+}\n+\n+impl<'a> DocFolder for ImplStripper<'a> {\n+    fn fold_item(&mut self, i: Item) -> Option<Item> {\n+        if let clean::ImplItem(ref imp) = i.inner {\n+            // emptied none trait impls can be stripped\n+            if imp.trait_.is_none() && imp.items.is_empty() {\n+                return None;\n+            }\n+            if let Some(did) = imp.for_.def_id() {\n+                if did.is_local() && !imp.for_.is_generic() && !self.retained.contains(&did) {\n+                    debug!(\"ImplStripper: impl item for stripped type; removing\");\n+                    return None;\n+                }\n+            }\n+            if let Some(did) = imp.trait_.def_id() {\n+                if did.is_local() && !self.retained.contains(&did) {\n+                    debug!(\"ImplStripper: impl item for stripped trait; removing\");\n+                    return None;\n+                }\n+            }\n+            if let Some(generics) = imp.trait_.as_ref().and_then(|t| t.generics()) {\n+                for typaram in generics {\n+                    if let Some(did) = typaram.def_id() {\n+                        if did.is_local() && !self.retained.contains(&did) {\n+                            debug!(\n+                                \"ImplStripper: stripped item in trait's generics; removing impl\"\n+                            );\n+                            return None;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        self.fold_item_recur(i)\n+    }\n+}\n+\n+/// This stripper discards all private import statements (`use`, `extern crate`)\n+pub struct ImportStripper;\n+\n+impl DocFolder for ImportStripper {\n+    fn fold_item(&mut self, i: Item) -> Option<Item> {\n+        match i.inner {\n+            clean::ExternCrateItem(..) | clean::ImportItem(..) if i.visibility != clean::Public => {\n+                None\n+            }\n+            _ => self.fold_item_recur(i),\n+        }\n+    }\n+}"}]}