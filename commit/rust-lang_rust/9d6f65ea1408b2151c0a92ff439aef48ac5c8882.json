{"sha": "9d6f65ea1408b2151c0a92ff439aef48ac5c8882", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNmY2NWVhMTQwOGIyMTUxYzBhOTJmZjQzOWFlZjQ4YWM1Yzg4ODI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-25T12:17:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-25T15:29:09Z"}, "message": "Implement line debuginfo for AArch64", "tree": {"sha": "a46e753ec974bef067f8c97d600b24f9e6127fe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a46e753ec974bef067f8c97d600b24f9e6127fe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d6f65ea1408b2151c0a92ff439aef48ac5c8882", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6f65ea1408b2151c0a92ff439aef48ac5c8882", "html_url": "https://github.com/rust-lang/rust/commit/9d6f65ea1408b2151c0a92ff439aef48ac5c8882", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d6f65ea1408b2151c0a92ff439aef48ac5c8882/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6387df14dfe09116844df80cf16e85de9ee753ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/6387df14dfe09116844df80cf16e85de9ee753ef", "html_url": "https://github.com/rust-lang/rust/commit/6387df14dfe09116844df80cf16e85de9ee753ef"}], "stats": {"total": 77, "additions": 52, "deletions": 25}, "files": [{"sha": "0c8c10c15e20d617686a50d3fee003d99e0e5dc0", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 48, "deletions": 21, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/9d6f65ea1408b2151c0a92ff439aef48ac5c8882/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6f65ea1408b2151c0a92ff439aef48ac5c8882/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=9d6f65ea1408b2151c0a92ff439aef48ac5c8882", "patch": "@@ -6,6 +6,7 @@ use crate::prelude::*;\n use rustc_span::{FileName, SourceFile, SourceFileAndLine, Pos, SourceFileHash, SourceFileHashAlgorithm};\n \n use cranelift_codegen::binemit::CodeOffset;\n+use cranelift_codegen::machinst::MachSrcLoc;\n \n use gimli::write::{\n     Address, AttributeValue, FileId, LineProgram, LineString, FileInfo, LineStringTable, UnitEntryId,\n@@ -128,18 +129,8 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         source_info_set: &indexmap::IndexSet<SourceInfo>,\n     ) -> CodeOffset {\n         let tcx = self.debug_context.tcx;\n-\n         let line_program = &mut self.debug_context.dwarf.unit.line_program;\n-\n-        line_program.begin_sequence(Some(Address::Symbol {\n-            symbol: self.symbol,\n-            addend: 0,\n-        }));\n-\n-        let encinfo = isa.encoding_info();\n         let func = &context.func;\n-        let mut blocks = func.layout.blocks().collect::<Vec<_>>();\n-        blocks.sort_by_key(|block| func.offsets[*block]); // Ensure inst offsets always increase\n \n         let line_strings = &mut self.debug_context.dwarf.line_strings;\n         let function_span = self.mir.span;\n@@ -197,22 +188,58 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n             line_program.generate_row();\n         };\n \n-        let mut end = 0;\n-        for block in blocks {\n-            for (offset, inst, size) in func.inst_offsets(block, &encinfo) {\n-                let srcloc = func.srclocs[inst];\n-                line_program.row().address_offset = offset as u64;\n-                if !srcloc.is_default() {\n-                    let source_info = *source_info_set.get_index(srcloc.bits() as usize).unwrap();\n+        line_program.begin_sequence(Some(Address::Symbol {\n+            symbol: self.symbol,\n+            addend: 0,\n+        }));\n+\n+        let mut func_end = 0;\n+\n+        if let Some(ref mcr) = &context.mach_compile_result {\n+            for &MachSrcLoc { start, end, loc } in mcr.sections.get_srclocs_sorted() {\n+                // FIXME get_srclocs_sorted omits default srclocs\n+                if func_end < start {\n+                    line_program.row().address_offset = func_end as u64;\n+                    create_row_for_span(line_program, self.mir.span);\n+                }\n+                line_program.row().address_offset = start as u64;\n+                if !loc.is_default() {\n+                    let source_info = *source_info_set.get_index(loc.bits() as usize).unwrap();\n                     create_row_for_span(line_program, source_info.span);\n                 } else {\n                     create_row_for_span(line_program, self.mir.span);\n                 }\n-                end = offset + size;\n+                func_end = end;\n+            }\n+            // FIXME get_srclocs_sorted omits default srclocs\n+            if func_end < mcr.sections.total_size() {\n+                line_program.row().address_offset = func_end as u64;\n+                create_row_for_span(line_program, self.mir.span);\n+                func_end = mcr.sections.total_size();\n+            }\n+        } else {\n+            let encinfo = isa.encoding_info();\n+            let mut blocks = func.layout.blocks().collect::<Vec<_>>();\n+            blocks.sort_by_key(|block| func.offsets[*block]); // Ensure inst offsets always increase\n+\n+            for block in blocks {\n+                for (offset, inst, size) in func.inst_offsets(block, &encinfo) {\n+                    let srcloc = func.srclocs[inst];\n+                    line_program.row().address_offset = offset as u64;\n+                    if !srcloc.is_default() {\n+                        let source_info = *source_info_set.get_index(srcloc.bits() as usize).unwrap();\n+                        create_row_for_span(line_program, source_info.span);\n+                    } else {\n+                        create_row_for_span(line_program, self.mir.span);\n+                    }\n+                    func_end = offset + size;\n+                }\n             }\n         }\n \n-        line_program.end_sequence(end as u64);\n+        assert_ne!(func_end, 0);\n+\n+        line_program.end_sequence(func_end as u64);\n \n         let entry = self.debug_context.dwarf.unit.get_mut(self.entry_id);\n         entry.set(\n@@ -222,11 +249,11 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                 addend: 0,\n             }),\n         );\n-        entry.set(gimli::DW_AT_high_pc, AttributeValue::Udata(end as u64));\n+        entry.set(gimli::DW_AT_high_pc, AttributeValue::Udata(func_end as u64));\n \n         self.debug_context\n             .emit_location(self.entry_id, self.mir.span);\n \n-        end\n+        func_end\n     }\n }"}, {"sha": "fb0a8b006c1b4d6b2ccbddf6b65d3a58100a931c", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d6f65ea1408b2151c0a92ff439aef48ac5c8882/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6f65ea1408b2151c0a92ff439aef48ac5c8882/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=9d6f65ea1408b2151c0a92ff439aef48ac5c8882", "patch": "@@ -312,10 +312,6 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         source_info_set: &indexmap::IndexSet<SourceInfo>,\n         local_map: FxHashMap<mir::Local, CPlace<'tcx>>,\n     ) {\n-        if isa.get_mach_backend().is_some() {\n-            return; // The AArch64 backend doesn't support line debuginfo yet.\n-        }\n-\n         let end = self.create_debug_lines(context, isa, source_info_set);\n \n         self.debug_context\n@@ -329,6 +325,10 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                 length: u64::from(end),\n             });\n \n+        if isa.get_mach_backend().is_some() {\n+            return; // Not yet implemented for the AArch64 backend.\n+        }\n+\n         let func_entry = self.debug_context.dwarf.unit.get_mut(self.entry_id);\n         // Gdb requires both DW_AT_low_pc and DW_AT_high_pc. Otherwise the DW_TAG_subprogram is skipped.\n         func_entry.set(gimli::DW_AT_low_pc, AttributeValue::Address(Address::Symbol {"}]}