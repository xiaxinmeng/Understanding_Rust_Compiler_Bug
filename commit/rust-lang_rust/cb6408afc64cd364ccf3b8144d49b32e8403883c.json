{"sha": "cb6408afc64cd364ccf3b8144d49b32e8403883c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNjQwOGFmYzY0Y2QzNjRjY2YzYjgxNDRkNDliMzJlODQwMzg4M2M=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-28T02:24:09Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-28T02:24:09Z"}, "message": "Fix rebase", "tree": {"sha": "96ce094fd2b4058862aa645cc9f0282780960fe9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96ce094fd2b4058862aa645cc9f0282780960fe9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb6408afc64cd364ccf3b8144d49b32e8403883c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6408afc64cd364ccf3b8144d49b32e8403883c", "html_url": "https://github.com/rust-lang/rust/commit/cb6408afc64cd364ccf3b8144d49b32e8403883c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb6408afc64cd364ccf3b8144d49b32e8403883c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c52dbbc64354942c244c9f497e73d2e0814deaf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c52dbbc64354942c244c9f497e73d2e0814deaf8", "html_url": "https://github.com/rust-lang/rust/commit/c52dbbc64354942c244c9f497e73d2e0814deaf8"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "8180dd5ef34f78a7172fb14daab189dbe8227851", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb6408afc64cd364ccf3b8144d49b32e8403883c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6408afc64cd364ccf3b8144d49b32e8403883c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=cb6408afc64cd364ccf3b8144d49b32e8403883c", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         }\n         let mut visitor = AssocTypeFinder(FxIndexSet::default());\n         trait_fn_sig.output().visit_with(&mut visitor);\n-        if let Some(id) = tcx.hir().as_local_hir_id(trait_def_id) {\n+        if let Some(id) = trait_def_id.as_local().map(|id| tcx.hir().as_local_hir_id(id)) {\n             let parent_id = tcx.hir().get_parent_item(id);\n             let trait_item = tcx.hir().expect_item(parent_id);\n             if let ItemKind::Trait(_, _, generics, _, _) = &trait_item.kind {\n@@ -103,9 +103,10 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let assoc_item = self.tcx().associated_item(trait_def_id);\n         let mut visitor = TypeParamSpanVisitor { tcx: self.tcx(), types: vec![] };\n         match assoc_item.kind {\n-            ty::AssocKind::Method => {\n+            ty::AssocKind::Fn => {\n                 let hir = self.tcx().hir();\n-                if let Some(hir_id) = hir.as_local_hir_id(assoc_item.def_id) {\n+                if let Some(hir_id) = assoc_item.def_id.as_local().map(|id| hir.as_local_hir_id(id))\n+                {\n                     if let Some(decl) = hir.fn_decl_by_hir_id(hir_id) {\n                         visitor.visit_fn_decl(decl);\n                     }"}, {"sha": "9ba5bc330ea936f9831f4730b2953e6b67b9e4b5", "filename": "src/test/ui/error-codes/E0490.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6408afc64cd364ccf3b8144d49b32e8403883c/src%2Ftest%2Fui%2Ferror-codes%2FE0490.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6408afc64cd364ccf3b8144d49b32e8403883c/src%2Ftest%2Fui%2Ferror-codes%2FE0490.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0490.stderr?ref=cb6408afc64cd364ccf3b8144d49b32e8403883c", "patch": "@@ -58,8 +58,8 @@ note: ...so that the expression is assignable\n    |\n LL |     let x: &'a _ = &y;\n    |                    ^^\n-   = note: expected  `&'a &()`\n-              found  `&'a &'b ()`\n+   = note: expected `&'a &()`\n+              found `&'a &'b ()`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 1:6...\n   --> $DIR/E0490.rs:1:6\n    |"}, {"sha": "908a81bedb0ca6d2a812241ec28ca4b7b9d586a6", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6408afc64cd364ccf3b8144d49b32e8403883c/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6408afc64cd364ccf3b8144d49b32e8403883c/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr?ref=cb6408afc64cd364ccf3b8144d49b32e8403883c", "patch": "@@ -2,10 +2,10 @@ error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/mismatched_trait_impl.rs:9:5\n    |\n LL |     fn foo(&self, x: &'a u32, y: &u32) -> &'a u32;\n-   |     ---------------------------------------------- expected fn(&i32, &'a u32, &u32) -> &'a u32\n+   |     ---------------------------------------------- expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n ...\n LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &u32, &u32) -> &u32\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&i32, &u32, &u32) -> &u32`\n    |\n    = note: expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n               found `fn(&i32, &u32, &u32) -> &u32`"}, {"sha": "3bcc50ded84256c3aab89ed97229ecb66b51e59b", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6408afc64cd364ccf3b8144d49b32e8403883c/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6408afc64cd364ccf3b8144d49b32e8403883c/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=cb6408afc64cd364ccf3b8144d49b32e8403883c", "patch": "@@ -8,8 +8,6 @@ LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&Foo, (T,))`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_mut` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:11:3\n@@ -21,8 +19,6 @@ LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&mut Foo, (T,))`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_once` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:18:3"}]}