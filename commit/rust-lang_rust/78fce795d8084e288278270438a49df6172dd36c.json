{"sha": "78fce795d8084e288278270438a49df6172dd36c", "node_id": "C_kwDOAAsO6NoAKDc4ZmNlNzk1ZDgwODRlMjg4Mjc4MjcwNDM4YTQ5ZGY2MTcyZGQzNmM", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-11-11T00:32:30Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2023-01-09T22:07:25Z"}, "message": "refactor: refactor to derive for some lints.", "tree": {"sha": "9907484be2d716443081759c39572c44c1bde096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9907484be2d716443081759c39572c44c1bde096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78fce795d8084e288278270438a49df6172dd36c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78fce795d8084e288278270438a49df6172dd36c", "html_url": "https://github.com/rust-lang/rust/commit/78fce795d8084e288278270438a49df6172dd36c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78fce795d8084e288278270438a49df6172dd36c/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca7df9a2a9c4b1f751e91040fe659f682c976919", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca7df9a2a9c4b1f751e91040fe659f682c976919", "html_url": "https://github.com/rust-lang/rust/commit/ca7df9a2a9c4b1f751e91040fe659f682c976919"}], "stats": {"total": 239, "additions": 99, "deletions": 140}, "files": [{"sha": "1518adf8e4e2436291d77ee244305deb8de3bbe0", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78fce795d8084e288278270438a49df6172dd36c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/78fce795d8084e288278270438a49df6172dd36c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=78fce795d8084e288278270438a49df6172dd36c", "patch": "@@ -15,6 +15,7 @@ lint_enum_intrinsics_mem_variant =\n \n lint_expectation = this lint expectation is unfulfilled\n     .note = the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+    .rationale = {$rationale}\n \n lint_for_loops_over_fallibles =\n     for loop over {$article} `{$ty}`. This is more readably written as an `if let` statement\n@@ -39,7 +40,8 @@ lint_deprecated_lint_name =\n     lint name `{$name}` is deprecated and may not have an effect in the future.\n     .suggestion = change it to\n \n-lint_renamed_or_removed_lint_suggestion = use the new name\n+lint_renamed_or_removed_lint = {$msg}\n+    .suggestion = use the new name\n \n lint_unknown_lint =\n     unknown lint: `{$name}`"}, {"sha": "1dae563577a01ee7df4259e75476f855fb51b97d", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/78fce795d8084e288278270438a49df6172dd36c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fce795d8084e288278270438a49df6172dd36c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=78fce795d8084e288278270438a49df6172dd36c", "patch": "@@ -26,7 +26,8 @@ use crate::{\n         BuiltinAnonymousParams, BuiltinBoxPointers, BuiltinConstNoMangle,\n         BuiltinDeprecatedAttrUsed, BuiltinDerefNullptr, BuiltinEllipsisInclusiveRangePatternsLint,\n         BuiltinExplicitOutlives, BuiltinExplicitOutlivesSuggestion, BuiltinIncompleteFeatures,\n-        BuiltinKeywordIdents, BuiltinMissingCopyImpl, BuiltinMissingDebugImpl, BuiltinMissingDoc,\n+        BuiltinIncompleteFeaturesHelp, BuiltinIncompleteFeaturesNote, BuiltinKeywordIdents,\n+        BuiltinMissingCopyImpl, BuiltinMissingDebugImpl, BuiltinMissingDoc,\n         BuiltinMutablesTransmutes, BuiltinNoMangleGeneric, BuiltinNonShorthandFieldPatterns,\n         BuiltinSpecialModuleNameUsed, BuiltinTrivialBounds, BuiltinUnexpectedCliConfigName,\n         BuiltinUnexpectedCliConfigValue, BuiltinUnnameableTestItems, BuiltinUnreachablePub,\n@@ -2379,14 +2380,17 @@ impl EarlyLintPass for IncompleteFeatures {\n             .chain(features.declared_lib_features.iter().map(|(name, span)| (name, span)))\n             .filter(|(&name, _)| features.incomplete(name))\n             .for_each(|(&name, &span)| {\n+                let note = rustc_feature::find_feature_issue(name, GateIssue::Language)\n+                    .map(|n| BuiltinIncompleteFeaturesNote { n });\n+                let help = if HAS_MIN_FEATURES.contains(&name) {\n+                    Some(BuiltinIncompleteFeaturesHelp)\n+                } else {\n+                    None\n+                };\n                 cx.emit_spanned_lint(\n                     INCOMPLETE_FEATURES,\n                     span,\n-                    BuiltinIncompleteFeatures {\n-                        name,\n-                        note: rustc_feature::find_feature_issue(name, GateIssue::Language),\n-                        help: HAS_MIN_FEATURES.contains(&name).then_some(()),\n-                    },\n+                    BuiltinIncompleteFeatures { name, note, help },\n                 );\n             });\n     }"}, {"sha": "8985ccee0cdf434d0915de0afd2feda55f752a47", "filename": "compiler/rustc_lint/src/expect.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78fce795d8084e288278270438a49df6172dd36c/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fce795d8084e288278270438a49df6172dd36c/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs?ref=78fce795d8084e288278270438a49df6172dd36c", "patch": "@@ -1,6 +1,6 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n-use crate::lints::Expectation;\n+use crate::lints::{Expectation, ExpectationNote};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::UNFULFILLED_LINT_EXPECTATIONS;\n@@ -29,11 +29,13 @@ fn check_expectations(tcx: TyCtxt<'_>, tool_filter: Option<Symbol>) {\n             if !fulfilled_expectations.contains(&id)\n                 && tool_filter.map_or(true, |filter| expectation.lint_tool == Some(filter))\n             {\n+                let rationale = expectation.reason.map(|rationale| ExpectationNote { rationale });\n+                let note = expectation.is_unfulfilled_lint_expectations.then_some(());\n                 tcx.emit_spanned_lint(\n                     UNFULFILLED_LINT_EXPECTATIONS,\n                     *hir_id,\n                     expectation.emission_span,\n-                    Expectation { expectation },\n+                    Expectation { rationale, note },\n                 );\n             }\n         } else {"}, {"sha": "500b1f36558d75e43177c690c1d57b4292fece1a", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/78fce795d8084e288278270438a49df6172dd36c/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fce795d8084e288278270438a49df6172dd36c/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=78fce795d8084e288278270438a49df6172dd36c", "patch": "@@ -4,7 +4,7 @@ use crate::context::{CheckLintNameResult, LintStore};\n use crate::late::unerased_lint_store;\n use crate::lints::{\n     DeprecatedLintName, IgnoredUnlessCrateSpecified, OverruledAtributeLint, RenamedOrRemovedLint,\n-    UnknownLint,\n+    RenamedOrRemovedLintSuggestion, UnknownLint, UnknownLintSuggestion,\n };\n use rustc_ast as ast;\n use rustc_ast_pretty::pprust;\n@@ -887,10 +887,15 @@ impl<'s, P: LintLevelsProvider> LintLevelsBuilder<'s, P> {\n                     _ if !self.warn_about_weird_lints => {}\n \n                     CheckLintNameResult::Warning(msg, renamed) => {\n+                        let suggestion =\n+                            renamed.as_ref().map(|replace| RenamedOrRemovedLintSuggestion {\n+                                suggestion: sp,\n+                                replace: replace.as_str(),\n+                            });\n                         self.emit_spanned_lint(\n                             RENAMED_AND_REMOVED_LINTS,\n                             sp.into(),\n-                            RenamedOrRemovedLint { msg, suggestion: sp, renamed },\n+                            RenamedOrRemovedLint { msg, suggestion },\n                         );\n                     }\n                     CheckLintNameResult::NoLint(suggestion) => {\n@@ -899,10 +904,12 @@ impl<'s, P: LintLevelsProvider> LintLevelsBuilder<'s, P> {\n                         } else {\n                             name.to_string()\n                         };\n+                        let suggestion = suggestion\n+                            .map(|replace| UnknownLintSuggestion { suggestion: sp, replace });\n                         self.emit_spanned_lint(\n                             UNKNOWN_LINTS,\n                             sp.into(),\n-                            UnknownLint { name, suggestion: sp, replace: suggestion },\n+                            UnknownLint { name, suggestion },\n                         );\n                     }\n                 }"}, {"sha": "faeb396ce8ca15db389dcee3b93aeaa6a6abc5ce", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 62, "deletions": 112, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/78fce795d8084e288278270438a49df6172dd36c/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fce795d8084e288278270438a49df6172dd36c/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=78fce795d8084e288278270438a49df6172dd36c", "patch": "@@ -3,10 +3,7 @@ use std::num::NonZeroU32;\n use rustc_errors::{fluent, AddToDiagnostic, Applicability, DecorateLint, DiagnosticMessage};\n use rustc_hir::def_id::DefId;\n use rustc_macros::{LintDiagnostic, Subdiagnostic};\n-use rustc_middle::{\n-    lint::LintExpectation,\n-    ty::{Predicate, Ty, TyCtxt},\n-};\n+use rustc_middle::ty::{Predicate, Ty, TyCtxt};\n use rustc_span::{edition::Edition, symbol::Ident, Span, Symbol};\n \n use crate::{errors::OverruledAttributeSub, LateContext};\n@@ -80,6 +77,7 @@ pub struct BuiltinMissingDebugImpl<'a> {\n     pub def_id: DefId,\n }\n \n+// Needed for def_path_str\n impl<'a> DecorateLint<'a, ()> for BuiltinMissingDebugImpl<'_> {\n     fn decorate_lint<'b>(\n         self,\n@@ -225,31 +223,24 @@ pub struct BuiltinExplicitOutlivesSuggestion {\n     pub applicability: Applicability,\n }\n \n+#[derive(LintDiagnostic)]\n+#[diag(lint_builtin_incomplete_features)]\n pub struct BuiltinIncompleteFeatures {\n     pub name: Symbol,\n-    pub note: Option<NonZeroU32>,\n-    pub help: Option<()>,\n+    #[subdiagnostic]\n+    pub note: Option<BuiltinIncompleteFeaturesNote>,\n+    #[subdiagnostic]\n+    pub help: Option<BuiltinIncompleteFeaturesHelp>,\n }\n \n-impl<'a> DecorateLint<'a, ()> for BuiltinIncompleteFeatures {\n-    fn decorate_lint<'b>(\n-        self,\n-        diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n-    ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n-        diag.set_arg(\"name\", self.name);\n-        if let Some(n) = self.note {\n-            diag.set_arg(\"n\", n);\n-            diag.note(fluent::note);\n-        }\n-        if let Some(_) = self.help {\n-            diag.help(fluent::help);\n-        }\n-        diag\n-    }\n+#[derive(Subdiagnostic)]\n+#[help(help)]\n+pub struct BuiltinIncompleteFeaturesHelp;\n \n-    fn msg(&self) -> DiagnosticMessage {\n-        fluent::lint_builtin_incomplete_features\n-    }\n+#[derive(Subdiagnostic)]\n+#[note(note)]\n+pub struct BuiltinIncompleteFeaturesNote {\n+    pub n: NonZeroU32,\n }\n \n // FIXME: migrate \"the type `{}` does not permit {}\"\n@@ -308,29 +299,19 @@ pub struct EnumIntrinsicsMemVariant<'a> {\n }\n \n // expect.rs\n-pub struct Expectation<'a> {\n-    pub expectation: &'a LintExpectation,\n+#[derive(LintDiagnostic)]\n+#[diag(lint_expectation)]\n+pub struct Expectation {\n+    #[subdiagnostic]\n+    pub rationale: Option<ExpectationNote>,\n+    #[note]\n+    pub note: Option<()>,\n }\n \n-impl<'a> DecorateLint<'a, ()> for Expectation<'_> {\n-    fn decorate_lint<'b>(\n-        self,\n-        diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n-    ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n-        if let Some(rationale) = self.expectation.reason {\n-            diag.note(rationale.as_str());\n-        }\n-\n-        if self.expectation.is_unfulfilled_lint_expectations {\n-            diag.note(fluent::note);\n-        }\n-\n-        diag\n-    }\n-\n-    fn msg(&self) -> DiagnosticMessage {\n-        fluent::lint_expectation\n-    }\n+#[derive(Subdiagnostic)]\n+#[note(rationale)]\n+pub struct ExpectationNote {\n+    pub rationale: Symbol,\n }\n \n // for_loops_over_fallibles.rs\n@@ -511,59 +492,37 @@ pub struct DeprecatedLintName<'a> {\n     pub replace: &'a str,\n }\n \n+// FIXME: Non-translatable msg\n+#[derive(LintDiagnostic)]\n+#[diag(lint_renamed_or_removed_lint)]\n pub struct RenamedOrRemovedLint<'a> {\n     pub msg: &'a str,\n-    pub suggestion: Span,\n-    pub renamed: &'a Option<String>,\n+    #[subdiagnostic]\n+    pub suggestion: Option<RenamedOrRemovedLintSuggestion<'a>>,\n }\n \n-impl<'a> DecorateLint<'a, ()> for RenamedOrRemovedLint<'_> {\n-    fn decorate_lint<'b>(\n-        self,\n-        diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n-    ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n-        if let Some(new_name) = self.renamed {\n-            diag.span_suggestion(\n-                self.suggestion,\n-                fluent::lint_renamed_or_removed_lint_suggestion,\n-                new_name,\n-                Applicability::MachineApplicable,\n-            );\n-        };\n-        diag\n-    }\n-\n-    fn msg(&self) -> rustc_errors::DiagnosticMessage {\n-        rustc_errors::DiagnosticMessage::Str(self.msg.to_string())\n-    }\n+#[derive(Subdiagnostic)]\n+#[suggestion(suggestion, code = \"{replace}\", applicability = \"machine-applicable\")]\n+pub struct RenamedOrRemovedLintSuggestion<'a> {\n+    #[primary_span]\n+    pub suggestion: Span,\n+    pub replace: &'a str,\n }\n \n-pub struct UnknownLint<'a> {\n+#[derive(LintDiagnostic)]\n+#[diag(lint_unknown_lint)]\n+pub struct UnknownLint {\n     pub name: String,\n-    pub suggestion: Span,\n-    pub replace: &'a Option<Symbol>,\n+    #[subdiagnostic]\n+    pub suggestion: Option<UnknownLintSuggestion>,\n }\n \n-impl<'a> DecorateLint<'a, ()> for UnknownLint<'_> {\n-    fn decorate_lint<'b>(\n-        self,\n-        diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n-    ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n-        diag.set_arg(\"name\", self.name);\n-        if let Some(replace) = self.replace {\n-            diag.span_suggestion(\n-                self.suggestion,\n-                fluent::suggestion,\n-                replace,\n-                Applicability::MaybeIncorrect,\n-            );\n-        };\n-        diag\n-    }\n-\n-    fn msg(&self) -> rustc_errors::DiagnosticMessage {\n-        fluent::lint_unknown_lint\n-    }\n+#[derive(Subdiagnostic)]\n+#[suggestion(suggestion, code = \"{replace}\", applicability = \"maybe-incorrect\")]\n+pub struct UnknownLintSuggestion {\n+    #[primary_span]\n+    pub suggestion: Span,\n+    pub replace: Symbol,\n }\n \n #[derive(LintDiagnostic)]\n@@ -618,6 +577,7 @@ pub struct NonFmtPanicUnused {\n     pub suggestion: Option<Span>,\n }\n \n+// Used because of two suggestions based on one Option<Span>\n impl<'a> DecorateLint<'a, ()> for NonFmtPanicUnused {\n     fn decorate_lint<'b>(\n         self,\n@@ -803,6 +763,7 @@ pub struct DropTraitConstraintsDiag<'a> {\n     pub def_id: DefId,\n }\n \n+// Needed for def_path_str\n impl<'a> DecorateLint<'a, ()> for DropTraitConstraintsDiag<'_> {\n     fn decorate_lint<'b>(\n         self,\n@@ -822,6 +783,7 @@ pub struct DropGlue<'a> {\n     pub def_id: DefId,\n }\n \n+// Needed for def_path_str\n impl<'a> DecorateLint<'a, ()> for DropGlue<'_> {\n     fn decorate_lint<'b>(\n         self,\n@@ -902,35 +864,22 @@ pub enum OverflowingBinHexSub<'a> {\n     Help { suggestion_ty: &'a str },\n }\n \n+#[derive(LintDiagnostic)]\n+#[diag(lint_overflowing_int)]\n+#[note]\n pub struct OverflowingInt<'a> {\n     pub ty: &'a str,\n     pub lit: String,\n     pub min: i128,\n     pub max: u128,\n-    pub suggestion_ty: Option<&'a str>,\n+    #[subdiagnostic]\n+    pub help: Option<OverflowingIntHelp<'a>>,\n }\n \n-// FIXME: refactor with `Option<&'a str>` in macro\n-impl<'a> DecorateLint<'a, ()> for OverflowingInt<'_> {\n-    fn decorate_lint<'b>(\n-        self,\n-        diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n-    ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n-        diag.set_arg(\"ty\", self.ty);\n-        diag.set_arg(\"lit\", self.lit);\n-        diag.set_arg(\"min\", self.min);\n-        diag.set_arg(\"max\", self.max);\n-        diag.note(fluent::note);\n-        if let Some(suggestion_ty) = self.suggestion_ty {\n-            diag.set_arg(\"suggestion_ty\", suggestion_ty);\n-            diag.help(fluent::help);\n-        }\n-        diag\n-    }\n-\n-    fn msg(&self) -> rustc_errors::DiagnosticMessage {\n-        fluent::lint_overflowing_int\n-    }\n+#[derive(Subdiagnostic)]\n+#[help(help)]\n+pub struct OverflowingIntHelp<'a> {\n+    pub suggestion_ty: &'a str,\n }\n \n #[derive(LintDiagnostic)]\n@@ -972,6 +921,7 @@ pub struct ImproperCTypes<'a> {\n     pub span_note: Option<Span>,\n }\n \n+// Used because of the complexity of Option<DiagnosticMessage>, DiagnosticMessage, and Option<Span>\n impl<'a> DecorateLint<'a, ()> for ImproperCTypes<'_> {\n     fn decorate_lint<'b>(\n         self,\n@@ -1074,7 +1024,7 @@ pub struct UnusedDef<'a, 'b> {\n     pub note: Option<Symbol>,\n }\n \n-// FIXME: refactor with `Option<String>` in macro\n+// Needed because of def_path_str\n impl<'a> DecorateLint<'a, ()> for UnusedDef<'_, '_> {\n     fn decorate_lint<'b>(\n         self,"}, {"sha": "1300a2fe27aa3c8979dedcdd188866a91b436069", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/78fce795d8084e288278270438a49df6172dd36c/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fce795d8084e288278270438a49df6172dd36c/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=78fce795d8084e288278270438a49df6172dd36c", "patch": "@@ -3,7 +3,7 @@\n use crate::lints::{\n     AtomicOrderingFence, AtomicOrderingLoad, AtomicOrderingStore, ImproperCTypes,\n     InvalidAtomicOrderingDiag, OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign,\n-    OverflowingBinHexSub, OverflowingInt, OverflowingLiteral, OverflowingUInt,\n+    OverflowingBinHexSub, OverflowingInt, OverflowingIntHelp, OverflowingLiteral, OverflowingUInt,\n     RangeEndpointOutOfRange, UnusedComparisons, VariantSizeDifferencesDiag,\n };\n use crate::{LateContext, LateLintPass, LintContext};\n@@ -339,24 +339,18 @@ fn lint_int_literal<'tcx>(\n             return;\n         }\n \n+        let lit = cx\n+            .sess()\n+            .source_map()\n+            .span_to_snippet(lit.span)\n+            .expect(\"must get snippet from literal\");\n+        let help = get_type_suggestion(cx.typeck_results().node_type(e.hir_id), v, negative)\n+            .map(|suggestion_ty| OverflowingIntHelp { suggestion_ty });\n+\n         cx.emit_spanned_lint(\n             OVERFLOWING_LITERALS,\n             e.span,\n-            OverflowingInt {\n-                ty: t.name_str(),\n-                lit: cx\n-                    .sess()\n-                    .source_map()\n-                    .span_to_snippet(lit.span)\n-                    .expect(\"must get snippet from literal\"),\n-                min,\n-                max,\n-                suggestion_ty: get_type_suggestion(\n-                    cx.typeck_results().node_type(e.hir_id),\n-                    v,\n-                    negative,\n-                ),\n-            },\n+            OverflowingInt { ty: t.name_str(), lit, min, max, help },\n         );\n     }\n }"}]}