{"sha": "4ff674f94237a1a21c7a1c1f6801bf751de41cdf", "node_id": "C_kwDOAAsO6NoAKDRmZjY3NGY5NDIzN2ExYTIxYzdhMWMxZjY4MDFiZjc1MWRlNDFjZGY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-25T18:04:57Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-26T20:33:40Z"}, "message": "Intern CanonicalVarValues", "tree": {"sha": "de72cf3e1022543c914407de1caaa7ef750743d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de72cf3e1022543c914407de1caaa7ef750743d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ff674f94237a1a21c7a1c1f6801bf751de41cdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff674f94237a1a21c7a1c1f6801bf751de41cdf", "html_url": "https://github.com/rust-lang/rust/commit/4ff674f94237a1a21c7a1c1f6801bf751de41cdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ff674f94237a1a21c7a1c1f6801bf751de41cdf/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c62665e09c11eb1c9d8ea02df5b723364a0b8ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c62665e09c11eb1c9d8ea02df5b723364a0b8ba4", "html_url": "https://github.com/rust-lang/rust/commit/c62665e09c11eb1c9d8ea02df5b723364a0b8ba4"}], "stats": {"total": 154, "additions": 73, "deletions": 81}, "files": [{"sha": "f7e3e4a1cc09ee2583ecbce9e4c0c2269e3c8c5a", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ff674f94237a1a21c7a1c1f6801bf751de41cdf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff674f94237a1a21c7a1c1f6801bf751de41cdf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=4ff674f94237a1a21c7a1c1f6801bf751de41cdf", "patch": "@@ -26,7 +26,7 @@ use crate::infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin, TypeVari\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::GenericArg;\n-use rustc_middle::ty::{self, BoundVar, List};\n+use rustc_middle::ty::{self, List};\n use rustc_span::source_map::Span;\n \n pub use rustc_middle::infer::canonical::*;\n@@ -87,12 +87,13 @@ impl<'tcx> InferCtxt<'tcx> {\n         variables: &List<CanonicalVarInfo<'tcx>>,\n         universe_map: impl Fn(ty::UniverseIndex) -> ty::UniverseIndex,\n     ) -> CanonicalVarValues<'tcx> {\n-        let var_values: IndexVec<BoundVar, GenericArg<'tcx>> = variables\n-            .iter()\n-            .map(|info| self.instantiate_canonical_var(span, info, &universe_map))\n-            .collect();\n-\n-        CanonicalVarValues { var_values }\n+        CanonicalVarValues {\n+            var_values: self.tcx.mk_substs(\n+                variables\n+                    .iter()\n+                    .map(|info| self.instantiate_canonical_var(span, info, &universe_map)),\n+            ),\n+        }\n     }\n \n     /// Given the \"info\" about a canonical variable, creates a fresh"}, {"sha": "98272708c166645b0d67df33b6712ba84800d54d", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ff674f94237a1a21c7a1c1f6801bf751de41cdf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff674f94237a1a21c7a1c1f6801bf751de41cdf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=4ff674f94237a1a21c7a1c1f6801bf751de41cdf", "patch": "@@ -482,11 +482,8 @@ impl<'tcx> InferCtxt<'tcx> {\n         // given variable in the loop above, use that. Otherwise, use\n         // a fresh inference variable.\n         let result_subst = CanonicalVarValues {\n-            var_values: query_response\n-                .variables\n-                .iter()\n-                .enumerate()\n-                .map(|(index, info)| {\n+            var_values: self.tcx.mk_substs(query_response.variables.iter().enumerate().map(\n+                |(index, info)| {\n                     if info.is_existential() {\n                         match opt_values[BoundVar::new(index)] {\n                             Some(k) => k,\n@@ -499,8 +496,8 @@ impl<'tcx> InferCtxt<'tcx> {\n                             universe_map[u.as_usize()]\n                         })\n                     }\n-                })\n-                .collect(),\n+                },\n+            )),\n         };\n \n         let mut obligations = vec![];"}, {"sha": "e77f2d37b7dae8d5c6314c8f22092d28d05b95b1", "filename": "compiler/rustc_infer/src/infer/canonical/substitute.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ff674f94237a1a21c7a1c1f6801bf751de41cdf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff674f94237a1a21c7a1c1f6801bf751de41cdf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=4ff674f94237a1a21c7a1c1f6801bf751de41cdf", "patch": "@@ -72,16 +72,15 @@ where\n         value\n     } else {\n         let delegate = FnMutDelegate {\n-            regions: &mut |br: ty::BoundRegion| match var_values.var_values[br.var].unpack() {\n+            regions: &mut |br: ty::BoundRegion| match var_values[br.var].unpack() {\n                 GenericArgKind::Lifetime(l) => l,\n                 r => bug!(\"{:?} is a region but value is {:?}\", br, r),\n             },\n-            types: &mut |bound_ty: ty::BoundTy| match var_values.var_values[bound_ty.var].unpack() {\n+            types: &mut |bound_ty: ty::BoundTy| match var_values[bound_ty.var].unpack() {\n                 GenericArgKind::Type(ty) => ty,\n                 r => bug!(\"{:?} is a type but value is {:?}\", bound_ty, r),\n             },\n-            consts: &mut |bound_ct: ty::BoundVar, _| match var_values.var_values[bound_ct].unpack()\n-            {\n+            consts: &mut |bound_ct: ty::BoundVar, _| match var_values[bound_ct].unpack() {\n                 GenericArgKind::Const(ct) => ct,\n                 c => bug!(\"{:?} is a const but value is {:?}\", bound_ct, c),\n             },"}, {"sha": "2247090c38c4ac1fbb59ae4fe749ce02fc42cd72", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4ff674f94237a1a21c7a1c1f6801bf751de41cdf/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff674f94237a1a21c7a1c1f6801bf751de41cdf/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=4ff674f94237a1a21c7a1c1f6801bf751de41cdf", "patch": "@@ -25,10 +25,8 @@ use crate::infer::MemberConstraint;\n use crate::mir::ConstraintCategory;\n use crate::ty::subst::GenericArg;\n use crate::ty::{self, BoundVar, List, Region, Ty, TyCtxt};\n-use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use smallvec::SmallVec;\n-use std::iter;\n use std::ops::Index;\n \n /// A \"canonicalized\" type `V` is one where all free inference\n@@ -62,23 +60,23 @@ impl<'tcx> ty::TypeFoldable<'tcx> for CanonicalVarInfos<'tcx> {\n /// vectors with the original values that were replaced by canonical\n /// variables. You will need to supply it later to instantiate the\n /// canonicalized query response.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash, TyDecodable, TyEncodable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyDecodable, TyEncodable)]\n #[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct CanonicalVarValues<'tcx> {\n-    pub var_values: IndexVec<BoundVar, GenericArg<'tcx>>,\n+    pub var_values: ty::SubstsRef<'tcx>,\n }\n \n impl CanonicalVarValues<'_> {\n     pub fn is_identity(&self) -> bool {\n-        self.var_values.iter_enumerated().all(|(bv, arg)| match arg.unpack() {\n+        self.var_values.iter().enumerate().all(|(bv, arg)| match arg.unpack() {\n             ty::GenericArgKind::Lifetime(r) => {\n-                matches!(*r, ty::ReLateBound(ty::INNERMOST, br) if br.var == bv)\n+                matches!(*r, ty::ReLateBound(ty::INNERMOST, br) if br.var.as_usize() == bv)\n             }\n             ty::GenericArgKind::Type(ty) => {\n-                matches!(*ty.kind(), ty::Bound(ty::INNERMOST, bt) if bt.var == bv)\n+                matches!(*ty.kind(), ty::Bound(ty::INNERMOST, bt) if bt.var.as_usize() == bv)\n             }\n             ty::GenericArgKind::Const(ct) => {\n-                matches!(ct.kind(), ty::ConstKind::Bound(ty::INNERMOST, bc) if bc == bv)\n+                matches!(ct.kind(), ty::ConstKind::Bound(ty::INNERMOST, bc) if bc.as_usize() == bv)\n             }\n         })\n     }\n@@ -342,7 +340,7 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n     /// Creates dummy var values which should not be used in a\n     /// canonical response.\n     pub fn dummy() -> CanonicalVarValues<'tcx> {\n-        CanonicalVarValues { var_values: Default::default() }\n+        CanonicalVarValues { var_values: ty::List::empty() }\n     }\n \n     #[inline]\n@@ -360,43 +358,45 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n         use crate::ty::subst::GenericArgKind;\n \n         CanonicalVarValues {\n-            var_values: iter::zip(&self.var_values, 0..)\n-                .map(|(kind, i)| match kind.unpack() {\n-                    GenericArgKind::Type(..) => {\n-                        tcx.mk_ty(ty::Bound(ty::INNERMOST, ty::BoundVar::from_u32(i).into())).into()\n-                    }\n-                    GenericArgKind::Lifetime(..) => {\n-                        let br = ty::BoundRegion {\n-                            var: ty::BoundVar::from_u32(i),\n-                            kind: ty::BrAnon(i, None),\n-                        };\n-                        tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)).into()\n+            var_values: tcx.mk_substs(self.var_values.iter().enumerate().map(\n+                |(i, kind)| -> ty::GenericArg<'tcx> {\n+                    match kind.unpack() {\n+                        GenericArgKind::Type(..) => tcx\n+                            .mk_ty(ty::Bound(ty::INNERMOST, ty::BoundVar::from_usize(i).into()))\n+                            .into(),\n+                        GenericArgKind::Lifetime(..) => {\n+                            let br = ty::BoundRegion {\n+                                var: ty::BoundVar::from_usize(i),\n+                                kind: ty::BrAnon(i as u32, None),\n+                            };\n+                            tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)).into()\n+                        }\n+                        GenericArgKind::Const(ct) => tcx\n+                            .mk_const(\n+                                ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_usize(i)),\n+                                ct.ty(),\n+                            )\n+                            .into(),\n                     }\n-                    GenericArgKind::Const(ct) => tcx\n-                        .mk_const(\n-                            ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_u32(i)),\n-                            ct.ty(),\n-                        )\n-                        .into(),\n-                })\n-                .collect(),\n+                },\n+            )),\n         }\n     }\n }\n \n impl<'a, 'tcx> IntoIterator for &'a CanonicalVarValues<'tcx> {\n     type Item = GenericArg<'tcx>;\n-    type IntoIter = ::std::iter::Cloned<::std::slice::Iter<'a, GenericArg<'tcx>>>;\n+    type IntoIter = ::std::iter::Copied<::std::slice::Iter<'a, GenericArg<'tcx>>>;\n \n     fn into_iter(self) -> Self::IntoIter {\n-        self.var_values.iter().cloned()\n+        self.var_values.iter()\n     }\n }\n \n impl<'tcx> Index<BoundVar> for CanonicalVarValues<'tcx> {\n     type Output = GenericArg<'tcx>;\n \n     fn index(&self, value: BoundVar) -> &GenericArg<'tcx> {\n-        &self.var_values[value]\n+        &self.var_values[value.as_usize()]\n     }\n }"}, {"sha": "1bd2f0fbda9ef8e830a108140d211f453d22dba9", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4ff674f94237a1a21c7a1c1f6801bf751de41cdf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff674f94237a1a21c7a1c1f6801bf751de41cdf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=4ff674f94237a1a21c7a1c1f6801bf751de41cdf", "patch": "@@ -13,8 +13,6 @@\n // preserves universes and creates a unique var (in the highest universe) for each\n // appearance of a region.\n \n-// FIXME: `CanonicalVarValues` should be interned and `Copy`.\n-\n // FIXME: uses of `infcx.at` need to enable deferred projection equality once that's implemented.\n \n use std::mem;\n@@ -227,7 +225,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         let external_constraints = take_external_constraints(self.infcx)?;\n \n         Ok(self.infcx.canonicalize_response(Response {\n-            var_values: self.var_values.clone(),\n+            var_values: self.var_values,\n             external_constraints,\n             certainty,\n         }))\n@@ -483,26 +481,24 @@ pub(super) fn response_no_constraints<'tcx>(\n     goal: Canonical<'tcx, impl Sized>,\n     certainty: Certainty,\n ) -> QueryResult<'tcx> {\n-    let var_values = goal\n-        .variables\n-        .iter()\n-        .enumerate()\n-        .map(|(i, info)| match info.kind {\n-            CanonicalVarKind::Ty(_) | CanonicalVarKind::PlaceholderTy(_) => {\n-                tcx.mk_ty(ty::Bound(ty::INNERMOST, ty::BoundVar::from_usize(i).into())).into()\n-            }\n-            CanonicalVarKind::Region(_) | CanonicalVarKind::PlaceholderRegion(_) => {\n-                let br = ty::BoundRegion {\n-                    var: ty::BoundVar::from_usize(i),\n-                    kind: ty::BrAnon(i as u32, None),\n-                };\n-                tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)).into()\n+    let var_values =\n+        tcx.mk_substs(goal.variables.iter().enumerate().map(|(i, info)| -> ty::GenericArg<'tcx> {\n+            match info.kind {\n+                CanonicalVarKind::Ty(_) | CanonicalVarKind::PlaceholderTy(_) => {\n+                    tcx.mk_ty(ty::Bound(ty::INNERMOST, ty::BoundVar::from_usize(i).into())).into()\n+                }\n+                CanonicalVarKind::Region(_) | CanonicalVarKind::PlaceholderRegion(_) => {\n+                    let br = ty::BoundRegion {\n+                        var: ty::BoundVar::from_usize(i),\n+                        kind: ty::BrAnon(i as u32, None),\n+                    };\n+                    tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)).into()\n+                }\n+                CanonicalVarKind::Const(_, ty) | CanonicalVarKind::PlaceholderConst(_, ty) => tcx\n+                    .mk_const(ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_usize(i)), ty)\n+                    .into(),\n             }\n-            CanonicalVarKind::Const(_, ty) | CanonicalVarKind::PlaceholderConst(_, ty) => tcx\n-                .mk_const(ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_usize(i)), ty)\n-                .into(),\n-        })\n-        .collect();\n+        }));\n \n     Ok(Canonical {\n         max_universe: goal.max_universe,"}, {"sha": "80a388b8498b9784677f17ee2fdf7bb39f0a0761", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/cache.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff674f94237a1a21c7a1c1f6801bf751de41cdf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff674f94237a1a21c7a1c1f6801bf751de41cdf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs?ref=4ff674f94237a1a21c7a1c1f6801bf751de41cdf", "patch": "@@ -95,6 +95,7 @@ impl<'tcx> ProvisionalCache<'tcx> {\n     }\n \n     pub(super) fn provisional_result(&self, entry_index: EntryIndex) -> QueryResult<'tcx> {\n+        // FIXME: Responses should probably be `Copy` as well\n         self.entries[entry_index].response.clone()\n     }\n }"}, {"sha": "13d83b92689415f84fee9a26f9c96069c1822981", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4ff674f94237a1a21c7a1c1f6801bf751de41cdf/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff674f94237a1a21c7a1c1f6801bf751de41cdf/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=4ff674f94237a1a21c7a1c1f6801bf751de41cdf", "patch": "@@ -8,13 +8,10 @@ pub(crate) mod lowering;\n \n use rustc_data_structures::fx::FxHashMap;\n \n-use rustc_index::vec::IndexVec;\n-\n use rustc_middle::infer::canonical::{CanonicalTyVarKind, CanonicalVarKind};\n use rustc_middle::traits::ChalkRustInterner;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::subst::GenericArg;\n-use rustc_middle::ty::{self, BoundVar, ParamTy, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, ParamTy, TyCtxt, TypeFoldable, TypeVisitable};\n \n use rustc_infer::infer::canonical::{\n     Canonical, CanonicalVarValues, Certainty, QueryRegionConstraints, QueryResponse,\n@@ -100,11 +97,13 @@ pub(crate) fn evaluate_goal<'tcx>(\n                          binders: chalk_ir::CanonicalVarKinds<_>| {\n         use rustc_middle::infer::canonical::CanonicalVarInfo;\n \n-        let mut var_values: IndexVec<BoundVar, GenericArg<'tcx>> = IndexVec::new();\n         let mut reverse_param_substitutor = ReverseParamsSubstitutor::new(tcx, params);\n-        subst.as_slice(interner).iter().for_each(|p| {\n-            var_values.push(p.lower_into(interner).fold_with(&mut reverse_param_substitutor));\n-        });\n+        let var_values = tcx.mk_substs(\n+            subst\n+                .as_slice(interner)\n+                .iter()\n+                .map(|p| p.lower_into(interner).fold_with(&mut reverse_param_substitutor)),\n+        );\n         let variables: Vec<_> = binders\n             .iter(interner)\n             .map(|var| {\n@@ -159,8 +158,7 @@ pub(crate) fn evaluate_goal<'tcx>(\n                             max_universe: ty::UniverseIndex::from_usize(0),\n                             variables: obligation.variables,\n                             value: QueryResponse {\n-                                var_values: CanonicalVarValues { var_values: IndexVec::new() }\n-                                    .make_identity(tcx),\n+                                var_values: CanonicalVarValues::dummy(),\n                                 region_constraints: QueryRegionConstraints::default(),\n                                 certainty: Certainty::Ambiguous,\n                                 opaque_types: vec![],"}]}