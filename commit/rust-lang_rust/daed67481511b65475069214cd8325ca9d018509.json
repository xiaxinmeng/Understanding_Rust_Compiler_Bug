{"sha": "daed67481511b65475069214cd8325ca9d018509", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZWQ2NzQ4MTUxMWI2NTQ3NTA2OTIxNGNkODMyNWNhOWQwMTg1MDk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-22T00:28:07Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-22T00:28:07Z"}, "message": "review comments", "tree": {"sha": "333d9c3a599c9b9909c3bb71811b996a785d97f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/333d9c3a599c9b9909c3bb71811b996a785d97f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daed67481511b65475069214cd8325ca9d018509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daed67481511b65475069214cd8325ca9d018509", "html_url": "https://github.com/rust-lang/rust/commit/daed67481511b65475069214cd8325ca9d018509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daed67481511b65475069214cd8325ca9d018509/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e6b84474d7cd813bda0956568966024915d0ea8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6b84474d7cd813bda0956568966024915d0ea8", "html_url": "https://github.com/rust-lang/rust/commit/3e6b84474d7cd813bda0956568966024915d0ea8"}], "stats": {"total": 49, "additions": 19, "deletions": 30}, "files": [{"sha": "d98e1f3e1283fa3306bbd4492109846e971e504e", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/daed67481511b65475069214cd8325ca9d018509/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daed67481511b65475069214cd8325ca9d018509/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=daed67481511b65475069214cd8325ca9d018509", "patch": "@@ -821,11 +821,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let (adjustments, _) = self.register_infer_ok_obligations(ok);\n         self.apply_adjustments(expr, adjustments);\n-        if expr_ty.references_error() {\n-            Ok(self.tcx.types.err)\n+        Ok(if expr_ty.references_error() {\n+            self.tcx.types.err\n         } else {\n-            Ok(target)\n-        }\n+            target\n+        })\n     }\n \n     /// Same as `try_coerce()`, but without side-effects."}, {"sha": "07eb034054c9598366f794994d7c5a657df0ad58", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/daed67481511b65475069214cd8325ca9d018509/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daed67481511b65475069214cd8325ca9d018509/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=daed67481511b65475069214cd8325ca9d018509", "patch": "@@ -3751,36 +3751,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if let Some(ref init) = local.init {\n             let init_ty = self.check_decl_initializer(local, &init);\n-            if init_ty.references_error() {\n-                // Override the types everywhere with `types.err` to avoid knock down errors.\n-                self.write_ty(local.hir_id, init_ty);\n-                self.write_ty(local.pat.hir_id, init_ty);\n-                self.locals.borrow_mut().insert(local.hir_id, LocalTy {\n-                    decl_ty: t,\n-                    revealed_ty: init_ty,\n-                });\n-                self.locals.borrow_mut().insert(local.pat.hir_id, LocalTy {\n-                    decl_ty: t,\n-                    revealed_ty: init_ty,\n-                });\n-            }\n+            self.overwrite_local_ty_if_err(local, t, init_ty);\n         }\n \n         self.check_pat_top(&local.pat, t, None);\n         let pat_ty = self.node_ty(local.pat.hir_id);\n-        debug!(\"check_decl_local pat_ty {:?}\", pat_ty);\n-        if pat_ty.references_error() {\n+        self.overwrite_local_ty_if_err(local, t, pat_ty);\n+    }\n+\n+    fn overwrite_local_ty_if_err(&self, local: &'tcx hir::Local, decl_ty: Ty<'tcx>, ty: Ty<'tcx>) {\n+        if ty.references_error() {\n             // Override the types everywhere with `types.err` to avoid knock down errors.\n-            self.write_ty(local.hir_id, pat_ty);\n-            self.write_ty(local.pat.hir_id, pat_ty);\n-            self.locals.borrow_mut().insert(local.hir_id, LocalTy {\n-                decl_ty: t,\n-                revealed_ty: pat_ty,\n-            });\n-            self.locals.borrow_mut().insert(local.pat.hir_id, LocalTy {\n-                decl_ty: t,\n-                revealed_ty: pat_ty,\n-            });\n+            self.write_ty(local.hir_id, ty);\n+            self.write_ty(local.pat.hir_id, ty);\n+            let local_ty = LocalTy {\n+                decl_ty,\n+                revealed_ty: ty,\n+            };\n+            self.locals.borrow_mut().insert(local.hir_id, local_ty);\n+            self.locals.borrow_mut().insert(local.pat.hir_id, local_ty);\n         }\n     }\n "}, {"sha": "09c499452adb687b737843c63ed5c2d4bc8c33e8", "filename": "src/test/ui/issues/issue-33575.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daed67481511b65475069214cd8325ca9d018509/src%2Ftest%2Fui%2Fissues%2Fissue-33575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daed67481511b65475069214cd8325ca9d018509/src%2Ftest%2Fui%2Fissues%2Fissue-33575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33575.rs?ref=daed67481511b65475069214cd8325ca9d018509", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let baz = ().foo(); //~ ERROR no method named `foo` found for type `()` in the current scope\n-    <i32 as std::str::FromStr>::from_str(&baz); // No complains about `str` being unsized\n+    <i32 as std::str::FromStr>::from_str(&baz); // No complaints about `str` being unsized\n }"}]}