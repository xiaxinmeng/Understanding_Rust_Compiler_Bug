{"sha": "b873743c024d018b00e1e8c863a01d2c48bcdb1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NzM3NDNjMDI0ZDAxOGIwMGUxZThjODYzYTAxZDJjNDhiY2RiMWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-20T16:40:53Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-22T23:39:29Z"}, "message": "syntax: extract `accepted.rs` feature gates.", "tree": {"sha": "68f80d469240a9b147998622ba17b54da4cc63df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68f80d469240a9b147998622ba17b54da4cc63df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b873743c024d018b00e1e8c863a01d2c48bcdb1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b873743c024d018b00e1e8c863a01d2c48bcdb1b", "html_url": "https://github.com/rust-lang/rust/commit/b873743c024d018b00e1e8c863a01d2c48bcdb1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b873743c024d018b00e1e8c863a01d2c48bcdb1b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760226733e940cb375f791e894fbb554555eeb01", "url": "https://api.github.com/repos/rust-lang/rust/commits/760226733e940cb375f791e894fbb554555eeb01", "html_url": "https://github.com/rust-lang/rust/commit/760226733e940cb375f791e894fbb554555eeb01"}], "stats": {"total": 470, "additions": 239, "deletions": 231}, "files": [{"sha": "32fef2fc8ddb7a5e4058cc07aff87ca9d12b7646", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 231, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/b873743c024d018b00e1e8c863a01d2c48bcdb1b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b873743c024d018b00e1e8c863a01d2c48bcdb1b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b873743c024d018b00e1e8c863a01d2c48bcdb1b", "patch": "@@ -12,6 +12,9 @@\n //! gate usage is added, *do not remove it again* even once the feature\n //! becomes stable.\n \n+mod accepted;\n+use accepted::ACCEPTED_FEATURES;\n+\n use AttributeType::*;\n use AttributeGate::*;\n \n@@ -94,13 +97,6 @@ macro_rules! declare_features {\n             $((sym::$feature, $ver, $issue, None)),+\n         ];\n     };\n-\n-    ($((accepted, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n-        /// Those language feature has since been Accepted (it was once Active)\n-        const ACCEPTED_FEATURES: &[(Symbol, &str, Option<u32>, Option<&str>)] = &[\n-            $((sym::$feature, $ver, $issue, None)),+\n-        ];\n-    }\n }\n \n // If you change this, please modify `src/doc/unstable-book` as well.\n@@ -638,230 +634,6 @@ declare_features! (\n     (stable_removed, no_stack_check, \"1.0.0\", None, None),\n );\n \n-declare_features! (\n-    // -------------------------------------------------------------------------\n-    // feature-group-start: for testing purposes\n-    // -------------------------------------------------------------------------\n-\n-    // A temporary feature gate used to enable parser extensions needed\n-    // to bootstrap fix for #5723.\n-    (accepted, issue_5723_bootstrap, \"1.0.0\", None, None),\n-    // These are used to test this portion of the compiler,\n-    // they don't actually mean anything.\n-    (accepted, test_accepted_feature, \"1.0.0\", None, None),\n-\n-    // -------------------------------------------------------------------------\n-    // feature-group-end: for testing purposes\n-    // -------------------------------------------------------------------------\n-\n-    // -------------------------------------------------------------------------\n-    // feature-group-start: accepted features\n-    // -------------------------------------------------------------------------\n-\n-    // Allows using associated `type`s in `trait`s.\n-    (accepted, associated_types, \"1.0.0\", None, None),\n-    // Allows using assigning a default type to type parameters in algebraic data type definitions.\n-    (accepted, default_type_params, \"1.0.0\", None, None),\n-    // FIXME: explain `globs`.\n-    (accepted, globs, \"1.0.0\", None, None),\n-    // Allows `macro_rules!` items.\n-    (accepted, macro_rules, \"1.0.0\", None, None),\n-    // Allows use of `&foo[a..b]` as a slicing syntax.\n-    (accepted, slicing_syntax, \"1.0.0\", None, None),\n-    // Allows struct variants `Foo { baz: u8, .. }` in enums (RFC 418).\n-    (accepted, struct_variant, \"1.0.0\", None, None),\n-    // Allows indexing tuples.\n-    (accepted, tuple_indexing, \"1.0.0\", None, None),\n-    // Allows the use of `if let` expressions.\n-    (accepted, if_let, \"1.0.0\", None, None),\n-    // Allows the use of `while let` expressions.\n-    (accepted, while_let, \"1.0.0\", None, None),\n-    // Allows using `#![no_std]`.\n-    (accepted, no_std, \"1.6.0\", None, None),\n-    // Allows overloading augmented assignment operations like `a += b`.\n-    (accepted, augmented_assignments, \"1.8.0\", Some(28235), None),\n-    // Allows empty structs and enum variants with braces.\n-    (accepted, braced_empty_structs, \"1.8.0\", Some(29720), None),\n-    // Allows `#[deprecated]` attribute.\n-    (accepted, deprecated, \"1.9.0\", Some(29935), None),\n-    // Allows macros to appear in the type position.\n-    (accepted, type_macros, \"1.13.0\", Some(27245), None),\n-    // Allows use of the postfix `?` operator in expressions.\n-    (accepted, question_mark, \"1.13.0\", Some(31436), None),\n-    // Allows `..` in tuple (struct) patterns.\n-    (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627), None),\n-    // Allows some increased flexibility in the name resolution rules,\n-    // especially around globs and shadowing (RFC 1560).\n-    (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n-    // Allows using `Self` and associated types in struct expressions and patterns.\n-    (accepted, more_struct_aliases, \"1.16.0\", Some(37544), None),\n-    // Allows elision of `'static` lifetimes in `static`s and `const`s.\n-    (accepted, static_in_const, \"1.17.0\", Some(35897), None),\n-    // Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n-    (accepted, field_init_shorthand, \"1.17.0\", Some(37340), None),\n-    // Allows the definition recursive static items.\n-    (accepted, static_recursion, \"1.17.0\", Some(29719), None),\n-    // Allows `pub(restricted)` visibilities (RFC 1422).\n-    (accepted, pub_restricted, \"1.18.0\", Some(32409), None),\n-    // Allows `#![windows_subsystem]`.\n-    (accepted, windows_subsystem, \"1.18.0\", Some(37499), None),\n-    // Allows `break {expr}` with a value inside `loop`s.\n-    (accepted, loop_break_value, \"1.19.0\", Some(37339), None),\n-    // Allows numeric fields in struct expressions and patterns.\n-    (accepted, relaxed_adts, \"1.19.0\", Some(35626), None),\n-    // Allows coercing non capturing closures to function pointers.\n-    (accepted, closure_to_fn_coercion, \"1.19.0\", Some(39817), None),\n-    // Allows attributes on struct literal fields.\n-    (accepted, struct_field_attributes, \"1.20.0\", Some(38814), None),\n-    // Allows the definition of associated constants in `trait` or `impl` blocks.\n-    (accepted, associated_consts, \"1.20.0\", Some(29646), None),\n-    // Allows usage of the `compile_error!` macro.\n-    (accepted, compile_error, \"1.20.0\", Some(40872), None),\n-    // Allows code like `let x: &'static u32 = &42` to work (RFC 1414).\n-    (accepted, rvalue_static_promotion, \"1.21.0\", Some(38865), None),\n-    // Allows `Drop` types in constants (RFC 1440).\n-    (accepted, drop_types_in_const, \"1.22.0\", Some(33156), None),\n-    // Allows the sysV64 ABI to be specified on all platforms\n-    // instead of just the platforms on which it is the C ABI.\n-    (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),\n-    // Allows `repr(align(16))` struct attribute (RFC 1358).\n-    (accepted, repr_align, \"1.25.0\", Some(33626), None),\n-    // Allows '|' at beginning of match arms (RFC 1925).\n-    (accepted, match_beginning_vert, \"1.25.0\", Some(44101), None),\n-    // Allows nested groups in `use` items (RFC 2128).\n-    (accepted, use_nested_groups, \"1.25.0\", Some(44494), None),\n-    // Allows indexing into constant arrays.\n-    (accepted, const_indexing, \"1.26.0\", Some(29947), None),\n-    // Allows using `a..=b` and `..=b` as inclusive range syntaxes.\n-    (accepted, inclusive_range_syntax, \"1.26.0\", Some(28237), None),\n-    // Allows `..=` in patterns (RFC 1192).\n-    (accepted, dotdoteq_in_patterns, \"1.26.0\", Some(28237), None),\n-    // Allows `fn main()` with return types which implements `Termination` (RFC 1937).\n-    (accepted, termination_trait, \"1.26.0\", Some(43301), None),\n-    // Allows implementing `Clone` for closures where possible (RFC 2132).\n-    (accepted, clone_closures, \"1.26.0\", Some(44490), None),\n-    // Allows implementing `Copy` for closures where possible (RFC 2132).\n-    (accepted, copy_closures, \"1.26.0\", Some(44490), None),\n-    // Allows `impl Trait` in function arguments.\n-    (accepted, universal_impl_trait, \"1.26.0\", Some(34511), None),\n-    // Allows `impl Trait` in function return types.\n-    (accepted, conservative_impl_trait, \"1.26.0\", Some(34511), None),\n-    // Allows using the `u128` and `i128` types.\n-    (accepted, i128_type, \"1.26.0\", Some(35118), None),\n-    // Allows default match binding modes (RFC 2005).\n-    (accepted, match_default_bindings, \"1.26.0\", Some(42640), None),\n-    // Allows `'_` placeholder lifetimes.\n-    (accepted, underscore_lifetimes, \"1.26.0\", Some(44524), None),\n-    // Allows attributes on lifetime/type formal parameters in generics (RFC 1327).\n-    (accepted, generic_param_attrs, \"1.27.0\", Some(48848), None),\n-    // Allows `cfg(target_feature = \"...\")`.\n-    (accepted, cfg_target_feature, \"1.27.0\", Some(29717), None),\n-    // Allows `#[target_feature(...)]`.\n-    (accepted, target_feature, \"1.27.0\", None, None),\n-    // Allows using `dyn Trait` as a syntax for trait objects.\n-    (accepted, dyn_trait, \"1.27.0\", Some(44662), None),\n-    // Allows `#[must_use]` on functions, and introduces must-use operators (RFC 1940).\n-    (accepted, fn_must_use, \"1.27.0\", Some(43302), None),\n-    // Allows use of the `:lifetime` macro fragment specifier.\n-    (accepted, macro_lifetime_matcher, \"1.27.0\", Some(34303), None),\n-    // Allows `#[test]` functions where the return type implements `Termination` (RFC 1937).\n-    (accepted, termination_trait_test, \"1.27.0\", Some(48854), None),\n-    // Allows the `#[global_allocator]` attribute.\n-    (accepted, global_allocator, \"1.28.0\", Some(27389), None),\n-    // Allows `#[repr(transparent)]` attribute on newtype structs.\n-    (accepted, repr_transparent, \"1.28.0\", Some(43036), None),\n-    // Allows procedural macros in `proc-macro` crates.\n-    (accepted, proc_macro, \"1.29.0\", Some(38356), None),\n-    // Allows `foo.rs` as an alternative to `foo/mod.rs`.\n-    (accepted, non_modrs_mods, \"1.30.0\", Some(44660), None),\n-    // Allows use of the `:vis` macro fragment specifier\n-    (accepted, macro_vis_matcher, \"1.30.0\", Some(41022), None),\n-    // Allows importing and reexporting macros with `use`,\n-    // enables macro modularization in general.\n-    (accepted, use_extern_macros, \"1.30.0\", Some(35896), None),\n-    // Allows keywords to be escaped for use as identifiers.\n-    (accepted, raw_identifiers, \"1.30.0\", Some(48589), None),\n-    // Allows attributes scoped to tools.\n-    (accepted, tool_attributes, \"1.30.0\", Some(44690), None),\n-    // Allows multi-segment paths in attributes and derives.\n-    (accepted, proc_macro_path_invoc, \"1.30.0\", Some(38356), None),\n-    // Allows all literals in attribute lists and values of key-value pairs.\n-    (accepted, attr_literals, \"1.30.0\", Some(34981), None),\n-    // Allows inferring outlives requirements (RFC 2093).\n-    (accepted, infer_outlives_requirements, \"1.30.0\", Some(44493), None),\n-    // Allows annotating functions conforming to `fn(&PanicInfo) -> !` with `#[panic_handler]`.\n-    // This defines the behavior of panics.\n-    (accepted, panic_handler, \"1.30.0\", Some(44489), None),\n-    // Allows `#[used]` to preserve symbols (see llvm.used).\n-    (accepted, used, \"1.30.0\", Some(40289), None),\n-    // Allows `crate` in paths.\n-    (accepted, crate_in_paths, \"1.30.0\", Some(45477), None),\n-    // Allows resolving absolute paths as paths from other crates.\n-    (accepted, extern_absolute_paths, \"1.30.0\", Some(44660), None),\n-    // Allows access to crate names passed via `--extern` through prelude.\n-    (accepted, extern_prelude, \"1.30.0\", Some(44660), None),\n-    // Allows parentheses in patterns.\n-    (accepted, pattern_parentheses, \"1.31.0\", Some(51087), None),\n-    // Allows the definition of `const fn` functions.\n-    (accepted, min_const_fn, \"1.31.0\", Some(53555), None),\n-    // Allows scoped lints.\n-    (accepted, tool_lints, \"1.31.0\", Some(44690), None),\n-    // Allows lifetime elision in `impl` headers. For example:\n-    // + `impl<I:Iterator> Iterator for &mut Iterator`\n-    // + `impl Debug for Foo<'_>`\n-    (accepted, impl_header_lifetime_elision, \"1.31.0\", Some(15872), None),\n-    // Allows `extern crate foo as bar;`. This puts `bar` into extern prelude.\n-    (accepted, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n-    // Allows use of the `:literal` macro fragment specifier (RFC 1576).\n-    (accepted, macro_literal_matcher, \"1.32.0\", Some(35625), None),\n-    // Allows use of `?` as the Kleene \"at most one\" operator in macros.\n-    (accepted, macro_at_most_once_rep, \"1.32.0\", Some(48075), None),\n-    // Allows `Self` struct constructor (RFC 2302).\n-    (accepted, self_struct_ctor, \"1.32.0\", Some(51994), None),\n-    // Allows `Self` in type definitions (RFC 2300).\n-    (accepted, self_in_typedefs, \"1.32.0\", Some(49303), None),\n-    // Allows `use x::y;` to search `x` in the current scope.\n-    (accepted, uniform_paths, \"1.32.0\", Some(53130), None),\n-    // Allows integer match exhaustiveness checking (RFC 2591).\n-    (accepted, exhaustive_integer_patterns, \"1.33.0\", Some(50907), None),\n-    // Allows `use path as _;` and `extern crate c as _;`.\n-    (accepted, underscore_imports, \"1.33.0\", Some(48216), None),\n-    // Allows `#[repr(packed(N))]` attribute on structs.\n-    (accepted, repr_packed, \"1.33.0\", Some(33158), None),\n-    // Allows irrefutable patterns in `if let` and `while let` statements (RFC 2086).\n-    (accepted, irrefutable_let_patterns, \"1.33.0\", Some(44495), None),\n-    // Allows calling `const unsafe fn` inside `unsafe` blocks in `const fn` functions.\n-    (accepted, min_const_unsafe_fn, \"1.33.0\", Some(55607), None),\n-    // Allows let bindings, assignments and destructuring in `const` functions and constants.\n-    // As long as control flow is not implemented in const eval, `&&` and `||` may not be used\n-    // at the same time as let bindings.\n-    (accepted, const_let, \"1.33.0\", Some(48821), None),\n-    // Allows `#[cfg_attr(predicate, multiple, attributes, here)]`.\n-    (accepted, cfg_attr_multi, \"1.33.0\", Some(54881), None),\n-    // Allows top level or-patterns (`p | q`) in `if let` and `while let`.\n-    (accepted, if_while_or_patterns, \"1.33.0\", Some(48215), None),\n-    // Allows `cfg(target_vendor = \"...\")`.\n-    (accepted, cfg_target_vendor, \"1.33.0\", Some(29718), None),\n-    // Allows `extern crate self as foo;`.\n-    // This puts local crate root into extern prelude under name `foo`.\n-    (accepted, extern_crate_self, \"1.34.0\", Some(56409), None),\n-    // Allows arbitrary delimited token streams in non-macro attributes.\n-    (accepted, unrestricted_attribute_tokens, \"1.34.0\", Some(55208), None),\n-    // Allows paths to enum variants on type aliases including `Self`.\n-    (accepted, type_alias_enum_variants, \"1.37.0\", Some(49683), None),\n-    // Allows using `#[repr(align(X))]` on enums with equivalent semantics\n-    // to wrapping an enum in a wrapper struct with `#[repr(align(X))]`.\n-    (accepted, repr_align_enum, \"1.37.0\", Some(57996), None),\n-    // Allows `const _: TYPE = VALUE`.\n-    (accepted, underscore_const_names, \"1.37.0\", Some(54912), None),\n-    // Allows free and inherent `async fn`s, `async` blocks, and `<expr>.await` expressions.\n-    (accepted, async_await, \"1.39.0\", Some(50547), None),\n-\n-    // -------------------------------------------------------------------------\n-    // feature-group-end: accepted features\n-    // -------------------------------------------------------------------------\n-);\n-\n // If you change this, please modify `src/doc/unstable-book` as well. You must\n // move that documentation into the relevant place in the other docs, and\n // remove the chapter on the flag."}, {"sha": "32a0b76d5f0d836d257843f07443bf3ef67e54ae", "filename": "src/libsyntax/feature_gate/accepted.rs", "status": "added", "additions": 236, "deletions": 0, "changes": 236, "blob_url": "https://github.com/rust-lang/rust/blob/b873743c024d018b00e1e8c863a01d2c48bcdb1b/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b873743c024d018b00e1e8c863a01d2c48bcdb1b/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs?ref=b873743c024d018b00e1e8c863a01d2c48bcdb1b", "patch": "@@ -0,0 +1,236 @@\n+//! List of the accepted feature gates.\n+\n+use crate::symbol::{Symbol, sym};\n+\n+macro_rules! declare_features {\n+    ($((accepted, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n+        /// Those language feature has since been Accepted (it was once Active)\n+        pub const ACCEPTED_FEATURES: &[(Symbol, &str, Option<u32>, Option<&str>)] = &[\n+            $((sym::$feature, $ver, $issue, None)),+\n+        ];\n+    }\n+}\n+\n+declare_features! (\n+    // -------------------------------------------------------------------------\n+    // feature-group-start: for testing purposes\n+    // -------------------------------------------------------------------------\n+\n+    // A temporary feature gate used to enable parser extensions needed\n+    // to bootstrap fix for #5723.\n+    (accepted, issue_5723_bootstrap, \"1.0.0\", None, None),\n+    // These are used to test this portion of the compiler,\n+    // they don't actually mean anything.\n+    (accepted, test_accepted_feature, \"1.0.0\", None, None),\n+\n+    // -------------------------------------------------------------------------\n+    // feature-group-end: for testing purposes\n+    // -------------------------------------------------------------------------\n+\n+    // -------------------------------------------------------------------------\n+    // feature-group-start: accepted features\n+    // -------------------------------------------------------------------------\n+\n+    // Allows using associated `type`s in `trait`s.\n+    (accepted, associated_types, \"1.0.0\", None, None),\n+    // Allows using assigning a default type to type parameters in algebraic data type definitions.\n+    (accepted, default_type_params, \"1.0.0\", None, None),\n+    // FIXME: explain `globs`.\n+    (accepted, globs, \"1.0.0\", None, None),\n+    // Allows `macro_rules!` items.\n+    (accepted, macro_rules, \"1.0.0\", None, None),\n+    // Allows use of `&foo[a..b]` as a slicing syntax.\n+    (accepted, slicing_syntax, \"1.0.0\", None, None),\n+    // Allows struct variants `Foo { baz: u8, .. }` in enums (RFC 418).\n+    (accepted, struct_variant, \"1.0.0\", None, None),\n+    // Allows indexing tuples.\n+    (accepted, tuple_indexing, \"1.0.0\", None, None),\n+    // Allows the use of `if let` expressions.\n+    (accepted, if_let, \"1.0.0\", None, None),\n+    // Allows the use of `while let` expressions.\n+    (accepted, while_let, \"1.0.0\", None, None),\n+    // Allows using `#![no_std]`.\n+    (accepted, no_std, \"1.6.0\", None, None),\n+    // Allows overloading augmented assignment operations like `a += b`.\n+    (accepted, augmented_assignments, \"1.8.0\", Some(28235), None),\n+    // Allows empty structs and enum variants with braces.\n+    (accepted, braced_empty_structs, \"1.8.0\", Some(29720), None),\n+    // Allows `#[deprecated]` attribute.\n+    (accepted, deprecated, \"1.9.0\", Some(29935), None),\n+    // Allows macros to appear in the type position.\n+    (accepted, type_macros, \"1.13.0\", Some(27245), None),\n+    // Allows use of the postfix `?` operator in expressions.\n+    (accepted, question_mark, \"1.13.0\", Some(31436), None),\n+    // Allows `..` in tuple (struct) patterns.\n+    (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627), None),\n+    // Allows some increased flexibility in the name resolution rules,\n+    // especially around globs and shadowing (RFC 1560).\n+    (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n+    // Allows using `Self` and associated types in struct expressions and patterns.\n+    (accepted, more_struct_aliases, \"1.16.0\", Some(37544), None),\n+    // Allows elision of `'static` lifetimes in `static`s and `const`s.\n+    (accepted, static_in_const, \"1.17.0\", Some(35897), None),\n+    // Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n+    (accepted, field_init_shorthand, \"1.17.0\", Some(37340), None),\n+    // Allows the definition recursive static items.\n+    (accepted, static_recursion, \"1.17.0\", Some(29719), None),\n+    // Allows `pub(restricted)` visibilities (RFC 1422).\n+    (accepted, pub_restricted, \"1.18.0\", Some(32409), None),\n+    // Allows `#![windows_subsystem]`.\n+    (accepted, windows_subsystem, \"1.18.0\", Some(37499), None),\n+    // Allows `break {expr}` with a value inside `loop`s.\n+    (accepted, loop_break_value, \"1.19.0\", Some(37339), None),\n+    // Allows numeric fields in struct expressions and patterns.\n+    (accepted, relaxed_adts, \"1.19.0\", Some(35626), None),\n+    // Allows coercing non capturing closures to function pointers.\n+    (accepted, closure_to_fn_coercion, \"1.19.0\", Some(39817), None),\n+    // Allows attributes on struct literal fields.\n+    (accepted, struct_field_attributes, \"1.20.0\", Some(38814), None),\n+    // Allows the definition of associated constants in `trait` or `impl` blocks.\n+    (accepted, associated_consts, \"1.20.0\", Some(29646), None),\n+    // Allows usage of the `compile_error!` macro.\n+    (accepted, compile_error, \"1.20.0\", Some(40872), None),\n+    // Allows code like `let x: &'static u32 = &42` to work (RFC 1414).\n+    (accepted, rvalue_static_promotion, \"1.21.0\", Some(38865), None),\n+    // Allows `Drop` types in constants (RFC 1440).\n+    (accepted, drop_types_in_const, \"1.22.0\", Some(33156), None),\n+    // Allows the sysV64 ABI to be specified on all platforms\n+    // instead of just the platforms on which it is the C ABI.\n+    (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),\n+    // Allows `repr(align(16))` struct attribute (RFC 1358).\n+    (accepted, repr_align, \"1.25.0\", Some(33626), None),\n+    // Allows '|' at beginning of match arms (RFC 1925).\n+    (accepted, match_beginning_vert, \"1.25.0\", Some(44101), None),\n+    // Allows nested groups in `use` items (RFC 2128).\n+    (accepted, use_nested_groups, \"1.25.0\", Some(44494), None),\n+    // Allows indexing into constant arrays.\n+    (accepted, const_indexing, \"1.26.0\", Some(29947), None),\n+    // Allows using `a..=b` and `..=b` as inclusive range syntaxes.\n+    (accepted, inclusive_range_syntax, \"1.26.0\", Some(28237), None),\n+    // Allows `..=` in patterns (RFC 1192).\n+    (accepted, dotdoteq_in_patterns, \"1.26.0\", Some(28237), None),\n+    // Allows `fn main()` with return types which implements `Termination` (RFC 1937).\n+    (accepted, termination_trait, \"1.26.0\", Some(43301), None),\n+    // Allows implementing `Clone` for closures where possible (RFC 2132).\n+    (accepted, clone_closures, \"1.26.0\", Some(44490), None),\n+    // Allows implementing `Copy` for closures where possible (RFC 2132).\n+    (accepted, copy_closures, \"1.26.0\", Some(44490), None),\n+    // Allows `impl Trait` in function arguments.\n+    (accepted, universal_impl_trait, \"1.26.0\", Some(34511), None),\n+    // Allows `impl Trait` in function return types.\n+    (accepted, conservative_impl_trait, \"1.26.0\", Some(34511), None),\n+    // Allows using the `u128` and `i128` types.\n+    (accepted, i128_type, \"1.26.0\", Some(35118), None),\n+    // Allows default match binding modes (RFC 2005).\n+    (accepted, match_default_bindings, \"1.26.0\", Some(42640), None),\n+    // Allows `'_` placeholder lifetimes.\n+    (accepted, underscore_lifetimes, \"1.26.0\", Some(44524), None),\n+    // Allows attributes on lifetime/type formal parameters in generics (RFC 1327).\n+    (accepted, generic_param_attrs, \"1.27.0\", Some(48848), None),\n+    // Allows `cfg(target_feature = \"...\")`.\n+    (accepted, cfg_target_feature, \"1.27.0\", Some(29717), None),\n+    // Allows `#[target_feature(...)]`.\n+    (accepted, target_feature, \"1.27.0\", None, None),\n+    // Allows using `dyn Trait` as a syntax for trait objects.\n+    (accepted, dyn_trait, \"1.27.0\", Some(44662), None),\n+    // Allows `#[must_use]` on functions, and introduces must-use operators (RFC 1940).\n+    (accepted, fn_must_use, \"1.27.0\", Some(43302), None),\n+    // Allows use of the `:lifetime` macro fragment specifier.\n+    (accepted, macro_lifetime_matcher, \"1.27.0\", Some(34303), None),\n+    // Allows `#[test]` functions where the return type implements `Termination` (RFC 1937).\n+    (accepted, termination_trait_test, \"1.27.0\", Some(48854), None),\n+    // Allows the `#[global_allocator]` attribute.\n+    (accepted, global_allocator, \"1.28.0\", Some(27389), None),\n+    // Allows `#[repr(transparent)]` attribute on newtype structs.\n+    (accepted, repr_transparent, \"1.28.0\", Some(43036), None),\n+    // Allows procedural macros in `proc-macro` crates.\n+    (accepted, proc_macro, \"1.29.0\", Some(38356), None),\n+    // Allows `foo.rs` as an alternative to `foo/mod.rs`.\n+    (accepted, non_modrs_mods, \"1.30.0\", Some(44660), None),\n+    // Allows use of the `:vis` macro fragment specifier\n+    (accepted, macro_vis_matcher, \"1.30.0\", Some(41022), None),\n+    // Allows importing and reexporting macros with `use`,\n+    // enables macro modularization in general.\n+    (accepted, use_extern_macros, \"1.30.0\", Some(35896), None),\n+    // Allows keywords to be escaped for use as identifiers.\n+    (accepted, raw_identifiers, \"1.30.0\", Some(48589), None),\n+    // Allows attributes scoped to tools.\n+    (accepted, tool_attributes, \"1.30.0\", Some(44690), None),\n+    // Allows multi-segment paths in attributes and derives.\n+    (accepted, proc_macro_path_invoc, \"1.30.0\", Some(38356), None),\n+    // Allows all literals in attribute lists and values of key-value pairs.\n+    (accepted, attr_literals, \"1.30.0\", Some(34981), None),\n+    // Allows inferring outlives requirements (RFC 2093).\n+    (accepted, infer_outlives_requirements, \"1.30.0\", Some(44493), None),\n+    // Allows annotating functions conforming to `fn(&PanicInfo) -> !` with `#[panic_handler]`.\n+    // This defines the behavior of panics.\n+    (accepted, panic_handler, \"1.30.0\", Some(44489), None),\n+    // Allows `#[used]` to preserve symbols (see llvm.used).\n+    (accepted, used, \"1.30.0\", Some(40289), None),\n+    // Allows `crate` in paths.\n+    (accepted, crate_in_paths, \"1.30.0\", Some(45477), None),\n+    // Allows resolving absolute paths as paths from other crates.\n+    (accepted, extern_absolute_paths, \"1.30.0\", Some(44660), None),\n+    // Allows access to crate names passed via `--extern` through prelude.\n+    (accepted, extern_prelude, \"1.30.0\", Some(44660), None),\n+    // Allows parentheses in patterns.\n+    (accepted, pattern_parentheses, \"1.31.0\", Some(51087), None),\n+    // Allows the definition of `const fn` functions.\n+    (accepted, min_const_fn, \"1.31.0\", Some(53555), None),\n+    // Allows scoped lints.\n+    (accepted, tool_lints, \"1.31.0\", Some(44690), None),\n+    // Allows lifetime elision in `impl` headers. For example:\n+    // + `impl<I:Iterator> Iterator for &mut Iterator`\n+    // + `impl Debug for Foo<'_>`\n+    (accepted, impl_header_lifetime_elision, \"1.31.0\", Some(15872), None),\n+    // Allows `extern crate foo as bar;`. This puts `bar` into extern prelude.\n+    (accepted, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n+    // Allows use of the `:literal` macro fragment specifier (RFC 1576).\n+    (accepted, macro_literal_matcher, \"1.32.0\", Some(35625), None),\n+    // Allows use of `?` as the Kleene \"at most one\" operator in macros.\n+    (accepted, macro_at_most_once_rep, \"1.32.0\", Some(48075), None),\n+    // Allows `Self` struct constructor (RFC 2302).\n+    (accepted, self_struct_ctor, \"1.32.0\", Some(51994), None),\n+    // Allows `Self` in type definitions (RFC 2300).\n+    (accepted, self_in_typedefs, \"1.32.0\", Some(49303), None),\n+    // Allows `use x::y;` to search `x` in the current scope.\n+    (accepted, uniform_paths, \"1.32.0\", Some(53130), None),\n+    // Allows integer match exhaustiveness checking (RFC 2591).\n+    (accepted, exhaustive_integer_patterns, \"1.33.0\", Some(50907), None),\n+    // Allows `use path as _;` and `extern crate c as _;`.\n+    (accepted, underscore_imports, \"1.33.0\", Some(48216), None),\n+    // Allows `#[repr(packed(N))]` attribute on structs.\n+    (accepted, repr_packed, \"1.33.0\", Some(33158), None),\n+    // Allows irrefutable patterns in `if let` and `while let` statements (RFC 2086).\n+    (accepted, irrefutable_let_patterns, \"1.33.0\", Some(44495), None),\n+    // Allows calling `const unsafe fn` inside `unsafe` blocks in `const fn` functions.\n+    (accepted, min_const_unsafe_fn, \"1.33.0\", Some(55607), None),\n+    // Allows let bindings, assignments and destructuring in `const` functions and constants.\n+    // As long as control flow is not implemented in const eval, `&&` and `||` may not be used\n+    // at the same time as let bindings.\n+    (accepted, const_let, \"1.33.0\", Some(48821), None),\n+    // Allows `#[cfg_attr(predicate, multiple, attributes, here)]`.\n+    (accepted, cfg_attr_multi, \"1.33.0\", Some(54881), None),\n+    // Allows top level or-patterns (`p | q`) in `if let` and `while let`.\n+    (accepted, if_while_or_patterns, \"1.33.0\", Some(48215), None),\n+    // Allows `cfg(target_vendor = \"...\")`.\n+    (accepted, cfg_target_vendor, \"1.33.0\", Some(29718), None),\n+    // Allows `extern crate self as foo;`.\n+    // This puts local crate root into extern prelude under name `foo`.\n+    (accepted, extern_crate_self, \"1.34.0\", Some(56409), None),\n+    // Allows arbitrary delimited token streams in non-macro attributes.\n+    (accepted, unrestricted_attribute_tokens, \"1.34.0\", Some(55208), None),\n+    // Allows paths to enum variants on type aliases including `Self`.\n+    (accepted, type_alias_enum_variants, \"1.37.0\", Some(49683), None),\n+    // Allows using `#[repr(align(X))]` on enums with equivalent semantics\n+    // to wrapping an enum in a wrapper struct with `#[repr(align(X))]`.\n+    (accepted, repr_align_enum, \"1.37.0\", Some(57996), None),\n+    // Allows `const _: TYPE = VALUE`.\n+    (accepted, underscore_const_names, \"1.37.0\", Some(54912), None),\n+    // Allows free and inherent `async fn`s, `async` blocks, and `<expr>.await` expressions.\n+    (accepted, async_await, \"1.39.0\", Some(50547), None),\n+\n+    // -------------------------------------------------------------------------\n+    // feature-group-end: accepted features\n+    // -------------------------------------------------------------------------\n+);"}]}