{"sha": "9b4372e3b1a4a25972e524687ba1c719bcaf243a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNDM3MmUzYjFhNGEyNTk3MmU1MjQ2ODdiYTFjNzE5YmNhZjI0M2E=", "commit": {"author": {"name": "Christopher Vittal", "email": "christopher.vittal@gmail.com", "date": "2017-11-14T21:24:35Z"}, "committer": {"name": "Christopher Vittal", "email": "christopher.vittal@gmail.com", "date": "2017-11-15T20:46:01Z"}, "message": "Incorporate review feedback\n\nAdd requested comments, restructure some small bits of code. Fix extern\ndeclarations allowing impl Trait.", "tree": {"sha": "2c56872674cd019f24804246e7f116f3ffe77c85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c56872674cd019f24804246e7f116f3ffe77c85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b4372e3b1a4a25972e524687ba1c719bcaf243a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4372e3b1a4a25972e524687ba1c719bcaf243a", "html_url": "https://github.com/rust-lang/rust/commit/9b4372e3b1a4a25972e524687ba1c719bcaf243a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b4372e3b1a4a25972e524687ba1c719bcaf243a/comments", "author": {"login": "chrisvittal", "id": 15916123, "node_id": "MDQ6VXNlcjE1OTE2MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/15916123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisvittal", "html_url": "https://github.com/chrisvittal", "followers_url": "https://api.github.com/users/chrisvittal/followers", "following_url": "https://api.github.com/users/chrisvittal/following{/other_user}", "gists_url": "https://api.github.com/users/chrisvittal/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisvittal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisvittal/subscriptions", "organizations_url": "https://api.github.com/users/chrisvittal/orgs", "repos_url": "https://api.github.com/users/chrisvittal/repos", "events_url": "https://api.github.com/users/chrisvittal/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisvittal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chrisvittal", "id": 15916123, "node_id": "MDQ6VXNlcjE1OTE2MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/15916123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisvittal", "html_url": "https://github.com/chrisvittal", "followers_url": "https://api.github.com/users/chrisvittal/followers", "following_url": "https://api.github.com/users/chrisvittal/following{/other_user}", "gists_url": "https://api.github.com/users/chrisvittal/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisvittal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisvittal/subscriptions", "organizations_url": "https://api.github.com/users/chrisvittal/orgs", "repos_url": "https://api.github.com/users/chrisvittal/repos", "events_url": "https://api.github.com/users/chrisvittal/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisvittal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e9948f92f5972e9b87b6f08dab51a7073b8a495", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9948f92f5972e9b87b6f08dab51a7073b8a495", "html_url": "https://github.com/rust-lang/rust/commit/7e9948f92f5972e9b87b6f08dab51a7073b8a495"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "e47b15e3781fbd85499dbe95778d685814250289", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9b4372e3b1a4a25972e524687ba1c719bcaf243a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b4372e3b1a4a25972e524687ba1c719bcaf243a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9b4372e3b1a4a25972e524687ba1c719bcaf243a", "patch": "@@ -1130,11 +1130,19 @@ impl<'a> LoweringContext<'a> {\n         }).collect()\n     }\n \n+\n     fn lower_fn_decl(&mut self,\n                      decl: &FnDecl,\n                      fn_def_id: Option<DefId>,\n                      impl_trait_return_allow: bool)\n                      -> P<hir::FnDecl> {\n+        // NOTE: The two last paramters here have to do with impl Trait. If fn_def_id is Some,\n+        //       then impl Trait arguments are lowered into generic paramters on the given\n+        //       fn_def_id, otherwise impl Trait is disallowed. (for now)\n+        //\n+        //       Furthermore, if impl_trait_return_allow is true, then impl Trait may be used in\n+        //       return positions as well. This guards against trait declarations and their impls\n+        //       where impl Trait is disallowed. (again for now)\n         P(hir::FnDecl {\n             inputs: decl.inputs.iter()\n                 .map(|arg| if let Some(def_id) = fn_def_id {\n@@ -1143,9 +1151,9 @@ impl<'a> LoweringContext<'a> {\n                     self.lower_ty(&arg.ty, ImplTraitContext::Disallowed)\n                 }).collect(),\n             output: match decl.output {\n-                FunctionRetTy::Ty(ref ty) => match (impl_trait_return_allow, fn_def_id) {\n-                    (false, _) => hir::Return(self.lower_ty(ty, ImplTraitContext::Disallowed)),\n-                    (_, Some(_)) => hir::Return(self.lower_ty(ty, ImplTraitContext::Existential)),\n+                FunctionRetTy::Ty(ref ty) => match fn_def_id {\n+                    Some(_) if impl_trait_return_allow =>\n+                        hir::Return(self.lower_ty(ty, ImplTraitContext::Existential)),\n                     _ => hir::Return(self.lower_ty(ty, ImplTraitContext::Disallowed)),\n                 },\n                 FunctionRetTy::Default(span) => hir::DefaultReturn(span),\n@@ -1730,7 +1738,8 @@ impl<'a> LoweringContext<'a> {\n                             this.expr_block(body, ThinVec::new())\n                         });\n                         let impl_trait_return_allow = !this.is_in_trait_impl;\n-                        hir::ImplItemKind::Method(this.lower_method_sig(sig, fn_def_id,\n+                        hir::ImplItemKind::Method(this.lower_method_sig(sig,\n+                                                                        fn_def_id,\n                                                                         impl_trait_return_allow),\n                                                   body_id)\n                     }\n@@ -1833,8 +1842,8 @@ impl<'a> LoweringContext<'a> {\n                 attrs: this.lower_attrs(&i.attrs),\n                 node: match i.node {\n                     ForeignItemKind::Fn(ref fdec, ref generics) => {\n-                        let fn_def_id = this.resolver.definitions().opt_local_def_id(i.id);\n-                        hir::ForeignItemFn(this.lower_fn_decl(fdec, fn_def_id, true),\n+                        // Disallow impl Trait in foreign items\n+                        hir::ForeignItemFn(this.lower_fn_decl(fdec, None, false),\n                                            this.lower_fn_args_to_names(fdec),\n                                            this.lower_generics(generics))\n                     }"}, {"sha": "b5fbbeb1692e6e14b46472e57896c8d9880014ff", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b4372e3b1a4a25972e524687ba1c719bcaf243a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b4372e3b1a4a25972e524687ba1c719bcaf243a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9b4372e3b1a4a25972e524687ba1c719bcaf243a", "patch": "@@ -1763,9 +1763,13 @@ fn extract_universal_impl_trait_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     let mut visitor = ImplTraitUniversalVisitor { items: Vec::new() };\n-    opt_inputs.map(|inputs| for t in inputs.iter() {\n-        visitor.visit_ty(t);\n-    });\n+\n+    if let Some(inputs) = opt_inputs {\n+        for t in inputs.iter() {\n+            visitor.visit_ty(t);\n+        }\n+    }\n+\n     visitor.items.into_iter().map(|ty| if let hir::TyImplTraitUniversal(_, ref bounds) = ty.node {\n         ImplTraitUniversalInfo {\n             id: ty.id,"}, {"sha": "a4361446020b042cd4e41cf7d310533190769a83", "filename": "src/test/compile-fail/impl-trait/where-allowed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b4372e3b1a4a25972e524687ba1c719bcaf243a/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b4372e3b1a4a25972e524687ba1c719bcaf243a/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs?ref=9b4372e3b1a4a25972e524687ba1c719bcaf243a", "patch": "@@ -144,11 +144,9 @@ impl DummyType {\n extern \"C\" {\n     fn in_foreign_parameters(_: impl Debug);\n     //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-    // FIXME currently allowed\n \n     fn in_foreign_return() -> impl Debug;\n     //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-    // FIXME currently allowed\n }\n \n // Allowed"}]}