{"sha": "e7922f745dd617dbdef1f1c57d635b42e316cd92", "node_id": "C_kwDOAAsO6NoAKGU3OTIyZjc0NWRkNjE3ZGJkZWYxZjFjNTdkNjM1YjQyZTMxNmNkOTI", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-01-29T15:50:18Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-01-29T15:50:18Z"}, "message": "Format `if_chain` invocations in clippy_utils", "tree": {"sha": "19ec0811c5a0c89563b5063dce5c340fb39a7855", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19ec0811c5a0c89563b5063dce5c340fb39a7855"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7922f745dd617dbdef1f1c57d635b42e316cd92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7922f745dd617dbdef1f1c57d635b42e316cd92", "html_url": "https://github.com/rust-lang/rust/commit/e7922f745dd617dbdef1f1c57d635b42e316cd92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7922f745dd617dbdef1f1c57d635b42e316cd92/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ceffdee9bc8dc7b645cb1b91bec5df8a6716087", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ceffdee9bc8dc7b645cb1b91bec5df8a6716087", "html_url": "https://github.com/rust-lang/rust/commit/7ceffdee9bc8dc7b645cb1b91bec5df8a6716087"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "3f604d5166bf7d7dcf8f41ba0b9b39aeb996ebd8", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e7922f745dd617dbdef1f1c57d635b42e316cd92/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7922f745dd617dbdef1f1c57d635b42e316cd92/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=e7922f745dd617dbdef1f1c57d635b42e316cd92", "patch": "@@ -331,17 +331,16 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     let def_path: Vec<&str> = def_path.iter().take(4).map(Symbol::as_str).collect();\n                     if let [\"core\", \"num\", int_impl, \"max_value\"] = *def_path;\n                     then {\n-                       let value = match int_impl {\n-                           \"<impl i8>\" => i8::MAX as u128,\n-                           \"<impl i16>\" => i16::MAX as u128,\n-                           \"<impl i32>\" => i32::MAX as u128,\n-                           \"<impl i64>\" => i64::MAX as u128,\n-                           \"<impl i128>\" => i128::MAX as u128,\n-                           _ => return None,\n-                       };\n-                       Some(Constant::Int(value))\n-                    }\n-                    else {\n+                        let value = match int_impl {\n+                            \"<impl i8>\" => i8::MAX as u128,\n+                            \"<impl i16>\" => i16::MAX as u128,\n+                            \"<impl i32>\" => i32::MAX as u128,\n+                            \"<impl i64>\" => i64::MAX as u128,\n+                            \"<impl i128>\" => i128::MAX as u128,\n+                            _ => return None,\n+                        };\n+                        Some(Constant::Int(value))\n+                    } else {\n                         None\n                     }\n                 }"}, {"sha": "2095fc966c5dc7535f3be122d08bef255130de57", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7922f745dd617dbdef1f1c57d635b42e316cd92/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7922f745dd617dbdef1f1c57d635b42e316cd92/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=e7922f745dd617dbdef1f1c57d635b42e316cd92", "patch": "@@ -284,8 +284,7 @@ impl<'a> VecArgs<'a> {\n                 return if match_def_path(cx, fun_def_id, &paths::VEC_FROM_ELEM) && args.len() == 2 {\n                     // `vec![elem; size]` case\n                     Some(VecArgs::Repeat(&args[0], &args[1]))\n-                }\n-                else if match_def_path(cx, fun_def_id, &paths::SLICE_INTO_VEC) && args.len() == 1 {\n+                } else if match_def_path(cx, fun_def_id, &paths::SLICE_INTO_VEC) && args.len() == 1 {\n                     // `vec![a, b, c]` case\n                     if_chain! {\n                         if let hir::ExprKind::Box(boxed) = args[0].kind;\n@@ -296,11 +295,9 @@ impl<'a> VecArgs<'a> {\n                     }\n \n                     None\n-                }\n-                else if match_def_path(cx, fun_def_id, &paths::VEC_NEW) && args.is_empty() {\n+                } else if match_def_path(cx, fun_def_id, &paths::VEC_NEW) && args.is_empty() {\n                     Some(VecArgs::Vec(&[]))\n-                }\n-                else {\n+                } else {\n                     None\n                 };\n             }\n@@ -456,7 +453,7 @@ pub fn get_vec_init_kind<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -\n                         if let ExprKind::Lit(lit) = &arg.kind;\n                         if let LitKind::Int(num, _) = lit.node;\n                         then {\n-                            return Some(VecInitKind::WithLiteralCapacity(num.try_into().ok()?))\n+                            return Some(VecInitKind::WithLiteralCapacity(num.try_into().ok()?));\n                         }\n                     }\n                     return Some(VecInitKind::WithExprCapacity(arg.hir_id));"}, {"sha": "c1ef0031e1f31b0190846c75995f4ce4bbfc83af", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e7922f745dd617dbdef1f1c57d635b42e316cd92/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7922f745dd617dbdef1f1c57d635b42e316cd92/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=e7922f745dd617dbdef1f1c57d635b42e316cd92", "patch": "@@ -603,7 +603,9 @@ pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'tcx>, def_id: LocalDefId) ->\n         if parent_impl != CRATE_DEF_ID;\n         if let hir::Node::Item(item) = cx.tcx.hir().get_by_def_id(parent_impl);\n         if let hir::ItemKind::Impl(impl_) = &item.kind;\n-        then { return impl_.of_trait.as_ref(); }\n+        then {\n+            return impl_.of_trait.as_ref();\n+        }\n     }\n     None\n }\n@@ -713,12 +715,7 @@ pub fn is_default_equivalent_call(cx: &LateContext<'_>, repl_func: &Expr<'_>) ->\n         if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n         if is_diag_trait_item(cx, repl_def_id, sym::Default)\n             || is_default_equivalent_ctor(cx, repl_def_id, repl_func_qpath);\n-        then {\n-            true\n-        }\n-        else {\n-            false\n-        }\n+        then { true } else { false }\n     }\n }\n \n@@ -1553,8 +1550,7 @@ pub fn is_try<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'tcx>) -> Option<&'tc\n             if arms.len() == 2;\n             if arms[0].guard.is_none();\n             if arms[1].guard.is_none();\n-            if (is_ok(cx, &arms[0]) && is_err(cx, &arms[1])) ||\n-                (is_ok(cx, &arms[1]) && is_err(cx, &arms[0]));\n+            if (is_ok(cx, &arms[0]) && is_err(cx, &arms[1])) || (is_ok(cx, &arms[1]) && is_err(cx, &arms[0]));\n             then {\n                 return Some(expr);\n             }\n@@ -1644,7 +1640,7 @@ pub fn match_function_call<'tcx>(\n         if let Some(fun_def_id) = cx.qpath_res(qpath, fun.hir_id).opt_def_id();\n         if match_def_path(cx, fun_def_id, path);\n         then {\n-            return Some(args)\n+            return Some(args);\n         }\n     };\n     None"}, {"sha": "5bc353bdd8928a18e71d6d497c452c20e3daa804", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7922f745dd617dbdef1f1c57d635b42e316cd92/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7922f745dd617dbdef1f1c57d635b42e316cd92/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=e7922f745dd617dbdef1f1c57d635b42e316cd92", "patch": "@@ -452,7 +452,11 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n                     if let Ok(i) = usize::try_from(position);\n                     if let Some(&(j, format_trait)) = self.formatters.get(i);\n                     then {\n-                        Some(FormatArgsArg { value: self.value_args[j], format_trait, spec: Some(spec) })\n+                        Some(FormatArgsArg {\n+                            value: self.value_args[j],\n+                            format_trait,\n+                            spec: Some(spec),\n+                        })\n                     } else {\n                         None\n                     }"}]}