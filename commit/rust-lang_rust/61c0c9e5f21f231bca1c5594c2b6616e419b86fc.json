{"sha": "61c0c9e5f21f231bca1c5594c2b6616e419b86fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYzBjOWU1ZjIxZjIzMWJjYTFjNTU5NGMyYjY2MTZlNDE5Yjg2ZmM=", "commit": {"author": {"name": "Stephane Raux", "email": "stephaneyfx@gmail.com", "date": "2017-09-28T02:43:05Z"}, "committer": {"name": "Stephane Raux", "email": "stephaneyfx@gmail.com", "date": "2017-09-28T02:43:05Z"}, "message": "Made `fs::copy` return the length of the main stream\n\nOn Windows with the NTFS filesystem, `fs::copy` would return the sum of the\nlengths of all streams, which can be different from the length reported by\n`metadata` and thus confusing for users unaware of this NTFS peculiarity.\n\nThis makes `fs::copy` return the same length `metadata` reports which is the\nvalue it used to return before PR #26751. Note that alternate streams are still\ncopied; their length is just not included in the returned value.\n\nThis change relies on the assumption that the stream with index 1 is always the\nmain stream in the `CopyFileEx` callback. I could not find any official\ndocument confirming this but empirical testing has shown this to be true,\nregardless of whether the alternate stream is created before or after the main\nstream.\n\nResolves #44532", "tree": {"sha": "192dd9acb39c9b0db1a241f16d060e8f0e8adb98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/192dd9acb39c9b0db1a241f16d060e8f0e8adb98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61c0c9e5f21f231bca1c5594c2b6616e419b86fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61c0c9e5f21f231bca1c5594c2b6616e419b86fc", "html_url": "https://github.com/rust-lang/rust/commit/61c0c9e5f21f231bca1c5594c2b6616e419b86fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61c0c9e5f21f231bca1c5594c2b6616e419b86fc/comments", "author": {"login": "stephaneyfx", "id": 24405066, "node_id": "MDQ6VXNlcjI0NDA1MDY2", "avatar_url": "https://avatars.githubusercontent.com/u/24405066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stephaneyfx", "html_url": "https://github.com/stephaneyfx", "followers_url": "https://api.github.com/users/stephaneyfx/followers", "following_url": "https://api.github.com/users/stephaneyfx/following{/other_user}", "gists_url": "https://api.github.com/users/stephaneyfx/gists{/gist_id}", "starred_url": "https://api.github.com/users/stephaneyfx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stephaneyfx/subscriptions", "organizations_url": "https://api.github.com/users/stephaneyfx/orgs", "repos_url": "https://api.github.com/users/stephaneyfx/repos", "events_url": "https://api.github.com/users/stephaneyfx/events{/privacy}", "received_events_url": "https://api.github.com/users/stephaneyfx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stephaneyfx", "id": 24405066, "node_id": "MDQ6VXNlcjI0NDA1MDY2", "avatar_url": "https://avatars.githubusercontent.com/u/24405066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stephaneyfx", "html_url": "https://github.com/stephaneyfx", "followers_url": "https://api.github.com/users/stephaneyfx/followers", "following_url": "https://api.github.com/users/stephaneyfx/following{/other_user}", "gists_url": "https://api.github.com/users/stephaneyfx/gists{/gist_id}", "starred_url": "https://api.github.com/users/stephaneyfx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stephaneyfx/subscriptions", "organizations_url": "https://api.github.com/users/stephaneyfx/orgs", "repos_url": "https://api.github.com/users/stephaneyfx/repos", "events_url": "https://api.github.com/users/stephaneyfx/events{/privacy}", "received_events_url": "https://api.github.com/users/stephaneyfx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44d5090a6dbfbcd698ec53ef38981d9747112e0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/44d5090a6dbfbcd698ec53ef38981d9747112e0a", "html_url": "https://github.com/rust-lang/rust/commit/44d5090a6dbfbcd698ec53ef38981d9747112e0a"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "b07733d3c803c474214400cc1592a88b16f82677", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/61c0c9e5f21f231bca1c5594c2b6616e419b86fc/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c0c9e5f21f231bca1c5594c2b6616e419b86fc/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=61c0c9e5f21f231bca1c5594c2b6616e419b86fc", "patch": "@@ -1374,14 +1374,17 @@ pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>\n /// Note that if `from` and `to` both point to the same file, then the file\n /// will likely get truncated by this operation.\n ///\n-/// On success, the total number of bytes copied is returned.\n+/// On success, the total number of bytes copied is returned and it is equal to\n+/// the length of the `to` file as reported by `metadata`.\n ///\n /// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `open` function in Unix\n /// with `O_RDONLY` for `from` and `O_WRONLY`, `O_CREAT`, and `O_TRUNC` for `to`.\n /// `O_CLOEXEC` is set for returned file descriptors.\n-/// On Windows, this function currently corresponds to `CopyFileEx`.\n+/// On Windows, this function currently corresponds to `CopyFileEx`. Alternate\n+/// NTFS streams are copied but only the size of the main stream is returned by\n+/// this function.\n /// Note that, this [may change in the future][changes].\n ///\n /// [changes]: ../io/index.html#platform-specific-behavior\n@@ -2589,13 +2592,25 @@ mod tests {\n     fn copy_file_preserves_streams() {\n         let tmp = tmpdir();\n         check!(check!(File::create(tmp.join(\"in.txt:bunny\"))).write(\"carrot\".as_bytes()));\n-        assert_eq!(check!(fs::copy(tmp.join(\"in.txt\"), tmp.join(\"out.txt\"))), 6);\n+        assert_eq!(check!(fs::copy(tmp.join(\"in.txt\"), tmp.join(\"out.txt\"))), 0);\n         assert_eq!(check!(tmp.join(\"out.txt\").metadata()).len(), 0);\n         let mut v = Vec::new();\n         check!(check!(File::open(tmp.join(\"out.txt:bunny\"))).read_to_end(&mut v));\n         assert_eq!(v, b\"carrot\".to_vec());\n     }\n \n+    #[test]\n+    fn copy_file_returns_metadata_len() {\n+        let tmp = tmpdir();\n+        let in_path = tmp.join(\"in.txt\");\n+        let out_path = tmp.join(\"out.txt\");\n+        check!(check!(File::create(&in_path)).write(b\"lettuce\"));\n+        #[cfg(windows)]\n+        check!(check!(File::create(tmp.join(\"in.txt:bunny\"))).write(b\"carrot\"));\n+        let copied_len = check!(fs::copy(&in_path, &out_path));\n+        assert_eq!(check!(out_path.metadata()).len(), copied_len);\n+    }\n+\n     #[test]\n     fn symlinks_work() {\n         let tmpdir = tmpdir();"}, {"sha": "ae9535139d997170e303dcae829fe2abf02a92d9", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61c0c9e5f21f231bca1c5594c2b6616e419b86fc/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c0c9e5f21f231bca1c5594c2b6616e419b86fc/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=61c0c9e5f21f231bca1c5594c2b6616e419b86fc", "patch": "@@ -722,16 +722,16 @@ pub fn canonicalize(p: &Path) -> io::Result<PathBuf> {\n pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n     unsafe extern \"system\" fn callback(\n         _TotalFileSize: c::LARGE_INTEGER,\n-        TotalBytesTransferred: c::LARGE_INTEGER,\n+        _TotalBytesTransferred: c::LARGE_INTEGER,\n         _StreamSize: c::LARGE_INTEGER,\n-        _StreamBytesTransferred: c::LARGE_INTEGER,\n-        _dwStreamNumber: c::DWORD,\n+        StreamBytesTransferred: c::LARGE_INTEGER,\n+        dwStreamNumber: c::DWORD,\n         _dwCallbackReason: c::DWORD,\n         _hSourceFile: c::HANDLE,\n         _hDestinationFile: c::HANDLE,\n         lpData: c::LPVOID,\n     ) -> c::DWORD {\n-        *(lpData as *mut i64) = TotalBytesTransferred;\n+        if dwStreamNumber == 1 {*(lpData as *mut i64) = StreamBytesTransferred;}\n         c::PROGRESS_CONTINUE\n     }\n     let pfrom = to_u16s(from)?;"}]}