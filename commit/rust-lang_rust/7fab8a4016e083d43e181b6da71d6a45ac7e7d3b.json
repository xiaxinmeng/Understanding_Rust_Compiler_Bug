{"sha": "7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "node_id": "C_kwDOAAsO6NoAKDdmYWI4YTQwMTZlMDgzZDQzZTE4MWI2ZGE3MWQ2YTQ1YWM3ZTdkM2I", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-07-18T07:39:37Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-07-18T07:39:37Z"}, "message": "Merge commit 'fdb84cbfd25908df5683f8f62388f663d9260e39' into clippyup", "tree": {"sha": "930af9acd45fe7303b694d008d282acf2addb30d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/930af9acd45fe7303b694d008d282acf2addb30d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmLVDj0ACgkQHKDfKvWd\naKUQQxAAsdxcxvNNiUqVy9qP7Kew/Gfx6e4lS9jcroAyh6YqOUO7olh6bQQIAX24\njTS5fHRkGgGxW+Q+Nxj+TSWfqRjrDYzKSPodwRhpQvqLa/7lwZ6FxYUCRWZGkqGC\naN9xZCxUsiC74qBwGdFdIH6puCB6weYWpqbkhnprAQKbGaS3wMEgAXnrsbglHhs7\n3mcPC1Q9N4cq2DcjS1oKEhjAnKKDQBL/HW+P8StaYNDBidgsHu+JWUSixRwt3Y+Z\nOPXc6sbNRAjXpDhtMbdZrMvuXlBoTqa8X5ddL7dxLLPdUJw5IZidVBEINgqWzpSv\nKnPXCuZzq8N0SCF2AfzETXEUEb14qozTFQXySpE9OBmqosdSI1TYtc/cL33oVyjE\nHFJ6LnxHoEQigPzmUaWBVWv2/8R9fBYQZDF9uPiAPToQNEsnanIYA7Pswg69z5Cj\ni89O8ID4J3rfUZOSAcNF9li6xj0rzcYGPAf8vMXzOojL+SVE1DPQ00H5WmekW5TK\nx+TWAEKEtWR4OrSli8EI7BIs9M1V5n0XTQqRkbSK20TxVvtetMRrxrjy8ynnkEzM\nTcQyTCxKKVEGLeSEsXky6VofenpRlHtJafJL13/5FSO5/0xwaKICP8c4tfMVzhPw\n/3lIxPgdGV6mg+01I1srFNP0Mbhi0bHZmOJl8D+kB9USR9M+/mU=\n=V/Wl\n-----END PGP SIGNATURE-----", "payload": "tree 930af9acd45fe7303b694d008d282acf2addb30d\nparent 2fa64d0e53c15e1920bd394500da010a4cdd057b\nparent fdb84cbfd25908df5683f8f62388f663d9260e39\nauthor Philipp Krones <hello@philkrones.com> 1658129977 +0200\ncommitter Philipp Krones <hello@philkrones.com> 1658129977 +0200\n\nMerge commit 'fdb84cbfd25908df5683f8f62388f663d9260e39' into clippyup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "html_url": "https://github.com/rust-lang/rust/commit/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa64d0e53c15e1920bd394500da010a4cdd057b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa64d0e53c15e1920bd394500da010a4cdd057b", "html_url": "https://github.com/rust-lang/rust/commit/2fa64d0e53c15e1920bd394500da010a4cdd057b"}, {"sha": "fdb84cbfd25908df5683f8f62388f663d9260e39", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdb84cbfd25908df5683f8f62388f663d9260e39", "html_url": "https://github.com/rust-lang/rust/commit/fdb84cbfd25908df5683f8f62388f663d9260e39"}], "stats": {"total": 4352, "additions": 3408, "deletions": 944}, "files": [{"sha": "9e49f60892d26490c047173c568d15e9690f82e3", "filename": "src/tools/clippy/.github/PULL_REQUEST_TEMPLATE.md", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2F.github%2FPULL_REQUEST_TEMPLATE.md", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2F.github%2FPULL_REQUEST_TEMPLATE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2FPULL_REQUEST_TEMPLATE.md?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -3,11 +3,15 @@ Thank you for making Clippy better!\n We're collecting our changelog from pull request descriptions.\n If your PR only includes internal changes, you can just write\n `changelog: none`. Otherwise, please write a short comment\n-explaining your change. Also, it's helpful for us that\n-the lint name is put into brackets `[]` and backticks `` ` ` ``,\n-e.g. ``[`lint_name`]``.\n+explaining your change.\n \n-If your PR fixes an issue, you can add \"fixes #issue_number\" into this\n+It's also helpful for us that the lint name is put within backticks (`` ` ` ``),\n+and then encapsulated by square brackets (`[]`), for example:\n+```\n+changelog: [`lint_name`]: your change\n+```\n+\n+If your PR fixes an issue, you can add `fixes #issue_number` into this\n PR description. This way the issue will be automatically closed when\n your PR is merged.\n "}, {"sha": "97453303cd6aae58c0959ede46d21704e254464e", "filename": "src/tools/clippy/.github/workflows/clippy_bors.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy_bors.yml?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -144,7 +144,7 @@ jobs:\n         OS: ${{ runner.os }}\n \n   metadata_collection:\n-    needs: base\n+    needs: changelog\n     runs-on: ubuntu-latest\n \n     steps:\n@@ -264,7 +264,7 @@ jobs:\n     name: bors test finished\n     if: github.event.pusher.name == 'bors' && success()\n     runs-on: ubuntu-latest\n-    needs: [changelog, base, integration_build, integration]\n+    needs: [changelog, base, metadata_collection, integration_build, integration]\n \n     steps:\n       - name: Mark the job as successful\n@@ -274,7 +274,7 @@ jobs:\n     name: bors test finished\n     if: github.event.pusher.name == 'bors' && (failure() || cancelled())\n     runs-on: ubuntu-latest\n-    needs: [changelog, base, integration_build, integration]\n+    needs: [changelog, base, metadata_collection, integration_build, integration]\n \n     steps:\n       - name: Mark the job as a failure"}, {"sha": "920d397add716b742e032d8cdd103d59b94007a2", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 168, "deletions": 7, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,16 +1,173 @@\n # Changelog\n \n All notable changes to this project will be documented in this file.\n-See [Changelog Update](doc/changelog_update.md) if you want to update this\n+See [Changelog Update](book/src/development/infrastructure/changelog_update.md) if you want to update this\n document.\n \n ## Unreleased / In Rust Nightly\n \n-[d0cf3481...master](https://github.com/rust-lang/rust-clippy/compare/d0cf3481...master)\n+[7c21f91b...master](https://github.com/rust-lang/rust-clippy/compare/7c21f91b...master)\n+\n+## Rust 1.62\n+\n+Current stable, released 2022-06-30\n+\n+[d0cf3481...7c21f91b](https://github.com/rust-lang/rust-clippy/compare/d0cf3481...7c21f91b)\n+\n+### New Lints\n+\n+* [`large_include_file`]\n+  [#8727](https://github.com/rust-lang/rust-clippy/pull/8727)\n+* [`cast_abs_to_unsigned`]\n+  [#8635](https://github.com/rust-lang/rust-clippy/pull/8635)\n+* [`err_expect`]\n+  [#8606](https://github.com/rust-lang/rust-clippy/pull/8606)\n+* [`unnecessary_owned_empty_strings`]\n+  [#8660](https://github.com/rust-lang/rust-clippy/pull/8660)\n+* [`empty_structs_with_brackets`]\n+  [#8594](https://github.com/rust-lang/rust-clippy/pull/8594)\n+* [`crate_in_macro_def`]\n+  [#8576](https://github.com/rust-lang/rust-clippy/pull/8576)\n+* [`needless_option_take`]\n+  [#8665](https://github.com/rust-lang/rust-clippy/pull/8665)\n+* [`bytes_count_to_len`]\n+  [#8711](https://github.com/rust-lang/rust-clippy/pull/8711)\n+* [`is_digit_ascii_radix`]\n+  [#8624](https://github.com/rust-lang/rust-clippy/pull/8624)\n+* [`await_holding_invalid_type`]\n+  [#8707](https://github.com/rust-lang/rust-clippy/pull/8707)\n+* [`trim_split_whitespace`]\n+  [#8575](https://github.com/rust-lang/rust-clippy/pull/8575)\n+* [`pub_use`]\n+  [#8670](https://github.com/rust-lang/rust-clippy/pull/8670)\n+* [`format_push_string`]\n+  [#8626](https://github.com/rust-lang/rust-clippy/pull/8626)\n+* [`empty_drop`]\n+  [#8571](https://github.com/rust-lang/rust-clippy/pull/8571)\n+* [`drop_non_drop`]\n+  [#8630](https://github.com/rust-lang/rust-clippy/pull/8630)\n+* [`forget_non_drop`]\n+  [#8630](https://github.com/rust-lang/rust-clippy/pull/8630)\n+\n+### Moves and Deprecations\n+\n+* Move [`only_used_in_recursion`] to `nursery` (now allow-by-default)\n+  [#8783](https://github.com/rust-lang/rust-clippy/pull/8783)\n+* Move [`stable_sort_primitive`] to `pedantic` (now allow-by-default)\n+  [#8716](https://github.com/rust-lang/rust-clippy/pull/8716)\n+\n+### Enhancements\n+\n+* Remove overlap between [`manual_split_once`] and [`needless_splitn`]\n+  [#8631](https://github.com/rust-lang/rust-clippy/pull/8631)\n+* [`map_identity`]: Now checks for needless `map_err`\n+  [#8487](https://github.com/rust-lang/rust-clippy/pull/8487)\n+* [`extra_unused_lifetimes`]: Now checks for impl lifetimes\n+  [#8737](https://github.com/rust-lang/rust-clippy/pull/8737)\n+* [`cast_possible_truncation`]: Now catches more cases with larger shift or divide operations\n+  [#8687](https://github.com/rust-lang/rust-clippy/pull/8687)\n+* [`identity_op`]: Now checks for modulo expressions\n+  [#8519](https://github.com/rust-lang/rust-clippy/pull/8519)\n+* [`panic`]: No longer lint in constant context\n+  [#8592](https://github.com/rust-lang/rust-clippy/pull/8592)\n+* [`manual_split_once`]: Now lints manual iteration of `splitn`\n+  [#8717](https://github.com/rust-lang/rust-clippy/pull/8717)\n+* [`self_named_module_files`], [`mod_module_files`]: Now handle relative module paths\n+  [#8611](https://github.com/rust-lang/rust-clippy/pull/8611)\n+* [`unsound_collection_transmute`]: Now has better size and alignment checks\n+  [#8648](https://github.com/rust-lang/rust-clippy/pull/8648)\n+* [`unnested_or_patterns`]: Ignore cases, where the suggestion would be longer\n+  [#8619](https://github.com/rust-lang/rust-clippy/pull/8619)\n+\n+### False Positive Fixes\n+\n+* [`rest_pat_in_fully_bound_structs`]: Now ignores structs marked with `#[non_exhaustive]`\n+  [#8690](https://github.com/rust-lang/rust-clippy/pull/8690)\n+* [`needless_late_init`]: No longer lints `if let` statements, `let mut` bindings or instances that\n+  changes the drop order significantly\n+  [#8617](https://github.com/rust-lang/rust-clippy/pull/8617)\n+* [`unnecessary_cast`]: No longer lints to casts to aliased or non-primitive types\n+  [#8596](https://github.com/rust-lang/rust-clippy/pull/8596)\n+* [`init_numbered_fields`]: No longer lints type aliases\n+  [#8780](https://github.com/rust-lang/rust-clippy/pull/8780)\n+* [`needless_option_as_deref`]: No longer lints for `as_deref_mut` on `Option` values that can't be moved\n+  [#8646](https://github.com/rust-lang/rust-clippy/pull/8646)\n+* [`mistyped_literal_suffixes`]: Now ignores float literals without an exponent\n+  [#8742](https://github.com/rust-lang/rust-clippy/pull/8742)\n+* [`undocumented_unsafe_blocks`]: Now ignores unsafe blocks from proc-macros and works better for sub-expressions\n+  [#8450](https://github.com/rust-lang/rust-clippy/pull/8450)\n+* [`same_functions_in_if_condition`]: Now allows different constants, even if they have the same value\n+  [#8673](https://github.com/rust-lang/rust-clippy/pull/8673)\n+* [`needless_match`]: Now checks for more complex types and ignores type coercion\n+  [#8549](https://github.com/rust-lang/rust-clippy/pull/8549)\n+* [`assertions_on_constants`]: Now ignores constants from `cfg!` macros\n+  [#8614](https://github.com/rust-lang/rust-clippy/pull/8614)\n+* [`indexing_slicing`]: Fix false positives with constant indices in\n+  [#8588](https://github.com/rust-lang/rust-clippy/pull/8588)\n+* [`iter_with_drain`]: Now ignores iterator references\n+  [#8668](https://github.com/rust-lang/rust-clippy/pull/8668)\n+* [`useless_attribute`]: Now allows [`redundant_pub_crate`] on `use` items\n+  [#8743](https://github.com/rust-lang/rust-clippy/pull/8743)\n+* [`cast_ptr_alignment`]: Now ignores expressions, when used for unaligned reads and writes\n+  [#8632](https://github.com/rust-lang/rust-clippy/pull/8632)\n+* [`wrong_self_convention`]: Now allows `&mut self` and no self as arguments for `is_*` methods\n+  [#8738](https://github.com/rust-lang/rust-clippy/pull/8738)\n+* [`mut_from_ref`]: Only lint in unsafe code\n+  [#8647](https://github.com/rust-lang/rust-clippy/pull/8647)\n+* [`redundant_pub_crate`]: Now allows macro exports\n+  [#8736](https://github.com/rust-lang/rust-clippy/pull/8736)\n+* [`needless_match`]: Ignores cases where the else block expression is different\n+  [#8700](https://github.com/rust-lang/rust-clippy/pull/8700)\n+* [`transmute_int_to_char`]: Now allows transmutations in `const` code\n+  [#8610](https://github.com/rust-lang/rust-clippy/pull/8610)\n+* [`manual_non_exhaustive`]: Ignores cases, where the enum value is used\n+  [#8645](https://github.com/rust-lang/rust-clippy/pull/8645)\n+* [`redundant_closure`]: Now ignores coerced closure\n+  [#8431](https://github.com/rust-lang/rust-clippy/pull/8431)\n+* [`identity_op`]: Is now ignored in cases where extra brackets would be needed\n+  [#8730](https://github.com/rust-lang/rust-clippy/pull/8730)\n+* [`let_unit_value`]: Now ignores cases which are used for type inference\n+  [#8563](https://github.com/rust-lang/rust-clippy/pull/8563)\n+\n+### Suggestion Fixes/Improvements\n+\n+* [`manual_split_once`]: Fixed incorrect suggestions for single result accesses\n+  [#8631](https://github.com/rust-lang/rust-clippy/pull/8631)\n+* [`bytes_nth`]: Fix typos in the diagnostic message\n+  [#8403](https://github.com/rust-lang/rust-clippy/pull/8403)\n+* [`mistyped_literal_suffixes`]: Now suggests the correct integer types\n+  [#8742](https://github.com/rust-lang/rust-clippy/pull/8742)\n+* [`unnecessary_to_owned`]: Fixed suggestion based on the configured msrv\n+  [#8692](https://github.com/rust-lang/rust-clippy/pull/8692)\n+* [`single_element_loop`]: Improve lint for Edition 2021 arrays\n+  [#8616](https://github.com/rust-lang/rust-clippy/pull/8616)\n+* [`manual_bits`]: Now includes a cast for proper type conversion, when needed\n+  [#8677](https://github.com/rust-lang/rust-clippy/pull/8677)\n+* [`option_map_unit_fn`], [`result_map_unit_fn`]: Fix some incorrect suggestions\n+  [#8584](https://github.com/rust-lang/rust-clippy/pull/8584)\n+* [`collapsible_else_if`]: Add whitespace in suggestion\n+  [#8729](https://github.com/rust-lang/rust-clippy/pull/8729)\n+* [`transmute_bytes_to_str`]: Now suggest `from_utf8_unchecked` in `const` context\n+  [#8612](https://github.com/rust-lang/rust-clippy/pull/8612)\n+* [`map_clone`]: Improve message and suggestion based on the msrv\n+  [#8688](https://github.com/rust-lang/rust-clippy/pull/8688)\n+* [`needless_late_init`]: Now shows the `let` statement where it was first initialized\n+  [#8779](https://github.com/rust-lang/rust-clippy/pull/8779)\n+\n+### ICE Fixes\n+\n+* [`only_used_in_recursion`]\n+  [#8691](https://github.com/rust-lang/rust-clippy/pull/8691)\n+* [`cast_slice_different_sizes`]\n+  [#8720](https://github.com/rust-lang/rust-clippy/pull/8720)\n+* [`iter_overeager_cloned`]\n+  [#8602](https://github.com/rust-lang/rust-clippy/pull/8602)\n+* [`undocumented_unsafe_blocks`]\n+  [#8686](https://github.com/rust-lang/rust-clippy/pull/8686)\n \n ## Rust 1.61\n \n-Current stable, released 2022-05-19\n+Released 2022-05-19\n \n [57b3c4b...d0cf3481](https://github.com/rust-lang/rust-clippy/compare/57b3c4b...d0cf3481)\n \n@@ -207,7 +364,7 @@ Released 2022-04-07\n \n * [`needless_borrow`]: Prevent mutable borrows being moved and suggest removing the borrow on method calls\n   [#8217](https://github.com/rust-lang/rust-clippy/pull/8217)\n-* [`chars_next_cmp`]: Correctly excapes the suggestion\n+* [`chars_next_cmp`]: Correctly escapes the suggestion\n   [#8376](https://github.com/rust-lang/rust-clippy/pull/8376)\n * [`explicit_write`]: Add suggestions for `write!`s with format arguments\n   [#8365](https://github.com/rust-lang/rust-clippy/pull/8365)\n@@ -1420,7 +1577,7 @@ Released 2021-03-25\n * Add `cargo dev-lintcheck` tool to the Clippy Dev Tool\n   [#6469](https://github.com/rust-lang/rust-clippy/pull/6469)\n \n-[Roadmap]: https://github.com/rust-lang/rust-clippy/blob/master/doc/roadmap-2021.md\n+[Roadmap]: https://github.com/rust-lang/rust-clippy/blob/master/book/src/development/proposals/roadmap-2021.md\n [Roadmap project page]: https://github.com/rust-lang/rust-clippy/projects/3\n \n ## Rust 1.50\n@@ -2368,7 +2525,7 @@ Released 2019-09-26\n   * [`inherent_to_string_shadow_display`] [#4259](https://github.com/rust-lang/rust-clippy/pull/4259)\n   * [`type_repetition_in_bounds`] [#3766](https://github.com/rust-lang/rust-clippy/pull/3766)\n   * [`try_err`] [#4222](https://github.com/rust-lang/rust-clippy/pull/4222)\n-* Move `{unnnecessary,panicking}_unwrap` out of nursery [#4307](https://github.com/rust-lang/rust-clippy/pull/4307)\n+* Move `{unnecessary,panicking}_unwrap` out of nursery [#4307](https://github.com/rust-lang/rust-clippy/pull/4307)\n * Extend the `use_self` lint to suggest uses of `Self::Variant` [#4308](https://github.com/rust-lang/rust-clippy/pull/4308)\n * Improve suggestion for needless return [#4262](https://github.com/rust-lang/rust-clippy/pull/4262)\n * Add auto-fixable suggestion for `let_unit` [#4337](https://github.com/rust-lang/rust-clippy/pull/4337)\n@@ -3269,12 +3426,13 @@ Released 2018-09-13\n [`AsRef`]: https://doc.rust-lang.org/std/convert/trait.AsRef.html\n [configuration file]: ./rust-clippy#configuration\n [pull3665]: https://github.com/rust-lang/rust-clippy/pull/3665\n-[adding_lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n+[adding_lints]: https://github.com/rust-lang/rust-clippy/blob/master/book/src/development/adding_lints.md\n [`README.md`]: https://github.com/rust-lang/rust-clippy/blob/master/README.md\n \n <!-- lint disable no-unused-definitions -->\n <!-- begin autogenerated links to lint list -->\n [`absurd_extreme_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons\n+[`alloc_instead_of_core`]: https://rust-lang.github.io/rust-clippy/master/index.html#alloc_instead_of_core\n [`allow_attributes_without_reason`]: https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\n [`almost_complete_letter_range`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_letter_range\n [`almost_swapped`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_swapped\n@@ -3484,6 +3642,7 @@ Released 2018-09-13\n [`invalid_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_ref\n [`invalid_regex`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_regex\n [`invalid_upcast_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_upcast_comparisons\n+[`invalid_utf8_in_unchecked`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_utf8_in_unchecked\n [`invisible_characters`]: https://rust-lang.github.io/rust-clippy/master/index.html#invisible_characters\n [`is_digit_ascii_radix`]: https://rust-lang.github.io/rust-clippy/master/index.html#is_digit_ascii_radix\n [`items_after_statements`]: https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements\n@@ -3743,6 +3902,8 @@ Released 2018-09-13\n [`skip_while_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#skip_while_next\n [`slow_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization\n [`stable_sort_primitive`]: https://rust-lang.github.io/rust-clippy/master/index.html#stable_sort_primitive\n+[`std_instead_of_alloc`]: https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_alloc\n+[`std_instead_of_core`]: https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core\n [`str_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\n [`string_add`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_add\n [`string_add_assign`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_add_assign"}, {"sha": "6e15133d267ba04cfa304a2f7f73b909cfa4fee7", "filename": "src/tools/clippy/CONTRIBUTING.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCONTRIBUTING.md?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -16,7 +16,6 @@ All contributors are expected to follow the [Rust Code of Conduct].\n   - [The Clippy book](#the-clippy-book)\n   - [High level approach](#high-level-approach)\n   - [Finding something to fix/improve](#finding-something-to-fiximprove)\n-  - [Writing code](#writing-code)\n   - [Getting code-completion for rustc internals to work](#getting-code-completion-for-rustc-internals-to-work)\n     - [IntelliJ Rust](#intellij-rust)\n     - [Rust Analyzer](#rust-analyzer)\n@@ -115,11 +114,11 @@ As of [#6869][6869], [`rust-analyzer`][ra_homepage] can understand that Clippy u\n using `extern crate` when `package.metadata.rust-analyzer.rustc_private` is set to `true` in Clippy's `Cargo.toml.`\n You will require a `nightly` toolchain with the `rustc-dev` component installed.\n Make sure that in the `rust-analyzer` configuration, you set\n-```\n-{ \"rust-analyzer.rustcSource\": \"discover\" }\n+```json\n+{ \"rust-analyzer.rustc.source\": \"discover\" }\n ```\n and\n-```\n+```json\n { \"rust-analyzer.updates.channel\": \"nightly\" }\n ```\n You should be able to see information on things like `Expr` or `EarlyContext` now if you hover them, also"}, {"sha": "6d67f80ff256520d73cfe2f5198485d6e07a329c", "filename": "src/tools/clippy/book/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fbook%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fbook%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2FREADME.md?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,4 +1,4 @@\n # Clippy Book\n \n This is the source for the Clippy Book. See the\n-[book](src/infrastructure/book.md) for more information.\n+[book](src/development/infrastructure/book.md) for more information."}, {"sha": "44ba6e32755e319b24d5797c0b95c42baddaad20", "filename": "src/tools/clippy/book/src/development/basics.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fbasics.md?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -4,8 +4,8 @@ This document explains the basics for hacking on Clippy. Besides others, this\n includes how to build and test Clippy. For a more in depth description on the\n codebase take a look at [Adding Lints] or [Common Tools].\n \n-[Adding Lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n-[Common Tools]: https://github.com/rust-lang/rust-clippy/blob/master/doc/common_tools_writing_lints.md\n+[Adding Lints]: https://github.com/rust-lang/rust-clippy/blob/master/book/src/development/adding_lints.md\n+[Common Tools]: https://github.com/rust-lang/rust-clippy/blob/master/book/src/development/common_tools_writing_lints.md\n \n - [Basics for hacking on Clippy](#basics-for-hacking-on-clippy)\n   - [Get the Code](#get-the-code)\n@@ -59,7 +59,7 @@ cargo uitest\n # only run UI tests starting with `test_`\n TESTNAME=\"test_\" cargo uitest\n # only run dogfood tests\n-cargo test --test dogfood\n+cargo dev dogfood\n ```\n \n If the output of a [UI test] differs from the expected output, you can update\n@@ -91,10 +91,14 @@ cargo dev fmt\n cargo dev update_lints\n # create a new lint and register it\n cargo dev new_lint\n+# deprecate a lint and attempt to remove code relating to it\n+cargo dev deprecate\n # automatically formatting all code before each commit\n cargo dev setup git-hook\n # (experimental) Setup Clippy to work with IntelliJ-Rust\n cargo dev setup intellij\n+# runs the `dogfood` tests\n+cargo dev dogfood\n ```\n \n More about intellij command usage and reasons"}, {"sha": "80a47affe30d0c5eae3cfd392e527f129b59b4bb", "filename": "src/tools/clippy/book/src/development/infrastructure/changelog_update.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Finfrastructure%2Fchangelog_update.md", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Finfrastructure%2Fchangelog_update.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Finfrastructure%2Fchangelog_update.md?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -95,6 +95,9 @@ As section headers, we use:\n Please also be sure to update the Beta/Unreleased sections at the top with the\n relevant commit ranges.\n \n+If you have the time, it would be appreciated if you double-check, that the\n+`#[clippy::version]` attributes for the added lints contains the correct version.\n+\n [changelog]: https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md\n [forge]: https://forge.rust-lang.org/\n [rust_master_tools]: https://github.com/rust-lang/rust/tree/master/src/tools/clippy"}, {"sha": "61a90445d753c6b6f3d5b6be7a0ebf4b7e6d9150", "filename": "src/tools/clippy/book/src/usage.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fusage.md?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -56,7 +56,7 @@ For more information on configuring lint levels, see the [rustc documentation].\n Clippy has lint groups which are allow-by-default. This means, that you will\n have to enable the lints in those groups manually.\n \n-For a full list of all lints with their description and examples, please refere\n+For a full list of all lints with their description and examples, please refer\n to [Clippy's lint list]. The two most important allow-by-default groups are\n described below:\n "}, {"sha": "b69e9f649ec78c1c26f85d9b93f64b635b9ae9d8", "filename": "src/tools/clippy/clippy_dev/src/dogfood.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fdogfood.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -0,0 +1,33 @@\n+use crate::clippy_project_root;\n+use std::process::Command;\n+\n+/// # Panics\n+///\n+/// Panics if unable to run the dogfood test\n+pub fn dogfood(fix: bool, allow_dirty: bool, allow_staged: bool) {\n+    let mut cmd = Command::new(\"cargo\");\n+\n+    cmd.current_dir(clippy_project_root())\n+        .args([\"test\", \"--test\", \"dogfood\"])\n+        .args([\"--features\", \"internal\"])\n+        .args([\"--\", \"dogfood_clippy\"]);\n+\n+    let mut dogfood_args = Vec::new();\n+    if fix {\n+        dogfood_args.push(\"--fix\");\n+    }\n+\n+    if allow_dirty {\n+        dogfood_args.push(\"--allow-dirty\");\n+    }\n+\n+    if allow_staged {\n+        dogfood_args.push(\"--allow-staged\");\n+    }\n+\n+    cmd.env(\"__CLIPPY_DOGFOOD_ARGS\", dogfood_args.join(\" \"));\n+\n+    let output = cmd.output().expect(\"failed to run command\");\n+\n+    println!(\"{}\", String::from_utf8_lossy(&output.stdout));\n+}"}, {"sha": "8536e2429926a6b9b726b4498db635cfd64a2b1d", "filename": "src/tools/clippy/clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -11,6 +11,7 @@ extern crate rustc_lexer;\n use std::path::PathBuf;\n \n pub mod bless;\n+pub mod dogfood;\n pub mod fmt;\n pub mod lint;\n pub mod new_lint;"}, {"sha": "a29ba2d0c85e34c4bf62da43a655381955dab95d", "filename": "src/tools/clippy/clippy_dev/src/main.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -3,7 +3,7 @@\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n use clap::{Arg, ArgAction, ArgMatches, Command, PossibleValue};\n-use clippy_dev::{bless, fmt, lint, new_lint, serve, setup, update_lints};\n+use clippy_dev::{bless, dogfood, fmt, lint, new_lint, serve, setup, update_lints};\n use indoc::indoc;\n \n fn main() {\n@@ -13,6 +13,13 @@ fn main() {\n         Some((\"bless\", matches)) => {\n             bless::bless(matches.contains_id(\"ignore-timestamp\"));\n         },\n+        Some((\"dogfood\", matches)) => {\n+            dogfood::dogfood(\n+                matches.contains_id(\"fix\"),\n+                matches.contains_id(\"allow-dirty\"),\n+                matches.contains_id(\"allow-staged\"),\n+            );\n+        },\n         Some((\"fmt\", matches)) => {\n             fmt::run(matches.contains_id(\"check\"), matches.contains_id(\"verbose\"));\n         },\n@@ -104,6 +111,17 @@ fn get_clap_config() -> ArgMatches {\n                     .long(\"ignore-timestamp\")\n                     .help(\"Include files updated before clippy was built\"),\n             ),\n+            Command::new(\"dogfood\").about(\"Runs the dogfood test\").args([\n+                Arg::new(\"fix\").long(\"fix\").help(\"Apply the suggestions when possible\"),\n+                Arg::new(\"allow-dirty\")\n+                    .long(\"allow-dirty\")\n+                    .help(\"Fix code even if the working directory has changes\")\n+                    .requires(\"fix\"),\n+                Arg::new(\"allow-staged\")\n+                    .long(\"allow-staged\")\n+                    .help(\"Fix code even if the working directory has staged changes\")\n+                    .requires(\"fix\"),\n+            ]),\n             Command::new(\"fmt\")\n                 .about(\"Run rustfmt on all projects and tests\")\n                 .args(["}, {"sha": "c089f4d8ce4bb2c3f9757351b44fdd999f338242", "filename": "src/tools/clippy/clippy_dev/src/update_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fupdate_lints.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -553,7 +553,7 @@ fn replace_ident_like(contents: &str, replacements: &[(&str, &str)]) -> Option<S\n         pos = m.end();\n     }\n     result.push_str(&contents[pos..]);\n-    edited.then(|| result)\n+    edited.then_some(result)\n }\n \n fn round_to_fifty(count: usize) -> usize {"}, {"sha": "1761360fb2812c8fdda7afe736d07f742d309e68", "filename": "src/tools/clippy/clippy_lints/src/await_holding_invalid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fawait_holding_invalid.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -161,7 +161,7 @@ declare_clippy_lint! {\n     ///   baz().await; // Lint violation\n     /// }\n     /// ```\n-    #[clippy::version = \"1.49.0\"]\n+    #[clippy::version = \"1.62.0\"]\n     pub AWAIT_HOLDING_INVALID_TYPE,\n     suspicious,\n     \"holding a type across an await point which is not allowed to be held as per the configuration\""}, {"sha": "937765b66147912aa6c9172a2b61b4369f91cbec", "filename": "src/tools/clippy/clippy_lints/src/borrow_deref_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fborrow_deref_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fborrow_deref_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fborrow_deref_ref.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -22,7 +22,7 @@ declare_clippy_lint! {\n     /// ```\n     /// let x = &12;\n     /// let addr_x = &x as *const _ as usize;\n-    /// let addr_y = &&*x as *const _ as usize; // assert ok now, and lint triggerd.\n+    /// let addr_y = &&*x as *const _ as usize; // assert ok now, and lint triggered.\n     ///                                         // But if we fix it, assert will fail.\n     /// assert_ne!(addr_x, addr_y);\n     /// ```"}, {"sha": "af3798a0cc8c068520c2efad604a4947fb1c3079", "filename": "src/tools/clippy/clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -500,7 +500,7 @@ declare_clippy_lint! {\n     /// let x: i32 = -42;\n     /// let y: u32 = x.unsigned_abs();\n     /// ```\n-    #[clippy::version = \"1.61.0\"]\n+    #[clippy::version = \"1.62.0\"]\n     pub CAST_ABS_TO_UNSIGNED,\n     suspicious,\n     \"casting the result of `abs()` to an unsigned integer can panic\""}, {"sha": "0e3d9317590f3c80782c517e5c64fc66019dc40d", "filename": "src/tools/clippy/clippy_lints/src/copies.rs", "status": "modified", "additions": 58, "deletions": 6, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,13 +1,16 @@\n use clippy_utils::diagnostics::{span_lint_and_note, span_lint_and_then};\n use clippy_utils::source::{first_line_of_span, indent_of, reindent_multiline, snippet, snippet_opt};\n+use clippy_utils::ty::needs_ordered_drop;\n+use clippy_utils::visitors::for_each_expr;\n use clippy_utils::{\n-    eq_expr_value, get_enclosing_block, hash_expr, hash_stmt, if_sequence, is_else_clause, is_lint_allowed,\n-    search_same, ContainsName, HirEqInterExpr, SpanlessEq,\n+    capture_local_usage, eq_expr_value, get_enclosing_block, hash_expr, hash_stmt, if_sequence, is_else_clause,\n+    is_lint_allowed, path_to_local, search_same, ContainsName, HirEqInterExpr, SpanlessEq,\n };\n use core::iter;\n+use core::ops::ControlFlow;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit;\n-use rustc_hir::{BinOpKind, Block, Expr, ExprKind, HirId, Stmt, StmtKind};\n+use rustc_hir::{BinOpKind, Block, Expr, ExprKind, HirId, HirIdSet, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::walk_chain;\n@@ -214,7 +217,7 @@ fn lint_if_same_then_else(cx: &LateContext<'_>, conds: &[&Expr<'_>], blocks: &[&\n fn lint_branches_sharing_code<'tcx>(\n     cx: &LateContext<'tcx>,\n     conds: &[&'tcx Expr<'_>],\n-    blocks: &[&Block<'tcx>],\n+    blocks: &[&'tcx Block<'_>],\n     expr: &'tcx Expr<'_>,\n ) {\n     // We only lint ifs with multiple blocks\n@@ -340,6 +343,21 @@ fn eq_binding_names(s: &Stmt<'_>, names: &[(HirId, Symbol)]) -> bool {\n     }\n }\n \n+/// Checks if the statement modifies or moves any of the given locals.\n+fn modifies_any_local<'tcx>(cx: &LateContext<'tcx>, s: &'tcx Stmt<'_>, locals: &HirIdSet) -> bool {\n+    for_each_expr(s, |e| {\n+        if let Some(id) = path_to_local(e)\n+            && locals.contains(&id)\n+            && !capture_local_usage(cx, e).is_imm_ref()\n+        {\n+            ControlFlow::Break(())\n+        } else {\n+            ControlFlow::Continue(())\n+        }\n+    })\n+    .is_some()\n+}\n+\n /// Checks if the given statement should be considered equal to the statement in the same position\n /// for each block.\n fn eq_stmts(\n@@ -365,18 +383,52 @@ fn eq_stmts(\n         .all(|b| get_stmt(b).map_or(false, |s| eq.eq_stmt(s, stmt)))\n }\n \n-fn scan_block_for_eq(cx: &LateContext<'_>, _conds: &[&Expr<'_>], block: &Block<'_>, blocks: &[&Block<'_>]) -> BlockEq {\n+#[expect(clippy::too_many_lines)]\n+fn scan_block_for_eq<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    conds: &[&'tcx Expr<'_>],\n+    block: &'tcx Block<'_>,\n+    blocks: &[&'tcx Block<'_>],\n+) -> BlockEq {\n     let mut eq = SpanlessEq::new(cx);\n     let mut eq = eq.inter_expr();\n     let mut moved_locals = Vec::new();\n \n+    let mut cond_locals = HirIdSet::default();\n+    for &cond in conds {\n+        let _: Option<!> = for_each_expr(cond, |e| {\n+            if let Some(id) = path_to_local(e) {\n+                cond_locals.insert(id);\n+            }\n+            ControlFlow::Continue(())\n+        });\n+    }\n+\n+    let mut local_needs_ordered_drop = false;\n     let start_end_eq = block\n         .stmts\n         .iter()\n         .enumerate()\n-        .find(|&(i, stmt)| !eq_stmts(stmt, blocks, |b| b.stmts.get(i), &mut eq, &mut moved_locals))\n+        .find(|&(i, stmt)| {\n+            if let StmtKind::Local(l) = stmt.kind\n+                && needs_ordered_drop(cx, cx.typeck_results().node_type(l.hir_id))\n+            {\n+                local_needs_ordered_drop = true;\n+                return true;\n+            }\n+            modifies_any_local(cx, stmt, &cond_locals)\n+                || !eq_stmts(stmt, blocks, |b| b.stmts.get(i), &mut eq, &mut moved_locals)\n+        })\n         .map_or(block.stmts.len(), |(i, _)| i);\n \n+    if local_needs_ordered_drop {\n+        return BlockEq {\n+            start_end_eq,\n+            end_begin_eq: None,\n+            moved_locals,\n+        };\n+    }\n+\n     // Walk backwards through the final expression/statements so long as their hashes are equal. Note\n     // `SpanlessHash` treats all local references as equal allowing locals declared earlier in the block\n     // to match those in other blocks. e.g. If each block ends with the following the hash value will be"}, {"sha": "f6ec8fe7edc1914674d6e70eccf5c45711b9ad68", "filename": "src/tools/clippy/clippy_lints/src/crate_in_macro_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcrate_in_macro_def.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -43,7 +43,7 @@ declare_clippy_lint! {\n     /// #[allow(clippy::crate_in_macro_def)]\n     /// macro_rules! ok { ... crate::foo ... }\n     /// ```\n-    #[clippy::version = \"1.61.0\"]\n+    #[clippy::version = \"1.62.0\"]\n     pub CRATE_IN_MACRO_DEF,\n     suspicious,\n     \"using `crate` in a macro definition\""}, {"sha": "8c7cf7748be1359440197d3692fb6daaf677c024", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -8,8 +8,8 @@ use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_ty, Visitor};\n use rustc_hir::{\n-    self as hir, BindingAnnotation, Body, BodyId, BorrowKind, Expr, ExprKind, GenericArg, HirId, ImplItem,\n-    ImplItemKind, Item, ItemKind, Local, MatchSource, Mutability, Node, Pat, PatKind, Path, QPath, TraitItem,\n+    self as hir, BindingAnnotation, Body, BodyId, BorrowKind, Closure, Expr, ExprKind, FnRetTy, GenericArg, HirId,\n+    ImplItem, ImplItemKind, Item, ItemKind, Local, MatchSource, Mutability, Node, Pat, PatKind, Path, QPath, TraitItem,\n     TraitItemKind, TyKind, UnOp,\n };\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -717,20 +717,36 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n \n             Node::Expr(parent) if parent.span.ctxt() == ctxt => match parent.kind {\n                 ExprKind::Ret(_) => {\n-                    let output = cx\n-                        .tcx\n-                        .fn_sig(cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap()))\n-                        .skip_binder()\n-                        .output();\n-                    Some(if !output.is_ref() {\n-                        Position::Other(precedence)\n-                    } else if output.has_placeholders() || output.has_opaque_types() {\n-                        Position::ReborrowStable(precedence)\n-                    } else {\n-                        Position::DerefStable(precedence)\n-                    })\n+                    let owner_id = cx.tcx.hir().body_owner(cx.enclosing_body.unwrap());\n+                    Some(\n+                        if let Node::Expr(Expr {\n+                            kind: ExprKind::Closure(&Closure { fn_decl, .. }),\n+                            ..\n+                        }) = cx.tcx.hir().get(owner_id)\n+                        {\n+                            match fn_decl.output {\n+                                FnRetTy::Return(ty) => binding_ty_auto_deref_stability(ty, precedence),\n+                                FnRetTy::DefaultReturn(_) => Position::Other(precedence),\n+                            }\n+                        } else {\n+                            let output = cx\n+                                .tcx\n+                                .fn_sig(cx.tcx.hir().local_def_id(owner_id))\n+                                .skip_binder()\n+                                .output();\n+                            if !output.is_ref() {\n+                                Position::Other(precedence)\n+                            } else if output.has_placeholders() || output.has_opaque_types() {\n+                                Position::ReborrowStable(precedence)\n+                            } else {\n+                                Position::DerefStable(precedence)\n+                            }\n+                        },\n+                    )\n+                },\n+                ExprKind::Call(func, _) if func.hir_id == child_id => {\n+                    (child_id == e.hir_id).then_some(Position::Callee)\n                 },\n-                ExprKind::Call(func, _) if func.hir_id == child_id => (child_id == e.hir_id).then(|| Position::Callee),\n                 ExprKind::Call(func, args) => args\n                     .iter()\n                     .position(|arg| arg.hir_id == child_id)\n@@ -756,9 +772,14 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n                             } else if let Some(trait_id) = cx.tcx.trait_of_item(id)\n                                 && let arg_ty = cx.tcx.erase_regions(cx.typeck_results().expr_ty_adjusted(e))\n                                 && let ty::Ref(_, sub_ty, _) = *arg_ty.kind()\n-                                && let subs = cx.typeck_results().node_substs_opt(child_id).unwrap_or_else(\n-                                    || cx.tcx.mk_substs([].iter())\n-                                ) && let impl_ty = if cx.tcx.fn_sig(id).skip_binder().inputs()[0].is_ref() {\n+                                && let subs = match cx\n+                                    .typeck_results()\n+                                    .node_substs_opt(parent.hir_id)\n+                                    .and_then(|subs| subs.get(1..))\n+                                {\n+                                    Some(subs) => cx.tcx.mk_substs(subs.iter().copied()),\n+                                    None => cx.tcx.mk_substs([].iter()),\n+                                } && let impl_ty = if cx.tcx.fn_sig(id).skip_binder().inputs()[0].is_ref() {\n                                     // Trait methods taking `&self`\n                                     sub_ty\n                                 } else {"}, {"sha": "a982990e4186c9cc6c2aef5bb9477d9a7b96651a", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -189,7 +189,7 @@ declare_clippy_lint! {\n     ///     i_am_eq_too: Vec<String>,\n     /// }\n     /// ```\n-    #[clippy::version = \"1.62.0\"]\n+    #[clippy::version = \"1.63.0\"]\n     pub DERIVE_PARTIAL_EQ_WITHOUT_EQ,\n     style,\n     \"deriving `PartialEq` on a type that can implement `Eq`, without implementing `Eq`\""}, {"sha": "b35f0b8ca52dafc0fda6c5cde9ddaea8fc19a9f4", "filename": "src/tools/clippy/clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -116,7 +116,7 @@ declare_clippy_lint! {\n     /// let x = Foo;\n     /// std::mem::drop(x);\n     /// ```\n-    #[clippy::version = \"1.61.0\"]\n+    #[clippy::version = \"1.62.0\"]\n     pub DROP_NON_DROP,\n     suspicious,\n     \"call to `std::mem::drop` with a value which does not implement `Drop`\"\n@@ -136,7 +136,7 @@ declare_clippy_lint! {\n     /// let x = Foo;\n     /// std::mem::forget(x);\n     /// ```\n-    #[clippy::version = \"1.61.0\"]\n+    #[clippy::version = \"1.62.0\"]\n     pub FORGET_NON_DROP,\n     suspicious,\n     \"call to `std::mem::forget` with a value which does not implement `Drop`\""}, {"sha": "e1eb3b6324c7820091e7b10dfa23f8c80d6e157a", "filename": "src/tools/clippy/clippy_lints/src/duplicate_mod.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduplicate_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduplicate_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduplicate_mod.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Crate, Inline, Item, ItemKind, ModKind};\n use rustc_errors::MultiSpan;\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext, Level};\n+use rustc_lint::{EarlyContext, EarlyLintPass, Level, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{FileName, Span};\n use std::collections::BTreeMap;\n@@ -79,21 +79,29 @@ impl EarlyLintPass for DuplicateMod {\n     }\n \n     fn check_crate_post(&mut self, cx: &EarlyContext<'_>, _: &Crate) {\n-        for Modules { local_path, spans, lint_levels } in self.modules.values() {\n+        for Modules {\n+            local_path,\n+            spans,\n+            lint_levels,\n+        } in self.modules.values()\n+        {\n             if spans.len() < 2 {\n                 continue;\n             }\n \n             // At this point the lint would be emitted\n             assert_eq!(spans.len(), lint_levels.len());\n-            let spans: Vec<_> = spans.into_iter().zip(lint_levels).filter_map(|(span, lvl)|{\n-                if let Some(id) = lvl.get_expectation_id() {\n-                    cx.fulfill_expectation(id);\n-                }\n+            let spans: Vec<_> = spans\n+                .iter()\n+                .zip(lint_levels)\n+                .filter_map(|(span, lvl)| {\n+                    if let Some(id) = lvl.get_expectation_id() {\n+                        cx.fulfill_expectation(id);\n+                    }\n \n-                (!matches!(lvl, Level::Allow | Level::Expect(_))).then_some(*span)\n-            })\n-            .collect();\n+                    (!matches!(lvl, Level::Allow | Level::Expect(_))).then_some(*span)\n+                })\n+                .collect();\n \n             if spans.len() < 2 {\n                 continue;"}, {"sha": "ec063c0f777e3759313cbc8ae7faf745385d8784", "filename": "src/tools/clippy/clippy_lints/src/empty_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_drop.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -26,7 +26,7 @@ declare_clippy_lint! {\n     /// ```rust\n     /// struct S;\n     /// ```\n-    #[clippy::version = \"1.61.0\"]\n+    #[clippy::version = \"1.62.0\"]\n     pub EMPTY_DROP,\n     restriction,\n     \"empty `Drop` implementations\""}, {"sha": "4e3ae4c9614113f3a1132462d8b70600c8a7f8c9", "filename": "src/tools/clippy/clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -650,7 +650,7 @@ fn find_insert_calls<'tcx>(\n     let allow_insert_closure = s.allow_insert_closure;\n     let is_single_insert = s.is_single_insert;\n     let edits = s.edits;\n-    s.can_use_entry.then(|| InsertSearchResults {\n+    s.can_use_entry.then_some(InsertSearchResults {\n         edits,\n         allow_insert_closure,\n         is_single_insert,"}, {"sha": "fdfb821ac7895becb9fa97f56463dad42f0b7632", "filename": "src/tools/clippy/clippy_lints/src/equatable_if_let.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fequatable_if_let.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -4,7 +4,8 @@ use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Pat, PatKind};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::Ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -67,6 +68,7 @@ fn is_structural_partial_eq<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, other: T\n impl<'tcx> LateLintPass<'tcx> for PatternEquality {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         if_chain! {\n+            if !in_external_macro(cx.sess(), expr.span);\n             if let ExprKind::Let(let_expr) = expr.kind;\n             if unary_pattern(let_expr.pat);\n             let exp_ty = cx.typeck_results().expr_ty(let_expr.init);"}, {"sha": "ebf5ab086dcea7ae6966984ad8810a47c39fcf3a", "filename": "src/tools/clippy/clippy_lints/src/format_push_string.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat_push_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat_push_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat_push_string.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -14,6 +14,12 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     /// Introduces an extra, avoidable heap allocation.\n     ///\n+    /// ### Known problems\n+    /// `format!` returns a `String` but `write!` returns a `Result`.\n+    /// Thus you are forced to ignore the `Err` variant to achieve the same API.\n+    ///\n+    /// While using `write!` in the suggested way should never fail, this isn't necessarily clear to the programmer.\n+    ///\n     /// ### Example\n     /// ```rust\n     /// let mut s = String::new();\n@@ -27,9 +33,9 @@ declare_clippy_lint! {\n     /// let mut s = String::new();\n     /// let _ = write!(s, \"0x{:X}\", 1024);\n     /// ```\n-    #[clippy::version = \"1.61.0\"]\n+    #[clippy::version = \"1.62.0\"]\n     pub FORMAT_PUSH_STRING,\n-    perf,\n+    restriction,\n     \"`format!(..)` appended to existing `String`\"\n }\n declare_lint_pass!(FormatPushString => [FORMAT_PUSH_STRING]);"}, {"sha": "c5abcc462545c935fb8a6b37e678685ce7bf639b", "filename": "src/tools/clippy/clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -127,7 +127,7 @@ fn get_impl_span(cx: &LateContext<'_>, id: LocalDefId) -> Option<Span> {\n         (!span.from_expansion()\n             && impl_item.generics.params.is_empty()\n             && !is_lint_allowed(cx, MULTIPLE_INHERENT_IMPL, id))\n-        .then(|| span)\n+        .then_some(span)\n     } else {\n         None\n     }"}, {"sha": "e0a607f9a95b68391d69d69a76ea2418b5b681bf", "filename": "src/tools/clippy/clippy_lints/src/invalid_utf8_in_unchecked.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -0,0 +1,74 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{match_function_call, paths};\n+use rustc_ast::{BorrowKind, LitKind};\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Spanned;\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `std::str::from_utf8_unchecked` with an invalid UTF-8 literal\n+    ///\n+    /// ### Why is this bad?\n+    /// Creating such a `str` would result in undefined behavior\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # #[allow(unused)]\n+    /// unsafe {\n+    ///     std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub INVALID_UTF8_IN_UNCHECKED,\n+    correctness,\n+    \"using a non UTF-8 literal in `std::std::from_utf8_unchecked`\"\n+}\n+declare_lint_pass!(InvalidUtf8InUnchecked => [INVALID_UTF8_IN_UNCHECKED]);\n+\n+impl<'tcx> LateLintPass<'tcx> for InvalidUtf8InUnchecked {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if let Some([arg]) = match_function_call(cx, expr, &paths::STR_FROM_UTF8_UNCHECKED) {\n+            match &arg.kind {\n+                ExprKind::Lit(Spanned { node: lit, .. }) => {\n+                    if let LitKind::ByteStr(bytes) = &lit\n+                        && std::str::from_utf8(bytes).is_err()\n+                    {\n+                        lint(cx, expr.span);\n+                    }\n+                },\n+                ExprKind::AddrOf(BorrowKind::Ref, _, Expr { kind: ExprKind::Array(args), .. }) => {\n+                    let elements = args.iter().map(|e|{\n+                        match &e.kind {\n+                            ExprKind::Lit(Spanned { node: lit, .. }) => match lit {\n+                                LitKind::Byte(b) => Some(*b),\n+                                #[allow(clippy::cast_possible_truncation)]\n+                                LitKind::Int(b, _) => Some(*b as u8),\n+                                _ => None\n+                            }\n+                            _ => None\n+                        }\n+                    }).collect::<Option<Vec<_>>>();\n+\n+                    if let Some(elements) = elements\n+                        && std::str::from_utf8(&elements).is_err()\n+                    {\n+                        lint(cx, expr.span);\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+}\n+\n+fn lint(cx: &LateContext<'_>, span: Span) {\n+    span_lint(\n+        cx,\n+        INVALID_UTF8_IN_UNCHECKED,\n+        span,\n+        \"non UTF-8 literal in `std::str::from_utf8_unchecked`\",\n+    );\n+}"}, {"sha": "c58df126d62442a056d63437518699c3d189012c", "filename": "src/tools/clippy/clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -30,7 +30,7 @@ declare_clippy_lint! {\n     /// For types that implement `Copy`, the suggestion to `Box` a variant's\n     /// data would require removing the trait impl. The types can of course\n     /// still be `Clone`, but that is worse ergonomically. Depending on the\n-    /// use case it may be possible to store the large data in an auxillary\n+    /// use case it may be possible to store the large data in an auxiliary\n     /// structure (e.g. Arena or ECS).\n     ///\n     /// The lint will ignore generic types if the layout depends on the"}, {"sha": "9afc714b11ca1613c2dea5936e022703707b1515", "filename": "src/tools/clippy/clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -71,7 +71,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(format_args::TO_STRING_IN_FORMAT_ARGS),\n     LintId::of(format_impl::PRINT_IN_FORMAT_IMPL),\n     LintId::of(format_impl::RECURSIVE_FORMAT_IMPL),\n-    LintId::of(format_push_string::FORMAT_PUSH_STRING),\n     LintId::of(formatting::POSSIBLE_MISSING_COMMA),\n     LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n     LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n@@ -92,6 +91,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(init_numbered_fields::INIT_NUMBERED_FIELDS),\n     LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n     LintId::of(int_plus_one::INT_PLUS_ONE),\n+    LintId::of(invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED),\n     LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n     LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n     LintId::of(len_zero::COMPARISON_TO_EMPTY),"}, {"sha": "9975859c54fea5a7bd676730d8b2d24cf58b5385", "filename": "src/tools/clippy/clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -29,6 +29,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(infinite_iter::INFINITE_ITER),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n     LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n+    LintId::of(invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED),\n     LintId::of(let_underscore::LET_UNDERSCORE_LOCK),\n     LintId::of(literal_representation::MISTYPED_LITERAL_SUFFIXES),\n     LintId::of(loops::ITER_NEXT_LOOP),"}, {"sha": "91d27bf526d096674e2dd1b6e8323c97725eb35e", "filename": "src/tools/clippy/clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -196,6 +196,7 @@ store.register_lints(&[\n     inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n     int_plus_one::INT_PLUS_ONE,\n     invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS,\n+    invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED,\n     items_after_statements::ITEMS_AFTER_STATEMENTS,\n     iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR,\n     large_const_arrays::LARGE_CONST_ARRAYS,\n@@ -496,6 +497,9 @@ store.register_lints(&[\n     size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT,\n     slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n     stable_sort_primitive::STABLE_SORT_PRIMITIVE,\n+    std_instead_of_core::ALLOC_INSTEAD_OF_CORE,\n+    std_instead_of_core::STD_INSTEAD_OF_ALLOC,\n+    std_instead_of_core::STD_INSTEAD_OF_CORE,\n     strings::STRING_ADD,\n     strings::STRING_ADD_ASSIGN,\n     strings::STRING_FROM_UTF8_AS_BYTES,"}, {"sha": "e1b90acb93c2e9ae78baa4778790830996eb5065", "filename": "src/tools/clippy/clippy_lints/src/lib.register_perf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_perf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_perf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_perf.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -7,7 +7,6 @@ store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n     LintId::of(escape::BOXED_LOCAL),\n     LintId::of(format_args::FORMAT_IN_FORMAT_ARGS),\n     LintId::of(format_args::TO_STRING_IN_FORMAT_ARGS),\n-    LintId::of(format_push_string::FORMAT_PUSH_STRING),\n     LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n     LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n     LintId::of(loops::MANUAL_MEMCPY),"}, {"sha": "43f1c892eb9b9c396db40f9deb83d481d380c7da", "filename": "src/tools/clippy/clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -21,6 +21,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(exhaustive_items::EXHAUSTIVE_STRUCTS),\n     LintId::of(exit::EXIT),\n     LintId::of(float_literal::LOSSY_FLOAT_LITERAL),\n+    LintId::of(format_push_string::FORMAT_PUSH_STRING),\n     LintId::of(if_then_some_else_none::IF_THEN_SOME_ELSE_NONE),\n     LintId::of(implicit_return::IMPLICIT_RETURN),\n     LintId::of(indexing_slicing::INDEXING_SLICING),\n@@ -65,6 +66,9 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(shadow::SHADOW_SAME),\n     LintId::of(shadow::SHADOW_UNRELATED),\n     LintId::of(single_char_lifetime_names::SINGLE_CHAR_LIFETIME_NAMES),\n+    LintId::of(std_instead_of_core::ALLOC_INSTEAD_OF_CORE),\n+    LintId::of(std_instead_of_core::STD_INSTEAD_OF_ALLOC),\n+    LintId::of(std_instead_of_core::STD_INSTEAD_OF_CORE),\n     LintId::of(strings::STRING_ADD),\n     LintId::of(strings::STRING_SLICE),\n     LintId::of(strings::STRING_TO_STRING),"}, {"sha": "1988c24578e0b781ea57caf881d987f4ef568d62", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -255,6 +255,7 @@ mod init_numbered_fields;\n mod inline_fn_without_body;\n mod int_plus_one;\n mod invalid_upcast_comparisons;\n+mod invalid_utf8_in_unchecked;\n mod items_after_statements;\n mod iter_not_returning_iterator;\n mod large_const_arrays;\n@@ -364,6 +365,7 @@ mod single_component_path_imports;\n mod size_of_in_element_count;\n mod slow_vector_initialization;\n mod stable_sort_primitive;\n+mod std_instead_of_core;\n mod strings;\n mod strlen_on_c_strings;\n mod suspicious_operation_groupings;\n@@ -913,6 +915,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(manual_retain::ManualRetain::new(msrv)));\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n     store.register_late_pass(move || Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n+    store.register_late_pass(|| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n+    store.register_late_pass(|| Box::new(std_instead_of_core::StdReexports));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "8e3ab26a947f1c9413e1e06233696a2c075448c3", "filename": "src/tools/clippy/clippy_lints/src/loops/explicit_counter_loop.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -34,15 +34,16 @@ pub(super) fn check<'tcx>(\n                 if let Some((name, ty, initializer)) = initialize_visitor.get_result();\n                 if is_integer_const(cx, initializer, 0);\n                 then {\n-                    let mut applicability = Applicability::MachineApplicable;\n+                    let mut applicability = Applicability::MaybeIncorrect;\n+                    let span = expr.span.with_hi(arg.span.hi());\n \n                     let int_name = match ty.map(Ty::kind) {\n                         // usize or inferred\n                         Some(ty::Uint(UintTy::Usize)) | None => {\n                             span_lint_and_sugg(\n                                 cx,\n                                 EXPLICIT_COUNTER_LOOP,\n-                                expr.span.with_hi(arg.span.hi()),\n+                                span,\n                                 &format!(\"the variable `{}` is used as a loop counter\", name),\n                                 \"consider using\",\n                                 format!(\n@@ -63,11 +64,11 @@ pub(super) fn check<'tcx>(\n                     span_lint_and_then(\n                         cx,\n                         EXPLICIT_COUNTER_LOOP,\n-                        expr.span.with_hi(arg.span.hi()),\n+                        span,\n                         &format!(\"the variable `{}` is used as a loop counter\", name),\n                         |diag| {\n                             diag.span_suggestion(\n-                                expr.span.with_hi(arg.span.hi()),\n+                                span,\n                                 \"consider using\",\n                                 format!(\n                                     \"for ({}, {}) in (0_{}..).zip({})\","}, {"sha": "215c83a7edf6e9f91d86ecc5ce962894ad71ffa6", "filename": "src/tools/clippy/clippy_lints/src/loops/manual_find.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmanual_find.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmanual_find.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmanual_find.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -139,7 +139,7 @@ fn last_stmt_and_ret<'tcx>(\n     if_chain! {\n         // This should be the loop\n         if let Some((node_hir, Node::Stmt(..))) = parent_iter.next();\n-        // This should be the funciton body\n+        // This should be the function body\n         if let Some((_, Node::Block(block))) = parent_iter.next();\n         if let Some((last_stmt, last_ret)) = extract(block);\n         if last_stmt.hir_id == node_hir;"}, {"sha": "1d6ddf4b99f7b6835717672b238eb660547a4e45", "filename": "src/tools/clippy/clippy_lints/src/loops/manual_flatten.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -51,22 +51,32 @@ pub(super) fn check<'tcx>(\n                 _ => \"\"\n             };\n \n+            let sugg = format!(\"{arg_snippet}{copied}.flatten()\");\n+\n+            // If suggestion is not a one-liner, it won't be shown inline within the error message. In that case,\n+            // it will be shown in the extra `help` message at the end, which is why the first `help_msg` needs\n+            // to refer to the correct relative position of the suggestion.\n+            let help_msg = if sugg.contains('\\n') {\n+                \"remove the `if let` statement in the for loop and then...\"\n+            } else {\n+                \"...and remove the `if let` statement in the for loop\"\n+            };\n+\n             span_lint_and_then(\n                 cx,\n                 MANUAL_FLATTEN,\n                 span,\n                 &msg,\n                 |diag| {\n-                    let sugg = format!(\"{}{}.flatten()\", arg_snippet, copied);\n                     diag.span_suggestion(\n                         arg.span,\n                         \"try\",\n                         sugg,\n-                        Applicability::MaybeIncorrect,\n+                        applicability,\n                     );\n                     diag.span_help(\n                         inner_expr.span,\n-                        \"...and remove the `if let` statement in the for loop\",\n+                        help_msg,\n                     );\n                 }\n             );"}, {"sha": "e9e215e662f1939c6d799d5e0cdd84aee65fdea5", "filename": "src/tools/clippy/clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -3,13 +3,15 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::higher;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{\n-    get_enclosing_loop_or_closure, is_refutable, is_trait_method, match_def_path, paths, visitors::is_res_used,\n+    get_enclosing_loop_or_multi_call_closure, is_refutable, is_trait_method, match_def_path, paths,\n+    visitors::is_res_used,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{Closure, def::Res, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n+use rustc_hir::{def::Res, Closure, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n+use rustc_middle::hir::nested_filter::OnlyBodies;\n use rustc_middle::ty::adjustment::Adjust;\n use rustc_span::{symbol::sym, Symbol};\n \n@@ -249,6 +251,11 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n         used_iter: bool,\n     }\n     impl<'tcx> Visitor<'tcx> for AfterLoopVisitor<'_, '_, 'tcx> {\n+        type NestedFilter = OnlyBodies;\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.cx.tcx.hir()\n+        }\n+\n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n             if self.used_iter {\n                 return;\n@@ -283,6 +290,11 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n         used_after: bool,\n     }\n     impl<'a, 'b, 'tcx> Visitor<'tcx> for NestedLoopVisitor<'a, 'b, 'tcx> {\n+        type NestedFilter = OnlyBodies;\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.cx.tcx.hir()\n+        }\n+\n         fn visit_local(&mut self, l: &'tcx Local<'_>) {\n             if !self.after_loop {\n                 l.pat.each_binding_or_first(&mut |_, id, _, _| {\n@@ -320,10 +332,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n         }\n     }\n \n-    if let Some(e) = get_enclosing_loop_or_closure(cx.tcx, loop_expr) {\n-        // The iterator expression will be used on the next iteration (for loops), or on the next call (for\n-        // closures) unless it is declared within the enclosing expression. TODO: Check for closures\n-        // used where an `FnOnce` type is expected.\n+    if let Some(e) = get_enclosing_loop_or_multi_call_closure(cx, loop_expr) {\n         let local_id = match iter_expr.path {\n             Res::Local(id) => id,\n             _ => return true,"}, {"sha": "945880d21471b2a31af15ee8f53ae573174967d7", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -6,8 +6,8 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    AsyncGeneratorKind, Block, Body, Closure, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound, HirId,\n-    IsAsync, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n+    AsyncGeneratorKind, Block, Body, Closure, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound,\n+    HirId, IsAsync, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "2b04475c7a9debd962534a28343034ad1a5af815", "filename": "src/tools/clippy/clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -161,7 +161,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n                 (matches!(v.data, hir::VariantData::Unit(_))\n                     && v.ident.as_str().starts_with('_')\n                     && is_doc_hidden(cx.tcx.hir().attrs(v.id)))\n-                .then(|| (id, v.span))\n+                .then_some((id, v.span))\n             });\n             if let Some((id, span)) = iter.next()\n                 && iter.next().is_none()"}, {"sha": "95cc6bdbd8ba7bf0b748b7d9559bb9dc7e8af8f2", "filename": "src/tools/clippy/clippy_lints/src/manual_rem_euclid.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -71,7 +71,8 @@ impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n             && let Some(const3) = check_for_unsigned_int_constant(cx, right)\n             // Also ensures the const is nonzero since zero can't be a divisor\n             && const1 == const2 && const2 == const3\n-            && let Some(hir_id) = path_to_local(expr3) {\n+            && let Some(hir_id) = path_to_local(expr3)\n+            && let Some(Node::Pat(_)) = cx.tcx.hir().find(hir_id) {\n                 // Apply only to params or locals with annotated types\n                 match cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n                     Some(Node::Param(..)) => (),"}, {"sha": "8f98b43b9e5c8d240327b269a2961468d0e28275", "filename": "src/tools/clippy/clippy_lints/src/matches/manual_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -105,7 +105,7 @@ fn check<'tcx>(\n \n     // Determine which binding mode to use.\n     let explicit_ref = some_pat.contains_explicit_ref_binding();\n-    let binding_ref = explicit_ref.or_else(|| (ty_ref_count != pat_ref_count).then(|| ty_mutability));\n+    let binding_ref = explicit_ref.or_else(|| (ty_ref_count != pat_ref_count).then_some(ty_mutability));\n \n     let as_ref_str = match binding_ref {\n         Some(Mutability::Mut) => \".as_mut()\","}, {"sha": "0da4833f1dfe0c9dfc5694874ab0cad257c30487", "filename": "src/tools/clippy/clippy_lints/src/matches/match_like_matches.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -81,14 +81,14 @@ where\n         if let Some((_, last_pat_opt, last_expr, _)) = iter.next_back();\n         let iter_without_last = iter.clone();\n         if let Some((first_attrs, _, first_expr, first_guard)) = iter.next();\n-        if let Some(b0) = find_bool_lit(&first_expr.kind, is_if_let);\n-        if let Some(b1) = find_bool_lit(&last_expr.kind, is_if_let);\n+        if let Some(b0) = find_bool_lit(&first_expr.kind);\n+        if let Some(b1) = find_bool_lit(&last_expr.kind);\n         if b0 != b1;\n         if first_guard.is_none() || iter.len() == 0;\n         if first_attrs.is_empty();\n         if iter\n             .all(|arm| {\n-                find_bool_lit(&arm.2.kind, is_if_let).map_or(false, |b| b == b0) && arm.3.is_none() && arm.0.is_empty()\n+                find_bool_lit(&arm.2.kind).map_or(false, |b| b == b0) && arm.3.is_none() && arm.0.is_empty()\n             });\n         then {\n             if let Some(last_pat) = last_pat_opt {\n@@ -144,7 +144,7 @@ where\n }\n \n /// Extract a `bool` or `{ bool }`\n-fn find_bool_lit(ex: &ExprKind<'_>, is_if_let: bool) -> Option<bool> {\n+fn find_bool_lit(ex: &ExprKind<'_>) -> Option<bool> {\n     match ex {\n         ExprKind::Lit(Spanned {\n             node: LitKind::Bool(b), ..\n@@ -156,7 +156,7 @@ fn find_bool_lit(ex: &ExprKind<'_>, is_if_let: bool) -> Option<bool> {\n                 ..\n             },\n             _,\n-        ) if is_if_let => {\n+        ) => {\n             if let ExprKind::Lit(Spanned {\n                 node: LitKind::Bool(b), ..\n             }) = exp.kind"}, {"sha": "582782f245fcc5382ef06a3695b4d73c0316f579", "filename": "src/tools/clippy/clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -38,7 +38,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n             normalized_pats[i + 1..]\n                 .iter()\n                 .enumerate()\n-                .find_map(|(j, other)| pat.has_overlapping_values(other).then(|| i + 1 + j))\n+                .find_map(|(j, other)| pat.has_overlapping_values(other).then_some(i + 1 + j))\n                 .unwrap_or(normalized_pats.len())\n         })\n         .collect();\n@@ -55,7 +55,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n                 .zip(forwards_blocking_idxs[..i].iter().copied().rev())\n                 .skip_while(|&(_, forward_block)| forward_block > i)\n                 .find_map(|((j, other), forward_block)| {\n-                    (forward_block == i || pat.has_overlapping_values(other)).then(|| j)\n+                    (forward_block == i || pat.has_overlapping_values(other)).then_some(j)\n                 })\n                 .unwrap_or(0)\n         })\n@@ -365,7 +365,7 @@ impl<'a> NormalizedPat<'a> {\n             (Self::Slice(pats, None), Self::Slice(front, Some(back)))\n             | (Self::Slice(front, Some(back)), Self::Slice(pats, None)) => {\n                 // Here `pats` is an exact size match. If the combined lengths of `front` and `back` are greater\n-                // then the minium length required will be greater than the length of `pats`.\n+                // then the minimum length required will be greater than the length of `pats`.\n                 if pats.len() < front.len() + back.len() {\n                     return false;\n                 }"}, {"sha": "d55082c66dc864a4fa4a1254a082c1fbd639512a", "filename": "src/tools/clippy/clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1062,7 +1062,7 @@ fn contains_cfg_arm(cx: &LateContext<'_>, e: &Expr<'_>, scrutinee: &Expr<'_>, ar\n     let start = scrutinee_span.hi();\n     let mut arm_spans = arms.iter().map(|arm| {\n         let data = arm.span.data();\n-        (data.ctxt == SyntaxContext::root()).then(|| (data.lo, data.hi))\n+        (data.ctxt == SyntaxContext::root()).then_some((data.lo, data.hi))\n     });\n     let end = e.span.hi();\n \n@@ -1096,7 +1096,7 @@ fn contains_cfg_arm(cx: &LateContext<'_>, e: &Expr<'_>, scrutinee: &Expr<'_>, ar\n             parent: None,\n         }\n         .span();\n-        (!span_contains_cfg(cx, span)).then(|| next_start).ok_or(())\n+        (!span_contains_cfg(cx, span)).then_some(next_start).ok_or(())\n     });\n     match found {\n         Ok(start) => {"}, {"sha": "b0b15b3f54cd8b35f253218596c49c61aebc27be", "filename": "src/tools/clippy/clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -89,6 +89,10 @@ fn has_significant_drop_in_scrutinee<'tcx, 'a>(\n     source: MatchSource,\n ) -> Option<(Vec<FoundSigDrop>, &'static str)> {\n     let mut helper = SigDropHelper::new(cx);\n+    let scrutinee = match (source, &scrutinee.kind) {\n+        (MatchSource::ForLoopDesugar, ExprKind::Call(_, [e])) => e,\n+        _ => scrutinee,\n+    };\n     helper.find_sig_drop(scrutinee).map(|drops| {\n         let message = if source == MatchSource::Normal {\n             \"temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\""}, {"sha": "692e22a7c5cf7138dbbc0f7cf6df0f06228721b3", "filename": "src/tools/clippy/clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 54, "deletions": 53, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -8,6 +8,7 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::{Closure, Expr, ExprKind, PatKind, PathSegment, QPath, UnOp};\n use rustc_lint::LateContext;\n+use rustc_middle::ty::adjustment::Adjust;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, Symbol};\n use std::borrow::Cow;\n@@ -49,35 +50,18 @@ fn is_option_filter_map<'tcx>(cx: &LateContext<'tcx>, filter_arg: &hir::Expr<'_>\n     is_method(cx, map_arg, sym::unwrap) && is_method(cx, filter_arg, sym!(is_some))\n }\n \n-/// lint use of `filter().map()` for `Iterators`\n-fn lint_filter_some_map_unwrap(\n+/// is `filter(|x| x.is_some()).map(|x| x.unwrap())`\n+fn is_filter_some_map_unwrap(\n     cx: &LateContext<'_>,\n     expr: &hir::Expr<'_>,\n     filter_recv: &hir::Expr<'_>,\n     filter_arg: &hir::Expr<'_>,\n     map_arg: &hir::Expr<'_>,\n-    target_span: Span,\n-    methods_span: Span,\n-) {\n+) -> bool {\n     let iterator = is_trait_method(cx, expr, sym::Iterator);\n     let option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(filter_recv), sym::Option);\n-    if (iterator || option) && is_option_filter_map(cx, filter_arg, map_arg) {\n-        let msg = \"`filter` for `Some` followed by `unwrap`\";\n-        let help = \"consider using `flatten` instead\";\n-        let sugg = format!(\n-            \"{}\",\n-            reindent_multiline(Cow::Borrowed(\"flatten()\"), true, indent_of(cx, target_span),)\n-        );\n-        span_lint_and_sugg(\n-            cx,\n-            OPTION_FILTER_MAP,\n-            methods_span,\n-            msg,\n-            help,\n-            sugg,\n-            Applicability::MachineApplicable,\n-        );\n-    }\n+\n+    (iterator || option) && is_option_filter_map(cx, filter_arg, map_arg)\n }\n \n /// lint use of `filter().map()` or `find().map()` for `Iterators`\n@@ -93,15 +77,20 @@ pub(super) fn check<'tcx>(\n     map_span: Span,\n     is_find: bool,\n ) {\n-    lint_filter_some_map_unwrap(\n-        cx,\n-        expr,\n-        filter_recv,\n-        filter_arg,\n-        map_arg,\n-        map_span,\n-        filter_span.with_hi(expr.span.hi()),\n-    );\n+    if is_filter_some_map_unwrap(cx, expr, filter_recv, filter_arg, map_arg) {\n+        span_lint_and_sugg(\n+            cx,\n+            OPTION_FILTER_MAP,\n+            filter_span.with_hi(expr.span.hi()),\n+            \"`filter` for `Some` followed by `unwrap`\",\n+            \"consider using `flatten` instead\",\n+            reindent_multiline(Cow::Borrowed(\"flatten()\"), true, indent_of(cx, map_span)).into_owned(),\n+            Applicability::MachineApplicable,\n+        );\n+\n+        return;\n+    }\n+\n     if_chain! {\n             if is_trait_method(cx, map_recv, sym::Iterator);\n \n@@ -118,7 +107,7 @@ pub(super) fn check<'tcx>(\n             // closure ends with is_some() or is_ok()\n             if let PatKind::Binding(_, filter_param_id, _, None) = filter_pat.kind;\n             if let ExprKind::MethodCall(path, [filter_arg], _) = filter_body.value.kind;\n-            if let Some(opt_ty) = cx.typeck_results().expr_ty(filter_arg).ty_adt_def();\n+            if let Some(opt_ty) = cx.typeck_results().expr_ty(filter_arg).peel_refs().ty_adt_def();\n             if let Some(is_result) = if cx.tcx.is_diagnostic_item(sym::Option, opt_ty.did()) {\n                 Some(false)\n             } else if cx.tcx.is_diagnostic_item(sym::Result, opt_ty.did()) {\n@@ -137,6 +126,19 @@ pub(super) fn check<'tcx>(\n             if let ExprKind::MethodCall(seg, [map_arg, ..], _) = map_body.value.kind;\n             if matches!(seg.ident.name, sym::expect | sym::unwrap | sym::unwrap_or);\n \n+            // .filter(..).map(|y| f(y).copied().unwrap())\n+            //                     ~~~~\n+            let map_arg_peeled = match map_arg.kind {\n+                ExprKind::MethodCall(method, [original_arg], _) if acceptable_methods(method) => {\n+                    original_arg\n+                },\n+                _ => map_arg,\n+            };\n+\n+            // .filter(|x| x.is_some()).map(|y| y[.acceptable_method()].unwrap())\n+            let simple_equal = path_to_local_id(filter_arg, filter_param_id)\n+                && path_to_local_id(map_arg_peeled, map_param_id);\n+\n             let eq_fallback = |a: &Expr<'_>, b: &Expr<'_>| {\n                 // in `filter(|x| ..)`, replace `*x` with `x`\n                 let a_path = if_chain! {\n@@ -145,36 +147,35 @@ pub(super) fn check<'tcx>(\n                     then { expr_path } else { a }\n                 };\n                 // let the filter closure arg and the map closure arg be equal\n-                if_chain! {\n-                    if path_to_local_id(a_path, filter_param_id);\n-                    if path_to_local_id(b, map_param_id);\n-                    if cx.typeck_results().expr_ty_adjusted(a) == cx.typeck_results().expr_ty_adjusted(b);\n-                    then {\n-                        return true;\n-                    }\n-                }\n-                false\n-            };\n-\n-            if match map_arg.kind {\n-                ExprKind::MethodCall(method, [original_arg], _) => {\n-                    acceptable_methods(method)\n-                        && SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, original_arg)\n-                },\n-                _ => SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg)\n+                path_to_local_id(a_path, filter_param_id)\n+                    && path_to_local_id(b, map_param_id)\n+                    && cx.typeck_results().expr_ty_adjusted(a) == cx.typeck_results().expr_ty_adjusted(b)\n             };\n \n+            if simple_equal || SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg_peeled);\n             then {\n                 let span = filter_span.with_hi(expr.span.hi());\n                 let (filter_name, lint) = if is_find {\n                     (\"find\", MANUAL_FIND_MAP)\n                 } else {\n                     (\"filter\", MANUAL_FILTER_MAP)\n                 };\n-                let msg = format!(\"`{}(..).map(..)` can be simplified as `{0}_map(..)`\", filter_name);\n-                let to_opt = if is_result { \".ok()\" } else { \"\" };\n-                let sugg = format!(\"{}_map(|{}| {}{})\", filter_name, map_param_ident,\n-                    snippet(cx, map_arg.span, \"..\"), to_opt);\n+                let msg = format!(\"`{filter_name}(..).map(..)` can be simplified as `{filter_name}_map(..)`\");\n+                let (to_opt, deref) = if is_result {\n+                    (\".ok()\", String::new())\n+                } else {\n+                    let derefs = cx.typeck_results()\n+                        .expr_adjustments(map_arg)\n+                        .iter()\n+                        .filter(|adj| matches!(adj.kind, Adjust::Deref(_)))\n+                        .count();\n+\n+                    (\"\", \"*\".repeat(derefs))\n+                };\n+                let sugg = format!(\n+                    \"{filter_name}_map(|{map_param_ident}| {deref}{}{to_opt})\",\n+                    snippet(cx, map_arg.span, \"..\"),\n+                );\n                 span_lint_and_sugg(cx, lint, span, &msg, \"try\", sugg, Applicability::MachineApplicable);\n             }\n     }"}, {"sha": "46d2fc493f81e19a5f6ba149a21ff150a75c0d8e", "filename": "src/tools/clippy/clippy_lints/src/methods/manual_str_repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -43,7 +43,7 @@ fn parse_repeat_arg(cx: &LateContext<'_>, e: &Expr<'_>) -> Option<RepeatKind> {\n             Some(RepeatKind::String)\n         } else {\n             let ty = ty.peel_refs();\n-            (ty.is_str() || is_type_diagnostic_item(cx, ty, sym::String)).then(|| RepeatKind::String)\n+            (ty.is_str() || is_type_diagnostic_item(cx, ty, sym::String)).then_some(RepeatKind::String)\n         }\n     }\n }"}, {"sha": "6981b4a66318ed1f88de71bb6365ae9e82a5499c", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -369,7 +369,7 @@ declare_clippy_lint! {\n     /// let x: Result<u32, &str> = Ok(10);\n     /// x.expect_err(\"Testing expect_err\");\n     /// ```\n-    #[clippy::version = \"1.61.0\"]\n+    #[clippy::version = \"1.62.0\"]\n     pub ERR_EXPECT,\n     style,\n     r#\"using `.err().expect(\"\")` when `.expect_err(\"\")` can be used\"#\n@@ -2196,12 +2196,9 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Finds usages of [`char::is_digit`]\n-    /// (https://doc.rust-lang.org/stable/std/primitive.char.html#method.is_digit) that\n-    /// can be replaced with [`is_ascii_digit`]\n-    /// (https://doc.rust-lang.org/stable/std/primitive.char.html#method.is_ascii_digit) or\n-    /// [`is_ascii_hexdigit`]\n-    /// (https://doc.rust-lang.org/stable/std/primitive.char.html#method.is_ascii_hexdigit).\n+    /// Finds usages of [`char::is_digit`](https://doc.rust-lang.org/stable/std/primitive.char.html#method.is_digit) that\n+    /// can be replaced with [`is_ascii_digit`](https://doc.rust-lang.org/stable/std/primitive.char.html#method.is_ascii_digit) or\n+    /// [`is_ascii_hexdigit`](https://doc.rust-lang.org/stable/std/primitive.char.html#method.is_ascii_hexdigit).\n     ///\n     /// ### Why is this bad?\n     /// `is_digit(..)` is slower and requires specifying the radix.\n@@ -2218,15 +2215,19 @@ declare_clippy_lint! {\n     /// c.is_ascii_digit();\n     /// c.is_ascii_hexdigit();\n     /// ```\n-    #[clippy::version = \"1.61.0\"]\n+    #[clippy::version = \"1.62.0\"]\n     pub IS_DIGIT_ASCII_RADIX,\n     style,\n     \"use of `char::is_digit(..)` with literal radix of 10 or 16\"\n }\n \n declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for calling `take` function after `as_ref`.\n     ///\n     /// ### Why is this bad?\n+    /// Redundant code. `take` writes `None` to its argument.\n+    /// In this case the modification is useless as it's a temporary that cannot be read from afterwards.\n     ///\n     /// ### Example\n     /// ```rust\n@@ -2238,7 +2239,7 @@ declare_clippy_lint! {\n     /// let x = Some(3);\n     /// x.as_ref();\n     /// ```\n-    #[clippy::version = \"1.61.0\"]\n+    #[clippy::version = \"1.62.0\"]\n     pub NEEDLESS_OPTION_TAKE,\n     complexity,\n     \"using `.as_ref().take()` on a temporary value\"\n@@ -2740,6 +2741,12 @@ impl Methods {\n                     }\n                 },\n                 (\"take\", []) => needless_option_take::check(cx, expr, recv),\n+                (\"then\", [arg]) => {\n+                    if !meets_msrv(self.msrv, msrvs::BOOL_THEN_SOME) {\n+                        return;\n+                    }\n+                    unnecessary_lazy_eval::check(cx, expr, recv, arg, \"then_some\");\n+                },\n                 (\"to_os_string\" | \"to_owned\" | \"to_path_buf\" | \"to_vec\", []) => {\n                     implicit_clone::check(cx, name, expr, recv);\n                 },"}, {"sha": "6af134019a472956958a698163b7837c6a5b9ea3", "filename": "src/tools/clippy/clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::eager_or_lazy::switch_to_lazy_eval;\n-use clippy_utils::source::{snippet, snippet_with_applicability, snippet_with_macro_callsite};\n+use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n use clippy_utils::ty::{implements_trait, match_type};\n use clippy_utils::{contains_return, is_trait_item, last_path_segment, paths};\n use if_chain::if_chain;\n@@ -28,10 +28,10 @@ pub(super) fn check<'tcx>(\n         cx: &LateContext<'_>,\n         name: &str,\n         fun: &hir::Expr<'_>,\n-        self_expr: &hir::Expr<'_>,\n         arg: &hir::Expr<'_>,\n         or_has_args: bool,\n         span: Span,\n+        method_span: Span,\n     ) -> bool {\n         let is_default_default = || is_trait_item(cx, fun, sym::Default);\n \n@@ -52,24 +52,14 @@ pub(super) fn check<'tcx>(\n                 || (matches!(path, sym::new) && implements_default(arg, default_trait_id));\n \n             then {\n-                let mut applicability = Applicability::MachineApplicable;\n-                let hint = \"unwrap_or_default()\";\n-                let sugg_span = span;\n-\n-                let sugg: String = format!(\n-                    \"{}.{}\",\n-                    snippet_with_applicability(cx, self_expr.span, \"..\", &mut applicability),\n-                    hint\n-                );\n-\n                 span_lint_and_sugg(\n                     cx,\n                     OR_FUN_CALL,\n-                    sugg_span,\n+                    method_span.with_hi(span.hi()),\n                     &format!(\"use of `{}` followed by a call to `{}`\", name, path),\n                     \"try this\",\n-                    sugg,\n-                    applicability,\n+                    \"unwrap_or_default()\".to_string(),\n+                    Applicability::MachineApplicable,\n                 );\n \n                 true\n@@ -171,7 +161,7 @@ pub(super) fn check<'tcx>(\n         match inner_arg.kind {\n             hir::ExprKind::Call(fun, or_args) => {\n                 let or_has_args = !or_args.is_empty();\n-                if !check_unwrap_or_default(cx, name, fun, self_arg, arg, or_has_args, expr.span) {\n+                if !check_unwrap_or_default(cx, name, fun, arg, or_has_args, expr.span, method_span) {\n                     let fun_span = if or_has_args { None } else { Some(fun.span) };\n                     check_general_case(cx, name, method_span, self_arg, arg, expr.span, fun_span);\n                 }"}, {"sha": "1876c7fb9d0510fd855b52232bdfa38b6e6e7a65", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -20,8 +20,9 @@ pub(super) fn check<'tcx>(\n ) {\n     let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Option);\n     let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n+    let is_bool = cx.typeck_results().expr_ty(recv).is_bool();\n \n-    if is_option || is_result {\n+    if is_option || is_result || is_bool {\n         if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = arg.kind {\n             let body = cx.tcx.hir().body(body);\n             let body_expr = &body.value;\n@@ -33,8 +34,10 @@ pub(super) fn check<'tcx>(\n             if eager_or_lazy::switch_to_eager_eval(cx, body_expr) {\n                 let msg = if is_option {\n                     \"unnecessary closure used to substitute value for `Option::None`\"\n-                } else {\n+                } else if is_result {\n                     \"unnecessary closure used to substitute value for `Result::Err`\"\n+                } else {\n+                    \"unnecessary closure used with `bool::then`\"\n                 };\n                 let applicability = if body\n                     .params"}, {"sha": "8224e80c9ccb36cb5f75ef2e025ddc7b9074e998", "filename": "src/tools/clippy/clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -301,7 +301,7 @@ fn in_attributes_expansion(expr: &Expr<'_>) -> bool {\n     use rustc_span::hygiene::MacroKind;\n     if expr.span.from_expansion() {\n         let data = expr.span.ctxt().outer_expn_data();\n-        matches!(data.kind, ExpnKind::Macro(MacroKind::Attr|MacroKind::Derive, _))\n+        matches!(data.kind, ExpnKind::Macro(MacroKind::Attr | MacroKind::Derive, _))\n     } else {\n         false\n     }"}, {"sha": "254d9a70010a8e0ab10556f5b8ef322e46299205", "filename": "src/tools/clippy/clippy_lints/src/mismatching_type_param_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmismatching_type_param_order.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -9,7 +9,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for type parameters which are positioned inconsistently between\n-    /// a type definition and impl block. Specifically, a paramater in an impl\n+    /// a type definition and impl block. Specifically, a parameter in an impl\n     /// block which has the same name as a parameter in the type def, but is in\n     /// a different place.\n     ///"}, {"sha": "5c45ee6d94ad3c58ad33daeffc50ae747e5999de", "filename": "src/tools/clippy/clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -88,15 +88,9 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             // shouldn't be implemented when it is hidden in docs\n                             return;\n                         }\n-                        if impl_item\n-                            .generics\n-                            .params\n-                            .iter()\n-                            .any(|gen| matches!(gen.kind, hir::GenericParamKind::Type { .. }))\n-                        {\n-                            // when the result of `new()` depends on a type parameter we should not require\n-                            // an\n-                            // impl of `Default`\n+                        if !impl_item.generics.params.is_empty() {\n+                            // when the result of `new()` depends on a parameter we should not require\n+                            // an impl of `Default`\n                             return;\n                         }\n                         if_chain! {"}, {"sha": "6ad6837f0e3507afdb92fdcc0e2fcfbd3d6fe30d", "filename": "src/tools/clippy/clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foctal_escapes.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -31,7 +31,7 @@ declare_clippy_lint! {\n     /// and friends since the string is already preprocessed when Clippy lints\n     /// can see it.\n     ///\n-    /// # Example\n+    /// ### Example\n     /// ```rust\n     /// let one = \"\\033[1m Bold? \\033[0m\";  // \\033 intended as escape\n     /// let two = \"\\033\\0\";                 // \\033 intended as null-3-3"}, {"sha": "413a740be25a529c0fe8fb64361dd38d567de634", "filename": "src/tools/clippy/clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -11,8 +11,8 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_hir::intravisit::{walk_expr, walk_stmt, FnKind, Visitor};\n use rustc_hir::{\n-    Arm, Closure, Block, Body, Expr, ExprKind, Guard, HirId, ImplicitSelfKind, Let, Local, Pat, PatKind, Path, PathSegment,\n-    QPath, Stmt, StmtKind, TyKind, UnOp,\n+    Arm, Block, Body, Closure, Expr, ExprKind, Guard, HirId, ImplicitSelfKind, Let, Local, Pat, PatKind, Path,\n+    PathSegment, QPath, Stmt, StmtKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;"}, {"sha": "44f153cffac511401f43c871690590fd3d29da43", "filename": "src/tools/clippy/clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -146,7 +146,7 @@ fn detect_option_if_let_else<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) ->\n                 });\n                 if let ExprKind::Path(QPath::Resolved(None, Path { res: Res::Local(local_id), .. })) = e.kind {\n                     match some_captures.get(local_id)\n-                        .or_else(|| (method_sugg == \"map_or_else\").then(|| ()).and_then(|_| none_captures.get(local_id)))\n+                        .or_else(|| (method_sugg == \"map_or_else\").then_some(()).and_then(|_| none_captures.get(local_id)))\n                     {\n                         Some(CaptureKind::Value | CaptureKind::Ref(Mutability::Mut)) => return None,\n                         Some(CaptureKind::Ref(Mutability::Not)) if as_mut => return None,"}, {"sha": "8534d8a29f10df201bd146ded37be1afdb409dbe", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -502,7 +502,7 @@ fn check_mut_from_ref<'tcx>(cx: &LateContext<'tcx>, sig: &FnSig<'_>, body: Optio\n             .iter()\n             .filter_map(get_rptr_lm)\n             .filter(|&(lt, _, _)| cx.tcx.named_region(lt.hir_id) == out_region)\n-            .map(|(_, mutability, span)| (mutability == Mutability::Not).then(|| span))\n+            .map(|(_, mutability, span)| (mutability == Mutability::Not).then_some(span))\n             .collect();\n         if let Some(args) = args\n             && !args.is_empty()"}, {"sha": "f0155ed6051f6b7c11408130d1b52d14e167076b", "filename": "src/tools/clippy/clippy_lints/src/question_mark.rs", "status": "modified", "additions": 174, "deletions": 116, "changes": 290, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,16 +1,19 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::higher;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{eq_expr_value, is_lang_ctor, path_to_local, path_to_local_id, peel_blocks, peel_blocks_with_stmt};\n+use clippy_utils::{\n+    eq_expr_value, get_parent_node, is_else_clause, is_lang_ctor, path_to_local, path_to_local_id, peel_blocks,\n+    peel_blocks_with_stmt,\n+};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::LangItem::{OptionNone, OptionSome, ResultOk};\n-use rustc_hir::{BindingAnnotation, Expr, ExprKind, PatKind};\n+use rustc_hir::LangItem::{OptionNone, OptionSome, ResultErr, ResultOk};\n+use rustc_hir::{BindingAnnotation, Expr, ExprKind, Node, PatKind, PathSegment, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::Ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n+use rustc_span::{sym, symbol::Symbol};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -39,135 +42,190 @@ declare_clippy_lint! {\n \n declare_lint_pass!(QuestionMark => [QUESTION_MARK]);\n \n-impl QuestionMark {\n-    /// Checks if the given expression on the given context matches the following structure:\n+enum IfBlockType<'hir> {\n+    /// An `if x.is_xxx() { a } else { b } ` expression.\n     ///\n-    /// ```ignore\n-    /// if option.is_none() {\n-    ///    return None;\n-    /// }\n-    /// ```\n-    ///\n-    /// ```ignore\n-    /// if result.is_err() {\n-    ///     return result;\n-    /// }\n-    /// ```\n+    /// Contains: caller (x), caller_type, call_sym (is_xxx), if_then (a), if_else (b)\n+    IfIs(\n+        &'hir Expr<'hir>,\n+        Ty<'hir>,\n+        Symbol,\n+        &'hir Expr<'hir>,\n+        Option<&'hir Expr<'hir>>,\n+    ),\n+    /// An `if let Xxx(a) = b { c } else { d }` expression.\n     ///\n-    /// If it matches, it will suggest to use the question mark operator instead\n-    fn check_is_none_or_err_and_early_return(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-        if_chain! {\n-            if let Some(higher::If { cond, then, r#else }) = higher::If::hir(expr);\n-            if let ExprKind::MethodCall(segment, args, _) = &cond.kind;\n-            if let Some(subject) = args.get(0);\n-            if (Self::option_check_and_early_return(cx, subject, then) && segment.ident.name == sym!(is_none)) ||\n-                (Self::result_check_and_early_return(cx, subject, then) && segment.ident.name == sym!(is_err));\n-            then {\n-                let mut applicability = Applicability::MachineApplicable;\n-                let receiver_str = &Sugg::hir_with_applicability(cx, subject, \"..\", &mut applicability);\n-                let mut replacement: Option<String> = None;\n-                if let Some(else_inner) = r#else {\n-                    if eq_expr_value(cx, subject, peel_blocks(else_inner)) {\n-                        replacement = Some(format!(\"Some({}?)\", receiver_str));\n-                    }\n-                } else if Self::moves_by_default(cx, subject)\n-                    && !matches!(subject.kind, ExprKind::Call(..) | ExprKind::MethodCall(..))\n-                {\n-                    replacement = Some(format!(\"{}.as_ref()?;\", receiver_str));\n-                } else {\n-                    replacement = Some(format!(\"{}?;\", receiver_str));\n-                }\n+    /// Contains: let_pat_qpath (Xxx), let_pat_type, let_pat_sym (a), let_expr (b), if_then (c),\n+    /// if_else (d)\n+    IfLet(\n+        &'hir QPath<'hir>,\n+        Ty<'hir>,\n+        Symbol,\n+        &'hir Expr<'hir>,\n+        &'hir Expr<'hir>,\n+        Option<&'hir Expr<'hir>>,\n+    ),\n+}\n \n-                if let Some(replacement_str) = replacement {\n-                    span_lint_and_sugg(\n-                        cx,\n-                        QUESTION_MARK,\n-                        expr.span,\n-                        \"this block may be rewritten with the `?` operator\",\n-                        \"replace it with\",\n-                        replacement_str,\n-                        applicability,\n-                    );\n+/// Checks if the given expression on the given context matches the following structure:\n+///\n+/// ```ignore\n+/// if option.is_none() {\n+///    return None;\n+/// }\n+/// ```\n+///\n+/// ```ignore\n+/// if result.is_err() {\n+///     return result;\n+/// }\n+/// ```\n+///\n+/// If it matches, it will suggest to use the question mark operator instead\n+fn check_is_none_or_err_and_early_return<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) {\n+    if_chain! {\n+        if let Some(higher::If { cond, then, r#else }) = higher::If::hir(expr);\n+        if !is_else_clause(cx.tcx, expr);\n+        if let ExprKind::MethodCall(segment, args, _) = &cond.kind;\n+        if let Some(caller) = args.get(0);\n+        let caller_ty = cx.typeck_results().expr_ty(caller);\n+        let if_block = IfBlockType::IfIs(caller, caller_ty, segment.ident.name, then, r#else);\n+        if is_early_return(sym::Option, cx, &if_block) || is_early_return(sym::Result, cx, &if_block);\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            let receiver_str = snippet_with_applicability(cx, caller.span, \"..\", &mut applicability);\n+            let by_ref = !caller_ty.is_copy_modulo_regions(cx.tcx.at(caller.span), cx.param_env) &&\n+                !matches!(caller.kind, ExprKind::Call(..) | ExprKind::MethodCall(..));\n+            let sugg = if let Some(else_inner) = r#else {\n+                if eq_expr_value(cx, caller, peel_blocks(else_inner)) {\n+                    format!(\"Some({}?)\", receiver_str)\n+                } else {\n+                    return;\n                 }\n-            }\n+            } else {\n+                format!(\"{}{}?;\", receiver_str, if by_ref { \".as_ref()\" } else { \"\" })\n+            };\n+\n+            span_lint_and_sugg(\n+                cx,\n+                QUESTION_MARK,\n+                expr.span,\n+                \"this block may be rewritten with the `?` operator\",\n+                \"replace it with\",\n+                sugg,\n+                applicability,\n+            );\n         }\n     }\n+}\n \n-    fn check_if_let_some_or_err_and_early_return(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-        if_chain! {\n-            if let Some(higher::IfLet { let_pat, let_expr, if_then, if_else: Some(if_else) })\n-                = higher::IfLet::hir(cx, expr);\n-            if let PatKind::TupleStruct(ref path1, fields, None) = let_pat.kind;\n-            if (Self::option_check_and_early_return(cx, let_expr, if_else) && is_lang_ctor(cx, path1, OptionSome)) ||\n-                (Self::result_check_and_early_return(cx, let_expr, if_else) && is_lang_ctor(cx, path1, ResultOk));\n-\n-            if let PatKind::Binding(annot, bind_id, _, _) = fields[0].kind;\n+fn check_if_let_some_or_err_and_early_return<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) {\n+    if_chain! {\n+        if let Some(higher::IfLet { let_pat, let_expr, if_then, if_else }) = higher::IfLet::hir(cx, expr);\n+        if !is_else_clause(cx.tcx, expr);\n+        if let PatKind::TupleStruct(ref path1, fields, None) = let_pat.kind;\n+        if let PatKind::Binding(annot, bind_id, ident, _) = fields[0].kind;\n+        let caller_ty = cx.typeck_results().expr_ty(let_expr);\n+        let if_block = IfBlockType::IfLet(path1, caller_ty, ident.name, let_expr, if_then, if_else);\n+        if (is_early_return(sym::Option, cx, &if_block) && path_to_local_id(peel_blocks(if_then), bind_id))\n+            || is_early_return(sym::Result, cx, &if_block);\n+        if if_else.map(|e| eq_expr_value(cx, let_expr, peel_blocks(e))).filter(|e| *e).is_none();\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            let receiver_str = snippet_with_applicability(cx, let_expr.span, \"..\", &mut applicability);\n             let by_ref = matches!(annot, BindingAnnotation::Ref | BindingAnnotation::RefMut);\n-            if path_to_local_id(peel_blocks(if_then), bind_id);\n-            then {\n-                let mut applicability = Applicability::MachineApplicable;\n-                let receiver_str = snippet_with_applicability(cx, let_expr.span, \"..\", &mut applicability);\n-                let replacement = format!(\"{}{}?\", receiver_str, if by_ref { \".as_ref()\" } else { \"\" },);\n-\n-                span_lint_and_sugg(\n-                    cx,\n-                    QUESTION_MARK,\n-                    expr.span,\n-                    \"this if-let-else may be rewritten with the `?` operator\",\n-                    \"replace it with\",\n-                    replacement,\n-                    applicability,\n-                );\n-            }\n+            let requires_semi = matches!(get_parent_node(cx.tcx, expr.hir_id), Some(Node::Stmt(_)));\n+            let sugg = format!(\n+                \"{}{}?{}\",\n+                receiver_str,\n+                if by_ref { \".as_ref()\" } else { \"\" },\n+                if requires_semi { \";\" } else { \"\" }\n+            );\n+            span_lint_and_sugg(\n+                cx,\n+                QUESTION_MARK,\n+                expr.span,\n+                \"this block may be rewritten with the `?` operator\",\n+                \"replace it with\",\n+                sugg,\n+                applicability,\n+            );\n         }\n     }\n+}\n \n-    fn result_check_and_early_return(cx: &LateContext<'_>, expr: &Expr<'_>, nested_expr: &Expr<'_>) -> bool {\n-        Self::is_result(cx, expr) && Self::expression_returns_unmodified_err(nested_expr, expr)\n-    }\n-\n-    fn option_check_and_early_return(cx: &LateContext<'_>, expr: &Expr<'_>, nested_expr: &Expr<'_>) -> bool {\n-        Self::is_option(cx, expr) && Self::expression_returns_none(cx, nested_expr)\n-    }\n-\n-    fn moves_by_default(cx: &LateContext<'_>, expression: &Expr<'_>) -> bool {\n-        let expr_ty = cx.typeck_results().expr_ty(expression);\n-\n-        !expr_ty.is_copy_modulo_regions(cx.tcx.at(expression.span), cx.param_env)\n-    }\n-\n-    fn is_option(cx: &LateContext<'_>, expression: &Expr<'_>) -> bool {\n-        let expr_ty = cx.typeck_results().expr_ty(expression);\n-\n-        is_type_diagnostic_item(cx, expr_ty, sym::Option)\n-    }\n-\n-    fn is_result(cx: &LateContext<'_>, expression: &Expr<'_>) -> bool {\n-        let expr_ty = cx.typeck_results().expr_ty(expression);\n-\n-        is_type_diagnostic_item(cx, expr_ty, sym::Result)\n-    }\n-\n-    fn expression_returns_none(cx: &LateContext<'_>, expression: &Expr<'_>) -> bool {\n-        match peel_blocks_with_stmt(expression).kind {\n-            ExprKind::Ret(Some(expr)) => Self::expression_returns_none(cx, expr),\n-            ExprKind::Path(ref qpath) => is_lang_ctor(cx, qpath, OptionNone),\n-            _ => false,\n-        }\n+fn is_early_return(smbl: Symbol, cx: &LateContext<'_>, if_block: &IfBlockType<'_>) -> bool {\n+    match *if_block {\n+        IfBlockType::IfIs(caller, caller_ty, call_sym, if_then, _) => {\n+            // If the block could be identified as `if x.is_none()/is_err()`,\n+            // we then only need to check the if_then return to see if it is none/err.\n+            is_type_diagnostic_item(cx, caller_ty, smbl)\n+                && expr_return_none_or_err(smbl, cx, if_then, caller, None)\n+                && match smbl {\n+                    sym::Option => call_sym == sym!(is_none),\n+                    sym::Result => call_sym == sym!(is_err),\n+                    _ => false,\n+                }\n+        },\n+        IfBlockType::IfLet(qpath, let_expr_ty, let_pat_sym, let_expr, if_then, if_else) => {\n+            is_type_diagnostic_item(cx, let_expr_ty, smbl)\n+                && match smbl {\n+                    sym::Option => {\n+                        // We only need to check `if let Some(x) = option` not `if let None = option`,\n+                        // because the later one will be suggested as `if option.is_none()` thus causing conflict.\n+                        is_lang_ctor(cx, qpath, OptionSome)\n+                            && if_else.is_some()\n+                            && expr_return_none_or_err(smbl, cx, if_else.unwrap(), let_expr, None)\n+                    },\n+                    sym::Result => {\n+                        (is_lang_ctor(cx, qpath, ResultOk)\n+                            && if_else.is_some()\n+                            && expr_return_none_or_err(smbl, cx, if_else.unwrap(), let_expr, Some(let_pat_sym)))\n+                            || is_lang_ctor(cx, qpath, ResultErr)\n+                                && expr_return_none_or_err(smbl, cx, if_then, let_expr, Some(let_pat_sym))\n+                    },\n+                    _ => false,\n+                }\n+        },\n     }\n+}\n \n-    fn expression_returns_unmodified_err(expr: &Expr<'_>, cond_expr: &Expr<'_>) -> bool {\n-        match peel_blocks_with_stmt(expr).kind {\n-            ExprKind::Ret(Some(ret_expr)) => Self::expression_returns_unmodified_err(ret_expr, cond_expr),\n-            ExprKind::Path(_) => path_to_local(expr).is_some() && path_to_local(expr) == path_to_local(cond_expr),\n+fn expr_return_none_or_err(\n+    smbl: Symbol,\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    cond_expr: &Expr<'_>,\n+    err_sym: Option<Symbol>,\n+) -> bool {\n+    match peel_blocks_with_stmt(expr).kind {\n+        ExprKind::Ret(Some(ret_expr)) => expr_return_none_or_err(smbl, cx, ret_expr, cond_expr, err_sym),\n+        ExprKind::Path(ref qpath) => match smbl {\n+            sym::Option => is_lang_ctor(cx, qpath, OptionNone),\n+            sym::Result => path_to_local(expr).is_some() && path_to_local(expr) == path_to_local(cond_expr),\n             _ => false,\n-        }\n+        },\n+        ExprKind::Call(call_expr, args_expr) => {\n+            if_chain! {\n+                if smbl == sym::Result;\n+                if let ExprKind::Path(QPath::Resolved(_, path)) = &call_expr.kind;\n+                if let Some(segment) = path.segments.first();\n+                if let Some(err_sym) = err_sym;\n+                if let Some(arg) = args_expr.first();\n+                if let ExprKind::Path(QPath::Resolved(_, arg_path)) = &arg.kind;\n+                if let Some(PathSegment { ident, .. }) = arg_path.segments.first();\n+                then {\n+                    return segment.ident.name == sym::Err && err_sym == ident.name;\n+                }\n+            }\n+            false\n+        },\n+        _ => false,\n     }\n }\n \n impl<'tcx> LateLintPass<'tcx> for QuestionMark {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        Self::check_is_none_or_err_and_early_return(cx, expr);\n-        Self::check_if_let_some_or_err_and_early_return(cx, expr);\n+        check_is_none_or_err_and_early_return(cx, expr);\n+        check_if_let_some_or_err_and_early_return(cx, expr);\n     }\n }"}, {"sha": "f9a9b0691935ad82cc3b817f5d276524a18efd41", "filename": "src/tools/clippy/clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -19,7 +19,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```ignore\n-    /// Regex::new(\"|\")\n+    /// Regex::new(\"(\")\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub INVALID_REGEX,"}, {"sha": "5dcdab5b8ab90e9a35a57ca5735ff56825ed9aad", "filename": "src/tools/clippy/clippy_lints/src/shadow.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -99,7 +99,7 @@ declare_clippy_lint! {\n \n #[derive(Default)]\n pub(crate) struct Shadow {\n-    bindings: Vec<FxHashMap<Symbol, Vec<ItemLocalId>>>,\n+    bindings: Vec<(FxHashMap<Symbol, Vec<ItemLocalId>>, LocalDefId)>,\n }\n \n impl_lint_pass!(Shadow => [SHADOW_SAME, SHADOW_REUSE, SHADOW_UNRELATED]);\n@@ -121,7 +121,7 @@ impl<'tcx> LateLintPass<'tcx> for Shadow {\n \n         let HirId { owner, local_id } = id;\n         // get (or insert) the list of items for this owner and symbol\n-        let data = self.bindings.last_mut().unwrap();\n+        let (ref mut data, scope_owner) = *self.bindings.last_mut().unwrap();\n         let items_with_name = data.entry(ident.name).or_default();\n \n         // check other bindings with the same name, most recently seen first\n@@ -131,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for Shadow {\n                 return;\n             }\n \n-            if is_shadow(cx, owner, prev, local_id) {\n+            if is_shadow(cx, scope_owner, prev, local_id) {\n                 let prev_hir_id = HirId { owner, local_id: prev };\n                 lint_shadow(cx, pat, prev_hir_id, ident.span);\n                 // only lint against the \"nearest\" shadowed binding\n@@ -144,11 +144,9 @@ impl<'tcx> LateLintPass<'tcx> for Shadow {\n \n     fn check_body(&mut self, cx: &LateContext<'_>, body: &Body<'_>) {\n         let hir = cx.tcx.hir();\n-        if !matches!(\n-            hir.body_owner_kind(hir.body_owner_def_id(body.id())),\n-            BodyOwnerKind::Closure\n-        ) {\n-            self.bindings.push(FxHashMap::default());\n+        let owner_id = hir.body_owner_def_id(body.id());\n+        if !matches!(hir.body_owner_kind(owner_id), BodyOwnerKind::Closure) {\n+            self.bindings.push((FxHashMap::default(), owner_id));\n         }\n     }\n "}, {"sha": "56f2a7bae152b9a27a710b8fc936b9b2bca33b66", "filename": "src/tools/clippy/clippy_lints/src/std_instead_of_core.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstd_instead_of_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstd_instead_of_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstd_instead_of_core.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -0,0 +1,134 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_hir::{def::Res, HirId, Path, PathSegment};\n+use rustc_lint::{LateContext, LateLintPass, Lint};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{sym, symbol::kw, Symbol};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Finds items imported through `std` when available through `core`.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Crates which have `no_std` compatibility may wish to ensure types are imported from core to ensure\n+    /// disabling `std` does not cause the crate to fail to compile. This lint is also useful for crates\n+    /// migrating to become `no_std` compatible.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::hash::Hasher;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use core::hash::Hasher;\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub STD_INSTEAD_OF_CORE,\n+    restriction,\n+    \"type is imported from std when available in core\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Finds items imported through `std` when available through `alloc`.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Crates which have `no_std` compatibility and require alloc may wish to ensure types are imported from\n+    /// alloc to ensure disabling `std` does not cause the crate to fail to compile. This lint is also useful\n+    /// for crates migrating to become `no_std` compatible.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::vec::Vec;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # extern crate alloc;\n+    /// use alloc::vec::Vec;\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub STD_INSTEAD_OF_ALLOC,\n+    restriction,\n+    \"type is imported from std when available in alloc\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Finds items imported through `alloc` when available through `core`.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Crates which have `no_std` compatibility and may optionally require alloc may wish to ensure types are\n+    /// imported from alloc to ensure disabling `alloc` does not cause the crate to fail to compile. This lint\n+    /// is also useful for crates migrating to become `no_std` compatible.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # extern crate alloc;\n+    /// use alloc::slice::from_ref;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use core::slice::from_ref;\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub ALLOC_INSTEAD_OF_CORE,\n+    restriction,\n+    \"type is imported from alloc when available in core\"\n+}\n+\n+declare_lint_pass!(StdReexports => [STD_INSTEAD_OF_CORE, STD_INSTEAD_OF_ALLOC, ALLOC_INSTEAD_OF_CORE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for StdReexports {\n+    fn check_path(&mut self, cx: &LateContext<'tcx>, path: &Path<'tcx>, _: HirId) {\n+        // std_instead_of_core\n+        check_path(cx, path, sym::std, sym::core, STD_INSTEAD_OF_CORE);\n+        // std_instead_of_alloc\n+        check_path(cx, path, sym::std, sym::alloc, STD_INSTEAD_OF_ALLOC);\n+        // alloc_instead_of_core\n+        check_path(cx, path, sym::alloc, sym::core, ALLOC_INSTEAD_OF_CORE);\n+    }\n+}\n+\n+fn check_path(cx: &LateContext<'_>, path: &Path<'_>, krate: Symbol, suggested_crate: Symbol, lint: &'static Lint) {\n+    if_chain! {\n+        // check if path resolves to the suggested crate.\n+        if let Res::Def(_, def_id) = path.res;\n+        if suggested_crate == cx.tcx.crate_name(def_id.krate);\n+\n+        // check if the first segment of the path is the crate we want to identify\n+        if let Some(path_root_segment) = get_first_segment(path);\n+\n+        // check if the path matches the crate we want to suggest the other path for.\n+        if krate == path_root_segment.ident.name;\n+        then {\n+            span_lint_and_help(\n+                cx,\n+                lint,\n+                path.span,\n+                &format!(\"used import from `{}` instead of `{}`\", krate, suggested_crate),\n+                None,\n+                &format!(\"consider importing the item from `{}`\", suggested_crate),\n+            );\n+        }\n+    }\n+}\n+\n+/// Returns the first named segment of a [`Path`].\n+///\n+/// If this is a global path (such as `::std::fmt::Debug`), then the segment after [`kw::PathRoot`]\n+/// is returned.\n+fn get_first_segment<'tcx>(path: &Path<'tcx>) -> Option<&'tcx PathSegment<'tcx>> {\n+    let segment = path.segments.first()?;\n+\n+    // A global path will have PathRoot as the first segment. In this case, return the segment after.\n+    if segment.ident.name == kw::PathRoot {\n+        path.segments.get(1)\n+    } else {\n+        Some(segment)\n+    }\n+}"}, {"sha": "3cbbda80f3a9fc6d11de47e6baea4481aea61c36", "filename": "src/tools/clippy/clippy_lints/src/swap_ptr_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -73,7 +73,7 @@ fn is_ptr_to_ref(cx: &LateContext<'_>, e: &Expr<'_>, ctxt: SyntaxContext) -> (bo\n         && let ExprKind::Unary(UnOp::Deref, derefed_expr) = borrowed_expr.kind\n         && cx.typeck_results().expr_ty(derefed_expr).is_unsafe_ptr()\n     {\n-        (true, (borrowed_expr.span.ctxt() == ctxt || derefed_expr.span.ctxt() == ctxt).then(|| derefed_expr.span))\n+        (true, (borrowed_expr.span.ctxt() == ctxt || derefed_expr.span.ctxt() == ctxt).then_some(derefed_expr.span))\n     } else {\n         (false, None)\n     }"}, {"sha": "0a42a31fb8cf9e0a96dac08ede5a215e3e736880", "filename": "src/tools/clippy/clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 149, "deletions": 35, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,20 +1,20 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::source::{snippet, snippet_with_applicability};\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::source::{snippet, snippet_opt, snippet_with_applicability};\n use clippy_utils::{SpanlessEq, SpanlessHash};\n use core::hash::{Hash, Hasher};\n use if_chain::if_chain;\n+use itertools::Itertools;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n use rustc_hir::{\n-    GenericBound, Generics, Item, ItemKind, Node, Path, PathSegment, PredicateOrigin, QPath, TraitItem, Ty, TyKind,\n-    WherePredicate,\n+    GenericArg, GenericBound, Generics, Item, ItemKind, Node, Path, PathSegment, PredicateOrigin, QPath,\n+    TraitBoundModifier, TraitItem, TraitRef, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::Span;\n-use std::fmt::Write as _;\n+use rustc_span::{BytePos, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -35,8 +35,8 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.38.0\"]\n     pub TYPE_REPETITION_IN_BOUNDS,\n-    pedantic,\n-    \"Types are repeated unnecessary in trait bounds use `+` instead of using `T: _, T: _`\"\n+    nursery,\n+    \"types are repeated unnecessary in trait bounds use `+` instead of using `T: _, T: _`\"\n }\n \n declare_clippy_lint! {\n@@ -63,10 +63,26 @@ declare_clippy_lint! {\n     ///\n     /// fn func<T>(arg: T) where T: Clone + Default {}\n     /// ```\n+    ///\n+    /// ```rust\n+    /// fn foo<T: Default + Default>(bar: T) {}\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn foo<T: Default>(bar: T) {}\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// fn foo<T>(bar: T) where T: Default + Default {}\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn foo<T>(bar: T) where T: Default {}\n+    /// ```\n     #[clippy::version = \"1.47.0\"]\n     pub TRAIT_DUPLICATION_IN_BOUNDS,\n-    pedantic,\n-    \"Check if the same trait bounds are specified twice during a function declaration\"\n+    nursery,\n+    \"check if the same trait bounds are specified more than once during a generic declaration\"\n }\n \n #[derive(Copy, Clone)]\n@@ -87,6 +103,19 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n     fn check_generics(&mut self, cx: &LateContext<'tcx>, gen: &'tcx Generics<'_>) {\n         self.check_type_repetition(cx, gen);\n         check_trait_bound_duplication(cx, gen);\n+        check_bounds_or_where_duplication(cx, gen);\n+    }\n+\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        // special handling for self trait bounds as these are not considered generics\n+        // ie. trait Foo: Display {}\n+        if let Item {\n+            kind: ItemKind::Trait(_, _, _, bounds, ..),\n+            ..\n+        } = item\n+        {\n+            rollup_traits(cx, bounds, \"these bounds contain repeated elements\");\n+        }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'tcx>) {\n@@ -178,30 +207,18 @@ impl TraitBounds {\n                 );\n \n                 then {\n-                    let mut hint_string = format!(\n-                        \"consider combining the bounds: `{}:\",\n-                        snippet(cx, p.bounded_ty.span, \"_\")\n+                    let trait_bounds = v\n+                        .iter()\n+                        .copied()\n+                        .chain(p.bounds.iter())\n+                        .filter_map(get_trait_info_from_bound)\n+                        .map(|(_, _, span)| snippet_with_applicability(cx, span, \"..\", &mut applicability))\n+                        .join(\" + \");\n+                    let hint_string = format!(\n+                        \"consider combining the bounds: `{}: {}`\",\n+                        snippet(cx, p.bounded_ty.span, \"_\"),\n+                        trait_bounds,\n                     );\n-                    for b in v.iter() {\n-                        if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n-                            let path = &poly_trait_ref.trait_ref.path;\n-                            let _ = write!(hint_string,\n-                                \" {} +\",\n-                                snippet_with_applicability(cx, path.span, \"..\", &mut applicability)\n-                            );\n-                        }\n-                    }\n-                    for b in p.bounds.iter() {\n-                        if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n-                            let path = &poly_trait_ref.trait_ref.path;\n-                            let _ = write!(hint_string,\n-                                \" {} +\",\n-                                snippet_with_applicability(cx, path.span, \"..\", &mut applicability)\n-                            );\n-                        }\n-                    }\n-                    hint_string.truncate(hint_string.len() - 2);\n-                    hint_string.push('`');\n                     span_lint_and_help(\n                         cx,\n                         TYPE_REPETITION_IN_BOUNDS,\n@@ -253,10 +270,107 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n     }\n }\n \n+#[derive(PartialEq, Eq, Hash, Debug)]\n+struct ComparableTraitRef(Res, Vec<Res>);\n+\n+fn check_bounds_or_where_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n+    if gen.span.from_expansion() {\n+        return;\n+    }\n+\n+    for predicate in gen.predicates {\n+        if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate {\n+            let msg = if predicate.in_where_clause() {\n+                \"these where clauses contain repeated elements\"\n+            } else {\n+                \"these bounds contain repeated elements\"\n+            };\n+            rollup_traits(cx, bound_predicate.bounds, msg);\n+        }\n+    }\n+}\n+\n fn get_trait_info_from_bound<'a>(bound: &'a GenericBound<'_>) -> Option<(Res, &'a [PathSegment<'a>], Span)> {\n-    if let GenericBound::Trait(t, _) = bound {\n-        Some((t.trait_ref.path.res, t.trait_ref.path.segments, t.span))\n+    if let GenericBound::Trait(t, tbm) = bound {\n+        let trait_path = t.trait_ref.path;\n+        let trait_span = {\n+            let path_span = trait_path.span;\n+            if let TraitBoundModifier::Maybe = tbm {\n+                path_span.with_lo(path_span.lo() - BytePos(1)) // include the `?`\n+            } else {\n+                path_span\n+            }\n+        };\n+        Some((trait_path.res, trait_path.segments, trait_span))\n     } else {\n         None\n     }\n }\n+\n+// FIXME: ComparableTraitRef does not support nested bounds needed for associated_type_bounds\n+fn into_comparable_trait_ref(trait_ref: &TraitRef<'_>) -> ComparableTraitRef {\n+    ComparableTraitRef(\n+        trait_ref.path.res,\n+        trait_ref\n+            .path\n+            .segments\n+            .iter()\n+            .filter_map(|segment| {\n+                // get trait bound type arguments\n+                Some(segment.args?.args.iter().filter_map(|arg| {\n+                    if_chain! {\n+                        if let GenericArg::Type(ty) = arg;\n+                        if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind;\n+                        then { return Some(path.res) }\n+                    }\n+                    None\n+                }))\n+            })\n+            .flatten()\n+            .collect(),\n+    )\n+}\n+\n+fn rollup_traits(cx: &LateContext<'_>, bounds: &[GenericBound<'_>], msg: &str) {\n+    let mut map = FxHashMap::default();\n+    let mut repeated_res = false;\n+\n+    let only_comparable_trait_refs = |bound: &GenericBound<'_>| {\n+        if let GenericBound::Trait(t, _) = bound {\n+            Some((into_comparable_trait_ref(&t.trait_ref), t.span))\n+        } else {\n+            None\n+        }\n+    };\n+\n+    for bound in bounds.iter().filter_map(only_comparable_trait_refs) {\n+        let (comparable_bound, span_direct) = bound;\n+        if map.insert(comparable_bound, span_direct).is_some() {\n+            repeated_res = true;\n+        }\n+    }\n+\n+    if_chain! {\n+        if repeated_res;\n+        if let [first_trait, .., last_trait] = bounds;\n+        then {\n+            let all_trait_span = first_trait.span().to(last_trait.span());\n+\n+            let mut traits = map.values()\n+                .filter_map(|span| snippet_opt(cx, *span))\n+                .collect::<Vec<_>>();\n+            traits.sort_unstable();\n+            let traits = traits.join(\" + \");\n+\n+            span_lint_and_sugg(\n+                cx,\n+                TRAIT_DUPLICATION_IN_BOUNDS,\n+                all_trait_span,\n+                msg,\n+                \"try\",\n+                traits,\n+                Applicability::MachineApplicable\n+            );\n+        }\n+    }\n+}"}, {"sha": "ba51404d214832976e245a61076d08bb7bfbceb8", "filename": "src/tools/clippy/clippy_lints/src/types/box_collection.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -15,19 +15,17 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 sym::String => \"\",\n                 _ => \"<..>\",\n             };\n+\n+            let box_content = format!(\"{outer}{generic}\", outer = item_type);\n             span_lint_and_help(\n                 cx,\n                 BOX_COLLECTION,\n                 hir_ty.span,\n                 &format!(\n-                    \"you seem to be trying to use `Box<{outer}{generic}>`. Consider using just `{outer}{generic}`\",\n-                    outer=item_type,\n-                    generic = generic),\n+                    \"you seem to be trying to use `Box<{box_content}>`. Consider using just `{box_content}`\"),\n                 None,\n                 &format!(\n-                    \"`{outer}{generic}` is already on the heap, `Box<{outer}{generic}>` makes an extra allocation\",\n-                    outer=item_type,\n-                    generic = generic)\n+                    \"`{box_content}` is already on the heap, `Box<{box_content}>` makes an extra allocation\")\n             );\n             true\n         } else {\n@@ -39,7 +37,18 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n fn get_std_collection(cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<Symbol> {\n     let param = qpath_generic_tys(qpath).next()?;\n     let id = path_def_id(cx, param)?;\n-    cx.tcx\n-        .get_diagnostic_name(id)\n-        .filter(|&name| matches!(name, sym::HashMap | sym::String | sym::Vec))\n+    cx.tcx.get_diagnostic_name(id).filter(|&name| {\n+        matches!(\n+            name,\n+            sym::HashMap\n+                | sym::String\n+                | sym::Vec\n+                | sym::HashSet\n+                | sym::VecDeque\n+                | sym::LinkedList\n+                | sym::BTreeMap\n+                | sym::BTreeSet\n+                | sym::BinaryHeap\n+        )\n+    })\n }"}, {"sha": "04f16fd2161c51a0cdbed5e35419540052e912c5", "filename": "src/tools/clippy/clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -265,14 +265,28 @@ fn span_from_macro_expansion_has_safety_comment(cx: &LateContext<'_>, span: Span\n     }\n }\n \n+fn get_body_search_span(cx: &LateContext<'_>) -> Option<Span> {\n+    let body = cx.enclosing_body?;\n+    let map = cx.tcx.hir();\n+    let mut span = map.body(body).value.span;\n+    for (_, node) in map.parent_iter(body.hir_id) {\n+        match node {\n+            Node::Expr(e) => span = e.span,\n+            Node::Block(_) | Node::Arm(_) | Node::Stmt(_) | Node::Local(_) => (),\n+            _ => break,\n+        }\n+    }\n+    Some(span)\n+}\n+\n fn span_in_body_has_safety_comment(cx: &LateContext<'_>, span: Span) -> bool {\n     let source_map = cx.sess().source_map();\n     let ctxt = span.ctxt();\n     if ctxt == SyntaxContext::root()\n-        && let Some(body) = cx.enclosing_body\n+        && let Some(search_span) = get_body_search_span(cx)\n     {\n         if let Ok(unsafe_line) = source_map.lookup_line(span.lo())\n-            && let Some(body_span) = walk_span_to_context(cx.tcx.hir().body(body).value.span, SyntaxContext::root())\n+            && let Some(body_span) = walk_span_to_context(search_span, SyntaxContext::root())\n             && let Ok(body_line) = source_map.lookup_line(body_span.lo())\n             && Lrc::ptr_eq(&unsafe_line.sf, &body_line.sf)\n             && let Some(src) = unsafe_line.sf.src.as_deref()"}, {"sha": "aec028d5c4824b63bfad47af38eca5846a18ab1a", "filename": "src/tools/clippy/clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 106, "deletions": 51, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,59 +1,56 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::get_parent_node;\n use clippy_utils::source::snippet_with_macro_callsite;\n-use clippy_utils::visitors::for_each_value_source;\n+use clippy_utils::visitors::{for_each_local_assignment, for_each_value_source};\n use core::ops::ControlFlow;\n use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{Expr, ExprKind, PatKind, Stmt, StmtKind};\n+use rustc_hir::{Expr, ExprKind, HirId, HirIdSet, Local, Node, PatKind, QPath, TyKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Ty, TypeVisitable, TypeSuperVisitable, TypeVisitor};\n+use rustc_middle::ty;\n \n use super::LET_UNIT_VALUE;\n \n-pub(super) fn check(cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n-    if let StmtKind::Local(local) = stmt.kind\n-        && let Some(init) = local.init\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>) {\n+    if let Some(init) = local.init\n         && !local.pat.span.from_expansion()\n-        && !in_external_macro(cx.sess(), stmt.span)\n+        && !in_external_macro(cx.sess(), local.span)\n         && cx.typeck_results().pat_ty(local.pat).is_unit()\n     {\n-        let needs_inferred = for_each_value_source(init, &mut |e| if needs_inferred_result_ty(cx, e) {\n-            ControlFlow::Continue(())\n-        } else {\n-            ControlFlow::Break(())\n-        }).is_continue();\n-\n-        if needs_inferred {\n-            if !matches!(local.pat.kind, PatKind::Wild) {\n+        if (local.ty.map_or(false, |ty| !matches!(ty.kind, TyKind::Infer))\n+            || matches!(local.pat.kind, PatKind::Tuple([], None)))\n+            && expr_needs_inferred_result(cx, init)\n+        {\n+            if !matches!(local.pat.kind, PatKind::Wild | PatKind::Tuple([], None)) {\n                 span_lint_and_then(\n                     cx,\n                     LET_UNIT_VALUE,\n-                    stmt.span,\n+                    local.span,\n                     \"this let-binding has unit value\",\n                     |diag| {\n-                            diag.span_suggestion(\n-                                local.pat.span,\n-                                \"use a wild (`_`) binding\",\n-                                \"_\",\n-                                Applicability::MaybeIncorrect, // snippet\n-                            );\n+                        diag.span_suggestion(\n+                            local.pat.span,\n+                            \"use a wild (`_`) binding\",\n+                            \"_\",\n+                            Applicability::MaybeIncorrect, // snippet\n+                        );\n                     },\n                 );\n             }\n         } else {\n             span_lint_and_then(\n                 cx,\n                 LET_UNIT_VALUE,\n-                stmt.span,\n+                local.span,\n                 \"this let-binding has unit value\",\n                 |diag| {\n                     if let Some(expr) = &local.init {\n                         let snip = snippet_with_macro_callsite(cx, expr.span, \"()\");\n                         diag.span_suggestion(\n-                            stmt.span,\n+                            local.span,\n                             \"omit the `let` binding\",\n-                            format!(\"{};\", snip),\n+                            format!(\"{snip};\"),\n                             Applicability::MachineApplicable, // snippet\n                         );\n                     }\n@@ -63,48 +60,106 @@ pub(super) fn check(cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n     }\n }\n \n-fn needs_inferred_result_ty(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n-    let id = match e.kind {\n+/// Checks sub-expressions which create the value returned by the given expression for whether\n+/// return value inference is needed. This checks through locals to see if they also need inference\n+/// at this point.\n+///\n+/// e.g.\n+/// ```rust,ignore\n+/// let bar = foo();\n+/// let x: u32 = if true { baz() } else { bar };\n+/// ```\n+/// Here the sources of the value assigned to `x` would be `baz()`, and `foo()` via the\n+/// initialization of `bar`. If both `foo` and `baz` have a return type which require type\n+/// inference then this function would return `true`.\n+fn expr_needs_inferred_result<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n+    // The locals used for initialization which have yet to be checked.\n+    let mut locals_to_check = Vec::new();\n+    // All the locals which have been added to `locals_to_check`. Needed to prevent cycles.\n+    let mut seen_locals = HirIdSet::default();\n+    if !each_value_source_needs_inference(cx, e, &mut locals_to_check, &mut seen_locals) {\n+        return false;\n+    }\n+    while let Some(id) = locals_to_check.pop() {\n+        if let Some(Node::Local(l)) = get_parent_node(cx.tcx, id) {\n+            if !l.ty.map_or(true, |ty| matches!(ty.kind, TyKind::Infer)) {\n+                return false;\n+            }\n+            if let Some(e) = l.init {\n+                if !each_value_source_needs_inference(cx, e, &mut locals_to_check, &mut seen_locals) {\n+                    return false;\n+                }\n+            } else if for_each_local_assignment(cx, id, |e| {\n+                if each_value_source_needs_inference(cx, e, &mut locals_to_check, &mut seen_locals) {\n+                    ControlFlow::Continue(())\n+                } else {\n+                    ControlFlow::Break(())\n+                }\n+            })\n+            .is_break()\n+            {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    true\n+}\n+\n+fn each_value_source_needs_inference(\n+    cx: &LateContext<'_>,\n+    e: &Expr<'_>,\n+    locals_to_check: &mut Vec<HirId>,\n+    seen_locals: &mut HirIdSet,\n+) -> bool {\n+    for_each_value_source(e, &mut |e| {\n+        if needs_inferred_result_ty(cx, e, locals_to_check, seen_locals) {\n+            ControlFlow::Continue(())\n+        } else {\n+            ControlFlow::Break(())\n+        }\n+    })\n+    .is_continue()\n+}\n+\n+fn needs_inferred_result_ty(\n+    cx: &LateContext<'_>,\n+    e: &Expr<'_>,\n+    locals_to_check: &mut Vec<HirId>,\n+    seen_locals: &mut HirIdSet,\n+) -> bool {\n+    let (id, args) = match e.kind {\n         ExprKind::Call(\n             Expr {\n                 kind: ExprKind::Path(ref path),\n                 hir_id,\n                 ..\n             },\n-            _,\n+            args,\n         ) => match cx.qpath_res(path, *hir_id) {\n-            Res::Def(DefKind::AssocFn | DefKind::Fn, id) => id,\n+            Res::Def(DefKind::AssocFn | DefKind::Fn, id) => (id, args),\n             _ => return false,\n         },\n-        ExprKind::MethodCall(..) => match cx.typeck_results().type_dependent_def_id(e.hir_id) {\n-            Some(id) => id,\n+        ExprKind::MethodCall(_, args, _) => match cx.typeck_results().type_dependent_def_id(e.hir_id) {\n+            Some(id) => (id, args),\n             None => return false,\n         },\n+        ExprKind::Path(QPath::Resolved(None, path)) => {\n+            if let Res::Local(id) = path.res\n+                && seen_locals.insert(id)\n+            {\n+                locals_to_check.push(id);\n+            }\n+            return true;\n+        },\n         _ => return false,\n     };\n     let sig = cx.tcx.fn_sig(id).skip_binder();\n     if let ty::Param(output_ty) = *sig.output().kind() {\n-        sig.inputs().iter().all(|&ty| !ty_contains_param(ty, output_ty.index))\n+        sig.inputs().iter().zip(args).all(|(&ty, arg)| {\n+            !ty.is_param(output_ty.index) || each_value_source_needs_inference(cx, arg, locals_to_check, seen_locals)\n+        })\n     } else {\n         false\n     }\n }\n-\n-fn ty_contains_param(ty: Ty<'_>, index: u32) -> bool {\n-    struct Visitor(u32);\n-    impl<'tcx> TypeVisitor<'tcx> for Visitor {\n-        type BreakTy = ();\n-        fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            if let ty::Param(ty) = *ty.kind() {\n-                if ty.index == self.0 {\n-                    ControlFlow::BREAK\n-                } else {\n-                    ControlFlow::CONTINUE\n-                }\n-            } else {\n-                ty.super_visit_with(self)\n-            }\n-        }\n-    }\n-    ty.visit_with(&mut Visitor(index)).is_break()\n-}"}, {"sha": "6aa86a57c9bdf58b2ccb07cd804c5a1d292da1b6", "filename": "src/tools/clippy/clippy_lints/src/unit_types/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Fmod.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -3,7 +3,7 @@ mod unit_arg;\n mod unit_cmp;\n mod utils;\n \n-use rustc_hir::{Expr, Stmt};\n+use rustc_hir::{Expr, Local};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -98,9 +98,9 @@ declare_clippy_lint! {\n \n declare_lint_pass!(UnitTypes => [LET_UNIT_VALUE, UNIT_CMP, UNIT_ARG]);\n \n-impl LateLintPass<'_> for UnitTypes {\n-    fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n-        let_unit_value::check(cx, stmt);\n+impl<'tcx> LateLintPass<'tcx> for UnitTypes {\n+    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n+        let_unit_value::check(cx, local);\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {"}, {"sha": "b309653291b11ce58d3d1d3a45eb696705490cbd", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -20,8 +20,8 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::{\n-    BinOpKind, Block, Expr, ExprKind, HirId, Item, Local, MutTy, Mutability, Node, Path, Stmt, StmtKind, Ty, TyKind,\n-    UnOp,\n+    BinOpKind, Block, Closure, Expr, ExprKind, HirId, Item, Local, MutTy, Mutability, Node, Path, Stmt, StmtKind, Ty,\n+    TyKind, UnOp,\n };\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n@@ -730,8 +730,8 @@ impl<'tcx> LateLintPass<'tcx> for CollapsibleCalls {\n             if let ExprKind::Call(func, and_then_args) = expr.kind;\n             if is_expr_path_def_path(cx, func, &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_then\"]);\n             if and_then_args.len() == 5;\n-            if let ExprKind::Closure { body, .. } = &and_then_args[4].kind;\n-            let body = cx.tcx.hir().body(*body);\n+            if let ExprKind::Closure(&Closure { body, .. }) = &and_then_args[4].kind;\n+            let body = cx.tcx.hir().body(body);\n             let only_expr = peel_blocks_with_stmt(&body.value);\n             if let ExprKind::MethodCall(ps, span_call_args, _) = &only_expr.kind;\n             if let ExprKind::Path(..) = span_call_args[0].kind;"}, {"sha": "92934c16d4b406a252e121355671e60dfc425dbe", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -17,7 +17,7 @@ use if_chain::if_chain;\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{\n-    self as hir, def::DefKind, intravisit, intravisit::Visitor, ExprKind, Item, ItemKind, Mutability, QPath,\n+    self as hir, def::DefKind, intravisit, intravisit::Visitor, Closure, ExprKind, Item, ItemKind, Mutability, QPath,\n };\n use rustc_lint::{CheckLintNameResult, LateContext, LateLintPass, LintContext, LintId};\n use rustc_middle::hir::nested_filter;\n@@ -843,7 +843,7 @@ fn get_lint_group(cx: &LateContext<'_>, lint_id: LintId) -> Option<String> {\n fn get_lint_level_from_group(lint_group: &str) -> Option<&'static str> {\n     DEFAULT_LINT_LEVELS\n         .iter()\n-        .find_map(|(group_name, group_level)| (*group_name == lint_group).then(|| *group_level))\n+        .find_map(|(group_name, group_level)| (*group_name == lint_group).then_some(*group_level))\n }\n \n pub(super) fn is_deprecated_lint(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n@@ -958,7 +958,7 @@ fn resolve_applicability<'hir>(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hi\n }\n \n fn check_is_multi_part<'hir>(cx: &LateContext<'hir>, closure_expr: &'hir hir::Expr<'hir>) -> bool {\n-    if let ExprKind::Closure { body, .. } = closure_expr.kind {\n+    if let ExprKind::Closure(&Closure { body, .. }) = closure_expr.kind {\n         let mut scanner = IsMultiSpanScanner::new(cx);\n         intravisit::walk_body(&mut scanner, cx.tcx.hir().body(body));\n         return scanner.is_multi_part();\n@@ -1018,7 +1018,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for LintResolver<'a, 'hir> {\n /// This visitor finds the highest applicability value in the visited expressions\n struct ApplicabilityResolver<'a, 'hir> {\n     cx: &'a LateContext<'hir>,\n-    /// This is the index of hightest `Applicability` for `paths::APPLICABILITY_VALUES`\n+    /// This is the index of highest `Applicability` for `paths::APPLICABILITY_VALUES`\n     applicability_index: Option<usize>,\n }\n "}, {"sha": "08b8894752011c86a51f8ea36aa15eba82a19cd8", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -515,7 +515,7 @@ impl Write {\n             args.push(arg, span);\n         }\n \n-        parser.errors.is_empty().then(move || args)\n+        parser.errors.is_empty().then_some(args)\n     }\n \n     /// Checks the arguments of `print[ln]!` and `write[ln]!` calls. It will return a tuple of two"}, {"sha": "b226026323be835a7f5be3231f8fe70f491bdc80", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -169,7 +169,12 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (Field(lp, lf), Field(rp, rf)) => eq_id(*lf, *rf) && eq_expr(lp, rp),\n         (Match(ls, la), Match(rs, ra)) => eq_expr(ls, rs) && over(la, ra, eq_arm),\n         (Closure(lb, lc, la, lm, lf, le, _), Closure(rb, rc, ra, rm, rf, re, _)) => {\n-            eq_closure_binder(lb, rb) && lc == rc && la.is_async() == ra.is_async() && lm == rm && eq_fn_decl(lf, rf) && eq_expr(le, re)\n+            eq_closure_binder(lb, rb)\n+                && lc == rc\n+                && la.is_async() == ra.is_async()\n+                && lm == rm\n+                && eq_fn_decl(lf, rf)\n+                && eq_expr(le, re)\n         },\n         (Async(lc, _, lb), Async(rc, _, rb)) => lc == rc && eq_block(lb, rb),\n         (Range(lf, lt, ll), Range(rf, rt, rl)) => ll == rl && eq_expr_opt(lf, rf) && eq_expr_opt(lt, rt),\n@@ -564,8 +569,9 @@ pub fn eq_fn_decl(l: &FnDecl, r: &FnDecl) -> bool {\n pub fn eq_closure_binder(l: &ClosureBinder, r: &ClosureBinder) -> bool {\n     match (l, r) {\n         (ClosureBinder::NotPresent, ClosureBinder::NotPresent) => true,\n-        (ClosureBinder::For { generic_params: lp, .. }, ClosureBinder::For { generic_params: rp, .. }) => \n-            lp.len() == rp.len() && std::iter::zip(lp.iter(), rp.iter()).all(|(l, r)| eq_generic_param(l, r)),\n+        (ClosureBinder::For { generic_params: lp, .. }, ClosureBinder::For { generic_params: rp, .. }) => {\n+            lp.len() == rp.len() && std::iter::zip(lp.iter(), rp.iter()).all(|(l, r)| eq_generic_param(l, r))\n+        },\n         _ => false,\n     }\n }\n@@ -610,7 +616,7 @@ pub fn eq_ext(l: &Extern, r: &Extern) -> bool {\n     use Extern::*;\n     match (l, r) {\n         (None, None) | (Implicit(_), Implicit(_)) => true,\n-        (Explicit(l,_), Explicit(r,_)) => eq_str_lit(l, r),\n+        (Explicit(l, _), Explicit(r, _)) => eq_str_lit(l, r),\n         _ => false,\n     }\n }"}, {"sha": "77c974582ecb0e9b604f3e8ac432399a215efbe6", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -6,9 +6,9 @@ use rustc_data_structures::fx::FxHasher;\n use rustc_hir::def::Res;\n use rustc_hir::HirIdMap;\n use rustc_hir::{\n-    ArrayLen, BinOpKind, Closure, Block, BodyId, Expr, ExprField, ExprKind, FnRetTy, GenericArg, GenericArgs, Guard, HirId,\n-    InlineAsmOperand, Let, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path, PathSegment, QPath, Stmt,\n-    StmtKind, Ty, TyKind, TypeBinding,\n+    ArrayLen, BinOpKind, Block, BodyId, Closure, Expr, ExprField, ExprKind, FnRetTy, GenericArg, GenericArgs, Guard,\n+    HirId, InlineAsmOperand, Let, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path, PathSegment, QPath,\n+    Stmt, StmtKind, Ty, TyKind, TypeBinding,\n };\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::LateContext;\n@@ -102,7 +102,7 @@ pub struct HirEqInterExpr<'a, 'b, 'tcx> {\n impl HirEqInterExpr<'_, '_, '_> {\n     pub fn eq_stmt(&mut self, left: &Stmt<'_>, right: &Stmt<'_>) -> bool {\n         match (&left.kind, &right.kind) {\n-            (&StmtKind::Local(l, ), &StmtKind::Local(r, )) => {\n+            (&StmtKind::Local(l), &StmtKind::Local(r)) => {\n                 // This additional check ensures that the type of the locals are equivalent even if the init\n                 // expression or type have some inferred parts.\n                 if let Some((typeck_lhs, typeck_rhs)) = self.inner.maybe_typeck_results {\n@@ -922,7 +922,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         std::mem::discriminant(&b.kind).hash(&mut self.s);\n \n         match &b.kind {\n-            StmtKind::Local(local, ) => {\n+            StmtKind::Local(local) => {\n                 self.hash_pat(local.pat);\n                 if let Some(init) = local.init {\n                     self.hash_expr(init);"}, {"sha": "2fdda9fac1629703edbca57d3327843de120d863", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -93,7 +93,9 @@ use rustc_middle::ty::fast_reject::SimplifiedTypeGen::{\n     ArraySimplifiedType, BoolSimplifiedType, CharSimplifiedType, FloatSimplifiedType, IntSimplifiedType,\n     PtrSimplifiedType, SliceSimplifiedType, StrSimplifiedType, UintSimplifiedType,\n };\n-use rustc_middle::ty::{layout::IntegerExt, BorrowKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeVisitable, UpvarCapture};\n+use rustc_middle::ty::{\n+    layout::IntegerExt, BorrowKind, ClosureKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeVisitable, UpvarCapture,\n+};\n use rustc_middle::ty::{FloatTy, IntTy, UintTy};\n use rustc_semver::RustcVersion;\n use rustc_session::Session;\n@@ -105,7 +107,7 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::Integer;\n \n use crate::consts::{constant, Constant};\n-use crate::ty::{can_partially_move_ty, is_copy, is_recursively_primitive_type};\n+use crate::ty::{can_partially_move_ty, expr_sig, is_copy, is_recursively_primitive_type, ty_is_fn_once_param};\n use crate::visitors::expr_visitor_no_bodies;\n \n pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<RustcVersion> {\n@@ -890,7 +892,7 @@ pub fn capture_local_usage<'tcx>(cx: &LateContext<'tcx>, e: &Expr<'_>) -> Captur\n             Node::Expr(e) => match e.kind {\n                 ExprKind::AddrOf(_, mutability, _) => return CaptureKind::Ref(mutability),\n                 ExprKind::Index(..) | ExprKind::Unary(UnOp::Deref, _) => capture = CaptureKind::Ref(Mutability::Not),\n-                ExprKind::Assign(lhs, ..) | ExprKind::Assign(_, lhs, _) if lhs.hir_id == child_id => {\n+                ExprKind::Assign(lhs, ..) | ExprKind::AssignOp(_, lhs, _) if lhs.hir_id == child_id => {\n                     return CaptureKind::Ref(Mutability::Mut);\n                 },\n                 ExprKind::Field(..) => {\n@@ -1016,7 +1018,7 @@ pub fn can_move_expr_to_closure<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'\n         captures: HirIdMap::default(),\n     };\n     v.visit_expr(expr);\n-    v.allow_closure.then(|| v.captures)\n+    v.allow_closure.then_some(v.captures)\n }\n \n /// Returns the method names and argument list of nested method call expressions that make up\n@@ -1197,16 +1199,54 @@ pub fn get_enclosing_block<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n }\n \n /// Gets the loop or closure enclosing the given expression, if any.\n-pub fn get_enclosing_loop_or_closure<'tcx>(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n-    for (_, node) in tcx.hir().parent_iter(expr.hir_id) {\n+pub fn get_enclosing_loop_or_multi_call_closure<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &Expr<'_>,\n+) -> Option<&'tcx Expr<'tcx>> {\n+    for (_, node) in cx.tcx.hir().parent_iter(expr.hir_id) {\n         match node {\n-            Node::Expr(\n-                e @ Expr {\n-                    kind: ExprKind::Loop(..) | ExprKind::Closure { .. },\n-                    ..\n+            Node::Expr(e) => match e.kind {\n+                ExprKind::Closure { .. } => {\n+                    if let rustc_ty::Closure(_, subs) = cx.typeck_results().expr_ty(e).kind()\n+                        && subs.as_closure().kind() == ClosureKind::FnOnce\n+                    {\n+                        continue;\n+                    }\n+                    let is_once = walk_to_expr_usage(cx, e, |node, id| {\n+                        let Node::Expr(e) = node else {\n+                            return None;\n+                        };\n+                        match e.kind {\n+                            ExprKind::Call(f, _) if f.hir_id == id => Some(()),\n+                            ExprKind::Call(f, args) => {\n+                                let i = args.iter().position(|arg| arg.hir_id == id)?;\n+                                let sig = expr_sig(cx, f)?;\n+                                let predicates = sig\n+                                    .predicates_id()\n+                                    .map_or(cx.param_env, |id| cx.tcx.param_env(id))\n+                                    .caller_bounds();\n+                                sig.input(i).and_then(|ty| {\n+                                    ty_is_fn_once_param(cx.tcx, ty.skip_binder(), predicates).then_some(())\n+                                })\n+                            },\n+                            ExprKind::MethodCall(_, args, _) => {\n+                                let i = args.iter().position(|arg| arg.hir_id == id)?;\n+                                let id = cx.typeck_results().type_dependent_def_id(e.hir_id)?;\n+                                let ty = cx.tcx.fn_sig(id).skip_binder().inputs()[i];\n+                                ty_is_fn_once_param(cx.tcx, ty, cx.tcx.param_env(id).caller_bounds()).then_some(())\n+                            },\n+                            _ => None,\n+                        }\n+                    })\n+                    .is_some();\n+                    if !is_once {\n+                        return Some(e);\n+                    }\n                 },\n-            ) => return Some(e),\n-            Node::Expr(_) | Node::Stmt(_) | Node::Block(_) | Node::Local(_) | Node::Arm(_) => (),\n+                ExprKind::Loop(..) => return Some(e),\n+                _ => (),\n+            },\n+            Node::Stmt(_) | Node::Block(_) | Node::Local(_) | Node::Arm(_) => (),\n             _ => break,\n         }\n     }"}, {"sha": "9e238c6f1ac0ef84a8883d8d6c84d695ccd28cfd", "filename": "src/tools/clippy/clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -12,6 +12,7 @@ macro_rules! msrv_aliases {\n \n // names may refer to stabilized feature flags or library items\n msrv_aliases! {\n+    1,62,0 { BOOL_THEN_SOME }\n     1,53,0 { OR_PATTERNS, MANUAL_BITS, BTREE_MAP_RETAIN, BTREE_SET_RETAIN }\n     1,52,0 { STR_SPLIT_ONCE, REM_EUCLID_CONST }\n     1,51,0 { BORROW_AS_PTR, UNSIGNED_ABS }"}, {"sha": "05429d05d9ebe8285698298b598daeaab5eb1347", "filename": "src/tools/clippy/clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -163,6 +163,7 @@ pub const STR_BYTES: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"bytes\"];\n pub const STR_CHARS: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"chars\"];\n pub const STR_ENDS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"ends_with\"];\n pub const STR_FROM_UTF8: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8\"];\n+pub const STR_FROM_UTF8_UNCHECKED: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8_unchecked\"];\n pub const STR_LEN: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"len\"];\n pub const STR_STARTS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"starts_with\"];\n #[cfg(feature = \"internal\")]"}, {"sha": "1197fe914de46853dd3dcdde12daec9a6097fbcc", "filename": "src/tools/clippy/clippy_utils/src/source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsource.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -353,7 +353,7 @@ pub fn snippet_with_context<'a>(\n /// span containing `m!(0)`.\n pub fn walk_span_to_context(span: Span, outer: SyntaxContext) -> Option<Span> {\n     let outer_span = hygiene::walk_chain(span, outer);\n-    (outer_span.ctxt() == outer).then(|| outer_span)\n+    (outer_span.ctxt() == outer).then_some(outer_span)\n }\n \n /// Removes block comments from the given `Vec` of lines."}, {"sha": "bad291dfc2513f6a0318437107dff89432b03e55", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -2,6 +2,7 @@\n #![deny(clippy::missing_docs_in_private_items)]\n \n use crate::source::{snippet, snippet_opt, snippet_with_applicability, snippet_with_macro_callsite};\n+use crate::ty::expr_sig;\n use crate::{get_parent_expr_for_hir, higher};\n use rustc_ast::util::parser::AssocOp;\n use rustc_ast::{ast, token};\n@@ -18,7 +19,6 @@ use rustc_span::source_map::{BytePos, CharPos, Pos, Span, SyntaxContext};\n use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use std::borrow::Cow;\n use std::fmt::{Display, Write as _};\n-use std::iter;\n use std::ops::{Add, Neg, Not, Sub};\n \n /// A helper type to build suggestion correctly handling parentheses.\n@@ -861,23 +861,37 @@ impl<'tcx> DerefDelegate<'_, 'tcx> {\n \n     /// indicates whether the function from `parent_expr` takes its args by double reference\n     fn func_takes_arg_by_double_ref(&self, parent_expr: &'tcx hir::Expr<'_>, cmt_hir_id: HirId) -> bool {\n-        let (call_args, inputs) = match parent_expr.kind {\n+        let ty = match parent_expr.kind {\n             ExprKind::MethodCall(_, call_args, _) => {\n-                if let Some(method_did) = self.cx.typeck_results().type_dependent_def_id(parent_expr.hir_id) {\n-                    (call_args, self.cx.tcx.fn_sig(method_did).skip_binder().inputs())\n+                if let Some(sig) = self\n+                    .cx\n+                    .typeck_results()\n+                    .type_dependent_def_id(parent_expr.hir_id)\n+                    .map(|did| self.cx.tcx.fn_sig(did).skip_binder())\n+                {\n+                    call_args\n+                        .iter()\n+                        .position(|arg| arg.hir_id == cmt_hir_id)\n+                        .map(|i| sig.inputs()[i])\n                 } else {\n                     return false;\n                 }\n             },\n             ExprKind::Call(func, call_args) => {\n-                let typ = self.cx.typeck_results().expr_ty(func);\n-                (call_args, typ.fn_sig(self.cx.tcx).skip_binder().inputs())\n+                if let Some(sig) = expr_sig(self.cx, func) {\n+                    call_args\n+                        .iter()\n+                        .position(|arg| arg.hir_id == cmt_hir_id)\n+                        .and_then(|i| sig.input(i))\n+                        .map(ty::Binder::skip_binder)\n+                } else {\n+                    return false;\n+                }\n             },\n             _ => return false,\n         };\n \n-        iter::zip(call_args, inputs)\n-            .any(|(arg, ty)| arg.hir_id == cmt_hir_id && matches!(ty.kind(), ty::Ref(_, inner, _) if inner.is_ref()))\n+        ty.map_or(false, |ty| matches!(ty.kind(), ty::Ref(_, inner, _) if inner.is_ref()))\n     }\n }\n "}, {"sha": "a05d633d980c3247b18f9e94140d379a80dd9c9c", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -147,7 +147,7 @@ pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<\n /// * [`get_trait_def_id`](super::get_trait_def_id) to get a trait [`DefId`].\n /// * [Common tools for writing lints] for an example how to use this function and other options.\n ///\n-/// [Common tools for writing lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/common_tools_writing_lints.md#checking-if-a-type-implements-a-specific-trait\n+/// [Common tools for writing lints]: https://github.com/rust-lang/rust-clippy/blob/master/book/src/development/common_tools_writing_lints.md#checking-if-a-type-implements-a-specific-trait\n pub fn implements_trait<'tcx>(\n     cx: &LateContext<'tcx>,\n     ty: Ty<'tcx>,\n@@ -501,7 +501,7 @@ pub fn all_predicates_of(tcx: TyCtxt<'_>, id: DefId) -> impl Iterator<Item = &(P\n /// A signature for a function like type.\n #[derive(Clone, Copy)]\n pub enum ExprFnSig<'tcx> {\n-    Sig(Binder<'tcx, FnSig<'tcx>>),\n+    Sig(Binder<'tcx, FnSig<'tcx>>, Option<DefId>),\n     Closure(Option<&'tcx FnDecl<'tcx>>, Binder<'tcx, FnSig<'tcx>>),\n     Trait(Binder<'tcx, Ty<'tcx>>, Option<Binder<'tcx, Ty<'tcx>>>),\n }\n@@ -510,7 +510,7 @@ impl<'tcx> ExprFnSig<'tcx> {\n     /// bounds only for variadic functions, otherwise this will panic.\n     pub fn input(self, i: usize) -> Option<Binder<'tcx, Ty<'tcx>>> {\n         match self {\n-            Self::Sig(sig) => {\n+            Self::Sig(sig, _) => {\n                 if sig.c_variadic() {\n                     sig.inputs().map_bound(|inputs| inputs.get(i).copied()).transpose()\n                 } else {\n@@ -527,7 +527,7 @@ impl<'tcx> ExprFnSig<'tcx> {\n     /// functions, otherwise this will panic.\n     pub fn input_with_hir(self, i: usize) -> Option<(Option<&'tcx hir::Ty<'tcx>>, Binder<'tcx, Ty<'tcx>>)> {\n         match self {\n-            Self::Sig(sig) => {\n+            Self::Sig(sig, _) => {\n                 if sig.c_variadic() {\n                     sig.inputs()\n                         .map_bound(|inputs| inputs.get(i).copied())\n@@ -549,31 +549,39 @@ impl<'tcx> ExprFnSig<'tcx> {\n     /// specified.\n     pub fn output(self) -> Option<Binder<'tcx, Ty<'tcx>>> {\n         match self {\n-            Self::Sig(sig) | Self::Closure(_, sig) => Some(sig.output()),\n+            Self::Sig(sig, _) | Self::Closure(_, sig) => Some(sig.output()),\n             Self::Trait(_, output) => output,\n         }\n     }\n+\n+    pub fn predicates_id(&self) -> Option<DefId> {\n+        if let ExprFnSig::Sig(_, id) = *self { id } else { None }\n+    }\n }\n \n /// If the expression is function like, get the signature for it.\n pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnSig<'tcx>> {\n     if let Res::Def(DefKind::Fn | DefKind::Ctor(_, CtorKind::Fn) | DefKind::AssocFn, id) = path_res(cx, expr) {\n-        Some(ExprFnSig::Sig(cx.tcx.fn_sig(id)))\n+        Some(ExprFnSig::Sig(cx.tcx.fn_sig(id), Some(id)))\n     } else {\n         ty_sig(cx, cx.typeck_results().expr_ty_adjusted(expr).peel_refs())\n     }\n }\n \n fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'tcx>> {\n+    if ty.is_box() {\n+        return ty_sig(cx, ty.boxed_ty());\n+    }\n     match *ty.kind() {\n         ty::Closure(id, subs) => {\n             let decl = id\n                 .as_local()\n                 .and_then(|id| cx.tcx.hir().fn_decl_by_hir_id(cx.tcx.hir().local_def_id_to_hir_id(id)));\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n-        ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs))),\n-        ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig)),\n+        ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n+        ty::Opaque(id, _) => ty_sig(cx, cx.tcx.type_of(id)),\n+        ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n         ty::Dynamic(bounds, _) => {\n             let lang_items = cx.tcx.lang_items();\n             match bounds.principal() {\n@@ -789,3 +797,33 @@ pub fn variant_of_res<'tcx>(cx: &LateContext<'tcx>, res: Res) -> Option<&'tcx Va\n         _ => None,\n     }\n }\n+\n+/// Checks if the type is a type parameter implementing `FnOnce`, but not `FnMut`.\n+pub fn ty_is_fn_once_param<'tcx>(tcx: TyCtxt<'_>, ty: Ty<'tcx>, predicates: &'tcx [Predicate<'_>]) -> bool {\n+    let ty::Param(ty) = *ty.kind() else {\n+        return false;\n+    };\n+    let lang = tcx.lang_items();\n+    let (Some(fn_once_id), Some(fn_mut_id), Some(fn_id))\n+        = (lang.fn_once_trait(), lang.fn_mut_trait(), lang.fn_trait())\n+    else {\n+        return false;\n+    };\n+    predicates\n+        .iter()\n+        .try_fold(false, |found, p| {\n+            if let PredicateKind::Trait(p) = p.kind().skip_binder()\n+            && let ty::Param(self_ty) = p.trait_ref.self_ty().kind()\n+            && ty.index == self_ty.index\n+        {\n+            // This should use `super_traits_of`, but that's a private function.\n+            if p.trait_ref.def_id == fn_once_id {\n+                return Some(true);\n+            } else if p.trait_ref.def_id == fn_mut_id || p.trait_ref.def_id == fn_id {\n+                return None;\n+            }\n+        }\n+            Some(found)\n+        })\n+        .unwrap_or(false)\n+}"}, {"sha": "bae8ad9f5659067030d39315aa3276d68a4910a5", "filename": "src/tools/clippy/clippy_utils/src/visitors.rs", "status": "modified", "additions": 115, "deletions": 1, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -5,14 +5,82 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::intravisit::{self, walk_block, walk_expr, Visitor};\n use rustc_hir::{\n-    Arm, Block, BlockCheckMode, Body, BodyId, Expr, ExprKind, HirId, ItemId, ItemKind, Let, QPath, Stmt, UnOp,\n+    Arm, Block, BlockCheckMode, Body, BodyId, Expr, ExprKind, HirId, ItemId, ItemKind, Let, Pat, QPath, Stmt, UnOp,\n     UnsafeSource, Unsafety,\n };\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::adjustment::Adjust;\n use rustc_middle::ty::{self, Ty, TypeckResults};\n+use rustc_span::Span;\n+\n+mod internal {\n+    /// Trait for visitor functions to control whether or not to descend to child nodes. Implemented\n+    /// for only two types. `()` always descends. `Descend` allows controlled descent.\n+    pub trait Continue {\n+        fn descend(&self) -> bool;\n+    }\n+}\n+use internal::Continue;\n+\n+impl Continue for () {\n+    fn descend(&self) -> bool {\n+        true\n+    }\n+}\n+\n+/// Allows for controlled descent when using visitor functions. Use `()` instead when always\n+/// descending into child nodes.\n+#[derive(Clone, Copy)]\n+pub enum Descend {\n+    Yes,\n+    No,\n+}\n+impl From<bool> for Descend {\n+    fn from(from: bool) -> Self {\n+        if from { Self::Yes } else { Self::No }\n+    }\n+}\n+impl Continue for Descend {\n+    fn descend(&self) -> bool {\n+        matches!(self, Self::Yes)\n+    }\n+}\n+\n+/// Calls the given function once for each expression contained. This does not enter any bodies or\n+/// nested items.\n+pub fn for_each_expr<'tcx, B, C: Continue>(\n+    node: impl Visitable<'tcx>,\n+    f: impl FnMut(&'tcx Expr<'tcx>) -> ControlFlow<B, C>,\n+) -> Option<B> {\n+    struct V<B, F> {\n+        f: F,\n+        res: Option<B>,\n+    }\n+    impl<'tcx, B, C: Continue, F: FnMut(&'tcx Expr<'tcx>) -> ControlFlow<B, C>> Visitor<'tcx> for V<B, F> {\n+        fn visit_expr(&mut self, e: &'tcx Expr<'tcx>) {\n+            if self.res.is_some() {\n+                return;\n+            }\n+            match (self.f)(e) {\n+                ControlFlow::Continue(c) if c.descend() => walk_expr(self, e),\n+                ControlFlow::Break(b) => self.res = Some(b),\n+                ControlFlow::Continue(_) => (),\n+            }\n+        }\n+\n+        // Avoid unnecessary `walk_*` calls.\n+        fn visit_ty(&mut self, _: &'tcx hir::Ty<'tcx>) {}\n+        fn visit_pat(&mut self, _: &'tcx Pat<'tcx>) {}\n+        fn visit_qpath(&mut self, _: &'tcx QPath<'tcx>, _: HirId, _: Span) {}\n+        // Avoid monomorphising all `visit_*` functions.\n+        fn visit_nested_item(&mut self, _: ItemId) {}\n+    }\n+    let mut v = V { f, res: None };\n+    node.visit(&mut v);\n+    v.res\n+}\n \n /// Convenience method for creating a `Visitor` with just `visit_expr` overridden and nested\n /// bodies (i.e. closures) are visited.\n@@ -617,3 +685,49 @@ pub fn any_temporaries_need_ordered_drop<'tcx>(cx: &LateContext<'tcx>, e: &'tcx\n     })\n     .is_break()\n }\n+\n+/// Runs the given function for each path expression referencing the given local which occur after\n+/// the given expression.\n+pub fn for_each_local_assignment<'tcx, B>(\n+    cx: &LateContext<'tcx>,\n+    local_id: HirId,\n+    f: impl FnMut(&'tcx Expr<'tcx>) -> ControlFlow<B>,\n+) -> ControlFlow<B> {\n+    struct V<'cx, 'tcx, F, B> {\n+        cx: &'cx LateContext<'tcx>,\n+        local_id: HirId,\n+        res: ControlFlow<B>,\n+        f: F,\n+    }\n+    impl<'cx, 'tcx, F: FnMut(&'tcx Expr<'tcx>) -> ControlFlow<B>, B> Visitor<'tcx> for V<'cx, 'tcx, F, B> {\n+        type NestedFilter = nested_filter::OnlyBodies;\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.cx.tcx.hir()\n+        }\n+\n+        fn visit_expr(&mut self, e: &'tcx Expr<'tcx>) {\n+            if let ExprKind::Assign(lhs, rhs, _) = e.kind\n+                && self.res.is_continue()\n+                && path_to_local_id(lhs, self.local_id)\n+            {\n+                self.res = (self.f)(rhs);\n+                self.visit_expr(rhs);\n+            } else {\n+                walk_expr(self, e);\n+            }\n+        }\n+    }\n+\n+    if let Some(b) = get_enclosing_block(cx, local_id) {\n+        let mut v = V {\n+            cx,\n+            local_id,\n+            res: ControlFlow::Continue(()),\n+            f,\n+        };\n+        v.visit_block(b);\n+        v.res\n+    } else {\n+        ControlFlow::Continue(())\n+    }\n+}"}, {"sha": "737c845c045153958cb8f542e24e3b9c4d21772d", "filename": "src/tools/clippy/lintcheck/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Flintcheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Flintcheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Flintcheck%2FCargo.toml?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"lintcheck\"\n version = \"0.0.1\"\n-description = \"tool to monitor impact of changes in Clippys lints on a part of the ecosystem\"\n+description = \"tool to monitor impact of changes in Clippy's lints on a part of the ecosystem\"\n readme = \"README.md\"\n license = \"MIT OR Apache-2.0\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n@@ -11,7 +11,7 @@ publish = false\n \n [dependencies]\n cargo_metadata = \"0.14\"\n-clap = \"3.1\"\n+clap = \"3.2\"\n flate2 = \"1.0\"\n rayon = \"1.5.1\"\n serde = { version = \"1.0\", features = [\"derive\"] }"}, {"sha": "6f3d23382ce15d7036855a029f882035ecc3c6fe", "filename": "src/tools/clippy/lintcheck/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Flintcheck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Flintcheck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Flintcheck%2FREADME.md?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -70,7 +70,7 @@ is explicitly specified in the options.\n \n ### Fix mode\n You can run `./lintcheck/target/debug/lintcheck --fix` which will run Clippy with `--fix` and\n-print a warning if Clippys suggestions fail to apply (if the resulting code does not build).  \n+print a warning if Clippy's suggestions fail to apply (if the resulting code does not build).  \n This lets us spot bad suggestions or false positives automatically in some cases.  \n \n Please note that the target dir should be cleaned afterwards since clippy will modify"}, {"sha": "9ee25280f046fdcbcf437a674109d4e38bf4614c", "filename": "src/tools/clippy/lintcheck/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Flintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Flintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Flintcheck%2Fsrc%2Fmain.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -545,7 +545,7 @@ fn lintcheck_needs_rerun(lintcheck_logs_path: &Path) -> bool {\n fn main() {\n     // assert that we launch lintcheck from the repo root (via cargo lintcheck)\n     if std::fs::metadata(\"lintcheck/Cargo.toml\").is_err() {\n-        eprintln!(\"lintcheck needs to be run from clippys repo root!\\nUse `cargo lintcheck` alternatively.\");\n+        eprintln!(\"lintcheck needs to be run from clippy's repo root!\\nUse `cargo lintcheck` alternatively.\");\n         std::process::exit(3);\n     }\n \n@@ -586,7 +586,7 @@ fn main() {\n         .map(|o| String::from_utf8_lossy(&o.stdout).into_owned())\n         .expect(\"could not get clippy version!\");\n \n-    // download and extract the crates, then run clippy on them and collect clippys warnings\n+    // download and extract the crates, then run clippy on them and collect clippy's warnings\n     // flatten into one big list of warnings\n \n     let crates = read_crates(&config.sources_toml_path);"}, {"sha": "e693e6837592fcaf0cf446016f11fdd3c6c173f2", "filename": "src/tools/clippy/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Frust-toolchain?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-06-30\"\n+channel = \"nightly-2022-07-15\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "3615d07154dfb2d44d1f78c101475d0896675fd4", "filename": "src/tools/clippy/tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -394,6 +394,7 @@ const RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS: &[&str] = &[\n     \"single_component_path_imports_nested_first.rs\",\n     \"string_add.rs\",\n     \"toplevel_ref_arg_non_rustfix.rs\",\n+    \"trait_duplication_in_bounds.rs\",\n     \"unit_arg.rs\",\n     \"unnecessary_clone.rs\",\n     \"unnecessary_lazy_eval_unfixable.rs\","}, {"sha": "5697e8680cd6f86779a303edfd5b63d940e8da14", "filename": "src/tools/clippy/tests/dogfood.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fdogfood.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -74,10 +74,16 @@ fn run_clippy_for_package(project: &str, args: &[&str]) {\n         .env(\"CARGO_INCREMENTAL\", \"0\")\n         .arg(\"clippy\")\n         .arg(\"--all-targets\")\n-        .arg(\"--all-features\")\n-        .arg(\"--\")\n-        .args(args)\n-        .arg(\"-Cdebuginfo=0\"); // disable debuginfo to generate less data in the target dir\n+        .arg(\"--all-features\");\n+\n+    if let Ok(dogfood_args) = std::env::var(\"__CLIPPY_DOGFOOD_ARGS\") {\n+        for arg in dogfood_args.split_whitespace() {\n+            command.arg(arg);\n+        }\n+    }\n+\n+    command.arg(\"--\").args(args);\n+    command.arg(\"-Cdebuginfo=0\"); // disable debuginfo to generate less data in the target dir\n \n     if cfg!(feature = \"internal\") {\n         // internal lints only exist if we build with the internal feature"}, {"sha": "c3aae1a9aa2d01992ee0c00b6c847bc869b033d0", "filename": "src/tools/clippy/tests/lint_message_convention.rs", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Flint_message_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Flint_message_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Flint_message_convention.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,8 +1,10 @@\n+#![feature(once_cell)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n use std::ffi::OsStr;\n use std::path::PathBuf;\n+use std::sync::LazyLock;\n \n use regex::RegexSet;\n \n@@ -14,42 +16,45 @@ struct Message {\n \n impl Message {\n     fn new(path: PathBuf) -> Self {\n-        let content: String = std::fs::read_to_string(&path).unwrap();\n         // we don't want the first letter after \"error: \", \"help: \" ... to be capitalized\n         // also no punctuation (except for \"?\" ?) at the end of a line\n-        let regex_set: RegexSet = RegexSet::new(&[\n-            r\"error: [A-Z]\",\n-            r\"help: [A-Z]\",\n-            r\"warning: [A-Z]\",\n-            r\"note: [A-Z]\",\n-            r\"try this: [A-Z]\",\n-            r\"error: .*[.!]$\",\n-            r\"help: .*[.!]$\",\n-            r\"warning: .*[.!]$\",\n-            r\"note: .*[.!]$\",\n-            r\"try this: .*[.!]$\",\n-        ])\n-        .unwrap();\n+        static REGEX_SET: LazyLock<RegexSet> = LazyLock::new(|| {\n+            RegexSet::new(&[\n+                r\"error: [A-Z]\",\n+                r\"help: [A-Z]\",\n+                r\"warning: [A-Z]\",\n+                r\"note: [A-Z]\",\n+                r\"try this: [A-Z]\",\n+                r\"error: .*[.!]$\",\n+                r\"help: .*[.!]$\",\n+                r\"warning: .*[.!]$\",\n+                r\"note: .*[.!]$\",\n+                r\"try this: .*[.!]$\",\n+            ])\n+            .unwrap()\n+        });\n \n         // sometimes the first character is capitalized and it is legal (like in \"C-like enum variants\") or\n         // we want to ask a question ending in \"?\"\n-        let exceptions_set: RegexSet = RegexSet::new(&[\n-            r\".*C-like enum variant discriminant is not portable to 32-bit targets\",\n-            r\".*did you mean `unix`?\",\n-            r\".*the arguments may be inverted...\",\n-            r\".*Intel x86 assembly syntax used\",\n-            r\".*AT&T x86 assembly syntax used\",\n-            r\".*remove .*the return type...\",\n-            r\"note: Clippy version: .*\",\n-            r\"the compiler unexpectedly panicked. this is a bug.\",\n-        ])\n-        .unwrap();\n+        static EXCEPTIONS_SET: LazyLock<RegexSet> = LazyLock::new(|| {\n+            RegexSet::new(&[\n+                r\"\\.\\.\\.$\",\n+                r\".*C-like enum variant discriminant is not portable to 32-bit targets\",\n+                r\".*Intel x86 assembly syntax used\",\n+                r\".*AT&T x86 assembly syntax used\",\n+                r\"note: Clippy version: .*\",\n+                r\"the compiler unexpectedly panicked. this is a bug.\",\n+            ])\n+            .unwrap()\n+        });\n+\n+        let content: String = std::fs::read_to_string(&path).unwrap();\n \n         let bad_lines = content\n             .lines()\n-            .filter(|line| regex_set.matches(line).matched_any())\n+            .filter(|line| REGEX_SET.matches(line).matched_any())\n             // ignore exceptions\n-            .filter(|line| !exceptions_set.matches(line).matched_any())\n+            .filter(|line| !EXCEPTIONS_SET.matches(line).matched_any())\n             .map(ToOwned::to_owned)\n             .collect::<Vec<String>>();\n "}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "src/tools/clippy/tests/ui-cargo/duplicate_mod/fail/src/d.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fd.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "6478e65ac81ad04b0ac79c4a553fc1a0486d8213", "filename": "src/tools/clippy/tests/ui-cargo/duplicate_mod/fail/src/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,4 +1,4 @@\n-#[feature(lint_reasons)]\n+#![feature(lint_reasons)]\n \n mod a;\n \n@@ -25,5 +25,4 @@ mod d3;\n #[allow(clippy::duplicate_mod)]\n mod d4;\n \n-\n fn main() {}"}, {"sha": "b450a2b18f25713eefe7c86857fe963ccf174c7e", "filename": "src/tools/clippy/tests/ui-cargo/duplicate_mod/fail/src/main.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -24,6 +24,17 @@ LL | | mod c3;\n    |\n    = help: replace all but one `mod` item with `use` items\n \n+error: file is loaded as a module multiple times: `$DIR/d.rs`\n+  --> $DIR/main.rs:18:1\n+   |\n+LL |   mod d;\n+   |   ^^^^^^ first loaded here\n+LL | / #[path = \"d.rs\"]\n+LL | | mod d2;\n+   | |_______^ loaded again here\n+   |\n+   = help: replace all but one `mod` item with `use` items\n+\n error: file is loaded as a module multiple times: `$DIR/from_other_module.rs`\n   --> $DIR/main.rs:15:1\n    |\n@@ -38,16 +49,5 @@ LL | | mod m;\n    |\n    = help: replace all but one `mod` item with `use` items\n \n-error: file is loaded as a module multiple times: `$DIR/b.rs`\n-  --> $DIR/main.rs:18:1\n-   |\n-LL |   mod d;\n-   |   ^^^^^^ first loaded here\n-LL | / #[path = \"d.rs\"]\n-LL | | mod d2;\n-   | |_______^ loaded again here\n-   |\n-   = help: replace all but one `mod` item with `use` items\n-\n error: aborting due to 4 previous errors\n "}, {"sha": "83a0af6b87acad985fad701b01885bf3ba9f838c", "filename": "src/tools/clippy/tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -135,3 +135,8 @@ macro_rules! manual_rem_euclid {\n         let _: i32 = ((value % 4) + 4) % 4;\n     };\n }\n+\n+#[macro_export]\n+macro_rules! equatable_if_let {\n+    ($a:ident) => {{ if let 2 = $a {} }};\n+}"}, {"sha": "1a74cdb3ff65926ab94e679bdcbea64d4e51db0f", "filename": "src/tools/clippy/tests/ui/box_collection.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_collection.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -6,7 +6,7 @@\n     unused\n )]\n \n-use std::collections::HashMap;\n+use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList, VecDeque};\n \n macro_rules! boxit {\n     ($init:expr, $x:ty) => {\n@@ -18,7 +18,7 @@ fn test_macro() {\n     boxit!(Vec::new(), Vec<u8>);\n }\n \n-fn test(foo: Box<Vec<bool>>) {}\n+fn test1(foo: Box<Vec<bool>>) {}\n \n fn test2(foo: Box<dyn Fn(Vec<u32>)>) {\n     // pass if #31 is fixed\n@@ -29,6 +29,18 @@ fn test3(foo: Box<String>) {}\n \n fn test4(foo: Box<HashMap<String, String>>) {}\n \n+fn test5(foo: Box<HashSet<i64>>) {}\n+\n+fn test6(foo: Box<VecDeque<i32>>) {}\n+\n+fn test7(foo: Box<LinkedList<i16>>) {}\n+\n+fn test8(foo: Box<BTreeMap<i8, String>>) {}\n+\n+fn test9(foo: Box<BTreeSet<u64>>) {}\n+\n+fn test10(foo: Box<BinaryHeap<u32>>) {}\n+\n fn test_local_not_linted() {\n     let _: Box<Vec<bool>>;\n }"}, {"sha": "2b28598ded92f41bc2d000d4fbb03dd1f674b074", "filename": "src/tools/clippy/tests/ui/box_collection.stderr", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_collection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_collection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_collection.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,8 +1,8 @@\n error: you seem to be trying to use `Box<Vec<..>>`. Consider using just `Vec<..>`\n-  --> $DIR/box_collection.rs:21:14\n+  --> $DIR/box_collection.rs:21:15\n    |\n-LL | fn test(foo: Box<Vec<bool>>) {}\n-   |              ^^^^^^^^^^^^^^\n+LL | fn test1(foo: Box<Vec<bool>>) {}\n+   |               ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::box-collection` implied by `-D warnings`\n    = help: `Vec<..>` is already on the heap, `Box<Vec<..>>` makes an extra allocation\n@@ -23,5 +23,53 @@ LL | fn test4(foo: Box<HashMap<String, String>>) {}\n    |\n    = help: `HashMap<..>` is already on the heap, `Box<HashMap<..>>` makes an extra allocation\n \n-error: aborting due to 3 previous errors\n+error: you seem to be trying to use `Box<HashSet<..>>`. Consider using just `HashSet<..>`\n+  --> $DIR/box_collection.rs:32:15\n+   |\n+LL | fn test5(foo: Box<HashSet<i64>>) {}\n+   |               ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `HashSet<..>` is already on the heap, `Box<HashSet<..>>` makes an extra allocation\n+\n+error: you seem to be trying to use `Box<VecDeque<..>>`. Consider using just `VecDeque<..>`\n+  --> $DIR/box_collection.rs:34:15\n+   |\n+LL | fn test6(foo: Box<VecDeque<i32>>) {}\n+   |               ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `VecDeque<..>` is already on the heap, `Box<VecDeque<..>>` makes an extra allocation\n+\n+error: you seem to be trying to use `Box<LinkedList<..>>`. Consider using just `LinkedList<..>`\n+  --> $DIR/box_collection.rs:36:15\n+   |\n+LL | fn test7(foo: Box<LinkedList<i16>>) {}\n+   |               ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `LinkedList<..>` is already on the heap, `Box<LinkedList<..>>` makes an extra allocation\n+\n+error: you seem to be trying to use `Box<BTreeMap<..>>`. Consider using just `BTreeMap<..>`\n+  --> $DIR/box_collection.rs:38:15\n+   |\n+LL | fn test8(foo: Box<BTreeMap<i8, String>>) {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `BTreeMap<..>` is already on the heap, `Box<BTreeMap<..>>` makes an extra allocation\n+\n+error: you seem to be trying to use `Box<BTreeSet<..>>`. Consider using just `BTreeSet<..>`\n+  --> $DIR/box_collection.rs:40:15\n+   |\n+LL | fn test9(foo: Box<BTreeSet<u64>>) {}\n+   |               ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `BTreeSet<..>` is already on the heap, `Box<BTreeSet<..>>` makes an extra allocation\n+\n+error: you seem to be trying to use `Box<BinaryHeap<..>>`. Consider using just `BinaryHeap<..>`\n+  --> $DIR/box_collection.rs:42:16\n+   |\n+LL | fn test10(foo: Box<BinaryHeap<u32>>) {}\n+   |                ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `BinaryHeap<..>` is already on the heap, `Box<BinaryHeap<..>>` makes an extra allocation\n+\n+error: aborting due to 9 previous errors\n "}, {"sha": "5e3a1a29693f58ae5e392e222d6fb9b467216ee3", "filename": "src/tools/clippy/tests/ui/branches_sharing_code/false_positives.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Ffalse_positives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Ffalse_positives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Ffalse_positives.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,6 +1,8 @@\n #![allow(dead_code)]\n #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n \n+use std::sync::Mutex;\n+\n // ##################################\n // # Issue clippy#7369\n // ##################################\n@@ -38,4 +40,56 @@ fn main() {\n         let (y, x) = x;\n         foo(x, y)\n     };\n+\n+    let m = Mutex::new(0u32);\n+    let l = m.lock().unwrap();\n+    let _ = if true {\n+        drop(l);\n+        println!(\"foo\");\n+        m.lock().unwrap();\n+        0\n+    } else if *l == 0 {\n+        drop(l);\n+        println!(\"foo\");\n+        println!(\"bar\");\n+        m.lock().unwrap();\n+        1\n+    } else {\n+        drop(l);\n+        println!(\"foo\");\n+        println!(\"baz\");\n+        m.lock().unwrap();\n+        2\n+    };\n+\n+    if true {\n+        let _guard = m.lock();\n+        println!(\"foo\");\n+    } else {\n+        println!(\"foo\");\n+    }\n+\n+    if true {\n+        let _guard = m.lock();\n+        println!(\"foo\");\n+        println!(\"bar\");\n+    } else {\n+        let _guard = m.lock();\n+        println!(\"foo\");\n+        println!(\"baz\");\n+    }\n+\n+    let mut c = 0;\n+    for _ in 0..5 {\n+        if c == 0 {\n+            c += 1;\n+            println!(\"0\");\n+        } else if c == 1 {\n+            c += 1;\n+            println!(\"1\");\n+        } else {\n+            c += 1;\n+            println!(\"more\");\n+        }\n+    }\n }"}, {"sha": "8990c3ba739b0fea45b8b907b38798eaa7bec42b", "filename": "src/tools/clippy/tests/ui/cast_size_32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_size_32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_size_32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_size_32bit.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -114,5 +114,5 @@ LL |     3_999_999_999usize as f64;\n    |\n    = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 18 previous errors\n "}, {"sha": "55cc9bc99a0ede4f1421de1b01f6b4018c224f8e", "filename": "src/tools/clippy/tests/ui/crashes/ice-9041.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9041.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -0,0 +1,8 @@\n+pub struct Thing;\n+\n+pub fn has_thing(things: &[Thing]) -> bool {\n+    let is_thing_ready = |_peer: &Thing| -> bool { todo!() };\n+    things.iter().find(|p| is_thing_ready(p)).is_some()\n+}\n+\n+fn main() {}"}, {"sha": "f5038f0a84847ece291d92fd7cec1dd85acdfac6", "filename": "src/tools/clippy/tests/ui/crashes/ice-9041.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9041.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9041.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9041.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -0,0 +1,10 @@\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/ice-9041.rs:5:19\n+   |\n+LL |     things.iter().find(|p| is_thing_ready(p)).is_some()\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|p| is_thing_ready(&p))`\n+   |\n+   = note: `-D clippy::search-is-some` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "687efdada6e311f4efdf629ebfd0b46ac3bfa388", "filename": "src/tools/clippy/tests/ui/equatable_if_let.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fequatable_if_let.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fequatable_if_let.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fequatable_if_let.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,8 +1,12 @@\n // run-rustfix\n+// aux-build:macro_rules.rs\n \n #![allow(unused_variables, dead_code, clippy::derive_partial_eq_without_eq)]\n #![warn(clippy::equatable_if_let)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n use std::cmp::Ordering;\n \n #[derive(PartialEq)]\n@@ -75,4 +79,6 @@ fn main() {\n     if \"abc\" == m1!(x) {\n         println!(\"OK\");\n     }\n+\n+    equatable_if_let!(a);\n }"}, {"sha": "8c467d14d2a9fb8028406835235a34483ec02c47", "filename": "src/tools/clippy/tests/ui/equatable_if_let.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fequatable_if_let.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,8 +1,12 @@\n // run-rustfix\n+// aux-build:macro_rules.rs\n \n #![allow(unused_variables, dead_code, clippy::derive_partial_eq_without_eq)]\n #![warn(clippy::equatable_if_let)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n use std::cmp::Ordering;\n \n #[derive(PartialEq)]\n@@ -75,4 +79,6 @@ fn main() {\n     if let m1!(x) = \"abc\" {\n         println!(\"OK\");\n     }\n+\n+    equatable_if_let!(a);\n }"}, {"sha": "9c4c3cc3682e631d7930d7c9b265b6ebab8afed0", "filename": "src/tools/clippy/tests/ui/equatable_if_let.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fequatable_if_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fequatable_if_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fequatable_if_let.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,67 +1,67 @@\n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:49:8\n+  --> $DIR/equatable_if_let.rs:53:8\n    |\n LL |     if let 2 = a {}\n    |        ^^^^^^^^^ help: try: `a == 2`\n    |\n    = note: `-D clippy::equatable-if-let` implied by `-D warnings`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:50:8\n+  --> $DIR/equatable_if_let.rs:54:8\n    |\n LL |     if let Ordering::Greater = a.cmp(&b) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `a.cmp(&b) == Ordering::Greater`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:51:8\n+  --> $DIR/equatable_if_let.rs:55:8\n    |\n LL |     if let Some(2) = c {}\n    |        ^^^^^^^^^^^^^^^ help: try: `c == Some(2)`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:52:8\n+  --> $DIR/equatable_if_let.rs:56:8\n    |\n LL |     if let Struct { a: 2, b: false } = d {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `d == (Struct { a: 2, b: false })`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:53:8\n+  --> $DIR/equatable_if_let.rs:57:8\n    |\n LL |     if let Enum::TupleVariant(32, 64) = e {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == Enum::TupleVariant(32, 64)`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:54:8\n+  --> $DIR/equatable_if_let.rs:58:8\n    |\n LL |     if let Enum::RecordVariant { a: 64, b: 32 } = e {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == (Enum::RecordVariant { a: 64, b: 32 })`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:55:8\n+  --> $DIR/equatable_if_let.rs:59:8\n    |\n LL |     if let Enum::UnitVariant = e {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == Enum::UnitVariant`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:56:8\n+  --> $DIR/equatable_if_let.rs:60:8\n    |\n LL |     if let (Enum::UnitVariant, &Struct { a: 2, b: false }) = (e, &d) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(e, &d) == (Enum::UnitVariant, &Struct { a: 2, b: false })`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:66:8\n+  --> $DIR/equatable_if_let.rs:70:8\n    |\n LL |     if let NotStructuralEq::A = g {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `g == NotStructuralEq::A`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:68:8\n+  --> $DIR/equatable_if_let.rs:72:8\n    |\n LL |     if let Some(NotStructuralEq::A) = Some(g) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(g) == Some(NotStructuralEq::A)`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:75:8\n+  --> $DIR/equatable_if_let.rs:79:8\n    |\n LL |     if let m1!(x) = \"abc\" {\n    |        ^^^^^^^^^^^^^^^^^^ help: try: `\"abc\" == m1!(x)`"}, {"sha": "a650fdc1f897256ab98026823f52aaeec250c19e", "filename": "src/tools/clippy/tests/ui/explicit_auto_deref.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_auto_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_auto_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_auto_deref.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -211,4 +211,8 @@ fn main() {\n     unsafe {\n         var(0, &**x);\n     }\n+\n+    let s = &\"str\";\n+    let _ = || return *s;\n+    let _ = || -> &'static str { return s };\n }"}, {"sha": "8f4f352576a734514f2648b826205efc4eb219e9", "filename": "src/tools/clippy/tests/ui/explicit_auto_deref.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_auto_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_auto_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_auto_deref.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -211,4 +211,8 @@ fn main() {\n     unsafe {\n         var(0, &**x);\n     }\n+\n+    let s = &\"str\";\n+    let _ = || return *s;\n+    let _ = || -> &'static str { return *s };\n }"}, {"sha": "92765307ea73d55f30a30ecdbc984ba42a645066", "filename": "src/tools/clippy/tests/ui/explicit_auto_deref.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_auto_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_auto_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_auto_deref.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -192,5 +192,11 @@ error: deref which would be done by auto-deref\n LL |     f_str(&&**ref_str); // `needless_borrow` will suggest removing only one reference\n    |            ^^^^^^^^^^ help: try this: `ref_str`\n \n-error: aborting due to 32 previous errors\n+error: deref which would be done by auto-deref\n+  --> $DIR/explicit_auto_deref.rs:217:41\n+   |\n+LL |     let _ = || -> &'static str { return *s };\n+   |                                         ^^ help: try this: `s`\n+\n+error: aborting due to 33 previous errors\n "}, {"sha": "6cbfafbb38b9913e7ec71de26f6206fce73ae1cf", "filename": "src/tools/clippy/tests/ui/if_let_mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fif_let_mutex.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -27,7 +27,7 @@ fn if_let_option() {\n     };\n }\n \n-// When mutexs are different don't warn\n+// When mutexes are different don't warn\n fn if_let_different_mutex() {\n     let m = Mutex::new(Some(0_u8));\n     let other = Mutex::new(None::<u8>);"}, {"sha": "74ba2f1c5e70bd09c67e02c39d2c52a076bc8164", "filename": "src/tools/clippy/tests/ui/inconsistent_struct_constructor.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finconsistent_struct_constructor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finconsistent_struct_constructor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finconsistent_struct_constructor.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -36,7 +36,7 @@ mod without_base {\n         // issue #7069.\n         new_foo!();\n \n-        // Shoule NOT lint because the order is the same as in the definition.\n+        // Should NOT lint because the order is the same as in the definition.\n         Foo { x, y, z };\n \n         // Should NOT lint because z is not a shorthand init."}, {"sha": "ba96e1e330f5fc62f3e408036a3897d2d6d28a24", "filename": "src/tools/clippy/tests/ui/inconsistent_struct_constructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finconsistent_struct_constructor.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -36,7 +36,7 @@ mod without_base {\n         // issue #7069.\n         new_foo!();\n \n-        // Shoule NOT lint because the order is the same as in the definition.\n+        // Should NOT lint because the order is the same as in the definition.\n         Foo { x, y, z };\n \n         // Should NOT lint because z is not a shorthand init."}, {"sha": "3dc096d3197fbe5eba20a5ca73b5a65d72739c7b", "filename": "src/tools/clippy/tests/ui/invalid_utf8_in_unchecked.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -0,0 +1,20 @@\n+#![warn(clippy::invalid_utf8_in_unchecked)]\n+\n+fn main() {\n+    // Valid\n+    unsafe {\n+        std::str::from_utf8_unchecked(&[99, 108, 105, 112, 112, 121]);\n+        std::str::from_utf8_unchecked(&[b'c', b'l', b'i', b'p', b'p', b'y']);\n+        std::str::from_utf8_unchecked(b\"clippy\");\n+\n+        let x = 0xA0;\n+        std::str::from_utf8_unchecked(&[0xC0, x]);\n+    }\n+\n+    // Invalid\n+    unsafe {\n+        std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n+        std::str::from_utf8_unchecked(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+        std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n+    }\n+}"}, {"sha": "c89cd2758ee9fe407fb359ed45f6232082fd400b", "filename": "src/tools/clippy/tests/ui/invalid_utf8_in_unchecked.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -0,0 +1,22 @@\n+error: non UTF-8 literal in `std::str::from_utf8_unchecked`\n+  --> $DIR/invalid_utf8_in_unchecked.rs:16:9\n+   |\n+LL |         std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-utf8-in-unchecked` implied by `-D warnings`\n+\n+error: non UTF-8 literal in `std::str::from_utf8_unchecked`\n+  --> $DIR/invalid_utf8_in_unchecked.rs:17:9\n+   |\n+LL |         std::str::from_utf8_unchecked(&[b'c', b'l', b'/x82', b'i', b'p', b'p', b'y']);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: non UTF-8 literal in `std::str::from_utf8_unchecked`\n+  --> $DIR/invalid_utf8_in_unchecked.rs:18:9\n+   |\n+LL |         std::str::from_utf8_unchecked(b\"cl/x82ippy\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "6343cff0f7ff941e2c55b0e762b41186c6429048", "filename": "src/tools/clippy/tests/ui/let_unit.fixed", "status": "modified", "additions": 68, "deletions": 6, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_unit.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,8 +1,8 @@\n // run-rustfix\n \n+#![feature(lint_reasons)]\n #![warn(clippy::let_unit_value)]\n-#![allow(clippy::no_effect)]\n-#![allow(unused_variables)]\n+#![allow(unused, clippy::no_effect, clippy::needless_late_init, path_statements)]\n \n macro_rules! let_and_return {\n     ($n:expr) => {{\n@@ -72,8 +72,8 @@ fn _returns_generic() {\n     fn f3<T>(x: T) -> T {\n         x\n     }\n-    fn f4<T>(mut x: Vec<T>) -> T {\n-        x.pop().unwrap()\n+    fn f5<T: Default>(x: bool) -> Option<T> {\n+        x.then(|| T::default())\n     }\n \n     let _: () = f(); // Ok\n@@ -85,8 +85,12 @@ fn _returns_generic() {\n     f3(()); // Lint\n     f3(()); // Lint\n \n-    f4(vec![()]); // Lint\n-    f4(vec![()]); // Lint\n+    // Should lint:\n+    // fn f4<T>(mut x: Vec<T>) -> T {\n+    //    x.pop().unwrap()\n+    // }\n+    // let _: () = f4(vec![()]);\n+    // let x: () = f4(vec![()]);\n \n     // Ok\n     let _: () = {\n@@ -112,4 +116,62 @@ fn _returns_generic() {\n         Some(1) => f2(3),\n         Some(_) => (),\n     };\n+\n+    let _: () = f5(true).unwrap();\n+\n+    #[allow(clippy::let_unit_value)]\n+    {\n+        let x = f();\n+        let y;\n+        let z;\n+        match 0 {\n+            0 => {\n+                y = f();\n+                z = f();\n+            },\n+            1 => {\n+                println!(\"test\");\n+                y = f();\n+                z = f3(());\n+            },\n+            _ => panic!(),\n+        }\n+\n+        let x1;\n+        let x2;\n+        if true {\n+            x1 = f();\n+            x2 = x1;\n+        } else {\n+            x2 = f();\n+            x1 = x2;\n+        }\n+\n+        let opt;\n+        match f5(true) {\n+            Some(x) => opt = x,\n+            None => panic!(),\n+        };\n+\n+        #[warn(clippy::let_unit_value)]\n+        {\n+            let _: () = x;\n+            let _: () = y;\n+            z;\n+            let _: () = x1;\n+            let _: () = x2;\n+            let _: () = opt;\n+        }\n+    }\n+\n+    let () = f();\n+}\n+\n+fn attributes() {\n+    fn f() {}\n+\n+    #[allow(clippy::let_unit_value)]\n+    let _ = f();\n+    #[expect(clippy::let_unit_value)]\n+    let _ = f();\n }"}, {"sha": "c9bb2849f5cf138f1f944182328d4d000a4957e8", "filename": "src/tools/clippy/tests/ui/let_unit.rs", "status": "modified", "additions": 68, "deletions": 6, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_unit.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,8 +1,8 @@\n // run-rustfix\n \n+#![feature(lint_reasons)]\n #![warn(clippy::let_unit_value)]\n-#![allow(clippy::no_effect)]\n-#![allow(unused_variables)]\n+#![allow(unused, clippy::no_effect, clippy::needless_late_init, path_statements)]\n \n macro_rules! let_and_return {\n     ($n:expr) => {{\n@@ -72,8 +72,8 @@ fn _returns_generic() {\n     fn f3<T>(x: T) -> T {\n         x\n     }\n-    fn f4<T>(mut x: Vec<T>) -> T {\n-        x.pop().unwrap()\n+    fn f5<T: Default>(x: bool) -> Option<T> {\n+        x.then(|| T::default())\n     }\n \n     let _: () = f(); // Ok\n@@ -85,8 +85,12 @@ fn _returns_generic() {\n     let _: () = f3(()); // Lint\n     let x: () = f3(()); // Lint\n \n-    let _: () = f4(vec![()]); // Lint\n-    let x: () = f4(vec![()]); // Lint\n+    // Should lint:\n+    // fn f4<T>(mut x: Vec<T>) -> T {\n+    //    x.pop().unwrap()\n+    // }\n+    // let _: () = f4(vec![()]);\n+    // let x: () = f4(vec![()]);\n \n     // Ok\n     let _: () = {\n@@ -112,4 +116,62 @@ fn _returns_generic() {\n         Some(1) => f2(3),\n         Some(_) => (),\n     };\n+\n+    let _: () = f5(true).unwrap();\n+\n+    #[allow(clippy::let_unit_value)]\n+    {\n+        let x = f();\n+        let y;\n+        let z;\n+        match 0 {\n+            0 => {\n+                y = f();\n+                z = f();\n+            },\n+            1 => {\n+                println!(\"test\");\n+                y = f();\n+                z = f3(());\n+            },\n+            _ => panic!(),\n+        }\n+\n+        let x1;\n+        let x2;\n+        if true {\n+            x1 = f();\n+            x2 = x1;\n+        } else {\n+            x2 = f();\n+            x1 = x2;\n+        }\n+\n+        let opt;\n+        match f5(true) {\n+            Some(x) => opt = x,\n+            None => panic!(),\n+        };\n+\n+        #[warn(clippy::let_unit_value)]\n+        {\n+            let _: () = x;\n+            let _: () = y;\n+            let _: () = z;\n+            let _: () = x1;\n+            let _: () = x2;\n+            let _: () = opt;\n+        }\n+    }\n+\n+    let () = f();\n+}\n+\n+fn attributes() {\n+    fn f() {}\n+\n+    #[allow(clippy::let_unit_value)]\n+    let _ = f();\n+    #[expect(clippy::let_unit_value)]\n+    let _ = f();\n }"}, {"sha": "49da74ca7e1c7b4d86e2ee0efce674cddae2025b", "filename": "src/tools/clippy/tests/ui/let_unit.stderr", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_unit.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -64,27 +64,15 @@ LL |     let x: () = f3(()); // Lint\n    |     ^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `f3(());`\n \n error: this let-binding has unit value\n-  --> $DIR/let_unit.rs:88:5\n-   |\n-LL |     let _: () = f4(vec![()]); // Lint\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `f4(vec![()]);`\n-\n-error: this let-binding has unit value\n-  --> $DIR/let_unit.rs:89:5\n-   |\n-LL |     let x: () = f4(vec![()]); // Lint\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `f4(vec![()]);`\n-\n-error: this let-binding has unit value\n-  --> $DIR/let_unit.rs:98:5\n+  --> $DIR/let_unit.rs:102:5\n    |\n LL |     let x: () = if true { f() } else { f2(0) }; // Lint\n    |     ^^^^-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         help: use a wild (`_`) binding: `_`\n \n error: this let-binding has unit value\n-  --> $DIR/let_unit.rs:109:5\n+  --> $DIR/let_unit.rs:113:5\n    |\n LL | /     let _: () = match Some(0) {\n LL | |         None => f2(1),\n@@ -104,5 +92,11 @@ LL +         Some(_) => (),\n LL +     };\n    |\n \n-error: aborting due to 11 previous errors\n+error: this let-binding has unit value\n+  --> $DIR/let_unit.rs:160:13\n+   |\n+LL |             let _: () = z;\n+   |             ^^^^^^^^^^^^^^ help: omit the `let` binding: `z;`\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "4936dc9b2e0178885f4a160739fa33ddab95ccdb", "filename": "src/tools/clippy/tests/ui/manual_filter_map.fixed", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_filter_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_filter_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_filter_map.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -12,6 +12,32 @@ fn main() {\n \n     // is_ok(), unwrap_or()\n     let _ = (0..).filter_map(|a| to_res(a).ok());\n+\n+    let _ = (1..5)\n+        .filter_map(|y| *to_ref(to_opt(y)));\n+    let _ = (1..5)\n+        .filter_map(|y| *to_ref(to_opt(y)));\n+\n+    let _ = (1..5)\n+        .filter_map(|y| to_ref(to_res(y)).ok());\n+    let _ = (1..5)\n+        .filter_map(|y| to_ref(to_res(y)).ok());\n+}\n+\n+#[rustfmt::skip]\n+fn simple_equal() {\n+    iter::<Option<&u8>>().find_map(|x| x.cloned());\n+    iter::<&Option<&u8>>().find_map(|x| x.cloned());\n+    iter::<&Option<String>>().find_map(|x| x.as_deref());\n+    iter::<Option<&String>>().find_map(|y| to_ref(y).cloned());\n+\n+    iter::<Result<u8, ()>>().find_map(|x| x.ok());\n+    iter::<&Result<u8, ()>>().find_map(|x| x.ok());\n+    iter::<&&Result<u8, ()>>().find_map(|x| x.ok());\n+    iter::<Result<&u8, ()>>().find_map(|x| x.cloned().ok());\n+    iter::<&Result<&u8, ()>>().find_map(|x| x.cloned().ok());\n+    iter::<&Result<String, ()>>().find_map(|x| x.as_deref().ok());\n+    iter::<Result<&String, ()>>().find_map(|y| to_ref(y).cloned().ok());\n }\n \n fn no_lint() {\n@@ -28,6 +54,10 @@ fn no_lint() {\n         .map(|a| to_opt(a).unwrap());\n }\n \n+fn iter<T>() -> impl Iterator<Item = T> {\n+    std::iter::empty()\n+}\n+\n fn to_opt<T>(_: T) -> Option<T> {\n     unimplemented!()\n }\n@@ -36,6 +66,10 @@ fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n \n+fn to_ref<'a, T>(_: T) -> &'a T {\n+    unimplemented!()\n+}\n+\n struct Issue8920<'a> {\n     option_field: Option<String>,\n     result_field: Result<String, ()>,"}, {"sha": "8c67e827b4c35fe6512b8806ddea1bdaff5880d4", "filename": "src/tools/clippy/tests/ui/manual_filter_map.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_filter_map.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -12,6 +12,36 @@ fn main() {\n \n     // is_ok(), unwrap_or()\n     let _ = (0..).filter(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+\n+    let _ = (1..5)\n+        .filter(|&x| to_ref(to_opt(x)).is_some())\n+        .map(|y| to_ref(to_opt(y)).unwrap());\n+    let _ = (1..5)\n+        .filter(|x| to_ref(to_opt(*x)).is_some())\n+        .map(|y| to_ref(to_opt(y)).unwrap());\n+\n+    let _ = (1..5)\n+        .filter(|&x| to_ref(to_res(x)).is_ok())\n+        .map(|y| to_ref(to_res(y)).unwrap());\n+    let _ = (1..5)\n+        .filter(|x| to_ref(to_res(*x)).is_ok())\n+        .map(|y| to_ref(to_res(y)).unwrap());\n+}\n+\n+#[rustfmt::skip]\n+fn simple_equal() {\n+    iter::<Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+    iter::<&Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+    iter::<&Option<String>>().find(|x| x.is_some()).map(|x| x.as_deref().unwrap());\n+    iter::<Option<&String>>().find(|&x| to_ref(x).is_some()).map(|y| to_ref(y).cloned().unwrap());\n+\n+    iter::<Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+    iter::<&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+    iter::<&&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+    iter::<Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+    iter::<&Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+    iter::<&Result<String, ()>>().find(|x| x.is_ok()).map(|x| x.as_deref().unwrap());\n+    iter::<Result<&String, ()>>().find(|&x| to_ref(x).is_ok()).map(|y| to_ref(y).cloned().unwrap());\n }\n \n fn no_lint() {\n@@ -28,6 +58,10 @@ fn no_lint() {\n         .map(|a| to_opt(a).unwrap());\n }\n \n+fn iter<T>() -> impl Iterator<Item = T> {\n+    std::iter::empty()\n+}\n+\n fn to_opt<T>(_: T) -> Option<T> {\n     unimplemented!()\n }\n@@ -36,6 +70,10 @@ fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n \n+fn to_ref<'a, T>(_: T) -> &'a T {\n+    unimplemented!()\n+}\n+\n struct Issue8920<'a> {\n     option_field: Option<String>,\n     result_field: Result<String, ()>,"}, {"sha": "6e5bbe8f2aaf577c6afab54e692d686d05769b47", "filename": "src/tools/clippy/tests/ui/manual_filter_map.stderr", "status": "modified", "additions": 110, "deletions": 10, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_filter_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_filter_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_filter_map.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -19,76 +19,176 @@ LL |     let _ = (0..).filter(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_o\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|a| to_res(a).ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:54:10\n+  --> $DIR/manual_filter_map.rs:17:10\n+   |\n+LL |           .filter(|&x| to_ref(to_opt(x)).is_some())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_opt(y)).unwrap());\n+   | |____________________________________________^ help: try: `filter_map(|y| *to_ref(to_opt(y)))`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:20:10\n+   |\n+LL |           .filter(|x| to_ref(to_opt(*x)).is_some())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_opt(y)).unwrap());\n+   | |____________________________________________^ help: try: `filter_map(|y| *to_ref(to_opt(y)))`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:24:10\n+   |\n+LL |           .filter(|&x| to_ref(to_res(x)).is_ok())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_res(y)).unwrap());\n+   | |____________________________________________^ help: try: `filter_map(|y| to_ref(to_res(y)).ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:27:10\n+   |\n+LL |           .filter(|x| to_ref(to_res(*x)).is_ok())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_res(y)).unwrap());\n+   | |____________________________________________^ help: try: `filter_map(|y| to_ref(to_res(y)).ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:33:27\n+   |\n+LL |     iter::<Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned())`\n+   |\n+   = note: `-D clippy::manual-find-map` implied by `-D warnings`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:34:28\n+   |\n+LL |     iter::<&Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:35:31\n+   |\n+LL |     iter::<&Option<String>>().find(|x| x.is_some()).map(|x| x.as_deref().unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.as_deref())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:36:31\n+   |\n+LL |     iter::<Option<&String>>().find(|&x| to_ref(x).is_some()).map(|y| to_ref(y).cloned().unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|y| to_ref(y).cloned())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:38:30\n+   |\n+LL |     iter::<Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:39:31\n+   |\n+LL |     iter::<&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:40:32\n+   |\n+LL |     iter::<&&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:41:31\n+   |\n+LL |     iter::<Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:42:32\n+   |\n+LL |     iter::<&Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:43:35\n+   |\n+LL |     iter::<&Result<String, ()>>().find(|x| x.is_ok()).map(|x| x.as_deref().unwrap());\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.as_deref().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_filter_map.rs:44:35\n+   |\n+LL |     iter::<Result<&String, ()>>().find(|&x| to_ref(x).is_ok()).map(|y| to_ref(y).cloned().unwrap());\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|y| to_ref(y).cloned().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:92:10\n    |\n LL |           .filter(|f| f.option_field.is_some())\n    |  __________^\n LL | |         .map(|f| f.option_field.clone().unwrap());\n    | |_________________________________________________^ help: try: `filter_map(|f| f.option_field.clone())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:59:10\n+  --> $DIR/manual_filter_map.rs:97:10\n    |\n LL |           .filter(|f| f.ref_field.is_some())\n    |  __________^\n LL | |         .map(|f| f.ref_field.cloned().unwrap());\n    | |_______________________________________________^ help: try: `filter_map(|f| f.ref_field.cloned())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:64:10\n+  --> $DIR/manual_filter_map.rs:102:10\n    |\n LL |           .filter(|f| f.ref_field.is_some())\n    |  __________^\n LL | |         .map(|f| f.ref_field.copied().unwrap());\n    | |_______________________________________________^ help: try: `filter_map(|f| f.ref_field.copied())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:69:10\n+  --> $DIR/manual_filter_map.rs:107:10\n    |\n LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.clone().unwrap());\n    | |_________________________________________________^ help: try: `filter_map(|f| f.result_field.clone().ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:74:10\n+  --> $DIR/manual_filter_map.rs:112:10\n    |\n LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_ref().unwrap());\n    | |__________________________________________________^ help: try: `filter_map(|f| f.result_field.as_ref().ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:79:10\n+  --> $DIR/manual_filter_map.rs:117:10\n    |\n LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_deref().unwrap());\n    | |____________________________________________________^ help: try: `filter_map(|f| f.result_field.as_deref().ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:84:10\n+  --> $DIR/manual_filter_map.rs:122:10\n    |\n LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_mut().unwrap());\n    | |__________________________________________________^ help: try: `filter_map(|f| f.result_field.as_mut().ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:89:10\n+  --> $DIR/manual_filter_map.rs:127:10\n    |\n LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_deref_mut().unwrap());\n    | |________________________________________________________^ help: try: `filter_map(|f| f.result_field.as_deref_mut().ok())`\n \n error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n-  --> $DIR/manual_filter_map.rs:94:10\n+  --> $DIR/manual_filter_map.rs:132:10\n    |\n LL |           .filter(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.to_owned().unwrap());\n    | |____________________________________________________^ help: try: `filter_map(|f| f.result_field.to_owned().ok())`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 27 previous errors\n "}, {"sha": "54302beceff628171c4833ba1d3ead35bbfded5d", "filename": "src/tools/clippy/tests/ui/manual_find_map.fixed", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_find_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_find_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_find_map.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -12,6 +12,35 @@ fn main() {\n \n     // is_ok(), unwrap_or()\n     let _ = (0..).find_map(|a| to_res(a).ok());\n+\n+    let _ = (1..5)\n+        .find_map(|y| *to_ref(to_opt(y)));\n+    let _ = (1..5)\n+        .find_map(|y| *to_ref(to_opt(y)));\n+\n+    let _ = (1..5)\n+        .find_map(|y| to_ref(to_res(y)).ok());\n+    let _ = (1..5)\n+        .find_map(|y| to_ref(to_res(y)).ok());\n+}\n+\n+#[rustfmt::skip]\n+fn simple_equal() {\n+    iter::<Option<u8>>().find_map(|x| x);\n+    iter::<&Option<u8>>().find_map(|x| *x);\n+    iter::<&&Option<u8>>().find_map(|x| **x);\n+    iter::<Option<&u8>>().find_map(|x| x.cloned());\n+    iter::<&Option<&u8>>().find_map(|x| x.cloned());\n+    iter::<&Option<String>>().find_map(|x| x.as_deref());\n+    iter::<Option<&String>>().find_map(|y| to_ref(y).cloned());\n+\n+    iter::<Result<u8, ()>>().find_map(|x| x.ok());\n+    iter::<&Result<u8, ()>>().find_map(|x| x.ok());\n+    iter::<&&Result<u8, ()>>().find_map(|x| x.ok());\n+    iter::<Result<&u8, ()>>().find_map(|x| x.cloned().ok());\n+    iter::<&Result<&u8, ()>>().find_map(|x| x.cloned().ok());\n+    iter::<&Result<String, ()>>().find_map(|x| x.as_deref().ok());\n+    iter::<Result<&String, ()>>().find_map(|y| to_ref(y).cloned().ok());\n }\n \n fn no_lint() {\n@@ -28,6 +57,10 @@ fn no_lint() {\n         .map(|a| to_opt(a).unwrap());\n }\n \n+fn iter<T>() -> impl Iterator<Item = T> {\n+    std::iter::empty()\n+}\n+\n fn to_opt<T>(_: T) -> Option<T> {\n     unimplemented!()\n }\n@@ -36,6 +69,10 @@ fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n \n+fn to_ref<'a, T>(_: T) -> &'a T {\n+    unimplemented!()\n+}\n+\n struct Issue8920<'a> {\n     option_field: Option<String>,\n     result_field: Result<String, ()>,"}, {"sha": "afcc1825a9ac1c9170faa6813c6864f2f7ae6d0e", "filename": "src/tools/clippy/tests/ui/manual_find_map.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_find_map.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -12,6 +12,39 @@ fn main() {\n \n     // is_ok(), unwrap_or()\n     let _ = (0..).find(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+\n+    let _ = (1..5)\n+        .find(|&x| to_ref(to_opt(x)).is_some())\n+        .map(|y| to_ref(to_opt(y)).unwrap());\n+    let _ = (1..5)\n+        .find(|x| to_ref(to_opt(*x)).is_some())\n+        .map(|y| to_ref(to_opt(y)).unwrap());\n+\n+    let _ = (1..5)\n+        .find(|&x| to_ref(to_res(x)).is_ok())\n+        .map(|y| to_ref(to_res(y)).unwrap());\n+    let _ = (1..5)\n+        .find(|x| to_ref(to_res(*x)).is_ok())\n+        .map(|y| to_ref(to_res(y)).unwrap());\n+}\n+\n+#[rustfmt::skip]\n+fn simple_equal() {\n+    iter::<Option<u8>>().find(|x| x.is_some()).map(|x| x.unwrap());\n+    iter::<&Option<u8>>().find(|x| x.is_some()).map(|x| x.unwrap());\n+    iter::<&&Option<u8>>().find(|x| x.is_some()).map(|x| x.unwrap());\n+    iter::<Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+    iter::<&Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+    iter::<&Option<String>>().find(|x| x.is_some()).map(|x| x.as_deref().unwrap());\n+    iter::<Option<&String>>().find(|&x| to_ref(x).is_some()).map(|y| to_ref(y).cloned().unwrap());\n+\n+    iter::<Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+    iter::<&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+    iter::<&&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+    iter::<Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+    iter::<&Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+    iter::<&Result<String, ()>>().find(|x| x.is_ok()).map(|x| x.as_deref().unwrap());\n+    iter::<Result<&String, ()>>().find(|&x| to_ref(x).is_ok()).map(|y| to_ref(y).cloned().unwrap());\n }\n \n fn no_lint() {\n@@ -28,6 +61,10 @@ fn no_lint() {\n         .map(|a| to_opt(a).unwrap());\n }\n \n+fn iter<T>() -> impl Iterator<Item = T> {\n+    std::iter::empty()\n+}\n+\n fn to_opt<T>(_: T) -> Option<T> {\n     unimplemented!()\n }\n@@ -36,6 +73,10 @@ fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n \n+fn to_ref<'a, T>(_: T) -> &'a T {\n+    unimplemented!()\n+}\n+\n struct Issue8920<'a> {\n     option_field: Option<String>,\n     result_field: Result<String, ()>,"}, {"sha": "c1ac499f7c6010c9ce5f764aef45d01204e38155", "filename": "src/tools/clippy/tests/ui/manual_find_map.stderr", "status": "modified", "additions": 126, "deletions": 10, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_find_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_find_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_find_map.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -19,76 +19,192 @@ LL |     let _ = (0..).find(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|a| to_res(a).ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:54:10\n+  --> $DIR/manual_find_map.rs:17:10\n+   |\n+LL |           .find(|&x| to_ref(to_opt(x)).is_some())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_opt(y)).unwrap());\n+   | |____________________________________________^ help: try: `find_map(|y| *to_ref(to_opt(y)))`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:20:10\n+   |\n+LL |           .find(|x| to_ref(to_opt(*x)).is_some())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_opt(y)).unwrap());\n+   | |____________________________________________^ help: try: `find_map(|y| *to_ref(to_opt(y)))`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:24:10\n+   |\n+LL |           .find(|&x| to_ref(to_res(x)).is_ok())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_res(y)).unwrap());\n+   | |____________________________________________^ help: try: `find_map(|y| to_ref(to_res(y)).ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:27:10\n+   |\n+LL |           .find(|x| to_ref(to_res(*x)).is_ok())\n+   |  __________^\n+LL | |         .map(|y| to_ref(to_res(y)).unwrap());\n+   | |____________________________________________^ help: try: `find_map(|y| to_ref(to_res(y)).ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:33:26\n+   |\n+LL |     iter::<Option<u8>>().find(|x| x.is_some()).map(|x| x.unwrap());\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x)`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:34:27\n+   |\n+LL |     iter::<&Option<u8>>().find(|x| x.is_some()).map(|x| x.unwrap());\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| *x)`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:35:28\n+   |\n+LL |     iter::<&&Option<u8>>().find(|x| x.is_some()).map(|x| x.unwrap());\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| **x)`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:36:27\n+   |\n+LL |     iter::<Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:37:28\n+   |\n+LL |     iter::<&Option<&u8>>().find(|x| x.is_some()).map(|x| x.cloned().unwrap());\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:38:31\n+   |\n+LL |     iter::<&Option<String>>().find(|x| x.is_some()).map(|x| x.as_deref().unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.as_deref())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:39:31\n+   |\n+LL |     iter::<Option<&String>>().find(|&x| to_ref(x).is_some()).map(|y| to_ref(y).cloned().unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|y| to_ref(y).cloned())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:41:30\n+   |\n+LL |     iter::<Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:42:31\n+   |\n+LL |     iter::<&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:43:32\n+   |\n+LL |     iter::<&&Result<u8, ()>>().find(|x| x.is_ok()).map(|x| x.unwrap());\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:44:31\n+   |\n+LL |     iter::<Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:45:32\n+   |\n+LL |     iter::<&Result<&u8, ()>>().find(|x| x.is_ok()).map(|x| x.cloned().unwrap());\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.cloned().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:46:35\n+   |\n+LL |     iter::<&Result<String, ()>>().find(|x| x.is_ok()).map(|x| x.as_deref().unwrap());\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|x| x.as_deref().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:47:35\n+   |\n+LL |     iter::<Result<&String, ()>>().find(|&x| to_ref(x).is_ok()).map(|y| to_ref(y).cloned().unwrap());\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|y| to_ref(y).cloned().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:95:10\n    |\n LL |           .find(|f| f.option_field.is_some())\n    |  __________^\n LL | |         .map(|f| f.option_field.clone().unwrap());\n    | |_________________________________________________^ help: try: `find_map(|f| f.option_field.clone())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:59:10\n+  --> $DIR/manual_find_map.rs:100:10\n    |\n LL |           .find(|f| f.ref_field.is_some())\n    |  __________^\n LL | |         .map(|f| f.ref_field.cloned().unwrap());\n    | |_______________________________________________^ help: try: `find_map(|f| f.ref_field.cloned())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:64:10\n+  --> $DIR/manual_find_map.rs:105:10\n    |\n LL |           .find(|f| f.ref_field.is_some())\n    |  __________^\n LL | |         .map(|f| f.ref_field.copied().unwrap());\n    | |_______________________________________________^ help: try: `find_map(|f| f.ref_field.copied())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:69:10\n+  --> $DIR/manual_find_map.rs:110:10\n    |\n LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.clone().unwrap());\n    | |_________________________________________________^ help: try: `find_map(|f| f.result_field.clone().ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:74:10\n+  --> $DIR/manual_find_map.rs:115:10\n    |\n LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_ref().unwrap());\n    | |__________________________________________________^ help: try: `find_map(|f| f.result_field.as_ref().ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:79:10\n+  --> $DIR/manual_find_map.rs:120:10\n    |\n LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_deref().unwrap());\n    | |____________________________________________________^ help: try: `find_map(|f| f.result_field.as_deref().ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:84:10\n+  --> $DIR/manual_find_map.rs:125:10\n    |\n LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_mut().unwrap());\n    | |__________________________________________________^ help: try: `find_map(|f| f.result_field.as_mut().ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:89:10\n+  --> $DIR/manual_find_map.rs:130:10\n    |\n LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.as_deref_mut().unwrap());\n    | |________________________________________________________^ help: try: `find_map(|f| f.result_field.as_deref_mut().ok())`\n \n error: `find(..).map(..)` can be simplified as `find_map(..)`\n-  --> $DIR/manual_find_map.rs:94:10\n+  --> $DIR/manual_find_map.rs:135:10\n    |\n LL |           .find(|f| f.result_field.is_ok())\n    |  __________^\n LL | |         .map(|f| f.result_field.to_owned().unwrap());\n    | |____________________________________________________^ help: try: `find_map(|f| f.result_field.to_owned().ok())`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 30 previous errors\n "}, {"sha": "d922593bc6f93445ab9b3fc7805692a4da2a6c31", "filename": "src/tools/clippy/tests/ui/manual_flatten.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_flatten.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -106,4 +106,20 @@ fn main() {\n     for n in vec![Some(1), Some(2), Some(3)].iter().flatten() {\n         println!(\"{}\", n);\n     }\n+\n+    run_unformatted_tests();\n+}\n+\n+#[rustfmt::skip]\n+fn run_unformatted_tests() {\n+    // Skip rustfmt here on purpose so the suggestion does not fit in one line\n+    for n in vec![\n+        Some(1),\n+        Some(2),\n+        Some(3)\n+    ].iter() {\n+        if let Some(n) = n {\n+            println!(\"{:?}\", n);\n+        }\n+    }\n }"}, {"sha": "da053c0566833618d5497711b314091575480b12", "filename": "src/tools/clippy/tests/ui/manual_flatten.stderr", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_flatten.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -167,5 +167,33 @@ LL | |             println!(\"{:?}\", n);\n LL | |         }\n    | |_________^\n \n-error: aborting due to 8 previous errors\n+error: unnecessary `if let` since only the `Some` variant of the iterator element is used\n+  --> $DIR/manual_flatten.rs:116:5\n+   |\n+LL | /     for n in vec![\n+LL | |         Some(1),\n+LL | |         Some(2),\n+LL | |         Some(3)\n+...  |\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+   |\n+help: remove the `if let` statement in the for loop and then...\n+  --> $DIR/manual_flatten.rs:121:9\n+   |\n+LL | /         if let Some(n) = n {\n+LL | |             println!(\"{:?}\", n);\n+LL | |         }\n+   | |_________^\n+help: try\n+   |\n+LL ~     for n in vec![\n+LL +         Some(1),\n+LL +         Some(2),\n+LL +         Some(3)\n+LL ~     ].iter().flatten() {\n+   |\n+\n+error: aborting due to 9 previous errors\n "}, {"sha": "312819a0a2cf83d567307d788cb5e8c72394561b", "filename": "src/tools/clippy/tests/ui/map_flatten_fixable.fixed", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -34,21 +34,20 @@ fn main() {\n }\n \n fn issue8734() {\n-    //     let _ = [0u8, 1, 2, 3]\n-    //         .into_iter()\n-    //         .map(|n| match n {\n-    //             1 => [n\n-    //                 .saturating_add(1)\n-    //                 .saturating_add(1)\n-    //                 .saturating_add(1)\n-    //                 .saturating_add(1)\n-    //                 .saturating_add(1)\n-    //                 .saturating_add(1)\n-    //                 .saturating_add(1)\n-    //                 .saturating_add(1)],\n-    //             n => [n],\n-    //         })\n-    //         .flatten();\n+    let _ = [0u8, 1, 2, 3]\n+        .into_iter()\n+        .flat_map(|n| match n {\n+            1 => [n\n+                .saturating_add(1)\n+                .saturating_add(1)\n+                .saturating_add(1)\n+                .saturating_add(1)\n+                .saturating_add(1)\n+                .saturating_add(1)\n+                .saturating_add(1)\n+                .saturating_add(1)],\n+            n => [n],\n+        });\n }\n \n #[allow(clippy::bind_instead_of_map)] // map + flatten will be suggested to `and_then`, but afterwards `map` is suggested again\n@@ -59,7 +58,7 @@ fn issue8878() {\n         .and_then(|_| {\n // we need some newlines\n // so that the span is big enough\n-// for a splitted output of the diagnostic\n+// for a split output of the diagnostic\n             Some(\"\")\n  // whitespace beforehand is important as well\n         });"}, {"sha": "3fbf4f9a1b044b8c5621a2f73c8ffd7bd39deb84", "filename": "src/tools/clippy/tests/ui/map_flatten_fixable.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -34,21 +34,21 @@ fn main() {\n }\n \n fn issue8734() {\n-    //     let _ = [0u8, 1, 2, 3]\n-    //         .into_iter()\n-    //         .map(|n| match n {\n-    //             1 => [n\n-    //                 .saturating_add(1)\n-    //                 .saturating_add(1)\n-    //                 .saturating_add(1)\n-    //                 .saturating_add(1)\n-    //                 .saturating_add(1)\n-    //                 .saturating_add(1)\n-    //                 .saturating_add(1)\n-    //                 .saturating_add(1)],\n-    //             n => [n],\n-    //         })\n-    //         .flatten();\n+    let _ = [0u8, 1, 2, 3]\n+        .into_iter()\n+        .map(|n| match n {\n+            1 => [n\n+                .saturating_add(1)\n+                .saturating_add(1)\n+                .saturating_add(1)\n+                .saturating_add(1)\n+                .saturating_add(1)\n+                .saturating_add(1)\n+                .saturating_add(1)\n+                .saturating_add(1)],\n+            n => [n],\n+        })\n+        .flatten();\n }\n \n #[allow(clippy::bind_instead_of_map)] // map + flatten will be suggested to `and_then`, but afterwards `map` is suggested again\n@@ -59,7 +59,7 @@ fn issue8878() {\n         .map(|_| {\n // we need some newlines\n // so that the span is big enough\n-// for a splitted output of the diagnostic\n+// for a split output of the diagnostic\n             Some(\"\")\n  // whitespace beforehand is important as well\n         })"}, {"sha": "c91f0b9ae94fec2626997de308d60c006d6ffaa4", "filename": "src/tools/clippy/tests/ui/map_flatten_fixable.stderr", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -42,14 +42,43 @@ error: called `map(..).flatten()` on `Result`\n LL |     let _: Result<_, &str> = (Ok(Ok(1))).map(|x| x).flatten();\n    |                                          ^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `and_then` and remove the `.flatten()`: `and_then(|x| x)`\n \n+error: called `map(..).flatten()` on `Iterator`\n+  --> $DIR/map_flatten_fixable.rs:39:10\n+   |\n+LL |           .map(|n| match n {\n+   |  __________^\n+LL | |             1 => [n\n+LL | |                 .saturating_add(1)\n+LL | |                 .saturating_add(1)\n+...  |\n+LL | |         })\n+LL | |         .flatten();\n+   | |__________________^\n+   |\n+help: try replacing `map` with `flat_map` and remove the `.flatten()`\n+   |\n+LL ~         .flat_map(|n| match n {\n+LL +             1 => [n\n+LL +                 .saturating_add(1)\n+LL +                 .saturating_add(1)\n+LL +                 .saturating_add(1)\n+LL +                 .saturating_add(1)\n+LL +                 .saturating_add(1)\n+LL +                 .saturating_add(1)\n+LL +                 .saturating_add(1)\n+LL +                 .saturating_add(1)],\n+LL +             n => [n],\n+LL ~         });\n+   |\n+\n error: called `map(..).flatten()` on `Option`\n   --> $DIR/map_flatten_fixable.rs:59:10\n    |\n LL |           .map(|_| {\n    |  __________^\n LL | | // we need some newlines\n LL | | // so that the span is big enough\n-LL | | // for a splitted output of the diagnostic\n+LL | | // for a split output of the diagnostic\n ...  |\n LL | |         })\n LL | |         .flatten();\n@@ -60,11 +89,11 @@ help: try replacing `map` with `and_then` and remove the `.flatten()`\n LL ~         .and_then(|_| {\n LL + // we need some newlines\n LL + // so that the span is big enough\n-LL + // for a splitted output of the diagnostic\n+LL + // for a split output of the diagnostic\n LL +             Some(\"\")\n LL +  // whitespace beforehand is important as well\n LL ~         });\n    |\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "1ccbfda64b73a5240ae68929f83c37d07cd66c05", "filename": "src/tools/clippy/tests/ui/match_expr_like_matches_macro.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -45,6 +45,12 @@ fn main() {\n         // lint\n         let _ans = matches!(x, E::A(_) | E::B(_));\n     }\n+    {\n+        // lint\n+        // skip rustfmt to prevent removing block for first pattern\n+        #[rustfmt::skip]\n+        let _ans = matches!(x, E::A(_) | E::B(_));\n+    }\n     {\n         // lint\n         let _ans = !matches!(x, E::B(_) | E::C);"}, {"sha": "a49991f594174473c51cc41609d3f808b1d80768", "filename": "src/tools/clippy/tests/ui/match_expr_like_matches_macro.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -61,6 +61,18 @@ fn main() {\n             _ => false,\n         };\n     }\n+    {\n+        // lint\n+        // skip rustfmt to prevent removing block for first pattern\n+        #[rustfmt::skip]\n+        let _ans = match x {\n+            E::A(_) => {\n+                true\n+            }\n+            E::B(_) => true,\n+            _ => false,\n+        };\n+    }\n     {\n         // lint\n         let _ans = match x {"}, {"sha": "e94555e27448b0d131c6e34d6d0cb5bdac330b4e", "filename": "src/tools/clippy/tests/ui/match_expr_like_matches_macro.stderr", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -60,7 +60,20 @@ LL | |         };\n    | |_________^ help: try this: `matches!(x, E::A(_) | E::B(_))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:66:20\n+  --> $DIR/match_expr_like_matches_macro.rs:68:20\n+   |\n+LL |           let _ans = match x {\n+   |  ____________________^\n+LL | |             E::A(_) => {\n+LL | |                 true\n+LL | |             }\n+LL | |             E::B(_) => true,\n+LL | |             _ => false,\n+LL | |         };\n+   | |_________^ help: try this: `matches!(x, E::A(_) | E::B(_))`\n+\n+error: match expression looks like `matches!` macro\n+  --> $DIR/match_expr_like_matches_macro.rs:78:20\n    |\n LL |           let _ans = match x {\n    |  ____________________^\n@@ -71,7 +84,7 @@ LL | |         };\n    | |_________^ help: try this: `!matches!(x, E::B(_) | E::C)`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:126:18\n+  --> $DIR/match_expr_like_matches_macro.rs:138:18\n    |\n LL |           let _z = match &z {\n    |  __________________^\n@@ -81,7 +94,7 @@ LL | |         };\n    | |_________^ help: try this: `matches!(z, Some(3))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:135:18\n+  --> $DIR/match_expr_like_matches_macro.rs:147:18\n    |\n LL |           let _z = match &z {\n    |  __________________^\n@@ -91,7 +104,7 @@ LL | |         };\n    | |_________^ help: try this: `matches!(&z, Some(3))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:152:21\n+  --> $DIR/match_expr_like_matches_macro.rs:164:21\n    |\n LL |               let _ = match &z {\n    |  _____________________^\n@@ -101,7 +114,7 @@ LL | |             };\n    | |_____________^ help: try this: `matches!(&z, AnEnum::X)`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:166:20\n+  --> $DIR/match_expr_like_matches_macro.rs:178:20\n    |\n LL |           let _res = match &val {\n    |  ____________________^\n@@ -111,7 +124,7 @@ LL | |         };\n    | |_________^ help: try this: `matches!(&val, &Some(ref _a))`\n \n error: match expression looks like `matches!` macro\n-  --> $DIR/match_expr_like_matches_macro.rs:178:20\n+  --> $DIR/match_expr_like_matches_macro.rs:190:20\n    |\n LL |           let _res = match &val {\n    |  ____________________^\n@@ -120,5 +133,5 @@ LL | |             _ => false,\n LL | |         };\n    | |_________^ help: try this: `matches!(&val, &Some(ref _a))`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}, {"sha": "09afe2ddbbf6289e21d64cb36e1dea36053b51a0", "filename": "src/tools/clippy/tests/ui/needless_borrow.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -115,6 +115,18 @@ fn main() {\n         fn foo_ref(&self) {}\n     }\n     (&&()).foo_ref(); // Don't lint. `&()` will call `<() as FooRef>::foo_ref`\n+\n+    struct S;\n+    impl From<S> for u32 {\n+        fn from(s: S) -> Self {\n+            (&s).into()\n+        }\n+    }\n+    impl From<&S> for u32 {\n+        fn from(s: &S) -> Self {\n+            0\n+        }\n+    }\n }\n \n #[allow(clippy::needless_borrowed_reference)]"}, {"sha": "3ae4722a1f8985e414ea3a9d49f85ccb397bf770", "filename": "src/tools/clippy/tests/ui/needless_borrow.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -115,6 +115,18 @@ fn main() {\n         fn foo_ref(&self) {}\n     }\n     (&&()).foo_ref(); // Don't lint. `&()` will call `<() as FooRef>::foo_ref`\n+\n+    struct S;\n+    impl From<S> for u32 {\n+        fn from(s: S) -> Self {\n+            (&s).into()\n+        }\n+    }\n+    impl From<&S> for u32 {\n+        fn from(s: &S) -> Self {\n+            0\n+        }\n+    }\n }\n \n #[allow(clippy::needless_borrowed_reference)]"}, {"sha": "0c9178fb85efe39a0a3e7938e658b162fcb2efc1", "filename": "src/tools/clippy/tests/ui/needless_match.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -99,6 +99,7 @@ fn if_let_result() {\n     let _: Result<i32, i32> = x;\n     let _: Result<i32, i32> = x;\n     // Input type mismatch, don't trigger\n+    #[allow(clippy::question_mark)]\n     let _: Result<i32, i32> = if let Err(e) = Ok(1) { Err(e) } else { x };\n }\n "}, {"sha": "f66f01d7ccaf4ef2f96be1e2e2247cebf83884f2", "filename": "src/tools/clippy/tests/ui/needless_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -122,6 +122,7 @@ fn if_let_result() {\n     let _: Result<i32, i32> = if let Err(e) = x { Err(e) } else { x };\n     let _: Result<i32, i32> = if let Ok(val) = x { Ok(val) } else { x };\n     // Input type mismatch, don't trigger\n+    #[allow(clippy::question_mark)]\n     let _: Result<i32, i32> = if let Err(e) = Ok(1) { Err(e) } else { x };\n }\n "}, {"sha": "5bc79800a1a748bcbbb696e6fa824c791af3e647", "filename": "src/tools/clippy/tests/ui/needless_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -84,7 +84,7 @@ LL |     let _: Result<i32, i32> = if let Ok(val) = x { Ok(val) } else { x };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `x`\n \n error: this if-let expression is unnecessary\n-  --> $DIR/needless_match.rs:129:21\n+  --> $DIR/needless_match.rs:130:21\n    |\n LL |       let _: Simple = if let Simple::A = x {\n    |  _____________________^\n@@ -97,7 +97,7 @@ LL | |     };\n    | |_____^ help: replace it with: `x`\n \n error: this match expression is unnecessary\n-  --> $DIR/needless_match.rs:168:26\n+  --> $DIR/needless_match.rs:169:26\n    |\n LL |           let _: Complex = match ce {\n    |  __________________________^"}, {"sha": "65809023f8dff129d3d3d734c72d09def63b74c9", "filename": "src/tools/clippy/tests/ui/new_without_default.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_without_default.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -212,3 +212,17 @@ impl DocHidden {\n }\n \n fn main() {}\n+\n+pub struct IgnoreConstGenericNew(usize);\n+impl IgnoreConstGenericNew {\n+    pub fn new<const N: usize>() -> Self {\n+        Self(N)\n+    }\n+}\n+\n+pub struct IgnoreLifetimeNew;\n+impl IgnoreLifetimeNew {\n+    pub fn new<'a>() -> Self {\n+        Self\n+    }\n+}"}, {"sha": "fdefb11ae17a543f4f4c1cabdd4a1d88eddb36ad", "filename": "src/tools/clippy/tests/ui/no_effect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -5,7 +5,6 @@\n #![allow(clippy::deref_addrof)]\n #![allow(clippy::redundant_field_names)]\n \n-\n struct Unit;\n struct Tuple(i32);\n struct Struct {"}, {"sha": "328d2555ceb8e98304485abf59f08d3ceda9cfaa", "filename": "src/tools/clippy/tests/ui/no_effect.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,183 +1,183 @@\n error: statement with no effect\n-  --> $DIR/no_effect.rs:95:5\n+  --> $DIR/no_effect.rs:94:5\n    |\n LL |     0;\n    |     ^^\n    |\n    = note: `-D clippy::no-effect` implied by `-D warnings`\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:96:5\n+  --> $DIR/no_effect.rs:95:5\n    |\n LL |     s2;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:97:5\n+  --> $DIR/no_effect.rs:96:5\n    |\n LL |     Unit;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:98:5\n+  --> $DIR/no_effect.rs:97:5\n    |\n LL |     Tuple(0);\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:99:5\n+  --> $DIR/no_effect.rs:98:5\n    |\n LL |     Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:100:5\n+  --> $DIR/no_effect.rs:99:5\n    |\n LL |     Struct { ..s };\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:101:5\n+  --> $DIR/no_effect.rs:100:5\n    |\n LL |     Union { a: 0 };\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:102:5\n+  --> $DIR/no_effect.rs:101:5\n    |\n LL |     Enum::Tuple(0);\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:103:5\n+  --> $DIR/no_effect.rs:102:5\n    |\n LL |     Enum::Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:104:5\n+  --> $DIR/no_effect.rs:103:5\n    |\n LL |     5 + 6;\n    |     ^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:105:5\n+  --> $DIR/no_effect.rs:104:5\n    |\n LL |     *&42;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:106:5\n+  --> $DIR/no_effect.rs:105:5\n    |\n LL |     &6;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:107:5\n+  --> $DIR/no_effect.rs:106:5\n    |\n LL |     (5, 6, 7);\n    |     ^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:108:5\n+  --> $DIR/no_effect.rs:107:5\n    |\n LL |     box 42;\n    |     ^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:109:5\n+  --> $DIR/no_effect.rs:108:5\n    |\n LL |     ..;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:110:5\n+  --> $DIR/no_effect.rs:109:5\n    |\n LL |     5..;\n    |     ^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:111:5\n+  --> $DIR/no_effect.rs:110:5\n    |\n LL |     ..5;\n    |     ^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:112:5\n+  --> $DIR/no_effect.rs:111:5\n    |\n LL |     5..6;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:113:5\n+  --> $DIR/no_effect.rs:112:5\n    |\n LL |     5..=6;\n    |     ^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:114:5\n+  --> $DIR/no_effect.rs:113:5\n    |\n LL |     [42, 55];\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:115:5\n+  --> $DIR/no_effect.rs:114:5\n    |\n LL |     [42, 55][1];\n    |     ^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:116:5\n+  --> $DIR/no_effect.rs:115:5\n    |\n LL |     (42, 55).1;\n    |     ^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:117:5\n+  --> $DIR/no_effect.rs:116:5\n    |\n LL |     [42; 55];\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:118:5\n+  --> $DIR/no_effect.rs:117:5\n    |\n LL |     [42; 55][13];\n    |     ^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:120:5\n+  --> $DIR/no_effect.rs:119:5\n    |\n LL |     || x += 5;\n    |     ^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:122:5\n+  --> $DIR/no_effect.rs:121:5\n    |\n LL |     FooString { s: s };\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:123:5\n+  --> $DIR/no_effect.rs:122:5\n    |\n LL |     let _unused = 1;\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::no-effect-underscore-binding` implied by `-D warnings`\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:124:5\n+  --> $DIR/no_effect.rs:123:5\n    |\n LL |     let _penguin = || println!(\"Some helpful closure\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:125:5\n+  --> $DIR/no_effect.rs:124:5\n    |\n LL |     let _duck = Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:126:5\n+  --> $DIR/no_effect.rs:125:5\n    |\n LL |     let _cat = [2, 4, 6, 8][2];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "fdb08d953ff1dbc95263e6d41e88861310d9a6b5", "filename": "src/tools/clippy/tests/ui/or_fun_call.fixed", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -185,7 +185,8 @@ mod issue8239 {\n             .reduce(|mut acc, f| {\n                 acc.push_str(&f);\n                 acc\n-            }).unwrap_or_default();\n+            })\n+            .unwrap_or_default();\n     }\n \n     fn more_to_max_suggestion_highest_lines_1() {\n@@ -197,7 +198,8 @@ mod issue8239 {\n                 let _ = \"\";\n                 acc.push_str(&f);\n                 acc\n-            }).unwrap_or_default();\n+            })\n+            .unwrap_or_default();\n     }\n \n     fn equal_to_max_suggestion_highest_lines() {\n@@ -208,7 +210,8 @@ mod issue8239 {\n                 let _ = \"\";\n                 acc.push_str(&f);\n                 acc\n-            }).unwrap_or_default();\n+            })\n+            .unwrap_or_default();\n     }\n \n     fn less_than_max_suggestion_highest_lines() {\n@@ -218,7 +221,8 @@ mod issue8239 {\n         map.reduce(|mut acc, f| {\n             acc.push_str(&f);\n             acc\n-        }).unwrap_or_default();\n+        })\n+        .unwrap_or_default();\n     }\n }\n "}, {"sha": "4c5938ab88b90926c25c189063ad1b4ab1e268f5", "filename": "src/tools/clippy/tests/ui/or_fun_call.stderr", "status": "modified", "additions": 22, "deletions": 84, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -7,10 +7,10 @@ LL |     with_constructor.unwrap_or(make());\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:52:5\n+  --> $DIR/or_fun_call.rs:52:14\n    |\n LL |     with_new.unwrap_or(Vec::new());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n+   |              ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n   --> $DIR/or_fun_call.rs:55:21\n@@ -31,16 +31,16 @@ LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:64:5\n+  --> $DIR/or_fun_call.rs:64:24\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:67:5\n+  --> $DIR/or_fun_call.rs:67:23\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n   --> $DIR/or_fun_call.rs:70:18\n@@ -49,16 +49,16 @@ LL |     self_default.unwrap_or(<FakeDefault>::default());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(<FakeDefault>::default)`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:73:5\n+  --> $DIR/or_fun_call.rs:73:18\n    |\n LL |     real_default.unwrap_or(<FakeDefault as Default>::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `real_default.unwrap_or_default()`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:76:5\n+  --> $DIR/or_fun_call.rs:76:14\n    |\n LL |     with_vec.unwrap_or(vec![]);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_default()`\n+   |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n   --> $DIR/or_fun_call.rs:79:21\n@@ -109,90 +109,28 @@ LL |         None.unwrap_or( unsafe { ptr_to_ref(s) }    );\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| unsafe { ptr_to_ref(s) })`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:182:9\n-   |\n-LL | /         frames\n-LL | |             .iter()\n-LL | |             .map(|f: &String| f.to_lowercase())\n-LL | |             .reduce(|mut acc, f| {\n-...  |\n-LL | |             })\n-LL | |             .unwrap_or(String::new());\n-   | |_____________________________________^\n-   |\n-help: try this\n-   |\n-LL ~         frames\n-LL +             .iter()\n-LL +             .map(|f: &String| f.to_lowercase())\n-LL +             .reduce(|mut acc, f| {\n-LL +                 acc.push_str(&f);\n-LL +                 acc\n-LL ~             }).unwrap_or_default();\n+  --> $DIR/or_fun_call.rs:189:14\n    |\n+LL |             .unwrap_or(String::new());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:195:9\n-   |\n-LL | /         iter.map(|f: &String| f.to_lowercase())\n-LL | |             .reduce(|mut acc, f| {\n-LL | |                 let _ = \"\";\n-LL | |                 let _ = \"\";\n-...  |\n-LL | |             })\n-LL | |             .unwrap_or(String::new());\n-   | |_____________________________________^\n-   |\n-help: try this\n-   |\n-LL ~         iter.map(|f: &String| f.to_lowercase())\n-LL +             .reduce(|mut acc, f| {\n-LL +                 let _ = \"\";\n-LL +                 let _ = \"\";\n-LL +                 acc.push_str(&f);\n-LL +                 acc\n-LL ~             }).unwrap_or_default();\n+  --> $DIR/or_fun_call.rs:202:14\n    |\n+LL |             .unwrap_or(String::new());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:208:9\n-   |\n-LL | /         iter.map(|f: &String| f.to_lowercase())\n-LL | |             .reduce(|mut acc, f| {\n-LL | |                 let _ = \"\";\n-LL | |                 acc.push_str(&f);\n-LL | |                 acc\n-LL | |             })\n-LL | |             .unwrap_or(String::new());\n-   | |_____________________________________^\n-   |\n-help: try this\n-   |\n-LL ~         iter.map(|f: &String| f.to_lowercase())\n-LL +             .reduce(|mut acc, f| {\n-LL +                 let _ = \"\";\n-LL +                 acc.push_str(&f);\n-LL +                 acc\n-LL ~             }).unwrap_or_default();\n+  --> $DIR/or_fun_call.rs:214:14\n    |\n+LL |             .unwrap_or(String::new());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:221:9\n-   |\n-LL | /         map.reduce(|mut acc, f| {\n-LL | |             acc.push_str(&f);\n-LL | |             acc\n-LL | |         })\n-LL | |         .unwrap_or(String::new());\n-   | |_________________________________^\n-   |\n-help: try this\n-   |\n-LL ~         map.reduce(|mut acc, f| {\n-LL +             acc.push_str(&f);\n-LL +             acc\n-LL ~         }).unwrap_or_default();\n+  --> $DIR/or_fun_call.rs:225:10\n    |\n+LL |         .unwrap_or(String::new());\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: aborting due to 22 previous errors\n "}, {"sha": "c4c9c82143336647e2dafb04292544c81797c6d5", "filename": "src/tools/clippy/tests/ui/question_mark.fixed", "status": "modified", "additions": 48, "deletions": 17, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fquestion_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fquestion_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fquestion_mark.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![allow(unreachable_code)]\n+#![allow(dead_code)]\n #![allow(clippy::unnecessary_wraps)]\n \n fn some_func(a: Option<u32>) -> Option<u32> {\n@@ -154,26 +155,56 @@ fn f() -> NotOption {\n     NotOption::First\n }\n \n-fn main() {\n-    some_func(Some(42));\n-    some_func(None);\n-    some_other_func(Some(42));\n+fn do_something() {}\n \n-    let copy_struct = CopyStruct { opt: Some(54) };\n-    copy_struct.func();\n+fn err_immediate_return() -> Result<i32, i32> {\n+    func_returning_result()?;\n+    Ok(1)\n+}\n \n-    let move_struct = MoveStruct {\n-        opt: Some(vec![42, 1337]),\n-    };\n-    move_struct.ref_func();\n-    move_struct.clone().mov_func_reuse();\n-    move_struct.mov_func_no_use();\n+fn err_immediate_return_and_do_something() -> Result<i32, i32> {\n+    func_returning_result()?;\n+    do_something();\n+    Ok(1)\n+}\n \n-    let so = SeemsOption::Some(45);\n-    returns_something_similar_to_option(so);\n+// No warning\n+fn no_immediate_return() -> Result<i32, i32> {\n+    if let Err(err) = func_returning_result() {\n+        do_something();\n+        return Err(err);\n+    }\n+    Ok(1)\n+}\n \n-    func();\n+// No warning\n+fn mixed_result_and_option() -> Option<i32> {\n+    if let Err(err) = func_returning_result() {\n+        return Some(err);\n+    }\n+    None\n+}\n+\n+// No warning\n+fn else_if_check() -> Result<i32, i32> {\n+    if true {\n+        Ok(1)\n+    } else if let Err(e) = func_returning_result() {\n+        Err(e)\n+    } else {\n+        Err(-1)\n+    }\n+}\n \n-    let _ = result_func(Ok(42));\n-    let _ = f();\n+// No warning\n+#[allow(clippy::manual_map)]\n+#[rustfmt::skip]\n+fn option_map() -> Option<bool> {\n+    if let Some(a) = Some(false) {\n+        Some(!a)\n+    } else {\n+        None\n+    }\n }\n+\n+fn main() {}"}, {"sha": "cdbc7b1606f80782c7d107e213311e4b79cb6769", "filename": "src/tools/clippy/tests/ui/question_mark.rs", "status": "modified", "additions": 52, "deletions": 17, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fquestion_mark.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![allow(unreachable_code)]\n+#![allow(dead_code)]\n #![allow(clippy::unnecessary_wraps)]\n \n fn some_func(a: Option<u32>) -> Option<u32> {\n@@ -186,26 +187,60 @@ fn f() -> NotOption {\n     NotOption::First\n }\n \n-fn main() {\n-    some_func(Some(42));\n-    some_func(None);\n-    some_other_func(Some(42));\n+fn do_something() {}\n \n-    let copy_struct = CopyStruct { opt: Some(54) };\n-    copy_struct.func();\n+fn err_immediate_return() -> Result<i32, i32> {\n+    if let Err(err) = func_returning_result() {\n+        return Err(err);\n+    }\n+    Ok(1)\n+}\n \n-    let move_struct = MoveStruct {\n-        opt: Some(vec![42, 1337]),\n-    };\n-    move_struct.ref_func();\n-    move_struct.clone().mov_func_reuse();\n-    move_struct.mov_func_no_use();\n+fn err_immediate_return_and_do_something() -> Result<i32, i32> {\n+    if let Err(err) = func_returning_result() {\n+        return Err(err);\n+    }\n+    do_something();\n+    Ok(1)\n+}\n \n-    let so = SeemsOption::Some(45);\n-    returns_something_similar_to_option(so);\n+// No warning\n+fn no_immediate_return() -> Result<i32, i32> {\n+    if let Err(err) = func_returning_result() {\n+        do_something();\n+        return Err(err);\n+    }\n+    Ok(1)\n+}\n \n-    func();\n+// No warning\n+fn mixed_result_and_option() -> Option<i32> {\n+    if let Err(err) = func_returning_result() {\n+        return Some(err);\n+    }\n+    None\n+}\n \n-    let _ = result_func(Ok(42));\n-    let _ = f();\n+// No warning\n+fn else_if_check() -> Result<i32, i32> {\n+    if true {\n+        Ok(1)\n+    } else if let Err(e) = func_returning_result() {\n+        Err(e)\n+    } else {\n+        Err(-1)\n+    }\n }\n+\n+// No warning\n+#[allow(clippy::manual_map)]\n+#[rustfmt::skip]\n+fn option_map() -> Option<bool> {\n+    if let Some(a) = Some(false) {\n+        Some(!a)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1b6cd524b2f2339484878443a9e09f2acc00917a", "filename": "src/tools/clippy/tests/ui/question_mark.stderr", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fquestion_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fquestion_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fquestion_mark.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,5 +1,5 @@\n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:6:5\n+  --> $DIR/question_mark.rs:7:5\n    |\n LL | /     if a.is_none() {\n LL | |         return None;\n@@ -9,23 +9,23 @@ LL | |     }\n    = note: `-D clippy::question-mark` implied by `-D warnings`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:51:9\n+  --> $DIR/question_mark.rs:52:9\n    |\n LL | /         if (self.opt).is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `(self.opt)?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:55:9\n+  --> $DIR/question_mark.rs:56:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None\n LL | |         }\n    | |_________^ help: replace it with: `self.opt?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:59:17\n+  --> $DIR/question_mark.rs:60:17\n    |\n LL |           let _ = if self.opt.is_none() {\n    |  _________________^\n@@ -35,8 +35,8 @@ LL | |             self.opt\n LL | |         };\n    | |_________^ help: replace it with: `Some(self.opt?)`\n \n-error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:65:17\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:66:17\n    |\n LL |           let _ = if let Some(x) = self.opt {\n    |  _________________^\n@@ -47,31 +47,31 @@ LL | |         };\n    | |_________^ help: replace it with: `self.opt?`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:82:9\n+  --> $DIR/question_mark.rs:83:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:90:9\n+  --> $DIR/question_mark.rs:91:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:98:9\n+  --> $DIR/question_mark.rs:99:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n-error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:105:26\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:106:26\n    |\n LL |           let v: &Vec<_> = if let Some(ref v) = self.opt {\n    |  __________________________^\n@@ -81,8 +81,8 @@ LL | |             return None;\n LL | |         };\n    | |_________^ help: replace it with: `self.opt.as_ref()?`\n \n-error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:115:17\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:116:17\n    |\n LL |           let v = if let Some(v) = self.opt {\n    |  _________________^\n@@ -93,26 +93,42 @@ LL | |         };\n    | |_________^ help: replace it with: `self.opt?`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:130:5\n+  --> $DIR/question_mark.rs:131:5\n    |\n LL | /     if f().is_none() {\n LL | |         return None;\n LL | |     }\n    | |_____^ help: replace it with: `f()?;`\n \n-error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:142:13\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:143:13\n    |\n LL |     let _ = if let Ok(x) = x { x } else { return x };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `x?`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:144:5\n+  --> $DIR/question_mark.rs:145:5\n    |\n LL | /     if x.is_err() {\n LL | |         return x;\n LL | |     }\n    | |_____^ help: replace it with: `x?;`\n \n-error: aborting due to 13 previous errors\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:193:5\n+   |\n+LL | /     if let Err(err) = func_returning_result() {\n+LL | |         return Err(err);\n+LL | |     }\n+   | |_____^ help: replace it with: `func_returning_result()?;`\n+\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:200:5\n+   |\n+LL | /     if let Err(err) = func_returning_result() {\n+LL | |         return Err(err);\n+LL | |     }\n+   | |_____^ help: replace it with: `func_returning_result()?;`\n+\n+error: aborting due to 15 previous errors\n "}, {"sha": "daef95a425c92b564e6a202bca3be4b3d5a80193", "filename": "src/tools/clippy/tests/ui/same_name_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_name_method.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -62,7 +62,7 @@ mod should_lint {\n         impl T1 for S {}\n     }\n \n-    mod mulitply_conflicit_trait {\n+    mod multiply_conflicit_trait {\n         use crate::{T1, T2};\n \n         struct S;"}, {"sha": "385a9986aba047bfdfe30cf1fc3818e340eca0ab", "filename": "src/tools/clippy/tests/ui/search_is_some_fixable_some.fixed", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsearch_is_some_fixable_some.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsearch_is_some_fixable_some.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsearch_is_some_fixable_some.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -216,3 +216,33 @@ mod issue7392 {\n         let _ = v.iter().any(|fp| test_u32_2(*fp.field));\n     }\n }\n+\n+mod issue9120 {\n+    fn make_arg_no_deref_impl() -> impl Fn(&&u32) -> bool {\n+        move |x: &&u32| **x == 78\n+    }\n+\n+    fn make_arg_no_deref_dyn() -> Box<dyn Fn(&&u32) -> bool> {\n+        Box::new(move |x: &&u32| **x == 78)\n+    }\n+\n+    fn wrapper<T: Fn(&&u32) -> bool>(v: Vec<u32>, func: T) -> bool {\n+        #[allow(clippy::redundant_closure)]\n+        v.iter().any(|x: &u32| func(&x))\n+    }\n+\n+    fn do_tests() {\n+        let v = vec![3, 2, 1, 0];\n+        let arg_no_deref_impl = make_arg_no_deref_impl();\n+        let arg_no_deref_dyn = make_arg_no_deref_dyn();\n+\n+        #[allow(clippy::redundant_closure)]\n+        let _ = v.iter().any(|x: &u32| arg_no_deref_impl(&x));\n+\n+        #[allow(clippy::redundant_closure)]\n+        let _ = v.iter().any(|x: &u32| arg_no_deref_dyn(&x));\n+\n+        #[allow(clippy::redundant_closure)]\n+        let _ = v.iter().any(|x: &u32| (*arg_no_deref_dyn)(&x));\n+    }\n+}"}, {"sha": "67e190ee37837d471b9c7eb7f5d05b859a04dafd", "filename": "src/tools/clippy/tests/ui/search_is_some_fixable_some.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsearch_is_some_fixable_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsearch_is_some_fixable_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsearch_is_some_fixable_some.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -219,3 +219,33 @@ mod issue7392 {\n         let _ = v.iter().find(|fp| test_u32_2(*fp.field)).is_some();\n     }\n }\n+\n+mod issue9120 {\n+    fn make_arg_no_deref_impl() -> impl Fn(&&u32) -> bool {\n+        move |x: &&u32| **x == 78\n+    }\n+\n+    fn make_arg_no_deref_dyn() -> Box<dyn Fn(&&u32) -> bool> {\n+        Box::new(move |x: &&u32| **x == 78)\n+    }\n+\n+    fn wrapper<T: Fn(&&u32) -> bool>(v: Vec<u32>, func: T) -> bool {\n+        #[allow(clippy::redundant_closure)]\n+        v.iter().find(|x: &&u32| func(x)).is_some()\n+    }\n+\n+    fn do_tests() {\n+        let v = vec![3, 2, 1, 0];\n+        let arg_no_deref_impl = make_arg_no_deref_impl();\n+        let arg_no_deref_dyn = make_arg_no_deref_dyn();\n+\n+        #[allow(clippy::redundant_closure)]\n+        let _ = v.iter().find(|x: &&u32| arg_no_deref_impl(x)).is_some();\n+\n+        #[allow(clippy::redundant_closure)]\n+        let _ = v.iter().find(|x: &&u32| arg_no_deref_dyn(x)).is_some();\n+\n+        #[allow(clippy::redundant_closure)]\n+        let _ = v.iter().find(|x: &&u32| (*arg_no_deref_dyn)(x)).is_some();\n+    }\n+}"}, {"sha": "c5c3c92c9182fc32aa3de5c6f9bdda18dee8d126", "filename": "src/tools/clippy/tests/ui/search_is_some_fixable_some.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsearch_is_some_fixable_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsearch_is_some_fixable_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsearch_is_some_fixable_some.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -264,5 +264,29 @@ error: called `is_some()` after searching an `Iterator` with `find`\n LL |         let _ = v.iter().find(|fp| test_u32_2(*fp.field)).is_some();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|fp| test_u32_2(*fp.field))`\n \n-error: aborting due to 43 previous errors\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:234:18\n+   |\n+LL |         v.iter().find(|x: &&u32| func(x)).is_some()\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x: &u32| func(&x))`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:243:26\n+   |\n+LL |         let _ = v.iter().find(|x: &&u32| arg_no_deref_impl(x)).is_some();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x: &u32| arg_no_deref_impl(&x))`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:246:26\n+   |\n+LL |         let _ = v.iter().find(|x: &&u32| arg_no_deref_dyn(x)).is_some();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x: &u32| arg_no_deref_dyn(&x))`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:249:26\n+   |\n+LL |         let _ = v.iter().find(|x: &&u32| (*arg_no_deref_dyn)(x)).is_some();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x: &u32| (*arg_no_deref_dyn)(&x))`\n+\n+error: aborting due to 47 previous errors\n "}, {"sha": "43d76094d0e847e3e6f60c875d2cf2248adc330b", "filename": "src/tools/clippy/tests/ui/shadow.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshadow.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -265,5 +265,17 @@ note: previous binding is here\n LL | pub async fn foo2(_a: i32, _b: i64) {\n    |                            ^^\n \n-error: aborting due to 22 previous errors\n+error: `x` shadows a previous, unrelated binding\n+  --> $DIR/shadow.rs:94:21\n+   |\n+LL |         if let Some(x) = Some(1) { x } else { 1 }\n+   |                     ^\n+   |\n+note: previous binding is here\n+  --> $DIR/shadow.rs:93:13\n+   |\n+LL |         let x = 1;\n+   |             ^\n+\n+error: aborting due to 23 previous errors\n "}, {"sha": "84ecf1ea53ed73207e78abb145bee2ae7b8a47f3", "filename": "src/tools/clippy/tests/ui/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -620,4 +620,11 @@ fn should_trigger_lint_without_significant_drop_in_arm() {\n     };\n }\n \n+fn should_not_trigger_on_significant_iterator_drop() {\n+    let lines = std::io::stdin().lines();\n+    for line in lines {\n+        println!(\"foo: {}\", line.unwrap());\n+    }\n+}\n+\n fn main() {}"}, {"sha": "74f05ec1f658a13de195ea294ec65ab302b2ec8e", "filename": "src/tools/clippy/tests/ui/std_instead_of_core.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstd_instead_of_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstd_instead_of_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstd_instead_of_core.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -0,0 +1,39 @@\n+#![warn(clippy::std_instead_of_core)]\n+#![allow(unused_imports)]\n+\n+extern crate alloc;\n+\n+#[warn(clippy::std_instead_of_core)]\n+fn std_instead_of_core() {\n+    // Regular import\n+    use std::hash::Hasher;\n+    // Absolute path\n+    use ::std::hash::Hash;\n+\n+    // Multiple imports\n+    use std::fmt::{Debug, Result};\n+\n+    // Function calls\n+    let ptr = std::ptr::null::<u32>();\n+    let ptr_mut = ::std::ptr::null_mut::<usize>();\n+\n+    // Types\n+    let cell = std::cell::Cell::new(8u32);\n+    let cell_absolute = ::std::cell::Cell::new(8u32);\n+}\n+\n+#[warn(clippy::std_instead_of_alloc)]\n+fn std_instead_of_alloc() {\n+    use std::vec::Vec;\n+}\n+\n+#[warn(clippy::alloc_instead_of_core)]\n+fn alloc_instead_of_core() {\n+    use alloc::slice::from_ref;\n+}\n+\n+fn main() {\n+    std_instead_of_core();\n+    std_instead_of_alloc();\n+    alloc_instead_of_core();\n+}"}, {"sha": "9f1644835c10d129537b3bf7963efd3b7cbd6243", "filename": "src/tools/clippy/tests/ui/std_instead_of_core.stderr", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstd_instead_of_core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstd_instead_of_core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstd_instead_of_core.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -0,0 +1,85 @@\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:9:9\n+   |\n+LL |     use std::hash::Hasher;\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::std-instead-of-core` implied by `-D warnings`\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:11:9\n+   |\n+LL |     use ::std::hash::Hash;\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:14:20\n+   |\n+LL |     use std::fmt::{Debug, Result};\n+   |                    ^^^^^\n+   |\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:14:27\n+   |\n+LL |     use std::fmt::{Debug, Result};\n+   |                           ^^^^^^\n+   |\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:17:15\n+   |\n+LL |     let ptr = std::ptr::null::<u32>();\n+   |               ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:18:19\n+   |\n+LL |     let ptr_mut = ::std::ptr::null_mut::<usize>();\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:21:16\n+   |\n+LL |     let cell = std::cell::Cell::new(8u32);\n+   |                ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:22:25\n+   |\n+LL |     let cell_absolute = ::std::cell::Cell::new(8u32);\n+   |                         ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `alloc`\n+  --> $DIR/std_instead_of_core.rs:27:9\n+   |\n+LL |     use std::vec::Vec;\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::std-instead-of-alloc` implied by `-D warnings`\n+   = help: consider importing the item from `alloc`\n+\n+error: used import from `alloc` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:32:9\n+   |\n+LL |     use alloc::slice::from_ref;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::alloc-instead-of-core` implied by `-D warnings`\n+   = help: consider importing the item from `core`\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "a5751c58aab8f09f1b7c032f281d4281e001e2d5", "filename": "src/tools/clippy/tests/ui/trait_duplication_in_bounds.rs", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,4 +1,5 @@\n #![deny(clippy::trait_duplication_in_bounds)]\n+#![allow(unused)]\n \n use std::collections::BTreeMap;\n use std::ops::{Add, AddAssign, Div, DivAssign, Mul, MulAssign, Sub, SubAssign};\n@@ -98,4 +99,114 @@ trait FooIter: Iterator<Item = Foo> {\n // This should not lint\n fn impl_trait(_: impl AsRef<str>, _: impl AsRef<str>) {}\n \n+mod repeated_where_clauses_or_trait_bounds {\n+    fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n+        unimplemented!();\n+    }\n+\n+    fn bad_bar<T, U>(arg0: T, arg1: U)\n+    where\n+        T: Clone + Clone + Clone + Copy,\n+        U: Clone + Copy,\n+    {\n+        unimplemented!();\n+    }\n+\n+    fn good_bar<T: Clone + Copy, U: Clone + Copy>(arg0: T, arg1: U) {\n+        unimplemented!();\n+    }\n+\n+    fn good_foo<T, U>(arg0: T, arg1: U)\n+    where\n+        T: Clone + Copy,\n+        U: Clone + Copy,\n+    {\n+        unimplemented!();\n+    }\n+\n+    trait GoodSelfTraitBound: Clone + Copy {\n+        fn f();\n+    }\n+\n+    trait GoodSelfWhereClause {\n+        fn f()\n+        where\n+            Self: Clone + Copy;\n+    }\n+\n+    trait BadSelfTraitBound: Clone + Clone + Clone {\n+        fn f();\n+    }\n+\n+    trait BadSelfWhereClause {\n+        fn f()\n+        where\n+            Self: Clone + Clone + Clone;\n+    }\n+\n+    trait GoodTraitBound<T: Clone + Copy, U: Clone + Copy> {\n+        fn f();\n+    }\n+\n+    trait GoodWhereClause<T, U> {\n+        fn f()\n+        where\n+            T: Clone + Copy,\n+            U: Clone + Copy;\n+    }\n+\n+    trait BadTraitBound<T: Clone + Clone + Clone + Copy, U: Clone + Copy> {\n+        fn f();\n+    }\n+\n+    trait BadWhereClause<T, U> {\n+        fn f()\n+        where\n+            T: Clone + Clone + Clone + Copy,\n+            U: Clone + Copy;\n+    }\n+\n+    struct GoodStructBound<T: Clone + Copy, U: Clone + Copy> {\n+        t: T,\n+        u: U,\n+    }\n+\n+    impl<T: Clone + Copy, U: Clone + Copy> GoodTraitBound<T, U> for GoodStructBound<T, U> {\n+        // this should not warn\n+        fn f() {}\n+    }\n+\n+    struct GoodStructWhereClause;\n+\n+    impl<T, U> GoodTraitBound<T, U> for GoodStructWhereClause\n+    where\n+        T: Clone + Copy,\n+        U: Clone + Copy,\n+    {\n+        // this should not warn\n+        fn f() {}\n+    }\n+\n+    fn no_error_separate_arg_bounds(program: impl AsRef<()>, dir: impl AsRef<()>, args: &[impl AsRef<()>]) {}\n+\n+    trait GenericTrait<T> {}\n+\n+    // This should not warn but currently does see #8757\n+    fn good_generic<T: GenericTrait<u64> + GenericTrait<u32>>(arg0: T) {\n+        unimplemented!();\n+    }\n+\n+    fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n+        unimplemented!();\n+    }\n+\n+    mod foo {\n+        pub trait Clone {}\n+    }\n+\n+    fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n+        unimplemented!();\n+    }\n+}\n+\n fn main() {}"}, {"sha": "7ef04e52708f4c91e16c67c6dddf6cc786779c9b", "filename": "src/tools/clippy/tests/ui/trait_duplication_in_bounds.stderr", "status": "modified", "additions": 105, "deletions": 9, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,5 +1,5 @@\n error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds.rs:6:15\n+  --> $DIR/trait_duplication_in_bounds.rs:7:15\n    |\n LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n    |               ^^^^^\n@@ -12,60 +12,156 @@ LL | #![deny(clippy::trait_duplication_in_bounds)]\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds.rs:6:23\n+  --> $DIR/trait_duplication_in_bounds.rs:7:23\n    |\n LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n    |                       ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:35:15\n+  --> $DIR/trait_duplication_in_bounds.rs:36:15\n    |\n LL |         Self: Default;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:49:15\n+  --> $DIR/trait_duplication_in_bounds.rs:50:15\n    |\n LL |         Self: Default + Clone;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:55:15\n+  --> $DIR/trait_duplication_in_bounds.rs:56:15\n    |\n LL |         Self: Default + Clone;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:55:25\n+  --> $DIR/trait_duplication_in_bounds.rs:56:25\n    |\n LL |         Self: Default + Clone;\n    |                         ^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:58:15\n+  --> $DIR/trait_duplication_in_bounds.rs:59:15\n    |\n LL |         Self: Default;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:93:15\n+  --> $DIR/trait_duplication_in_bounds.rs:94:15\n    |\n LL |         Self: Iterator<Item = Foo>,\n    |               ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n-error: aborting due to 8 previous errors\n+error: this trait bound is already specified in the where clause\n+  --> $DIR/trait_duplication_in_bounds.rs:103:19\n+   |\n+LL |     fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n+   |                   ^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: these bounds contain repeated elements\n+  --> $DIR/trait_duplication_in_bounds.rs:103:19\n+   |\n+LL |     fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n+\n+error: this trait bound is already specified in the where clause\n+  --> $DIR/trait_duplication_in_bounds.rs:109:12\n+   |\n+LL |         T: Clone + Clone + Clone + Copy,\n+   |            ^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: these where clauses contain repeated elements\n+  --> $DIR/trait_duplication_in_bounds.rs:109:12\n+   |\n+LL |         T: Clone + Clone + Clone + Copy,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n+\n+error: these bounds contain repeated elements\n+  --> $DIR/trait_duplication_in_bounds.rs:137:30\n+   |\n+LL |     trait BadSelfTraitBound: Clone + Clone + Clone {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`\n+\n+error: these where clauses contain repeated elements\n+  --> $DIR/trait_duplication_in_bounds.rs:144:19\n+   |\n+LL |             Self: Clone + Clone + Clone;\n+   |                   ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`\n+\n+error: this trait bound is already specified in the where clause\n+  --> $DIR/trait_duplication_in_bounds.rs:158:28\n+   |\n+LL |     trait BadTraitBound<T: Clone + Clone + Clone + Copy, U: Clone + Copy> {\n+   |                            ^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: these bounds contain repeated elements\n+  --> $DIR/trait_duplication_in_bounds.rs:158:28\n+   |\n+LL |     trait BadTraitBound<T: Clone + Clone + Clone + Copy, U: Clone + Copy> {\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n+\n+error: these where clauses contain repeated elements\n+  --> $DIR/trait_duplication_in_bounds.rs:165:16\n+   |\n+LL |             T: Clone + Clone + Clone + Copy,\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n+\n+error: this trait bound is already specified in the where clause\n+  --> $DIR/trait_duplication_in_bounds.rs:195:24\n+   |\n+LL |     fn good_generic<T: GenericTrait<u64> + GenericTrait<u32>>(arg0: T) {\n+   |                        ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: this trait bound is already specified in the where clause\n+  --> $DIR/trait_duplication_in_bounds.rs:199:23\n+   |\n+LL |     fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n+   |                       ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: these bounds contain repeated elements\n+  --> $DIR/trait_duplication_in_bounds.rs:199:23\n+   |\n+LL |     fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `GenericTrait<u32> + GenericTrait<u64>`\n+\n+error: this trait bound is already specified in the where clause\n+  --> $DIR/trait_duplication_in_bounds.rs:207:26\n+   |\n+LL |     fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n+   |                          ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: these bounds contain repeated elements\n+  --> $DIR/trait_duplication_in_bounds.rs:207:26\n+   |\n+LL |     fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + foo::Clone`\n+\n+error: aborting due to 22 previous errors\n "}, {"sha": "539239fc18f9449f8b582b68a930f39ae2fcf664", "filename": "src/tools/clippy/tests/ui/transmutes_expressible_as_ptr_casts.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::transmutes_expressible_as_ptr_casts)]\n-// These two warnings currrently cover the cases transmutes_expressible_as_ptr_casts\n+// These two warnings currently cover the cases transmutes_expressible_as_ptr_casts\n // would otherwise be responsible for\n #![warn(clippy::useless_transmute)]\n #![warn(clippy::transmute_ptr_to_ptr)]"}, {"sha": "b9e446dc89a95f2160736ec83b80689642c4c0e5", "filename": "src/tools/clippy/tests/ui/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::transmutes_expressible_as_ptr_casts)]\n-// These two warnings currrently cover the cases transmutes_expressible_as_ptr_casts\n+// These two warnings currently cover the cases transmutes_expressible_as_ptr_casts\n // would otherwise be responsible for\n #![warn(clippy::useless_transmute)]\n #![warn(clippy::transmute_ptr_to_ptr)]"}, {"sha": "2eca1f4701c9fdaeccb0da0160b67bea538f4da1", "filename": "src/tools/clippy/tests/ui/type_repetition_in_bounds.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftype_repetition_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftype_repetition_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftype_repetition_in_bounds.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -79,6 +79,18 @@ where\n     u: U,\n }\n \n+// Check for the `?` in `?Sized`\n+pub fn f<T: ?Sized>()\n+where\n+    T: Clone,\n+{\n+}\n+pub fn g<T: Clone>()\n+where\n+    T: ?Sized,\n+{\n+}\n+\n // This should not lint\n fn impl_trait(_: impl AsRef<str>, _: impl AsRef<str>) {}\n "}, {"sha": "1d88714814d477007bc0dc6afc60f0fee9bb95a4", "filename": "src/tools/clippy/tests/ui/type_repetition_in_bounds.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftype_repetition_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftype_repetition_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftype_repetition_in_bounds.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -19,5 +19,21 @@ LL |     Self: Copy + Default + Ord,\n    |\n    = help: consider combining the bounds: `Self: Clone + Copy + Default + Ord`\n \n-error: aborting due to 2 previous errors\n+error: this type has already been used as a bound predicate\n+  --> $DIR/type_repetition_in_bounds.rs:85:5\n+   |\n+LL |     T: Clone,\n+   |     ^^^^^^^^\n+   |\n+   = help: consider combining the bounds: `T: ?Sized + Clone`\n+\n+error: this type has already been used as a bound predicate\n+  --> $DIR/type_repetition_in_bounds.rs:90:5\n+   |\n+LL |     T: ?Sized,\n+   |     ^^^^^^^^^\n+   |\n+   = help: consider combining the bounds: `T: Clone + ?Sized`\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "08aee4332151446a6fdd17603bd651cae7ee7306", "filename": "src/tools/clippy/tests/ui/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -250,6 +250,11 @@ fn from_proc_macro() {\n     proc_macro_unsafe::unsafe_block!(token);\n }\n \n+fn in_closure(x: *const u32) {\n+    // Safety: reason\n+    let _ = || unsafe { *x };\n+}\n+\n // Invalid comments\n \n #[rustfmt::skip]\n@@ -351,9 +356,9 @@ mod unsafe_impl_smoke_test {\n \n     #[rustfmt::skip]\n     mod sub_mod2 {\n-        // \n+        //\n         // SAFETY: ok\n-        // \n+        //\n \n         unsafe impl B for (u32) {}\n         unsafe trait B {}"}, {"sha": "c6a2127443befce4441fcc68018784fc0b362377", "filename": "src/tools/clippy/tests/ui/undocumented_unsafe_blocks.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,5 +1,5 @@\n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:257:19\n+  --> $DIR/undocumented_unsafe_blocks.rs:262:19\n    |\n LL |     /* Safety: */ unsafe {}\n    |                   ^^^^^^^^^\n@@ -8,103 +8,103 @@ LL |     /* Safety: */ unsafe {}\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:261:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:266:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:265:14\n+  --> $DIR/undocumented_unsafe_blocks.rs:270:14\n    |\n LL |     let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n    |              ^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:265:29\n+  --> $DIR/undocumented_unsafe_blocks.rs:270:29\n    |\n LL |     let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n    |                             ^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:265:48\n+  --> $DIR/undocumented_unsafe_blocks.rs:270:48\n    |\n LL |     let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n    |                                                ^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:269:18\n+  --> $DIR/undocumented_unsafe_blocks.rs:274:18\n    |\n LL |     let _ = (42, unsafe {}, \"test\", unsafe {});\n    |                  ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:269:37\n+  --> $DIR/undocumented_unsafe_blocks.rs:274:37\n    |\n LL |     let _ = (42, unsafe {}, \"test\", unsafe {});\n    |                                     ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:273:14\n+  --> $DIR/undocumented_unsafe_blocks.rs:278:14\n    |\n LL |     let _ = *unsafe { &42 };\n    |              ^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:278:19\n+  --> $DIR/undocumented_unsafe_blocks.rs:283:19\n    |\n LL |     let _ = match unsafe {} {\n    |                   ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:284:14\n+  --> $DIR/undocumented_unsafe_blocks.rs:289:14\n    |\n LL |     let _ = &unsafe {};\n    |              ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:288:14\n+  --> $DIR/undocumented_unsafe_blocks.rs:293:14\n    |\n LL |     let _ = [unsafe {}; 5];\n    |              ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:292:13\n+  --> $DIR/undocumented_unsafe_blocks.rs:297:13\n    |\n LL |     let _ = unsafe {};\n    |             ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:302:8\n+  --> $DIR/undocumented_unsafe_blocks.rs:307:8\n    |\n LL |     t!(unsafe {});\n    |        ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:308:13\n+  --> $DIR/undocumented_unsafe_blocks.rs:313:13\n    |\n LL |             unsafe {}\n    |             ^^^^^^^^^\n@@ -116,55 +116,55 @@ LL |     t!();\n    = note: this error originates in the macro `t` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:316:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:321:5\n    |\n LL |     unsafe {} // SAFETY:\n    |     ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:320:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:325:5\n    |\n LL |     unsafe {\n    |     ^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:330:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:335:5\n    |\n LL |     unsafe {};\n    |     ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:334:20\n+  --> $DIR/undocumented_unsafe_blocks.rs:339:20\n    |\n LL |     println!(\"{}\", unsafe { String::from_utf8_unchecked(vec![]) });\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:341:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:346:5\n    |\n LL |     unsafe impl A for () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:348:9\n+  --> $DIR/undocumented_unsafe_blocks.rs:353:9\n    |\n LL |         unsafe impl B for (u32) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:369:13\n+  --> $DIR/undocumented_unsafe_blocks.rs:374:13\n    |\n LL |             unsafe impl T for $t {}\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -176,7 +176,7 @@ LL |     no_safety_comment!(());\n    = note: this error originates in the macro `no_safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:394:13\n+  --> $DIR/undocumented_unsafe_blocks.rs:399:13\n    |\n LL |             unsafe impl T for $t {}\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -188,15 +188,15 @@ LL |     no_safety_comment!(());\n    = note: this error originates in the macro `no_safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:402:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:407:5\n    |\n LL |     unsafe impl T for (i32) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:394:13\n+  --> $DIR/undocumented_unsafe_blocks.rs:399:13\n    |\n LL |             unsafe impl T for $t {}\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -208,55 +208,55 @@ LL |     no_safety_comment!(u32);\n    = note: this error originates in the macro `no_safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:408:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:413:5\n    |\n LL |     unsafe impl T for (bool) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:454:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:459:5\n    |\n LL |     unsafe impl NoComment for () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:458:19\n+  --> $DIR/undocumented_unsafe_blocks.rs:463:19\n    |\n LL |     /* SAFETY: */ unsafe impl InlineComment for () {}\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:462:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:467:5\n    |\n LL |     unsafe impl TrailingComment for () {} // SAFETY:\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:467:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:472:5\n    |\n LL |     unsafe impl Interference for () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:474:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:479:5\n    |\n LL |     unsafe impl ImplInFn for () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:483:1\n+  --> $DIR/undocumented_unsafe_blocks.rs:488:1\n    |\n LL | unsafe impl CrateRoot for () {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "eed817968832193aa2d7588043480134c3e04d13", "filename": "src/tools/clippy/tests/ui/unnecessary_lazy_eval.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_lazy_eval.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_lazy_eval.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_lazy_eval.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -30,6 +30,7 @@ fn main() {\n     let ext_opt = Some(42);\n     let nested_opt = Some(Some(42));\n     let nested_tuple_opt = Some(Some((42, 43)));\n+    let cond = true;\n \n     // Should lint - Option\n     let _ = opt.unwrap_or(2);\n@@ -42,6 +43,7 @@ fn main() {\n     let _ = opt.get_or_insert(2);\n     let _ = opt.ok_or(2);\n     let _ = nested_tuple_opt.unwrap_or(Some((1, 2)));\n+    let _ = cond.then_some(astronomers_pi);\n \n     // Cases when unwrap is not called on a simple variable\n     let _ = Some(10).unwrap_or(2);"}, {"sha": "1588db79b38a8c2345a5a623466a705998fedb97", "filename": "src/tools/clippy/tests/ui/unnecessary_lazy_eval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_lazy_eval.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -30,6 +30,7 @@ fn main() {\n     let ext_opt = Some(42);\n     let nested_opt = Some(Some(42));\n     let nested_tuple_opt = Some(Some((42, 43)));\n+    let cond = true;\n \n     // Should lint - Option\n     let _ = opt.unwrap_or_else(|| 2);\n@@ -42,6 +43,7 @@ fn main() {\n     let _ = opt.get_or_insert_with(|| 2);\n     let _ = opt.ok_or_else(|| 2);\n     let _ = nested_tuple_opt.unwrap_or_else(|| Some((1, 2)));\n+    let _ = cond.then(|| astronomers_pi);\n \n     // Cases when unwrap is not called on a simple variable\n     let _ = Some(10).unwrap_or_else(|| 2);"}, {"sha": "83dc7fd832c38f8a7974f6175fbb3ac91fd8a179", "filename": "src/tools/clippy/tests/ui/unnecessary_lazy_eval.stderr", "status": "modified", "additions": 42, "deletions": 34, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_lazy_eval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_lazy_eval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_lazy_eval.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,5 +1,5 @@\n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:35:13\n+  --> $DIR/unnecessary_lazy_eval.rs:36:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| 2);\n    |             ^^^^--------------------\n@@ -9,255 +9,263 @@ LL |     let _ = opt.unwrap_or_else(|| 2);\n    = note: `-D clippy::unnecessary-lazy-evaluations` implied by `-D warnings`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:36:13\n+  --> $DIR/unnecessary_lazy_eval.rs:37:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| astronomers_pi);\n    |             ^^^^---------------------------------\n    |                 |\n    |                 help: use `unwrap_or(..)` instead: `unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:37:13\n+  --> $DIR/unnecessary_lazy_eval.rs:38:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| ext_str.some_field);\n    |             ^^^^-------------------------------------\n    |                 |\n    |                 help: use `unwrap_or(..)` instead: `unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:39:13\n+  --> $DIR/unnecessary_lazy_eval.rs:40:13\n    |\n LL |     let _ = opt.and_then(|_| ext_opt);\n    |             ^^^^---------------------\n    |                 |\n    |                 help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:40:13\n+  --> $DIR/unnecessary_lazy_eval.rs:41:13\n    |\n LL |     let _ = opt.or_else(|| ext_opt);\n    |             ^^^^-------------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:41:13\n+  --> $DIR/unnecessary_lazy_eval.rs:42:13\n    |\n LL |     let _ = opt.or_else(|| None);\n    |             ^^^^----------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:42:13\n+  --> $DIR/unnecessary_lazy_eval.rs:43:13\n    |\n LL |     let _ = opt.get_or_insert_with(|| 2);\n    |             ^^^^------------------------\n    |                 |\n    |                 help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:43:13\n+  --> $DIR/unnecessary_lazy_eval.rs:44:13\n    |\n LL |     let _ = opt.ok_or_else(|| 2);\n    |             ^^^^----------------\n    |                 |\n    |                 help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:44:13\n+  --> $DIR/unnecessary_lazy_eval.rs:45:13\n    |\n LL |     let _ = nested_tuple_opt.unwrap_or_else(|| Some((1, 2)));\n    |             ^^^^^^^^^^^^^^^^^-------------------------------\n    |                              |\n    |                              help: use `unwrap_or(..)` instead: `unwrap_or(Some((1, 2)))`\n \n+error: unnecessary closure used with `bool::then`\n+  --> $DIR/unnecessary_lazy_eval.rs:46:13\n+   |\n+LL |     let _ = cond.then(|| astronomers_pi);\n+   |             ^^^^^-----------------------\n+   |                  |\n+   |                  help: use `then_some(..)` instead: `then_some(astronomers_pi)`\n+\n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:47:13\n+  --> $DIR/unnecessary_lazy_eval.rs:49:13\n    |\n LL |     let _ = Some(10).unwrap_or_else(|| 2);\n    |             ^^^^^^^^^--------------------\n    |                      |\n    |                      help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:48:13\n+  --> $DIR/unnecessary_lazy_eval.rs:50:13\n    |\n LL |     let _ = Some(10).and_then(|_| ext_opt);\n    |             ^^^^^^^^^---------------------\n    |                      |\n    |                      help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:49:28\n+  --> $DIR/unnecessary_lazy_eval.rs:51:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| ext_opt);\n    |                            ^^^^^-------------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:50:13\n+  --> $DIR/unnecessary_lazy_eval.rs:52:13\n    |\n LL |     let _ = None.get_or_insert_with(|| 2);\n    |             ^^^^^------------------------\n    |                  |\n    |                  help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:51:35\n+  --> $DIR/unnecessary_lazy_eval.rs:53:35\n    |\n LL |     let _: Result<usize, usize> = None.ok_or_else(|| 2);\n    |                                   ^^^^^----------------\n    |                                        |\n    |                                        help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:52:28\n+  --> $DIR/unnecessary_lazy_eval.rs:54:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| None);\n    |                            ^^^^^----------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:55:13\n+  --> $DIR/unnecessary_lazy_eval.rs:57:13\n    |\n LL |     let _ = deep.0.unwrap_or_else(|| 2);\n    |             ^^^^^^^--------------------\n    |                    |\n    |                    help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:56:13\n+  --> $DIR/unnecessary_lazy_eval.rs:58:13\n    |\n LL |     let _ = deep.0.and_then(|_| ext_opt);\n    |             ^^^^^^^---------------------\n    |                    |\n    |                    help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:57:13\n+  --> $DIR/unnecessary_lazy_eval.rs:59:13\n    |\n LL |     let _ = deep.0.or_else(|| None);\n    |             ^^^^^^^----------------\n    |                    |\n    |                    help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:58:13\n+  --> $DIR/unnecessary_lazy_eval.rs:60:13\n    |\n LL |     let _ = deep.0.get_or_insert_with(|| 2);\n    |             ^^^^^^^------------------------\n    |                    |\n    |                    help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:59:13\n+  --> $DIR/unnecessary_lazy_eval.rs:61:13\n    |\n LL |     let _ = deep.0.ok_or_else(|| 2);\n    |             ^^^^^^^----------------\n    |                    |\n    |                    help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:79:28\n+  --> $DIR/unnecessary_lazy_eval.rs:81:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| Some(3));\n    |                            ^^^^^-------------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:80:13\n+  --> $DIR/unnecessary_lazy_eval.rs:82:13\n    |\n LL |     let _ = deep.0.or_else(|| Some(3));\n    |             ^^^^^^^-------------------\n    |                    |\n    |                    help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:81:13\n+  --> $DIR/unnecessary_lazy_eval.rs:83:13\n    |\n LL |     let _ = opt.or_else(|| Some(3));\n    |             ^^^^-------------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:87:13\n+  --> $DIR/unnecessary_lazy_eval.rs:89:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| 2);\n    |             ^^^^^---------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:88:13\n+  --> $DIR/unnecessary_lazy_eval.rs:90:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| astronomers_pi);\n    |             ^^^^^----------------------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:89:13\n+  --> $DIR/unnecessary_lazy_eval.rs:91:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| ext_str.some_field);\n    |             ^^^^^--------------------------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:111:35\n+  --> $DIR/unnecessary_lazy_eval.rs:113:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(2));\n    |                                   ^^^^--------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:112:35\n+  --> $DIR/unnecessary_lazy_eval.rs:114:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(astronomers_pi));\n    |                                   ^^^^---------------------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:113:35\n+  --> $DIR/unnecessary_lazy_eval.rs:115:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(ext_str.some_field));\n    |                                   ^^^^-------------------------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(ext_str.some_field))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:115:35\n+  --> $DIR/unnecessary_lazy_eval.rs:117:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(2));\n    |                                   ^^^^------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:116:35\n+  --> $DIR/unnecessary_lazy_eval.rs:118:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(astronomers_pi));\n    |                                   ^^^^-------------------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:117:35\n+  --> $DIR/unnecessary_lazy_eval.rs:119:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(ext_str.some_field));\n    |                                   ^^^^-----------------------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(ext_str.some_field))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:118:35\n+  --> $DIR/unnecessary_lazy_eval.rs:120:35\n    |\n LL |       let _: Result<usize, usize> = res.\n    |  ___________________________________^\n@@ -271,5 +279,5 @@ LL | |         or_else(|_| Ok(ext_str.some_field));\n    |           |\n    |           help: use `or(..)` instead: `or(Ok(ext_str.some_field))`\n \n-error: aborting due to 33 previous errors\n+error: aborting due to 34 previous errors\n "}, {"sha": "c57c46736342b6814b1bb919126521ae516ca28f", "filename": "src/tools/clippy/tests/ui/while_let_on_iterator.fixed", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -7,7 +7,8 @@\n     unused_mut,\n     dead_code,\n     clippy::equatable_if_let,\n-    clippy::manual_find\n+    clippy::manual_find,\n+    clippy::redundant_closure_call\n )]\n \n fn base() {\n@@ -259,7 +260,7 @@ fn issue1924() {\n         fn f(&mut self) -> Option<u32> {\n             // Used as a field.\n             for i in self.0.by_ref() {\n-                if !(3..=7).contains(&i) {\n+                if !(3..8).contains(&i) {\n                     return Some(i);\n                 }\n             }\n@@ -403,6 +404,47 @@ fn issue_8113() {\n     }\n }\n \n+fn fn_once_closure() {\n+    let mut it = 0..10;\n+    (|| {\n+        for x in it {\n+            if x % 2 == 0 {\n+                break;\n+            }\n+        }\n+    })();\n+\n+    fn f(_: impl FnOnce()) {}\n+    let mut it = 0..10;\n+    f(|| {\n+        for x in it {\n+            if x % 2 == 0 {\n+                break;\n+            }\n+        }\n+    });\n+\n+    fn f2(_: impl FnMut()) {}\n+    let mut it = 0..10;\n+    f2(|| {\n+        for x in it.by_ref() {\n+            if x % 2 == 0 {\n+                break;\n+            }\n+        }\n+    });\n+\n+    fn f3(_: fn()) {}\n+    f3(|| {\n+        let mut it = 0..10;\n+        for x in it {\n+            if x % 2 == 0 {\n+                break;\n+            }\n+        }\n+    })\n+}\n+\n fn main() {\n     let mut it = 0..20;\n     for _ in it {"}, {"sha": "8b9a2dbcce3a7c62149ad36a72137281ce61ca53", "filename": "src/tools/clippy/tests/ui/while_let_on_iterator.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -7,7 +7,8 @@\n     unused_mut,\n     dead_code,\n     clippy::equatable_if_let,\n-    clippy::manual_find\n+    clippy::manual_find,\n+    clippy::redundant_closure_call\n )]\n \n fn base() {\n@@ -259,7 +260,7 @@ fn issue1924() {\n         fn f(&mut self) -> Option<u32> {\n             // Used as a field.\n             while let Some(i) = self.0.next() {\n-                if i < 3 || i > 7 {\n+                if !(3..8).contains(&i) {\n                     return Some(i);\n                 }\n             }\n@@ -403,6 +404,47 @@ fn issue_8113() {\n     }\n }\n \n+fn fn_once_closure() {\n+    let mut it = 0..10;\n+    (|| {\n+        while let Some(x) = it.next() {\n+            if x % 2 == 0 {\n+                break;\n+            }\n+        }\n+    })();\n+\n+    fn f(_: impl FnOnce()) {}\n+    let mut it = 0..10;\n+    f(|| {\n+        while let Some(x) = it.next() {\n+            if x % 2 == 0 {\n+                break;\n+            }\n+        }\n+    });\n+\n+    fn f2(_: impl FnMut()) {}\n+    let mut it = 0..10;\n+    f2(|| {\n+        while let Some(x) = it.next() {\n+            if x % 2 == 0 {\n+                break;\n+            }\n+        }\n+    });\n+\n+    fn f3(_: fn()) {}\n+    f3(|| {\n+        let mut it = 0..10;\n+        while let Some(x) = it.next() {\n+            if x % 2 == 0 {\n+                break;\n+            }\n+        }\n+    })\n+}\n+\n fn main() {\n     let mut it = 0..20;\n     while let Some(..) = it.next() {"}, {"sha": "3236765e1db0faa069607cd734d99a4c2db548d6", "filename": "src/tools/clippy/tests/ui/while_let_on_iterator.stderr", "status": "modified", "additions": 47, "deletions": 31, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwhile_let_on_iterator.stderr?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -1,144 +1,160 @@\n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:15:5\n+  --> $DIR/while_let_on_iterator.rs:16:5\n    |\n LL |     while let Option::Some(x) = iter.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n    |\n    = note: `-D clippy::while-let-on-iterator` implied by `-D warnings`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:20:5\n+  --> $DIR/while_let_on_iterator.rs:21:5\n    |\n LL |     while let Some(x) = iter.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:25:5\n+  --> $DIR/while_let_on_iterator.rs:26:5\n    |\n LL |     while let Some(_) = iter.next() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:101:9\n+  --> $DIR/while_let_on_iterator.rs:102:9\n    |\n LL |         while let Some([..]) = it.next() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for [..] in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:108:9\n+  --> $DIR/while_let_on_iterator.rs:109:9\n    |\n LL |         while let Some([_x]) = it.next() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for [_x] in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:121:9\n+  --> $DIR/while_let_on_iterator.rs:122:9\n    |\n LL |         while let Some(x @ [_]) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x @ [_] in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:141:9\n+  --> $DIR/while_let_on_iterator.rs:142:9\n    |\n LL |         while let Some(_) = y.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in y`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:198:9\n+  --> $DIR/while_let_on_iterator.rs:199:9\n    |\n LL |         while let Some(m) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:209:5\n+  --> $DIR/while_let_on_iterator.rs:210:5\n    |\n LL |     while let Some(n) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for n in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:211:9\n+  --> $DIR/while_let_on_iterator.rs:212:9\n    |\n LL |         while let Some(m) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:220:9\n+  --> $DIR/while_let_on_iterator.rs:221:9\n    |\n LL |         while let Some(m) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:229:9\n+  --> $DIR/while_let_on_iterator.rs:230:9\n    |\n LL |         while let Some(m) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:246:9\n+  --> $DIR/while_let_on_iterator.rs:247:9\n    |\n LL |         while let Some(m) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:261:13\n+  --> $DIR/while_let_on_iterator.rs:262:13\n    |\n LL |             while let Some(i) = self.0.next() {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for i in self.0.by_ref()`\n \n-error: manual `!RangeInclusive::contains` implementation\n-  --> $DIR/while_let_on_iterator.rs:262:20\n-   |\n-LL |                 if i < 3 || i > 7 {\n-   |                    ^^^^^^^^^^^^^^ help: use: `!(3..=7).contains(&i)`\n-   |\n-   = note: `-D clippy::manual-range-contains` implied by `-D warnings`\n-\n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:293:13\n+  --> $DIR/while_let_on_iterator.rs:294:13\n    |\n LL |             while let Some(i) = self.0.0.0.next() {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for i in self.0.0.0.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:322:5\n+  --> $DIR/while_let_on_iterator.rs:323:5\n    |\n LL |     while let Some(n) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for n in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:334:9\n+  --> $DIR/while_let_on_iterator.rs:335:9\n    |\n LL |         while let Some(x) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:348:5\n+  --> $DIR/while_let_on_iterator.rs:349:5\n    |\n LL |     while let Some(x) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:359:5\n+  --> $DIR/while_let_on_iterator.rs:360:5\n    |\n LL |     while let Some(x) = it.0.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it.0.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:394:5\n+  --> $DIR/while_let_on_iterator.rs:395:5\n    |\n LL |     while let Some(x) = s.x.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in s.x.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:401:5\n+  --> $DIR/while_let_on_iterator.rs:402:5\n    |\n LL |     while let Some(x) = x[0].next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in x[0].by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:408:5\n+  --> $DIR/while_let_on_iterator.rs:410:9\n+   |\n+LL |         while let Some(x) = it.next() {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:420:9\n+   |\n+LL |         while let Some(x) = it.next() {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:430:9\n+   |\n+LL |         while let Some(x) = it.next() {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it.by_ref()`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:440:9\n+   |\n+LL |         while let Some(x) = it.next() {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:450:5\n    |\n LL |     while let Some(..) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in it`\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 26 previous errors\n "}, {"sha": "ef55f1c31a88bef188aba44728b4e9bdda0f890f", "filename": "src/tools/clippy/tests/ui/wildcard_imports.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports.fixed?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -199,7 +199,7 @@ mod super_imports {\n         }\n     }\n \n-    mod should_be_replaced_futher_inside {\n+    mod should_be_replaced_further_inside {\n         fn insidefoo() {}\n         mod inner {\n             use super::insidefoo;"}, {"sha": "b81285142069b0e5d14557805ec8211ca5a4cff2", "filename": "src/tools/clippy/tests/ui/wildcard_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports.rs?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -200,7 +200,7 @@ mod super_imports {\n         }\n     }\n \n-    mod should_be_replaced_futher_inside {\n+    mod should_be_replaced_further_inside {\n         fn insidefoo() {}\n         mod inner {\n             use super::*;"}, {"sha": "ab98f9b4154ac0e78f3375090d0d08a3f77c5954", "filename": "src/tools/clippy/util/etc/vscode-tasks.json", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Futil%2Fetc%2Fvscode-tasks.json", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Futil%2Fetc%2Fvscode-tasks.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Futil%2Fetc%2Fvscode-tasks.json?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -8,50 +8,50 @@\n             \"problemMatcher\": [],\n             \"group\": {\n                 \"kind\": \"build\",\n-                \"isDefault\": true,\n-            },\n+                \"isDefault\": true\n+            }\n         },\n         {\n             \"label\": \"cargo dev fmt\",\n             \"type\": \"shell\",\n             \"command\": \"cargo dev fmt\",\n             \"problemMatcher\": [],\n-            \"group\": \"none\",\n+            \"group\": \"none\"\n         },\n         {\n             \"label\": \"cargo uitest\",\n             \"type\": \"shell\",\n             \"command\": \"cargo uitest\",\n             \"options\": {\n                 \"env\": {\n-                    \"RUST_BACKTRACE\": \"1\",\n                     // This task will usually execute all UI tests inside `tests/ui` you can\n                     // optionally uncomment the line below and only run a specific test.\n                     //\n-                    // See: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md#testing\n+                    // See: https://github.com/rust-lang/rust-clippy/blob/master/book/src/development/adding_lints.md#testing\n                     //\n                     // \"TESTNAME\": \"<TODO>\",\n-                },\n+                    \"RUST_BACKTRACE\": \"1\"\n+                }\n             },\n             \"problemMatcher\": [],\n             \"group\": {\n                 \"kind\": \"test\",\n-                \"isDefault\": true,\n+                \"isDefault\": true\n             }\n         },\n         {\n             \"label\": \"cargo test\",\n             \"type\": \"shell\",\n             \"command\": \"cargo test\",\n             \"problemMatcher\": [],\n-            \"group\": \"test\",\n+            \"group\": \"test\"\n         },\n         {\n             \"label\": \"cargo dev bless\",\n             \"type\": \"shell\",\n             \"command\": \"cargo dev bless\",\n             \"problemMatcher\": [],\n-            \"group\": \"none\",\n-        },\n-    ],\n+            \"group\": \"none\"\n+        }\n+    ]\n }"}, {"sha": "c5d602ea3035f7e0a93a79df3bb715084681141c", "filename": "src/tools/clippy/util/gh-pages/index.html", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Findex.html?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -15,7 +15,8 @@\n     <title>Clippy Lints</title>\n \n     <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css\"/>\n-    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/styles/github.min.css\"/>\n+    <link id=\"githubLightHighlight\" rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/styles/github.min.css\" disabled=\"true\" />\n+    <link id=\"githubDarkHighlight\" rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/styles/github-dark.min.css\" disabled=\"true\" />\n \n     <!-- The files are not copied over into the Clippy project since they use the MPL-2.0 License -->\n     <link rel=\"stylesheet\" href=\"https://rust-lang.github.io/mdBook/css/variables.css\"/>\n@@ -561,8 +562,8 @@ <h2 class=\"panel-title\">\n     </a>\n \n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/markdown-it/12.3.2/markdown-it.min.js\"></script>\n-    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/highlight.min.js\"></script>\n-    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/languages/rust.min.js\"></script>\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/highlight.min.js\"></script>\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/languages/rust.min.js\"></script>\n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.12/angular.min.js\"></script>\n     <script src=\"script.js\"></script>\n </body>"}, {"sha": "366e7c8843f229507b1c3f3a4949d2939bd651a9", "filename": "src/tools/clippy/util/gh-pages/script.js", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Fscript.js", "raw_url": "https://github.com/rust-lang/rust/raw/7fab8a4016e083d43e181b6da71d6a45ac7e7d3b/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Fscript.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Fscript.js?ref=7fab8a4016e083d43e181b6da71d6a45ac7e7d3b", "patch": "@@ -7,7 +7,7 @@\n             if (lang && hljs.getLanguage(lang)) {\n                 try {\n                     return '<pre class=\"hljs\"><code>' +\n-                        hljs.highlight(lang, str, true).value +\n+                        hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n                         '</code></pre>';\n                 } catch (__) {}\n             }\n@@ -365,6 +365,9 @@ function setTheme(theme, store) {\n \n     document.getElementsByTagName(\"body\")[0].className = theme;\n \n+    document.getElementById(\"githubLightHighlight\").disabled = enableNight || !enableHighlight;\n+    document.getElementById(\"githubDarkHighlight\").disabled = !enableNight && !enableAyu;\n+\n     document.getElementById(\"styleHighlight\").disabled = !enableHighlight;\n     document.getElementById(\"styleNight\").disabled = !enableNight;\n     document.getElementById(\"styleAyu\").disabled = !enableAyu;"}]}