{"sha": "72d48b08fb88624c1e91341b0cd47a9bd0c1d5ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZDQ4YjA4ZmI4ODYyNGMxZTkxMzQxYjBjZDQ3YTliZDBjMWQ1ZmY=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-01-12T18:00:58Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-01-12T18:00:58Z"}, "message": "Move `CargoTargetSpec` and friends to cargo_target_spec module", "tree": {"sha": "d263a20db762e3d4eded0c8ca5e4bd0fca03ed06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d263a20db762e3d4eded0c8ca5e4bd0fca03ed06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72d48b08fb88624c1e91341b0cd47a9bd0c1d5ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72d48b08fb88624c1e91341b0cd47a9bd0c1d5ff", "html_url": "https://github.com/rust-lang/rust/commit/72d48b08fb88624c1e91341b0cd47a9bd0c1d5ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72d48b08fb88624c1e91341b0cd47a9bd0c1d5ff/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faf003763516074c619cee7e43ca8bc365540c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/faf003763516074c619cee7e43ca8bc365540c92", "html_url": "https://github.com/rust-lang/rust/commit/faf003763516074c619cee7e43ca8bc365540c92"}], "stats": {"total": 192, "additions": 102, "deletions": 90}, "files": [{"sha": "a66f14b821005916a5160e06c6d98ebe22b213ee", "filename": "crates/ra_lsp_server/src/cargo_target_spec.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/72d48b08fb88624c1e91341b0cd47a9bd0c1d5ff/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d48b08fb88624c1e91341b0cd47a9bd0c1d5ff/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs?ref=72d48b08fb88624c1e91341b0cd47a9bd0c1d5ff", "patch": "@@ -0,0 +1,100 @@\n+use crate::{\n+    project_model::TargetKind,\n+    server_world::ServerWorld,\n+    Result\n+};\n+\n+use ra_ide_api::{FileId, RunnableKind};\n+\n+pub(crate) fn runnable_args(\n+    world: &ServerWorld,\n+    file_id: FileId,\n+    kind: &RunnableKind,\n+) -> Result<Vec<String>> {\n+    let spec = CargoTargetSpec::for_file(world, file_id)?;\n+    let mut res = Vec::new();\n+    match kind {\n+        RunnableKind::Test { name } => {\n+            res.push(\"test\".to_string());\n+            if let Some(spec) = spec {\n+                spec.push_to(&mut res);\n+            }\n+            res.push(\"--\".to_string());\n+            res.push(name.to_string());\n+            res.push(\"--nocapture\".to_string());\n+        }\n+        RunnableKind::TestMod { path } => {\n+            res.push(\"test\".to_string());\n+            if let Some(spec) = spec {\n+                spec.push_to(&mut res);\n+            }\n+            res.push(\"--\".to_string());\n+            res.push(path.to_string());\n+            res.push(\"--nocapture\".to_string());\n+        }\n+        RunnableKind::Bin => {\n+            res.push(\"run\".to_string());\n+            if let Some(spec) = spec {\n+                spec.push_to(&mut res);\n+            }\n+        }\n+    }\n+    Ok(res)\n+}\n+\n+pub struct CargoTargetSpec {\n+    pub package: String,\n+    pub target: String,\n+    pub target_kind: TargetKind,\n+}\n+\n+impl CargoTargetSpec {\n+    pub fn for_file(world: &ServerWorld, file_id: FileId) -> Result<Option<CargoTargetSpec>> {\n+        let &crate_id = match world.analysis().crate_for(file_id)?.first() {\n+            Some(crate_id) => crate_id,\n+            None => return Ok(None),\n+        };\n+        let file_id = world.analysis().crate_root(crate_id)?;\n+        let path = world\n+            .vfs\n+            .read()\n+            .file2path(ra_vfs::VfsFile(file_id.0.into()));\n+        let res = world.workspaces.iter().find_map(|ws| {\n+            let tgt = ws.cargo.target_by_root(&path)?;\n+            let res = CargoTargetSpec {\n+                package: tgt.package(&ws.cargo).name(&ws.cargo).to_string(),\n+                target: tgt.name(&ws.cargo).to_string(),\n+                target_kind: tgt.kind(&ws.cargo),\n+            };\n+            Some(res)\n+        });\n+        Ok(res)\n+    }\n+\n+    pub fn push_to(self, buf: &mut Vec<String>) {\n+        buf.push(\"--package\".to_string());\n+        buf.push(self.package);\n+        match self.target_kind {\n+            TargetKind::Bin => {\n+                buf.push(\"--bin\".to_string());\n+                buf.push(self.target);\n+            }\n+            TargetKind::Test => {\n+                buf.push(\"--test\".to_string());\n+                buf.push(self.target);\n+            }\n+            TargetKind::Bench => {\n+                buf.push(\"--bench\".to_string());\n+                buf.push(self.target);\n+            }\n+            TargetKind::Example => {\n+                buf.push(\"--example\".to_string());\n+                buf.push(self.target);\n+            }\n+            TargetKind::Lib => {\n+                buf.push(\"--lib\".to_string());\n+            }\n+            TargetKind::Other => (),\n+        }\n+    }\n+}"}, {"sha": "f93d4b37d9dd7f007f990672453f73cc52a3be29", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d48b08fb88624c1e91341b0cd47a9bd0c1d5ff/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d48b08fb88624c1e91341b0cd47a9bd0c1d5ff/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=72d48b08fb88624c1e91341b0cd47a9bd0c1d5ff", "patch": "@@ -1,4 +1,5 @@\n mod caps;\n+mod cargo_target_spec;\n mod conv;\n mod main_loop;\n mod project_model;"}, {"sha": "7f6146b6c31bfbd0c63862254be85ef6644193b6", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 90, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/72d48b08fb88624c1e91341b0cd47a9bd0c1d5ff/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d48b08fb88624c1e91341b0cd47a9bd0c1d5ff/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=72d48b08fb88624c1e91341b0cd47a9bd0c1d5ff", "patch": "@@ -17,8 +17,8 @@ use serde_json::to_value;\n use std::io::Write;\n \n use crate::{\n+    cargo_target_spec::{CargoTargetSpec, runnable_args},\n     conv::{to_location, to_location_link, Conv, ConvWith, MapConvWith, TryConvWith},\n-    project_model::TargetKind,\n     req::{self, Decoration},\n     server_world::ServerWorld,\n     LspError, Result,\n@@ -293,95 +293,6 @@ pub fn handle_runnables(\n     return Ok(res);\n }\n \n-fn runnable_args(world: &ServerWorld, file_id: FileId, kind: &RunnableKind) -> Result<Vec<String>> {\n-    let spec = CargoTargetSpec::for_file(world, file_id)?;\n-    let mut res = Vec::new();\n-    match kind {\n-        RunnableKind::Test { name } => {\n-            res.push(\"test\".to_string());\n-            if let Some(spec) = spec {\n-                spec.push_to(&mut res);\n-            }\n-            res.push(\"--\".to_string());\n-            res.push(name.to_string());\n-            res.push(\"--nocapture\".to_string());\n-        }\n-        RunnableKind::TestMod { path } => {\n-            res.push(\"test\".to_string());\n-            if let Some(spec) = spec {\n-                spec.push_to(&mut res);\n-            }\n-            res.push(\"--\".to_string());\n-            res.push(path.to_string());\n-            res.push(\"--nocapture\".to_string());\n-        }\n-        RunnableKind::Bin => {\n-            res.push(\"run\".to_string());\n-            if let Some(spec) = spec {\n-                spec.push_to(&mut res);\n-            }\n-        }\n-    }\n-    Ok(res)\n-}\n-\n-struct CargoTargetSpec {\n-    package: String,\n-    target: String,\n-    target_kind: TargetKind,\n-}\n-\n-impl CargoTargetSpec {\n-    fn for_file(world: &ServerWorld, file_id: FileId) -> Result<Option<CargoTargetSpec>> {\n-        let &crate_id = match world.analysis().crate_for(file_id)?.first() {\n-            Some(crate_id) => crate_id,\n-            None => return Ok(None),\n-        };\n-        let file_id = world.analysis().crate_root(crate_id)?;\n-        let path = world\n-            .vfs\n-            .read()\n-            .file2path(ra_vfs::VfsFile(file_id.0.into()));\n-        let res = world.workspaces.iter().find_map(|ws| {\n-            let tgt = ws.cargo.target_by_root(&path)?;\n-            let res = CargoTargetSpec {\n-                package: tgt.package(&ws.cargo).name(&ws.cargo).to_string(),\n-                target: tgt.name(&ws.cargo).to_string(),\n-                target_kind: tgt.kind(&ws.cargo),\n-            };\n-            Some(res)\n-        });\n-        Ok(res)\n-    }\n-\n-    fn push_to(self, buf: &mut Vec<String>) {\n-        buf.push(\"--package\".to_string());\n-        buf.push(self.package);\n-        match self.target_kind {\n-            TargetKind::Bin => {\n-                buf.push(\"--bin\".to_string());\n-                buf.push(self.target);\n-            }\n-            TargetKind::Test => {\n-                buf.push(\"--test\".to_string());\n-                buf.push(self.target);\n-            }\n-            TargetKind::Bench => {\n-                buf.push(\"--bench\".to_string());\n-                buf.push(self.target);\n-            }\n-            TargetKind::Example => {\n-                buf.push(\"--example\".to_string());\n-                buf.push(self.target);\n-            }\n-            TargetKind::Lib => {\n-                buf.push(\"--lib\".to_string());\n-            }\n-            TargetKind::Other => (),\n-        }\n-    }\n-}\n-\n pub fn handle_decorations(\n     world: ServerWorld,\n     params: TextDocumentIdentifier,"}]}