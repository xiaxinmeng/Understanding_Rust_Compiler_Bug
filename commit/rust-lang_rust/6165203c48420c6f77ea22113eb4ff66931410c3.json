{"sha": "6165203c48420c6f77ea22113eb4ff66931410c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNjUyMDNjNDg0MjBjNmY3N2VhMjIxMTNlYjRmZjY2OTMxNDEwYzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-03T06:13:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-03T06:13:05Z"}, "message": "Auto merge of #42400 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 5 pull requests\n\n- Successful merges: #42353, #42354, #42363, #42368, #42382\n- Failed merges:", "tree": {"sha": "01bb0a02dc10f628e6f4de28c09c057ed8e22a1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01bb0a02dc10f628e6f4de28c09c057ed8e22a1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6165203c48420c6f77ea22113eb4ff66931410c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6165203c48420c6f77ea22113eb4ff66931410c3", "html_url": "https://github.com/rust-lang/rust/commit/6165203c48420c6f77ea22113eb4ff66931410c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6165203c48420c6f77ea22113eb4ff66931410c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14526a37449e5943bf582990979d9d87afc5ec86", "url": "https://api.github.com/repos/rust-lang/rust/commits/14526a37449e5943bf582990979d9d87afc5ec86", "html_url": "https://github.com/rust-lang/rust/commit/14526a37449e5943bf582990979d9d87afc5ec86"}, {"sha": "468350003656950d476a70e052b02ca744df921b", "url": "https://api.github.com/repos/rust-lang/rust/commits/468350003656950d476a70e052b02ca744df921b", "html_url": "https://github.com/rust-lang/rust/commit/468350003656950d476a70e052b02ca744df921b"}], "stats": {"total": 208, "additions": 160, "deletions": 48}, "files": [{"sha": "d048645d4d5303fe60283178a4dff7aaed559482", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -232,12 +232,6 @@ fn main() {\n             if let Some(rpath) = rpath {\n                 cmd.arg(\"-C\").arg(format!(\"link-args={}\", rpath));\n             }\n-\n-            if let Ok(s) = env::var(\"RUSTFLAGS\") {\n-                for flag in s.split_whitespace() {\n-                    cmd.arg(flag);\n-                }\n-            }\n         }\n \n         if target.contains(\"pc-windows-msvc\") {"}, {"sha": "5483b6a914b29a3bdd9fde93c02f99e57a03e437", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -58,6 +58,28 @@ impl fmt::Display for TestKind {\n     }\n }\n \n+fn try_run(build: &Build, cmd: &mut Command) {\n+    if build.flags.cmd.no_fail_fast() {\n+        if !build.try_run(cmd) {\n+            let failures = build.delayed_failures.get();\n+            build.delayed_failures.set(failures + 1);\n+        }\n+    } else {\n+        build.run(cmd);\n+    }\n+}\n+\n+fn try_run_quiet(build: &Build, cmd: &mut Command) {\n+    if build.flags.cmd.no_fail_fast() {\n+        if !build.try_run_quiet(cmd) {\n+            let failures = build.delayed_failures.get();\n+            build.delayed_failures.set(failures + 1);\n+        }\n+    } else {\n+        build.run_quiet(cmd);\n+    }\n+}\n+\n /// Runs the `linkchecker` tool as compiled in `stage` by the `host` compiler.\n ///\n /// This tool in `src/tools` will verify the validity of all our links in the\n@@ -67,8 +89,8 @@ pub fn linkcheck(build: &Build, host: &str) {\n     let compiler = Compiler::new(0, host);\n \n     let _time = util::timeit();\n-    build.run(build.tool_cmd(&compiler, \"linkchecker\")\n-                   .arg(build.out.join(host).join(\"doc\")));\n+    try_run(build, build.tool_cmd(&compiler, \"linkchecker\")\n+                        .arg(build.out.join(host).join(\"doc\")));\n }\n \n /// Runs the `cargotest` tool as compiled in `stage` by the `host` compiler.\n@@ -87,10 +109,10 @@ pub fn cargotest(build: &Build, stage: u32, host: &str) {\n     let _time = util::timeit();\n     let mut cmd = Command::new(build.tool(&Compiler::new(0, host), \"cargotest\"));\n     build.prepare_tool_cmd(compiler, &mut cmd);\n-    build.run(cmd.arg(&build.cargo)\n-                 .arg(&out_dir)\n-                 .env(\"RUSTC\", build.compiler_path(compiler))\n-                 .env(\"RUSTDOC\", build.rustdoc(compiler)))\n+    try_run(build, cmd.arg(&build.cargo)\n+                      .arg(&out_dir)\n+                      .env(\"RUSTC\", build.compiler_path(compiler))\n+                      .env(\"RUSTDOC\", build.rustdoc(compiler)));\n }\n \n /// Runs `cargo test` for `cargo` packaged with Rust.\n@@ -107,6 +129,9 @@ pub fn cargo(build: &Build, stage: u32, host: &str) {\n \n     let mut cargo = build.cargo(compiler, Mode::Tool, host, \"test\");\n     cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/cargo/Cargo.toml\"));\n+    if build.flags.cmd.no_fail_fast() {\n+        cargo.arg(\"--no-fail-fast\");\n+    }\n \n     // Don't build tests dynamically, just a pain to work with\n     cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n@@ -115,7 +140,7 @@ pub fn cargo(build: &Build, stage: u32, host: &str) {\n     // available.\n     cargo.env(\"CFG_DISABLE_CROSS_TESTS\", \"1\");\n \n-    build.run(cargo.env(\"PATH\", newpath));\n+    try_run(build, cargo.env(\"PATH\", newpath));\n }\n \n /// Runs the `tidy` tool as compiled in `stage` by the `host` compiler.\n@@ -135,7 +160,7 @@ pub fn tidy(build: &Build, host: &str) {\n     if build.config.quiet_tests {\n         cmd.arg(\"--quiet\");\n     }\n-    build.run(&mut cmd);\n+    try_run(build, &mut cmd);\n }\n \n fn testdir(build: &Build, host: &str) -> PathBuf {\n@@ -286,7 +311,7 @@ pub fn compiletest(build: &Build,\n     build.ci_env.force_coloring_in_ci(&mut cmd);\n \n     let _time = util::timeit();\n-    build.run(&mut cmd);\n+    try_run(build, &mut cmd);\n }\n \n /// Run `rustdoc --test` for all documentation in `src/doc`.\n@@ -362,9 +387,9 @@ fn markdown_test(build: &Build, compiler: &Compiler, markdown: &Path) {\n     cmd.arg(\"--test-args\").arg(test_args);\n \n     if build.config.quiet_tests {\n-        build.run_quiet(&mut cmd);\n+        try_run_quiet(build, &mut cmd);\n     } else {\n-        build.run(&mut cmd);\n+        try_run(build, &mut cmd);\n     }\n }\n \n@@ -419,6 +444,9 @@ pub fn krate(build: &Build,\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(path).join(\"Cargo.toml\"))\n          .arg(\"--features\").arg(features);\n+    if test_kind.subcommand() == \"test\" && build.flags.cmd.no_fail_fast() {\n+        cargo.arg(\"--no-fail-fast\");\n+    }\n \n     match krate {\n         Some(krate) => {\n@@ -478,7 +506,7 @@ pub fn krate(build: &Build,\n         krate_remote(build, &compiler, target, mode);\n     } else {\n         cargo.args(&build.flags.cmd.test_args());\n-        build.run(&mut cargo);\n+        try_run(build, &mut cargo);\n     }\n }\n \n@@ -499,7 +527,7 @@ fn krate_emscripten(build: &Build,\n         if build.config.quiet_tests {\n             cmd.arg(\"--quiet\");\n         }\n-        build.run(&mut cmd);\n+        try_run(build, &mut cmd);\n     }\n }\n \n@@ -521,7 +549,7 @@ fn krate_remote(build: &Build,\n             cmd.arg(\"--quiet\");\n         }\n         cmd.args(&build.flags.cmd.test_args());\n-        build.run(&mut cmd);\n+        try_run(build, &mut cmd);\n     }\n }\n \n@@ -637,6 +665,9 @@ pub fn bootstrap(build: &Build) {\n        .current_dir(build.src.join(\"src/bootstrap\"))\n        .env(\"CARGO_TARGET_DIR\", build.out.join(\"bootstrap\"))\n        .env(\"RUSTC\", &build.rustc);\n+    if build.flags.cmd.no_fail_fast() {\n+        cmd.arg(\"--no-fail-fast\");\n+    }\n     cmd.arg(\"--\").args(&build.flags.cmd.test_args());\n-    build.run(&mut cmd);\n+    try_run(build, &mut cmd);\n }"}, {"sha": "f100baa5d2ca7181be6fc4f93847ef5a8439b97b", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -61,6 +61,7 @@ pub enum Subcommand {\n     Test {\n         paths: Vec<PathBuf>,\n         test_args: Vec<String>,\n+        no_fail_fast: bool,\n     },\n     Bench {\n         paths: Vec<PathBuf>,\n@@ -141,7 +142,10 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n \n         // Some subcommands get extra options\n         match subcommand.as_str() {\n-            \"test\"  => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n+            \"test\"  => {\n+                opts.optflag(\"\", \"no-fail-fast\", \"Run all tests regardless of failure\");\n+                opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n+            },\n             \"bench\" => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n             _ => { },\n         };\n@@ -263,6 +267,7 @@ Arguments:\n                 Subcommand::Test {\n                     paths: paths,\n                     test_args: matches.opt_strs(\"test-args\"),\n+                    no_fail_fast: matches.opt_present(\"no-fail-fast\"),\n                 }\n             }\n             \"bench\" => {\n@@ -342,6 +347,13 @@ impl Subcommand {\n             _ => Vec::new(),\n         }\n     }\n+\n+    pub fn no_fail_fast(&self) -> bool {\n+        match *self {\n+            Subcommand::Test { no_fail_fast, .. } => no_fail_fast,\n+            _ => false,\n+        }\n+    }\n }\n \n fn split(s: Vec<String>) -> Vec<String> {"}, {"sha": "2fe6a2a3ae89fdd34eb33923581a8c03344117fa", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -79,6 +79,7 @@ extern crate toml;\n #[cfg(unix)]\n extern crate libc;\n \n+use std::cell::Cell;\n use std::cmp;\n use std::collections::HashMap;\n use std::env;\n@@ -88,7 +89,7 @@ use std::io::Read;\n use std::path::{PathBuf, Path};\n use std::process::Command;\n \n-use build_helper::{run_silent, run_suppressed, output, mtime};\n+use build_helper::{run_silent, run_suppressed, try_run_silent, try_run_suppressed, output, mtime};\n \n use util::{exe, libdir, add_lib_path, OutputFolder, CiEnv};\n \n@@ -180,6 +181,7 @@ pub struct Build {\n     is_sudo: bool,\n     src_is_git: bool,\n     ci_env: CiEnv,\n+    delayed_failures: Cell<usize>,\n }\n \n #[derive(Debug)]\n@@ -274,6 +276,7 @@ impl Build {\n             is_sudo: is_sudo,\n             src_is_git: src_is_git,\n             ci_env: CiEnv::current(),\n+            delayed_failures: Cell::new(0),\n         }\n     }\n \n@@ -784,6 +787,22 @@ impl Build {\n         run_suppressed(cmd)\n     }\n \n+    /// Runs a command, printing out nice contextual information if it fails.\n+    /// Exits if the command failed to execute at all, otherwise returns its\n+    /// `status.success()`.\n+    fn try_run(&self, cmd: &mut Command) -> bool {\n+        self.verbose(&format!(\"running: {:?}\", cmd));\n+        try_run_silent(cmd)\n+    }\n+\n+    /// Runs a command, printing out nice contextual information if it fails.\n+    /// Exits if the command failed to execute at all, otherwise returns its\n+    /// `status.success()`.\n+    fn try_run_quiet(&self, cmd: &mut Command) -> bool {\n+        self.verbose(&format!(\"running: {:?}\", cmd));\n+        try_run_suppressed(cmd)\n+    }\n+\n     /// Prints a message if this build is configured in verbose mode.\n     fn verbose(&self, msg: &str) {\n         if self.flags.verbose() || self.config.verbose() {"}, {"sha": "6b9a6347d227299e80ff193b3eb36c5aed48697f", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -184,7 +184,7 @@ pub fn llvm(build: &Build, target: &str) {\n     configure_compilers(&mut cfg);\n \n     if env::var_os(\"SCCACHE_ERROR_LOG\").is_some() {\n-        cfg.env(\"RUST_LOG\", \"sccache=info\");\n+        cfg.env(\"RUST_LOG\", \"sccache=warn\");\n     }\n \n     // FIXME: we don't actually need to build all LLVM tools and all LLVM"}, {"sha": "9e8b08a23b7e96fb0991ffa28a396d880a985529", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -28,6 +28,7 @@\n \n use std::collections::{BTreeMap, HashSet, HashMap};\n use std::mem;\n+use std::process;\n \n use check::{self, TestKind};\n use compile;\n@@ -1174,8 +1175,8 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n         let (kind, paths) = match self.build.flags.cmd {\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n             Subcommand::Doc { ref paths } => (Kind::Doc, &paths[..]),\n-            Subcommand::Test { ref paths, test_args: _ } => (Kind::Test, &paths[..]),\n-            Subcommand::Bench { ref paths, test_args: _ } => (Kind::Bench, &paths[..]),\n+            Subcommand::Test { ref paths, .. } => (Kind::Test, &paths[..]),\n+            Subcommand::Bench { ref paths, .. } => (Kind::Bench, &paths[..]),\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),\n             Subcommand::Install { ref paths } => (Kind::Install, &paths[..]),\n             Subcommand::Clean => panic!(),\n@@ -1268,6 +1269,13 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n             self.build.verbose(&format!(\"executing step {:?}\", step));\n             (self.rules[step.name].run)(step);\n         }\n+\n+        // Check for postponed failures from `test --no-fail-fast`.\n+        let failures = self.build.delayed_failures.get();\n+        if failures > 0 {\n+            println!(\"\\n{} command(s) did not execute successfully.\\n\", failures);\n+            process::exit(1);\n+        }\n     }\n \n     /// From the top level targets `steps` generate a topological ordering of"}, {"sha": "ea6a822e360a49dde2ac0aedac04f7562e9a85d4", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -42,35 +42,49 @@ pub fn run(cmd: &mut Command) {\n }\n \n pub fn run_silent(cmd: &mut Command) {\n+    if !try_run_silent(cmd) {\n+        std::process::exit(1);\n+    }\n+}\n+\n+pub fn try_run_silent(cmd: &mut Command) -> bool {\n     let status = match cmd.status() {\n         Ok(status) => status,\n         Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\",\n                                 cmd, e)),\n     };\n     if !status.success() {\n-        fail(&format!(\"command did not execute successfully: {:?}\\n\\\n-                       expected success, got: {}\",\n-                      cmd,\n-                      status));\n+        println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+                  expected success, got: {}\\n\\n\",\n+                 cmd,\n+                 status);\n     }\n+    status.success()\n }\n \n pub fn run_suppressed(cmd: &mut Command) {\n+    if !try_run_suppressed(cmd) {\n+        std::process::exit(1);\n+    }\n+}\n+\n+pub fn try_run_suppressed(cmd: &mut Command) -> bool {\n     let output = match cmd.output() {\n         Ok(status) => status,\n         Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\",\n                                 cmd, e)),\n     };\n     if !output.status.success() {\n-        fail(&format!(\"command did not execute successfully: {:?}\\n\\\n-                       expected success, got: {}\\n\\n\\\n-                       stdout ----\\n{}\\n\\\n-                       stderr ----\\n{}\\n\",\n-                      cmd,\n-                      output.status,\n-                      String::from_utf8_lossy(&output.stdout),\n-                      String::from_utf8_lossy(&output.stderr)));\n+        println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+                  expected success, got: {}\\n\\n\\\n+                  stdout ----\\n{}\\n\\\n+                  stderr ----\\n{}\\n\\n\",\n+                 cmd,\n+                 output.status,\n+                 String::from_utf8_lossy(&output.stdout),\n+                 String::from_utf8_lossy(&output.stderr));\n     }\n+    output.status.success()\n }\n \n pub fn gnu_target(target: &str) -> String {"}, {"sha": "4f34a7214cbc6763c6ac308b95fb7865378dd8c0", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -79,6 +79,7 @@ exec docker \\\n   --env DEPLOY_ALT=$DEPLOY_ALT \\\n   --env LOCAL_USER_ID=`id -u` \\\n   --env TRAVIS=${TRAVIS-false} \\\n+  --env TRAVIS_BRANCH \\\n   --volume \"$HOME/.cargo:/cargo\" \\\n   --volume \"$HOME/rustsrc:$HOME/rustsrc\" \\\n   --privileged \\"}, {"sha": "549e804603c07b90f14bc223d3605e64559c1c45", "filename": "src/ci/run.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -23,6 +23,10 @@ fi\n ci_dir=`cd $(dirname $0) && pwd`\n source \"$ci_dir/shared.sh\"\n \n+if [ \"$TRAVIS\" == \"true\" ] && [ \"$TRAVIS_BRANCH\" != \"auto\" ]; then\n+    RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-quiet-tests\"\n+fi\n+\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-sccache\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-manage-submodules\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-locked-deps\""}, {"sha": "f746084b099060f55ac5e7d8050797593fcedd6e", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -1 +1 @@\n-Subproject commit 97422981c53a00f7c3d6584d363443117f179fff\n+Subproject commit f746084b099060f55ac5e7d8050797593fcedd6e"}, {"sha": "c0e8c56d76bdf6bd16c64338f81c04d48c60f117", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -1 +1 @@\n-Subproject commit 6fa139b1630a9bb95dcd60cfc90aff9c19e54580\n+Subproject commit c0e8c56d76bdf6bd16c64338f81c04d48c60f117"}, {"sha": "876582e9d0fbdc9cecb03133c28db96e9ff8c844", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -1 +1 @@\n-Subproject commit f7a108dfa9e90b07821700c55d01f08a9adf005c\n+Subproject commit 876582e9d0fbdc9cecb03133c28db96e9ff8c844"}, {"sha": "f820ea4c5e17827e9da683548844bd845d8009ec", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -705,11 +705,9 @@ impl EmitterWriter {\n                 if *sp == DUMMY_SP {\n                     continue;\n                 }\n-                if cm.span_to_filename(sp.clone()).contains(\"macros>\") {\n-                    let v = sp.macro_backtrace();\n-                    if let Some(use_site) = v.last() {\n-                        before_after.push((sp.clone(), use_site.call_site.clone()));\n-                    }\n+                let call_sp = cm.call_span_if_macro(*sp);\n+                if call_sp != *sp {\n+                    before_after.push((sp.clone(), call_sp));\n                 }\n                 for trace in sp.macro_backtrace().iter().rev() {\n                     // Only show macro locations that are local"}, {"sha": "8d5e9e776ed23ec05d8e7e6f77b27dcc7b9a6961", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -102,6 +102,7 @@ pub trait CodeMapper {\n     fn span_to_string(&self, sp: Span) -> String;\n     fn span_to_filename(&self, sp: Span) -> FileName;\n     fn merge_spans(&self, sp_lhs: Span, sp_rhs: Span) -> Option<Span>;\n+    fn call_span_if_macro(&self, sp: Span) -> Span;\n }\n \n impl CodeSuggestion {"}, {"sha": "9ed50dd1e4d4042f4a45e030c3bfbf6a00219a78", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -18,7 +18,7 @@ use syntax_pos::{self, Span};\n use rustc::hir;\n use rustc::hir::def::Def;\n use rustc::ty::{self, Ty, AssociatedItem};\n-use errors::DiagnosticBuilder;\n+use errors::{DiagnosticBuilder, CodeMapper};\n \n use super::method::probe;\n \n@@ -187,7 +187,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                        checked_ty),\n                 };\n                 if self.can_coerce(ref_ty, expected) {\n-                    if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(expr.span) {\n+                    // Use the callsite's span if this is a macro call. #41858\n+                    let sp = self.sess().codemap().call_span_if_macro(expr.span);\n+                    if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(sp) {\n                         return Some(format!(\"try with `{}{}`\",\n                                             match mutability.mutbl {\n                                                 hir::Mutability::MutMutable => \"&mut \","}, {"sha": "830a457df748eeefaaf19b28f9623317d3798511", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -563,6 +563,15 @@ impl CodeMapper for CodeMap {\n     fn merge_spans(&self, sp_lhs: Span, sp_rhs: Span) -> Option<Span> {\n         self.merge_spans(sp_lhs, sp_rhs)\n     }\n+    fn call_span_if_macro(&self, sp: Span) -> Span {\n+        if self.span_to_filename(sp.clone()).contains(\"macros>\") {\n+            let v = sp.macro_backtrace();\n+            if let Some(use_site) = v.last() {\n+                return use_site.call_site;\n+            }\n+        }\n+        sp\n+    }\n }\n \n #[derive(Clone)]"}, {"sha": "32d80069f0087eb23836c5858a6b76a598fb3a56", "filename": "src/test/ui/span/coerce-suggestions.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -43,4 +43,12 @@ fn main() {\n     //~| NOTE cyclic type of infinite size\n     //~| NOTE expected type `_`\n     //~| NOTE found type `Box<_>`\n+\n+    let s = &mut String::new();\n+    s = format!(\"foo\");\n+    //~^ ERROR E0308\n+    //~| NOTE expected mutable reference, found struct `std::string::String`\n+    //~| NOTE expected type `&mut std::string::String`\n+    //~| HELP try with `&mut format!(\"foo\")`\n+    //~| NOTE this error originates in a macro outside of the current crate\n }"}, {"sha": "e3bc64a2cfd416054826d1ab120a790f0f24758f", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6165203c48420c6f77ea22113eb4ff66931410c3/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=6165203c48420c6f77ea22113eb4ff66931410c3", "patch": "@@ -47,5 +47,16 @@ error[E0308]: mismatched types\n    = note: expected type `_`\n               found type `std::boxed::Box<_>`\n \n+error[E0308]: mismatched types\n+  --> $DIR/coerce-suggestions.rs:48:9\n+   |\n+48 |     s = format!(\"foo\");\n+   |         ^^^^^^^^^^^^^^ expected mutable reference, found struct `std::string::String`\n+   |\n+   = note: expected type `&mut std::string::String`\n+              found type `std::string::String`\n+   = help: try with `&mut format!(\"foo\")`\n+   = note: this error originates in a macro outside of the current crate\n+\n error: aborting due to previous error(s)\n "}]}