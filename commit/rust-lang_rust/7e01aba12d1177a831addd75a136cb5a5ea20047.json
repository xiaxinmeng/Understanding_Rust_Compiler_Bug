{"sha": "7e01aba12d1177a831addd75a136cb5a5ea20047", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMDFhYmExMmQxMTc3YTgzMWFkZGQ3NWExMzZjYjVhNWVhMjAwNDc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-26T21:02:48Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-26T21:02:48Z"}, "message": "Declare the memcpy intrinsics properly.", "tree": {"sha": "4955a47e990bb167d2b00959a2ca514a0f448f13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4955a47e990bb167d2b00959a2ca514a0f448f13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e01aba12d1177a831addd75a136cb5a5ea20047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e01aba12d1177a831addd75a136cb5a5ea20047", "html_url": "https://github.com/rust-lang/rust/commit/7e01aba12d1177a831addd75a136cb5a5ea20047", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e01aba12d1177a831addd75a136cb5a5ea20047/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fd3270845a7892cab2bf7ad45a8e03f24d9f9aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd3270845a7892cab2bf7ad45a8e03f24d9f9aa", "html_url": "https://github.com/rust-lang/rust/commit/3fd3270845a7892cab2bf7ad45a8e03f24d9f9aa"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "8aaeba5c734bccabaaf4488ea508f8080e22b37c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7e01aba12d1177a831addd75a136cb5a5ea20047/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e01aba12d1177a831addd75a136cb5a5ea20047/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7e01aba12d1177a831addd75a136cb5a5ea20047", "patch": "@@ -633,14 +633,19 @@ fn build_memcpy(@block_ctxt cx,\n                 ValueRef dst,\n                 ValueRef src,\n                 TypeRef llty) -> result {\n-    check (cx.fcx.ccx.intrinsics.contains_key(\"llvm.memcpy\"));\n-    auto memcpy = cx.fcx.ccx.intrinsics.get(\"llvm.memcpy\");\n+    // FIXME: switch to the 64-bit variant when on such a platform.\n+    check (cx.fcx.ccx.intrinsics.contains_key(\"llvm.memcpy.p0i8.p0i8.i32\"));\n+    auto memcpy = cx.fcx.ccx.intrinsics.get(\"llvm.memcpy.p0i8.p0i8.i32\");\n     auto src_ptr = cx.build.PointerCast(src, T_ptr(T_i8()));\n     auto dst_ptr = cx.build.PointerCast(dst, T_ptr(T_i8()));\n     auto size = cx.build.IntCast(lib.llvm.llvm.LLVMSizeOf(llty),\n                                  T_i32());\n-    auto align = cx.build.IntCast(lib.llvm.llvm.LLVMAlignOf(llty),\n-                                  T_i32());\n+    auto align = cx.build.IntCast(C_int(1), T_i32());\n+\n+    // FIXME: align seems like it should be\n+    //   lib.llvm.llvm.LLVMAlignOf(llty);\n+    // but this makes it upset because it's not a constant.\n+\n     auto volatile = C_integral(0, T_i1());\n     ret res(cx, cx.build.Call(memcpy,\n                               vec(dst_ptr, src_ptr,\n@@ -1670,20 +1675,21 @@ fn trans_main_fn(@crate_ctxt cx, ValueRef llcrate) {\n fn declare_intrinsics(ModuleRef llmod) -> hashmap[str,ValueRef] {\n \n     let vec[TypeRef] T_trap_args = vec();\n-    // FIXME: switch this to 64-bit memcpy when targeting a 64-bit system.\n-    let vec[TypeRef] T_memcpy_args = vec(T_ptr(T_i8()),\n-                                         T_ptr(T_i8()),\n-                                         T_i32(),\n-                                         T_i32(),\n-                                         T_i1());\n+    let vec[TypeRef] T_memcpy32_args = vec(T_ptr(T_i8()), T_ptr(T_i8()),\n+                                           T_i32(), T_i32(), T_i1());\n+    let vec[TypeRef] T_memcpy64_args = vec(T_ptr(T_i8()), T_ptr(T_i8()),\n+                                           T_i32(), T_i32(), T_i1());\n     auto trap = decl_cdecl_fn(llmod, \"llvm.trap\",\n                               T_fn(T_trap_args, T_void()));\n-    auto memcpy = decl_cdecl_fn(llmod, \"llvm.memcpy\",\n-                                T_fn(T_memcpy_args, T_void()));\n+    auto memcpy32 = decl_cdecl_fn(llmod, \"llvm.memcpy.p0i8.p0i8.i32\",\n+                                  T_fn(T_memcpy32_args, T_void()));\n+    auto memcpy64 = decl_cdecl_fn(llmod, \"llvm.memcpy.p0i8.p0i8.i64\",\n+                                  T_fn(T_memcpy64_args, T_void()));\n \n     auto intrinsics = new_str_hash[ValueRef]();\n     intrinsics.insert(\"llvm.trap\", trap);\n-    intrinsics.insert(\"llvm.memcpy\", memcpy);\n+    intrinsics.insert(\"llvm.memcpy.p0i8.p0i8.i32\", memcpy32);\n+    intrinsics.insert(\"llvm.memcpy.p0i8.p0i8.i64\", memcpy64);\n     ret intrinsics;\n }\n "}]}