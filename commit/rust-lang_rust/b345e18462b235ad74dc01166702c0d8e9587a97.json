{"sha": "b345e18462b235ad74dc01166702c0d8e9587a97", "node_id": "C_kwDOAAsO6NoAKGIzNDVlMTg0NjJiMjM1YWQ3NGRjMDExNjY3MDJjMGQ4ZTk1ODdhOTc", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-04T03:43:50Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-13T01:46:18Z"}, "message": "rustdoc: Coalesce some `run_test` args as one `LangString` arg", "tree": {"sha": "5b02c05775904a38132e8a4f311657b87096ec73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b02c05775904a38132e8a4f311657b87096ec73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b345e18462b235ad74dc01166702c0d8e9587a97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b345e18462b235ad74dc01166702c0d8e9587a97", "html_url": "https://github.com/rust-lang/rust/commit/b345e18462b235ad74dc01166702c0d8e9587a97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b345e18462b235ad74dc01166702c0d8e9587a97/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bda5b331cfe7e04e1fe348c58a928fc2b650f4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bda5b331cfe7e04e1fe348c58a928fc2b650f4f", "html_url": "https://github.com/rust-lang/rust/commit/6bda5b331cfe7e04e1fe348c58a928fc2b650f4f"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "67b764cdfd5bfd5ec3444435bb30690ecab09b9c", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b345e18462b235ad74dc01166702c0d8e9587a97/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b345e18462b235ad74dc01166702c0d8e9587a97/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=b345e18462b235ad74dc01166702c0d8e9587a97", "patch": "@@ -293,14 +293,11 @@ fn run_test(\n     crate_name: &str,\n     line: usize,\n     options: Options,\n-    should_panic: bool,\n+    mut lang_string: LangString,\n     no_run: bool,\n-    as_test_harness: bool,\n     runtool: Option<String>,\n     runtool_args: Vec<String>,\n     target: TargetTriple,\n-    compile_fail: bool,\n-    mut error_codes: Vec<String>,\n     opts: &TestOptions,\n     edition: Edition,\n     outdir: DirState,\n@@ -309,7 +306,7 @@ fn run_test(\n     report_unused_externs: impl Fn(UnusedExterns),\n ) -> Result<(), TestFailure> {\n     let (test, line_offset, supports_color) =\n-        make_test(test, Some(crate_name), as_test_harness, opts, edition, Some(test_id));\n+        make_test(test, Some(crate_name), lang_string.test_harness, opts, edition, Some(test_id));\n \n     let output_file = outdir.path().join(\"rust_out\");\n \n@@ -329,10 +326,10 @@ fn run_test(\n     compiler.env(\"UNSTABLE_RUSTDOC_TEST_PATH\", path);\n     compiler.env(\"UNSTABLE_RUSTDOC_TEST_LINE\", format!(\"{}\", line as isize - line_offset as isize));\n     compiler.arg(\"-o\").arg(&output_file);\n-    if as_test_harness {\n+    if lang_string.test_harness {\n         compiler.arg(\"--test\");\n     }\n-    if options.json_unused_externs && !compile_fail {\n+    if options.json_unused_externs && !lang_string.compile_fail {\n         compiler.arg(\"--error-format=json\");\n         compiler.arg(\"--json\").arg(\"unused-externs\");\n         compiler.arg(\"-Z\").arg(\"unstable-options\");\n@@ -351,7 +348,7 @@ fn run_test(\n     for debugging_option_str in &options.debugging_opts_strs {\n         compiler.arg(\"-Z\").arg(&debugging_option_str);\n     }\n-    if no_run && !compile_fail && options.persist_doctests.is_none() {\n+    if no_run && !lang_string.compile_fail && options.persist_doctests.is_none() {\n         compiler.arg(\"--emit=metadata\");\n     }\n     compiler.arg(\"--target\").arg(match target {\n@@ -418,20 +415,20 @@ fn run_test(\n \n     let out = out_lines.join(\"\\n\");\n     let _bomb = Bomb(&out);\n-    match (output.status.success(), compile_fail) {\n+    match (output.status.success(), lang_string.compile_fail) {\n         (true, true) => {\n             return Err(TestFailure::UnexpectedCompilePass);\n         }\n         (true, false) => {}\n         (false, true) => {\n-            if !error_codes.is_empty() {\n+            if !lang_string.error_codes.is_empty() {\n                 // We used to check if the output contained \"error[{}]: \" but since we added the\n                 // colored output, we can't anymore because of the color escape characters before\n                 // the \":\".\n-                error_codes.retain(|err| !out.contains(&format!(\"error[{}]\", err)));\n+                lang_string.error_codes.retain(|err| !out.contains(&format!(\"error[{}]\", err)));\n \n-                if !error_codes.is_empty() {\n-                    return Err(TestFailure::MissingErrorCodes(error_codes));\n+                if !lang_string.error_codes.is_empty() {\n+                    return Err(TestFailure::MissingErrorCodes(lang_string.error_codes));\n                 }\n             }\n         }\n@@ -470,9 +467,9 @@ fn run_test(\n     match result {\n         Err(e) => return Err(TestFailure::ExecutionError(e)),\n         Ok(out) => {\n-            if should_panic && out.status.success() {\n+            if lang_string.should_panic && out.status.success() {\n                 return Err(TestFailure::UnexpectedRunPass);\n-            } else if !should_panic && !out.status.success() {\n+            } else if !lang_string.should_panic && !out.status.success() {\n                 return Err(TestFailure::ExecutionFailure(out));\n             }\n         }\n@@ -966,14 +963,11 @@ impl Tester for Collector {\n                     &crate_name,\n                     line,\n                     options,\n-                    config.should_panic,\n+                    config,\n                     no_run,\n-                    config.test_harness,\n                     runtool,\n                     runtool_args,\n                     target,\n-                    config.compile_fail,\n-                    config.error_codes,\n                     &opts,\n                     edition,\n                     outdir,"}]}