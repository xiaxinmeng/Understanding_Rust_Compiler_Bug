{"sha": "63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b", "node_id": "C_kwDOAAsO6NoAKDYzZmM1N2I5OGVlYTVkNmQ4NGYxY2NjNGRiZmNiMTJkNThhZDQzMGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-10T03:40:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-10T03:40:40Z"}, "message": "Auto merge of #106560 - bjorn3:support_staticlib_dylib_linking, r=pnkfelix\n\nSupport linking to rust dylib with --crate-type staticlib\n\nThis allows for example dynamically linking libstd, while statically linking the user crate into an executable or C dynamic library. For this two unstable flags (`-Z staticlib-allow-rdylib-deps` and `-Z staticlib-prefer-dynamic`) are introduced. Without the former you get an error. The latter is the equivalent to `-C prefer-dynamic` for the staticlib crate type to indicate that dynamically linking is preferred when both options are available, like for libstd. Care must be taken to ensure that no crate ends up being merged into two distinct staticlibs that are linked together. Doing so will cause a linker error at best and undefined behavior at worst. In addition two distinct staticlibs compiled by different rustc may not be combined under any circumstances due to some rustc private symbols not being mangled.\n\nTo successfully link a staticlib, `--print native-static-libs` can be used while compiling to ask rustc for the linker flags necessary when linking the staticlib. This is an existing flag which previously only listed native libraries. It has been extended to list rust dylibs too. Trying to locate libstd yourself to link against it is not supported and may break if for example the libstd of multiple rustc versions are put in the same directory.\n\nFor an example on how to use this see the `src/test/run-make-fulldeps/staticlib-dylib-linkage/` test.", "tree": {"sha": "d2955976d2e917215f2ce183a61ca161beabe72b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2955976d2e917215f2ce183a61ca161beabe72b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b", "html_url": "https://github.com/rust-lang/rust/commit/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65dfca8488d635552eb246eb8e15df646e987cff", "url": "https://api.github.com/repos/rust-lang/rust/commits/65dfca8488d635552eb246eb8e15df646e987cff", "html_url": "https://github.com/rust-lang/rust/commit/65dfca8488d635552eb246eb8e15df646e987cff"}, {"sha": "47be0605a8bf2aec090322a0c604ebbf290206aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/47be0605a8bf2aec090322a0c604ebbf290206aa", "html_url": "https://github.com/rust-lang/rust/commit/47be0605a8bf2aec090322a0c604ebbf290206aa"}], "stats": {"total": 159, "additions": 144, "deletions": 15}, "files": [{"sha": "ea06cb02d8bafd42353e398a281e00028e67cc39", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 70, "deletions": 5, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b", "patch": "@@ -546,12 +546,38 @@ fn link_staticlib<'a>(\n \n     ab.build(out_filename);\n \n-    if !all_native_libs.is_empty() {\n-        if sess.opts.prints.contains(&PrintRequest::NativeStaticLibs) {\n-            print_native_static_libs(sess, &all_native_libs);\n+    let crates = codegen_results.crate_info.used_crates.iter();\n+\n+    let fmts = codegen_results\n+        .crate_info\n+        .dependency_formats\n+        .iter()\n+        .find_map(|&(ty, ref list)| if ty == CrateType::Staticlib { Some(list) } else { None })\n+        .expect(\"no dependency formats for staticlib\");\n+\n+    let mut all_rust_dylibs = vec![];\n+    for &cnum in crates {\n+        match fmts.get(cnum.as_usize() - 1) {\n+            Some(&Linkage::Dynamic) => {}\n+            _ => continue,\n+        }\n+        let crate_name = codegen_results.crate_info.crate_name[&cnum];\n+        let used_crate_source = &codegen_results.crate_info.used_crate_source[&cnum];\n+        if let Some((path, _)) = &used_crate_source.dylib {\n+            all_rust_dylibs.push(&**path);\n+        } else {\n+            if used_crate_source.rmeta.is_some() {\n+                sess.emit_fatal(errors::LinkRlibError::OnlyRmetaFound { crate_name });\n+            } else {\n+                sess.emit_fatal(errors::LinkRlibError::NotFound { crate_name });\n+            }\n         }\n     }\n \n+    if sess.opts.prints.contains(&PrintRequest::NativeStaticLibs) {\n+        print_native_static_libs(sess, &all_native_libs, &all_rust_dylibs);\n+    }\n+\n     Ok(())\n }\n \n@@ -1370,8 +1396,12 @@ enum RlibFlavor {\n     StaticlibBase,\n }\n \n-fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLib]) {\n-    let lib_args: Vec<_> = all_native_libs\n+fn print_native_static_libs(\n+    sess: &Session,\n+    all_native_libs: &[NativeLib],\n+    all_rust_dylibs: &[&Path],\n+) {\n+    let mut lib_args: Vec<_> = all_native_libs\n         .iter()\n         .filter(|l| relevant_lib(sess, l))\n         .filter_map(|lib| {\n@@ -1401,6 +1431,41 @@ fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLib]) {\n             }\n         })\n         .collect();\n+    for path in all_rust_dylibs {\n+        // FIXME deduplicate with add_dynamic_crate\n+\n+        // Just need to tell the linker about where the library lives and\n+        // what its name is\n+        let parent = path.parent();\n+        if let Some(dir) = parent {\n+            let dir = fix_windows_verbatim_for_gcc(dir);\n+            if sess.target.is_like_msvc {\n+                let mut arg = String::from(\"/LIBPATH:\");\n+                arg.push_str(&dir.display().to_string());\n+                lib_args.push(arg);\n+            } else {\n+                lib_args.push(\"-L\".to_owned());\n+                lib_args.push(dir.display().to_string());\n+            }\n+        }\n+        let stem = path.file_stem().unwrap().to_str().unwrap();\n+        // Convert library file-stem into a cc -l argument.\n+        let prefix = if stem.starts_with(\"lib\") && !sess.target.is_like_windows { 3 } else { 0 };\n+        let lib = &stem[prefix..];\n+        let path = parent.unwrap_or_else(|| Path::new(\"\"));\n+        if sess.target.is_like_msvc {\n+            // When producing a dll, the MSVC linker may not actually emit a\n+            // `foo.lib` file if the dll doesn't actually export any symbols, so we\n+            // check to see if the file is there and just omit linking to it if it's\n+            // not present.\n+            let name = format!(\"{}.dll.lib\", lib);\n+            if path.join(&name).exists() {\n+                lib_args.push(name);\n+            }\n+        } else {\n+            lib_args.push(format!(\"-l{}\", lib));\n+        }\n+    }\n     if !lib_args.is_empty() {\n         sess.emit_note(errors::StaticLibraryNativeArtifacts);\n         // Prefix for greppability"}, {"sha": "72b208a7132768ff7f37c1c9b02c6fc394f28ca8", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b", "patch": "@@ -89,11 +89,25 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n         // to try to eagerly statically link all dependencies. This is normally\n         // done for end-product dylibs, not intermediate products.\n         //\n-        // Treat cdylibs similarly. If `-C prefer-dynamic` is set, the caller may\n-        // be code-size conscious, but without it, it makes sense to statically\n-        // link a cdylib.\n-        CrateType::Dylib | CrateType::Cdylib if !sess.opts.cg.prefer_dynamic => Linkage::Static,\n-        CrateType::Dylib | CrateType::Cdylib => Linkage::Dynamic,\n+        // Treat cdylibs and staticlibs similarly. If `-C prefer-dynamic` is set,\n+        // the caller may be code-size conscious, but without it, it makes sense\n+        // to statically link a cdylib or staticlib. For staticlibs we use\n+        // `-Z staticlib-prefer-dynamic` for now. This may be merged into\n+        // `-C prefer-dynamic` in the future.\n+        CrateType::Dylib | CrateType::Cdylib => {\n+            if sess.opts.cg.prefer_dynamic {\n+                Linkage::Dynamic\n+            } else {\n+                Linkage::Static\n+            }\n+        }\n+        CrateType::Staticlib => {\n+            if sess.opts.unstable_opts.staticlib_prefer_dynamic {\n+                Linkage::Dynamic\n+            } else {\n+                Linkage::Static\n+            }\n+        }\n \n         // If the global prefer_dynamic switch is turned off, or the final\n         // executable will be statically linked, prefer static crate linkage.\n@@ -108,9 +122,6 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n         // No linkage happens with rlibs, we just needed the metadata (which we\n         // got long ago), so don't bother with anything.\n         CrateType::Rlib => Linkage::NotLinked,\n-\n-        // staticlibs must have all static dependencies.\n-        CrateType::Staticlib => Linkage::Static,\n     };\n \n     match preferred_linkage {\n@@ -123,9 +134,9 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n                 return v;\n             }\n \n-            // Staticlibs and static executables must have all static dependencies.\n+            // Static executables must have all static dependencies.\n             // If any are not found, generate some nice pretty errors.\n-            if ty == CrateType::Staticlib\n+            if (ty == CrateType::Staticlib && !sess.opts.unstable_opts.staticlib_allow_rdylib_deps)\n                 || (ty == CrateType::Executable\n                     && sess.crt_static(Some(ty))\n                     && !sess.target.crt_static_allows_dylibs)"}, {"sha": "5976b9aa3e74a168b8f8629e069dd7733a4735dd", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b", "patch": "@@ -1720,6 +1720,10 @@ options! {\n     #[rustc_lint_opt_deny_field_access(\"use `Session::stack_protector` instead of this field\")]\n     stack_protector: StackProtector = (StackProtector::None, parse_stack_protector, [TRACKED],\n         \"control stack smash protection strategy (`rustc --print stack-protector-strategies` for details)\"),\n+    staticlib_allow_rdylib_deps: bool = (false, parse_bool, [TRACKED],\n+        \"allow staticlibs to have rust dylib dependencies\"),\n+    staticlib_prefer_dynamic: bool = (false, parse_bool, [TRACKED],\n+        \"prefer dynamic linking to static linking for staticlibs (default: no)\"),\n     strict_init_checks: bool = (false, parse_bool, [TRACKED],\n         \"control if mem::uninitialized and mem::zeroed panic on more UB\"),\n     strip: Strip = (Strip::None, parse_strip, [UNTRACKED],"}, {"sha": "a1e86a7ce4b652ea5f3794e6fa84cd02776076e2", "filename": "tests/run-make/staticlib-dylib-linkage/Makefile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b/tests%2Frun-make%2Fstaticlib-dylib-linkage%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b/tests%2Frun-make%2Fstaticlib-dylib-linkage%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fstaticlib-dylib-linkage%2FMakefile?ref=63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b", "patch": "@@ -0,0 +1,21 @@\n+include ../tools.mk\n+\n+# ignore-cross-compile\n+# ignore-msvc FIXME(bjorn3) can't figure out how to link with the MSVC toolchain\n+# ignore-wasm wasm doesn't support dynamic libraries\n+\n+all:\n+\t$(RUSTC) -C prefer-dynamic bar.rs\n+\t$(RUSTC) foo.rs --crate-type staticlib --print native-static-libs \\\n+\t\t-Z staticlib-allow-rdylib-deps 2>&1 | grep 'note: native-static-libs: ' \\\n+\t\t| sed 's/note: native-static-libs: \\(.*\\)/\\1/' > $(TMPDIR)/libs.txt\n+\tcat $(TMPDIR)/libs.txt\n+\n+ifdef IS_MSVC\n+\t$(CC) $(CFLAGS) /c foo.c /Fo:$(TMPDIR)/foo.o\n+\t$(RUSTC_LINKER) $(TMPDIR)/foo.o $(TMPDIR)/foo.lib $$(cat $(TMPDIR)/libs.txt) $(call OUT_EXE,foo)\n+else\n+\t$(CC) $(CFLAGS) foo.c -L $(TMPDIR) -lfoo $$(cat $(TMPDIR)/libs.txt) -o $(call RUN_BINFILE,foo)\n+endif\n+\n+\t$(call RUN,foo)"}, {"sha": "b3a7539abaeffe6d4ac414f79e0448a582298b6d", "filename": "tests/run-make/staticlib-dylib-linkage/bar.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Fbar.rs?ref=63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b", "patch": "@@ -0,0 +1,5 @@\n+#![crate_type = \"dylib\"]\n+\n+pub fn bar() {\n+    println!(\"hello!\");\n+}"}, {"sha": "154f9682ef8f1dd678cdb5a3605a11cee1cb92bf", "filename": "tests/run-make/staticlib-dylib-linkage/foo.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Ffoo.c?ref=63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b", "patch": "@@ -0,0 +1,10 @@\n+#include <assert.h>\n+\n+extern void foo();\n+extern unsigned bar(unsigned a, unsigned b);\n+\n+int main() {\n+  foo();\n+  assert(bar(1, 2) == 3);\n+  return 0;\n+}"}, {"sha": "af439391c757e8f6ef1ea172cd7920f184a5b8d0", "filename": "tests/run-make/staticlib-dylib-linkage/foo.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Ffoo.rs?ref=63fc57b98eea5d6d84f1ccc4dbfcb12d58ad430b", "patch": "@@ -0,0 +1,13 @@\n+#![crate_type = \"staticlib\"]\n+\n+extern crate bar;\n+\n+#[no_mangle]\n+pub extern \"C\" fn foo() {\n+    bar::bar();\n+}\n+\n+#[no_mangle]\n+pub extern \"C\" fn bar(a: u32, b: u32) -> u32 {\n+    a + b\n+}"}]}