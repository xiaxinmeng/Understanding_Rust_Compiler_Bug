{"sha": "37196e36918536de06e64bd2a08b9e5fcab898fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MTk2ZTM2OTE4NTM2ZGUwNmU2NGJkMmEwOGI5ZTVmY2FiODk4ZmE=", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2021-08-12T10:10:44Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2021-09-13T12:16:05Z"}, "message": "Suggest replacing an inexisting field for an unmentioned field\n\nThis PR adds a suggestion to replace an inexisting field for an\nunmentioned field. Given the following code:\n```rust\nenum Foo {\n    Bar { alpha: u8, bravo: u8, charlie: u8 },\n}\n\nfn foo(foo: Foo) {\n    match foo {\n        Foo::Bar {\n            alpha,\n            beta, // `bravo` miswritten as `beta` here.\n            charlie,\n        } => todo!(),\n    }\n}\n```\nthe compiler now emits the error messages below.\n```text\nerror[E0026]: variant `Foo::Bar` does not have a field named `beta`\n --> src/lib.rs:9:13\n  |\n9 |             beta, // `bravo` miswritten as `beta` here.\n  |             ^^^^\n  |             |\n  |             variant `Foo::Bar` does not have this field\n  |             help: `Foo::Bar` has a field named `bravo`: `bravo`\n```\n\nNote that this suggestion is available iff the number of inexisting\nfields and unmentioned fields are both 1.", "tree": {"sha": "e04c15c2f5d19a0b5ee9ce021d6580496dcb129e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e04c15c2f5d19a0b5ee9ce021d6580496dcb129e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37196e36918536de06e64bd2a08b9e5fcab898fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37196e36918536de06e64bd2a08b9e5fcab898fa", "html_url": "https://github.com/rust-lang/rust/commit/37196e36918536de06e64bd2a08b9e5fcab898fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37196e36918536de06e64bd2a08b9e5fcab898fa/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6f32f3750987640d11a97e503f57b637fd968fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f32f3750987640d11a97e503f57b637fd968fd", "html_url": "https://github.com/rust-lang/rust/commit/c6f32f3750987640d11a97e503f57b637fd968fd"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "800f413e9d867bbb61d50a15050f87df16205b5e", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/37196e36918536de06e64bd2a08b9e5fcab898fa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37196e36918536de06e64bd2a08b9e5fcab898fa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=37196e36918536de06e64bd2a08b9e5fcab898fa", "patch": "@@ -1447,7 +1447,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     plural\n                 ),\n             );\n-            if plural == \"\" {\n+\n+            if unmentioned_fields.len() == 1 {\n                 let input =\n                     unmentioned_fields.iter().map(|(_, field)| field.name).collect::<Vec<_>>();\n                 let suggested_name = find_best_match_for_name(&input, ident.name, None);\n@@ -1468,6 +1469,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // We don't want to throw `E0027` in case we have thrown `E0026` for them.\n                         unmentioned_fields.retain(|&(_, x)| x.name != suggested_name);\n                     }\n+                } else if inexistent_fields.len() == 1 {\n+                    let unmentioned_field = unmentioned_fields[0].1.name;\n+                    err.span_suggestion_short(\n+                        ident.span,\n+                        &format!(\n+                            \"`{}` has a field named `{}`\",\n+                            tcx.def_path_str(variant.def_id),\n+                            unmentioned_field\n+                        ),\n+                        unmentioned_field.to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }\n             }\n         }"}, {"sha": "09c52292dccaff9ba05d44d83dd16faf69881588", "filename": "src/test/ui/issues/issue-51102.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37196e36918536de06e64bd2a08b9e5fcab898fa/src%2Ftest%2Fui%2Fissues%2Fissue-51102.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37196e36918536de06e64bd2a08b9e5fcab898fa/src%2Ftest%2Fui%2Fissues%2Fissue-51102.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51102.stderr?ref=37196e36918536de06e64bd2a08b9e5fcab898fa", "patch": "@@ -2,7 +2,10 @@ error[E0026]: struct `SimpleStruct` does not have a field named `state`\n   --> $DIR/issue-51102.rs:13:17\n    |\n LL |                 state: 0,\n-   |                 ^^^^^ struct `SimpleStruct` does not have this field\n+   |                 ^^^^^\n+   |                 |\n+   |                 struct `SimpleStruct` does not have this field\n+   |                 help: `SimpleStruct` has a field named `no_state_here`\n \n error[E0025]: field `no_state_here` bound multiple times in the pattern\n   --> $DIR/issue-51102.rs:24:17"}, {"sha": "668405ed638c1d18ccbce364da0f940eb518fa36", "filename": "src/test/ui/numeric/numeric-fields.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37196e36918536de06e64bd2a08b9e5fcab898fa/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37196e36918536de06e64bd2a08b9e5fcab898fa/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-fields.stderr?ref=37196e36918536de06e64bd2a08b9e5fcab898fa", "patch": "@@ -16,7 +16,10 @@ error[E0026]: struct `S` does not have a field named `0x1`\n   --> $DIR/numeric-fields.rs:7:17\n    |\n LL |         S{0: a, 0x1: b, ..} => {}\n-   |                 ^^^ struct `S` does not have this field\n+   |                 ^^^\n+   |                 |\n+   |                 struct `S` does not have this field\n+   |                 help: `S` has a field named `1`\n \n error: aborting due to 2 previous errors\n "}]}