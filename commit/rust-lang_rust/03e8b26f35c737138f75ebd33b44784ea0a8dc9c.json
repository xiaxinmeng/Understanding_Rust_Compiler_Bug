{"sha": "03e8b26f35c737138f75ebd33b44784ea0a8dc9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZThiMjZmMzVjNzM3MTM4Zjc1ZWJkMzNiNDQ3ODRlYTBhOGRjOWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-18T10:23:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-28T13:43:47Z"}, "message": "rewrite `borrowck_fn` to only use the body-id", "tree": {"sha": "ba84dfc759f706b7ef2ed4afabc12d206fd545dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba84dfc759f706b7ef2ed4afabc12d206fd545dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03e8b26f35c737138f75ebd33b44784ea0a8dc9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03e8b26f35c737138f75ebd33b44784ea0a8dc9c", "html_url": "https://github.com/rust-lang/rust/commit/03e8b26f35c737138f75ebd33b44784ea0a8dc9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03e8b26f35c737138f75ebd33b44784ea0a8dc9c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d885e4ce9d21c3283a46803a01c5a23d8d10f556", "url": "https://api.github.com/repos/rust-lang/rust/commits/d885e4ce9d21c3283a46803a01c5a23d8d10f556", "html_url": "https://github.com/rust-lang/rust/commit/d885e4ce9d21c3283a46803a01c5a23d8d10f556"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "c0f681680a967b0350e27146d28486ae89a6c48b", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03e8b26f35c737138f75ebd33b44784ea0a8dc9c/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e8b26f35c737138f75ebd33b44784ea0a8dc9c/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=03e8b26f35c737138f75ebd33b44784ea0a8dc9c", "patch": "@@ -27,7 +27,7 @@ use rustc::middle::mem_categorization as mc;\n use std::mem;\n use std::rc::Rc;\n use syntax::ast;\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::DUMMY_SP;\n \n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n enum Fragment {\n@@ -200,14 +200,15 @@ impl FragmentSets {\n \n pub fn instrument_move_fragments<'a, 'tcx>(this: &MoveData<'tcx>,\n                                            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                           sp: Span,\n                                            id: ast::NodeId) {\n     let span_err = tcx.hir.attrs(id).iter()\n                           .any(|a| a.check_name(\"rustc_move_fragments\"));\n     let print = tcx.sess.opts.debugging_opts.print_move_fragments;\n \n     if !span_err && !print { return; }\n \n+    let sp = tcx.hir.span(id);\n+\n     let instrument_all_paths = |kind, vec_rc: &Vec<MovePathIndex>| {\n         for (i, mpi) in vec_rc.iter().enumerate() {\n             let lp = || this.path_loan_path(*mpi);"}, {"sha": "07e654c3880cd30fe351292e7e6024e299463ad6", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/03e8b26f35c737138f75ebd33b44784ea0a8dc9c/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e8b26f35c737138f75ebd33b44784ea0a8dc9c/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=03e8b26f35c737138f75ebd33b44784ea0a8dc9c", "patch": "@@ -70,11 +70,13 @@ impl<'a, 'tcx> Visitor<'tcx> for BorrowckCtxt<'a, 'tcx> {\n         match fk {\n             FnKind::ItemFn(..) |\n             FnKind::Method(..) => {\n-                borrowck_fn(self, fk, fd, b, s, id, fk.attrs())\n+                borrowck_fn(self, b);\n+                intravisit::walk_fn(self, fk, fd, b, s, id);\n             }\n \n             FnKind::Closure(..) => {\n-                borrowck_fn(self, fk, fd, b, s, id, fk.attrs());\n+                borrowck_fn(self, b);\n+                intravisit::walk_fn(self, fk, fd, b, s, id);\n             }\n         }\n     }\n@@ -154,24 +156,20 @@ pub struct AnalysisData<'a, 'tcx: 'a> {\n     pub move_data: move_data::FlowedMoveData<'a, 'tcx>,\n }\n \n-fn borrowck_fn<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n-                         fk: FnKind<'tcx>,\n-                         decl: &'tcx hir::FnDecl,\n-                         body_id: hir::BodyId,\n-                         sp: Span,\n-                         id: ast::NodeId,\n-                         attributes: &[ast::Attribute]) {\n-    debug!(\"borrowck_fn(id={})\", id);\n+fn borrowck_fn<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>, body_id: hir::BodyId) {\n+    debug!(\"borrowck_fn(body_id={:?})\", body_id);\n \n     assert!(this.tables.is_none());\n-    let owner_def_id = this.tcx.hir.local_def_id(this.tcx.hir.body_owner(body_id));\n+    let owner_id = this.tcx.hir.body_owner(body_id);\n+    let owner_def_id = this.tcx.hir.local_def_id(owner_id);\n+    let attributes = this.tcx.get_attrs(owner_def_id);\n     let tables = this.tcx.item_tables(owner_def_id);\n     this.tables = Some(tables);\n \n     let body = this.tcx.hir.body(body_id);\n \n-    if attributes.iter().any(|item| item.check_name(\"rustc_mir_borrowck\")) {\n-        mir::borrowck_mir(this, id, attributes);\n+    if this.tcx.has_attr(owner_def_id, \"rustc_mir_borrowck\") {\n+        mir::borrowck_mir(this, owner_id, &attributes);\n     }\n \n     let cfg = cfg::CFG::new(this.tcx, &body.value);\n@@ -182,17 +180,14 @@ fn borrowck_fn<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n \n     move_data::fragments::instrument_move_fragments(&flowed_moves.move_data,\n                                                     this.tcx,\n-                                                    sp,\n-                                                    id);\n+                                                    owner_id);\n     move_data::fragments::build_unfragmented_map(this,\n                                                  &flowed_moves.move_data,\n-                                                 id);\n+                                                 owner_id);\n \n     check_loans::check_loans(this, &loan_dfcx, &flowed_moves, &all_loans[..], body);\n \n     this.tables = None;\n-\n-    intravisit::walk_fn(this, fk, decl, body_id, sp, id);\n }\n \n fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,"}]}