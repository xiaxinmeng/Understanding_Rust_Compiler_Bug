{"sha": "99fa139beab0c03583c676554c3d807525f602af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZmExMzliZWFiMGMwMzU4M2M2NzY1NTRjM2Q4MDc1MjVmNjAyYWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-12T11:09:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-12T11:09:44Z"}, "message": "Merge #6534\n\n6534: Fix attachment of inner doc comments r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a2df8b9f6d26611283120faccb387723b1a0c944", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2df8b9f6d26611283120faccb387723b1a0c944"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99fa139beab0c03583c676554c3d807525f602af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfrRf4CRBK7hj4Ov3rIwAAdHIIAJXROCrqLCgVUbOomD5YfsJs\nHpOoOCtfiMBeNg3pkZw4iRPc7BnacErrVi9H/f3OpoV5gwVvcPue7LRbh8+FjPgG\nLF9KqjJqbwWKlznPURObAv41fgTK8vPL5V1qUt4O7KZEwWTmUqeR1f92C8nWyhMj\np1Qd2258Ouo418f53PVJ7HEJSLq+u2t3kXuNdL3UZ88bS26N8VeLorkS1wD1abFV\n6nPxqGKo7yNLPCWk/sF9OQV0dsdbfNYaZR8TB4UaWM5TqUmEBMWCPHWBf4+ipsfd\nAhyxgkr7O+duq9qIpT6D3n/CedS0Ljd0/Ji19Wrv058u0xUje+kjpiYvU2ruks0=\n=E9Wl\n-----END PGP SIGNATURE-----\n", "payload": "tree a2df8b9f6d26611283120faccb387723b1a0c944\nparent 802665873ddfa3f6a2ba6e97a3d9078f2e5cfa90\nparent a27186636d030c847193ab21c59a1857a1e93785\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1605179384 +0000\ncommitter GitHub <noreply@github.com> 1605179384 +0000\n\nMerge #6534\n\n6534: Fix attachment of inner doc comments r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99fa139beab0c03583c676554c3d807525f602af", "html_url": "https://github.com/rust-lang/rust/commit/99fa139beab0c03583c676554c3d807525f602af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99fa139beab0c03583c676554c3d807525f602af/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "802665873ddfa3f6a2ba6e97a3d9078f2e5cfa90", "url": "https://api.github.com/repos/rust-lang/rust/commits/802665873ddfa3f6a2ba6e97a3d9078f2e5cfa90", "html_url": "https://github.com/rust-lang/rust/commit/802665873ddfa3f6a2ba6e97a3d9078f2e5cfa90"}, {"sha": "a27186636d030c847193ab21c59a1857a1e93785", "url": "https://api.github.com/repos/rust-lang/rust/commits/a27186636d030c847193ab21c59a1857a1e93785", "html_url": "https://github.com/rust-lang/rust/commit/a27186636d030c847193ab21c59a1857a1e93785"}], "stats": {"total": 103, "additions": 56, "deletions": 47}, "files": [{"sha": "7844f9ed63540a543a7740ce4253e0739128685e", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/99fa139beab0c03583c676554c3d807525f602af/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa139beab0c03583c676554c3d807525f602af/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=99fa139beab0c03583c676554c3d807525f602af", "patch": "@@ -115,10 +115,10 @@ fn test_doc_comment_none() {\n }\n \n #[test]\n-fn test_doc_comment_of_items() {\n+fn test_outer_doc_comment_of_items() {\n     let file = SourceFile::parse(\n         r#\"\n-        //! doc\n+        /// doc\n         // non-doc\n         mod foo {}\n         \"#,\n@@ -129,6 +129,21 @@ fn test_doc_comment_of_items() {\n     assert_eq!(\"doc\", module.doc_comment_text().unwrap());\n }\n \n+#[test]\n+fn test_inner_doc_comment_of_items() {\n+    let file = SourceFile::parse(\n+        r#\"\n+        //! doc\n+        // non-doc\n+        mod foo {}\n+        \"#,\n+    )\n+    .ok()\n+    .unwrap();\n+    let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n+    assert!(module.doc_comment_text().is_none());\n+}\n+\n #[test]\n fn test_doc_comment_of_statics() {\n     let file = SourceFile::parse("}, {"sha": "2661c753e22c2ef5255029ae0310686a76c3f6c6", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/99fa139beab0c03583c676554c3d807525f602af/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa139beab0c03583c676554c3d807525f602af/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=99fa139beab0c03583c676554c3d807525f602af", "patch": "@@ -14,16 +14,15 @@ use crate::{\n \n impl ast::Comment {\n     pub fn kind(&self) -> CommentKind {\n-        kind_by_prefix(self.text())\n+        CommentKind::from_text(self.text())\n     }\n \n     pub fn prefix(&self) -> &'static str {\n-        for (prefix, k) in COMMENT_PREFIX_TO_KIND.iter() {\n-            if *k == self.kind() && self.text().starts_with(prefix) {\n-                return prefix;\n-            }\n-        }\n-        unreachable!()\n+        let &(prefix, _kind) = CommentKind::BY_PREFIX\n+            .iter()\n+            .find(|&(prefix, kind)| self.kind() == *kind && self.text().starts_with(prefix))\n+            .unwrap();\n+        prefix\n     }\n }\n \n@@ -55,29 +54,25 @@ pub enum CommentPlacement {\n     Outer,\n }\n \n-const COMMENT_PREFIX_TO_KIND: &[(&str, CommentKind)] = {\n-    use {CommentPlacement::*, CommentShape::*};\n-    &[\n-        (\"////\", CommentKind { shape: Line, doc: None }),\n-        (\"///\", CommentKind { shape: Line, doc: Some(Outer) }),\n-        (\"//!\", CommentKind { shape: Line, doc: Some(Inner) }),\n-        (\"/**\", CommentKind { shape: Block, doc: Some(Outer) }),\n-        (\"/*!\", CommentKind { shape: Block, doc: Some(Inner) }),\n-        (\"//\", CommentKind { shape: Line, doc: None }),\n-        (\"/*\", CommentKind { shape: Block, doc: None }),\n-    ]\n-};\n+impl CommentKind {\n+    const BY_PREFIX: [(&'static str, CommentKind); 8] = [\n+        (\"/**/\", CommentKind { shape: CommentShape::Block, doc: None }),\n+        (\"////\", CommentKind { shape: CommentShape::Line, doc: None }),\n+        (\"///\", CommentKind { shape: CommentShape::Line, doc: Some(CommentPlacement::Outer) }),\n+        (\"//!\", CommentKind { shape: CommentShape::Line, doc: Some(CommentPlacement::Inner) }),\n+        (\"/**\", CommentKind { shape: CommentShape::Block, doc: Some(CommentPlacement::Outer) }),\n+        (\"/*!\", CommentKind { shape: CommentShape::Block, doc: Some(CommentPlacement::Inner) }),\n+        (\"//\", CommentKind { shape: CommentShape::Line, doc: None }),\n+        (\"/*\", CommentKind { shape: CommentShape::Block, doc: None }),\n+    ];\n \n-fn kind_by_prefix(text: &str) -> CommentKind {\n-    if text == \"/**/\" {\n-        return CommentKind { shape: CommentShape::Block, doc: None };\n-    }\n-    for (prefix, kind) in COMMENT_PREFIX_TO_KIND.iter() {\n-        if text.starts_with(prefix) {\n-            return *kind;\n-        }\n+    pub(crate) fn from_text(text: &str) -> CommentKind {\n+        let &(_prefix, kind) = CommentKind::BY_PREFIX\n+            .iter()\n+            .find(|&(prefix, _kind)| text.starts_with(prefix))\n+            .unwrap();\n+        kind\n     }\n-    panic!(\"bad comment text: {:?}\", text)\n }\n \n impl ast::Whitespace {"}, {"sha": "997bc5d288bcabd07e81ebd0e325245f2a9607ef", "filename": "crates/syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/99fa139beab0c03583c676554c3d807525f602af/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa139beab0c03583c676554c3d807525f602af/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=99fa139beab0c03583c676554c3d807525f602af", "patch": "@@ -5,6 +5,7 @@ use std::mem;\n use parser::{ParseError, TreeSink};\n \n use crate::{\n+    ast,\n     parsing::Token,\n     syntax_node::GreenNode,\n     SmolStr, SyntaxError,\n@@ -153,24 +154,22 @@ fn n_attached_trivias<'a>(\n \n             while let Some((i, (kind, text))) = trivias.next() {\n                 match kind {\n-                    WHITESPACE => {\n-                        if text.contains(\"\\n\\n\") {\n-                            // we check whether the next token is a doc-comment\n-                            // and skip the whitespace in this case\n-                            if let Some((peek_kind, peek_text)) =\n-                                trivias.peek().map(|(_, pair)| pair)\n-                            {\n-                                if *peek_kind == COMMENT\n-                                    && peek_text.starts_with(\"///\")\n-                                    && !peek_text.starts_with(\"////\")\n-                                {\n-                                    continue;\n-                                }\n+                    WHITESPACE if text.contains(\"\\n\\n\") => {\n+                        // we check whether the next token is a doc-comment\n+                        // and skip the whitespace in this case\n+                        if let Some((COMMENT, peek_text)) = trivias.peek().map(|(_, pair)| pair) {\n+                            let comment_kind = ast::CommentKind::from_text(peek_text);\n+                            if comment_kind.doc == Some(ast::CommentPlacement::Outer) {\n+                                continue;\n                             }\n-                            break;\n                         }\n+                        break;\n                     }\n                     COMMENT => {\n+                        let comment_kind = ast::CommentKind::from_text(text);\n+                        if comment_kind.doc == Some(ast::CommentPlacement::Inner) {\n+                            break;\n+                        }\n                         res = i + 1;\n                     }\n                     _ => (),"}, {"sha": "35577272e5621ceeb0a8200a0f4cc46df4ed3147", "filename": "crates/syntax/test_data/parser/ok/0037_mod.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99fa139beab0c03583c676554c3d807525f602af/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0037_mod.rast", "raw_url": "https://github.com/rust-lang/rust/raw/99fa139beab0c03583c676554c3d807525f602af/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0037_mod.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0037_mod.rast?ref=99fa139beab0c03583c676554c3d807525f602af", "patch": "@@ -1,9 +1,9 @@\n SOURCE_FILE@0..93\n   COMMENT@0..60 \"// https://github.com ...\"\n   WHITESPACE@60..62 \"\\n\\n\"\n-  MODULE@62..93\n-    COMMENT@62..70 \"//! docs\"\n-    WHITESPACE@70..71 \"\\n\"\n+  COMMENT@62..70 \"//! docs\"\n+  WHITESPACE@70..71 \"\\n\"\n+  MODULE@71..93\n     COMMENT@71..82 \"// non-docs\"\n     WHITESPACE@82..83 \"\\n\"\n     MOD_KW@83..86 \"mod\""}]}