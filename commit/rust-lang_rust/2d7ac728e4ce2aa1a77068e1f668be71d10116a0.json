{"sha": "2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkN2FjNzI4ZTRjZTJhYTFhNzcwNjhlMWY2NjhiZTcxZDEwMTE2YTA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-31T11:27:54Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-19T08:36:36Z"}, "message": "Stop using the `const_eval` query for initializers of statics\n\nAs a side effect, we now represent most promoteds as `ConstValue::Scalar` again. This is useful because all implict promoteds are just references anyway and most explicit promoteds are numeric arguments to `asm!` or SIMD instructions.", "tree": {"sha": "a6896d2d98b21cfb58038d8ef1dbc8f172c9c0c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6896d2d98b21cfb58038d8ef1dbc8f172c9c0c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "html_url": "https://github.com/rust-lang/rust/commit/2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083f1d7a37a5b439c1b9325e7860ef4fd880d418", "url": "https://api.github.com/repos/rust-lang/rust/commits/083f1d7a37a5b439c1b9325e7860ef4fd880d418", "html_url": "https://github.com/rust-lang/rust/commit/083f1d7a37a5b439c1b9325e7860ef4fd880d418"}], "stats": {"total": 161, "additions": 53, "deletions": 108}, "files": [{"sha": "dc09790df02952dfe9342ad773dcdea24d7d54e0", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::Node;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::interpret::{\n-    read_target_uint, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Pointer,\n+    read_target_uint, Allocation, ErrorHandled, GlobalAlloc, Pointer,\n };\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::{self, Instance, Ty};\n@@ -85,10 +85,7 @@ pub fn codegen_static_initializer(\n     cx: &CodegenCx<'ll, 'tcx>,\n     def_id: DefId,\n ) -> Result<(&'ll Value, &'tcx Allocation), ErrorHandled> {\n-    let alloc = match cx.tcx.const_eval_poly(def_id)? {\n-        ConstValue::ByRef { alloc, offset } if offset.bytes() == 0 => alloc,\n-        val => bug!(\"static const eval returned {:#?}\", val),\n-    };\n+    let alloc = cx.tcx.eval_static_initializer(def_id)?;\n     Ok((const_alloc_to_llvm(cx, alloc), alloc))\n }\n "}, {"sha": "23269f7245da659a7774e0851195730b7327c94b", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -13,7 +13,7 @@ use rustc_ast as ast;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::{AllocId, ConstValue, Pointer, Scalar};\n+use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::mir::AssertKind;\n use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n@@ -867,24 +867,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         let ty = constant.literal.ty;\n                         let size = bx.layout_of(ty).size;\n                         let scalar = match const_value {\n-                            // Promoted constants are evaluated into a ByRef instead of a Scalar,\n-                            // but we want the scalar value here.\n-                            ConstValue::ByRef { alloc, offset } => {\n-                                let ptr = Pointer::new(AllocId(0), offset);\n-                                alloc\n-                                    .read_scalar(&bx, ptr, size)\n-                                    .and_then(|s| s.check_init())\n-                                    .unwrap_or_else(|e| {\n-                                        bx.tcx().sess.span_err(\n-                                            span,\n-                                            &format!(\"Could not evaluate asm const: {}\", e),\n-                                        );\n-\n-                                        // We are erroring out, just emit a dummy constant.\n-                                        Scalar::from_u64(0)\n-                                    })\n-                            }\n-                            _ => span_bug!(span, \"expected ByRef for promoted asm const\"),\n+                            ConstValue::Scalar(s) => s,\n+                            _ => span_bug!(\n+                                span,\n+                                \"expected Scalar for promoted asm const, but got {:#?}\",\n+                                const_value\n+                            ),\n                         };\n                         let value = scalar.assert_bits(size);\n                         let string = match ty.kind() {"}, {"sha": "71d4ae85d3363225681f87fa2e3a34ac3c05c8e5", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -1473,21 +1473,18 @@ declare_lint_pass!(\n     UnusedBrokenConst => []\n );\n \n-fn check_const(cx: &LateContext<'_>, body_id: hir::BodyId) {\n-    let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();\n-    // trigger the query once for all constants since that will already report the errors\n-    // FIXME: Use ensure here\n-    let _ = cx.tcx.const_eval_poly(def_id);\n-}\n-\n impl<'tcx> LateLintPass<'tcx> for UnusedBrokenConst {\n     fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {\n         match it.kind {\n             hir::ItemKind::Const(_, body_id) => {\n-                check_const(cx, body_id);\n+                let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();\n+                // trigger the query once for all constants since that will already report the errors\n+                // FIXME: Use ensure here\n+                let _ = cx.tcx.const_eval_poly(def_id);\n             }\n             hir::ItemKind::Static(_, _, body_id) => {\n-                check_const(cx, body_id);\n+                let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();\n+                let _ = cx.tcx.eval_static_initializer(def_id);\n             }\n             _ => {}\n         }"}, {"sha": "013c67466057be2136033c9dd2f3c85be27848da", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -182,7 +182,7 @@ pub(super) fn op_to_const<'tcx>(\n     }\n }\n \n-fn validate_and_turn_into_const<'tcx>(\n+fn turn_into_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     constant: RawConst<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n@@ -191,30 +191,21 @@ fn validate_and_turn_into_const<'tcx>(\n     let def_id = cid.instance.def.def_id();\n     let is_static = tcx.is_static(def_id);\n     let ecx = mk_eval_cx(tcx, tcx.def_span(key.value.instance.def_id()), key.param_env, is_static);\n-    let val = (|| {\n-        let mplace = ecx.raw_const_to_mplace(constant)?;\n-        // Turn this into a proper constant.\n-        // Statics/promoteds are always `ByRef`, for the rest `op_to_const` decides\n-        // whether they become immediates.\n-        if is_static || cid.promoted.is_some() {\n-            let ptr = mplace.ptr.assert_ptr();\n-            Ok(ConstValue::ByRef {\n-                alloc: ecx.tcx.global_alloc(ptr.alloc_id).unwrap_memory(),\n-                offset: ptr.offset,\n-            })\n-        } else {\n-            Ok(op_to_const(&ecx, mplace.into()))\n-        }\n-    })();\n \n-    // FIXME: Can this ever be an error and not be a compiler bug or can we just ICE here?\n-    val.map_err(|error| {\n+    let mplace = ecx.raw_const_to_mplace(constant).map_err(|error| {\n+        // FIXME: Can the above ever error and not be a compiler bug or can we just ICE here?\n         let err = ConstEvalErr::new(&ecx, error, None);\n         err.struct_error(ecx.tcx, \"it is undefined behavior to use this value\", |mut diag| {\n             diag.note(note_on_undefined_behavior_error());\n             diag.emit();\n         })\n-    })\n+    })?;\n+    assert!(\n+        !is_static || cid.promoted.is_some(),\n+        \"the const eval query should not be used for statics, use `const_eval_raw` instead\"\n+    );\n+    // Turn this into a proper constant.\n+    Ok(op_to_const(&ecx, mplace.into()))\n }\n \n pub fn const_eval_validated_provider<'tcx>(\n@@ -248,7 +239,7 @@ pub fn const_eval_validated_provider<'tcx>(\n         });\n     }\n \n-    tcx.const_eval_raw(key).and_then(|val| validate_and_turn_into_const(tcx, val, key))\n+    tcx.const_eval_raw(key).and_then(|val| turn_into_const(tcx, val, key))\n }\n \n pub fn const_eval_raw_provider<'tcx>("}, {"sha": "b2901d8d6a2592719af1a8cb7b91fe645bda3d5a", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -914,13 +914,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         } else {\n             self.param_env\n         };\n-        // We use `const_eval_raw` here, and get an unvalidated result.  That is okay:\n-        // Our result will later be validated anyway, and there seems no good reason\n-        // to have to fail early here.  This is also more consistent with\n-        // `Memory::get_static_alloc` which has to use `const_eval_raw` to avoid cycles.\n-        // FIXME: We can hit delay_span_bug if this is an invalid const, interning finds\n-        // that problem, but we never run validation to show an error. Can we ensure\n-        // this does not happen?\n         let val = self.tcx.const_eval_raw(param_env.and(gid))?;\n         self.raw_const_to_mplace(val)\n     }"}, {"sha": "2be771a58ef2b7bd08135e5c098fc3eab1800c84", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -554,11 +554,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::ConstKind::Unevaluated(def, substs, promoted) => {\n                 let instance = self.resolve(def.did, substs)?;\n                 // We use `const_eval` here and `const_eval_raw` elsewhere in mir interpretation.\n-                // The reason we use `const_eval_raw` everywhere else is to prevent cycles during\n-                // validation, because validation automatically reads through any references, thus\n-                // potentially requiring the current static to be evaluated again. This is not a\n-                // problem here, because we are building an operand which means an actual read is\n-                // happening.\n+                // The reason we use `const_eval` here is that there can never be a `ty::ConstKind`\n+                // that directly mentions the initializer of a static. Statics are always encoded\n+                // as constants with vaule `&STATIC`.\n                 return Ok(self.const_eval(GlobalId { instance, promoted }, val.ty)?);\n             }\n             ty::ConstKind::Infer(..)"}, {"sha": "4ef871b05f47f3375916fd58c7717ef789a30feb", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -364,8 +364,10 @@ fn collect_items_rec<'tcx>(\n \n             recursion_depth_reset = None;\n \n-            if let Ok(val) = tcx.const_eval_poly(def_id) {\n-                collect_const_value(tcx, val, &mut neighbors);\n+            if let Ok(alloc) = tcx.eval_static_initializer(def_id) {\n+                for &((), id) in alloc.relocations().values() {\n+                    collect_miri(tcx, id, &mut neighbors);\n+                }\n             }\n         }\n         MonoItem::Fn(instance) => {"}, {"sha": "49c644a20bf8248dc427c155567461f45fd1b105", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -631,14 +631,11 @@ pub fn write_allocations<'tcx>(\n             None => write!(w, \" (deallocated)\")?,\n             Some(GlobalAlloc::Function(inst)) => write!(w, \" (fn: {})\", inst)?,\n             Some(GlobalAlloc::Static(did)) if !tcx.is_foreign_item(did) => {\n-                match tcx.const_eval_poly(did) {\n-                    Ok(ConstValue::ByRef { alloc, .. }) => {\n+                match tcx.eval_static_initializer(did) {\n+                    Ok(alloc) => {\n                         write!(w, \" (static: {}, \", tcx.def_path_str(did))?;\n                         write_allocation_track_relocs(w, alloc)?;\n                     }\n-                    Ok(_) => {\n-                        span_bug!(tcx.def_span(did), \" static item without `ByRef` initializer\")\n-                    }\n                     Err(_) => write!(\n                         w,\n                         \" (static: {}, error during initializer evaluation)\","}, {"sha": "e84cc3c9b8684646725f14d0f78a93051a34447a", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -111,7 +111,6 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_infer::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_infer::infer::{InferCtxt, InferOk, InferResult, RegionVariableOrigin, TyCtxtInferExt};\n use rustc_middle::hir::map::blocks::FnLikeNode;\n-use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n@@ -2070,16 +2069,15 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: LocalDefId, span: S\n     // `#[link_section]` may contain arbitrary, or even undefined bytes, but it is\n     // the consumer's responsibility to ensure all bytes that have been read\n     // have defined values.\n-    match tcx.const_eval_poly(id.to_def_id()) {\n-        Ok(ConstValue::ByRef { alloc, .. }) => {\n+    match tcx.eval_static_initializer(id.to_def_id()) {\n+        Ok(alloc) => {\n             if alloc.relocations().len() != 0 {\n                 let msg = \"statics with a custom `#[link_section]` must be a \\\n                            simple list of bytes on the wasm target with no \\\n                            extra levels of indirection such as references\";\n                 tcx.sess.span_err(span, msg);\n             }\n         }\n-        Ok(_) => bug!(\"Matching on non-ByRef static\"),\n         Err(_) => {}\n     }\n }"}, {"sha": "fb0ed1bd5aa9486399254414edcf246b56adc60a", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -36,7 +36,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:37:5\n    |\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc22, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc18, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -76,7 +76,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:52:5\n    |\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc47, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc38, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -100,7 +100,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:61:5\n    |\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc62, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc50, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -148,7 +148,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:79:5\n    |\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc86, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc71, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -188,7 +188,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:94:5\n    |\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc101, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc86, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -212,7 +212,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:103:5\n    |\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc110, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc95, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "db95b996c18c9981921a2169443d2e1660074f53", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -18,7 +18,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:30:1\n    |\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc13 at .0.<enum-tag>, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc12 at .0.<enum-tag>, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -34,15 +34,15 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:44:1\n    |\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc20 at .<enum-tag>, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc18 at .<enum-tag>, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:47:1\n    |\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc25 at .0.<enum-tag>, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc22 at .0.<enum-tag>, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -58,7 +58,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:60:1\n    |\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc32 at .<enum-tag>, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc28 at .<enum-tag>, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "afd8a4b9e59efbd414cd9e8ceca253254e4bd317", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -13,7 +13,7 @@ LL | / const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n LL | |     let out_of_bounds_ptr = &ptr[255];\n-   | |                             ^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc11 which has size 1\n+   | |                             ^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc10 which has size 1\n LL | |     mem::transmute(out_of_bounds_ptr)\n LL | | } };\n    | |____-"}, {"sha": "429ae69eabfdb0931c93acf885d3ed7e50da310c", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -34,7 +34,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref.rs:23:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc16, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc14, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "d58f044cf6d04513a27ce94c980a93cd6bc3e66f", "filename": "src/test/ui/consts/recursive-zst-static.default.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -10,11 +10,7 @@ note: ...which requires const-evaluating `FOO`...\n LL | static FOO: () = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating `FOO`, completing the cycle\n-note: cycle used when const-evaluating + checking `FOO`\n-  --> $DIR/recursive-zst-static.rs:10:1\n-   |\n-LL | static FOO: () = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error\n "}, {"sha": "d58f044cf6d04513a27ce94c980a93cd6bc3e66f", "filename": "src/test/ui/consts/recursive-zst-static.unleash.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -10,11 +10,7 @@ note: ...which requires const-evaluating `FOO`...\n LL | static FOO: () = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating `FOO`, completing the cycle\n-note: cycle used when const-evaluating + checking `FOO`\n-  --> $DIR/recursive-zst-static.rs:10:1\n-   |\n-LL | static FOO: () = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error\n "}, {"sha": "97e42a1f126c96786f8c4ac75e35831ce27cb173", "filename": "src/test/ui/recursion/recursive-static-definition.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -10,11 +10,7 @@ note: ...which requires const-evaluating `FOO`...\n LL | pub static FOO: u32 = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating `FOO`, completing the cycle\n-note: cycle used when const-evaluating + checking `FOO`\n-  --> $DIR/recursive-static-definition.rs:1:1\n-   |\n-LL | pub static FOO: u32 = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error\n "}, {"sha": "6f21539c119e0a66ce26a33a0bf646b76975d129", "filename": "src/test/ui/write-to-static-mut-in-static.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ac728e4ce2aa1a77068e1f668be71d10116a0/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr?ref=2d7ac728e4ce2aa1a77068e1f668be71d10116a0", "patch": "@@ -16,11 +16,7 @@ note: ...which requires const-evaluating `C`...\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating `C`, completing the cycle\n-note: cycle used when const-evaluating + checking `C`\n-  --> $DIR/write-to-static-mut-in-static.rs:5:1\n-   |\n-LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: cycle used when running analysis passes on this crate\n \n error: aborting due to 2 previous errors\n "}]}