{"sha": "147c9bf4d56d7a9cf5fb70270b3e68c730da7d95", "node_id": "C_kwDOAAsO6NoAKDE0N2M5YmY0ZDU2ZDdhOWNmNWZiNzAyNzBiM2U2OGM3MzBkYTdkOTU", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-08T07:24:36Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-11T21:30:10Z"}, "message": "review comments", "tree": {"sha": "bf5ace920226310d4998b383aacd1e6947cd5cc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf5ace920226310d4998b383aacd1e6947cd5cc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/147c9bf4d56d7a9cf5fb70270b3e68c730da7d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/147c9bf4d56d7a9cf5fb70270b3e68c730da7d95", "html_url": "https://github.com/rust-lang/rust/commit/147c9bf4d56d7a9cf5fb70270b3e68c730da7d95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/147c9bf4d56d7a9cf5fb70270b3e68c730da7d95/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12ddf778113b291027ff64406ce9d585281debf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/12ddf778113b291027ff64406ce9d585281debf5", "html_url": "https://github.com/rust-lang/rust/commit/12ddf778113b291027ff64406ce9d585281debf5"}], "stats": {"total": 15, "additions": 4, "deletions": 11}, "files": [{"sha": "315a2a2af1bcacebc5c6c52f7b64d8d904f51aac", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/147c9bf4d56d7a9cf5fb70270b3e68c730da7d95/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147c9bf4d56d7a9cf5fb70270b3e68c730da7d95/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=147c9bf4d56d7a9cf5fb70270b3e68c730da7d95", "patch": "@@ -2129,29 +2129,24 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     let infcx = tcx.infer_ctxt().build();\n                     // We create a fresh `ty::ParamEnv` instead of the one for `self.item_def_id()`\n                     // to avoid a cycle error in `src/test/ui/resolve/issue-102946.rs`.\n-                    let param_env = ty::ParamEnv::new(\n-                        ty::List::empty(),\n-                        traits::Reveal::All,\n-                        hir::Constness::NotConst,\n-                    );\n+                    let param_env = ty::ParamEnv::empty();\n                     let traits: Vec<_> = self\n                         .tcx()\n                         .all_traits()\n                         .filter(|trait_def_id| {\n                             // Consider only traits with the associated type\n                             tcx.associated_items(*trait_def_id)\n                                 .in_definition_order()\n-                                .find(|i| {\n+                                .any(|i| {\n                                     i.kind.namespace() == Namespace::TypeNS\n                                         && i.ident(tcx).normalize_to_macros_2_0() == assoc_ident\n                                         && matches!(i.kind, ty::AssocKind::Type)\n                                 })\n-                                .is_some()\n                             // Consider only accessible traits\n                             && tcx.visibility(*trait_def_id)\n                                 .is_accessible_from(self.item_def_id(), tcx)\n                             && tcx.all_impls(*trait_def_id)\n-                                .filter(|impl_def_id| {\n+                                .any(|impl_def_id| {\n                                     let trait_ref = tcx.impl_trait_ref(impl_def_id);\n                                     trait_ref.map_or(false, |impl_| {\n                                         infcx\n@@ -2164,8 +2159,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                     })\n                                     && tcx.impl_polarity(impl_def_id) != ty::ImplPolarity::Negative\n                                 })\n-                                .next()\n-                                .is_some()\n                         })\n                         .map(|trait_def_id| tcx.def_path_str(trait_def_id))\n                         .collect();\n@@ -2305,7 +2298,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     .filter_map(|impl_def_id| tcx.impl_trait_ref(impl_def_id))\n                     .map(|impl_| impl_.self_ty())\n                     // We don't care about blanket impls.\n-                    .filter(|self_ty| !self_ty.has_non_region_infer())\n+                    .filter(|self_ty| !self_ty.has_non_region_param())\n                     .map(|self_ty| tcx.erase_regions(self_ty).to_string())\n                     .collect()\n             };"}]}