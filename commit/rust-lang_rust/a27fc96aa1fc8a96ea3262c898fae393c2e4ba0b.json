{"sha": "a27fc96aa1fc8a96ea3262c898fae393c2e4ba0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyN2ZjOTZhYTFmYzhhOTZlYTMyNjJjODk4ZmFlMzkzYzJlNGJhMGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-17T11:05:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-17T11:05:02Z"}, "message": "better formatting when adding trait members\n\n* it's conventional not to use one-liners\n* new placement is more predictable, b/c it does not depend on\n  header's length", "tree": {"sha": "955b4138831cf98b20a7aa64aa9f642a1411e145", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/955b4138831cf98b20a7aa64aa9f642a1411e145"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a27fc96aa1fc8a96ea3262c898fae393c2e4ba0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a27fc96aa1fc8a96ea3262c898fae393c2e4ba0b", "html_url": "https://github.com/rust-lang/rust/commit/a27fc96aa1fc8a96ea3262c898fae393c2e4ba0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a27fc96aa1fc8a96ea3262c898fae393c2e4ba0b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16256ee2c612a09e854f5f7ec54864dde5e2f82a", "url": "https://api.github.com/repos/rust-lang/rust/commits/16256ee2c612a09e854f5f7ec54864dde5e2f82a", "html_url": "https://github.com/rust-lang/rust/commit/16256ee2c612a09e854f5f7ec54864dde5e2f82a"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "c82447b849a0af0fe0f483496b4a70d3ad2a7c18", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a27fc96aa1fc8a96ea3262c898fae393c2e4ba0b/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a27fc96aa1fc8a96ea3262c898fae393c2e4ba0b/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=a27fc96aa1fc8a96ea3262c898fae393c2e4ba0b", "patch": "@@ -109,6 +109,7 @@ fn add_missing_impl_members_inner(\n         let replaced_text_range = TextUnit::of_str(&func_bodies);\n \n         edit.replace(changed_range, func_bodies);\n+        // FIXME: place the cursor on the first unimplemented?\n         edit.set_cursor(\n             changed_range.start() + replaced_text_range - TextUnit::of_str(&trailing_whitespace),\n         );\n@@ -138,7 +139,7 @@ fn build_func_body(def: &ast::FnDef) -> String {\n \n     for child in def.syntax().children_with_tokens() {\n         match (child.prev_sibling_or_token().map(|c| c.kind()), child.kind()) {\n-            (_, SyntaxKind::SEMI) => buf.push_str(\" { unimplemented!() }\"),\n+            (_, SyntaxKind::SEMI) => buf.push_str(\" {\\n    unimplemented!()\\n}\"),\n             (_, SyntaxKind::ATTR) | (_, SyntaxKind::COMMENT) => {}\n             (Some(SyntaxKind::ATTR), SyntaxKind::WHITESPACE)\n             | (Some(SyntaxKind::COMMENT), SyntaxKind::WHITESPACE) => {}\n@@ -182,8 +183,12 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n-    fn foo(&self) { unimplemented!() }\n-    fn baz(&self) { unimplemented!() }<|>\n+    fn foo(&self) {\n+        unimplemented!()\n+    }\n+    fn baz(&self) {\n+        unimplemented!()\n+    }<|>\n }\",\n         );\n     }\n@@ -216,7 +221,9 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n-    fn foo(&self) { unimplemented!() }<|>\n+    fn foo(&self) {\n+        unimplemented!()\n+    }<|>\n }\",\n         );\n     }\n@@ -233,7 +240,9 @@ impl Foo for S { <|> }\",\n trait Foo { fn foo(&self); }\n struct S;\n impl Foo for S {\n-    fn foo(&self) { unimplemented!() }<|>\n+    fn foo(&self) {\n+        unimplemented!()\n+    }<|>\n }\",\n         );\n     }\n@@ -250,7 +259,9 @@ impl Foo for S {}<|>\",\n trait Foo { fn foo(&self); }\n struct S;\n impl Foo for S {\n-    fn foo(&self) { unimplemented!() }<|>\n+    fn foo(&self) {\n+        unimplemented!()\n+    }<|>\n }\",\n         )\n     }\n@@ -301,7 +312,9 @@ struct S;\n \n mod my_mod {\n     impl crate::Foo for S {\n-        fn valid(some: u32) -> bool { unimplemented!() }<|>\n+        fn valid(some: u32) -> bool {\n+            unimplemented!()\n+        }<|>\n     }\n }\",\n         )\n@@ -329,7 +342,9 @@ trait Foo {\n }\n struct S;\n impl Foo for S {\n-    fn foo(&self) { unimplemented!() }<|>\n+    fn foo(&self) {\n+        unimplemented!()\n+    }<|>\n }\"#,\n         )\n     }"}]}