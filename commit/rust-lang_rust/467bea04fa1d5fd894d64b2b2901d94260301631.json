{"sha": "467bea04fa1d5fd894d64b2b2901d94260301631", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2N2JlYTA0ZmExZDVmZDg5NGQ2NGIyYjI5MDFkOTQyNjAzMDE2MzE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-11T05:26:41Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-13T09:07:39Z"}, "message": "librustc: Forbid inherent implementations that aren't adjacent to the\ntype they provide an implementation for.\n\nThis breaks code like:\n\n    mod foo {\n        struct Foo { ... }\n    }\n\n    impl foo::Foo {\n        ...\n    }\n\nChange this code to:\n\n    mod foo {\n        struct Foo { ... }\n\n        impl Foo {\n            ...\n        }\n    }\n\nAdditionally, if you used the I/O path extension methods `stat`,\n`lstat`, `exists`, `is_file`, or `is_dir`, note that these methods have\nbeen moved to the the `std::io::fs::PathExtensions` trait. This breaks\ncode like:\n\n    fn is_it_there() -> bool {\n        Path::new(\"/foo/bar/baz\").exists()\n    }\n\nChange this code to:\n\n    use std::io::fs::PathExtensions;\n\n    fn is_it_there() -> bool {\n        Path::new(\"/foo/bar/baz\").exists()\n    }\n\nCloses #17059.\n\nRFC #155.\n\n[breaking-change]", "tree": {"sha": "a57cedfccc75f43f37995d0de6f9cb3f1bf27900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a57cedfccc75f43f37995d0de6f9cb3f1bf27900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/467bea04fa1d5fd894d64b2b2901d94260301631", "comment_count": 17, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/467bea04fa1d5fd894d64b2b2901d94260301631", "html_url": "https://github.com/rust-lang/rust/commit/467bea04fa1d5fd894d64b2b2901d94260301631", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/467bea04fa1d5fd894d64b2b2901d94260301631/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9cf19889ae7030c7df25cf41105906d12616f1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cf19889ae7030c7df25cf41105906d12616f1e", "html_url": "https://github.com/rust-lang/rust/commit/a9cf19889ae7030c7df25cf41105906d12616f1e"}], "stats": {"total": 125, "additions": 89, "deletions": 36}, "files": [{"sha": "dfc0b7c16280e52bdddeb4225a6fba9898ea1ffd", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -20,6 +20,7 @@ use util::logv;\n use util;\n \n use std::io::File;\n+use std::io::fs::PathExtensions;\n use std::io::fs;\n use std::io::net::tcp;\n use std::io::process::ProcessExit;"}, {"sha": "0cc9bb1a8aa6c0218edcedbb4896dc74e07aa848", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -37,6 +37,7 @@\n \n use std::cell::Cell;\n use std::{cmp, os, path};\n+use std::io::fs::PathExtensions;\n use std::io::fs;\n use std::path::is_sep;\n use std::string::String;"}, {"sha": "e5165929ad3884c1e78250695944f34b18c21609", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -21,6 +21,7 @@ use std::rt::rtio;\n use super::file;\n use super::util;\n \n+#[cfg(windows)] use std::io::fs::PathExtensions;\n #[cfg(windows)] use std::string::String;\n #[cfg(unix)] use super::c;\n #[cfg(unix)] use super::retry;"}, {"sha": "9a38105b70bea71d557ec9495560beb13cc84709", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -28,6 +28,7 @@ use util::ppaux;\n use util::sha2::{Digest, Sha256};\n \n use std::char;\n+use std::io::fs::PathExtensions;\n use std::io::{fs, TempDir, Command};\n use std::io;\n use std::mem;"}, {"sha": "148aaf9568675ce08bc1d6bef0053bf8434f634c", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -11,9 +11,10 @@\n #![allow(non_camel_case_types)]\n \n use std::cell::RefCell;\n-use std::os;\n-use std::io::fs;\n use std::collections::HashSet;\n+use std::io::fs::PathExtensions;\n+use std::io::fs;\n+use std::os;\n \n use util::fs as myfs;\n "}, {"sha": "fc20a86af70643239d4648847c3177b5441977ec", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -229,6 +229,7 @@ use util::fs;\n \n use std::c_str::ToCStr;\n use std::cmp;\n+use std::io::fs::PathExtensions;\n use std::io;\n use std::mem;\n use std::ptr;"}, {"sha": "12dc04010e4bbc53b107c1d9e0118256e6d77845", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -1313,10 +1313,6 @@ impl<'a> Resolver<'a> {\n                 // If this implements an anonymous trait, then add all the\n                 // methods within to a new module, if the type was defined\n                 // within this module.\n-                //\n-                // FIXME (#3785): This is quite unsatisfactory. Perhaps we\n-                // should modify anonymous traits to only be implementable in\n-                // the same module that declared the type.\n \n                 // Create the module and add all methods.\n                 match ty.node {\n@@ -1400,7 +1396,13 @@ impl<'a> Resolver<'a> {\n                             }\n                         }\n                     }\n-                    _ => {}\n+                    _ => {\n+                        self.resolve_error(ty.span,\n+                                           \"inherent implementations may \\\n+                                            only be implemented in the same \\\n+                                            module as the type they are \\\n+                                            implemented for\")\n+                    }\n                 }\n \n                 parent"}, {"sha": "060dda5934f8e3f7d0f454815fe04eb5ec6b5bc4", "filename": "src/librustc_back/archive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibrustc_back%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibrustc_back%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farchive.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -10,6 +10,7 @@\n \n //! A helper class for dealing with static archives\n \n+use std::io::fs::PathExtensions;\n use std::io::process::{Command, ProcessOutput};\n use std::io::{fs, TempDir};\n use std::io;"}, {"sha": "06346e0b6b91811efc8f78145a9c4ff9361f0a58", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -35,6 +35,7 @@\n \n use std::collections::{HashMap, HashSet};\n use std::fmt;\n+use std::io::fs::PathExtensions;\n use std::io::{fs, File, BufferedWriter, MemWriter, BufferedReader};\n use std::io;\n use std::str;"}, {"sha": "b7b7d1fb93d1a2d822eb33d6c7fc81f7ac7a5143", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -31,6 +31,7 @@ particular bits of it, etc.\n \n ```rust\n # #![allow(unused_must_use)]\n+use std::io::fs::PathExtensions;\n use std::io::{File, fs};\n \n let path = Path::new(\"foo.txt\");\n@@ -622,8 +623,9 @@ pub fn rmdir(path: &Path) -> IoResult<()> {\n /// # Example\n ///\n /// ```rust\n-/// use std::io;\n+/// use std::io::fs::PathExtensions;\n /// use std::io::fs;\n+/// use std::io;\n ///\n /// // one possible implementation of fs::walk_dir only visiting files\n /// fn visit_dirs(dir: &Path, cb: |&Path|) -> io::IoResult<()> {\n@@ -868,45 +870,54 @@ impl Seek for File {\n     }\n }\n \n-impl path::Path {\n+/// Utility methods for paths.\n+pub trait PathExtensions {\n     /// Get information on the file, directory, etc at this path.\n     ///\n     /// Consult the `fs::stat` documentation for more info.\n     ///\n     /// This call preserves identical runtime/error semantics with `file::stat`.\n-    pub fn stat(&self) -> IoResult<FileStat> { stat(self) }\n+    fn stat(&self) -> IoResult<FileStat>;\n \n     /// Get information on the file, directory, etc at this path, not following\n     /// symlinks.\n     ///\n     /// Consult the `fs::lstat` documentation for more info.\n     ///\n     /// This call preserves identical runtime/error semantics with `file::lstat`.\n-    pub fn lstat(&self) -> IoResult<FileStat> { lstat(self) }\n+    fn lstat(&self) -> IoResult<FileStat>;\n \n     /// Boolean value indicator whether the underlying file exists on the local\n     /// filesystem. Returns false in exactly the cases where `fs::stat` fails.\n-    pub fn exists(&self) -> bool {\n-        self.stat().is_ok()\n-    }\n+    fn exists(&self) -> bool;\n \n     /// Whether the underlying implementation (be it a file path, or something\n     /// else) points at a \"regular file\" on the FS. Will return false for paths\n     /// to non-existent locations or directories or other non-regular files\n     /// (named pipes, etc). Follows links when making this determination.\n-    pub fn is_file(&self) -> bool {\n-        match self.stat() {\n-            Ok(s) => s.kind == io::TypeFile,\n-            Err(..) => false\n-        }\n-    }\n+    fn is_file(&self) -> bool;\n \n     /// Whether the underlying implementation (be it a file path, or something\n     /// else) is pointing at a directory in the underlying FS. Will return\n     /// false for paths to non-existent locations or if the item is not a\n     /// directory (eg files, named pipes, etc). Follows links when making this\n     /// determination.\n-    pub fn is_dir(&self) -> bool {\n+    fn is_dir(&self) -> bool;\n+}\n+\n+impl PathExtensions for path::Path {\n+    fn stat(&self) -> IoResult<FileStat> { stat(self) }\n+    fn lstat(&self) -> IoResult<FileStat> { lstat(self) }\n+    fn exists(&self) -> bool {\n+        self.stat().is_ok()\n+    }\n+    fn is_file(&self) -> bool {\n+        match self.stat() {\n+            Ok(s) => s.kind == io::TypeFile,\n+            Err(..) => false\n+        }\n+    }\n+    fn is_dir(&self) -> bool {\n         match self.stat() {\n             Ok(s) => s.kind == io::TypeDirectory,\n             Err(..) => false"}, {"sha": "7a2bcab8706da357a1b0731713a2122766d25f7f", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -1721,6 +1721,7 @@ pub enum FileType {\n /// # Example\n ///\n /// ```\n+/// # use std::io::fs::PathExtensions;\n /// # fn main() {}\n /// # fn foo() {\n /// let info = match Path::new(\"foo.txt\").stat() {"}, {"sha": "d84848545bda8c2d4242d2f2bf8a1ba96fe2303d", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -53,6 +53,8 @@ actually operates on the path; it is only intended for display.\n ## Example\n \n ```rust\n+use std::io::fs::PathExtensions;\n+\n let mut path = Path::new(\"/tmp/path\");\n println!(\"path: {}\", path.display());\n path.set_filename(\"foo\");"}, {"sha": "b4c8ecb38120a4a332db09ac2e1d29c270642b85", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -82,6 +82,7 @@ use parse::{new_sub_parser_from_file, ParseSess};\n use owned_slice::OwnedSlice;\n \n use std::collections::HashSet;\n+use std::io::fs::PathExtensions;\n use std::mem::replace;\n use std::rc::Rc;\n use std::gc::{Gc, GC};"}, {"sha": "a89afab505b8d26e3e4eb09495d3e9a3e131f178", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -13,6 +13,7 @@\n //! Does not support hashed database, only filesystem!\n \n use std::io::File;\n+use std::io::fs::PathExtensions;\n use std::os::getenv;\n use std::os;\n "}, {"sha": "ea5c8424ea3022bf9be32912040bfb943839fc6a", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -56,6 +56,7 @@ use std::f64;\n use std::fmt;\n use std::fmt::Show;\n use std::from_str::FromStr;\n+use std::io::fs::PathExtensions;\n use std::io::stdio::StdWriter;\n use std::io::{File, ChanReader, ChanWriter};\n use std::io;"}, {"sha": "94acea06618385a83e54a6a30afcaba468b474b8", "filename": "src/test/auxiliary/inner_static.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Ftest%2Fauxiliary%2Finner_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Ftest%2Fauxiliary%2Finner_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finner_static.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -13,6 +13,18 @@ pub struct B<T>;\n \n pub mod test {\n     pub struct A<T>;\n+\n+    impl<T> A<T> {\n+        pub fn foo(&self) -> int {\n+            static a: int = 5;\n+            return a\n+        }\n+\n+        pub fn bar(&self) -> int {\n+            static a: int = 6;\n+            return a;\n+        }\n+    }\n }\n \n impl<T> A<T> {\n@@ -39,18 +51,6 @@ impl<T> B<T> {\n     }\n }\n \n-impl<T> test::A<T> {\n-    pub fn foo(&self) -> int {\n-        static a: int = 5;\n-        return a\n-    }\n-\n-    pub fn bar(&self) -> int {\n-        static a: int = 6;\n-        return a;\n-    }\n-}\n-\n pub fn foo() -> int {\n     let a = A::<()>;\n     let b = B::<()>;"}, {"sha": "7a5428d63e83faf267ae5f09c04a14ff200fe800", "filename": "src/test/compile-fail/impl-not-adjacent-to-type.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Ftest%2Fcompile-fail%2Fimpl-not-adjacent-to-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Ftest%2Fcompile-fail%2Fimpl-not-adjacent-to-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-not-adjacent-to-type.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod foo {\n+    pub struct Foo {\n+        x: int,\n+        y: int,\n+    }\n+}\n+\n+impl foo::Foo {\n+//~^ ERROR implementations may only be implemented in the same module\n+    fn bar() {}\n+}\n+\n+fn main() {}\n+"}, {"sha": "e1918335a14788375cd48dee65afe8d5d77a4e96", "filename": "src/test/run-pass/rename-directory.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Ftest%2Frun-pass%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Ftest%2Frun-pass%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frename-directory.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -14,9 +14,10 @@\n extern crate libc;\n \n use std::io::TempDir;\n-use std::os;\n-use std::io;\n+use std::io::fs::PathExtensions;\n use std::io::fs;\n+use std::io;\n+use std::os;\n \n fn rename_directory() {\n     unsafe {"}, {"sha": "67728e6c8dd44cda71411367e1d523e27c3976e2", "filename": "src/test/run-pass/stat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+use std::io::fs::PathExtensions;\n use std::io::{File, TempDir};\n \n pub fn main() {"}, {"sha": "322bdc8f3bb77d3e43d7d18c4bc89ef1613c99b5", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467bea04fa1d5fd894d64b2b2901d94260301631/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=467bea04fa1d5fd894d64b2b2901d94260301631", "patch": "@@ -20,6 +20,7 @@\n \n extern crate debug;\n \n+use std::io::fs::PathExtensions;\n use std::io::{fs, TempDir};\n use std::io;\n use std::os;"}]}