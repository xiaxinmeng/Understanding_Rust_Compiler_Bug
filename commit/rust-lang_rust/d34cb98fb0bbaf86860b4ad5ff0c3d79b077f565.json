{"sha": "d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565", "node_id": "C_kwDOAAsO6NoAKGQzNGNiOThmYjBiYmFmODY4NjBiNGFkNWZmMGMzZDc5YjA3N2Y1NjU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-31T04:03:24Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-09T01:31:44Z"}, "message": "Lower RPITIT to ImplTraitPlaceholder item", "tree": {"sha": "31f9a2b56052f3bfed4ee797ffca15678c985cb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31f9a2b56052f3bfed4ee797ffca15678c985cb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565", "html_url": "https://github.com/rust-lang/rust/commit/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78b962a4f348c0b901d2eae9e5852cb3675b1233", "url": "https://api.github.com/repos/rust-lang/rust/commits/78b962a4f348c0b901d2eae9e5852cb3675b1233", "html_url": "https://github.com/rust-lang/rust/commit/78b962a4f348c0b901d2eae9e5852cb3675b1233"}], "stats": {"total": 107, "additions": 99, "deletions": 8}, "files": [{"sha": "2e8fcd7dca45a7505f2d587839133ccb3628c2da", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565", "patch": "@@ -255,6 +255,8 @@ enum ImplTraitContext {\n     },\n     /// Impl trait in type aliases.\n     TypeAliasesOpaqueTy,\n+    /// Return-position `impl Trait` in trait definition\n+    InTrait,\n     /// `impl Trait` is not accepted in this position.\n     Disallowed(ImplTraitPosition),\n }\n@@ -323,9 +325,17 @@ enum FnDeclKind {\n }\n \n impl FnDeclKind {\n-    fn impl_trait_return_allowed(&self) -> bool {\n+    fn impl_trait_return_allowed(&self, tcx: TyCtxt<'_>) -> bool {\n         match self {\n             FnDeclKind::Fn | FnDeclKind::Inherent => true,\n+            FnDeclKind::Impl if tcx.features().return_position_impl_trait_in_trait => true,\n+            _ => false,\n+        }\n+    }\n+\n+    fn impl_trait_in_trait_allowed(&self, tcx: TyCtxt<'_>) -> bool {\n+        match self {\n+            FnDeclKind::Trait if tcx.features().return_position_impl_trait_in_trait => true,\n             _ => false,\n         }\n     }\n@@ -1346,6 +1356,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             &mut nested_itctx,\n                         )\n                     }\n+                    ImplTraitContext::InTrait => {\n+                        // FIXME(RPITIT): Should we use def_node_id here?\n+                        self.lower_impl_trait_in_trait(span, def_node_id, bounds)\n+                    }\n                     ImplTraitContext::Universal => {\n                         let span = t.span;\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n@@ -1532,6 +1546,32 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::TyKind::OpaqueDef(hir::ItemId { def_id: opaque_ty_def_id }, lifetimes)\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self))]\n+    fn lower_impl_trait_in_trait(\n+        &mut self,\n+        span: Span,\n+        opaque_ty_node_id: NodeId,\n+        bounds: &GenericBounds,\n+    ) -> hir::TyKind<'hir> {\n+        let opaque_ty_def_id = self.local_def_id(opaque_ty_node_id);\n+        self.with_hir_id_owner(opaque_ty_node_id, |lctx| {\n+            // FIXME(RPITIT): This should be a more descriptive ImplTraitPosition, i.e. nested RPITIT\n+            // FIXME(RPITIT): We _also_ should support this eventually\n+            let hir_bounds = lctx\n+                .lower_param_bounds(bounds, ImplTraitContext::Disallowed(ImplTraitPosition::Trait));\n+            let rpitit_placeholder = hir::ImplTraitPlaceholder { bounds: hir_bounds };\n+            let rpitit_item = hir::Item {\n+                def_id: opaque_ty_def_id,\n+                ident: Ident::empty(),\n+                kind: hir::ItemKind::ImplTraitPlaceholder(rpitit_placeholder),\n+                span: lctx.lower_span(span),\n+                vis_span: lctx.lower_span(span.shrink_to_lo()),\n+            };\n+            hir::OwnerNode::Item(lctx.arena.alloc(rpitit_item))\n+        });\n+        hir::TyKind::ImplTraitInTrait(hir::ItemId { def_id: opaque_ty_def_id })\n+    }\n+\n     /// Registers a new opaque type with the proper `NodeId`s and\n     /// returns the lowered node-ID for the opaque type.\n     fn generate_opaque_type(\n@@ -1690,12 +1730,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             match decl.output {\n                 FnRetTy::Ty(ref ty) => {\n                     let mut context = match fn_node_id {\n-                        Some(fn_node_id) if kind.impl_trait_return_allowed() => {\n+                        Some(fn_node_id) if kind.impl_trait_return_allowed(self.tcx) => {\n                             let fn_def_id = self.local_def_id(fn_node_id);\n                             ImplTraitContext::ReturnPositionOpaqueTy {\n                                 origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n                             }\n                         }\n+                        Some(_) if kind.impl_trait_in_trait_allowed(self.tcx) => {\n+                            ImplTraitContext::InTrait\n+                        }\n                         _ => ImplTraitContext::Disallowed(match kind {\n                             FnDeclKind::Fn | FnDeclKind::Inherent => {\n                                 unreachable!(\"fn should allow in-band lifetimes\")"}, {"sha": "3b8032040e76cc53aea112f497c74ed1325ea3e2", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565", "patch": "@@ -487,6 +487,8 @@ declare_features! (\n     (incomplete, repr128, \"1.16.0\", Some(56071), None),\n     /// Allows `repr(simd)` and importing the various simd intrinsics.\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n+    /// Allows return-position `impl Trait` in traits.\n+    (incomplete, return_position_impl_trait_in_trait, \"CURRENT_RUSTC_VERSION\", Some(91611), None),\n     /// Allows `extern \"rust-cold\"`.\n     (active, rust_cold_cc, \"1.63.0\", Some(97544), None),\n     /// Allows the use of SIMD types in functions declared in `extern` blocks."}, {"sha": "0e9b05729d29e8192dfedbf3c722814563fa9657", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565", "patch": "@@ -105,6 +105,7 @@ impl Target {\n             DefKind::GlobalAsm => Target::GlobalAsm,\n             DefKind::TyAlias => Target::TyAlias,\n             DefKind::OpaqueTy => Target::OpaqueTy,\n+            DefKind::ImplTraitPlaceholder => Target::ImplTraitPlaceholder,\n             DefKind::Enum => Target::Enum,\n             DefKind::Struct => Target::Struct,\n             DefKind::Union => Target::Union,"}, {"sha": "279c8c8d6d16db9ff922115c0bbf7cb3bb94084d", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565", "patch": "@@ -2,6 +2,7 @@ use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty::diagnostics::suggest_constraining_type_param;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::{self, BoundRegionKind, Region, Ty, TyCtxt};\n+use hir::def::DefKind;\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n use rustc_errors::{pluralize, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n@@ -538,7 +539,7 @@ impl<T> Trait<T> for X {\n                             diag.span_label(p_span, \"this type parameter\");\n                         }\n                     }\n-                    (ty::Projection(proj_ty), _) => {\n+                    (ty::Projection(proj_ty), _) if self.def_kind(proj_ty.item_def_id) != DefKind::ImplTraitPlaceholder => {\n                         self.expected_projection(\n                             diag,\n                             proj_ty,\n@@ -547,7 +548,7 @@ impl<T> Trait<T> for X {\n                             cause.code(),\n                         );\n                     }\n-                    (_, ty::Projection(proj_ty)) => {\n+                    (_, ty::Projection(proj_ty)) if self.def_kind(proj_ty.item_def_id) != DefKind::ImplTraitPlaceholder => {\n                         let msg = format!(\n                             \"consider constraining the associated type `{}` to `{}`\",\n                             values.found, values.expected,"}, {"sha": "c5c5d3473418c3f9c5397d540feb844a88615a1c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565", "patch": "@@ -11,6 +11,7 @@ use crate::ty::{\n     TypeVisitor,\n };\n use crate::ty::{List, ParamEnv};\n+use hir::def::DefKind;\n use polonius_engine::Atom;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::intern::Interned;\n@@ -1196,7 +1197,9 @@ pub struct ProjectionTy<'tcx> {\n \n impl<'tcx> ProjectionTy<'tcx> {\n     pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {\n-        tcx.parent(self.item_def_id)\n+        let parent = tcx.parent(self.item_def_id);\n+        assert_eq!(tcx.def_kind(parent), DefKind::Trait);\n+        parent\n     }\n \n     /// Extracts the underlying trait reference and own substs from this projection."}, {"sha": "e9e4f8fc483c593b6f9aac4a7facb047ec20fe5d", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565", "patch": "@@ -597,7 +597,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 }\n             }\n             hir::ItemKind::ImplTraitPlaceholder(..) => {\n-                // FIXME(RPITIT): We don't need to do anything here, right?\n+                // FIXME(RPITIT): We don't need to do anything special here, right?\n+                intravisit::walk_item(self, item);\n             }\n             hir::ItemKind::TyAlias(_, ref generics)\n             | hir::ItemKind::Enum(_, ref generics)"}, {"sha": "4fd9e7407ce14e56548c39c1f160e47517040c67", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565", "patch": "@@ -1183,6 +1183,7 @@ symbols! {\n         require,\n         residual,\n         result,\n+        return_position_impl_trait_in_trait,\n         rhs,\n         rintf32,\n         rintf64,"}, {"sha": "cd6b42be5ad7e82c906cc31557ff107111b391f7", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565", "patch": "@@ -1465,6 +1465,11 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n     obligation: &ProjectionTyObligation<'tcx>,\n     candidate_set: &mut ProjectionCandidateSet<'tcx>,\n ) {\n+    // Can't assemble candidate from impl for RPITIT\n+    if selcx.tcx().def_kind(obligation.predicate.item_def_id) == DefKind::ImplTraitPlaceholder {\n+        return;\n+    }\n+\n     // If we are resolving `<T as TraitRef<...>>::Item == Type`,\n     // start out by selecting the predicate `T as TraitRef<...>`:\n     let poly_trait_ref = ty::Binder::dummy(obligation.predicate.trait_ref(selcx.tcx()));"}, {"sha": "6eec2c57639c68b5ffde7a3658c7337e964ae8dd", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565", "patch": "@@ -2638,8 +2638,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     ref i => bug!(\"`impl Trait` pointed to non-opaque type?? {:#?}\", i),\n                 }\n             }\n-            hir::TyKind::ImplTraitInTrait(..) => {\n-                span_bug!(ast_ty.span, \"not yet implemented\")\n+            hir::TyKind::ImplTraitInTrait(item_id) => {\n+                let def_id = item_id.def_id.to_def_id();\n+                tcx.mk_projection(def_id, InternalSubsts::identity_for_item(tcx, def_id))\n             }\n             hir::TyKind::Path(hir::QPath::TypeRelative(ref qself, ref segment)) => {\n                 debug!(?qself, ?segment);"}, {"sha": "5429598871d990a9fe5cb4448d9356d4af6365da", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565", "patch": "@@ -1600,6 +1600,11 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 // inherit the generics of the item.\n                 Some(parent_id.to_def_id())\n             }\n+            ItemKind::ImplTraitPlaceholder(_) => {\n+                let parent_id = tcx.hir().get_parent_item(hir_id).to_def_id();\n+                assert_eq!(tcx.def_kind(parent_id), DefKind::AssocFn);\n+                Some(parent_id)\n+            }\n             _ => None,\n         },\n         _ => None,"}, {"sha": "fe8d8f54f0477bfb0ea0b9e3f98ed8b9947ec469", "filename": "compiler/rustc_typeck/src/collect/item_bounds.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=d34cb98fb0bbaf86860b4ad5ff0c3d79b077f565", "patch": "@@ -74,6 +74,29 @@ fn opaque_type_bounds<'tcx>(\n     })\n }\n \n+/// Opaque types don't inherit bounds from their parent: for return position\n+/// impl trait it isn't possible to write a suitable predicate on the\n+/// containing function and for type-alias impl trait we don't have a backwards\n+/// compatibility issue.\n+fn impl_trait_in_trait_item_bounds<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    opaque_def_id: DefId,\n+    ast_bounds: &'tcx [hir::GenericBound<'tcx>],\n+    span: Span,\n+) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n+    ty::print::with_no_queries!({\n+        // FIXME(RPITIT): DRY-er code please\n+        let item_ty =\n+            tcx.mk_projection(opaque_def_id, InternalSubsts::identity_for_item(tcx, opaque_def_id));\n+\n+        let icx = ItemCtxt::new(tcx, opaque_def_id);\n+        let mut bounds = <dyn AstConv<'_>>::compute_bounds(&icx, item_ty, ast_bounds);\n+        // RPITITs are implicitly sized unless a `?Sized` bound is found\n+        <dyn AstConv<'_>>::add_implicitly_sized(&icx, &mut bounds, ast_bounds, None, span);\n+        tcx.arena.alloc_from_iter(bounds.predicates(tcx, item_ty))\n+    })\n+}\n+\n pub(super) fn explicit_item_bounds(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n@@ -90,6 +113,11 @@ pub(super) fn explicit_item_bounds(\n             span,\n             ..\n         }) => opaque_type_bounds(tcx, def_id, bounds, *span),\n+        hir::Node::Item(hir::Item {\n+            kind: hir::ItemKind::ImplTraitPlaceholder(hir::ImplTraitPlaceholder { bounds }),\n+            span,\n+            ..\n+        }) => impl_trait_in_trait_item_bounds(tcx, def_id, bounds, *span),\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n     }\n }"}]}