{"sha": "0b1ab91d6604cf3277ef562eabd04f107015de58", "node_id": "C_kwDOAAsO6NoAKDBiMWFiOTFkNjYwNGNmMzI3N2VmNTYyZWFiZDA0ZjEwNzAxNWRlNTg", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-11-18T20:59:12Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-07T19:50:42Z"}, "message": "Deserialization less in associated_item_def_ids", "tree": {"sha": "e9075aecdcee6fe3e2abbd01c0499adb30be2bc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9075aecdcee6fe3e2abbd01c0499adb30be2bc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b1ab91d6604cf3277ef562eabd04f107015de58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1ab91d6604cf3277ef562eabd04f107015de58", "html_url": "https://github.com/rust-lang/rust/commit/0b1ab91d6604cf3277ef562eabd04f107015de58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b1ab91d6604cf3277ef562eabd04f107015de58/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e012a191d768adeda1ee36a99ef8b92d51920154", "url": "https://api.github.com/repos/rust-lang/rust/commits/e012a191d768adeda1ee36a99ef8b92d51920154", "html_url": "https://github.com/rust-lang/rust/commit/e012a191d768adeda1ee36a99ef8b92d51920154"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "5dbd26694c520249c70e4ef32b623b0c55ca75a0", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b1ab91d6604cf3277ef562eabd04f107015de58/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1ab91d6604cf3277ef562eabd04f107015de58/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=0b1ab91d6604cf3277ef562eabd04f107015de58", "patch": "@@ -1258,6 +1258,16 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n+    fn get_associated_item_def_ids(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {\n+        if let Some(children) = self.root.tables.children.get(self, id) {\n+            tcx.arena.alloc_from_iter(\n+                children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),\n+            )\n+        } else {\n+            &[]\n+        }\n+    }\n+\n     fn get_associated_item(&self, id: DefIndex, sess: &Session) -> ty::AssocItem {\n         let def_key = self.def_key(id);\n         let parent = self.local_def_id(def_key.parent.unwrap());"}, {"sha": "804f277e26e12c94661a42413b702c6498ec332b", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b1ab91d6604cf3277ef562eabd04f107015de58/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1ab91d6604cf3277ef562eabd04f107015de58/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=0b1ab91d6604cf3277ef562eabd04f107015de58", "patch": "@@ -103,12 +103,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         tcx.calculate_dtor(def_id, |_,_| Ok(()))\n     }\n     variances_of => { tcx.arena.alloc_from_iter(cdata.get_item_variances(def_id.index)) }\n-    associated_item_def_ids => {\n-        let mut result = SmallVec::<[_; 8]>::new();\n-        cdata.each_child_of_item(def_id.index,\n-          |child| result.push(child.res.def_id()), tcx.sess);\n-        tcx.arena.alloc_slice(&result)\n-    }\n+    associated_item_def_ids => { cdata.get_associated_item_def_ids(tcx, def_id.index) }\n     associated_item => { cdata.get_associated_item(def_id.index, tcx.sess) }\n     impl_trait_ref => { cdata.get_impl_trait(def_id.index, tcx) }\n     impl_polarity => { cdata.get_impl_polarity(def_id.index) }"}]}