{"sha": "6f2cab1368dafc5663bb591a45062280a94a4ef9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMmNhYjEzNjhkYWZjNTY2M2JiNTkxYTQ1MDYyMjgwYTk0YTRlZjk=", "commit": {"author": {"name": "Adam Bratschi-Kaye", "email": "ark.email@gmail.com", "date": "2020-02-13T10:10:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-13T10:10:50Z"}, "message": "Add error context to failures in `ra_project_model` using `anyhow` crate (#3119)\n\nAdd error context to failures in ra_project_model using anyhow crate", "tree": {"sha": "ec226a181f8603e9f3e173dbdb33fdc2e96ae40c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec226a181f8603e9f3e173dbdb33fdc2e96ae40c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f2cab1368dafc5663bb591a45062280a94a4ef9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRSCqCRBK7hj4Ov3rIwAAdHIIAGhryzmXEGkdS/eA0J+a+a1Y\nQf838RDG0GzS17bROELMn4/ME8sTzFISwHniS5HKQSxZhu0FSJyWMmWcxhSD82Zp\nXWMa9J7d9cnno7t5FJgD4TpY6Mj7I2TYpqAgBt2L1AhAkz4EpAxLm1DKgG88YFes\nk54de5zDRMR4/lZ9gp5YhTx/4OMYGq2YTBaqB0coz0rBoLi0iT7fyja56rJlodwL\nsmkoVf7FrAUdhGaU/HF5kT1BxwfxuWRNz+p59MqUUxJr+g8a4baUjYTAFck3BC8w\nGJABdtoezcMQi48LW3EuH2AGWG7AAzUvXdBe8Osmv7/zOzITJPXuRNQOMUf8GSc=\n=621Q\n-----END PGP SIGNATURE-----\n", "payload": "tree ec226a181f8603e9f3e173dbdb33fdc2e96ae40c\nparent 39abac8c91321d724fb34ffc1a03a54946703dc2\nauthor Adam Bratschi-Kaye <ark.email@gmail.com> 1581588650 +0100\ncommitter GitHub <noreply@github.com> 1581588650 +0100\n\nAdd error context to failures in `ra_project_model` using `anyhow` crate (#3119)\n\nAdd error context to failures in ra_project_model using anyhow crate"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f2cab1368dafc5663bb591a45062280a94a4ef9", "html_url": "https://github.com/rust-lang/rust/commit/6f2cab1368dafc5663bb591a45062280a94a4ef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f2cab1368dafc5663bb591a45062280a94a4ef9/comments", "author": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39abac8c91321d724fb34ffc1a03a54946703dc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/39abac8c91321d724fb34ffc1a03a54946703dc2", "html_url": "https://github.com/rust-lang/rust/commit/39abac8c91321d724fb34ffc1a03a54946703dc2"}], "stats": {"total": 79, "additions": 59, "deletions": 20}, "files": [{"sha": "f1651edaadc916892f8f369e5ff62f0074a94874", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f2cab1368dafc5663bb591a45062280a94a4ef9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6f2cab1368dafc5663bb591a45062280a94a4ef9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6f2cab1368dafc5663bb591a45062280a94a4ef9", "patch": "@@ -1247,6 +1247,7 @@ dependencies = [\n name = \"ra_project_model\"\n version = \"0.1.0\"\n dependencies = [\n+ \"anyhow\",\n  \"cargo_metadata\",\n  \"log\",\n  \"ra_arena\","}, {"sha": "653d5bd14591a1aec55a4b2cb7bb295ad3afe843", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2cab1368dafc5663bb591a45062280a94a4ef9/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6f2cab1368dafc5663bb591a45062280a94a4ef9/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=6f2cab1368dafc5663bb591a45062280a94a4ef9", "patch": "@@ -19,3 +19,5 @@ ra_cfg = { path = \"../ra_cfg\" }\n \n serde = { version = \"1.0.89\", features = [\"derive\"] }\n serde_json = \"1.0.39\"\n+\n+anyhow = \"1.0.26\""}, {"sha": "22d226a745b51019a275461d90ca2795358e040b", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f2cab1368dafc5663bb591a45062280a94a4ef9/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2cab1368dafc5663bb591a45062280a94a4ef9/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=6f2cab1368dafc5663bb591a45062280a94a4ef9", "patch": "@@ -2,14 +2,13 @@\n \n use std::path::{Path, PathBuf};\n \n+use anyhow::{Context, Result};\n use cargo_metadata::{CargoOpt, MetadataCommand};\n use ra_arena::{impl_arena_id, Arena, RawId};\n use ra_db::Edition;\n use rustc_hash::FxHashMap;\n use serde::Deserialize;\n \n-use crate::Result;\n-\n /// `CargoWorkspace` represents the logical structure of, well, a Cargo\n /// workspace. It pretty closely mirrors `cargo metadata` output.\n ///\n@@ -171,7 +170,9 @@ impl CargoWorkspace {\n         if let Some(parent) = cargo_toml.parent() {\n             meta.current_dir(parent);\n         }\n-        let meta = meta.exec().map_err(|e| format!(\"cargo metadata failed: {}\", e))?;\n+        let meta = meta.exec().with_context(|| {\n+            format!(\"Failed to run `cargo metadata --manifest-path {}`\", cargo_toml.display())\n+        })?;\n         let mut pkg_by_id = FxHashMap::default();\n         let mut packages = Arena::default();\n         let mut targets = Arena::default();\n@@ -181,7 +182,9 @@ impl CargoWorkspace {\n         for meta_pkg in meta.packages {\n             let cargo_metadata::Package { id, edition, name, manifest_path, .. } = meta_pkg;\n             let is_member = ws_members.contains(&id);\n-            let edition = edition.parse::<Edition>()?;\n+            let edition = edition\n+                .parse::<Edition>()\n+                .with_context(|| format!(\"Failed to parse edition {}\", edition))?;\n             let pkg = packages.alloc(PackageData {\n                 name,\n                 manifest: manifest_path,"}, {"sha": "fef405b7f51f834bc536c576bcf40b835df184a7", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6f2cab1368dafc5663bb591a45062280a94a4ef9/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2cab1368dafc5663bb591a45062280a94a4ef9/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=6f2cab1368dafc5663bb591a45062280a94a4ef9", "patch": "@@ -12,6 +12,7 @@ use std::{\n     process::Command,\n };\n \n+use anyhow::{bail, Context, Result};\n use ra_cfg::CfgOptions;\n use ra_db::{CrateGraph, CrateId, CrateName, Edition, Env, FileId};\n use rustc_hash::FxHashMap;\n@@ -23,8 +24,6 @@ pub use crate::{\n     sysroot::Sysroot,\n };\n \n-pub type Result<T> = ::std::result::Result<T, Box<dyn Error + Send + Sync>>;\n-\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct CargoTomlNotFoundError(pub PathBuf);\n \n@@ -81,15 +80,36 @@ impl ProjectWorkspace {\n     ) -> Result<ProjectWorkspace> {\n         match find_rust_project_json(path) {\n             Some(json_path) => {\n-                let file = File::open(json_path)?;\n+                let file = File::open(&json_path)\n+                    .with_context(|| format!(\"Failed to open json file {}\", json_path.display()))?;\n                 let reader = BufReader::new(file);\n-                Ok(ProjectWorkspace::Json { project: from_reader(reader)? })\n+                Ok(ProjectWorkspace::Json {\n+                    project: from_reader(reader).with_context(|| {\n+                        format!(\"Failed to deserialize json file {}\", json_path.display())\n+                    })?,\n+                })\n             }\n             None => {\n-                let cargo_toml = find_cargo_toml(path)?;\n-                let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml, cargo_features)?;\n-                let sysroot =\n-                    if with_sysroot { Sysroot::discover(&cargo_toml)? } else { Sysroot::default() };\n+                let cargo_toml = find_cargo_toml(path).with_context(|| {\n+                    format!(\"Failed to find Cargo.toml for path {}\", path.display())\n+                })?;\n+                let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml, cargo_features)\n+                    .with_context(|| {\n+                        format!(\n+                            \"Failed to read Cargo metadata from Cargo.toml file {}\",\n+                            cargo_toml.display()\n+                        )\n+                    })?;\n+                let sysroot = if with_sysroot {\n+                    Sysroot::discover(&cargo_toml).with_context(|| {\n+                        format!(\n+                            \"Failed to find sysroot for Cargo.toml file {}\",\n+                            cargo_toml.display()\n+                        )\n+                    })?\n+                } else {\n+                    Sysroot::default()\n+                };\n                 Ok(ProjectWorkspace::Cargo { cargo, sysroot })\n             }\n         }\n@@ -403,11 +423,20 @@ pub fn get_rustc_cfg_options() -> CfgOptions {\n         }\n     }\n \n-    match (|| -> Result<_> {\n+    match (|| -> Result<String> {\n         // `cfg(test)` and `cfg(debug_assertion)` are handled outside, so we suppress them here.\n-        let output = Command::new(\"rustc\").args(&[\"--print\", \"cfg\", \"-O\"]).output()?;\n+        let output = Command::new(\"rustc\")\n+            .args(&[\"--print\", \"cfg\", \"-O\"])\n+            .output()\n+            .context(\"Failed to get output from rustc --print cfg -O\")?;\n         if !output.status.success() {\n-            Err(\"failed to get rustc cfgs\")?;\n+            bail!(\n+                \"rustc --print cfg -O exited with exit code ({})\",\n+                output\n+                    .status\n+                    .code()\n+                    .map_or(String::from(\"no exit code\"), |code| format!(\"{}\", code))\n+            );\n         }\n         Ok(String::from_utf8(output.stdout)?)\n     })() {"}, {"sha": "7b9cc899c07f1ecd929cb9fe4b18766e0883f758", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f2cab1368dafc5663bb591a45062280a94a4ef9/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2cab1368dafc5663bb591a45062280a94a4ef9/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=6f2cab1368dafc5663bb591a45062280a94a4ef9", "patch": "@@ -1,5 +1,6 @@\n //! FIXME: write short doc here\n \n+use anyhow::{anyhow, bail, Context, Result};\n use std::{\n     env,\n     path::{Path, PathBuf},\n@@ -8,8 +9,6 @@ use std::{\n \n use ra_arena::{impl_arena_id, Arena, RawId};\n \n-use crate::Result;\n-\n #[derive(Default, Debug, Clone)]\n pub struct Sysroot {\n     crates: Arena<SysrootCrate, SysrootCrateData>,\n@@ -51,7 +50,7 @@ impl Sysroot {\n         let src = try_find_src_path(cargo_toml)?;\n \n         if !src.exists() {\n-            Err(format!(\n+            Err(anyhow!(\n                 \"can't load standard library from sysroot\\n\\\n                  {}\\n\\\n                  (discovered via `rustc --print sysroot`)\\n\\\n@@ -100,9 +99,14 @@ fn try_find_src_path(cargo_toml: &Path) -> Result<PathBuf> {\n         .current_dir(cargo_toml.parent().unwrap())\n         .args(&[\"--print\", \"sysroot\"])\n         .output()\n-        .map_err(|e| format!(\"rustc --print sysroot failed: {}\", e))?;\n+        .context(\"rustc --print sysroot failed\")?;\n     if !rustc_output.status.success() {\n-        Err(\"failed to locate sysroot\")?;\n+        match rustc_output.status.code() {\n+            Some(code) => {\n+                bail!(\"failed to locate sysroot: rustc --print sysroot exited with code {}\", code)\n+            }\n+            None => bail!(\"failed to locate sysroot: rustc --print sysroot terminated by signal\"),\n+        };\n     }\n     let stdout = String::from_utf8(rustc_output.stdout)?;\n     let sysroot_path = Path::new(stdout.trim());"}]}