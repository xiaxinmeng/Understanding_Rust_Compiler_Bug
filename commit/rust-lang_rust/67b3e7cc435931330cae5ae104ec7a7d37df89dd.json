{"sha": "67b3e7cc435931330cae5ae104ec7a7d37df89dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YjNlN2NjNDM1OTMxMzMwY2FlNWFlMTA0ZWM3YTdkMzdkZjg5ZGQ=", "commit": {"author": {"name": "Jimmy Brisson", "email": "theotherjimmy@gmail.com", "date": "2017-10-11T03:54:06Z"}, "committer": {"name": "Jimmy Brisson", "email": "theotherjimmy@gmail.com", "date": "2017-10-12T03:08:22Z"}, "message": "Implement query ensure\n\n`$query::ensure()` guarantees that one of two things is true after it returns:\n  - The query has all green inputs.\n  - The query has been executed.\n and counts as a read from the source query", "tree": {"sha": "09f86c9e2149715524fffdacd555dcb11a86a72f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09f86c9e2149715524fffdacd555dcb11a86a72f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67b3e7cc435931330cae5ae104ec7a7d37df89dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67b3e7cc435931330cae5ae104ec7a7d37df89dd", "html_url": "https://github.com/rust-lang/rust/commit/67b3e7cc435931330cae5ae104ec7a7d37df89dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67b3e7cc435931330cae5ae104ec7a7d37df89dd/comments", "author": {"login": "theotherjimmy", "id": 685409, "node_id": "MDQ6VXNlcjY4NTQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/685409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherjimmy", "html_url": "https://github.com/theotherjimmy", "followers_url": "https://api.github.com/users/theotherjimmy/followers", "following_url": "https://api.github.com/users/theotherjimmy/following{/other_user}", "gists_url": "https://api.github.com/users/theotherjimmy/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherjimmy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherjimmy/subscriptions", "organizations_url": "https://api.github.com/users/theotherjimmy/orgs", "repos_url": "https://api.github.com/users/theotherjimmy/repos", "events_url": "https://api.github.com/users/theotherjimmy/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherjimmy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherjimmy", "id": 685409, "node_id": "MDQ6VXNlcjY4NTQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/685409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherjimmy", "html_url": "https://github.com/theotherjimmy", "followers_url": "https://api.github.com/users/theotherjimmy/followers", "following_url": "https://api.github.com/users/theotherjimmy/following{/other_user}", "gists_url": "https://api.github.com/users/theotherjimmy/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherjimmy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherjimmy/subscriptions", "organizations_url": "https://api.github.com/users/theotherjimmy/orgs", "repos_url": "https://api.github.com/users/theotherjimmy/repos", "events_url": "https://api.github.com/users/theotherjimmy/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherjimmy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "html_url": "https://github.com/rust-lang/rust/commit/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "28397ac33d9402c5e5e88a6f9ca103b03fd48316", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e7cc435931330cae5ae104ec7a7d37df89dd/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e7cc435931330cae5ae104ec7a7d37df89dd/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=67b3e7cc435931330cae5ae104ec7a7d37df89dd", "patch": "@@ -344,6 +344,48 @@ macro_rules! define_maps {\n                 }\n             }\n \n+            /// Ensure that either this query has all green inputs or been executed.\n+            /// Executing query::ensure(D) is considered a read of the dep-node D.\n+            ///\n+            /// This function is particularly useful when executing passes for their\n+            /// side-effects -- e.g., in order to report errors for erroneous programs.\n+            ///\n+            /// Note: The optimization is only available during incr. comp.\n+            pub fn ensure(tcx: TyCtxt<'a, $tcx, 'lcx>, key: $K) -> () {\n+                let dep_node = Self::to_dep_node(tcx, &key);\n+\n+                // Ensuring an \"input\" or anonymous query makes no sense\n+                assert!(!dep_node.kind.is_anon());\n+                assert!(!dep_node.kind.is_input());\n+                use dep_graph::DepNodeColor;\n+                match tcx.dep_graph.node_color(&dep_node) {\n+                    Some(DepNodeColor::Green(dep_node_index)) => {\n+                        profq_msg!(tcx, ProfileQueriesMsg::CacheHit);\n+                        tcx.dep_graph.read_index(dep_node_index);\n+                    }\n+                    Some(DepNodeColor::Red) => {\n+                        let _ = tcx.$name(key);\n+                    }\n+                    None => {\n+                        // Huh\n+                        if !tcx.dep_graph.is_fully_enabled() {\n+                            let _ = tcx.$name(key);\n+                            return;\n+                        }\n+                        match tcx.dep_graph.try_mark_green(tcx, &dep_node) {\n+                            Some(dep_node_index) => {\n+                                debug_assert!(tcx.dep_graph.is_green(dep_node_index));\n+                                profq_msg!(tcx, ProfileQueriesMsg::CacheHit);\n+                                tcx.dep_graph.read_index(dep_node_index);\n+                            }\n+                            None => {\n+                                let _ = tcx.$name(key);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+\n             fn compute_result(tcx: TyCtxt<'a, $tcx, 'lcx>, key: $K) -> $V {\n                 let provider = tcx.maps.providers[key.map_crate()].$name;\n                 provider(tcx.global_tcx(), key)"}]}