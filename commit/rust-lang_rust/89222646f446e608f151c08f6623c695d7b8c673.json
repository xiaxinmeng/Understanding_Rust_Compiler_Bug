{"sha": "89222646f446e608f151c08f6623c695d7b8c673", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MjIyNjQ2ZjQ0NmU2MDhmMTUxYzA4ZjY2MjNjNjk1ZDdiOGM2NzM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-23T22:14:56Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-23T22:46:59Z"}, "message": "Remove match checks in rustdoc", "tree": {"sha": "556d89e63f40cab071bfabfd95914c4a1bc01f8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/556d89e63f40cab071bfabfd95914c4a1bc01f8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89222646f446e608f151c08f6623c695d7b8c673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89222646f446e608f151c08f6623c695d7b8c673", "html_url": "https://github.com/rust-lang/rust/commit/89222646f446e608f151c08f6623c695d7b8c673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89222646f446e608f151c08f6623c695d7b8c673/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f591319dd46ce3ddb7ca218dafa3d072627c345", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f591319dd46ce3ddb7ca218dafa3d072627c345", "html_url": "https://github.com/rust-lang/rust/commit/9f591319dd46ce3ddb7ca218dafa3d072627c345"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "c8c9d7db29905566d59629298fc8c83e1b81bea8", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89222646f446e608f151c08f6623c695d7b8c673/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89222646f446e608f151c08f6623c695d7b8c673/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=89222646f446e608f151c08f6623c695d7b8c673", "patch": "@@ -145,7 +145,7 @@ fn fold_enum(\n     {\n         variants: do par::map(doc.variants) |variant| {\n             let desc = do astsrv::exec(srv) |ctxt| {\n-                match check ctxt.ast_map.get(doc_id) {\n+                match ctxt.ast_map.get(doc_id) {\n                   ast_map::node_item(@{\n                     node: ast::item_enum(enum_definition, _), _\n                   }, _) => {\n@@ -156,6 +156,8 @@ fn fold_enum(\n \n                     attr_parser::parse_desc(ast_variant.node.attrs)\n                   }\n+                  _ => fail #fmt(\"Enum variant %s has id that's not bound \\\n+                         to an enum item\", variant.name)\n                 }\n             };\n "}, {"sha": "40789f99ee29bd213266330781192642407d9706", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/89222646f446e608f151c08f6623c695d7b8c673/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89222646f446e608f151c08f6623c695d7b8c673/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=89222646f446e608f151c08f6623c695d7b8c673", "patch": "@@ -47,7 +47,7 @@ fn fold_fn(\n \n fn get_fn_sig(srv: astsrv::srv, fn_id: doc::ast_id) -> option<~str> {\n     do astsrv::exec(srv) |ctxt| {\n-        match check ctxt.ast_map.get(fn_id) {\n+        match ctxt.ast_map.get(fn_id) {\n           ast_map::node_item(@{\n             ident: ident,\n             node: ast::item_fn(decl, tys, _), _\n@@ -58,6 +58,7 @@ fn get_fn_sig(srv: astsrv::srv, fn_id: doc::ast_id) -> option<~str> {\n           }, _, _) => {\n             some(pprust::fun_to_str(decl, ident, tys, extract::interner()))\n           }\n+          _ => fail ~\"get_fn_sig: fn_id not bound to a fn item\"\n         }\n     }\n }\n@@ -82,12 +83,13 @@ fn fold_const(\n \n     {\n         sig: some(do astsrv::exec(srv) |ctxt| {\n-            match check ctxt.ast_map.get(doc.id()) {\n+            match ctxt.ast_map.get(doc.id()) {\n               ast_map::node_item(@{\n                 node: ast::item_const(ty, _), _\n               }, _) => {\n                 pprust::ty_to_str(ty, extract::interner())\n               }\n+              _ => fail ~\"fold_const: id not bound to a const item\"\n             }\n         })\n         with doc\n@@ -110,7 +112,7 @@ fn fold_enum(\n     {\n         variants: do par::map(doc.variants) |variant| {\n             let sig = do astsrv::exec(srv) |ctxt| {\n-                match check ctxt.ast_map.get(doc_id) {\n+                match ctxt.ast_map.get(doc_id) {\n                   ast_map::node_item(@{\n                     node: ast::item_enum(enum_definition, _), _\n                   }, _) => {\n@@ -121,6 +123,7 @@ fn fold_enum(\n \n                     pprust::variant_to_str(ast_variant, extract::interner())\n                   }\n+                  _ => fail ~\"enum variant not bound to an enum item\"\n                 }\n             };\n \n@@ -168,11 +171,11 @@ fn get_method_sig(\n     method_name: ~str\n ) -> option<~str> {\n     do astsrv::exec(srv) |ctxt| {\n-        match check ctxt.ast_map.get(item_id) {\n+        match ctxt.ast_map.get(item_id) {\n           ast_map::node_item(@{\n             node: ast::item_trait(_, _, methods), _\n           }, _) => {\n-            match check vec::find(methods, |method| {\n+            match vec::find(methods, |method| {\n                 match method {\n                   ast::required(ty_m) => to_str(ty_m.ident) == method_name,\n                   ast::provided(m) => to_str(m.ident) == method_name,\n@@ -198,12 +201,13 @@ fn get_method_sig(\n                     }\n                   }\n                 }\n+                _ => fail ~\"method not found\"\n             }\n           }\n           ast_map::node_item(@{\n             node: ast::item_impl(_, _, _, methods), _\n           }, _) => {\n-            match check vec::find(methods, |method| {\n+            match vec::find(methods, |method| {\n                 to_str(method.ident) == method_name\n             }) {\n                 some(method) => {\n@@ -214,8 +218,10 @@ fn get_method_sig(\n                         extract::interner()\n                     ))\n                 }\n+                none => fail ~\"method not found\"\n             }\n           }\n+          _ => fail ~\"get_method_sig: item ID not bound to trait or impl\"\n         }\n     }\n }"}]}