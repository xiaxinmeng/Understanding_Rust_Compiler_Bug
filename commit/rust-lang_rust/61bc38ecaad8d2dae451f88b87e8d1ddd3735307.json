{"sha": "61bc38ecaad8d2dae451f88b87e8d1ddd3735307", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYmMzOGVjYWFkOGQyZGFlNDUxZjg4Yjg3ZThkMWRkZDM3MzUzMDc=", "commit": {"author": {"name": "AnthonyMikh", "email": "anthony.mikh@yandex.ru", "date": "2019-09-30T23:38:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-30T23:38:35Z"}, "message": "Fix errors", "tree": {"sha": "6bd79e996ba62c40a71e05c41614a7b80c6670ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bd79e996ba62c40a71e05c41614a7b80c6670ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61bc38ecaad8d2dae451f88b87e8d1ddd3735307", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdkpH7CRBK7hj4Ov3rIwAAdHIIAAs/htEzvq7m0nyUEqtAIBR0\nFZGwelEOEclfu5/tUDC/rqYVfqLHOqEOOtCnjf94wN3LzDjZ0KiWXvMAwLr03CwU\nF/2Ckt+RTTp/fXyGJt+DsTlj0qTfN1y1SY/YXamz4jHTcv1vPhLpyH8Sv6SMVNEX\nYtAiszn4C/QAfFEnPFrrIyN7wK+OUqtr5HK096WlGFuqFjYrctGDX5NIZnAF0mpX\nPZRAgSx0ZwS+m0U+sDSUHkRfVJ6DpIK5QBs3ef+f8CW+V+Gewnm9Emm9rabUyfac\nCczvgNITNxcoGT3ZZkuW15ckVl7DIhhuKrMSbYwNDZxj6z4Cx17B/dvnlcPzKhg=\n=aDY6\n-----END PGP SIGNATURE-----\n", "payload": "tree 6bd79e996ba62c40a71e05c41614a7b80c6670ec\nparent e5db5b34d74098a30f70eb30f18ef8c9da3615d2\nauthor AnthonyMikh <anthony.mikh@yandex.ru> 1569886715 +0300\ncommitter GitHub <noreply@github.com> 1569886715 +0300\n\nFix errors"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61bc38ecaad8d2dae451f88b87e8d1ddd3735307", "html_url": "https://github.com/rust-lang/rust/commit/61bc38ecaad8d2dae451f88b87e8d1ddd3735307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61bc38ecaad8d2dae451f88b87e8d1ddd3735307/comments", "author": {"login": "AnthonyMikh", "id": 19252795, "node_id": "MDQ6VXNlcjE5MjUyNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/19252795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnthonyMikh", "html_url": "https://github.com/AnthonyMikh", "followers_url": "https://api.github.com/users/AnthonyMikh/followers", "following_url": "https://api.github.com/users/AnthonyMikh/following{/other_user}", "gists_url": "https://api.github.com/users/AnthonyMikh/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnthonyMikh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnthonyMikh/subscriptions", "organizations_url": "https://api.github.com/users/AnthonyMikh/orgs", "repos_url": "https://api.github.com/users/AnthonyMikh/repos", "events_url": "https://api.github.com/users/AnthonyMikh/events{/privacy}", "received_events_url": "https://api.github.com/users/AnthonyMikh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5db5b34d74098a30f70eb30f18ef8c9da3615d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5db5b34d74098a30f70eb30f18ef8c9da3615d2", "html_url": "https://github.com/rust-lang/rust/commit/e5db5b34d74098a30f70eb30f18ef8c9da3615d2"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "a9599edab4f3c72c129bfb85136d6d380738f062", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/61bc38ecaad8d2dae451f88b87e8d1ddd3735307/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61bc38ecaad8d2dae451f88b87e8d1ddd3735307/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=61bc38ecaad8d2dae451f88b87e8d1ddd3735307", "patch": "@@ -949,9 +949,9 @@ impl EmitterWriter {\n         //   | |  |\n         //   | |  something about `foo`\n         //   | something about `fn foo()`\n-        annotations_position.sort_by_key(|x| {\n-            // Decreasing order. When `a` and `b` are the same length, prefer `Primary`.\n-            (Reverse(a.1.len()), a.1.is_primary)\n+        annotations_position.sort_by_key(|(_, ann)| {\n+            // Decreasing order. When annotations share the same length, prefer `Primary`.\n+            (Reverse(ann.len()), ann.is_primary)\n         });\n \n         // Write the underlines.\n@@ -1006,14 +1006,14 @@ impl EmitterWriter {\n         for primary_span in msp.primary_spans() {\n             if !primary_span.is_dummy() {\n                 let hi = sm.lookup_char_pos(primary_span.hi());\n-                max = max(max, hi.line);\n+                max = (hi.line).max(max);\n             }\n         }\n         if !self.short_message {\n             for span_label in msp.span_labels() {\n                 if !span_label.span.is_dummy() {\n                     let hi = sm.lookup_char_pos(span_label.span.hi());\n-                    max = max(max, hi.line);\n+                    max = (hi.line).max(max);\n                 }\n             }\n         }\n@@ -1057,9 +1057,9 @@ impl EmitterWriter {\n         let padding = \" \".repeat(padding + label.len() + 5);\n \n         /// Returns `override` if it is present and `style` is `NoStyle` or `style` otherwise\n-        fn style_or_override(style: Style, override: Option<Style>) -> Style {\n-            match (style, override) {\n-                (Style::NoStyle, Some(override)) => override,\n+        fn style_or_override(style: Style, override_: Option<Style>) -> Style {\n+            match (style, override_) {\n+                (Style::NoStyle, Some(override_)) => override_,\n                 _ => style,\n             }\n         }\n@@ -1297,7 +1297,7 @@ impl EmitterWriter {\n                 for line in &annotated_file.lines {\n                     max_line_len = max(max_line_len, annotated_file.file\n                         .get_line(line.line_index - 1)\n-                        .map_or(0, |s| s.len());\n+                        .map_or(0, |s| s.len()));\n                     for ann in &line.annotations {\n                         span_right_margin = max(span_right_margin, ann.start_col);\n                         span_right_margin = max(span_right_margin, ann.end_col);\n@@ -1525,7 +1525,7 @@ impl EmitterWriter {\n \n                     // length of the code after substitution\n                     let full_sub_len = part.snippet.chars()\n-                        .map(|ch| acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1))\n+                        .map(|ch| unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1))\n                         .sum() as isize;\n \n                     // length of the code to be substituted"}]}