{"sha": "7293defb34552ddadf363410b9d6e9985d8db747", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOTNkZWZiMzQ1NTJkZGFkZjM2MzQxMGI5ZDZlOTk4NWQ4ZGI3NDc=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-07-06T03:52:51Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-07-06T03:52:51Z"}, "message": "Rename hir::map::local_def_id_from_hir_id to local_def_id", "tree": {"sha": "0d97ecd7556e55382f98f113cae3128b552c939d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d97ecd7556e55382f98f113cae3128b552c939d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7293defb34552ddadf363410b9d6e9985d8db747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7293defb34552ddadf363410b9d6e9985d8db747", "html_url": "https://github.com/rust-lang/rust/commit/7293defb34552ddadf363410b9d6e9985d8db747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7293defb34552ddadf363410b9d6e9985d8db747/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9f8d3a034b30d0a2bedfe99c107aeeefbf8e176", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f8d3a034b30d0a2bedfe99c107aeeefbf8e176", "html_url": "https://github.com/rust-lang/rust/commit/a9f8d3a034b30d0a2bedfe99c107aeeefbf8e176"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "54947a6a67132b74e00f3cb5c9de4cf2a883c15b", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CognitiveComplexity {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        let def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n+        let def_id = cx.tcx.hir().local_def_id(hir_id);\n         if !cx.tcx.has_attr(def_id, sym!(test)) {\n             self.check(cx, body, span);\n         }"}, {"sha": "cacf4563f1113460000abae42d433eebb9370972", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -34,7 +34,7 @@ declare_lint_pass!(CopyIterator => [COPY_ITERATOR]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyIterator {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, _) = item.node {\n-            let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id_from_hir_id(item.hir_id));\n+            let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n \n             if is_copy(cx, ty) && match_path(&trait_ref.path, &paths::ITERATOR) {\n                 span_note_and_lint("}, {"sha": "809dd0ee3ad9bc217516b91ede8e4b3ce3338157", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -67,7 +67,7 @@ declare_lint_pass!(Derive => [EXPL_IMPL_CLONE_ON_COPY, DERIVE_HASH_XOR_EQ]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Derive {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, _) = item.node {\n-            let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id_from_hir_id(item.hir_id));\n+            let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n             let is_automatically_derived = is_automatically_derived(&*item.attrs);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);"}, {"sha": "80a1f9a9dba98dfc819060818fc5383a0fa78ceb", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -27,7 +27,7 @@ declare_lint_pass!(EmptyEnum => [EMPTY_ENUM]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EmptyEnum {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &Item) {\n-        let did = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let did = cx.tcx.hir().local_def_id(item.hir_id);\n         if let ItemKind::Enum(..) = item.node {\n             let ty = cx.tcx.type_of(did);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");"}, {"sha": "cc5f05ede1de57953019c9c637574d8e2b495fda", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxedLocal {\n             too_large_for_stack: self.too_large_for_stack,\n         };\n \n-        let fn_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n+        let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n         let region_scope_tree = &cx.tcx.region_scope_tree(fn_def_id);\n         ExprUseVisitor::new(\n             &mut v,"}, {"sha": "ed50969506c4cea2c14b432e1d6a6b716ef4e763", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -33,7 +33,7 @@ declare_lint_pass!(FallibleImplFrom => [FALLIBLE_IMPL_FROM]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FallibleImplFrom {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n         // check for `impl From<???> for ..`\n-        let impl_def_id = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         if_chain! {\n             if let hir::ItemKind::Impl(.., ref impl_items) = item.node;\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n@@ -95,7 +95,7 @@ fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_it\n             then {\n                 // check the body for `begin_panic` or `unwrap`\n                 let body = cx.tcx.hir().body(body_id);\n-                let impl_item_def_id = cx.tcx.hir().local_def_id_from_hir_id(impl_item.id.hir_id);\n+                let impl_item_def_id = cx.tcx.hir().local_def_id(impl_item.id.hir_id);\n                 let mut fpu = FindPanicUnwrap {\n                     lcx: cx,\n                     tables: cx.tcx.typeck_tables_of(impl_item_def_id),"}, {"sha": "b59b5850572515a5659ed5bb3629798baed0cd1c", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -46,7 +46,7 @@ impl_lint_pass!(LargeEnumVariant => [LARGE_ENUM_VARIANT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &Item) {\n-        let did = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let did = cx.tcx.hir().local_def_id(item.hir_id);\n         if let ItemKind::Enum(ref def, _) = item.node {\n             let ty = cx.tcx.type_of(did);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");"}, {"sha": "be1c2a1128d398a0b7400465133026b93cdc6fc4", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -122,7 +122,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item, trait_items\n         item.ident.name.as_str() == name\n             && if let AssocItemKind::Method { has_self } = item.kind {\n                 has_self && {\n-                    let did = cx.tcx.hir().local_def_id_from_hir_id(item.id.hir_id);\n+                    let did = cx.tcx.hir().local_def_id(item.id.hir_id);\n                     cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n                 }\n             } else {\n@@ -141,7 +141,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item, trait_items\n \n     if cx.access_levels.is_exported(visited_trait.hir_id) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n         let mut current_and_super_traits = FxHashSet::default();\n-        let visited_trait_def_id = cx.tcx.hir().local_def_id_from_hir_id(visited_trait.hir_id);\n+        let visited_trait_def_id = cx.tcx.hir().local_def_id(visited_trait.hir_id);\n         fill_trait_set(visited_trait_def_id, &mut current_and_super_traits, cx);\n \n         let is_empty_method_found = current_and_super_traits\n@@ -173,7 +173,7 @@ fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item, impl_items: &[ImplIte\n         item.ident.name.as_str() == name\n             && if let AssocItemKind::Method { has_self } = item.kind {\n                 has_self && {\n-                    let did = cx.tcx.hir().local_def_id_from_hir_id(item.id.hir_id);\n+                    let did = cx.tcx.hir().local_def_id(item.id.hir_id);\n                     cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n                 }\n             } else {\n@@ -193,7 +193,7 @@ fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item, impl_items: &[ImplIte\n \n     if let Some(i) = impl_items.iter().find(|i| is_named_self(cx, i, \"len\")) {\n         if cx.access_levels.is_exported(i.id.hir_id) {\n-            let def_id = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+            let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n             let ty = cx.tcx.type_of(def_id);\n \n             span_lint("}, {"sha": "fccf8694ec514995b30c3b84deabfc0366240237", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -1102,7 +1102,7 @@ fn check_for_loop_range<'a, 'tcx>(\n                 // ensure that the indexed variable was declared before the loop, see #601\n                 if let Some(indexed_extent) = indexed_extent {\n                     let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n-                    let parent_def_id = cx.tcx.hir().local_def_id_from_hir_id(parent_id);\n+                    let parent_def_id = cx.tcx.hir().local_def_id(parent_id);\n                     let region_scope_tree = cx.tcx.region_scope_tree(parent_def_id);\n                     let pat_extent = region_scope_tree.var_scope(pat.hir_id.local_id);\n                     if region_scope_tree.is_subscope_of(indexed_extent, pat_extent) {\n@@ -1792,7 +1792,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                     match res {\n                         Res::Local(hir_id) => {\n                             let parent_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n-                            let parent_def_id = self.cx.tcx.hir().local_def_id_from_hir_id(parent_id);\n+                            let parent_def_id = self.cx.tcx.hir().local_def_id(parent_id);\n                             let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id);\n                             if indexed_indirectly {\n                                 self.indexed_indirectly.insert(seqvar.segments[0].ident.name, Some(extent));"}, {"sha": "f689a2d4ef0fd9f1c2b9e2eccc1a3e3686ecfa15", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -948,7 +948,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n         let name = implitem.ident.name.as_str();\n         let parent = cx.tcx.hir().get_parent_item(implitem.hir_id);\n         let item = cx.tcx.hir().expect_item(parent);\n-        let def_id = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         let ty = cx.tcx.type_of(def_id);\n         if_chain! {\n             if let hir::ImplItemKind::Method(ref sig, id) = implitem.node;"}, {"sha": "3eb5827472c1061710ec1424f949c908097f118e", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -69,7 +69,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        let def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n+        let def_id = cx.tcx.hir().local_def_id(hir_id);\n \n         if in_external_macro(cx.tcx.sess, span) || is_entrypoint_fn(cx, def_id) {\n             return;"}, {"sha": "195e787951ace78ae663c4fb64a2dbb66098c823", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -133,7 +133,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             hir::ItemKind::Fn(..) => {\n                 // ignore main()\n                 if it.ident.name == sym!(main) {\n-                    let def_id = cx.tcx.hir().local_def_id_from_hir_id(it.hir_id);\n+                    let def_id = cx.tcx.hir().local_def_id(it.hir_id);\n                     let def_key = cx.tcx.hir().def_key(def_id);\n                     if def_key.parent == Some(hir::def_id::CRATE_DEF_INDEX) {\n                         return;\n@@ -171,7 +171,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem) {\n         // If the method is an impl for a trait, don't doc.\n-        let def_id = cx.tcx.hir().local_def_id_from_hir_id(impl_item.hir_id);\n+        let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n         match cx.tcx.associated_item(def_id).container {\n             ty::TraitContainer(_) => return,\n             ty::ImplContainer(cid) => {"}, {"sha": "3efbfbb700d72942424fdd2445d1e782198a89f4", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -145,7 +145,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n             hir::ImplItemKind::Const(..) | hir::ImplItemKind::Type(_) | hir::ImplItemKind::Existential(_) => return,\n         };\n \n-        let def_id = cx.tcx.hir().local_def_id_from_hir_id(impl_item.hir_id);\n+        let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n         let trait_def_id = match cx.tcx.associated_item(def_id).container {\n             TraitContainer(cid) => Some(cid),\n             ImplContainer(cid) => cx.tcx.impl_trait_ref(cid).map(|t| t.def_id),"}, {"sha": "5098fa2a7365b9df4a14a22d3730822b77a45db4", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n         let sized_trait = need!(cx.tcx.lang_items().sized_trait());\n \n-        let fn_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n+        let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n \n         let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds.to_vec())\n             .filter(|p| !p.is_global())"}, {"sha": "b2bfb51d6f9d568e2010c33ce9d6c4c0df4a34eb", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                             return;\n                         }\n                         if sig.decl.inputs.is_empty() && name == sym!(new) && cx.access_levels.is_reachable(id) {\n-                            let self_did = cx.tcx.hir().local_def_id_from_hir_id(cx.tcx.hir().get_parent_item(id));\n+                            let self_did = cx.tcx.hir().local_def_id(cx.tcx.hir().get_parent_item(id));\n                             let self_ty = cx.tcx.type_of(self_did);\n                             if_chain! {\n                                 if same_tys(cx, self_ty, return_ty(cx, id));"}, {"sha": "854bb718e3efca947d5fd05d2fdf9bbd27c98ecd", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -142,7 +142,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ptr {\n \n #[allow(clippy::too_many_lines)]\n fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: HirId, opt_body_id: Option<BodyId>) {\n-    let fn_def_id = cx.tcx.hir().local_def_id_from_hir_id(fn_id);\n+    let fn_def_id = cx.tcx.hir().local_def_id(fn_id);\n     let sig = cx.tcx.fn_sig(fn_def_id);\n     let fn_ty = sig.skip_binder();\n "}, {"sha": "4e07a07ccc272a4e3d8754e18e295c5a46088f25", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'tcx> TriviallyCopyPassByRef {\n     }\n \n     fn check_poly_fn(&mut self, cx: &LateContext<'_, 'tcx>, hir_id: HirId, decl: &FnDecl, span: Option<Span>) {\n-        let fn_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n+        let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n \n         let fn_sig = cx.tcx.fn_sig(fn_def_id);\n         let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);"}, {"sha": "b60b9ccab326753d933f40fd3ac2c0a8fa9328a2", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -129,7 +129,7 @@ fn check_trait_method_impl_decl<'a, 'tcx>(\n     let trait_method_sig = cx.tcx.fn_sig(trait_method.def_id);\n     let trait_method_sig = cx.tcx.erase_late_bound_regions(&trait_method_sig);\n \n-    let impl_method_def_id = cx.tcx.hir().local_def_id_from_hir_id(impl_item.hir_id);\n+    let impl_method_def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n     let impl_method_sig = cx.tcx.fn_sig(impl_method_def_id);\n     let impl_method_sig = cx.tcx.erase_late_bound_regions(&impl_method_sig);\n \n@@ -184,7 +184,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n                         item_path,\n                         cx,\n                     };\n-                    let impl_def_id = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+                    let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n                     let impl_trait_ref = cx.tcx.impl_trait_ref(impl_def_id);\n \n                     if let Some(impl_trait_ref) = impl_trait_ref {"}, {"sha": "00edb4fafcb12bc5c5b45aa9f421bbc3ab452dc7", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -329,7 +329,7 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr, indent: usize) {\n }\n \n fn print_item(cx: &LateContext<'_, '_>, item: &hir::Item) {\n-    let did = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+    let did = cx.tcx.hir().local_def_id(item.hir_id);\n     println!(\"item `{}`\", item.ident.name);\n     match item.vis.node {\n         hir::VisibilityKind::Public => println!(\"public\"),\n@@ -342,7 +342,7 @@ fn print_item(cx: &LateContext<'_, '_>, item: &hir::Item) {\n     }\n     match item.node {\n         hir::ItemKind::ExternCrate(ref _renamed_from) => {\n-            let def_id = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+            let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n             if let Some(crate_id) = cx.tcx.extern_mod_stmt_cnum(def_id) {\n                 let source = cx.tcx.used_crate_source(crate_id);\n                 if let Some(ref src) = source.dylib {"}, {"sha": "53665506c391239dbe60d9c7cea822e22ee94eee", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7293defb34552ddadf363410b9d6e9985d8db747/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=7293defb34552ddadf363410b9d6e9985d8db747", "patch": "@@ -716,7 +716,7 @@ pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n \n /// Convenience function to get the return type of a function.\n pub fn return_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, fn_item: hir::HirId) -> Ty<'tcx> {\n-    let fn_def_id = cx.tcx.hir().local_def_id_from_hir_id(fn_item);\n+    let fn_def_id = cx.tcx.hir().local_def_id(fn_item);\n     let ret_ty = cx.tcx.fn_sig(fn_def_id).output();\n     cx.tcx.erase_late_bound_regions(&ret_ty)\n }"}]}