{"sha": "b26120db11d36fbf85742149221e474c885d2387", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNjEyMGRiMTFkMzZmYmY4NTc0MjE0OTIyMWU0NzRjODg1ZDIzODc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-01-06T19:35:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-05T21:30:03Z"}, "message": "make lifetimes that only appear in return type early-bound\n\nThis is the full and proper fix for #32330. This also makes some effort\nto give a nice error message (as evidenced by the `ui` test), sending\nusers over to the tracking issue for a full explanation.", "tree": {"sha": "4dd1c1180334a71a9452e57418cc30fe716abeb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dd1c1180334a71a9452e57418cc30fe716abeb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b26120db11d36fbf85742149221e474c885d2387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b26120db11d36fbf85742149221e474c885d2387", "html_url": "https://github.com/rust-lang/rust/commit/b26120db11d36fbf85742149221e474c885d2387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b26120db11d36fbf85742149221e474c885d2387/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc02736d59252fe408dd6c2f7e2c4b6f229e4443", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc02736d59252fe408dd6c2f7e2c4b6f229e4443", "html_url": "https://github.com/rust-lang/rust/commit/fc02736d59252fe408dd6c2f7e2c4b6f229e4443"}], "stats": {"total": 460, "additions": 270, "deletions": 190}, "files": [{"sha": "939f214407ef71606d58d90ec7af381e663e816f", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -72,13 +72,12 @@ use super::region_inference::SameRegions;\n use hir::map as hir_map;\n use hir;\n \n-use lint;\n use hir::def_id::DefId;\n use infer;\n use middle::region;\n use traits::{ObligationCause, ObligationCauseCode};\n use ty::{self, TyCtxt, TypeFoldable};\n-use ty::{Region, ReFree};\n+use ty::{Region, ReFree, Issue32330};\n use ty::error::TypeError;\n \n use std::fmt;\n@@ -610,6 +609,39 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.tcx.note_and_explain_type_err(diag, terr, span);\n     }\n \n+    pub fn note_issue_32330(&self,\n+                            diag: &mut DiagnosticBuilder<'tcx>,\n+                            terr: &TypeError<'tcx>)\n+    {\n+        debug!(\"note_issue_32330: terr={:?}\", terr);\n+        match *terr {\n+            TypeError::RegionsInsufficientlyPolymorphic(_, &Region::ReVar(vid)) |\n+            TypeError::RegionsOverlyPolymorphic(_, &Region::ReVar(vid)) => {\n+                match self.region_vars.var_origin(vid) {\n+                    RegionVariableOrigin::EarlyBoundRegion(_, _, Some(Issue32330 {\n+                        fn_def_id,\n+                        region_name\n+                    })) => {\n+                        diag.note(\n+                            &format!(\"lifetime parameter `{0}` declared on fn `{1}` \\\n+                                      appears only in the return type, \\\n+                                      but here is required to be higher-ranked, \\\n+                                      which means that `{0}` must appear in both \\\n+                                      argument and return types\",\n+                                     region_name,\n+                                     self.tcx.item_path_str(fn_def_id)));\n+                        diag.note(\n+                            &format!(\"this error is the result of a recent bug fix; \\\n+                                      for more information, see issue #33685 \\\n+                                      <https://github.com/rust-lang/rust/issues/33685>\"));\n+                    }\n+                    _ => { }\n+                }\n+            }\n+            _ => { }\n+        }\n+    }\n+\n     pub fn report_and_explain_type_error(&self,\n                                          trace: TypeTrace<'tcx>,\n                                          terr: &TypeError<'tcx>)\n@@ -629,6 +661,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n         self.note_type_err(&mut diag, &trace.cause, None, Some(trace.values), terr);\n+        self.note_issue_32330(&mut diag, terr);\n         diag\n     }\n \n@@ -1053,27 +1086,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             err.emit();\n         }\n     }\n-\n-    pub fn issue_32330_warnings(&self, span: Span, issue32330s: &[ty::Issue32330]) {\n-        for issue32330 in issue32330s {\n-            match *issue32330 {\n-                ty::Issue32330::WontChange => { }\n-                ty::Issue32330::WillChange { fn_def_id, region_name } => {\n-                    self.tcx.sess.add_lint(\n-                        lint::builtin::HR_LIFETIME_IN_ASSOC_TYPE,\n-                        ast::CRATE_NODE_ID,\n-                        span,\n-                        format!(\"lifetime parameter `{0}` declared on fn `{1}` \\\n-                                 appears only in the return type, \\\n-                                 but here is required to be higher-ranked, \\\n-                                 which means that `{0}` must appear in both \\\n-                                 argument and return types\",\n-                                region_name,\n-                                self.tcx.item_path_str(fn_def_id)));\n-                }\n-            }\n-        }\n-    }\n }\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n@@ -1104,7 +1116,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 format!(\" for lifetime parameter {}in trait containing associated type `{}`\",\n                         br_string(br), type_name)\n             }\n-            infer::EarlyBoundRegion(_, name) => {\n+            infer::EarlyBoundRegion(_, name, _) => {\n                 format!(\" for lifetime parameter `{}`\",\n                         name)\n             }"}, {"sha": "e919f025409c510a717458b4ea4d073c5ea83e8e", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 47, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -622,51 +622,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// hold. See `README.md` for more details.\n     pub fn leak_check(&self,\n                       overly_polymorphic: bool,\n-                      span: Span,\n+                      _span: Span,\n                       skol_map: &SkolemizationMap<'tcx>,\n                       snapshot: &CombinedSnapshot)\n                       -> RelateResult<'tcx, ()>\n     {\n         debug!(\"leak_check: skol_map={:?}\",\n                skol_map);\n \n-        // ## Issue #32330 warnings\n-        //\n-        // When Issue #32330 is fixed, a certain number of late-bound\n-        // regions (LBR) will become early-bound. We wish to issue\n-        // warnings when the result of `leak_check` relies on such LBR, as\n-        // that means that compilation will likely start to fail.\n-        //\n-        // Recall that when we do a \"HR subtype\" check, we replace all\n-        // late-bound regions (LBR) in the subtype with fresh variables,\n-        // and skolemize the late-bound regions in the supertype. If those\n-        // skolemized regions from the supertype wind up being\n-        // super-regions (directly or indirectly) of either\n-        //\n-        // - another skolemized region; or,\n-        // - some region that pre-exists the HR subtype check\n-        //   - e.g., a region variable that is not one of those created\n-        //     to represent bound regions in the subtype\n-        //\n-        // then leak-check (and hence the subtype check) fails.\n-        //\n-        // What will change when we fix #32330 is that some of the LBR in the\n-        // subtype may become early-bound. In that case, they would no longer be in\n-        // the \"permitted set\" of variables that can be related to a skolemized\n-        // type.\n-        //\n-        // So the foundation for this warning is to collect variables that we found\n-        // to be related to a skolemized type. For each of them, we have a\n-        // `BoundRegion` which carries a `Issue32330` flag. We check whether any of\n-        // those flags indicate that this variable was created from a lifetime\n-        // that will change from late- to early-bound. If so, we issue a warning\n-        // indicating that the results of compilation may change.\n-        //\n-        // This is imperfect, since there are other kinds of code that will not\n-        // compile once #32330 is fixed. However, it fixes the errors observed in\n-        // practice on crater runs.\n-        let mut warnings = vec![];\n-\n         let new_vars = self.region_vars_confined_to_snapshot(snapshot);\n         for (&skol_br, &skol) in skol_map {\n             // The inputs to a skolemized variable can only\n@@ -680,13 +643,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 match *tainted_region {\n                     ty::ReVar(vid) => {\n                         if new_vars.contains(&vid) {\n-                            warnings.extend(\n-                                match self.region_vars.var_origin(vid) {\n-                                    LateBoundRegion(_,\n-                                                    ty::BrNamed(.., wc),\n-                                                    _) => Some(wc),\n-                                    _ => None,\n-                                });\n                             continue;\n                         }\n                     }\n@@ -712,8 +668,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        self.issue_32330_warnings(span, &warnings);\n-\n         Ok(())\n     }\n "}, {"sha": "c3a6a62764d0b56ce327ada6900b82cb57835ee8", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -368,7 +368,7 @@ pub enum RegionVariableOrigin {\n     Coercion(Span),\n \n     // Region variables created as the values for early-bound regions\n-    EarlyBoundRegion(Span, ast::Name),\n+    EarlyBoundRegion(Span, ast::Name, Option<ty::Issue32330>),\n \n     // Region variables created for bound regions\n     // in a function or method that is called\n@@ -1184,7 +1184,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                               span: Span,\n                               def: &ty::RegionParameterDef)\n                               -> &'tcx ty::Region {\n-        self.next_region_var(EarlyBoundRegion(span, def.name))\n+        self.next_region_var(EarlyBoundRegion(span, def.name, def.issue_32330))\n     }\n \n     /// Create a type inference variable for the given\n@@ -1761,7 +1761,7 @@ impl RegionVariableOrigin {\n             AddrOfRegion(a) => a,\n             Autoref(a) => a,\n             Coercion(a) => a,\n-            EarlyBoundRegion(a, _) => a,\n+            EarlyBoundRegion(a, ..) => a,\n             LateBoundRegion(a, ..) => a,\n             BoundRegionInCoherence(_) => syntax_pos::DUMMY_SP,\n             UpvarRegion(_, a) => a"}, {"sha": "158b406deb8a48c69323564cb2dee343a07cf2fa", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -31,7 +31,7 @@ use syntax::ptr::P;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n-use util::nodemap::{NodeMap, FxHashSet, FxHashMap, DefIdMap};\n+use util::nodemap::{NodeMap, NodeSet, FxHashSet, FxHashMap, DefIdMap};\n use rustc_back::slice;\n \n use hir;\n@@ -150,10 +150,14 @@ pub struct NamedRegionMap {\n     // `Region` describing how that region is bound\n     pub defs: NodeMap<Region>,\n \n-    // the set of lifetime def ids that are late-bound; late-bound ids\n-    // are named regions appearing in fn arguments that do not appear\n-    // in where-clauses\n-    pub late_bound: NodeMap<ty::Issue32330>,\n+    // the set of lifetime def ids that are late-bound; a region can\n+    // be late-bound if (a) it does NOT appear in a where-clause and\n+    // (b) it DOES appear in the arguments.\n+    pub late_bound: NodeSet,\n+\n+    // Contains the node-ids for lifetimes that were (incorrectly) categorized\n+    // as late-bound, until #32330 was fixed.\n+    pub issue_32330: NodeMap<ty::Issue32330>,\n \n     // For each type and trait definition, maps type parameters\n     // to the trait object lifetime defaults computed from them.\n@@ -261,7 +265,8 @@ pub fn krate(sess: &Session,\n     let krate = hir_map.krate();\n     let mut map = NamedRegionMap {\n         defs: NodeMap(),\n-        late_bound: NodeMap(),\n+        late_bound: NodeSet(),\n+        issue_32330: NodeMap(),\n         object_lifetime_defaults: compute_object_lifetime_defaults(sess, hir_map),\n     };\n     sess.track_errors(|| {\n@@ -840,7 +845,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         let lifetimes = generics.lifetimes.iter().map(|def| {\n-            if self.map.late_bound.contains_key(&def.lifetime.id) {\n+            if self.map.late_bound.contains(&def.lifetime.id) {\n                 Region::late(def)\n             } else {\n                 Region::early(&mut index, def)\n@@ -1610,22 +1615,26 @@ fn insert_late_bound_lifetimes(map: &mut NamedRegionMap,\n         // just mark it so we can issue warnings.\n         let constrained_by_input = constrained_by_input.regions.contains(&name);\n         let appears_in_output = appears_in_output.regions.contains(&name);\n-        let will_change = !constrained_by_input && appears_in_output;\n-        let issue_32330 = if will_change {\n-            ty::Issue32330::WillChange {\n-                fn_def_id: fn_def_id,\n-                region_name: name,\n-            }\n-        } else {\n-            ty::Issue32330::WontChange\n-        };\n+        if !constrained_by_input && appears_in_output {\n+            debug!(\"inserting issue_32330 entry for {:?}, {:?} on {:?}\",\n+                   lifetime.lifetime.id,\n+                   name,\n+                   fn_def_id);\n+            map.issue_32330.insert(\n+                lifetime.lifetime.id,\n+                ty::Issue32330 {\n+                    fn_def_id: fn_def_id,\n+                    region_name: name,\n+                });\n+            continue;\n+        }\n \n         debug!(\"insert_late_bound_lifetimes: \\\n-                lifetime {:?} with id {:?} is late-bound ({:?}\",\n-               lifetime.lifetime.name, lifetime.lifetime.id, issue_32330);\n+                lifetime {:?} with id {:?} is late-bound\",\n+               lifetime.lifetime.name, lifetime.lifetime.id);\n \n-        let prev = map.late_bound.insert(lifetime.lifetime.id, issue_32330);\n-        assert!(prev.is_none(), \"visited lifetime {:?} twice\", lifetime.lifetime.id);\n+        let inserted = map.late_bound.insert(lifetime.lifetime.id);\n+        assert!(inserted, \"visited lifetime {:?} twice\", lifetime.lifetime.id);\n     }\n \n     return;"}, {"sha": "4d9514b1473c7a6d254f59e929ce9df7e6ca4cd5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -606,6 +606,7 @@ pub struct RegionParameterDef {\n     pub name: Name,\n     pub def_id: DefId,\n     pub index: u32,\n+    pub issue_32330: Option<ty::Issue32330>,\n \n     /// `pure_wrt_drop`, set by the (unsafe) `#[may_dangle]` attribute\n     /// on generic parameter `'a`, asserts data of lifetime `'a`\n@@ -622,8 +623,7 @@ impl RegionParameterDef {\n     }\n \n     pub fn to_bound_region(&self) -> ty::BoundRegion {\n-        // this is an early bound region, so unaffected by #32330\n-        ty::BoundRegion::BrNamed(self.def_id, self.name, Issue32330::WontChange)\n+        ty::BoundRegion::BrNamed(self.def_id, self.name)\n     }\n }\n "}, {"sha": "4ce1d7a9013621cce9c4deb186da33c39eaa1021", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -58,7 +58,7 @@ pub enum BoundRegion {\n     ///\n     /// The def-id is needed to distinguish free regions in\n     /// the event of shadowing.\n-    BrNamed(DefId, Name, Issue32330),\n+    BrNamed(DefId, Name),\n \n     /// Fresh bound identifiers created during GLB computations.\n     BrFresh(u32),\n@@ -68,23 +68,18 @@ pub enum BoundRegion {\n     BrEnv\n }\n \n-/// True if this late-bound region is unconstrained, and hence will\n-/// become early-bound once #32330 is fixed.\n+/// When a region changed from late-bound to early-bound when #32330\n+/// was fixed, its `RegionParameterDef` will have one of these\n+/// structures that we can use to give nicer errors.\n #[derive(Copy, Clone, Debug, PartialEq, PartialOrd, Eq, Ord, Hash,\n          RustcEncodable, RustcDecodable)]\n-pub enum Issue32330 {\n-    WontChange,\n+pub struct Issue32330 {\n+    /// fn where is region declared\n+    pub fn_def_id: DefId,\n \n-    /// this region will change from late-bound to early-bound once\n-    /// #32330 is fixed.\n-    WillChange {\n-        /// fn where is region declared\n-        fn_def_id: DefId,\n-\n-        /// name of region; duplicates the info in BrNamed but convenient\n-        /// to have it here, and this code is only temporary\n-        region_name: ast::Name,\n-    }\n+    /// name of region; duplicates the info in BrNamed but convenient\n+    /// to have it here, and this code is only temporary\n+    pub region_name: ast::Name,\n }\n \n // NB: If you change this, you'll probably want to change the corresponding"}, {"sha": "a45c43235ebf857ff203cf6ef128360cbf10154c", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -276,7 +276,7 @@ fn in_binder<'a, 'gcx, 'tcx, T, U>(f: &mut fmt::Formatter,\n     let new_value = tcx.replace_late_bound_regions(&value, |br| {\n         let _ = start_or_continue(f, \"for<\", \", \");\n         let br = match br {\n-            ty::BrNamed(_, name, _) => {\n+            ty::BrNamed(_, name) => {\n                 let _ = write!(f, \"{}\", name);\n                 br\n             }\n@@ -286,8 +286,7 @@ fn in_binder<'a, 'gcx, 'tcx, T, U>(f: &mut fmt::Formatter,\n                 let name = Symbol::intern(\"'r\");\n                 let _ = write!(f, \"{}\", name);\n                 ty::BrNamed(tcx.hir.local_def_id(CRATE_NODE_ID),\n-                            name,\n-                            ty::Issue32330::WontChange)\n+                            name)\n             }\n         };\n         tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1), br))\n@@ -435,7 +434,7 @@ impl fmt::Display for ty::BoundRegion {\n         }\n \n         match *self {\n-            BrNamed(_, name, _) => write!(f, \"{}\", name),\n+            BrNamed(_, name) => write!(f, \"{}\", name),\n             BrAnon(_) | BrFresh(_) | BrEnv => Ok(())\n         }\n     }\n@@ -446,9 +445,9 @@ impl fmt::Debug for ty::BoundRegion {\n         match *self {\n             BrAnon(n) => write!(f, \"BrAnon({:?})\", n),\n             BrFresh(n) => write!(f, \"BrFresh({:?})\", n),\n-            BrNamed(did, name, issue32330) => {\n-                write!(f, \"BrNamed({:?}:{:?}, {:?}, {:?})\",\n-                       did.krate, did.index, name, issue32330)\n+            BrNamed(did, name) => {\n+                write!(f, \"BrNamed({:?}:{:?}, {:?})\",\n+                       did.krate, did.index, name)\n             }\n             BrEnv => \"BrEnv\".fmt(f),\n         }"}, {"sha": "fb6d28448a0c5524cbaf6e78c0a1d0d1656c46fd", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 19, "deletions": 38, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -29,7 +29,6 @@ use hir;\n use hir::def::Def;\n use hir::def_id::DefId;\n use middle::resolve_lifetime as rl;\n-use rustc::lint;\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n@@ -148,20 +147,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             }\n \n             Some(&rl::Region::LateBound(debruijn, id)) => {\n-                // If this region is declared on a function, it will have\n-                // an entry in `late_bound`, but if it comes from\n-                // `for<'a>` in some type or something, it won't\n-                // necessarily have one. In that case though, we won't be\n-                // changed from late to early bound, so we can just\n-                // substitute false.\n-                let issue_32330 = tcx.named_region_map\n-                                     .late_bound\n-                                     .get(&id)\n-                                     .cloned()\n-                                     .unwrap_or(ty::Issue32330::WontChange);\n                 let name = tcx.hir.name(id);\n                 tcx.mk_region(ty::ReLateBound(debruijn,\n-                    ty::BrNamed(tcx.hir.local_def_id(id), name, issue_32330)))\n+                    ty::BrNamed(tcx.hir.local_def_id(id), name)))\n             }\n \n             Some(&rl::Region::LateBoundAnon(debruijn, index)) => {\n@@ -177,17 +165,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             }\n \n             Some(&rl::Region::Free(scope, id)) => {\n-                // As in Region::LateBound above, could be missing for some late-bound\n-                // regions, but also for early-bound regions.\n-                let issue_32330 = tcx.named_region_map\n-                                     .late_bound\n-                                     .get(&id)\n-                                     .cloned()\n-                                     .unwrap_or(ty::Issue32330::WontChange);\n                 let name = tcx.hir.name(id);\n                 tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                     scope: scope.to_code_extent(&tcx.region_maps),\n-                    bound_region: ty::BrNamed(tcx.hir.local_def_id(id), name, issue_32330)\n+                    bound_region: ty::BrNamed(tcx.hir.local_def_id(id), name)\n                 }))\n \n                     // (*) -- not late-bound, won't change\n@@ -566,7 +547,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n     fn ast_type_binding_to_poly_projection_predicate(\n         &self,\n-        path_id: ast::NodeId,\n+        _path_id: ast::NodeId,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         binding: &ConvertedBinding<'tcx>)\n         -> Result<ty::PolyProjectionPredicate<'tcx>, ErrorReported>\n@@ -602,21 +583,21 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         debug!(\"late_bound_in_ty = {:?}\", late_bound_in_ty);\n         for br in late_bound_in_ty.difference(&late_bound_in_trait_ref) {\n             let br_name = match *br {\n-                ty::BrNamed(_, name, _) => name,\n+                ty::BrNamed(_, name) => name,\n                 _ => {\n                     span_bug!(\n                         binding.span,\n                         \"anonymous bound region {:?} in binding but not trait ref\",\n                         br);\n                 }\n             };\n-            tcx.sess.add_lint(\n-                lint::builtin::HR_LIFETIME_IN_ASSOC_TYPE,\n-                path_id,\n-                binding.span,\n-                format!(\"binding for associated type `{}` references lifetime `{}`, \\\n-                         which does not appear in the trait input types\",\n-                        binding.item_name, br_name));\n+            struct_span_err!(tcx.sess,\n+                             binding.span,\n+                             E0582,\n+                             \"binding for associated type `{}` references lifetime `{}`, \\\n+                              which does not appear in the trait input types\",\n+                             binding.item_name, br_name)\n+                .emit();\n         }\n \n         // Simple case: X is defined in the current trait.\n@@ -1197,21 +1178,21 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 let late_bound_in_ret = tcx.collect_referenced_late_bound_regions(&output);\n                 for br in late_bound_in_ret.difference(&late_bound_in_args) {\n                     let br_name = match *br {\n-                        ty::BrNamed(_, name, _) => name,\n+                        ty::BrNamed(_, name) => name,\n                         _ => {\n                             span_bug!(\n                                 bf.decl.output.span(),\n                                 \"anonymous bound region {:?} in return but not args\",\n                                 br);\n                         }\n                     };\n-                    tcx.sess.add_lint(\n-                        lint::builtin::HR_LIFETIME_IN_ASSOC_TYPE,\n-                        ast_ty.id,\n-                        ast_ty.span,\n-                        format!(\"return type references lifetime `{}`, \\\n-                                 which does not appear in the trait input types\",\n-                                br_name));\n+                    struct_span_err!(tcx.sess,\n+                                     ast_ty.span,\n+                                     E0581,\n+                                     \"return type references lifetime `{}`, \\\n+                                      which does not appear in the fn input types\",\n+                                     br_name)\n+                        .emit();\n                 }\n                 tcx.mk_fn_ptr(bare_fn_ty)\n             }"}, {"sha": "8329d3eeed9e54c628164ee1ff99fa22c0944eab", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -1418,7 +1418,7 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n     fn re_infer(&self, span: Span, def: Option<&ty::RegionParameterDef>)\n                 -> Option<&'tcx ty::Region> {\n         let v = match def {\n-            Some(def) => infer::EarlyBoundRegion(span, def.name),\n+            Some(def) => infer::EarlyBoundRegion(span, def.name, def.issue_32330),\n             None => infer::MiscVariable(span)\n         };\n         Some(self.next_region_var(v))"}, {"sha": "28156dd616b3a59da3e615ef9437526e4b7a657e", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -108,7 +108,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n             };\n             match *r {\n                 ty::ReFree(ty::FreeRegion {\n-                    bound_region: ty::BoundRegion::BrNamed(def_id, name, _), ..\n+                    bound_region: ty::BoundRegion::BrNamed(def_id, name), ..\n                 }) => {\n                     let bound_region = gcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n                         index: i as u32,"}, {"sha": "1981e7c3a3d122086fcd695912cb515782cd2a6d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -1442,11 +1442,15 @@ fn generics_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n         let early_lifetimes = early_bound_lifetimes_from_generics(ccx, ast_generics);\n         let regions = early_lifetimes.iter().enumerate().map(|(i, l)| {\n+            let issue_32330 = ccx.tcx.named_region_map.issue_32330\n+                                                      .get(&l.lifetime.id)\n+                                                      .cloned();\n             ty::RegionParameterDef {\n                 name: l.lifetime.name,\n                 index: own_start + i as u32,\n                 def_id: tcx.hir.local_def_id(l.lifetime.id),\n                 pure_wrt_drop: l.pure_wrt_drop,\n+                issue_32330: issue_32330,\n             }\n         }).collect::<Vec<_>>();\n \n@@ -1675,7 +1679,7 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx, 'hir>(\n     ast_generics\n         .lifetimes\n         .iter()\n-        .filter(|l| !ccx.tcx.named_region_map.late_bound.contains_key(&l.lifetime.id))\n+        .filter(|l| !ccx.tcx.named_region_map.late_bound.contains(&l.lifetime.id))\n         .collect()\n }\n "}, {"sha": "5bfc3a934af059ee7999a5904a8eb862f497a75a", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -4056,6 +4056,74 @@ fn main() {\n ```\n \"##,\n \n+E0581: r##\"\n+In a `fn` type, a lifetime appears only in the return type,\n+and not in the arguments types.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0581\n+fn main() {\n+    // Here, `'a` appears only in the return type:\n+    let x: for<'a> fn() -> &'a i32;\n+}\n+```\n+\n+To fix this issue, either use the lifetime in the arguments, or use\n+`'static`. Example:\n+\n+```\n+fn main() {\n+    // Here, `'a` appears only in the return type:\n+    let x: for<'a> fn(&'a i32) -> &'a i32;\n+    let y: fn() -> &'static i32;\n+}\n+```\n+\n+Note: The examples above used to be (erroneously) accepted by the\n+compiler, but this was since corrected. See [issue #33685] for more\n+details.\n+\n+[issue #33685]: https://github.com/rust-lang/rust/issues/33685\n+\"##,\n+\n+    E0582: r##\"\n+A lifetime appears only in an associated-type binding,\n+and not in the input types to the trait.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0582\n+fn bar<F>(t: F)\n+    // No type can satisfy this requirement, since `'a` does not\n+    // appear in any of the input types (here, `i32`):\n+    where F: for<'a> Fn(i32) -> Option<&'a i32>\n+{\n+}\n+\n+fn main() { }\n+```\n+\n+To fix this issue, either use the lifetime in the inputs, or use\n+`'static`. Example:\n+\n+```\n+fn bar<F, G>(t: F, u: G)\n+    where F: for<'a> Fn(&'a i32) -> Option<&'a i32>,\n+          G: Fn(i32) -> Option<&'static i32>,\n+{\n+}\n+\n+fn main() { }\n+```\n+\n+Note: The examples above used to be (erroneously) accepted by the\n+compiler, but this was since corrected. See [issue #33685] for more\n+details.\n+\n+[issue #33685]: https://github.com/rust-lang/rust/issues/33685\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "291fc8dfa96806b43d68a9739392e4b03c053b27", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -810,7 +810,7 @@ impl Clean<Option<Lifetime>> for ty::Region {\n     fn clean(&self, cx: &DocContext) -> Option<Lifetime> {\n         match *self {\n             ty::ReStatic => Some(Lifetime::statik()),\n-            ty::ReLateBound(_, ty::BrNamed(_, name, _)) => Some(Lifetime(name.to_string())),\n+            ty::ReLateBound(_, ty::BrNamed(_, name)) => Some(Lifetime(name.to_string())),\n             ty::ReEarlyBound(ref data) => Some(Lifetime(data.name.clean(cx))),\n \n             ty::ReLateBound(..) |"}, {"sha": "5e6f65a18f46a78a6370ad4d5a2a72e1d170668a", "filename": "src/test/compile-fail/E0582.rs", "status": "renamed", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Ftest%2Fcompile-fail%2FE0582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Ftest%2Fcompile-fail%2FE0582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0582.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -12,7 +12,6 @@\n // stopped compiling when #32330 is fixed.\n \n #![allow(dead_code, unused_variables)]\n-#![deny(hr_lifetime_in_assoc_type)]\n \n use std::str::Chars;\n \n@@ -31,16 +30,21 @@ fn mk_unexpected_char_err<'a>() -> Option<&'a i32> {\n \n fn foo<'a>(data: &mut Chars<'a>) {\n     bar(mk_unexpected_char_err)\n-    //~^ ERROR lifetime parameter `'a` declared on fn `mk_unexpected_char_err`\n-    //~| WARNING hard error in a future release\n }\n \n fn bar<F>(t: F)\n     // No type can satisfy this requirement, since `'a` does not\n     // appear in any of the input types:\n     where F: for<'a> Fn() -> Option<&'a i32>\n-    //~^ ERROR associated type `Output` references lifetime `'a`, which does not\n-    //~| WARNING hard error in a future release\n+    //~^ ERROR E0582\n+{\n+}\n+\n+fn baz<F>(t: F)\n+    // No type can satisfy this requirement, since `'a` does not\n+    // appear in any of the input types:\n+    where F: for<'a> Iterator<Item=&'a i32>\n+    //~^ ERROR E0582\n {\n }\n ", "previous_filename": "src/test/compile-fail/associated-types/cache/wasm-issue-32330.rs"}, {"sha": "7d04372088b76f81ef2863101b6377c34cdec87e", "filename": "src/test/compile-fail/associated-types/bound-lifetime-constrained.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -12,7 +12,7 @@\n \n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n-#![deny(hr_lifetime_in_assoc_type)]\n+#![allow(hr_lifetime_in_assoc_type)]\n \n trait Foo<'a> {\n     type Item;\n@@ -25,40 +25,34 @@ impl<'a> Foo<'a> for() {\n // Check that appearing in a projection input in the argument is not enough:\n #[cfg(func)]\n fn func1(_: for<'a> fn(<() as Foo<'a>>::Item) -> &'a i32) {\n-    //[func]~^ ERROR return type references lifetime `'a`\n-    //[func]~| WARNING previously accepted\n+    //[func]~^ ERROR E0581\n }\n \n // Check that appearing in a projection input in the return still\n // causes an error:\n #[cfg(func)]\n fn func2(_: for<'a> fn() -> <() as Foo<'a>>::Item) {\n-    //[func]~^ ERROR return type references lifetime `'a`\n-    //[func]~| WARNING previously accepted\n+    //[func]~^ ERROR E0581\n }\n \n #[cfg(object)]\n fn object1(_: Box<for<'a> Fn(<() as Foo<'a>>::Item) -> &'a i32>) {\n-    //[object]~^ ERROR `Output` references lifetime `'a`\n-    //[object]~| WARNING previously accepted\n+    //[object]~^ ERROR E0582\n }\n \n #[cfg(object)]\n fn object2(_: Box<for<'a> Fn() -> <() as Foo<'a>>::Item>) {\n-    //[object]~^ ERROR `Output` references lifetime `'a`\n-    //[object]~| WARNING previously accepted\n+    //[object]~^ ERROR E0582\n }\n \n #[cfg(clause)]\n fn clause1<T>() where T: for<'a> Fn(<() as Foo<'a>>::Item) -> &'a i32 {\n     //[clause]~^ ERROR `Output` references lifetime `'a`\n-    //[clause]~| WARNING previously accepted\n }\n \n #[cfg(clause)]\n fn clause2<T>() where T: for<'a> Fn() -> <() as Foo<'a>>::Item {\n     //[clause]~^ ERROR `Output` references lifetime `'a`\n-    //[clause]~| WARNING previously accepted\n }\n \n #[rustc_error]"}, {"sha": "7cb0623315e1e41ea2fef29da529514f57d8e213", "filename": "src/test/compile-fail/associated-types/bound-lifetime-in-binding-only.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -13,7 +13,6 @@\n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n #![feature(unboxed_closures)]\n-#![deny(hr_lifetime_in_assoc_type)]\n \n trait Foo {\n     type Item;\n@@ -22,49 +21,41 @@ trait Foo {\n #[cfg(angle)]\n fn angle<T: for<'a> Foo<Item=&'a i32>>() {\n     //[angle]~^ ERROR binding for associated type `Item` references lifetime `'a`\n-    //[angle]~| WARNING previously accepted\n }\n \n #[cfg(angle)]\n fn angle1<T>() where T: for<'a> Foo<Item=&'a i32> {\n     //[angle]~^ ERROR binding for associated type `Item` references lifetime `'a`\n-    //[angle]~| WARNING previously accepted\n }\n \n #[cfg(angle)]\n fn angle2<T>() where for<'a> T: Foo<Item=&'a i32> {\n     //[angle]~^ ERROR binding for associated type `Item` references lifetime `'a`\n-    //[angle]~| WARNING previously accepted\n }\n \n #[cfg(angle)]\n fn angle3(_: &for<'a> Foo<Item=&'a i32>) {\n     //[angle]~^ ERROR binding for associated type `Item` references lifetime `'a`\n-    //[angle]~| WARNING previously accepted\n }\n \n #[cfg(paren)]\n fn paren<T: for<'a> Fn() -> &'a i32>() {\n     //[paren]~^ ERROR binding for associated type `Output` references lifetime `'a`\n-    //[paren]~| WARNING previously accepted\n }\n \n #[cfg(paren)]\n fn paren1<T>() where T: for<'a> Fn() -> &'a i32 {\n     //[paren]~^ ERROR binding for associated type `Output` references lifetime `'a`\n-    //[paren]~| WARNING previously accepted\n }\n \n #[cfg(paren)]\n fn paren2<T>() where for<'a> T: Fn() -> &'a i32 {\n     //[paren]~^ ERROR binding for associated type `Output` references lifetime `'a`\n-    //[paren]~| WARNING previously accepted\n }\n \n #[cfg(paren)]\n fn paren3(_: &for<'a> Fn() -> &'a i32) {\n     //[paren]~^ ERROR binding for associated type `Output` references lifetime `'a`\n-    //[paren]~| WARNING previously accepted\n }\n \n #[cfg(elision)]"}, {"sha": "7c1fbfa53d9651b997c5aa21ed56082a92677ec6", "filename": "src/test/compile-fail/associated-types/bound-lifetime-in-return-only.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-return-only.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -22,27 +22,23 @@ trait Foo {\n #[cfg(sig)]\n fn sig1(_: for<'a> fn() -> &'a i32) {\n     //[sig]~^ ERROR return type references lifetime `'a`\n-    //[sig]~| WARNING previously accepted\n }\n \n #[cfg(sig)]\n fn sig2(_: for<'a, 'b> fn(&'b i32) -> &'a i32) {\n     //[sig]~^ ERROR return type references lifetime `'a`\n-    //[sig]~| WARNING previously accepted\n }\n \n #[cfg(local)]\n fn local1() {\n     let _: for<'a> fn() -> &'a i32 = loop { };\n     //[local]~^ ERROR return type references lifetime `'a`\n-    //[local]~| WARNING previously accepted\n }\n \n #[cfg(structure)]\n struct Struct1 {\n     x: for<'a> fn() -> &'a i32\n     //[structure]~^ ERROR return type references lifetime `'a`\n-    //[structure]~| WARNING previously accepted\n }\n \n #[cfg(elision)]"}, {"sha": "ac7dd022c7c467ab287f989c7850b361e4888a0a", "filename": "src/test/compile-fail/regions-fn-subtyping-return-static.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -46,7 +46,10 @@ fn baz(x: &S) -> &S {\n \n fn supply_F() {\n     want_F(foo);\n-    want_F(bar);\n+\n+    // FIXME(#33684) -- this should be a subtype, but current alg. rejects it incorrectly\n+    want_F(bar); //~ ERROR E0308\n+\n     want_F(baz);\n }\n "}, {"sha": "9098511186724873d153a26921f1557eec08b2b2", "filename": "src/test/ui/regions-fn-subtyping-return-static.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static.rs?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// In this fn, the type `F` is a function that takes a reference to a\n+// struct and returns another reference with the same lifetime.\n+//\n+// Meanwhile, the bare fn `foo` takes a reference to a struct with\n+// *ANY* lifetime and returns a reference with the 'static lifetime.\n+// This can safely be considered to be an instance of `F` because all\n+// lifetimes are sublifetimes of 'static.\n+\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+struct S;\n+\n+// Given 'cx, return 'cx\n+type F = for<'cx> fn(&'cx S) -> &'cx S;\n+fn want_F(f: F) { }\n+\n+// Given anything, return 'static\n+type G = for<'cx> fn(&'cx S) -> &'static S;\n+fn want_G(f: G) { }\n+\n+// Should meet both.\n+fn foo(x: &S) -> &'static S {\n+    panic!()\n+}\n+\n+// Should meet both.\n+fn bar<'a,'b>(x: &'a S) -> &'b S {\n+    panic!()\n+}\n+\n+// Meets F, but not G.\n+fn baz(x: &S) -> &S {\n+    panic!()\n+}\n+\n+fn supply_F() {\n+    want_F(foo);\n+\n+    // FIXME(#33684) -- this should be a subtype, but current alg. rejects it incorrectly\n+    want_F(bar); //~ ERROR E0308\n+\n+    want_F(baz);\n+}\n+\n+pub fn main() {\n+}"}, {"sha": "0c7b44af949b6315588759e19418a5ea30064d01", "filename": "src/test/ui/regions-fn-subtyping-return-static.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b26120db11d36fbf85742149221e474c885d2387/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b26120db11d36fbf85742149221e474c885d2387/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static.stderr?ref=b26120db11d36fbf85742149221e474c885d2387", "patch": "@@ -0,0 +1,13 @@\n+error[E0308]: mismatched types\n+  --> $DIR/regions-fn-subtyping-return-static.rs:51:12\n+   |\n+51 |     want_F(bar); //~ ERROR E0308\n+   |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n+   |\n+   = note: expected type `fn(&'cx S) -> &'cx S`\n+              found type `fn(&'a S) -> &S {bar::<'_>}`\n+   = note: lifetime parameter `'b` declared on fn `bar` appears only in the return type, but here is required to be higher-ranked, which means that `'b` must appear in both argument and return types\n+   = note: this error is the result of a recent bug fix; for more information, see issue #33685 <https://github.com/rust-lang/rust/issues/33685>\n+\n+error: aborting due to previous error\n+"}]}