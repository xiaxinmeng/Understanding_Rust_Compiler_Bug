{"sha": "49bf48a33d1a8532c57a0e6f760d9b7b88c39abf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YmY0OGEzM2QxYTg1MzJjNTdhMGU2Zjc2MGQ5YjdiODhjMzlhYmY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-10T16:55:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-10T16:55:37Z"}, "message": "Rollup merge of #81309 - lcnr:lazy-norm-err-msgh, r=nikomatsakis\n\nalways eagerly eval consts in Relate\n\nr? ```@nikomatsakis``` cc ```@varkor```", "tree": {"sha": "1ce12ea93f03bb8aa4dc9fd5cb6cb9e7784308f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ce12ea93f03bb8aa4dc9fd5cb6cb9e7784308f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49bf48a33d1a8532c57a0e6f760d9b7b88c39abf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgSPoJCRBK7hj4Ov3rIwAAdHIIAG4QxFBzox6sOWPBV8uJB+Gx\n1GAtZpGzuUuoRiWUl6Wespfh8vyojCSPb6nAXgPXe8yCKIuQ7vJFw7O3IdfaXz0t\nruNCwTDNLZx6wVNwEJB/+KdQF+wFJeKamBdS3h5nqk+OCwIAeYXP/aE4BvwwpmPT\nKstc3VvfT+nuqFZcaXKJeLAV19fJjdTp96Uz0aneA4lLc/8WLSzo0xAfrJkr8E/5\nTQt5PhKAzqDpp08nAuEduI5EiCYADAv6OiBh0SkzYrCTnwhj/hvjV09ZfgMn9QTx\n5LzvrsSEGjKHDV0wTmCwf0XZeRePHclgrR0oea6lNtd7zPHBJswc60fl5tZiTIM=\n=2C6W\n-----END PGP SIGNATURE-----\n", "payload": "tree 1ce12ea93f03bb8aa4dc9fd5cb6cb9e7784308f8\nparent 5fe790e3c40710ecb95ddaadb98b59a3bb4f8326\nparent 2beea2c0bfde5acb681a368f82d8ce9c4e9568cd\nauthor Dylan DPC <dylan.dpc@gmail.com> 1615395337 +0100\ncommitter GitHub <noreply@github.com> 1615395337 +0100\n\nRollup merge of #81309 - lcnr:lazy-norm-err-msgh, r=nikomatsakis\n\nalways eagerly eval consts in Relate\n\nr? ```@nikomatsakis``` cc ```@varkor```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49bf48a33d1a8532c57a0e6f760d9b7b88c39abf", "html_url": "https://github.com/rust-lang/rust/commit/49bf48a33d1a8532c57a0e6f760d9b7b88c39abf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49bf48a33d1a8532c57a0e6f760d9b7b88c39abf/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe790e3c40710ecb95ddaadb98b59a3bb4f8326", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe790e3c40710ecb95ddaadb98b59a3bb4f8326", "html_url": "https://github.com/rust-lang/rust/commit/5fe790e3c40710ecb95ddaadb98b59a3bb4f8326"}, {"sha": "2beea2c0bfde5acb681a368f82d8ce9c4e9568cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2beea2c0bfde5acb681a368f82d8ce9c4e9568cd", "html_url": "https://github.com/rust-lang/rust/commit/2beea2c0bfde5acb681a368f82d8ce9c4e9568cd"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "f21545447b2044f11c74ea9a9bc5091378489c8c", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49bf48a33d1a8532c57a0e6f760d9b7b88c39abf/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49bf48a33d1a8532c57a0e6f760d9b7b88c39abf/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=49bf48a33d1a8532c57a0e6f760d9b7b88c39abf", "patch": "@@ -421,12 +421,14 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n             let t = relation.relate(a_t, b_t)?;\n             match relation.relate(sz_a, sz_b) {\n                 Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),\n-                // FIXME(#72219) Implement improved diagnostics for mismatched array\n-                // length?\n-                Err(err) if relation.tcx().lazy_normalization() => Err(err),\n                 Err(err) => {\n                     // Check whether the lengths are both concrete/known values,\n                     // but are unequal, for better diagnostics.\n+                    //\n+                    // It might seem dubious to eagerly evaluate these constants here,\n+                    // we however cannot end up with errors in `Relate` during both\n+                    // `type_of` and `predicates_of`. This means that evaluating the\n+                    // constants should not cause cycle errors here.\n                     let sz_a = sz_a.try_eval_usize(tcx, relation.param_env());\n                     let sz_b = sz_b.try_eval_usize(tcx, relation.param_env());\n                     match (sz_a, sz_b) {"}, {"sha": "6ef698bd6a04f6b140ceb13abc83275b86c503b3", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49bf48a33d1a8532c57a0e6f760d9b7b88c39abf/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49bf48a33d1a8532c57a0e6f760d9b7b88c39abf/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.full.stderr?ref=49bf48a33d1a8532c57a0e6f760d9b7b88c39abf", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:7:67\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:9:67\n    |\n LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n    |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n \n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:9:65\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:11:65\n    |\n LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n    |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements"}, {"sha": "6ef698bd6a04f6b140ceb13abc83275b86c503b3", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49bf48a33d1a8532c57a0e6f760d9b7b88c39abf/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49bf48a33d1a8532c57a0e6f760d9b7b88c39abf/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr?ref=49bf48a33d1a8532c57a0e6f760d9b7b88c39abf", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:7:67\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:9:67\n    |\n LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n    |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n \n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:9:65\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:11:65\n    |\n LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n    |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements"}, {"sha": "a8f533eceaa6d98f9cf1fe8ced240d833d008ef8", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49bf48a33d1a8532c57a0e6f760d9b7b88c39abf/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49bf48a33d1a8532c57a0e6f760d9b7b88c39abf/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs?ref=49bf48a33d1a8532c57a0e6f760d9b7b88c39abf", "patch": "@@ -1,5 +1,7 @@\n // aux-build:const_generic_lib.rs\n // revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n \n extern crate const_generic_lib;\n "}]}