{"sha": "ff59147d5377d3ab06cb0d675725da10534d94e9", "node_id": "C_kwDOAAsO6NoAKGZmNTkxNDdkNTM3N2QzYWIwNmNiMGQ2NzU3MjVkYTEwNTM0ZDk0ZTk", "commit": {"author": {"name": "Moritz Vetter", "email": "mv@3yourmind.com", "date": "2022-02-27T01:11:56Z"}, "committer": {"name": "Moritz Vetter", "email": "mv@3yourmind.com", "date": "2022-02-27T01:27:44Z"}, "message": "add two more unit tests for text_edit", "tree": {"sha": "b65835828343b76b8bcf507d494db3360433ba4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b65835828343b76b8bcf507d494db3360433ba4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff59147d5377d3ab06cb0d675725da10534d94e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff59147d5377d3ab06cb0d675725da10534d94e9", "html_url": "https://github.com/rust-lang/rust/commit/ff59147d5377d3ab06cb0d675725da10534d94e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff59147d5377d3ab06cb0d675725da10534d94e9/comments", "author": null, "committer": null, "parents": [{"sha": "21d497b77366bdf90e6fcc9a35ee8f24344622ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/21d497b77366bdf90e6fcc9a35ee8f24344622ca", "html_url": "https://github.com/rust-lang/rust/commit/21d497b77366bdf90e6fcc9a35ee8f24344622ca"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "19c96d34c5753d7110790225380aab8299c86db0", "filename": "crates/text_edit/src/lib.rs", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ff59147d5377d3ab06cb0d675725da10534d94e9/crates%2Ftext_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff59147d5377d3ab06cb0d675725da10534d94e9/crates%2Ftext_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2Fsrc%2Flib.rs?ref=ff59147d5377d3ab06cb0d675725da10534d94e9", "patch": "@@ -198,16 +198,44 @@ fn check_disjoint_and_sort(indels: &mut [impl std::borrow::Borrow<Indel>]) -> bo\n     })\n }\n \n-#[test]\n-fn test_apply() {\n-    let mut text = \"_11h1_2222_xx3333_4444_6666\".to_string();\n-    let mut builder = TextEditBuilder::default();\n-    builder.replace(TextRange::new(3.into(), 4.into()), \"1\".to_string());\n-    builder.delete(TextRange::new(11.into(), 13.into()));\n-    builder.insert(22.into(), \"_5555\".to_string());\n-\n-    let text_edit = builder.finish();\n-    text_edit.apply(&mut text);\n-\n-    assert_eq!(text, \"_1111_2222_3333_4444_5555_6666\")\n-}\n\\ No newline at end of file\n+#[cfg(test)]\n+mod tests {\n+    use super::{TextEdit, TextEditBuilder, TextRange};\n+\n+    fn range(start: u32, end: u32) -> TextRange {\n+        TextRange::new(start.into(), end.into())\n+    }\n+\n+    #[test]\n+    fn test_apply() {\n+        let mut text = \"_11h1_2222_xx3333_4444_6666\".to_string();\n+        let mut builder = TextEditBuilder::default();\n+        builder.replace(range(3, 4), \"1\".to_string());\n+        builder.delete(range(11, 13));\n+        builder.insert(22.into(), \"_5555\".to_string());\n+\n+        let text_edit = builder.finish();\n+        text_edit.apply(&mut text);\n+\n+        assert_eq!(text, \"_1111_2222_3333_4444_5555_6666\")\n+    }\n+\n+    #[test]\n+    fn test_union() {\n+        let mut edit1 = TextEdit::delete(range(7, 11));\n+        let mut builder = TextEditBuilder::default();\n+        builder.delete(range(1, 5));\n+        builder.delete(range(13, 17));\n+\n+        let edit2 = builder.finish();\n+        assert!(edit1.union(edit2).is_ok());\n+        assert_eq!(edit1.indels.len(), 3);\n+    }\n+\n+    #[test]\n+    fn test_union_panics() {\n+        let mut edit1 = TextEdit::delete(range(7, 11));\n+        let edit2 = TextEdit::delete(range(9, 13));\n+        assert!(edit1.union(edit2).is_err());\n+    }\n+}"}]}