{"sha": "15c71f881607db5ddfd759785f62e4ae44aaf301", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YzcxZjg4MTYwN2RiNWRkZmQ3NTk3ODVmNjJlNGFlNDRhYWYzMDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-24T08:28:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-24T08:28:59Z"}, "message": "Merge #5018\n\n5018: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "26fec828b7cc8c64f80ba23c65cdd81ab3e7dc08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26fec828b7cc8c64f80ba23c65cdd81ab3e7dc08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15c71f881607db5ddfd759785f62e4ae44aaf301", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8w7LCRBK7hj4Ov3rIwAAdHIIACRKbo9g5Q30PwbsDfvnzCG5\n2ISenoHlWOMx1cnrQl6FR7Rgh9MC4JZGarWSyNVkhDHESe8LiTpGnw9aGHb3T5pg\nLz9OcwLaPo/ziUAtfankdLJFKAGcxY/CfBIJrfm8Q7Uka3a8GJ6z7zsDkH6EME75\nIf/A4hwKi4fdMrvKnVlmRC8sJS0U6vbFdO/xA3uDgZCf2o4x1Pms27fEx0ZZou/P\nMGunMPBaNkNbTibGw3wc+snwtRGSFvdC43RMrZ5UfbkWpCcE1VkcTi6AL8l4O/0m\ntp4b2JpXGNguxgq9rezybxpEg/Q9/MoITGAUCWD24/f1M1vzlIbDYfpg6IPFaJA=\n=hYoI\n-----END PGP SIGNATURE-----\n", "payload": "tree 26fec828b7cc8c64f80ba23c65cdd81ab3e7dc08\nparent c544f9a137bd675fd6e9cc4c244ff4366ededb50\nparent 08e2149eab4495bd816a30b3caf586bef2cd9649\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592987339 +0000\ncommitter GitHub <noreply@github.com> 1592987339 +0000\n\nMerge #5018\n\n5018: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15c71f881607db5ddfd759785f62e4ae44aaf301", "html_url": "https://github.com/rust-lang/rust/commit/15c71f881607db5ddfd759785f62e4ae44aaf301", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15c71f881607db5ddfd759785f62e4ae44aaf301/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c544f9a137bd675fd6e9cc4c244ff4366ededb50", "url": "https://api.github.com/repos/rust-lang/rust/commits/c544f9a137bd675fd6e9cc4c244ff4366ededb50", "html_url": "https://github.com/rust-lang/rust/commit/c544f9a137bd675fd6e9cc4c244ff4366ededb50"}, {"sha": "08e2149eab4495bd816a30b3caf586bef2cd9649", "url": "https://api.github.com/repos/rust-lang/rust/commits/08e2149eab4495bd816a30b3caf586bef2cd9649", "html_url": "https://github.com/rust-lang/rust/commit/08e2149eab4495bd816a30b3caf586bef2cd9649"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "4f4fb44943627682d8ebe0d1161b88091c089218", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/15c71f881607db5ddfd759785f62e4ae44aaf301/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c71f881607db5ddfd759785f62e4ae44aaf301/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=15c71f881607db5ddfd759785f62e4ae44aaf301", "patch": "@@ -132,10 +132,17 @@ fn with_files(\n \n     let mut file_position = None;\n \n-    for entry in fixture.iter() {\n-        let meta = match ParsedMeta::from(entry) {\n-            ParsedMeta::File(it) => it,\n+    for entry in fixture {\n+        let text = if entry.text.contains(CURSOR_MARKER) {\n+            let (range_or_offset, text) = extract_range_or_offset(&entry.text);\n+            assert!(file_position.is_none());\n+            file_position = Some((file_id, range_or_offset));\n+            text.to_string()\n+        } else {\n+            entry.text.clone()\n         };\n+\n+        let meta = FileMeta::from(entry);\n         assert!(meta.path.starts_with(&source_root_prefix));\n \n         if let Some(krate) = meta.krate {\n@@ -157,15 +164,6 @@ fn with_files(\n             default_crate_root = Some(file_id);\n         }\n \n-        let text = if entry.text.contains(CURSOR_MARKER) {\n-            let (range_or_offset, text) = extract_range_or_offset(&entry.text);\n-            assert!(file_position.is_none());\n-            file_position = Some((file_id, range_or_offset));\n-            text.to_string()\n-        } else {\n-            entry.text.to_string()\n-        };\n-\n         db.set_file_text(file_id, Arc::new(text));\n         db.set_file_source_root(file_id, source_root_id);\n         let path = VfsPath::new_virtual_path(meta.path);\n@@ -198,10 +196,6 @@ fn with_files(\n     (file_position, files)\n }\n \n-enum ParsedMeta {\n-    File(FileMeta),\n-}\n-\n struct FileMeta {\n     path: String,\n     krate: Option<String>,\n@@ -211,22 +205,22 @@ struct FileMeta {\n     env: Env,\n }\n \n-impl From<&Fixture> for ParsedMeta {\n-    fn from(f: &Fixture) -> Self {\n+impl From<Fixture> for FileMeta {\n+    fn from(f: Fixture) -> FileMeta {\n         let mut cfg = CfgOptions::default();\n         f.cfg_atoms.iter().for_each(|it| cfg.insert_atom(it.into()));\n         f.cfg_key_values.iter().for_each(|(k, v)| cfg.insert_key_value(k.into(), v.into()));\n \n-        Self::File(FileMeta {\n-            path: f.path.to_owned(),\n-            krate: f.crate_name.to_owned(),\n-            deps: f.deps.to_owned(),\n+        FileMeta {\n+            path: f.path,\n+            krate: f.krate,\n+            deps: f.deps,\n             cfg,\n             edition: f\n                 .edition\n                 .as_ref()\n                 .map_or(Edition::Edition2018, |v| Edition::from_str(&v).unwrap()),\n             env: Env::from(f.env.iter()),\n-        })\n+        }\n     }\n }"}, {"sha": "fad8f7e2cc6a0a7333d78ce97e130d2a1da2bd10", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15c71f881607db5ddfd759785f62e4ae44aaf301/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c71f881607db5ddfd759785f62e4ae44aaf301/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=15c71f881607db5ddfd759785f62e4ae44aaf301", "patch": "@@ -8,7 +8,7 @@ use stdx::{lines_with_ends, split_delim, trim_indent};\n pub struct Fixture {\n     pub path: String,\n     pub text: String,\n-    pub crate_name: Option<String>,\n+    pub krate: Option<String>,\n     pub deps: Vec<String>,\n     pub cfg_atoms: Vec<String>,\n     pub cfg_key_values: Vec<(String, String)>,\n@@ -56,7 +56,7 @@ impl Fixture {\n     }\n \n     //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo\n-    pub fn parse_meta_line(meta: &str) -> Fixture {\n+    fn parse_meta_line(meta: &str) -> Fixture {\n         assert!(meta.starts_with(\"//-\"));\n         let meta = meta[\"//-\".len()..].trim();\n         let components = meta.split_ascii_whitespace().collect::<Vec<_>>();\n@@ -98,7 +98,7 @@ impl Fixture {\n         Fixture {\n             path,\n             text: String::new(),\n-            crate_name: krate,\n+            krate: krate,\n             deps,\n             cfg_atoms,\n             cfg_key_values,\n@@ -136,7 +136,7 @@ fn parse_fixture_gets_full_meta() {\n     let meta = &parsed[0];\n     assert_eq!(\"mod m;\\n\", meta.text);\n \n-    assert_eq!(\"foo\", meta.crate_name.as_ref().unwrap());\n+    assert_eq!(\"foo\", meta.krate.as_ref().unwrap());\n     assert_eq!(\"/lib.rs\", meta.path);\n     assert_eq!(2, meta.env.len());\n }"}]}