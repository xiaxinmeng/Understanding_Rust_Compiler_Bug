{"sha": "f0448f44bcda55fd9eb71da82495ef648eedb4e4", "node_id": "C_kwDOAAsO6NoAKGYwNDQ4ZjQ0YmNkYTU1ZmQ5ZWI3MWRhODI0OTVlZjY0OGVlZGI0ZTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-10T21:59:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-10T21:59:07Z"}, "message": "Auto merge of #91760 - matthiaskrgr:rollup-zcemh6j, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #90407 (Document all public items in `rustc_incremental`)\n - #90897 (Fix incorrect stability attributes)\n - #91105 (Fix method name reference in stream documentation)\n - #91325 (adjust const_eval_select documentation)\n - #91470 (code-cov: generate dead functions with private/default linkage)\n - #91482 (Update documentation to use `from()` to initialize `HashMap`s and `BTreeMap`s)\n - #91524 (Fix Vec::extend_from_slice docs)\n - #91575 (Fix ICE on format string of macro with secondary-label)\n - #91625 (Remove redundant [..]s)\n - #91646 (Fix documentation for `core::ready::Ready`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d7157697f5cdcd6bf59adb15521427a212f0dbce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7157697f5cdcd6bf59adb15521427a212f0dbce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0448f44bcda55fd9eb71da82495ef648eedb4e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0448f44bcda55fd9eb71da82495ef648eedb4e4", "html_url": "https://github.com/rust-lang/rust/commit/f0448f44bcda55fd9eb71da82495ef648eedb4e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0448f44bcda55fd9eb71da82495ef648eedb4e4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b42deaccc2cbe17a68067aa5fdb76104369e1fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b42deaccc2cbe17a68067aa5fdb76104369e1fd", "html_url": "https://github.com/rust-lang/rust/commit/0b42deaccc2cbe17a68067aa5fdb76104369e1fd"}, {"sha": "1fca934898354160b46c17c58b67707a2dcb8988", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fca934898354160b46c17c58b67707a2dcb8988", "html_url": "https://github.com/rust-lang/rust/commit/1fca934898354160b46c17c58b67707a2dcb8988"}], "stats": {"total": 648, "additions": 424, "deletions": 224}, "files": [{"sha": "8a41aec081901dda1593ebbf098cb7489aec0fb8", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -57,7 +57,7 @@ impl LitKind {\n                 // string in the token.\n                 let s = symbol.as_str();\n                 let symbol =\n-                    if s.contains(&['\\\\', '\\r'][..]) {\n+                    if s.contains(&['\\\\', '\\r']) {\n                         let mut buf = String::with_capacity(s.len());\n                         let mut error = Ok(());\n                         unescape_literal(&s, Mode::Str, &mut |_, unescaped_char| {"}, {"sha": "5eaec79c4ed0ccbdcf448b6f0192dceee7d380b6", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -347,7 +347,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n                     if let Some(modifiers) = nested_meta.value_str() {\n                         for modifier in modifiers.as_str().split(',') {\n-                            if let Some(modifier) = modifier.strip_prefix(&['+', '-'][..]) {\n+                            if let Some(modifier) = modifier.strip_prefix(&['+', '-']) {\n                                 macro_rules! gate_modifier { ($($name:literal => $feature:ident)*) => {\n                                     $(if modifier == $name {\n                                         let msg = concat!(\"`#[link(modifiers=\\\"\", $name, \"\\\")]` is unstable\");\n@@ -383,7 +383,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n \n             ast::ItemKind::Fn(..) => {\n-                if self.sess.contains_name(&i.attrs[..], sym::start) {\n+                if self.sess.contains_name(&i.attrs, sym::start) {\n                     gate_feature_post!(\n                         &self,\n                         start,\n@@ -396,7 +396,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n \n             ast::ItemKind::Struct(..) => {\n-                for attr in self.sess.filter_by_name(&i.attrs[..], sym::repr) {\n+                for attr in self.sess.filter_by_name(&i.attrs, sym::repr) {\n                     for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n                         if item.has_name(sym::simd) {\n                             gate_feature_post!("}, {"sha": "2e51144769359130abd10c97c7941fe774268b64", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -499,7 +499,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n             ast::MetaItemKind::List(ref items) => {\n                 self.print_path(&item.path, false, 0);\n                 self.popen();\n-                self.commasep(Consistent, &items[..], |s, i| s.print_meta_list_item(i));\n+                self.commasep(Consistent, &items, |s, i| s.print_meta_list_item(i));\n                 self.pclose();\n             }\n         }\n@@ -997,7 +997,7 @@ impl<'a> State<'a> {\n             }\n             ast::TyKind::Tup(ref elts) => {\n                 self.popen();\n-                self.commasep(Inconsistent, &elts[..], |s, ty| s.print_type(ty));\n+                self.commasep(Inconsistent, &elts, |s, ty| s.print_type(ty));\n                 if elts.len() == 1 {\n                     self.word(\",\");\n                 }\n@@ -1017,10 +1017,10 @@ impl<'a> State<'a> {\n             ast::TyKind::Path(Some(ref qself), ref path) => self.print_qpath(path, qself, false),\n             ast::TyKind::TraitObject(ref bounds, syntax) => {\n                 let prefix = if syntax == ast::TraitObjectSyntax::Dyn { \"dyn\" } else { \"\" };\n-                self.print_type_bounds(prefix, &bounds[..]);\n+                self.print_type_bounds(prefix, &bounds);\n             }\n             ast::TyKind::ImplTrait(_, ref bounds) => {\n-                self.print_type_bounds(\"impl\", &bounds[..]);\n+                self.print_type_bounds(\"impl\", &bounds);\n             }\n             ast::TyKind::Array(ref ty, ref length) => {\n                 self.word(\"[\");\n@@ -1339,7 +1339,7 @@ impl<'a> State<'a> {\n                         real_bounds.push(b.clone());\n                     }\n                 }\n-                self.print_type_bounds(\":\", &real_bounds[..]);\n+                self.print_type_bounds(\":\", &real_bounds);\n                 self.print_where_clause(&generics.where_clause);\n                 self.word(\" \");\n                 self.bopen();\n@@ -1368,7 +1368,7 @@ impl<'a> State<'a> {\n                     }\n                 }\n                 self.nbsp();\n-                self.print_type_bounds(\"=\", &real_bounds[..]);\n+                self.print_type_bounds(\"=\", &real_bounds);\n                 self.print_where_clause(&generics.where_clause);\n                 self.word(\";\");\n             }\n@@ -1960,10 +1960,10 @@ impl<'a> State<'a> {\n                 self.print_expr_tup(exprs);\n             }\n             ast::ExprKind::Call(ref func, ref args) => {\n-                self.print_expr_call(func, &args[..]);\n+                self.print_expr_call(func, &args);\n             }\n             ast::ExprKind::MethodCall(ref segment, ref args, _) => {\n-                self.print_expr_method_call(segment, &args[..]);\n+                self.print_expr_method_call(segment, &args);\n             }\n             ast::ExprKind::Binary(op, ref lhs, ref rhs) => {\n                 self.print_expr_binary(op, lhs, rhs);\n@@ -2440,11 +2440,11 @@ impl<'a> State<'a> {\n                     self.print_path(path, true, 0);\n                 }\n                 self.popen();\n-                self.commasep(Inconsistent, &elts[..], |s, p| s.print_pat(p));\n+                self.commasep(Inconsistent, &elts, |s, p| s.print_pat(p));\n                 self.pclose();\n             }\n             PatKind::Or(ref pats) => {\n-                self.strsep(\"|\", true, Inconsistent, &pats[..], |s, p| s.print_pat(p));\n+                self.strsep(\"|\", true, Inconsistent, &pats, |s, p| s.print_pat(p));\n             }\n             PatKind::Path(None, ref path) => {\n                 self.print_path(path, true, 0);\n@@ -2462,7 +2462,7 @@ impl<'a> State<'a> {\n                 self.word_space(\"{\");\n                 self.commasep_cmnt(\n                     Consistent,\n-                    &fields[..],\n+                    &fields,\n                     |s, f| {\n                         s.cbox(INDENT_UNIT);\n                         if !f.is_shorthand {\n@@ -2485,7 +2485,7 @@ impl<'a> State<'a> {\n             }\n             PatKind::Tuple(ref elts) => {\n                 self.popen();\n-                self.commasep(Inconsistent, &elts[..], |s, p| s.print_pat(p));\n+                self.commasep(Inconsistent, &elts, |s, p| s.print_pat(p));\n                 if elts.len() == 1 {\n                     self.word(\",\");\n                 }\n@@ -2527,7 +2527,7 @@ impl<'a> State<'a> {\n             }\n             PatKind::Slice(ref elts) => {\n                 self.word(\"[\");\n-                self.commasep(Inconsistent, &elts[..], |s, p| s.print_pat(p));\n+                self.commasep(Inconsistent, &elts, |s, p| s.print_pat(p));\n                 self.word(\"]\");\n             }\n             PatKind::Rest => self.word(\"..\"),\n@@ -2836,7 +2836,7 @@ impl<'a> State<'a> {\n                     self.print_path(&tree.prefix, false, 0);\n                     self.word(\"::{\");\n                 }\n-                self.commasep(Inconsistent, &items[..], |this, &(ref tree, _)| {\n+                self.commasep(Inconsistent, &items, |this, &(ref tree, _)| {\n                     this.print_use_tree(tree)\n                 });\n                 self.word(\"}\");"}, {"sha": "9ae1584fcbf6a8ae9a7879760b3d90f1e839c8de", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -712,7 +712,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                             Some(&idx) => Some(idx),\n                             None => {\n                                 let msg = format!(\"there is no argument named `{}`\", name);\n-                                ecx.struct_span_err(span, &msg[..]).emit();\n+                                ecx.struct_span_err(span, &msg).emit();\n                                 None\n                             }\n                         },"}, {"sha": "985c45e2253880d02a9f8910f688e6526f6a1721", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -766,17 +766,17 @@ impl<'a> TraitDef<'a> {\n                         self,\n                         struct_def,\n                         type_ident,\n-                        &self_args[..],\n-                        &nonself_args[..],\n+                        &self_args,\n+                        &nonself_args,\n                     )\n                 } else {\n                     method_def.expand_struct_method_body(\n                         cx,\n                         self,\n                         struct_def,\n                         type_ident,\n-                        &self_args[..],\n-                        &nonself_args[..],\n+                        &self_args,\n+                        &nonself_args,\n                         use_temporaries,\n                     )\n                 };\n@@ -815,8 +815,8 @@ impl<'a> TraitDef<'a> {\n                         self,\n                         enum_def,\n                         type_ident,\n-                        &self_args[..],\n-                        &nonself_args[..],\n+                        &self_args,\n+                        &nonself_args,\n                     )\n                 } else {\n                     method_def.expand_enum_method_body(\n@@ -825,7 +825,7 @@ impl<'a> TraitDef<'a> {\n                         enum_def,\n                         type_ident,\n                         self_args,\n-                        &nonself_args[..],\n+                        &nonself_args,\n                     )\n                 };\n \n@@ -1217,7 +1217,7 @@ impl<'a> MethodDef<'a> {\n         let vi_idents = self_arg_names\n             .iter()\n             .map(|name| {\n-                let vi_suffix = format!(\"{}_vi\", &name[..]);\n+                let vi_suffix = format!(\"{}_vi\", name);\n                 Ident::from_str_and_span(&vi_suffix, span)\n             })\n             .collect::<Vec<Ident>>();\n@@ -1226,7 +1226,7 @@ impl<'a> MethodDef<'a> {\n         // delegated expression that handles the catch-all case,\n         // using `__variants_tuple` to drive logic if necessary.\n         let catch_all_substructure =\n-            EnumNonMatchingCollapsed(self_arg_idents, &variants[..], &vi_idents[..]);\n+            EnumNonMatchingCollapsed(self_arg_idents, &variants, &vi_idents);\n \n         let first_fieldless = variants.iter().find(|v| v.data.fields().is_empty());\n \n@@ -1261,7 +1261,7 @@ impl<'a> MethodDef<'a> {\n                     idents\n                 };\n                 for self_arg_name in &self_arg_names[1..] {\n-                    let (p, idents) = mk_self_pat(cx, &self_arg_name[..]);\n+                    let (p, idents) = mk_self_pat(cx, &self_arg_name);\n                     subpats.push(p);\n                     self_pats_idents.push(idents);\n                 }"}, {"sha": "cd16172fa3132d58c0bdfda8eaef4e9555b575e1", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -549,7 +549,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                             } else {\n                                 self.fmtsp\n                             };\n-                            let mut err = self.ecx.struct_span_err(sp, &msg[..]);\n+                            let mut err = self.ecx.struct_span_err(sp, &msg);\n \n                             err.note(&format!(\n                                 \"did you intend to capture a variable `{}` from \\\n@@ -995,8 +995,9 @@ pub fn expand_preparsed_format_args(\n             e.note(&note);\n         }\n         if let Some((label, span)) = err.secondary_label {\n-            let sp = fmt_span.from_inner(span);\n-            e.span_label(sp, label);\n+            if efmt_kind_is_lit {\n+                e.span_label(fmt_span.from_inner(span), label);\n+            }\n         }\n         e.emit();\n         return DummyResult::raw_expr(sp, true);"}, {"sha": "4962d0161525631d28dc2adb19655c3e24ae8725", "filename": "compiler/rustc_codegen_gcc/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_gcc%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_gcc%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fback%2Fwrite.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -32,7 +32,7 @@ pub(crate) unsafe fn codegen(cgcx: &CodegenContext<GccCodegenBackend>, _diag_han\n         if config.emit_asm {\n             let _timer = cgcx\n                 .prof\n-                .generic_activity_with_arg(\"LLVM_module_codegen_emit_asm\", &module.name[..]);\n+                .generic_activity_with_arg(\"LLVM_module_codegen_emit_asm\", &*module.name);\n             let path = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n             context.compile_to_file(OutputKind::Assembler, path.to_str().expect(\"path to str\"));\n         }\n@@ -41,7 +41,7 @@ pub(crate) unsafe fn codegen(cgcx: &CodegenContext<GccCodegenBackend>, _diag_han\n             EmitObj::ObjectCode(_) => {\n                 let _timer = cgcx\n                     .prof\n-                    .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &module.name[..]);\n+                    .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &*module.name);\n                 match &*module.name {\n                     \"std_example.7rcbfp3g-cgu.15\" => {\n                         println!(\"Dumping reproducer {}\", module.name);"}, {"sha": "ee31f2e60a97ebbcc31f43a6b5db012d17680607", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -477,7 +477,7 @@ pub(crate) fn inline_asm_call(\n         .collect::<Vec<_>>();\n \n     debug!(\"Asm Output Type: {:?}\", output);\n-    let fty = bx.cx.type_func(&argtys[..], output);\n+    let fty = bx.cx.type_func(&argtys, output);\n     unsafe {\n         // Ask LLVM to verify that the constraints are well-formed.\n         let constraints_ok = llvm::LLVMRustInlineAsmVerify(fty, cons.as_ptr().cast(), cons.len());"}, {"sha": "f6c40f1689e9e1da6537d073839d5fa5f95ab96c", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -587,7 +587,7 @@ pub(crate) fn run_pass_manager(\n     config: &ModuleConfig,\n     thin: bool,\n ) -> Result<(), FatalError> {\n-    let _timer = cgcx.prof.extra_verbose_generic_activity(\"LLVM_lto_optimize\", &module.name[..]);\n+    let _timer = cgcx.prof.extra_verbose_generic_activity(\"LLVM_lto_optimize\", &*module.name);\n \n     // Now we have one massive module inside of llmod. Time to run the\n     // LTO-specific optimization passes that LLVM provides."}, {"sha": "fa4fad30830d9c54ae96ba13d860fecc195c6c3f", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -510,7 +510,7 @@ pub(crate) unsafe fn optimize(\n     module: &ModuleCodegen<ModuleLlvm>,\n     config: &ModuleConfig,\n ) -> Result<(), FatalError> {\n-    let _timer = cgcx.prof.generic_activity_with_arg(\"LLVM_module_optimize\", &module.name[..]);\n+    let _timer = cgcx.prof.generic_activity_with_arg(\"LLVM_module_optimize\", &*module.name);\n \n     let llmod = module.module_llvm.llmod();\n     let llcx = &*module.module_llvm.llcx;\n@@ -663,14 +663,14 @@ pub(crate) unsafe fn optimize(\n         {\n             let _timer = cgcx.prof.extra_verbose_generic_activity(\n                 \"LLVM_module_optimize_function_passes\",\n-                &module.name[..],\n+                &*module.name,\n             );\n             llvm::LLVMRustRunFunctionPassManager(fpm, llmod);\n         }\n         {\n             let _timer = cgcx.prof.extra_verbose_generic_activity(\n                 \"LLVM_module_optimize_module_passes\",\n-                &module.name[..],\n+                &*module.name,\n             );\n             llvm::LLVMRunPassManager(mpm, llmod);\n         }\n@@ -733,7 +733,7 @@ pub(crate) unsafe fn codegen(\n     module: ModuleCodegen<ModuleLlvm>,\n     config: &ModuleConfig,\n ) -> Result<CompiledModule, FatalError> {\n-    let _timer = cgcx.prof.generic_activity_with_arg(\"LLVM_module_codegen\", &module.name[..]);\n+    let _timer = cgcx.prof.generic_activity_with_arg(\"LLVM_module_codegen\", &*module.name);\n     {\n         let llmod = module.module_llvm.llmod();\n         let llcx = &*module.module_llvm.llcx;\n@@ -782,7 +782,7 @@ pub(crate) unsafe fn codegen(\n         if config.bitcode_needed() {\n             let _timer = cgcx\n                 .prof\n-                .generic_activity_with_arg(\"LLVM_module_codegen_make_bitcode\", &module.name[..]);\n+                .generic_activity_with_arg(\"LLVM_module_codegen_make_bitcode\", &*module.name);\n             let thin = ThinBuffer::new(llmod);\n             let data = thin.data();\n \n@@ -795,29 +795,26 @@ pub(crate) unsafe fn codegen(\n             }\n \n             if config.emit_bc || config.emit_obj == EmitObj::Bitcode {\n-                let _timer = cgcx.prof.generic_activity_with_arg(\n-                    \"LLVM_module_codegen_emit_bitcode\",\n-                    &module.name[..],\n-                );\n+                let _timer = cgcx\n+                    .prof\n+                    .generic_activity_with_arg(\"LLVM_module_codegen_emit_bitcode\", &*module.name);\n                 if let Err(e) = fs::write(&bc_out, data) {\n                     let msg = format!(\"failed to write bytecode to {}: {}\", bc_out.display(), e);\n                     diag_handler.err(&msg);\n                 }\n             }\n \n             if config.emit_obj == EmitObj::ObjectCode(BitcodeSection::Full) {\n-                let _timer = cgcx.prof.generic_activity_with_arg(\n-                    \"LLVM_module_codegen_embed_bitcode\",\n-                    &module.name[..],\n-                );\n+                let _timer = cgcx\n+                    .prof\n+                    .generic_activity_with_arg(\"LLVM_module_codegen_embed_bitcode\", &*module.name);\n                 embed_bitcode(cgcx, llcx, llmod, &config.bc_cmdline, data);\n             }\n         }\n \n         if config.emit_ir {\n-            let _timer = cgcx\n-                .prof\n-                .generic_activity_with_arg(\"LLVM_module_codegen_emit_ir\", &module.name[..]);\n+            let _timer =\n+                cgcx.prof.generic_activity_with_arg(\"LLVM_module_codegen_emit_ir\", &*module.name);\n             let out = cgcx.output_filenames.temp_path(OutputType::LlvmAssembly, module_name);\n             let out_c = path_to_c_string(&out);\n \n@@ -866,9 +863,8 @@ pub(crate) unsafe fn codegen(\n         }\n \n         if config.emit_asm {\n-            let _timer = cgcx\n-                .prof\n-                .generic_activity_with_arg(\"LLVM_module_codegen_emit_asm\", &module.name[..]);\n+            let _timer =\n+                cgcx.prof.generic_activity_with_arg(\"LLVM_module_codegen_emit_asm\", &*module.name);\n             let path = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n \n             // We can't use the same module for asm and object code output,\n@@ -898,7 +894,7 @@ pub(crate) unsafe fn codegen(\n             EmitObj::ObjectCode(_) => {\n                 let _timer = cgcx\n                     .prof\n-                    .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &module.name[..]);\n+                    .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &*module.name);\n \n                 let dwo_out = cgcx.output_filenames.temp_path_dwo(module_name);\n                 let dwo_out = match cgcx.split_debuginfo {"}, {"sha": "d0ed978124313db5e06d1609a1becd2cde5eb2f7", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -120,7 +120,7 @@ impl CodegenCx<'ll, 'tcx> {\n                 !null_terminated as Bool,\n             );\n             let sym = self.generate_local_symbol_name(\"str\");\n-            let g = self.define_global(&sym[..], self.val_ty(sc)).unwrap_or_else(|| {\n+            let g = self.define_global(&sym, self.val_ty(sc)).unwrap_or_else(|| {\n                 bug!(\"symbol `{}` is already defined\", sym);\n             });\n             llvm::LLVMSetInitializer(g, sc);"}, {"sha": "50a68ae49d50ca20bca240df473dde94651acc1e", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -225,7 +225,7 @@ impl CodegenCx<'ll, 'tcx> {\n             let gv = match kind {\n                 Some(kind) if !self.tcx.sess.fewer_names() => {\n                     let name = self.generate_local_symbol_name(kind);\n-                    let gv = self.define_global(&name[..], self.val_ty(cv)).unwrap_or_else(|| {\n+                    let gv = self.define_global(&name, self.val_ty(cv)).unwrap_or_else(|| {\n                         bug!(\"symbol `{}` is already defined\", name);\n                     });\n                     llvm::LLVMRustSetLinkage(gv, llvm::Linkage::PrivateLinkage);"}, {"sha": "d2af1b247e86edcb40a9fa8dfcc477f0e261bdb7", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -89,7 +89,7 @@ pub fn finalize<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n     });\n \n     let filenames_size = filenames_buffer.len();\n-    let filenames_val = cx.const_bytes(&filenames_buffer[..]);\n+    let filenames_val = cx.const_bytes(&filenames_buffer);\n     let filenames_ref = coverageinfo::hash_bytes(filenames_buffer);\n \n     // Generate the LLVM IR representation of the coverage map and store it in a well-known global\n@@ -238,7 +238,7 @@ fn save_function_record(\n ) {\n     // Concatenate the encoded coverage mappings\n     let coverage_mapping_size = coverage_mapping_buffer.len();\n-    let coverage_mapping_val = cx.const_bytes(&coverage_mapping_buffer[..]);\n+    let coverage_mapping_val = cx.const_bytes(&coverage_mapping_buffer);\n \n     let func_name_hash = coverageinfo::hash_str(&mangled_function_name);\n     let func_name_hash_val = cx.const_u64(func_name_hash);"}, {"sha": "96b278dbe326aff09bc3f6db0bceb4e161d5dd61", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -212,8 +212,8 @@ fn declare_unused_fn(cx: &CodegenCx<'ll, 'tcx>, def_id: &DefId) -> Instance<'tcx\n         ),\n     );\n \n-    llvm::set_linkage(llfn, llvm::Linkage::WeakAnyLinkage);\n-    llvm::set_visibility(llfn, llvm::Visibility::Hidden);\n+    llvm::set_linkage(llfn, llvm::Linkage::PrivateLinkage);\n+    llvm::set_visibility(llfn, llvm::Visibility::Default);\n \n     assert!(cx.instances.borrow_mut().insert(instance, llfn).is_none());\n "}, {"sha": "cc39332d198f037ee2ccccae55f99a40f3b4e646", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -456,7 +456,7 @@ fn vec_slice_metadata(\n     let metadata = composite_type_metadata(\n         cx,\n         slice_ptr_type,\n-        &slice_type_name[..],\n+        &slice_type_name,\n         unique_type_id,\n         member_descriptions,\n         NO_SCOPE_METADATA,\n@@ -579,7 +579,7 @@ fn trait_pointer_metadata(\n     composite_type_metadata(\n         cx,\n         trait_object_type.unwrap_or(trait_type),\n-        &trait_type_name[..],\n+        &trait_type_name,\n         unique_type_id,\n         member_descriptions,\n         containing_scope,\n@@ -2398,7 +2398,7 @@ fn set_members_of_composite_type(\n \n     let type_params = compute_type_parameters(cx, composite_type);\n     unsafe {\n-        let type_array = create_DIArray(DIB(cx), &member_metadata[..]);\n+        let type_array = create_DIArray(DIB(cx), &member_metadata);\n         llvm::LLVMRustDICompositeTypeReplaceArrays(\n             DIB(cx),\n             composite_type_metadata,\n@@ -2437,7 +2437,7 @@ fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> &'ll DIAr\n                 })\n                 .collect();\n \n-            return create_DIArray(DIB(cx), &template_params[..]);\n+            return create_DIArray(DIB(cx), &template_params);\n         }\n     }\n     return create_DIArray(DIB(cx), &[]);"}, {"sha": "b801a7c131443c07b91f555a67ef57357c2fb854", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -474,7 +474,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 vec![]\n             };\n \n-            create_DIArray(DIB(cx), &template_params[..])\n+            create_DIArray(DIB(cx), &template_params)\n         }\n \n         fn get_parameter_names(cx: &CodegenCx<'_, '_>, generics: &ty::Generics) -> Vec<Symbol> {"}, {"sha": "d6af6104155a1d359d98c06663d9b7cd9445538a", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -677,11 +677,11 @@ impl<B: WriteBackendMethods> WorkItem<B> {\n     fn start_profiling<'a>(&self, cgcx: &'a CodegenContext<B>) -> TimingGuard<'a> {\n         match *self {\n             WorkItem::Optimize(ref m) => {\n-                cgcx.prof.generic_activity_with_arg(\"codegen_module_optimize\", &m.name[..])\n+                cgcx.prof.generic_activity_with_arg(\"codegen_module_optimize\", &*m.name)\n             }\n             WorkItem::CopyPostLtoArtifacts(ref m) => cgcx\n                 .prof\n-                .generic_activity_with_arg(\"codegen_copy_artifacts_from_incr_cache\", &m.name[..]),\n+                .generic_activity_with_arg(\"codegen_copy_artifacts_from_incr_cache\", &*m.name),\n             WorkItem::LTO(ref m) => {\n                 cgcx.prof.generic_activity_with_arg(\"codegen_module_perform_lto\", m.name())\n             }"}, {"sha": "2df58ecc9f68aa250ec402ee749c05be55e7764a", "filename": "compiler/rustc_codegen_ssa/src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -122,8 +122,8 @@ pub fn langcall(tcx: TyCtxt<'_>, span: Option<Span>, msg: &str, li: LangItem) ->\n     tcx.lang_items().require(li).unwrap_or_else(|s| {\n         let msg = format!(\"{} {}\", msg, s);\n         match span {\n-            Some(span) => tcx.sess.span_fatal(span, &msg[..]),\n-            None => tcx.sess.fatal(&msg[..]),\n+            Some(span) => tcx.sess.span_fatal(span, &msg),\n+            None => tcx.sess.fatal(&msg),\n         }\n     })\n }"}, {"sha": "df177fd9679d56f4c776db1b3d3da1d9189d7862", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -103,7 +103,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.eval_fn_call(\n                     fn_val,\n                     abi,\n-                    &args[..],\n+                    &args,\n                     ret,\n                     match (cleanup, caller_can_unwind) {\n                         (Some(cleanup), true) => StackPopUnwind::Cleanup(*cleanup),"}, {"sha": "c9af35da4bcef52309b80b5684f21a09a463ab57", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -142,7 +142,7 @@ impl_stable_hash_via_hash!(Fingerprint);\n impl<E: rustc_serialize::Encoder> Encodable<E> for Fingerprint {\n     #[inline]\n     fn encode(&self, s: &mut E) -> Result<(), E::Error> {\n-        s.emit_raw_bytes(&self.to_le_bytes()[..])?;\n+        s.emit_raw_bytes(&self.to_le_bytes())?;\n         Ok(())\n     }\n }\n@@ -151,7 +151,7 @@ impl<D: rustc_serialize::Decoder> Decodable<D> for Fingerprint {\n     #[inline]\n     fn decode(d: &mut D) -> Result<Self, D::Error> {\n         let mut bytes = [0u8; 16];\n-        d.read_raw_bytes_into(&mut bytes[..])?;\n+        d.read_raw_bytes_into(&mut bytes)?;\n         Ok(Fingerprint::from_le_bytes(bytes))\n     }\n }"}, {"sha": "fd6ff086b08cd1f735a7160f54fd0294dbf9573c", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -649,7 +649,7 @@ impl Drop for VerboseTimingGuard<'_> {\n     fn drop(&mut self) {\n         if let Some((start_time, start_rss, ref message)) = self.start_and_message {\n             let end_rss = get_resident_set_size();\n-            print_time_passes_entry(&message[..], start_time.elapsed(), start_rss, end_rss);\n+            print_time_passes_entry(&message, start_time.elapsed(), start_rss, end_rss);\n         }\n     }\n }"}, {"sha": "33e72914e19e3977a0894056622e5c8a145e13f0", "filename": "compiler/rustc_data_structures/src/small_c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_c_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_c_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_c_str.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -46,7 +46,7 @@ impl SmallCStr {\n \n     #[inline]\n     pub fn as_c_str(&self) -> &ffi::CStr {\n-        unsafe { ffi::CStr::from_bytes_with_nul_unchecked(&self.data[..]) }\n+        unsafe { ffi::CStr::from_bytes_with_nul_unchecked(&self.data) }\n     }\n \n     #[inline]"}, {"sha": "8065911afb9daba6da97961dba3fdb89275c2258", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -253,7 +253,7 @@ fn generic_extension<'cx>(\n     for (i, lhs) in lhses.iter().enumerate() {\n         // try each arm's matchers\n         let lhs_tt = match *lhs {\n-            mbe::TokenTree::Delimited(_, ref delim) => &delim.tts[..],\n+            mbe::TokenTree::Delimited(_, ref delim) => &delim.tts,\n             _ => cx.span_bug(sp, \"malformed macro lhs\"),\n         };\n \n@@ -353,7 +353,7 @@ fn generic_extension<'cx>(\n         for lhs in lhses {\n             // try each arm's matchers\n             let lhs_tt = match *lhs {\n-                mbe::TokenTree::Delimited(_, ref delim) => &delim.tts[..],\n+                mbe::TokenTree::Delimited(_, ref delim) => &delim.tts,\n                 _ => continue,\n             };\n             if let Success(_) =\n@@ -677,11 +677,11 @@ impl FirstSets {\n                         first.replace_with(tt.clone());\n                     }\n                     TokenTree::Delimited(span, ref delimited) => {\n-                        build_recur(sets, &delimited.tts[..]);\n+                        build_recur(sets, &delimited.tts);\n                         first.replace_with(delimited.open_tt(span));\n                     }\n                     TokenTree::Sequence(sp, ref seq_rep) => {\n-                        let subfirst = build_recur(sets, &seq_rep.tts[..]);\n+                        let subfirst = build_recur(sets, &seq_rep.tts);\n \n                         match sets.first.entry(sp.entire()) {\n                             Entry::Vacant(vac) => {\n@@ -748,7 +748,7 @@ impl FirstSets {\n                     let subfirst = match self.first.get(&sp.entire()) {\n                         Some(&Some(ref subfirst)) => subfirst,\n                         Some(&None) => {\n-                            subfirst_owned = self.first(&seq_rep.tts[..]);\n+                            subfirst_owned = self.first(&seq_rep.tts);\n                             &subfirst_owned\n                         }\n                         None => {"}, {"sha": "01a7f7266172c7227c992828dbc8cfa5b17e8b04", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -175,12 +175,12 @@ pub(super) fn transcribe<'a>(\n                         ));\n                     }\n \n-                    LockstepIterSize::Contradiction(ref msg) => {\n+                    LockstepIterSize::Contradiction(msg) => {\n                         // FIXME: this really ought to be caught at macro definition time... It\n                         // happens when two meta-variables are used in the same repetition in a\n                         // sequence, but they come from different sequence matchers and repeat\n                         // different amounts.\n-                        return Err(cx.struct_span_err(seq.span(), &msg[..]));\n+                        return Err(cx.struct_span_err(seq.span(), &msg));\n                     }\n \n                     LockstepIterSize::Constraint(len, _) => {"}, {"sha": "edb8bd503e1d01602a32bcb182e0296a475aeb0a", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -659,7 +659,7 @@ where\n         }\n \n         writeln!(text, \";\").unwrap();\n-        w.write_all(&text[..])?;\n+        w.write_all(&text)?;\n \n         text.clear();\n     }\n@@ -684,7 +684,7 @@ where\n         }\n \n         writeln!(text, \";\").unwrap();\n-        w.write_all(&text[..])?;\n+        w.write_all(&text)?;\n \n         text.clear();\n     }"}, {"sha": "65cdf10f9016a8a8884d401f7305a4195a60a3da", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -316,7 +316,7 @@ impl<'a> State<'a> {\n             }\n             hir::TyKind::Tup(ref elts) => {\n                 self.popen();\n-                self.commasep(Inconsistent, &elts[..], |s, ty| s.print_type(&ty));\n+                self.commasep(Inconsistent, &elts, |s, ty| s.print_type(&ty));\n                 if elts.len() == 1 {\n                     self.word(\",\");\n                 }\n@@ -1860,7 +1860,7 @@ impl<'a> State<'a> {\n                         self.commasep(Inconsistent, &elts[ddpos..], |s, p| s.print_pat(&p));\n                     }\n                 } else {\n-                    self.commasep(Inconsistent, &elts[..], |s, p| s.print_pat(&p));\n+                    self.commasep(Inconsistent, &elts, |s, p| s.print_pat(&p));\n                 }\n                 self.pclose();\n             }\n@@ -1873,7 +1873,7 @@ impl<'a> State<'a> {\n                 self.word_space(\"{\");\n                 self.commasep_cmnt(\n                     Consistent,\n-                    &fields[..],\n+                    &fields,\n                     |s, f| {\n                         s.cbox(INDENT_UNIT);\n                         if !f.is_shorthand {\n@@ -1895,7 +1895,7 @@ impl<'a> State<'a> {\n                 self.word(\"}\");\n             }\n             PatKind::Or(ref pats) => {\n-                self.strsep(\"|\", true, Inconsistent, &pats[..], |s, p| s.print_pat(&p));\n+                self.strsep(\"|\", true, Inconsistent, &pats, |s, p| s.print_pat(&p));\n             }\n             PatKind::Tuple(ref elts, ddpos) => {\n                 self.popen();\n@@ -1956,7 +1956,7 @@ impl<'a> State<'a> {\n             }\n             PatKind::Slice(ref before, ref slice, ref after) => {\n                 self.word(\"[\");\n-                self.commasep(Inconsistent, &before[..], |s, p| s.print_pat(&p));\n+                self.commasep(Inconsistent, &before, |s, p| s.print_pat(&p));\n                 if let Some(ref p) = *slice {\n                     if !before.is_empty() {\n                         self.word_space(\",\");\n@@ -1971,7 +1971,7 @@ impl<'a> State<'a> {\n                         self.word_space(\",\");\n                     }\n                 }\n-                self.commasep(Inconsistent, &after[..], |s, p| s.print_pat(&p));\n+                self.commasep(Inconsistent, &after, |s, p| s.print_pat(&p));\n                 self.word(\"]\");\n             }\n         }"}, {"sha": "7b5b015d5a509f35f9b6afc96735619928c6591f", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -52,6 +52,7 @@ use std::env;\n use std::fs::{self, File};\n use std::io::{BufWriter, Write};\n \n+#[allow(missing_docs)]\n pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.debugging_opts.dump_dep_graph {\n@@ -262,6 +263,7 @@ fn dump_graph(query: &DepGraphQuery) {\n     }\n }\n \n+#[allow(missing_docs)]\n pub struct GraphvizDepGraph<'q>(FxHashSet<&'q DepNode>, Vec<(&'q DepNode, &'q DepNode)>);\n \n impl<'a, 'q> dot::GraphWalk<'a> for GraphvizDepGraph<'q> {"}, {"sha": "2cf8f9b08e190908fe13990e5c195785031dead7", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -29,6 +29,7 @@ use rustc_session::cgu_reuse_tracker::*;\n use rustc_span::symbol::{sym, Symbol};\n use std::collections::BTreeSet;\n \n+#[allow(missing_docs)]\n pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.incremental.is_none() {"}, {"sha": "07e9f8b00ca1bd75184000545deaeb0a0bc2ea37", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -1,5 +1,6 @@\n //! Support for serializing the dep-graph and reloading it.\n \n+#![deny(missing_docs)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(in_band_lifetimes)]\n #![feature(let_else)]"}, {"sha": "a49a1554d5bfeaed97809caa80936612e0e146d8", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -133,21 +133,26 @@ const QUERY_CACHE_FILENAME: &str = \"query-cache.bin\";\n // case-sensitive (as opposed to base64, for example).\n const INT_ENCODE_BASE: usize = base_n::CASE_INSENSITIVE;\n \n+/// Returns the path to a session's dependency graph.\n pub fn dep_graph_path(sess: &Session) -> PathBuf {\n     in_incr_comp_dir_sess(sess, DEP_GRAPH_FILENAME)\n }\n+/// Returns the path to a session's staging dependency graph.\n+///\n+/// On the difference between dep-graph and staging dep-graph,\n+/// see `build_dep_graph`.\n pub fn staging_dep_graph_path(sess: &Session) -> PathBuf {\n     in_incr_comp_dir_sess(sess, STAGING_DEP_GRAPH_FILENAME)\n }\n-\n pub fn work_products_path(sess: &Session) -> PathBuf {\n     in_incr_comp_dir_sess(sess, WORK_PRODUCTS_FILENAME)\n }\n-\n+/// Returns the path to a session's query cache.\n pub fn query_cache_path(sess: &Session) -> PathBuf {\n     in_incr_comp_dir_sess(sess, QUERY_CACHE_FILENAME)\n }\n \n+/// Locks a given session directory.\n pub fn lock_file_path(session_dir: &Path) -> PathBuf {\n     let crate_dir = session_dir.parent().unwrap();\n \n@@ -166,23 +171,35 @@ pub fn lock_file_path(session_dir: &Path) -> PathBuf {\n     crate_dir.join(&directory_name[0..dash_indices[2]]).with_extension(&LOCK_FILE_EXT[1..])\n }\n \n+/// Returns the path for a given filename within the incremental compilation directory\n+/// in the current session.\n pub fn in_incr_comp_dir_sess(sess: &Session, file_name: &str) -> PathBuf {\n     in_incr_comp_dir(&sess.incr_comp_session_dir(), file_name)\n }\n \n+/// Returns the path for a given filename within the incremental compilation directory,\n+/// not necessarily from the current session.\n+///\n+/// To ensure the file is part of the current session, use [`in_incr_comp_dir_sess`].\n pub fn in_incr_comp_dir(incr_comp_session_dir: &Path, file_name: &str) -> PathBuf {\n     incr_comp_session_dir.join(file_name)\n }\n \n-/// Allocates the private session directory. The boolean in the Ok() result\n-/// indicates whether we should try loading a dep graph from the successfully\n-/// initialized directory, or not.\n-/// The post-condition of this fn is that we have a valid incremental\n-/// compilation session directory, if the result is `Ok`. A valid session\n+/// Allocates the private session directory.\n+///\n+/// If the result of this function is `Ok`, we have a valid incremental\n+/// compilation session directory. A valid session\n /// directory is one that contains a locked lock file. It may or may not contain\n /// a dep-graph and work products from a previous session.\n-/// If the call fails, the fn may leave behind an invalid session directory.\n+///\n+/// This always attempts to load a dep-graph from the directory.\n+/// If loading fails for some reason, we fallback to a disabled `DepGraph`.\n+/// See [`rustc_interface::queries::dep_graph`].\n+///\n+/// If this function returns an error, it may leave behind an invalid session directory.\n /// The garbage collection will take care of it.\n+///\n+/// [`rustc_interface::queries::dep_graph`]: ../../rustc_interface/struct.Queries.html#structfield.dep_graph\n pub fn prepare_session_directory(\n     sess: &Session,\n     crate_name: &str,\n@@ -661,6 +678,7 @@ fn is_old_enough_to_be_collected(timestamp: SystemTime) -> bool {\n     timestamp < SystemTime::now() - Duration::from_secs(10)\n }\n \n+/// Runs garbage collection for the current session.\n pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n     debug!(\"garbage_collect_session_directories() - begin\");\n "}, {"sha": "d563a6ca4780c606ef38fd2e6dbd4dd21ecbf42f", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -18,13 +18,24 @@ use super::work_product;\n type WorkProductMap = FxHashMap<WorkProductId, WorkProduct>;\n \n #[derive(Debug)]\n+/// Represents the result of an attempt to load incremental compilation data.\n pub enum LoadResult<T> {\n-    Ok { data: T },\n+    /// Loading was successful.\n+    Ok {\n+        #[allow(missing_docs)]\n+        data: T,\n+    },\n+    /// The file either didn't exist or was produced by an incompatible compiler version.\n     DataOutOfDate,\n-    Error { message: String },\n+    /// An error occured.\n+    Error {\n+        #[allow(missing_docs)]\n+        message: String,\n+    },\n }\n \n impl<T: Default> LoadResult<T> {\n+    /// Accesses the data returned in [`LoadResult::Ok`].\n     pub fn open(self, sess: &Session) -> T {\n         // Check for errors when using `-Zassert-incremental-state`\n         match (sess.opts.assert_incr_state, &self) {\n@@ -99,6 +110,7 @@ pub enum MaybeAsync<T> {\n }\n \n impl<T> MaybeAsync<LoadResult<T>> {\n+    /// Accesses the data returned in [`LoadResult::Ok`] in an asynchronous way if possible.\n     pub fn open(self) -> LoadResult<T> {\n         match self {\n             MaybeAsync::Sync(result) => result,\n@@ -109,6 +121,7 @@ impl<T> MaybeAsync<LoadResult<T>> {\n     }\n }\n \n+/// An asynchronous type for computing the dependency graph.\n pub type DepGraphFuture = MaybeAsync<LoadResult<(SerializedDepGraph, WorkProductMap)>>;\n \n /// Launch a thread and load the dependency graph in the background.\n@@ -151,7 +164,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n                                     compilation session directory: {}\",\n                         e\n                     );\n-                    sess.fatal(&msg[..])\n+                    sess.fatal(&msg)\n                 });\n \n             for swp in work_products {"}, {"sha": "9601a49267f0808c3a8605abe626eb01e8f03174", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -13,9 +13,13 @@ use super::file_format;\n use super::fs::*;\n use super::work_product;\n \n-/// Save and dump the DepGraph.\n+/// Saves and writes the [`DepGraph`] to the file system.\n ///\n-/// No query must be invoked after this function.\n+/// This function saves both the dep-graph and the query result cache,\n+/// and drops the result cache.\n+///\n+/// This function should only run after all queries have completed.\n+/// Trying to execute a query afterwards would attempt to read the result cache we just dropped.\n pub fn save_dep_graph(tcx: TyCtxt<'_>) {\n     debug!(\"save_dep_graph()\");\n     tcx.dep_graph.with_ignore(|| {\n@@ -75,6 +79,7 @@ pub fn save_dep_graph(tcx: TyCtxt<'_>) {\n     })\n }\n \n+/// Saves the work product index.\n pub fn save_work_product_index(\n     sess: &Session,\n     dep_graph: &DepGraph,\n@@ -139,6 +144,12 @@ fn encode_query_cache(tcx: TyCtxt<'_>, encoder: &mut FileEncoder) -> FileEncodeR\n     tcx.sess.time(\"incr_comp_serialize_result_cache\", || tcx.serialize_query_result_cache(encoder))\n }\n \n+/// Builds the dependency graph.\n+///\n+/// This function breates the *staging dep-graph*. When the dep-graph is modified by a query\n+/// execution, the new dependency information is not kept in memory but directly\n+/// output to this file. `save_dep_graph` then finalizes the staging dep-graph\n+/// and moves it to the permanent dep-graph path\n pub fn build_dep_graph(\n     sess: &Session,\n     prev_graph: SerializedDepGraph,"}, {"sha": "85b44ed7531923986ee51c4e5dc2475dc5fbc202", "filename": "compiler/rustc_incremental/src/persist/work_product.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -1,4 +1,6 @@\n-//! This module contains files for saving intermediate work-products.\n+//! Functions for saving and removing intermediate [work products].\n+//!\n+//! [work products]: WorkProduct\n \n use crate::persist::fs::*;\n use rustc_fs_util::link_or_copy;\n@@ -7,6 +9,7 @@ use rustc_session::Session;\n use std::fs as std_fs;\n use std::path::PathBuf;\n \n+/// Copies a CGU work product to the incremental compilation directory, so next compilation can find and reuse it.\n pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n     sess: &Session,\n     cgu_name: &str,\n@@ -40,6 +43,7 @@ pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n     Some((work_product_id, work_product))\n }\n \n+/// Removes files for a given work product.\n pub fn delete_workproduct_files(sess: &Session, work_product: &WorkProduct) {\n     if let Some(ref file_name) = work_product.saved_file {\n         let path = in_incr_comp_dir_sess(sess, file_name);"}, {"sha": "30506445ebb5ec9dc929ca089f4eed74bc60bb57", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -207,7 +207,7 @@ fn check_panic_str<'tcx>(\n     arg: &'tcx hir::Expr<'tcx>,\n     fmt: &str,\n ) {\n-    if !fmt.contains(&['{', '}'][..]) {\n+    if !fmt.contains(&['{', '}']) {\n         // No brace, no problem.\n         return;\n     }"}, {"sha": "9adf9406f09b49d9fa4db5fb2bbc258c97d9db52", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -132,7 +132,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                 if let Some(modifiers) = item.value_str() {\n                     let span = item.name_value_literal_span().unwrap();\n                     for modifier in modifiers.as_str().split(',') {\n-                        let (modifier, value) = match modifier.strip_prefix(&['+', '-'][..]) {\n+                        let (modifier, value) = match modifier.strip_prefix(&['+', '-']) {\n                             Some(m) => (m, modifier.starts_with('+')),\n                             None => {\n                                 sess.span_err("}, {"sha": "94e7376ddb216cd7f4078059206378473d1aa40c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -2119,7 +2119,7 @@ impl EncodedMetadata {\n \n     #[inline]\n     pub fn raw_data(&self) -> &[u8] {\n-        &self.raw_data[..]\n+        &self.raw_data\n     }\n }\n "}, {"sha": "f48e27e02cdc5b64d53027d984cc3587f19f9c30", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -530,6 +530,6 @@ impl CodegenUnitNameBuilder<'tcx> {\n             write!(cgu_name, \".{}\", special_suffix).unwrap();\n         }\n \n-        Symbol::intern(&cgu_name[..])\n+        Symbol::intern(&cgu_name)\n     }\n }"}, {"sha": "51e4afaf2204afc6f3f2094fcebb0b92cef3a5ae", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -342,7 +342,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | InlineAsm { destination: Some(ref t), cleanup: Some(ref u), .. } => {\n                 Some(t).into_iter().chain(slice::from_ref(u))\n             }\n-            SwitchInt { ref targets, .. } => None.into_iter().chain(&targets.targets[..]),\n+            SwitchInt { ref targets, .. } => None.into_iter().chain(&targets.targets),\n             FalseEdge { ref real_target, ref imaginary_target } => {\n                 Some(real_target).into_iter().chain(slice::from_ref(imaginary_target))\n             }\n@@ -380,7 +380,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | InlineAsm { destination: Some(ref mut t), cleanup: Some(ref mut u), .. } => {\n                 Some(t).into_iter().chain(slice::from_mut(u))\n             }\n-            SwitchInt { ref mut targets, .. } => None.into_iter().chain(&mut targets.targets[..]),\n+            SwitchInt { ref mut targets, .. } => None.into_iter().chain(&mut targets.targets),\n             FalseEdge { ref mut real_target, ref mut imaginary_target } => {\n                 Some(real_target).into_iter().chain(slice::from_mut(imaginary_target))\n             }"}, {"sha": "33ddc4f954a28b4a707ee13e028aff66bea25f50", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -587,18 +587,18 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n     pub fn borrow_nested_obligations(&self) -> &[N] {\n         match &self {\n             ImplSource::UserDefined(i) => &i.nested[..],\n-            ImplSource::Param(n, _) => &n[..],\n-            ImplSource::Builtin(i) => &i.nested[..],\n-            ImplSource::AutoImpl(d) => &d.nested[..],\n-            ImplSource::Closure(c) => &c.nested[..],\n-            ImplSource::Generator(c) => &c.nested[..],\n-            ImplSource::Object(d) => &d.nested[..],\n-            ImplSource::FnPointer(d) => &d.nested[..],\n+            ImplSource::Param(n, _) => &n,\n+            ImplSource::Builtin(i) => &i.nested,\n+            ImplSource::AutoImpl(d) => &d.nested,\n+            ImplSource::Closure(c) => &c.nested,\n+            ImplSource::Generator(c) => &c.nested,\n+            ImplSource::Object(d) => &d.nested,\n+            ImplSource::FnPointer(d) => &d.nested,\n             ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n             | ImplSource::Pointee(ImplSourcePointeeData)\n             | ImplSource::ConstDrop(ImplSourceConstDropData) => &[],\n-            ImplSource::TraitAlias(d) => &d.nested[..],\n-            ImplSource::TraitUpcasting(d) => &d.nested[..],\n+            ImplSource::TraitAlias(d) => &d.nested,\n+            ImplSource::TraitUpcasting(d) => &d.nested,\n         }\n     }\n "}, {"sha": "25beed1ecf9c776413e7580c683ebe0197b6406a", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -306,7 +306,7 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        let expect = tokens_to_string(&expected[..]);\n+        let expect = tokens_to_string(&expected);\n         let actual = super::token_descr(&self.token);\n         let (msg_exp, (label_sp, label_exp)) = if expected.len() > 1 {\n             let short_expect = if expected.len() > 6 {\n@@ -909,7 +909,7 @@ impl<'a> Parser<'a> {\n                         // So far we have parsed `foo<bar<`, consume the rest of the type args.\n                         let modifiers =\n                             [(token::Lt, 1), (token::Gt, -1), (token::BinOp(token::Shr), -2)];\n-                        self.consume_tts(1, &modifiers[..]);\n+                        self.consume_tts(1, &modifiers);\n \n                         if !&[token::OpenDelim(token::Paren), token::ModSep]\n                             .contains(&self.token.kind)\n@@ -1001,7 +1001,7 @@ impl<'a> Parser<'a> {\n         // Consume the fn call arguments.\n         let modifiers =\n             [(token::OpenDelim(token::Paren), 1), (token::CloseDelim(token::Paren), -1)];\n-        self.consume_tts(1, &modifiers[..]);\n+        self.consume_tts(1, &modifiers);\n \n         if self.token.kind == token::Eof {\n             // Not entirely sure that what we consumed were fn arguments, rollback."}, {"sha": "c42decdccff35edd43015cebf890ab7a345c8f71", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -158,7 +158,7 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n \n         // Wrap in a scope so we can borrow `data`.\n         let footer: Footer = {\n-            let mut decoder = opaque::Decoder::new(&data[..], start_pos);\n+            let mut decoder = opaque::Decoder::new(&data, start_pos);\n \n             // Decode the *position* of the footer, which can be found in the\n             // last 8 bytes of the file."}, {"sha": "5df8a4103b74fd6d696d78d5056433d15dcb508f", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -1735,7 +1735,7 @@ fn parse_native_lib_modifiers(\n ) -> (NativeLibKind, Option<bool>) {\n     let mut verbatim = None;\n     for modifier in modifiers.split(',') {\n-        let (modifier, value) = match modifier.strip_prefix(&['+', '-'][..]) {\n+        let (modifier, value) = match modifier.strip_prefix(&['+', '-']) {\n             Some(m) => (m, modifier.starts_with('+')),\n             None => early_error(\n                 error_format,\n@@ -2027,7 +2027,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let unparsed_crate_types = matches.opt_strs(\"crate-type\");\n     let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n-        .unwrap_or_else(|e| early_error(error_format, &e[..]));\n+        .unwrap_or_else(|e| early_error(error_format, &e));\n \n     let mut debugging_opts = DebuggingOptions::build(matches, error_format);\n     let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n@@ -2151,7 +2151,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let mut search_paths = vec![];\n     for s in &matches.opt_strs(\"L\") {\n-        search_paths.push(SearchPath::from_cli_opt(&s[..], error_format));\n+        search_paths.push(SearchPath::from_cli_opt(&s, error_format));\n     }\n \n     let libs = parse_libs(matches, error_format);"}, {"sha": "2934368dfeb89d7bf63d52ba9ca2fa2eca96e3b4", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -1383,7 +1383,7 @@ impl<S: Encoder> Encodable<S> for SourceFile {\n                     // Encode the first element.\n                     lines[0].encode(s)?;\n \n-                    let diff_iter = lines[..].array_windows().map(|&[fst, snd]| snd - fst);\n+                    let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);\n \n                     match bytes_per_diff {\n                         1 => {\n@@ -1506,7 +1506,7 @@ impl SourceFile {\n         assert!(end_pos <= u32::MAX as usize);\n \n         let (lines, multibyte_chars, non_narrow_chars) =\n-            analyze_source_file::analyze_source_file(&src[..], start_pos);\n+            analyze_source_file::analyze_source_file(&src, start_pos);\n \n         SourceFile {\n             name,"}, {"sha": "d9a5aea4d95fca3881f2e83acf68c22e1cfee663", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -231,7 +231,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         if let Ok(Some(command)) =\n             OnUnimplementedDirective::of_item(self.tcx, trait_ref.def_id, def_id)\n         {\n-            command.evaluate(self.tcx, trait_ref, &flags[..])\n+            command.evaluate(self.tcx, trait_ref, &flags)\n         } else {\n             OnUnimplementedNote::default()\n         }"}, {"sha": "d0b61b2430862ee21a24f3704b40ff9672e8c60f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -804,7 +804,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         } else if let ObligationCauseCode::BindingObligation(_, _)\n         | ObligationCauseCode::ItemObligation(_) = &*code\n         {\n-            try_borrowing(*poly_trait_ref, &never_suggest_borrow[..])\n+            try_borrowing(*poly_trait_ref, &never_suggest_borrow)\n         } else {\n             false\n         }\n@@ -1132,7 +1132,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             <https://doc.rust-lang.org/book/ch17-02-trait-objects.html\\\n             #using-trait-objects-that-allow-for-values-of-different-types>\";\n         let has_dyn = snippet.split_whitespace().next().map_or(false, |s| s == \"dyn\");\n-        let trait_obj = if has_dyn { &snippet[4..] } else { &snippet[..] };\n+        let trait_obj = if has_dyn { &snippet[4..] } else { &snippet };\n         if only_never_return {\n             // No return paths, probably using `panic!()` or similar.\n             // Suggest `-> T`, `-> impl Trait`, and if `Trait` is object safe, `-> Box<dyn Trait>`."}, {"sha": "427268d6d63f7caa4f424f5433f3732ee735b12b", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -1350,7 +1350,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     tcx,\n                     span,\n                     item.trait_ref().def_id(),\n-                    &object_safety_violations[..],\n+                    &object_safety_violations,\n                 )\n                 .emit();\n                 return tcx.ty_error();"}, {"sha": "e67ee1cab3df264fd42f7885e52e92b5fad2f3b7", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -496,7 +496,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             call_expr.span,\n             call_expr,\n             fn_sig.inputs(),\n-            &expected_arg_tys[..],\n+            &expected_arg_tys,\n             arg_exprs,\n             fn_sig.c_variadic,\n             TupleArgumentsFlag::DontTupleArguments,"}, {"sha": "e82ff9cf2dd883f2c8bce7f1f685409d110cebd0", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -1436,7 +1436,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             <dyn AstConv<'_>>::create_substs_for_generic_args(\n                 tcx,\n                 def_id,\n-                &[][..],\n+                &[],\n                 has_self,\n                 self_ty,\n                 &arg_count,"}, {"sha": "4cb597cb6d6c79e68644c2e33833a86a42bda392", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -54,13 +54,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             let err_inputs = match tuple_arguments {\n                 DontTupleArguments => err_inputs,\n-                TupleArguments => vec![self.tcx.intern_tup(&err_inputs[..])],\n+                TupleArguments => vec![self.tcx.intern_tup(&err_inputs)],\n             };\n \n             self.check_argument_types(\n                 sp,\n                 expr,\n-                &err_inputs[..],\n+                &err_inputs,\n                 &[],\n                 args_no_rcvr,\n                 false,\n@@ -324,7 +324,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.point_at_type_arg_instead_of_call_if_possible(errors, expr);\n                     self.point_at_arg_instead_of_call_if_possible(\n                         errors,\n-                        &final_arg_types[..],\n+                        &final_arg_types,\n                         expr,\n                         sp,\n                         &args,"}, {"sha": "9ccf354db736ff06a76c5adaad5cddb99df1ff79", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -1372,7 +1372,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n         if applicable_candidates.len() > 1 {\n             if let Some(pick) =\n-                self.collapse_candidates_to_trait_pick(self_ty, &applicable_candidates[..])\n+                self.collapse_candidates_to_trait_pick(self_ty, &applicable_candidates)\n             {\n                 return Some(Ok(pick));\n             }"}, {"sha": "e9ec0674cb7959c5f590b06a16f97494b9eb695a", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -1344,7 +1344,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if candidates.len() > limit {\n                 msg.push_str(&format!(\"\\nand {} others\", candidates.len() - limit));\n             }\n-            err.note(&msg[..]);\n+            err.note(&msg);\n         }\n     }\n "}, {"sha": "fda96e49eb9670104655496202edab90b6ad3ced", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -2998,9 +2998,9 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                     )\n                     .emit();\n                     InlineAttr::None\n-                } else if list_contains_name(&items[..], sym::always) {\n+                } else if list_contains_name(&items, sym::always) {\n                     InlineAttr::Always\n-                } else if list_contains_name(&items[..], sym::never) {\n+                } else if list_contains_name(&items, sym::never) {\n                     InlineAttr::Never\n                 } else {\n                     struct_span_err!(\n@@ -3034,9 +3034,9 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                 if items.len() != 1 {\n                     err(attr.span, \"expected one argument\");\n                     OptimizeAttr::None\n-                } else if list_contains_name(&items[..], sym::size) {\n+                } else if list_contains_name(&items, sym::size) {\n                     OptimizeAttr::Size\n-                } else if list_contains_name(&items[..], sym::speed) {\n+                } else if list_contains_name(&items, sym::speed) {\n                     OptimizeAttr::Speed\n                 } else {\n                     err(items[0].span(), \"invalid argument\");"}, {"sha": "199c05dc5df3e4e4471f2dcda41f772eb002e59b", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -2107,10 +2107,11 @@ impl<K, V> BTreeMap<K, V> {\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n-    /// let mut map = BTreeMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let mut map = BTreeMap::from([\n+    ///    (\"a\", 1),\n+    ///    (\"b\", 2),\n+    ///    (\"c\", 3),\n+    /// ]);\n     ///\n     /// // add 10 to the value if the key isn't \"a\"\n     /// for (key, value) in map.iter_mut() {"}, {"sha": "408c3cb8577f9a50c75d1633c298f43c0659a99d", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -2199,7 +2199,7 @@ impl<T: Clone, A: Allocator> Vec<T, A> {\n     /// Clones and appends all elements in a slice to the `Vec`.\n     ///\n     /// Iterates over the slice `other`, clones each element, and then appends\n-    /// it to this `Vec`. The `other` vector is traversed in-order.\n+    /// it to this `Vec`. The `other` slice is traversed in-order.\n     ///\n     /// Note that this function is same as [`extend`] except that it is\n     /// specialized to work with slices instead. If and when Rust gets"}, {"sha": "48f20f90a3253c202572fb6dc78e0bf897a98509", "filename": "library/core/src/future/ready.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -2,7 +2,7 @@ use crate::future::Future;\n use crate::pin::Pin;\n use crate::task::{Context, Poll};\n \n-/// Creates a future that is immediately ready with a value.\n+/// A future that is immediately ready with a value.\n ///\n /// This `struct` is created by [`ready()`]. See its\n /// documentation for more."}, {"sha": "8c6a7a56966afc493c6f61e120dd9329d45dfa8e", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -2070,8 +2070,8 @@ pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: us\n     #[cfg(debug_assertions)]\n     const fn compiletime_check<T>(_src: *const T, _dst: *mut T, _count: usize) {}\n     #[cfg(debug_assertions)]\n-    // SAFETY: runtime debug-assertions are a best-effort basis; it's fine to\n-    // not do them during compile time\n+    // SAFETY: As per our safety precondition, we may assume that the `abort` above is never reached.\n+    // Therefore, compiletime_check and runtime_check are observably equivalent.\n     unsafe {\n         const_eval_select((src, dst, count), compiletime_check, runtime_check);\n     }\n@@ -2161,8 +2161,8 @@ pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n     #[cfg(debug_assertions)]\n     const fn compiletime_check<T>(_src: *const T, _dst: *mut T) {}\n     #[cfg(debug_assertions)]\n-    // SAFETY: runtime debug-assertions are a best-effort basis; it's fine to\n-    // not do them during compile time\n+    // SAFETY: As per our safety precondition, we may assume that the `abort` above is never reached.\n+    // Therefore, compiletime_check and runtime_check are observably equivalent.\n     unsafe {\n         const_eval_select((src, dst), compiletime_check, runtime_check);\n     }\n@@ -2273,19 +2273,40 @@ pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n ///\n /// # Safety\n ///\n-/// This intrinsic allows breaking [referential transparency] in `const fn`\n-/// and is therefore `unsafe`.\n+/// The two functions must behave observably equivalent. Safe code in other\n+/// crates may assume that calling a `const fn` at compile-time and at run-time\n+/// produces the same result. A function that produces a different result when\n+/// evaluated at run-time, or has any other observable side-effects, is\n+/// *unsound*.\n ///\n-/// Code that uses this intrinsic must be extremely careful to ensure that\n-/// `const fn`s remain referentially-transparent independently of when they\n-/// are evaluated.\n+/// Here is an example of how this could cause a problem:\n+/// ```no_run\n+/// #![feature(const_eval_select)]\n+/// use std::hint::unreachable_unchecked;\n+/// use std::intrinsics::const_eval_select;\n ///\n-/// The Rust compiler assumes that it is sound to replace a call to a `const\n-/// fn` with the result produced by evaluating it at compile-time. If\n-/// evaluating the function at run-time were to produce a different result,\n-/// or have any other observable side-effects, the behavior is undefined.\n+/// // Crate A\n+/// pub const fn inconsistent() -> i32 {\n+///     fn runtime() -> i32 { 1 }\n+///     const fn compiletime() -> i32 { 2 }\n ///\n-/// [referential transparency]: https://en.wikipedia.org/wiki/Referential_transparency\n+///     unsafe {\n+//          // \u26a0 This code violates the required equivalence of `compiletime`\n+///         // and `runtime`.\n+///         const_eval_select((), compiletime, runtime)\n+///     }\n+/// }\n+///\n+/// // Crate B\n+/// const X: i32 = inconsistent();\n+/// let x = inconsistent();\n+/// if x != X { unsafe { unreachable_unchecked(); }}\n+/// ```\n+///\n+/// This code causes Undefined Behavior when being run, since the\n+/// `unreachable_unchecked` is actually being reached. The bug is in *crate A*,\n+/// which violates the principle that a `const fn` must behave the same at\n+/// compile-time and at run-time. The unsafe code in crate B is fine.\n #[unstable(\n     feature = \"const_eval_select\",\n     issue = \"none\","}, {"sha": "d9b14c82e96ba49a60a7ebf7b01d5fbeb20649f0", "filename": "library/core/src/num/saturating.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -628,7 +628,7 @@ macro_rules! saturating_int_impl {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n-            #[rustc_const_stable(feature = \"const_reverse_bits\", since = \"1.37.0\")]\n+            #[rustc_const_unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub const fn reverse_bits(self) -> Self {"}, {"sha": "054b814b7e08e3ece89b9885705cd2dd82cf49da", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -2223,7 +2223,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\",\n                    reason = \"needs decision on wrapping behaviour\")]\n-        #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n+        #[rustc_const_unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn wrapping_next_power_of_two(self) -> Self {"}, {"sha": "e7972838184815eccbb039bf6504838f454c5348", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -149,8 +149,8 @@ const fn debug_check_data_len<T>(data: *const T, len: usize) {\n     // it is not required for safety (the safety must be guatanteed by\n     // the `from_raw_parts[_mut]` caller).\n     //\n-    // Since the checks are not required, we ignore them in CTFE as they can't\n-    // be done there (alignment does not make much sense there).\n+    // As per our safety precondition, we may assume that assertion above never fails.\n+    // Therefore, noop and rt_check are observably equivalent.\n     unsafe {\n         crate::intrinsics::const_eval_select((data,), noop, rt_check);\n     }"}, {"sha": "b59a46d5f3a9629a7df7e6c67ac35151671dde45", "filename": "library/core/src/stream/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Fcore%2Fsrc%2Fstream%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Fcore%2Fsrc%2Fstream%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstream%2Fmod.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -114,9 +114,9 @@\n //! # Laziness\n //!\n //! Streams are *lazy*. This means that just creating a stream doesn't _do_ a\n-//! whole lot. Nothing really happens until you call `next`. This is sometimes a\n-//! source of confusion when creating a stream solely for its side effects. The\n-//! compiler will warn us about this kind of behavior:\n+//! whole lot. Nothing really happens until you call `poll_next`. This is\n+//! sometimes a source of confusion when creating a stream solely for its side\n+//! effects. The compiler will warn us about this kind of behavior:\n //!\n //! ```text\n //! warning: unused result that must be used: streams do nothing unless polled"}, {"sha": "35f17aa781f4e3a1e025936e1b6227af605c7144", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 70, "deletions": 53, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -334,10 +334,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// for key in map.keys() {\n     ///     println!(\"{}\", key);\n@@ -356,10 +357,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// for val in map.values() {\n     ///     println!(\"{}\", val);\n@@ -378,11 +380,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    ///\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let mut map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// for val in map.values_mut() {\n     ///     *val = *val + 10;\n@@ -405,10 +407,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// for (key, val) in map.iter() {\n     ///     println!(\"key: {} val: {}\", key, val);\n@@ -428,10 +431,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let mut map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// // Update all values\n     /// for (_, val) in map.iter_mut() {\n@@ -966,10 +970,11 @@ where\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// let mut vec: Vec<&str> = map.into_keys().collect();\n     /// // The `IntoKeys` iterator produces keys in arbitrary order, so the\n@@ -992,10 +997,11 @@ where\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// let mut vec: Vec<i32> = map.into_values().collect();\n     /// // The `IntoValues` iterator produces values in arbitrary order, so\n@@ -1202,8 +1208,9 @@ where\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter = map.iter();\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1239,8 +1246,9 @@ impl<K: Debug, V: Debug> fmt::Debug for Iter<'_, K, V> {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let mut map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter = map.iter_mut();\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1269,8 +1277,9 @@ impl<'a, K, V> IterMut<'a, K, V> {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter = map.into_iter();\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1298,8 +1307,9 @@ impl<K, V> IntoIter<K, V> {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter_keys = map.keys();\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1335,8 +1345,9 @@ impl<K: Debug, V> fmt::Debug for Keys<'_, K, V> {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter_values = map.values();\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1372,8 +1383,9 @@ impl<K, V: Debug> fmt::Debug for Values<'_, K, V> {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let mut map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter = map.drain();\n /// ```\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n@@ -1402,8 +1414,9 @@ impl<'a, K, V> Drain<'a, K, V> {\n ///\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let mut map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter = map.drain_filter(|_k, v| *v % 2 == 0);\n /// ```\n #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n@@ -1426,8 +1439,9 @@ where\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let mut map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter_values = map.values_mut();\n /// ```\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -1447,8 +1461,9 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter_keys = map.into_keys();\n /// ```\n #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n@@ -1468,8 +1483,9 @@ pub struct IntoKeys<K, V> {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// let mut map = HashMap::new();\n-/// map.insert(\"a\", 1);\n+/// let map = HashMap::from([\n+///     (\"a\", 1),\n+/// ]);\n /// let iter_keys = map.into_values();\n /// ```\n #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n@@ -2004,10 +2020,11 @@ impl<K, V, S> IntoIterator for HashMap<K, V, S> {\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n     ///\n     /// // Not possible with .iter()\n     /// let vec: Vec<(&str, i32)> = map.into_iter().collect();"}, {"sha": "2831e9b532aba6ac0d8f06ac9f204b9b0c163d98", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.issue-85461.txt", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-85461.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-85461.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-85461.txt?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -0,0 +1,36 @@\n+../coverage/issue-85461.rs:\n+    1|       |// Regression test for #85461: MSVC sometimes fail to link with dead code and #[inline(always)]\n+    2|       |\n+    3|       |extern crate inline_always_with_dead_code;\n+    4|       |\n+    5|       |use inline_always_with_dead_code::{bar, baz};\n+    6|       |\n+    7|      1|fn main() {\n+    8|      1|    bar::call_me();\n+    9|      1|    baz::call_me();\n+   10|      1|}\n+\n+../coverage/lib/inline_always_with_dead_code.rs:\n+    1|       |// compile-flags: -Zinstrument-coverage -Ccodegen-units=4 -Copt-level=0\n+    2|       |\n+    3|       |#![allow(dead_code)]\n+    4|       |\n+    5|       |mod foo {\n+    6|       |    #[inline(always)]\n+    7|      2|    pub fn called() { }\n+    8|       |\n+    9|      0|    fn uncalled() { }\n+   10|       |}\n+   11|       |\n+   12|       |pub mod bar {\n+   13|      1|    pub fn call_me() {\n+   14|      1|        super::foo::called();\n+   15|      1|    }\n+   16|       |}\n+   17|       |\n+   18|       |pub mod baz {\n+   19|      1|    pub fn call_me() {\n+   20|      1|        super::foo::called();\n+   21|      1|    }\n+   22|       |}\n+"}, {"sha": "a1b9ebb1ed34876c72ca926b36eac46595244c81", "filename": "src/test/run-make-fulldeps/coverage/issue-85461.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-85461.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-85461.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-85461.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for #85461: MSVC sometimes fail to link with dead code and #[inline(always)]\n+\n+extern crate inline_always_with_dead_code;\n+\n+use inline_always_with_dead_code::{bar, baz};\n+\n+fn main() {\n+    bar::call_me();\n+    baz::call_me();\n+}"}, {"sha": "b567916aea060a829470b1fea6fa8e9b39450eaf", "filename": "src/test/run-make-fulldeps/coverage/lib/inline_always_with_dead_code.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Finline_always_with_dead_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Finline_always_with_dead_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Finline_always_with_dead_code.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -Zinstrument-coverage -Ccodegen-units=4 -Copt-level=0\n+\n+#![allow(dead_code)]\n+\n+mod foo {\n+    #[inline(always)]\n+    pub fn called() { }\n+\n+    fn uncalled() { }\n+}\n+\n+pub mod bar {\n+    pub fn call_me() {\n+        super::foo::called();\n+    }\n+}\n+\n+pub mod baz {\n+    pub fn call_me() {\n+        super::foo::called();\n+    }\n+}"}, {"sha": "e782e6f9076313e73e8baa5cd48108136835bf9f", "filename": "src/test/ui/fmt/issue-91556.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/src%2Ftest%2Fui%2Ffmt%2Fissue-91556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/src%2Ftest%2Fui%2Ffmt%2Fissue-91556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-91556.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+  let _ = format!(concat!(\"{0}\ud835\uddb3\ud835\uddbe\ud835\uddcc\ud835\uddcd{\"), i);\n+  //~^ ERROR: invalid format string: expected `'}'` but string was terminated\n+  //~| NOTE: if you intended to print `{`, you can escape it using `{{`\n+  //~| NOTE: in this expansion of concat!\n+  //~| NOTE: in this expansion of concat!\n+  //~| NOTE: expected `'}'` in format string\n+}"}, {"sha": "dbd5aef458b8e4591956f8f91c0de1501df9bbc1", "filename": "src/test/ui/fmt/issue-91556.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/src%2Ftest%2Fui%2Ffmt%2Fissue-91556.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/src%2Ftest%2Fui%2Ffmt%2Fissue-91556.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-91556.stderr?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -0,0 +1,11 @@\n+error: invalid format string: expected `'}'` but string was terminated\n+  --> $DIR/issue-91556.rs:2:19\n+   |\n+LL |   let _ = format!(concat!(\"{0}\ud835\uddb3\ud835\uddbe\ud835\uddcc\ud835\uddcd{\"), i);\n+   |                   ^^^^^^^^^^^^^^^^^^^ expected `'}'` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "4c6c83f2612f6bc5603d6eeead4d75b983af3729", "filename": "src/test/ui/issues/issue-85461.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f0448f44bcda55fd9eb71da82495ef648eedb4e4/src%2Ftest%2Fui%2Fissues%2Fissue-85461.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0448f44bcda55fd9eb71da82495ef648eedb4e4/src%2Ftest%2Fui%2Fissues%2Fissue-85461.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-85461.rs?ref=f0448f44bcda55fd9eb71da82495ef648eedb4e4", "patch": "@@ -0,0 +1,27 @@\n+// compile-flags: -Zinstrument-coverage -Ccodegen-units=4 --crate-type dylib -Copt-level=0\n+// build-pass\n+// needs-profiler-support\n+\n+// Regression test for #85461 where MSVC sometimes fails to link instrument-coverage binaries\n+// with dead code and #[inline(always)].\n+\n+#![allow(dead_code)]\n+\n+mod foo {\n+    #[inline(always)]\n+    pub fn called() { }\n+\n+    fn uncalled() { }\n+}\n+\n+pub mod bar {\n+    pub fn call_me() {\n+        super::foo::called();\n+    }\n+}\n+\n+pub mod baz {\n+    pub fn call_me() {\n+        super::foo::called();\n+    }\n+}"}]}