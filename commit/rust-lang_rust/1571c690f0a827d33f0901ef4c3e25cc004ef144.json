{"sha": "1571c690f0a827d33f0901ef4c3e25cc004ef144", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NzFjNjkwZjBhODI3ZDMzZjA5MDFlZjRjM2UyNWNjMDA0ZWYxNDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-23T11:38:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-23T11:38:43Z"}, "message": "Auto merge of #31121 - Manishearth:prim-link, r=alexcrichton\n\nWe currently nest `<a>` tags which is doubleplusungood. So, for example, `(u8, u8)` will show up\nwith the left paren linked to the tuple primitive page, and the right paren unlinked, which looks ugly.", "tree": {"sha": "ba091244b313ee6acbc0bebf6ee5101f0fec4f52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba091244b313ee6acbc0bebf6ee5101f0fec4f52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1571c690f0a827d33f0901ef4c3e25cc004ef144", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1571c690f0a827d33f0901ef4c3e25cc004ef144", "html_url": "https://github.com/rust-lang/rust/commit/1571c690f0a827d33f0901ef4c3e25cc004ef144", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1571c690f0a827d33f0901ef4c3e25cc004ef144/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "332e34524072abc213c65b98e8dbb81f2c5c912a", "url": "https://api.github.com/repos/rust-lang/rust/commits/332e34524072abc213c65b98e8dbb81f2c5c912a", "html_url": "https://github.com/rust-lang/rust/commit/332e34524072abc213c65b98e8dbb81f2c5c912a"}, {"sha": "5a26a52a54ae27e5a64bc17a17aa1eebab136b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a26a52a54ae27e5a64bc17a17aa1eebab136b91", "html_url": "https://github.com/rust-lang/rust/commit/5a26a52a54ae27e5a64bc17a17aa1eebab136b91"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "b0df209d3dc526e773eebed0b82a88fcf7b2e1dd", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1571c690f0a827d33f0901ef4c3e25cc004ef144/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1571c690f0a827d33f0901ef4c3e25cc004ef144/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=1571c690f0a827d33f0901ef4c3e25cc004ef144", "patch": "@@ -456,23 +456,44 @@ impl fmt::Display for clean::Type {\n                        decl.decl)\n             }\n             clean::Tuple(ref typs) => {\n-                primitive_link(f, clean::PrimitiveTuple,\n-                               &*match &**typs {\n-                                    [ref one] => format!(\"({},)\", one),\n-                                    many => format!(\"({})\", CommaSep(&many)),\n-                               })\n+                match &**typs {\n+                    [] => primitive_link(f, clean::PrimitiveTuple, \"()\"),\n+                    [ref one] => {\n+                        try!(primitive_link(f, clean::PrimitiveTuple, \"(\"));\n+                        try!(write!(f, \"{}\", one));\n+                        primitive_link(f, clean::PrimitiveTuple, \")\")\n+                    }\n+                    many => {\n+                        try!(primitive_link(f, clean::PrimitiveTuple, \"(\"));\n+                        try!(write!(f, \"{}\", CommaSep(&many)));\n+                        primitive_link(f, clean::PrimitiveTuple, \")\")\n+                    }\n+                }\n             }\n             clean::Vector(ref t) => {\n-                primitive_link(f, clean::Slice, &format!(\"[{}]\", **t))\n+                try!(primitive_link(f, clean::Slice, &format!(\"[\")));\n+                try!(write!(f, \"{}\", t));\n+                primitive_link(f, clean::Slice, &format!(\"]\"))\n             }\n             clean::FixedVector(ref t, ref s) => {\n+                try!(primitive_link(f, clean::PrimitiveType::Array, \"[\"));\n+                try!(write!(f, \"{}\", t));\n                 primitive_link(f, clean::PrimitiveType::Array,\n-                               &format!(\"[{}; {}]\", **t, *s))\n+                               &format!(\"; {}]\", *s))\n             }\n             clean::Bottom => f.write_str(\"!\"),\n             clean::RawPointer(m, ref t) => {\n-                primitive_link(f, clean::PrimitiveType::PrimitiveRawPointer,\n-                               &format!(\"*{}{}\", RawMutableSpace(m), **t))\n+                match **t {\n+                    clean::Generic(_) | clean::ResolvedPath {is_generic: true, ..} => {\n+                        primitive_link(f, clean::PrimitiveType::PrimitiveRawPointer,\n+                                       &format!(\"*{}{}\", RawMutableSpace(m), t))\n+                    }\n+                    _ => {\n+                        try!(primitive_link(f, clean::PrimitiveType::PrimitiveRawPointer,\n+                                            &format!(\"*{}\", RawMutableSpace(m))));\n+                        write!(f, \"{}\", t)\n+                    }\n+                }\n             }\n             clean::BorrowedRef{ lifetime: ref l, mutability, type_: ref ty} => {\n                 let lt = match *l {"}]}