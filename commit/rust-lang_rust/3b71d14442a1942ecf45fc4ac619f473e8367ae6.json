{"sha": "3b71d14442a1942ecf45fc4ac619f473e8367ae6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNzFkMTQ0NDJhMTk0MmVjZjQ1ZmM0YWM2MTlmNDczZTgzNjdhZTY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-28T21:41:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-08T22:58:39Z"}, "message": "Inject std when --test. #1127, #3241", "tree": {"sha": "f38cdd5238674d9558fbbbb9b099b85f982b2297", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f38cdd5238674d9558fbbbb9b099b85f982b2297"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b71d14442a1942ecf45fc4ac619f473e8367ae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b71d14442a1942ecf45fc4ac619f473e8367ae6", "html_url": "https://github.com/rust-lang/rust/commit/3b71d14442a1942ecf45fc4ac619f473e8367ae6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b71d14442a1942ecf45fc4ac619f473e8367ae6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d3c22ae590a6ceadd612fbf775f258ca64baa90", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3c22ae590a6ceadd612fbf775f258ca64baa90", "html_url": "https://github.com/rust-lang/rust/commit/2d3c22ae590a6ceadd612fbf775f258ca64baa90"}], "stats": {"total": 60, "additions": 42, "deletions": 18}, "files": [{"sha": "13e0e3002424afdd0de06669f53de7f6b8ffb029", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b71d14442a1942ecf45fc4ac619f473e8367ae6/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3b71d14442a1942ecf45fc4ac619f473e8367ae6/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=3b71d14442a1942ecf45fc4ac619f473e8367ae6", "patch": "@@ -246,14 +246,6 @@ pub mod core {\n }\n \n \n-// Similar to above. Some magic to make core testable.\n-#[cfg(test)]\n-mod std {\n-    extern mod std(vers = \"0.6\");\n-    pub use std::std::test;\n-}\n-\n-\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "09db770512f7fc7f043171d81941bb10d6fdca4d", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3b71d14442a1942ecf45fc4ac619f473e8367ae6/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b71d14442a1942ecf45fc4ac619f473e8367ae6/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=3b71d14442a1942ecf45fc4ac619f473e8367ae6", "patch": "@@ -210,13 +210,18 @@ mod __test {\n */\n \n fn mk_test_module(cx: test_ctxt) -> @ast::item {\n+    // Link to std\n+    let std = mk_std(cx);\n+    let view_items = if is_std(cx) { ~[] } else { ~[std] };\n     // A function that generates a vector of test descriptors to feed to the\n     // test runner\n     let testsfn = mk_tests(cx);\n     // The synthesized main function which will call the console test runner\n     // with our list of tests\n     let mainfn = mk_main(cx);\n-    let testmod: ast::_mod = {view_items: ~[], items: ~[mainfn, testsfn]};\n+    let testmod: ast::_mod = {\n+        view_items: view_items, items: ~[mainfn, testsfn]\n+    };\n     let item_ = ast::item_mod(testmod);\n     // This attribute tells resolve to let us call unexported functions\n     let resolve_unexported_attr =\n@@ -247,6 +252,24 @@ fn path_node_global(+ids: ~[ast::ident]) -> @ast::path {\n     @{span: dummy_sp(), global: true, idents: ids, rp: None, types: ~[]}\n }\n \n+fn mk_std(cx: test_ctxt) -> @ast::view_item {\n+    let vers = ast::lit_str(@~\"0.6\");\n+    let vers = nospan(vers);\n+    let mi = ast::meta_name_value(~\"vers\", vers);\n+    let mi = nospan(mi);\n+    let vi = ast::view_item_use(cx.sess.ident_of(~\"std\"),\n+                                ~[@mi],\n+                                cx.sess.next_node_id());\n+    let vi = {\n+        node: vi,\n+        attrs: ~[],\n+        vis: ast::private,\n+        span: dummy_sp()\n+    };\n+\n+    return @vi;\n+}\n+\n fn mk_tests(cx: test_ctxt) -> @ast::item {\n     let ret_ty = mk_test_desc_vec_ty(cx);\n \n@@ -273,25 +296,34 @@ fn mk_tests(cx: test_ctxt) -> @ast::item {\n     return @item;\n }\n \n-fn mk_path(cx: test_ctxt, +path: ~[ast::ident]) -> ~[ast::ident] {\n-    // For tests that are inside of std we don't want to prefix\n-    // the paths with std::\n+fn is_std(cx: test_ctxt) -> bool {\n     let is_std = {\n         let items = attr::find_linkage_metas(/*bad*/copy cx.crate.node.attrs);\n         match attr::last_meta_item_value_str_by_name(items, ~\"name\") {\n           Some(~\"std\") => true,\n           _ => false\n         }\n     };\n-    if is_std { path }\n-    else { vec::append(~[cx.sess.ident_of(~\"std\")], path) }\n+    return is_std;\n+}\n+\n+fn mk_path(cx: test_ctxt, +path: ~[ast::ident]) -> @ast::path {\n+    // For tests that are inside of std we don't want to prefix\n+    // the paths with std::\n+    if is_std(cx) { path_node_global(path) }\n+    else {\n+        path_node(\n+            ~[cx.sess.ident_of(~\"self\"),\n+              cx.sess.ident_of(~\"std\")]\n+            + path)\n+    }\n }\n \n // The ast::Ty of ~[std::test::test_desc]\n fn mk_test_desc_vec_ty(cx: test_ctxt) -> @ast::Ty {\n     let test_desc_ty_path =\n-        path_node_global(mk_path(cx, ~[cx.sess.ident_of(~\"test\"),\n-                                       cx.sess.ident_of(~\"TestDesc\")]));\n+        mk_path(cx, ~[cx.sess.ident_of(~\"test\"),\n+                      cx.sess.ident_of(~\"TestDesc\")]);\n \n     let test_desc_ty: ast::Ty =\n         {id: cx.sess.next_node_id(),\n@@ -504,9 +536,9 @@ fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n          node: test_call_expr_, span: dummy_sp()};\n \n     // Call std::test::test_main\n-    let test_main_path = path_node_global(\n+    let test_main_path =\n         mk_path(cx, ~[cx.sess.ident_of(~\"test\"),\n-                      cx.sess.ident_of(~\"test_main\")]));\n+                      cx.sess.ident_of(~\"test_main\")]);\n \n     let test_main_path_expr_: ast::expr_ = ast::expr_path(test_main_path);\n "}]}