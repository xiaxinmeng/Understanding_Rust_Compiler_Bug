{"sha": "b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YjJkYjRkYTdkYzY3NjJkNTM2NTliMzJlNWZiNGJhOGU1YzU5ODg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-18T20:13:34Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-22T11:32:56Z"}, "message": "switch compare_method to new-style trait error reporting", "tree": {"sha": "7585cddff86848c13002bf566e14d2b29cafd341", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7585cddff86848c13002bf566e14d2b29cafd341"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988", "html_url": "https://github.com/rust-lang/rust/commit/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cea88ebb39402ceee9ec5f7cd61c877ae4cd16dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cea88ebb39402ceee9ec5f7cd61c877ae4cd16dc", "html_url": "https://github.com/rust-lang/rust/commit/cea88ebb39402ceee9ec5f7cd61c877ae4cd16dc"}], "stats": {"total": 48, "additions": 23, "deletions": 25}, "files": [{"sha": "847dcc90ad395fdd3202a617ebbf955c08d863f6", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988", "patch": "@@ -324,10 +324,10 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             debug!(\"sub_types failed: impl ty {:?}, trait ty {:?}\",\n                    impl_fty,\n                    trait_fty);\n-            span_err!(tcx.sess, impl_m_span, E0053,\n-                      \"method `{}` has an incompatible type for trait: {}\",\n-                      trait_m.name,\n-                      terr);\n+            let trace = infer::TypeTrace::types(origin, false, impl_fty, trait_fty);\n+            type_err!(infcx, trace, &terr, E0053,\n+                      \"method `{}` has an incompatible type for trait\",\n+                      trait_m.name).emit();\n             return\n         }\n \n@@ -437,10 +437,9 @@ pub fn compare_const_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         // Compute skolemized form of impl and trait const tys.\n         let impl_ty = impl_c.ty.subst(tcx, impl_to_skol_substs);\n         let trait_ty = trait_c.ty.subst(tcx, &trait_to_skol_substs);\n+        let origin = TypeOrigin::Misc(impl_c_span);\n \n         let err = infcx.commit_if_ok(|_| {\n-            let origin = TypeOrigin::Misc(impl_c_span);\n-\n             // There is no \"body\" here, so just pass dummy id.\n             let impl_ty =\n                 assoc::normalize_associated_types_in(&infcx,\n@@ -473,11 +472,13 @@ pub fn compare_const_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             debug!(\"checking associated const for compatibility: impl ty {:?}, trait ty {:?}\",\n                    impl_ty,\n                    trait_ty);\n-            span_err!(tcx.sess, impl_c_span, E0326,\n+            let values = Some(infer::ValuePairs::Types(ExpectedFound {\n+                expected: trait_ty,\n+                found: impl_ty\n+            }));\n+            type_err!(infcx, origin, values, terr, E0326,\n                       \"implemented const `{}` has an incompatible type for \\\n-                      trait: {}\",\n-                      trait_c.name,\n-                      terr);\n+                      trait\", trait_c.name).emit();\n         }\n     });\n }"}, {"sha": "95508a31044b87797dff021bc5a6a07b23cd2ff9", "filename": "src/test/compile-fail/associated-const-impl-wrong-type.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs?ref=b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988", "patch": "@@ -18,9 +18,8 @@ struct SignedBar;\n \n impl Foo for SignedBar {\n     const BAR: i32 = -1;\n-    //~^ ERROR implemented const `BAR` has an incompatible type for trait\n-    //~| expected u32,\n-    //~| found i32 [E0326]\n+    //~^ ERROR implemented const `BAR` has an incompatible type for trait [E0326]\n+    //~| expected u32, found i32\n }\n \n fn main() {}"}, {"sha": "3d9d81471cb1e40da806c9348464d193ff9cfa98", "filename": "src/test/compile-fail/issue-13033.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Ftest%2Fcompile-fail%2Fissue-13033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Ftest%2Fcompile-fail%2Fissue-13033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13033.rs?ref=b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988", "patch": "@@ -16,7 +16,9 @@ struct Baz;\n \n impl Foo for Baz {\n     fn bar(&mut self, other: &Foo) {}\n-    //~^ ERROR method `bar` has an incompatible type for trait: values differ in mutability [E0053]\n+    //~^ ERROR method `bar` has an incompatible type for trait\n+    //~| expected type `fn(&mut Baz, &mut Foo)`\n+    //~| found type `fn(&mut Baz, &Foo)`\n }\n \n fn main() {}"}, {"sha": "da48bbb3ecd711a99a730cf859ec74f17bc9cc06", "filename": "src/test/compile-fail/issue-15094.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs?ref=b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988", "patch": "@@ -20,8 +20,8 @@ impl<T: fmt::Debug> ops::FnOnce<(),> for Debuger<T> {\n     type Output = ();\n     fn call_once(self, _args: ()) {\n     //~^ ERROR `call_once` has an incompatible type for trait\n-    //~| expected \"rust-call\" fn,\n-    //~| found \"Rust\" fn\n+    //~| expected type `extern \"rust-call\" fn\n+    //~| found type `fn\n         println!(\"{:?}\", self.x);\n     }\n }"}, {"sha": "db3334834d44ec97e5230755df303f1f2e0b4a65", "filename": "src/test/compile-fail/issue-21332.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Ftest%2Fcompile-fail%2Fissue-21332.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Ftest%2Fcompile-fail%2Fissue-21332.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21332.rs?ref=b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988", "patch": "@@ -14,8 +14,7 @@ impl Iterator for S {\n     type Item = i32;\n     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n     //~^ ERROR method `next` has an incompatible type for trait\n-    //~| expected enum `std::option::Option`\n-    //~|    found enum `std::result::Result` [E0053]\n+    //~| expected enum `std::option::Option`, found enum `std::result::Result`\n }\n \n fn main() {}"}, {"sha": "ede81bea32ae3bfaea3db5168a4ea23f2ed19a1d", "filename": "src/test/compile-fail/issue-24356.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Ftest%2Fcompile-fail%2Fissue-24356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Ftest%2Fcompile-fail%2Fissue-24356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24356.rs?ref=b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988", "patch": "@@ -30,9 +30,6 @@ fn main() {\n         impl Deref for Thing {\n             //~^ ERROR not all trait items implemented, missing: `Target` [E0046]\n             fn deref(&self) -> i8 { self.0 }\n-            //~^ ERROR method `deref` has an incompatible type for trait\n-            //~| expected &-ptr\n-            //~| found i8 [E0053]\n         }\n \n         let thing = Thing(72);"}, {"sha": "a05e007d6b7393e5774e44d76904c35b39fb3243", "filename": "src/test/compile-fail/trait-impl-method-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs?ref=b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988", "patch": "@@ -17,8 +17,8 @@ impl Mumbo for usize {\n     // Cannot have a larger effect than the trait:\n     unsafe fn jumbo(&self, x: &usize) { *self + *x; }\n     //~^ ERROR method `jumbo` has an incompatible type for trait\n-    //~| expected normal fn,\n-    //~| found unsafe fn\n+    //~| expected type `fn\n+    //~| found type `unsafe fn\n }\n \n fn main() {}"}, {"sha": "fb4652affd0d8c3ce6c8ce7f7023b57f447c3137", "filename": "src/test/compile-fail/unsafe-trait-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Ftest%2Fcompile-fail%2Funsafe-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988/src%2Ftest%2Fcompile-fail%2Funsafe-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-trait-impl.rs?ref=b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988", "patch": "@@ -17,8 +17,8 @@ trait Foo {\n impl Foo for u32 {\n     fn len(&self) -> u32 { *self }\n     //~^ ERROR method `len` has an incompatible type for trait\n-    //~| expected unsafe fn,\n-    //~| found normal fn\n+    //~| expected type `unsafe fn(&u32) -> u32`\n+    //~| found type `fn(&u32) -> u32`\n }\n \n fn main() { }"}]}