{"sha": "596d19e2ea1f2cc96f7e493171a692bc0b912ce6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NmQxOWUyZWExZjJjYzk2ZjdlNDkzMTcxYTY5MmJjMGI5MTJjZTY=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-07-28T21:00:44Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-07-28T21:00:44Z"}, "message": "Test the deque a bit.  Give it a get-by-index method.  Fix two uncovered state-calculation bugs --- one decently, the other with an ugly hack.  Bug on the latter coming right up.", "tree": {"sha": "f9a4be20be28121856a359e31ba0d07c56bf1213", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9a4be20be28121856a359e31ba0d07c56bf1213"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/596d19e2ea1f2cc96f7e493171a692bc0b912ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/596d19e2ea1f2cc96f7e493171a692bc0b912ce6", "html_url": "https://github.com/rust-lang/rust/commit/596d19e2ea1f2cc96f7e493171a692bc0b912ce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/596d19e2ea1f2cc96f7e493171a692bc0b912ce6/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80307576245aabf00285db020bbfbc4c3a891766", "url": "https://api.github.com/repos/rust-lang/rust/commits/80307576245aabf00285db020bbfbc4c3a891766", "html_url": "https://github.com/rust-lang/rust/commit/80307576245aabf00285db020bbfbc4c3a891766"}], "stats": {"total": 73, "additions": 65, "deletions": 8}, "files": [{"sha": "33f10b3936e9cbd6af952a32213e586ffe017a25", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/596d19e2ea1f2cc96f7e493171a692bc0b912ce6/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/596d19e2ea1f2cc96f7e493171a692bc0b912ce6/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=596d19e2ea1f2cc96f7e493171a692bc0b912ce6", "patch": "@@ -426,6 +426,7 @@ TEST_XFAILS_LLVM := $(addprefix test/run-pass/, \\\n                       lazy-and-or.rs \\\n                       lazy-init.rs \\\n                       lazychan.rs \\\n+                      lib-deque.rs \\\n                       lib-rand.rs \\\n                       linear-for-loop.rs \\\n                       list.rs \\"}, {"sha": "bcaec2b4a39c6006e1d62470a8c3d2e01448a2cd", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/596d19e2ea1f2cc96f7e493171a692bc0b912ce6/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/596d19e2ea1f2cc96f7e493171a692bc0b912ce6/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=596d19e2ea1f2cc96f7e493171a692bc0b912ce6", "patch": "@@ -1061,6 +1061,23 @@ let rec simplified_ty (t:Ast.ty) : Ast.ty =\n     | t -> t\n ;;\n \n+let rec innermost_box_ty (t:Ast.ty) : Ast.ty =\n+  match strip_mutable_or_constrained_ty t with\n+      Ast.TY_box t -> innermost_box_ty t\n+    | _ -> t\n+;;\n+\n+let simplified_ty_innermost_was_mutable (t:Ast.ty) : Ast.ty * bool =\n+  let rec simplify_innermost t =\n+    match t with\n+        Ast.TY_mutable t -> (fst (simplify_innermost t), true)\n+      | Ast.TY_constrained (t, _) -> simplify_innermost t\n+      | _ -> (t, false)\n+  in\n+  let t = innermost_box_ty t in\n+    simplify_innermost t\n+;;\n+\n let rec project_type\n     (base_ty:Ast.ty)\n     (comp:Ast.lval_component)"}, {"sha": "06f04a3a4893995bd8b8f12a9865bf0f6eae6e1d", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/596d19e2ea1f2cc96f7e493171a692bc0b912ce6/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/596d19e2ea1f2cc96f7e493171a692bc0b912ce6/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=596d19e2ea1f2cc96f7e493171a692bc0b912ce6", "patch": "@@ -1103,6 +1103,7 @@ let trans_visitor\n       (t:Ast.ty)\n       (sz:int64)\n       (align:int64)\n+      (force_stateful:bool)\n       : Il.operand =\n     trans_crate_rel_data_operand\n       (DATA_tydesc t)\n@@ -1112,7 +1113,9 @@ let trans_visitor\n           let fix fixup =\n             fixup_rel_word tydesc_fixup fixup\n           in\n-          let is_stateful = if type_has_state t then 1L else 0L in\n+          let is_stateful =\n+            if (force_stateful || type_has_state t) then 1L else 0L\n+          in\n           log cx \"tydesc for %a has sz=%Ld, align=%Ld, is_stateful=%Ld\"\n             Ast.sprintf_ty t sz align is_stateful;\n             Asm.DEF\n@@ -2343,11 +2346,15 @@ let trans_visitor\n         dst_cell dst_ty src_cell src_ty None\n \n \n-  and get_dynamic_tydesc (idopt:node_id option) (t:Ast.ty) : Il.cell =\n+  and get_dynamic_tydesc\n+      (idopt:node_id option)\n+      (t:Ast.ty)\n+      (force_stateful:bool)\n+      : Il.cell =\n     let td = next_vreg_cell Il.voidptr_t in\n     let root_desc =\n       Il.Cell (crate_rel_to_ptr\n-                 (get_static_tydesc idopt t 0L 0L)\n+                 (get_static_tydesc idopt t 0L 0L force_stateful)\n                  (tydesc_rty abi))\n     in\n     let (t, param_descs) = linearize_ty_params t in\n@@ -2378,15 +2385,17 @@ let trans_visitor\n \n   and get_tydesc (idopt:node_id option) (ty:Ast.ty) : Il.cell =\n     log cx \"getting tydesc for %a\" Ast.sprintf_ty ty;\n-    match simplified_ty ty with\n+    let (ty, mut) = simplified_ty_innermost_was_mutable ty in\n+    match ty with\n         Ast.TY_param (idx, _) ->\n           (get_ty_param_in_current_frame idx)\n       | t when has_parametric_types t ->\n-          (get_dynamic_tydesc idopt t)\n+          (get_dynamic_tydesc idopt t mut)\n       | _ ->\n           (crate_rel_to_ptr (get_static_tydesc idopt ty\n                                (ty_sz abi ty)\n-                               (ty_align abi ty))\n+                               (ty_align abi ty)\n+                               mut)\n              (tydesc_rty abi))\n \n   and box_rc_cell (cell:Il.cell) : Il.cell ="}, {"sha": "24a03ed00b2b4e3ac6862ed1b61a103fb9c06b7e", "filename": "src/lib/deque.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/596d19e2ea1f2cc96f7e493171a692bc0b912ce6/src%2Flib%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596d19e2ea1f2cc96f7e493171a692bc0b912ce6/src%2Flib%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fdeque.rs?ref=596d19e2ea1f2cc96f7e493171a692bc0b912ce6", "patch": "@@ -17,6 +17,8 @@ type t[T] = obj {\n \n   fn peek_front() -> T;\n   fn peek_back() -> T;\n+\n+  fn get(int i) -> T;\n };\n \n fn create[T]() -> t[T] {\n@@ -128,6 +130,11 @@ fn create[T]() -> t[T] {\n     fn peek_back() -> T {\n       ret get[T](elts, hi);\n     }\n+\n+    fn get(int i) -> T {\n+      let uint idx = (lo + (i as uint)) % _vec.len[cell[T]](elts);\n+      ret get[T](elts, idx);\n+    }\n   }\n \n   let vec[cell[T]] v = _vec.init_elt[cell[T]](util.none[T](),"}, {"sha": "c5076639e9acf1baa50d72457063ad0757d0bbb7", "filename": "src/rt/rust_crate_cache.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/596d19e2ea1f2cc96f7e493171a692bc0b912ce6/src%2Frt%2Frust_crate_cache.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/596d19e2ea1f2cc96f7e493171a692bc0b912ce6/src%2Frt%2Frust_crate_cache.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_cache.cpp?ref=596d19e2ea1f2cc96f7e493171a692bc0b912ce6", "patch": "@@ -216,6 +216,7 @@ rust_crate_cache::get_type_desc(size_t size,\n                  \"rust_crate_cache::descs[%\" PRIdPTR \"] = 0x%\" PRIxPTR,\n                  i, descs[i]);\n         td->descs[i] = descs[i];\n+        td->is_stateful |= descs[i]->is_stateful;\n     }\n     adjust_disp(td->copy_glue_off, descs[0], td);\n     adjust_disp(td->drop_glue_off, descs[0], td);"}, {"sha": "8ce40b576cfe0c3cb7bb414762d7dcd0a14cc3bb", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/596d19e2ea1f2cc96f7e493171a692bc0b912ce6/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/596d19e2ea1f2cc96f7e493171a692bc0b912ce6/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=596d19e2ea1f2cc96f7e493171a692bc0b912ce6", "patch": "@@ -499,8 +499,13 @@ extern \"C\" CDECL uintptr_t upcall_require_c_sym(rust_task *task,\n }\n \n extern \"C\" CDECL type_desc *\n-upcall_get_type_desc(rust_task *task, rust_crate const *curr_crate,\n-    size_t size, size_t align, size_t n_descs, type_desc const **descs) {\n+upcall_get_type_desc(rust_task *task,\n+                     rust_crate const *curr_crate,\n+                     size_t size,\n+                     size_t align,\n+                     size_t n_descs,\n+                     type_desc const **descs)\n+{\n     LOG_UPCALL_ENTRY(task);\n     task->log(rust_log::UPCALL | rust_log::CACHE,\n               \"upcall get_type_desc with size=%\" PRIdPTR"}, {"sha": "244092da79c8d1022d1621adefa084f5fbcbc098", "filename": "src/test/run-pass/lib-deque.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/596d19e2ea1f2cc96f7e493171a692bc0b912ce6/src%2Ftest%2Frun-pass%2Flib-deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596d19e2ea1f2cc96f7e493171a692bc0b912ce6/src%2Ftest%2Frun-pass%2Flib-deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-deque.rs?ref=596d19e2ea1f2cc96f7e493171a692bc0b912ce6", "patch": "@@ -0,0 +1,17 @@\n+// -*- rust -*-\n+\n+use std;\n+import std.deque;\n+\n+fn main() {\n+  let deque.t[int] d1 = deque.create[int]();\n+  check (d1.size() == 0u);\n+  d1.add_front(17);\n+  d1.add_front(42);\n+  d1.add_back(137);\n+  check (d1.size() == 3u);\n+  d1.add_back(137);\n+  check (d1.size() == 4u);\n+  /* FIXME (issue #133):  We should check that the numbers come back\n+   * to us correctly once the deque stops zeroing them out. */\n+}"}]}