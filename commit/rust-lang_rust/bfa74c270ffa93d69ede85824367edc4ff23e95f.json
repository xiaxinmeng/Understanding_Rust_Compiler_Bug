{"sha": "bfa74c270ffa93d69ede85824367edc4ff23e95f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYTc0YzI3MGZmYTkzZDY5ZWRlODU4MjQzNjdlZGM0ZmYyM2U5NWY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-27T16:44:14Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-29T12:53:49Z"}, "message": "Use doc-comment instad of comments consistently\n\nThis makes the comments show up in the generated docs.\n\n- Fix markdown formatting", "tree": {"sha": "a0d811ae2b19732064c25c3b2d788f5477439583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0d811ae2b19732064c25c3b2d788f5477439583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfa74c270ffa93d69ede85824367edc4ff23e95f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa74c270ffa93d69ede85824367edc4ff23e95f", "html_url": "https://github.com/rust-lang/rust/commit/bfa74c270ffa93d69ede85824367edc4ff23e95f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfa74c270ffa93d69ede85824367edc4ff23e95f/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39648ea467a39afa3676d900656874947c747690", "url": "https://api.github.com/repos/rust-lang/rust/commits/39648ea467a39afa3676d900656874947c747690", "html_url": "https://github.com/rust-lang/rust/commit/39648ea467a39afa3676d900656874947c747690"}], "stats": {"total": 117, "additions": 59, "deletions": 58}, "files": [{"sha": "1c2a7f7716d2176f954653ca4e087fee475afb6b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 59, "deletions": 58, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/bfa74c270ffa93d69ede85824367edc4ff23e95f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa74c270ffa93d69ede85824367edc4ff23e95f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=bfa74c270ffa93d69ede85824367edc4ff23e95f", "patch": "@@ -53,11 +53,12 @@ macro_rules! hash_substruct {\n }\n \n macro_rules! top_level_options {\n-    (pub struct Options { $(\n+    ( $( #[$top_level_attr:meta] )* pub struct Options { $(\n         $( #[$attr:meta] )*\n         $opt:ident : $t:ty [$dep_tracking_marker:ident],\n     )* } ) => (\n         #[derive(Clone)]\n+        $( #[$top_level_attr] )*\n         pub struct Options {\n             $(\n                 $( #[$attr] )*\n@@ -93,38 +94,38 @@ macro_rules! top_level_options {\n     );\n }\n \n-// The top-level command-line options struct.\n-//\n-// For each option, one has to specify how it behaves with regard to the\n-// dependency tracking system of incremental compilation. This is done via the\n-// square-bracketed directive after the field type. The options are:\n-//\n-// [TRACKED]\n-// A change in the given field will cause the compiler to completely clear the\n-// incremental compilation cache before proceeding.\n-//\n-// [TRACKED_NO_CRATE_HASH]\n-// Same as [TRACKED], but will not affect the crate hash. This is useful for options that only\n-// affect the incremental cache.\n-//\n-// [UNTRACKED]\n-// Incremental compilation is not influenced by this option.\n-//\n-// [SUBSTRUCT]\n-// Second-level sub-structs containing more options.\n-//\n-// If you add a new option to this struct or one of the sub-structs like\n-// `CodegenOptions`, think about how it influences incremental compilation. If in\n-// doubt, specify [TRACKED], which is always \"correct\" but might lead to\n-// unnecessary re-compilation.\n top_level_options!(\n+    /// The top-level command-line options struct.\n+    ///\n+    /// For each option, one has to specify how it behaves with regard to the\n+    /// dependency tracking system of incremental compilation. This is done via the\n+    /// square-bracketed directive after the field type. The options are:\n+    ///\n+    /// - `[TRACKED]`\n+    /// A change in the given field will cause the compiler to completely clear the\n+    /// incremental compilation cache before proceeding.\n+    ///\n+    /// - `[TRACKED_NO_CRATE_HASH]`\n+    /// Same as `[TRACKED]`, but will not affect the crate hash. This is useful for options that only\n+    /// affect the incremental cache.\n+    ///\n+    /// - `[UNTRACKED]`\n+    /// Incremental compilation is not influenced by this option.\n+    ///\n+    /// - `[SUBSTRUCT]`\n+    /// Second-level sub-structs containing more options.\n+    ///\n+    /// If you add a new option to this struct or one of the sub-structs like\n+    /// `CodegenOptions`, think about how it influences incremental compilation. If in\n+    /// doubt, specify `[TRACKED]`, which is always \"correct\" but might lead to\n+    /// unnecessary re-compilation.\n     pub struct Options {\n-        // The crate config requested for the session, which may be combined\n-        // with additional crate configurations during the compile process.\n+        /// The crate config requested for the session, which may be combined\n+        /// with additional crate configurations during the compile process.\n         crate_types: Vec<CrateType> [TRACKED],\n         optimize: OptLevel [TRACKED],\n-        // Include the `debug_assertions` flag in dependency tracking, since it\n-        // can influence whether overflow checks are done or not.\n+        /// Include the `debug_assertions` flag in dependency tracking, since it\n+        /// can influence whether overflow checks are done or not.\n         debug_assertions: bool [TRACKED],\n         debuginfo: DebugInfo [TRACKED],\n         lint_opts: Vec<(String, lint::Level)> [TRACKED],\n@@ -140,43 +141,43 @@ top_level_options!(\n         test: bool [TRACKED],\n         error_format: ErrorOutputType [UNTRACKED],\n \n-        // If `Some`, enable incremental compilation, using the given\n-        // directory to store intermediate results.\n+        /// If `Some`, enable incremental compilation, using the given\n+        /// directory to store intermediate results.\n         incremental: Option<PathBuf> [UNTRACKED],\n \n         debugging_opts: DebuggingOptions [SUBSTRUCT],\n         prints: Vec<PrintRequest> [UNTRACKED],\n-        // Determines which borrow checker(s) to run. This is the parsed, sanitized\n-        // version of `debugging_opts.borrowck`, which is just a plain string.\n+        /// Determines which borrow checker(s) to run. This is the parsed, sanitized\n+        /// version of `debugging_opts.borrowck`, which is just a plain string.\n         borrowck_mode: BorrowckMode [UNTRACKED],\n         cg: CodegenOptions [SUBSTRUCT],\n         externs: Externs [UNTRACKED],\n         extern_dep_specs: ExternDepSpecs [UNTRACKED],\n         crate_name: Option<String> [TRACKED],\n-        // An optional name to use as the crate for std during std injection,\n-        // written `extern crate name as std`. Defaults to `std`. Used by\n-        // out-of-tree drivers.\n+        /// An optional name to use as the crate for std during std injection,\n+        /// written `extern crate name as std`. Defaults to `std`. Used by\n+        /// out-of-tree drivers.\n         alt_std_name: Option<String> [TRACKED],\n-        // Indicates how the compiler should treat unstable features.\n+        /// Indicates how the compiler should treat unstable features.\n         unstable_features: UnstableFeatures [TRACKED],\n \n-        // Indicates whether this run of the compiler is actually rustdoc. This\n-        // is currently just a hack and will be removed eventually, so please\n-        // try to not rely on this too much.\n+        /// Indicates whether this run of the compiler is actually rustdoc. This\n+        /// is currently just a hack and will be removed eventually, so please\n+        /// try to not rely on this too much.\n         actually_rustdoc: bool [TRACKED],\n \n-        // Control path trimming.\n+        /// Control path trimming.\n         trimmed_def_paths: TrimmedDefPaths [TRACKED],\n \n-        // Specifications of codegen units / ThinLTO which are forced as a\n-        // result of parsing command line options. These are not necessarily\n-        // what rustc was invoked with, but massaged a bit to agree with\n-        // commands like `--emit llvm-ir` which they're often incompatible with\n-        // if we otherwise use the defaults of rustc.\n+        /// Specifications of codegen units / ThinLTO which are forced as a\n+        /// result of parsing command line options. These are not necessarily\n+        /// what rustc was invoked with, but massaged a bit to agree with\n+        /// commands like `--emit llvm-ir` which they're often incompatible with\n+        /// if we otherwise use the defaults of rustc.\n         cli_forced_codegen_units: Option<usize> [UNTRACKED],\n         cli_forced_thinlto_off: bool [UNTRACKED],\n \n-        // Remap source path prefixes in all output (messages, object files, debug, etc.).\n+        /// Remap source path prefixes in all output (messages, object files, debug, etc.).\n         remap_path_prefix: Vec<(PathBuf, PathBuf)> [TRACKED_NO_CRATE_HASH],\n         /// Base directory containing the `src/` for the Rust standard library, and\n         /// potentially `rustc` as well, if we can can find it. Right now it's always\n@@ -189,11 +190,11 @@ top_level_options!(\n \n         edition: Edition [TRACKED],\n \n-        // `true` if we're emitting JSON blobs about each artifact produced\n-        // by the compiler.\n+        /// `true` if we're emitting JSON blobs about each artifact produced\n+        /// by the compiler.\n         json_artifact_notifications: bool [TRACKED],\n \n-        // `true` if we're emitting a JSON blob containing the unused externs\n+        /// `true` if we're emitting a JSON blob containing the unused externs\n         json_unused_externs: bool [UNTRACKED],\n \n         pretty: Option<PpMode> [UNTRACKED],\n@@ -212,7 +213,7 @@ macro_rules! options {\n     ($struct_name:ident, $setter_name:ident, $defaultfn:ident,\n      $buildfn:ident, $prefix:expr, $outputname:expr,\n      $stat:ident, $mod_desc:ident, $mod_set:ident,\n-     $($opt:ident : $t:ty = (\n+     $($( #[$attr:meta] )* $opt:ident : $t:ty = (\n         $init:expr,\n         $parse:ident,\n         [$dep_tracking_marker:ident],\n@@ -223,7 +224,7 @@ macro_rules! options {\n     pub struct $struct_name { $(pub $opt: $t),* }\n \n     pub fn $defaultfn() -> $struct_name {\n-        $struct_name { $($opt: $init),* }\n+        $struct_name { $( $( #[$attr] )* $opt: $init),* }\n     }\n \n     pub fn $buildfn(matches: &getopts::Matches, error_format: ErrorOutputType) -> $struct_name\n@@ -1177,7 +1178,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     self_profile: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n         parse_switch_with_opt_path, [UNTRACKED],\n         \"run the self profiler and output the raw event data\"),\n-    // keep this in sync with the event filter names in librustc_data_structures/profiling.rs\n+    /// keep this in sync with the event filter names in librustc_data_structures/profiling.rs\n     self_profile_events: Option<Vec<String>> = (None, parse_opt_comma_list, [UNTRACKED],\n         \"specify the events recorded by the self profiler;\n         for example: `-Z self-profile-events=default,query-keys`\n@@ -1189,7 +1190,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"show spans for compiler debugging (expr|pat|ty)\"),\n     span_debug: bool = (false, parse_bool, [UNTRACKED],\n         \"forward proc_macro::Span's `Debug` impl to `Span`\"),\n-    // o/w tests have closure@path\n+    /// o/w tests have closure@path\n     span_free_formats: bool = (false, parse_bool, [UNTRACKED],\n         \"exclude spans when debug-printing compiler state (default: no)\"),\n     src_hash_algorithm: Option<SourceFileHashAlgorithm> = (None, parse_src_file_hash, [TRACKED],\n@@ -1210,10 +1211,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"select processor to schedule for (`rustc --print target-cpus` for details)\"),\n     thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable ThinLTO when possible\"),\n-    // We default to 1 here since we want to behave like\n-    // a sequential compiler for now. This'll likely be adjusted\n-    // in the future. Note that -Zthreads=0 is the way to get\n-    // the num_cpus behavior.\n+    /// We default to 1 here since we want to behave like\n+    /// a sequential compiler for now. This'll likely be adjusted\n+    /// in the future. Note that -Zthreads=0 is the way to get\n+    /// the num_cpus behavior.\n     threads: usize = (1, parse_threads, [UNTRACKED],\n         \"use a thread pool with N threads\"),\n     time: bool = (false, parse_bool, [UNTRACKED],"}]}