{"sha": "cccaf9a8c69219c8267e406f92fef895fbba80f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjY2FmOWE4YzY5MjE5YzgyNjdlNDA2ZjkyZmVmODk1ZmJiYTgwZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-16T12:15:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-16T12:15:10Z"}, "message": "Auto merge of #57416 - alexcrichton:remove-platform-intrinsics, r=nagisa\n\nrustc: Remove platform intrinsics crate\n\nThis was originally attempted in #57048 but it was realized that we\ncould fully remove the crate via the `\"unadjusted\"` ABI on intrinsics.\nThis means that all intrinsics in stdsimd are implemented directly\nagainst LLVM rather than using the abstraction layer provided here. That\nends up meaning that this crate is no longer used at all.\n\nThis crate developed long ago to implement the SIMD intrinsics, but we\ndidn't end up using it in the long run. In that case let's remove it!", "tree": {"sha": "472a49ead9dd54f5df3b60b6efa44862eef098ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/472a49ead9dd54f5df3b60b6efa44862eef098ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cccaf9a8c69219c8267e406f92fef895fbba80f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cccaf9a8c69219c8267e406f92fef895fbba80f2", "html_url": "https://github.com/rust-lang/rust/commit/cccaf9a8c69219c8267e406f92fef895fbba80f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cccaf9a8c69219c8267e406f92fef895fbba80f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2f221c75932de7a29845c8d6f1f73536ad00c41", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f221c75932de7a29845c8d6f1f73536ad00c41", "html_url": "https://github.com/rust-lang/rust/commit/e2f221c75932de7a29845c8d6f1f73536ad00c41"}, {"sha": "7616daabc7aa114a958bd4fb61d91345a4ff7a45", "url": "https://api.github.com/repos/rust-lang/rust/commits/7616daabc7aa114a958bd4fb61d91345a4ff7a45", "html_url": "https://github.com/rust-lang/rust/commit/7616daabc7aa114a958bd4fb61d91345a4ff7a45"}], "stats": {"total": 15995, "additions": 4, "deletions": 15991}, "files": [{"sha": "d659e0c19a8f073f6ee36d8a33346f32c6b77c05", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cccaf9a8c69219c8267e406f92fef895fbba80f2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cccaf9a8c69219c8267e406f92fef895fbba80f2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cccaf9a8c69219c8267e406f92fef895fbba80f2", "patch": "@@ -2564,10 +2564,6 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n-[[package]]\n-name = \"rustc_platform_intrinsics\"\n-version = \"0.0.0\"\n-\n [[package]]\n name = \"rustc_plugin\"\n version = \"0.0.0\"\n@@ -2678,7 +2674,6 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n- \"rustc_platform_intrinsics 0.0.0\",\n  \"rustc_target 0.0.0\",\n  \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\","}, {"sha": "c8cda4077b79075b4d32a3db7bddcab04b5d4dfd", "filename": "src/etc/platform-intrinsics/aarch64.json", "status": "removed", "additions": 0, "deletions": 592, "changes": 592, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Faarch64.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Faarch64.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Faarch64.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,592 +0,0 @@\n-{\n-    \"platform\": \"aarch64_v\",\n-    \"intrinsic_prefix\": \"\",\n-    \"llvm_prefix\": \"llvm.aarch64.neon.\",\n-    \"number_info\": {\n-        \"signed\": {\n-            \"kind\": \"s\",\n-            \"data_type\": { \"pattern\": \"s{bitwidth}\" }\n-        },\n-        \"unsigned\": {\n-            \"kind\": \"u\",\n-            \"data_type\": { \"pattern\": \"u{bitwidth}\" }\n-        },\n-        \"float\": {\n-            \"kind\": \"f\",\n-            \"data_type\": { \"pattern\": \"f{bitwidth}\" }\n-        }\n-    },\n-    \"width_info\": {\n-        \"64\": { \"width\": \"\" },\n-        \"128\": { \"width\": \"q\" }\n-    },\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"hadd{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}hadd.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"rhadd{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}rhadd.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"qadd{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}qadd.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"uqadd_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"suqadd.{0.llvm_name}\",\n-            \"ret\": \"s(8-64)\",\n-            \"args\": [\"0\", \"0u\"]\n-        },\n-        {\n-            \"intrinsic\": \"sqadd_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"usqadd.{0.llvm_name}\",\n-            \"ret\": \"u(8-64)\",\n-            \"args\": [\"0\", \"0s\"]\n-        },\n-        {\n-            \"intrinsic\": \"raddhn_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"raddhn.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0w\", \"0w\"]\n-        },\n-        {\n-            \"intrinsic\": \"fmulx{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"fmulx.{0.llvm_name}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"fma{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"!llvm.fma.{0.llvm_name}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"qdmulh{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"sqdmulh.{0.llvm_name}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"qrdmulh{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"sqrdmulh.{0.llvm_name}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"mull_{1.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"{0.kind}mull.{0.llvm_name}\",\n-            \"ret\": \"i(16-64)\",\n-            \"args\": [\"0n\", \"0n\"]\n-        },\n-        {\n-            \"intrinsic\": \"qdmull{0.width}_{1.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"sqdmull.{0.llvm_name}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0n\", \"0n\"]\n-        },\n-        {\n-            \"intrinsic\": \"hsub{0.width}_{1.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}hsub.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"qsub{0.width}_{1.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}qsub.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"rsubhn_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"rsubhn.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0w\", \"0w\"]\n-        },\n-        {\n-            \"intrinsic\": \"abd{0.width}_{1.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}abd.{0.llvm_name}\",\n-            \"ret\": [\"i(8-32)\",\"f(32-64)\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"max{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}max.{0.llvm_name}\",\n-            \"ret\": [\"i(8-32)\",\"f(32-64)\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"min{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}min.{0.llvm_name}\",\n-            \"ret\": [\"i(8-32)\",\"f(32-64)\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"maxnm{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}maxnm.{0.llvm_name}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"minnm{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}minnm.{0.llvm_name}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"shl{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}shl.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0s\"]\n-        },\n-        {\n-            \"intrinsic\": \"qshl{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}qshl.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0s\"]\n-        },\n-        {\n-            \"intrinsic\": \"rshl{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}rshl.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0s\"]\n-        },\n-        {\n-            \"intrinsic\": \"qrshl{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}qrshl.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0s\"]\n-        },\n-        {\n-            \"intrinsic\": \"qshrun_n_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"sqshrun.{0.llvm_name}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0w\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"qrshrun_n_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"sqrshrun.{0.llvm_name}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0w\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"qshrn_n_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"{0.kind}qshrn.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0w\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"rshrn_n_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"rshrn.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0w\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"qrshrn_n_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"{0.kind}qrshrn.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0w\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"sri{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"vsri.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"sli{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"vsli.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"vqmovn_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"{0.kind}qxtn.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0w\"]\n-        },\n-        {\n-            \"intrinsic\": \"abs{0.width}_{0.data_type}\",\n-            \"width\": [64,128],\n-            \"llvm\": \"abs.{0.llvm_name}\",\n-            \"ret\": \"s(8-64)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"abs{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"!llvm.fabs.{0.llvm_name}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"qabs{0.width}_{0.data_type}\",\n-            \"width\": [64,128],\n-            \"llvm\": \"sqabs.{0.llvm_name}\",\n-            \"ret\": \"s(8-64)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"qneg{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"sqneg.{0.llvm_name}\",\n-            \"ret\": \"s(8-64)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"clz{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"!llvm.ctlz.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"cls{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"cls.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"cnt{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"!llvm.ctpop.{0.llvm_name}\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"recpe{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}recpe.{0.llvm_name}\",\n-            \"ret\": [\"u32\",\"f(32-64)\"],\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"recps{0.width}_{0.data_type}\",\n-            \"width\": [64,128],\n-            \"llvm\": \"frecps.{0.llvm_name}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"sqrt{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"!llvm.sqrt.{0.llvm_name}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"rsqrte{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}rsqrte.{0.llvm_name}\",\n-            \"ret\": [\"u32\",\"f(32-64)\"],\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"rsqrts{0.width}_{0.data_type}\",\n-            \"width\": [64,128],\n-            \"llvm\": \"frsqrts.{0.llvm_name}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"rbit{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"rbit.{0.llvm_name}\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"ld2{0[0].width}_{0[0].data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"ld2.{0[0].llvm_name}.{1.llvm_name}\",\n-            \"ret\": [\"[i(8-64);2]\",\"[f(32-64);2]\"],\n-            \"args\": [\"0.0SPc/0.0\"]\n-        },\n-        {\n-            \"intrinsic\": \"ld3{0[0].width}_{0[0].data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"ld3.{0[0].llvm_name}.{1.llvm_name}\",\n-            \"ret\": [\"[i(8-64);3]\",\"[f(32-64);3]\"],\n-            \"args\": [\"0.0SPc/0.0\"]\n-        },\n-        {\n-            \"intrinsic\": \"ld4{0[0].width}_{0[0].data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"ld4.{0[0].llvm_name}.{1.llvm_name}\",\n-            \"ret\": [\"[i(8-64);4]\",\"[f(32-64);4]\"],\n-            \"args\": [\"0.0SPc/0.0\"]\n-        },\n-        {\n-            \"intrinsic\": \"ld2{0[0].width}_dup_{0[0].data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"ld2.{0[0].llvm_name}.{1.llvm_name}\",\n-            \"ret\": [\"[i(8-64);2]\",\"[f(32-64);2]\"],\n-            \"args\": [\"0.0SPc\"]\n-        },\n-        {\n-            \"intrinsic\": \"ld3{0[0].width}_dup_{0[0].data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"ld3.{0[0].llvm_name}.{1.llvm_name}\",\n-            \"ret\": [\"[i(8-64);3]\",\"[f(32-64);3]\"],\n-            \"args\": [\"0.0SPc\"]\n-        },\n-        {\n-            \"intrinsic\": \"ld4{0[0].width}_dup_{0[0].data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"ld4.{0[0].llvm_name}.{1.llvm_name}\",\n-            \"ret\": [\"[i(8-64);4]\",\"[f(32-64);4]\"],\n-            \"args\": [\"0.0SPc\"]\n-        },\n-        {\n-            \"intrinsic\": \"padd{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"addp.{0.llvm_name}\",\n-            \"ret\": [\"i(8-32)\",\"f32\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"padd{0.width}_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"addp.{0.llvm_name}\",\n-            \"ret\": [\"i64\",\"f64\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"paddl{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}addlp.{0.llvm_name}.{1.llvm_name}\",\n-            \"ret\": \"i(16-64)\",\n-            \"args\": [\"0dn\"]\n-        },\n-        {\n-            \"intrinsic\": \"pmax{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}maxp.{0.llvm_name}\",\n-            \"ret\": [\"i(8-32)\",\"f32\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"pmax{0.width}_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"{0.kind}maxp.{0.llvm_name}\",\n-            \"ret\": [\"i64\",\"f64\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"pmin{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}minp.{0.llvm_name}\",\n-            \"ret\": [\"i(8-32)\",\"f32\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"pmin{0.width}_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"{0.kind}minp.{0.llvm_name}\",\n-            \"ret\": [\"i64\",\"f64\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"pmaxnm{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}maxnmp.{0.llvm_name}\",\n-            \"ret\": [\"i(8-32)\",\"f32\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"pmaxnm{0.width}_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"{0.kind}maxnmp.{0.llvm_name}\",\n-            \"ret\": [\"i64\",\"f64\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"pminnm{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}minnmp.{0.llvm_name}\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"pminnm{0.width}_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"{0.kind}minnmp.{0.llvm_name}\",\n-            \"ret\": \"f64\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"addv{1.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}addv.{0.llvm_name}.{1.llvm_name}\",\n-            \"ret\": [\"I(8-32)\",\"F32\"],\n-            \"args\": [\"0v\"]\n-        },\n-        {\n-            \"intrinsic\": \"addv{1.width}_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"{0.kind}addv.{0.llvm_name}.{1.llvm_name}\",\n-            \"ret\": [\"I64\",\"F64\"],\n-            \"args\": [\"0v\"]\n-        },\n-        {\n-            \"intrinsic\": \"addlv{1.width}_{1.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}addlv.{0.llvm_name}.{1.llvm_name}\",\n-            \"ret\": \"I(16-64)\",\n-            \"args\": [\"0vdn\"]\n-        },\n-        {\n-            \"intrinsic\": \"maxv{1.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}maxv.{0.llvm_name}.{1.llvm_name}\",\n-            \"ret\": [\"I(8-32)\",\"F32\"],\n-            \"args\": [\"0v\"]\n-        },\n-        {\n-            \"intrinsic\": \"maxv{1.width}_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"{0.kind}maxv.{0.llvm_name}.{1.llvm_name}\",\n-            \"ret\": \"F64\",\n-            \"args\": [\"0v\"]\n-        },\n-        {\n-            \"intrinsic\": \"minv{1.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}minv.{0.llvm_name}.{1.llvm_name}\",\n-            \"ret\": [\"I(8-32)\",\"F32\"],\n-            \"args\": [\"0v\"]\n-        },\n-        {\n-            \"intrinsic\": \"minv{1.width}_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"{0.kind}minv.{0.llvm_name}.{1.llvm_name}\",\n-            \"ret\": \"F64\",\n-            \"args\": [\"0v\"]\n-        },\n-        {\n-            \"intrinsic\": \"maxnmv{1.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}maxnmv.{0.llvm_name}.{1.llvm_name}\",\n-            \"ret\": \"F32\",\n-            \"args\": [\"0v\"]\n-        },\n-        {\n-            \"intrinsic\": \"maxnmv{1.width}_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"{0.kind}maxnmv.{0.llvm_name}.{1.llvm_name}\",\n-            \"ret\": \"F64\",\n-            \"args\": [\"0v\"]\n-        },\n-        {\n-            \"intrinsic\": \"minnmv{1.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"{0.kind}minnmv.{0.llvm_name}.{1.llvm_name}\",\n-            \"ret\": \"F32\",\n-            \"args\": [\"0v\"]\n-        },\n-        {\n-            \"intrinsic\": \"minnmv{1.width}_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"{0.kind}minnmv.{0.llvm_name}.{1.llvm_name}\",\n-            \"ret\": \"F64\",\n-            \"args\": [\"0v\"]\n-        },\n-        {\n-            \"intrinsic\": \"qtbl1{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"tbl1.{0.llvm_name}\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"0x128\", \"0u\"]\n-        },\n-        {\n-            \"intrinsic\": \"qtbx1{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"tbx1.{0.llvm_name}\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"0\", \"0x128\", \"0u\"]\n-        },\n-        {\n-            \"intrinsic\": \"qtbl2{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"tbl2.{0.llvm_name}\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"(0x128,0x128)f\", \"0u\"]\n-        },\n-        {\n-            \"intrinsic\": \"qtbx2{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"tbx2.{0.llvm_name}\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"(0x128,0x128)f\", \"0u\"]\n-        },\n-        {\n-            \"intrinsic\": \"qtbl3{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"tbl3.{0.llvm_name}\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"(0x128,0x128,0x128)f\", \"0u\"]\n-        },\n-        {\n-            \"intrinsic\": \"qtbx3{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"tbx3.{0.llvm_name}\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"0\", \"(0x128,0x128,0x128)f\", \"0u\"]\n-        },\n-        {\n-            \"intrinsic\": \"qtbl4{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"tbl4.{0.llvm_name}\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"(0x128,0x128,0x128,0x128)f\", \"0u\"]\n-        },\n-        {\n-            \"intrinsic\": \"qtbx4{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"tbx4.{0.llvm_name}\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"0\", \"(0x128,0x128,0x128,0x128)f\", \"0u\"]\n-        }\n-    ]\n-}"}, {"sha": "d008320713c3b828037709a56345656aad5b5cc6", "filename": "src/etc/platform-intrinsics/arm.json", "status": "removed", "additions": 0, "deletions": 396, "changes": 396, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Farm.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Farm.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Farm.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,396 +0,0 @@\n-{\n-    \"platform\": \"arm_v\",\n-    \"intrinsic_prefix\": \"\",\n-    \"llvm_prefix\": \"llvm.arm.neon.v\",\n-    \"number_info\": {\n-        \"signed\": {\n-            \"kind\": \"s\",\n-            \"data_type\": { \"pattern\": \"s{bitwidth}\" }\n-        },\n-        \"unsigned\": {\n-            \"kind\": \"u\",\n-            \"data_type\": { \"pattern\": \"u{bitwidth}\" }\n-        },\n-        \"float\": {\n-            \"kind\": \"f\",\n-            \"data_type\": { \"pattern\": \"f{bitwidth}\" }\n-        }\n-    },\n-    \"width_info\": {\n-        \"64\": { \"width\": \"\" },\n-        \"128\": { \"width\": \"q\" }\n-    },\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"hadd{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"hadd{0.kind}.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"rhadd{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"rhadd{0.kind}.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"qadd{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"qadd{0.kind}.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"raddhn_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"raddhn.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0w\", \"0w\"]\n-        },\n-        {\n-            \"intrinsic\": \"fma{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"!llvm.fma.{0.llvm_name}\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"qdmulh{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"sqdmulh.{0.llvm_name}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"qrdmulh{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"sqrdmulh.{0.llvm_name}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"mull_{1.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"mull{0.kind}.{0.llvm_name}\",\n-            \"ret\": \"i(16-64)\",\n-            \"args\": [\"0n\", \"0n\"]\n-        },\n-        {\n-            \"intrinsic\": \"qdmull{0.width}_{1.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"sqdmull.{0.llvm_name}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0n\", \"0n\"]\n-        },\n-        {\n-            \"intrinsic\": \"hsub{0.width}_{1.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"hsub{0.kind}.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"qsub{0.width}_{1.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"qsub{0.kind}.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"rsubhn_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"rsubhn.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0w\", \"0w\"]\n-        },\n-        {\n-            \"intrinsic\": \"abd{0.width}_{1.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"abd{0.kind}.{0.llvm_name}\",\n-            \"ret\": [\"i(8-32)\",\"f32\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"max{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"max{0.kind}.{0.llvm_name}\",\n-            \"ret\": [\"i(8-32)\",\"f32\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"min{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"min{0.kind}.{0.llvm_name}\",\n-            \"ret\": [\"i(8-32)\",\"f32\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"shl{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"shl{0.kind}.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0s\"]\n-        },\n-        {\n-            \"intrinsic\": \"qshl{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"qshl{0.kind}.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0s\"]\n-        },\n-        {\n-            \"intrinsic\": \"rshl{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"rshl{0.kind}.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0s\"]\n-        },\n-        {\n-            \"intrinsic\": \"qrshl{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"qrshl{0.kind}.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0s\"]\n-        },\n-        {\n-            \"intrinsic\": \"qshrun_n_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"sqshrun.{0.llvm_name}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0w\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"qrshrun_n_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"sqrshrun.{0.llvm_name}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0w\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"qshrn_n_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"qshrn{0.kind}.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0w\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"rshrn_n_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"rshrn.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0w\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"qrshrn_n_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"qrshrn{0.kind}.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0w\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"sri{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"vsri.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"sli{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"vsli.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"vqmovn_{1.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"qxtn{0.kind}.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0w\"]\n-        },\n-        {\n-            \"intrinsic\": \"abs{0.width}_{0.data_type}\",\n-            \"width\": [64,128],\n-            \"llvm\": \"abs.{0.llvm_name}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"abs{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"!llvm.fabs.{0.llvm_name}\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"qabs{0.width}_{0.data_type}\",\n-            \"width\": [64,128],\n-            \"llvm\": \"sqabs.{0.llvm_name}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"qneg{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"sqneg.{0.llvm_name}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"clz{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"!llvm.ctlz.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"cls{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"cls.{0.llvm_name}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"cnt{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"!llvm.ctpop.{0.llvm_name}\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"recpe{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"recpe.{0.llvm_name}\",\n-            \"ret\": [\"u32\",\"f32\"],\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"recps{0.width}_{0.data_type}\",\n-            \"width\": [64,128],\n-            \"llvm\": \"frecps.{0.llvm_name}\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"sqrt{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"!llvm.sqrt.{0.llvm_name}\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"rsqrte{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"rsqrte.{0.llvm_name}\",\n-            \"ret\": [\"u32\",\"f32\"],\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"rsqrts{0.width}_{0.data_type}\",\n-            \"width\": [64,128],\n-            \"llvm\": \"rsqrts.{0.llvm_name}\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"bsl{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"bsl.{0.llvm_name}\",\n-            \"ret\": \"i(8-64)\",\n-            \"args\": [\"0u\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"padd{0.width}_{0.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"padd.{0.llvm_name}\",\n-            \"ret\": [\"i(8-32)\",\"f32\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"paddl{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"paddl{0.kind}.{0.llvm_name}.{1.llvm_name}\",\n-            \"ret\": \"i(16-64)\",\n-            \"args\": [\"0dn\"]\n-        },\n-        {\n-            \"intrinsic\": \"padal{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"padal{0.kind}.{0.llvm_name}.{1.llvm_name}\",\n-            \"ret\": \"i(16-64)\",\n-            \"args\": [\"0\", \"0dn\"]\n-        },\n-        {\n-            \"intrinsic\": \"pmax{0.width}_{0.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"pmax{0.kind}.{0.llvm_name}\",\n-            \"ret\": [\"i(8-32)\",\"f32\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"pmin{0.width}_{0.data_type}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"pmin{0.kind}.{0.llvm_name}\",\n-            \"ret\": [\"i(8-32)\",\"f32\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"tbl1_{0.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"tbl1\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"0\", \"0u\"]\n-        },\n-        {\n-            \"intrinsic\": \"tbx1_{0.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"tbx1\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"0\", \"0\", \"0u\"]\n-        },\n-        {\n-            \"intrinsic\": \"tbl2_{0.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"tbl2\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"(0,0)f\", \"0u\"]\n-        },\n-        {\n-            \"intrinsic\": \"tbx2_{0.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"tbx2\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"(0,0)f\", \"0u\"]\n-        },\n-        {\n-            \"intrinsic\": \"tbl3_{0.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"tbl3\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"(0,0,0)f\", \"0u\"]\n-        },\n-        {\n-            \"intrinsic\": \"tbx3_{0.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"tbx3\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"0\", \"(0,0,0)f\", \"0u\"]\n-        },\n-        {\n-            \"intrinsic\": \"tbl4_{0.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"tbl4\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"(0,0,0,0)f\", \"0u\"]\n-        },\n-        {\n-            \"intrinsic\": \"tbx4_{0.data_type}\",\n-            \"width\": [64],\n-            \"llvm\": \"tbx4\",\n-            \"ret\": \"i8\",\n-            \"args\": [\"0\", \"(0,0,0,0)f\", \"0u\"]\n-        }\n-    ]\n-}"}, {"sha": "fa97131f695f98e82285934ac683b9e703c0ea72", "filename": "src/etc/platform-intrinsics/generator.py", "status": "removed", "additions": 0, "deletions": 854, "changes": 854, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,854 +0,0 @@\n-from __future__ import division, print_function\n-import json\n-import argparse\n-import sys\n-import re\n-import textwrap\n-import itertools\n-\n-SPEC = re.compile(\n-    r'^(?:(?P<void>V)|(?P<id>[iusfIUSF])(?:\\((?P<start>\\d+)-(?P<end>\\d+)\\)|'\n-    r'(?P<width>\\d+)(:?/(?P<llvm_width>\\d+))?)'\n-    r'|(?P<reference>\\d+))(?P<index>\\.\\d+)?(?P<modifiers>[vShdnwusfDMCNW]*)(?P<force_width>x\\d+)?'\n-    r'(?:(?P<pointer>Pm|Pc)(?P<llvm_pointer>/.*)?|(?P<bitcast>->.*))?$'\n-)\n-\n-class PlatformInfo(object):\n-    def __init__(self, json):\n-        self._platform = json['platform']\n-\n-    def platform_prefix(self):\n-        return self._platform\n-\n-class IntrinsicSet(object):\n-    def __init__(self, platform, json):\n-        self._llvm_prefix = json['llvm_prefix']\n-        self._type_info = json['number_info']\n-        self._intrinsics = json['intrinsics']\n-        self._widths = json['width_info']\n-        self._platform = platform\n-        self._intrinsic_prefix = json['intrinsic_prefix']\n-\n-    def intrinsics(self):\n-        for raw in self._intrinsics:\n-            yield GenericIntrinsic(self,\n-                                   raw['intrinsic'], raw['width'], raw['llvm'],\n-                                   raw['ret'], raw['args'])\n-\n-    def platform(self):\n-        return self._platform\n-\n-    def intrinsic_prefix(self):\n-        return self._intrinsic_prefix\n-\n-    def llvm_prefix(self):\n-        return self._llvm_prefix\n-\n-    def width_info(self, bitwidth):\n-        return self._widths[str(bitwidth)]\n-\n-    def number_type_info(self, value):\n-        data = self._type_info[value.__class__.__name__.lower()]\n-        bitwidth = value.bitwidth()\n-        def lookup(raw):\n-            if not isinstance(raw, dict):\n-                return raw\n-\n-            try:\n-                return raw[str(bitwidth)]\n-            except KeyError:\n-                return raw['pattern'].format(bitwidth = bitwidth)\n-\n-        return PlatformTypeInfo(value.llvm_name(),\n-                                {k: lookup(v) for k, v in data.items()})\n-\n-class PlatformTypeInfo(object):\n-    def __init__(self, llvm_name, properties, elems = None):\n-        if elems is None:\n-            self.properties = properties\n-            self.llvm_name = llvm_name\n-        else:\n-            assert properties is None and llvm_name is None\n-            self.properties = {}\n-            self.elems = elems\n-\n-    def __repr__(self):\n-        return '<PlatformTypeInfo {}, {}>'.format(self.llvm_name, self.properties)\n-\n-    def __getattr__(self, name):\n-        return self.properties[name]\n-\n-    def __getitem__(self, idx):\n-        return self.elems[idx]\n-\n-    def vectorize(self, length, width_info):\n-        props = self.properties.copy()\n-        props.update(width_info)\n-        return PlatformTypeInfo('v{}{}'.format(length, self.llvm_name), props)\n-\n-    def pointer(self, llvm_elem):\n-        name = self.llvm_name if llvm_elem is None else llvm_elem.llvm_name\n-        return PlatformTypeInfo('p0{}'.format(name), self.properties)\n-\n-BITWIDTH_POINTER = '<pointer>'\n-\n-class Type(object):\n-    def __init__(self, bitwidth):\n-        self._bitwidth = bitwidth\n-\n-    def bitwidth(self):\n-        return self._bitwidth\n-\n-    def modify(self, spec, width, previous):\n-        raise NotImplementedError()\n-\n-    def __ne__(self, other):\n-        return not (self == other)\n-\n-class Void(Type):\n-    def __init__(self):\n-        Type.__init__(self, 0)\n-\n-    @staticmethod\n-    def compiler_ctor():\n-        return '::VOID'\n-\n-    def compiler_ctor_ref(self):\n-        return '&' + self.compiler_ctor()\n-\n-    @staticmethod\n-    def rust_name():\n-        return '()'\n-\n-    @staticmethod\n-    def type_info(platform_info):\n-        return None\n-\n-    def __eq__(self, other):\n-        return isinstance(other, Void)\n-\n-class Number(Type):\n-    def __init__(self, bitwidth):\n-        Type.__init__(self, bitwidth)\n-\n-    def modify(self, spec, width, previous):\n-        if spec == 'u':\n-            return Unsigned(self.bitwidth())\n-        elif spec == 's':\n-            return Signed(self.bitwidth())\n-        elif spec == 'f':\n-            return Float(self.bitwidth())\n-        elif spec == 'w':\n-            return self.__class__(self.bitwidth() * 2)\n-        elif spec == 'n':\n-            return self.__class__(self.bitwidth() // 2)\n-        elif spec == 'v':\n-            return Vector(self, width // self.bitwidth())\n-        else:\n-            raise ValueError('unknown modification spec {}', spec)\n-\n-    def type_info(self, platform_info):\n-        return platform_info.number_type_info(self)\n-\n-    def __eq__(self, other):\n-        # print(self, other)\n-        return self.__class__ == other.__class__ and self.bitwidth() == other.bitwidth()\n-\n-class Signed(Number):\n-    def __init__(self, bitwidth, llvm_bitwidth = None):\n-        Number.__init__(self, bitwidth)\n-        self._llvm_bitwidth = llvm_bitwidth\n-\n-\n-    def compiler_ctor(self):\n-        if self._llvm_bitwidth is None:\n-            return '::I{}'.format(self.bitwidth())\n-        else:\n-            return '::I{}_{}'.format(self.bitwidth(), self._llvm_bitwidth)\n-\n-    def compiler_ctor_ref(self):\n-        return '&' + self.compiler_ctor()\n-\n-    def llvm_name(self):\n-        bw = self._llvm_bitwidth or self.bitwidth()\n-        return 'i{}'.format(bw)\n-\n-    def rust_name(self):\n-        return 'i{}'.format(self.bitwidth())\n-\n-class Unsigned(Number):\n-    def __init__(self, bitwidth, llvm_bitwidth = None):\n-        Number.__init__(self, bitwidth)\n-        self._llvm_bitwidth = llvm_bitwidth\n-\n-    def compiler_ctor(self):\n-        if self._llvm_bitwidth is None:\n-            return '::U{}'.format(self.bitwidth())\n-        else:\n-            return '::U{}_{}'.format(self.bitwidth(), self._llvm_bitwidth)\n-\n-    def compiler_ctor_ref(self):\n-        return '&' + self.compiler_ctor()\n-\n-    def llvm_name(self):\n-        bw = self._llvm_bitwidth or self.bitwidth()\n-        return 'i{}'.format(bw)\n-\n-    def rust_name(self):\n-        return 'u{}'.format(self.bitwidth())\n-\n-class Float(Number):\n-    def __init__(self, bitwidth):\n-        assert bitwidth in (32, 64)\n-        Number.__init__(self, bitwidth)\n-\n-    def compiler_ctor(self):\n-        return '::F{}'.format(self.bitwidth())\n-\n-    def compiler_ctor_ref(self):\n-        return '&' + self.compiler_ctor()\n-\n-    def llvm_name(self):\n-        return 'f{}'.format(self.bitwidth())\n-\n-    def rust_name(self):\n-        return 'f{}'.format(self.bitwidth())\n-\n-class Vector(Type):\n-    def __init__(self, elem, length, bitcast = None):\n-        assert isinstance(elem, Type) and not isinstance(elem, Vector)\n-        Type.__init__(self,\n-                      elem.bitwidth() * length)\n-        self._length = length\n-        self._elem = elem\n-        assert bitcast is None or (isinstance(bitcast, Vector) and\n-                                   bitcast._bitcast is None and\n-                                   bitcast._elem.bitwidth() == elem.bitwidth())\n-        if bitcast is not None and bitcast._elem != elem:\n-            self._bitcast = bitcast._elem\n-        else:\n-            self._bitcast = None\n-\n-    def modify(self, spec, width, previous):\n-        if spec == 'S':\n-            return self._elem\n-        elif spec == 'h':\n-            return Vector(self._elem, self._length // 2)\n-        elif spec == 'd':\n-            return Vector(self._elem, self._length * 2)\n-        elif spec == 'N':\n-            elem = self._elem.__class__(self._elem.bitwidth() // 2)\n-            return Vector(elem, self._length * 2)\n-        elif spec == 'W':\n-            elem = self._elem.__class__(self._elem.bitwidth() * 2)\n-            return Vector(elem, self._length // 2)\n-        elif spec.startswith('x'):\n-            new_bitwidth = int(spec[1:])\n-            return Vector(self._elem, new_bitwidth // self._elem.bitwidth())\n-        elif spec.startswith('->'):\n-            bitcast_to = TypeSpec(spec[2:])\n-            choices = list(bitcast_to.enumerate(width, previous))\n-            assert len(choices) == 1\n-            bitcast_to = choices[0]\n-            return Vector(self._elem, self._length, bitcast_to)\n-        else:\n-            return Vector(self._elem.modify(spec, width, previous), self._length)\n-\n-    def compiler_ctor(self):\n-        if self._bitcast is None:\n-            return '{}x{}'.format(self._elem.compiler_ctor(),\n-                                     self._length)\n-        else:\n-            return '{}x{}_{}'.format(self._elem.compiler_ctor(),\n-                                     self._length,\n-                                     self._bitcast.compiler_ctor()\n-                                         .replace('::', ''))\n-\n-    def compiler_ctor_ref(self):\n-        return '&' + self.compiler_ctor()\n-\n-    def rust_name(self):\n-        return '{}x{}'.format(self._elem.rust_name(), self._length)\n-\n-    def type_info(self, platform_info):\n-        elem_info = self._elem.type_info(platform_info)\n-        return elem_info.vectorize(self._length,\n-                                   platform_info.width_info(self.bitwidth()))\n-\n-    def __eq__(self, other):\n-        return isinstance(other, Vector) and self._length == other._length and \\\n-            self._elem == other._elem and self._bitcast == other._bitcast\n-\n-class Pointer(Type):\n-    def __init__(self, elem, llvm_elem, const):\n-        self._elem = elem\n-        self._llvm_elem = llvm_elem\n-        self._const = const\n-        Type.__init__(self, BITWIDTH_POINTER)\n-\n-    def modify(self, spec, width, previous):\n-        if spec == 'D':\n-            return self._elem\n-        elif spec == 'M':\n-            return Pointer(self._elem, self._llvm_elem, False)\n-        elif spec == 'C':\n-            return Pointer(self._elem, self._llvm_elem, True)\n-        else:\n-            return Pointer(self._elem.modify(spec, width, previous), self._llvm_elem, self._const)\n-\n-    def compiler_ctor(self):\n-        if self._llvm_elem is None:\n-            llvm_elem = 'None'\n-        else:\n-            llvm_elem = 'Some({})'.format(self._llvm_elem.compiler_ctor_ref())\n-        return 'Type::Pointer({}, {}, {})'.format(self._elem.compiler_ctor_ref(),\n-                                                  llvm_elem,\n-                                                  'true' if self._const else 'false')\n-\n-    def compiler_ctor_ref(self):\n-        return \"{{ static PTR: Type = {}; &PTR }}\".format(self.compiler_ctor())\n-\n-\n-    def rust_name(self):\n-        return '*{} {}'.format('const' if self._const else 'mut',\n-                               self._elem.rust_name())\n-\n-    def type_info(self, platform_info):\n-        if self._llvm_elem is None:\n-            llvm_elem = None\n-        else:\n-            llvm_elem = self._llvm_elem.type_info(platform_info)\n-        return self._elem.type_info(platform_info).pointer(llvm_elem)\n-\n-    def __eq__(self, other):\n-        return isinstance(other, Pointer) and self._const == other._const \\\n-            and self._elem == other._elem and self._llvm_elem == other._llvm_elem\n-\n-class Aggregate(Type):\n-    def __init__(self, flatten, elems):\n-        self._flatten = flatten\n-        self._elems = elems\n-        Type.__init__(self, sum(elem.bitwidth() for elem in elems))\n-\n-    def __repr__(self):\n-        return '<Aggregate {}>'.format(self._elems)\n-\n-    def modify(self, spec, width, previous):\n-        if spec.startswith('.'):\n-            num = int(spec[1:])\n-            return self._elems[num]\n-        else:\n-            print(spec)\n-            raise NotImplementedError()\n-\n-    def compiler_ctor(self):\n-        parts = \"{{ static PARTS: [&'static Type; {}] = [{}]; &PARTS }}\"\n-        elems = ', '.join(elem.compiler_ctor_ref() for elem in self._elems)\n-        parts = parts.format(len(self._elems), elems)\n-        return 'Type::Aggregate({}, {})'.format('true' if self._flatten else 'false',\n-                                                parts)\n-\n-    def compiler_ctor_ref(self):\n-        return \"{{ static AGG: Type = {}; &AGG }}\".format(self.compiler_ctor())\n-\n-    def rust_name(self):\n-        return '({})'.format(', '.join(elem.rust_name() for elem in self._elems))\n-\n-    def type_info(self, platform_info):\n-        return PlatformTypeInfo(None, None, [elem.type_info(platform_info) for elem in self._elems])\n-\n-    def __eq__(self, other):\n-        return isinstance(other, Aggregate) and self._flatten == other._flatten and \\\n-            self._elems == other._elems\n-\n-\n-TYPE_ID_LOOKUP = {'i': [Signed, Unsigned],\n-                  's': [Signed],\n-                  'u': [Unsigned],\n-                  'f': [Float]}\n-\n-def ptrify(match, elem, width, previous):\n-    ptr = match.group('pointer')\n-    if ptr is None:\n-        return elem\n-    else:\n-        llvm_ptr = match.group('llvm_pointer')\n-        if llvm_ptr is None:\n-            llvm_elem = None\n-        else:\n-            assert llvm_ptr.startswith('/')\n-            options = list(TypeSpec(llvm_ptr[1:]).enumerate(width, previous))\n-            assert len(options) == 1\n-            llvm_elem = options[0]\n-        assert ptr in ('Pc', 'Pm')\n-        return Pointer(elem, llvm_elem, ptr == 'Pc')\n-\n-class TypeSpec(object):\n-    def __init__(self, spec):\n-        if not isinstance(spec, list):\n-            spec = [spec]\n-\n-        self.spec = spec\n-\n-    def enumerate(self, width, previous):\n-        for spec in self.spec:\n-            match = SPEC.match(spec)\n-            if match is not None:\n-                id = match.group('id')\n-                reference = match.group('reference')\n-\n-                modifiers = []\n-                index = match.group('index')\n-                if index is not None:\n-                    modifiers.append(index)\n-                modifiers += list(match.group('modifiers') or '')\n-                force = match.group('force_width')\n-                if force is not None:\n-                    modifiers.append(force)\n-                bitcast = match.group('bitcast')\n-                if bitcast is not None:\n-                    modifiers.append(bitcast)\n-\n-                if match.group('void') is not None:\n-                    assert spec == 'V'\n-                    yield Void()\n-                elif id is not None:\n-                    is_vector = id.islower()\n-                    type_ctors = TYPE_ID_LOOKUP[id.lower()]\n-\n-                    start = match.group('start')\n-                    if start is not None:\n-                        end = match.group('end')\n-                        llvm_width = None\n-                    else:\n-                        start = end = match.group('width')\n-                        llvm_width = match.group('llvm_width')\n-                    start = int(start)\n-                    end = int(end)\n-\n-                    bitwidth = start\n-                    while bitwidth <= end:\n-                        for ctor in type_ctors:\n-                            if llvm_width is not None:\n-                                assert not is_vector\n-                                llvm_width = int(llvm_width)\n-                                assert llvm_width < bitwidth\n-                                scalar = ctor(bitwidth, llvm_width)\n-                            else:\n-                                scalar = ctor(bitwidth)\n-\n-                            if is_vector:\n-                                elem = Vector(scalar, width // bitwidth)\n-                            else:\n-                                assert bitcast is None\n-                                elem = scalar\n-\n-                            for x in modifiers:\n-                                elem = elem.modify(x, width, previous)\n-                            yield ptrify(match, elem, width, previous)\n-                        bitwidth *= 2\n-                elif reference is not None:\n-                    reference = int(reference)\n-                    assert reference < len(previous), \\\n-                        'referring to argument {}, but only {} are known'.format(reference,\n-                                                                                 len(previous))\n-                    ret = previous[reference]\n-                    for x in modifiers:\n-                        ret = ret.modify(x, width, previous)\n-                    yield ptrify(match, ret, width, previous)\n-                else:\n-                    assert False, 'matched `{}`, but didn\\'t understand it?'.format(spec)\n-            elif spec.startswith('('):\n-                if spec.endswith(')'):\n-                    true_spec = spec[1:-1]\n-                    flatten = False\n-                elif spec.endswith(')f'):\n-                    true_spec = spec[1:-2]\n-                    flatten = True\n-                else:\n-                    assert False, 'found unclosed aggregate `{}`'.format(spec)\n-\n-                for elems in itertools.product(*(TypeSpec(subspec).enumerate(width, previous)\n-                                                 for subspec in true_spec.split(','))):\n-                    yield Aggregate(flatten, elems)\n-            elif spec.startswith('['):\n-                if spec.endswith(']'):\n-                    true_spec = spec[1:-1]\n-                    flatten = False\n-                elif spec.endswith(']f'):\n-                    true_spec = spec[1:-2]\n-                    flatten = True\n-                else:\n-                    assert False, 'found unclosed aggregate `{}`'.format(spec)\n-                elem_spec, count = true_spec.split(';')\n-\n-                count = int(count)\n-                for elem in TypeSpec(elem_spec).enumerate(width, previous):\n-                    yield Aggregate(flatten, [elem] * count)\n-            else:\n-                assert False, 'Failed to parse `{}`'.format(spec)\n-\n-class GenericIntrinsic(object):\n-    def __init__(self, platform, intrinsic, widths, llvm_name, ret, args):\n-        self._platform = platform\n-        self.intrinsic = intrinsic\n-        self.widths = map(int, widths)\n-        self.llvm_name = llvm_name\n-        self.ret = TypeSpec(ret)\n-        self.args = list(map(TypeSpec, args))\n-\n-    def monomorphise(self):\n-        for width in self.widths:\n-            # must be a power of two\n-            assert width & (width - 1) == 0\n-            def recur(processed, untouched):\n-                if not untouched:\n-                    ret = processed[0]\n-                    args = processed[1:]\n-                    yield MonomorphicIntrinsic(self._platform, self.intrinsic, width,\n-                                               self.llvm_name,\n-                                               ret, args)\n-                else:\n-                    raw_arg = untouched[0]\n-                    rest = untouched[1:]\n-                    for arg in raw_arg.enumerate(width, processed):\n-                        for intr in recur(processed + [arg], rest):\n-                            yield intr\n-\n-            for x in recur([], [self.ret] + self.args):\n-                yield x\n-\n-class MonomorphicIntrinsic(object):\n-    def __init__(self, platform, intrinsic, width, llvm_name, ret, args):\n-        self._platform = platform\n-        self._intrinsic = intrinsic\n-        self._width = '' if width == 64 else 'q'\n-        self._llvm_name = llvm_name\n-        self._ret_raw = ret\n-        self._ret = ret.type_info(platform)\n-        self._args_raw = args\n-        self._args = [arg.type_info(platform) for arg in args]\n-\n-    def llvm_name(self):\n-        if self._llvm_name.startswith('!'):\n-            return self._llvm_name[1:].format(self._ret, *self._args)\n-        else:\n-            return self._platform.llvm_prefix() + self._llvm_name.format(self._ret, *self._args)\n-\n-    def intrinsic_suffix(self):\n-        return self._intrinsic.format(self._ret,\n-                                      *self._args,\n-                                      width = self._width)\n-\n-    def platform_prefix(self):\n-        return self._platform.platform().platform_prefix()\n-\n-    def intrinsic_set_name(self):\n-        return self._platform.intrinsic_prefix()\n-\n-    def intrinsic_name(self):\n-        return self._platform.intrinsic_prefix() + self.intrinsic_suffix()\n-\n-    def compiler_args(self):\n-        return ', '.join(arg.compiler_ctor_ref() for arg in self._args_raw)\n-\n-    def compiler_ret(self):\n-        return self._ret_raw.compiler_ctor_ref()\n-\n-    def compiler_signature(self):\n-        return '({}) -> {}'.format(self.compiler_args(), self.compiler_ret())\n-\n-    def intrinsic_signature(self):\n-        names = 'xyzwabcdef'\n-        return '({}) -> {}'.format(', '.join('{}: {}'.format(name, arg.rust_name())\n-                                             for name, arg in zip(names, self._args_raw)),\n-                                   self._ret_raw.rust_name())\n-\n-def parse_args():\n-    parser = argparse.ArgumentParser(\n-        formatter_class = argparse.RawDescriptionHelpFormatter,\n-        description = 'Render an intrinsic definition JSON to various formats.',\n-        epilog = textwrap.dedent('''\\\n-        Quick How-To:\n-\n-        There are two operating modes: single file and multiple files.\n-\n-        For example, ARM is specified as a single file. To generate the\n-        compiler-definitions for ARM just pass the script the \"arm.json\" file:\n-\n-        python generator.py --format compiler-defs arm.json\n-\n-        The X86 architecture is specified as multiple files (for the different\n-        instruction sets that x86 supports). To generate the compiler\n-        definitions one needs to pass the script a \"platform information file\"\n-        (with the -i flag) next to the files of the different instruction sets.\n-        For example, to generate the X86 compiler-definitions for SSE4.2, just:\n-\n-        python generator.py --format compiler-defs -i x86/info.json sse42.json\n-\n-        And to generate the compiler-definitions for SSE4.1 and SSE4.2, just:\n-\n-        python generator.py --format compiler-defs -i x86/info.json sse41.json sse42.json\n-\n-        An intrinsic definition consists of a map with fields:\n-        - intrinsic: pattern for the name(s) of the vendor's C intrinsic(s)\n-        - llvm: pattern for the name(s) of the internal llvm intrinsic(s)\n-        - width: a vector of vector bit-widths the pattern works with\n-        - ret: type specifier for the return value\n-        - arguments: vector of type specifiers for arguments\n-\n-        The width and types describe a range of possible intrinsics,\n-        and these are fed back into the intrinsic and llvm patterns to\n-        create the appropriate definitions.\n-\n-        ## Type specifier grammar\n-\n-        ```\n-        type := core_type modifier* suffix?\n-\n-        core_type := void | vector | scalar | aggregate | reference\n-\n-        modifier := 'v' | 'h' | 'd' | 'n' | 'w' | 'u' | 's' |\n-                     'x' number | '.' number\n-        suffix := pointer | bitcast\n-        pointer := 'Pm' llvm_pointer? | 'Pc' llvm_pointer?\n-        llvm_pointer := '/' type\n-        bitcast := '->' type\n-\n-        void := 'V'\n-\n-        vector := vector_elem width |\n-        vector_elem := 'i' | 'u' | 's' | 'f'\n-\n-        scalar := scalar_type number llvm_width?\n-        scalar_type := 'U' | 'S' | 'F'\n-        llvm_width := '/' number\n-\n-        aggregate := '(' (type),* ')' 'f'? | '[' type ';' number ']' 'f'?\n-\n-        reference := number\n-\n-        width = number | '(' number '-' number ')'\n-\n-        number = [0-9]+\n-        ```\n-\n-        ## Void\n-\n-        The `V` type corresponds to `void` in LLVM (`()` in\n-        Rust). It's likely to only work in return position.\n-\n-        ## Vectors\n-\n-        The vector grammar is a pattern describing many possibilities\n-        for arguments/return value. The `vector_elem` describes the\n-        types of elements to use, and the `width` describes the (range\n-        of) widths for those elements, which are then placed into a\n-        vector with the `width` bitwidth. E.g. if an intrinsic has a\n-        `width` that includes 128, and the return value is `i(8-32)`,\n-        then some instantiation of that intrinsic will be `u8x16`,\n-        `u32x4`, `i32x4`, etc.\n-\n-        ### Elements\n-\n-        - i: integer, both signed and unsigned\n-        - u: unsigned integer\n-        - s: signed integer\n-        - f: float\n-\n-        ## Scalars\n-\n-        Similar to vectors, but these describe a single concrete type,\n-        not a range. The number is the bitwidth. The optional\n-        `llvm_width` is the bitwidth of the integer that should be\n-        passed to LLVM (by truncating the Rust argument): this only\n-        works with scalar integers and the LLVM width must be smaller\n-        than the Rust width.\n-\n-        ### Types\n-\n-        - U: unsigned integer\n-        - S: signed integer\n-        - F: float\n-\n-        ## Aggregates\n-\n-        An aggregate is a collection of multiple types; a tuple in\n-        Rust terms, or an unnamed struct in LLVM. The `f` modifiers\n-        forces the tuple to be flattened in the LLVM\n-        intrinsic. E.g. if `llvm.foo` takes `(F32,S32)`:\n-\n-        - no `f` corresponds to `declare ... @llvm.foo({float, i32})`.\n-        - having an `f` corresponds to `declare ... @llvm.foo(float, i32)`.\n-\n-        The `[type;number]` form is a just shorter way to write\n-        `(...)`, except avoids doing a cartesian product of generic\n-        types, e.g. `[S32;2]` is the same as `(S32, S32)`, while\n-        `[I32;2]` is describing just the two types `(S32,S32)` and\n-        `(U32,U32)` (i.e. doesn't include `(S32,U32)`, `(U32,S32)` as\n-        `(I32,I32)` would).\n-\n-        (Currently aggregates can not contain other aggregates.)\n-\n-        ## References\n-\n-        A reference uses the type of another argument, with possible\n-        modifications. The number refers to the type to use, starting\n-        with 0 == return value, 1 == first argument, 2 == second\n-        argument, etc.\n-\n-        ## Affixes\n-\n-        The `modifier` and `suffix` adaptors change the precise\n-        representation.\n-\n-        ### Modifiers\n-\n-        - 'v': put a scalar into a vector of the current width (u32 -> u32x4, when width == 128)\n-        - 'S': get the scalar element of a vector (u32x4 -> u32)\n-        - 'h': half the length of the vector (u32x4 -> u32x2)\n-        - 'd': double the length of the vector (u32x2 -> u32x4)\n-        - 'n': narrow the element of the vector (u32x4 -> u16x4)\n-        - 'w': widen the element of the vector (u16x4 -> u32x4)\n-        - 'N': half the length of the vector element (u32x4 -> u16x8)\n-        - 'W': double the length of the vector element (u16x8 -> u32x4)\n-        - 'u': force a number (vector or scalar) to be unsigned int (f32x4 -> u32x4)\n-        - 's': force a number (vector or scalar) to be signed int (u32x4 -> i32x4)\n-        - 'f': force a number (vector or scalar) to be float (u32x4 -> f32x4)\n-        - 'x' number: force the type to be a vector of bitwidth `number`.\n-        - '.' number: get the `number`th element of an aggregate\n-        - 'D': dereference a pointer (*mut u32 -> u32)\n-        - 'C': make a pointer const (*mut u32 -> *const u32)\n-        - 'M': make a pointer mut (*const u32 -> *mut u32)\n-\n-        ### Pointers\n-\n-        Pointers can be created of any type by appending a `P*`\n-        suffix. The `m` vs. `c` chooses mut vs. const. e.g. `S32Pm`\n-        corresponds to `*mut i32`, and `i32Pc` corresponds (with width\n-        128) to `*const i8x16`, `*const u32x4`, etc.\n-\n-        The type after the `/` (optional) represents the type used\n-        internally to LLVM, e.g. `S32pm/S8` is exposed as `*mut i32`\n-        in Rust, but is `i8*` in LLVM. (This defaults to the main\n-        type).\n-\n-        ### Bitcast\n-\n-        The `'->' type` bitcast suffix will cause the value to be\n-        bitcast to the right-hand type when calling the intrinsic,\n-        e.g. `s32->f32` will expose the intrinsic as `i32x4` at the\n-        Rust level, but will cast that vector to `f32x4` when calling\n-        the LLVM intrinsic.\n-        '''))\n-    parser.add_argument('--format', choices=FORMATS, required=True,\n-                        help = 'Output format.')\n-    parser.add_argument('-o', '--out', type=argparse.FileType('w'), default=sys.stdout,\n-                        help = 'File to output to (default stdout).')\n-    parser.add_argument('-i', '--info', type=argparse.FileType('r'),\n-                        help = 'File containing platform specific information to merge into '\n-                                'the input files\\' header.')\n-    parser.add_argument('in_', metavar=\"FILE\", type=argparse.FileType('r'), nargs='+',\n-                        help = 'JSON files to load')\n-    return parser.parse_args()\n-\n-\n-class ExternBlock(object):\n-    def __init__(self):\n-        pass\n-\n-    @staticmethod\n-    def open(platform):\n-        return 'extern \"platform-intrinsic\" {'\n-\n-    @staticmethod\n-    def render(mono):\n-        return '    fn {}{}{};'.format(mono.platform_prefix(),\n-                                       mono.intrinsic_name(),\n-                                       mono.intrinsic_signature())\n-\n-    @staticmethod\n-    def close():\n-        return '}'\n-\n-class CompilerDefs(object):\n-    def __init__(self):\n-        pass\n-\n-    @staticmethod\n-    def open(platform):\n-        return '''\\\n-// DO NOT EDIT: autogenerated by etc/platform-intrinsics/generator.py\n-// ignore-tidy-linelength\n-\n-#![allow(unused_imports)]\n-\n-use {{Intrinsic, Type}};\n-use IntrinsicDef::Named;\n-\n-pub fn find(name: &str) -> Option<Intrinsic> {{\n-    if !name.starts_with(\"{0}\") {{ return None }}\n-    Some(match &name[\"{0}\".len()..] {{'''.format(platform.platform_prefix())\n-\n-    @staticmethod\n-    def render(mono):\n-        return '''\\\n-        \"{}\" => Intrinsic {{\n-            inputs: {{ static INPUTS: [&'static Type; {}] = [{}]; &INPUTS }},\n-            output: {},\n-            definition: Named(\"{}\")\n-        }},'''.format(mono.intrinsic_set_name() + mono.intrinsic_suffix(),\n-                      len(mono._args_raw),\n-                      mono.compiler_args(),\n-                      mono.compiler_ret(),\n-                      mono.llvm_name())\n-\n-    @staticmethod\n-    def close():\n-        return '''\\\n-        _ => return None,\n-    })\n-}'''\n-\n-FORMATS = {\n-    'extern-block': ExternBlock(),\n-    'compiler-defs': CompilerDefs(),\n-}\n-\n-\n-def main():\n-    args = parse_args()\n-    ins = args.in_\n-    out = args.out\n-    out_format = FORMATS[args.format]\n-    info = args.info\n-    one_file_no_info = False\n-    if len(ins) > 1 and info is None:\n-        print('error: cannot have multiple inputs without an info header.', file=sys.stderr)\n-        sys.exit(1)\n-\n-    elif info is None:\n-        info = ins[0]\n-        one_file_no_info = True\n-    info_json = json.load(info)\n-    platform = PlatformInfo(info_json)\n-\n-    print(out_format.open(platform), file=out)\n-\n-    for in_ in ins:\n-\n-        if one_file_no_info:\n-            data = info_json\n-        else:\n-            data = json.load(in_)\n-            data.update(info_json)\n-\n-        intrinsics = IntrinsicSet(platform, data)\n-        for intr in intrinsics.intrinsics():\n-            for mono in intr.monomorphise():\n-                print(out_format.render(mono), file=out)\n-\n-    print(out_format.close(), file=out)\n-\n-if __name__ == '__main__':\n-    main()"}, {"sha": "a1897e6bf6100bd692a34e7f9899bdf5eee9afc6", "filename": "src/etc/platform-intrinsics/hexagon/hvx_v60.json", "status": "removed", "additions": 0, "deletions": 1326, "changes": 1326, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fhexagon%2Fhvx_v60.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fhexagon%2Fhvx_v60.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fhexagon%2Fhvx_v60.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,1326 +0,0 @@\n-{\n-    \"platform\": \"Q6_\",\n-    \"intrinsic_prefix\": \"\",\n-    \"llvm_prefix\": \"llvm.hexagon.V6.\",\n-    \"number_info\": {\n-        \"signed\": {\n-            \"kind\": \"s\",\n-            \"data_type\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\" },\n-            \"data_type_plain\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\" }\n-        },\n-        \"unsigned\": {\n-            \"kind\": \"u\",\n-            \"data_type\": { \"8\": \"ub\", \"16\": \"uh\", \"32\": \"uw\" },\n-            \"data_type_plain\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\" }\n-        },\n-        \"float\": {\n-            \"kind\": \"f\",\n-            \"data_type\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\" },\n-            \"data_type_plain\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\" }\n-        }\n-    },\n-    \"width_info\": {\n-        \"64\": { \"width_b\": \"64\", \"width_suffix\": \"\" },\n-        \"128\": { \"width_b\": \"128\", \"width_suffix\": \".128B\" },\n-        \"512\": { \"width_b\": \"64\", \"width_suffix\": \"\" },\n-        \"1024\": { \"widthd_b\": \"64\", \"width_b\": \"128\", \"width_suffix\": \".128B\",  \"widthd_suffix\": \"\" },\n-        \"2048\": { \"widthd_b\": \"128\", \"widthd_suffix\": \".128B\" }\n-    },\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"R_vextract{1.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"extractw{1.width_suffix}\",\n-            \"ret\": \"U32\",\n-            \"args\": [\"u32\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_lo{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"lo{0.width_suffix}\",\n-            \"ret\": \"u32\",\n-            \"args\": [\"0d\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_hi{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"hi{0.width_suffix}\",\n-            \"ret\": \"u32\",\n-            \"args\": [\"0d\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_vsplat_R{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"lvsplat{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"u32\",\n-            \"args\": [\"0S\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_and_QQ{0.width_b}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"pred.and{0.width_suffix}\",\n-            \"ret\": \"u32\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_not_Q{0.width_b}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"pred.not{0.width_suffix}\",\n-            \"ret\": \"u32\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_or_QQ{0.width_b}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"pred.or{0.width_suffix}\",\n-            \"ret\": \"u32\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_xor_QQ{0.width_b}\",\n-            \"width\": [64, 128],\n-            \"llvm\": \"pred.xor{0.width_suffix}\",\n-            \"ret\": \"u32\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vabsdiff_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vabsdiff{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"u(8-16)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vabsdiff_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vabsdiff{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"u(16-32)\",\n-            \"args\": [\"0s\", \"0s\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vabs_V{1.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vabs{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vabs_V{1.data_type}_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vabs{1.data_type}.sat{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vadd_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vadd{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vadd_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vadd{0.data_type}sat{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vadd_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vadd{0.data_type}sat{0.width_suffix}\",\n-            \"ret\": \"u(8-16)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vadd_W{1.data_type}W{2.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vadd{0.data_type}.dv{0.widthd_suffix}\",\n-            \"ret\": \"s(8-32)d\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vadd_W{1.data_type}W{2.data_type}_sat{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vadd{0.data_type}sat.dv{0.widthd_suffix}\",\n-            \"ret\": \"s(16-32)d\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vadd_W{1.data_type}W{2.data_type}_sat{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vadd{0.data_type}sat.dv{0.widthd_suffix}\",\n-            \"ret\": \"u(8-16)d\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_valign_VVR{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"valignb{0.width_suffix}\",\n-            \"ret\": \"u8\",\n-            \"args\": [\"0\", \"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_valign_VVI{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"valignbi{0.width_suffix}\",\n-            \"ret\": \"u8\",\n-            \"args\": [\"0\", \"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_vlalign_VVR{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vlalignb{0.width_suffix}\",\n-            \"ret\": \"u8\",\n-            \"args\": [\"0\", \"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_vlalign_VVI{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vlalignbi{0.width_suffix}\",\n-            \"ret\": \"u8\",\n-            \"args\": [\"0\", \"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_vand_VV{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vand{0.width_suffix}\",\n-            \"ret\": \"u16\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_vand_QR{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vandqrt{0.width_suffix}\",\n-            \"ret\": \"u8\",\n-            \"args\": [\"u32hhh\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_vandor_VQR{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vandqrt.acc{0.width_suffix}\",\n-            \"ret\": \"u8\",\n-            \"args\": [\"0\", \"u32hhh\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_vand_VR{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vandvrt{0.width_suffix}\",\n-            \"ret\": \"u32hhh\",\n-            \"args\": [\"u8\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_vandor_QVR{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vandvrt{0.width_suffix}\",\n-            \"ret\": \"u32hhh\",\n-            \"args\": [\"0\", \"u8\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vasl_V{1.data_type}R{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vasl{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vasl_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vasl{0.data_type}v{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vaslacc_V{1.data_type}V{2.data_type}R{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vasl{0.data_type}.acc{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vasr_V{1.data_type}R{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vasr{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vasr_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vasr{0.data_type}v{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vasracc_V{1.data_type}V{2.data_type}R{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vasr{0.data_type}.acc{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vasr_V{1.data_type}V{2.data_type}R{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vasr{0.data_type}{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0hw\", \"0hw\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vasr_V{1.data_type}V{2.data_type}R_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vasr{1.data_type}{0.data_type_plain}sat{0.width_suffix}\",\n-            \"ret\": \"i(8-16)\",\n-            \"args\": [\"0hws\", \"0hws\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vasr_V{1.data_type}V{2.data_type}R_rnd_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vasr{1.data_type}{0.data_type_plain}rndsat{0.width_suffix}\",\n-            \"ret\": \"i(8-16)\",\n-            \"args\": [\"0hws\", \"0hws\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_equals_V{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vassign{0.width_suffix}\",\n-            \"ret\": \"u32\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"W_equals_W{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vassignp{0.widthd_suffix}\",\n-            \"ret\": \"u32d\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vavg_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vavg{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vavg_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vavg{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"u(8-16)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vavg_V{1.data_type}V{2.data_type}_rnd{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vavgrnd{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vavg_V{1.data_type}V{2.data_type}_rnd{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vavgrnd{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"u(8-16)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vcl0_V{1.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vcl0{0.data_type_plain}{0.width_suffix}\",\n-            \"ret\": \"u(16-32)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"W_vcombine_VV{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vcombine{0.widthd_suffix}\",\n-            \"ret\": \"u8d\",\n-            \"args\": [\"0h\", \"0h\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_vzero{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vd0{0.width_suffix}\",\n-            \"ret\": \"u32\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdeal_V{1.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdeal{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"s(8-16)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdeale_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdeal{1.data_type}4w{0.width_suffix}\",\n-            \"ret\": \"s8\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"W_vdeal_VVR{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdealvdd{0.widthd_suffix}\",\n-            \"ret\": \"u8d\",\n-            \"args\": [\"0h\", \"0h\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_vdelta_VV{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdelta{0.width_suffix}\",\n-            \"ret\": \"u8\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdmpy_V{1.data_type}Rb{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpybus{0.width_suffix}\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"u8\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}V{2.data_type}Rb{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpybus.acc{0.width_suffix}\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"s16\", \"u8\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vdmpy_W{1.data_type}Rb{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpybus.dv{0.widthd_suffix}\",\n-            \"ret\": \"s16d\",\n-            \"args\": [\"u8d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vdmpyacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpybus.dv.acc{0.widthd_suffix}\",\n-            \"ret\": \"s16d\",\n-            \"args\": [\"s16d\", \"u8d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdmpy_V{1.data_type}Rb{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpyhb{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"s16\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}V{2.data_type}Rb{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpyhb.acc{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"s32\", \"s16\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vdmpy_W{1.data_type}Rb{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpyhb.dv{0.widthd_suffix}\",\n-            \"ret\": \"s32d\",\n-            \"args\": [\"s16d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vdmpyacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpyhb.dv.acc{0.widthd_suffix}\",\n-            \"ret\": \"s32d\",\n-            \"args\": [\"s32d\", \"s16d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdmpy_W{1.data_type}Rh_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpyhisat{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdmpy_V{1.data_type}Rh_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpyhsat{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"s16\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdmpy_W{1.data_type}Ruh_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpyhsuisat{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"s16d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdmpy_V{1.data_type}Ruh_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpyhsusat{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"s16\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdmpy_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpyhvsat{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"s16\", \"s16\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}W{2.data_type}Rh_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpyhisat_acc{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"0d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vdsad_W{1.data_type}Ruh{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdsaduh{0.widthd_suffix}\",\n-            \"ret\": \"u32d\",\n-            \"args\": [\"u16d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vdsadacc_W{1.data_type}W{2.data_type}Ruh{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdsaduh.acc{0.widthd_suffix}\",\n-            \"ret\": \"u32d\",\n-            \"args\": [\"0\", \"u16d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}V{2.data_type}Rh_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpyhsat_acc{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"s16\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}W{2.data_type}Ruh_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpyhsuisat_acc{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"s16d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}V{2.data_type}Ruh_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpyhsusat_acc{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"s16\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}V{2.data_type}V{3.data_type}_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vdmpyhvsat_acc{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"s16\", \"s16\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_vcmp_eq_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"veq{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"u32hhh\",\n-            \"args\": [\"s(8-32)\", \"1\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_vcmp_eqand_QV{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"veq{2.data_type}.and{0.width_suffix}\",\n-            \"ret\": \"u32hhh\",\n-            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_vcmp_eqor_QV{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"veq{2.data_type}.or{0.width_suffix}\",\n-            \"ret\": \"u32hhh\",\n-            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_vcmp_eqxacc_QV{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"veq{2.data_type}.xor{0.width_suffix}\",\n-            \"ret\": \"u32hhh\",\n-            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_vcmp_gt_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vgt{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"u32hhh\",\n-            \"args\": [\"s(8-32)\", \"1\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_vcmp_gt_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vgt{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"u32hhh\",\n-            \"args\": [\"u(8-16)\", \"1\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_vcmp_gtand_QV{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vgt{2.data_type}.and{0.width_suffix}\",\n-            \"ret\": \"u32hhh\",\n-            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_vcmp_gtand_QV{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vgt{2.data_type}.and{0.width_suffix}\",\n-            \"ret\": \"u32hhh\",\n-            \"args\": [\"0\", \"u(8-16)\", \"2\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_vcmp_gtor_QV{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vgt{2.data_type}.or{0.width_suffix}\",\n-            \"ret\": \"u32hhh\",\n-            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_vcmp_gtor_QV{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vgt{2.data_type}.or{0.width_suffix}\",\n-            \"ret\": \"u32hhh\",\n-            \"args\": [\"0\", \"u(8-16)\", \"2\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_vcmp_gtxacc_QV{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vgt{2.data_type}.xor{0.width_suffix}\",\n-            \"ret\": \"u32hhh\",\n-            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n-        },\n-        {\n-            \"intrinsic\": \"Q_vcmp_gtxacc_QV{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vgt{2.data_type}.xor{0.width_suffix}\",\n-            \"ret\": \"u32hhh\",\n-            \"args\": [\"0\", \"u(8-16)\", \"2\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vinsert_V{1.data_type}R{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vinsertwr{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"S32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vlsr_V{1.data_type}R{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vlsr{0.data_type_plain}{0.width_suffix}\",\n-            \"ret\": \"u(16-32)\",\n-            \"args\": [\"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vlsr_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vlsr{0.data_type}v{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vlut32_V{1.data_type}V{2.data_type}R{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vlutvv{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"s8\",\n-            \"args\": [\"0\", \"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vlut16_V{1.data_type}V{2.data_type}R{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vlutvw{0.data_type}{0.widthd_suffix}\",\n-            \"ret\": \"s16d\",\n-            \"args\": [\"s8\", \"s16\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vlut32or_V{1.data_type}V{2.data_type}V{3.data_type}R{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vlutvv{0.data_type}.oracc{0.width_suffix}\",\n-            \"ret\": \"s8\",\n-            \"args\": [\"0\", \"0\", \"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vlut16or_W{1.data_type}V{2.data_type}V{3.data_type}R{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vlutvw{0.data_type}.oracc{0.widthd_suffix}\",\n-            \"ret\": \"s16d\",\n-            \"args\": [\"0\", \"s8\", \"s16\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmax_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmax{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmax_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmax{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"u(8-16)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmin_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmin{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmin_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmin{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"u(8-16)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vmpa_W{1.data_type}Rb{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpabus{0.widthd_suffix}\",\n-            \"ret\": \"s16d\",\n-            \"args\": [\"u8d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vmpaacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpabus.acc{0.widthd_suffix}\",\n-            \"ret\": \"s16d\",\n-            \"args\": [\"0\", \"u8d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vmpa_W{1.data_type}W{2.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpab{1.kind}{2.kind}v{0.widthd_suffix}\",\n-            \"ret\": \"s16d\",\n-            \"args\": [\"u8d\", \"i8d\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vmpa_W{1.data_type}Rb{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpahb{0.widthd_suffix}\",\n-            \"ret\": \"s32d\",\n-            \"args\": [\"s16d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vmpaacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpahb.acc{0.widthd_suffix}\",\n-            \"ret\": \"s32d\",\n-            \"args\": [\"0\", \"s16d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vmpy_V{1.data_type}V{2.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpy{1.data_type}us{0.widthd_suffix}\",\n-            \"ret\": \"s(16-32)d\",\n-            \"args\": [\"0n\", \"0nu\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vmpyacc_W{1.data_type}V{2.data_type}V{3.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpy{2.data_type}us.acc{0.widthd_suffix}\",\n-            \"ret\": \"s(16-32)d\",\n-            \"args\": [\"0\", \"0n\", \"0nu\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vmpy_V{1.data_type}V{2.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpybusv{0.widthd_suffix}\",\n-            \"ret\": \"s16d\",\n-            \"args\": [\"u8\", \"s8\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vmpyacc_W{1.data_type}V{2.data_type}V{3.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpybusv.acc{0.widthd_suffix}\",\n-            \"ret\": \"s16d\",\n-            \"args\": [\"0\", \"0nu\", \"0n\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vmpy_V{1.data_type}V{2.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpy{1.data_type}v{0.widthd_suffix}\",\n-            \"ret\": \"i(16-32)d\",\n-            \"args\": [\"0n\", \"0n\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vmpyacc_W{1.data_type}V{2.data_type}V{3.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpy{2.data_type}v.acc{0.widthd_suffix}\",\n-            \"ret\": \"i(16-32)d\",\n-            \"args\": [\"0\", \"0n\", \"0n\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpye_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyewuh{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"s32\", \"u16\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vmpy_V{1.data_type}R{1.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpy{1.data_type}{0.widthd_suffix}\",\n-            \"ret\": \"i32d\",\n-            \"args\": [\"0n\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vmpyacc_W{1.data_type}V{2.data_type}R{2.data_type}_sat{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpy{2.data_type}sat.acc{0.widthd_suffix}\",\n-            \"ret\": \"s32d\",\n-            \"args\": [\"0\", \"0n\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpy_V{1.data_type}R{1.data_type}_s1_rnd_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpy{1.data_type}srs{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0nd\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpy_V{1.data_type}R{1.data_type}_s1_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpy{1.data_type}ss{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0nd\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpy_V{1.data_type}V{2.data_type}_s1_rnd_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpy{1.data_type}vsrs{0.width_suffix}\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyieo_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyieo{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0nd\", \"0nd\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyieacc_V{1.data_type}V{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyie{2.data_type}{3.data_type}.acc{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"0\", \"i16\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyie_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyie{1.data_type}{2.data_type}{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"u16\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyi_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyi{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyiacc_V{1.data_type}V{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyi{1.data_type}.acc{0.width_suffix}\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyi_V{1.data_type}Rb{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyi{1.data_type}b{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyiacc_V{1.data_type}V{2.data_type}Rb{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyi{1.data_type}b.acc{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyi_V{1.data_type}Rh{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyi{1.data_type}h{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyiacc_V{1.data_type}V{2.data_type}Rh{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyi{1.data_type}h.acc{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyi_V{1.data_type}Rub{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyi{1.data_type}ub{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyiacc_V{1.data_type}V{2.data_type}Rub{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyi{1.data_type}ub.acc{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyo_V{1.data_type}V{2.data_type}_s1_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyo{1.data_type}{2.data_type}{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"0nd\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyo_V{1.data_type}V{2.data_type}_s1_rnd_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyo{1.data_type}{2.data_type}.rnd{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"0nd\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyo_V{1.data_type}V{2.data_type}_s1_rnd_sat_shift{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyo{1.data_type}{2.data_type}.rnd.sacc{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"0nd\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyo_V{1.data_type}V{2.data_type}_s1_sat_shift{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyo{1.data_type}{2.data_type}.sacc{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"0nd\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmpyio_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpyio{1.data_type}{2.data_type}{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"0nd\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vmpy_V{1.data_type}R{1.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpy{1.data_type}{0.widthd_suffix}\",\n-            \"ret\": \"u16d\",\n-            \"args\": [\"0n\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vmpyacc_W{1.data_type}V{2.data_type}R{2.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmpy{2.data_type}.acc{0.widthd_suffix}\",\n-            \"ret\": \"u(16-32)d\",\n-            \"args\": [\"0\", \"0n\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vmux_QVV{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vmux{0.width_suffix}\",\n-            \"ret\": \"u32\",\n-            \"args\": [\"0hhh\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vnavg_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vnavg{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"i(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vnavg_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vnavg{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"u8\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vnormamt_V{1.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vnormamt{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_vnot_VV{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vnot{0.width_suffix}\",\n-            \"ret\": \"u16\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_vor_VV{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vor{0.width_suffix}\",\n-            \"ret\": \"u16\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vpacke_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vpack{1.data_type}e{0.width_suffix}\",\n-            \"ret\": \"s(8-16)\",\n-            \"args\": [\"0hw\", \"0hw\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vpacko_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vpack{1.data_type}o{0.width_suffix}\",\n-            \"ret\": \"s(8-16)\",\n-            \"args\": [\"0hw\", \"0hw\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vpack_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vpack{1.data_type}{0.data_type}.sat{0.width_suffix}\",\n-            \"ret\": \"i(8-16)\",\n-            \"args\": [\"0hws\", \"0hws\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vpopcount_V{1.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vpopcount{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_vrdelta_VV{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vrdelta{0.width_suffix}\",\n-            \"ret\": \"u8\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vrmpy_V{1.data_type}Rb{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vrmpybus{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"u8\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vrmpyacc_V{1.data_type}V{2.data_type}Rb{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vrmpybus.acc{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"u8\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vrmpy_W{1.data_type}RbI{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vrmpybusi{0.widthd_suffix}\",\n-            \"ret\": \"s32d\",\n-            \"args\": [\"u8d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vrmpyacc_W{1.data_type}W{2.data_type}RbI{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vrmpybusi.acc{0.widthd_suffix}\",\n-            \"ret\": \"s32d\",\n-            \"args\": [\"0\", \"u8d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vrmpy_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vrmpybusv{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"u8\", \"s8\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vrmpyacc_V{1.data_type}V{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vrmpybusv.acc{0.width_suffix}\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"u8\", \"s8\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vrmpy_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vrmpy{1.data_type}v{0.width_suffix}\",\n-            \"ret\": \"i32\",\n-            \"args\": [\"0nndd\", \"0nndd\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vrmpyacc_V{1.data_type}V{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vrmpy{1.data_type}v.acc{0.width_suffix}\",\n-            \"ret\": \"i32\",\n-            \"args\": [\"0\", \"0nndd\", \"0nndd\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vrmpy_V{1.data_type}Rub{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vrmpyub{0.width_suffix}\",\n-            \"ret\": \"u32\",\n-            \"args\": [\"u8\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vrmpyacc_V{1.data_type}V{2.data_type}Rub{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vrmpyub.acc{0.width_suffix}\",\n-            \"ret\": \"u32\",\n-            \"args\": [\"0\", \"u8\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vrmpy_W{1.data_type}RubI{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vrmpyubi{0.widthd_suffix}\",\n-            \"ret\": \"u32d\",\n-            \"args\": [\"u8d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vrmpyacc_W{1.data_type}W{2.data_type}RubI{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vrmpyubi.acc{0.widthd_suffix}\",\n-            \"ret\": \"u32d\",\n-            \"args\": [\"0\", \"u8d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_vror_VR{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vror{0.width_suffix}\",\n-            \"ret\": \"u8\",\n-            \"args\": [\"0\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vround_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vround{1.data_type}{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"i(8-16)\",\n-            \"args\": [\"0hws\", \"0hws\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vrsad_W{1.data_type}RubI{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vrsadubi{0.widthd_suffix}\",\n-            \"ret\": \"u32d\",\n-            \"args\": [\"u8d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vrsadacc_W{1.data_type}W{2.data_type}RubI{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vrsadubi.acc{0.widthd_suffix}\",\n-            \"ret\": \"u32d\",\n-            \"args\": [\"0\", \"u8d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vsat_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vsat{1.data_type}{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"u8\",\n-            \"args\": [\"0hws\", \"0hws\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vsat_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vsat{1.data_type}{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0hw\", \"0hw\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vsxt_V{1.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vs{1.data_type}{0.widthd_suffix}\",\n-            \"ret\": \"s(16-32)d\",\n-            \"args\": [\"0n\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vzxt_V{1.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vz{1.data_type_plain}{0.widthd_suffix}\",\n-            \"ret\": \"u(16-32)d\",\n-            \"args\": [\"0n\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_condacc_QV{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vadd{0.data_type}q{0.width_suffix}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"u32hhh\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_condacc_QnV{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vadd{0.data_type}nq{0.width_suffix}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"u32hhh\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_condnac_QV{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vsub{0.data_type}q{0.width_suffix}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"u32hhh\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_condnac_QnV{2.data_type}V{3.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vsub{0.data_type}nq{0.width_suffix}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"u32hhh\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vshuffe_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vshufe{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vshuffo_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vshufo{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vshuff_V{1.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vshuff{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"s(8-16)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vshuffe_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vshuffe{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"s8\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vshuffo_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vshuffo{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"s8\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vshuffoe_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vshuffoe{1.data_type}{0.width_suffix}\",\n-            \"ret\": \"s(8-16)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"W_vshuff_VVR{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vshufvvd{0.widthd_suffix}\",\n-            \"ret\": \"u8d\",\n-            \"args\": [\"0h\", \"0h\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vsub_V{1.data_type}V{2.data_type}{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vsub{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vsub_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vsub{0.data_type}sat{0.width_suffix}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"V{0.data_type}_vsub_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vsub{0.data_type}sat{0.width_suffix}\",\n-            \"ret\": \"u(8-16)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vsub_W{1.data_type}W{2.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vsub{0.data_type}.dv{0.widthd_suffix}\",\n-            \"ret\": \"s(8-32)d\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vsub_W{1.data_type}W{2.data_type}_sat{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vsub{0.data_type}sat.dv{0.widthd_suffix}\",\n-            \"ret\": \"s(16-32)d\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vsub_W{1.data_type}W{2.data_type}_sat{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vsub{0.data_type}sat.dv{0.widthd_suffix}\",\n-            \"ret\": \"u(8-16)d\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"W_vswap_QVV{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vswap{0.widthd_suffix}\",\n-            \"ret\": \"u8d\",\n-            \"args\": [\"u32hhh\", \"0h\", \"0h\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vtmpy_W{1.data_type}Rb{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vtmpyb{0.widthd_suffix}\",\n-            \"ret\": \"s16d\",\n-            \"args\": [\"0nd\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vtmpyacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vtmpyb.acc{0.widthd_suffix}\",\n-            \"ret\": \"s16d\",\n-            \"args\": [\"0\", \"0nd\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vtmpy_W{1.data_type}Rb{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vtmpybus{0.widthd_suffix}\",\n-            \"ret\": \"s16d\",\n-            \"args\": [\"u8d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vtmpyacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vtmpybus.acc{0.widthd_suffix}\",\n-            \"ret\": \"s16d\",\n-            \"args\": [\"0\", \"u8d\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vtmpy_W{1.data_type}Rb{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vtmpyhb{0.widthd_suffix}\",\n-            \"ret\": \"s32d\",\n-            \"args\": [\"0nd\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vunpack_V{1.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vunpack{1.data_type}{0.widthd_suffix}\",\n-            \"ret\": \"i(16-32)d\",\n-            \"args\": [\"0n\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vunpackoor_W{1.data_type}V{2.data_type}{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vunpacko{2.data_type}{0.widthd_suffix}\",\n-            \"ret\": \"s(16-32)d\",\n-            \"args\": [\"0\", \"0n\"]\n-        },\n-        {\n-            \"intrinsic\": \"W{0.data_type}_vtmpyacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vtmpyhb.acc{0.widthd_suffix}\",\n-            \"ret\": \"s32d\",\n-            \"args\": [\"0\", \"0nd\", \"U32\"]\n-        },\n-        {\n-            \"intrinsic\": \"V_vxor_VV{0.width_b}\",\n-            \"width\": [512, 1024],\n-            \"llvm\": \"vxor{0.width_suffix}\",\n-            \"ret\": \"u16\",\n-            \"args\": [\"0\", \"0\"]\n-        }\n-    ]\n-}"}, {"sha": "1beaaeb5d8718161e5ceba4a42d9d3fe3b903c07", "filename": "src/etc/platform-intrinsics/nvptx/cuda.json", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Fcuda.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Fcuda.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Fcuda.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,13 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_\",\n-    \"llvm_prefix\": \"llvm.cuda.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"syncthreads\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"syncthreads\",\n-            \"ret\": \"V\",\n-            \"args\": []\n-        }\n-    ]\n-}"}, {"sha": "80332c54e04141dff0866ad6a104fd6225214418", "filename": "src/etc/platform-intrinsics/nvptx/info.json", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Finfo.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Finfo.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Finfo.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,7 +0,0 @@\n-{\n-  \"platform\": \"nvptx\",\n-  \"number_info\": {\n-    \"signed\": {}\n-  },\n-  \"width_info\": {}\n-}"}, {"sha": "33d97f2694699d0069d54266135347efe88acaf4", "filename": "src/etc/platform-intrinsics/nvptx/sreg.json", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Fsreg.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Fsreg.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Fsreg.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,90 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_\",\n-    \"llvm_prefix\": \"llvm.nvvm.read.ptx.sreg.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"block_dim_x\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"ntid.x\",\n-            \"ret\": \"S32\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"block_dim_y\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"ntid.y\",\n-            \"ret\": \"S32\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"block_dim_z\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"ntid.z\",\n-            \"ret\": \"S32\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"block_idx_x\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"ctaid.x\",\n-            \"ret\": \"S32\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"block_idx_y\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"ctaid.y\",\n-            \"ret\": \"S32\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"block_idx_z\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"ctaid.z\",\n-            \"ret\": \"S32\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"grid_dim_x\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"nctaid.x\",\n-            \"ret\": \"S32\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"grid_dim_y\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"nctaid.y\",\n-            \"ret\": \"S32\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"grid_dim_z\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"nctaid.z\",\n-            \"ret\": \"S32\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"thread_idx_x\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"tid.x\",\n-            \"ret\": \"S32\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"thread_idx_y\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"tid.y\",\n-            \"ret\": \"S32\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"thread_idx_z\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"tid.z\",\n-            \"ret\": \"S32\",\n-            \"args\": []\n-        }\n-    ]\n-}"}, {"sha": "acb6813887c5cba389efe5b0dae0ab8dbe804396", "filename": "src/etc/platform-intrinsics/powerpc.json", "status": "removed", "additions": 0, "deletions": 294, "changes": 294, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fpowerpc.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fpowerpc.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fpowerpc.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,294 +0,0 @@\n-{\n-    \"platform\": \"powerpc\",\n-    \"intrinsic_prefix\": \"_vec_\",\n-    \"llvm_prefix\": \"llvm.ppc.altivec.\",\n-    \"number_info\": {\n-        \"unsigned\": {\n-            \"kind\" : \"u\",\n-            \"data_type_short\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\", \"64\": \"d\" }\n-        },\n-        \"signed\": {\n-            \"kind\" : \"s\",\n-            \"data_type_short\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\", \"64\": \"d\" }\n-        },\n-        \"float\": {}\n-    },\n-    \"width_info\": {\n-        \"128\": { \"width\": \"\" }\n-    },\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"perm\",\n-            \"width\": [128],\n-            \"llvm\": \"vperm\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"0\", \"s8\"]\n-        },\n-        {\n-            \"intrinsic\": \"mradds\",\n-            \"width\": [128],\n-            \"llvm\": \"vmhraddshs\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"cmpb\",\n-            \"width\": [128],\n-            \"llvm\": \"vcmpbfp\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"f32\", \"f32\"]\n-        },\n-        {\n-            \"intrinsic\": \"cmpeq{0.data_type_short}\",\n-            \"width\": [128],\n-            \"llvm\": \"vcmpequ{0.data_type_short}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"cmpgt{1.kind}{1.data_type_short}\",\n-            \"width\": [128],\n-            \"llvm\": \"vcmpgt{1.kind}{1.data_type_short}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0u\", \"1\"]\n-        },\n-        {\n-            \"intrinsic\": \"cmpgt{1.kind}{1.data_type_short}\",\n-            \"width\": [128],\n-            \"llvm\": \"vcmpgt{1.kind}{1.data_type_short}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0\", \"1\"]\n-        },\n-        {\n-            \"intrinsic\": \"max{0.kind}{0.data_type_short}\",\n-            \"width\": [128],\n-            \"llvm\": \"vmax{0.kind}{0.data_type_short}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"min{0.kind}{0.data_type_short}\",\n-            \"width\": [128],\n-            \"llvm\": \"vmin{0.kind}{0.data_type_short}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"sub{0.kind}{0.data_type_short}s\",\n-            \"width\": [128],\n-            \"llvm\": \"vsub{0.kind}{0.data_type_short}s\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"subc\",\n-            \"width\": [128],\n-            \"llvm\": \"vsubcuw\",\n-            \"ret\": \"u32\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"add{0.kind}{0.data_type_short}s\",\n-            \"width\": [128],\n-            \"llvm\": \"vadd{0.kind}{0.data_type_short}s\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"addc\",\n-            \"width\": [128],\n-            \"llvm\": \"vaddcuw\",\n-            \"ret\": \"u32\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"mule{1.kind}{1.data_type_short}\",\n-            \"width\": [128],\n-            \"llvm\": \"vmule{0.kind}{1.data_type_short}\",\n-            \"ret\": \"i(16-32)\",\n-            \"args\": [\"0N\", \"1\"]\n-        },\n-        {\n-            \"intrinsic\": \"mulo{1.kind}{1.data_type_short}\",\n-            \"width\": [128],\n-            \"llvm\": \"vmulo{0.kind}{1.data_type_short}\",\n-            \"ret\": \"i(16-32)\",\n-            \"args\": [\"0N\", \"1\"]\n-        },\n-        {\n-            \"intrinsic\": \"avg{0.kind}{0.data_type_short}\",\n-            \"width\": [128],\n-            \"llvm\": \"vavg{0.kind}{0.data_type_short}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"packs{0.kind}{1.data_type_short}\",\n-            \"width\": [128],\n-            \"llvm\": \"vpk{0.kind}{1.data_type_short}{0.kind}s\",\n-            \"ret\": \"i(8-16)\",\n-            \"args\": [\"0W\", \"1\"]\n-        },\n-        {\n-            \"intrinsic\": \"packsu{1.kind}{1.data_type_short}\",\n-            \"width\": [128],\n-            \"llvm\": \"vpk{1.kind}{1.data_type_short}{0.kind}s\",\n-            \"ret\": \"u(8-16)\",\n-            \"args\": [\"0Ws\", \"1\"]\n-        },\n-        {\n-            \"intrinsic\": \"packpx\",\n-            \"width\": [128],\n-            \"llvm\": \"vpkpx\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"s32\", \"s32\"]\n-        },\n-        {\n-            \"intrinsic\": \"unpackl{1.kind}{1.data_type_short}\",\n-            \"width\": [128],\n-            \"llvm\": \"vupkl{1.kind}{1.data_type_short}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0N\"]\n-        },\n-        {\n-            \"intrinsic\": \"unpackh{1.kind}{1.data_type_short}\",\n-            \"width\": [128],\n-            \"llvm\": \"vupkh{1.kind}{1.data_type_short}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0N\"]\n-        },\n-        {\n-            \"intrinsic\": \"madds\",\n-            \"width\": [128],\n-            \"llvm\": \"vmhaddshs\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"msumu{1.data_type_short}m\",\n-            \"width\": [128],\n-            \"llvm\": \"vmsumu{1.data_type_short}m\",\n-            \"ret\": \"u32\",\n-            \"args\": [\"u(8-16)\", \"1\", \"u32\"]\n-        },\n-        {\n-            \"intrinsic\": \"msummbm\",\n-            \"width\": [128],\n-            \"llvm\": \"vmsummbm\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"s8\", \"u8\", \"s32\"]\n-        },\n-        {\n-            \"intrinsic\": \"msumshm\",\n-            \"width\": [128],\n-            \"llvm\": \"vmsumshm\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"s16\", \"s16\", \"s32\"]\n-        },\n-        {\n-            \"intrinsic\": \"msum{0.kind}hs\",\n-            \"width\": [128],\n-            \"llvm\": \"vmsum{0.kind}hs\",\n-            \"ret\": \"i32\",\n-            \"args\": [\"0N\", \"0N\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"sum2s\",\n-            \"width\": [128],\n-            \"llvm\": \"vsum2sws\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"sum4{0.kind}bs\",\n-            \"width\": [128],\n-            \"llvm\": \"vsum4{0.kind}bs\",\n-            \"ret\": \"i32\",\n-            \"args\": [\"0NN\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"sum4shs\",\n-            \"width\": [128],\n-            \"llvm\": \"vsum4shs\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0N\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"sums\",\n-            \"width\": [128],\n-            \"llvm\": \"vsumsws\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"madd\",\n-            \"width\": [128],\n-            \"llvm\": \"vmaddfp\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"nmsub\",\n-            \"width\": [128],\n-            \"llvm\": \"vnmsubfp\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"expte\",\n-            \"width\": [128],\n-            \"llvm\": \"vexptefp\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"floor\",\n-            \"width\": [128],\n-            \"llvm\": \"vrfim\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"ceil\",\n-            \"width\": [128],\n-            \"llvm\": \"vrfip\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"round\",\n-            \"width\": [128],\n-            \"llvm\": \"vrfin\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"trunc\",\n-            \"width\": [128],\n-            \"llvm\": \"vrfiz\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"loge\",\n-            \"width\": [128],\n-            \"llvm\": \"vlogefp\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"re\",\n-            \"width\": [128],\n-            \"llvm\": \"vrefp\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"rsqrte\",\n-            \"width\": [128],\n-            \"llvm\": \"vrsqrtefp\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\"]\n-        }\n-    ]\n-}"}, {"sha": "1f41e2ecf3e6d29ba0eb6d4d7d52c981faf40d94", "filename": "src/etc/platform-intrinsics/x86/avx.json", "status": "removed", "additions": 0, "deletions": 272, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,272 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_mm\",\n-    \"llvm_prefix\": \"llvm.x86.avx.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"256_addsub_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"addsub.{0.data_type}.256\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_blendv_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"blendv.{0.data_type}.256\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_broadcast_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"vbroadcastf128.{0.data_type}.256\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"s8SPc\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_cmp_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"cmp.{1.data_type}.256\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\", \"s8S\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_cvtepi32_pd\",\n-            \"width\": [256],\n-            \"llvm\": \"cvtdq2.pd.256\",\n-            \"ret\": \"f64\",\n-            \"args\": [\"s32h\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_cvtepi32_ps\",\n-            \"width\": [256],\n-            \"llvm\": \"cvtdq2.ps.256\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"s32\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_cvtpd_epi32\",\n-            \"width\": [256],\n-            \"llvm\": \"cvt.pd2dq.256\",\n-            \"ret\": \"s32h\",\n-            \"args\": [\"f64\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_cvtpd_ps\",\n-            \"width\": [256],\n-            \"llvm\": \"cvt.pd2.ps.256\",\n-            \"ret\": \"f32h\",\n-            \"args\": [\"f64\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_cvtps_epi32\",\n-            \"width\": [256],\n-            \"llvm\": \"cvt.ps2dq.256\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"f32\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_cvtps_pd\",\n-            \"width\": [256],\n-            \"llvm\": \"cvt.ps2.pd.256\",\n-            \"ret\": \"f64\",\n-            \"args\": [\"f32h\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_cvttpd_epi32\",\n-            \"width\": [256],\n-            \"llvm\": \"cvtt.pd2dq.256\",\n-            \"ret\": \"s32h\",\n-            \"args\": [\"f64\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_cvttps_epi32\",\n-            \"width\": [256],\n-            \"llvm\": \"cvtt.ps2dq.256\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"f32\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_dp_ps\",\n-            \"width\": [256],\n-            \"llvm\": \"dp.ps.256\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\", \"0\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_hadd_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"hadd.{0.data_type}.256\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_hsub_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"hsub.{0.data_type}.256\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_max_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"max.{0.data_type}.256\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"{0.width_mm}_maskload_{0.data_type}\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"maskload.{0.data_type_short}{0.width_suffix}\",\n-            \"ret\": [\"f(32-64)\"],\n-            \"args\": [\"0SPc/S8\", \"0s->0\"]\n-        },\n-        {\n-            \"intrinsic\": \"{3.width_mm}_maskstore_{3.data_type}\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"maskstore.{3.data_type_short}{3.width_suffix}\",\n-            \"ret\": \"V\",\n-            \"args\": [\"F(32-64)Pm/S8\", \"1Dsv->1Dv\", \"1Dv\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_min_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"min.{0.data_type}.256\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_movemask_ps\",\n-            \"width\": [256],\n-            \"llvm\": \"movmsk.ps.256\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"f32\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_movemask_pd\",\n-            \"width\": [256],\n-            \"llvm\": \"movmsk.pd.256\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"f64\"]\n-        },\n-        {\n-            \"intrinsic\": \"{0.width_mm}_permutevar_{0.data_type}\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"vpermilvar.{0.data_type}{0.width_suffix}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0s\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_rcp_ps\",\n-            \"width\": [256],\n-            \"llvm\": \"rcp.ps.256\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"f32\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_rsqrt_ps\",\n-            \"width\": [256],\n-            \"llvm\": \"rsqrt.ps.256\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"f32\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_storeu_{2.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"storeu.ps.256\",\n-            \"ret\": \"V\",\n-            \"args\": [\"f(32-64)Pm/U8\", \"1D\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_storeu_si256\",\n-            \"width\": [256],\n-            \"llvm\": \"storeu.dq.256\",\n-            \"ret\": \"V\",\n-            \"args\": [\"u8Pm/U8\", \"1D\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_sqrt_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"!llvm.sqrt.{0.llvm_name}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"{1.width_mm}_testc_ps\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"vtestc.ps{1.width_suffix}\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"f32\", \"f32\"]\n-        },\n-        {\n-            \"intrinsic\": \"{1.width_mm}_testc_pd\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"vtestc.pd{1.width_suffix}\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"f64\", \"f64\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_testc_si256\",\n-            \"width\": [256],\n-            \"llvm\": \"ptestc.256\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"u64\", \"u64\"]\n-        },\n-        {\n-            \"intrinsic\": \"{1.width_mm}_testnzc_ps\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"vtestnzc.ps{1.width_suffix}\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"f32\", \"f32\"]\n-        },\n-        {\n-            \"intrinsic\": \"{1.width_mm}_testnzc_pd\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"vtestnzc.pd{1.width_suffix}\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"f64\", \"f64\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_testnzc_si256\",\n-            \"width\": [256],\n-            \"llvm\": \"ptestnzc.256\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"u64\", \"u64\"]\n-        },\n-        {\n-            \"intrinsic\": \"{1.width_mm}_testz_ps\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"vtestz.ps{1.width_suffix}\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"f32\", \"f32\"]\n-        },\n-        {\n-            \"intrinsic\": \"{1.width_mm}_testz_pd\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"vtestz.pd{1.width_suffix}\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"f64\", \"f64\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_testz_si256\",\n-            \"width\": [256],\n-            \"llvm\": \"ptestz.256\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"u64\", \"u64\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_zeroall\",\n-            \"width\": [256],\n-            \"llvm\": \"vzeroall\",\n-            \"ret\": \"V\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"256_zeroupper\",\n-            \"width\": [256],\n-            \"llvm\": \"vzeroupper\",\n-            \"ret\": \"V\",\n-            \"args\": []\n-        }\n-    ]\n-}"}, {"sha": "dc055b583c568d01c1cb456f783e69ffd8d1ebbd", "filename": "src/etc/platform-intrinsics/x86/avx2.json", "status": "removed", "additions": 0, "deletions": 202, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx2.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx2.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx2.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,202 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_mm\",\n-    \"llvm_prefix\": \"llvm.x86.avx2.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"256_abs_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"pabs.{0.data_type_short}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_adds_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"padd{0.kind_short}s.{0.data_type_short}\",\n-            \"ret\": \"i(8-16)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_avg_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"pavg.{0.data_type_short}\",\n-            \"ret\": \"u(8-16)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_hadd_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"phadd.{0.data_type_short}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_hadds_epi16\",\n-            \"width\": [256],\n-            \"llvm\": \"phadd.sw\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_hsub_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"phsub.{0.data_type_short}\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_hsubs_epi16\",\n-            \"width\": [256],\n-            \"llvm\": \"phsub.sw\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_madd_epi16\",\n-            \"width\": [256],\n-            \"llvm\": \"pmadd.wd\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"s16\", \"s16\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_maddubs_epi16\",\n-            \"width\": [256],\n-            \"llvm\": \"pmadd.ub.sw\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"s8\", \"s8\"]\n-        },\n-        {\n-            \"intrinsic\": \"{0.width_mm}_mask_i32gather_{0.data_type}\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"gather.d.{0.data_type_short}{0.width_suffix}\",\n-            \"ret\": [\"s32\", \"f32\"],\n-            \"args\": [\"0\", \"0SPc/S8\", \"s32\", \"0s->0\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"{0.width_mm}_mask_i32gather_{0.data_type}\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"gather.d.{0.data_type_short}{0.width_suffix}\",\n-            \"ret\": [\"s64\", \"f64\"],\n-            \"args\": [\"0\", \"0SPc/S8\", \"s32x128\", \"0s->0\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"{3.width_mm}_mask_i64gather_{0.data_type}\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"gather.q.{0.data_type_short}{0.width_suffix}\",\n-            \"ret\": [\"s32x128\", \"f32x128\"],\n-            \"args\": [\"0\", \"0SPc/S8\", \"s64\", \"0s->0\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"{0.width_mm}_mask_i64gather_{0.data_type}\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"gather.q.{0.data_type_short}{0.width_suffix}\",\n-            \"ret\": [\"s64\", \"f64\"],\n-            \"args\": [\"0\", \"0SPc/S8\", \"s64\", \"0s->0\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"{0.width_mm}_maskload_{0.data_type}\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"maskload.{0.data_type_short}{0.width_suffix}\",\n-            \"ret\": [\"s(32-64)\"],\n-            \"args\": [\"0Pc/S8\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"{2.width_mm}_maskstore_{2.data_type}\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"maskstore.{2.data_type_short}{2.width_suffix}\",\n-            \"ret\": \"V\",\n-            \"args\": [\"S(32-64)Pm/S8\", \"1Dv\", \"2\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_max_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"pmax{0.kind}.{0.data_type_short}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_min_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"pmin{0.kind}.{0.data_type_short}\",\n-            \"ret\": \"i(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_movemask_epi8\",\n-            \"width\": [256],\n-            \"llvm\": \"pmovmskb\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"s8\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_mpsadbw_epu8\",\n-            \"width\": [256],\n-            \"llvm\": \"mpsadbw\",\n-            \"ret\": \"u16\",\n-            \"args\": [\"u8\", \"u8\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_mul_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"pmul{0.data_type_short}.dq\",\n-            \"ret\": \"i64\",\n-            \"args\": [\"0dn\", \"0dn\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_mulhi_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"pmulh{0.data_type_short}.w\",\n-            \"ret\": \"i16\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_mulhrs_epi16\",\n-            \"width\": [256],\n-            \"llvm\": \"pmul.hr.sw\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_pack{0.kind_short}s_{1.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"pack{0.kind}s{1.data_type_short}{0.data_type_short}\",\n-            \"ret\": \"i(8-16)\",\n-            \"args\": [\"0hws\", \"0hws\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_permutevar8x32_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"perm{0.data_type_short}\",\n-            \"ret\": [\"s32\", \"f32\"],\n-            \"args\": [\"0\", \"0s\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_sad_epu8\",\n-            \"width\": [256],\n-            \"llvm\": \"psad.bw\",\n-            \"ret\": \"u64\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_shuffle_epi8\",\n-            \"width\": [256],\n-            \"llvm\": \"pshuf.b\",\n-            \"ret\": \"s8\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_sign_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"psign.{0.data_type_short}\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"256_subs_{0.data_type}\",\n-            \"width\": [256],\n-            \"llvm\": \"psub{0.kind_short}s.{0.data_type_short}\",\n-            \"ret\": \"i(8-16)\",\n-            \"args\": [\"0\", \"0\"]\n-        }\n-    ]\n-}"}, {"sha": "24e2cbcf8aad10702b1a42651bdb2bb2513c6834", "filename": "src/etc/platform-intrinsics/x86/bmi.json", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fbmi.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fbmi.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fbmi.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,13 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_bmi\",\n-    \"llvm_prefix\": \"llvm.x86.bmi.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"_bextr_{0.bitwidth}\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"bextr.{0.bitwidth}\",\n-            \"ret\": \"S(32-64)u\",\n-            \"args\": [\"0\", \"0\"]\n-        }\n-    ]\n-}"}, {"sha": "f5a0db5ef51da359b14ef74211602639722f17a7", "filename": "src/etc/platform-intrinsics/x86/bmi2.json", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fbmi2.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fbmi2.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fbmi2.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,27 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_bmi2\",\n-    \"llvm_prefix\": \"llvm.x86.bmi.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"_bzhi_{0.bitwidth}\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"bzhi.{0.bitwidth}\",\n-            \"ret\": \"S(32-64)u\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_pdep_{0.bitwidth}\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"pdep.{0.bitwidth}\",\n-            \"ret\": \"S(32-64)u\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_pext_{0.bitwidth}\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"pext.{0.bitwidth}\",\n-            \"ret\": \"S(32-64)u\",\n-            \"args\": [\"0\", \"0\"]\n-        }\n-    ]\n-}"}, {"sha": "dcc26cd501c9bdbfaab71869e60baceba59f7663", "filename": "src/etc/platform-intrinsics/x86/fma.json", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Ffma.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Ffma.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Ffma.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,48 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_mm\",\n-    \"llvm_prefix\": \"llvm.x86.fma.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"{0.width_mm}_fmadd_{0.data_type}\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"vfmadd.{0.data_type_short}{0.width_suffix}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"{0.width_mm}_fmaddsub_{0.data_type}\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"vfmaddsub.{0.data_type_short}{0.width_suffix}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"{0.width_mm}_fmsub_{0.data_type}\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"vfmsub.{0.data_type_short}{0.width_suffix}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"{0.width_mm}_fmsubadd_{0.data_type}\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"vfmsubadd.{0.data_type_short}{0.width_suffix}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"{0.width_mm}_fnmadd_{0.data_type}\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"vfnmadd.{0.data_type_short}{0.width_suffix}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"{0.width_mm}_fnmsub_{0.data_type}\",\n-            \"width\": [128, 256],\n-            \"llvm\": \"vfnmsub.{0.data_type_short}{0.width_suffix}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\", \"0\"]\n-        }\n-    ]\n-}"}, {"sha": "8e90b8579c49ef996a33307d4903f6e95a4862f5", "filename": "src/etc/platform-intrinsics/x86/info.json", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Finfo.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Finfo.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Finfo.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,32 +0,0 @@\n-{\n-    \"platform\": \"x86\",\n-    \"number_info\": {\n-        \"signed\": {\n-            \"kind\": \"s\",\n-            \"kind_short\": \"\",\n-            \"data_type\": { \"pattern\": \"epi{bitwidth}\" },\n-            \"bitwidth\": { \"pattern\": \"{bitwidth}\" },\n-            \"data_type_short\": { \"8\": \"b\", \"16\": \"w\", \"32\": \"d\", \"64\": \"q\" }\n-        },\n-        \"unsigned\": {\n-            \"kind\": \"u\",\n-            \"kind_short\": \"u\",\n-            \"data_type\": { \"pattern\": \"epu{bitwidth}\" },\n-            \"bitwidth\": { \"pattern\": \"{bitwidth}\" },\n-            \"data_type_short\": { \"8\": \"b\", \"16\": \"w\", \"32\": \"d\", \"64\": \"q\" }\n-        },\n-        \"float\": {\n-            \"kind\": \"f\",\n-            \"data_type\": { \"32\": \"ps\", \"64\": \"pd\" },\n-            \"bitwidth\": { \"pattern\": \"{bitwidth}\" },\n-            \"data_type_short\": { \"32\": \"ps\", \"64\": \"pd\" }\n-        }\n-    },\n-    \"width_info\": {\n-        \"32\":  { \"width_mm\": \"32\", \"width_suffix\": \"\" },\n-        \"64\":  { \"width_mm\": \"64\", \"width_suffix\": \"\" },\n-        \"128\": { \"width_mm\": \"\", \"width_suffix\": \"\" },\n-        \"256\": { \"width_mm\": \"256\", \"width_suffix\": \".256\" },\n-        \"512\": { \"width_mm\": \"512\", \"width_suffix\": \".512\" }\n-    }\n-}"}, {"sha": "fa2feb4224b9f704de3548e1910f79dfdc4b5a78", "filename": "src/etc/platform-intrinsics/x86/rdrand.json", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Frdrand.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Frdrand.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Frdrand.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,27 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_rdrand\",\n-    \"llvm_prefix\": \"llvm.x86.rdrand.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"16_step\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"16\",\n-            \"ret\": \"(U16,S32)\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"32_step\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"32\",\n-            \"ret\": \"(U32,S32)\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"64_step\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"64\",\n-            \"ret\": \"(U64,S32)\",\n-            \"args\": []\n-        }\n-    ]\n-}"}, {"sha": "7be64b583e0ac15b11287b5ff638e0d957aaa17c", "filename": "src/etc/platform-intrinsics/x86/rdseed.json", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Frdseed.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Frdseed.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Frdseed.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,27 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_rdseed\",\n-    \"llvm_prefix\": \"llvm.x86.rdseed.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"16_step\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"16\",\n-            \"ret\": \"(U16,S32)\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"32_step\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"32\",\n-            \"ret\": \"(U32,S32)\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"64_step\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"64\",\n-            \"ret\": \"(U64,S32)\",\n-            \"args\": []\n-        }\n-    ]\n-}"}, {"sha": "d8eef8a3514aec7267107d6526dcdc214d596ad2", "filename": "src/etc/platform-intrinsics/x86/sse.json", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,55 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_mm\",\n-    \"llvm_prefix\": \"llvm.x86.sse.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"_movemask_ps\",\n-            \"width\": [128],\n-            \"llvm\": \"movmsk.ps\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"f32\"]\n-        },\n-        {\n-            \"intrinsic\": \"_max_ps\",\n-            \"width\": [128],\n-            \"llvm\": \"max.ps\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_min_ps\",\n-            \"width\": [128],\n-            \"llvm\": \"min.ps\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_rsqrt_ps\",\n-            \"width\": [128],\n-            \"llvm\": \"rsqrt.ps\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_rcp_ps\",\n-            \"width\": [128],\n-            \"llvm\": \"rcp.ps\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_sqrt_ps\",\n-            \"width\": [128],\n-            \"llvm\": \"!llvm.sqrt.v4f32\",\n-            \"ret\": \"f32\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_storeu_ps\",\n-            \"width\": [128],\n-            \"llvm\": \"storeu.ps\",\n-            \"ret\": \"V\",\n-            \"args\": [\"F32Pm/S8\", \"f32\"]\n-        }\n-    ]\n-}"}, {"sha": "4d6317d80a57e306ce117902e31570b33c21bb83", "filename": "src/etc/platform-intrinsics/x86/sse2.json", "status": "removed", "additions": 0, "deletions": 160, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,160 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_mm\",\n-    \"llvm_prefix\": \"llvm.x86.sse2.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"_adds_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"padd{0.kind_short}s.{0.data_type_short}\",\n-            \"ret\": \"i(8-16)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_avg_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"pavg.{0.data_type_short}\",\n-            \"ret\": \"u(8-16)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_lfence\",\n-            \"width\": [128],\n-            \"llvm\": \"lfence\",\n-            \"ret\": \"V\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"_madd_epi16\",\n-            \"width\": [128],\n-            \"llvm\": \"pmadd.wd\",\n-            \"ret\": \"s32\",\n-            \"args\": [\"s16\", \"s16\"]\n-        },\n-        {\n-            \"intrinsic\": \"_maskmoveu_si128\",\n-            \"width\": [128],\n-            \"llvm\": \"maskmov.dqu\",\n-            \"ret\": \"V\",\n-            \"args\": [\"u8\", \"u8\", \"U8Pm\"]\n-        },\n-        {\n-            \"intrinsic\": \"_max_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"pmax{0.kind}.{0.data_type_short}\",\n-            \"ret\": [\"s16\", \"u8\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_max_pd\",\n-            \"width\": [128],\n-            \"llvm\": \"max.pd\",\n-            \"ret\": \"f64\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_mfence\",\n-            \"width\": [128],\n-            \"llvm\": \"fence\",\n-            \"ret\": \"V\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"_min_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"pmin{0.kind}.{0.data_type_short}\",\n-            \"ret\": [\"s16\", \"u8\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_min_pd\",\n-            \"width\": [128],\n-            \"llvm\": \"min.pd\",\n-            \"ret\": \"f64\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_movemask_pd\",\n-            \"width\": [128],\n-            \"llvm\": \"movmsk.pd\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"f64\"]\n-        },\n-        {\n-            \"intrinsic\": \"_movemask_epi8\",\n-            \"width\": [128],\n-            \"llvm\": \"pmovmskb.128\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"s8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_mul_epu32\",\n-            \"width\": [128],\n-            \"llvm\": \"pmulu.dq\",\n-            \"ret\": \"u64\",\n-            \"args\": [\"0dn\", \"0dn\"]\n-        },\n-        {\n-            \"intrinsic\": \"_mulhi_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"pmulh{0.kind_short}.w\",\n-            \"ret\": \"i16\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_packs_{1.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"packss{1.data_type_short}{0.data_type_short}.128\",\n-            \"ret\": \"s(8-16)\",\n-            \"args\": [\"0hw\", \"0hw\"]\n-        },\n-        {\n-            \"intrinsic\": \"_packus_epi16\",\n-            \"width\": [128],\n-            \"llvm\": \"packuswb.128\",\n-            \"ret\": \"u8\",\n-            \"args\": [\"s16\", \"s16\"]\n-        },\n-        {\n-            \"intrinsic\": \"_sad_epu8\",\n-            \"width\": [128],\n-            \"llvm\": \"psad.bw\",\n-            \"ret\": \"u64\",\n-            \"args\": [\"u8\", \"u8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_sfence\",\n-            \"width\": [128],\n-            \"llvm\": \"sfence\",\n-            \"ret\": \"V\",\n-            \"args\": []\n-        },\n-        {\n-            \"intrinsic\": \"_sqrt_pd\",\n-            \"width\": [128],\n-            \"llvm\": \"!llvm.sqrt.v2f64\",\n-            \"ret\": \"f64\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_storeu_pd\",\n-            \"width\": [128],\n-            \"llvm\": \"storeu.pd\",\n-            \"ret\": \"V\",\n-            \"args\": [\"F64Pm/U8\", \"f64\"]\n-        },\n-        {\n-            \"intrinsic\": \"_storeu_si128\",\n-            \"width\": [128],\n-            \"llvm\": \"storeu.dq\",\n-            \"ret\": \"V\",\n-            \"args\": [\"u8Pm/U8\", \"u8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_subs_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"psub{0.kind_short}s.{0.data_type_short}\",\n-            \"ret\": \"i(8-16)\",\n-            \"args\": [\"0\", \"0\"]\n-        }\n-    ]\n-}"}, {"sha": "119bf208f7e3437d48e8e143f982891da8c176e7", "filename": "src/etc/platform-intrinsics/x86/sse3.json", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse3.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse3.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse3.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,34 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_mm\",\n-    \"llvm_prefix\": \"llvm.x86.sse3.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"_addsub_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"addsub.{0.data_type}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_hadd_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"hadd.{0.data_type}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_hsub_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"hsub.{0.data_type}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_lddqu_si128\",\n-            \"width\": [128],\n-            \"llvm\": \"ldu.dq\",\n-            \"ret\": \"u8\",\n-            \"args\": [\"0Pc/S8\"]\n-        }\n-    ]\n-}"}, {"sha": "b499637e0d3c6f5046a5a3107c5da7cfaf2afacf", "filename": "src/etc/platform-intrinsics/x86/sse41.json", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse41.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse41.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse41.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,76 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_mm\",\n-    \"llvm_prefix\": \"llvm.x86.sse41.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"_dp_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"dp{0.data_type}\",\n-            \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_max_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"pmax{0.kind}{0.data_type_short}\",\n-            \"ret\": [\"s8\", \"u16\", \"i32\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_min_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"pmin{0.kind}{0.data_type_short}\",\n-            \"ret\": [\"s8\", \"u16\", \"i32\"],\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_minpos_epu16\",\n-            \"width\": [128],\n-            \"llvm\": \"phminposuw\",\n-            \"ret\": \"u16\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_mpsadbw_epu8\",\n-            \"width\": [128],\n-            \"llvm\": \"mpsadbw\",\n-            \"ret\": \"u16\",\n-            \"args\": [\"u8\", \"u8\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_mul_epi32\",\n-            \"width\": [128],\n-            \"llvm\": \"pmuldq\",\n-            \"ret\": \"s64\",\n-            \"args\": [\"s32\", \"s32\"]\n-        },\n-        {\n-            \"intrinsic\": \"_packus_epi32\",\n-            \"width\": [128],\n-            \"llvm\": \"packusdw\",\n-            \"ret\": \"u16\",\n-            \"args\": [\"s32\", \"s32\"]\n-        },\n-        {\n-            \"intrinsic\": \"_testc_si128\",\n-            \"width\": [128],\n-            \"llvm\": \"ptestc\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"u64\", \"u64\"]\n-        },\n-        {\n-            \"intrinsic\": \"_testnzc_si128\",\n-            \"width\": [128],\n-            \"llvm\": \"ptestnzc\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"u64\", \"u64\"]\n-        },\n-        {\n-            \"intrinsic\": \"_testz_si128\",\n-            \"width\": [128],\n-            \"llvm\": \"ptestz\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"u64\", \"u64\"]\n-        }\n-    ]\n-}"}, {"sha": "fdee9c8a6671b9e2d914185b6629da4da20be93c", "filename": "src/etc/platform-intrinsics/x86/sse42.json", "status": "removed", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse42.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse42.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse42.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,104 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_mm\",\n-    \"llvm_prefix\": \"llvm.x86.sse42.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"_cmpestra\",\n-            \"width\": [128],\n-            \"llvm\": \"pcmpestria128\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_cmpestrc\",\n-            \"width\": [128],\n-            \"llvm\": \"pcmpestric128\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_cmpestri\",\n-            \"width\": [128],\n-            \"llvm\": \"pcmpestri128\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_cmpestrm\",\n-            \"width\": [128],\n-            \"llvm\": \"pcmpestrm128\",\n-            \"ret\": \"s8\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_cmpestro\",\n-            \"width\": [128],\n-            \"llvm\": \"pcmpestrio128\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_cmpestrs\",\n-            \"width\": [128],\n-            \"llvm\": \"pcmpestris128\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_cmpestrz\",\n-            \"width\": [128],\n-            \"llvm\": \"pcmpestriz128\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_cmpistra\",\n-            \"width\": [128],\n-            \"llvm\": \"pcmpistria128\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"s8\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_cmpistrc\",\n-            \"width\": [128],\n-            \"llvm\": \"pcmpistric128\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"s8\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_cmpistri\",\n-            \"width\": [128],\n-            \"llvm\": \"pcmpistri128\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"s8\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_cmpistrm\",\n-            \"width\": [128],\n-            \"llvm\": \"pcmpistrm128\",\n-            \"ret\": \"s8\",\n-            \"args\": [\"s8\", \"s8\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_cmpistro\",\n-            \"width\": [128],\n-            \"llvm\": \"pcmpistrio128\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"s8\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_cmpistrs\",\n-            \"width\": [128],\n-            \"llvm\": \"pcmpistris128\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"s8\", \"S32/8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_cmpistrz\",\n-            \"width\": [128],\n-            \"llvm\": \"pcmpistriz128\",\n-            \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"s8\", \"S32/8\"]\n-        }\n-    ]\n-}"}, {"sha": "5a5617957b3e5b78597a0b4a86cadd3e4838d646", "filename": "src/etc/platform-intrinsics/x86/ssse3.json", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fssse3.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fssse3.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fssse3.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,69 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_mm\",\n-    \"llvm_prefix\": \"llvm.x86.ssse3.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"_abs_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"pabs.{0.data_type_short}.128\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_hadd_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"phadd.{0.data_type_short}.128\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_hadds_epi16\",\n-            \"width\": [128],\n-            \"llvm\": \"phadd.sw.128\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_hsub_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"phsub.{0.data_type_short}.128\",\n-            \"ret\": \"s(16-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_hsubs_epi16\",\n-            \"width\": [128],\n-            \"llvm\": \"phsub.sw.128\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0\", \"0\"]\n-        },\n-        {\n-            \"intrinsic\": \"_maddubs_epi16\",\n-            \"width\": [128],\n-            \"llvm\": \"pmadd.ub.sw.128\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"u8\", \"s8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_mulhrs_epi16\",\n-            \"width\": [128],\n-            \"llvm\": \"pmul.hr.sw.128\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"s16\", \"s16\"]\n-        },\n-        {\n-            \"intrinsic\": \"_shuffle_epi8\",\n-            \"width\": [128],\n-            \"llvm\": \"pshuf.b.128\",\n-            \"ret\": \"s8\",\n-            \"args\": [\"s8\", \"s8\"]\n-        },\n-        {\n-            \"intrinsic\": \"_sign_{0.data_type}\",\n-            \"width\": [128],\n-            \"llvm\": \"psign.{0.data_type_short}.128\",\n-            \"ret\": \"s(8-32)\",\n-            \"args\": [\"0\", \"0\"]\n-        }\n-    ]\n-}"}, {"sha": "d1322cd60c4cfe2d8601c3f0fab316576afef135", "filename": "src/etc/platform-intrinsics/x86/tbm.json", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Ftbm.json", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Ftbm.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Ftbm.json?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,13 +0,0 @@\n-{\n-    \"intrinsic_prefix\": \"_tbm\",\n-    \"llvm_prefix\": \"llvm.x86.tbm.\",\n-    \"intrinsics\": [\n-        {\n-            \"intrinsic\": \"_bextri_u{0.bitwidth}\",\n-            \"width\": [\"0\"],\n-            \"llvm\": \"bextri.u{0.bitwidth}\",\n-            \"ret\": \"S(32-64)u\",\n-            \"args\": [\"0\", \"0\"]\n-        }\n-    ]\n-}"}, {"sha": "eeb6a64164e9ce2e7133d9e91a759091beb8e22a", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 137, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=cccaf9a8c69219c8267e406f92fef895fbba80f2", "patch": "@@ -1,7 +1,6 @@\n #![allow(non_upper_case_globals)]\n \n use attributes;\n-use intrinsics::{self, Intrinsic};\n use llvm;\n use llvm_util;\n use abi::{Abi, FnType, LlvmType, PassMode};\n@@ -658,142 +657,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 return;\n             }\n \n-            _ => {\n-                let intr = match Intrinsic::find(&name) {\n-                    Some(intr) => intr,\n-                    None => bug!(\"unknown intrinsic '{}'\", name),\n-                };\n-                fn one<T>(x: Vec<T>) -> T {\n-                    assert_eq!(x.len(), 1);\n-                    x.into_iter().next().unwrap()\n-                }\n-                fn ty_to_type<'ll>(\n-                    cx: &CodegenCx<'ll, '_>,\n-                     t: &intrinsics::Type\n-                 ) -> Vec<&'ll Type> {\n-                    use intrinsics::Type::*;\n-                    match *t {\n-                        Void => vec![cx.type_void()],\n-                        Integer(_signed, _width, llvm_width) => {\n-                            vec![cx.type_ix( llvm_width as u64)]\n-                        }\n-                        Float(x) => {\n-                            match x {\n-                                32 => vec![cx.type_f32()],\n-                                64 => vec![cx.type_f64()],\n-                                _ => bug!()\n-                            }\n-                        }\n-                        Pointer(ref t, ref llvm_elem, _const) => {\n-                            let t = llvm_elem.as_ref().unwrap_or(t);\n-                            let elem = one(ty_to_type(cx, t));\n-                            vec![cx.type_ptr_to(elem)]\n-                        }\n-                        Vector(ref t, ref llvm_elem, length) => {\n-                            let t = llvm_elem.as_ref().unwrap_or(t);\n-                            let elem = one(ty_to_type(cx, t));\n-                            vec![cx.type_vector(elem, length as u64)]\n-                        }\n-                        Aggregate(false, ref contents) => {\n-                            let elems = contents.iter()\n-                                                .map(|t| one(ty_to_type(cx, t)))\n-                                                .collect::<Vec<_>>();\n-                            vec![cx.type_struct( &elems, false)]\n-                        }\n-                        Aggregate(true, ref contents) => {\n-                            contents.iter()\n-                                    .flat_map(|t| ty_to_type(cx, t))\n-                                    .collect()\n-                        }\n-                    }\n-                }\n-\n-                // This allows an argument list like `foo, (bar, baz),\n-                // qux` to be converted into `foo, bar, baz, qux`, integer\n-                // arguments to be truncated as needed and pointers to be\n-                // cast.\n-                fn modify_as_needed<'ll, 'tcx>(\n-                    bx: &mut Builder<'_, 'll, 'tcx>,\n-                    t: &intrinsics::Type,\n-                    arg: &OperandRef<'tcx, &'ll Value>,\n-                ) -> Vec<&'ll Value> {\n-                    match *t {\n-                        intrinsics::Type::Aggregate(true, ref contents) => {\n-                            // We found a tuple that needs squishing! So\n-                            // run over the tuple and load each field.\n-                            //\n-                            // This assumes the type is \"simple\", i.e., no\n-                            // destructors, and the contents are SIMD\n-                            // etc.\n-                            assert!(!bx.type_needs_drop(arg.layout.ty));\n-                            let (ptr, align) = match arg.val {\n-                                OperandValue::Ref(ptr, None, align) => (ptr, align),\n-                                _ => bug!()\n-                            };\n-                            let arg = PlaceRef::new_sized(ptr, arg.layout, align);\n-                            (0..contents.len()).map(|i| {\n-                                let field = arg.project_field(bx, i);\n-                                bx.load_operand(field).immediate()\n-                            }).collect()\n-                        }\n-                        intrinsics::Type::Pointer(_, Some(ref llvm_elem), _) => {\n-                            let llvm_elem = one(ty_to_type(bx, llvm_elem));\n-                            vec![bx.pointercast(arg.immediate(), bx.type_ptr_to(llvm_elem))]\n-                        }\n-                        intrinsics::Type::Vector(_, Some(ref llvm_elem), length) => {\n-                            let llvm_elem = one(ty_to_type(bx, llvm_elem));\n-                            vec![\n-                                bx.bitcast(arg.immediate(),\n-                                bx.type_vector(llvm_elem, length as u64))\n-                            ]\n-                        }\n-                        intrinsics::Type::Integer(_, width, llvm_width) if width != llvm_width => {\n-                            // the LLVM intrinsic uses a smaller integer\n-                            // size than the C intrinsic's signature, so\n-                            // we have to trim it down here.\n-                            vec![bx.trunc(arg.immediate(), bx.type_ix(llvm_width as u64))]\n-                        }\n-                        _ => vec![arg.immediate()],\n-                    }\n-                }\n-\n-\n-                let inputs = intr.inputs.iter()\n-                                        .flat_map(|t| ty_to_type(self, t))\n-                                        .collect::<Vec<_>>();\n-\n-                let outputs = one(ty_to_type(self, &intr.output));\n-\n-                let llargs: Vec<_> = intr.inputs.iter().zip(args).flat_map(|(t, arg)| {\n-                    modify_as_needed(self, t, arg)\n-                }).collect();\n-                assert_eq!(inputs.len(), llargs.len());\n-\n-                let val = match intr.definition {\n-                    intrinsics::IntrinsicDef::Named(name) => {\n-                        let f = self.declare_cfn(\n-                            name,\n-                            self.type_func(&inputs, outputs),\n-                        );\n-                        self.call(f, &llargs, None)\n-                    }\n-                };\n-\n-                match *intr.output {\n-                    intrinsics::Type::Aggregate(flatten, ref elems) => {\n-                        // the output is a tuple so we need to munge it properly\n-                        assert!(!flatten);\n-\n-                        for i in 0..elems.len() {\n-                            let dest = result.project_field(self, i);\n-                            let val = self.extract_value(val, i as u64);\n-                            self.store(val, dest.llval, dest.align);\n-                        }\n-                        return;\n-                    }\n-                    _ => val,\n-                }\n-            }\n+            _ => bug!(\"unknown intrinsic '{}'\", name),\n         };\n \n         if !fn_ty.ret.is_ignore() {"}, {"sha": "272f34b0b3f16515ed40347312cd31e34f465983", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=cccaf9a8c69219c8267e406f92fef895fbba80f2", "patch": "@@ -43,7 +43,6 @@ extern crate rustc_target;\n extern crate rustc_demangle;\n extern crate rustc_incremental;\n extern crate rustc_llvm;\n-extern crate rustc_platform_intrinsics as intrinsics;\n extern crate rustc_codegen_utils;\n extern crate rustc_codegen_ssa;\n extern crate rustc_fs_util;"}, {"sha": "92f37f974efdccf5ea0623e692149da48779a95c", "filename": "src/librustc_platform_intrinsics/Cargo.toml", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2FCargo.toml?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,9 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-name = \"rustc_platform_intrinsics\"\n-version = \"0.0.0\"\n-\n-[lib]\n-name = \"rustc_platform_intrinsics\"\n-path = \"lib.rs\"\n-crate-type = [\"dylib\"]"}, {"sha": "833a312ae63a477c27b53aa467ff4a72f4b4ca16", "filename": "src/librustc_platform_intrinsics/aarch64.rs", "status": "removed", "additions": 0, "deletions": 3404, "changes": 3404, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Faarch64.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41"}, {"sha": "2d19293b132958b07b9c3914cce1d2cf446ae8fa", "filename": "src/librustc_platform_intrinsics/arm.rs", "status": "removed", "additions": 0, "deletions": 2074, "changes": 2074, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Farm.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,2074 +0,0 @@\n-// DO NOT EDIT: autogenerated by etc/platform-intrinsics/generator.py\n-// ignore-tidy-linelength\n-\n-#![allow(unused_imports)]\n-\n-use {Intrinsic, Type};\n-use IntrinsicDef::Named;\n-\n-pub fn find(name: &str) -> Option<Intrinsic> {\n-    if !name.starts_with(\"arm_v\") { return None }\n-    Some(match &name[\"arm_v\".len()..] {\n-        \"hadd_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vhadds.v8i8\")\n-        },\n-        \"hadd_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vhaddu.v8i8\")\n-        },\n-        \"hadd_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vhadds.v4i16\")\n-        },\n-        \"hadd_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vhaddu.v4i16\")\n-        },\n-        \"hadd_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vhadds.v2i32\")\n-        },\n-        \"hadd_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vhaddu.v2i32\")\n-        },\n-        \"haddq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vhadds.v16i8\")\n-        },\n-        \"haddq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vhaddu.v16i8\")\n-        },\n-        \"haddq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vhadds.v8i16\")\n-        },\n-        \"haddq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vhaddu.v8i16\")\n-        },\n-        \"haddq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vhadds.v4i32\")\n-        },\n-        \"haddq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vhaddu.v4i32\")\n-        },\n-        \"rhadd_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vrhadds.v8i8\")\n-        },\n-        \"rhadd_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vrhaddu.v8i8\")\n-        },\n-        \"rhadd_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vrhadds.v4i16\")\n-        },\n-        \"rhadd_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vrhaddu.v4i16\")\n-        },\n-        \"rhadd_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vrhadds.v2i32\")\n-        },\n-        \"rhadd_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vrhaddu.v2i32\")\n-        },\n-        \"rhaddq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vrhadds.v16i8\")\n-        },\n-        \"rhaddq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vrhaddu.v16i8\")\n-        },\n-        \"rhaddq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vrhadds.v8i16\")\n-        },\n-        \"rhaddq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vrhaddu.v8i16\")\n-        },\n-        \"rhaddq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vrhadds.v4i32\")\n-        },\n-        \"rhaddq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vrhaddu.v4i32\")\n-        },\n-        \"qadd_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vqadds.v8i8\")\n-        },\n-        \"qadd_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vqaddu.v8i8\")\n-        },\n-        \"qadd_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vqadds.v4i16\")\n-        },\n-        \"qadd_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vqaddu.v4i16\")\n-        },\n-        \"qadd_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vqadds.v2i32\")\n-        },\n-        \"qadd_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vqaddu.v2i32\")\n-        },\n-        \"qadd_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x1, &::I64x1]; &INPUTS },\n-            output: &::I64x1,\n-            definition: Named(\"llvm.arm.neon.vqadds.v1i64\")\n-        },\n-        \"qadd_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x1, &::U64x1]; &INPUTS },\n-            output: &::U64x1,\n-            definition: Named(\"llvm.arm.neon.vqaddu.v1i64\")\n-        },\n-        \"qaddq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vqadds.v16i8\")\n-        },\n-        \"qaddq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vqaddu.v16i8\")\n-        },\n-        \"qaddq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vqadds.v8i16\")\n-        },\n-        \"qaddq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vqaddu.v8i16\")\n-        },\n-        \"qaddq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vqadds.v4i32\")\n-        },\n-        \"qaddq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vqaddu.v4i32\")\n-        },\n-        \"qaddq_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::I64x2]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.arm.neon.vqadds.v2i64\")\n-        },\n-        \"qaddq_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::U64x2]; &INPUTS },\n-            output: &::U64x2,\n-            definition: Named(\"llvm.arm.neon.vqaddu.v2i64\")\n-        },\n-        \"raddhn_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vraddhn.v8i8\")\n-        },\n-        \"raddhn_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vraddhn.v8i8\")\n-        },\n-        \"raddhn_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vraddhn.v4i16\")\n-        },\n-        \"raddhn_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vraddhn.v4i16\")\n-        },\n-        \"raddhn_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::I64x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vraddhn.v2i32\")\n-        },\n-        \"raddhn_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::U64x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vraddhn.v2i32\")\n-        },\n-        \"fma_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x2, &::F32x2]; &INPUTS },\n-            output: &::F32x2,\n-            definition: Named(\"llvm.fma.v2f32\")\n-        },\n-        \"fmaq_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.fma.v4f32\")\n-        },\n-        \"qdmulh_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vsqdmulh.v4i16\")\n-        },\n-        \"qdmulh_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vsqdmulh.v2i32\")\n-        },\n-        \"qdmulhq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vsqdmulh.v8i16\")\n-        },\n-        \"qdmulhq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vsqdmulh.v4i32\")\n-        },\n-        \"qrdmulh_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vsqrdmulh.v4i16\")\n-        },\n-        \"qrdmulh_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vsqrdmulh.v2i32\")\n-        },\n-        \"qrdmulhq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vsqrdmulh.v8i16\")\n-        },\n-        \"qrdmulhq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vsqrdmulh.v4i32\")\n-        },\n-        \"mull_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vmulls.v8i16\")\n-        },\n-        \"mull_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vmullu.v8i16\")\n-        },\n-        \"mull_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vmulls.v4i32\")\n-        },\n-        \"mull_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U16x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vmullu.v4i32\")\n-        },\n-        \"mull_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.arm.neon.vmulls.v2i64\")\n-        },\n-        \"mull_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U32x2]; &INPUTS },\n-            output: &::U64x2,\n-            definition: Named(\"llvm.arm.neon.vmullu.v2i64\")\n-        },\n-        \"qdmullq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vsqdmull.v8i16\")\n-        },\n-        \"qdmullq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vsqdmull.v4i32\")\n-        },\n-        \"hsub_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vhsubs.v8i8\")\n-        },\n-        \"hsub_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vhsubu.v8i8\")\n-        },\n-        \"hsub_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vhsubs.v4i16\")\n-        },\n-        \"hsub_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vhsubu.v4i16\")\n-        },\n-        \"hsub_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vhsubs.v2i32\")\n-        },\n-        \"hsub_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vhsubu.v2i32\")\n-        },\n-        \"hsubq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vhsubs.v16i8\")\n-        },\n-        \"hsubq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vhsubu.v16i8\")\n-        },\n-        \"hsubq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vhsubs.v8i16\")\n-        },\n-        \"hsubq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vhsubu.v8i16\")\n-        },\n-        \"hsubq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vhsubs.v4i32\")\n-        },\n-        \"hsubq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vhsubu.v4i32\")\n-        },\n-        \"qsub_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vqsubs.v8i8\")\n-        },\n-        \"qsub_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vqsubu.v8i8\")\n-        },\n-        \"qsub_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vqsubs.v4i16\")\n-        },\n-        \"qsub_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vqsubu.v4i16\")\n-        },\n-        \"qsub_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vqsubs.v2i32\")\n-        },\n-        \"qsub_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vqsubu.v2i32\")\n-        },\n-        \"qsub_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x1, &::I64x1]; &INPUTS },\n-            output: &::I64x1,\n-            definition: Named(\"llvm.arm.neon.vqsubs.v1i64\")\n-        },\n-        \"qsub_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x1, &::U64x1]; &INPUTS },\n-            output: &::U64x1,\n-            definition: Named(\"llvm.arm.neon.vqsubu.v1i64\")\n-        },\n-        \"qsubq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vqsubs.v16i8\")\n-        },\n-        \"qsubq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vqsubu.v16i8\")\n-        },\n-        \"qsubq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vqsubs.v8i16\")\n-        },\n-        \"qsubq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vqsubu.v8i16\")\n-        },\n-        \"qsubq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vqsubs.v4i32\")\n-        },\n-        \"qsubq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vqsubu.v4i32\")\n-        },\n-        \"qsubq_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::I64x2]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.arm.neon.vqsubs.v2i64\")\n-        },\n-        \"qsubq_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::U64x2]; &INPUTS },\n-            output: &::U64x2,\n-            definition: Named(\"llvm.arm.neon.vqsubu.v2i64\")\n-        },\n-        \"rsubhn_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vrsubhn.v8i8\")\n-        },\n-        \"rsubhn_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vrsubhn.v8i8\")\n-        },\n-        \"rsubhn_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vrsubhn.v4i16\")\n-        },\n-        \"rsubhn_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vrsubhn.v4i16\")\n-        },\n-        \"rsubhn_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::I64x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vrsubhn.v2i32\")\n-        },\n-        \"rsubhn_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::U64x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vrsubhn.v2i32\")\n-        },\n-        \"abd_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vabds.v8i8\")\n-        },\n-        \"abd_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vabdu.v8i8\")\n-        },\n-        \"abd_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vabds.v4i16\")\n-        },\n-        \"abd_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vabdu.v4i16\")\n-        },\n-        \"abd_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vabds.v2i32\")\n-        },\n-        \"abd_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vabdu.v2i32\")\n-        },\n-        \"abd_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x2, &::F32x2]; &INPUTS },\n-            output: &::F32x2,\n-            definition: Named(\"llvm.arm.neon.vabdf.v2f32\")\n-        },\n-        \"abdq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vabds.v16i8\")\n-        },\n-        \"abdq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vabdu.v16i8\")\n-        },\n-        \"abdq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vabds.v8i16\")\n-        },\n-        \"abdq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vabdu.v8i16\")\n-        },\n-        \"abdq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vabds.v4i32\")\n-        },\n-        \"abdq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vabdu.v4i32\")\n-        },\n-        \"abdq_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.arm.neon.vabdf.v4f32\")\n-        },\n-        \"max_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vmaxs.v8i8\")\n-        },\n-        \"max_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vmaxu.v8i8\")\n-        },\n-        \"max_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vmaxs.v4i16\")\n-        },\n-        \"max_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vmaxu.v4i16\")\n-        },\n-        \"max_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vmaxs.v2i32\")\n-        },\n-        \"max_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vmaxu.v2i32\")\n-        },\n-        \"max_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x2, &::F32x2]; &INPUTS },\n-            output: &::F32x2,\n-            definition: Named(\"llvm.arm.neon.vmaxf.v2f32\")\n-        },\n-        \"maxq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vmaxs.v16i8\")\n-        },\n-        \"maxq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vmaxu.v16i8\")\n-        },\n-        \"maxq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vmaxs.v8i16\")\n-        },\n-        \"maxq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vmaxu.v8i16\")\n-        },\n-        \"maxq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vmaxs.v4i32\")\n-        },\n-        \"maxq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vmaxu.v4i32\")\n-        },\n-        \"maxq_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.arm.neon.vmaxf.v4f32\")\n-        },\n-        \"min_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vmins.v8i8\")\n-        },\n-        \"min_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vminu.v8i8\")\n-        },\n-        \"min_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vmins.v4i16\")\n-        },\n-        \"min_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vminu.v4i16\")\n-        },\n-        \"min_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vmins.v2i32\")\n-        },\n-        \"min_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vminu.v2i32\")\n-        },\n-        \"min_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x2, &::F32x2]; &INPUTS },\n-            output: &::F32x2,\n-            definition: Named(\"llvm.arm.neon.vminf.v2f32\")\n-        },\n-        \"minq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vmins.v16i8\")\n-        },\n-        \"minq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vminu.v16i8\")\n-        },\n-        \"minq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vmins.v8i16\")\n-        },\n-        \"minq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vminu.v8i16\")\n-        },\n-        \"minq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vmins.v4i32\")\n-        },\n-        \"minq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vminu.v4i32\")\n-        },\n-        \"minq_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.arm.neon.vminf.v4f32\")\n-        },\n-        \"shl_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vshls.v8i8\")\n-        },\n-        \"shl_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::I8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vshlu.v8i8\")\n-        },\n-        \"shl_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vshls.v4i16\")\n-        },\n-        \"shl_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::I16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vshlu.v4i16\")\n-        },\n-        \"shl_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vshls.v2i32\")\n-        },\n-        \"shl_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::I32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vshlu.v2i32\")\n-        },\n-        \"shl_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x1, &::I64x1]; &INPUTS },\n-            output: &::I64x1,\n-            definition: Named(\"llvm.arm.neon.vshls.v1i64\")\n-        },\n-        \"shl_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x1, &::I64x1]; &INPUTS },\n-            output: &::U64x1,\n-            definition: Named(\"llvm.arm.neon.vshlu.v1i64\")\n-        },\n-        \"shlq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vshls.v16i8\")\n-        },\n-        \"shlq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::I8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vshlu.v16i8\")\n-        },\n-        \"shlq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vshls.v8i16\")\n-        },\n-        \"shlq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::I16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vshlu.v8i16\")\n-        },\n-        \"shlq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vshls.v4i32\")\n-        },\n-        \"shlq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::I32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vshlu.v4i32\")\n-        },\n-        \"shlq_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::I64x2]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.arm.neon.vshls.v2i64\")\n-        },\n-        \"shlq_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::I64x2]; &INPUTS },\n-            output: &::U64x2,\n-            definition: Named(\"llvm.arm.neon.vshlu.v2i64\")\n-        },\n-        \"qshl_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vqshls.v8i8\")\n-        },\n-        \"qshl_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::I8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vqshlu.v8i8\")\n-        },\n-        \"qshl_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vqshls.v4i16\")\n-        },\n-        \"qshl_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::I16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vqshlu.v4i16\")\n-        },\n-        \"qshl_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vqshls.v2i32\")\n-        },\n-        \"qshl_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::I32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vqshlu.v2i32\")\n-        },\n-        \"qshl_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x1, &::I64x1]; &INPUTS },\n-            output: &::I64x1,\n-            definition: Named(\"llvm.arm.neon.vqshls.v1i64\")\n-        },\n-        \"qshl_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x1, &::I64x1]; &INPUTS },\n-            output: &::U64x1,\n-            definition: Named(\"llvm.arm.neon.vqshlu.v1i64\")\n-        },\n-        \"qshlq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vqshls.v16i8\")\n-        },\n-        \"qshlq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::I8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vqshlu.v16i8\")\n-        },\n-        \"qshlq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vqshls.v8i16\")\n-        },\n-        \"qshlq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::I16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vqshlu.v8i16\")\n-        },\n-        \"qshlq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vqshls.v4i32\")\n-        },\n-        \"qshlq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::I32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vqshlu.v4i32\")\n-        },\n-        \"qshlq_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::I64x2]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.arm.neon.vqshls.v2i64\")\n-        },\n-        \"qshlq_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::I64x2]; &INPUTS },\n-            output: &::U64x2,\n-            definition: Named(\"llvm.arm.neon.vqshlu.v2i64\")\n-        },\n-        \"rshl_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vrshls.v8i8\")\n-        },\n-        \"rshl_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::I8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vrshlu.v8i8\")\n-        },\n-        \"rshl_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vrshls.v4i16\")\n-        },\n-        \"rshl_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::I16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vrshlu.v4i16\")\n-        },\n-        \"rshl_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vrshls.v2i32\")\n-        },\n-        \"rshl_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::I32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vrshlu.v2i32\")\n-        },\n-        \"rshl_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x1, &::I64x1]; &INPUTS },\n-            output: &::I64x1,\n-            definition: Named(\"llvm.arm.neon.vrshls.v1i64\")\n-        },\n-        \"rshl_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x1, &::I64x1]; &INPUTS },\n-            output: &::U64x1,\n-            definition: Named(\"llvm.arm.neon.vrshlu.v1i64\")\n-        },\n-        \"rshlq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vrshls.v16i8\")\n-        },\n-        \"rshlq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::I8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vrshlu.v16i8\")\n-        },\n-        \"rshlq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vrshls.v8i16\")\n-        },\n-        \"rshlq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::I16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vrshlu.v8i16\")\n-        },\n-        \"rshlq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vrshls.v4i32\")\n-        },\n-        \"rshlq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::I32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vrshlu.v4i32\")\n-        },\n-        \"rshlq_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::I64x2]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.arm.neon.vrshls.v2i64\")\n-        },\n-        \"rshlq_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::I64x2]; &INPUTS },\n-            output: &::U64x2,\n-            definition: Named(\"llvm.arm.neon.vrshlu.v2i64\")\n-        },\n-        \"qrshl_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vqrshls.v8i8\")\n-        },\n-        \"qrshl_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::I8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vqrshlu.v8i8\")\n-        },\n-        \"qrshl_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vqrshls.v4i16\")\n-        },\n-        \"qrshl_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::I16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vqrshlu.v4i16\")\n-        },\n-        \"qrshl_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vqrshls.v2i32\")\n-        },\n-        \"qrshl_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::I32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vqrshlu.v2i32\")\n-        },\n-        \"qrshl_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x1, &::I64x1]; &INPUTS },\n-            output: &::I64x1,\n-            definition: Named(\"llvm.arm.neon.vqrshls.v1i64\")\n-        },\n-        \"qrshl_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x1, &::I64x1]; &INPUTS },\n-            output: &::U64x1,\n-            definition: Named(\"llvm.arm.neon.vqrshlu.v1i64\")\n-        },\n-        \"qrshlq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vqrshls.v16i8\")\n-        },\n-        \"qrshlq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::I8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vqrshlu.v16i8\")\n-        },\n-        \"qrshlq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vqrshls.v8i16\")\n-        },\n-        \"qrshlq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::I16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vqrshlu.v8i16\")\n-        },\n-        \"qrshlq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vqrshls.v4i32\")\n-        },\n-        \"qrshlq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::I32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vqrshlu.v4i32\")\n-        },\n-        \"qrshlq_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::I64x2]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.arm.neon.vqrshls.v2i64\")\n-        },\n-        \"qrshlq_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::I64x2]; &INPUTS },\n-            output: &::U64x2,\n-            definition: Named(\"llvm.arm.neon.vqrshlu.v2i64\")\n-        },\n-        \"qshrun_n_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::U32]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vsqshrun.v8i8\")\n-        },\n-        \"qshrun_n_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::U32]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vsqshrun.v4i16\")\n-        },\n-        \"qshrun_n_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::U32]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vsqshrun.v2i32\")\n-        },\n-        \"qrshrun_n_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::U32]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vsqrshrun.v8i8\")\n-        },\n-        \"qrshrun_n_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::U32]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vsqrshrun.v4i16\")\n-        },\n-        \"qrshrun_n_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::U32]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vsqrshrun.v2i32\")\n-        },\n-        \"qshrn_n_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::U32]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vqshrns.v8i8\")\n-        },\n-        \"qshrn_n_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U32]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vqshrnu.v8i8\")\n-        },\n-        \"qshrn_n_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::U32]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vqshrns.v4i16\")\n-        },\n-        \"qshrn_n_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vqshrnu.v4i16\")\n-        },\n-        \"qshrn_n_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::U32]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vqshrns.v2i32\")\n-        },\n-        \"qshrn_n_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::U32]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vqshrnu.v2i32\")\n-        },\n-        \"rshrn_n_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::U32]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vrshrn.v8i8\")\n-        },\n-        \"rshrn_n_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U32]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vrshrn.v8i8\")\n-        },\n-        \"rshrn_n_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::U32]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vrshrn.v4i16\")\n-        },\n-        \"rshrn_n_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vrshrn.v4i16\")\n-        },\n-        \"rshrn_n_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::U32]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vrshrn.v2i32\")\n-        },\n-        \"rshrn_n_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::U32]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vrshrn.v2i32\")\n-        },\n-        \"qrshrn_n_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::U32]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vqrshrns.v8i8\")\n-        },\n-        \"qrshrn_n_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U32]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vqrshrnu.v8i8\")\n-        },\n-        \"qrshrn_n_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::U32]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vqrshrns.v4i16\")\n-        },\n-        \"qrshrn_n_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vqrshrnu.v4i16\")\n-        },\n-        \"qrshrn_n_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::U32]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vqrshrns.v2i32\")\n-        },\n-        \"qrshrn_n_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::U32]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vqrshrnu.v2i32\")\n-        },\n-        \"sri_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vvsri.v8i8\")\n-        },\n-        \"sri_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vvsri.v8i8\")\n-        },\n-        \"sri_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vvsri.v4i16\")\n-        },\n-        \"sri_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vvsri.v4i16\")\n-        },\n-        \"sri_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vvsri.v2i32\")\n-        },\n-        \"sri_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vvsri.v2i32\")\n-        },\n-        \"sri_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x1, &::I64x1]; &INPUTS },\n-            output: &::I64x1,\n-            definition: Named(\"llvm.arm.neon.vvsri.v1i64\")\n-        },\n-        \"sri_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x1, &::U64x1]; &INPUTS },\n-            output: &::U64x1,\n-            definition: Named(\"llvm.arm.neon.vvsri.v1i64\")\n-        },\n-        \"sriq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vvsri.v16i8\")\n-        },\n-        \"sriq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vvsri.v16i8\")\n-        },\n-        \"sriq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vvsri.v8i16\")\n-        },\n-        \"sriq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vvsri.v8i16\")\n-        },\n-        \"sriq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vvsri.v4i32\")\n-        },\n-        \"sriq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vvsri.v4i32\")\n-        },\n-        \"sriq_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::I64x2]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.arm.neon.vvsri.v2i64\")\n-        },\n-        \"sriq_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::U64x2]; &INPUTS },\n-            output: &::U64x2,\n-            definition: Named(\"llvm.arm.neon.vvsri.v2i64\")\n-        },\n-        \"sli_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vvsli.v8i8\")\n-        },\n-        \"sli_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vvsli.v8i8\")\n-        },\n-        \"sli_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vvsli.v4i16\")\n-        },\n-        \"sli_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vvsli.v4i16\")\n-        },\n-        \"sli_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vvsli.v2i32\")\n-        },\n-        \"sli_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vvsli.v2i32\")\n-        },\n-        \"sli_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x1, &::I64x1]; &INPUTS },\n-            output: &::I64x1,\n-            definition: Named(\"llvm.arm.neon.vvsli.v1i64\")\n-        },\n-        \"sli_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x1, &::U64x1]; &INPUTS },\n-            output: &::U64x1,\n-            definition: Named(\"llvm.arm.neon.vvsli.v1i64\")\n-        },\n-        \"sliq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vvsli.v16i8\")\n-        },\n-        \"sliq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vvsli.v16i8\")\n-        },\n-        \"sliq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vvsli.v8i16\")\n-        },\n-        \"sliq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vvsli.v8i16\")\n-        },\n-        \"sliq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vvsli.v4i32\")\n-        },\n-        \"sliq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vvsli.v4i32\")\n-        },\n-        \"sliq_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::I64x2]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.arm.neon.vvsli.v2i64\")\n-        },\n-        \"sliq_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::U64x2]; &INPUTS },\n-            output: &::U64x2,\n-            definition: Named(\"llvm.arm.neon.vvsli.v2i64\")\n-        },\n-        \"vqmovn_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vqxtns.v8i8\")\n-        },\n-        \"vqmovn_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U16x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vqxtnu.v8i8\")\n-        },\n-        \"vqmovn_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vqxtns.v4i16\")\n-        },\n-        \"vqmovn_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U32x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vqxtnu.v4i16\")\n-        },\n-        \"vqmovn_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I64x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vqxtns.v2i32\")\n-        },\n-        \"vqmovn_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U64x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vqxtnu.v2i32\")\n-        },\n-        \"abs_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vabs.v8i8\")\n-        },\n-        \"abs_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vabs.v4i16\")\n-        },\n-        \"abs_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vabs.v2i32\")\n-        },\n-        \"absq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vabs.v16i8\")\n-        },\n-        \"absq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vabs.v8i16\")\n-        },\n-        \"absq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vabs.v4i32\")\n-        },\n-        \"abs_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x2]; &INPUTS },\n-            output: &::F32x2,\n-            definition: Named(\"llvm.fabs.v2f32\")\n-        },\n-        \"absq_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.fabs.v4f32\")\n-        },\n-        \"qabs_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vsqabs.v8i8\")\n-        },\n-        \"qabs_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vsqabs.v4i16\")\n-        },\n-        \"qabs_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vsqabs.v2i32\")\n-        },\n-        \"qabsq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vsqabs.v16i8\")\n-        },\n-        \"qabsq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vsqabs.v8i16\")\n-        },\n-        \"qabsq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vsqabs.v4i32\")\n-        },\n-        \"qneg_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vsqneg.v8i8\")\n-        },\n-        \"qneg_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vsqneg.v4i16\")\n-        },\n-        \"qneg_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vsqneg.v2i32\")\n-        },\n-        \"qnegq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vsqneg.v16i8\")\n-        },\n-        \"qnegq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vsqneg.v8i16\")\n-        },\n-        \"qnegq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vsqneg.v4i32\")\n-        },\n-        \"clz_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.ctlz.v8i8\")\n-        },\n-        \"clz_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.ctlz.v8i8\")\n-        },\n-        \"clz_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.ctlz.v4i16\")\n-        },\n-        \"clz_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.ctlz.v4i16\")\n-        },\n-        \"clz_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.ctlz.v2i32\")\n-        },\n-        \"clz_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.ctlz.v2i32\")\n-        },\n-        \"clzq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.ctlz.v16i8\")\n-        },\n-        \"clzq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.ctlz.v16i8\")\n-        },\n-        \"clzq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ctlz.v8i16\")\n-        },\n-        \"clzq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.ctlz.v8i16\")\n-        },\n-        \"clzq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ctlz.v4i32\")\n-        },\n-        \"clzq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.ctlz.v4i32\")\n-        },\n-        \"cls_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vcls.v8i8\")\n-        },\n-        \"cls_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vcls.v8i8\")\n-        },\n-        \"cls_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vcls.v4i16\")\n-        },\n-        \"cls_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vcls.v4i16\")\n-        },\n-        \"cls_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vcls.v2i32\")\n-        },\n-        \"cls_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vcls.v2i32\")\n-        },\n-        \"clsq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vcls.v16i8\")\n-        },\n-        \"clsq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vcls.v16i8\")\n-        },\n-        \"clsq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vcls.v8i16\")\n-        },\n-        \"clsq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vcls.v8i16\")\n-        },\n-        \"clsq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vcls.v4i32\")\n-        },\n-        \"clsq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vcls.v4i32\")\n-        },\n-        \"cnt_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.ctpop.v8i8\")\n-        },\n-        \"cnt_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.ctpop.v8i8\")\n-        },\n-        \"cntq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.ctpop.v16i8\")\n-        },\n-        \"cntq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.ctpop.v16i8\")\n-        },\n-        \"recpe_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vrecpe.v2i32\")\n-        },\n-        \"recpe_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x2]; &INPUTS },\n-            output: &::F32x2,\n-            definition: Named(\"llvm.arm.neon.vrecpe.v2f32\")\n-        },\n-        \"recpeq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vrecpe.v4i32\")\n-        },\n-        \"recpeq_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.arm.neon.vrecpe.v4f32\")\n-        },\n-        \"recps_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x2, &::F32x2]; &INPUTS },\n-            output: &::F32x2,\n-            definition: Named(\"llvm.arm.neon.vfrecps.v2f32\")\n-        },\n-        \"recpsq_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.arm.neon.vfrecps.v4f32\")\n-        },\n-        \"sqrt_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x2]; &INPUTS },\n-            output: &::F32x2,\n-            definition: Named(\"llvm.sqrt.v2f32\")\n-        },\n-        \"sqrtq_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.sqrt.v4f32\")\n-        },\n-        \"rsqrte_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vrsqrte.v2i32\")\n-        },\n-        \"rsqrte_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x2]; &INPUTS },\n-            output: &::F32x2,\n-            definition: Named(\"llvm.arm.neon.vrsqrte.v2f32\")\n-        },\n-        \"rsqrteq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vrsqrte.v4i32\")\n-        },\n-        \"rsqrteq_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.arm.neon.vrsqrte.v4f32\")\n-        },\n-        \"rsqrts_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x2, &::F32x2]; &INPUTS },\n-            output: &::F32x2,\n-            definition: Named(\"llvm.arm.neon.vrsqrts.v2f32\")\n-        },\n-        \"rsqrtsq_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.arm.neon.vrsqrts.v4f32\")\n-        },\n-        \"bsl_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vbsl.v8i8\")\n-        },\n-        \"bsl_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vbsl.v8i8\")\n-        },\n-        \"bsl_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vbsl.v4i16\")\n-        },\n-        \"bsl_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vbsl.v4i16\")\n-        },\n-        \"bsl_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vbsl.v2i32\")\n-        },\n-        \"bsl_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vbsl.v2i32\")\n-        },\n-        \"bsl_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x1, &::I64x1]; &INPUTS },\n-            output: &::I64x1,\n-            definition: Named(\"llvm.arm.neon.vbsl.v1i64\")\n-        },\n-        \"bsl_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x1, &::U64x1]; &INPUTS },\n-            output: &::U64x1,\n-            definition: Named(\"llvm.arm.neon.vbsl.v1i64\")\n-        },\n-        \"bslq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vbsl.v16i8\")\n-        },\n-        \"bslq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vbsl.v16i8\")\n-        },\n-        \"bslq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vbsl.v8i16\")\n-        },\n-        \"bslq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vbsl.v8i16\")\n-        },\n-        \"bslq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vbsl.v4i32\")\n-        },\n-        \"bslq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vbsl.v4i32\")\n-        },\n-        \"bslq_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::I64x2]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.arm.neon.vbsl.v2i64\")\n-        },\n-        \"bslq_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::U64x2]; &INPUTS },\n-            output: &::U64x2,\n-            definition: Named(\"llvm.arm.neon.vbsl.v2i64\")\n-        },\n-        \"padd_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vpadd.v8i8\")\n-        },\n-        \"padd_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vpadd.v8i8\")\n-        },\n-        \"padd_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vpadd.v4i16\")\n-        },\n-        \"padd_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vpadd.v4i16\")\n-        },\n-        \"padd_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vpadd.v2i32\")\n-        },\n-        \"padd_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vpadd.v2i32\")\n-        },\n-        \"padd_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x2, &::F32x2]; &INPUTS },\n-            output: &::F32x2,\n-            definition: Named(\"llvm.arm.neon.vpadd.v2f32\")\n-        },\n-        \"paddl_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x8]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vpaddls.v4i16.v8i8\")\n-        },\n-        \"paddl_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U8x8]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vpaddlu.v4i16.v8i8\")\n-        },\n-        \"paddl_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x4]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vpaddls.v2i32.v4i16\")\n-        },\n-        \"paddl_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U16x4]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vpaddlu.v2i32.v4i16\")\n-        },\n-        \"paddl_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x2]; &INPUTS },\n-            output: &::I64x1,\n-            definition: Named(\"llvm.arm.neon.vpaddls.v1i64.v2i32\")\n-        },\n-        \"paddl_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U32x2]; &INPUTS },\n-            output: &::U64x1,\n-            definition: Named(\"llvm.arm.neon.vpaddlu.v1i64.v2i32\")\n-        },\n-        \"paddlq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x16]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vpaddls.v8i16.v16i8\")\n-        },\n-        \"paddlq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U8x16]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vpaddlu.v8i16.v16i8\")\n-        },\n-        \"paddlq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x8]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vpaddls.v4i32.v8i16\")\n-        },\n-        \"paddlq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U16x8]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vpaddlu.v4i32.v8i16\")\n-        },\n-        \"paddlq_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x4]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.arm.neon.vpaddls.v2i64.v4i32\")\n-        },\n-        \"paddlq_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U32x4]; &INPUTS },\n-            output: &::U64x2,\n-            definition: Named(\"llvm.arm.neon.vpaddlu.v2i64.v4i32\")\n-        },\n-        \"padal_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I8x8]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vpadals.v4i16.v4i16\")\n-        },\n-        \"padal_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U8x8]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vpadalu.v4i16.v4i16\")\n-        },\n-        \"padal_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I16x4]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vpadals.v2i32.v2i32\")\n-        },\n-        \"padal_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U16x4]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vpadalu.v2i32.v2i32\")\n-        },\n-        \"padal_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x1, &::I32x2]; &INPUTS },\n-            output: &::I64x1,\n-            definition: Named(\"llvm.arm.neon.vpadals.v1i64.v1i64\")\n-        },\n-        \"padal_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x1, &::U32x2]; &INPUTS },\n-            output: &::U64x1,\n-            definition: Named(\"llvm.arm.neon.vpadalu.v1i64.v1i64\")\n-        },\n-        \"padalq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I8x16]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vpadals.v8i16.v8i16\")\n-        },\n-        \"padalq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U8x16]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vpadalu.v8i16.v8i16\")\n-        },\n-        \"padalq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I16x8]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vpadals.v4i32.v4i32\")\n-        },\n-        \"padalq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U16x8]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vpadalu.v4i32.v4i32\")\n-        },\n-        \"padalq_s64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I64x2, &::I32x4]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.arm.neon.vpadals.v2i64.v2i64\")\n-        },\n-        \"padalq_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::U32x4]; &INPUTS },\n-            output: &::U64x2,\n-            definition: Named(\"llvm.arm.neon.vpadalu.v2i64.v2i64\")\n-        },\n-        \"pmax_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vpmaxs.v8i8\")\n-        },\n-        \"pmax_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vpmaxu.v8i8\")\n-        },\n-        \"pmax_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vpmaxs.v4i16\")\n-        },\n-        \"pmax_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vpmaxu.v4i16\")\n-        },\n-        \"pmax_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vpmaxs.v2i32\")\n-        },\n-        \"pmax_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vpmaxu.v2i32\")\n-        },\n-        \"pmax_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x2, &::F32x2]; &INPUTS },\n-            output: &::F32x2,\n-            definition: Named(\"llvm.arm.neon.vpmaxf.v2f32\")\n-        },\n-        \"pmin_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vpmins.v8i8\")\n-        },\n-        \"pmin_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vpminu.v8i8\")\n-        },\n-        \"pmin_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x4, &::I16x4]; &INPUTS },\n-            output: &::I16x4,\n-            definition: Named(\"llvm.arm.neon.vpmins.v4i16\")\n-        },\n-        \"pmin_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x4, &::U16x4]; &INPUTS },\n-            output: &::U16x4,\n-            definition: Named(\"llvm.arm.neon.vpminu.v4i16\")\n-        },\n-        \"pmin_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x2, &::I32x2]; &INPUTS },\n-            output: &::I32x2,\n-            definition: Named(\"llvm.arm.neon.vpmins.v2i32\")\n-        },\n-        \"pmin_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x2, &::U32x2]; &INPUTS },\n-            output: &::U32x2,\n-            definition: Named(\"llvm.arm.neon.vpminu.v2i32\")\n-        },\n-        \"pmin_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x2, &::F32x2]; &INPUTS },\n-            output: &::F32x2,\n-            definition: Named(\"llvm.arm.neon.vpminf.v2f32\")\n-        },\n-        \"pminq_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.arm.neon.vpmins.v16i8\")\n-        },\n-        \"pminq_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.arm.neon.vpminu.v16i8\")\n-        },\n-        \"pminq_s16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.arm.neon.vpmins.v8i16\")\n-        },\n-        \"pminq_u16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.arm.neon.vpminu.v8i16\")\n-        },\n-        \"pminq_s32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.arm.neon.vpmins.v4i32\")\n-        },\n-        \"pminq_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.arm.neon.vpminu.v4i32\")\n-        },\n-        \"pminq_f32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.arm.neon.vpminf.v4f32\")\n-        },\n-        \"tbl1_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x8, &::U8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vtbl1\")\n-        },\n-        \"tbl1_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vtbl1\")\n-        },\n-        \"tbx1_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I8x8, &::I8x8, &::U8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vtbx1\")\n-        },\n-        \"tbx1_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::U8x8, &::U8x8, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vtbx1\")\n-        },\n-        \"tbl2_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static AGG: Type = Type::Aggregate(true, { static PARTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &PARTS }); &AGG }, &::U8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vtbl2\")\n-        },\n-        \"tbl2_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static AGG: Type = Type::Aggregate(true, { static PARTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &PARTS }); &AGG }, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vtbl2\")\n-        },\n-        \"tbx2_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static AGG: Type = Type::Aggregate(true, { static PARTS: [&'static Type; 2] = [&::I8x8, &::I8x8]; &PARTS }); &AGG }, &::U8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vtbx2\")\n-        },\n-        \"tbx2_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static AGG: Type = Type::Aggregate(true, { static PARTS: [&'static Type; 2] = [&::U8x8, &::U8x8]; &PARTS }); &AGG }, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vtbx2\")\n-        },\n-        \"tbl3_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static AGG: Type = Type::Aggregate(true, { static PARTS: [&'static Type; 3] = [&::I8x8, &::I8x8, &::I8x8]; &PARTS }); &AGG }, &::U8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vtbl3\")\n-        },\n-        \"tbl3_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static AGG: Type = Type::Aggregate(true, { static PARTS: [&'static Type; 3] = [&::U8x8, &::U8x8, &::U8x8]; &PARTS }); &AGG }, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vtbl3\")\n-        },\n-        \"tbx3_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I8x8, { static AGG: Type = Type::Aggregate(true, { static PARTS: [&'static Type; 3] = [&::I8x8, &::I8x8, &::I8x8]; &PARTS }); &AGG }, &::U8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vtbx3\")\n-        },\n-        \"tbx3_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::U8x8, { static AGG: Type = Type::Aggregate(true, { static PARTS: [&'static Type; 3] = [&::U8x8, &::U8x8, &::U8x8]; &PARTS }); &AGG }, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vtbx3\")\n-        },\n-        \"tbl4_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static AGG: Type = Type::Aggregate(true, { static PARTS: [&'static Type; 4] = [&::I8x8, &::I8x8, &::I8x8, &::I8x8]; &PARTS }); &AGG }, &::U8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vtbl4\")\n-        },\n-        \"tbl4_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static AGG: Type = Type::Aggregate(true, { static PARTS: [&'static Type; 4] = [&::U8x8, &::U8x8, &::U8x8, &::U8x8]; &PARTS }); &AGG }, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vtbl4\")\n-        },\n-        \"tbx4_s8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I8x8, { static AGG: Type = Type::Aggregate(true, { static PARTS: [&'static Type; 4] = [&::I8x8, &::I8x8, &::I8x8, &::I8x8]; &PARTS }); &AGG }, &::U8x8]; &INPUTS },\n-            output: &::I8x8,\n-            definition: Named(\"llvm.arm.neon.vtbx4\")\n-        },\n-        \"tbx4_u8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::U8x8, { static AGG: Type = Type::Aggregate(true, { static PARTS: [&'static Type; 4] = [&::U8x8, &::U8x8, &::U8x8, &::U8x8]; &PARTS }); &AGG }, &::U8x8]; &INPUTS },\n-            output: &::U8x8,\n-            definition: Named(\"llvm.arm.neon.vtbx4\")\n-        },\n-        _ => return None,\n-    })\n-}"}, {"sha": "fd0f3a46b39cd49c0c7b9bc87eeeb5bc01eff79f", "filename": "src/librustc_platform_intrinsics/hexagon.rs", "status": "removed", "additions": 0, "deletions": 2924, "changes": 2924, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2Fhexagon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2Fhexagon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fhexagon.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41"}, {"sha": "9fbf168a118f72bfdc32fd41fb8dad5eaf01437c", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "removed", "additions": 0, "deletions": 124, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,124 +0,0 @@\n-#![allow(nonstandard_style)]\n-\n-#![feature(nll)]\n-\n-pub struct Intrinsic {\n-    pub inputs: &'static [&'static Type],\n-    pub output: &'static Type,\n-\n-    pub definition: IntrinsicDef,\n-}\n-\n-#[derive(Clone, Hash, Eq, PartialEq)]\n-pub enum Type {\n-    Void,\n-    Integer(/* signed */ bool, u8, /* llvm width */ u8),\n-    Float(u8),\n-    Pointer(&'static Type, Option<&'static Type>, /* const */ bool),\n-    Vector(&'static Type, Option<&'static Type>, u16),\n-    Aggregate(bool, &'static [&'static Type]),\n-}\n-\n-pub enum IntrinsicDef {\n-    Named(&'static str),\n-}\n-\n-static I8: Type = Type::Integer(true, 8, 8);\n-static I16: Type = Type::Integer(true, 16, 16);\n-static I32: Type = Type::Integer(true, 32, 32);\n-static I64: Type = Type::Integer(true, 64, 64);\n-static U8: Type = Type::Integer(false, 8, 8);\n-static U16: Type = Type::Integer(false, 16, 16);\n-static U32: Type = Type::Integer(false, 32, 32);\n-static U64: Type = Type::Integer(false, 64, 64);\n-static F32: Type = Type::Float(32);\n-static F64: Type = Type::Float(64);\n-\n-static I32_8: Type = Type::Integer(true, 32, 8);\n-\n-static I8x8: Type = Type::Vector(&I8, None, 8);\n-static U8x8: Type = Type::Vector(&U8, None, 8);\n-static I8x16: Type = Type::Vector(&I8, None, 16);\n-static U8x16: Type = Type::Vector(&U8, None, 16);\n-static I8x32: Type = Type::Vector(&I8, None, 32);\n-static U8x32: Type = Type::Vector(&U8, None, 32);\n-static I8x64: Type = Type::Vector(&I8, None, 64);\n-static U8x64: Type = Type::Vector(&U8, None, 64);\n-static I8x128: Type = Type::Vector(&I8, None, 128);\n-static U8x128: Type = Type::Vector(&U8, None, 128);\n-static I8x256: Type = Type::Vector(&I8, None, 256);\n-static U8x256: Type = Type::Vector(&U8, None, 256);\n-\n-static I16x4: Type = Type::Vector(&I16, None, 4);\n-static U16x4: Type = Type::Vector(&U16, None, 4);\n-static I16x8: Type = Type::Vector(&I16, None, 8);\n-static U16x8: Type = Type::Vector(&U16, None, 8);\n-static I16x16: Type = Type::Vector(&I16, None, 16);\n-static U16x16: Type = Type::Vector(&U16, None, 16);\n-static I16x32: Type = Type::Vector(&I16, None, 32);\n-static U16x32: Type = Type::Vector(&U16, None, 32);\n-static I16x64: Type = Type::Vector(&I16, None, 64);\n-static U16x64: Type = Type::Vector(&U16, None, 64);\n-static I16x128: Type = Type::Vector(&I16, None, 128);\n-static U16x128: Type = Type::Vector(&U16, None, 128);\n-\n-static I32x2: Type = Type::Vector(&I32, None, 2);\n-static U32x2: Type = Type::Vector(&U32, None, 2);\n-static I32x4: Type = Type::Vector(&I32, None, 4);\n-static U32x4: Type = Type::Vector(&U32, None, 4);\n-static I32x8: Type = Type::Vector(&I32, None, 8);\n-static U32x8: Type = Type::Vector(&U32, None, 8);\n-static I32x16: Type = Type::Vector(&I32, None, 16);\n-static U32x16: Type = Type::Vector(&U32, None, 16);\n-static I32x32: Type = Type::Vector(&I32, None, 32);\n-static U32x32: Type = Type::Vector(&U32, None, 32);\n-static I32x64: Type = Type::Vector(&I32, None, 64);\n-static U32x64: Type = Type::Vector(&U32, None, 64);\n-\n-static I64x1: Type = Type::Vector(&I64, None, 1);\n-static U64x1: Type = Type::Vector(&U64, None, 1);\n-static I64x2: Type = Type::Vector(&I64, None, 2);\n-static U64x2: Type = Type::Vector(&U64, None, 2);\n-static I64x4: Type = Type::Vector(&I64, None, 4);\n-static U64x4: Type = Type::Vector(&U64, None, 4);\n-\n-static F32x2: Type = Type::Vector(&F32, None, 2);\n-static F32x4: Type = Type::Vector(&F32, None, 4);\n-static F32x8: Type = Type::Vector(&F32, None, 8);\n-static F64x1: Type = Type::Vector(&F64, None, 1);\n-static F64x2: Type = Type::Vector(&F64, None, 2);\n-static F64x4: Type = Type::Vector(&F64, None, 4);\n-\n-static I32x4_F32: Type = Type::Vector(&I32, Some(&F32), 4);\n-static I32x8_F32: Type = Type::Vector(&I32, Some(&F32), 8);\n-static I64x2_F64: Type = Type::Vector(&I64, Some(&F64), 2);\n-static I64x4_F64: Type = Type::Vector(&I64, Some(&F64), 4);\n-\n-static VOID: Type = Type::Void;\n-\n-mod x86;\n-mod arm;\n-mod aarch64;\n-mod nvptx;\n-mod hexagon;\n-mod powerpc;\n-\n-impl Intrinsic {\n-    pub fn find(name: &str) -> Option<Intrinsic> {\n-        if name.starts_with(\"x86_\") {\n-            x86::find(name)\n-        } else if name.starts_with(\"arm_\") {\n-            arm::find(name)\n-        } else if name.starts_with(\"aarch64_\") {\n-            aarch64::find(name)\n-        } else if name.starts_with(\"nvptx_\") {\n-            nvptx::find(name)\n-        } else if name.starts_with(\"Q6_\") {\n-            hexagon::find(name)\n-        } else if name.starts_with(\"powerpc_\") {\n-            powerpc::find(name)\n-        } else {\n-            None\n-        }\n-    }\n-}"}, {"sha": "41278463bae770466dacbea69cd7df97820c0001", "filename": "src/librustc_platform_intrinsics/nvptx.rs", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2Fnvptx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2Fnvptx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fnvptx.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,79 +0,0 @@\n-// DO NOT EDIT: autogenerated by etc/platform-intrinsics/generator.py\n-// ignore-tidy-linelength\n-\n-#![allow(unused_imports)]\n-\n-use {Intrinsic, Type};\n-use IntrinsicDef::Named;\n-\n-pub fn find(name: &str) -> Option<Intrinsic> {\n-    if !name.starts_with(\"nvptx\") { return None }\n-    Some(match &name[\"nvptx\".len()..] {\n-        \"_syncthreads\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.cuda.syncthreads\")\n-        },\n-        \"_block_dim_x\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.nvvm.read.ptx.sreg.ntid.x\")\n-        },\n-        \"_block_dim_y\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.nvvm.read.ptx.sreg.ntid.y\")\n-        },\n-        \"_block_dim_z\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.nvvm.read.ptx.sreg.ntid.z\")\n-        },\n-        \"_block_idx_x\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.nvvm.read.ptx.sreg.ctaid.x\")\n-        },\n-        \"_block_idx_y\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.nvvm.read.ptx.sreg.ctaid.y\")\n-        },\n-        \"_block_idx_z\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.nvvm.read.ptx.sreg.ctaid.z\")\n-        },\n-        \"_grid_dim_x\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.nvvm.read.ptx.sreg.nctaid.x\")\n-        },\n-        \"_grid_dim_y\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.nvvm.read.ptx.sreg.nctaid.y\")\n-        },\n-        \"_grid_dim_z\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.nvvm.read.ptx.sreg.nctaid.z\")\n-        },\n-        \"_thread_idx_x\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.nvvm.read.ptx.sreg.tid.x\")\n-        },\n-        \"_thread_idx_y\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.nvvm.read.ptx.sreg.tid.y\")\n-        },\n-        \"_thread_idx_z\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.nvvm.read.ptx.sreg.tid.z\")\n-        },\n-        _ => return None,\n-    })\n-}"}, {"sha": "d745090107c62bb25c1df92ad2d1230d2e06de24", "filename": "src/librustc_platform_intrinsics/powerpc.rs", "status": "removed", "additions": 0, "deletions": 439, "changes": 439, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2Fpowerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2Fpowerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fpowerpc.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,439 +0,0 @@\n-// DO NOT EDIT: autogenerated by etc/platform-intrinsics/generator.py\n-// ignore-tidy-linelength\n-\n-#![allow(unused_imports)]\n-\n-use {Intrinsic, Type};\n-use IntrinsicDef::Named;\n-\n-pub fn find(name: &str) -> Option<Intrinsic> {\n-    if !name.starts_with(\"powerpc\") { return None }\n-    Some(match &name[\"powerpc\".len()..] {\n-        \"_vec_perm\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I32x4, &::I32x4, &::I8x16]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vperm\")\n-        },\n-        \"_vec_mradds\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I16x8, &::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vmhraddshs\")\n-        },\n-        \"_vec_cmpb\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vcmpbfp\")\n-        },\n-        \"_vec_cmpeqb\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.ppc.altivec.vcmpequb\")\n-        },\n-        \"_vec_cmpeqh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vcmpequh\")\n-        },\n-        \"_vec_cmpeqw\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vcmpequw\")\n-        },\n-        \"_vec_cmpgtub\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.ppc.altivec.vcmpgtub\")\n-        },\n-        \"_vec_cmpgtuh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vcmpgtuh\")\n-        },\n-        \"_vec_cmpgtuw\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vcmpgtuw\")\n-        },\n-        \"_vec_cmpgtsb\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.ppc.altivec.vcmpgtsb\")\n-        },\n-        \"_vec_cmpgtsh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vcmpgtsh\")\n-        },\n-        \"_vec_cmpgtsw\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vcmpgtsw\")\n-        },\n-        \"_vec_maxsb\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.ppc.altivec.vmaxsb\")\n-        },\n-        \"_vec_maxub\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.ppc.altivec.vmaxub\")\n-        },\n-        \"_vec_maxsh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vmaxsh\")\n-        },\n-        \"_vec_maxuh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.ppc.altivec.vmaxuh\")\n-        },\n-        \"_vec_maxsw\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vmaxsw\")\n-        },\n-        \"_vec_maxuw\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.ppc.altivec.vmaxuw\")\n-        },\n-        \"_vec_minsb\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.ppc.altivec.vminsb\")\n-        },\n-        \"_vec_minub\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.ppc.altivec.vminub\")\n-        },\n-        \"_vec_minsh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vminsh\")\n-        },\n-        \"_vec_minuh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.ppc.altivec.vminuh\")\n-        },\n-        \"_vec_minsw\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vminsw\")\n-        },\n-        \"_vec_minuw\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.ppc.altivec.vminuw\")\n-        },\n-        \"_vec_subsbs\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.ppc.altivec.vsubsbs\")\n-        },\n-        \"_vec_sububs\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.ppc.altivec.vsububs\")\n-        },\n-        \"_vec_subshs\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vsubshs\")\n-        },\n-        \"_vec_subuhs\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.ppc.altivec.vsubuhs\")\n-        },\n-        \"_vec_subsws\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vsubsws\")\n-        },\n-        \"_vec_subuws\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.ppc.altivec.vsubuws\")\n-        },\n-        \"_vec_subc\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.ppc.altivec.vsubcuw\")\n-        },\n-        \"_vec_addsbs\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.ppc.altivec.vaddsbs\")\n-        },\n-        \"_vec_addubs\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.ppc.altivec.vaddubs\")\n-        },\n-        \"_vec_addshs\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vaddshs\")\n-        },\n-        \"_vec_adduhs\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.ppc.altivec.vadduhs\")\n-        },\n-        \"_vec_addsws\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vaddsws\")\n-        },\n-        \"_vec_adduws\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.ppc.altivec.vadduws\")\n-        },\n-        \"_vec_addc\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.ppc.altivec.vaddcuw\")\n-        },\n-        \"_vec_mulesb\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vmulesb\")\n-        },\n-        \"_vec_muleub\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.ppc.altivec.vmuleub\")\n-        },\n-        \"_vec_mulesh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vmulesh\")\n-        },\n-        \"_vec_muleuh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.ppc.altivec.vmuleuh\")\n-        },\n-        \"_vec_mulosb\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vmulosb\")\n-        },\n-        \"_vec_muloub\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.ppc.altivec.vmuloub\")\n-        },\n-        \"_vec_mulosh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vmulosh\")\n-        },\n-        \"_vec_mulouh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.ppc.altivec.vmulouh\")\n-        },\n-        \"_vec_avgsb\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.ppc.altivec.vavgsb\")\n-        },\n-        \"_vec_avgub\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.ppc.altivec.vavgub\")\n-        },\n-        \"_vec_avgsh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vavgsh\")\n-        },\n-        \"_vec_avguh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.ppc.altivec.vavguh\")\n-        },\n-        \"_vec_avgsw\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vavgsw\")\n-        },\n-        \"_vec_avguw\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.ppc.altivec.vavguw\")\n-        },\n-        \"_vec_packssh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.ppc.altivec.vpkshss\")\n-        },\n-        \"_vec_packsuh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.ppc.altivec.vpkuhus\")\n-        },\n-        \"_vec_packssw\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vpkswss\")\n-        },\n-        \"_vec_packsuw\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.ppc.altivec.vpkuwus\")\n-        },\n-        \"_vec_packsush\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.ppc.altivec.vpkshus\")\n-        },\n-        \"_vec_packsusw\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.ppc.altivec.vpkswus\")\n-        },\n-        \"_vec_packpx\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vpkpx\")\n-        },\n-        \"_vec_unpacklsb\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x16]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vupklsb\")\n-        },\n-        \"_vec_unpacklsh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x8]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vupklsh\")\n-        },\n-        \"_vec_unpackhsb\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x16]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vupkhsb\")\n-        },\n-        \"_vec_unpackhsh\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x8]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vupkhsh\")\n-        },\n-        \"_vec_madds\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I16x8, &::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.ppc.altivec.vmhaddshs\")\n-        },\n-        \"_vec_msumubm\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::U8x16, &::U8x16, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.ppc.altivec.vmsumubm\")\n-        },\n-        \"_vec_msumuhm\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::U16x8, &::U16x8, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.ppc.altivec.vmsumuhm\")\n-        },\n-        \"_vec_msummbm\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I8x16, &::U8x16, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vmsummbm\")\n-        },\n-        \"_vec_msumshm\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I16x8, &::I16x8, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vmsumshm\")\n-        },\n-        \"_vec_msumshs\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I16x8, &::I16x8, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vmsumshs\")\n-        },\n-        \"_vec_msumuhs\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::U16x8, &::U16x8, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.ppc.altivec.vmsumuhs\")\n-        },\n-        \"_vec_sum2s\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vsum2sws\")\n-        },\n-        \"_vec_sum4sbs\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vsum4sbs\")\n-        },\n-        \"_vec_sum4ubs\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.ppc.altivec.vsum4ubs\")\n-        },\n-        \"_vec_sum4shs\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vsum4shs\")\n-        },\n-        \"_vec_sums\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.ppc.altivec.vsumsws\")\n-        },\n-        \"_vec_madd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x4, &::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.ppc.altivec.vmaddfp\")\n-        },\n-        \"_vec_nmsub\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x4, &::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.ppc.altivec.vnmsubfp\")\n-        },\n-        \"_vec_expte\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.ppc.altivec.vexptefp\")\n-        },\n-        \"_vec_floor\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.ppc.altivec.vrfim\")\n-        },\n-        \"_vec_ceil\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.ppc.altivec.vrfip\")\n-        },\n-        \"_vec_round\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.ppc.altivec.vrfin\")\n-        },\n-        \"_vec_trunc\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.ppc.altivec.vrfiz\")\n-        },\n-        \"_vec_loge\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.ppc.altivec.vlogefp\")\n-        },\n-        \"_vec_re\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.ppc.altivec.vrefp\")\n-        },\n-        \"_vec_rsqrte\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.ppc.altivec.vrsqrtefp\")\n-        },\n-        _ => return None,\n-    })\n-}"}, {"sha": "3f1ba912eee63d285f23463e8bd110989498f719", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "removed", "additions": 0, "deletions": 1369, "changes": 1369, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,1369 +0,0 @@\n-// DO NOT EDIT: autogenerated by etc/platform-intrinsics/generator.py\n-// ignore-tidy-linelength\n-\n-#![allow(unused_imports)]\n-\n-use {Intrinsic, Type};\n-use IntrinsicDef::Named;\n-\n-pub fn find(name: &str) -> Option<Intrinsic> {\n-    if !name.starts_with(\"x86\") { return None }\n-    Some(match &name[\"x86\".len()..] {\n-        \"_mm256_abs_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x32]; &INPUTS },\n-            output: &::I8x32,\n-            definition: Named(\"llvm.x86.avx2.pabs.b\")\n-        },\n-        \"_mm256_abs_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x16]; &INPUTS },\n-            output: &::I16x16,\n-            definition: Named(\"llvm.x86.avx2.pabs.w\")\n-        },\n-        \"_mm256_abs_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x8]; &INPUTS },\n-            output: &::I32x8,\n-            definition: Named(\"llvm.x86.avx2.pabs.d\")\n-        },\n-        \"_mm256_adds_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x32, &::I8x32]; &INPUTS },\n-            output: &::I8x32,\n-            definition: Named(\"llvm.x86.avx2.padds.b\")\n-        },\n-        \"_mm256_adds_epu8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x32, &::U8x32]; &INPUTS },\n-            output: &::U8x32,\n-            definition: Named(\"llvm.x86.avx2.paddus.b\")\n-        },\n-        \"_mm256_adds_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x16, &::I16x16]; &INPUTS },\n-            output: &::I16x16,\n-            definition: Named(\"llvm.x86.avx2.padds.w\")\n-        },\n-        \"_mm256_adds_epu16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x16, &::U16x16]; &INPUTS },\n-            output: &::U16x16,\n-            definition: Named(\"llvm.x86.avx2.paddus.w\")\n-        },\n-        \"_mm256_avg_epu8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x32, &::U8x32]; &INPUTS },\n-            output: &::U8x32,\n-            definition: Named(\"llvm.x86.avx2.pavg.b\")\n-        },\n-        \"_mm256_avg_epu16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x16, &::U16x16]; &INPUTS },\n-            output: &::U16x16,\n-            definition: Named(\"llvm.x86.avx2.pavg.w\")\n-        },\n-        \"_mm256_hadd_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x16, &::I16x16]; &INPUTS },\n-            output: &::I16x16,\n-            definition: Named(\"llvm.x86.avx2.phadd.w\")\n-        },\n-        \"_mm256_hadd_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x8, &::I32x8]; &INPUTS },\n-            output: &::I32x8,\n-            definition: Named(\"llvm.x86.avx2.phadd.d\")\n-        },\n-        \"_mm256_hadds_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x16, &::I16x16]; &INPUTS },\n-            output: &::I16x16,\n-            definition: Named(\"llvm.x86.avx2.phadd.sw\")\n-        },\n-        \"_mm256_hsub_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x16, &::I16x16]; &INPUTS },\n-            output: &::I16x16,\n-            definition: Named(\"llvm.x86.avx2.phsub.w\")\n-        },\n-        \"_mm256_hsub_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x8, &::I32x8]; &INPUTS },\n-            output: &::I32x8,\n-            definition: Named(\"llvm.x86.avx2.phsub.d\")\n-        },\n-        \"_mm256_hsubs_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x16, &::I16x16]; &INPUTS },\n-            output: &::I16x16,\n-            definition: Named(\"llvm.x86.avx2.phsub.sw\")\n-        },\n-        \"_mm256_madd_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x16, &::I16x16]; &INPUTS },\n-            output: &::I32x8,\n-            definition: Named(\"llvm.x86.avx2.pmadd.wd\")\n-        },\n-        \"_mm256_maddubs_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x32, &::I8x32]; &INPUTS },\n-            output: &::I16x16,\n-            definition: Named(\"llvm.x86.avx2.pmadd.ub.sw\")\n-        },\n-        \"_mm_mask_i32gather_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::I32x4, { static PTR: Type = Type::Pointer(&::I32, Some(&::I8), true); &PTR }, &::I32x4, &::I32x4, &::I32_8]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.x86.avx2.gather.d.d\")\n-        },\n-        \"_mm_mask_i32gather_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::F32x4, { static PTR: Type = Type::Pointer(&::F32, Some(&::I8), true); &PTR }, &::I32x4, &::I32x4_F32, &::I32_8]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.avx2.gather.d.ps\")\n-        },\n-        \"_mm256_mask_i32gather_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::I32x8, { static PTR: Type = Type::Pointer(&::I32, Some(&::I8), true); &PTR }, &::I32x8, &::I32x8, &::I32_8]; &INPUTS },\n-            output: &::I32x8,\n-            definition: Named(\"llvm.x86.avx2.gather.d.d.256\")\n-        },\n-        \"_mm256_mask_i32gather_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::F32x8, { static PTR: Type = Type::Pointer(&::F32, Some(&::I8), true); &PTR }, &::I32x8, &::I32x8_F32, &::I32_8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx2.gather.d.ps.256\")\n-        },\n-        \"_mm_mask_i32gather_epi64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::I64x2, { static PTR: Type = Type::Pointer(&::I64, Some(&::I8), true); &PTR }, &::I32x4, &::I64x2, &::I32_8]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.x86.avx2.gather.d.q\")\n-        },\n-        \"_mm_mask_i32gather_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::F64x2, { static PTR: Type = Type::Pointer(&::F64, Some(&::I8), true); &PTR }, &::I32x4, &::I64x2_F64, &::I32_8]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.avx2.gather.d.pd\")\n-        },\n-        \"_mm256_mask_i32gather_epi64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::I64x4, { static PTR: Type = Type::Pointer(&::I64, Some(&::I8), true); &PTR }, &::I32x4, &::I64x4, &::I32_8]; &INPUTS },\n-            output: &::I64x4,\n-            definition: Named(\"llvm.x86.avx2.gather.d.q.256\")\n-        },\n-        \"_mm256_mask_i32gather_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::F64x4, { static PTR: Type = Type::Pointer(&::F64, Some(&::I8), true); &PTR }, &::I32x4, &::I64x4_F64, &::I32_8]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.avx2.gather.d.pd.256\")\n-        },\n-        \"_mm_mask_i64gather_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::I32x4, { static PTR: Type = Type::Pointer(&::I32, Some(&::I8), true); &PTR }, &::I64x2, &::I32x4, &::I32_8]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.x86.avx2.gather.q.d\")\n-        },\n-        \"_mm_mask_i64gather_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::F32x4, { static PTR: Type = Type::Pointer(&::F32, Some(&::I8), true); &PTR }, &::I64x2, &::I32x4_F32, &::I32_8]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.avx2.gather.q.ps\")\n-        },\n-        \"_mm256_mask_i64gather_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::I32x4, { static PTR: Type = Type::Pointer(&::I32, Some(&::I8), true); &PTR }, &::I64x4, &::I32x4, &::I32_8]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.x86.avx2.gather.q.d\")\n-        },\n-        \"_mm256_mask_i64gather_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::F32x4, { static PTR: Type = Type::Pointer(&::F32, Some(&::I8), true); &PTR }, &::I64x4, &::I32x4_F32, &::I32_8]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.avx2.gather.q.ps\")\n-        },\n-        \"_mm_mask_i64gather_epi64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::I64x2, { static PTR: Type = Type::Pointer(&::I64, Some(&::I8), true); &PTR }, &::I64x2, &::I64x2, &::I32_8]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.x86.avx2.gather.q.q\")\n-        },\n-        \"_mm_mask_i64gather_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::F64x2, { static PTR: Type = Type::Pointer(&::F64, Some(&::I8), true); &PTR }, &::I64x2, &::I64x2_F64, &::I32_8]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.avx2.gather.q.pd\")\n-        },\n-        \"_mm256_mask_i64gather_epi64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::I64x4, { static PTR: Type = Type::Pointer(&::I64, Some(&::I8), true); &PTR }, &::I64x4, &::I64x4, &::I32_8]; &INPUTS },\n-            output: &::I64x4,\n-            definition: Named(\"llvm.x86.avx2.gather.q.q.256\")\n-        },\n-        \"_mm256_mask_i64gather_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::F64x4, { static PTR: Type = Type::Pointer(&::F64, Some(&::I8), true); &PTR }, &::I64x4, &::I64x4_F64, &::I32_8]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.avx2.gather.q.pd.256\")\n-        },\n-        \"_mm_maskload_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static PTR: Type = Type::Pointer(&::I32x4, Some(&::I8), true); &PTR }, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.x86.avx2.maskload.d\")\n-        },\n-        \"_mm_maskload_epi64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static PTR: Type = Type::Pointer(&::I64x2, Some(&::I8), true); &PTR }, &::I64x2]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.x86.avx2.maskload.q\")\n-        },\n-        \"_mm256_maskload_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static PTR: Type = Type::Pointer(&::I32x8, Some(&::I8), true); &PTR }, &::I32x8]; &INPUTS },\n-            output: &::I32x8,\n-            definition: Named(\"llvm.x86.avx2.maskload.d.256\")\n-        },\n-        \"_mm256_maskload_epi64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static PTR: Type = Type::Pointer(&::I64x4, Some(&::I8), true); &PTR }, &::I64x4]; &INPUTS },\n-            output: &::I64x4,\n-            definition: Named(\"llvm.x86.avx2.maskload.q.256\")\n-        },\n-        \"_mm_maskstore_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [{ static PTR: Type = Type::Pointer(&::I32, Some(&::I8), false); &PTR }, &::I32x4, &::I32x4]; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.avx2.maskstore.d\")\n-        },\n-        \"_mm_maskstore_epi64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [{ static PTR: Type = Type::Pointer(&::I64, Some(&::I8), false); &PTR }, &::I64x2, &::I64x2]; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.avx2.maskstore.q\")\n-        },\n-        \"_mm256_maskstore_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [{ static PTR: Type = Type::Pointer(&::I32, Some(&::I8), false); &PTR }, &::I32x8, &::I32x8]; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.avx2.maskstore.d.256\")\n-        },\n-        \"_mm256_maskstore_epi64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [{ static PTR: Type = Type::Pointer(&::I64, Some(&::I8), false); &PTR }, &::I64x4, &::I64x4]; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.avx2.maskstore.q.256\")\n-        },\n-        \"_mm256_max_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x32, &::I8x32]; &INPUTS },\n-            output: &::I8x32,\n-            definition: Named(\"llvm.x86.avx2.pmaxs.b\")\n-        },\n-        \"_mm256_max_epu8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x32, &::U8x32]; &INPUTS },\n-            output: &::U8x32,\n-            definition: Named(\"llvm.x86.avx2.pmaxu.b\")\n-        },\n-        \"_mm256_max_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x16, &::I16x16]; &INPUTS },\n-            output: &::I16x16,\n-            definition: Named(\"llvm.x86.avx2.pmaxs.w\")\n-        },\n-        \"_mm256_max_epu16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x16, &::U16x16]; &INPUTS },\n-            output: &::U16x16,\n-            definition: Named(\"llvm.x86.avx2.pmaxu.w\")\n-        },\n-        \"_mm256_max_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x8, &::I32x8]; &INPUTS },\n-            output: &::I32x8,\n-            definition: Named(\"llvm.x86.avx2.pmaxs.d\")\n-        },\n-        \"_mm256_max_epu32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x8, &::U32x8]; &INPUTS },\n-            output: &::U32x8,\n-            definition: Named(\"llvm.x86.avx2.pmaxu.d\")\n-        },\n-        \"_mm256_min_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x32, &::I8x32]; &INPUTS },\n-            output: &::I8x32,\n-            definition: Named(\"llvm.x86.avx2.pmins.b\")\n-        },\n-        \"_mm256_min_epu8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x32, &::U8x32]; &INPUTS },\n-            output: &::U8x32,\n-            definition: Named(\"llvm.x86.avx2.pminu.b\")\n-        },\n-        \"_mm256_min_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x16, &::I16x16]; &INPUTS },\n-            output: &::I16x16,\n-            definition: Named(\"llvm.x86.avx2.pmins.w\")\n-        },\n-        \"_mm256_min_epu16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x16, &::U16x16]; &INPUTS },\n-            output: &::U16x16,\n-            definition: Named(\"llvm.x86.avx2.pminu.w\")\n-        },\n-        \"_mm256_min_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x8, &::I32x8]; &INPUTS },\n-            output: &::I32x8,\n-            definition: Named(\"llvm.x86.avx2.pmins.d\")\n-        },\n-        \"_mm256_min_epu32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x8, &::U32x8]; &INPUTS },\n-            output: &::U32x8,\n-            definition: Named(\"llvm.x86.avx2.pminu.d\")\n-        },\n-        \"_mm256_movemask_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x32]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx2.pmovmskb\")\n-        },\n-        \"_mm256_mpsadbw_epu8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::U8x32, &::U8x32, &::I32_8]; &INPUTS },\n-            output: &::U16x16,\n-            definition: Named(\"llvm.x86.avx2.mpsadbw\")\n-        },\n-        \"_mm256_mul_epi64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x8, &::I32x8]; &INPUTS },\n-            output: &::I64x4,\n-            definition: Named(\"llvm.x86.avx2.pmulq.dq\")\n-        },\n-        \"_mm256_mul_epu64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x8, &::U32x8]; &INPUTS },\n-            output: &::U64x4,\n-            definition: Named(\"llvm.x86.avx2.pmulq.dq\")\n-        },\n-        \"_mm256_mulhi_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x16, &::I16x16]; &INPUTS },\n-            output: &::I16x16,\n-            definition: Named(\"llvm.x86.avx2.pmulhw.w\")\n-        },\n-        \"_mm256_mulhi_epu16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x16, &::U16x16]; &INPUTS },\n-            output: &::U16x16,\n-            definition: Named(\"llvm.x86.avx2.pmulhw.w\")\n-        },\n-        \"_mm256_mulhrs_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x16, &::I16x16]; &INPUTS },\n-            output: &::I16x16,\n-            definition: Named(\"llvm.x86.avx2.pmul.hr.sw\")\n-        },\n-        \"_mm256_packs_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x16, &::I16x16]; &INPUTS },\n-            output: &::I8x32,\n-            definition: Named(\"llvm.x86.avx2.packsswb\")\n-        },\n-        \"_mm256_packus_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x16, &::I16x16]; &INPUTS },\n-            output: &::U8x32,\n-            definition: Named(\"llvm.x86.avx2.packuswb\")\n-        },\n-        \"_mm256_packs_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x8, &::I32x8]; &INPUTS },\n-            output: &::I16x16,\n-            definition: Named(\"llvm.x86.avx2.packssdw\")\n-        },\n-        \"_mm256_packus_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x8, &::I32x8]; &INPUTS },\n-            output: &::U16x16,\n-            definition: Named(\"llvm.x86.avx2.packusdw\")\n-        },\n-        \"_mm256_permutevar8x32_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x8, &::I32x8]; &INPUTS },\n-            output: &::I32x8,\n-            definition: Named(\"llvm.x86.avx2.permd\")\n-        },\n-        \"_mm256_permutevar8x32_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x8, &::I32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx2.permps\")\n-        },\n-        \"_mm256_sad_epu8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x32, &::U8x32]; &INPUTS },\n-            output: &::U64x4,\n-            definition: Named(\"llvm.x86.avx2.psad.bw\")\n-        },\n-        \"_mm256_shuffle_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x32, &::I8x32]; &INPUTS },\n-            output: &::I8x32,\n-            definition: Named(\"llvm.x86.avx2.pshuf.b\")\n-        },\n-        \"_mm256_sign_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x32, &::I8x32]; &INPUTS },\n-            output: &::I8x32,\n-            definition: Named(\"llvm.x86.avx2.psign.b\")\n-        },\n-        \"_mm256_sign_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x16, &::I16x16]; &INPUTS },\n-            output: &::I16x16,\n-            definition: Named(\"llvm.x86.avx2.psign.w\")\n-        },\n-        \"_mm256_sign_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x8, &::I32x8]; &INPUTS },\n-            output: &::I32x8,\n-            definition: Named(\"llvm.x86.avx2.psign.d\")\n-        },\n-        \"_mm256_subs_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x32, &::I8x32]; &INPUTS },\n-            output: &::I8x32,\n-            definition: Named(\"llvm.x86.avx2.psubs.b\")\n-        },\n-        \"_mm256_subs_epu8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x32, &::U8x32]; &INPUTS },\n-            output: &::U8x32,\n-            definition: Named(\"llvm.x86.avx2.psubus.b\")\n-        },\n-        \"_mm256_subs_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x16, &::I16x16]; &INPUTS },\n-            output: &::I16x16,\n-            definition: Named(\"llvm.x86.avx2.psubs.w\")\n-        },\n-        \"_mm256_subs_epu16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x16, &::U16x16]; &INPUTS },\n-            output: &::U16x16,\n-            definition: Named(\"llvm.x86.avx2.psubus.w\")\n-        },\n-        \"_mm256_addsub_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x8, &::F32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx.addsub.ps.256\")\n-        },\n-        \"_mm256_addsub_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x4, &::F64x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.avx.addsub.pd.256\")\n-        },\n-        \"_mm256_blendv_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x8, &::F32x8, &::F32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx.blendv.ps.256\")\n-        },\n-        \"_mm256_blendv_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F64x4, &::F64x4, &::F64x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.avx.blendv.pd.256\")\n-        },\n-        \"_mm256_broadcast_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [{ static PTR: Type = Type::Pointer(&::I8, None, true); &PTR }]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx.vbroadcastf128.ps.256\")\n-        },\n-        \"_mm256_broadcast_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [{ static PTR: Type = Type::Pointer(&::I8, None, true); &PTR }]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.avx.vbroadcastf128.pd.256\")\n-        },\n-        \"_mm256_cmp_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x8, &::F32x8, &::I8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx.cmp.ps.256\")\n-        },\n-        \"_mm256_cmp_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F64x4, &::F64x4, &::I8]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.avx.cmp.pd.256\")\n-        },\n-        \"_mm256_cvtepi32_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.avx.cvtdq2.pd.256\")\n-        },\n-        \"_mm256_cvtepi32_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx.cvtdq2.ps.256\")\n-        },\n-        \"_mm256_cvtpd_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F64x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.x86.avx.cvt.pd2dq.256\")\n-        },\n-        \"_mm256_cvtpd_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F64x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.avx.cvt.pd2.ps.256\")\n-        },\n-        \"_mm256_cvtps_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x8]; &INPUTS },\n-            output: &::I32x8,\n-            definition: Named(\"llvm.x86.avx.cvt.ps2dq.256\")\n-        },\n-        \"_mm256_cvtps_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.avx.cvt.ps2.pd.256\")\n-        },\n-        \"_mm256_cvttpd_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F64x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.x86.avx.cvtt.pd2dq.256\")\n-        },\n-        \"_mm256_cvttps_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x8]; &INPUTS },\n-            output: &::I32x8,\n-            definition: Named(\"llvm.x86.avx.cvtt.ps2dq.256\")\n-        },\n-        \"_mm256_dp_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x8, &::F32x8, &::I32_8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx.dp.ps.256\")\n-        },\n-        \"_mm256_hadd_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x8, &::F32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx.hadd.ps.256\")\n-        },\n-        \"_mm256_hadd_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x4, &::F64x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.avx.hadd.pd.256\")\n-        },\n-        \"_mm256_hsub_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x8, &::F32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx.hsub.ps.256\")\n-        },\n-        \"_mm256_hsub_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x4, &::F64x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.avx.hsub.pd.256\")\n-        },\n-        \"_mm256_max_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x8, &::F32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx.max.ps.256\")\n-        },\n-        \"_mm256_max_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x4, &::F64x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.avx.max.pd.256\")\n-        },\n-        \"_mm_maskload_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static PTR: Type = Type::Pointer(&::F32, Some(&::I8), true); &PTR }, &::I32x4_F32]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.avx.maskload.ps\")\n-        },\n-        \"_mm_maskload_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static PTR: Type = Type::Pointer(&::F64, Some(&::I8), true); &PTR }, &::I64x2_F64]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.avx.maskload.pd\")\n-        },\n-        \"_mm256_maskload_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static PTR: Type = Type::Pointer(&::F32, Some(&::I8), true); &PTR }, &::I32x8_F32]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx.maskload.ps.256\")\n-        },\n-        \"_mm256_maskload_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static PTR: Type = Type::Pointer(&::F64, Some(&::I8), true); &PTR }, &::I64x4_F64]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.avx.maskload.pd.256\")\n-        },\n-        \"_mm_maskstore_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [{ static PTR: Type = Type::Pointer(&::F32, Some(&::I8), false); &PTR }, &::I32x4_F32, &::F32x4]; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.avx.maskstore.ps\")\n-        },\n-        \"_mm_maskstore_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [{ static PTR: Type = Type::Pointer(&::F64, Some(&::I8), false); &PTR }, &::I64x2_F64, &::F64x2]; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.avx.maskstore.pd\")\n-        },\n-        \"_mm256_maskstore_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [{ static PTR: Type = Type::Pointer(&::F32, Some(&::I8), false); &PTR }, &::I32x8_F32, &::F32x8]; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.avx.maskstore.ps.256\")\n-        },\n-        \"_mm256_maskstore_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [{ static PTR: Type = Type::Pointer(&::F64, Some(&::I8), false); &PTR }, &::I64x4_F64, &::F64x4]; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.avx.maskstore.pd.256\")\n-        },\n-        \"_mm256_min_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x8, &::F32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx.min.ps.256\")\n-        },\n-        \"_mm256_min_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x4, &::F64x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.avx.min.pd.256\")\n-        },\n-        \"_mm256_movemask_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.movmsk.ps.256\")\n-        },\n-        \"_mm256_movemask_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F64x4]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.movmsk.pd.256\")\n-        },\n-        \"_mm_permutevar_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::I32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.avx.vpermilvar.ps\")\n-        },\n-        \"_mm_permutevar_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x2, &::I64x2]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.avx.vpermilvar.pd\")\n-        },\n-        \"_mm256_permutevar_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x8, &::I32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx.vpermilvar.ps.256\")\n-        },\n-        \"_mm256_permutevar_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x4, &::I64x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.avx.vpermilvar.pd.256\")\n-        },\n-        \"_mm256_rcp_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx.rcp.ps.256\")\n-        },\n-        \"_mm256_rsqrt_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.avx.rsqrt.ps.256\")\n-        },\n-        \"_mm256_storeu_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static PTR: Type = Type::Pointer(&::F32x8, Some(&::U8), false); &PTR }, &::F32x8]; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.avx.storeu.ps.256\")\n-        },\n-        \"_mm256_storeu_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static PTR: Type = Type::Pointer(&::F64x4, Some(&::U8), false); &PTR }, &::F64x4]; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.avx.storeu.ps.256\")\n-        },\n-        \"_mm256_storeu_si256\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static PTR: Type = Type::Pointer(&::U8x32, Some(&::U8), false); &PTR }, &::U8x32]; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.avx.storeu.dq.256\")\n-        },\n-        \"_mm256_sqrt_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.sqrt.v8f32\")\n-        },\n-        \"_mm256_sqrt_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F64x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.sqrt.v4f64\")\n-        },\n-        \"_mm_testc_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.vtestc.ps\")\n-        },\n-        \"_mm256_testc_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x8, &::F32x8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.vtestc.ps.256\")\n-        },\n-        \"_mm_testc_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x2, &::F64x2]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.vtestc.pd\")\n-        },\n-        \"_mm256_testc_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x4, &::F64x4]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.vtestc.pd.256\")\n-        },\n-        \"_mm256_testc_si256\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x4, &::U64x4]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.ptestc.256\")\n-        },\n-        \"_mm_testnzc_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.vtestnzc.ps\")\n-        },\n-        \"_mm256_testnzc_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x8, &::F32x8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.vtestnzc.ps.256\")\n-        },\n-        \"_mm_testnzc_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x2, &::F64x2]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.vtestnzc.pd\")\n-        },\n-        \"_mm256_testnzc_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x4, &::F64x4]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.vtestnzc.pd.256\")\n-        },\n-        \"_mm256_testnzc_si256\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x4, &::U64x4]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.ptestnzc.256\")\n-        },\n-        \"_mm_testz_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.vtestz.ps\")\n-        },\n-        \"_mm256_testz_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x8, &::F32x8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.vtestz.ps.256\")\n-        },\n-        \"_mm_testz_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x2, &::F64x2]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.vtestz.pd\")\n-        },\n-        \"_mm256_testz_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x4, &::F64x4]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.vtestz.pd.256\")\n-        },\n-        \"_mm256_testz_si256\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x4, &::U64x4]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.avx.ptestz.256\")\n-        },\n-        \"_mm256_zeroall\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.avx.vzeroall\")\n-        },\n-        \"_mm256_zeroupper\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.avx.vzeroupper\")\n-        },\n-        \"_bmi2_bzhi_32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32, &::U32]; &INPUTS },\n-            output: &::U32,\n-            definition: Named(\"llvm.x86.bmi.bzhi.32\")\n-        },\n-        \"_bmi2_bzhi_64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64, &::U64]; &INPUTS },\n-            output: &::U64,\n-            definition: Named(\"llvm.x86.bmi.bzhi.64\")\n-        },\n-        \"_bmi2_pdep_32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32, &::U32]; &INPUTS },\n-            output: &::U32,\n-            definition: Named(\"llvm.x86.bmi.pdep.32\")\n-        },\n-        \"_bmi2_pdep_64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64, &::U64]; &INPUTS },\n-            output: &::U64,\n-            definition: Named(\"llvm.x86.bmi.pdep.64\")\n-        },\n-        \"_bmi2_pext_32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32, &::U32]; &INPUTS },\n-            output: &::U32,\n-            definition: Named(\"llvm.x86.bmi.pext.32\")\n-        },\n-        \"_bmi2_pext_64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64, &::U64]; &INPUTS },\n-            output: &::U64,\n-            definition: Named(\"llvm.x86.bmi.pext.64\")\n-        },\n-        \"_bmi_bextr_32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32, &::U32]; &INPUTS },\n-            output: &::U32,\n-            definition: Named(\"llvm.x86.bmi.bextr.32\")\n-        },\n-        \"_bmi_bextr_64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64, &::U64]; &INPUTS },\n-            output: &::U64,\n-            definition: Named(\"llvm.x86.bmi.bextr.64\")\n-        },\n-        \"_mm_fmadd_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x4, &::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.fma.vfmadd.ps\")\n-        },\n-        \"_mm_fmadd_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F64x2, &::F64x2, &::F64x2]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.fma.vfmadd.pd\")\n-        },\n-        \"_mm256_fmadd_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x8, &::F32x8, &::F32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.fma.vfmadd.ps.256\")\n-        },\n-        \"_mm256_fmadd_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F64x4, &::F64x4, &::F64x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.fma.vfmadd.pd.256\")\n-        },\n-        \"_mm_fmaddsub_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x4, &::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.fma.vfmaddsub.ps\")\n-        },\n-        \"_mm_fmaddsub_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F64x2, &::F64x2, &::F64x2]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.fma.vfmaddsub.pd\")\n-        },\n-        \"_mm256_fmaddsub_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x8, &::F32x8, &::F32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.fma.vfmaddsub.ps.256\")\n-        },\n-        \"_mm256_fmaddsub_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F64x4, &::F64x4, &::F64x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.fma.vfmaddsub.pd.256\")\n-        },\n-        \"_mm_fmsub_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x4, &::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.fma.vfmsub.ps\")\n-        },\n-        \"_mm_fmsub_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F64x2, &::F64x2, &::F64x2]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.fma.vfmsub.pd\")\n-        },\n-        \"_mm256_fmsub_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x8, &::F32x8, &::F32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.fma.vfmsub.ps.256\")\n-        },\n-        \"_mm256_fmsub_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F64x4, &::F64x4, &::F64x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.fma.vfmsub.pd.256\")\n-        },\n-        \"_mm_fmsubadd_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x4, &::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.fma.vfmsubadd.ps\")\n-        },\n-        \"_mm_fmsubadd_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F64x2, &::F64x2, &::F64x2]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.fma.vfmsubadd.pd\")\n-        },\n-        \"_mm256_fmsubadd_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x8, &::F32x8, &::F32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.fma.vfmsubadd.ps.256\")\n-        },\n-        \"_mm256_fmsubadd_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F64x4, &::F64x4, &::F64x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.fma.vfmsubadd.pd.256\")\n-        },\n-        \"_mm_fnmadd_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x4, &::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.fma.vfnmadd.ps\")\n-        },\n-        \"_mm_fnmadd_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F64x2, &::F64x2, &::F64x2]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.fma.vfnmadd.pd\")\n-        },\n-        \"_mm256_fnmadd_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x8, &::F32x8, &::F32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.fma.vfnmadd.ps.256\")\n-        },\n-        \"_mm256_fnmadd_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F64x4, &::F64x4, &::F64x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.fma.vfnmadd.pd.256\")\n-        },\n-        \"_mm_fnmsub_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x4, &::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.fma.vfnmsub.ps\")\n-        },\n-        \"_mm_fnmsub_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F64x2, &::F64x2, &::F64x2]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.fma.vfnmsub.pd\")\n-        },\n-        \"_mm256_fnmsub_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x8, &::F32x8, &::F32x8]; &INPUTS },\n-            output: &::F32x8,\n-            definition: Named(\"llvm.x86.fma.vfnmsub.ps.256\")\n-        },\n-        \"_mm256_fnmsub_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F64x4, &::F64x4, &::F64x4]; &INPUTS },\n-            output: &::F64x4,\n-            definition: Named(\"llvm.x86.fma.vfnmsub.pd.256\")\n-        },\n-        \"_rdrand16_step\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: { static AGG: Type = Type::Aggregate(false, { static PARTS: [&'static Type; 2] = [&::U16, &::I32]; &PARTS }); &AGG },\n-            definition: Named(\"llvm.x86.rdrand.16\")\n-        },\n-        \"_rdrand32_step\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: { static AGG: Type = Type::Aggregate(false, { static PARTS: [&'static Type; 2] = [&::U32, &::I32]; &PARTS }); &AGG },\n-            definition: Named(\"llvm.x86.rdrand.32\")\n-        },\n-        \"_rdrand64_step\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: { static AGG: Type = Type::Aggregate(false, { static PARTS: [&'static Type; 2] = [&::U64, &::I32]; &PARTS }); &AGG },\n-            definition: Named(\"llvm.x86.rdrand.64\")\n-        },\n-        \"_rdseed16_step\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: { static AGG: Type = Type::Aggregate(false, { static PARTS: [&'static Type; 2] = [&::U16, &::I32]; &PARTS }); &AGG },\n-            definition: Named(\"llvm.x86.rdseed.16\")\n-        },\n-        \"_rdseed32_step\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: { static AGG: Type = Type::Aggregate(false, { static PARTS: [&'static Type; 2] = [&::U32, &::I32]; &PARTS }); &AGG },\n-            definition: Named(\"llvm.x86.rdseed.32\")\n-        },\n-        \"_rdseed64_step\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: { static AGG: Type = Type::Aggregate(false, { static PARTS: [&'static Type; 2] = [&::U64, &::I32]; &PARTS }); &AGG },\n-            definition: Named(\"llvm.x86.rdseed.64\")\n-        },\n-        \"_mm_adds_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.x86.sse2.padds.b\")\n-        },\n-        \"_mm_adds_epu8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.x86.sse2.paddus.b\")\n-        },\n-        \"_mm_adds_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.x86.sse2.padds.w\")\n-        },\n-        \"_mm_adds_epu16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.x86.sse2.paddus.w\")\n-        },\n-        \"_mm_avg_epu8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.x86.sse2.pavg.b\")\n-        },\n-        \"_mm_avg_epu16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.x86.sse2.pavg.w\")\n-        },\n-        \"_mm_lfence\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.sse2.lfence\")\n-        },\n-        \"_mm_madd_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.x86.sse2.pmadd.wd\")\n-        },\n-        \"_mm_maskmoveu_si128\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::U8x16, &::U8x16, { static PTR: Type = Type::Pointer(&::U8, None, false); &PTR }]; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.sse2.maskmov.dqu\")\n-        },\n-        \"_mm_max_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.x86.sse2.pmaxs.w\")\n-        },\n-        \"_mm_max_epu8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.x86.sse2.pmaxu.b\")\n-        },\n-        \"_mm_max_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x2, &::F64x2]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.sse2.max.pd\")\n-        },\n-        \"_mm_mfence\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.sse2.fence\")\n-        },\n-        \"_mm_min_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.x86.sse2.pmins.w\")\n-        },\n-        \"_mm_min_epu8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.x86.sse2.pminu.b\")\n-        },\n-        \"_mm_min_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x2, &::F64x2]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.sse2.min.pd\")\n-        },\n-        \"_mm_movemask_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F64x2]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse2.movmsk.pd\")\n-        },\n-        \"_mm_movemask_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x16]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse2.pmovmskb.128\")\n-        },\n-        \"_mm_mul_epu32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U64x2,\n-            definition: Named(\"llvm.x86.sse2.pmulu.dq\")\n-        },\n-        \"_mm_mulhi_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.x86.sse2.pmulh.w\")\n-        },\n-        \"_mm_mulhi_epu16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.x86.sse2.pmulhu.w\")\n-        },\n-        \"_mm_packs_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.x86.sse2.packsswb.128\")\n-        },\n-        \"_mm_packs_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.x86.sse2.packssdw.128\")\n-        },\n-        \"_mm_packus_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.x86.sse2.packuswb.128\")\n-        },\n-        \"_mm_sad_epu8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U64x2,\n-            definition: Named(\"llvm.x86.sse2.psad.bw\")\n-        },\n-        \"_mm_sfence\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.sse2.sfence\")\n-        },\n-        \"_mm_sqrt_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F64x2]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.sqrt.v2f64\")\n-        },\n-        \"_mm_storeu_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static PTR: Type = Type::Pointer(&::F64, Some(&::U8), false); &PTR }, &::F64x2]; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.sse2.storeu.pd\")\n-        },\n-        \"_mm_storeu_si128\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static PTR: Type = Type::Pointer(&::U8x16, Some(&::U8), false); &PTR }, &::U8x16]; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.sse2.storeu.dq\")\n-        },\n-        \"_mm_subs_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.x86.sse2.psubs.b\")\n-        },\n-        \"_mm_subs_epu8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.x86.sse2.psubus.b\")\n-        },\n-        \"_mm_subs_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.x86.sse2.psubs.w\")\n-        },\n-        \"_mm_subs_epu16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.x86.sse2.psubus.w\")\n-        },\n-        \"_mm_addsub_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.sse3.addsub.ps\")\n-        },\n-        \"_mm_addsub_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x2, &::F64x2]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.sse3.addsub.pd\")\n-        },\n-        \"_mm_hadd_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.sse3.hadd.ps\")\n-        },\n-        \"_mm_hadd_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x2, &::F64x2]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.sse3.hadd.pd\")\n-        },\n-        \"_mm_hsub_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.sse3.hsub.ps\")\n-        },\n-        \"_mm_hsub_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F64x2, &::F64x2]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.sse3.hsub.pd\")\n-        },\n-        \"_mm_lddqu_si128\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [{ static PTR: Type = Type::Pointer(&::U8x16, Some(&::I8), true); &PTR }]; &INPUTS },\n-            output: &::U8x16,\n-            definition: Named(\"llvm.x86.sse3.ldu.dq\")\n-        },\n-        \"_mm_dp_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F32x4, &::F32x4, &::I32_8]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.sse41.dpps\")\n-        },\n-        \"_mm_dp_pd\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::F64x2, &::F64x2, &::I32_8]; &INPUTS },\n-            output: &::F64x2,\n-            definition: Named(\"llvm.x86.sse41.dppd\")\n-        },\n-        \"_mm_max_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.x86.sse41.pmaxsb\")\n-        },\n-        \"_mm_max_epu16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.x86.sse41.pmaxuw\")\n-        },\n-        \"_mm_max_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.x86.sse41.pmaxsd\")\n-        },\n-        \"_mm_max_epu32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.x86.sse41.pmaxud\")\n-        },\n-        \"_mm_min_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.x86.sse41.pminsb\")\n-        },\n-        \"_mm_min_epu16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.x86.sse41.pminuw\")\n-        },\n-        \"_mm_min_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.x86.sse41.pminsd\")\n-        },\n-        \"_mm_min_epu32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n-            output: &::U32x4,\n-            definition: Named(\"llvm.x86.sse41.pminud\")\n-        },\n-        \"_mm_minpos_epu16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::U16x8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.x86.sse41.phminposuw\")\n-        },\n-        \"_mm_mpsadbw_epu8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::U8x16, &::U8x16, &::I32_8]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.x86.sse41.mpsadbw\")\n-        },\n-        \"_mm_mul_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I64x2,\n-            definition: Named(\"llvm.x86.sse41.pmuldq\")\n-        },\n-        \"_mm_packus_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::U16x8,\n-            definition: Named(\"llvm.x86.sse41.packusdw\")\n-        },\n-        \"_mm_testc_si128\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::U64x2]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse41.ptestc\")\n-        },\n-        \"_mm_testnzc_si128\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::U64x2]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse41.ptestnzc\")\n-        },\n-        \"_mm_testz_si128\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64x2, &::U64x2]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse41.ptestz\")\n-        },\n-        \"_mm_cmpestra\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::I8x16, &::I32, &::I8x16, &::I32, &::I32_8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse42.pcmpestria128\")\n-        },\n-        \"_mm_cmpestrc\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::I8x16, &::I32, &::I8x16, &::I32, &::I32_8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse42.pcmpestric128\")\n-        },\n-        \"_mm_cmpestri\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::I8x16, &::I32, &::I8x16, &::I32, &::I32_8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse42.pcmpestri128\")\n-        },\n-        \"_mm_cmpestrm\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::I8x16, &::I32, &::I8x16, &::I32, &::I32_8]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.x86.sse42.pcmpestrm128\")\n-        },\n-        \"_mm_cmpestro\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::I8x16, &::I32, &::I8x16, &::I32, &::I32_8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse42.pcmpestrio128\")\n-        },\n-        \"_mm_cmpestrs\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::I8x16, &::I32, &::I8x16, &::I32, &::I32_8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse42.pcmpestris128\")\n-        },\n-        \"_mm_cmpestrz\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 5] = [&::I8x16, &::I32, &::I8x16, &::I32, &::I32_8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse42.pcmpestriz128\")\n-        },\n-        \"_mm_cmpistra\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I8x16, &::I8x16, &::I32_8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse42.pcmpistria128\")\n-        },\n-        \"_mm_cmpistrc\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I8x16, &::I8x16, &::I32_8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse42.pcmpistric128\")\n-        },\n-        \"_mm_cmpistri\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I8x16, &::I8x16, &::I32_8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse42.pcmpistri128\")\n-        },\n-        \"_mm_cmpistrm\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I8x16, &::I8x16, &::I32_8]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.x86.sse42.pcmpistrm128\")\n-        },\n-        \"_mm_cmpistro\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I8x16, &::I8x16, &::I32_8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse42.pcmpistrio128\")\n-        },\n-        \"_mm_cmpistrs\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I8x16, &::I8x16, &::I32_8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse42.pcmpistris128\")\n-        },\n-        \"_mm_cmpistrz\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 3] = [&::I8x16, &::I8x16, &::I32_8]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse42.pcmpistriz128\")\n-        },\n-        \"_mm_movemask_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::I32,\n-            definition: Named(\"llvm.x86.sse.movmsk.ps\")\n-        },\n-        \"_mm_max_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.sse.max.ps\")\n-        },\n-        \"_mm_min_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.sse.min.ps\")\n-        },\n-        \"_mm_rsqrt_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.sse.rsqrt.ps\")\n-        },\n-        \"_mm_rcp_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.x86.sse.rcp.ps\")\n-        },\n-        \"_mm_sqrt_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::F32x4]; &INPUTS },\n-            output: &::F32x4,\n-            definition: Named(\"llvm.sqrt.v4f32\")\n-        },\n-        \"_mm_storeu_ps\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [{ static PTR: Type = Type::Pointer(&::F32, Some(&::I8), false); &PTR }, &::F32x4]; &INPUTS },\n-            output: &::VOID,\n-            definition: Named(\"llvm.x86.sse.storeu.ps\")\n-        },\n-        \"_mm_abs_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.x86.ssse3.pabs.b.128\")\n-        },\n-        \"_mm_abs_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.x86.ssse3.pabs.w.128\")\n-        },\n-        \"_mm_abs_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 1] = [&::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.x86.ssse3.pabs.d.128\")\n-        },\n-        \"_mm_hadd_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.x86.ssse3.phadd.w.128\")\n-        },\n-        \"_mm_hadd_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.x86.ssse3.phadd.d.128\")\n-        },\n-        \"_mm_hadds_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.x86.ssse3.phadd.sw.128\")\n-        },\n-        \"_mm_hsub_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.x86.ssse3.phsub.w.128\")\n-        },\n-        \"_mm_hsub_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.x86.ssse3.phsub.d.128\")\n-        },\n-        \"_mm_hsubs_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.x86.ssse3.phsub.sw.128\")\n-        },\n-        \"_mm_maddubs_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::I8x16]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.x86.ssse3.pmadd.ub.sw.128\")\n-        },\n-        \"_mm_mulhrs_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.x86.ssse3.pmul.hr.sw.128\")\n-        },\n-        \"_mm_shuffle_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.x86.ssse3.pshuf.b.128\")\n-        },\n-        \"_mm_sign_epi8\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n-            output: &::I8x16,\n-            definition: Named(\"llvm.x86.ssse3.psign.b.128\")\n-        },\n-        \"_mm_sign_epi16\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n-            output: &::I16x8,\n-            definition: Named(\"llvm.x86.ssse3.psign.w.128\")\n-        },\n-        \"_mm_sign_epi32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n-            output: &::I32x4,\n-            definition: Named(\"llvm.x86.ssse3.psign.d.128\")\n-        },\n-        \"_tbm_bextri_u32\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U32, &::U32]; &INPUTS },\n-            output: &::U32,\n-            definition: Named(\"llvm.x86.tbm.bextri.u32\")\n-        },\n-        \"_tbm_bextri_u64\" => Intrinsic {\n-            inputs: { static INPUTS: [&'static Type; 2] = [&::U64, &::U64]; &INPUTS },\n-            output: &::U64,\n-            definition: Named(\"llvm.x86.tbm.bextri.u64\")\n-        },\n-        _ => return None,\n-    })\n-}"}, {"sha": "68b28a60fdff7aac300be5127b2d08830e09d8b0", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=cccaf9a8c69219c8267e406f92fef895fbba80f2", "patch": "@@ -15,7 +15,6 @@ log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n-rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "143715dff813bb99aa436b7892f62cef706b44a4", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 156, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=cccaf9a8c69219c8267e406f92fef895fbba80f2", "patch": "@@ -1,17 +1,13 @@\n //! Type-checking for the rust-intrinsic and platform-intrinsic\n //! intrinsics that the compiler exposes.\n \n-use intrinsics;\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n use rustc::ty::{self, TyCtxt, Ty};\n use rustc::ty::subst::Subst;\n-use rustc::util::nodemap::FxHashMap;\n use require_same_types;\n \n use rustc_target::spec::abi::Abi;\n-use syntax::ast;\n use syntax::symbol::Symbol;\n-use syntax_pos::Span;\n \n use rustc::hir;\n \n@@ -402,8 +398,6 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx.mk_ty_param(n, name)\n     };\n \n-    let def_id = tcx.hir().local_def_id(it.id);\n-    let i_n_tps = tcx.generics_of(def_id).own_counts().types;\n     let name = it.ident.as_str();\n \n     let (n_tps, inputs, output) = match &*name {\n@@ -461,159 +455,12 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n         }\n         _ => {\n-            match intrinsics::Intrinsic::find(&name) {\n-                Some(intr) => {\n-                    // this function is a platform specific intrinsic\n-                    if i_n_tps != 0 {\n-                        span_err!(tcx.sess, it.span, E0440,\n-                                  \"platform-specific intrinsic has wrong number of type \\\n-                                   parameters: found {}, expected 0\",\n-                                  i_n_tps);\n-                        return\n-                    }\n-\n-                    let mut structural_to_nomimal = FxHashMap::default();\n-\n-                    let sig = tcx.fn_sig(def_id);\n-                    let sig = sig.no_bound_vars().unwrap();\n-                    if intr.inputs.len() != sig.inputs().len() {\n-                        span_err!(tcx.sess, it.span, E0444,\n-                                  \"platform-specific intrinsic has invalid number of \\\n-                                   arguments: found {}, expected {}\",\n-                                  sig.inputs().len(), intr.inputs.len());\n-                        return\n-                    }\n-                    let input_pairs = intr.inputs.iter().zip(sig.inputs());\n-                    for (i, (expected_arg, arg)) in input_pairs.enumerate() {\n-                        match_intrinsic_type_to_type(tcx, &format!(\"argument {}\", i + 1), it.span,\n-                                                     &mut structural_to_nomimal, expected_arg, arg);\n-                    }\n-                    match_intrinsic_type_to_type(tcx, \"return value\", it.span,\n-                                                 &mut structural_to_nomimal,\n-                                                 &intr.output, sig.output());\n-                    return\n-                }\n-                None => {\n-                    span_err!(tcx.sess, it.span, E0441,\n-                              \"unrecognized platform-specific intrinsic function: `{}`\", name);\n-                    return;\n-                }\n-            }\n+            let msg = format!(\"unrecognized platform-specific intrinsic function: `{}`\", name);\n+            tcx.sess.span_err(it.span, &msg);\n+            return;\n         }\n     };\n \n     equate_intrinsic_type(tcx, it, n_tps, Abi::PlatformIntrinsic, hir::Unsafety::Unsafe,\n                           inputs, output)\n }\n-\n-// walk the expected type and the actual type in lock step, checking they're\n-// the same, in a kinda-structural way, i.e., `Vector`s have to be simd structs with\n-// exactly the right element type\n-fn match_intrinsic_type_to_type<'a, 'tcx>(\n-        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        position: &str,\n-        span: Span,\n-        structural_to_nominal: &mut FxHashMap<&'a intrinsics::Type, Ty<'tcx>>,\n-        expected: &'a intrinsics::Type, t: Ty<'tcx>)\n-{\n-    use intrinsics::Type::*;\n-\n-    let simple_error = |real: &str, expected: &str| {\n-        span_err!(tcx.sess, span, E0442,\n-                  \"intrinsic {} has wrong type: found {}, expected {}\",\n-                  position, real, expected)\n-    };\n-\n-    match *expected {\n-        Void => match t.sty {\n-            ty::Tuple(ref v) if v.is_empty() => {},\n-            _ => simple_error(&format!(\"`{}`\", t), \"()\"),\n-        },\n-        // (The width we pass to LLVM doesn't concern the type checker.)\n-        Integer(signed, bits, _llvm_width) => match (signed, bits, &t.sty) {\n-            (true,  8,  &ty::Int(ast::IntTy::I8)) |\n-            (false, 8,  &ty::Uint(ast::UintTy::U8)) |\n-            (true,  16, &ty::Int(ast::IntTy::I16)) |\n-            (false, 16, &ty::Uint(ast::UintTy::U16)) |\n-            (true,  32, &ty::Int(ast::IntTy::I32)) |\n-            (false, 32, &ty::Uint(ast::UintTy::U32)) |\n-            (true,  64, &ty::Int(ast::IntTy::I64)) |\n-            (false, 64, &ty::Uint(ast::UintTy::U64)) |\n-            (true,  128, &ty::Int(ast::IntTy::I128)) |\n-            (false, 128, &ty::Uint(ast::UintTy::U128)) => {},\n-            _ => simple_error(&format!(\"`{}`\", t),\n-                              &format!(\"`{}{n}`\",\n-                                       if signed {\"i\"} else {\"u\"},\n-                                       n = bits)),\n-        },\n-        Float(bits) => match (bits, &t.sty) {\n-            (32, &ty::Float(ast::FloatTy::F32)) |\n-            (64, &ty::Float(ast::FloatTy::F64)) => {},\n-            _ => simple_error(&format!(\"`{}`\", t),\n-                              &format!(\"`f{n}`\", n = bits)),\n-        },\n-        Pointer(ref inner_expected, ref _llvm_type, const_) => {\n-            match t.sty {\n-                ty::RawPtr(ty::TypeAndMut { ty, mutbl }) => {\n-                    if (mutbl == hir::MutImmutable) != const_ {\n-                        simple_error(&format!(\"`{}`\", t),\n-                                     if const_ {\"const pointer\"} else {\"mut pointer\"})\n-                    }\n-                    match_intrinsic_type_to_type(tcx, position, span, structural_to_nominal,\n-                                                 inner_expected, ty)\n-                }\n-                _ => simple_error(&format!(\"`{}`\", t), \"raw pointer\"),\n-            }\n-        }\n-        Vector(ref inner_expected, ref _llvm_type, len) => {\n-            if !t.is_simd() {\n-                simple_error(&format!(\"non-simd type `{}`\", t), \"simd type\");\n-                return;\n-            }\n-            let t_len = t.simd_size(tcx);\n-            if len as usize != t_len {\n-                simple_error(&format!(\"vector with length {}\", t_len),\n-                             &format!(\"length {}\", len));\n-                return;\n-            }\n-            let t_ty = t.simd_type(tcx);\n-            {\n-                // check that a given structural type always has the same an intrinsic definition\n-                let previous = structural_to_nominal.entry(expected).or_insert(t);\n-                if *previous != t {\n-                    // this gets its own error code because it is non-trivial\n-                    span_err!(tcx.sess, span, E0443,\n-                              \"intrinsic {} has wrong type: found `{}`, expected `{}` which \\\n-                               was used for this vector type previously in this signature\",\n-                              position,\n-                              t,\n-                              *previous);\n-                    return;\n-                }\n-            }\n-            match_intrinsic_type_to_type(tcx,\n-                                         position,\n-                                         span,\n-                                         structural_to_nominal,\n-                                         inner_expected,\n-                                         t_ty)\n-        }\n-        Aggregate(_flatten, ref expected_contents) => {\n-            match t.sty {\n-                ty::Tuple(contents) => {\n-                    if contents.len() != expected_contents.len() {\n-                        simple_error(&format!(\"tuple with length {}\", contents.len()),\n-                                     &format!(\"tuple with length {}\", expected_contents.len()));\n-                        return\n-                    }\n-                    for (e, c) in expected_contents.iter().zip(contents) {\n-                        match_intrinsic_type_to_type(tcx, position, span, structural_to_nominal,\n-                                                     e, c)\n-                    }\n-                }\n-                _ => simple_error(&format!(\"`{}`\", t),\n-                                  \"tuple\"),\n-            }\n-        }\n-    }\n-}"}, {"sha": "4928001bc1ffee6b4aeb99f369ab033548960297", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 174, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=cccaf9a8c69219c8267e406f92fef895fbba80f2", "patch": "@@ -3369,180 +3369,6 @@ extern \"platform-intrinsic\" {\n ```\n \"##,\n \n-E0440: r##\"\n-A platform-specific intrinsic function has the wrong number of type\n-parameters. Erroneous code example:\n-\n-```compile_fail,E0440\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-\n-#[repr(simd)]\n-struct f64x2(f64, f64);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_movemask_pd<T>(x: f64x2) -> i32;\n-    // error: platform-specific intrinsic has wrong number of type\n-    //        parameters\n-}\n-```\n-\n-Please refer to the function declaration to see if it corresponds\n-with yours. Example:\n-\n-```\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-\n-#[repr(simd)]\n-struct f64x2(f64, f64);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_movemask_pd(x: f64x2) -> i32;\n-}\n-```\n-\"##,\n-\n-E0441: r##\"\n-An unknown platform-specific intrinsic function was used. Erroneous\n-code example:\n-\n-```compile_fail,E0441\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-\n-#[repr(simd)]\n-struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_adds_ep16(x: i16x8, y: i16x8) -> i16x8;\n-    // error: unrecognized platform-specific intrinsic function\n-}\n-```\n-\n-Please verify that the function name wasn't misspelled, and ensure\n-that it is declared in the rust source code (in the file\n-src/librustc_platform_intrinsics/x86.rs). Example:\n-\n-```\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-\n-#[repr(simd)]\n-struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i16x8; // ok!\n-}\n-```\n-\"##,\n-\n-E0442: r##\"\n-Intrinsic argument(s) and/or return value have the wrong type.\n-Erroneous code example:\n-\n-```compile_fail,E0442\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-\n-#[repr(simd)]\n-struct i8x16(i8, i8, i8, i8, i8, i8, i8, i8,\n-             i8, i8, i8, i8, i8, i8, i8, i8);\n-#[repr(simd)]\n-struct i32x4(i32, i32, i32, i32);\n-#[repr(simd)]\n-struct i64x2(i64, i64);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n-    // error: intrinsic arguments/return value have wrong type\n-}\n-```\n-\n-To fix this error, please refer to the function declaration to give\n-it the awaited types. Example:\n-\n-```\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-\n-#[repr(simd)]\n-struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i16x8; // ok!\n-}\n-```\n-\"##,\n-\n-E0443: r##\"\n-Intrinsic argument(s) and/or return value have the wrong type.\n-Erroneous code example:\n-\n-```compile_fail,E0443\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-\n-#[repr(simd)]\n-struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n-#[repr(simd)]\n-struct i64x8(i64, i64, i64, i64, i64, i64, i64, i64);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i64x8;\n-    // error: intrinsic argument/return value has wrong type\n-}\n-```\n-\n-To fix this error, please refer to the function declaration to give\n-it the awaited types. Example:\n-\n-```\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-\n-#[repr(simd)]\n-struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i16x8; // ok!\n-}\n-```\n-\"##,\n-\n-E0444: r##\"\n-A platform-specific intrinsic function has wrong number of arguments.\n-Erroneous code example:\n-\n-```compile_fail,E0444\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-\n-#[repr(simd)]\n-struct f64x2(f64, f64);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_movemask_pd(x: f64x2, y: f64x2, z: f64x2) -> i32;\n-    // error: platform-specific intrinsic has invalid number of arguments\n-}\n-```\n-\n-Please refer to the function declaration to see if it corresponds\n-with yours. Example:\n-\n-```\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-\n-#[repr(simd)]\n-struct f64x2(f64, f64);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_movemask_pd(x: f64x2) -> i32; // ok!\n-}\n-```\n-\"##,\n-\n E0516: r##\"\n The `typeof` keyword is currently reserved but unimplemented.\n Erroneous code example:"}, {"sha": "8bd484aa0d352f0ce00ef2c9a28cacb2560b8b25", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=cccaf9a8c69219c8267e406f92fef895fbba80f2", "patch": "@@ -82,7 +82,6 @@ extern crate syntax_pos;\n extern crate arena;\n \n #[macro_use] extern crate rustc;\n-extern crate rustc_platform_intrinsics as intrinsics;\n extern crate rustc_data_structures;\n extern crate rustc_errors as errors;\n extern crate rustc_target;"}, {"sha": "afba298d33d54344ecafdc97c68b6d9f73815cf5", "filename": "src/test/run-pass/simd/simd-upgraded.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-upgraded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-upgraded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-upgraded.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,24 +0,0 @@\n-// run-pass\n-#![allow(stable_features)]\n-#![allow(non_camel_case_types)]\n-\n-// Test that removed LLVM SIMD intrinsics continue\n-// to work via the \"AutoUpgrade\" mechanism.\n-\n-#![feature(cfg_target_feature, repr_simd)]\n-#![feature(platform_intrinsics, stmt_expr_attributes)]\n-\n-#[repr(simd)]\n-#[derive(PartialEq, Debug)]\n-struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n-\n-fn main() {\n-    #[cfg(target_feature = \"sse2\")] unsafe {\n-        extern \"platform-intrinsic\" {\n-            fn x86_mm_min_epi16(x: i16x8, y: i16x8) -> i16x8;\n-        }\n-        assert_eq!(x86_mm_min_epi16(i16x8(0, 1, 2, 3, 4, 5, 6, 7),\n-                                    i16x8(7, 6, 5, 4, 3, 2, 1, 0)),\n-                                    i16x8(0, 1, 2, 3, 3, 2, 1, 0));\n-    };\n-}"}, {"sha": "8ac47f5ab5306438794ea5245176f1bfdaae0632", "filename": "src/test/ui/error-codes/E0440.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0440.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0440.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0440.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,13 +0,0 @@\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-#![allow(non_camel_case_types)]\n-\n-#[repr(simd)]\n-struct f64x2(f64, f64);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_movemask_pd<T>(x: f64x2) -> i32; //~ ERROR E0440\n-}\n-\n-fn main () {\n-}"}, {"sha": "e153fb0f73f6f9840616a220bc2cc15e6f9521df", "filename": "src/test/ui/error-codes/E0440.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0440.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0440.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0440.stderr?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,9 +0,0 @@\n-error[E0440]: platform-specific intrinsic has wrong number of type parameters: found 1, expected 0\n-  --> $DIR/E0440.rs:9:5\n-   |\n-LL |     fn x86_mm_movemask_pd<T>(x: f64x2) -> i32; //~ ERROR E0440\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0440`."}, {"sha": "90bdbe96c2d6562dc2d31fb5074397aecf291a92", "filename": "src/test/ui/error-codes/E0441.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0441.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,12 +0,0 @@\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-#![allow(non_camel_case_types)]\n-\n-#[repr(simd)]\n-struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_adds_ep16(x: i16x8, y: i16x8) -> i16x8; //~ ERROR E0441\n-}\n-\n-fn main() {}"}, {"sha": "73eddb2604e4788f0d2078b3c3c2db2b0db9ccf6", "filename": "src/test/ui/error-codes/E0441.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0441.stderr?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,9 +0,0 @@\n-error[E0441]: unrecognized platform-specific intrinsic function: `x86_mm_adds_ep16`\n-  --> $DIR/E0441.rs:9:5\n-   |\n-LL |     fn x86_mm_adds_ep16(x: i16x8, y: i16x8) -> i16x8; //~ ERROR E0441\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0441`."}, {"sha": "a6eb59610f75ae6df2df13f04ba3cb649c4f383a", "filename": "src/test/ui/error-codes/E0442.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0442.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,20 +0,0 @@\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-#![allow(non_camel_case_types)]\n-\n-#[repr(simd)]\n-struct i8x16(i8, i8, i8, i8, i8, i8, i8, i8,\n-             i8, i8, i8, i8, i8, i8, i8, i8);\n-#[repr(simd)]\n-struct i32x4(i32, i32, i32, i32);\n-#[repr(simd)]\n-struct i64x2(i64, i64);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n-    //~^ ERROR E0442\n-    //~| ERROR E0442\n-    //~| ERROR E0442\n-}\n-\n-fn main() {}"}, {"sha": "017d4617a973a592ae40c221ea41b0b880418211", "filename": "src/test/ui/error-codes/E0442.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0442.stderr?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,21 +0,0 @@\n-error[E0442]: intrinsic argument 1 has wrong type: found vector with length 16, expected length 8\n-  --> $DIR/E0442.rs:14:5\n-   |\n-LL |     fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic argument 2 has wrong type: found vector with length 4, expected length 8\n-  --> $DIR/E0442.rs:14:5\n-   |\n-LL |     fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic return value has wrong type: found vector with length 2, expected length 8\n-  --> $DIR/E0442.rs:14:5\n-   |\n-LL |     fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0442`."}, {"sha": "4940f1d75399bb407023c6c9b77725a91f2656fc", "filename": "src/test/ui/error-codes/E0443.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0443.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,14 +0,0 @@\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-#![allow(non_camel_case_types)]\n-\n-#[repr(simd)]\n-struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n-#[repr(simd)]\n-struct i64x8(i64, i64, i64, i64, i64, i64, i64, i64);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i64x8; //~ ERROR E0443\n-}\n-\n-fn main() {}"}, {"sha": "4c2e6418fed9ae4adf69d14baa8dd6d0400f631e", "filename": "src/test/ui/error-codes/E0443.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0443.stderr?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,9 +0,0 @@\n-error[E0443]: intrinsic return value has wrong type: found `i64x8`, expected `i16x8` which was used for this vector type previously in this signature\n-  --> $DIR/E0443.rs:11:5\n-   |\n-LL |     fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i64x8; //~ ERROR E0443\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0443`."}, {"sha": "3d73339bf9aa44a1087493b1882528814075daef", "filename": "src/test/ui/error-codes/E0444.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0444.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,12 +0,0 @@\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-#![allow(non_camel_case_types)]\n-\n-#[repr(simd)]\n-struct f64x2(f64, f64);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_movemask_pd(x: f64x2, y: f64x2, z: f64x2) -> i32; //~ ERROR E0444\n-}\n-\n-fn main() {}"}, {"sha": "0a894f7edc614de48f525ed0b52c349bbd07743c", "filename": "src/test/ui/error-codes/E0444.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0444.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Ferror-codes%2FE0444.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0444.stderr?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,9 +0,0 @@\n-error[E0444]: platform-specific intrinsic has invalid number of arguments: found 3, expected 1\n-  --> $DIR/E0444.rs:9:5\n-   |\n-LL |     fn x86_mm_movemask_pd(x: f64x2, y: f64x2, z: f64x2) -> i32; //~ ERROR E0444\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0444`."}, {"sha": "7823e7d12a40878eb845846f91df49398f97a8ea", "filename": "src/test/ui/intrinsic-invalid-number-of-arguments.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fintrinsic-invalid-number-of-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fintrinsic-invalid-number-of-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsic-invalid-number-of-arguments.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,15 +0,0 @@\n-// Test number of arguments in platform-specific intrinsic function\n-// This is the error E0444\n-\n-#![feature(repr_simd, platform_intrinsics)]\n-#![allow(non_camel_case_types)]\n-\n-#[repr(simd)]\n-struct f64x2(f64, f64);\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_movemask_pd(x: f64x2, y: f64x2, z: f64x2) -> i32; //~ platform-specific intrinsic\n-}\n-\n-pub fn main() {\n-}"}, {"sha": "e2874d554eea132eeb355bcd239fc694c4d3894f", "filename": "src/test/ui/intrinsic-invalid-number-of-arguments.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fintrinsic-invalid-number-of-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fintrinsic-invalid-number-of-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsic-invalid-number-of-arguments.stderr?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,9 +0,0 @@\n-error[E0444]: platform-specific intrinsic has invalid number of arguments: found 3, expected 1\n-  --> $DIR/intrinsic-invalid-number-of-arguments.rs:11:5\n-   |\n-LL |     fn x86_mm_movemask_pd(x: f64x2, y: f64x2, z: f64x2) -> i32; //~ platform-specific intrinsic\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0444`."}, {"sha": "5759a10e6c5d470f1e0a893d745f9c60a33e5cb3", "filename": "src/test/ui/platform-intrinsic-params.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fplatform-intrinsic-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fplatform-intrinsic-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fplatform-intrinsic-params.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,6 +0,0 @@\n-#![feature(platform_intrinsics)]\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_movemask_ps() -> i32; //~ERROR found 0, expected 1\n-}\n-\n-fn main() { }"}, {"sha": "17671ce6113defe8660b40c19ef9505f85d8f3ee", "filename": "src/test/ui/platform-intrinsic-params.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fplatform-intrinsic-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fplatform-intrinsic-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fplatform-intrinsic-params.stderr?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,9 +0,0 @@\n-error[E0444]: platform-specific intrinsic has invalid number of arguments: found 0, expected 1\n-  --> $DIR/platform-intrinsic-params.rs:3:5\n-   |\n-LL |     fn x86_mm_movemask_ps() -> i32; //~ERROR found 0, expected 1\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0444`."}, {"sha": "7405678696a0b92ed95afef1f3a358f7b56fcfb2", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-declaration-type.rs", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-declaration-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-declaration-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-declaration-type.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,59 +0,0 @@\n-#![feature(repr_simd, platform_intrinsics)]\n-#![allow(non_camel_case_types)]\n-\n-#[repr(simd)]\n-struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n-#[repr(simd)]\n-struct u16x8(u16, u16, u16, u16, u16, u16, u16, u16);\n-\n-#[repr(simd)]\n-struct i8x16(i8, i8, i8, i8, i8, i8, i8, i8,\n-             i8, i8, i8, i8, i8, i8, i8, i8);\n-#[repr(simd)]\n-struct i32x4(i32, i32, i32, i32);\n-#[repr(simd)]\n-struct f32x4(f32, f32, f32, f32);\n-#[repr(simd)]\n-struct i64x2(i64, i64);\n-\n-// correct signatures work well\n-mod right {\n-    use {i16x8, u16x8};\n-    extern \"platform-intrinsic\" {\n-        fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i16x8;\n-        fn x86_mm_adds_epu16(x: u16x8, y: u16x8) -> u16x8;\n-    }\n-}\n-// but incorrect ones don't.\n-\n-mod signedness {\n-    use {i16x8, u16x8};\n-    // signedness matters\n-    extern \"platform-intrinsic\" {\n-        fn x86_mm_adds_epi16(x: u16x8, y: u16x8) -> u16x8;\n-        //~^ ERROR intrinsic argument 1 has wrong type\n-        //~^^ ERROR intrinsic argument 2 has wrong type\n-        //~^^^ ERROR intrinsic return value has wrong type\n-        fn x86_mm_adds_epu16(x: i16x8, y: i16x8) -> i16x8;\n-        //~^ ERROR intrinsic argument 1 has wrong type\n-        //~^^ ERROR intrinsic argument 2 has wrong type\n-        //~^^^ ERROR intrinsic return value has wrong type\n-    }\n-}\n-// as do lengths\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n-    //~^ ERROR intrinsic argument 1 has wrong type\n-    //~^^ ERROR intrinsic argument 2 has wrong type\n-    //~^^^ ERROR intrinsic return value has wrong type\n-}\n-// and so does int vs. float:\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_max_ps(x: i32x4, y: i32x4) -> i32x4;\n-    //~^ ERROR intrinsic argument 1 has wrong type\n-    //~^^ ERROR intrinsic argument 2 has wrong type\n-    //~^^^ ERROR intrinsic return value has wrong type\n-}\n-\n-\n-fn main() {}"}, {"sha": "22df5e42d2607d57ef4c57954938dfee2ed8811b", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-declaration-type.stderr", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-declaration-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-declaration-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-declaration-type.stderr?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,75 +0,0 @@\n-error[E0442]: intrinsic argument 1 has wrong type: found vector with length 16, expected length 8\n-  --> $DIR/simd-intrinsic-declaration-type.rs:45:5\n-   |\n-LL |     fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic argument 2 has wrong type: found vector with length 4, expected length 8\n-  --> $DIR/simd-intrinsic-declaration-type.rs:45:5\n-   |\n-LL |     fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic return value has wrong type: found vector with length 2, expected length 8\n-  --> $DIR/simd-intrinsic-declaration-type.rs:45:5\n-   |\n-LL |     fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic argument 1 has wrong type: found `i32`, expected `f32`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:52:5\n-   |\n-LL |     fn x86_mm_max_ps(x: i32x4, y: i32x4) -> i32x4;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic argument 2 has wrong type: found `i32`, expected `f32`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:52:5\n-   |\n-LL |     fn x86_mm_max_ps(x: i32x4, y: i32x4) -> i32x4;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic return value has wrong type: found `i32`, expected `f32`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:52:5\n-   |\n-LL |     fn x86_mm_max_ps(x: i32x4, y: i32x4) -> i32x4;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic argument 1 has wrong type: found `u16`, expected `i16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:33:9\n-   |\n-LL |         fn x86_mm_adds_epi16(x: u16x8, y: u16x8) -> u16x8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic argument 2 has wrong type: found `u16`, expected `i16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:33:9\n-   |\n-LL |         fn x86_mm_adds_epi16(x: u16x8, y: u16x8) -> u16x8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic return value has wrong type: found `u16`, expected `i16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:33:9\n-   |\n-LL |         fn x86_mm_adds_epi16(x: u16x8, y: u16x8) -> u16x8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic argument 1 has wrong type: found `i16`, expected `u16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:37:9\n-   |\n-LL |         fn x86_mm_adds_epu16(x: i16x8, y: i16x8) -> i16x8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic argument 2 has wrong type: found `i16`, expected `u16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:37:9\n-   |\n-LL |         fn x86_mm_adds_epu16(x: i16x8, y: i16x8) -> i16x8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0442]: intrinsic return value has wrong type: found `i16`, expected `u16`\n-  --> $DIR/simd-intrinsic-declaration-type.rs:37:9\n-   |\n-LL |         fn x86_mm_adds_epu16(x: i16x8, y: i16x8) -> i16x8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 12 previous errors\n-\n-For more information about this error, try `rustc --explain E0442`."}, {"sha": "f38ef2e93e7d506a85235a294add0509260e1389", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-single-nominal-type.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-single-nominal-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-single-nominal-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-single-nominal-type.rs?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,23 +0,0 @@\n-#![feature(repr_simd, platform_intrinsics)]\n-\n-#[repr(simd)]\n-struct A(i16, i16, i16, i16, i16, i16, i16, i16);\n-#[repr(simd)]\n-struct B(i16, i16, i16, i16, i16, i16, i16, i16);\n-\n-// each intrinsic definition has to use the same nominal type for any\n-// vector structure throughout that declaration (i.e., every instance\n-// of i16x8 in each `fn ...;` needs to be either A or B)\n-\n-extern \"platform-intrinsic\" {\n-    fn x86_mm_adds_epi16(x: A, y: A) -> B;\n-    //~^ ERROR intrinsic return value has wrong type: found `B`, expected `A`\n-    fn x86_mm_subs_epi16(x: A, y: B) -> A;\n-    //~^ ERROR intrinsic argument 2 has wrong type: found `B`, expected `A`\n-\n-    // ok:\n-    fn x86_mm_max_epi16(x: B, y: B) -> B;\n-    fn x86_mm_min_epi16(x: A, y: A) -> A;\n-}\n-\n-fn main() {}"}, {"sha": "2754dd17b9963dfbdffa753af6c19f994e00c6db", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-single-nominal-type.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-single-nominal-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f221c75932de7a29845c8d6f1f73536ad00c41/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-single-nominal-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-single-nominal-type.stderr?ref=e2f221c75932de7a29845c8d6f1f73536ad00c41", "patch": "@@ -1,15 +0,0 @@\n-error[E0443]: intrinsic return value has wrong type: found `B`, expected `A` which was used for this vector type previously in this signature\n-  --> $DIR/simd-intrinsic-single-nominal-type.rs:13:5\n-   |\n-LL |     fn x86_mm_adds_epi16(x: A, y: A) -> B;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0443]: intrinsic argument 2 has wrong type: found `B`, expected `A` which was used for this vector type previously in this signature\n-  --> $DIR/simd-intrinsic-single-nominal-type.rs:15:5\n-   |\n-LL |     fn x86_mm_subs_epi16(x: A, y: B) -> A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0443`."}]}