{"sha": "3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYTdjMDBmOTRjZDRiYTA0Njc3N2EzY2RiY2I1ZmFkMTdjMWY2Y2Y=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-04-28T19:56:38Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-05-07T10:44:03Z"}, "message": "Prevent infinite recursion of modules", "tree": {"sha": "fb36c7df2c353fa839e43420d788b9581921c745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb36c7df2c353fa839e43420d788b9581921c745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf", "html_url": "https://github.com/rust-lang/rust/commit/3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff65726ebf1d7d732e24175a41381e53f39ee892", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff65726ebf1d7d732e24175a41381e53f39ee892", "html_url": "https://github.com/rust-lang/rust/commit/ff65726ebf1d7d732e24175a41381e53f39ee892"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "a8f4848bf89f2a0394aadc9b6bdd7863e827631d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf", "patch": "@@ -38,7 +38,7 @@ use super::Clean;\n ///\n /// The returned value is `None` if the definition could not be inlined,\n /// and `Some` of a vector of items if it was successfully expanded.\n-pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name)\n+pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name, visited: &mut FxHashSet<DefId>)\n                   -> Option<Vec<clean::Item>> {\n     if def == Def::Err { return None }\n     let did = def.def_id();\n@@ -87,7 +87,7 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name)\n         Def::StructCtor(..) => return Some(Vec::new()),\n         Def::Mod(did) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Module);\n-            clean::ModuleItem(build_module(cx, did))\n+            clean::ModuleItem(build_module(cx, did, visited))\n         }\n         Def::Static(did, mtbl) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Static);\n@@ -385,24 +385,24 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n     });\n }\n \n-fn build_module(cx: &DocContext, did: DefId) -> clean::Module {\n+fn build_module(cx: &DocContext, did: DefId, visited: &mut FxHashSet<DefId>) -> clean::Module {\n     let mut items = Vec::new();\n-    fill_in(cx, did, &mut items);\n+    fill_in(cx, did, &mut items, visited);\n     return clean::Module {\n         items,\n         is_crate: false,\n     };\n \n-    fn fill_in(cx: &DocContext, did: DefId, items: &mut Vec<clean::Item>) {\n+    fn fill_in(cx: &DocContext, did: DefId, items: &mut Vec<clean::Item>,\n+               visited: &mut FxHashSet<DefId>) {\n         // If we're re-exporting a re-export it may actually re-export something in\n         // two namespaces, so the target may be listed twice. Make sure we only\n         // visit each node at most once.\n-        let mut visited = FxHashSet();\n         for &item in cx.tcx.item_children(did).iter() {\n             let def_id = item.def.def_id();\n             if item.vis == ty::Visibility::Public {\n-                if !visited.insert(def_id) { continue }\n-                if let Some(i) = try_inline(cx, item.def, item.ident.name) {\n+                if did == def_id || !visited.insert(def_id) { continue }\n+                if let Some(i) = try_inline(cx, item.def, item.ident.name, visited) {\n                     items.extend(i)\n                 }\n             }"}, {"sha": "a7d32664f134238972ef7243c640c77091aad53d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf", "patch": "@@ -3673,7 +3673,8 @@ impl Clean<Vec<Item>> for doctree::Import {\n         } else {\n             let name = self.name;\n             if !denied {\n-                if let Some(items) = inline::try_inline(cx, path.def, name) {\n+                let mut visited = FxHashSet();\n+                if let Some(items) = inline::try_inline(cx, path.def, name, &mut visited) {\n                     return items;\n                 }\n             }"}, {"sha": "f03593dbee60bafaecc6db3e99c67b546eb97a01", "filename": "src/test/rustdoc/auxiliary/mod-stackoverflow.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf/src%2Ftest%2Frustdoc%2Fauxiliary%2Fmod-stackoverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf/src%2Ftest%2Frustdoc%2Fauxiliary%2Fmod-stackoverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fmod-stackoverflow.rs?ref=3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Cmetadata=aux\n+\n+pub mod tree {\n+    pub use tree;\n+}\n+\n+pub mod tree2 {\n+    pub mod prelude {\n+        pub use tree2;\n+    }\n+}"}, {"sha": "1e2f6dbe78045cdc924ccded637619854222c7c4", "filename": "src/test/rustdoc/mod-stackoverflow.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf/src%2Ftest%2Frustdoc%2Fmod-stackoverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf/src%2Ftest%2Frustdoc%2Fmod-stackoverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmod-stackoverflow.rs?ref=3ba7c00f94cd4ba046777a3cdbcb5fad17c1f6cf", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:mod-stackoverflow.rs\n+// ignore-cross-compile\n+\n+extern crate mod_stackoverflow;\n+pub use mod_stackoverflow::tree;\n+pub use mod_stackoverflow::tree2;"}]}