{"sha": "3b4a3d68b5d3026bab9d41fcc004439207ecff90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNGEzZDY4YjVkMzAyNmJhYjlkNDFmY2MwMDQ0MzkyMDdlY2ZmOTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-28T04:16:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-28T04:16:52Z"}, "message": "Auto merge of #72705 - Lucretiel:stdio-forwarding, r=Amanieu\n\nAdded io forwarding methods to the stdio structs\n\nAdded methods to forward the `io::Read` and `io::Write` methods of the myriad wrapper structs in `stdio.rs` to their underlying readers / writers. This is especially important for the structs on the outside of a locking boundary, to ensure that the lock isn't being dropped and re-acquired in a loop.", "tree": {"sha": "a0c0126fddb9069cec9b1703a7a7ff3b84064e85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0c0126fddb9069cec9b1703a7a7ff3b84064e85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b4a3d68b5d3026bab9d41fcc004439207ecff90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b4a3d68b5d3026bab9d41fcc004439207ecff90", "html_url": "https://github.com/rust-lang/rust/commit/3b4a3d68b5d3026bab9d41fcc004439207ecff90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b4a3d68b5d3026bab9d41fcc004439207ecff90/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bdd2db3a60176012f4dc240eea02d615cc60061", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bdd2db3a60176012f4dc240eea02d615cc60061", "html_url": "https://github.com/rust-lang/rust/commit/9bdd2db3a60176012f4dc240eea02d615cc60061"}, {"sha": "14d385bedeeec7fcb48f4c9bb881b1cdae011da0", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d385bedeeec7fcb48f4c9bb881b1cdae011da0", "html_url": "https://github.com/rust-lang/rust/commit/14d385bedeeec7fcb48f4c9bb881b1cdae011da0"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "d6b7ad6254a8cba2cad3a43bfe8f5e3f7c5e0599", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/3b4a3d68b5d3026bab9d41fcc004439207ecff90/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4a3d68b5d3026bab9d41fcc004439207ecff90/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=3b4a3d68b5d3026bab9d41fcc004439207ecff90", "patch": "@@ -96,7 +96,20 @@ impl Read for StdinRaw {\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n     }\n+\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.0.read_to_end(buf)\n+    }\n+\n+    fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n+        self.0.read_to_string(buf)\n+    }\n+\n+    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n+        self.0.read_exact(buf)\n+    }\n }\n+\n impl Write for StdoutRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n@@ -114,7 +127,20 @@ impl Write for StdoutRaw {\n     fn flush(&mut self) -> io::Result<()> {\n         self.0.flush()\n     }\n+\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        self.0.write_all(buf)\n+    }\n+\n+    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n+        self.0.write_all_vectored(bufs)\n+    }\n+\n+    fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()> {\n+        self.0.write_fmt(fmt)\n+    }\n }\n+\n impl Write for StderrRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n@@ -132,6 +158,18 @@ impl Write for StderrRaw {\n     fn flush(&mut self) -> io::Result<()> {\n         self.0.flush()\n     }\n+\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        self.0.write_all(buf)\n+    }\n+\n+    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n+        self.0.write_all_vectored(bufs)\n+    }\n+\n+    fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()> {\n+        self.0.write_fmt(fmt)\n+    }\n }\n \n enum Maybe<T> {\n@@ -420,16 +458,37 @@ impl Read for StdinLock<'_> {\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n     }\n+\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.inner.read_to_end(buf)\n+    }\n+\n+    fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n+        self.inner.read_to_string(buf)\n+    }\n+\n+    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n+        self.inner.read_exact(buf)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl BufRead for StdinLock<'_> {\n     fn fill_buf(&mut self) -> io::Result<&[u8]> {\n         self.inner.fill_buf()\n     }\n+\n     fn consume(&mut self, n: usize) {\n         self.inner.consume(n)\n     }\n+\n+    fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.inner.read_until(byte, buf)\n+    }\n+\n+    fn read_line(&mut self, buf: &mut String) -> io::Result<usize> {\n+        self.inner.read_line(buf)\n+    }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n@@ -593,6 +652,9 @@ impl Write for Stdout {\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n         self.lock().write_all(buf)\n     }\n+    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n+        self.lock().write_all_vectored(bufs)\n+    }\n     fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> io::Result<()> {\n         self.lock().write_fmt(args)\n     }\n@@ -612,6 +674,12 @@ impl Write for StdoutLock<'_> {\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.borrow_mut().flush()\n     }\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        self.inner.borrow_mut().write_all(buf)\n+    }\n+    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n+        self.inner.borrow_mut().write_all_vectored(bufs)\n+    }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n@@ -767,6 +835,9 @@ impl Write for Stderr {\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n         self.lock().write_all(buf)\n     }\n+    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n+        self.lock().write_all_vectored(bufs)\n+    }\n     fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> io::Result<()> {\n         self.lock().write_fmt(args)\n     }\n@@ -786,6 +857,12 @@ impl Write for StderrLock<'_> {\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.borrow_mut().flush()\n     }\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        self.inner.borrow_mut().write_all(buf)\n+    }\n+    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n+        self.inner.borrow_mut().write_all_vectored(bufs)\n+    }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]"}]}