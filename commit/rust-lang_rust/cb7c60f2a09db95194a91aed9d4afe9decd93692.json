{"sha": "cb7c60f2a09db95194a91aed9d4afe9decd93692", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiN2M2MGYyYTA5ZGI5NTE5NGE5MWFlZDlkNGFmZTlkZWNkOTM2OTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-29T21:55:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-29T21:55:57Z"}, "message": "Auto merge of #42264 - GuillaumeGomez:new-error-codes, r=Susurrus\n\nNew error codes\n\nPart of #42229.", "tree": {"sha": "44e73955fbe5524bbd7b771e5d55734c7f19e91c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44e73955fbe5524bbd7b771e5d55734c7f19e91c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb7c60f2a09db95194a91aed9d4afe9decd93692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb7c60f2a09db95194a91aed9d4afe9decd93692", "html_url": "https://github.com/rust-lang/rust/commit/cb7c60f2a09db95194a91aed9d4afe9decd93692", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb7c60f2a09db95194a91aed9d4afe9decd93692/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5de00925bd3eb59711dee4982eb96f82d5a5e71a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5de00925bd3eb59711dee4982eb96f82d5a5e71a", "html_url": "https://github.com/rust-lang/rust/commit/5de00925bd3eb59711dee4982eb96f82d5a5e71a"}, {"sha": "2969137a727d3fe2fea36c3a022ccb04b9b02617", "url": "https://api.github.com/repos/rust-lang/rust/commits/2969137a727d3fe2fea36c3a022ccb04b9b02617", "html_url": "https://github.com/rust-lang/rust/commit/2969137a727d3fe2fea36c3a022ccb04b9b02617"}], "stats": {"total": 529, "additions": 344, "deletions": 185}, "files": [{"sha": "3248731d1cafc2ef0c7d902ee185547d286f2017", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -701,7 +701,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     fn bckerr_to_diag(&self, err: &BckError<'tcx>) -> DiagnosticBuilder<'a> {\n         let span = err.span.clone();\n \n-        let msg = match err.code {\n+        match err.code {\n             err_mutbl => {\n                 let descr = match err.cmt.note {\n                     mc::NoteClosureEnv(_) | mc::NoteUpvarRef(_) => {\n@@ -725,10 +725,11 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n                 match err.cause {\n                     MutabilityViolation => {\n-                        format!(\"cannot assign to {}\", descr)\n+                        struct_span_err!(self.tcx.sess, span, E0594, \"cannot assign to {}\", descr)\n                     }\n                     BorrowViolation(euv::ClosureCapture(_)) => {\n-                        format!(\"closure cannot assign to {}\", descr)\n+                        struct_span_err!(self.tcx.sess, span, E0595,\n+                                         \"closure cannot assign to {}\", descr)\n                     }\n                     BorrowViolation(euv::OverloadedOperator) |\n                     BorrowViolation(euv::AddrOf) |\n@@ -737,7 +738,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     BorrowViolation(euv::AutoUnsafe) |\n                     BorrowViolation(euv::ForLoop) |\n                     BorrowViolation(euv::MatchDiscriminant) => {\n-                        format!(\"cannot borrow {} as mutable\", descr)\n+                        struct_span_err!(self.tcx.sess, span, E0596,\n+                                         \"cannot borrow {} as mutable\", descr)\n                     }\n                     BorrowViolation(euv::ClosureInvocation) => {\n                         span_bug!(err.span,\n@@ -752,17 +754,16 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         format!(\"`{}`\", self.loan_path_to_string(&lp))\n                     }\n                 };\n-                format!(\"{} does not live long enough\", msg)\n+                struct_span_err!(self.tcx.sess, span, E0597, \"{} does not live long enough\", msg)\n             }\n             err_borrowed_pointer_too_short(..) => {\n                 let descr = self.cmt_to_path_or_string(&err.cmt);\n-                format!(\"lifetime of {} is too short to guarantee \\\n-                         its contents can be safely reborrowed\",\n-                        descr)\n+                struct_span_err!(self.tcx.sess, span, E0598,\n+                                 \"lifetime of {} is too short to guarantee \\\n+                                  its contents can be safely reborrowed\",\n+                                 descr)\n             }\n-        };\n-\n-        self.struct_span_err(span, &msg)\n+        }\n     }\n \n     pub fn report_aliasability_violation(&self,\n@@ -1169,7 +1170,7 @@ before rustc 1.16, this temporary lived longer - see issue #39283 \\\n                 if kind == ty::ClosureKind::Fn {\n                     db.span_help(self.tcx.hir.span(upvar_id.closure_expr_id),\n                                  \"consider changing this closure to take \\\n-                                 self by mutable reference\");\n+                                  self by mutable reference\");\n                 }\n             }\n             _ => {"}, {"sha": "2a38dcfd26e1a026aaca6cc1d1bbd97e40651528", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1114,9 +1114,63 @@ fn main() {\n ```\n \"##,\n \n+E0596: r##\"\n+This error occurs because you tried to mutably borrow a non-mutable variable.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0596\n+let x = 1;\n+let y = &mut x; // error: cannot borrow mutably\n+```\n+\n+In here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\n+fails. To fix this error, you need to make `x` mutable:\n+\n+```\n+let mut x = 1;\n+let y = &mut x; // ok!\n+```\n+\"##,\n+\n+E0597: r##\"\n+This error occurs because a borrow was made inside a variable which has a\n+greater lifetime than the borrowed one.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0597\n+struct Foo<'a> {\n+    x: Option<&'a u32>,\n+}\n+\n+let mut x = Foo { x: None };\n+let y = 0;\n+x.x = Some(&y); // error: `y` does not live long enough\n+```\n+\n+In here, `x` is created before `y` and therefore has a greater lifetime. Always\n+keep in mind that values in a scope are dropped in the opposite order they are\n+created. So to fix the previous example, just make the `y` lifetime greater than\n+the `x`'s one:\n+\n+```\n+struct Foo<'a> {\n+    x: Option<&'a u32>,\n+}\n+\n+let y = 0;\n+let mut x = Foo { x: None };\n+x.x = Some(&y);\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {\n //    E0385, // {} in an aliasable location\n     E0524, // two closures require unique access to `..` at the same time\n+    E0594, // cannot assign to {}\n+    E0595, // closure cannot assign to {}\n+    E0598, // lifetime of {} is too short to guarantee its contents can be...\n }"}, {"sha": "594f1813a5ab4bcda290edf1ec001b257007204f", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -165,18 +165,21 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                .. }) => {\n                 let tcx = self.tcx;\n \n-                let mut err = self.type_error_struct(span,\n-                                                     |actual| {\n-                    format!(\"no {} named `{}` found for type `{}` in the current scope\",\n-                            if mode == Mode::MethodCall {\n-                                \"method\"\n-                            } else {\n-                                \"associated item\"\n-                            },\n-                            item_name,\n-                            actual)\n-                },\n-                                                     rcvr_ty);\n+                let actual = self.resolve_type_vars_if_possible(&rcvr_ty);\n+                let mut err = if !actual.references_error() {\n+                    struct_span_err!(tcx.sess, span, E0599,\n+                                     \"no {} named `{}` found for type `{}` in the \\\n+                                      current scope\",\n+                                     if mode == Mode::MethodCall {\n+                                         \"method\"\n+                                     } else {\n+                                         \"associated item\"\n+                                     },\n+                                     item_name,\n+                                     self.ty_to_string(actual))\n+                } else {\n+                    self.tcx.sess.diagnostic().struct_dummy()\n+                };\n \n                 // If the method name is the name of a field with a function or closure type,\n                 // give a helping note that it has to be called as (x.f)(...)."}, {"sha": "3709260acc997a5c09d9c1cdc8def7998c5eab83", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -316,10 +316,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match self.lookup_op_method(ex, operand_ty, vec![], mname, trait_did, operand_expr) {\n             Ok(t) => t,\n             Err(()) => {\n-                self.type_error_message(ex.span, |actual| {\n-                    format!(\"cannot apply unary operator `{}` to type `{}`\",\n-                            op_str, actual)\n-                }, operand_ty);\n+                let actual = self.resolve_type_vars_if_possible(&operand_ty);\n+                if !actual.references_error() {\n+                    struct_span_err!(self.tcx.sess, ex.span, E0600,\n+                                     \"cannot apply unary operator `{}` to type `{}`\",\n+                                     op_str, actual).emit();\n+                }\n                 self.tcx.types.err\n             }\n         }"}, {"sha": "910d5d7402478a104a26f72c1a5a78c43fb19396", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -4005,7 +4005,7 @@ details.\n [issue #33685]: https://github.com/rust-lang/rust/issues/33685\n \"##,\n \n-    E0582: r##\"\n+E0582: r##\"\n A lifetime appears only in an associated-type binding,\n and not in the input types to the trait.\n \n@@ -4042,6 +4042,59 @@ details.\n [issue #33685]: https://github.com/rust-lang/rust/issues/33685\n \"##,\n \n+E0599: r##\"\n+```compile_fail,E0599\n+struct Mouth;\n+\n+let x = Mouth;\n+x.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n+               //        in the current scope\n+```\n+\"##,\n+\n+E0600: r##\"\n+An unary operator was used on a type which doesn't implement it.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0600\n+enum Question {\n+    Yes,\n+    No,\n+}\n+\n+!Question::Yes; // error: cannot apply unary operator `!` to type `Question`\n+```\n+\n+In this case, `Question` would need to implement the `std::ops::Not` trait in\n+order to be able to use `!` on it. Let's implement it:\n+\n+```\n+use std::ops::Not;\n+\n+enum Question {\n+    Yes,\n+    No,\n+}\n+\n+// We implement the `Not` trait on the enum.\n+impl Not for Question {\n+    type Output = bool;\n+\n+    fn not(self) -> bool {\n+        match self {\n+            Question::Yes => false, // If the `Answer` is `Yes`, then it\n+                                    // returns false.\n+            Question::No => true, // And here we do the opposite.\n+        }\n+    }\n+}\n+\n+assert_eq!(!Question::Yes, false);\n+assert_eq!(!Question::No, true);\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "1f1af69d97768f2c9836cb07ded33f2481d09b4c", "filename": "src/test/compile-fail/E0596.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fcompile-fail%2FE0596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fcompile-fail%2FE0596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0596.rs?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = 1;\n+    let y = &mut x; //~ ERROR E0596\n+}"}, {"sha": "00ef14a8e2af036c535eec68f05908e4ad9a2509", "filename": "src/test/compile-fail/E0597.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fcompile-fail%2FE0597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fcompile-fail%2FE0597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0597.rs?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<'a> {\n+    x: Option<&'a u32>,\n+}\n+\n+fn main() {\n+    let mut x = Foo { x: None };\n+    let y = 0;\n+    x.x = Some(&y);\n+} //~ `y` does not live long enough [E0597]"}, {"sha": "5457ff266086f3fdff184b201000e621dcfab18b", "filename": "src/test/compile-fail/E0600.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fcompile-fail%2FE0600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fcompile-fail%2FE0600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0600.rs?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    !\"a\"; //~ ERROR E0600\n+}"}, {"sha": "46b3db18e8a5c8f8411cd87f574ca43616707dd2", "filename": "src/test/ui/codemap_tests/huge_multispan_highlight.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: cannot borrow immutable local variable `x` as mutable\n+error[E0596]: cannot borrow immutable local variable `x` as mutable\n    --> $DIR/huge_multispan_highlight.rs:100:18\n     |\n 12  |     let x = \"foo\";"}, {"sha": "43743b796d5e45697c5a6b7183284cba86ab11ec", "filename": "src/test/ui/codemap_tests/issue-28308.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: cannot apply unary operator `!` to type `&'static str`\n+error[E0600]: cannot apply unary operator `!` to type `&'static str`\n   --> $DIR/issue-28308.rs:12:5\n    |\n 12 |     assert!(\"foo\");"}, {"sha": "eecb164a83fdc9ba94fea0eee914c1d104624b97", "filename": "src/test/ui/did_you_mean/issue-31424.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: cannot borrow immutable argument `self` as mutable\n+error[E0596]: cannot borrow immutable argument `self` as mutable\n   --> $DIR/issue-31424.rs:17:15\n    |\n 17 |         (&mut self).bar();\n@@ -7,7 +7,7 @@ error: cannot borrow immutable argument `self` as mutable\n    |               try removing `&mut` here\n    |               cannot reborrow mutably\n \n-error: cannot borrow immutable argument `self` as mutable\n+error[E0596]: cannot borrow immutable argument `self` as mutable\n   --> $DIR/issue-31424.rs:23:15\n    |\n 22 |     fn bar(self: &mut Self) {"}, {"sha": "d5d6ee133b81936507d9f966e4798de1cc26d004", "filename": "src/test/ui/did_you_mean/issue-34126.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: cannot borrow immutable argument `self` as mutable\n+error[E0596]: cannot borrow immutable argument `self` as mutable\n   --> $DIR/issue-34126.rs:16:23\n    |\n 16 |         self.run(&mut self);"}, {"sha": "2769c74be5ef8d8267b21148e6a6a1b7fdaa9ced", "filename": "src/test/ui/did_you_mean/issue-34337.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: cannot borrow immutable local variable `key` as mutable\n+error[E0596]: cannot borrow immutable local variable `key` as mutable\n   --> $DIR/issue-34337.rs:16:14\n    |\n 16 |     get(&mut key);"}, {"sha": "4760d28566fcf22478c5179d1ee47fadbbdadc48", "filename": "src/test/ui/did_you_mean/issue-35937.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,20 +1,20 @@\n-error: cannot borrow immutable field `f.v` as mutable\n+error[E0596]: cannot borrow immutable field `f.v` as mutable\n   --> $DIR/issue-35937.rs:17:5\n    |\n 16 |     let f = Foo { v: Vec::new() };\n    |         - consider changing this to `mut f`\n 17 |     f.v.push(\"cat\".to_string());\n    |     ^^^ cannot mutably borrow immutable field\n \n-error: cannot assign to immutable field `s.x`\n+error[E0594]: cannot assign to immutable field `s.x`\n   --> $DIR/issue-35937.rs:26:5\n    |\n 25 |     let s = S { x: 42 };\n    |         - consider changing this to `mut s`\n 26 |     s.x += 1;\n    |     ^^^^^^^^ cannot mutably borrow immutable field\n \n-error: cannot assign to immutable field `s.x`\n+error[E0594]: cannot assign to immutable field `s.x`\n   --> $DIR/issue-35937.rs:30:5\n    |\n 29 | fn bar(s: S) {"}, {"sha": "6debbaadb1ab1ee778d3e8738530bb6623b99f6c", "filename": "src/test/ui/did_you_mean/issue-37139.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: cannot borrow immutable local variable `x` as mutable\n+error[E0596]: cannot borrow immutable local variable `x` as mutable\n   --> $DIR/issue-37139.rs:22:23\n    |\n 22 |             test(&mut x);"}, {"sha": "2834fc6262fb2ab8e5c7b652654b9e6a99477994", "filename": "src/test/ui/did_you_mean/issue-38147-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: cannot borrow immutable borrowed content `*self.s` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*self.s` as mutable\n   --> $DIR/issue-38147-2.rs:17:9\n    |\n 12 |     s: &'a String"}, {"sha": "d950e82003cc036d1a62ec4f5fe151cd4db30eef", "filename": "src/test/ui/did_you_mean/issue-38147-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: cannot borrow immutable borrowed content `*self.s` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*self.s` as mutable\n   --> $DIR/issue-38147-3.rs:17:9\n    |\n 12 |     s: &'a String"}, {"sha": "94afe896d5ead42e5141a713e796351e58b2638c", "filename": "src/test/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,28 +1,28 @@\n-error: cannot borrow immutable field `z.x` as mutable\n+error[E0596]: cannot borrow immutable field `z.x` as mutable\n   --> $DIR/issue-39544.rs:21:18\n    |\n 20 |     let z = Z { x: X::Y };\n    |         - consider changing this to `mut z`\n 21 |     let _ = &mut z.x;\n    |                  ^^^ cannot mutably borrow immutable field\n \n-error: cannot borrow immutable field `self.x` as mutable\n+error[E0596]: cannot borrow immutable field `self.x` as mutable\n   --> $DIR/issue-39544.rs:26:22\n    |\n 25 |     fn foo<'z>(&'z self) {\n    |                -------- use `&'z mut self` here to make mutable\n 26 |         let _ = &mut self.x;\n    |                      ^^^^^^ cannot mutably borrow immutable field\n \n-error: cannot borrow immutable field `self.x` as mutable\n+error[E0596]: cannot borrow immutable field `self.x` as mutable\n   --> $DIR/issue-39544.rs:30:22\n    |\n 29 |     fn foo1(&self, other: &Z) {\n    |             ----- use `&mut self` here to make mutable\n 30 |         let _ = &mut self.x;\n    |                      ^^^^^^ cannot mutably borrow immutable field\n \n-error: cannot borrow immutable field `other.x` as mutable\n+error[E0596]: cannot borrow immutable field `other.x` as mutable\n   --> $DIR/issue-39544.rs:31:22\n    |\n 29 |     fn foo1(&self, other: &Z) {\n@@ -31,15 +31,15 @@ error: cannot borrow immutable field `other.x` as mutable\n 31 |         let _ = &mut other.x;\n    |                      ^^^^^^^ cannot mutably borrow immutable field\n \n-error: cannot borrow immutable field `self.x` as mutable\n+error[E0596]: cannot borrow immutable field `self.x` as mutable\n   --> $DIR/issue-39544.rs:35:22\n    |\n 34 |     fn foo2<'a>(&'a self, other: &Z) {\n    |                 -------- use `&'a mut self` here to make mutable\n 35 |         let _ = &mut self.x;\n    |                      ^^^^^^ cannot mutably borrow immutable field\n \n-error: cannot borrow immutable field `other.x` as mutable\n+error[E0596]: cannot borrow immutable field `other.x` as mutable\n   --> $DIR/issue-39544.rs:36:22\n    |\n 34 |     fn foo2<'a>(&'a self, other: &Z) {\n@@ -48,15 +48,15 @@ error: cannot borrow immutable field `other.x` as mutable\n 36 |         let _ = &mut other.x;\n    |                      ^^^^^^^ cannot mutably borrow immutable field\n \n-error: cannot borrow immutable field `self.x` as mutable\n+error[E0596]: cannot borrow immutable field `self.x` as mutable\n   --> $DIR/issue-39544.rs:40:22\n    |\n 39 |     fn foo3<'a>(self: &'a Self, other: &Z) {\n    |                       -------- use `&'a mut Self` here to make mutable\n 40 |         let _ = &mut self.x;\n    |                      ^^^^^^ cannot mutably borrow immutable field\n \n-error: cannot borrow immutable field `other.x` as mutable\n+error[E0596]: cannot borrow immutable field `other.x` as mutable\n   --> $DIR/issue-39544.rs:41:22\n    |\n 39 |     fn foo3<'a>(self: &'a Self, other: &Z) {\n@@ -65,23 +65,23 @@ error: cannot borrow immutable field `other.x` as mutable\n 41 |         let _ = &mut other.x;\n    |                      ^^^^^^^ cannot mutably borrow immutable field\n \n-error: cannot borrow immutable field `other.x` as mutable\n+error[E0596]: cannot borrow immutable field `other.x` as mutable\n   --> $DIR/issue-39544.rs:45:22\n    |\n 44 |     fn foo4(other: &Z) {\n    |                    -- use `&mut Z` here to make mutable\n 45 |         let _ = &mut other.x;\n    |                      ^^^^^^^ cannot mutably borrow immutable field\n \n-error: cannot borrow immutable field `z.x` as mutable\n+error[E0596]: cannot borrow immutable field `z.x` as mutable\n   --> $DIR/issue-39544.rs:51:18\n    |\n 50 | pub fn with_arg(z: Z, w: &Z) {\n    |                 - consider changing this to `mut z`\n 51 |     let _ = &mut z.x;\n    |                  ^^^ cannot mutably borrow immutable field\n \n-error: cannot borrow immutable field `w.x` as mutable\n+error[E0596]: cannot borrow immutable field `w.x` as mutable\n   --> $DIR/issue-39544.rs:52:18\n    |\n 50 | pub fn with_arg(z: Z, w: &Z) {\n@@ -90,7 +90,7 @@ error: cannot borrow immutable field `w.x` as mutable\n 52 |     let _ = &mut w.x;\n    |                  ^^^ cannot mutably borrow immutable field\n \n-error: cannot assign to immutable borrowed content `*x.0`\n+error[E0594]: cannot assign to immutable borrowed content `*x.0`\n   --> $DIR/issue-39544.rs:58:5\n    |\n 58 |     *x.0 = 1;"}, {"sha": "a034ea809692ae87486adbc7fb1e435837936214", "filename": "src/test/ui/did_you_mean/issue-40823.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: cannot borrow immutable borrowed content `*buf` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*buf` as mutable\n   --> $DIR/issue-40823.rs:13:5\n    |\n 13 |     buf.iter_mut();"}, {"sha": "a5a3c48ab9752b1d716ce91b3020e19b93503af4", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `c` does not live long enough\n+error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n    |\n 39 |     dt = Dt(\"dt\", &c); //~ ERROR `c` does not live long enough\n@@ -9,7 +9,7 @@ error: `c` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `c` does not live long enough\n+error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n    |\n 40 |     dr = Dr(\"dr\", &c); //~ ERROR `c` does not live long enough\n@@ -20,7 +20,7 @@ error: `c` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `c` does not live long enough\n+error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n    |\n 47 |     pt = Pt(\"pt\", &c_long, &c); //~ ERROR `c` does not live long enough\n@@ -31,7 +31,7 @@ error: `c` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `c` does not live long enough\n+error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n    |\n 48 |     pr = Pr(\"pr\", &c_long, &c); //~ ERROR `c` does not live long enough"}, {"sha": "de04a1c4283d1bf029db00892f97a3382e58d306", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `c` does not live long enough\n+error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-reorder.rs:73:1\n    |\n 57 |     dt = Dt(\"dt\", &c); //~ ERROR `c` does not live long enough\n@@ -9,7 +9,7 @@ error: `c` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `c` does not live long enough\n+error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-reorder.rs:73:1\n    |\n 58 |     dr = Dr(\"dr\", &c); //~ ERROR `c` does not live long enough\n@@ -20,7 +20,7 @@ error: `c` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `c` does not live long enough\n+error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-reorder.rs:73:1\n    |\n 65 |     pt = Pt(\"pt\", &c_long, &c); //~ ERROR `c` does not live long enough\n@@ -31,7 +31,7 @@ error: `c` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `c` does not live long enough\n+error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch-reorder.rs:73:1\n    |\n 66 |     pr = Pr(\"pr\", &c_long, &c); //~ ERROR `c` does not live long enough"}, {"sha": "26fee852fb24ac78b3be69578c92f3f8a12f2825", "filename": "src/test/ui/dropck/dropck-eyepatch.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `c` does not live long enough\n+error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch.rs:96:1\n    |\n 80 |     dt = Dt(\"dt\", &c); //~ ERROR `c` does not live long enough\n@@ -9,7 +9,7 @@ error: `c` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `c` does not live long enough\n+error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch.rs:96:1\n    |\n 81 |     dr = Dr(\"dr\", &c); //~ ERROR `c` does not live long enough\n@@ -20,7 +20,7 @@ error: `c` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `c` does not live long enough\n+error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch.rs:96:1\n    |\n 88 |     pt = Pt(\"pt\", &c_long, &c); //~ ERROR `c` does not live long enough\n@@ -31,7 +31,7 @@ error: `c` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `c` does not live long enough\n+error[E0597]: `c` does not live long enough\n   --> $DIR/dropck-eyepatch.rs:96:1\n    |\n 89 |     pr = Pr(\"pr\", &c_long, &c); //~ ERROR `c` does not live long enough"}, {"sha": "4625e9269c9950de08e585d8cdfc5ebb9d329774", "filename": "src/test/ui/issue-41652/issue_41652.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: no method named `f` found for type `{integer}` in the current scope\n+error[E0599]: no method named `f` found for type `{integer}` in the current scope\n   --> $DIR/issue_41652.rs:19:11\n    |\n 19 |         3.f()"}, {"sha": "2bc0acd626c0735b5a51ae61e7f5838f82132ab7", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: borrowed value does not live long enough\n+error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-let-suggestion.rs:12:23\n    |\n 12 |     let x = [1].iter();"}, {"sha": "2c83a84f0040f1693a8b6194d179dccf0f0d1a20", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: no method named `fake` found for type `{integer}` in the current scope\n+error[E0599]: no method named `fake` found for type `{integer}` in the current scope\n   --> $DIR/macro-backtrace-invalid-internals.rs:15:13\n    |\n 15 |           1.fake()\n@@ -25,7 +25,7 @@ error: attempted tuple index `0` on type `{integer}`, but the type was not a tup\n 52 |     fake_anon_field_stmt!();\n    |     ------------------------ in this macro invocation\n \n-error: no method named `fake` found for type `{integer}` in the current scope\n+error[E0599]: no method named `fake` found for type `{integer}` in the current scope\n   --> $DIR/macro-backtrace-invalid-internals.rs:33:13\n    |\n 33 |           1.fake()"}, {"sha": "8b756814ced80425838711fe706045f3c3fc2841", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: no method named `count` found for type `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:17:39: 17:53]>` in the current scope\n+error[E0599]: no method named `count` found for type `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:17:39: 17:53]>` in the current scope\n   --> $DIR/issue-36053-2.rs:17:55\n    |\n 17 |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();"}, {"sha": "80f95da0bbe443f2b5f73de93d23f3029e548522", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: no method named `unwrap` found for type `std::result::Result<(), Foo>` in the current scope\n+error[E0599]: no method named `unwrap` found for type `std::result::Result<(), Foo>` in the current scope\n   --> $DIR/method-help-unsatisfied-bound.rs:15:7\n    |\n 15 |     a.unwrap();"}, {"sha": "f47791455afed5a84beee86f6b612cf37cc71ab2", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: cannot apply unary operator `!` to type `!`\n+error[E0600]: cannot apply unary operator `!` to type `!`\n   --> $DIR/expr_unary.rs:18:16\n    |\n 18 |     let x: ! = ! { return; 22 };"}, {"sha": "4b01f5bea7cf2f28a3f2b7fd4df0eb824eb6b0be", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,12 +1,12 @@\n-error: cannot borrow immutable argument `x` as mutable\n+error[E0596]: cannot borrow immutable argument `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:63:24\n    |\n 62 | fn deref_mut_field1(x: Own<Point>) {\n    |                     - consider changing this to `mut x`\n 63 |     let __isize = &mut x.y; //~ ERROR cannot borrow\n    |                        ^ cannot borrow mutably\n \n-error: cannot borrow immutable borrowed content `*x` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:75:10\n    |\n 74 | fn deref_extend_mut_field1(x: &Own<Point>) -> &mut isize {\n@@ -24,15 +24,15 @@ error[E0499]: cannot borrow `*x` as mutable more than once at a time\n 89 | }\n    | - first borrow ends here\n \n-error: cannot borrow immutable argument `x` as mutable\n+error[E0596]: cannot borrow immutable argument `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:98:5\n    |\n 97 | fn assign_field1<'a>(x: Own<Point>) {\n    |                      - consider changing this to `mut x`\n 98 |     x.y = 3; //~ ERROR cannot borrow\n    |     ^ cannot borrow mutably\n \n-error: cannot borrow immutable borrowed content `*x` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n    --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:102:5\n     |\n 101 | fn assign_field2<'a>(x: &'a Own<Point>) {\n@@ -50,31 +50,31 @@ error[E0499]: cannot borrow `*x` as mutable more than once at a time\n 112 | }\n     | - first borrow ends here\n \n-error: cannot borrow immutable argument `x` as mutable\n+error[E0596]: cannot borrow immutable argument `x` as mutable\n    --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:119:5\n     |\n 118 | fn deref_mut_method1(x: Own<Point>) {\n     |                      - consider changing this to `mut x`\n 119 |     x.set(0, 0); //~ ERROR cannot borrow\n     |     ^ cannot borrow mutably\n \n-error: cannot borrow immutable borrowed content `*x` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n    --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:131:5\n     |\n 130 | fn deref_extend_mut_method1(x: &Own<Point>) -> &mut isize {\n     |                                ----------- use `&mut Own<Point>` here to make mutable\n 131 |     x.y_mut() //~ ERROR cannot borrow\n     |     ^ cannot borrow as mutable\n \n-error: cannot borrow immutable argument `x` as mutable\n+error[E0596]: cannot borrow immutable argument `x` as mutable\n    --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:139:6\n     |\n 138 | fn assign_method1<'a>(x: Own<Point>) {\n     |                       - consider changing this to `mut x`\n 139 |     *x.y_mut() = 3; //~ ERROR cannot borrow\n     |      ^ cannot borrow mutably\n \n-error: cannot borrow immutable borrowed content `*x` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n    --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:143:6\n     |\n 142 | fn assign_method2<'a>(x: &'a Own<Point>) {"}, {"sha": "886cc14203956e293d2e38032ebcd3440feb7759", "filename": "src/test/ui/span/borrowck-borrow-overloaded-deref-mut.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,28 +1,28 @@\n-error: cannot borrow immutable argument `x` as mutable\n+error[E0596]: cannot borrow immutable argument `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:39:25\n    |\n 38 | fn deref_mut1(x: Own<isize>) {\n    |               - consider changing this to `mut x`\n 39 |     let __isize = &mut *x; //~ ERROR cannot borrow\n    |                         ^ cannot borrow mutably\n \n-error: cannot borrow immutable borrowed content `*x` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:51:11\n    |\n 50 | fn deref_extend_mut1<'a>(x: &'a Own<isize>) -> &'a mut isize {\n    |                             -------------- use `&'a mut Own<isize>` here to make mutable\n 51 |     &mut **x //~ ERROR cannot borrow\n    |           ^^ cannot borrow as mutable\n \n-error: cannot borrow immutable argument `x` as mutable\n+error[E0596]: cannot borrow immutable argument `x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:59:6\n    |\n 58 | fn assign1<'a>(x: Own<isize>) {\n    |                - consider changing this to `mut x`\n 59 |     *x = 3; //~ ERROR cannot borrow\n    |      ^ cannot borrow mutably\n \n-error: cannot borrow immutable borrowed content `*x` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:63:6\n    |\n 62 | fn assign2<'a>(x: &'a Own<isize>) {"}, {"sha": "a26ca490dd5eed7b9a1fac1165d11ef1f4f1578d", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -11,7 +11,7 @@ error[E0499]: cannot borrow `f` as mutable more than once at a time\n 27 |     }));\n    |       - first borrow ends here\n \n-error: cannot borrow immutable borrowed content `*f` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*f` as mutable\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:39:5\n    |\n 37 | fn test2<F>(f: &F) where F: FnMut() {\n@@ -20,7 +20,7 @@ error: cannot borrow immutable borrowed content `*f` as mutable\n 39 |     (*f)();\n    |     ^^^^ cannot borrow as mutable\n \n-error: cannot borrow immutable `Box` content `*f.f` as mutable\n+error[E0596]: cannot borrow immutable `Box` content `*f.f` as mutable\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:50:5\n    |\n 48 | fn test4(f: &Test) {"}, {"sha": "dea95d6bf6dcabf5ad3ae93ff8018dc68c23b3e1", "filename": "src/test/ui/span/borrowck-call-method-from-mut-aliasable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: cannot borrow immutable borrowed content `*x` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n   --> $DIR/borrowck-call-method-from-mut-aliasable.rs:27:5\n    |\n 25 | fn b(x: &Foo) {"}, {"sha": "3bf56881c54aee44cb093bf3eb5e5e08890cd7f5", "filename": "src/test/ui/span/borrowck-fn-in-const-b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: cannot borrow immutable borrowed content `*x` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n   --> $DIR/borrowck-fn-in-const-b.rs:17:9\n    |\n 16 |     fn broken(x: &Vec<String>) {"}, {"sha": "04dbcd2ef499f0fa8758579aa027b984e0512999", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `young[..]` does not live long enough\n+error[E0597]: `young[..]` does not live long enough\n   --> $DIR/borrowck-let-suggestion-suffixes.rs:52:1\n    |\n 19 |     v2.push(&young[0]);      // statement 4\n@@ -9,7 +9,7 @@ error: `young[..]` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: borrowed value does not live long enough\n+error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-let-suggestion-suffixes.rs:24:18\n    |\n 24 |     v3.push(&'x');           // statement 6\n@@ -22,7 +22,7 @@ error: borrowed value does not live long enough\n    |\n    = note: consider using a `let` binding to increase its lifetime\n \n-error: borrowed value does not live long enough\n+error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-let-suggestion-suffixes.rs:34:22\n    |\n 34 |         v4.push(&'y');\n@@ -35,7 +35,7 @@ error: borrowed value does not live long enough\n    |\n    = note: consider using a `let` binding to increase its lifetime\n \n-error: borrowed value does not live long enough\n+error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-let-suggestion-suffixes.rs:45:18\n    |\n 45 |     v5.push(&'z');"}, {"sha": "877b17dc27dff8f26621a6cbb797514eebf38fcb", "filename": "src/test/ui/span/borrowck-object-mutability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: cannot borrow immutable borrowed content `*x` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n   --> $DIR/borrowck-object-mutability.rs:19:5\n    |\n 17 | fn borrowed_receiver(x: &Foo) {\n@@ -7,7 +7,7 @@ error: cannot borrow immutable borrowed content `*x` as mutable\n 19 |     x.borrowed_mut(); //~ ERROR cannot borrow\n    |     ^ cannot borrow as mutable\n \n-error: cannot borrow immutable `Box` content `*x` as mutable\n+error[E0596]: cannot borrow immutable `Box` content `*x` as mutable\n   --> $DIR/borrowck-object-mutability.rs:29:5\n    |\n 27 | fn owned_receiver(x: Box<Foo>) {"}, {"sha": "e0a484bcb37ad7f3dca3b0494e0df964440f357e", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: borrowed value does not live long enough\n+error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-ref-into-rvalue.rs:18:5\n    |\n 14 |         Some(ref m) => { //~ ERROR borrowed value does not live long enough"}, {"sha": "1472a364863de3116992f4bc5f6c79e6291456d7", "filename": "src/test/ui/span/destructor-restrictions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `*a` does not live long enough\n+error[E0597]: `*a` does not live long enough\n   --> $DIR/destructor-restrictions.rs:19:5\n    |\n 18 |         *a.borrow() + 1    //~ ERROR `*a` does not live long enough"}, {"sha": "d0fceb2a03eefcd84867b35d4c594b05919790ca", "filename": "src/test/ui/span/dropck-object-cycle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `*m` does not live long enough\n+error[E0597]: `*m` does not live long enough\n   --> $DIR/dropck-object-cycle.rs:57:1\n    |\n 37 |     assert_eq!(object_invoke1(&*m), (4,5));"}, {"sha": "2a9c2c8413f5737cb130f60029e898f0e83b6bd5", "filename": "src/test/ui/span/dropck_arr_cycle_checked.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `b2` does not live long enough\n+error[E0597]: `b2` does not live long enough\n    --> $DIR/dropck_arr_cycle_checked.rs:109:1\n     |\n 103 |     b1.a[0].v.set(Some(&b2));\n@@ -9,7 +9,7 @@ error: `b2` does not live long enough\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n-error: `b3` does not live long enough\n+error[E0597]: `b3` does not live long enough\n    --> $DIR/dropck_arr_cycle_checked.rs:109:1\n     |\n 104 |     b1.a[1].v.set(Some(&b3));\n@@ -20,7 +20,7 @@ error: `b3` does not live long enough\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n-error: `b2` does not live long enough\n+error[E0597]: `b2` does not live long enough\n    --> $DIR/dropck_arr_cycle_checked.rs:109:1\n     |\n 105 |     b2.a[0].v.set(Some(&b2));\n@@ -31,7 +31,7 @@ error: `b2` does not live long enough\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n-error: `b3` does not live long enough\n+error[E0597]: `b3` does not live long enough\n    --> $DIR/dropck_arr_cycle_checked.rs:109:1\n     |\n 106 |     b2.a[1].v.set(Some(&b3));\n@@ -42,7 +42,7 @@ error: `b3` does not live long enough\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n-error: `b1` does not live long enough\n+error[E0597]: `b1` does not live long enough\n    --> $DIR/dropck_arr_cycle_checked.rs:109:1\n     |\n 107 |     b3.a[0].v.set(Some(&b1));\n@@ -53,7 +53,7 @@ error: `b1` does not live long enough\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n-error: `b2` does not live long enough\n+error[E0597]: `b2` does not live long enough\n    --> $DIR/dropck_arr_cycle_checked.rs:109:1\n     |\n 108 |     b3.a[1].v.set(Some(&b2));"}, {"sha": "e6421cd47854e506a64a195ce06b2c6f1fb4bf99", "filename": "src/test/ui/span/dropck_direct_cycle_with_drop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `d2` does not live long enough\n+error[E0597]: `d2` does not live long enough\n   --> $DIR/dropck_direct_cycle_with_drop.rs:48:1\n    |\n 46 |     d1.p.set(Some(&d2));\n@@ -9,7 +9,7 @@ error: `d2` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `d1` does not live long enough\n+error[E0597]: `d1` does not live long enough\n   --> $DIR/dropck_direct_cycle_with_drop.rs:48:1\n    |\n 47 |     d2.p.set(Some(&d1));"}, {"sha": "7fbdcba7eb6887c0ad457dcec2e2b1699d0c0f61", "filename": "src/test/ui/span/dropck_misc_variants.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `bomb` does not live long enough\n+error[E0597]: `bomb` does not live long enough\n   --> $DIR/dropck_misc_variants.rs:34:1\n    |\n 33 |     _w = Wrap::<&[&str]>(NoisyDrop(&bomb));\n@@ -8,7 +8,7 @@ error: `bomb` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `v` does not live long enough\n+error[E0597]: `v` does not live long enough\n   --> $DIR/dropck_misc_variants.rs:44:1\n    |\n 41 |         let u = NoisyDrop(&v);"}, {"sha": "3861b145c1b5fcdc1fb8b309db5bde29148025e7", "filename": "src/test/ui/span/dropck_vec_cycle_checked.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `c2` does not live long enough\n+error[E0597]: `c2` does not live long enough\n    --> $DIR/dropck_vec_cycle_checked.rs:116:1\n     |\n 110 |     c1.v[0].v.set(Some(&c2));\n@@ -9,7 +9,7 @@ error: `c2` does not live long enough\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n-error: `c3` does not live long enough\n+error[E0597]: `c3` does not live long enough\n    --> $DIR/dropck_vec_cycle_checked.rs:116:1\n     |\n 111 |     c1.v[1].v.set(Some(&c3));\n@@ -20,7 +20,7 @@ error: `c3` does not live long enough\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n-error: `c2` does not live long enough\n+error[E0597]: `c2` does not live long enough\n    --> $DIR/dropck_vec_cycle_checked.rs:116:1\n     |\n 112 |     c2.v[0].v.set(Some(&c2));\n@@ -31,7 +31,7 @@ error: `c2` does not live long enough\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n-error: `c3` does not live long enough\n+error[E0597]: `c3` does not live long enough\n    --> $DIR/dropck_vec_cycle_checked.rs:116:1\n     |\n 113 |     c2.v[1].v.set(Some(&c3));\n@@ -42,7 +42,7 @@ error: `c3` does not live long enough\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n-error: `c1` does not live long enough\n+error[E0597]: `c1` does not live long enough\n    --> $DIR/dropck_vec_cycle_checked.rs:116:1\n     |\n 114 |     c3.v[0].v.set(Some(&c1));\n@@ -53,7 +53,7 @@ error: `c1` does not live long enough\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n-error: `c2` does not live long enough\n+error[E0597]: `c2` does not live long enough\n    --> $DIR/dropck_vec_cycle_checked.rs:116:1\n     |\n 115 |     c3.v[1].v.set(Some(&c2));"}, {"sha": "67d60fe085ad278c2a72306e3cf97a8e935086b0", "filename": "src/test/ui/span/issue-11925.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `x` does not live long enough\n+error[E0597]: `x` does not live long enough\n   --> $DIR/issue-11925.rs:18:36\n    |\n 18 |         let f = to_fn_once(move|| &x);"}, {"sha": "f5f987c823f731f463c7251fc2b777e8262102a4", "filename": "src/test/ui/span/issue-15480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: borrowed value does not live long enough\n+error[E0597]: borrowed value does not live long enough\n   --> $DIR/issue-15480.rs:14:6\n    |\n 13 |         &3"}, {"sha": "e564b7ccef2356b6dce8c1dfbf3852078a1d09b5", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `y` does not live long enough\n+error[E0597]: `y` does not live long enough\n   --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:21:1\n    |\n 20 |     y.borrow().clone()\n@@ -8,7 +8,7 @@ error: `y` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `y` does not live long enough\n+error[E0597]: `y` does not live long enough\n   --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:28:5\n    |\n 27 |         y.borrow().clone() //~ ERROR `y` does not live long enough"}, {"sha": "314ef0ecbbcd304e710507e50f750e9202d634c6", "filename": "src/test/ui/span/issue-24805-dropck-child-has-items-via-parent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `d1` does not live long enough\n+error[E0597]: `d1` does not live long enough\n   --> $DIR/issue-24805-dropck-child-has-items-via-parent.rs:42:1\n    |\n 38 |     _d = D_Child(&d1);"}, {"sha": "66f22d14578bbb68ee4e58bbbcae164dfba7a5b5", "filename": "src/test/ui/span/issue-24805-dropck-trait-has-items.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `d1` does not live long enough\n+error[E0597]: `d1` does not live long enough\n   --> $DIR/issue-24805-dropck-trait-has-items.rs:48:1\n    |\n 47 |     _d = D_HasSelfMethod(&d1);\n@@ -8,7 +8,7 @@ error: `d1` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `d1` does not live long enough\n+error[E0597]: `d1` does not live long enough\n   --> $DIR/issue-24805-dropck-trait-has-items.rs:54:1\n    |\n 53 |     _d = D_HasMethodWithSelfArg(&d1);\n@@ -18,7 +18,7 @@ error: `d1` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `d1` does not live long enough\n+error[E0597]: `d1` does not live long enough\n   --> $DIR/issue-24805-dropck-trait-has-items.rs:60:1\n    |\n 59 |     _d = D_HasType(&d1);"}, {"sha": "cfa8359088a9fbb28bf14f7ed0939ea1f7614cab", "filename": "src/test/ui/span/issue-24895-copy-clone-dropck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `d1` does not live long enough\n+error[E0597]: `d1` does not live long enough\n   --> $DIR/issue-24895-copy-clone-dropck.rs:38:1\n    |\n 37 |     d2 = D(S(&d1, \"inner\"), \"d2\");"}, {"sha": "999871db0939b05b6d2727f1c586a09dc23e8a33", "filename": "src/test/ui/span/issue-25199.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-25199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-25199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-25199.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `container` does not live long enough\n+error[E0597]: `container` does not live long enough\n   --> $DIR/issue-25199.rs:83:1\n    |\n 80 |     let test = Test{test: &container};\n@@ -9,7 +9,7 @@ error: `container` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `container` does not live long enough\n+error[E0597]: `container` does not live long enough\n   --> $DIR/issue-25199.rs:83:1\n    |\n 82 |     container.store(test);"}, {"sha": "b4f0195f6a8bc6e807fec79a1f6e2cda794bb478", "filename": "src/test/ui/span/issue-26656.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-26656.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-26656.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-26656.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `ticking` does not live long enough\n+error[E0597]: `ticking` does not live long enough\n   --> $DIR/issue-26656.rs:51:1\n    |\n 50 |     zook.button = B::BigRedButton(&ticking);"}, {"sha": "b645cbf402d95cd54576af6be177339caaca3ac9", "filename": "src/test/ui/span/issue-29106.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-29106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-29106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29106.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `x` does not live long enough\n+error[E0597]: `x` does not live long enough\n   --> $DIR/issue-29106.rs:27:5\n    |\n 26 |         y = Arc::new(Foo(&x));\n@@ -8,7 +8,7 @@ error: `x` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `x` does not live long enough\n+error[E0597]: `x` does not live long enough\n   --> $DIR/issue-29106.rs:33:5\n    |\n 32 |         y = Rc::new(Foo(&x));"}, {"sha": "df06cd1d0ea0c88e089ef7ee24e51fd396e6a671", "filename": "src/test/ui/span/issue-36537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `a` does not live long enough\n+error[E0597]: `a` does not live long enough\n   --> $DIR/issue-36537.rs:15:1\n    |\n 14 |     p = &a; //~ NOTE borrow occurs here"}, {"sha": "50183aa3bde813f587d1207f7ea873d9c598cf60", "filename": "src/test/ui/span/issue-40157.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `foo` does not live long enough\n+error[E0597]: `foo` does not live long enough\n   --> $DIR/issue-40157.rs:12:64\n    |\n 12 |     {println!(\"{:?}\", match { let foo = vec![1, 2]; foo.get(1) } { x => x });}"}, {"sha": "9f368f0de9661d1a076b8875690fdbc9fbee32b4", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: no method named `f9` found for type `usize` in the current scope\n+error[E0599]: no method named `f9` found for type `usize` in the current scope\n   --> $DIR/issue-7575.rs:74:18\n    |\n 74 |     u.f8(42) + u.f9(342) + m.fff(42)\n@@ -28,7 +28,7 @@ note: candidate #3 is defined in the trait `UnusedTrait`\n    = help: candidate #2: `OtherTrait`\n    = help: candidate #3: `UnusedTrait`\n \n-error: no method named `fff` found for type `Myisize` in the current scope\n+error[E0599]: no method named `fff` found for type `Myisize` in the current scope\n   --> $DIR/issue-7575.rs:74:30\n    |\n 74 |     u.f8(42) + u.f9(342) + m.fff(42)\n@@ -43,7 +43,7 @@ note: candidate #1 is defined in an impl for the type `Myisize`\n 53 | |     }\n    | |_____^\n \n-error: no method named `is_str` found for type `T` in the current scope\n+error[E0599]: no method named `is_str` found for type `T` in the current scope\n   --> $DIR/issue-7575.rs:85:7\n    |\n 85 |     t.is_str()"}, {"sha": "a2ef99f9d76fffe924af0f45776bceaca76ca9b6", "filename": "src/test/ui/span/issue28498-reject-ex1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `foo.data` does not live long enough\n+error[E0597]: `foo.data` does not live long enough\n   --> $DIR/issue28498-reject-ex1.rs:46:1\n    |\n 44 |     foo.data[0].1.set(Some(&foo.data[1]));\n@@ -9,7 +9,7 @@ error: `foo.data` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `foo.data` does not live long enough\n+error[E0597]: `foo.data` does not live long enough\n   --> $DIR/issue28498-reject-ex1.rs:46:1\n    |\n 45 |     foo.data[1].1.set(Some(&foo.data[0]));"}, {"sha": "cb77cd3dc991cc7646f6b47b755d40e25cee11e4", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `last_dropped` does not live long enough\n+error[E0597]: `last_dropped` does not live long enough\n   --> $DIR/issue28498-reject-lifetime-param.rs:46:1\n    |\n 42 |     foo0 = Foo(0, &last_dropped);\n@@ -9,7 +9,7 @@ error: `last_dropped` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `first_dropped` does not live long enough\n+error[E0597]: `first_dropped` does not live long enough\n   --> $DIR/issue28498-reject-lifetime-param.rs:46:1\n    |\n 43 |     foo1 = Foo(1, &first_dropped);"}, {"sha": "49116c340ec5cc57d64415e434afe7dfdbef6620", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `last_dropped` does not live long enough\n+error[E0597]: `last_dropped` does not live long enough\n   --> $DIR/issue28498-reject-passed-to-fn.rs:48:1\n    |\n 44 |     foo0 = Foo(0, &last_dropped, Box::new(callback));\n@@ -9,7 +9,7 @@ error: `last_dropped` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `first_dropped` does not live long enough\n+error[E0597]: `first_dropped` does not live long enough\n   --> $DIR/issue28498-reject-passed-to-fn.rs:48:1\n    |\n 45 |     foo1 = Foo(1, &first_dropped, Box::new(callback));"}, {"sha": "bb4de82422ae83fa85b3c2fe40e56cfeb9cc78f1", "filename": "src/test/ui/span/issue28498-reject-trait-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `last_dropped` does not live long enough\n+error[E0597]: `last_dropped` does not live long enough\n   --> $DIR/issue28498-reject-trait-bound.rs:48:1\n    |\n 44 |     foo0 = Foo(0, &last_dropped);\n@@ -9,7 +9,7 @@ error: `last_dropped` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `first_dropped` does not live long enough\n+error[E0597]: `first_dropped` does not live long enough\n   --> $DIR/issue28498-reject-trait-bound.rs:48:1\n    |\n 45 |     foo1 = Foo(1, &first_dropped);"}, {"sha": "036c4bd6b8d1407aa558fee269fec667559bece0", "filename": "src/test/ui/span/loan-extend.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Floan-extend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Floan-extend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Floan-extend.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `short` does not live long enough\n+error[E0597]: `short` does not live long enough\n   --> $DIR/loan-extend.rs:21:1\n    |\n 19 |     long = borrow(&mut short);"}, {"sha": "754e96aa808a8713b00f4b771d4f625d042cc11d", "filename": "src/test/ui/span/mut-arg-hint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,20 +1,20 @@\n-error: cannot borrow immutable borrowed content `*a` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*a` as mutable\n   --> $DIR/mut-arg-hint.rs:13:9\n    |\n 12 |     fn foo(mut a: &String) {\n    |                   ------- use `&mut String` here to make mutable\n 13 |         a.push_str(\"bar\");\n    |         ^ cannot borrow as mutable\n \n-error: cannot borrow immutable borrowed content `*a` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*a` as mutable\n   --> $DIR/mut-arg-hint.rs:18:5\n    |\n 17 | pub fn foo<'a>(mut a: &'a String) {\n    |                       ---------- use `&'a mut String` here to make mutable\n 18 |     a.push_str(\"foo\");\n    |     ^ cannot borrow as mutable\n \n-error: cannot borrow immutable borrowed content `*a` as mutable\n+error[E0596]: cannot borrow immutable borrowed content `*a` as mutable\n   --> $DIR/mut-arg-hint.rs:25:9\n    |\n 24 |     pub fn foo(mut a: &String) {"}, {"sha": "5bd6a786cfd4f71d549813e920a2a6c4aa05c139", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `b` does not live long enough\n+error[E0597]: `b` does not live long enough\n   --> $DIR/mut-ptr-cant-outlive-ref.rs:19:5\n    |\n 18 |         p = &*b; //~ ERROR `b` does not live long enough"}, {"sha": "465a663a7416c7c1e4974d5d29f4881c0e87a0e6", "filename": "src/test/ui/span/range-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Frange-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Frange-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frange-2.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `a` does not live long enough\n+error[E0597]: `a` does not live long enough\n   --> $DIR/range-2.rs:20:5\n    |\n 17 |         &a..&b\n@@ -9,7 +9,7 @@ error: `a` does not live long enough\n 21 | }\n    | - borrowed value needs to live until here\n \n-error: `b` does not live long enough\n+error[E0597]: `b` does not live long enough\n   --> $DIR/range-2.rs:20:5\n    |\n 17 |         &a..&b"}, {"sha": "80dadd97a1793f928c274189b79016adccc71ed5", "filename": "src/test/ui/span/regionck-unboxed-closure-lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `c` does not live long enough\n+error[E0597]: `c` does not live long enough\n   --> $DIR/regionck-unboxed-closure-lifetimes.rs:19:5\n    |\n 17 |         let c_ref = &c; //~ ERROR `c` does not live long enough"}, {"sha": "25386cb30b185872bd2e7727a06cb512dd54c63d", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: borrowed value does not live long enough\n+error[E0597]: borrowed value does not live long enough\n   --> $DIR/regions-close-over-borrowed-ref-in-obj.rs:22:5\n    |\n 20 |         let ss: &isize = &1;"}, {"sha": "9b5383877a08a6a3d5b844246b7de0af9a150872", "filename": "src/test/ui/span/regions-close-over-type-parameter-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `tmp0` does not live long enough\n+error[E0597]: `tmp0` does not live long enough\n   --> $DIR/regions-close-over-type-parameter-2.rs:35:5\n    |\n 33 |         let tmp1 = &tmp0; //~ ERROR `tmp0` does not live long enough"}, {"sha": "9f8c91cb9cdbd5489afd3c2b3d7d364485cbbe75", "filename": "src/test/ui/span/regions-escape-loop-via-variable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `x` does not live long enough\n+error[E0597]: `x` does not live long enough\n   --> $DIR/regions-escape-loop-via-variable.rs:22:5\n    |\n 21 |         p = &x; //~ ERROR `x` does not live long enough"}, {"sha": "4f0e61f1133800416cd2750a6186be859e7b9684", "filename": "src/test/ui/span/regions-escape-loop-via-vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `z` does not live long enough\n+error[E0597]: `z` does not live long enough\n   --> $DIR/regions-escape-loop-via-vec.rs:26:5\n    |\n 22 |         _y.push(&mut z); //~ ERROR `z` does not live long enough"}, {"sha": "43103e619a549357c85e9a4f8b0e90cb79a047ff", "filename": "src/test/ui/span/regions-infer-borrow-scope-within-loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `*x` does not live long enough\n+error[E0597]: `*x` does not live long enough\n   --> $DIR/regions-infer-borrow-scope-within-loop.rs:28:5\n    |\n 24 |         y = borrow(&*x); //~ ERROR `*x` does not live long enough"}, {"sha": "b5e55adfb459ea69772eedf520fb0d7bd2a125d2", "filename": "src/test/ui/span/send-is-not-static-ensures-scoping.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `x` does not live long enough\n+error[E0597]: `x` does not live long enough\n   --> $DIR/send-is-not-static-ensures-scoping.rs:32:5\n    |\n 26 |         let y = &x; //~ ERROR `x` does not live long enough\n@@ -10,7 +10,7 @@ error: `x` does not live long enough\n 35 | }\n    | - borrowed value needs to live until here\n \n-error: `y` does not live long enough\n+error[E0597]: `y` does not live long enough\n   --> $DIR/send-is-not-static-ensures-scoping.rs:29:22\n    |\n 28 |         scoped(|| {"}, {"sha": "2845c4f6bda804ed87b58b49c059f3b1b1bf903b", "filename": "src/test/ui/span/send-is-not-static-std-sync-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `x` does not live long enough\n+error[E0597]: `x` does not live long enough\n   --> $DIR/send-is-not-static-std-sync-2.rs:22:5\n    |\n 21 |         Mutex::new(&x) //~ ERROR does not live long enough\n@@ -9,7 +9,7 @@ error: `x` does not live long enough\n 25 | }\n    | - borrowed value needs to live until here\n \n-error: `x` does not live long enough\n+error[E0597]: `x` does not live long enough\n   --> $DIR/send-is-not-static-std-sync-2.rs:31:5\n    |\n 30 |         RwLock::new(&x) //~ ERROR does not live long enough\n@@ -20,7 +20,7 @@ error: `x` does not live long enough\n 33 | }\n    | - borrowed value needs to live until here\n \n-error: `x` does not live long enough\n+error[E0597]: `x` does not live long enough\n   --> $DIR/send-is-not-static-std-sync-2.rs:41:5\n    |\n 39 |         let _ = tx.send(&x); //~ ERROR does not live long enough"}, {"sha": "3d75a1b717aadc42385a65e629efd8d7391af479", "filename": "src/test/ui/span/send-is-not-static-std-sync.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `z` does not live long enough\n+error[E0597]: `z` does not live long enough\n   --> $DIR/send-is-not-static-std-sync.rs:27:5\n    |\n 26 |         *lock.lock().unwrap() = &z; //~ ERROR does not live long enough\n@@ -16,7 +16,7 @@ error[E0505]: cannot move out of `y` because it is borrowed\n 23 |     drop(y); //~ ERROR cannot move out\n    |          ^ move out of `y` occurs here\n \n-error: `z` does not live long enough\n+error[E0597]: `z` does not live long enough\n   --> $DIR/send-is-not-static-std-sync.rs:39:5\n    |\n 38 |         *lock.write().unwrap() = &z; //~ ERROR does not live long enough\n@@ -34,7 +34,7 @@ error[E0505]: cannot move out of `y` because it is borrowed\n 35 |     drop(y); //~ ERROR cannot move out\n    |          ^ move out of `y` occurs here\n \n-error: `z` does not live long enough\n+error[E0597]: `z` does not live long enough\n   --> $DIR/send-is-not-static-std-sync.rs:53:5\n    |\n 52 |         tx.send(&z).unwrap(); //~ ERROR does not live long enough"}, {"sha": "0c07d068d287eeee871ce32cb484e9d22bcea322", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: borrowed value does not live long enough\n+error[E0597]: borrowed value does not live long enough\n   --> $DIR/slice-borrow.rs:18:5\n    |\n 16 |         let x: &[isize] = &[1, 2, 3, 4, 5];"}, {"sha": "0efbd8472aec47132ad2c283b179b93cb8cc41f7", "filename": "src/test/ui/span/vec-must-not-hide-type-from-dropck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `c2` does not live long enough\n+error[E0597]: `c2` does not live long enough\n    --> $DIR/vec-must-not-hide-type-from-dropck.rs:129:1\n     |\n 127 |     c1.v[0].v.set(Some(&c2));\n@@ -9,7 +9,7 @@ error: `c2` does not live long enough\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n-error: `c1` does not live long enough\n+error[E0597]: `c1` does not live long enough\n    --> $DIR/vec-must-not-hide-type-from-dropck.rs:129:1\n     |\n 128 |     c2.v[0].v.set(Some(&c1));"}, {"sha": "0dee15b42319fc898d8e224487eda926ea0f2893", "filename": "src/test/ui/span/vec_refs_data_with_early_death.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `x` does not live long enough\n+error[E0597]: `x` does not live long enough\n   --> $DIR/vec_refs_data_with_early_death.rs:31:1\n    |\n 27 |     v.push(&x);\n@@ -9,7 +9,7 @@ error: `x` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: `y` does not live long enough\n+error[E0597]: `y` does not live long enough\n   --> $DIR/vec_refs_data_with_early_death.rs:31:1\n    |\n 28 |     v.push(&y);"}, {"sha": "d5e663ff26d382f324f49f059d408b85b8626119", "filename": "src/test/ui/span/wf-method-late-bound-regions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: `pointer` does not live long enough\n+error[E0597]: `pointer` does not live long enough\n   --> $DIR/wf-method-late-bound-regions.rs:31:5\n    |\n 30 |         f2.xmute(&pointer) //~ ERROR `pointer` does not live long enough"}, {"sha": "b69d90cf8f78c64e0d01458eac0e1282884f3287", "filename": "src/test/ui/suggestions/confuse-field-and-method/issue-18343.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-18343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-18343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-18343.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: no method named `closure` found for type `Obj<[closure@$DIR/issue-18343.rs:16:28: 16:33]>` in the current scope\n+error[E0599]: no method named `closure` found for type `Obj<[closure@$DIR/issue-18343.rs:16:28: 16:33]>` in the current scope\n   --> $DIR/issue-18343.rs:17:7\n    |\n 17 |     o.closure();"}, {"sha": "218653239083b88f04b0b1ab537072476f3ba4cb", "filename": "src/test/ui/suggestions/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,84 +1,84 @@\n-error: no method named `closure` found for type `Obj<[closure@$DIR/issue-2392.rs:49:36: 49:41]>` in the current scope\n+error[E0599]: no method named `closure` found for type `Obj<[closure@$DIR/issue-2392.rs:49:36: 49:41]>` in the current scope\n   --> $DIR/issue-2392.rs:50:15\n    |\n 50 |     o_closure.closure(); //~ ERROR no method named `closure` found\n    |               ^^^^^^^ field, not a method\n    |\n    = help: use `(o_closure.closure)(...)` if you meant to call the function stored in the `closure` field\n \n-error: no method named `not_closure` found for type `Obj<[closure@$DIR/issue-2392.rs:49:36: 49:41]>` in the current scope\n+error[E0599]: no method named `not_closure` found for type `Obj<[closure@$DIR/issue-2392.rs:49:36: 49:41]>` in the current scope\n   --> $DIR/issue-2392.rs:54:15\n    |\n 54 |     o_closure.not_closure();\n    |               ^^^^^^^^^^^ field, not a method\n    |\n    = help: did you mean to write `o_closure.not_closure` instead of `o_closure.not_closure(...)`?\n \n-error: no method named `closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n+error[E0599]: no method named `closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n   --> $DIR/issue-2392.rs:60:12\n    |\n 60 |     o_func.closure(); //~ ERROR no method named `closure` found\n    |            ^^^^^^^ field, not a method\n    |\n    = help: use `(o_func.closure)(...)` if you meant to call the function stored in the `closure` field\n \n-error: no method named `boxed_closure` found for type `BoxedObj` in the current scope\n+error[E0599]: no method named `boxed_closure` found for type `BoxedObj` in the current scope\n   --> $DIR/issue-2392.rs:65:14\n    |\n 65 |     boxed_fn.boxed_closure();//~ ERROR no method named `boxed_closure` found\n    |              ^^^^^^^^^^^^^ field, not a method\n    |\n    = help: use `(boxed_fn.boxed_closure)(...)` if you meant to call the function stored in the `boxed_closure` field\n \n-error: no method named `boxed_closure` found for type `BoxedObj` in the current scope\n+error[E0599]: no method named `boxed_closure` found for type `BoxedObj` in the current scope\n   --> $DIR/issue-2392.rs:70:19\n    |\n 70 |     boxed_closure.boxed_closure();//~ ERROR no method named `boxed_closure` found\n    |                   ^^^^^^^^^^^^^ field, not a method\n    |\n    = help: use `(boxed_closure.boxed_closure)(...)` if you meant to call the function stored in the `boxed_closure` field\n \n-error: no method named `closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n+error[E0599]: no method named `closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n   --> $DIR/issue-2392.rs:77:12\n    |\n 77 |     w.wrap.closure();//~ ERROR no method named `closure` found\n    |            ^^^^^^^ field, not a method\n    |\n    = help: use `(w.wrap.closure)(...)` if you meant to call the function stored in the `closure` field\n \n-error: no method named `not_closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n+error[E0599]: no method named `not_closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n   --> $DIR/issue-2392.rs:81:12\n    |\n 81 |     w.wrap.not_closure();\n    |            ^^^^^^^^^^^ field, not a method\n    |\n    = help: did you mean to write `w.wrap.not_closure` instead of `w.wrap.not_closure(...)`?\n \n-error: no method named `closure` found for type `Obj<std::boxed::Box<std::boxed::FnBox<(), Output=u32> + 'static>>` in the current scope\n+error[E0599]: no method named `closure` found for type `Obj<std::boxed::Box<std::boxed::FnBox<(), Output=u32> + 'static>>` in the current scope\n   --> $DIR/issue-2392.rs:86:24\n    |\n 86 |     check_expression().closure();//~ ERROR no method named `closure` found\n    |                        ^^^^^^^ field, not a method\n    |\n    = help: use `(check_expression().closure)(...)` if you meant to call the function stored in the `closure` field\n \n-error: no method named `f1` found for type `FuncContainer` in the current scope\n+error[E0599]: no method named `f1` found for type `FuncContainer` in the current scope\n   --> $DIR/issue-2392.rs:94:31\n    |\n 94 |             (*self.container).f1(1); //~ ERROR no method named `f1` found\n    |                               ^^ field, not a method\n    |\n    = help: use `((*self.container).f1)(...)` if you meant to call the function stored in the `f1` field\n \n-error: no method named `f2` found for type `FuncContainer` in the current scope\n+error[E0599]: no method named `f2` found for type `FuncContainer` in the current scope\n   --> $DIR/issue-2392.rs:97:31\n    |\n 97 |             (*self.container).f2(1); //~ ERROR no method named `f2` found\n    |                               ^^ field, not a method\n    |\n    = help: use `((*self.container).f2)(...)` if you meant to call the function stored in the `f2` field\n \n-error: no method named `f3` found for type `FuncContainer` in the current scope\n+error[E0599]: no method named `f3` found for type `FuncContainer` in the current scope\n    --> $DIR/issue-2392.rs:100:31\n     |\n 100 |             (*self.container).f3(1); //~ ERROR no method named `f3` found"}, {"sha": "f1d8df816398704b2cd086b9c3783bfe3acafa1d", "filename": "src/test/ui/suggestions/confuse-field-and-method/issue-32128.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-32128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-32128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-32128.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: no method named `example` found for type `Example` in the current scope\n+error[E0599]: no method named `example` found for type `Example` in the current scope\n   --> $DIR/issue-32128.rs:22:10\n    |\n 22 |     demo.example(1);"}, {"sha": "7918fc1e89d8c4cdbaea61391d1d8b6a6d06852e", "filename": "src/test/ui/suggestions/confuse-field-and-method/issue-33784.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-33784.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-33784.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-33784.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,20 +1,20 @@\n-error: no method named `closure` found for type `&Obj<[closure@$DIR/issue-33784.rs:35:43: 35:48]>` in the current scope\n+error[E0599]: no method named `closure` found for type `&Obj<[closure@$DIR/issue-33784.rs:35:43: 35:48]>` in the current scope\n   --> $DIR/issue-33784.rs:37:7\n    |\n 37 |     p.closure(); //~ ERROR no method named `closure` found\n    |       ^^^^^^^ field, not a method\n    |\n    = help: use `(p.closure)(...)` if you meant to call the function stored in the `closure` field\n \n-error: no method named `fn_ptr` found for type `&&Obj<[closure@$DIR/issue-33784.rs:35:43: 35:48]>` in the current scope\n+error[E0599]: no method named `fn_ptr` found for type `&&Obj<[closure@$DIR/issue-33784.rs:35:43: 35:48]>` in the current scope\n   --> $DIR/issue-33784.rs:41:7\n    |\n 41 |     q.fn_ptr(); //~ ERROR no method named `fn_ptr` found\n    |       ^^^^^^ field, not a method\n    |\n    = help: use `(q.fn_ptr)(...)` if you meant to call the function stored in the `fn_ptr` field\n \n-error: no method named `c_fn_ptr` found for type `&D` in the current scope\n+error[E0599]: no method named `c_fn_ptr` found for type `&D` in the current scope\n   --> $DIR/issue-33784.rs:46:7\n    |\n 46 |     s.c_fn_ptr(); //~ ERROR no method named `c_fn_ptr` found"}, {"sha": "5b1c63822f90703c3b773f87448a25d944967581", "filename": "src/test/ui/suggestions/confuse-field-and-method/private-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fprivate-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7c60f2a09db95194a91aed9d4afe9decd93692/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fprivate-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fprivate-field.stderr?ref=cb7c60f2a09db95194a91aed9d4afe9decd93692", "patch": "@@ -1,4 +1,4 @@\n-error: no method named `dog_age` found for type `animal::Dog` in the current scope\n+error[E0599]: no method named `dog_age` found for type `animal::Dog` in the current scope\n   --> $DIR/private-field.rs:26:23\n    |\n 26 |     let dog_age = dog.dog_age();"}]}