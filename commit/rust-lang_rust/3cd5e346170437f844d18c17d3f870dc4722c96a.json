{"sha": "3cd5e346170437f844d18c17d3f870dc4722c96a", "node_id": "C_kwDOAAsO6NoAKDNjZDVlMzQ2MTcwNDM3Zjg0NGQxOGMxN2QzZjg3MGRjNDcyMmM5NmE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-20T02:22:03Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-20T02:28:26Z"}, "message": "Remove `TokenCursorFrame::open_delim`.\n\nBecause it's now always true.", "tree": {"sha": "fa5275d0f1f78bc3bb3dd92aae7f56f97b420dc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa5275d0f1f78bc3bb3dd92aae7f56f97b420dc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cd5e346170437f844d18c17d3f870dc4722c96a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd5e346170437f844d18c17d3f870dc4722c96a", "html_url": "https://github.com/rust-lang/rust/commit/3cd5e346170437f844d18c17d3f870dc4722c96a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cd5e346170437f844d18c17d3f870dc4722c96a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86723d3d468745aa5e6494a766ea9ba6cb283b3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/86723d3d468745aa5e6494a766ea9ba6cb283b3c", "html_url": "https://github.com/rust-lang/rust/commit/86723d3d468745aa5e6494a766ea9ba6cb283b3c"}], "stats": {"total": 25, "additions": 5, "deletions": 20}, "files": [{"sha": "a276fb53895cdb12627a87ab441b3593ef8fc6a9", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3cd5e346170437f844d18c17d3f870dc4722c96a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd5e346170437f844d18c17d3f870dc4722c96a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=3cd5e346170437f844d18c17d3f870dc4722c96a", "patch": "@@ -241,20 +241,13 @@ struct TokenCursor {\n struct TokenCursorFrame {\n     delim: token::DelimToken,\n     span: DelimSpan,\n-    open_delim: bool,\n     tree_cursor: tokenstream::Cursor,\n     close_delim: bool,\n }\n \n impl TokenCursorFrame {\n-    fn new(\n-        span: DelimSpan,\n-        delim: DelimToken,\n-        open_delim: bool,\n-        tts: TokenStream,\n-        close_delim: bool,\n-    ) -> Self {\n-        TokenCursorFrame { delim, span, open_delim, tree_cursor: tts.into_trees(), close_delim }\n+    fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream, close_delim: bool) -> Self {\n+        TokenCursorFrame { delim, span, tree_cursor: tts.into_trees(), close_delim }\n     }\n }\n \n@@ -267,13 +260,7 @@ impl TokenCursor {\n     #[inline(always)]\n     fn inlined_next(&mut self, desugar_doc_comments: bool) -> (Token, Spacing) {\n         loop {\n-            if !self.frame.open_delim {\n-                self.frame.open_delim = true;\n-                return (\n-                    Token::new(token::OpenDelim(self.frame.delim), self.frame.span.open),\n-                    Spacing::Alone,\n-                );\n-            } else if let Some((tree, spacing)) = self.frame.tree_cursor.next_with_spacing() {\n+            if let Some((tree, spacing)) = self.frame.tree_cursor.next_with_spacing() {\n                 return match tree {\n                     TokenTree::Token(token) => match (desugar_doc_comments, &token) {\n                         (true, &Token { kind: token::DocComment(_, attr_style, data), span }) => {\n@@ -283,7 +270,7 @@ impl TokenCursor {\n                     },\n                     TokenTree::Delimited(sp, delim, tts) => {\n                         // Set `open_delim` to true here because we deal with it immediately.\n-                        let frame = TokenCursorFrame::new(sp, delim, true, tts, false);\n+                        let frame = TokenCursorFrame::new(sp, delim, tts, false);\n                         self.stack.push(mem::replace(&mut self.frame, frame));\n                         (Token::new(token::OpenDelim(delim), sp.open), Spacing::Alone)\n                     }\n@@ -335,7 +322,6 @@ impl TokenCursor {\n             TokenCursorFrame::new(\n                 delim_span,\n                 token::NoDelim,\n-                true,\n                 if attr_style == AttrStyle::Inner {\n                     [TokenTree::token(token::Pound, span), TokenTree::token(token::Not, span), body]\n                         .iter()\n@@ -436,8 +422,7 @@ impl<'a> Parser<'a> {\n         desugar_doc_comments: bool,\n         subparser_name: Option<&'static str>,\n     ) -> Self {\n-        let start_frame =\n-            TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, true, tokens, true);\n+        let start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens, true);\n \n         let mut parser = Parser {\n             sess,"}]}