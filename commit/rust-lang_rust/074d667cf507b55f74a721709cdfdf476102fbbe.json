{"sha": "074d667cf507b55f74a721709cdfdf476102fbbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NGQ2NjdjZjUwN2I1NWY3NGE3MjE3MDljZGZkZjQ3NjEwMmZiYmU=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-05-25T18:48:59Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-05-25T21:40:33Z"}, "message": "Don't panic when failing to initialize incremental directory.", "tree": {"sha": "1f82721876b2ac1c5242262ebb47fc8ac0c54f6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f82721876b2ac1c5242262ebb47fc8ac0c54f6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/074d667cf507b55f74a721709cdfdf476102fbbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/074d667cf507b55f74a721709cdfdf476102fbbe", "html_url": "https://github.com/rust-lang/rust/commit/074d667cf507b55f74a721709cdfdf476102fbbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/074d667cf507b55f74a721709cdfdf476102fbbe/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdbe2888979bb8797b05f0d58a6f6e60753983d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdbe2888979bb8797b05f0d58a6f6e60753983d2", "html_url": "https://github.com/rust-lang/rust/commit/cdbe2888979bb8797b05f0d58a6f6e60753983d2"}], "stats": {"total": 76, "additions": 49, "deletions": 27}, "files": [{"sha": "5d5083277d3222fc849677e6a139fc24abead7dd", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/074d667cf507b55f74a721709cdfdf476102fbbe/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/074d667cf507b55f74a721709cdfdf476102fbbe/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=074d667cf507b55f74a721709cdfdf476102fbbe", "patch": "@@ -3876,6 +3876,7 @@ dependencies = [\n  \"rand 0.7.3\",\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n+ \"rustc_errors\",\n  \"rustc_fs_util\",\n  \"rustc_graphviz\",\n  \"rustc_hir\","}, {"sha": "c35a164bb33423e0f34b233523d756a8aa7bcf31", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074d667cf507b55f74a721709cdfdf476102fbbe/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/074d667cf507b55f74a721709cdfdf476102fbbe/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=074d667cf507b55f74a721709cdfdf476102fbbe", "patch": "@@ -34,7 +34,7 @@ tempfile = \"3.2\"\n version = \"0.11\"\n \n [target.'cfg(windows)'.dependencies]\n-winapi = { version = \"0.3\", features = [\"fileapi\", \"psapi\"] }\n+winapi = { version = \"0.3\", features = [\"fileapi\", \"psapi\", \"winerror\"] }\n \n [target.'cfg(not(target_arch = \"wasm32\"))'.dependencies]\n memmap2 = \"0.2.1\""}, {"sha": "4f5d8d7ea48ba36939b84202281a6e14b5157e9a", "filename": "compiler/rustc_data_structures/src/flock.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/074d667cf507b55f74a721709cdfdf476102fbbe/compiler%2Frustc_data_structures%2Fsrc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074d667cf507b55f74a721709cdfdf476102fbbe/compiler%2Frustc_data_structures%2Fsrc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fflock.rs?ref=074d667cf507b55f74a721709cdfdf476102fbbe", "patch": "@@ -54,6 +54,10 @@ cfg_if! {\n                     Ok(Lock { _file: file })\n                 }\n             }\n+\n+            pub fn error_unsupported(err: &io::Error) -> bool {\n+                matches!(err.raw_os_error(), Some(libc::ENOTSUP) | Some(libc::ENOSYS))\n+            }\n         }\n \n         // Note that we don't need a Drop impl to execute `flock(fd, LOCK_UN)`. Lock acquired by\n@@ -103,6 +107,10 @@ cfg_if! {\n                     Ok(Lock { file })\n                 }\n             }\n+\n+            pub fn error_unsupported(err: &io::Error) -> bool {\n+                matches!(err.raw_os_error(), Some(libc::ENOTSUP) | Some(libc::ENOSYS))\n+            }\n         }\n \n         impl Drop for Lock {\n@@ -122,6 +130,7 @@ cfg_if! {\n         use std::mem;\n         use std::os::windows::prelude::*;\n \n+        use winapi::shared::winerror::ERROR_INVALID_FUNCTION;\n         use winapi::um::minwinbase::{OVERLAPPED, LOCKFILE_FAIL_IMMEDIATELY, LOCKFILE_EXCLUSIVE_LOCK};\n         use winapi::um::fileapi::LockFileEx;\n         use winapi::um::winnt::{FILE_SHARE_DELETE, FILE_SHARE_READ, FILE_SHARE_WRITE};\n@@ -194,6 +203,10 @@ cfg_if! {\n                     Ok(Lock { _file: file })\n                 }\n             }\n+\n+            pub fn error_unsupported(err: &io::Error) -> bool {\n+                err.raw_os_error() == Some(ERROR_INVALID_FUNCTION as i32)\n+            }\n         }\n \n         // Note that we don't need a Drop impl on the Windows: The file is unlocked"}, {"sha": "85bf4dc176bd1465479827a95debef8a6b8ed518", "filename": "compiler/rustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/074d667cf507b55f74a721709cdfdf476102fbbe/compiler%2Frustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/074d667cf507b55f74a721709cdfdf476102fbbe/compiler%2Frustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2FCargo.toml?ref=074d667cf507b55f74a721709cdfdf476102fbbe", "patch": "@@ -20,3 +20,4 @@ rustc_macros = { path = \"../rustc_macros\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_fs_util = { path = \"../rustc_fs_util\" }\n rustc_session = { path = \"../rustc_session\" }\n+rustc_errors = { path = \"../rustc_errors\" }"}, {"sha": "a9925832fd879418a68b7dff3eda954a9ca9d24f", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/074d667cf507b55f74a721709cdfdf476102fbbe/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074d667cf507b55f74a721709cdfdf476102fbbe/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=074d667cf507b55f74a721709cdfdf476102fbbe", "patch": "@@ -106,6 +106,7 @@\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::{base_n, flock};\n+use rustc_errors::ErrorReported;\n use rustc_fs_util::{link_or_copy, LinkOrCopy};\n use rustc_session::{CrateDisambiguator, Session};\n \n@@ -189,9 +190,9 @@ pub fn prepare_session_directory(\n     sess: &Session,\n     crate_name: &str,\n     crate_disambiguator: CrateDisambiguator,\n-) {\n+) -> Result<(), ErrorReported> {\n     if sess.opts.incremental.is_none() {\n-        return;\n+        return Ok(());\n     }\n \n     let _timer = sess.timer(\"incr_comp_prepare_session_directory\");\n@@ -201,9 +202,7 @@ pub fn prepare_session_directory(\n     // {incr-comp-dir}/{crate-name-and-disambiguator}\n     let crate_dir = crate_path(sess, crate_name, crate_disambiguator);\n     debug!(\"crate-dir: {}\", crate_dir.display());\n-    if create_dir(sess, &crate_dir, \"crate\").is_err() {\n-        return;\n-    }\n+    create_dir(sess, &crate_dir, \"crate\")?;\n \n     // Hack: canonicalize the path *after creating the directory*\n     // because, on windows, long paths can cause problems;\n@@ -217,7 +216,7 @@ pub fn prepare_session_directory(\n                 crate_dir.display(),\n                 err\n             ));\n-            return;\n+            return Err(ErrorReported);\n         }\n     };\n \n@@ -232,16 +231,11 @@ pub fn prepare_session_directory(\n \n         // Lock the new session directory. If this fails, return an\n         // error without retrying\n-        let (directory_lock, lock_file_path) = match lock_directory(sess, &session_dir) {\n-            Ok(e) => e,\n-            Err(_) => return,\n-        };\n+        let (directory_lock, lock_file_path) = lock_directory(sess, &session_dir)?;\n \n         // Now that we have the lock, we can actually create the session\n         // directory\n-        if create_dir(sess, &session_dir, \"session\").is_err() {\n-            return;\n-        }\n+        create_dir(sess, &session_dir, \"session\")?;\n \n         // Find a suitable source directory to copy from. Ignore those that we\n         // have already tried before.\n@@ -257,7 +251,7 @@ pub fn prepare_session_directory(\n             );\n \n             sess.init_incr_comp_session(session_dir, directory_lock, false);\n-            return;\n+            return Ok(());\n         };\n \n         debug!(\"attempting to copy data from source: {}\", source_directory.display());\n@@ -278,7 +272,7 @@ pub fn prepare_session_directory(\n             }\n \n             sess.init_incr_comp_session(session_dir, directory_lock, true);\n-            return;\n+            return Ok(());\n         } else {\n             debug!(\"copying failed - trying next directory\");\n \n@@ -478,7 +472,7 @@ fn generate_session_dir_path(crate_dir: &Path) -> PathBuf {\n     directory_path\n }\n \n-fn create_dir(sess: &Session, path: &Path, dir_tag: &str) -> Result<(), ()> {\n+fn create_dir(sess: &Session, path: &Path, dir_tag: &str) -> Result<(), ErrorReported> {\n     match std_fs::create_dir_all(path) {\n         Ok(()) => {\n             debug!(\"{} directory created successfully\", dir_tag);\n@@ -492,13 +486,16 @@ fn create_dir(sess: &Session, path: &Path, dir_tag: &str) -> Result<(), ()> {\n                 path.display(),\n                 err\n             ));\n-            Err(())\n+            Err(ErrorReported)\n         }\n     }\n }\n \n /// Allocate the lock-file and lock it.\n-fn lock_directory(sess: &Session, session_dir: &Path) -> Result<(flock::Lock, PathBuf), ()> {\n+fn lock_directory(\n+    sess: &Session,\n+    session_dir: &Path,\n+) -> Result<(flock::Lock, PathBuf), ErrorReported> {\n     let lock_file_path = lock_file_path(session_dir);\n     debug!(\"lock_directory() - lock_file: {}\", lock_file_path.display());\n \n@@ -510,13 +507,23 @@ fn lock_directory(sess: &Session, session_dir: &Path) -> Result<(flock::Lock, Pa\n     ) {\n         // the lock should be exclusive\n         Ok(lock) => Ok((lock, lock_file_path)),\n-        Err(err) => {\n-            sess.err(&format!(\n+        Err(lock_err) => {\n+            let mut err = sess.struct_err(&format!(\n                 \"incremental compilation: could not create \\\n-                               session directory lock file: {}\",\n-                err\n+                 session directory lock file: {}\",\n+                lock_err\n             ));\n-            Err(())\n+            if flock::Lock::error_unsupported(&lock_err) {\n+                err.note(&format!(\n+                    \"the filesystem for the incremental path at {} \\\n+                     does not appear to support locking, consider changing the \\\n+                     incremental path to a filesystem that supports locking \\\n+                     or disable incremental compilation\",\n+                    session_dir.display()\n+                ));\n+            }\n+            err.emit();\n+            Err(ErrorReported)\n         }\n     }\n }"}, {"sha": "f99d929023852a5dcd0ff9ed541cd0cf5714cdce", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074d667cf507b55f74a721709cdfdf476102fbbe/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074d667cf507b55f74a721709cdfdf476102fbbe/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=074d667cf507b55f74a721709cdfdf476102fbbe", "patch": "@@ -172,7 +172,7 @@ pub fn register_plugins<'a>(\n \n     let disambiguator = util::compute_crate_disambiguator(sess);\n     sess.crate_disambiguator.set(disambiguator).expect(\"not yet initialized\");\n-    rustc_incremental::prepare_session_directory(sess, &crate_name, disambiguator);\n+    rustc_incremental::prepare_session_directory(sess, &crate_name, disambiguator)?;\n \n     if sess.opts.incremental.is_some() {\n         sess.time(\"incr_comp_garbage_collect_session_directories\", || {"}, {"sha": "969b526235bb2affd4f023ad6555bb92f9380744", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/074d667cf507b55f74a721709cdfdf476102fbbe/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074d667cf507b55f74a721709cdfdf476102fbbe/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=074d667cf507b55f74a721709cdfdf476102fbbe", "patch": "@@ -148,7 +148,7 @@ impl<'tcx> Queries<'tcx> {\n                 self.compiler.register_lints.as_deref().unwrap_or_else(|| empty),\n                 krate,\n                 &crate_name,\n-            );\n+            )?;\n \n             // Compute the dependency graph (in the background). We want to do\n             // this as early as possible, to give the DepGraph maximum time to\n@@ -157,7 +157,7 @@ impl<'tcx> Queries<'tcx> {\n             // called, which happens within passes::register_plugins().\n             self.dep_graph_future().ok();\n \n-            result\n+            Ok(result)\n         })\n     }\n "}]}