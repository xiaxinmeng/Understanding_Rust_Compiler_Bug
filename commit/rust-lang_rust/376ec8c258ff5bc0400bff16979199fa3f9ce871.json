{"sha": "376ec8c258ff5bc0400bff16979199fa3f9ce871", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NmVjOGMyNThmZjViYzA0MDBiZmYxNjk3OTE5OWZhM2Y5Y2U4NzE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-08T07:34:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-08T07:35:35Z"}, "message": "Don't crash on checked binops (treated like unchecked ones atm)", "tree": {"sha": "2a2227705e5d9ec020f15975c5a2c3d55428596a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a2227705e5d9ec020f15975c5a2c3d55428596a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/376ec8c258ff5bc0400bff16979199fa3f9ce871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/376ec8c258ff5bc0400bff16979199fa3f9ce871", "html_url": "https://github.com/rust-lang/rust/commit/376ec8c258ff5bc0400bff16979199fa3f9ce871", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/376ec8c258ff5bc0400bff16979199fa3f9ce871/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c601f7316b682179e373bf1a2e5550bf2c5ee76", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c601f7316b682179e373bf1a2e5550bf2c5ee76", "html_url": "https://github.com/rust-lang/rust/commit/5c601f7316b682179e373bf1a2e5550bf2c5ee76"}], "stats": {"total": 99, "additions": 76, "deletions": 23}, "files": [{"sha": "8e3105d49cfe91a368c6050ae93b922ca1207c59", "filename": "Readme.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/376ec8c258ff5bc0400bff16979199fa3f9ce871/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/376ec8c258ff5bc0400bff16979199fa3f9ce871/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=376ec8c258ff5bc0400bff16979199fa3f9ce871", "patch": "@@ -18,8 +18,6 @@ $ cargo build\n $ rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.so my_crate.rs --crate-type lib -Og\n ```\n \n-> You must compile with `-Og`, because checked binops are not yet supported.\n-\n ## Building libcore\n \n ```bash"}, {"sha": "762dc3a8d94432ae9b099bda8921754b4809f037", "filename": "build.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/376ec8c258ff5bc0400bff16979199fa3f9ce871/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/376ec8c258ff5bc0400bff16979199fa3f9ce871/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=376ec8c258ff5bc0400bff16979199fa3f9ce871", "patch": "@@ -2,7 +2,7 @@ cargo build || exit 1\n \n cd examples/\n \n-RUSTC=\"rustc -Zcodegen-backend=$(pwd)/../target/debug/librustc_codegen_cranelift.so -Og -L crate=. --crate-type lib\"\n+RUSTC=\"rustc -Zcodegen-backend=$(pwd)/../target/debug/librustc_codegen_cranelift.so -L crate=. --crate-type lib\"\n \n $RUSTC mini_core.rs --crate-name mini_core &&\n $RUSTC example.rs &&"}, {"sha": "c1097864bf0c5f0e305963a6b84bd1a66a0d6c49", "filename": "src/abi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/376ec8c258ff5bc0400bff16979199fa3f9ce871/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/376ec8c258ff5bc0400bff16979199fa3f9ce871/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=376ec8c258ff5bc0400bff16979199fa3f9ce871", "patch": "@@ -398,7 +398,6 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n                             args[1],\n                             ret.layout().ty,\n                             false,\n-                            false,\n                         ),\n                         TypeVariants::TyInt(_) => crate::base::trans_int_binop(\n                             fx,\n@@ -407,7 +406,6 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n                             args[1],\n                             ret.layout().ty,\n                             true,\n-                            false,\n                         ),\n                         _ => panic!(),\n                     };"}, {"sha": "9d09409aa9ef23ecf8557a8e9dc77b44727c3ca7", "filename": "src/base.rs", "status": "modified", "additions": 63, "deletions": 16, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/376ec8c258ff5bc0400bff16979199fa3f9ce871/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/376ec8c258ff5bc0400bff16979199fa3f9ce871/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=376ec8c258ff5bc0400bff16979199fa3f9ce871", "patch": "@@ -313,10 +313,10 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                             trans_bool_binop(fx, *bin_op, lhs, rhs, lval.layout().ty)\n                         }\n                         TypeVariants::TyUint(_) => {\n-                            trans_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, false, false)\n+                            trans_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, false)\n                         }\n                         TypeVariants::TyInt(_) => {\n-                            trans_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, true, false)\n+                            trans_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, true)\n                         }\n                         TypeVariants::TyFloat(_) => {\n                             trans_float_binop(fx, *bin_op, lhs, rhs, lval.layout().ty)\n@@ -325,9 +325,9 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                             trans_char_binop(fx, *bin_op, lhs, rhs, lval.layout().ty)\n                         }\n                         TypeVariants::TyRawPtr(..) => {\n-                            trans_ptr_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, false)\n+                            trans_ptr_binop(fx, *bin_op, lhs, rhs, lval.layout().ty)\n                         }\n-                        _ => unimplemented!(\"bin op {:?} for {:?}\", bin_op, ty),\n+                        _ => unimplemented!(\"binop {:?} for {:?}\", bin_op, ty),\n                     };\n                     lval.write_cvalue(fx, res);\n                 }\n@@ -338,14 +338,13 @@ fn trans_stmt<'a, 'tcx: 'a>(\n \n                     let res = match ty.sty {\n                         TypeVariants::TyUint(_) => {\n-                            trans_int_binop(fx, *bin_op, lhs, rhs, ty, false, true)\n+                            trans_checked_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, false)\n                         }\n                         TypeVariants::TyInt(_) => {\n-                            trans_int_binop(fx, *bin_op, lhs, rhs, ty, true, true)\n+                            trans_checked_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, true)\n                         }\n-                        _ => unimplemented!(\"checked bin op {:?} for {:?}\", bin_op, ty),\n+                        _ => unimplemented!(\"checked binop {:?} for {:?}\", bin_op, ty),\n                     };\n-                    return Err(format!(\"checked bin op {:?}\", bin_op));\n                     lval.write_cvalue(fx, res);\n                 }\n                 Rvalue::UnaryOp(un_op, operand) => {\n@@ -510,7 +509,7 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n \n macro_rules! binop_match {\n     (@single $fx:expr, $bug_fmt:expr, $var:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, bug) => {\n-        bug!(\"bin op {} on {} lhs: {:?} rhs: {:?}\", stringify!($var), $bug_fmt, $lhs, $rhs)\n+        bug!(\"binop {} on {} lhs: {:?} rhs: {:?}\", stringify!($var), $bug_fmt, $lhs, $rhs)\n     };\n     (@single $fx:expr, $bug_fmt:expr, $var:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, icmp($cc:ident)) => {{\n         assert_eq!($fx.tcx.types.bool, $ret_ty);\n@@ -585,12 +584,14 @@ pub fn trans_int_binop<'a, 'tcx: 'a>(\n     bin_op: BinOp,\n     lhs: CValue<'tcx>,\n     rhs: CValue<'tcx>,\n-    ty: Ty<'tcx>,\n+    out_ty: Ty<'tcx>,\n     signed: bool,\n-    _checked: bool,\n ) -> CValue<'tcx> {\n-    let res = binop_match! {\n-        fx, bin_op, signed, lhs, rhs, ty, \"int/uint\";\n+    if bin_op != BinOp::Shl && bin_op != BinOp::Shr {\n+        assert_eq!(lhs.layout().ty, rhs.layout().ty, \"int binop requires lhs and rhs of same type\");\n+    }\n+    binop_match! {\n+        fx, bin_op, signed, lhs, rhs, out_ty, \"int/uint\";\n         Add (_) iadd;\n         Sub (_) isub;\n         Mul (_) imul;\n@@ -617,10 +618,57 @@ pub fn trans_int_binop<'a, 'tcx: 'a>(\n         Gt (true) icmp(SignedGreaterThan);\n \n         Offset (_) bug;\n+    }\n+}\n+\n+fn trans_checked_int_binop<'a, 'tcx: 'a>(\n+    fx: &mut FunctionCx<'a, 'tcx>,\n+    bin_op: BinOp,\n+    lhs: CValue<'tcx>,\n+    rhs: CValue<'tcx>,\n+    out_ty: Ty<'tcx>,\n+    signed: bool,\n+) -> CValue<'tcx> {\n+    if bin_op != BinOp::Shl && bin_op != BinOp::Shr {\n+        assert_eq!(lhs.layout().ty, rhs.layout().ty, \"checked int binop requires lhs and rhs of same type\");\n+    }\n+    let res_ty = match out_ty.sty {\n+        TypeVariants::TyTuple(tys) => tys[0],\n+        _ => bug!(\"Checked int binop requires tuple as output, but got {:?}\", out_ty),\n     };\n \n-    // TODO: return correct value for checked binops\n-    res\n+    let res = binop_match! {\n+        fx, bin_op, signed, lhs, rhs, res_ty, \"checked int/uint\";\n+        Add (_) iadd;\n+        Sub (_) isub;\n+        Mul (_) imul;\n+        Div (_) bug;\n+        Rem (_) bug;\n+        BitXor (_) bug;\n+        BitAnd (_) bug;\n+        BitOr (_) bug;\n+        Shl (_) ishl;\n+        Shr (false) ushr;\n+        Shr (true) sshr;\n+\n+        Eq (_) bug;\n+        Lt (_) bug;\n+        Le (_) bug;\n+        Ne (_) bug;\n+        Ge (_) bug;\n+        Gt (_) bug;\n+\n+        Offset (_) bug;\n+    };\n+\n+    let has_overflow = CValue::const_val(fx, fx.tcx.types.bool, 0);\n+\n+    let out_place = CPlace::temp(fx, out_ty);\n+    out_place.place_field(fx, mir::Field::new(0)).write_cvalue(fx, res);\n+    println!(\"abc\");\n+    out_place.place_field(fx, mir::Field::new(1)).write_cvalue(fx, has_overflow);\n+\n+    out_place.to_cvalue(fx)\n }\n \n fn trans_float_binop<'a, 'tcx: 'a>(\n@@ -703,7 +751,6 @@ fn trans_ptr_binop<'a, 'tcx: 'a>(\n     lhs: CValue<'tcx>,\n     rhs: CValue<'tcx>,\n     ty: Ty<'tcx>,\n-    _checked: bool,\n ) -> CValue<'tcx> {\n     binop_match! {\n         fx, bin_op, false, lhs, rhs, ty, \"ptr\";"}, {"sha": "0f19c8c7e6b9045af456acde6e391d44d6c1b377", "filename": "src/common.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/376ec8c258ff5bc0400bff16979199fa3f9ce871/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/376ec8c258ff5bc0400bff16979199fa3f9ce871/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=376ec8c258ff5bc0400bff16979199fa3f9ce871", "patch": "@@ -133,8 +133,8 @@ impl<'tcx> CValue<'tcx> {\n     pub fn expect_byref(self) -> (Value, TyLayout<'tcx>) {\n         match self {\n             CValue::ByRef(value, layout) => (value, layout),\n-            CValue::ByVal(_, _) => bug!(\"Expected CValue::ByRef, found CValue::ByVal\"),\n-            CValue::Func(_, _) => bug!(\"Expected CValue::ByRef, found CValue::Func\"),\n+            CValue::ByVal(_, _) => bug!(\"Expected CValue::ByRef, found CValue::ByVal: {:?}\", self),\n+            CValue::Func(_, _) => bug!(\"Expected CValue::ByRef, found CValue::Func: {:?}\", self),\n         }\n     }\n \n@@ -187,6 +187,16 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         }\n     }\n \n+    pub fn temp(fx: &mut FunctionCx<'a, 'tcx>, ty: Ty<'tcx>) -> CPlace<'tcx> {\n+        let layout = fx.layout_of(ty);\n+        let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n+            kind: StackSlotKind::ExplicitSlot,\n+            size: layout.size.bytes() as u32,\n+            offset: None,\n+        });\n+        CPlace::Addr(fx.bcx.ins().stack_addr(types::I64, stack_slot, 0), layout)\n+    }\n+\n     pub fn from_stack_slot(\n         fx: &mut FunctionCx<'a, 'tcx>,\n         stack_slot: StackSlot,"}]}