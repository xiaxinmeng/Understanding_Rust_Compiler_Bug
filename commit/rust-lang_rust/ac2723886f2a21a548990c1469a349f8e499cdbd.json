{"sha": "ac2723886f2a21a548990c1469a349f8e499cdbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMjcyMzg4NmYyYTIxYTU0ODk5MGMxNDY5YTM0OWY4ZTQ5OWNkYmQ=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2017-01-10T11:27:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-10T11:27:43Z"}, "message": "Rollup merge of #38816 - Manishearth:coercion-doc, r=GuillaumeGomez\n\nAdd more docs for CoerceUnsized and Unsize\n\nhere be dragons\n\nr? @ubsan @steveklabnik", "tree": {"sha": "414bb9fbe3c302ae6b542d32245fbf10a0f37ede", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/414bb9fbe3c302ae6b542d32245fbf10a0f37ede"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac2723886f2a21a548990c1469a349f8e499cdbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2723886f2a21a548990c1469a349f8e499cdbd", "html_url": "https://github.com/rust-lang/rust/commit/ac2723886f2a21a548990c1469a349f8e499cdbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac2723886f2a21a548990c1469a349f8e499cdbd/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a9d9192950372ccf57ff610ebb15338f8030dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a9d9192950372ccf57ff610ebb15338f8030dd", "html_url": "https://github.com/rust-lang/rust/commit/25a9d9192950372ccf57ff610ebb15338f8030dd"}, {"sha": "07e844f95fb7894281c08f65f2d127a568525142", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e844f95fb7894281c08f65f2d127a568525142", "html_url": "https://github.com/rust-lang/rust/commit/07e844f95fb7894281c08f65f2d127a568525142"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "b699946cecaa2314d94072b1ef644ab3cc2b4f11", "filename": "src/doc/nomicon/coercions.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac2723886f2a21a548990c1469a349f8e499cdbd/src%2Fdoc%2Fnomicon%2Fcoercions.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac2723886f2a21a548990c1469a349f8e499cdbd/src%2Fdoc%2Fnomicon%2Fcoercions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fcoercions.md?ref=ac2723886f2a21a548990c1469a349f8e499cdbd", "patch": "@@ -17,6 +17,7 @@ Coercion is allowed between the following types:\n     * `&T` to `*const T`\n     * `&mut T` to `*mut T`\n * Unsizing: `T` to `U` if `T` implements `CoerceUnsized<U>`\n+* Deref coercion: Expression `&x` of type `&T` to `&*x` of type `&U` if `T` derefs to `U` (i.e. `T: Deref<Target=U>`)\n \n `CoerceUnsized<Pointer<U>> for Pointer<T> where T: Unsize<U>` is implemented\n for all pointer types (including smart pointers like Box and Rc). Unsize is\n@@ -27,8 +28,9 @@ only implemented automatically, and enables the following transformations:\n * `Foo<..., T, ...>` => `Foo<..., U, ...>` where:\n     * `T: Unsize<U>`\n     * `Foo` is a struct\n-    * Only the last field of `Foo` has type `T`\n+    * Only the last field of `Foo` has type involving `T`\n     * `T` is not part of the type of any other fields\n+    * `Bar<T>: Unsize<Bar<U>>`, if the last field of `Foo` has type `Bar<T>`\n \n Coercions occur at a *coercion site*. Any location that is explicitly typed\n will cause a coercion to its type. If inference is necessary, the coercion will"}, {"sha": "798f1e6cbeb844b842b798568bf585261cc75d22", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ac2723886f2a21a548990c1469a349f8e499cdbd/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2723886f2a21a548990c1469a349f8e499cdbd/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=ac2723886f2a21a548990c1469a349f8e499cdbd", "patch": "@@ -100,13 +100,26 @@ pub trait Sized {\n ///\n /// All implementations of `Unsize` are provided automatically by the compiler.\n ///\n+/// `Unsize` is implemented for:\n+///\n+/// - `[T; N]` is `Unsize<[T]>`\n+/// - `T` is `Unsize<Trait>` when `T: Trait`\n+/// - `Foo<..., T, ...>` is `Unsize<Foo<..., U, ...>>` if:\n+///   - `T: Unsize<U>`\n+///   - Foo is a struct\n+///   - Only the last field of `Foo` has a type involving `T`\n+///   - `T` is not part of the type of any other fields\n+///   - `Bar<T>: Unsize<Bar<U>>`, if the last field of `Foo` has type `Bar<T>`\n+///\n /// `Unsize` is used along with [`ops::CoerceUnsized`][coerceunsized] to allow\n /// \"user-defined\" containers such as [`rc::Rc`][rc] to contain dynamically-sized\n-/// types. See the [DST coercion RFC][RFC982] for more details.\n+/// types. See the [DST coercion RFC][RFC982] and [the nomicon entry on coercion][nomicon-coerce]\n+/// for more details.\n ///\n /// [coerceunsized]: ../ops/trait.CoerceUnsized.html\n /// [rc]: ../../std/rc/struct.Rc.html\n /// [RFC982]: https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\n+\n #[unstable(feature = \"unsize\", issue = \"27732\")]\n #[lang=\"unsize\"]\n pub trait Unsize<T: ?Sized> {"}, {"sha": "94df72f28fa9ce7b058fe824bc81fb850e88cfe7", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ac2723886f2a21a548990c1469a349f8e499cdbd/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2723886f2a21a548990c1469a349f8e499cdbd/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=ac2723886f2a21a548990c1469a349f8e499cdbd", "patch": "@@ -2710,6 +2710,35 @@ mod impls {\n \n /// Trait that indicates that this is a pointer or a wrapper for one,\n /// where unsizing can be performed on the pointee.\n+///\n+/// See the [DST coercion RfC][dst-coerce] and [the nomicon entry on coercion][nomicon-coerce]\n+/// for more details.\n+///\n+/// For builtin pointer types, pointers to `T` will coerce to pointers to `U` if `T: Unsize<U>`\n+/// by converting from a thin pointer to a fat pointer.\n+///\n+/// For custom types, the coercion here works by coercing `Foo<T>` to `Foo<U>`\n+/// provided an impl of `CoerceUnsized<Foo<U>> for Foo<T>` exists.\n+/// Such an impl can only be written if `Foo<T>` has only a single non-phantomdata\n+/// field involving `T`. If the type of that field is `Bar<T>`, an implementation\n+/// of `CoerceUnsized<Bar<U>> for Bar<T>` must exist. The coercion will work by\n+/// by coercing the `Bar<T>` field into `Bar<U>` and filling in the rest of the fields\n+/// from `Foo<T>` to create a `Foo<U>`. This will effectively drill down to a pointer\n+/// field and coerce that.\n+///\n+/// Generally, for smart pointers you will implement\n+/// `CoerceUnsized<Ptr<U>> for Ptr<T> where T: Unsize<U>, U: ?Sized`, with an\n+/// optional `?Sized` bound on `T` itself. For wrapper types that directly embed `T`\n+/// like `Cell<T>` and `RefCell<T>`, you\n+/// can directly implement `CoerceUnsized<Wrap<U>> for Wrap<T> where T: CoerceUnsized<U>`.\n+/// This will let coercions of types like `Cell<Box<T>>` work.\n+///\n+/// [`Unsize`][unsize] is used to mark types which can be coerced to DSTs if behind\n+/// pointers. It is implemented automatically by the compiler.\n+///\n+/// [dst-coerce]: https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\n+/// [unsize]: ../marker/trait.Unsize.html\n+/// [nomicon-coerce]: ../../nomicon/coercions.html\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n #[lang=\"coerce_unsized\"]\n pub trait CoerceUnsized<T> {"}]}