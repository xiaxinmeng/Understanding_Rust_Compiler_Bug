{"sha": "4f6b5f41d49141a3907bfef2a81108a141d340a8", "node_id": "C_kwDOAAsO6NoAKDRmNmI1ZjQxZDQ5MTQxYTM5MDdiZmVmMmE4MTEwOGExNDFkMzQwYTg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-13T13:47:27Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-14T12:52:15Z"}, "message": "Recover better for more delimited sequences", "tree": {"sha": "bc3085818667498e9714aea59198b30135760402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc3085818667498e9714aea59198b30135760402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f6b5f41d49141a3907bfef2a81108a141d340a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f6b5f41d49141a3907bfef2a81108a141d340a8", "html_url": "https://github.com/rust-lang/rust/commit/4f6b5f41d49141a3907bfef2a81108a141d340a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f6b5f41d49141a3907bfef2a81108a141d340a8/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "244a48d13d697dd4f8ba9a3e9084ec1aec9db06c", "url": "https://api.github.com/repos/rust-lang/rust/commits/244a48d13d697dd4f8ba9a3e9084ec1aec9db06c", "html_url": "https://github.com/rust-lang/rust/commit/244a48d13d697dd4f8ba9a3e9084ec1aec9db06c"}], "stats": {"total": 277, "additions": 153, "deletions": 124}, "files": [{"sha": "8358a46f0a9142f7db24a5ea143f6553ce6d0cf5", "filename": "crates/hir-def/src/macro_expansion_tests/mbe/regression.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -830,7 +830,6 @@ macro_rules! rgb_color {\n /* parse error: expected COMMA */\n /* parse error: expected R_ANGLE */\n /* parse error: expected SEMICOLON */\n-/* parse error: expected SEMICOLON */\n /* parse error: expected expression, item or let statement */\n pub fn new() {\n     let _ = 0as u32<<(8+8);\n@@ -848,21 +847,21 @@ pub fn new() {\n //     BLOCK_EXPR@10..31\n //       STMT_LIST@10..31\n //         L_CURLY@10..11 \"{\"\n-//         LET_STMT@11..27\n+//         LET_STMT@11..28\n //           LET_KW@11..14 \"let\"\n //           WILDCARD_PAT@14..15\n //             UNDERSCORE@14..15 \"_\"\n //           EQ@15..16 \"=\"\n-//           CAST_EXPR@16..27\n+//           CAST_EXPR@16..28\n //             LITERAL@16..17\n //               INT_NUMBER@16..17 \"0\"\n //             AS_KW@17..19 \"as\"\n-//             PATH_TYPE@19..27\n-//               PATH@19..27\n-//                 PATH_SEGMENT@19..27\n+//             PATH_TYPE@19..28\n+//               PATH@19..28\n+//                 PATH_SEGMENT@19..28\n //                   NAME_REF@19..22\n //                     IDENT@19..22 \"u32\"\n-//                   GENERIC_ARG_LIST@22..27\n+//                   GENERIC_ARG_LIST@22..28\n //                     L_ANGLE@22..23 \"<\"\n //                     TYPE_ARG@23..27\n //                       DYN_TRAIT_TYPE@23..27\n@@ -877,9 +876,9 @@ pub fn new() {\n //                                     ERROR@25..26\n //                                       INT_NUMBER@25..26 \"8\"\n //                           PLUS@26..27 \"+\"\n-//         EXPR_STMT@27..28\n-//           LITERAL@27..28\n-//             INT_NUMBER@27..28 \"8\"\n+//                     CONST_ARG@27..28\n+//                       LITERAL@27..28\n+//                         INT_NUMBER@27..28 \"8\"\n //         ERROR@28..29\n //           R_PAREN@28..29 \")\"\n //         SEMICOLON@29..30 \";\""}, {"sha": "fc9b5d3ba4cd79303f3254b2306d20190e825ba7", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -1126,5 +1126,5 @@ fn benchmark_syntax_highlighting_parser() {\n             .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Function))\n             .count()\n     };\n-    assert_eq!(hash, 1609);\n+    assert_eq!(hash, 1608);\n }"}, {"sha": "15ec9e167e025534ffb2ceb63830a96f10aaaa72", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -200,6 +200,8 @@ impl BlockLike {\n     }\n }\n \n+const VISIBILITY_FIRST: TokenSet = TokenSet::new(&[T![pub], T![crate]]);\n+\n fn opt_visibility(p: &mut Parser<'_>, in_tuple_field: bool) -> bool {\n     match p.current() {\n         T![pub] => {\n@@ -340,3 +342,31 @@ fn error_block(p: &mut Parser<'_>, message: &str) {\n     p.eat(T!['}']);\n     m.complete(p, ERROR);\n }\n+\n+/// The `parser` passed this is required to at least consume one token if it returns `true`.\n+/// If the `parser` returns false, parsing will stop.\n+fn delimited(\n+    p: &mut Parser<'_>,\n+    bra: SyntaxKind,\n+    ket: SyntaxKind,\n+    delim: SyntaxKind,\n+    first_set: TokenSet,\n+    mut parser: impl FnMut(&mut Parser<'_>) -> bool,\n+) {\n+    p.bump(bra);\n+    while !p.at(ket) && !p.at(EOF) {\n+        if !parser(p) {\n+            break;\n+        }\n+        if !p.at(delim) {\n+            if p.at_ts(first_set) {\n+                p.error(format!(\"expected {:?}\", delim));\n+            } else {\n+                break;\n+            }\n+        } else {\n+            p.bump(delim);\n+        }\n+    }\n+    p.expect(ket);\n+}"}, {"sha": "4ecaa6e6a85e9a507780f24ebc075947ff0f753f", "filename": "crates/parser/src/grammar/attributes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -1,5 +1,7 @@\n use super::*;\n \n+pub(super) const ATTRIBUTE_FIRST: TokenSet = TokenSet::new(&[T![#]]);\n+\n pub(super) fn inner_attrs(p: &mut Parser<'_>) {\n     while p.at(T![#]) && p.nth(1) == T![!] {\n         attr(p, true);"}, {"sha": "4b080102a2c3de1659e67d51b0ee472c5c770eb0", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -1,5 +1,7 @@\n mod atom;\n \n+use crate::grammar::attributes::ATTRIBUTE_FIRST;\n+\n use super::*;\n \n pub(crate) use self::atom::{block_expr, match_arm_list};\n@@ -572,27 +574,11 @@ fn cast_expr(p: &mut Parser<'_>, lhs: CompletedMarker) -> CompletedMarker {\n fn arg_list(p: &mut Parser<'_>) {\n     assert!(p.at(T!['(']));\n     let m = p.start();\n-    p.bump(T!['(']);\n-    while !p.at(T![')']) && !p.at(EOF) {\n-        // test arg_with_attr\n-        // fn main() {\n-        //     foo(#[attr] 92)\n-        // }\n-        if !expr(p) {\n-            break;\n-        }\n-        if !p.at(T![,]) {\n-            if p.at_ts(EXPR_FIRST) {\n-                p.error(\"expected `,`\");\n-                continue;\n-            } else {\n-                break;\n-            }\n-        } else {\n-            p.bump(T![,]);\n-        }\n-    }\n-    p.eat(T![')']);\n+    // test arg_with_attr\n+    // fn main() {\n+    //     foo(#[attr] 92)\n+    // }\n+    delimited(p, T!['('], T![')'], T![,], EXPR_FIRST.union(ATTRIBUTE_FIRST), expr);\n     m.complete(p, ARG_LIST);\n }\n "}, {"sha": "efc2603835e8f4edd524cfb07d720b241081c5da", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -118,7 +118,7 @@ pub(super) fn atom_expr(\n                     // fn main() {\n                     //     'loop: impl\n                     // }\n-                    p.error(\"expected a loop\");\n+                    p.error(\"expected a loop or block\");\n                     m.complete(p, ERROR);\n                     return None;\n                 }"}, {"sha": "919d9b91ebab5dede8a8f5b3fce37348e8874338", "filename": "crates/parser/src/grammar/generic_args.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -5,27 +5,35 @@ pub(super) fn opt_generic_arg_list(p: &mut Parser<'_>, colon_colon_required: boo\n     if p.at(T![::]) && p.nth(2) == T![<] {\n         m = p.start();\n         p.bump(T![::]);\n-        p.bump(T![<]);\n     } else if !colon_colon_required && p.at(T![<]) && p.nth(1) != T![=] {\n         m = p.start();\n-        p.bump(T![<]);\n     } else {\n         return;\n     }\n \n-    while !p.at(EOF) && !p.at(T![>]) {\n-        generic_arg(p);\n-        if !p.at(T![>]) && !p.expect(T![,]) {\n-            break;\n-        }\n-    }\n-    p.expect(T![>]);\n+    delimited(p, T![<], T![>], T![,], GENERIC_ARG_FIRST, generic_arg);\n     m.complete(p, GENERIC_ARG_LIST);\n }\n \n+const GENERIC_ARG_FIRST: TokenSet = TokenSet::new(&[\n+    LIFETIME_IDENT,\n+    IDENT,\n+    T!['{'],\n+    T![true],\n+    T![false],\n+    T![-],\n+    INT_NUMBER,\n+    FLOAT_NUMBER,\n+    CHAR,\n+    BYTE,\n+    STRING,\n+    BYTE_STRING,\n+])\n+.union(types::TYPE_FIRST);\n+\n // test generic_arg\n // type T = S<i32>;\n-fn generic_arg(p: &mut Parser<'_>) {\n+fn generic_arg(p: &mut Parser<'_>) -> bool {\n     match p.current() {\n         LIFETIME_IDENT => lifetime_arg(p),\n         T!['{'] | T![true] | T![false] | T![-] => const_arg(p),\n@@ -68,8 +76,10 @@ fn generic_arg(p: &mut Parser<'_>) {\n                 }\n             }\n         }\n-        _ => type_arg(p),\n+        _ if p.at_ts(types::TYPE_FIRST) => type_arg(p),\n+        _ => return false,\n     }\n+    true\n }\n \n // test lifetime_arg"}, {"sha": "7fcf938babdb1ef22f30bca1dc8674b69f60e592", "filename": "crates/parser/src/grammar/generic_params.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_params.rs?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -1,3 +1,5 @@\n+use crate::grammar::attributes::ATTRIBUTE_FIRST;\n+\n use super::*;\n \n pub(super) fn opt_generic_param_list(p: &mut Parser<'_>) {\n@@ -11,32 +13,31 @@ pub(super) fn opt_generic_param_list(p: &mut Parser<'_>) {\n fn generic_param_list(p: &mut Parser<'_>) {\n     assert!(p.at(T![<]));\n     let m = p.start();\n-    p.bump(T![<]);\n+    delimited(p, T![<], T![>], T![,], GENERIC_PARAM_FIRST.union(ATTRIBUTE_FIRST), |p| {\n+        // test generic_param_attribute\n+        // fn foo<#[lt_attr] 'a, #[t_attr] T>() {}\n+        let m = p.start();\n+        attributes::outer_attrs(p);\n+        generic_param(p, m)\n+    });\n \n-    while !p.at(EOF) && !p.at(T![>]) {\n-        generic_param(p);\n-        if !p.at(T![>]) && !p.expect(T![,]) {\n-            break;\n-        }\n-    }\n-    p.expect(T![>]);\n     m.complete(p, GENERIC_PARAM_LIST);\n }\n \n-fn generic_param(p: &mut Parser<'_>) {\n-    let m = p.start();\n-    // test generic_param_attribute\n-    // fn foo<#[lt_attr] 'a, #[t_attr] T>() {}\n-    attributes::outer_attrs(p);\n+const GENERIC_PARAM_FIRST: TokenSet = TokenSet::new(&[IDENT, LIFETIME_IDENT, T![const]]);\n+\n+fn generic_param(p: &mut Parser<'_>, m: Marker) -> bool {\n     match p.current() {\n         LIFETIME_IDENT => lifetime_param(p, m),\n         IDENT => type_param(p, m),\n         T![const] => const_param(p, m),\n         _ => {\n             m.abandon(p);\n-            p.err_and_bump(\"expected type parameter\");\n+            p.err_and_bump(\"expected generic parameter\");\n+            return false;\n         }\n     }\n+    true\n }\n \n // test lifetime_param"}, {"sha": "17f41b8e13a40d1c3e88e35724eadce199e652e9", "filename": "crates/parser/src/grammar/items/adt.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -1,3 +1,5 @@\n+use crate::grammar::attributes::ATTRIBUTE_FIRST;\n+\n use super::*;\n \n // test struct_item\n@@ -141,28 +143,31 @@ pub(crate) fn record_field_list(p: &mut Parser<'_>) {\n     }\n }\n \n+const TUPLE_FIELD_FIRST: TokenSet =\n+    types::TYPE_FIRST.union(ATTRIBUTE_FIRST).union(VISIBILITY_FIRST);\n+\n fn tuple_field_list(p: &mut Parser<'_>) {\n     assert!(p.at(T!['(']));\n     let m = p.start();\n-    p.bump(T!['(']);\n-    while !p.at(T![')']) && !p.at(EOF) {\n+    delimited(p, T!['('], T![')'], T![,], TUPLE_FIELD_FIRST, |p| {\n         let m = p.start();\n         // test tuple_field_attrs\n         // struct S (#[attr] f32);\n         attributes::outer_attrs(p);\n-        opt_visibility(p, true);\n+        let has_vis = opt_visibility(p, true);\n         if !p.at_ts(types::TYPE_FIRST) {\n             p.error(\"expected a type\");\n-            m.complete(p, ERROR);\n-            break;\n+            if has_vis {\n+                m.complete(p, ERROR);\n+            } else {\n+                m.abandon(p);\n+            }\n+            return false;\n         }\n         types::type_(p);\n         m.complete(p, TUPLE_FIELD);\n+        true\n+    });\n \n-        if !p.at(T![')']) {\n-            p.expect(T![,]);\n-        }\n-    }\n-    p.expect(T![')']);\n     m.complete(p, TUPLE_FIELD_LIST);\n }"}, {"sha": "74eae9151a2650cb934ec94e8fbff9d8e378feac", "filename": "crates/parser/src/grammar/params.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -1,3 +1,5 @@\n+use crate::grammar::attributes::ATTRIBUTE_FIRST;\n+\n use super::*;\n \n // test param_list\n@@ -66,14 +68,20 @@ fn list_(p: &mut Parser<'_>, flavor: Flavor) {\n             }\n         };\n \n-        if !p.at_ts(PARAM_FIRST) {\n+        if !p.at_ts(PARAM_FIRST.union(ATTRIBUTE_FIRST)) {\n             p.error(\"expected value parameter\");\n             m.abandon(p);\n             break;\n         }\n         param(p, m, flavor);\n-        if !p.at(ket) {\n-            p.expect(T![,]);\n+        if !p.at(T![,]) {\n+            if p.at_ts(PARAM_FIRST.union(ATTRIBUTE_FIRST)) {\n+                p.error(\"expected `,`\");\n+            } else {\n+                break;\n+            }\n+        } else {\n+            p.bump(T![,]);\n         }\n     }\n "}, {"sha": "cdc01863ab04cd3e178006865f572fcc66b08416", "filename": "crates/parser/test_data/parser/err/0009_broken_struct_type_parameter.rast", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.rast?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -44,8 +44,7 @@ SOURCE_FILE\n       IDENT \"T\"\n     SEMICOLON \";\"\n   WHITESPACE \"\\n\"\n-error 9: expected type parameter\n-error 11: expected COMMA\n+error 9: expected generic parameter\n error 11: expected R_ANGLE\n error 11: expected `;`, `{`, or `(`\n error 12: expected an item"}, {"sha": "b485c71ab394f2699599bf8dca47d98f952ce376", "filename": "crates/parser/test_data/parser/err/0013_invalid_type.rast", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -43,17 +43,14 @@ SOURCE_FILE\n                                     IDENT \"Box\"\n                                   GENERIC_ARG_LIST\n                                     L_ANGLE \"<\"\n-                                    TYPE_ARG\n-                                      ERROR\n-                                        AT \"@\"\n-      WHITESPACE \" \"\n-      TUPLE_FIELD\n-        PATH_TYPE\n-          PATH\n-            PATH_SEGMENT\n-              NAME_REF\n-                IDENT \"Any\"\n-      ERROR\n+  ERROR\n+    AT \"@\"\n+  WHITESPACE \" \"\n+  MACRO_CALL\n+    PATH\n+      PATH_SEGMENT\n+        NAME_REF\n+          IDENT \"Any\"\n   ERROR\n     R_ANGLE \">\"\n   ERROR\n@@ -69,17 +66,14 @@ SOURCE_FILE\n   ERROR\n     SEMICOLON \";\"\n   WHITESPACE \"\\n\\n\"\n-error 67: expected type\n-error 68: expected COMMA\n-error 68: expected R_ANGLE\n-error 68: expected COMMA\n-error 68: expected R_ANGLE\n-error 68: expected COMMA\n-error 68: expected R_ANGLE\n-error 68: expected COMMA\n-error 72: expected COMMA\n-error 72: expected a type\n-error 72: expected R_PAREN\n+error 67: expected R_ANGLE\n+error 67: expected R_ANGLE\n+error 67: expected R_ANGLE\n+error 67: expected R_PAREN\n+error 67: expected SEMICOLON\n+error 67: expected an item\n+error 72: expected BANG\n+error 72: expected `{`, `[`, `(`\n error 72: expected SEMICOLON\n error 72: expected an item\n error 73: expected an item"}, {"sha": "d97fc6c72091d8ff88a2aac7799bcfba150c35ce", "filename": "crates/parser/test_data/parser/err/0022_bad_exprs.rast", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -151,6 +151,7 @@ error 26: expected `;`, `{`, or `(`\n error 30: expected pattern\n error 31: expected SEMICOLON\n error 53: expected expression\n+error 54: expected R_PAREN\n error 54: expected SEMICOLON\n error 54: expected expression, item or let statement\n error 60: expected type\n@@ -160,6 +161,7 @@ error 65: expected pattern\n error 65: expected SEMICOLON\n error 65: expected expression, item or let statement\n error 92: expected expression\n+error 93: expected R_PAREN\n error 93: expected SEMICOLON\n error 93: expected expression, item or let statement\n error 95: expected expression, item or let statement"}, {"sha": "f0dbc9b1027fa9221576974820bd80ebf7cd12f5", "filename": "crates/parser/test_data/parser/err/0024_many_type_parens.rast", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -168,12 +168,12 @@ SOURCE_FILE\n                       L_PAREN \"(\"\n                       ERROR\n                         QUESTION \"?\"\n-        EXPR_STMT\n-          PATH_EXPR\n-            PATH\n-              PATH_SEGMENT\n-                NAME_REF\n-                  IDENT \"Sized\"\n+                  TYPE_ARG\n+                    PATH_TYPE\n+                      PATH\n+                        PATH_SEGMENT\n+                          NAME_REF\n+                            IDENT \"Sized\"\n         ERROR\n           R_PAREN \")\"\n         WHITESPACE \" \"\n@@ -291,15 +291,13 @@ SOURCE_FILE\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\"\n-error 88: expected COMMA\n error 88: expected R_ANGLE\n error 121: expected SEMICOLON\n error 121: expected expression, item or let statement\n error 140: expected type\n error 141: expected R_PAREN\n error 141: expected COMMA\n-error 141: expected R_ANGLE\n-error 141: expected SEMICOLON\n+error 146: expected R_ANGLE\n error 146: expected SEMICOLON\n error 146: expected expression, item or let statement\n error 148: expected expression, item or let statement\n@@ -309,7 +307,6 @@ error 165: expected expression\n error 168: expected expression\n error 179: expected expression\n error 180: expected SEMICOLON\n-error 215: expected COMMA\n error 215: expected R_ANGLE\n error 235: expected SEMICOLON\n error 235: expected expression, item or let statement"}, {"sha": "b6bc0088374fb8860fdb08064963877993c932ca", "filename": "crates/parser/test_data/parser/err/0025_nope.rast", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -156,8 +156,7 @@ SOURCE_FILE\n                             PATH_SEGMENT\n                               NAME_REF\n                                 IDENT \"i32\"\n-                      WHITESPACE \" \"\n-                      ERROR\n+                  WHITESPACE \" \"\n                   ERROR\n                     L_CURLY \"{\"\n                     R_CURLY \"}\"\n@@ -199,10 +198,8 @@ error 95: expected type\n error 95: expected COMMA\n error 96: expected field\n error 98: expected field declaration\n+error 371: expected R_PAREN\n error 371: expected COMMA\n-error 372: expected a type\n-error 372: expected R_PAREN\n-error 372: expected COMMA\n error 372: expected enum variant\n error 374: expected enum variant\n error 494: expected pattern"}, {"sha": "1cdc6e6e7192736c39e4e56ea6d69fe2dd2ed121", "filename": "crates/parser/test_data/parser/err/0042_weird_blocks.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0042_weird_blocks.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0042_weird_blocks.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0042_weird_blocks.rast?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -72,4 +72,4 @@ SOURCE_FILE\n error 24: expected existential, fn, trait or impl\n error 41: expected existential, fn, trait or impl\n error 56: expected a block\n-error 75: expected a loop\n+error 75: expected a loop or block"}, {"sha": "207a5c24dffd4840cdfcb6a721faf7aa974923f7", "filename": "crates/parser/test_data/parser/err/0048_double_fish.rast", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0048_double_fish.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0048_double_fish.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0048_double_fish.rast?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -12,7 +12,7 @@ SOURCE_FILE\n       STMT_LIST\n         L_CURLY \"{\"\n         WHITESPACE \"\\n    \"\n-        EXPR_STMT\n+        BIN_EXPR\n           PATH_EXPR\n             PATH\n               PATH_SEGMENT\n@@ -41,13 +41,14 @@ SOURCE_FILE\n                         COLON2 \"::\"\n                         ERROR\n                           L_ANGLE \"<\"\n-        BIN_EXPR\n-          PATH_EXPR\n-            PATH\n-              PATH_SEGMENT\n-                NAME_REF\n-                  IDENT \"nope\"\n-          SHR \">>\"\n+                  TYPE_ARG\n+                    PATH_TYPE\n+                      PATH\n+                        PATH_SEGMENT\n+                          NAME_REF\n+                            IDENT \"nope\"\n+                  R_ANGLE \">\"\n+          R_ANGLE \">\"\n           ERROR\n             SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n@@ -114,8 +115,6 @@ SOURCE_FILE\n   WHITESPACE \"\\n\"\n error 30: expected identifier\n error 31: expected COMMA\n-error 31: expected R_ANGLE\n-error 31: expected SEMICOLON\n error 37: expected expression\n error 75: expected identifier\n error 76: expected SEMICOLON"}, {"sha": "ea5203fb96e00bdc8abd84730af2f941176e947f", "filename": "crates/parser/test_data/parser/inline/err/0002_misplaced_label_err.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -23,6 +23,6 @@ SOURCE_FILE\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\"\n-error 22: expected a loop\n+error 22: expected a loop or block\n error 27: expected type\n error 27: expected `{`"}, {"sha": "5d0fe859c2965290238f1b16d5586b981ba4d646", "filename": "crates/parser/test_data/parser/inline/err/0015_arg_list_recovery.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_arg_list_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_arg_list_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_arg_list_recovery.rast?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -72,6 +72,6 @@ SOURCE_FILE\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\"\n error 25: expected identifier\n-error 39: expected `,`\n+error 39: expected COMMA\n error 39: expected expression\n error 55: expected expression"}, {"sha": "ea50ad35d74db1f480aad1619dcd450ce43beaf5", "filename": "crates/parser/test_data/parser/inline/err/0015_missing_fn_param_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_missing_fn_param_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4f6b5f41d49141a3907bfef2a81108a141d340a8/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_missing_fn_param_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_missing_fn_param_type.rast?ref=4f6b5f41d49141a3907bfef2a81108a141d340a8", "patch": "@@ -49,5 +49,5 @@ SOURCE_FILE\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\"\n error 6: missing type for function parameter\n-error 6: expected COMMA\n+error 6: expected `,`\n error 16: missing type for function parameter"}]}