{"sha": "78926027e33573a348c17d9bc4c5d4ca09718f96", "node_id": "C_kwDOAAsO6NoAKDc4OTI2MDI3ZTMzNTczYTM0OGMxN2Q5YmM0YzVkNGNhMDk3MThmOTY", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-18T12:36:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-18T12:36:21Z"}, "message": "converting lexed str to tokens", "tree": {"sha": "be5e4276434e6c79e434c6e546d9d958fce11050", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be5e4276434e6c79e434c6e546d9d958fce11050"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78926027e33573a348c17d9bc4c5d4ca09718f96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78926027e33573a348c17d9bc4c5d4ca09718f96", "html_url": "https://github.com/rust-lang/rust/commit/78926027e33573a348c17d9bc4c5d4ca09718f96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78926027e33573a348c17d9bc4c5d4ca09718f96/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b9d145dea17dc28d83fae23b5be63233483ec6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b9d145dea17dc28d83fae23b5be63233483ec6d", "html_url": "https://github.com/rust-lang/rust/commit/8b9d145dea17dc28d83fae23b5be63233483ec6d"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "9c5d27f51d06e015f243a626f6a068dc00460dbb", "filename": "crates/parser/src/lexed_str.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/78926027e33573a348c17d9bc4c5d4ca09718f96/crates%2Fparser%2Fsrc%2Flexed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78926027e33573a348c17d9bc4c5d4ca09718f96/crates%2Fparser%2Fsrc%2Flexed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flexed_str.rs?ref=78926027e33573a348c17d9bc4c5d4ca09718f96", "patch": "@@ -6,7 +6,7 @@\n //! convenient to include a text-based lexer here!\n //!\n //! Note that these tokens, unlike the tokens we feed into the parser, do\n-//! include info about comments and whitespace. \n+//! include info about comments and whitespace.\n \n use crate::{\n     SyntaxKind::{self, *},\n@@ -82,18 +82,45 @@ impl<'a> LexedStr<'a> {\n         assert!(i < self.len());\n         self.kind[i]\n     }\n+\n     pub fn text(&self, i: usize) -> &str {\n         assert!(i < self.len());\n         let lo = self.start[i] as usize;\n         let hi = self.start[i + 1] as usize;\n         &self.text[lo..hi]\n     }\n+\n     pub fn error(&self, i: usize) -> Option<&str> {\n         assert!(i < self.len());\n         let err = self.error.binary_search_by_key(&(i as u32), |i| i.token).ok()?;\n         Some(self.error[err].msg.as_str())\n     }\n \n+    pub fn to_tokens(&self) -> crate::Tokens {\n+        let mut res = crate::Tokens::default();\n+        let mut was_joint = false;\n+        for i in 0..self.len() {\n+            let kind = self.kind(i);\n+            if kind.is_trivia() {\n+                was_joint = false\n+            } else {\n+                if kind == SyntaxKind::IDENT {\n+                    let token_text = self.text(i);\n+                    let contextual_kw = SyntaxKind::from_contextual_keyword(token_text)\n+                        .unwrap_or(SyntaxKind::IDENT);\n+                    res.push_ident(contextual_kw);\n+                } else {\n+                    if was_joint {\n+                        res.was_joint();\n+                    }\n+                    res.push(kind);\n+                }\n+                was_joint = true;\n+            }\n+        }\n+        res\n+    }\n+\n     fn push(&mut self, kind: SyntaxKind, offset: usize) {\n         self.kind.push(kind);\n         self.start.push(offset as u32);"}]}