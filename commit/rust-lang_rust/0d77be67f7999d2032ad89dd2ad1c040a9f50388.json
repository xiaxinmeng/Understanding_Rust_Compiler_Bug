{"sha": "0d77be67f7999d2032ad89dd2ad1c040a9f50388", "node_id": "C_kwDOAAsO6NoAKDBkNzdiZTY3Zjc5OTlkMjAzMmFkODlkZDJhZDFjMDQwYTlmNTAzODg", "commit": {"author": {"name": "Eric Sampson", "email": "esampson@eaze.com", "date": "2021-10-06T06:16:31Z"}, "committer": {"name": "Eric Sampson", "email": "esampson@eaze.com", "date": "2021-10-06T06:16:31Z"}, "message": "Don't do work and then throw it away.", "tree": {"sha": "6c35db14af6a845b2b1cd93d8b90f63371e39afb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c35db14af6a845b2b1cd93d8b90f63371e39afb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d77be67f7999d2032ad89dd2ad1c040a9f50388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d77be67f7999d2032ad89dd2ad1c040a9f50388", "html_url": "https://github.com/rust-lang/rust/commit/0d77be67f7999d2032ad89dd2ad1c040a9f50388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d77be67f7999d2032ad89dd2ad1c040a9f50388/comments", "author": {"login": "ericsampson", "id": 1183853, "node_id": "MDQ6VXNlcjExODM4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1183853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericsampson", "html_url": "https://github.com/ericsampson", "followers_url": "https://api.github.com/users/ericsampson/followers", "following_url": "https://api.github.com/users/ericsampson/following{/other_user}", "gists_url": "https://api.github.com/users/ericsampson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericsampson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericsampson/subscriptions", "organizations_url": "https://api.github.com/users/ericsampson/orgs", "repos_url": "https://api.github.com/users/ericsampson/repos", "events_url": "https://api.github.com/users/ericsampson/events{/privacy}", "received_events_url": "https://api.github.com/users/ericsampson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ericsampson", "id": 1183853, "node_id": "MDQ6VXNlcjExODM4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1183853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericsampson", "html_url": "https://github.com/ericsampson", "followers_url": "https://api.github.com/users/ericsampson/followers", "following_url": "https://api.github.com/users/ericsampson/following{/other_user}", "gists_url": "https://api.github.com/users/ericsampson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericsampson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericsampson/subscriptions", "organizations_url": "https://api.github.com/users/ericsampson/orgs", "repos_url": "https://api.github.com/users/ericsampson/repos", "events_url": "https://api.github.com/users/ericsampson/events{/privacy}", "received_events_url": "https://api.github.com/users/ericsampson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ff992465e91346f8499ad125675e90f79c70ce0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff992465e91346f8499ad125675e90f79c70ce0", "html_url": "https://github.com/rust-lang/rust/commit/5ff992465e91346f8499ad125675e90f79c70ce0"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "0cb069ba0eadd8d05677ac672b4cf8ad42f888c5", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0d77be67f7999d2032ad89dd2ad1c040a9f50388/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d77be67f7999d2032ad89dd2ad1c040a9f50388/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=0d77be67f7999d2032ad89dd2ad1c040a9f50388", "patch": "@@ -66,14 +66,26 @@ pub(crate) fn annotations(\n         Either::Left(def) => {\n             let (range, ranges_enum_variants) = match def {\n                 hir::ModuleDef::Const(konst) => {\n-                    (konst.source(db).and_then(|node| name_range(&node, file_id)), vec![])\n+                    if config.annotate_references {\n+                        (konst.source(db).and_then(|node| name_range(&node, file_id)), vec![])\n+                    } else {\n+                        (None, vec![])\n+                    }\n                 }\n                 hir::ModuleDef::Trait(trait_) => {\n-                    (trait_.source(db).and_then(|node| name_range(&node, file_id)), vec![])\n+                    if config.annotate_references || config.annotate_impls {\n+                        (trait_.source(db).and_then(|node| name_range(&node, file_id)), vec![])\n+                    } else {\n+                        (None, vec![])\n+                    }\n                 }\n                 hir::ModuleDef::Adt(adt) => match adt {\n                     hir::Adt::Enum(enum_) => (\n-                        enum_.source(db).and_then(|node| name_range(&node, file_id)),\n+                        if config.annotate_references || config.annotate_impls {\n+                            enum_.source(db).and_then(|node| name_range(&node, file_id))\n+                        } else {\n+                            None\n+                        },\n                         if config.annotate_enum_variant_references {\n                             enum_\n                                 .variants(db)\n@@ -86,7 +98,13 @@ pub(crate) fn annotations(\n                             vec![]\n                         },\n                     ),\n-                    _ => (adt.source(db).and_then(|node| name_range(&node, file_id)), vec![]),\n+                    _ => {\n+                        if config.annotate_references || config.annotate_impls {\n+                            (adt.source(db).and_then(|node| name_range(&node, file_id)), vec![])\n+                        } else {\n+                            (None, vec![])\n+                        }\n+                    }\n                 },\n                 _ => (None, vec![]),\n             };"}]}