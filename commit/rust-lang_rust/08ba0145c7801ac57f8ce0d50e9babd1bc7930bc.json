{"sha": "08ba0145c7801ac57f8ce0d50e9babd1bc7930bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YmEwMTQ1Yzc4MDFhYzU3ZjhjZTBkNTBlOWJhYmQxYmM3OTMwYmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-02T11:19:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-02T11:32:58Z"}, "message": "make sure the miri-unleash-flag is not used to circumvent feature gates", "tree": {"sha": "0c5c04053657c6fa5994990d64ee497fdd233b58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c5c04053657c6fa5994990d64ee497fdd233b58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08ba0145c7801ac57f8ce0d50e9babd1bc7930bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08ba0145c7801ac57f8ce0d50e9babd1bc7930bc", "html_url": "https://github.com/rust-lang/rust/commit/08ba0145c7801ac57f8ce0d50e9babd1bc7930bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08ba0145c7801ac57f8ce0d50e9babd1bc7930bc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7eb91652fd26ccee708720ffcaf30954ac43f82", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7eb91652fd26ccee708720ffcaf30954ac43f82", "html_url": "https://github.com/rust-lang/rust/commit/c7eb91652fd26ccee708720ffcaf30954ac43f82"}], "stats": {"total": 67, "additions": 49, "deletions": 18}, "files": [{"sha": "43df08291825e0373d09f11c993a5926e1ac1a5c", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08ba0145c7801ac57f8ce0d50e9babd1bc7930bc/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ba0145c7801ac57f8ce0d50e9babd1bc7930bc/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=08ba0145c7801ac57f8ce0d50e9babd1bc7930bc", "patch": "@@ -254,6 +254,9 @@ impl Validator<'mir, 'tcx> {\n \n         if is_unleashable && self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n             self.tcx.sess.span_warn(self.tcx.def_span(self.def_id), \"skipping const checks\");\n+            if let Some(feature) = O::feature_gate() {\n+                self.tcx.sess.miri_unleashed_feature(feature);\n+            }\n             return;\n         }\n "}, {"sha": "c99fe173db2ebc402ea2c13137956eec6c506d4a", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/08ba0145c7801ac57f8ce0d50e9babd1bc7930bc/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ba0145c7801ac57f8ce0d50e9babd1bc7930bc/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=08ba0145c7801ac57f8ce0d50e9babd1bc7930bc", "patch": "@@ -21,11 +21,12 @@ use rustc_errors::json::JsonEmitter;\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{self, FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n-use rustc_span::SourceFileHashAlgorithm;\n+use rustc_span::{SourceFileHashAlgorithm, Symbol};\n use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, Target, TargetTriple, TlsModel};\n \n use std::cell::{self, RefCell};\n use std::env;\n+use std::fmt::Write as _;\n use std::io::Write;\n use std::num::NonZeroU32;\n use std::path::PathBuf;\n@@ -142,6 +143,10 @@ pub struct Session {\n     /// and immediately printing the backtrace to stderr.\n     pub ctfe_backtrace: Lock<CtfeBacktrace>,\n \n+    /// This tracks whether `-Zunleash-the-miri-inside-of-you` was used to get around a\n+    /// feature gate.  If yes, this file must fail to compile.\n+    miri_unleashed_features: Lock<FxHashSet<Symbol>>,\n+\n     /// Base directory containing the `src/` for the Rust standard library, and\n     /// potentially `rustc` as well, if we can can find it. Right now it's always\n     /// `$sysroot/lib/rustlib/src/rust` (i.e. the `rustup` `rust-src` component).\n@@ -188,7 +193,36 @@ impl From<&'static lint::Lint> for DiagnosticMessageId {\n     }\n }\n \n+impl Drop for Session {\n+    fn drop(&mut self) {\n+        if !self.has_errors_or_delayed_span_bugs() {\n+            let unleashed_features = self.miri_unleashed_features.get_mut();\n+            if !unleashed_features.is_empty() {\n+                // Join the strings (itertools has it but libstd does not...)\n+                let mut list = String::new();\n+                for feature in unleashed_features.iter() {\n+                    if !list.is_empty() {\n+                        list.push_str(\", \");\n+                    }\n+                    write!(&mut list, \"{}\", feature).unwrap();\n+                }\n+                // We have skipped a feature gate, and not run into other errors... reject.\n+                panic!(\n+                    \"`-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature \\\n+                    gates, except when testing error paths in the CTFE engine.\\n\\\n+                    The following feature flags are missing from this crate: {}\",\n+                    list,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n impl Session {\n+    pub fn miri_unleashed_feature(&self, s: Symbol) {\n+        self.miri_unleashed_features.lock().insert(s);\n+    }\n+\n     pub fn local_crate_disambiguator(&self) -> CrateDisambiguator {\n         *self.crate_disambiguator.get()\n     }\n@@ -1139,6 +1173,7 @@ pub fn build_session_with_source_map(\n         confused_type_with_std_module: Lock::new(Default::default()),\n         system_library_path: OneThread::new(RefCell::new(Default::default())),\n         ctfe_backtrace,\n+        miri_unleashed_features: Lock::new(Default::default()),\n         real_rust_source_base_dir,\n     };\n "}, {"sha": "0203f13ef6155ab81ed4cdf6156d7bcad5f44c65", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08ba0145c7801ac57f8ce0d50e9babd1bc7930bc/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ba0145c7801ac57f8ce0d50e9babd1bc7930bc/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs?ref=08ba0145c7801ac57f8ce0d50e9babd1bc7930bc", "patch": "@@ -1,6 +1,8 @@\n // build-fail\n // compile-flags: -Zunleash-the-miri-inside-of-you -Zdeduplicate-diagnostics\n #![allow(const_err)]\n+#![feature(const_raw_ptr_deref)] // FIXME: cannot remove because then rustc thinks there is no error\n+#![crate_type = \"lib\"]\n \n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;\n@@ -24,7 +26,7 @@ static mut MUTABLE: u32 = 0;\n const READ_MUT: u32 = unsafe { MUTABLE };\n //~^ WARN skipping const checks\n \n-fn main() {\n+pub fn main() {\n     MUTATE_INTERIOR_MUT;\n     //~^ ERROR: erroneous constant used\n     READ_INTERIOR_MUT;"}, {"sha": "322f98d544569900d30e1bb75e9703039b9a4081", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/08ba0145c7801ac57f8ce0d50e9babd1bc7930bc/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08ba0145c7801ac57f8ce0d50e9babd1bc7930bc/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=08ba0145c7801ac57f8ce0d50e9babd1bc7930bc", "patch": "@@ -1,5 +1,5 @@\n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:11:1\n+  --> $DIR/const_refers_to_static.rs:13:1\n    |\n LL | / const MUTATE_INTERIOR_MUT: usize = {\n LL | |\n@@ -9,7 +9,7 @@ LL | | };\n    | |__^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:17:1\n+  --> $DIR/const_refers_to_static.rs:19:1\n    |\n LL | / const READ_INTERIOR_MUT: usize = {\n LL | |\n@@ -19,25 +19,25 @@ LL | | };\n    | |__^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:24:1\n+  --> $DIR/const_refers_to_static.rs:26:1\n    |\n LL | const READ_MUT: u32 = unsafe { MUTABLE };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:28:5\n+  --> $DIR/const_refers_to_static.rs:30:5\n    |\n LL |     MUTATE_INTERIOR_MUT;\n    |     ^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:30:5\n+  --> $DIR/const_refers_to_static.rs:32:5\n    |\n LL |     READ_INTERIOR_MUT;\n    |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:32:5\n+  --> $DIR/const_refers_to_static.rs:34:5\n    |\n LL |     READ_MUT;\n    |     ^^^^^^^^ referenced constant has errors"}, {"sha": "13646f09a00fe07bd9feeaf8d1cc63b4c6308489", "filename": "src/test/ui/consts/miri_unleashed/read_from_static.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fread_from_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb91652fd26ccee708720ffcaf30954ac43f82/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fread_from_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fread_from_static.stderr?ref=c7eb91652fd26ccee708720ffcaf30954ac43f82", "patch": "@@ -1,8 +0,0 @@\n-warning: skipping const checks\n-  --> $DIR/read_from_static.rs:5:1\n-   |\n-LL | static OH_YES: &mut i32 = &mut 42;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: 1 warning emitted\n-"}, {"sha": "c18227e0f5515bedfc98402003ad8d47a90789c1", "filename": "src/test/ui/consts/read_from_static_mut_ref.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08ba0145c7801ac57f8ce0d50e9babd1bc7930bc/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ba0145c7801ac57f8ce0d50e9babd1bc7930bc/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.rs?ref=08ba0145c7801ac57f8ce0d50e9babd1bc7930bc", "patch": "@@ -1,9 +1,8 @@\n // run-pass\n-// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(const_mut_refs)]\n #![allow(const_err)]\n \n static OH_YES: &mut i32 = &mut 42;\n-//~^ WARN skipping const checks\n \n fn main() {\n     // Make sure `OH_YES` can be read.", "previous_filename": "src/test/ui/consts/miri_unleashed/read_from_static.rs"}]}