{"sha": "e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxM2ZlN2ZmNWU0ODJiNjI2NzE0YWM2ZWM0MWI4ZDQ0ZTdjMjJlZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-12T23:37:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-12T23:37:39Z"}, "message": "Auto merge of #62635 - Centril:rollup-potvfnk, r=Centril\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #61535 (Coherence test when a generic type param has a default value from an associated type)\n - #62274 (rustc_mir: follow FalseUnwind's real_target edge in qualify_consts.)\n - #62431 (Add messages to `Option`'s and `Result`'s `must_use` annotation for `is_*`)\n - #62453 (in which we suggest anonymizing single-use lifetimes in paths )\n - #62568 (Replace unsafe_destructor_blind_to_params with may_dangle)\n - #62578 (Add test for #49919)\n - #62595 (Document that the crate keyword refers to the project root)\n - #62599 (move mem::uninitialized deprecation back by 1 release, to 1.39)\n - #62605 (Emit dropped unemitted errors to aid in ICE debugging)\n - #62607 (Correctly break out of recovery loop)\n - #62608 (`async unsafe fn` tests)\n - #62623 (downgrade indirect_structural_match lint to allow)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "a060f5b049425798bdf7dc8470ae34c4e7e5b22b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a060f5b049425798bdf7dc8470ae34c4e7e5b22b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "html_url": "https://github.com/rust-lang/rust/commit/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71f9384e3bec467158a628e2d11e77ffada16a90", "url": "https://api.github.com/repos/rust-lang/rust/commits/71f9384e3bec467158a628e2d11e77ffada16a90", "html_url": "https://github.com/rust-lang/rust/commit/71f9384e3bec467158a628e2d11e77ffada16a90"}, {"sha": "fe4e32a4e655846976475ef0a7dc5837eab796fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe4e32a4e655846976475ef0a7dc5837eab796fe", "html_url": "https://github.com/rust-lang/rust/commit/fe4e32a4e655846976475ef0a7dc5837eab796fe"}], "stats": {"total": 743, "additions": 502, "deletions": 241}, "files": [{"sha": "355e53cbed25c03d8e2d0205d10be8bdc6a7ee8b", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -62,7 +62,7 @@ Misc\n Compatibility Notes\n -------------------\n - With the stabilisation of `mem::MaybeUninit`, `mem::uninitialized` use is no\n-  longer recommended, and will be deprecated in 1.38.0.\n+  longer recommended, and will be deprecated in 1.39.0.\n \n [60318]: https://github.com/rust-lang/rust/pull/60318/\n [60364]: https://github.com/rust-lang/rust/pull/60364/"}, {"sha": "f2729168763bb54f79c960f317db4aa800807180", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -472,7 +472,7 @@ pub unsafe fn zeroed<T>() -> T {\n /// [`MaybeUninit<T>`]: union.MaybeUninit.html\n /// [inv]: union.MaybeUninit.html#initialization-invariant\n #[inline]\n-#[rustc_deprecated(since = \"1.38.0\", reason = \"use `mem::MaybeUninit` instead\")]\n+#[rustc_deprecated(since = \"1.39.0\", reason = \"use `mem::MaybeUninit` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn uninitialized<T>() -> T {\n     MaybeUninit::uninit().assume_init()"}, {"sha": "193cdb15b548d944aea58ea35e89c684d17934a5", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -178,7 +178,7 @@ impl<T> Option<T> {\n     /// ```\n     ///\n     /// [`Some`]: #variant.Some\n-    #[must_use]\n+    #[must_use = \"if you intended to assert that this has a value, consider `.unwrap()` instead\"]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_some(&self) -> bool {\n@@ -201,7 +201,8 @@ impl<T> Option<T> {\n     /// ```\n     ///\n     /// [`None`]: #variant.None\n-    #[must_use]\n+    #[must_use = \"if you intended to assert that this doesn't have a value, consider \\\n+                  `.and_then(|| panic!(\\\"`Option` had a value when expected `None`\\\"))` instead\"]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_none(&self) -> bool {"}, {"sha": "ba72e1e75f8e1f64dd3defac20aeffed8bd3dbc0", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -277,7 +277,7 @@ impl<T, E> Result<T, E> {\n     /// let x: Result<i32, &str> = Err(\"Some error message\");\n     /// assert_eq!(x.is_ok(), false);\n     /// ```\n-    #[must_use]\n+    #[must_use = \"if you intended to assert that this is ok, consider `.unwrap()` instead\"]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_ok(&self) -> bool {\n@@ -302,7 +302,7 @@ impl<T, E> Result<T, E> {\n     /// let x: Result<i32, &str> = Err(\"Some error message\");\n     /// assert_eq!(x.is_err(), true);\n     /// ```\n-    #[must_use]\n+    #[must_use = \"if you intended to assert that this is err, consider `.unwrap_err()` instead\"]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_err(&self) -> bool {"}, {"sha": "d1cae76de60a1b0a052eb87210729eef24971c6f", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -350,7 +350,8 @@ declare_lint! {\n \n declare_lint! {\n     pub INDIRECT_STRUCTURAL_MATCH,\n-    Warn,\n+    // defaulting to allow until rust-lang/rust#62614 is fixed.\n+    Allow,\n     \"pattern with const indirectly referencing non-`#[structural_match]` type\"\n }\n \n@@ -451,6 +452,7 @@ declare_lint_pass! {\n         AMBIGUOUS_ASSOCIATED_ITEMS,\n         NESTED_IMPL_TRAIT,\n         MUTABLE_BORROW_RESERVATION_CONFLICT,\n+        INDIRECT_STRUCTURAL_MATCH,\n     ]\n }\n "}, {"sha": "beb8061842dd357ff3c65e95f5b1e0b4c874d950", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 56, "deletions": 25, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -9,7 +9,7 @@ use crate::hir::def::{Res, DefKind};\n use crate::hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use crate::hir::map::Map;\n use crate::hir::ptr::P;\n-use crate::hir::{GenericArg, GenericParam, ItemLocalId, LifetimeName, Node, ParamName};\n+use crate::hir::{GenericArg, GenericParam, ItemLocalId, LifetimeName, Node, ParamName, QPath};\n use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n \n use crate::rustc::lint;\n@@ -1458,10 +1458,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     }\n \n     // helper method to issue suggestions from `fn rah<'a>(&'a T)` to `fn rah(&T)`\n+    // or from `fn rah<'a>(T<'a>)` to `fn rah(T<'_>)`\n     fn suggest_eliding_single_use_lifetime(\n         &self, err: &mut DiagnosticBuilder<'_>, def_id: DefId, lifetime: &hir::Lifetime\n     ) {\n-        // FIXME: future work: also suggest `impl Foo<'_>` for `impl<'a> Foo<'a>`\n         let name = lifetime.name.ident();\n         let mut remove_decl = None;\n         if let Some(parent_def_id) = self.tcx.parent(def_id) {\n@@ -1471,18 +1471,38 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         let mut remove_use = None;\n+        let mut elide_use = None;\n         let mut find_arg_use_span = |inputs: &hir::HirVec<hir::Ty>| {\n             for input in inputs {\n-                if let hir::TyKind::Rptr(lt, _) = input.node {\n-                    if lt.name.ident() == name {\n-                        // include the trailing whitespace between the ampersand and the type name\n-                        let lt_through_ty_span = lifetime.span.to(input.span.shrink_to_hi());\n-                        remove_use = Some(\n-                            self.tcx.sess.source_map()\n-                                .span_until_non_whitespace(lt_through_ty_span)\n-                        );\n-                        break;\n+                match input.node {\n+                    hir::TyKind::Rptr(lt, _) => {\n+                        if lt.name.ident() == name {\n+                            // include the trailing whitespace between the lifetime and type names\n+                            let lt_through_ty_span = lifetime.span.to(input.span.shrink_to_hi());\n+                            remove_use = Some(\n+                                self.tcx.sess.source_map()\n+                                    .span_until_non_whitespace(lt_through_ty_span)\n+                            );\n+                            break;\n+                        }\n                     }\n+                    hir::TyKind::Path(ref qpath) => {\n+                        if let QPath::Resolved(_, path) = qpath {\n+\n+                            let last_segment = &path.segments[path.segments.len()-1];\n+                            let generics = last_segment.generic_args();\n+                            for arg in generics.args.iter() {\n+                                if let GenericArg::Lifetime(lt) = arg {\n+                                    if lt.name.ident() == name {\n+                                        elide_use = Some(lt.span);\n+                                        break;\n+                                    }\n+                                }\n+                            }\n+                            break;\n+                        }\n+                    },\n+                    _ => {}\n                 }\n             }\n         };\n@@ -1506,24 +1526,35 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         }\n \n-        if let (Some(decl_span), Some(use_span)) = (remove_decl, remove_use) {\n-            // if both declaration and use deletion spans start at the same\n-            // place (\"start at\" because the latter includes trailing\n-            // whitespace), then this is an in-band lifetime\n-            if decl_span.shrink_to_lo() == use_span.shrink_to_lo() {\n-                err.span_suggestion(\n-                    use_span,\n-                    \"elide the single-use lifetime\",\n-                    String::new(),\n-                    Applicability::MachineApplicable,\n-                );\n-            } else {\n+        let msg = \"elide the single-use lifetime\";\n+        match (remove_decl, remove_use, elide_use) {\n+            (Some(decl_span), Some(use_span), None) => {\n+                // if both declaration and use deletion spans start at the same\n+                // place (\"start at\" because the latter includes trailing\n+                // whitespace), then this is an in-band lifetime\n+                if decl_span.shrink_to_lo() == use_span.shrink_to_lo() {\n+                    err.span_suggestion(\n+                        use_span,\n+                        msg,\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else {\n+                    err.multipart_suggestion(\n+                        msg,\n+                        vec![(decl_span, String::new()), (use_span, String::new())],\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+            (Some(decl_span), None, Some(use_span)) => {\n                 err.multipart_suggestion(\n-                    \"elide the single-use lifetime\",\n-                    vec![(decl_span, String::new()), (use_span, String::new())],\n+                    msg,\n+                    vec![(decl_span, String::new()), (use_span, \"'_\".to_owned())],\n                     Applicability::MachineApplicable,\n                 );\n             }\n+            _ => {}\n         }\n     }\n "}, {"sha": "56cb89b5144ac85e35f6d3948fbf87096e39ab9a", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -22,7 +22,6 @@ use rustc_macros::HashStable;\n use std::{cmp, fmt};\n use syntax::ast;\n use syntax::attr::{self, SignedInt, UnsignedInt};\n-use syntax::symbol::sym;\n use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Copy, Clone, Debug)]\n@@ -435,20 +434,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             Some(dtor) => dtor.did\n         };\n \n-        // RFC 1238: if the destructor method is tagged with the\n-        // attribute `unsafe_destructor_blind_to_params`, then the\n-        // compiler is being instructed to *assume* that the\n-        // destructor will not access borrowed data,\n-        // even if such data is otherwise reachable.\n-        //\n-        // Such access can be in plain sight (e.g., dereferencing\n-        // `*foo.0` of `Foo<'a>(&'a u32)`) or indirectly hidden\n-        // (e.g., calling `foo.0.clone()` of `Foo<T:Clone>`).\n-        if self.has_attr(dtor, sym::unsafe_destructor_blind_to_params) {\n-            debug!(\"destructor_constraint({:?}) - blind\", def.did);\n-            return vec![];\n-        }\n-\n         let impl_def_id = self.associated_item(dtor).container.id();\n         let impl_generics = self.generics_of(impl_def_id);\n "}, {"sha": "41d0638f7c6bdb0ffd44a214a90657329d977994", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -380,10 +380,13 @@ impl<'a> Debug for DiagnosticBuilder<'a> {\n impl<'a> Drop for DiagnosticBuilder<'a> {\n     fn drop(&mut self) {\n         if !panicking() && !self.cancelled() {\n-            let mut db = DiagnosticBuilder::new(self.handler,\n-                                                Level::Bug,\n-                                                \"Error constructed but not emitted\");\n+            let mut db = DiagnosticBuilder::new(\n+                self.handler,\n+                Level::Bug,\n+                \"the following error was constructed but not emitted\",\n+            );\n             db.emit();\n+            self.emit();\n             panic!();\n         }\n     }"}, {"sha": "21b8f06d0895f066b633404a4e2d85b496feb245", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -890,6 +890,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n \n             let target = match body[bb].terminator().kind {\n                 TerminatorKind::Goto { target } |\n+                TerminatorKind::FalseUnwind { real_target: target, .. } |\n                 TerminatorKind::Drop { target, .. } |\n                 TerminatorKind::DropAndReplace { target, .. } |\n                 TerminatorKind::Assert { target, .. } |\n@@ -908,8 +909,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                 TerminatorKind::GeneratorDrop |\n                 TerminatorKind::Yield { .. } |\n                 TerminatorKind::Unreachable |\n-                TerminatorKind::FalseEdges { .. } |\n-                TerminatorKind::FalseUnwind { .. } => None,\n+                TerminatorKind::FalseEdges { .. } => None,\n \n                 TerminatorKind::Return => {\n                     break;"}, {"sha": "babffe479bc2ecc0ca17ddd8daf26d3290895bad", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -246,7 +246,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n ///\n /// * (1.) `D` has a lifetime- or type-parametric Drop implementation,\n ///        (where that `Drop` implementation does not opt-out of\n-///         this check via the `unsafe_destructor_blind_to_params`\n+///         this check via the `may_dangle`\n ///         attribute), and\n /// * (2.) the structure of `D` can reach a reference of type `&'a _`,\n ///\n@@ -279,7 +279,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n /// instead Drop-Check now simply assumes that if a destructor has\n /// access (direct or indirect) to a lifetime parameter, then that\n /// lifetime must be forced to outlive that destructor's dynamic\n-/// extent. We then provide the `unsafe_destructor_blind_to_params`\n+/// extent. We then provide the `may_dangle`\n /// attribute as a way for destructor implementations to opt-out of\n /// this conservative assumption (and thus assume the obligation of\n /// ensuring that they do not access data nor invoke methods of"}, {"sha": "3cd520fd4b50b1273c76f71225eb9a2951624b39", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -3809,7 +3809,6 @@ const ATTRIBUTE_WHITELIST: &'static [Symbol] = &[\n     sym::must_use,\n     sym::no_mangle,\n     sym::repr,\n-    sym::unsafe_destructor_blind_to_params,\n     sym::non_exhaustive\n ];\n "}, {"sha": "f5018485ef7bcc05ef02ce8df1bf94f8951be295", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -119,7 +119,7 @@ mod continue_keyword { }\n /// The `as` keyword can be used to change what the crate is referred to as in your project. If a\n /// crate name includes a dash, it is implicitly imported with the dashes replaced by underscores.\n ///\n-/// `crate` is also used as in conjunction with `pub` to signify that the item it's attached to\n+/// `crate` can also be used as in conjunction with `pub` to signify that the item it's attached to\n /// is public only to other members of the same crate it's in.\n ///\n /// ```rust\n@@ -131,6 +131,10 @@ mod continue_keyword { }\n /// }\n /// ```\n ///\n+/// `crate` is also used to represent the absolute path of a module, where `crate` refers to the\n+/// root of the current crate. For instance, `crate::foo::bar` refers to the name `bar` inside the\n+/// module `foo`, from anywhere else in the same crate.\n+///\n /// [Reference]: ../reference/items/extern-crates.html\n mod crate_keyword { }\n "}, {"sha": "e3628d908fb1e82177f48273a43a0804b51108fd", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -199,9 +199,6 @@ declare_features! (\n \n     // no-tracking-issue-end\n \n-    // Allows using `#[unsafe_destructor_blind_to_params]` (RFC 1238).\n-    (active, dropck_parametricity, \"1.3.0\", Some(28498), None),\n-\n     // no-tracking-issue-start\n \n     // Allows using `#[omit_gdb_pretty_printer_section]`.\n@@ -641,6 +638,8 @@ declare_features! (\n     (removed, extern_in_paths, \"1.33.0\", Some(55600), None,\n      Some(\"subsumed by `::foo::bar` paths\")),\n     (removed, quote, \"1.33.0\", Some(29601), None, None),\n+    // Allows using `#[unsafe_destructor_blind_to_params]` (RFC 1238).\n+    (removed, dropck_parametricity, \"1.38.0\", Some(28498), None, None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features\n@@ -1447,15 +1446,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n             cfg_fn!(omit_gdb_pretty_printer_section)\n         )\n     ),\n-    (sym::unsafe_destructor_blind_to_params,\n-    Normal,\n-    template!(Word),\n-    Gated(Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/34761\",\n-                                Some(\"replace this attribute with `#[may_dangle]`\")),\n-        sym::dropck_parametricity,\n-        \"unsafe_destructor_blind_to_params has been replaced by \\\n-            may_dangle and will be removed in the future\",\n-        cfg_fn!(dropck_parametricity))),\n     (sym::may_dangle,\n     Normal,\n     template!(Word),"}, {"sha": "e0633f73ac4654ffa8e9ec90134dddce25323dd5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -4629,6 +4629,9 @@ impl<'a> Parser<'a> {\n     fn parse_block_tail(&mut self, lo: Span, s: BlockCheckMode) -> PResult<'a, P<Block>> {\n         let mut stmts = vec![];\n         while !self.eat(&token::CloseDelim(token::Brace)) {\n+            if self.token == token::Eof {\n+                break;\n+            }\n             let stmt = match self.parse_full_stmt(false) {\n                 Err(mut err) => {\n                     err.emit();\n@@ -4643,8 +4646,6 @@ impl<'a> Parser<'a> {\n             };\n             if let Some(stmt) = stmt {\n                 stmts.push(stmt);\n-            } else if self.token == token::Eof {\n-                break;\n             } else {\n                 // Found only `;` or `}`.\n                 continue;\n@@ -6666,12 +6667,13 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Reads a module from a source file.\n-    fn eval_src_mod(&mut self,\n-                    path: PathBuf,\n-                    directory_ownership: DirectoryOwnership,\n-                    name: String,\n-                    id_sp: Span)\n-                    -> PResult<'a, (ast::Mod, Vec<Attribute> )> {\n+    fn eval_src_mod(\n+        &mut self,\n+        path: PathBuf,\n+        directory_ownership: DirectoryOwnership,\n+        name: String,\n+        id_sp: Span,\n+    ) -> PResult<'a, (ast::Mod, Vec<Attribute>)> {\n         let mut included_mod_stack = self.sess.included_mod_stack.borrow_mut();\n         if let Some(i) = included_mod_stack.iter().position(|p| *p == path) {\n             let mut err = String::from(\"circular modules: \");"}, {"sha": "2ef32d37d44cd5ec6ec8a82205f7be4ad3b9f0fa", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -34,23 +34,23 @@ fn with_error_checking_parse<'a, T, F>(s: String, ps: &'a ParseSess, f: F) -> T\n }\n \n /// Parse a string, return a crate.\n-pub fn string_to_crate (source_str : String) -> ast::Crate {\n+pub fn string_to_crate(source_str : String) -> ast::Crate {\n     let ps = ParseSess::new(FilePathMapping::empty());\n     with_error_checking_parse(source_str, &ps, |p| {\n         p.parse_crate_mod()\n     })\n }\n \n /// Parse a string, return an expr\n-pub fn string_to_expr (source_str : String) -> P<ast::Expr> {\n+pub fn string_to_expr(source_str : String) -> P<ast::Expr> {\n     let ps = ParseSess::new(FilePathMapping::empty());\n     with_error_checking_parse(source_str, &ps, |p| {\n         p.parse_expr()\n     })\n }\n \n /// Parse a string, return an item\n-pub fn string_to_item (source_str : String) -> Option<P<ast::Item>> {\n+pub fn string_to_item(source_str : String) -> Option<P<ast::Item>> {\n     let ps = ParseSess::new(FilePathMapping::empty());\n     with_error_checking_parse(source_str, &ps, |p| {\n         p.parse_item()"}, {"sha": "a983180ac01e16ee2c902a9ed2538e0edd6c0bf5", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -695,7 +695,6 @@ symbols! {\n         unmarked_api,\n         unreachable_code,\n         unrestricted_attribute_tokens,\n-        unsafe_destructor_blind_to_params,\n         unsafe_no_drop_flag,\n         unsized_locals,\n         unsized_tuple_coercion,"}, {"sha": "1de23f2a5e94f29067fdec0b74243f195f27b6a3", "filename": "src/test/compile-fail/const-fn-error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -6,6 +6,7 @@ const fn f(x: usize) -> usize {\n     let mut sum = 0;\n     for i in 0..x {\n         //~^ ERROR E0015\n+        //~| ERROR E0017\n         //~| ERROR E0019\n         //~| ERROR E0019\n         //~| ERROR E0080"}, {"sha": "28d9937b5e88134b0e95bbbf57023bcb81f2dc90", "filename": "src/test/compile-fail/issue-52443.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -1,10 +1,14 @@\n fn main() {\n     [(); & { loop { continue } } ]; //~ ERROR mismatched types\n     [(); loop { break }]; //~ ERROR mismatched types\n-    [(); {while true {break}; 0}]; //~ ERROR constant contains unimplemented expression type\n-    //~^ WARN denote infinite loops with\n-    [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n+    [(); {while true {break}; 0}];\n     //~^ ERROR constant contains unimplemented expression type\n     //~| ERROR constant contains unimplemented expression type\n+    //~| WARN denote infinite loops with\n+    [(); { for _ in 0usize.. {}; 0}];\n+    //~^ ERROR calls in constants are limited to constant functions\n+    //~| ERROR references in constants may only refer to immutable values\n+    //~| ERROR constant contains unimplemented expression type\n+    //~| ERROR constant contains unimplemented expression type\n     //~| ERROR evaluation of constant value failed\n }"}, {"sha": "9a191bad8b0bf1a9ea91929b79b10dd9c29adff4", "filename": "src/test/run-pass/coherence/auxiliary/re_rebalance_coherence_lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Frun-pass%2Fcoherence%2Fauxiliary%2Fre_rebalance_coherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Frun-pass%2Fcoherence%2Fauxiliary%2Fre_rebalance_coherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fauxiliary%2Fre_rebalance_coherence_lib.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -20,3 +20,12 @@ pub struct BatchInsert<'a, T: 'a, Tab> {\n impl<'a, T:'a, Tab, DB> QueryFragment<DB> for BatchInsert<'a, T, Tab>\n where DB: SupportsDefaultKeyword + Backend,\n {}\n+\n+pub trait LibToOwned {\n+    type Owned;\n+}\n+\n+pub struct LibCow<T: LibToOwned, Owned = <T as LibToOwned>::Owned> {\n+    pub t: T,\n+    pub o: Owned,\n+}"}, {"sha": "4168b7a6146a918d87b0b5f78e601cf374512af9", "filename": "src/test/run-pass/coherence/re-rebalance-coherence-default-generic-associated-type.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Frun-pass%2Fcoherence%2Fre-rebalance-coherence-default-generic-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Frun-pass%2Fcoherence%2Fre-rebalance-coherence-default-generic-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fre-rebalance-coherence-default-generic-associated-type.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -0,0 +1,27 @@\n+// run-pass\n+// aux-build:re_rebalance_coherence_lib.rs\n+\n+#![allow(dead_code)]\n+#![feature(re_rebalance_coherence)]\n+// check that a generic type with a default value from an associated type can be used without\n+// specifying the value, and without invoking coherence errors.\n+\n+extern crate re_rebalance_coherence_lib as lib;\n+use lib::*;\n+\n+struct MyString {}\n+\n+impl LibToOwned for MyString {\n+    type Owned = String;\n+}\n+\n+impl PartialEq<MyString> for LibCow<MyString> {\n+    fn eq(&self, _other: &MyString) -> bool {\n+        // Test that the default type is used.\n+        let _s: &String = &self.o;\n+\n+        false\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "555eefeb3a1f8722720151ae3eaf55f6fc498fae", "filename": "src/test/run-pass/issues/issue-24805-dropck-itemless.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24805-dropck-itemless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24805-dropck-itemless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24805-dropck-itemless.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -1,12 +1,11 @@\n // run-pass\n-#![allow(deprecated)]\n \n // Check that item-less traits do not cause dropck to inject extra\n // region constraints.\n \n #![allow(non_camel_case_types)]\n \n-#![feature(dropck_parametricity)]\n+#![feature(dropck_eyepatch)]\n \n trait UserDefined { }\n \n@@ -20,9 +19,8 @@ impl<'a, T> UserDefined for &'a T { }\n //   ```\n macro_rules! impl_drop {\n     ($Bound:ident, $Id:ident) => {\n-        struct $Id<T:$Bound>(T);\n-        impl <T:$Bound> Drop for $Id<T> {\n-            #[unsafe_destructor_blind_to_params]\n+        struct $Id<T: $Bound>(T);\n+        unsafe impl <#[may_dangle] T: $Bound> Drop for $Id<T> {\n             fn drop(&mut self) { }\n         }\n     }"}, {"sha": "90cf2cddcf02a940f9a40d8b8aaa1c5ee33dd7e1", "filename": "src/test/run-pass/issues/issue-28498-ugeh-ex1.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-ex1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-ex1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-ex1.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -1,21 +1,19 @@\n // run-pass\n-#![allow(deprecated)] // FIXME: switch to `#[may_dangle]` below.\n \n // Example taken from RFC 1238 text\n \n // https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md\n //     #example-of-the-unguarded-escape-hatch\n \n-#![feature(dropck_parametricity)]\n+#![feature(dropck_eyepatch)]\n use std::cell::Cell;\n \n struct Concrete<'a>(u32, Cell<Option<&'a Concrete<'a>>>);\n \n struct Foo<T> { data: Vec<T> }\n \n-impl<T> Drop for Foo<T> {\n-    // Below is the UGEH attribute\n-    #[unsafe_destructor_blind_to_params]\n+// Below is the UGEH attribute\n+unsafe impl<#[may_dangle] T> Drop for Foo<T> {\n     fn drop(&mut self) { }\n }\n "}, {"sha": "aea9fde5309e24350b8a486f6283e3367ca6d8f8", "filename": "src/test/run-pass/issues/issue-28498-ugeh-with-lifetime-param.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-lifetime-param.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -1,12 +1,11 @@\n // run-pass\n-#![allow(deprecated)] // FIXME: switch to `#[may_dangle]` below.\n \n // Demonstrate the use of the unguarded escape hatch with a lifetime param\n // to assert that destructor will not access any dead data.\n //\n // Compare with compile-fail/issue28498-reject-lifetime-param.rs\n \n-#![feature(dropck_parametricity)]\n+#![feature(dropck_eyepatch)]\n \n #[derive(Debug)]\n struct ScribbleOnDrop(String);\n@@ -19,11 +18,9 @@ impl Drop for ScribbleOnDrop {\n \n struct Foo<'a>(u32, &'a ScribbleOnDrop);\n \n-impl<'a> Drop for Foo<'a> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] 'a> Drop for Foo<'a> {\n     fn drop(&mut self) {\n-        // Use of `unsafe_destructor_blind_to_params` is sound,\n-        // because destructor never accesses `self.1`.\n+        // Use of `may_dangle` is sound, because destructor never accesses `self.1`.\n         println!(\"Dropping Foo({}, _)\", self.0);\n     }\n }"}, {"sha": "91ef5a7c98d6dbc7ed93ff1036453772c119b7dc", "filename": "src/test/run-pass/issues/issue-28498-ugeh-with-passed-to-fn.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-passed-to-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-passed-to-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-passed-to-fn.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![allow(deprecated)] // FIXME: switch to `#[may_dangle]` below.\n \n // Demonstrate the use of the unguarded escape hatch with a type param in negative position\n // to assert that destructor will not access any dead data.\n@@ -11,7 +10,7 @@\n //\n // Compare with run-pass/issue28498-ugeh-with-passed-to-fn.rs\n \n-#![feature(dropck_parametricity)]\n+#![feature(dropck_eyepatch)]\n \n #[derive(Debug)]\n struct ScribbleOnDrop(String);\n@@ -24,12 +23,10 @@ impl Drop for ScribbleOnDrop {\n \n struct Foo<T>(u32, T, Box<for <'r> fn(&'r T) -> String>);\n \n-impl<T> Drop for Foo<T> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] T> Drop for Foo<T> {\n     fn drop(&mut self) {\n-        // Use of `unsafe_destructor_blind_to_params` is sound,\n-        // because destructor never passes a `self.1` to the callback\n-        // (in `self.2`) despite having it available.\n+        // Use of `may_dangle` is sound, because destructor never passes a `self.1`\n+        // to the callback (in `self.2`) despite having it available.\n         println!(\"Dropping Foo({}, _)\", self.0);\n     }\n }"}, {"sha": "808f3b6e81e52582e32ef15d7a94e43445100768", "filename": "src/test/run-pass/issues/issue-28498-ugeh-with-trait-bound.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-trait-bound.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -1,12 +1,11 @@\n // run-pass\n-#![allow(deprecated)] // FIXME: switch to `#[may_dangle]` below.\n \n // Demonstrate the use of the unguarded escape hatch with a trait bound\n // to assert that destructor will not access any dead data.\n //\n // Compare with compile-fail/issue28498-reject-trait-bound.rs\n \n-#![feature(dropck_parametricity)]\n+#![feature(dropck_eyepatch)]\n \n use std::fmt;\n \n@@ -19,14 +18,12 @@ impl Drop for ScribbleOnDrop {\n     }\n }\n \n-struct Foo<T:fmt::Debug>(u32, T);\n+struct Foo<T: fmt::Debug>(u32, T);\n \n-impl<T:fmt::Debug> Drop for Foo<T> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] T: fmt::Debug> Drop for Foo<T> {\n     fn drop(&mut self) {\n-        // Use of `unsafe_destructor_blind_to_params` is sound,\n-        // because destructor never accesses the `Debug::fmt` method\n-        // of `T`, despite having it available.\n+        // Use of `may_dangle` is sound, because destructor never accesses\n+        // the `Debug::fmt` method of `T`, despite having it available.\n         println!(\"Dropping Foo({}, _)\", self.0);\n     }\n }"}, {"sha": "5ec99c5d183fb957780e46558fc1f58e5947de16", "filename": "src/test/ui/async-await/async-await.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -70,6 +70,8 @@ fn async_nonmove_block(x: u8) -> impl Future<Output = u8> {\n     }\n }\n \n+// see async-closure.rs for async_closure + async_closure_in_unsafe_block\n+\n async fn async_fn(x: u8) -> u8 {\n     wake_and_yield_once().await;\n     x\n@@ -120,6 +122,18 @@ async unsafe fn unsafe_async_fn(x: u8) -> u8 {\n     x\n }\n \n+unsafe fn unsafe_fn(x: u8) -> u8 {\n+    x\n+}\n+\n+fn async_block_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n+    unsafe {\n+        async move {\n+            unsafe_fn(unsafe_async_fn(x).await)\n+        }\n+    }\n+}\n+\n struct Foo;\n \n trait Bar {\n@@ -176,6 +190,7 @@ fn main() {\n         async_fn,\n         generic_async_fn,\n         async_fn_with_internal_borrow,\n+        async_block_in_unsafe_block,\n         Foo::async_assoc_item,\n         |x| {\n             async move {"}, {"sha": "925b54b398517dfacc69f3a51d22f6fa87decfd6", "filename": "src/test/ui/async-await/async-closure.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -53,6 +53,21 @@ fn async_closure(x: u8) -> impl Future<Output = u8> {\n     })(x)\n }\n \n+fn async_closure_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n+    (unsafe {\n+        async move |x: u8| unsafe_fn(unsafe_async_fn(x).await)\n+    })(x)\n+}\n+\n+async unsafe fn unsafe_async_fn(x: u8) -> u8 {\n+    wake_and_yield_once().await;\n+    x\n+}\n+\n+unsafe fn unsafe_fn(x: u8) -> u8 {\n+    x\n+}\n+\n fn test_future_yields_once_then_returns<F, Fut>(f: F)\n where\n     F: FnOnce(u8) -> Fut,\n@@ -77,5 +92,6 @@ fn main() {\n \n     test! {\n         async_closure,\n+        async_closure_in_unsafe_block,\n     }\n }"}, {"sha": "cb9156dcc6e58e92eb681588576b50c6036e23e7", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -0,0 +1,21 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+struct S;\n+\n+impl S {\n+    async unsafe fn f() {}\n+}\n+\n+async unsafe fn f() {}\n+\n+async fn g() {\n+    S::f(); //~ ERROR call to unsafe function is unsafe\n+    f(); //~ ERROR call to unsafe function is unsafe\n+}\n+\n+fn main() {\n+    S::f(); //~ ERROR call to unsafe function is unsafe\n+    f(); //~ ERROR call to unsafe function is unsafe\n+}"}, {"sha": "d22413beecbcf4e6516262a71a320ec7322d7129", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -0,0 +1,35 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n+   |\n+LL |     S::f();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n+   |\n+LL |     f();\n+   |     ^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:19:5\n+   |\n+LL |     S::f();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:20:5\n+   |\n+LL |     f();\n+   |     ^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "b9cd3903513a47492bb528adf9b61f50ee7a4ad3", "filename": "src/test/ui/async-await/await-macro.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -77,6 +77,12 @@ fn async_closure(x: u8) -> impl Future<Output = u8> {\n     })(x)\n }\n \n+fn async_closure_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n+    (unsafe {\n+        async move |x: u8| unsafe_fn(await!(unsafe_async_fn(x)))\n+    })(x)\n+}\n+\n async fn async_fn(x: u8) -> u8 {\n     await!(wake_and_yield_once());\n     x\n@@ -127,18 +133,34 @@ async unsafe fn unsafe_async_fn(x: u8) -> u8 {\n     x\n }\n \n+unsafe fn unsafe_fn(x: u8) -> u8 {\n+    x\n+}\n+\n+fn async_block_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n+    unsafe {\n+        async move {\n+            unsafe_fn(await!(unsafe_async_fn(x)))\n+        }\n+    }\n+}\n+\n struct Foo;\n \n trait Bar {\n     fn foo() {}\n }\n \n impl Foo {\n-    async fn async_method(x: u8) -> u8 {\n+    async fn async_assoc_item(x: u8) -> u8 {\n         unsafe {\n             await!(unsafe_async_fn(x))\n         }\n     }\n+\n+    async unsafe fn async_unsafe_assoc_item(x: u8) -> u8 {\n+        await!(unsafe_async_fn(x))\n+    }\n }\n \n fn test_future_yields_once_then_returns<F, Fut>(f: F)\n@@ -177,15 +199,22 @@ fn main() {\n         async_block,\n         async_nonmove_block,\n         async_closure,\n+        async_closure_in_unsafe_block,\n         async_fn,\n         generic_async_fn,\n         async_fn_with_internal_borrow,\n-        Foo::async_method,\n+        async_block_in_unsafe_block,\n+        Foo::async_assoc_item,\n         |x| {\n             async move {\n                 unsafe { await!(unsafe_async_fn(x)) }\n             }\n         },\n+        |x| {\n+            async move {\n+                unsafe { await!(Foo::async_unsafe_assoc_item(x)) }\n+            }\n+        },\n     }\n     test_with_borrow! {\n         async_block_with_borrow_named_lifetime,"}, {"sha": "8fa5b0a961f9f22d8357a39499eaebe01bab40a3", "filename": "src/test/ui/consts/const-eval/infinite_loop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -4,7 +4,9 @@ fn main() {\n     let _ = [(); {\n         //~^ WARNING Constant evaluating a complex constant, this might take some time\n         let mut n = 113383; // #20 in https://oeis.org/A006884\n-        while n != 0 { //~ ERROR constant contains unimplemented expression type\n+        while n != 0 {\n+        //~^ ERROR constant contains unimplemented expression type\n+        //~| ERROR constant contains unimplemented expression type\n             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n             //~^ ERROR evaluation of constant value failed\n         }"}, {"sha": "68e7fdb12517b0f93ab17883864fd02c6857e74a", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -1,7 +1,15 @@\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/infinite_loop.rs:7:15\n+   |\n+LL |         while n != 0 {\n+   |               ^^^^^^\n+\n error[E0019]: constant contains unimplemented expression type\n   --> $DIR/infinite_loop.rs:7:9\n    |\n LL | /         while n != 0 {\n+LL | |\n+LL | |\n LL | |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n LL | |\n LL | |         }\n@@ -21,12 +29,12 @@ LL | |     }];\n    | |_____^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/infinite_loop.rs:8:20\n+  --> $DIR/infinite_loop.rs:10:20\n    |\n LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n    |                    ^^^^^^^^^^ duplicate interpreter state observed here, const evaluation will never terminate\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0019, E0080.\n For more information about an error, try `rustc --explain E0019`."}, {"sha": "2989b200b2fc416fc3b3e0d50ad69349dbb944ef", "filename": "src/test/ui/consts/const-eval/issue-52442.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n-    [();  { &loop { break } as *const _ as usize } ]; //~ ERROR unimplemented expression type\n-    //~^ ERROR it is undefined behavior to use this value\n+    [();  { &loop { break } as *const _ as usize } ];\n+    //~^ ERROR casting pointers to integers in constants is unstable\n+    //~| ERROR it is undefined behavior to use this value\n }"}, {"sha": "88c94d917fe0ecec15de3dda5ae90246d34521e1", "filename": "src/test/ui/consts/const-eval/issue-52442.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -1,8 +1,11 @@\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/issue-52442.rs:2:14\n+error[E0658]: casting pointers to integers in constants is unstable\n+  --> $DIR/issue-52442.rs:2:13\n    |\n LL |     [();  { &loop { break } as *const _ as usize } ];\n-   |              ^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/51910\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/issue-52442.rs:2:11\n@@ -14,5 +17,5 @@ LL |     [();  { &loop { break } as *const _ as usize } ];\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0019, E0080.\n-For more information about an error, try `rustc --explain E0019`.\n+Some errors have detailed explanations: E0080, E0658.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "b42249e57fa9a25ab5ff2a6349cc291eb7a1b400", "filename": "src/test/ui/consts/const-eval/issue-52475.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -3,7 +3,9 @@ fn main() {\n         //~^ WARNING Constant evaluating a complex constant, this might take some time\n         let mut x = &0;\n         let mut n = 0;\n-        while n < 5 { //~ ERROR constant contains unimplemented expression type\n+        while n < 5 {\n+        //~^ ERROR constant contains unimplemented expression type\n+        //~| ERROR constant contains unimplemented expression type\n             n = (n + 1) % 5; //~ ERROR evaluation of constant value failed\n             x = &0; // Materialize a new AllocId\n         }"}, {"sha": "1e83cbcff2bf1896eed213600d6492619b088b92", "filename": "src/test/ui/consts/const-eval/issue-52475.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -1,7 +1,15 @@\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/issue-52475.rs:6:15\n+   |\n+LL |         while n < 5 {\n+   |               ^^^^^\n+\n error[E0019]: constant contains unimplemented expression type\n   --> $DIR/issue-52475.rs:6:9\n    |\n LL | /         while n < 5 {\n+LL | |\n+LL | |\n LL | |             n = (n + 1) % 5;\n LL | |             x = &0; // Materialize a new AllocId\n LL | |         }\n@@ -21,12 +29,12 @@ LL | |     }];\n    | |_____^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-52475.rs:7:17\n+  --> $DIR/issue-52475.rs:9:17\n    |\n LL |             n = (n + 1) % 5;\n    |                 ^^^^^^^^^^^ duplicate interpreter state observed here, const evaluation will never terminate\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0019, E0080.\n For more information about an error, try `rustc --explain E0019`."}, {"sha": "ad8589c73788cfc8dc6b2f463fee69185eedaa0d", "filename": "src/test/ui/consts/const-eval/issue-62272.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+\n+// Tests that `loop`s unconditionally-broken-from are allowed in constants.\n+\n+const FOO: () = loop { break; };\n+\n+fn main() {\n+    [FOO; { let x; loop { x = 5; break; } x }];\n+}"}, {"sha": "36e308ade9c54323f2d8c75e1d15e5616a386adf", "filename": "src/test/ui/consts/const-labeled-break.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -1,9 +1,10 @@\n+// run-pass\n+\n // Using labeled break in a while loop has caused an illegal instruction being\n // generated, and an ICE later.\n //\n // See https://github.com/rust-lang/rust/issues/51350 for more information.\n \n const CRASH: () = 'a: while break 'a {};\n-//~^ ERROR constant contains unimplemented expression type\n \n fn main() {}"}, {"sha": "2009e92235566cfd8cc89d1fce35d4c8c08ff3e3", "filename": "src/test/ui/consts/const-labeled-break.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/71f9384e3bec467158a628e2d11e77ffada16a90/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f9384e3bec467158a628e2d11e77ffada16a90/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr?ref=71f9384e3bec467158a628e2d11e77ffada16a90", "patch": "@@ -1,9 +0,0 @@\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-labeled-break.rs:6:19\n-   |\n-LL | const CRASH: () = 'a: while break 'a {};\n-   |                   ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0019`."}, {"sha": "33252019e71e63038a167fb0ae01b718c247b1e7", "filename": "src/test/ui/feature-gates/feature-gate-dropck-ugeh-2.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71f9384e3bec467158a628e2d11e77ffada16a90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f9384e3bec467158a628e2d11e77ffada16a90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh-2.rs?ref=71f9384e3bec467158a628e2d11e77ffada16a90", "patch": "@@ -1,12 +0,0 @@\n-#![deny(deprecated)]\n-#![feature(dropck_parametricity)]\n-\n-struct Foo;\n-\n-impl Drop for Foo {\n-    #[unsafe_destructor_blind_to_params]\n-    //~^ ERROR use of deprecated attribute `dropck_parametricity`\n-    fn drop(&mut self) {}\n-}\n-\n-fn main() {}"}, {"sha": "b6a474575c677a5ec9057501e61756e9404d3c4f", "filename": "src/test/ui/feature-gates/feature-gate-dropck-ugeh-2.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71f9384e3bec467158a628e2d11e77ffada16a90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f9384e3bec467158a628e2d11e77ffada16a90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh-2.stderr?ref=71f9384e3bec467158a628e2d11e77ffada16a90", "patch": "@@ -1,14 +0,0 @@\n-error: use of deprecated attribute `dropck_parametricity`: unsafe_destructor_blind_to_params has been replaced by may_dangle and will be removed in the future. See https://github.com/rust-lang/rust/issues/34761\n-  --> $DIR/feature-gate-dropck-ugeh-2.rs:7:5\n-   |\n-LL |     #[unsafe_destructor_blind_to_params]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this attribute with `#[may_dangle]`\n-   |\n-note: lint level defined here\n-  --> $DIR/feature-gate-dropck-ugeh-2.rs:1:9\n-   |\n-LL | #![deny(deprecated)]\n-   |         ^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "a2377cda9bd66d4170ee21f89ade50c1a941b351", "filename": "src/test/ui/feature-gates/feature-gate-dropck-ugeh.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/71f9384e3bec467158a628e2d11e77ffada16a90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f9384e3bec467158a628e2d11e77ffada16a90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.rs?ref=71f9384e3bec467158a628e2d11e77ffada16a90", "patch": "@@ -1,29 +0,0 @@\n-// gate-test-dropck_parametricity\n-\n-// Ensure that attempts to use the unsafe attribute are feature-gated.\n-// Example adapted from RFC 1238 text (just left out the feature gate).\n-\n-// https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md\n-//     #example-of-the-unguarded-escape-hatch\n-\n-use std::cell::Cell;\n-\n-struct Concrete<'a>(u32, Cell<Option<&'a Concrete<'a>>>);\n-\n-struct Foo<T> { data: Vec<T> }\n-\n-impl<T> Drop for Foo<T> {\n-    #[unsafe_destructor_blind_to_params] // This is the UGEH attribute\n-    //~^ ERROR unsafe_destructor_blind_to_params has been replaced\n-    //~| WARN use of deprecated attribute `dropck_parametricity`\n-    fn drop(&mut self) { }\n-}\n-\n-fn main() {\n-    let mut foo = Foo {  data: Vec::new() };\n-    foo.data.push(Concrete(0, Cell::new(None)));\n-    foo.data.push(Concrete(0, Cell::new(None)));\n-\n-    foo.data[0].1.set(Some(&foo.data[1]));\n-    foo.data[1].1.set(Some(&foo.data[0]));\n-}"}, {"sha": "581b760ba4f47f30f5ab937be7122de0d04e6fcb", "filename": "src/test/ui/feature-gates/feature-gate-dropck-ugeh.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/71f9384e3bec467158a628e2d11e77ffada16a90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f9384e3bec467158a628e2d11e77ffada16a90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.stderr?ref=71f9384e3bec467158a628e2d11e77ffada16a90", "patch": "@@ -1,20 +0,0 @@\n-error[E0658]: unsafe_destructor_blind_to_params has been replaced by may_dangle and will be removed in the future\n-  --> $DIR/feature-gate-dropck-ugeh.rs:16:5\n-   |\n-LL |     #[unsafe_destructor_blind_to_params] // This is the UGEH attribute\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/28498\n-   = help: add `#![feature(dropck_parametricity)]` to the crate attributes to enable\n-\n-warning: use of deprecated attribute `dropck_parametricity`: unsafe_destructor_blind_to_params has been replaced by may_dangle and will be removed in the future. See https://github.com/rust-lang/rust/issues/34761\n-  --> $DIR/feature-gate-dropck-ugeh.rs:16:5\n-   |\n-LL |     #[unsafe_destructor_blind_to_params] // This is the UGEH attribute\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this attribute with `#[may_dangle]`\n-   |\n-   = note: #[warn(deprecated)] on by default\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "780f338681dd3107e921dae5d3d715b6f715831b", "filename": "src/test/ui/issues/issue-49919.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fissues%2Fissue-49919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fissues%2Fissue-49919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49919.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -0,0 +1,7 @@\n+fn foo<'a, T: 'a>(t: T) -> Box<dyn Fn() -> &'a T + 'a> {\n+    let foo: Box<dyn for <'c> Fn() -> &'c T> = Box::new(move || &t);\n+    //~^ ERROR: binding for associated type\n+    unimplemented!()\n+}\n+\n+fn main() {}"}, {"sha": "8098be5cc4584053db6ee40726e08d2a528f414f", "filename": "src/test/ui/issues/issue-49919.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fissues%2Fissue-49919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fissues%2Fissue-49919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49919.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -0,0 +1,9 @@\n+error[E0582]: binding for associated type `Output` references lifetime `'c`, which does not appear in the trait input types\n+  --> $DIR/issue-49919.rs:2:39\n+   |\n+LL |     let foo: Box<dyn for <'c> Fn() -> &'c T> = Box::new(move || &t);\n+   |                                       ^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0582`."}, {"sha": "055886bf3676cd169c1787459ebb1461d3a5db6c", "filename": "src/test/ui/issues/issue-55511.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fissues%2Fissue-55511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fissues%2Fissue-55511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55511.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -1,5 +1,5 @@\n+#![warn(indirect_structural_match)]\n use std::cell::Cell;\n-\n trait Foo<'a> {\n     const C: Option<Cell<&'a u32>>;\n }"}, {"sha": "e094256f5c8271cd9d8353822f7fdadf472bb88e", "filename": "src/test/ui/issues/issue-55511.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fissues%2Fissue-55511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fissues%2Fissue-55511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55511.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -4,7 +4,11 @@ warning: to use a constant of type `std::cell::Cell` in a pattern, `std::cell::C\n LL |         <() as Foo<'static>>::C => { }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(indirect_structural_match)] on by default\n+note: lint level defined here\n+  --> $DIR/issue-55511.rs:1:9\n+   |\n+LL | #![warn(indirect_structural_match)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n "}, {"sha": "6c3b56586c4ecd2d60eaf783caaaab214d55c82f", "filename": "src/test/ui/issues/issue-61858.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fissues%2Fissue-61858.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fissues%2Fissue-61858.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61858.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    (if foobar) //~ ERROR expected `{`, found `)`\n+}"}, {"sha": "ea2ec3d013f59e9d081b7d10fd0e1090e0d59cb5", "filename": "src/test/ui/issues/issue-61858.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fissues%2Fissue-61858.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fissues%2Fissue-61858.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61858.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -0,0 +1,10 @@\n+error: expected `{`, found `)`\n+  --> $DIR/issue-61858.rs:2:15\n+   |\n+LL |     (if foobar)\n+   |      --       ^ expected `{`\n+   |      |\n+   |      this `if` statement has a condition, but no block\n+\n+error: aborting due to previous error\n+"}, {"sha": "dca8aaef1500d84484f8f0c5dba4495bc0b4c2e1", "filename": "src/test/ui/rfc1445/allow-use-behind-cousin-variant.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fallow-use-behind-cousin-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fallow-use-behind-cousin-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fallow-use-behind-cousin-variant.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -0,0 +1,59 @@\n+// rust-lang/rust#62614: we want to allow matching on constants of types that\n+// have non-structural-match variants, *if* the constant itself does not use\n+// any such variant.\n+\n+// NOTE: for now, deliberately leaving the lint `indirect_structural_match` set\n+// to its default, so that we will not issue a diangostic even if\n+// rust-lang/rust#62614 remains an open issue.\n+\n+// run-pass\n+\n+struct Sum(u32, u32);\n+\n+impl PartialEq for Sum {\n+    fn eq(&self, other: &Self) -> bool { self.0 + self.1 == other.0 + other.1 }\n+}\n+\n+impl Eq for Sum { }\n+\n+#[derive(PartialEq, Eq)]\n+enum Eek {\n+    TheConst,\n+    UnusedByTheConst(Sum)\n+}\n+\n+const THE_CONST: Eek = Eek::TheConst;\n+const SUM_THREE: Eek = Eek::UnusedByTheConst(Sum(3,0));\n+\n+const EEK_ZERO: &[Eek] = &[];\n+const EEK_ONE: &[Eek] = &[THE_CONST];\n+\n+pub fn main() {\n+    match Eek::UnusedByTheConst(Sum(1,2)) {\n+        ref sum if sum == &SUM_THREE => { println!(\"Hello 0\"); }\n+        _ => { println!(\"Gbye\"); }\n+    }\n+\n+    match Eek::TheConst {\n+        THE_CONST => { println!(\"Hello 1\"); }\n+        _ => { println!(\"Gbye\"); }\n+    }\n+\n+\n+    match & &Eek::TheConst {\n+        & & THE_CONST => { println!(\"Hello 2\"); }\n+        _ => { println!(\"Gbye\"); }\n+    }\n+\n+    match & & &[][..] {\n+        & & EEK_ZERO => { println!(\"Hello 3\"); }\n+        & & EEK_ONE => { println!(\"Gbye\"); }\n+        _ => { println!(\"Gbye\"); }\n+    }\n+\n+    match & & &[Eek::TheConst][..] {\n+        & & EEK_ZERO => { println!(\"Gby\"); }\n+        & & EEK_ONE => { println!(\"Hello 4\"); }\n+        _ => { println!(\"Gbye\"); }\n+    }\n+}"}, {"sha": "584e7a00f0993339f42c09b510c531685443b63e", "filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -4,7 +4,7 @@\n // through that we had intended to reject.\n //\n // See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n-\n+#![warn(indirect_structural_match)]\n struct NoDerive(i32);\n \n // This impl makes NoDerive irreflexive."}, {"sha": "0328db5a49cf3c90b4ab42f013ae328c056f975b", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-embedded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -4,7 +4,7 @@\n // through that we had intended to reject.\n //\n // See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n-\n+#![warn(indirect_structural_match)]\n // run-pass\n \n struct NoDerive(i32);"}, {"sha": "5281d576066daa70918ddbd9c2bdc4a85011a0c5", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-embedded.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -4,7 +4,11 @@ warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be a\n LL |         WRAP_DOUBLY_INDIRECT_INLINE => { panic!(\"WRAP_DOUBLY_INDIRECT_INLINE matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(indirect_structural_match)] on by default\n+note: lint level defined here\n+  --> $DIR/cant-hide-behind-doubly-indirect-embedded.rs:7:9\n+   |\n+LL | #![warn(indirect_structural_match)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n "}, {"sha": "54579e487a6b9d5e1f184b8d53e6b619104fd604", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -4,7 +4,7 @@\n // through that we had intended to reject.\n //\n // See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n-\n+#![warn(indirect_structural_match)]\n // run-pass\n \n struct NoDerive(i32);"}, {"sha": "5d601c2c006f7b9f3616c269259c7d805f80a47c", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-param.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -4,7 +4,11 @@ warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be a\n LL |         WRAP_DOUBLY_INDIRECT_PARAM => { panic!(\"WRAP_DOUBLY_INDIRECT_PARAM matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(indirect_structural_match)] on by default\n+note: lint level defined here\n+  --> $DIR/cant-hide-behind-doubly-indirect-param.rs:7:9\n+   |\n+LL | #![warn(indirect_structural_match)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n "}, {"sha": "2a24316898b5d0ec85fda2cb37fa6b985a66b3b3", "filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-embedded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -4,7 +4,7 @@\n // through that we had intended to reject.\n //\n // See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n-\n+#![warn(indirect_structural_match)]\n // run-pass\n \n struct NoDerive(i32);"}, {"sha": "4ac19afa706b0c3857416111155fc6d77a9f7999", "filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-embedded.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -4,7 +4,11 @@ warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be a\n LL |         WRAP_INDIRECT_INLINE => { panic!(\"WRAP_INDIRECT_INLINE matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(indirect_structural_match)] on by default\n+note: lint level defined here\n+  --> $DIR/cant-hide-behind-indirect-struct-embedded.rs:7:9\n+   |\n+LL | #![warn(indirect_structural_match)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n "}, {"sha": "64e777f23223441833e0f918f1ac7c8e67958043", "filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -4,7 +4,7 @@\n // through that we had intended to reject.\n //\n // See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n-\n+#![warn(indirect_structural_match)]\n // run-pass\n \n struct NoDerive(i32);"}, {"sha": "4000a4798785420b356c2e98d3ae006a54951742", "filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-param.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -4,7 +4,11 @@ warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be a\n LL |         WRAP_INDIRECT_PARAM => { panic!(\"WRAP_INDIRECT_PARAM matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(indirect_structural_match)] on by default\n+note: lint level defined here\n+  --> $DIR/cant-hide-behind-indirect-struct-param.rs:7:9\n+   |\n+LL | #![warn(indirect_structural_match)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n "}, {"sha": "98943a9666a9ae842b3a510da52eabbf4d9c6872", "filename": "src/test/ui/rfc1445/issue-62307-match-ref-ref-forbidden-without-eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -10,7 +10,7 @@\n \n // Issue 62307 pointed out a case where the checking for\n // `#[structural_match]` was too shallow.\n-\n+#![warn(indirect_structural_match)]\n // run-pass\n \n #[derive(Debug)]"}, {"sha": "0e158c2fda5607682ffbf88d403b15fdae984246", "filename": "src/test/ui/rfc1445/issue-62307-match-ref-ref-forbidden-without-eq.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -4,7 +4,11 @@ warning: to use a constant of type `B` in a pattern, `B` must be annotated with\n LL |         RR_B1 => { println!(\"CLAIM RR0: {:?} matches {:?}\", RR_B1, RR_B0); }\n    |         ^^^^^\n    |\n-   = note: #[warn(indirect_structural_match)] on by default\n+note: lint level defined here\n+  --> $DIR/issue-62307-match-ref-ref-forbidden-without-eq.rs:13:9\n+   |\n+LL | #![warn(indirect_structural_match)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n "}, {"sha": "ff9d6bd01c670408af474473851ac16dc8697ee4", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -9,4 +9,14 @@ fn a<'a>(x: &'a u32) { //~ ERROR `'a` only used once\n     //~^ HELP elide the single-use lifetime\n }\n \n+struct Single<'a> { x: &'a u32 }\n+struct Double<'a, 'b> { f: &'a &'b u32 }\n+\n+fn center<'m>(_: Single<'m>) {} //~ ERROR `'m` only used once\n+//~^ HELP elide the single-use lifetime\n+fn left<'x, 'y>(foo: Double<'x, 'y>) -> &'x u32 { foo.f } //~ ERROR `'y` only used once\n+//~^ HELP elide the single-use lifetime\n+fn right<'x, 'y>(foo: Double<'x, 'y>) -> &'y u32 { foo.f } //~ ERROR `'x` only used once\n+//~^ HELP elide the single-use lifetime\n+\n fn main() { }"}, {"sha": "faaa7e2f1b01b60640938f6218efbc630123af20", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -16,5 +16,37 @@ help: elide the single-use lifetime\n LL | fn a(x: &u32) {\n    |    --   --\n \n-error: aborting due to previous error\n+error: lifetime parameter `'m` only used once\n+  --> $DIR/one-use-in-fn-argument.rs:15:11\n+   |\n+LL | fn center<'m>(_: Single<'m>) {}\n+   |           ^^            -- ...is used only here\n+   |           |\n+   |           this lifetime...\n+help: elide the single-use lifetime\n+   |\n+LL | fn center(_: Single<'_>) {}\n+   |         --          ^^\n+\n+error: lifetime parameter `'y` only used once\n+  --> $DIR/one-use-in-fn-argument.rs:17:13\n+   |\n+LL | fn left<'x, 'y>(foo: Double<'x, 'y>) -> &'x u32 { foo.f }\n+   |             ^^ this lifetime... -- ...is used only here\n+help: elide the single-use lifetime\n+   |\n+LL | fn left<'x>(foo: Double<'x, '_>) -> &'x u32 { foo.f }\n+   |          --                 ^^\n+\n+error: lifetime parameter `'x` only used once\n+  --> $DIR/one-use-in-fn-argument.rs:19:10\n+   |\n+LL | fn right<'x, 'y>(foo: Double<'x, 'y>) -> &'y u32 { foo.f }\n+   |          ^^ this lifetime... -- ...is used only here\n+help: elide the single-use lifetime\n+   |\n+LL | fn right<'y>(foo: Double<'_, 'y>) -> &'y u32 { foo.f }\n+   |         --               ^^\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "1e7190157856cdfca65a9590e91ac9f2c6761255", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -16,9 +16,8 @@ struct Foo<'a>(u32, &'a ScribbleOnDrop);\n \n impl<'a> Drop for Foo<'a> {\n     fn drop(&mut self) {\n-        // Use of `unsafe_destructor_blind_to_params` is unsound,\n-        // because destructor accesses borrowed data in `self.1`\n-        // and we must force that to strictly outlive `self`.\n+        // Use of `may_dangle` is unsound, because destructor accesses borrowed data\n+        // in `self.1` and we must force that to strictly outlive `self`.\n         println!(\"Dropping Foo({}, {:?})\", self.0, self.1);\n     }\n }"}, {"sha": "3119ddd03cc26654a20e1d31d9ce559e26aeb7f3", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `first_dropped` does not live long enough\n-  --> $DIR/issue28498-reject-lifetime-param.rs:33:19\n+  --> $DIR/issue28498-reject-lifetime-param.rs:32:19\n    |\n LL |     foo1 = Foo(1, &first_dropped);\n    |                   ^^^^^^^^^^^^^^ borrowed value does not live long enough"}, {"sha": "dcd2e9ad4ba980d44d06610d1bb732c327a1d833", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -16,8 +16,7 @@ struct Foo<T>(u32, T, Box<for <'r> fn(&'r T) -> String>);\n \n impl<T> Drop for Foo<T> {\n     fn drop(&mut self) {\n-        // Use of `unsafe_destructor_blind_to_params` is unsound,\n-        // because we pass `T` to the callback in `self.2`\n+        // Use of `may_dangle` is unsound, because we pass `T` to the callback in `self.2`\n         // below, and thus potentially read from borrowed data.\n         println!(\"Dropping Foo({}, {})\", self.0, (self.2)(&self.1));\n     }"}, {"sha": "60e8a648cd5979d37f780f315fd13fb6b199cb90", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `first_dropped` does not live long enough\n-  --> $DIR/issue28498-reject-passed-to-fn.rs:35:19\n+  --> $DIR/issue28498-reject-passed-to-fn.rs:34:19\n    |\n LL |     foo1 = Foo(1, &first_dropped, Box::new(callback));\n    |                   ^^^^^^^^^^^^^^ borrowed value does not live long enough"}, {"sha": "444cebb19a73d55a29e21ada15478714aab8911a", "filename": "src/test/ui/span/issue28498-reject-trait-bound.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.rs?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -14,13 +14,12 @@ impl Drop for ScribbleOnDrop {\n     }\n }\n \n-struct Foo<T:fmt::Debug>(u32, T);\n+struct Foo<T: fmt::Debug>(u32, T);\n \n-impl<T:fmt::Debug> Drop for Foo<T> {\n+impl<T: fmt::Debug> Drop for Foo<T> {\n     fn drop(&mut self) {\n-        // Use of `unsafe_destructor_blind_to_params` is unsound,\n-        // because we access `T` fmt method when we pass `self.1`\n-        // below, and thus potentially read from borrowed data.\n+        // Use of `may_dangle` is unsound, because we access `T` fmt method when we pass\n+        // `self.1` below, and thus potentially read from borrowed data.\n         println!(\"Dropping Foo({}, {:?})\", self.0, self.1);\n     }\n }"}, {"sha": "22e4a8205b617723a856dd8f7e904ce7c962c368", "filename": "src/test/ui/span/issue28498-reject-trait-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr?ref=e13fe7ff5e482b626714ac6ec41b8d44e7c22ed1", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `first_dropped` does not live long enough\n-  --> $DIR/issue28498-reject-trait-bound.rs:35:19\n+  --> $DIR/issue28498-reject-trait-bound.rs:34:19\n    |\n LL |     foo1 = Foo(1, &first_dropped);\n    |                   ^^^^^^^^^^^^^^ borrowed value does not live long enough"}]}