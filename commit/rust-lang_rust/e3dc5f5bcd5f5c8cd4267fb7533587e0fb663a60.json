{"sha": "e3dc5f5bcd5f5c8cd4267fb7533587e0fb663a60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZGM1ZjViY2Q1ZjVjOGNkNDI2N2ZiNzUzMzU4N2UwZmI2NjNhNjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-30T13:06:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-30T13:06:30Z"}, "message": "auto merge of #11911 : kballard/rust/empty-functional-update, r=pcwalton\n\nFixes #8972", "tree": {"sha": "a8d002315f01cc3c7074088e05f024ef589a81f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8d002315f01cc3c7074088e05f024ef589a81f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3dc5f5bcd5f5c8cd4267fb7533587e0fb663a60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3dc5f5bcd5f5c8cd4267fb7533587e0fb663a60", "html_url": "https://github.com/rust-lang/rust/commit/e3dc5f5bcd5f5c8cd4267fb7533587e0fb663a60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3dc5f5bcd5f5c8cd4267fb7533587e0fb663a60/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6764c28e6c007fcf70dd34a12518fe4d65f9fb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6764c28e6c007fcf70dd34a12518fe4d65f9fb8", "html_url": "https://github.com/rust-lang/rust/commit/a6764c28e6c007fcf70dd34a12518fe4d65f9fb8"}, {"sha": "2258243ad87e731eba62b7c30a52c612076ba545", "url": "https://api.github.com/repos/rust-lang/rust/commits/2258243ad87e731eba62b7c30a52c612076ba545", "html_url": "https://github.com/rust-lang/rust/commit/2258243ad87e731eba62b7c30a52c612076ba545"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "0c81e87c7b8874ed36b5a9fa819648be4a7dabd6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e3dc5f5bcd5f5c8cd4267fb7533587e0fb663a60/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3dc5f5bcd5f5c8cd4267fb7533587e0fb663a60/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e3dc5f5bcd5f5c8cd4267fb7533587e0fb663a60", "patch": "@@ -1915,25 +1915,19 @@ impl Parser {\n                     let mut fields = ~[];\n                     let mut base = None;\n \n-                    fields.push(self.parse_field());\n                     while self.token != token::RBRACE {\n-                        self.commit_expr(fields.last().unwrap().expr,\n-                                         &[token::COMMA], &[token::RBRACE]);\n-\n                         if self.eat(&token::DOTDOT) {\n                             base = Some(self.parse_expr());\n                             break;\n                         }\n \n-                        if self.token == token::RBRACE {\n-                            // Accept an optional trailing comma.\n-                            break;\n-                        }\n                         fields.push(self.parse_field());\n+                        self.commit_expr(fields.last().unwrap().expr,\n+                                         &[token::COMMA], &[token::RBRACE]);\n                     }\n \n                     hi = pth.span.hi;\n-                    self.commit_expr_expecting(fields.last().unwrap().expr, token::RBRACE);\n+                    self.expect(&token::RBRACE);\n                     ex = ExprStruct(pth, fields, base);\n                     return self.mk_expr(lo, hi, ex);\n                 }\n@@ -2583,8 +2577,9 @@ impl Parser {\n     // For distingishing between struct literals and blocks\n     fn looking_at_struct_literal(&mut self) -> bool {\n         self.token == token::LBRACE &&\n-        (self.look_ahead(1, |t| token::is_plain_ident(t)) &&\n-         self.look_ahead(2, |t| *t == token::COLON))\n+        ((self.look_ahead(1, |t| token::is_plain_ident(t)) &&\n+          self.look_ahead(2, |t| *t == token::COLON))\n+         || self.look_ahead(1, |t| *t == token::DOTDOT))\n     }\n \n     fn parse_match_expr(&mut self) -> @Expr {"}, {"sha": "019f86b342dc95f14741626da300d2cecf31c6ff", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3dc5f5bcd5f5c8cd4267fb7533587e0fb663a60/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3dc5f5bcd5f5c8cd4267fb7533587e0fb663a60/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e3dc5f5bcd5f5c8cd4267fb7533587e0fb663a60", "patch": "@@ -1174,8 +1174,10 @@ pub fn print_expr(s: &mut State, expr: &ast::Expr) {\n         match wth {\n             Some(expr) => {\n                 ibox(s, indent_unit);\n-                word(&mut s.s, \",\");\n-                space(&mut s.s);\n+                if !fields.is_empty() {\n+                    word(&mut s.s, \",\");\n+                    space(&mut s.s);\n+                }\n                 word(&mut s.s, \"..\");\n                 print_expr(s, expr);\n                 end(s);"}, {"sha": "f63a729a5b86fd83a12e2c57a2e55bdcc7a73e43", "filename": "src/test/run-pass/struct-lit-functional-update-no-fields.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e3dc5f5bcd5f5c8cd4267fb7533587e0fb663a60/src%2Ftest%2Frun-pass%2Fstruct-lit-functional-update-no-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3dc5f5bcd5f5c8cd4267fb7533587e0fb663a60/src%2Ftest%2Frun-pass%2Fstruct-lit-functional-update-no-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-lit-functional-update-no-fields.rs?ref=e3dc5f5bcd5f5c8cd4267fb7533587e0fb663a60", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deriving(Eq,Clone)]\n+struct Foo<T> {\n+    bar: T,\n+    baz: T\n+}\n+\n+pub fn main() {\n+    let foo = Foo {\n+        bar: 0,\n+        baz: 1\n+    };\n+\n+    let foo_ = foo.clone();\n+    let foo = Foo { ..foo };\n+    assert_eq!(foo, foo_);\n+\n+    let foo = Foo {\n+        bar: ~\"one\",\n+        baz: ~\"two\"\n+    };\n+\n+    let foo_ = foo.clone();\n+    let foo = Foo { ..foo };\n+    assert_eq!(foo, foo_);\n+}"}]}