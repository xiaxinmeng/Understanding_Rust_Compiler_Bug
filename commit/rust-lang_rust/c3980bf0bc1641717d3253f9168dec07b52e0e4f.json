{"sha": "c3980bf0bc1641717d3253f9168dec07b52e0e4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzOTgwYmYwYmMxNjQxNzE3ZDMyNTNmOTE2OGRlYzA3YjUyZTBlNGY=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-09T19:11:37Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-29T07:19:05Z"}, "message": "Add initial version of const_fn lint", "tree": {"sha": "b05eb573bd96335faec473500cf7bab1d758295b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b05eb573bd96335faec473500cf7bab1d758295b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3980bf0bc1641717d3253f9168dec07b52e0e4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlxP/mkACgkQtvoGpuDi\nZluT/A//UW+CLieuO7CfaoWxoNa1jvHu8eCvhTcKaK+ghrVuEVacChYNZ7Vw/vfV\na64q8UmagRekrMVl/Z6eKlF5Qe4N9smtdBojkGrqASNdOtWo0oo4p6kwW+vuiXYF\ntdrNhG6+2JKb8NosShGreNDdvTjR11mxjj3A725uYYypXjNCsWhgyMVI5hYiQf9g\nJ2DNj3Fwo7SkQTTSl8VjPI2iXUyvvT/lw/w8jeWv12gUpwLFHcN3USoFnIooHebr\nAWIfuqHKtl3c3s1cUZr94B0/jXYo05Y/cVxsrFhYCMAvD7d/SH/KcUZK5OuxobQv\nvqX3LEz5CiBqVOjDXYjDDxRagMSaGt0+XQgfUpcfgxPiDMXZbts+LMSkSJ0h6pAP\n2ufFg9X2Rz+jXUwq5X8c9KC7V4C2S9+eaV9aw8Q7rSCc/pNn4wi6CU4VOieCGLxG\nwQIrhk/0pmQzqtuR56WI2QhgUKkrJZz/54FGek1oNB1VEdFtTfnt8TZaBbrSlfC2\n+Yibo094xCCkLUPnGNlTZcbKEiMcwZWem2tJYX5iYB6yA7xr3O1glMQST4LOg2Fa\nSb/xQTnSIx++XRjz1d4NhfDTD8drBYntNb7zmuNRr3I3GTB1+vC6VgUNT4fq2tfG\nebxXzsS0mHcq3fMP09W43Ku0k8SYzTb1LHp14ZVIcYjgAPRYdeM=\n=713M\n-----END PGP SIGNATURE-----", "payload": "tree b05eb573bd96335faec473500cf7bab1d758295b\nparent 410d5ba6c3bea86632247a559685c2e13dedea91\nauthor Philipp Hansch <dev@phansch.net> 1547061097 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1548746345 +0100\n\nAdd initial version of const_fn lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3980bf0bc1641717d3253f9168dec07b52e0e4f", "html_url": "https://github.com/rust-lang/rust/commit/c3980bf0bc1641717d3253f9168dec07b52e0e4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3980bf0bc1641717d3253f9168dec07b52e0e4f/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "410d5ba6c3bea86632247a559685c2e13dedea91", "url": "https://api.github.com/repos/rust-lang/rust/commits/410d5ba6c3bea86632247a559685c2e13dedea91", "html_url": "https://github.com/rust-lang/rust/commit/410d5ba6c3bea86632247a559685c2e13dedea91"}], "stats": {"total": 281, "additions": 280, "deletions": 1}, "files": [{"sha": "c0679d280c266749a8e1a18bcdecbc1b2884a3ec", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3980bf0bc1641717d3253f9168dec07b52e0e4f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c3980bf0bc1641717d3253f9168dec07b52e0e4f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c3980bf0bc1641717d3253f9168dec07b52e0e4f", "patch": "@@ -878,6 +878,7 @@ All notable changes to this project will be documented in this file.\n [`min_max`]: https://rust-lang.github.io/rust-clippy/master/index.html#min_max\n [`misaligned_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#misaligned_transmute\n [`misrefactored_assign_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#misrefactored_assign_op\n+[`missing_const_for_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n [`missing_inline_in_public_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\n [`mistyped_literal_suffixes`]: https://rust-lang.github.io/rust-clippy/master/index.html#mistyped_literal_suffixes"}, {"sha": "dad18ef756901880890681d9b2173cfc495de036", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3980bf0bc1641717d3253f9168dec07b52e0e4f/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c3980bf0bc1641717d3253f9168dec07b52e0e4f/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c3980bf0bc1641717d3253f9168dec07b52e0e4f", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 292 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 293 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "3483aae0ca3bc8caa4bfa06e71a72233d617cc18", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3980bf0bc1641717d3253f9168dec07b52e0e4f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3980bf0bc1641717d3253f9168dec07b52e0e4f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c3980bf0bc1641717d3253f9168dec07b52e0e4f", "patch": "@@ -23,6 +23,8 @@ extern crate rustc_data_structures;\n #[allow(unused_extern_crates)]\n extern crate rustc_errors;\n #[allow(unused_extern_crates)]\n+extern crate rustc_mir;\n+#[allow(unused_extern_crates)]\n extern crate rustc_plugin;\n #[allow(unused_extern_crates)]\n extern crate rustc_target;\n@@ -144,6 +146,7 @@ pub mod methods;\n pub mod minmax;\n pub mod misc;\n pub mod misc_early;\n+pub mod missing_const_for_fn;\n pub mod missing_doc;\n pub mod missing_inline;\n pub mod multiple_crate_versions;\n@@ -486,6 +489,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box slow_vector_initialization::Pass);\n     reg.register_late_lint_pass(box types::RefToMut);\n     reg.register_late_lint_pass(box assertions_on_constants::AssertionsOnConstants);\n+    reg.register_late_lint_pass(box missing_const_for_fn::MissingConstForFn);\n \n     reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -1027,6 +1031,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_lint_group(\"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n         attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n         fallible_impl_from::FALLIBLE_IMPL_FROM,\n+        missing_const_for_fn::MISSING_CONST_FOR_FN,\n         mutex_atomic::MUTEX_INTEGER,\n         needless_borrow::NEEDLESS_BORROW,\n         redundant_clone::REDUNDANT_CLONE,"}, {"sha": "4751a538ebd6cdfa2658cdb1e20977f04ef26ac1", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/c3980bf0bc1641717d3253f9168dec07b52e0e4f/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3980bf0bc1641717d3253f9168dec07b52e0e4f/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=c3980bf0bc1641717d3253f9168dec07b52e0e4f", "patch": "@@ -0,0 +1,115 @@\n+use rustc::hir;\n+use rustc::hir::{Body, FnDecl, Constness};\n+use rustc::hir::intravisit::FnKind;\n+// use rustc::mir::*;\n+use syntax::ast::{NodeId, Attribute};\n+use syntax_pos::Span;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n+use crate::utils::{span_lint, is_entrypoint_fn};\n+\n+/// **What it does:**\n+///\n+/// Suggests the use of `const` in functions and methods where possible\n+///\n+/// **Why is this bad?**\n+/// Not using `const` is a missed optimization. Instead of having the function execute at runtime,\n+/// when using `const`, it's evaluated at compiletime.\n+///\n+/// **Known problems:**\n+///\n+/// Const functions are currently still being worked on, with some features only being available\n+/// on nightly. This lint does not consider all edge cases currently and the suggestions may be\n+/// incorrect if you are using this lint on stable.\n+///\n+/// Also, the lint only runs one pass over the code. Consider these two non-const functions:\n+///\n+/// ```rust\n+/// fn a() -> i32 { 0 }\n+/// fn b() -> i32 { a() }\n+/// ```\n+///\n+/// When running Clippy, the lint will only suggest to make `a` const, because `b` at this time\n+/// can't be const as it calls a non-const function. Making `a` const and running Clippy again,\n+/// will suggest to make `b` const, too.\n+///\n+/// **Example:**\n+///\n+/// ```rust\n+/// fn new() -> Self {\n+///     Self {\n+///         random_number: 42\n+///     }\n+/// }\n+/// ```\n+///\n+/// Could be a const fn:\n+///\n+/// ```rust\n+/// const fn new() -> Self {\n+///     Self {\n+///         random_number: 42\n+///     }\n+/// }\n+/// ```\n+declare_clippy_lint! {\n+    pub MISSING_CONST_FOR_FN,\n+    nursery,\n+    \"Lint functions definitions that could be made `const fn`\"\n+}\n+\n+#[derive(Clone)]\n+pub struct MissingConstForFn;\n+\n+impl LintPass for MissingConstForFn {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(MISSING_CONST_FOR_FN)\n+    }\n+\n+    fn name(&self) -> &'static str {\n+        \"MissingConstForFn\"\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'_, '_>,\n+        kind: FnKind<'_>,\n+        _: &FnDecl,\n+        _: &Body,\n+        span: Span,\n+        node_id: NodeId\n+    ) {\n+        let def_id = cx.tcx.hir().local_def_id(node_id);\n+        let mir = cx.tcx.optimized_mir(def_id);\n+        if let Ok(_) = is_min_const_fn(cx.tcx, def_id, &mir) {\n+            match kind {\n+                FnKind::ItemFn(name, _generics, header, _vis, attrs) => {\n+                    if !can_be_const_fn(&name.as_str(), header, attrs) {\n+                        return;\n+                    }\n+                },\n+                FnKind::Method(ident, sig, _vis, attrs) => {\n+                    let header = sig.header;\n+                    let name = ident.name.as_str();\n+                    if !can_be_const_fn(&name, header, attrs) {\n+                        return;\n+                    }\n+                },\n+                _ => return\n+            }\n+            span_lint(cx, MISSING_CONST_FOR_FN, span, \"this could be a const_fn\");\n+        }\n+    }\n+}\n+\n+fn can_be_const_fn(name: &str, header: hir::FnHeader, attrs: &[Attribute]) -> bool {\n+    // Main and custom entrypoints can't be `const`\n+    if is_entrypoint_fn(name, attrs) { return false }\n+\n+    // We don't have to lint on something that's already `const`\n+    if header.constness == Constness::Const { return false }\n+    true\n+}"}, {"sha": "f06a257b5ca48dac45ae4a58461a36875a6e5d15", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3980bf0bc1641717d3253f9168dec07b52e0e4f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3980bf0bc1641717d3253f9168dec07b52e0e4f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=c3980bf0bc1641717d3253f9168dec07b52e0e4f", "patch": "@@ -350,6 +350,19 @@ pub fn method_chain_args<'a>(expr: &'a Expr, methods: &[&str]) -> Option<Vec<&'a\n     Some(matched)\n }\n \n+/// Returns true if the function is an entrypoint to a program\n+///\n+/// This is either the usual `main` function or a custom function with the `#[start]` attribute.\n+pub fn is_entrypoint_fn(fn_name: &str, attrs: &[ast::Attribute]) -> bool {\n+\n+    let is_custom_entrypoint = attrs.iter().any(|attr| {\n+        attr.path.segments.len() == 1\n+            && attr.path.segments[0].ident.to_string() == \"start\"\n+    });\n+\n+    is_custom_entrypoint || fn_name == \"main\"\n+}\n+\n /// Get the name of the item the expression is in, if available.\n pub fn get_item_name(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<Name> {\n     let parent_id = cx.tcx.hir().get_parent(expr.id);"}, {"sha": "5f00035b3ad361ecf22e1dac1f96c9cf93bef40c", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c3980bf0bc1641717d3253f9168dec07b52e0e4f/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3980bf0bc1641717d3253f9168dec07b52e0e4f/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=c3980bf0bc1641717d3253f9168dec07b52e0e4f", "patch": "@@ -0,0 +1,50 @@\n+//! False-positive tests to ensure we don't suggest `const` for things where it would cause a\n+//! compilation error.\n+//! The .stderr output of this test should be empty. Otherwise it's a bug somewhere.\n+\n+#![warn(clippy::missing_const_for_fn)]\n+#![feature(start)]\n+\n+struct Game;\n+\n+// This should not be linted because it's already const\n+const fn already_const() -> i32 { 32 }\n+\n+impl Game {\n+    // This should not be linted because it's already const\n+    pub const fn already_const() -> i32 { 32 }\n+}\n+\n+// Allowing on this function, because it would lint, which we don't want in this case.\n+#[allow(clippy::missing_const_for_fn)]\n+fn random() -> u32 { 42 }\n+\n+// We should not suggest to make this function `const` because `random()` is non-const\n+fn random_caller() -> u32 {\n+    random()\n+}\n+\n+static Y: u32 = 0;\n+\n+// We should not suggest to make this function `const` because const functions are not allowed to\n+// refer to a static variable\n+fn get_y() -> u32 {\n+    Y\n+        //~^ ERROR E0013\n+}\n+\n+// Also main should not be suggested to be made const\n+fn main() {\n+    // We should also be sure to not lint on closures\n+    let add_one_v2 = |x: u32| -> u32 { x + 1 };\n+}\n+\n+trait Foo {\n+    // This should not be suggested to be made const\n+    // (rustc restriction)\n+    fn f() -> u32;\n+}\n+\n+// Don't lint custom entrypoints either\n+#[start]\n+fn init(num: isize, something: *const *const u8) -> isize { 1 }"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/missing_const_for_fn/cant_be_const.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c3980bf0bc1641717d3253f9168dec07b52e0e4f/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3980bf0bc1641717d3253f9168dec07b52e0e4f/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.stderr?ref=c3980bf0bc1641717d3253f9168dec07b52e0e4f"}, {"sha": "3ba39711e8d6ae5baa7c2d8e62a3452264349d72", "filename": "tests/ui/missing_const_for_fn/could_be_const.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c3980bf0bc1641717d3253f9168dec07b52e0e4f/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3980bf0bc1641717d3253f9168dec07b52e0e4f/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs?ref=c3980bf0bc1641717d3253f9168dec07b52e0e4f", "patch": "@@ -0,0 +1,53 @@\n+#![warn(clippy::missing_const_for_fn)]\n+#![allow(clippy::let_and_return)]\n+\n+use std::mem::transmute;\n+\n+struct Game {\n+    guess: i32,\n+}\n+\n+impl Game {\n+    // Could be const\n+    pub fn new() -> Self {\n+        Self {\n+            guess: 42,\n+        }\n+    }\n+}\n+\n+// Could be const\n+fn one() -> i32 { 1 }\n+\n+// Could also be const\n+fn two() -> i32 {\n+    let abc = 2;\n+    abc\n+}\n+\n+// TODO: Why can this be const? because it's a zero sized type?\n+// There is the `const_string_new` feature, but it seems that this already works in const fns?\n+fn string() -> String {\n+    String::new()\n+}\n+\n+// Could be const\n+unsafe fn four() -> i32 { 4 }\n+\n+// Could also be const\n+fn generic<T>(t: T) -> T {\n+    t\n+}\n+\n+// FIXME: This could be const but is currently not linted\n+fn sub(x: u32) -> usize {\n+    unsafe { transmute(&x) }\n+}\n+\n+// FIXME: This could be const but is currently not linted\n+fn generic_arr<T: Copy>(t: [T; 1]) -> T {\n+    t[0]\n+}\n+\n+// Should not be const\n+fn main() {}"}, {"sha": "09350572e9934b2bbda39bb7242d5b5f058cbf1e", "filename": "tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c3980bf0bc1641717d3253f9168dec07b52e0e4f/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3980bf0bc1641717d3253f9168dec07b52e0e4f/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=c3980bf0bc1641717d3253f9168dec07b52e0e4f", "patch": "@@ -0,0 +1,42 @@\n+error: this could be a const_fn\n+  --> $DIR/could_be_const.rs:12:5\n+   |\n+LL | /     pub fn new() -> Self {\n+LL | |         Self {\n+LL | |             guess: 42,\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::missing-const-for-fn` implied by `-D warnings`\n+\n+error: this could be a const_fn\n+  --> $DIR/could_be_const.rs:20:1\n+   |\n+LL | fn one() -> i32 { 1 }\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this could be a const_fn\n+  --> $DIR/could_be_const.rs:30:1\n+   |\n+LL | / fn string() -> String {\n+LL | |     String::new()\n+LL | | }\n+   | |_^\n+\n+error: this could be a const_fn\n+  --> $DIR/could_be_const.rs:35:1\n+   |\n+LL | unsafe fn four() -> i32 { 4 }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this could be a const_fn\n+  --> $DIR/could_be_const.rs:38:1\n+   |\n+LL | / fn generic<T>(t: T) -> T {\n+LL | |     t\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 5 previous errors\n+"}]}