{"sha": "31f5b48817a87a5875d189269e08dac56160cce2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZjViNDg4MTdhODdhNTg3NWQxODkyNjllMDhkYWM1NjE2MGNjZTI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-07-02T10:22:25Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-07-02T10:43:52Z"}, "message": "Record and suggest trait items via ImportMap", "tree": {"sha": "1bb4e0675d598fe662ebf4bc2b39c9514c0921e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bb4e0675d598fe662ebf4bc2b39c9514c0921e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31f5b48817a87a5875d189269e08dac56160cce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31f5b48817a87a5875d189269e08dac56160cce2", "html_url": "https://github.com/rust-lang/rust/commit/31f5b48817a87a5875d189269e08dac56160cce2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31f5b48817a87a5875d189269e08dac56160cce2/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec1d1a1b709a6eafff07077cdf75291d01cda3b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec1d1a1b709a6eafff07077cdf75291d01cda3b6", "html_url": "https://github.com/rust-lang/rust/commit/ec1d1a1b709a6eafff07077cdf75291d01cda3b6"}], "stats": {"total": 187, "additions": 179, "deletions": 8}, "files": [{"sha": "4cd77adbfe2a31d4e17b3a4ae7384314071cdd87", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/31f5b48817a87a5875d189269e08dac56160cce2/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5b48817a87a5875d189269e08dac56160cce2/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=31f5b48817a87a5875d189269e08dac56160cce2", "patch": "@@ -810,6 +810,146 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn trait_method_cross_crate() {\n+        check_assist(\n+            auto_import,\n+            r\"\n+            //- /main.rs crate:main deps:dep\n+            fn main() {\n+                let test_struct = dep::test_mod::TestStruct {};\n+                test_struct.test_meth<|>od()\n+            }\n+            //- /dep.rs crate:dep\n+            pub mod test_mod {\n+                pub trait TestTrait {\n+                    fn test_method(&self);\n+                }\n+                pub struct TestStruct {}\n+                impl TestTrait for TestStruct {\n+                    fn test_method(&self) {}\n+                }\n+            }\n+            \",\n+            r\"\n+            use dep::test_mod::TestTrait;\n+\n+            fn main() {\n+                let test_struct = dep::test_mod::TestStruct {};\n+                test_struct.test_method()\n+            }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn assoc_fn_cross_crate() {\n+        check_assist(\n+            auto_import,\n+            r\"\n+            //- /main.rs crate:main deps:dep\n+            fn main() {\n+                dep::test_mod::TestStruct::test_func<|>tion\n+            }\n+            //- /dep.rs crate:dep\n+            pub mod test_mod {\n+                pub trait TestTrait {\n+                    fn test_function();\n+                }\n+                pub struct TestStruct {}\n+                impl TestTrait for TestStruct {\n+                    fn test_function() {}\n+                }\n+            }\n+            \",\n+            r\"\n+            use dep::test_mod::TestTrait;\n+\n+            fn main() {\n+                dep::test_mod::TestStruct::test_function\n+            }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn assoc_const_cross_crate() {\n+        check_assist(\n+            auto_import,\n+            r\"\n+            //- /main.rs crate:main deps:dep\n+            fn main() {\n+                dep::test_mod::TestStruct::CONST<|>\n+            }\n+            //- /dep.rs crate:dep\n+            pub mod test_mod {\n+                pub trait TestTrait {\n+                    const CONST: bool;\n+                }\n+                pub struct TestStruct {}\n+                impl TestTrait for TestStruct {\n+                    const CONST: bool = true;\n+                }\n+            }\n+            \",\n+            r\"\n+            use dep::test_mod::TestTrait;\n+\n+            fn main() {\n+                dep::test_mod::TestStruct::CONST\n+            }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn assoc_fn_as_method_cross_crate() {\n+        check_assist_not_applicable(\n+            auto_import,\n+            r\"\n+            //- /main.rs crate:main deps:dep\n+            fn main() {\n+                let test_struct = dep::test_mod::TestStruct {};\n+                test_struct.test_func<|>tion()\n+            }\n+            //- /dep.rs crate:dep\n+            pub mod test_mod {\n+                pub trait TestTrait {\n+                    fn test_function();\n+                }\n+                pub struct TestStruct {}\n+                impl TestTrait for TestStruct {\n+                    fn test_function() {}\n+                }\n+            }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn private_trait_cross_crate() {\n+        check_assist_not_applicable(\n+            auto_import,\n+            r\"\n+            //- /main.rs crate:main deps:dep\n+            fn main() {\n+                let test_struct = dep::test_mod::TestStruct {};\n+                test_struct.test_meth<|>od()\n+            }\n+            //- /dep.rs crate:dep\n+            pub mod test_mod {\n+                trait TestTrait {\n+                    fn test_method(&self);\n+                }\n+                pub struct TestStruct {}\n+                impl TestTrait for TestStruct {\n+                    fn test_method(&self) {}\n+                }\n+            }\n+            \",\n+        );\n+    }\n+\n     #[test]\n     fn not_applicable_for_imported_trait_for_method() {\n         check_assist_not_applicable("}, {"sha": "299fe82a82b3bb504d0a1a733193712ad6e8684f", "filename": "crates/ra_hir_def/src/import_map.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/31f5b48817a87a5875d189269e08dac56160cce2/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5b48817a87a5875d189269e08dac56160cce2/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs?ref=31f5b48817a87a5875d189269e08dac56160cce2", "patch": "@@ -5,14 +5,15 @@ use std::{cmp::Ordering, fmt, hash::BuildHasherDefault, sync::Arc};\n use fst::{self, Streamer};\n use indexmap::{map::Entry, IndexMap};\n use ra_db::CrateId;\n-use rustc_hash::FxHasher;\n+use rustc_hash::{FxHashMap, FxHasher};\n+use smallvec::SmallVec;\n \n use crate::{\n     db::DefDatabase,\n     item_scope::ItemInNs,\n     path::{ModPath, PathKind},\n     visibility::Visibility,\n-    ModuleDefId, ModuleId,\n+    AssocItemId, ModuleDefId, ModuleId, TraitId,\n };\n \n type FxIndexMap<K, V> = IndexMap<K, V, BuildHasherDefault<FxHasher>>;\n@@ -34,6 +35,7 @@ pub struct ImportInfo {\n ///\n /// Note that all paths are relative to the containing crate's root, so the crate name still needs\n /// to be prepended to the `ModPath` before the path is valid.\n+#[derive(Default)]\n pub struct ImportMap {\n     map: FxIndexMap<ItemInNs, ImportInfo>,\n \n@@ -45,13 +47,17 @@ pub struct ImportMap {\n     /// the index of the first one.\n     importables: Vec<ItemInNs>,\n     fst: fst::Map<Vec<u8>>,\n+\n+    /// Maps names of associated items to the item's ID. Only includes items whose defining trait is\n+    /// exported.\n+    assoc_map: FxHashMap<String, SmallVec<[AssocItemId; 1]>>,\n }\n \n impl ImportMap {\n     pub fn import_map_query(db: &dyn DefDatabase, krate: CrateId) -> Arc<Self> {\n         let _p = ra_prof::profile(\"import_map_query\");\n         let def_map = db.crate_def_map(krate);\n-        let mut import_map = FxIndexMap::with_capacity_and_hasher(64, Default::default());\n+        let mut import_map = Self::default();\n \n         // We look only into modules that are public(ly reexported), starting with the crate root.\n         let empty = ModPath { kind: PathKind::Plain, segments: vec![] };\n@@ -85,7 +91,7 @@ impl ImportMap {\n \n                 for item in per_ns.iter_items() {\n                     let path = mk_path();\n-                    match import_map.entry(item) {\n+                    match import_map.map.entry(item) {\n                         Entry::Vacant(entry) => {\n                             entry.insert(ImportInfo { path, container: module });\n                         }\n@@ -105,11 +111,16 @@ impl ImportMap {\n                     if let Some(ModuleDefId::ModuleId(mod_id)) = item.as_module_def_id() {\n                         worklist.push((mod_id, mk_path()));\n                     }\n+\n+                    // If we've added a path to a trait, add the trait's methods to the method map.\n+                    if let Some(ModuleDefId::TraitId(tr)) = item.as_module_def_id() {\n+                        import_map.collect_trait_methods(db, tr);\n+                    }\n                 }\n             }\n         }\n \n-        let mut importables = import_map.iter().collect::<Vec<_>>();\n+        let mut importables = import_map.map.iter().collect::<Vec<_>>();\n \n         importables.sort_by(cmp);\n \n@@ -133,10 +144,10 @@ impl ImportMap {\n             builder.insert(key, start as u64).unwrap();\n         }\n \n-        let fst = fst::Map::new(builder.into_inner().unwrap()).unwrap();\n-        let importables = importables.iter().map(|(item, _)| **item).collect();\n+        import_map.fst = fst::Map::new(builder.into_inner().unwrap()).unwrap();\n+        import_map.importables = importables.iter().map(|(item, _)| **item).collect();\n \n-        Arc::new(Self { map: import_map, fst, importables })\n+        Arc::new(import_map)\n     }\n \n     /// Returns the `ModPath` needed to import/mention `item`, relative to this crate's root.\n@@ -147,6 +158,13 @@ impl ImportMap {\n     pub fn import_info_for(&self, item: ItemInNs) -> Option<&ImportInfo> {\n         self.map.get(&item)\n     }\n+\n+    fn collect_trait_methods(&mut self, db: &dyn DefDatabase, tr: TraitId) {\n+        let data = db.trait_data(tr);\n+        for (name, item) in data.items.iter() {\n+            self.assoc_map.entry(name.to_string()).or_default().push(*item);\n+        }\n+    }\n }\n \n impl PartialEq for ImportMap {\n@@ -290,6 +308,19 @@ pub fn search_dependencies<'a>(\n         }\n     }\n \n+    // Add all exported associated items whose names match the query (exactly).\n+    for map in &import_maps {\n+        if let Some(v) = map.assoc_map.get(&query.query) {\n+            res.extend(v.iter().map(|&assoc| {\n+                ItemInNs::Types(match assoc {\n+                    AssocItemId::FunctionId(it) => it.into(),\n+                    AssocItemId::ConstId(it) => it.into(),\n+                    AssocItemId::TypeAliasId(it) => it.into(),\n+                })\n+            }));\n+        }\n+    }\n+\n     res\n }\n "}]}