{"sha": "e60e6f0693adfd03340dff31023c7517dc3af1b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MGU2ZjA2OTNhZGZkMDMzNDBkZmYzMTAyM2M3NTE3ZGMzYWYxYjU=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-03-06T23:10:20Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-03-07T01:15:19Z"}, "message": "Check gated attributes before and after macro expansion\n\nThis is important because attributes can affect expansion.", "tree": {"sha": "96fbf8a7552a688c01554a7679a0e475cb0e6395", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96fbf8a7552a688c01554a7679a0e475cb0e6395"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e60e6f0693adfd03340dff31023c7517dc3af1b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e60e6f0693adfd03340dff31023c7517dc3af1b5", "html_url": "https://github.com/rust-lang/rust/commit/e60e6f0693adfd03340dff31023c7517dc3af1b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e60e6f0693adfd03340dff31023c7517dc3af1b5/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63ee3fe566762781d1e60f190014b416f99fed36", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ee3fe566762781d1e60f190014b416f99fed36", "html_url": "https://github.com/rust-lang/rust/commit/63ee3fe566762781d1e60f190014b416f99fed36"}], "stats": {"total": 122, "additions": 79, "deletions": 43}, "files": [{"sha": "eff86757fd0b24d482d1a834ce343bffa7195fbb", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 38, "deletions": 37, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e60e6f0693adfd03340dff31023c7517dc3af1b5", "patch": "@@ -196,6 +196,7 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"no_mangle\", Normal),\n     (\"no_link\", Normal),\n     (\"derive\", Normal),\n+    (\"deriving\", Normal), // deprecation err in expansion\n     (\"should_fail\", Normal),\n     (\"should_panic\", Normal),\n     (\"ignore\", Normal),\n@@ -235,6 +236,9 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n                                    \"the `#[rustc_move_fragments]` attribute \\\n                                     is an experimental feature\")),\n \n+    (\"allow_internal_unstable\", Gated(\"allow_internal_unstable\",\n+                                      EXPLAIN_ALLOW_INTERNAL_UNSTABLE)),\n+\n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n     (\"doc\", Whitelisted),\n \n@@ -369,6 +373,33 @@ impl<'a> Context<'a> {\n     fn has_feature(&self, feature: &str) -> bool {\n         self.features.iter().any(|&n| n == feature)\n     }\n+\n+    fn check_attribute(&self, attr: &ast::Attribute) {\n+        debug!(\"check_attribute(attr = {:?})\", attr);\n+        let name = &*attr.name();\n+        for &(n, ty) in KNOWN_ATTRIBUTES {\n+            if n == name {\n+                if let Gated(gate, desc) = ty {\n+                    self.gate_feature(gate, attr.span, desc);\n+                }\n+                debug!(\"check_attribute: {:?} is known, {:?}\", name, ty);\n+                return;\n+            }\n+        }\n+        if name.starts_with(\"rustc_\") {\n+            self.gate_feature(\"rustc_attrs\", attr.span,\n+                              \"unless otherwise specified, attributes \\\n+                               with the prefix `rustc_` \\\n+                               are reserved for internal compiler diagnostics\");\n+        } else {\n+            self.gate_feature(\"custom_attribute\", attr.span,\n+                       format!(\"The attribute `{}` is currently \\\n+                                unknown to the the compiler and \\\n+                                may have meaning \\\n+                                added to it in the future\",\n+                                name).as_slice());\n+        }\n+    }\n }\n \n pub fn emit_feature_err(diag: &SpanHandler, feature: &str, span: Span, explain: &str) {\n@@ -436,10 +467,7 @@ impl<'a, 'v> Visitor<'v> for MacroVisitor<'a> {\n     }\n \n     fn visit_attribute(&mut self, attr: &'v ast::Attribute) {\n-        if attr.name() == \"allow_internal_unstable\" {\n-            self.context.gate_feature(\"allow_internal_unstable\", attr.span,\n-                                      EXPLAIN_ALLOW_INTERNAL_UNSTABLE)\n-        }\n+        self.context.check_attribute(attr);\n     }\n }\n \n@@ -456,6 +484,12 @@ impl<'a> PostExpansionVisitor<'a> {\n }\n \n impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n+    fn visit_attribute(&mut self, attr: &ast::Attribute) {\n+        if !self.context.cm.span_allows_unstable(attr.span) {\n+            self.context.check_attribute(attr);\n+        }\n+    }\n+\n     fn visit_name(&mut self, sp: Span, name: ast::Name) {\n         if !token::get_name(name).is_ascii() {\n             self.gate_feature(\"non_ascii_idents\", sp,\n@@ -556,12 +590,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_foreign_item(&mut self, i: &ast::ForeignItem) {\n-        if attr::contains_name(&i.attrs, \"linkage\") {\n-            self.gate_feature(\"linkage\", i.span,\n-                              \"the `linkage` attribute is experimental \\\n-                               and not portable across platforms\")\n-        }\n-\n         let links_to_llvm = match attr::first_attr_value_str_by_name(&i.attrs,\n                                                                      \"link_name\") {\n             Some(val) => val.starts_with(\"llvm.\"),\n@@ -636,33 +664,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n         visit::walk_expr(self, e);\n     }\n \n-    fn visit_attribute(&mut self, attr: &ast::Attribute) {\n-        debug!(\"visit_attribute(attr = {:?})\", attr);\n-        let name = &*attr.name();\n-        for &(n, ty) in KNOWN_ATTRIBUTES {\n-            if n == name {\n-                if let Gated(gate, desc) = ty {\n-                    self.gate_feature(gate, attr.span, desc);\n-                }\n-                debug!(\"visit_attribute: {:?} is known, {:?}\", name, ty);\n-                return;\n-            }\n-        }\n-        if name.starts_with(\"rustc_\") {\n-            self.gate_feature(\"rustc_attrs\", attr.span,\n-                              \"unless otherwise specified, attributes \\\n-                               with the prefix `rustc_` \\\n-                               are reserved for internal compiler diagnostics\");\n-        } else {\n-            self.gate_feature(\"custom_attribute\", attr.span,\n-                       format!(\"The attribute `{}` is currently \\\n-                                unknown to the the compiler and \\\n-                                may have meaning \\\n-                                added to it in the future\",\n-                                name).as_slice());\n-        }\n-    }\n-\n     fn visit_pat(&mut self, pattern: &ast::Pat) {\n         match pattern.node {\n             ast::PatVec(_, Some(_), ref last) if !last.is_empty() => {"}, {"sha": "22fc4a94cd25ab87254b9d754aeadc724ae59f61", "filename": "src/test/compile-fail/deprecated-phase.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Fdeprecated-phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Fdeprecated-phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdeprecated-phase.rs?ref=e60e6f0693adfd03340dff31023c7517dc3af1b5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(custom_attribute)]\n+\n #[phase(blah)]\n //~^ ERROR #[phase] is deprecated\n extern crate foo;"}, {"sha": "a4c09b21c90a6ce519b9b327ccd0120f6d03b9ce", "filename": "src/test/compile-fail/feature-gate-intrinsics.rs", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-intrinsics.rs?ref=e60e6f0693adfd03340dff31023c7517dc3af1b5", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[lang=\"foo\"]   //~ ERROR language items are subject to change\n-trait Foo {}\n-\n extern \"rust-intrinsic\" {   //~ ERROR intrinsics are subject to change\n     fn bar();\n }\n@@ -20,4 +17,3 @@ extern \"rust-intrinsic\" fn baz() {  //~ ERROR intrinsics are subject to change\n \n fn main() {\n }\n-", "previous_filename": "src/test/compile-fail/feature-gate-intrinsics-and-lang-items.rs"}, {"sha": "0435ff4c332d522f15dfd07ef643f4102371b1f2", "filename": "src/test/compile-fail/feature-gate-lang-items.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-lang-items.rs?ref=e60e6f0693adfd03340dff31023c7517dc3af1b5", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[lang=\"foo\"]   //~ ERROR language items are subject to change\n+trait Foo {}\n+\n+fn main() {\n+}"}, {"sha": "555cc2b9a7aad95c8c43b10932550e08154b65c8", "filename": "src/test/compile-fail/linkage1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Flinkage1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Flinkage1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flinkage1.rs?ref=e60e6f0693adfd03340dff31023c7517dc3af1b5", "patch": "@@ -11,5 +11,4 @@\n extern {\n     #[linkage = \"extern_weak\"] static foo: isize;\n     //~^ ERROR: the `linkage` attribute is experimental and not portable\n-    //~^^ ERROR: the `linkage` attribute is experimental and not portable\n }"}, {"sha": "214a5e5e3eb115c4878422d3d978bd5b803059ea", "filename": "src/test/compile-fail/malformed-plugin-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-1.rs?ref=e60e6f0693adfd03340dff31023c7517dc3af1b5", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(plugin)]\n #![plugin] //~ ERROR malformed plugin attribute\n \n fn main() {}"}, {"sha": "1b112608beeb2003fc00091222574b4a2c55f305", "filename": "src/test/compile-fail/malformed-plugin-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-2.rs?ref=e60e6f0693adfd03340dff31023c7517dc3af1b5", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(plugin)]\n #![plugin=\"bleh\"] //~ ERROR malformed plugin attribute\n \n fn main() {}"}, {"sha": "0c948831de217a6ce30c9af993fe7b7dc6c19820", "filename": "src/test/compile-fail/malformed-plugin-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmalformed-plugin-3.rs?ref=e60e6f0693adfd03340dff31023c7517dc3af1b5", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(plugin)]\n #![plugin(foo=\"bleh\")] //~ ERROR malformed plugin attribute\n \n fn main() {}"}, {"sha": "efa352e386d4d679806231a779fe891bd5610990", "filename": "src/test/compile-fail/plugin-extern-crate-attr-deprecated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Fplugin-extern-crate-attr-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Fplugin-extern-crate-attr-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fplugin-extern-crate-attr-deprecated.rs?ref=e60e6f0693adfd03340dff31023c7517dc3af1b5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(plugin)]\n+\n #[plugin]  //~ ERROR #[plugin] on `extern crate` is deprecated\n //~^ HELP use a crate attribute instead, i.e. #![plugin(std)]\n extern crate std;"}, {"sha": "db8f82a70e10363b0cdaa26caef41bd081e059ee", "filename": "src/test/compile-fail/reserved-attr-on-macro.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Freserved-attr-on-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Fcompile-fail%2Freserved-attr-on-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freserved-attr-on-macro.rs?ref=e60e6f0693adfd03340dff31023c7517dc3af1b5", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[rustc_attribute_should_be_reserved] //~ ERROR attributes with the prefix `rustc_` are reserved\n+macro_rules! foo {\n+    () => (());\n+}\n+\n+fn main() {\n+    foo!();\n+}"}, {"sha": "7a2846c31b66331815ce76613619a2a83386a51a", "filename": "src/test/run-pass-fulldeps/macro-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60e6f0693adfd03340dff31023c7517dc3af1b5/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs?ref=e60e6f0693adfd03340dff31023c7517dc3af1b5", "patch": "@@ -11,7 +11,7 @@\n // aux-build:macro_crate_test.rs\n // ignore-stage1\n \n-#![feature(plugin)]\n+#![feature(plugin, custom_attribute)]\n #![plugin(macro_crate_test)]\n \n #[macro_use] #[no_link]"}]}