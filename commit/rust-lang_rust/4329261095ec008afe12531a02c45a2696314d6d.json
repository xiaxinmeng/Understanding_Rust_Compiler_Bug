{"sha": "4329261095ec008afe12531a02c45a2696314d6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMjkyNjEwOTVlYzAwOGFmZTEyNTMxYTAyYzQ1YTI2OTYzMTRkNmQ=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-05-28T15:23:23Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-05-28T15:23:23Z"}, "message": "Remove rustc-ux-guidelines", "tree": {"sha": "b529ddfd739c17fcd1ab03ba2791de2a799dd12e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b529ddfd739c17fcd1ab03ba2791de2a799dd12e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4329261095ec008afe12531a02c45a2696314d6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4329261095ec008afe12531a02c45a2696314d6d", "html_url": "https://github.com/rust-lang/rust/commit/4329261095ec008afe12531a02c45a2696314d6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4329261095ec008afe12531a02c45a2696314d6d/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45127211566c53bac386b66909a830649182ab7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/45127211566c53bac386b66909a830649182ab7a", "html_url": "https://github.com/rust-lang/rust/commit/45127211566c53bac386b66909a830649182ab7a"}], "stats": {"total": 90, "additions": 0, "deletions": 90}, "files": [{"sha": "b626923bcb59cfd8ae48872f0bd7cc758a9b8e8a", "filename": "src/doc/rustc-ux-guidelines.md", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/45127211566c53bac386b66909a830649182ab7a/src%2Fdoc%2Frustc-ux-guidelines.md", "raw_url": "https://github.com/rust-lang/rust/raw/45127211566c53bac386b66909a830649182ab7a/src%2Fdoc%2Frustc-ux-guidelines.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-ux-guidelines.md?ref=45127211566c53bac386b66909a830649182ab7a", "patch": "@@ -1,90 +0,0 @@\n-% Rustc UX guidelines\n-\n-Don't forget the user. Whether human or another program, such as an IDE, a\n-good user experience with the compiler goes a long way toward making developers'\n-lives better. We do not want users to be baffled by compiler output or\n-learn arcane patterns to compile their program.\n-\n-## Error, Warning, Help, Note Messages\n-\n-When the compiler detects a problem, it can emit one of the following: an error, a warning,\n-a note, or a help message.\n-\n-An `error` is emitted when the compiler detects a problem that makes it unable\n- to compile the program, either because the program is invalid or the\n- programmer has decided to make a specific `warning` into an error.\n-\n-A `warning` is emitted when the compiler detects something odd about a\n-program. For instance, dead code and unused `Result` values.\n-\n-A `help` message is emitted following an `error` or `warning` to give additional\n-information to the user about how to solve their problem.\n-\n-A `note` is emitted to identify additional circumstances and parts of the code\n-that caused the warning or error. For example, the borrow checker will note any\n-previous conflicting borrows.\n-\n-* Write in plain simple English. If your message, when shown on a \u2013 possibly\n-small \u2013 screen (which hasn't been cleaned for a while), cannot be understood\n-by a normal programmer, who just came out of bed after a night partying, it's\n-too complex.\n-* `Errors` and `Warnings` should not suggest how to fix the problem. A `Help`\n-message should be emitted instead.\n-* `Error`, `Warning`, `Note`, and `Help` messages start with a lowercase\n-letter and do not end with punctuation.\n-* Error messages should be succinct. Users will see these error messages many\n-times, and more verbose descriptions can be viewed with the `--explain` flag.\n-That said, don't make it so terse that it's hard to understand.\n-* The word \"illegal\" is illegal. Prefer \"invalid\" or a more specific word\n-instead.\n-* Errors should document the span of code where they occur \u2013 the `span_..`\n-methods allow to easily do this. Also `note` other spans that have contributed\n-to the error if the span isn't too large.\n-* When emitting a message with span, try to reduce the span to the smallest\n-amount possible that still signifies the issue\n-* Try not to emit multiple error messages for the same error. This may require\n-detecting duplicates.\n-* When the compiler has too little information for a specific error message,\n-lobby for annotations for library code that allow adding more. For example see\n-`#[on_unimplemented]`. Use these annotations when available!\n-* Keep in mind that Rust's learning curve is rather steep, and that the\n-compiler messages are an important learning tool.\n-\n-## Error Explanations\n-\n-Error explanations are long form descriptions of error messages provided with\n-the compiler. They are accessible via the `--explain` flag. Each explanation\n-comes with an example of how to trigger it and advice on how to fix it.\n-\n-Please read [RFC 1567](https://github.com/rust-lang/rfcs/blob/master/text/1567-long-error-codes-explanation-normalization.md)\n-for details on how to format and write long error codes.\n-\n-* All of them are accessible [online](http://doc.rust-lang.org/error-index.html),\n-  which are auto-generated from rustc source code in different places:\n-  [librustc](https://github.com/rust-lang/rust/blob/master/src/librustc/error_codes.rs),\n-  [librustc_ast](https://github.com/rust-lang/rust/blob/master/src/librustc_ast/error_codes.rs),\n-  [librustc_borrowck](https://github.com/rust-lang/rust/blob/master/src/librustc_borrowck/error_codes.rs),\n-  [librustc_metadata](https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/error_codes.rs),\n-  [librustc_mir](https://github.com/rust-lang/rust/blob/master/src/librustc_mir/error_codes.rs),\n-  [librustc_passes](https://github.com/rust-lang/rust/blob/master/src/librustc_passes/error_codes.rs),\n-  [librustc_privacy](https://github.com/rust-lang/rust/blob/master/src/librustc_privacy/error_codes.rs),\n-  [librustc_resolve](https://github.com/rust-lang/rust/blob/master/src/librustc_resolve/error_codes.rs),\n-  [librustc_codegen_llvm](https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_llvm/error_codes.rs),\n-  [librustc_plugin_impl](https://github.com/rust-lang/rust/blob/master/src/librustc_plugin/error_codes.rs),\n-  [librustc_typeck](https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/error_codes.rs).\n-* Explanations have full markdown support. Use it, especially to highlight\n-code with backticks.\n-* When talking about the compiler, call it `the compiler`, not `Rust` or\n-`rustc`.\n-\n-## Compiler Flags\n-\n-* Flags should be orthogonal to each other. For example, if we'd have a\n-json-emitting variant of multiple actions `foo` and `bar`, an additional\n---json flag is better than adding `--foo-json` and `--bar-json`.\n-* Always give options a long descriptive name, if only for more\n-understandable compiler scripts.\n-* The `--verbose` flag is for adding verbose information to `rustc` output\n-when not compiling a program. For example, using it with the `--version` flag\n-gives information about the hashes of the code.\n-* Experimental flags and options must be guarded behind the `-Z unstable-options` flag."}]}