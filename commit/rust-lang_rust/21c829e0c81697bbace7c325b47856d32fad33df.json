{"sha": "21c829e0c81697bbace7c325b47856d32fad33df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYzgyOWUwYzgxNjk3YmJhY2U3YzMyNWI0Nzg1NmQzMmZhZDMzZGY=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-28T01:54:56Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-28T01:54:56Z"}, "message": "Simplify collect expr_ty", "tree": {"sha": "14324268533e06d638b6d8c1be161e885606cbfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14324268533e06d638b6d8c1be161e885606cbfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21c829e0c81697bbace7c325b47856d32fad33df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21c829e0c81697bbace7c325b47856d32fad33df", "html_url": "https://github.com/rust-lang/rust/commit/21c829e0c81697bbace7c325b47856d32fad33df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21c829e0c81697bbace7c325b47856d32fad33df/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c1ba7c1bc1a1113b68c7100894f33f2fb5f7ebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c1ba7c1bc1a1113b68c7100894f33f2fb5f7ebf", "html_url": "https://github.com/rust-lang/rust/commit/6c1ba7c1bc1a1113b68c7100894f33f2fb5f7ebf"}], "stats": {"total": 22, "additions": 3, "deletions": 19}, "files": [{"sha": "51d7def137e409eea10816378e774726fb29e026", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/21c829e0c81697bbace7c325b47856d32fad33df/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c829e0c81697bbace7c325b47856d32fad33df/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=21c829e0c81697bbace7c325b47856d32fad33df", "patch": "@@ -7,7 +7,7 @@ use clippy_utils::{is_trait_method, path_to_local_id};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_block, walk_expr, NestedVisitorMap, Visitor};\n-use rustc_hir::{Block, Expr, ExprKind, GenericArg, GenericArgs, HirId, PatKind, StmtKind, Ty};\n+use rustc_hir::{Block, Expr, ExprKind, HirId, PatKind, StmtKind};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_span::sym;\n@@ -24,10 +24,8 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n         if let ExprKind::MethodCall(method, _, args, _) = expr.kind;\n         if let ExprKind::MethodCall(chain_method, method0_span, _, _) = args[0].kind;\n         if chain_method.ident.name == sym!(collect) && is_trait_method(cx, &args[0], sym::Iterator);\n-        if let Some(generic_args) = chain_method.args;\n-        if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n-        if let Some(ty) = cx.typeck_results().node_type_opt(ty.hir_id);\n         then {\n+            let ty = cx.typeck_results().expr_ty(&args[0]);\n             let mut applicability = Applicability::MachineApplicable;\n             let is_empty_sugg = \"next().is_none()\".to_string();\n             let method_name = &*method.ident.name.as_str();\n@@ -72,19 +70,6 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n }\n \n fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) {\n-    fn get_hir_id<'tcx>(ty: Option<&Ty<'tcx>>, method_args: Option<&GenericArgs<'tcx>>) -> Option<HirId> {\n-        if let Some(ty) = ty {\n-            return Some(ty.hir_id);\n-        }\n-\n-        if let Some(generic_args) = method_args {\n-            if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0) {\n-                return Some(ty.hir_id);\n-            }\n-        }\n-\n-        None\n-    }\n     if let ExprKind::Block(block, _) = expr.kind {\n         for stmt in block.stmts {\n             if_chain! {\n@@ -93,8 +78,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                 if let Some(init_expr) = local.init;\n                 if let ExprKind::MethodCall(method_name, collect_span, &[ref iter_source], ..) = init_expr.kind;\n                 if method_name.ident.name == sym!(collect) && is_trait_method(cx, init_expr, sym::Iterator);\n-                if let Some(hir_id) = get_hir_id(local.ty, method_name.args);\n-                if let Some(ty) = cx.typeck_results().node_type_opt(hir_id);\n+                let ty = cx.typeck_results().expr_ty(init_expr);\n                 if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n                     is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n                     is_type_diagnostic_item(cx, ty, sym::BinaryHeap) ||"}]}