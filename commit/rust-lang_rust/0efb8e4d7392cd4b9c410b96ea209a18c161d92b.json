{"sha": "0efb8e4d7392cd4b9c410b96ea209a18c161d92b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZmI4ZTRkNzM5MmNkNGI5YzQxMGI5NmVhMjA5YTE4YzE2MWQ5MmI=", "commit": {"author": {"name": "Patrick McCarter", "email": "p.mccarter@gmail.com", "date": "2019-02-06T21:15:17Z"}, "committer": {"name": "Patrick McCarter", "email": "p.mccarter@gmail.com", "date": "2019-02-06T21:15:17Z"}, "message": "Allow const assignment for int saturating_sub() for #58030", "tree": {"sha": "e21a117c1ce8307f06fc39f5ca1167b516aeaf7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e21a117c1ce8307f06fc39f5ca1167b516aeaf7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0efb8e4d7392cd4b9c410b96ea209a18c161d92b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0efb8e4d7392cd4b9c410b96ea209a18c161d92b", "html_url": "https://github.com/rust-lang/rust/commit/0efb8e4d7392cd4b9c410b96ea209a18c161d92b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0efb8e4d7392cd4b9c410b96ea209a18c161d92b/comments", "author": {"login": "pmccarter", "id": 1185163, "node_id": "MDQ6VXNlcjExODUxNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1185163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmccarter", "html_url": "https://github.com/pmccarter", "followers_url": "https://api.github.com/users/pmccarter/followers", "following_url": "https://api.github.com/users/pmccarter/following{/other_user}", "gists_url": "https://api.github.com/users/pmccarter/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmccarter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmccarter/subscriptions", "organizations_url": "https://api.github.com/users/pmccarter/orgs", "repos_url": "https://api.github.com/users/pmccarter/repos", "events_url": "https://api.github.com/users/pmccarter/events{/privacy}", "received_events_url": "https://api.github.com/users/pmccarter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmccarter", "id": 1185163, "node_id": "MDQ6VXNlcjExODUxNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1185163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmccarter", "html_url": "https://github.com/pmccarter", "followers_url": "https://api.github.com/users/pmccarter/followers", "following_url": "https://api.github.com/users/pmccarter/following{/other_user}", "gists_url": "https://api.github.com/users/pmccarter/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmccarter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmccarter/subscriptions", "organizations_url": "https://api.github.com/users/pmccarter/orgs", "repos_url": "https://api.github.com/users/pmccarter/repos", "events_url": "https://api.github.com/users/pmccarter/events{/privacy}", "received_events_url": "https://api.github.com/users/pmccarter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9204497c2999ce4a3df9802d48cb990be7ee1164", "url": "https://api.github.com/repos/rust-lang/rust/commits/9204497c2999ce4a3df9802d48cb990be7ee1164", "html_url": "https://github.com/rust-lang/rust/commit/9204497c2999ce4a3df9802d48cb990be7ee1164"}], "stats": {"total": 102, "additions": 86, "deletions": 16}, "files": [{"sha": "104b124bad4913090691223c92e5e34985e831c5", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0efb8e4d7392cd4b9c410b96ea209a18c161d92b/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0efb8e4d7392cd4b9c410b96ea209a18c161d92b/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=0efb8e4d7392cd4b9c410b96ea209a18c161d92b", "patch": "@@ -932,17 +932,35 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n+            #[cfg(stage0)]\n             pub fn saturating_sub(self, rhs: Self) -> Self {\n-                #[cfg(stage0)]\n                 match self.checked_sub(rhs) {\n                     Some(x) => x,\n                     None if rhs >= 0 => Self::min_value(),\n                     None => Self::max_value(),\n                 }\n-                #[cfg(not(stage0))]\n-                {\n-                    intrinsics::saturating_sub(self, rhs)\n-                }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Saturating integer subtraction. Computes `self - rhs`, saturating at the\n+numeric bounds instead of overflowing.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_sub(127), -27);\n+assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_sub(100), \", stringify!($SelfT),\n+\"::min_value());\",\n+$EndFeature, \"\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn saturating_sub(self, rhs: Self) -> Self {\n+                intrinsics::saturating_sub(self, rhs)\n             }\n         }\n \n@@ -2817,16 +2835,32 @@ assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n+            #[cfg(stage0)]\n             pub fn saturating_sub(self, rhs: Self) -> Self {\n-                #[cfg(stage0)]\n                 match self.checked_sub(rhs) {\n                     Some(x) => x,\n                     None => Self::min_value(),\n                 }\n-                #[cfg(not(stage0))]\n-                {\n-                    intrinsics::saturating_sub(self, rhs)\n-                }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Saturating integer subtraction. Computes `self - rhs`, saturating\n+at the numeric bounds instead of overflowing.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_sub(27), 73);\n+assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn saturating_sub(self, rhs: Self) -> Self {\n+                intrinsics::saturating_sub(self, rhs)\n             }\n         }\n "}, {"sha": "e6a560b2ad7b6e87f2008b54467686f92087b6c2", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0efb8e4d7392cd4b9c410b96ea209a18c161d92b/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0efb8e4d7392cd4b9c410b96ea209a18c161d92b/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=0efb8e4d7392cd4b9c410b96ea209a18c161d92b", "patch": "@@ -418,4 +418,4 @@ pub fn truncate(value: u128, size: Size) -> u128 {\n     let shift = 128 - size;\n     // truncate (shift left to drop out leftover values, shift right to fill with zeroes)\n     (value << shift) >> shift\n-}\n\\ No newline at end of file\n+}"}, {"sha": "dd165d9cb2fe71bab9a57ea82572ffc9cc84620a", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0efb8e4d7392cd4b9c410b96ea209a18c161d92b/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0efb8e4d7392cd4b9c410b96ea209a18c161d92b/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=0efb8e4d7392cd4b9c410b96ea209a18c161d92b", "patch": "@@ -130,14 +130,15 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     let first_term: u128 = l.to_scalar()?.to_bits(l.layout.size)?;\n                     let num_bits = l.layout.size.bits();\n                     let val = if l.layout.abi.is_signed() {\n-                        // For signed addition the saturated value depends on the sign of either term\n+                        // For signed addition the saturated value depends on the\n+                        // sign of either term\n                         if first_term & (1 << (num_bits-1)) == 0 {  // signed term is positive\n-                            Scalar::from_uint((1u128 << (num_bits - 1)) - 1, Size::from_bits(num_bits))  // max signed val\n+                            Scalar::from_uint((1u128 << (num_bits - 1)) - 1, Size::from_bits(num_bits))\n                         } else {  // signed term is negative\n-                            Scalar::from_uint(1u128 << (num_bits - 1), Size::from_bits(num_bits))  // min signed val\n+                            Scalar::from_uint(1u128 << (num_bits - 1), Size::from_bits(num_bits))\n                         }\n                     } else {\n-                        if num_bits == 128 {  // General bit shift method causes overflow for u128 terms\n+                        if num_bits == 128 {\n                             Scalar::from_uint(u128::max_value(), Size::from_bits(128))\n                         } else {\n                             Scalar::from_uint(u128::max_value() & ((1 << num_bits) - 1),\n@@ -149,6 +150,25 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     self.write_scalar(val, dest)?;\n                 }\n             }\n+            \"saturating_sub\" => {\n+                let l = self.read_immediate(args[0])?;\n+                let r = self.read_immediate(args[1])?;\n+                let (val, overflowed) = self.binary_op_imm(BinOp::Sub, l, r)?;\n+                if overflowed {\n+                    let first_term: u128 = l.to_scalar()?.to_bits(l.layout.size)?;\n+                    let num_bits = l.layout.size.bits();\n+                    let val = if first_term & (1 << (num_bits-1)) == 0 {  // first term is positive\n+                        // so overflow is positive\n+                        Scalar::from_uint((1u128 << (num_bits - 1)) - 1, Size::from_bits(num_bits))\n+                    } else {\n+                        // if first term negative, overflow must be negative\n+                        Scalar::from_uint(1u128 << (num_bits - 1), Size::from_bits(num_bits))\n+                    };\n+                    self.write_scalar(val, dest)?;\n+                } else {\n+                    self.write_scalar(val, dest)?;\n+                }\n+            }\n             \"unchecked_shl\" | \"unchecked_shr\" => {\n                 let l = self.read_immediate(args[0])?;\n                 let r = self.read_immediate(args[1])?;"}, {"sha": "d6ec207434243d26d1e4f376c4ea5d2a2aca3592", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0efb8e4d7392cd4b9c410b96ea209a18c161d92b/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0efb8e4d7392cd4b9c410b96ea209a18c161d92b/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=0efb8e4d7392cd4b9c410b96ea209a18c161d92b", "patch": "@@ -821,6 +821,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                 | \"sub_with_overflow\"\n                                 | \"mul_with_overflow\"\n                                 | \"saturating_add\"\n+                                | \"saturating_sub\"\n                                 // no need to check feature gates, intrinsics are only callable\n                                 // from the libstd or with forever unstable feature gates\n                                 => is_const_fn = true,"}, {"sha": "d8dc6c2845b28f62dc3439afcd9f676eb55af589", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0efb8e4d7392cd4b9c410b96ea209a18c161d92b/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0efb8e4d7392cd4b9c410b96ea209a18c161d92b/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=0efb8e4d7392cd4b9c410b96ea209a18c161d92b", "patch": "@@ -375,6 +375,7 @@ fn is_intrinsic_whitelisted(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool\n         | \"overflowing_sub\" // ~> .wrapping_sub\n         | \"overflowing_mul\" // ~> .wrapping_mul\n         | \"saturating_add\" // ~> .saturating_add\n+        | \"saturating_sub\" // ~> .saturating_sub\n         | \"unchecked_shl\" // ~> .wrapping_shl\n         | \"unchecked_shr\" // ~> .wrapping_shr\n         | \"rotate_left\" // ~> .rotate_left"}, {"sha": "283a2a2484fe287fd6e89cb38f6a06ad3bb0e591", "filename": "src/test/run-pass/const-int-saturating-arith.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0efb8e4d7392cd4b9c410b96ea209a18c161d92b/src%2Ftest%2Frun-pass%2Fconst-int-saturating-arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0efb8e4d7392cd4b9c410b96ea209a18c161d92b/src%2Ftest%2Frun-pass%2Fconst-int-saturating-arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-saturating-arith.rs?ref=0efb8e4d7392cd4b9c410b96ea209a18c161d92b", "patch": "@@ -4,10 +4,24 @@ const INT_U128: u128 = u128::max_value().saturating_add(1);\n const INT_I128: i128 = i128::max_value().saturating_add(1);\n const INT_I128_NEG: i128 = i128::min_value().saturating_add(-1);\n \n+const INT_U32_NO_SUB: u32 = (42 as u32).saturating_sub(2);\n+const INT_I32_NO_SUB: i32 = (-42 as i32).saturating_sub(2);\n+const INT_I32_NEG_SUB: i32 = i32::min_value().saturating_sub(1);\n+const INT_I32_POS_SUB: i32 = i32::max_value().saturating_sub(-1);\n+const INT_I128_NEG_SUB: i128 = i128::min_value().saturating_sub(1);\n+const INT_I128_POS_SUB: i128 = i128::max_value().saturating_sub(-1);\n+\n fn main() {\n     assert_eq!(INT_U32_NO, 44);\n     assert_eq!(INT_U32, u32::max_value());\n     assert_eq!(INT_U128, u128::max_value());\n     assert_eq!(INT_I128, i128::max_value());\n     assert_eq!(INT_I128_NEG, i128::min_value());\n-}\n\\ No newline at end of file\n+\n+    assert_eq!(INT_U32_NO_SUB, 40);\n+    assert_eq!(INT_I32_NO_SUB, -44);\n+    assert_eq!(INT_I32_NEG_SUB, i32::min_value());\n+    assert_eq!(INT_I32_POS_SUB, i32::max_value());\n+    assert_eq!(INT_I128_NEG_SUB, i128::min_value());\n+    assert_eq!(INT_I128_POS_SUB, i128::max_value());\n+}"}]}