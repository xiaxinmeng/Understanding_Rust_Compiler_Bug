{"sha": "f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NDM1ZjRjOTI2NTFkNjdkNWRiYWJhMTNjNTYwNmM0YzRmYzEzMjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-05T12:11:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-05T12:11:05Z"}, "message": "Auto merge of #81784 - m-ou-se:rollup-s23fow7, r=m-ou-se\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #79554 (Generic associated types in trait paths)\n - #80726 (relax adt unsizing requirements)\n - #81307 (Handle `Span`s for byte and raw strings and add more detail )\n - #81318 (rustdoc-json: Fix has_body)\n - #81456 (Make remote-test-server easier to use with new targets)\n - #81497 (rustdoc: Move `display_fn` struct inside `display_fn`)\n - #81500 (Remove struct_type from union output)\n - #81542 (Expose correct symlink API on WASI)\n - #81676 (Add more information to the error code for 'crate not found')\n - #81682 (Add additional bitset benchmarks)\n - #81730 (Make `Allocator` object-safe)\n - #81763 (Cleanup rustdoc pass descriptions a bit)\n - #81767 (Update LayoutError/LayoutErr stability attributes)\n - #81771 (Indicate change in RSS from start to end of pass in time-passes output)\n - #81781 (Fix `install-awscli.sh` error in CI)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d6b3c5182c722eef20e17d3a76f84ce13977bf27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6b3c5182c722eef20e17d3a76f84ce13977bf27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "html_url": "https://github.com/rust-lang/rust/commit/f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "730d6dfdddc0f55d9cbeedb29a14b342f74e2a9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/730d6dfdddc0f55d9cbeedb29a14b342f74e2a9d", "html_url": "https://github.com/rust-lang/rust/commit/730d6dfdddc0f55d9cbeedb29a14b342f74e2a9d"}, {"sha": "2383cd4b2d820f968a57f9750bf4b4471a655835", "url": "https://api.github.com/repos/rust-lang/rust/commits/2383cd4b2d820f968a57f9750bf4b4471a655835", "html_url": "https://github.com/rust-lang/rust/commit/2383cd4b2d820f968a57f9750bf4b4471a655835"}], "stats": {"total": 1984, "additions": 1599, "deletions": 385}, "files": [{"sha": "f076dca5cf5f178d06f835d53681b9b7489e654d", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1076,16 +1076,40 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_assoc_ty_constraint(\n         &mut self,\n         constraint: &AssocTyConstraint,\n-        itctx: ImplTraitContext<'_, 'hir>,\n+        mut itctx: ImplTraitContext<'_, 'hir>,\n     ) -> hir::TypeBinding<'hir> {\n         debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", constraint, itctx);\n \n-        if let Some(ref gen_args) = constraint.gen_args {\n-            self.sess.span_fatal(\n-                gen_args.span(),\n-                \"generic associated types in trait paths are currently not implemented\",\n-            );\n-        }\n+        // lower generic arguments of identifier in constraint\n+        let gen_args = if let Some(ref gen_args) = constraint.gen_args {\n+            let gen_args_ctor = match gen_args {\n+                GenericArgs::AngleBracketed(ref data) => {\n+                    self.lower_angle_bracketed_parameter_data(\n+                        data,\n+                        ParamMode::Explicit,\n+                        itctx.reborrow(),\n+                    )\n+                    .0\n+                }\n+                GenericArgs::Parenthesized(ref data) => {\n+                    let mut err = self.sess.struct_span_err(\n+                        gen_args.span(),\n+                        \"parenthesized generic arguments cannot be used in associated type constraints\"\n+                    );\n+                    // FIXME: try to write a suggestion here\n+                    err.emit();\n+                    self.lower_angle_bracketed_parameter_data(\n+                        &data.as_angle_bracketed_args(),\n+                        ParamMode::Explicit,\n+                        itctx.reborrow(),\n+                    )\n+                    .0\n+                }\n+            };\n+            self.arena.alloc(gen_args_ctor.into_generic_args(&self.arena))\n+        } else {\n+            self.arena.alloc(hir::GenericArgs::none())\n+        };\n \n         let kind = match constraint.kind {\n             AssocTyConstraintKind::Equality { ref ty } => {\n@@ -1182,6 +1206,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::TypeBinding {\n             hir_id: self.lower_node_id(constraint.id),\n             ident: constraint.ident,\n+            gen_args,\n             kind,\n             span: constraint.span,\n         }"}, {"sha": "cb4d5ea6ee650fa0c9f38ae9a001a076741f8042", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -362,7 +362,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn lower_angle_bracketed_parameter_data(\n+    pub(crate) fn lower_angle_bracketed_parameter_data(\n         &mut self,\n         data: &AngleBracketedArgs,\n         param_mode: ParamMode,\n@@ -426,6 +426,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     ) -> hir::TypeBinding<'hir> {\n         let ident = Ident::with_dummy_span(hir::FN_OUTPUT_NAME);\n         let kind = hir::TypeBindingKind::Equality { ty };\n-        hir::TypeBinding { hir_id: self.next_id(), span, ident, kind }\n+        let args = arena_vec![self;];\n+        let bindings = arena_vec![self;];\n+        let gen_args = self.arena.alloc(hir::GenericArgs { args, bindings, parenthesized: false });\n+        hir::TypeBinding { hir_id: self.next_id(), gen_args, span, ident, kind }\n     }\n }"}, {"sha": "f0b413c795e9c7d6c61bf57e21e991e1e876329c", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -590,24 +590,21 @@ pub fn print_time_passes_entry(\n     end_rss: Option<usize>,\n ) {\n     let rss_to_mb = |rss| (rss as f64 / 1_000_000.0).round() as usize;\n+    let rss_change_to_mb = |rss| (rss as f64 / 1_000_000.0).round() as i128;\n \n     let mem_string = match (start_rss, end_rss) {\n         (Some(start_rss), Some(end_rss)) => {\n-            // It's tempting to add the change in RSS from start to end, but its somewhat confusing\n-            // and misleading when looking at time-passes output. Consider two adjacent entries:\n-            //\n-            // time:  10.000; rss start:  1000MB, end:  1000MB, change:     0MB     pass1\n-            // time:   5.000; rss start:  2000MB, end:  2000MB, change:     0MB     pass2\n-            //\n-            // If you're looking for jumps in RSS based on the change column, you miss the fact\n-            // that a 1GB jump happened between pass1 and pass2 (supposing pass1 and pass2 actually\n-            // occur sequentially and pass1 isn't just nested within pass2). It's easy to imagine\n-            // someone missing this or being confused by the fact that the change is zero.\n-\n-            format!(\"; rss: {:>5}MB -> {:>5}MB\", rss_to_mb(start_rss), rss_to_mb(end_rss))\n+            let change_rss = end_rss as i128 - start_rss as i128;\n+\n+            format!(\n+                \"; rss: {:>4}MB -> {:>4}MB ({:>+5}MB)\",\n+                rss_to_mb(start_rss),\n+                rss_to_mb(end_rss),\n+                rss_change_to_mb(change_rss),\n+            )\n         }\n-        (Some(start_rss), None) => format!(\"; rss start: {:>5}MB\", rss_to_mb(start_rss)),\n-        (None, Some(end_rss)) => format!(\"; rss end: {:5>}MB\", rss_to_mb(end_rss)),\n+        (Some(start_rss), None) => format!(\"; rss start: {:>4}MB\", rss_to_mb(start_rss)),\n+        (None, Some(end_rss)) => format!(\"; rss end: {:>4}MB\", rss_to_mb(end_rss)),\n         (None, None) => String::new(),\n     };\n "}, {"sha": "d0cd1b1dcb75b69e63df89cbb8788adcd40e44ca", "filename": "compiler/rustc_error_codes/src/error_codes/E0463.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0463.md", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0463.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0463.md?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -11,3 +11,24 @@ extern crate cake_is_a_lie; // error: can't find crate for `cake_is_a_lie`\n You need to link your code to the relevant crate in order to be able to use it\n (through Cargo or the `-L` option of rustc example). Plugins are crates as\n well, and you link to them the same way.\n+\n+## Common causes\n+\n+- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n+  in Cargo.toml.\n+- The crate is present, but under a different name. If using Cargo, look for\n+  `package = ` under `[dependencies]` in Cargo.toml.\n+\n+## Common causes for missing `std` or `core`\n+\n+- You are cross-compiling for a target which doesn't have `std` prepackaged.\n+  Consider one of the following:\n+  + Adding a pre-compiled version of std with `rustup target add`\n+  + Building std from source with `cargo build -Z build-std`\n+  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n+    place.\n+- You are developing the compiler itself and haven't built libstd from source.\n+  You can usually build it with `x.py build library/std`. More information\n+  about x.py is available in the [rustc-dev-guide].\n+\n+[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler"}, {"sha": "4f38e060023675fcb922cc3d151497732c1537e6", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -631,6 +631,9 @@ declare_features! (\n \n     /// Allows `extern \"C-cmse-nonsecure-call\" fn()`.\n     (active, abi_c_cmse_nonsecure_call, \"1.51.0\", Some(81391), None),\n+\n+    /// Lessens the requirements for structs to implement `Unsize`.\n+    (active, relaxed_struct_unsize, \"1.51.0\", Some(1), None),\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "67a15418ea4957af0a5e5f604cb65cc6c73999a6", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -2015,6 +2015,7 @@ pub struct TypeBinding<'hir> {\n     pub hir_id: HirId,\n     #[stable_hasher(project(name))]\n     pub ident: Ident,\n+    pub gen_args: &'hir GenericArgs<'hir>,\n     pub kind: TypeBindingKind<'hir>,\n     pub span: Span,\n }"}, {"sha": "f8b3f0d9b6e23227ae22abbfe5fbb0cd03f6acbe", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -781,6 +781,7 @@ pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(\n ) {\n     visitor.visit_id(type_binding.hir_id);\n     visitor.visit_ident(type_binding.ident);\n+    visitor.visit_generic_args(type_binding.span, type_binding.gen_args);\n     match type_binding.kind {\n         TypeBindingKind::Equality { ref ty } => {\n             visitor.visit_ty(ty);"}, {"sha": "4595855309fdac66bbf9e6fb8738fa6713e974ed", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1840,6 +1840,7 @@ impl<'a> State<'a> {\n             for binding in generic_args.bindings.iter() {\n                 start_or_comma(self);\n                 self.print_ident(binding.ident);\n+                self.print_generic_args(binding.gen_args, false, false);\n                 self.s.space();\n                 match generic_args.bindings[0].kind {\n                     hir::TypeBindingKind::Equality { ref ty } => {"}, {"sha": "100824f4b94480b8875a733b7a116b2fdfc029f5", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -707,6 +707,18 @@ impl<T: Idx> GrowableBitSet<T> {\n         self.bit_set.insert(elem)\n     }\n \n+    /// Returns `true` if the set has changed.\n+    #[inline]\n+    pub fn remove(&mut self, elem: T) -> bool {\n+        self.ensure(elem.index() + 1);\n+        self.bit_set.remove(elem)\n+    }\n+\n+    #[inline]\n+    pub fn is_empty(&self) -> bool {\n+        self.bit_set.is_empty()\n+    }\n+\n     #[inline]\n     pub fn contains(&self, elem: T) -> bool {\n         let (word_index, mask) = word_index_and_mask(elem);"}, {"sha": "c11b98e77aa58ac5aac4c548dc58c0214dd3610f", "filename": "compiler/rustc_index/src/bit_set/tests.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_index%2Fsrc%2Fbit_set%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_index%2Fsrc%2Fbit_set%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set%2Ftests.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,6 +1,7 @@\n use super::*;\n \n extern crate test;\n+use std::hint::black_box;\n use test::Bencher;\n \n #[test]\n@@ -364,3 +365,36 @@ fn union_hybrid_sparse_full_small_domain(b: &mut Bencher) {\n         sparse.union(&dense);\n     })\n }\n+\n+#[bench]\n+fn bench_insert(b: &mut Bencher) {\n+    let mut bs = BitSet::new_filled(99999usize);\n+    b.iter(|| {\n+        black_box(bs.insert(black_box(100u32)));\n+    });\n+}\n+\n+#[bench]\n+fn bench_remove(b: &mut Bencher) {\n+    let mut bs = BitSet::new_filled(99999usize);\n+    b.iter(|| {\n+        black_box(bs.remove(black_box(100u32)));\n+    });\n+}\n+\n+#[bench]\n+fn bench_iter(b: &mut Bencher) {\n+    let bs = BitSet::new_filled(99999usize);\n+    b.iter(|| {\n+        bs.iter().map(|b: usize| black_box(b)).for_each(drop);\n+    });\n+}\n+\n+#[bench]\n+fn bench_intersect(b: &mut Bencher) {\n+    let mut ba: BitSet<u32> = BitSet::new_filled(99999usize);\n+    let bb = BitSet::new_filled(99999usize);\n+    b.iter(|| {\n+        ba.intersect(black_box(&bb));\n+    });\n+}"}, {"sha": "c1fa84dcb25e012f68577207e3c8b4111b1b22fa", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1132,8 +1132,16 @@ impl<'tcx> ProjectionTy<'tcx> {\n     /// For example, if this is a projection of `<T as Iterator>::Item`,\n     /// then this function would return a `T: Iterator` trait reference.\n     pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {\n+        // FIXME: This method probably shouldn't exist at all, since it's not\n+        // clear what this method really intends to do. Be careful when\n+        // using this method since the resulting TraitRef additionally\n+        // contains the substs for the assoc_item, which strictly speaking\n+        // is not correct\n         let def_id = tcx.associated_item(self.item_def_id).container.id();\n-        ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }\n+        // Include substitutions for generic arguments of associated types\n+        let assoc_item = tcx.associated_item(self.item_def_id);\n+        let substs_assoc_item = self.substs.truncate_to(tcx, tcx.generics_of(assoc_item.def_id));\n+        ty::TraitRef { def_id, substs: substs_assoc_item }\n     }\n \n     pub fn self_ty(&self) -> Ty<'tcx> {"}, {"sha": "4a638ec3f80206efc4dda9ef4af01dcecfd5d323", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -14,7 +14,7 @@ mod tokentrees;\n mod unescape_error_reporting;\n mod unicode_chars;\n \n-use unescape_error_reporting::{emit_unescape_error, push_escaped_char};\n+use unescape_error_reporting::{emit_unescape_error, escaped_char};\n \n #[derive(Clone, Debug)]\n pub struct UnmatchedBrace {\n@@ -122,11 +122,9 @@ impl<'a> StringReader<'a> {\n         m: &str,\n         c: char,\n     ) -> DiagnosticBuilder<'a> {\n-        let mut m = m.to_string();\n-        m.push_str(\": \");\n-        push_escaped_char(&mut m, c);\n-\n-        self.sess.span_diagnostic.struct_span_fatal(self.mk_sp(from_pos, to_pos), &m[..])\n+        self.sess\n+            .span_diagnostic\n+            .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!(\"{}: {}\", m, escaped_char(c)))\n     }\n \n     /// Turns simple `rustc_lexer::TokenKind` enum into a rich\n@@ -421,7 +419,7 @@ impl<'a> StringReader<'a> {\n         let content_start = start + BytePos(prefix_len);\n         let content_end = suffix_start - BytePos(postfix_len);\n         let id = self.symbol_from_to(content_start, content_end);\n-        self.validate_literal_escape(mode, content_start, content_end);\n+        self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);\n         (lit_kind, id)\n     }\n \n@@ -525,17 +523,29 @@ impl<'a> StringReader<'a> {\n         .raise();\n     }\n \n-    fn validate_literal_escape(&self, mode: Mode, content_start: BytePos, content_end: BytePos) {\n+    fn validate_literal_escape(\n+        &self,\n+        mode: Mode,\n+        content_start: BytePos,\n+        content_end: BytePos,\n+        prefix_len: u32,\n+        postfix_len: u32,\n+    ) {\n         let lit_content = self.str_from_to(content_start, content_end);\n         unescape::unescape_literal(lit_content, mode, &mut |range, result| {\n             // Here we only check for errors. The actual unescaping is done later.\n             if let Err(err) = result {\n-                let span_with_quotes =\n-                    self.mk_sp(content_start - BytePos(1), content_end + BytePos(1));\n+                let span_with_quotes = self\n+                    .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));\n+                let (start, end) = (range.start as u32, range.end as u32);\n+                let lo = content_start + BytePos(start);\n+                let hi = lo + BytePos(end - start);\n+                let span = self.mk_sp(lo, hi);\n                 emit_unescape_error(\n                     &self.sess.span_diagnostic,\n                     lit_content,\n                     span_with_quotes,\n+                    span,\n                     mode,\n                     range,\n                     err,"}, {"sha": "a580f0c55d0e33d0f5755b4a092eaed4fa7c10ef", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 116, "deletions": 70, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -13,6 +13,8 @@ pub(crate) fn emit_unescape_error(\n     lit: &str,\n     // full span of the literal, including quotes\n     span_with_quotes: Span,\n+    // interior span of the literal, without quotes\n+    span: Span,\n     mode: Mode,\n     // range of the error inside `lit`\n     range: Range<usize>,\n@@ -26,13 +28,6 @@ pub(crate) fn emit_unescape_error(\n         range,\n         error\n     );\n-    let span = {\n-        let Range { start, end } = range;\n-        let (start, end) = (start as u32, end as u32);\n-        let lo = span_with_quotes.lo() + BytePos(start + 1);\n-        let hi = lo + BytePos(end - start);\n-        span_with_quotes.with_lo(lo).with_hi(hi)\n-    };\n     let last_char = || {\n         let c = lit[range.clone()].chars().rev().next().unwrap();\n         let span = span.with_lo(span.hi() - BytePos(c.len_utf8() as u32));\n@@ -42,20 +37,22 @@ pub(crate) fn emit_unescape_error(\n         EscapeError::LoneSurrogateUnicodeEscape => {\n             handler\n                 .struct_span_err(span, \"invalid unicode character escape\")\n+                .span_label(span, \"invalid escape\")\n                 .help(\"unicode escape must not be a surrogate\")\n                 .emit();\n         }\n         EscapeError::OutOfRangeUnicodeEscape => {\n             handler\n                 .struct_span_err(span, \"invalid unicode character escape\")\n+                .span_label(span, \"invalid escape\")\n                 .help(\"unicode escape must be at most 10FFFF\")\n                 .emit();\n         }\n         EscapeError::MoreThanOneChar => {\n-            let msg = if mode.is_bytes() {\n-                \"if you meant to write a byte string literal, use double quotes\"\n+            let (prefix, msg) = if mode.is_bytes() {\n+                (\"b\", \"if you meant to write a byte string literal, use double quotes\")\n             } else {\n-                \"if you meant to write a `str` literal, use double quotes\"\n+                (\"\", \"if you meant to write a `str` literal, use double quotes\")\n             };\n \n             handler\n@@ -66,31 +63,44 @@ pub(crate) fn emit_unescape_error(\n                 .span_suggestion(\n                     span_with_quotes,\n                     msg,\n-                    format!(\"\\\"{}\\\"\", lit),\n+                    format!(\"{}\\\"{}\\\"\", prefix, lit),\n                     Applicability::MachineApplicable,\n                 )\n                 .emit();\n         }\n         EscapeError::EscapeOnlyChar => {\n-            let (c, _span) = last_char();\n+            let (c, char_span) = last_char();\n \n-            let mut msg = if mode.is_bytes() {\n-                \"byte constant must be escaped: \"\n+            let msg = if mode.is_bytes() {\n+                \"byte constant must be escaped\"\n             } else {\n-                \"character constant must be escaped: \"\n-            }\n-            .to_string();\n-            push_escaped_char(&mut msg, c);\n-\n-            handler.span_err(span, msg.as_str())\n+                \"character constant must be escaped\"\n+            };\n+            handler\n+                .struct_span_err(span, &format!(\"{}: `{}`\", msg, escaped_char(c)))\n+                .span_suggestion(\n+                    char_span,\n+                    \"escape the character\",\n+                    c.escape_default().to_string(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit()\n         }\n         EscapeError::BareCarriageReturn => {\n             let msg = if mode.in_double_quotes() {\n-                \"bare CR not allowed in string, use \\\\r instead\"\n+                \"bare CR not allowed in string, use `\\\\r` instead\"\n             } else {\n-                \"character constant must be escaped: \\\\r\"\n+                \"character constant must be escaped: `\\\\r`\"\n             };\n-            handler.span_err(span, msg);\n+            handler\n+                .struct_span_err(span, msg)\n+                .span_suggestion(\n+                    span,\n+                    \"escape the character\",\n+                    \"\\\\r\".to_string(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n         }\n         EscapeError::BareCarriageReturnInRawString => {\n             assert!(mode.in_double_quotes());\n@@ -102,21 +112,22 @@ pub(crate) fn emit_unescape_error(\n \n             let label =\n                 if mode.is_bytes() { \"unknown byte escape\" } else { \"unknown character escape\" };\n-            let mut msg = label.to_string();\n-            msg.push_str(\": \");\n-            push_escaped_char(&mut msg, c);\n-\n-            let mut diag = handler.struct_span_err(span, msg.as_str());\n+            let ec = escaped_char(c);\n+            let mut diag = handler.struct_span_err(span, &format!(\"{}: `{}`\", label, ec));\n             diag.span_label(span, label);\n             if c == '{' || c == '}' && !mode.is_bytes() {\n                 diag.help(\n-                    \"if used in a formatting string, \\\n-                           curly braces are escaped with `{{` and `}}`\",\n+                    \"if used in a formatting string, curly braces are escaped with `{{` and `}}`\",\n                 );\n             } else if c == '\\r' {\n                 diag.help(\n-                    \"this is an isolated carriage return; \\\n-                           consider checking your editor and version control settings\",\n+                    \"this is an isolated carriage return; consider checking your editor and \\\n+                     version control settings\",\n+                );\n+            } else {\n+                diag.help(\n+                    \"for more information, visit \\\n+                     <https://static.rust-lang.org/doc/master/reference.html#literals>\",\n                 );\n             }\n             diag.emit();\n@@ -127,45 +138,70 @@ pub(crate) fn emit_unescape_error(\n         EscapeError::InvalidCharInHexEscape | EscapeError::InvalidCharInUnicodeEscape => {\n             let (c, span) = last_char();\n \n-            let mut msg = if error == EscapeError::InvalidCharInHexEscape {\n-                \"invalid character in numeric character escape: \"\n+            let msg = if error == EscapeError::InvalidCharInHexEscape {\n+                \"invalid character in numeric character escape\"\n             } else {\n-                \"invalid character in unicode escape: \"\n-            }\n-            .to_string();\n-            push_escaped_char(&mut msg, c);\n+                \"invalid character in unicode escape\"\n+            };\n+            let c = escaped_char(c);\n \n-            handler.span_err(span, msg.as_str())\n+            handler\n+                .struct_span_err(span, &format!(\"{}: `{}`\", msg, c))\n+                .span_label(span, msg)\n+                .emit();\n         }\n         EscapeError::NonAsciiCharInByte => {\n             assert!(mode.is_bytes());\n-            let (_c, span) = last_char();\n-            handler.span_err(\n-                span,\n-                \"byte constant must be ASCII. \\\n-                                    Use a \\\\xHH escape for a non-ASCII byte\",\n-            )\n+            let (c, span) = last_char();\n+            handler\n+                .struct_span_err(span, \"non-ASCII character in byte constant\")\n+                .span_label(span, \"byte constant must be ASCII\")\n+                .span_suggestion(\n+                    span,\n+                    \"use a \\\\xHH escape for a non-ASCII byte\",\n+                    format!(\"\\\\x{:X}\", c as u32),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n         }\n         EscapeError::NonAsciiCharInByteString => {\n             assert!(mode.is_bytes());\n             let (_c, span) = last_char();\n-            handler.span_err(span, \"raw byte string must be ASCII\")\n+            handler\n+                .struct_span_err(span, \"raw byte string must be ASCII\")\n+                .span_label(span, \"must be ASCII\")\n+                .emit();\n+        }\n+        EscapeError::OutOfRangeHexEscape => {\n+            handler\n+                .struct_span_err(span, \"out of range hex escape\")\n+                .span_label(span, \"must be a character in the range [\\\\x00-\\\\x7f]\")\n+                .emit();\n         }\n-        EscapeError::OutOfRangeHexEscape => handler.span_err(\n-            span,\n-            \"this form of character escape may only be used \\\n-                                    with characters in the range [\\\\x00-\\\\x7f]\",\n-        ),\n         EscapeError::LeadingUnderscoreUnicodeEscape => {\n-            let (_c, span) = last_char();\n-            handler.span_err(span, \"invalid start of unicode escape\")\n+            let (c, span) = last_char();\n+            let msg = \"invalid start of unicode escape\";\n+            handler\n+                .struct_span_err(span, &format!(\"{}: `{}`\", msg, c))\n+                .span_label(span, msg)\n+                .emit();\n         }\n         EscapeError::OverlongUnicodeEscape => {\n-            handler.span_err(span, \"overlong unicode escape (must have at most 6 hex digits)\")\n-        }\n-        EscapeError::UnclosedUnicodeEscape => {\n-            handler.span_err(span, \"unterminated unicode escape (needed a `}`)\")\n+            handler\n+                .struct_span_err(span, \"overlong unicode escape\")\n+                .span_label(span, \"must have at most 6 hex digits\")\n+                .emit();\n         }\n+        EscapeError::UnclosedUnicodeEscape => handler\n+            .struct_span_err(span, \"unterminated unicode escape\")\n+            .span_label(span, \"missing a closing `}`\")\n+            .span_suggestion_verbose(\n+                span.shrink_to_hi(),\n+                \"terminate the unicode escape\",\n+                \"}\".to_string(),\n+                Applicability::MaybeIncorrect,\n+            )\n+            .emit(),\n         EscapeError::NoBraceInUnicodeEscape => {\n             let msg = \"incorrect unicode escape sequence\";\n             let mut diag = handler.struct_span_err(span, msg);\n@@ -195,28 +231,38 @@ pub(crate) fn emit_unescape_error(\n \n             diag.emit();\n         }\n-        EscapeError::UnicodeEscapeInByte => handler.span_err(\n-            span,\n-            \"unicode escape sequences cannot be used \\\n-                                    as a byte or in a byte string\",\n-        ),\n+        EscapeError::UnicodeEscapeInByte => {\n+            let msg = \"unicode escape in byte string\";\n+            handler\n+                .struct_span_err(span, msg)\n+                .span_label(span, msg)\n+                .help(\"unicode escape sequences cannot be used as a byte or in a byte string\")\n+                .emit();\n+        }\n         EscapeError::EmptyUnicodeEscape => {\n-            handler.span_err(span, \"empty unicode escape (must have at least 1 hex digit)\")\n+            handler\n+                .struct_span_err(span, \"empty unicode escape\")\n+                .span_label(span, \"this escape must have at least 1 hex digit\")\n+                .emit();\n+        }\n+        EscapeError::ZeroChars => {\n+            let msg = \"empty character literal\";\n+            handler.struct_span_err(span, msg).span_label(span, msg).emit()\n+        }\n+        EscapeError::LoneSlash => {\n+            let msg = \"invalid trailing slash in literal\";\n+            handler.struct_span_err(span, msg).span_label(span, msg).emit();\n         }\n-        EscapeError::ZeroChars => handler.span_err(span, \"empty character literal\"),\n-        EscapeError::LoneSlash => handler.span_err(span, \"invalid trailing slash in literal\"),\n     }\n }\n \n /// Pushes a character to a message string for error reporting\n-pub(crate) fn push_escaped_char(msg: &mut String, c: char) {\n+pub(crate) fn escaped_char(c: char) -> String {\n     match c {\n         '\\u{20}'..='\\u{7e}' => {\n             // Don't escape \\, ' or \" for user-facing messages\n-            msg.push(c);\n-        }\n-        _ => {\n-            msg.extend(c.escape_default());\n+            c.to_string()\n         }\n+        _ => c.escape_default().to_string(),\n     }\n }"}, {"sha": "86f8061a24affe52ee2ebc076bf261df108b82e9", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -907,6 +907,7 @@ symbols! {\n         register_attr,\n         register_tool,\n         relaxed_adts,\n+        relaxed_struct_unsize,\n         rem,\n         rem_assign,\n         repr,"}, {"sha": "e155f0366e19f5c006ee8644ed8824949c835f4b", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -257,13 +257,11 @@ fn predicates_reference_self(\n }\n \n fn bounds_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SmallVec<[Span; 1]> {\n-    let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(tcx, trait_def_id));\n     tcx.associated_items(trait_def_id)\n         .in_definition_order()\n         .filter(|item| item.kind == ty::AssocKind::Type)\n         .flat_map(|item| tcx.explicit_item_bounds(item.def_id))\n-        .map(|&(predicate, sp)| (predicate.subst_supertrait(tcx, &trait_ref), sp))\n-        .filter_map(|predicate| predicate_references_self(tcx, predicate))\n+        .filter_map(|pred_span| predicate_references_self(tcx, *pred_span))\n         .collect()\n }\n "}, {"sha": "ed3e117fcfabbbb841243ddf86e5eb868862e95e", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -823,33 +823,59 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     },\n                 };\n \n+                // FIXME(eddyb) cache this (including computing `unsizing_params`)\n+                // by putting it in a query; it would only need the `DefId` as it\n+                // looks at declared field types, not anything substituted.\n+\n                 // The last field of the structure has to exist and contain type/const parameters.\n                 let (tail_field, prefix_fields) =\n                     def.non_enum_variant().fields.split_last().ok_or(Unimplemented)?;\n                 let tail_field_ty = tcx.type_of(tail_field.did);\n \n                 let mut unsizing_params = GrowableBitSet::new_empty();\n-                let mut found = false;\n-                for arg in tail_field_ty.walk() {\n-                    if let Some(i) = maybe_unsizing_param_idx(arg) {\n-                        unsizing_params.insert(i);\n-                        found = true;\n+                if tcx.features().relaxed_struct_unsize {\n+                    for arg in tail_field_ty.walk() {\n+                        if let Some(i) = maybe_unsizing_param_idx(arg) {\n+                            unsizing_params.insert(i);\n+                        }\n                     }\n-                }\n-                if !found {\n-                    return Err(Unimplemented);\n-                }\n \n-                // Ensure none of the other fields mention the parameters used\n-                // in unsizing.\n-                // FIXME(eddyb) cache this (including computing `unsizing_params`)\n-                // by putting it in a query; it would only need the `DefId` as it\n-                // looks at declared field types, not anything substituted.\n-                for field in prefix_fields {\n-                    for arg in tcx.type_of(field.did).walk() {\n+                    // Ensure none of the other fields mention the parameters used\n+                    // in unsizing.\n+                    for field in prefix_fields {\n+                        for arg in tcx.type_of(field.did).walk() {\n+                            if let Some(i) = maybe_unsizing_param_idx(arg) {\n+                                unsizing_params.remove(i);\n+                            }\n+                        }\n+                    }\n+\n+                    if unsizing_params.is_empty() {\n+                        return Err(Unimplemented);\n+                    }\n+                } else {\n+                    let mut found = false;\n+                    for arg in tail_field_ty.walk() {\n                         if let Some(i) = maybe_unsizing_param_idx(arg) {\n-                            if unsizing_params.contains(i) {\n-                                return Err(Unimplemented);\n+                            unsizing_params.insert(i);\n+                            found = true;\n+                        }\n+                    }\n+                    if !found {\n+                        return Err(Unimplemented);\n+                    }\n+\n+                    // Ensure none of the other fields mention the parameters used\n+                    // in unsizing.\n+                    // FIXME(eddyb) cache this (including computing `unsizing_params`)\n+                    // by putting it in a query; it would only need the `DefId` as it\n+                    // looks at declared field types, not anything substituted.\n+                    for field in prefix_fields {\n+                        for arg in tcx.type_of(field.did).walk() {\n+                            if let Some(i) = maybe_unsizing_param_idx(arg) {\n+                                if unsizing_params.contains(i) {\n+                                    return Err(Unimplemented);\n+                                }\n                             }\n                         }\n                     }"}, {"sha": "5659345f0ff9cfec0c056ad870796e22f4161d25", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 104, "deletions": 62, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -112,12 +112,15 @@ pub enum SizedByDefault {\n     No,\n }\n \n+#[derive(Debug)]\n struct ConvertedBinding<'a, 'tcx> {\n     item_name: Ident,\n     kind: ConvertedBindingKind<'a, 'tcx>,\n+    gen_args: &'a GenericArgs<'a>,\n     span: Span,\n }\n \n+#[derive(Debug)]\n enum ConvertedBindingKind<'a, 'tcx> {\n     Equality(Ty<'tcx>),\n     Constraint(&'a [hir::GenericBound<'a>]),\n@@ -323,6 +326,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let tcx = self.tcx();\n         let generics = tcx.generics_of(def_id);\n+        debug!(\"generics: {:?}\", generics);\n \n         if generics.has_self {\n             if generics.parent.is_some() {\n@@ -557,7 +561,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         ConvertedBindingKind::Constraint(bounds)\n                     }\n                 };\n-                ConvertedBinding { item_name: binding.ident, kind, span: binding.span }\n+                ConvertedBinding {\n+                    item_name: binding.ident,\n+                    kind,\n+                    gen_args: binding.gen_args,\n+                    span: binding.span,\n+                }\n             })\n             .collect();\n \n@@ -918,60 +927,27 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         dup_bindings: &mut FxHashMap<DefId, Span>,\n         path_span: Span,\n     ) -> Result<(), ErrorReported> {\n-        let tcx = self.tcx();\n-\n-        if !speculative {\n-            // Given something like `U: SomeTrait<T = X>`, we want to produce a\n-            // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n-            // subtle in the event that `T` is defined in a supertrait of\n-            // `SomeTrait`, because in that case we need to upcast.\n-            //\n-            // That is, consider this case:\n-            //\n-            // ```\n-            // trait SubTrait: SuperTrait<i32> { }\n-            // trait SuperTrait<A> { type T; }\n-            //\n-            // ... B: SubTrait<T = foo> ...\n-            // ```\n-            //\n-            // We want to produce `<B as SuperTrait<i32>>::T == foo`.\n-\n-            // Find any late-bound regions declared in `ty` that are not\n-            // declared in the trait-ref. These are not well-formed.\n-            //\n-            // Example:\n-            //\n-            //     for<'a> <T as Iterator>::Item = &'a str // <-- 'a is bad\n-            //     for<'a> <T as FnMut<(&'a u32,)>>::Output = &'a str // <-- 'a is ok\n-            if let ConvertedBindingKind::Equality(ty) = binding.kind {\n-                let late_bound_in_trait_ref =\n-                    tcx.collect_constrained_late_bound_regions(&trait_ref);\n-                let late_bound_in_ty =\n-                    tcx.collect_referenced_late_bound_regions(&ty::Binder::bind(ty));\n-                debug!(\"late_bound_in_trait_ref = {:?}\", late_bound_in_trait_ref);\n-                debug!(\"late_bound_in_ty = {:?}\", late_bound_in_ty);\n+        // Given something like `U: SomeTrait<T = X>`, we want to produce a\n+        // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n+        // subtle in the event that `T` is defined in a supertrait of\n+        // `SomeTrait`, because in that case we need to upcast.\n+        //\n+        // That is, consider this case:\n+        //\n+        // ```\n+        // trait SubTrait: SuperTrait<i32> { }\n+        // trait SuperTrait<A> { type T; }\n+        //\n+        // ... B: SubTrait<T = foo> ...\n+        // ```\n+        //\n+        // We want to produce `<B as SuperTrait<i32>>::T == foo`.\n \n-                // FIXME: point at the type params that don't have appropriate lifetimes:\n-                // struct S1<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n-                //                         ----  ----     ^^^^^^^\n-                self.validate_late_bound_regions(\n-                    late_bound_in_trait_ref,\n-                    late_bound_in_ty,\n-                    |br_name| {\n-                        struct_span_err!(\n-                            tcx.sess,\n-                            binding.span,\n-                            E0582,\n-                            \"binding for associated type `{}` references {}, \\\n-                             which does not appear in the trait input types\",\n-                            binding.item_name,\n-                            br_name\n-                        )\n-                    },\n-                );\n-            }\n-        }\n+        debug!(\n+            \"add_predicates_for_ast_type_binding(hir_ref_id {:?}, trait_ref {:?}, binding {:?}, bounds {:?}\",\n+            hir_ref_id, trait_ref, binding, bounds\n+        );\n+        let tcx = self.tcx();\n \n         let candidate =\n             if self.trait_defines_associated_type_named(trait_ref.def_id(), binding.item_name) {\n@@ -1030,20 +1006,85 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 .or_insert(binding.span);\n         }\n \n+        // Include substitutions for generic parameters of associated types\n+        let projection_ty = candidate.map_bound(|trait_ref| {\n+            let item_segment = hir::PathSegment {\n+                ident: assoc_ty.ident,\n+                hir_id: None,\n+                res: None,\n+                args: Some(binding.gen_args),\n+                infer_args: false,\n+            };\n+\n+            let substs_trait_ref_and_assoc_item = self.create_substs_for_associated_item(\n+                tcx,\n+                path_span,\n+                assoc_ty.def_id,\n+                &item_segment,\n+                trait_ref.substs,\n+            );\n+\n+            debug!(\n+                \"add_predicates_for_ast_type_binding: substs for trait-ref and assoc_item: {:?}\",\n+                substs_trait_ref_and_assoc_item\n+            );\n+\n+            ty::ProjectionTy {\n+                item_def_id: assoc_ty.def_id,\n+                substs: substs_trait_ref_and_assoc_item,\n+            }\n+        });\n+\n+        if !speculative {\n+            // Find any late-bound regions declared in `ty` that are not\n+            // declared in the trait-ref or assoc_ty. These are not well-formed.\n+            //\n+            // Example:\n+            //\n+            //     for<'a> <T as Iterator>::Item = &'a str // <-- 'a is bad\n+            //     for<'a> <T as FnMut<(&'a u32,)>>::Output = &'a str // <-- 'a is ok\n+            if let ConvertedBindingKind::Equality(ty) = binding.kind {\n+                let late_bound_in_trait_ref =\n+                    tcx.collect_constrained_late_bound_regions(&projection_ty);\n+                let late_bound_in_ty =\n+                    tcx.collect_referenced_late_bound_regions(&ty::Binder::bind(ty));\n+                debug!(\"late_bound_in_trait_ref = {:?}\", late_bound_in_trait_ref);\n+                debug!(\"late_bound_in_ty = {:?}\", late_bound_in_ty);\n+\n+                // FIXME: point at the type params that don't have appropriate lifetimes:\n+                // struct S1<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n+                //                         ----  ----     ^^^^^^^\n+                self.validate_late_bound_regions(\n+                    late_bound_in_trait_ref,\n+                    late_bound_in_ty,\n+                    |br_name| {\n+                        struct_span_err!(\n+                            tcx.sess,\n+                            binding.span,\n+                            E0582,\n+                            \"binding for associated type `{}` references {}, \\\n+                             which does not appear in the trait input types\",\n+                            binding.item_name,\n+                            br_name\n+                        )\n+                    },\n+                );\n+            }\n+        }\n+\n         match binding.kind {\n             ConvertedBindingKind::Equality(ref ty) => {\n                 // \"Desugar\" a constraint like `T: Iterator<Item = u32>` this to\n                 // the \"projection predicate\" for:\n                 //\n                 // `<T as Iterator>::Item = u32`\n                 bounds.projection_bounds.push((\n-                    candidate.map_bound(|trait_ref| ty::ProjectionPredicate {\n-                        projection_ty: ty::ProjectionTy::from_ref_and_name(\n-                            tcx,\n-                            trait_ref,\n-                            binding.item_name,\n-                        ),\n-                        ty,\n+                    projection_ty.map_bound(|projection_ty| {\n+                        debug!(\n+                            \"add_predicates_for_ast_type_binding: projection_ty {:?}, substs: {:?}\",\n+                            projection_ty, projection_ty.substs\n+                        );\n+                        ty::ProjectionPredicate { projection_ty, ty }\n                     }),\n                     binding.span,\n                 ));\n@@ -1055,7 +1096,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 //\n                 // Calling `skip_binder` is okay, because `add_bounds` expects the `param_ty`\n                 // parameter to have a skipped binder.\n-                let param_ty = tcx.mk_projection(assoc_ty.def_id, candidate.skip_binder().substs);\n+                let param_ty =\n+                    tcx.mk_projection(assoc_ty.def_id, projection_ty.skip_binder().substs);\n                 self.add_bounds(param_ty, ast_bounds, bounds);\n             }\n         }"}, {"sha": "9dc3f05dae5ace8d24419088852b0d16f8c64646", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -400,7 +400,7 @@ impl Layout {\n \n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n #[rustc_deprecated(\n-    since = \"1.51.0\",\n+    since = \"1.52.0\",\n     reason = \"Name does not follow std convention, use LayoutError\",\n     suggestion = \"LayoutError\"\n )]\n@@ -409,7 +409,7 @@ pub type LayoutErr = LayoutError;\n /// The parameters given to `Layout::from_size_align`\n /// or some other `Layout` constructor\n /// do not satisfy its documented constraints.\n-#[stable(feature = \"alloc_layout_error\", since = \"1.49.0\")]\n+#[stable(feature = \"alloc_layout_error\", since = \"1.50.0\")]\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct LayoutError {\n     private: (),"}, {"sha": "06a761531b6763b97196046daf9c9323b1fe20fb", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -11,14 +11,14 @@ pub use self::global::GlobalAlloc;\n pub use self::layout::Layout;\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n #[rustc_deprecated(\n-    since = \"1.51.0\",\n+    since = \"1.52.0\",\n     reason = \"Name does not follow std convention, use LayoutError\",\n     suggestion = \"LayoutError\"\n )]\n #[allow(deprecated, deprecated_in_future)]\n pub use self::layout::LayoutErr;\n \n-#[stable(feature = \"alloc_layout_error\", since = \"1.49.0\")]\n+#[stable(feature = \"alloc_layout_error\", since = \"1.50.0\")]\n pub use self::layout::LayoutError;\n \n use crate::fmt;\n@@ -342,7 +342,10 @@ pub unsafe trait Allocator {\n     ///\n     /// The returned adaptor also implements `Allocator` and will simply borrow this.\n     #[inline(always)]\n-    fn by_ref(&self) -> &Self {\n+    fn by_ref(&self) -> &Self\n+    where\n+        Self: Sized,\n+    {\n         self\n     }\n }"}, {"sha": "a8da003d550acb04510c3aadc7e257fc9be60550", "filename": "library/std/src/sys/wasi/ext/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Ffs.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -514,3 +514,11 @@ pub fn symlink<P: AsRef<Path>, U: AsRef<Path>>(\n         .fd()\n         .symlink(osstr2str(old_path.as_ref().as_ref())?, osstr2str(new_path.as_ref().as_ref())?)\n }\n+\n+/// Create a symbolic link.\n+///\n+/// This is a convenience API similar to [`std::os::unix::fs::symlink`] and\n+/// [`std::os::windows::fs::symlink_file`] and [`symlink_dir`](std::os::windows::fs::symlink_dir).\n+pub fn symlink_path<P: AsRef<Path>, U: AsRef<Path>>(old_path: P, new_path: U) -> io::Result<()> {\n+    crate::sys::fs::symlink(old_path.as_ref(), new_path.as_ref())\n+}"}, {"sha": "d9132f20d85b33df9bd49422edf6f36bb8b01abe", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1880,8 +1880,7 @@ impl Step for RemoteCopyLibs {\n         builder.info(&format!(\"REMOTE copy libs to emulator ({})\", target));\n         t!(fs::create_dir_all(builder.out.join(\"tmp\")));\n \n-        let server =\n-            builder.ensure(tool::RemoteTestServer { compiler: compiler.with_stage(0), target });\n+        let server = builder.ensure(tool::RemoteTestServer { compiler, target });\n \n         // Spawn the emulator and wait for it to come online\n         let tool = builder.tool_exe(Tool::RemoteTestClient);"}, {"sha": "3d8f0de7a396b49f1603188711e9a9b8489a035c", "filename": "src/ci/scripts/install-awscli.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Fci%2Fscripts%2Finstall-awscli.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Fci%2Fscripts%2Finstall-awscli.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-awscli.sh?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -27,7 +27,7 @@ if isLinux; then\n     pip=\"pip3\"\n     pipflags=\"--user\"\n \n-    sudo apt-get install -y python3-setuptools\n+    sudo apt-get install -y python3-setuptools python3-wheel\n     ciCommandAddPath \"${HOME}/.local/bin\"\n fi\n "}, {"sha": "a20e9dec33b36f188fb0c83dec69bc11595468c8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -435,7 +435,7 @@ crate fn create_resolver<'a>(\n \n     // Before we actually clone it, let's force all the extern'd crates to\n     // actually be loaded, just in case they're only referred to inside\n-    // intra-doc-links\n+    // intra-doc links\n     resolver.borrow_mut().access(|resolver| {\n         sess.time(\"load_extern_crates\", || {\n             for extern_name in &extern_names {"}, {"sha": "d7951961223e4691ecddc63d1d0462eb06d64a49", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1331,16 +1331,16 @@ impl clean::GenericArg {\n }\n \n crate fn display_fn(f: impl FnOnce(&mut fmt::Formatter<'_>) -> fmt::Result) -> impl fmt::Display {\n-    WithFormatter(Cell::new(Some(f)))\n-}\n-\n-struct WithFormatter<F>(Cell<Option<F>>);\n-\n-impl<F> fmt::Display for WithFormatter<F>\n-where\n-    F: FnOnce(&mut fmt::Formatter<'_>) -> fmt::Result,\n-{\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        (self.0.take()).unwrap()(f)\n+    struct WithFormatter<F>(Cell<Option<F>>);\n+\n+    impl<F> fmt::Display for WithFormatter<F>\n+    where\n+        F: FnOnce(&mut fmt::Formatter<'_>) -> fmt::Result,\n+    {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+            (self.0.take()).unwrap()(f)\n+        }\n     }\n+\n+    WithFormatter(Cell::new(Some(f)))\n }"}, {"sha": "026d8f96dee65bfb204c78980779297297c1a7db", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -154,16 +154,16 @@ impl From<clean::ItemKind> for ItemEnum {\n             }\n             ImportItem(i) => ItemEnum::ImportItem(i.into()),\n             StructItem(s) => ItemEnum::StructItem(s.into()),\n-            UnionItem(u) => ItemEnum::StructItem(u.into()),\n+            UnionItem(u) => ItemEnum::UnionItem(u.into()),\n             StructFieldItem(f) => ItemEnum::StructFieldItem(f.into()),\n             EnumItem(e) => ItemEnum::EnumItem(e.into()),\n             VariantItem(v) => ItemEnum::VariantItem(v.into()),\n             FunctionItem(f) => ItemEnum::FunctionItem(f.into()),\n             ForeignFunctionItem(f) => ItemEnum::FunctionItem(f.into()),\n             TraitItem(t) => ItemEnum::TraitItem(t.into()),\n             TraitAliasItem(t) => ItemEnum::TraitAliasItem(t.into()),\n-            MethodItem(m, _) => ItemEnum::MethodItem(m.into()),\n-            TyMethodItem(m) => ItemEnum::MethodItem(m.into()),\n+            MethodItem(m, _) => ItemEnum::MethodItem(from_function_method(m, true)),\n+            TyMethodItem(m) => ItemEnum::MethodItem(from_function_method(m, false)),\n             ImplItem(i) => ItemEnum::ImplItem(i.into()),\n             StaticItem(s) => ItemEnum::StaticItem(s.into()),\n             ForeignStaticItem(s) => ItemEnum::StaticItem(s.into()),\n@@ -205,11 +205,10 @@ impl From<clean::Struct> for Struct {\n     }\n }\n \n-impl From<clean::Union> for Struct {\n+impl From<clean::Union> for Union {\n     fn from(struct_: clean::Union) -> Self {\n         let clean::Union { generics, fields, fields_stripped } = struct_;\n-        Struct {\n-            struct_type: StructType::Union,\n+        Union {\n             generics: generics.into(),\n             fields_stripped,\n             fields: ids(fields),\n@@ -435,15 +434,13 @@ impl From<clean::Impl> for Impl {\n     }\n }\n \n-impl From<clean::Function> for Method {\n-    fn from(function: clean::Function) -> Self {\n-        let clean::Function { header, decl, generics, all_types: _, ret_types: _ } = function;\n-        Method {\n-            decl: decl.into(),\n-            generics: generics.into(),\n-            header: stringify_header(&header),\n-            has_body: true,\n-        }\n+crate fn from_function_method(function: clean::Function, has_body: bool) -> Method {\n+    let clean::Function { header, decl, generics, all_types: _, ret_types: _ } = function;\n+    Method {\n+        decl: decl.into(),\n+        generics: generics.into(),\n+        header: stringify_header(&header),\n+        has_body,\n     }\n }\n "}, {"sha": "876b1b56dee6d0ec240a55a02d2317ed22fa6aa3", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -243,7 +243,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                     )\n                 })\n                 .collect(),\n-            format_version: 2,\n+            format_version: 3,\n         };\n         let mut p = self.out_path.clone();\n         p.push(output.index.get(&output.root).unwrap().name.clone().unwrap());"}, {"sha": "532a0cf932904d6d7bfde67ba860fd166ba205da", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -44,7 +44,7 @@ use super::span_of_attrs;\n crate const COLLECT_INTRA_DOC_LINKS: Pass = Pass {\n     name: \"collect-intra-doc-links\",\n     run: collect_intra_doc_links,\n-    description: \"reads a crate's documentation to resolve intra-doc-links\",\n+    description: \"resolves intra-doc links\",\n };\n \n crate fn collect_intra_doc_links(krate: Crate, cx: &DocContext<'_>) -> Crate {\n@@ -981,7 +981,7 @@ impl LinkCollector<'_, '_> {\n         let link_text =\n             disambiguator.map(|d| d.display_for(path_str)).unwrap_or_else(|| path_str.to_owned());\n \n-        // In order to correctly resolve intra-doc-links we need to\n+        // In order to correctly resolve intra-doc links we need to\n         // pick a base AST node to work from.  If the documentation for\n         // this module came from an inner comment (//!) then we anchor\n         // our name resolution *inside* the module.  If, on the other"}, {"sha": "11f572560d60695d45bfab700256019fafe7d81f", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,7 +1,7 @@\n //! This pass is overloaded and runs two different lints.\n //!\n-//! - MISSING_DOC_CODE_EXAMPLES: this lint is **UNSTABLE** and looks for public items missing doc-tests\n-//! - PRIVATE_DOC_TESTS: this lint is **STABLE** and looks for private items with doc-tests.\n+//! - MISSING_DOC_CODE_EXAMPLES: this lint is **UNSTABLE** and looks for public items missing doctests\n+//! - PRIVATE_DOC_TESTS: this lint is **STABLE** and looks for private items with doctests.\n \n use super::{span_of_attrs, Pass};\n use crate::clean;"}, {"sha": "efb5df08cafdb33a8d14a3cd1d8c32506ad5af0c", "filename": "src/librustdoc/passes/non_autolinks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -12,7 +12,7 @@ use rustc_session::lint;\n crate const CHECK_NON_AUTOLINKS: Pass = Pass {\n     name: \"check-non-autolinks\",\n     run: check_non_autolinks,\n-    description: \"detects URLS that could be written using angle brackets\",\n+    description: \"detects URLs that could be linkified\",\n };\n \n const URL_REGEX: &str = concat!("}, {"sha": "79f8562c4726df74769fb6bdf6bf63863512f2b0", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -11,7 +11,7 @@ use crate::passes::{ImplStripper, Pass};\n crate const STRIP_HIDDEN: Pass = Pass {\n     name: \"strip-hidden\",\n     run: strip_hidden,\n-    description: \"strips all doc(hidden) items from the output\",\n+    description: \"strips all `#[doc(hidden)]` items from the output\",\n };\n \n /// Strip items marked `#[doc(hidden)]`"}, {"sha": "083f99e4a681a3d67c2f05b9bf2462cc9c521c6d", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -194,6 +194,7 @@ pub enum ItemEnum {\n     },\n     ImportItem(Import),\n \n+    UnionItem(Union),\n     StructItem(Struct),\n     StructFieldItem(Type),\n     EnumItem(Enum),\n@@ -238,6 +239,14 @@ pub struct Module {\n     pub items: Vec<Id>,\n }\n \n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+pub struct Union {\n+    pub generics: Generics,\n+    pub fields_stripped: bool,\n+    pub fields: Vec<Id>,\n+    pub impls: Vec<Id>,\n+}\n+\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Struct {\n     pub struct_type: StructType,\n@@ -270,7 +279,6 @@ pub enum StructType {\n     Plain,\n     Tuple,\n     Unit,\n-    Union,\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]"}, {"sha": "44dacb1ee75bfe7cec185c01b95a327dbfbaf206", "filename": "src/test/rustdoc-json/traits/has_body.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Frustdoc-json%2Ftraits%2Fhas_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Frustdoc-json%2Ftraits%2Fhas_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftraits%2Fhas_body.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,21 @@\n+// @has has_body.json \"$.index[*][?(@.name=='Foo')]\"\n+pub trait Foo {\n+    // @has - \"$.index[*][?(@.name=='no_self')].inner.has_body\" false\n+    fn no_self();\n+    // @has - \"$.index[*][?(@.name=='move_self')].inner.has_body\" false\n+    fn move_self(self);\n+    // @has - \"$.index[*][?(@.name=='ref_self')].inner.has_body\" false\n+    fn ref_self(&self);\n+\n+    // @has - \"$.index[*][?(@.name=='no_self_def')].inner.has_body\" true\n+    fn no_self_def() {}\n+    // @has - \"$.index[*][?(@.name=='move_self_def')].inner.has_body\" true\n+    fn move_self_def(self) {}\n+    // @has - \"$.index[*][?(@.name=='ref_self_def')].inner.has_body\" true\n+    fn ref_self_def(&self) {}\n+}\n+\n+pub trait Bar: Clone {\n+    // @has - \"$.index[*][?(@.name=='method')].inner.has_body\" false\n+    fn method(&self, param: usize);\n+}"}, {"sha": "ac2eb797791f33c52e29481a58a04451f906df7e", "filename": "src/test/rustdoc-json/unions/union.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Frustdoc-json%2Funions%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Frustdoc-json%2Funions%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Funions%2Funion.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,7 @@\n+// @has union.json \"$.index[*][?(@.name=='Union')].visibility\" \\\"public\\\"\n+// @has - \"$.index[*][?(@.name=='Union')].kind\" \\\"union\\\"\n+// @!has - \"$.index[*][?(@.name=='Union')].inner.struct_type\"\n+pub union Union {\n+    int: i32,\n+    float: f32,\n+}"}, {"sha": "fae7ab7fe331969f16637fa25ab3878db28729e1", "filename": "src/test/ui/allocator/object-safe.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fallocator%2Fobject-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fallocator%2Fobject-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fobject-safe.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+\n+// Check that `Allocator` is object safe, this allows for polymorphic allocators\n+\n+#![feature(allocator_api)]\n+\n+use std::alloc::{Allocator, System};\n+\n+fn ensure_object_safe(_: &dyn Allocator) {}\n+\n+fn main() {\n+    ensure_object_safe(&System);\n+}"}, {"sha": "12942eabdf7b533cfec963112204273d9097f665", "filename": "src/test/ui/attributes/key-value-non-ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,4 +1,4 @@\n #![feature(rustc_attrs)]\n \n-#[rustc_dummy = b\"\ufb03.rs\"] //~ ERROR byte constant must be ASCII\n+#[rustc_dummy = b\"\ufb03.rs\"] //~ ERROR non-ASCII character in byte constant\n fn main() {}"}, {"sha": "1d4b0d5b2b130e7dd5123e042de82cf692ccdb16", "filename": "src/test/ui/attributes/key-value-non-ascii.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,8 +1,11 @@\n-error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n+error: non-ASCII character in byte constant\n   --> $DIR/key-value-non-ascii.rs:3:19\n    |\n LL | #[rustc_dummy = b\"\ufb03.rs\"]\n    |                   ^\n+   |                   |\n+   |                   byte constant must be ASCII\n+   |                   help: use a \\xHH escape for a non-ASCII byte: `\\xFB03`\n \n error: aborting due to previous error\n "}, {"sha": "0cfd0a0b9784c9d2b7b736825c0a607aa4c23b07", "filename": "src/test/ui/feature-gates/feature-gate-relaxed_struct_unsize.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,10 @@\n+// Test that we allow unsizing even if there is an unchanged param in the\n+// field getting unsized.\n+struct A<T, U: ?Sized + 'static>(T, B<T, U>);\n+struct B<T, U: ?Sized>(T, U);\n+\n+fn main() {\n+    let x: A<[u32; 1], [u32; 1]> = A([0; 1], B([0; 1], [0; 1]));\n+    let y: &A<[u32; 1], [u32]> = &x; //~ ERROR mismatched types\n+    assert_eq!(y.1.1.len(), 1);\n+}"}, {"sha": "f62def47726f92c4e1c5bdccbbd5efc0664428bc", "filename": "src/test/ui/feature-gates/feature-gate-relaxed_struct_unsize.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/feature-gate-relaxed_struct_unsize.rs:8:34\n+   |\n+LL |     let y: &A<[u32; 1], [u32]> = &x;\n+   |            -------------------   ^^ expected slice `[u32]`, found array `[u32; 1]`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected reference `&A<[u32; 1], [u32]>`\n+              found reference `&A<[u32; 1], [u32; 1]>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "2c543455b6ebdf437e1ee99545308a71a5ecf339", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path-undeclared-lifetime.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,12 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait X {\n+  type Y<'x>;\n+}\n+\n+fn main() {\n+  fn _f(arg : Box<dyn for<'a> X<Y<'x> = &'a [u32]>>) {}\n+    //~^ ERROR: use of undeclared lifetime name `'x`\n+    //~| ERROR: binding for associated type `Y` references lifetime\n+}"}, {"sha": "1c7c107d78354d60c1f22872d04eed0830c8509e", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path-undeclared-lifetime.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,29 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0261]: use of undeclared lifetime name `'x`\n+  --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:9:35\n+   |\n+LL |   fn _f(arg : Box<dyn for<'a> X<Y<'x> = &'a [u32]>>) {}\n+   |        -                          ^^ undeclared lifetime\n+   |        |\n+   |        help: consider introducing lifetime `'x` here: `<'x>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+\n+error[E0582]: binding for associated type `Y` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:9:33\n+   |\n+LL |   fn _f(arg : Box<dyn for<'a> X<Y<'x> = &'a [u32]>>) {}\n+   |                                 ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0261, E0582.\n+For more information about an error, try `rustc --explain E0261`."}, {"sha": "2dbd1840dec55da18cf6676424d4f8251cab693c", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+#![feature(associated_type_defaults)]\n+\n+trait Foo {\n+    type A<'a> where Self: 'a;\n+}\n+\n+struct Fooy;\n+\n+impl Foo for Fooy {\n+    type A<'a> = &'a ();\n+}\n+\n+#[derive(Clone)]\n+struct Fooer<T>(T);\n+\n+impl<T> Foo for Fooer<T> {\n+    type A<'x> where T: 'x = &'x ();\n+}\n+\n+fn f(_arg : Box<dyn for<'a> Foo<A<'a> = &'a ()>>) {}\n+\n+\n+fn main() {\n+  let foo = Fooer(5);\n+  f(Box::new(foo));\n+}"}, {"sha": "f3769827f04b251808d8ed2e4a2ecacc2eeba42c", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/gat-in-trait-path.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "cff5a21052f9bc98eeca3f4551e83d5da10f88de", "filename": "src/test/ui/generic-associated-types/gat-trait-path-generic-type-arg.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,16 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait Foo {\n+    type F<'a>;\n+\n+    fn identity<'a>(t: &'a Self::F<'a>) -> &'a Self::F<'a> { t }\n+}\n+\n+impl <T, T1> Foo for T {\n+    type F<T1> = &[u8];\n+      //~^ ERROR: the name `T1` is already used for\n+      //~| ERROR: missing lifetime specifier\n+}\n+\n+fn main() {}"}, {"sha": "e83af1d0c739d1535dc930f44523fc60ebd11e15", "filename": "src/test/ui/generic-associated-types/gat-trait-path-generic-type-arg.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,32 @@\n+error[E0403]: the name `T1` is already used for a generic parameter in this item's generic parameters\n+  --> $DIR/gat-trait-path-generic-type-arg.rs:11:12\n+   |\n+LL | impl <T, T1> Foo for T {\n+   |          -- first use of `T1`\n+LL |     type F<T1> = &[u8];\n+   |            ^^ already used\n+\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/gat-trait-path-generic-type-arg.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/gat-trait-path-generic-type-arg.rs:11:18\n+   |\n+LL |     type F<T1> = &[u8];\n+   |                  ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     type F<'a, T1> = &'a [u8];\n+   |            ^^^       ^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0106, E0403.\n+For more information about an error, try `rustc --explain E0106`."}, {"sha": "e69e355ba48e53099b4af9fdeebac414b4d09737", "filename": "src/test/ui/generic-associated-types/gat-trait-path-missing-lifetime.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,18 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait X {\n+  type Y<'a>;\n+    //~^ ERROR missing generics for\n+    //~| ERROR missing generics for\n+\n+  fn foo<'a>(t : Self::Y<'a>) -> Self::Y<'a> { t }\n+}\n+\n+impl<T> X for T {\n+  fn foo<'a, T1: X<Y = T1>>(t : T1) -> T1::Y<'a> {\n+    t\n+  }\n+}\n+\n+fn main() {}"}, {"sha": "9c6e2ce3e17a36309a219587f09029b3b4a5c980", "filename": "src/test/ui/generic-associated-types/gat-trait-path-missing-lifetime.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,44 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0107]: missing generics for associated type `X::Y`\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:5:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:5:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^ --\n+help: use angle brackets to add missing lifetime argument\n+   |\n+LL |   type Y<'a><'a>;\n+   |         ^^^^\n+\n+error[E0107]: missing generics for associated type `X::Y`\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:5:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:5:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^ --\n+help: use angle brackets to add missing lifetime argument\n+   |\n+LL |   type Y<'a><'a>;\n+   |         ^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "bb1f27a17ca4c4c837fe8f3b18ca86dcd137ca06", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,15 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait X {\n+  type Y<'a>;\n+    //~^ ERROR this associated type\n+    //~| ERROR this associated type\n+}\n+\n+fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n+  //~^ ERROR: lifetime in trait object type must be followed by `+`\n+  //~| ERROR: parenthesized generic arguments cannot be used\n+  //~| WARNING: trait objects without an explicit `dyn` are deprecated\n+\n+fn main() {}"}, {"sha": "20cb6d8828755be5e2bbd425d3243d43f7b8dee2", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,68 @@\n+error: lifetime in trait object type must be followed by `+`\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:10:29\n+   |\n+LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n+   |                             ^^\n+\n+error: parenthesized generic arguments cannot be used in associated type constraints\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:10:27\n+   |\n+LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n+   |                           ^^^^^\n+\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:10:29\n+   |\n+LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n+   |                             ^^ help: use `dyn`: `dyn 'a`\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+\n+error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^ --\n+help: add missing lifetime argument\n+   |\n+LL | fn foo<'a>(arg: Box<dyn X<Y('a'a) = &'a ()>>) {}\n+   |                             ^^\n+\n+error[E0107]: this associated type takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8\n+   |\n+LL |     type Y<'a>;\n+   |  ________^-\n+   | |        |\n+   | |        expected 0 type arguments\n+LL | |\n+LL | |\n+LL | | }\n+LL | |\n+LL | | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n+   | |_________________________________________- help: remove these generics\n+   |\n+note: associated type defined here, with 0 type parameters\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^\n+\n+error: aborting due to 4 previous errors; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "ff38b3e93eb1aec3b617b64cd22f27e8cead4c09", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait X {\n+    type Y<'a>;\n+}\n+\n+fn _func1<'a>(_x: Box<dyn X<Y<'a>=&'a ()>>) {}\n+\n+fn main() {}"}, {"sha": "0fbf704df76a188ad1e28995b1c4ae2095ebd5b6", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-67510-pass.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "62b22089f917c73ac927105432d37654d1a16e95", "filename": "src/test/ui/generic-associated-types/issue-67510.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,13 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait X {\n+    type Y<'a>;\n+}\n+\n+fn f(x: Box<dyn X<Y<'a>=&'a ()>>) {}\n+  //~^ ERROR: use of undeclared lifetime name `'a`\n+  //~| ERROR: use of undeclared lifetime name `'a`\n+\n+\n+fn main() {}"}, {"sha": "12755c56974f2a82e08d711ef268865d6370e3e6", "filename": "src/test/ui/generic-associated-types/issue-67510.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,32 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-67510.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/issue-67510.rs:8:21\n+   |\n+LL | fn f(x: Box<dyn X<Y<'a>=&'a ()>>) {}\n+   |     -               ^^ undeclared lifetime\n+   |     |\n+   |     help: consider introducing lifetime `'a` here: `<'a>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/issue-67510.rs:8:26\n+   |\n+LL | fn f(x: Box<dyn X<Y<'a>=&'a ()>>) {}\n+   |     -                    ^^ undeclared lifetime\n+   |     |\n+   |     help: consider introducing lifetime `'a` here: `<'a>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0261`."}, {"sha": "f294b22f73c6715efad3de35dfddf4ebf4dc074a", "filename": "src/test/ui/generic-associated-types/issue-68648-1.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+\n+trait Fun {\n+    type F<'a>;\n+\n+    fn identity<'a>(t: Self::F<'a>) -> Self::F<'a> { t }\n+}\n+\n+impl <T> Fun for T {\n+    type F<'a> = Self;\n+}\n+\n+fn bug<'a, T: for<'b> Fun<F<'b> = T>>(t: T) -> T::F<'a> {\n+    T::identity(t)\n+}\n+\n+\n+fn main() {\n+    let x = 10;\n+\n+    bug(x);\n+}"}, {"sha": "322a8f9e13f811209bb3ca880756be8e6c6971a7", "filename": "src/test/ui/generic-associated-types/issue-68648-1.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68648-1.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "e55bfcd4ba295f7bf77f0dceaea1c6cd6796b3c9", "filename": "src/test/ui/generic-associated-types/issue-68648-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,24 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait Fun {\n+    type F<'a>;\n+\n+    fn identity<'a>(t: Self::F<'a>) -> Self::F<'a> { t }\n+}\n+\n+impl <T> Fun for T {\n+    type F<'a> = Self;\n+}\n+\n+fn bug<'a, T: Fun<F<'a> = T>>(t: T) -> T::F<'a> {\n+    T::identity(())\n+      //~^ ERROR: mismatched types\n+}\n+\n+\n+fn main() {\n+    let x = 10;\n+\n+    bug(x);\n+}"}, {"sha": "b51e0bca9f7a96eb58779fa5d03d4679c2010b98", "filename": "src/test/ui/generic-associated-types/issue-68648-2.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68648-2.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-68648-2.rs:15:17\n+   |\n+LL | fn bug<'a, T: Fun<F<'a> = T>>(t: T) -> T::F<'a> {\n+   |            - this type parameter\n+LL |     T::identity(())\n+   |                 ^^ expected type parameter `T`, found `()`\n+   |\n+   = note: expected type parameter `T`\n+                   found unit type `()`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "396315302f74c6b0a4b337bb7f94015bdd57c6d3", "filename": "src/test/ui/generic-associated-types/issue-68649-pass.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait Fun {\n+    type F<'a>;\n+\n+    fn identity<'a>(t: Self::F<'a>) -> Self::F<'a> { t }\n+}\n+\n+impl <T> Fun for T {\n+    type F<'a> = Self;\n+}\n+\n+fn bug<'a, T: Fun<F<'a> = T>>(t: T) -> T::F<'a> {\n+    T::identity(t)\n+}\n+\n+\n+fn main() {\n+    let x = 10;\n+\n+    bug(x);\n+}"}, {"sha": "e4a2f8d2a640190c28ddf045c2c74fe19cb77d34", "filename": "src/test/ui/generic-associated-types/issue-68649-pass.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68649-pass.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "a483da863ff00200d457eda40af404232223b8a3", "filename": "src/test/ui/generic-associated-types/issue-74684-1.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,26 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait Fun {\n+    type F<'a>: ?Sized;\n+\n+    fn identity<'a>(t: &'a Self::F<'a>) -> &'a Self::F<'a> { t }\n+}\n+\n+impl <T> Fun for T {\n+    type F<'a> = [u8];\n+}\n+\n+fn bug<'a, T: ?Sized + Fun<F<'a> = [u8]>>(_ : Box<T>) -> &'static T::F<'a> {\n+    let a = [0; 1];\n+    let _x = T::identity(&a);\n+      //~^ ERROR: `a` does not live long enough\n+    todo!()\n+}\n+\n+\n+fn main() {\n+    let x = 10;\n+\n+    bug(Box::new(x));\n+}"}, {"sha": "651da696827c3c3ccd51c81c98b69e55bb9633f4", "filename": "src/test/ui/generic-associated-types/issue-74684-1.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-74684-1.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/issue-74684-1.rs:16:26\n+   |\n+LL | fn bug<'a, T: ?Sized + Fun<F<'a> = [u8]>>(_ : Box<T>) -> &'static T::F<'a> {\n+   |        -- lifetime `'a` defined here\n+LL |     let a = [0; 1];\n+LL |     let _x = T::identity(&a);\n+   |              ------------^^-\n+   |              |           |\n+   |              |           borrowed value does not live long enough\n+   |              argument requires that `a` is borrowed for `'a`\n+...\n+LL | }\n+   | - `a` dropped here while still borrowed\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "0caf19cb030389096432280999d475d3c1910479", "filename": "src/test/ui/generic-associated-types/issue-74684-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,26 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait Fun {\n+    type F<'a>: ?Sized;\n+\n+    fn identity<'a>(t: &'a Self::F<'a>) -> &'a Self::F<'a> { t }\n+}\n+\n+impl <T> Fun for T {\n+    type F<'a> = i32;\n+}\n+\n+fn bug<'a, T: ?Sized + Fun<F<'a> = [u8]>>(t: Box<T>) -> &'static T::F<'a> {\n+    let a = [0; 1];\n+    let x = T::identity(&a);\n+    todo!()\n+}\n+\n+\n+fn main() {\n+    let x = 10;\n+\n+    bug(Box::new(x));\n+      //~^ ERROR: type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n+}"}, {"sha": "8c3484f9a7300251493aa6b42b31f3d7c52f6e20", "filename": "src/test/ui/generic-associated-types/issue-74684-2.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-74684-2.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0271]: type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n+  --> $DIR/issue-74684-2.rs:24:5\n+   |\n+LL | fn bug<'a, T: ?Sized + Fun<F<'a> = [u8]>>(t: Box<T>) -> &'static T::F<'a> {\n+   |                            ------------ required by this bound in `bug`\n+...\n+LL |     bug(Box::new(x));\n+   |     ^^^ expected slice `[u8]`, found `i32`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "2b4757d8d15edcf8a245263c2b695a6222da93c6", "filename": "src/test/ui/generic-associated-types/issue-76535.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,41 @@\n+#![feature(generic_associated_types)]\n+ //~^ WARNING the feature\n+\n+pub trait SubTrait {}\n+\n+pub trait SuperTrait {\n+    type SubType<'a>: SubTrait;\n+      //~^ ERROR missing generics for associated\n+\n+    fn get_sub<'a>(&'a mut self) -> Self::SubType<'a>;\n+}\n+\n+pub struct SubStruct<'a> {\n+    sup: &'a mut SuperStruct,\n+}\n+\n+impl<'a> SubTrait for SubStruct<'a> {}\n+\n+pub struct SuperStruct {\n+    value: u8,\n+}\n+\n+impl SuperStruct {\n+    pub fn new(value: u8) -> SuperStruct {\n+        SuperStruct { value }\n+    }\n+}\n+\n+impl SuperTrait for SuperStruct {\n+    type SubType<'a> = SubStruct<'a>;\n+\n+    fn get_sub<'a>(&'a mut self) -> Self::SubType<'a> {\n+        SubStruct { sup: self }\n+    }\n+}\n+\n+fn main() {\n+    let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n+      //~^ ERROR the trait\n+      //~| ERROR the trait\n+}"}, {"sha": "ce4875af9c012a04fb3c8900cae4a57d00c253ed", "filename": "src/test/ui/generic-associated-types/issue-76535.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,63 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-76535.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0107]: missing generics for associated type `SuperTrait::SubType`\n+  --> $DIR/issue-76535.rs:7:10\n+   |\n+LL |     type SubType<'a>: SubTrait;\n+   |          ^^^^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-76535.rs:7:10\n+   |\n+LL |     type SubType<'a>: SubTrait;\n+   |          ^^^^^^^ --\n+help: use angle brackets to add missing lifetime argument\n+   |\n+LL |     type SubType<'a><'a>: SubTrait;\n+   |                 ^^^^\n+\n+error[E0038]: the trait `SuperTrait` cannot be made into an object\n+  --> $DIR/issue-76535.rs:38:14\n+   |\n+LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n+   |\n+   = help: consider moving `get_sub` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-76535.rs:10:37\n+   |\n+LL | pub trait SuperTrait {\n+   |           ---------- this trait cannot be made into an object...\n+...\n+LL |     fn get_sub<'a>(&'a mut self) -> Self::SubType<'a>;\n+   |                                     ^^^^^^^^^^^^^^^^^ ...because method `get_sub` references the `Self` type in its return type\n+\n+error[E0038]: the trait `SuperTrait` cannot be made into an object\n+  --> $DIR/issue-76535.rs:38:57\n+   |\n+LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n+   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n+   |\n+   = help: consider moving `get_sub` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-76535.rs:10:37\n+   |\n+LL | pub trait SuperTrait {\n+   |           ---------- this trait cannot be made into an object...\n+...\n+LL |     fn get_sub<'a>(&'a mut self) -> Self::SubType<'a>;\n+   |                                     ^^^^^^^^^^^^^^^^^ ...because method `get_sub` references the `Self` type in its return type\n+   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn SuperTrait<SubType = SubStruct<'_>>>>` for `Box<SuperStruct>`\n+   = note: required by cast to type `Box<dyn SuperTrait<SubType = SubStruct<'_>>>`\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0038, E0107.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "26b38430dd9a5e24de357e1417fd132c3d728588", "filename": "src/test/ui/generic-associated-types/issue-79422.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,47 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait RefCont<'a, T> {\n+    fn t(&'a self) -> &'a T;\n+}\n+\n+impl<'a, T> RefCont<'a, T> for &'a T {\n+    fn t(&'a self) -> &'a T {\n+        self\n+    }\n+}\n+\n+impl<'a, T> RefCont<'a, T> for Box<T> {\n+    fn t(&'a self) -> &'a T {\n+        self.as_ref()\n+    }\n+}\n+\n+trait MapLike<K, V> {\n+    type VRefCont<'a>: RefCont<'a, V>;\n+      //~^ ERROR missing generics\n+    fn get<'a>(&'a self, key: &K) -> Option<Self::VRefCont<'a>>;\n+}\n+\n+impl<K: Ord, V: 'static> MapLike<K, V> for std::collections::BTreeMap<K, V> {\n+    type VRefCont<'a> = &'a V;\n+    fn get<'a>(&'a self, key: &K) -> Option<&'a V> {\n+        std::collections::BTreeMap::get(self, key)\n+    }\n+}\n+\n+struct Source;\n+\n+impl<K, V: Default> MapLike<K, V> for Source {\n+    type VRefCont<'a> = Box<V>;\n+    fn get<'a>(&self, _: &K) -> Option<Box<V>> {\n+        Some(Box::new(V::default()))\n+    }\n+}\n+\n+fn main() {\n+    let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n+        as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n+      //~^ ERROR the trait\n+      //~^^^ ERROR the trait\n+}"}, {"sha": "d2e12962715f0e0eb886521428fba5b13d8eb2a1", "filename": "src/test/ui/generic-associated-types/issue-79422.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,54 @@\n+error[E0107]: missing generics for associated type `MapLike::VRefCont`\n+  --> $DIR/issue-79422.rs:21:10\n+   |\n+LL |     type VRefCont<'a>: RefCont<'a, V>;\n+   |          ^^^^^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-79422.rs:21:10\n+   |\n+LL |     type VRefCont<'a>: RefCont<'a, V>;\n+   |          ^^^^^^^^ --\n+help: use angle brackets to add missing lifetime argument\n+   |\n+LL |     type VRefCont<'a><'a>: RefCont<'a, V>;\n+   |                  ^^^^\n+\n+error[E0038]: the trait `MapLike` cannot be made into an object\n+  --> $DIR/issue-79422.rs:44:12\n+   |\n+LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n+   |\n+   = help: consider moving `get` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-79422.rs:23:38\n+   |\n+LL | trait MapLike<K, V> {\n+   |       ------- this trait cannot be made into an object...\n+...\n+LL |     fn get<'a>(&'a self, key: &K) -> Option<Self::VRefCont<'a>>;\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `get` references the `Self` type in its return type\n+\n+error[E0038]: the trait `MapLike` cannot be made into an object\n+  --> $DIR/issue-79422.rs:43:13\n+   |\n+LL |     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n+   |\n+   = help: consider moving `get` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-79422.rs:23:38\n+   |\n+LL | trait MapLike<K, V> {\n+   |       ------- this trait cannot be made into an object...\n+...\n+LL |     fn get<'a>(&'a self, key: &K) -> Option<Self::VRefCont<'a>>;\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `get` references the `Self` type in its return type\n+   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>>` for `Box<BTreeMap<u8, u8>>`\n+   = note: required by cast to type `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0038, E0107.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "7c1673edc51a4bf522a08ef66c1c288e6f861066", "filename": "src/test/ui/generic-associated-types/issue-80433-reduced.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433-reduced.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433-reduced.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433-reduced.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+struct E {}\n+\n+trait TestMut {\n+    type Output<'a>;\n+    fn test_mut(&mut self) -> Self::Output<'static>;\n+}\n+\n+impl TestMut for E {\n+    type Output<'a> = usize;\n+    fn test_mut(&mut self) -> Self::Output<'static> {\n+        todo!()\n+    }\n+}\n+\n+fn test_simpler<'a>(_: impl TestMut<Output<'a> = usize>) {}\n+\n+fn main() {\n+    test_simpler(E {});\n+}"}, {"sha": "ea65f05de23d74ee763cbb38cbcccbfaa0396322", "filename": "src/test/ui/generic-associated-types/issue-80433.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,35 @@\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+#[derive(Default)]\n+struct E<T> {\n+    data: T,\n+}\n+\n+trait TestMut {\n+    type Output<'a>;\n+      //~^ ERROR missing generics\n+    fn test_mut<'a>(&'a mut self) -> Self::Output<'a>;\n+}\n+\n+impl<T> TestMut for E<T>\n+where\n+    T: 'static,\n+{\n+    type Output<'a> = &'a mut T;\n+    fn test_mut<'a>(&'a mut self) -> Self::Output<'a> {\n+        &mut self.data\n+    }\n+}\n+\n+fn test_simpler<'a>(dst: &'a mut impl TestMut<Output = &'a mut f32>)\n+{\n+    for n in 0i16..100 {\n+        *dst.test_mut() = n.into();\n+    }\n+}\n+\n+fn main() {\n+    let mut t1: E<f32> = Default::default();\n+    test_simpler(&mut t1);\n+}"}, {"sha": "5398920fafdb03ed7249ac34734294b2bf3efd95", "filename": "src/test/ui/generic-associated-types/issue-80433.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,19 @@\n+error[E0107]: missing generics for associated type `TestMut::Output`\n+  --> $DIR/issue-80433.rs:10:10\n+   |\n+LL |     type Output<'a>;\n+   |          ^^^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-80433.rs:10:10\n+   |\n+LL |     type Output<'a>;\n+   |          ^^^^^^ --\n+help: use angle brackets to add missing lifetime argument\n+   |\n+LL |     type Output<'a><'a>;\n+   |                ^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "2d38770bcdff84acd99a9cb4d0e222ea013057bf", "filename": "src/test/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,10 +1,14 @@\n #![feature(generic_associated_types)]\n+  //~^ the feature `generic_associated_types` is incomplete\n \n trait X {\n     type Y<'a>;\n+      //~^ ERROR this associated type\n+      //~| ERROR this associated type\n }\n \n const _: () = {\n   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n-      //~^  ERROR: generic associated types in trait paths are currently not implemented\n };\n+\n+fn main() {}"}, {"sha": "60b8fb9bcaa2314afc466828023eb6d76090d8c0", "filename": "src/test/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.stderr", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,8 +1,49 @@\n-error: generic associated types in trait paths are currently not implemented\n-  --> $DIR/trait-path-type-error-once-implemented.rs:8:30\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/trait-path-type-error-once-implemented.rs:1:12\n    |\n-LL |   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n-   |                              ^^^\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+  --> $DIR/trait-path-type-error-once-implemented.rs:5:10\n+   |\n+LL |     type Y<'a>;\n+   |          ^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/trait-path-type-error-once-implemented.rs:5:10\n+   |\n+LL |     type Y<'a>;\n+   |          ^ --\n+help: add missing lifetime argument\n+   |\n+LL |   fn f2<'a>(arg : Box<dyn X<Y<'a1> = &'a ()>>) {}\n+   |                               ^^\n+\n+error[E0107]: this associated type takes 0 const arguments but 1 const argument was supplied\n+  --> $DIR/trait-path-type-error-once-implemented.rs:5:10\n+   |\n+LL |       type Y<'a>;\n+   |  __________^-\n+   | |          |\n+   | |          expected 0 const arguments\n+LL | |\n+LL | |\n+LL | | }\n+LL | |\n+LL | | const _: () = {\n+LL | |   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n+   | |________________________________- help: remove these generics\n+   |\n+note: associated type defined here, with 0 const parameters\n+  --> $DIR/trait-path-type-error-once-implemented.rs:5:10\n+   |\n+LL |     type Y<'a>;\n+   |          ^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "02d53d5faeec5ae7eca25957f382476010b5315c", "filename": "src/test/ui/generic-associated-types/parse/trait-path-unimplemented.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/730d6dfdddc0f55d9cbeedb29a14b342f74e2a9d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730d6dfdddc0f55d9cbeedb29a14b342f74e2a9d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-unimplemented.rs?ref=730d6dfdddc0f55d9cbeedb29a14b342f74e2a9d", "patch": "@@ -1,17 +0,0 @@\n-#![feature(generic_associated_types)]\n-\n-trait X {\n-    type Y<'a>;\n-}\n-\n-const _: () = {\n-  fn f1<'a>(arg : Box<dyn X<Y<'a> = &'a ()>>) {}\n-      //~^  ERROR: generic associated types in trait paths are currently not implemented\n-};\n-\n-const _: () = {\n-  fn f1<'a>(arg : Box<dyn X<Y('a) = &'a ()>>) {}\n-      //~^  ERROR: lifetime in trait object type must be followed by `+`\n-};\n-\n-fn main() {}"}, {"sha": "1fba9cebd249102dd147136ea193554ce2f32fae", "filename": "src/test/ui/generic-associated-types/parse/trait-path-unimplemented.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/730d6dfdddc0f55d9cbeedb29a14b342f74e2a9d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/730d6dfdddc0f55d9cbeedb29a14b342f74e2a9d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-unimplemented.stderr?ref=730d6dfdddc0f55d9cbeedb29a14b342f74e2a9d", "patch": "@@ -1,14 +0,0 @@\n-error: lifetime in trait object type must be followed by `+`\n-  --> $DIR/trait-path-unimplemented.rs:13:31\n-   |\n-LL |   fn f1<'a>(arg : Box<dyn X<Y('a) = &'a ()>>) {}\n-   |                               ^^\n-\n-error: generic associated types in trait paths are currently not implemented\n-  --> $DIR/trait-path-unimplemented.rs:8:30\n-   |\n-LL |   fn f1<'a>(arg : Box<dyn X<Y<'a> = &'a ()>>) {}\n-   |                              ^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "725c8ad23515e615e6bf717487cf346806a920c8", "filename": "src/test/ui/parser/ascii-only-character-escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n-    let x = \"\\x80\"; //~ ERROR may only be used\n-    let y = \"\\xff\"; //~ ERROR may only be used\n-    let z = \"\\xe2\"; //~ ERROR may only be used\n+    let x = \"\\x80\"; //~ ERROR out of range hex escape\n+    let y = \"\\xff\"; //~ ERROR out of range hex escape\n+    let z = \"\\xe2\"; //~ ERROR out of range hex escape\n     let a = b\"\\x00e2\";  // ok because byte literal\n }"}, {"sha": "b599b35f4b324f0e6b77b85aa17c2e9ca8ca61b8", "filename": "src/test/ui/parser/ascii-only-character-escape.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,20 +1,20 @@\n-error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n+error: out of range hex escape\n   --> $DIR/ascii-only-character-escape.rs:2:14\n    |\n LL |     let x = \"\\x80\";\n-   |              ^^^^\n+   |              ^^^^ must be a character in the range [\\x00-\\x7f]\n \n-error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n+error: out of range hex escape\n   --> $DIR/ascii-only-character-escape.rs:3:14\n    |\n LL |     let y = \"\\xff\";\n-   |              ^^^^\n+   |              ^^^^ must be a character in the range [\\x00-\\x7f]\n \n-error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n+error: out of range hex escape\n   --> $DIR/ascii-only-character-escape.rs:4:14\n    |\n LL |     let z = \"\\xe2\";\n-   |              ^^^^\n+   |              ^^^^ must be a character in the range [\\x00-\\x7f]\n \n error: aborting due to 3 previous errors\n "}, {"sha": "748b4a22253f52301df92a22cf2b848ac6e4726f", "filename": "src/test/ui/parser/bad-char-literals.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -4,17 +4,17 @@\n fn main() {\n     // these literals are just silly.\n     ''';\n-    //~^ ERROR: character constant must be escaped: '\n+    //~^ ERROR: character constant must be escaped: `'`\n \n     // note that this is a literal \"\\n\" byte\n     '\n ';\n-    //~^^ ERROR: character constant must be escaped: \\n\n+    //~^^ ERROR: character constant must be escaped: `\\n`\n \n     // note that this is a literal \"\\r\" byte\n-    '\r'; //~ ERROR: character constant must be escaped: \\r\n+    '\r'; //~ ERROR: character constant must be escaped: `\\r`\n \n     // note that this is a literal tab character here\n     '\t';\n-    //~^ ERROR: character constant must be escaped: \\t\n+    //~^ ERROR: character constant must be escaped: `\\t`\n }"}, {"sha": "a22ddbac1b931803c021b6af1783a552e83ae245", "filename": "src/test/ui/parser/bad-char-literals.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,28 +1,28 @@\n-error: character constant must be escaped: '\n+error: character constant must be escaped: `'`\n   --> $DIR/bad-char-literals.rs:6:6\n    |\n LL |     ''';\n-   |      ^\n+   |      ^ help: escape the character: `\\'`\n \n-error: character constant must be escaped: \\n\n+error: character constant must be escaped: `\\n`\n   --> $DIR/bad-char-literals.rs:10:6\n    |\n LL |       '\n    |  ______^\n LL | | ';\n-   | |_\n+   | |_ help: escape the character: `\\n`\n \n-error: character constant must be escaped: \\r\n+error: character constant must be escaped: `\\r`\n   --> $DIR/bad-char-literals.rs:15:6\n    |\n LL |     '\r';\n-   |      ^\n+   |      ^ help: escape the character: `\\r`\n \n-error: character constant must be escaped: \\t\n+error: character constant must be escaped: `\\t`\n   --> $DIR/bad-char-literals.rs:18:6\n    |\n LL |     '    ';\n-   |      ^^^^\n+   |      ^^^^ help: escape the character: `\\t`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "05a510b24a7aba188168690f68c98723bd54071e", "filename": "src/test/ui/parser/byte-literals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -4,9 +4,9 @@ static FOO: u8 = b'\\f';  //~ ERROR unknown byte escape\n \n pub fn main() {\n     b'\\f';  //~ ERROR unknown byte escape\n-    b'\\x0Z';  //~ ERROR invalid character in numeric character escape: Z\n+    b'\\x0Z';  //~ ERROR invalid character in numeric character escape: `Z`\n     b'\t';  //~ ERROR byte constant must be escaped\n     b''';  //~ ERROR byte constant must be escaped\n-    b'\u00e9';  //~ ERROR byte constant must be ASCII\n+    b'\u00e9';  //~ ERROR non-ASCII character in byte constant\n     b'a  //~ ERROR unterminated byte constant [E0763]\n }"}, {"sha": "55be113e16b99eb4d9fac3a63478a2fa98eedf8c", "filename": "src/test/ui/parser/byte-literals.stderr", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,38 +1,45 @@\n-error: unknown byte escape: f\n+error: unknown byte escape: `f`\n   --> $DIR/byte-literals.rs:3:21\n    |\n LL | static FOO: u8 = b'\\f';\n    |                     ^ unknown byte escape\n+   |\n+   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n \n-error: unknown byte escape: f\n+error: unknown byte escape: `f`\n   --> $DIR/byte-literals.rs:6:8\n    |\n LL |     b'\\f';\n    |        ^ unknown byte escape\n+   |\n+   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n \n-error: invalid character in numeric character escape: Z\n+error: invalid character in numeric character escape: `Z`\n   --> $DIR/byte-literals.rs:7:10\n    |\n LL |     b'\\x0Z';\n-   |          ^\n+   |          ^ invalid character in numeric character escape\n \n-error: byte constant must be escaped: \\t\n+error: byte constant must be escaped: `\\t`\n   --> $DIR/byte-literals.rs:8:7\n    |\n LL |     b'    ';\n-   |       ^^^^\n+   |       ^^^^ help: escape the character: `\\t`\n \n-error: byte constant must be escaped: '\n+error: byte constant must be escaped: `'`\n   --> $DIR/byte-literals.rs:9:7\n    |\n LL |     b''';\n-   |       ^\n+   |       ^ help: escape the character: `\\'`\n \n-error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n+error: non-ASCII character in byte constant\n   --> $DIR/byte-literals.rs:10:7\n    |\n LL |     b'\u00e9';\n    |       ^\n+   |       |\n+   |       byte constant must be ASCII\n+   |       help: use a \\xHH escape for a non-ASCII byte: `\\xE9`\n \n error[E0763]: unterminated byte constant\n   --> $DIR/byte-literals.rs:11:6"}, {"sha": "b1f11024a7bb6cdcd5bad76e2311a085b3a82b18", "filename": "src/test/ui/parser/byte-string-literals.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -2,7 +2,8 @@ static FOO: &'static [u8] = b\"\\f\";  //~ ERROR unknown byte escape\n \n pub fn main() {\n     b\"\\f\";  //~ ERROR unknown byte escape\n-    b\"\\x0Z\";  //~ ERROR invalid character in numeric character escape: Z\n-    b\"\u00e9\";  //~ ERROR byte constant must be ASCII\n+    b\"\\x0Z\";  //~ ERROR invalid character in numeric character escape: `Z`\n+    b\"\u00e9\";  //~ ERROR non-ASCII character in byte constant\n+    br##\"\u00e9\"##;  //~ ERROR raw byte string must be ASCII\n     b\"a  //~ ERROR unterminated double quote byte string\n }"}, {"sha": "3a5a8b331d339dd1db09b29745c6dbfeb6875089", "filename": "src/test/ui/parser/byte-string-literals.stderr", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,35 +1,48 @@\n-error: unknown byte escape: f\n+error: unknown byte escape: `f`\n   --> $DIR/byte-string-literals.rs:1:32\n    |\n LL | static FOO: &'static [u8] = b\"\\f\";\n    |                                ^ unknown byte escape\n+   |\n+   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n \n-error: unknown byte escape: f\n+error: unknown byte escape: `f`\n   --> $DIR/byte-string-literals.rs:4:8\n    |\n LL |     b\"\\f\";\n    |        ^ unknown byte escape\n+   |\n+   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n \n-error: invalid character in numeric character escape: Z\n+error: invalid character in numeric character escape: `Z`\n   --> $DIR/byte-string-literals.rs:5:10\n    |\n LL |     b\"\\x0Z\";\n-   |          ^\n+   |          ^ invalid character in numeric character escape\n \n-error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n+error: non-ASCII character in byte constant\n   --> $DIR/byte-string-literals.rs:6:7\n    |\n LL |     b\"\u00e9\";\n    |       ^\n+   |       |\n+   |       byte constant must be ASCII\n+   |       help: use a \\xHH escape for a non-ASCII byte: `\\xE9`\n+\n+error: raw byte string must be ASCII\n+  --> $DIR/byte-string-literals.rs:7:10\n+   |\n+LL |     br##\"\u00e9\"##;\n+   |          ^ must be ASCII\n \n error[E0766]: unterminated double quote byte string\n-  --> $DIR/byte-string-literals.rs:7:6\n+  --> $DIR/byte-string-literals.rs:8:6\n    |\n LL |       b\"a\n    |  ______^\n LL | | }\n    | |__^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0766`."}, {"sha": "c1355f0d6fe0c4a6955483a5b1737e3c0988a70e", "filename": "src/test/ui/parser/issue-23620-invalid-escapes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,9 +1,9 @@\n fn main() {\n     let _ = b\"\\u{a66e}\";\n-    //~^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n+    //~^ ERROR unicode escape in byte string\n \n     let _ = b'\\u{a66e}';\n-    //~^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n+    //~^ ERROR unicode escape in byte string\n \n     let _ = b'\\u';\n     //~^ ERROR incorrect unicode escape sequence\n@@ -12,21 +12,21 @@ fn main() {\n     //~^ ERROR numeric character escape is too short\n \n     let _ = b'\\xxy';\n-    //~^ ERROR invalid character in numeric character escape: x\n+    //~^ ERROR invalid character in numeric character escape: `x`\n \n     let _ = '\\x5';\n     //~^ ERROR numeric character escape is too short\n \n     let _ = '\\xxy';\n-    //~^ ERROR invalid character in numeric character escape: x\n+    //~^ ERROR invalid character in numeric character escape: `x`\n \n     let _ = b\"\\u{a4a4} \\xf \\u\";\n-    //~^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n-    //~^^ ERROR invalid character in numeric character escape:\n+    //~^ ERROR unicode escape in byte string\n+    //~^^ ERROR invalid character in numeric character escape: ` `\n     //~^^^ ERROR incorrect unicode escape sequence\n \n     let _ = \"\\xf \\u\";\n-    //~^ ERROR invalid character in numeric character escape:\n+    //~^ ERROR invalid character in numeric character escape: ` `\n     //~^^ ERROR incorrect unicode escape sequence\n \n     let _ = \"\\u8f\";"}, {"sha": "88d97c795fc2a30f8bde096b5651858c88ea5c72", "filename": "src/test/ui/parser/issue-23620-invalid-escapes.stderr", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,14 +1,18 @@\n-error: unicode escape sequences cannot be used as a byte or in a byte string\n+error: unicode escape in byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:2:15\n    |\n LL |     let _ = b\"\\u{a66e}\";\n-   |               ^^^^^^^^\n+   |               ^^^^^^^^ unicode escape in byte string\n+   |\n+   = help: unicode escape sequences cannot be used as a byte or in a byte string\n \n-error: unicode escape sequences cannot be used as a byte or in a byte string\n+error: unicode escape in byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:5:15\n    |\n LL |     let _ = b'\\u{a66e}';\n-   |               ^^^^^^^^\n+   |               ^^^^^^^^ unicode escape in byte string\n+   |\n+   = help: unicode escape sequences cannot be used as a byte or in a byte string\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:8:15\n@@ -24,35 +28,37 @@ error: numeric character escape is too short\n LL |     let _ = b'\\x5';\n    |               ^^^\n \n-error: invalid character in numeric character escape: x\n+error: invalid character in numeric character escape: `x`\n   --> $DIR/issue-23620-invalid-escapes.rs:14:17\n    |\n LL |     let _ = b'\\xxy';\n-   |                 ^\n+   |                 ^ invalid character in numeric character escape\n \n error: numeric character escape is too short\n   --> $DIR/issue-23620-invalid-escapes.rs:17:14\n    |\n LL |     let _ = '\\x5';\n    |              ^^^\n \n-error: invalid character in numeric character escape: x\n+error: invalid character in numeric character escape: `x`\n   --> $DIR/issue-23620-invalid-escapes.rs:20:16\n    |\n LL |     let _ = '\\xxy';\n-   |                ^\n+   |                ^ invalid character in numeric character escape\n \n-error: unicode escape sequences cannot be used as a byte or in a byte string\n+error: unicode escape in byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:23:15\n    |\n LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n-   |               ^^^^^^^^\n+   |               ^^^^^^^^ unicode escape in byte string\n+   |\n+   = help: unicode escape sequences cannot be used as a byte or in a byte string\n \n-error: invalid character in numeric character escape:  \n+error: invalid character in numeric character escape: ` `\n   --> $DIR/issue-23620-invalid-escapes.rs:23:27\n    |\n LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n-   |                           ^\n+   |                           ^ invalid character in numeric character escape\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:23:28\n@@ -62,11 +68,11 @@ LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |\n    = help: format of unicode escape sequences is `\\u{...}`\n \n-error: invalid character in numeric character escape:  \n+error: invalid character in numeric character escape: ` `\n   --> $DIR/issue-23620-invalid-escapes.rs:28:17\n    |\n LL |     let _ = \"\\xf \\u\";\n-   |                 ^\n+   |                 ^ invalid character in numeric character escape\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:28:18"}, {"sha": "baf998035178b55e43a493d37f27d2e9200def00", "filename": "src/test/ui/parser/issue-43692.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fissue-43692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fissue-43692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-43692.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,8 +1,8 @@\n-error: invalid start of unicode escape\n+error: invalid start of unicode escape: `_`\n   --> $DIR/issue-43692.rs:2:9\n    |\n LL |     '\\u{_10FFFF}';\n-   |         ^\n+   |         ^ invalid start of unicode escape\n \n error: aborting due to previous error\n "}, {"sha": "6f385e8dc1777f22fe86459a7dad30d57560f4db", "filename": "src/test/ui/parser/issue-62913.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fissue-62913.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fissue-62913.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62913.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -10,7 +10,7 @@ error: invalid trailing slash in literal\n   --> $DIR/issue-62913.rs:1:5\n    |\n LL | \"\\u\\\"\n-   |     ^\n+   |     ^ invalid trailing slash in literal\n \n error: expected item, found `\"\\u\\\"`\n   --> $DIR/issue-62913.rs:1:1"}, {"sha": "ac042580962807b3ad8421cec438cf016b5db29b", "filename": "src/test/ui/parser/issue-64732.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fissue-64732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fissue-64732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-64732.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,13 +1,13 @@\n error: character literal may only contain one codepoint\n-  --> $DIR/issue-64732.rs:3:17\n+  --> $DIR/issue-64732.rs:3:16\n    |\n LL |     let _foo = b'hello\\0';\n-   |                 ^^^^^^^^^\n+   |                ^^^^^^^^^^\n    |\n help: if you meant to write a byte string literal, use double quotes\n    |\n LL |     let _foo = b\"hello\\0\";\n-   |                 ^^^^^^^^^\n+   |                ^^^^^^^^^^\n \n error: character literal may only contain one codepoint\n   --> $DIR/issue-64732.rs:6:16"}, {"sha": "ed129a1d13388189766ebed2270a0f565121972b", "filename": "src/test/ui/parser/lex-bad-char-literals-1.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -10,17 +10,21 @@ error: numeric character escape is too short\n LL |     \"\\x1\"\n    |      ^^^\n \n-error: unknown character escape: \\u{25cf}\n+error: unknown character escape: `\\u{25cf}`\n   --> $DIR/lex-bad-char-literals-1.rs:10:7\n    |\n LL |     '\\\u25cf'\n    |       ^ unknown character escape\n+   |\n+   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n \n-error: unknown character escape: \\u{25cf}\n+error: unknown character escape: `\\u{25cf}`\n   --> $DIR/lex-bad-char-literals-1.rs:14:7\n    |\n LL |     \"\\\u25cf\"\n    |       ^ unknown character escape\n+   |\n+   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c675df2f3ccd095fc2630b051b3e5d12faf849aa", "filename": "src/test/ui/parser/lex-bad-char-literals-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     let _: char = '';\n     //~^ ERROR: empty character literal\n     let _: char = '\\u{}';\n-    //~^ ERROR: empty unicode escape (must have at least 1 hex digit)\n+    //~^ ERROR: empty unicode escape\n \n     // Next two are OK, but may befool error recovery\n     let _ = '/';"}, {"sha": "255b9c689999930a86b46ae85320d425b15fa413", "filename": "src/test/ui/parser/lex-bad-char-literals-7.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -2,13 +2,13 @@ error: empty character literal\n   --> $DIR/lex-bad-char-literals-7.rs:2:20\n    |\n LL |     let _: char = '';\n-   |                    ^\n+   |                    ^ empty character literal\n \n-error: empty unicode escape (must have at least 1 hex digit)\n+error: empty unicode escape\n   --> $DIR/lex-bad-char-literals-7.rs:4:20\n    |\n LL |     let _: char = '\\u{}';\n-   |                    ^^^^\n+   |                    ^^^^ this escape must have at least 1 hex digit\n \n error[E0762]: unterminated character literal\n   --> $DIR/lex-bad-char-literals-7.rs:11:13"}, {"sha": "b7752e1f0c45fe2800dbfe86022dd010ce8db515", "filename": "src/test/ui/parser/lex-bare-cr-string-literal-doc-comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -22,5 +22,5 @@ fn main() {\n     let _s = r\"bar\rfoo\"; //~ ERROR: bare CR not allowed in raw string\n \n     // the following string literal has a bare CR in it\n-    let _s = \"foo\\\rbar\"; //~ ERROR: unknown character escape: \\r\n+    let _s = \"foo\\\rbar\"; //~ ERROR: unknown character escape: `\\r`\n }"}, {"sha": "1a21fed63bdec3e6af6e841565762b40b68d6e15", "filename": "src/test/ui/parser/lex-bare-cr-string-literal-doc-comment.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -22,19 +22,19 @@ error: bare CR not allowed in block doc-comment\n LL |     /*! block doc comment with bare CR: '\r' */\n    |                                          ^\n \n-error: bare CR not allowed in string, use \\r instead\n+error: bare CR not allowed in string, use `\\r` instead\n   --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:19:18\n    |\n LL |     let _s = \"foo\rbar\";\n-   |                  ^\n+   |                  ^ help: escape the character: `\\r`\n \n error: bare CR not allowed in raw string\n   --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:22:19\n    |\n LL |     let _s = r\"bar\rfoo\";\n    |                   ^\n \n-error: unknown character escape: \\r\n+error: unknown character escape: `\\r`\n   --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:25:19\n    |\n LL |     let _s = \"foo\\\rbar\";"}, {"sha": "e874f62497ea8a245cabe405775057870c1cb6bf", "filename": "src/test/ui/parser/macro/literals-are-validated-before-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fliterals-are-validated-before-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fliterals-are-validated-before-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fliterals-are-validated-before-expansion.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -2,15 +2,15 @@ error: invalid unicode character escape\n   --> $DIR/literals-are-validated-before-expansion.rs:6:20\n    |\n LL |     black_hole! { '\\u{FFFFFF}' }\n-   |                    ^^^^^^^^^^\n+   |                    ^^^^^^^^^^ invalid escape\n    |\n    = help: unicode escape must be at most 10FFFF\n \n error: invalid unicode character escape\n   --> $DIR/literals-are-validated-before-expansion.rs:8:39\n    |\n LL |     black_hole! { \"this is surrogate: \\u{DAAA}\" }\n-   |                                       ^^^^^^^^\n+   |                                       ^^^^^^^^ invalid escape\n    |\n    = help: unicode escape must not be a surrogate\n "}, {"sha": "d6a54660ea6e8b539f7b57629977d70b6bf87214", "filename": "src/test/ui/parser/new-unicode-escapes-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,3 +1,3 @@\n pub fn main() {\n-    let s = \"\\u{2603\"; //~ ERROR unterminated unicode escape (needed a `}`)\n+    let s = \"\\u{2603\"; //~ ERROR unterminated unicode escape\n }"}, {"sha": "1ffdc0401e59c9d6248d08933da62e6fb9a3448d", "filename": "src/test/ui/parser/new-unicode-escapes-1.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,8 +1,13 @@\n-error: unterminated unicode escape (needed a `}`)\n+error: unterminated unicode escape\n   --> $DIR/new-unicode-escapes-1.rs:2:14\n    |\n LL |     let s = \"\\u{2603\";\n-   |              ^^^^^^^\n+   |              ^^^^^^^ missing a closing `}`\n+   |\n+help: terminate the unicode escape\n+   |\n+LL |     let s = \"\\u{2603}\";\n+   |                     ^\n \n error: aborting due to previous error\n "}, {"sha": "cbb614c19c0048e8d0d083e55a4a0e59691bbc9e", "filename": "src/test/ui/parser/new-unicode-escapes-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,3 +1,3 @@\n pub fn main() {\n-    let s = \"\\u{260311111111}\"; //~ ERROR overlong unicode escape (must have at most 6 hex digits)\n+    let s = \"\\u{260311111111}\"; //~ ERROR overlong unicode escape\n }"}, {"sha": "2f3f8c0f9dae500450d370778f70f6ac5f338cb4", "filename": "src/test/ui/parser/new-unicode-escapes-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,8 +1,8 @@\n-error: overlong unicode escape (must have at most 6 hex digits)\n+error: overlong unicode escape\n   --> $DIR/new-unicode-escapes-2.rs:2:14\n    |\n LL |     let s = \"\\u{260311111111}\";\n-   |              ^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^ must have at most 6 hex digits\n \n error: aborting due to previous error\n "}, {"sha": "f5a0f8fc785c59e23e04a078bd506358a6000f8f", "filename": "src/test/ui/parser/new-unicode-escapes-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-3.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -2,15 +2,15 @@ error: invalid unicode character escape\n   --> $DIR/new-unicode-escapes-3.rs:2:15\n    |\n LL |     let s1 = \"\\u{d805}\";\n-   |               ^^^^^^^^\n+   |               ^^^^^^^^ invalid escape\n    |\n    = help: unicode escape must not be a surrogate\n \n error: invalid unicode character escape\n   --> $DIR/new-unicode-escapes-3.rs:3:15\n    |\n LL |     let s2 = \"\\u{ffffff}\";\n-   |               ^^^^^^^^^^\n+   |               ^^^^^^^^^^ invalid escape\n    |\n    = help: unicode escape must be at most 10FFFF\n "}, {"sha": "79882713e59a26457978cf0272aa9b1775de836a", "filename": "src/test/ui/parser/new-unicode-escapes-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,4 +1,4 @@\n pub fn main() {\n     let s = \"\\u{lol}\";\n-     //~^ ERROR invalid character in unicode escape: l\n+     //~^ ERROR invalid character in unicode escape: `l`\n }"}, {"sha": "514591af17e6e44d9dd6bcc21949b23934057bf9", "filename": "src/test/ui/parser/new-unicode-escapes-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,8 +1,8 @@\n-error: invalid character in unicode escape: l\n+error: invalid character in unicode escape: `l`\n   --> $DIR/new-unicode-escapes-4.rs:2:17\n    |\n LL |     let s = \"\\u{lol}\";\n-   |                 ^\n+   |                 ^ invalid character in unicode escape\n \n error: aborting due to previous error\n "}, {"sha": "cfc877104bd9f37b3857cec8a7cb5fbe0f2c1fd3", "filename": "src/test/ui/parser/raw/raw-byte-string-literals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-byte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-byte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-byte-string-literals.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -8,7 +8,7 @@ error: raw byte string must be ASCII\n   --> $DIR/raw-byte-string-literals.rs:5:8\n    |\n LL |     br\"\u00e9\";\n-   |        ^\n+   |        ^ must be ASCII\n \n error: found invalid character; only `#` is allowed in raw string delimitation: ~\n   --> $DIR/raw-byte-string-literals.rs:6:5"}, {"sha": "5d3c31944064a974e585c1be0d849adcf5fdd66a", "filename": "src/test/ui/parser/trailing-carriage-return-in-string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -8,7 +8,7 @@ fn main() {\n  a test\";\n     // \\r only\n     let bad = \"This is \\\r a test\";\n-    //~^ ERROR unknown character escape: \\r\n-    //~^^ HELP this is an isolated carriage return\n+    //~^ ERROR unknown character escape: `\\r`\n+    //~| HELP this is an isolated carriage return\n \n }"}, {"sha": "8a44e02707ce5a8ec7f0e994a068fb7981731ec0", "filename": "src/test/ui/parser/trailing-carriage-return-in-string.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,4 +1,4 @@\n-error: unknown character escape: \\r\n+error: unknown character escape: `\\r`\n   --> $DIR/trailing-carriage-return-in-string.rs:10:25\n    |\n LL |     let bad = \"This is \\\r a test\";"}, {"sha": "8e5258acd49da9109df24506208dca04c543bf21", "filename": "src/test/ui/parser/wrong-escape-of-curly-braces.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,8 +1,8 @@\n fn main() {\n     let ok = \"{{everything fine}}\";\n     let bad = \"\\{it is wrong\\}\";\n-    //~^  ERROR unknown character escape: {\n-    //~^^  HELP if used in a formatting string, curly braces are escaped with `{{` and `}}`\n-    //~^^^ ERROR unknown character escape: }\n-    //~^^^^  HELP if used in a formatting string, curly braces are escaped with `{{` and `}}`\n+    //~^  ERROR unknown character escape: `{`\n+    //~|  HELP if used in a formatting string, curly braces are escaped with `{{` and `}}`\n+    //~| ERROR unknown character escape: `}`\n+    //~| HELP if used in a formatting string, curly braces are escaped with `{{` and `}}`\n }"}, {"sha": "ff1a2fb0f3c67be6f5f525e9f885613e846a6bda", "filename": "src/test/ui/parser/wrong-escape-of-curly-braces.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -1,12 +1,12 @@\n-error: unknown character escape: {\n+error: unknown character escape: `{`\n   --> $DIR/wrong-escape-of-curly-braces.rs:3:17\n    |\n LL |     let bad = \"\\{it is wrong\\}\";\n    |                 ^ unknown character escape\n    |\n    = help: if used in a formatting string, curly braces are escaped with `{{` and `}}`\n \n-error: unknown character escape: }\n+error: unknown character escape: `}`\n   --> $DIR/wrong-escape-of-curly-braces.rs:3:30\n    |\n LL |     let bad = \"\\{it is wrong\\}\";"}, {"sha": "83199e8112e71d2ad12245d61793e49d91e142bc", "filename": "src/test/ui/unsized/unchanged-param.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -0,0 +1,12 @@\n+#![feature(relaxed_struct_unsize)]\n+// run-pass\n+// Test that we allow unsizing even if there is an unchanged param in the\n+// field getting unsized.\n+struct A<T, U: ?Sized + 'static>(T, B<T, U>);\n+struct B<T, U: ?Sized>(T, U);\n+\n+fn main() {\n+    let x: A<[u32; 1], [u32; 1]> = A([0; 1], B([0; 1], [0; 1]));\n+    let y: &A<[u32; 1], [u32]> = &x;\n+    assert_eq!(y.1.1.len(), 1);\n+}"}, {"sha": "cd9d530096496b4adb7036755c1477e02599bbac", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9435f4c92651d67d5dbaba13c5606c4c4fc1327/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=f9435f4c92651d67d5dbaba13c5606c4c4fc1327", "patch": "@@ -218,25 +218,19 @@ fn handle_run(socket: TcpStream, work: &Path, tmp: &Path, lock: &Mutex<()>, conf\n     cmd.args(args);\n     cmd.envs(env);\n \n+    // On windows, libraries are just searched in the executable directory,\n+    // system directories, PWD, and PATH, in that order. PATH is the only one\n+    // we can change for this.\n+    let library_path = if cfg!(windows) { \"PATH\" } else { \"LD_LIBRARY_PATH\" };\n+\n     // Support libraries were uploaded to `work` earlier, so make sure that's\n     // in `LD_LIBRARY_PATH`. Also include our own current dir which may have\n     // had some libs uploaded.\n-    if cfg!(windows) {\n-        // On windows, libraries are just searched in the executable directory,\n-        // system directories, PWD, and PATH, in that order. PATH is the only one\n-        // we can change for this.\n-        cmd.env(\n-            \"PATH\",\n-            env::join_paths(\n-                std::iter::once(work.to_owned())\n-                    .chain(std::iter::once(path.clone()))\n-                    .chain(env::split_paths(&env::var_os(\"PATH\").unwrap())),\n-            )\n-            .unwrap(),\n-        );\n-    } else {\n-        cmd.env(\"LD_LIBRARY_PATH\", format!(\"{}:{}\", work.display(), path.display()));\n+    let mut paths = vec![work.to_owned(), path.clone()];\n+    if let Some(library_path) = env::var_os(library_path) {\n+        paths.extend(env::split_paths(&library_path));\n     }\n+    cmd.env(library_path, env::join_paths(paths).unwrap());\n \n     // Some tests assume RUST_TEST_TMPDIR exists\n     cmd.env(\"RUST_TEST_TMPDIR\", tmp.to_owned());"}]}