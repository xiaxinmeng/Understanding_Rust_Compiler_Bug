{"sha": "67a94135cbce195078efcbf18ac2347a1d734e68", "node_id": "C_kwDOAAsO6NoAKDY3YTk0MTM1Y2JjZTE5NTA3OGVmY2JmMThhYzIzNDdhMWQ3MzRlNjg", "commit": {"author": {"name": "naosense", "email": "pingao777@gmail.com", "date": "2022-11-24T01:43:11Z"}, "committer": {"name": "naosense", "email": "pingao777@gmail.com", "date": "2022-11-29T07:00:51Z"}, "message": "change note style", "tree": {"sha": "1abbbcded11596d653b0d0a895051850ef880adb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1abbbcded11596d653b0d0a895051850ef880adb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67a94135cbce195078efcbf18ac2347a1d734e68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67a94135cbce195078efcbf18ac2347a1d734e68", "html_url": "https://github.com/rust-lang/rust/commit/67a94135cbce195078efcbf18ac2347a1d734e68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67a94135cbce195078efcbf18ac2347a1d734e68/comments", "author": {"login": "naosense", "id": 2225426, "node_id": "MDQ6VXNlcjIyMjU0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2225426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/naosense", "html_url": "https://github.com/naosense", "followers_url": "https://api.github.com/users/naosense/followers", "following_url": "https://api.github.com/users/naosense/following{/other_user}", "gists_url": "https://api.github.com/users/naosense/gists{/gist_id}", "starred_url": "https://api.github.com/users/naosense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/naosense/subscriptions", "organizations_url": "https://api.github.com/users/naosense/orgs", "repos_url": "https://api.github.com/users/naosense/repos", "events_url": "https://api.github.com/users/naosense/events{/privacy}", "received_events_url": "https://api.github.com/users/naosense/received_events", "type": "User", "site_admin": false}, "committer": {"login": "naosense", "id": 2225426, "node_id": "MDQ6VXNlcjIyMjU0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2225426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/naosense", "html_url": "https://github.com/naosense", "followers_url": "https://api.github.com/users/naosense/followers", "following_url": "https://api.github.com/users/naosense/following{/other_user}", "gists_url": "https://api.github.com/users/naosense/gists{/gist_id}", "starred_url": "https://api.github.com/users/naosense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/naosense/subscriptions", "organizations_url": "https://api.github.com/users/naosense/orgs", "repos_url": "https://api.github.com/users/naosense/repos", "events_url": "https://api.github.com/users/naosense/events{/privacy}", "received_events_url": "https://api.github.com/users/naosense/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fc98c51dfd771e5cd45c2feee0649ae299ab18b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fc98c51dfd771e5cd45c2feee0649ae299ab18b", "html_url": "https://github.com/rust-lang/rust/commit/1fc98c51dfd771e5cd45c2feee0649ae299ab18b"}], "stats": {"total": 159, "additions": 120, "deletions": 39}, "files": [{"sha": "1a8ac43ac894d0fa18e2530e74218db52623c309", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/67a94135cbce195078efcbf18ac2347a1d734e68/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a94135cbce195078efcbf18ac2347a1d734e68/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=67a94135cbce195078efcbf18ac2347a1d734e68", "patch": "@@ -4,7 +4,6 @@ use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::higher;\n use rustc_ast::ast::RangeLimits;\n-use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n@@ -105,6 +104,7 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n         }\n \n         if let ExprKind::Index(array, index) = &expr.kind {\n+            let note = \"the suggestion might not be applicable in constant blocks\";\n             let ty = cx.typeck_results().expr_ty(array).peel_refs();\n             if let Some(range) = higher::Range::hir(index) {\n                 // Ranged indexes, i.e., &x[n..m], &x[n..], &x[..n] and &x[..]\n@@ -156,12 +156,11 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n                 };\n \n                 span_lint_and_then(cx, INDEXING_SLICING, expr.span, \"slicing may panic\", |diag| {\n-                    let note = if cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n-                        \"the suggestion might not be applicable in constant blocks\"\n-                    } else {\n-                        \"\"\n-                    };\n-                    diag.span_suggestion(expr.span, help_msg, note, Applicability::MachineApplicable);\n+                    diag.help(help_msg);\n+\n+                    if cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n+                        diag.note(note);\n+                    }\n                 });\n             } else {\n                 // Catchall non-range index, i.e., [n] or [n << m]\n@@ -178,17 +177,11 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n                 }\n \n                 span_lint_and_then(cx, INDEXING_SLICING, expr.span, \"indexing may panic\", |diag| {\n-                    let note = if cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n-                        \"the suggestion might not be applicable in constant blocks\"\n-                    } else {\n-                        \"\"\n-                    };\n-                    diag.span_suggestion(\n-                        expr.span,\n-                        \"consider using `.get(n)` or `.get_mut(n)` instead\",\n-                        note,\n-                        Applicability::MachineApplicable,\n-                    );\n+                    diag.help(\"consider using `.get(n)` or `.get_mut(n)` instead\");\n+\n+                    if cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n+                        diag.note(note);\n+                    }\n                 });\n             }\n         }"}, {"sha": "c2acfed559d012475a11c6047134e7fbb8e21181", "filename": "tests/ui-toml/suppress_lint_in_const/test.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67a94135cbce195078efcbf18ac2347a1d734e68/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67a94135cbce195078efcbf18ac2347a1d734e68/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.stderr?ref=67a94135cbce195078efcbf18ac2347a1d734e68", "patch": "@@ -2,8 +2,10 @@ error: indexing may panic\n   --> $DIR/test.rs:11:9\n    |\n LL |         self.value[0] & 0b1000_0000 != 0\n-   |         ^^^^^^^^^^^^^ help: consider using `.get(n)` or `.get_mut(n)` instead: `the suggestion might not be applicable in constant blocks`\n+   |         ^^^^^^^^^^^^^\n    |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: the suggestion might not be applicable in constant blocks\n    = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n \n error: aborting due to previous error"}, {"sha": "84e1f65623c3971ef8c89d280eb511499e2a9f85", "filename": "tests/ui/indexing_slicing_index.stderr", "status": "modified", "additions": 71, "deletions": 8, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/67a94135cbce195078efcbf18ac2347a1d734e68/tests%2Fui%2Findexing_slicing_index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67a94135cbce195078efcbf18ac2347a1d734e68/tests%2Fui%2Findexing_slicing_index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_index.stderr?ref=67a94135cbce195078efcbf18ac2347a1d734e68", "patch": "@@ -1,3 +1,22 @@\n+error: indexing may panic\n+  --> $DIR/indexing_slicing_index.rs:9:20\n+   |\n+LL | const REF: &i32 = &ARR[idx()]; // Ok, should not produce stderr.\n+   |                    ^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: the suggestion might not be applicable in constant blocks\n+   = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n+\n+error: indexing may panic\n+  --> $DIR/indexing_slicing_index.rs:10:24\n+   |\n+LL | const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n+   |                        ^^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: the suggestion might not be applicable in constant blocks\n+\n error[E0080]: evaluation of `main::{constant#3}` failed\n   --> $DIR/indexing_slicing_index.rs:31:14\n    |\n@@ -14,46 +33,90 @@ error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:22:5\n    |\n LL |     x[index];\n-   |     ^^^^^^^^ help: consider using `.get(n)` or `.get_mut(n)` instead\n+   |     ^^^^^^^^\n    |\n-   = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic\n+  --> $DIR/indexing_slicing_index.rs:28:5\n+   |\n+LL |     x[const { idx() }]; // Ok, should not produce stderr.\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic\n+  --> $DIR/indexing_slicing_index.rs:29:5\n+   |\n+LL |     x[const { idx4() }]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic\n+  --> $DIR/indexing_slicing_index.rs:30:14\n+   |\n+LL |     const { &ARR[idx()] }; // Ok, should not produce stderr.\n+   |              ^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: the suggestion might not be applicable in constant blocks\n+\n+error: indexing may panic\n+  --> $DIR/indexing_slicing_index.rs:31:14\n+   |\n+LL |     const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n+   |              ^^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: the suggestion might not be applicable in constant blocks\n \n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:38:5\n    |\n LL |     v[0];\n-   |     ^^^^ help: consider using `.get(n)` or `.get_mut(n)` instead\n+   |     ^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:39:5\n    |\n LL |     v[10];\n-   |     ^^^^^ help: consider using `.get(n)` or `.get_mut(n)` instead\n+   |     ^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:40:5\n    |\n LL |     v[1 << 3];\n-   |     ^^^^^^^^^ help: consider using `.get(n)` or `.get_mut(n)` instead\n+   |     ^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:46:5\n    |\n LL |     v[N];\n-   |     ^^^^ help: consider using `.get(n)` or `.get_mut(n)` instead\n+   |     ^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:47:5\n    |\n LL |     v[M];\n-   |     ^^^^ help: consider using `.get(n)` or `.get_mut(n)` instead\n+   |     ^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/indexing_slicing_index.rs:10:24\n    |\n LL | const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n    |                        ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "dc54bd41365d3e55b812479aaa6cdec42c97315c", "filename": "tests/ui/indexing_slicing_slice.stderr", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/67a94135cbce195078efcbf18ac2347a1d734e68/tests%2Fui%2Findexing_slicing_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67a94135cbce195078efcbf18ac2347a1d734e68/tests%2Fui%2Findexing_slicing_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_slice.stderr?ref=67a94135cbce195078efcbf18ac2347a1d734e68", "patch": "@@ -2,39 +2,50 @@ error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:12:6\n    |\n LL |     &x[index..];\n-   |      ^^^^^^^^^^ help: consider using `.get(n..)` or .get_mut(n..)` instead\n+   |      ^^^^^^^^^^\n    |\n+   = help: consider using `.get(n..)` or .get_mut(n..)` instead\n    = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:13:6\n    |\n LL |     &x[..index];\n-   |      ^^^^^^^^^^ help: consider using `.get(..n)`or `.get_mut(..n)` instead\n+   |      ^^^^^^^^^^\n+   |\n+   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:14:6\n    |\n LL |     &x[index_from..index_to];\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.get(n..m)` or `.get_mut(n..m)` instead\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:15:6\n    |\n LL |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.get(..n)`or `.get_mut(..n)` instead\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:15:6\n    |\n LL |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n-   |      ^^^^^^^^^^^^^^^ help: consider using `.get(n..)` or .get_mut(n..)` instead\n+   |      ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:16:6\n    |\n LL |     &x[5..][..10]; // Two lint reports, one for out of bounds [5..] and another for slicing [..10].\n-   |      ^^^^^^^^^^^^ help: consider using `.get(..n)`or `.get_mut(..n)` instead\n+   |      ^^^^^^^^^^^^\n+   |\n+   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n   --> $DIR/indexing_slicing_slice.rs:16:8\n@@ -48,13 +59,17 @@ error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:17:6\n    |\n LL |     &x[0..][..3];\n-   |      ^^^^^^^^^^^ help: consider using `.get(..n)`or `.get_mut(..n)` instead\n+   |      ^^^^^^^^^^^\n+   |\n+   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:18:6\n    |\n LL |     &x[1..][..5];\n-   |      ^^^^^^^^^^^ help: consider using `.get(..n)`or `.get_mut(..n)` instead\n+   |      ^^^^^^^^^^^\n+   |\n+   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n   --> $DIR/indexing_slicing_slice.rs:25:12\n@@ -72,13 +87,17 @@ error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:31:6\n    |\n LL |     &v[10..100];\n-   |      ^^^^^^^^^^ help: consider using `.get(n..m)` or `.get_mut(n..m)` instead\n+   |      ^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:32:6\n    |\n LL |     &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n-   |      ^^^^^^^^^^^^^^ help: consider using `.get(..n)`or `.get_mut(..n)` instead\n+   |      ^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n   --> $DIR/indexing_slicing_slice.rs:32:8\n@@ -90,13 +109,17 @@ error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:33:6\n    |\n LL |     &v[10..];\n-   |      ^^^^^^^ help: consider using `.get(n..)` or .get_mut(n..)` instead\n+   |      ^^^^^^^\n+   |\n+   = help: consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:34:6\n    |\n LL |     &v[..100];\n-   |      ^^^^^^^^ help: consider using `.get(..n)`or `.get_mut(..n)` instead\n+   |      ^^^^^^^^\n+   |\n+   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: aborting due to 16 previous errors\n "}]}