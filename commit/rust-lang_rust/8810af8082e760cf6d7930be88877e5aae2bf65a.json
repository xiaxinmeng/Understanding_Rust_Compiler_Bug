{"sha": "8810af8082e760cf6d7930be88877e5aae2bf65a", "node_id": "C_kwDOAAsO6NoAKDg4MTBhZjgwODJlNzYwY2Y2ZDc5MzBiZTg4ODc3ZTVhYWUyYmY2NWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-23T19:13:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-23T19:13:06Z"}, "message": "Rollup merge of #93227 - compiler-errors:gat-hrtb-wfcheck, r=jackh726\n\nLiberate late bound regions when collecting GAT substs in wfcheck\n\nThe issue here is that the [`GATSubstCollector`](https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/check/wfcheck.rs#L604) does not currently do anything wrt `Binder`s, so the GAT substs it copies out have escaping late bound regions when it walks through types like `for<'x> fn() -> Self::Gat<'x>`.\n\nI made that visitor call `liberate_late_bound_regions`, not sure if that's the right thing here or we need to do something else to replace these bound vars with placeholders. I'm not familiar with other code doing anything similar.. But the issue is indeed no longer ICEing.\n\nFixes #92954\n\nr? `@jackh726`\nsince you last touched this code, feel free to reassign", "tree": {"sha": "6124c2870e679b2d97ca3b375f18ebfd4e82c5fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6124c2870e679b2d97ca3b375f18ebfd4e82c5fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8810af8082e760cf6d7930be88877e5aae2bf65a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh7ajDCRBK7hj4Ov3rIwAA05YIABGLiJPVy94dsE+tqEv+brno\nGbKtVTVvMsNpR1Tj+rauN5wGzyrka7nCz+n1dkkfy8wUxbqINEtk4Fut9oV0+Nv5\npkuU4drR9tALv3NR0IsIorODcltWI+SiX4eyw/cVg911mDeO2mQYmpB3JOfal8xE\nEhEshbeB2btH7Q1ZpRV7WPnrH4CF1w+dMMyoTjK4shXebYkNDxMdOP9IOnb2tJ3g\ncu40QsuQbMHBUn4i2RAD4xnsskQbkmpsVn4UQAh2jU95XgpDiilhdgKH38ekaM2S\n9oiVgydjwMyp/elOxebU32CV0dRNBvFPoexlbA1uzvFOTtCnuXOuofopH5bmD/c=\n=l76Q\n-----END PGP SIGNATURE-----\n", "payload": "tree 6124c2870e679b2d97ca3b375f18ebfd4e82c5fc\nparent 5adef281d69b9ef4d3a7885ed9d494044767d954\nparent 4a74ace3c99e21e544224599636e3e1ae7024da0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642965186 +0100\ncommitter GitHub <noreply@github.com> 1642965186 +0100\n\nRollup merge of #93227 - compiler-errors:gat-hrtb-wfcheck, r=jackh726\n\nLiberate late bound regions when collecting GAT substs in wfcheck\n\nThe issue here is that the [`GATSubstCollector`](https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/check/wfcheck.rs#L604) does not currently do anything wrt `Binder`s, so the GAT substs it copies out have escaping late bound regions when it walks through types like `for<'x> fn() -> Self::Gat<'x>`.\n\nI made that visitor call `liberate_late_bound_regions`, not sure if that's the right thing here or we need to do something else to replace these bound vars with placeholders. I'm not familiar with other code doing anything similar.. But the issue is indeed no longer ICEing.\n\nFixes #92954\n\nr? `@jackh726`\nsince you last touched this code, feel free to reassign\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8810af8082e760cf6d7930be88877e5aae2bf65a", "html_url": "https://github.com/rust-lang/rust/commit/8810af8082e760cf6d7930be88877e5aae2bf65a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8810af8082e760cf6d7930be88877e5aae2bf65a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5adef281d69b9ef4d3a7885ed9d494044767d954", "url": "https://api.github.com/repos/rust-lang/rust/commits/5adef281d69b9ef4d3a7885ed9d494044767d954", "html_url": "https://github.com/rust-lang/rust/commit/5adef281d69b9ef4d3a7885ed9d494044767d954"}, {"sha": "4a74ace3c99e21e544224599636e3e1ae7024da0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a74ace3c99e21e544224599636e3e1ae7024da0", "html_url": "https://github.com/rust-lang/rust/commit/4a74ace3c99e21e544224599636e3e1ae7024da0"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "aa1a521d53274e94e71914acd02d0ad7daa888c5", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8810af8082e760cf6d7930be88877e5aae2bf65a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8810af8082e760cf6d7930be88877e5aae2bf65a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=8810af8082e760cf6d7930be88877e5aae2bf65a", "patch": "@@ -312,7 +312,7 @@ fn check_gat_where_clauses(\n         // of  the function signature. In our example, the GAT in the return\n         // type is `<Self as LendingIterator>::Item<'a>`, so 'a and Self are arguments.\n         let (regions, types) =\n-            GATSubstCollector::visit(trait_item.def_id.to_def_id(), sig.output());\n+            GATSubstCollector::visit(tcx, trait_item.def_id.to_def_id(), sig.output());\n \n         // If both regions and types are empty, then this GAT isn't in the\n         // return type, and we shouldn't try to do clause analysis\n@@ -602,6 +602,7 @@ fn resolve_regions_with_wf_tys<'tcx>(\n /// the two vectors, `regions` and `types` (depending on their kind). For each\n /// parameter `Pi` also track the index `i`.\n struct GATSubstCollector<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n     gat: DefId,\n     // Which region appears and which parameter index its subsituted for\n     regions: FxHashSet<(ty::Region<'tcx>, usize)>,\n@@ -611,11 +612,16 @@ struct GATSubstCollector<'tcx> {\n \n impl<'tcx> GATSubstCollector<'tcx> {\n     fn visit<T: TypeFoldable<'tcx>>(\n+        tcx: TyCtxt<'tcx>,\n         gat: DefId,\n         t: T,\n     ) -> (FxHashSet<(ty::Region<'tcx>, usize)>, FxHashSet<(Ty<'tcx>, usize)>) {\n-        let mut visitor =\n-            GATSubstCollector { gat, regions: FxHashSet::default(), types: FxHashSet::default() };\n+        let mut visitor = GATSubstCollector {\n+            tcx,\n+            gat,\n+            regions: FxHashSet::default(),\n+            types: FxHashSet::default(),\n+        };\n         t.visit_with(&mut visitor);\n         (visitor.regions, visitor.types)\n     }\n@@ -624,6 +630,13 @@ impl<'tcx> GATSubstCollector<'tcx> {\n impl<'tcx> TypeVisitor<'tcx> for GATSubstCollector<'tcx> {\n     type BreakTy = !;\n \n+    fn visit_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: &ty::Binder<'tcx, T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n+        self.tcx.liberate_late_bound_regions(self.gat, t.clone()).visit_with(self)\n+    }\n+\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Projection(p) if p.item_def_id == self.gat => {"}, {"sha": "95c090ff4e9065a0b819c632c82426d418328594", "filename": "src/test/ui/generic-associated-types/issue-92954.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8810af8082e760cf6d7930be88877e5aae2bf65a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8810af8082e760cf6d7930be88877e5aae2bf65a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92954.rs?ref=8810af8082e760cf6d7930be88877e5aae2bf65a", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+pub trait Foo {\n+    type Assoc<'c>;\n+    fn function() -> for<'x> fn(Self::Assoc<'x>);\n+}\n+\n+fn main() {}"}]}