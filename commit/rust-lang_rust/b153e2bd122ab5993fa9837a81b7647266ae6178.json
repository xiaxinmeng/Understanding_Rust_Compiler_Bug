{"sha": "b153e2bd122ab5993fa9837a81b7647266ae6178", "node_id": "C_kwDOAAsO6NoAKGIxNTNlMmJkMTIyYWI1OTkzZmE5ODM3YTgxYjc2NDcyNjZhZTYxNzg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-06T16:42:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-06T16:42:58Z"}, "message": "Rollup merge of #109782 - WaffleLapkin:nocommawhenremovingarguments, r=oli-obk\n\nDon't leave a comma at the start of argument list when removing arguments\n\nFixes #109425\n\nQuite a dirty hack, but at least it works ig.", "tree": {"sha": "2d0f778fa9cd62350ded96433e5d6712c3a0dd79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d0f778fa9cd62350ded96433e5d6712c3a0dd79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b153e2bd122ab5993fa9837a81b7647266ae6178", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkLvaSCRBK7hj4Ov3rIwAABIUIAKiYLlcUJSMPpmNADJJsp+0I\n4JjsIDGo/U/pQ4ckQPQBblDdICvyHVG+3Oia7PETNbJFzi5RmPhhgwT0qsUk8+8V\n5Cly/cucL+Q83rDYexcIOHEaDWO9mMpqazs9v4X/x32DgE5FxmBjaQmVHBSrlueA\nxaN4vDii0zzljQLoy6LPE2MM+bzYKy4E7Tl7ohvq6fEx20c+cE9UsG6Jrh+9pozE\nCAfiLZ12dbUVpqNYjsLH3nQdEJleADgdAhEk8yRSwUQ5sSRpcOwTWMHoHS+IYdps\nj2o9A8NkzSA5n3DKHlGuhM9/ADxyqmsLcG2gzW/m/R6bTzVaeLNXMwlCDZ/vnPc=\n=McwD\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d0f778fa9cd62350ded96433e5d6712c3a0dd79\nparent c86c9339e6991dbf9a9a4ae210492e94b142a728\nparent 48c16411c31d27772cb9c05a9914c2b9a26b5df5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1680799378 +0200\ncommitter GitHub <noreply@github.com> 1680799378 +0200\n\nRollup merge of #109782 - WaffleLapkin:nocommawhenremovingarguments, r=oli-obk\n\nDon't leave a comma at the start of argument list when removing arguments\n\nFixes #109425\n\nQuite a dirty hack, but at least it works ig.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b153e2bd122ab5993fa9837a81b7647266ae6178", "html_url": "https://github.com/rust-lang/rust/commit/b153e2bd122ab5993fa9837a81b7647266ae6178", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b153e2bd122ab5993fa9837a81b7647266ae6178/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c86c9339e6991dbf9a9a4ae210492e94b142a728", "url": "https://api.github.com/repos/rust-lang/rust/commits/c86c9339e6991dbf9a9a4ae210492e94b142a728", "html_url": "https://github.com/rust-lang/rust/commit/c86c9339e6991dbf9a9a4ae210492e94b142a728"}, {"sha": "48c16411c31d27772cb9c05a9914c2b9a26b5df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/48c16411c31d27772cb9c05a9914c2b9a26b5df5", "html_url": "https://github.com/rust-lang/rust/commit/48c16411c31d27772cb9c05a9914c2b9a26b5df5"}], "stats": {"total": 179, "additions": 173, "deletions": 6}, "files": [{"sha": "b02eae19fce103f5ca0059e1865a3178c993972d", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b153e2bd122ab5993fa9837a81b7647266ae6178/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b153e2bd122ab5993fa9837a81b7647266ae6178/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=b153e2bd122ab5993fa9837a81b7647266ae6178", "patch": "@@ -31,7 +31,7 @@ use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::{self, IsSuggestable, Ty};\n use rustc_session::Session;\n use rustc_span::symbol::{kw, Ident};\n-use rustc_span::{self, sym, Span};\n+use rustc_span::{self, sym, BytePos, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode, SelectionContext};\n \n use std::iter;\n@@ -894,8 +894,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         let mut errors = errors.into_iter().peekable();\n+        let mut only_extras_so_far = errors\n+            .peek()\n+            .map_or(false, |first| matches!(first, Error::Extra(arg_idx) if arg_idx.index() == 0));\n         let mut suggestions = vec![];\n         while let Some(error) = errors.next() {\n+            only_extras_so_far &= matches!(error, Error::Extra(_));\n+\n             match error {\n                 Error::Invalid(provided_idx, expected_idx, compatibility) => {\n                     let (formal_ty, expected_ty) = formal_and_expected_inputs[expected_idx];\n@@ -941,10 +946,34 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if arg_idx.index() > 0\n                         && let Some((_, prev)) = provided_arg_tys\n                             .get(ProvidedIdx::from_usize(arg_idx.index() - 1)\n-                    ) {\n-                        // Include previous comma\n-                        span = prev.shrink_to_hi().to(span);\n-                    }\n+                        ) {\n+                            // Include previous comma\n+                            span = prev.shrink_to_hi().to(span);\n+                        }\n+\n+                        // Is last argument for deletion in a row starting from the 0-th argument?\n+                        // Then delete the next comma, so we are not left with `f(, ...)`\n+                        //\n+                        //     fn f() {}\n+                        //   - f(0, 1,)\n+                        //   + f()\n+                        if only_extras_so_far\n+                            && errors\n+                                .peek()\n+                                .map_or(true, |next_error| !matches!(next_error, Error::Extra(_)))\n+                        {\n+                            let next = provided_arg_tys\n+                                .get(arg_idx + 1)\n+                                .map(|&(_, sp)| sp)\n+                                .unwrap_or_else(|| {\n+                                    // Subtract one to move before `)`\n+                                    call_expr.span.with_lo(call_expr.span.hi() - BytePos(1))\n+                                });\n+\n+                            // Include next comma\n+                            span = span.until(next);\n+                        }\n+\n                         suggestions.push((span, String::new()));\n \n                         suggestion_text = match suggestion_text {"}, {"sha": "143ddf99586f0ae1bb3bcdc7332d27273c39a95e", "filename": "tests/ui/argument-suggestions/issue-109425.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b153e2bd122ab5993fa9837a81b7647266ae6178/tests%2Fui%2Fargument-suggestions%2Fissue-109425.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b153e2bd122ab5993fa9837a81b7647266ae6178/tests%2Fui%2Fargument-suggestions%2Fissue-109425.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-109425.fixed?ref=b153e2bd122ab5993fa9837a81b7647266ae6178", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+fn f() {}\n+fn i(_: u32) {}\n+fn is(_: u32, _: &str) {}\n+fn s(_: &str) {}\n+\n+fn main() {\n+    // code             expected suggestion\n+    f();        // f()\n+    //~^ error: this function takes 0 arguments but 2 arguments were supplied\n+    i(0,);     // i(0,)\n+    //~^ error: this function takes 1 argument but 3 arguments were supplied\n+    i(0);      // i(0)\n+    //~^ error: this function takes 1 argument but 3 arguments were supplied\n+    is(0, \"\"); // is(0, \"\")\n+    //~^ error: this function takes 2 arguments but 4 arguments were supplied\n+    s(\"\");     // s(\"\")\n+    //~^ error: this function takes 1 argument but 3 arguments were supplied\n+}"}, {"sha": "a845c419555c20e14dc0a59a42cdc98405ce8731", "filename": "tests/ui/argument-suggestions/issue-109425.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b153e2bd122ab5993fa9837a81b7647266ae6178/tests%2Fui%2Fargument-suggestions%2Fissue-109425.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b153e2bd122ab5993fa9837a81b7647266ae6178/tests%2Fui%2Fargument-suggestions%2Fissue-109425.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-109425.rs?ref=b153e2bd122ab5993fa9837a81b7647266ae6178", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+fn f() {}\n+fn i(_: u32) {}\n+fn is(_: u32, _: &str) {}\n+fn s(_: &str) {}\n+\n+fn main() {\n+    // code             expected suggestion\n+    f(0, 1,);        // f()\n+    //~^ error: this function takes 0 arguments but 2 arguments were supplied\n+    i(0, 1, 2,);     // i(0,)\n+    //~^ error: this function takes 1 argument but 3 arguments were supplied\n+    i(0, 1, 2);      // i(0)\n+    //~^ error: this function takes 1 argument but 3 arguments were supplied\n+    is(0, 1, 2, \"\"); // is(0, \"\")\n+    //~^ error: this function takes 2 arguments but 4 arguments were supplied\n+    s(0, 1, \"\");     // s(\"\")\n+    //~^ error: this function takes 1 argument but 3 arguments were supplied\n+}"}, {"sha": "1514f1cb487ef95ff1926db099982d0660414747", "filename": "tests/ui/argument-suggestions/issue-109425.stderr", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/b153e2bd122ab5993fa9837a81b7647266ae6178/tests%2Fui%2Fargument-suggestions%2Fissue-109425.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b153e2bd122ab5993fa9837a81b7647266ae6178/tests%2Fui%2Fargument-suggestions%2Fissue-109425.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-109425.stderr?ref=b153e2bd122ab5993fa9837a81b7647266ae6178", "patch": "@@ -0,0 +1,98 @@\n+error[E0061]: this function takes 0 arguments but 2 arguments were supplied\n+  --> $DIR/issue-109425.rs:10:5\n+   |\n+LL |     f(0, 1,);        // f()\n+   |     ^ -  - unexpected argument of type `{integer}`\n+   |       |\n+   |       unexpected argument of type `{integer}`\n+   |\n+note: function defined here\n+  --> $DIR/issue-109425.rs:3:4\n+   |\n+LL | fn f() {}\n+   |    ^\n+help: remove the extra arguments\n+   |\n+LL -     f(0, 1,);        // f()\n+LL +     f();        // f()\n+   |\n+\n+error[E0061]: this function takes 1 argument but 3 arguments were supplied\n+  --> $DIR/issue-109425.rs:12:5\n+   |\n+LL |     i(0, 1, 2,);     // i(0,)\n+   |     ^    -  - unexpected argument of type `{integer}`\n+   |          |\n+   |          unexpected argument of type `{integer}`\n+   |\n+note: function defined here\n+  --> $DIR/issue-109425.rs:4:4\n+   |\n+LL | fn i(_: u32) {}\n+   |    ^ ------\n+help: remove the extra arguments\n+   |\n+LL -     i(0, 1, 2,);     // i(0,)\n+LL +     i(0,);     // i(0,)\n+   |\n+\n+error[E0061]: this function takes 1 argument but 3 arguments were supplied\n+  --> $DIR/issue-109425.rs:14:5\n+   |\n+LL |     i(0, 1, 2);      // i(0)\n+   |     ^    -  - unexpected argument of type `{integer}`\n+   |          |\n+   |          unexpected argument of type `{integer}`\n+   |\n+note: function defined here\n+  --> $DIR/issue-109425.rs:4:4\n+   |\n+LL | fn i(_: u32) {}\n+   |    ^ ------\n+help: remove the extra arguments\n+   |\n+LL -     i(0, 1, 2);      // i(0)\n+LL +     i(0);      // i(0)\n+   |\n+\n+error[E0061]: this function takes 2 arguments but 4 arguments were supplied\n+  --> $DIR/issue-109425.rs:16:5\n+   |\n+LL |     is(0, 1, 2, \"\"); // is(0, \"\")\n+   |     ^^    -  - unexpected argument of type `{integer}`\n+   |           |\n+   |           unexpected argument of type `{integer}`\n+   |\n+note: function defined here\n+  --> $DIR/issue-109425.rs:5:4\n+   |\n+LL | fn is(_: u32, _: &str) {}\n+   |    ^^ ------  -------\n+help: remove the extra arguments\n+   |\n+LL -     is(0, 1, 2, \"\"); // is(0, \"\")\n+LL +     is(0, \"\"); // is(0, \"\")\n+   |\n+\n+error[E0061]: this function takes 1 argument but 3 arguments were supplied\n+  --> $DIR/issue-109425.rs:18:5\n+   |\n+LL |     s(0, 1, \"\");     // s(\"\")\n+   |     ^ -  - unexpected argument of type `{integer}`\n+   |       |\n+   |       unexpected argument of type `{integer}`\n+   |\n+note: function defined here\n+  --> $DIR/issue-109425.rs:6:4\n+   |\n+LL | fn s(_: &str) {}\n+   |    ^ -------\n+help: remove the extra arguments\n+   |\n+LL -     s(0, 1, \"\");     // s(\"\")\n+LL +     s(\"\");     // s(\"\")\n+   |\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "d4956872a399dc0ea95ff0ac845c0bf6175cbdf7", "filename": "tests/ui/suggestions/issue-109396.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b153e2bd122ab5993fa9837a81b7647266ae6178/tests%2Fui%2Fsuggestions%2Fissue-109396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b153e2bd122ab5993fa9837a81b7647266ae6178/tests%2Fui%2Fsuggestions%2Fissue-109396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-109396.stderr?ref=b153e2bd122ab5993fa9837a81b7647266ae6178", "patch": "@@ -25,7 +25,7 @@ note: function defined here\n help: remove the extra arguments\n    |\n LL -             file.as_raw_fd(),\n-LL +             ,\n+LL +             );\n    |\n \n error: aborting due to 2 previous errors"}]}