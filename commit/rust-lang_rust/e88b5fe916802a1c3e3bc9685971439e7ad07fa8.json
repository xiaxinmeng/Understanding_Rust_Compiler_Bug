{"sha": "e88b5fe916802a1c3e3bc9685971439e7ad07fa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OGI1ZmU5MTY4MDJhMWMzZTNiYzk2ODU5NzE0MzllN2FkMDdmYTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-17T14:25:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-17T14:25:58Z"}, "message": "Simplify", "tree": {"sha": "bafef9dba1060083eccabdad899ddcd08e28e089", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bafef9dba1060083eccabdad899ddcd08e28e089"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e88b5fe916802a1c3e3bc9685971439e7ad07fa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e88b5fe916802a1c3e3bc9685971439e7ad07fa8", "html_url": "https://github.com/rust-lang/rust/commit/e88b5fe916802a1c3e3bc9685971439e7ad07fa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e88b5fe916802a1c3e3bc9685971439e7ad07fa8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd4d375a64e6ab58896ddcccb81e06dd5b4051d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4d375a64e6ab58896ddcccb81e06dd5b4051d3", "html_url": "https://github.com/rust-lang/rust/commit/bd4d375a64e6ab58896ddcccb81e06dd5b4051d3"}], "stats": {"total": 104, "additions": 50, "deletions": 54}, "files": [{"sha": "a71f96164d6287aac7a3bc567c3f64e14bb3f38d", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 50, "deletions": 54, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/e88b5fe916802a1c3e3bc9685971439e7ad07fa8/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88b5fe916802a1c3e3bc9685971439e7ad07fa8/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=e88b5fe916802a1c3e3bc9685971439e7ad07fa8", "patch": "@@ -304,14 +304,14 @@ fn cargo_to_crate_graph(\n     for pkg in cargo.packages() {\n         let mut lib_tgt = None;\n         for &tgt in cargo[pkg].targets.iter() {\n-            if let Some(crate_id) = add_target_crate_root(\n-                &mut crate_graph,\n-                &cargo[pkg],\n-                &cargo[tgt],\n-                &cfg_options,\n-                proc_macro_client,\n-                load,\n-            ) {\n+            if let Some(file_id) = load(&cargo[tgt].root) {\n+                let crate_id = add_target_crate_root(\n+                    &mut crate_graph,\n+                    &cargo[pkg],\n+                    &cfg_options,\n+                    proc_macro_client,\n+                    file_id,\n+                );\n                 if cargo[tgt].kind == TargetKind::Lib {\n                     lib_tgt = Some((crate_id, cargo[tgt].name.clone()));\n                     pkg_to_lib_crate.insert(pkg, crate_id);\n@@ -380,14 +380,14 @@ fn cargo_to_crate_graph(\n                     continue;\n                 }\n \n-                if let Some(crate_id) = add_target_crate_root(\n-                    &mut crate_graph,\n-                    &rustc_workspace[pkg],\n-                    &rustc_workspace[tgt],\n-                    &cfg_options,\n-                    proc_macro_client,\n-                    load,\n-                ) {\n+                if let Some(file_id) = load(&rustc_workspace[tgt].root) {\n+                    let crate_id = add_target_crate_root(\n+                        &mut crate_graph,\n+                        &rustc_workspace[pkg],\n+                        &cfg_options,\n+                        proc_macro_client,\n+                        file_id,\n+                    );\n                     pkg_to_lib_crate.insert(pkg, crate_id);\n                     // Add dependencies on the core / std / alloc for rustc\n                     for (name, krate) in public_deps.iter() {\n@@ -432,49 +432,45 @@ fn cargo_to_crate_graph(\n fn add_target_crate_root(\n     crate_graph: &mut CrateGraph,\n     pkg: &cargo_workspace::PackageData,\n-    tgt: &cargo_workspace::TargetData,\n     cfg_options: &CfgOptions,\n     proc_macro_client: &ProcMacroClient,\n-    load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n-) -> Option<CrateId> {\n-    let root = tgt.root.as_path();\n-    if let Some(file_id) = load(root) {\n-        let edition = pkg.edition;\n-        let cfg_options = {\n-            let mut opts = cfg_options.clone();\n-            for feature in pkg.features.iter() {\n-                opts.insert_key_value(\"feature\".into(), feature.into());\n-            }\n-            opts.extend(pkg.cfgs.iter().cloned());\n-            opts\n-        };\n-        let mut env = Env::default();\n-        if let Some(out_dir) = &pkg.out_dir {\n-            // NOTE: cargo and rustc seem to hide non-UTF-8 strings from env! and option_env!()\n-            if let Some(out_dir) = out_dir.to_str().map(|s| s.to_owned()) {\n-                env.set(\"OUT_DIR\", out_dir);\n-            }\n+    file_id: FileId,\n+) -> CrateId {\n+    let edition = pkg.edition;\n+    let cfg_options = {\n+        let mut opts = cfg_options.clone();\n+        for feature in pkg.features.iter() {\n+            opts.insert_key_value(\"feature\".into(), feature.into());\n+        }\n+        opts.extend(pkg.cfgs.iter().cloned());\n+        opts\n+    };\n+    let mut env = Env::default();\n+    if let Some(out_dir) = &pkg.out_dir {\n+        // NOTE: cargo and rustc seem to hide non-UTF-8 strings from env! and option_env!()\n+        if let Some(out_dir) = out_dir.to_str().map(|s| s.to_owned()) {\n+            env.set(\"OUT_DIR\", out_dir);\n         }\n-        let proc_macro = pkg\n-            .proc_macro_dylib_path\n-            .as_ref()\n-            .map(|it| proc_macro_client.by_dylib_path(&it))\n-            .unwrap_or_default();\n-\n-        let display_name = CrateDisplayName::from_canonical_name(pkg.name.clone());\n-        let crate_id = crate_graph.add_crate_root(\n-            file_id,\n-            edition,\n-            Some(display_name),\n-            cfg_options,\n-            env,\n-            proc_macro.clone(),\n-        );\n-\n-        return Some(crate_id);\n     }\n-    None\n+    let proc_macro = pkg\n+        .proc_macro_dylib_path\n+        .as_ref()\n+        .map(|it| proc_macro_client.by_dylib_path(&it))\n+        .unwrap_or_default();\n+\n+    let display_name = CrateDisplayName::from_canonical_name(pkg.name.clone());\n+    let crate_id = crate_graph.add_crate_root(\n+        file_id,\n+        edition,\n+        Some(display_name),\n+        cfg_options,\n+        env,\n+        proc_macro.clone(),\n+    );\n+\n+    crate_id\n }\n+\n fn sysroot_to_crate_graph(\n     crate_graph: &mut CrateGraph,\n     sysroot: &Sysroot,"}]}