{"sha": "0347ff58230af512c9521bdda7877b8bef9e9d34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNDdmZjU4MjMwYWY1MTJjOTUyMWJkZGE3ODc3YjhiZWY5ZTlkMzQ=", "commit": {"author": {"name": "Aidan Hobson Sayers", "email": "aidanhs@cantab.net", "date": "2017-03-23T23:33:15Z"}, "committer": {"name": "Aidan Hobson Sayers", "email": "aidanhs@cantab.net", "date": "2017-03-29T01:51:56Z"}, "message": "Attempt to cache git modules", "tree": {"sha": "654c43bc46b600f4f8308baec7b2cd1867a3aaf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/654c43bc46b600f4f8308baec7b2cd1867a3aaf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0347ff58230af512c9521bdda7877b8bef9e9d34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0347ff58230af512c9521bdda7877b8bef9e9d34", "html_url": "https://github.com/rust-lang/rust/commit/0347ff58230af512c9521bdda7877b8bef9e9d34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0347ff58230af512c9521bdda7877b8bef9e9d34/comments", "author": {"login": "aidanhs", "id": 1050652, "node_id": "MDQ6VXNlcjEwNTA2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1050652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanhs", "html_url": "https://github.com/aidanhs", "followers_url": "https://api.github.com/users/aidanhs/followers", "following_url": "https://api.github.com/users/aidanhs/following{/other_user}", "gists_url": "https://api.github.com/users/aidanhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanhs/subscriptions", "organizations_url": "https://api.github.com/users/aidanhs/orgs", "repos_url": "https://api.github.com/users/aidanhs/repos", "events_url": "https://api.github.com/users/aidanhs/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanhs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aidanhs", "id": 1050652, "node_id": "MDQ6VXNlcjEwNTA2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1050652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanhs", "html_url": "https://github.com/aidanhs", "followers_url": "https://api.github.com/users/aidanhs/followers", "following_url": "https://api.github.com/users/aidanhs/following{/other_user}", "gists_url": "https://api.github.com/users/aidanhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanhs/subscriptions", "organizations_url": "https://api.github.com/users/aidanhs/orgs", "repos_url": "https://api.github.com/users/aidanhs/repos", "events_url": "https://api.github.com/users/aidanhs/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanhs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dfc25e05e995c92a6093718198cca4bc2c85b63", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dfc25e05e995c92a6093718198cca4bc2c85b63", "html_url": "https://github.com/rust-lang/rust/commit/8dfc25e05e995c92a6093718198cca4bc2c85b63"}], "stats": {"total": 98, "additions": 91, "deletions": 7}, "files": [{"sha": "51e4440d5874712524b67da53d711db6bbd2f7f0", "filename": ".travis.yml", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0347ff58230af512c9521bdda7877b8bef9e9d34/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/0347ff58230af512c9521bdda7877b8bef9e9d34/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=0347ff58230af512c9521bdda7877b8bef9e9d34", "patch": "@@ -133,13 +133,14 @@ before_script:\n script:\n   - >\n       if [ \"$ALLOW_PR\" = \"\" ] && [ \"$TRAVIS_BRANCH\" != \"auto\" ]; then\n-          echo skipping, not a full build;\n-      elif [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n-          travis_retry stamp sh -c 'git submodule deinit -f . && git submodule update --init' &&\n-          stamp src/ci/run.sh;\n+          echo skipping, not a full build\n       else\n-          travis_retry stamp sh -c 'git submodule deinit -f . && git submodule update --init' &&\n-          stamp src/ci/docker/run.sh $IMAGE;\n+          stamp src/ci/init_repo.sh . \"$HOME/rustsrc\" &&\n+          if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n+              stamp src/ci/run.sh;\n+          else\n+              stamp src/ci/docker/run.sh $IMAGE;\n+          fi\n       fi\n \n after_success:\n@@ -157,20 +158,29 @@ after_failure:\n   - cat /tmp/sccache.log\n \n # Save tagged docker images we created and load them if they're available\n+# Travis saves caches whether the build failed or not, nuke rustsrc if\n+# the failure was while updating it (as it may be in an bad state)\n+# https://github.com/travis-ci/travis-ci/issues/4472\n before_cache:\n   - docker history -q rust-ci |\n     grep -v missing |\n     xargs docker save |\n     gzip > $HOME/docker/rust-ci.tar.gz\n+  - if [ ! -f $HOME/rustsrc/cache_valid1 ]; then\n+        echo \"WARNING rustsrc cache was invalid when saving\";\n+        rm -rf $HOME/rustsrc && mkdir $HOME/rustsrc;\n+    fi\n before_install:\n   - zcat $HOME/docker/rust-ci.tar.gz | docker load || true\n+  - mkdir -p $HOME/rustsrc\n \n notifications:\n   email: false\n \n cache:\n   directories:\n     - $HOME/docker\n+    - $HOME/rustsrc\n \n before_deploy:\n   - mkdir -p deploy/$TRAVIS_COMMIT"}, {"sha": "48983513147eb758318e96b91022868c812c8dd5", "filename": "appveyor.yml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0347ff58230af512c9521bdda7877b8bef9e9d34/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/0347ff58230af512c9521bdda7877b8bef9e9d34/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=0347ff58230af512c9521bdda7877b8bef9e9d34", "patch": "@@ -141,7 +141,8 @@ install:\n   - set SCCACHE_ERROR_LOG=%CD%/sccache.log\n \n test_script:\n-  - appveyor-retry sh -c 'git submodule deinit -f . && git submodule update --init'\n+  - mkdir C:\\cache\\rustsrc\n+  - sh src/ci/init_repo.sh . /c/cache/rustsrc\n   - set SRC=.\n   - set NO_CCACHE=1\n   - sh src/ci/run.sh\n@@ -150,6 +151,7 @@ on_failure:\n   - cat %CD%/sccache.log\n \n cache:\n+  - C:\\cache\\rustsrc\n   - \"build/i686-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\"\n   - \"build/x86_64-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\"\n   - \"i686-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\""}, {"sha": "71a4bfae3caf9424b930bf81aeba9a26b15e1a7e", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0347ff58230af512c9521bdda7877b8bef9e9d34/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0347ff58230af512c9521bdda7877b8bef9e9d34/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=0347ff58230af512c9521bdda7877b8bef9e9d34", "patch": "@@ -57,6 +57,7 @@ exec docker \\\n   --env DEPLOY_ALT=$DEPLOY_ALT \\\n   --env LOCAL_USER_ID=`id -u` \\\n   --volume \"$HOME/.cargo:/cargo\" \\\n+  --volume \"$HOME/rustsrc:$HOME/rustsrc\" \\\n   --privileged \\\n   --rm \\\n   rust-ci \\"}, {"sha": "4e22907d9794c733251fa1ad0a79679b47b14f57", "filename": "src/ci/init_repo.sh", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/0347ff58230af512c9521bdda7877b8bef9e9d34/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0347ff58230af512c9521bdda7877b8bef9e9d34/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=0347ff58230af512c9521bdda7877b8bef9e9d34", "patch": "@@ -0,0 +1,71 @@\n+#!/bin/bash\n+# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -o errexit\n+set -o pipefail\n+set -o nounset\n+\n+set -o xtrace\n+\n+ci_dir=$(cd $(dirname $0) && pwd)\n+. \"$ci_dir/shared.sh\"\n+\n+REPO_DIR=\"$1\"\n+CACHE_DIR=\"$2\"\n+\n+cache_src_dir=\"$CACHE_DIR/src\"\n+# If the layout of the cache directory changes, bump the number here\n+# (and anywhere else this file is referenced) so the cache is wiped\n+cache_valid_file=\"$CACHE_DIR/cache_valid1\"\n+\n+if [ ! -d \"$REPO_DIR\" -o ! -d \"$REPO_DIR/.git\" ]; then\n+    echo \"Error: $REPO_DIR does not exist or is not a git repo\"\n+    exit 1\n+fi\n+cd $REPO_DIR\n+if [ ! -d \"$CACHE_DIR\" ]; then\n+    echo \"Error: $CACHE_DIR does not exist or is not an absolute path\"\n+    exit 1\n+fi\n+\n+# Wipe the cache if it's not valid, or mark it as invalid while we update it\n+if [ ! -f \"$cache_valid_file\" ]; then\n+    rm -rf \"$CACHE_DIR\" && mkdir \"$CACHE_DIR\"\n+else\n+    rm \"$cache_valid_file\"\n+fi\n+\n+# Update the cache (a pristine copy of the rust source master)\n+if [ ! -d \"$cache_src_dir/.git\" ]; then\n+    retry sh -c \"rm -rf $cache_src_dir && mkdir -p $cache_src_dir && \\\n+        git clone https://github.com/rust-lang/rust.git $cache_src_dir\"\n+fi\n+retry sh -c \"cd $cache_src_dir && git reset --hard && git pull\"\n+retry sh -c \"cd $cache_src_dir && \\\n+    git submodule deinit -f . && git submodule sync && git submodule update --init\"\n+\n+# Cache was updated without errors, mark it as valid\n+touch \"$cache_valid_file\"\n+\n+# Update the submodules of the repo we're in, using the pristine repo as\n+# a cache for any object files\n+# No, `git submodule foreach` won't work:\n+# http://stackoverflow.com/questions/12641469/list-submodules-in-a-git-repository\n+modules=\"$(git config --file .gitmodules --get-regexp '\\.path$' | cut -d' ' -f2)\"\n+for module in $modules; do\n+    if [ ! -d \"$cache_src_dir/$module\" ]; then\n+        echo \"WARNING: $module not found in pristine repo\"\n+        retry sh -c \"git submodule deinit -f $module && git submodule update --init $module\"\n+        continue\n+    fi\n+    retry sh -c \"git submodule deinit -f $module && \\\n+        git submodule update --init --reference $cache_src_dir/$module $module\"\n+done"}]}