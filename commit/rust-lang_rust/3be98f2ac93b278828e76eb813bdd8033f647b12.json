{"sha": "3be98f2ac93b278828e76eb813bdd8033f647b12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZTk4ZjJhYzkzYjI3ODgyOGU3NmViODEzYmRkODAzM2Y2NDdiMTI=", "commit": {"author": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2019-02-08T23:34:05Z"}, "committer": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2019-02-08T23:34:26Z"}, "message": "Add tests for action target ranges", "tree": {"sha": "f18bf13961c0ad22f48278c46ab4d7dc072fac08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f18bf13961c0ad22f48278c46ab4d7dc072fac08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3be98f2ac93b278828e76eb813bdd8033f647b12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3be98f2ac93b278828e76eb813bdd8033f647b12", "html_url": "https://github.com/rust-lang/rust/commit/3be98f2ac93b278828e76eb813bdd8033f647b12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3be98f2ac93b278828e76eb813bdd8033f647b12/comments", "author": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3622eb629bf7acea933d956f8cee902ae357fca", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3622eb629bf7acea933d956f8cee902ae357fca", "html_url": "https://github.com/rust-lang/rust/commit/a3622eb629bf7acea933d956f8cee902ae357fca"}], "stats": {"total": 226, "additions": 210, "deletions": 16}, "files": [{"sha": "ea9707631db0b2815ab391ae847512d5a1eecd49", "filename": "crates/ra_assists/src/add_derive.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs?ref=3be98f2ac93b278828e76eb813bdd8033f647b12", "patch": "@@ -39,7 +39,7 @@ fn derive_insertion_offset(nominal: &ast::NominalDef) -> Option<TextUnit> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::check_assist;\n+    use crate::helpers::{check_assist, check_assist_target};\n \n     #[test]\n     fn add_derive_new() {\n@@ -81,4 +81,21 @@ struct Foo { a: i32, }\n             \",\n         );\n     }\n+\n+    #[test]\n+    fn add_derive_target() {\n+        check_assist_target(\n+            add_derive,\n+            \"\n+struct SomeThingIrrelevant;\n+/// `Foo` is a pretty important struct.\n+/// It does stuff.\n+struct Foo { a: i32<|>, }\n+struct EvenMoreIrrelevant;\n+            \",\n+            \"/// `Foo` is a pretty important struct.\n+/// It does stuff.\n+struct Foo { a: i32, }\",\n+        );\n+    }\n }"}, {"sha": "32fc074a6207750e41ad42129eb46f0f47689aa8", "filename": "crates/ra_assists/src/add_impl.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs?ref=3be98f2ac93b278828e76eb813bdd8033f647b12", "patch": "@@ -11,6 +11,7 @@ pub(crate) fn add_impl(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let nominal = ctx.node_at_offset::<ast::NominalDef>()?;\n     let name = nominal.name()?;\n     ctx.build(\"add impl\", |edit| {\n+        edit.target(nominal.syntax().range());\n         let type_params = nominal.type_param_list();\n         let start_offset = nominal.syntax().range().end();\n         let mut buf = String::new();\n@@ -37,7 +38,7 @@ pub(crate) fn add_impl(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::check_assist;\n+    use crate::helpers::{check_assist, check_assist_target};\n \n     #[test]\n     fn test_add_impl() {\n@@ -54,4 +55,18 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn add_impl_target() {\n+        check_assist_target(\n+            add_impl,\n+            \"\n+struct SomeThingIrrelevant;\n+/// Has a lifetime parameter\n+struct Foo<'a, T: Foo<'a>> {<|>}\n+struct EvenMoreIrrelevant;\n+\",\n+            \"/// Has a lifetime parameter\n+struct Foo<'a, T: Foo<'a>> {}\",\n+        );\n+    }\n }"}, {"sha": "6d9a4eec2fbf46dbd2dd08f96b2146a45b45a2c7", "filename": "crates/ra_assists/src/change_visibility.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs?ref=3be98f2ac93b278828e76eb813bdd8033f647b12", "patch": "@@ -31,14 +31,14 @@ fn add_vis(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         if parent.children().any(|child| child.kind() == VISIBILITY) {\n             return None;\n         }\n-        (vis_offset(parent), parent.range())\n+        (vis_offset(parent), keyword.range())\n     } else {\n         let ident = ctx.leaf_at_offset().find(|leaf| leaf.kind() == IDENT)?;\n         let field = ident.ancestors().find_map(ast::NamedFieldDef::cast)?;\n         if field.name()?.syntax().range() != ident.range() && field.visibility().is_some() {\n             return None;\n         }\n-        (vis_offset(field.syntax()), field.syntax().range())\n+        (vis_offset(field.syntax()), ident.range())\n     };\n \n     ctx.build(\"make pub(crate)\", |edit| {\n@@ -80,7 +80,7 @@ fn change_vis(ctx: AssistCtx<impl HirDatabase>, vis: &ast::Visibility) -> Option\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::check_assist;\n+    use crate::helpers::{check_assist, check_assist_target};\n \n     #[test]\n     fn change_visibility_adds_pub_crate_to_items() {\n@@ -138,4 +138,11 @@ mod tests {\n             \",\n         )\n     }\n+\n+    #[test]\n+    fn change_visibility_target() {\n+        check_assist_target(change_visibility, \"<|>fn foo() {}\", \"fn\");\n+        check_assist_target(change_visibility, \"pub(crate)<|> fn foo() {}\", \"pub(crate)\");\n+        check_assist_target(change_visibility, \"struct S { <|>field: u32 }\", \"field\");\n+    }\n }"}, {"sha": "69b535a274a534c63727344a4213f33836ab9161", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=3be98f2ac93b278828e76eb813bdd8033f647b12", "patch": "@@ -65,14 +65,15 @@ pub(crate) fn fill_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n             buf.push_str(\" => (),\\n\");\n         }\n         buf.push_str(\"}\");\n+        edit.target(match_expr.syntax().range());\n         edit.set_cursor(expr.syntax().range().start());\n         edit.replace_node_and_indent(match_expr.syntax(), buf);\n     })\n }\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::check_assist;\n+    use crate::helpers::{check_assist, check_assist_target};\n \n     use super::fill_match_arms;\n \n@@ -139,4 +140,19 @@ mod tests {\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn fill_match_arms_target() {\n+        check_assist_target(\n+            fill_match_arms,\n+            r#\"\n+            enum E { X, Y}\n+\n+            fn main() {\n+                match E::X<|> {}\n+            }\n+            \"#,\n+            \"match E::X {}\",\n+        );\n+    }\n }"}, {"sha": "33da58f1761a0586b2166d7aac76c3a242525b3b", "filename": "crates/ra_assists/src/flip_comma.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs?ref=3be98f2ac93b278828e76eb813bdd8033f647b12", "patch": "@@ -11,6 +11,7 @@ pub(crate) fn flip_comma(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let prev = non_trivia_sibling(comma, Direction::Prev)?;\n     let next = non_trivia_sibling(comma, Direction::Next)?;\n     ctx.build(\"flip comma\", |edit| {\n+        edit.target(comma.range());\n         edit.replace(prev.range(), next.text());\n         edit.replace(next.range(), prev.text());\n     })\n@@ -20,7 +21,7 @@ pub(crate) fn flip_comma(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::check_assist;\n+    use crate::helpers::{check_assist, check_assist_target};\n \n     #[test]\n     fn flip_comma_works_for_function_parameters() {\n@@ -30,4 +31,9 @@ mod tests {\n             \"fn foo(y: Result<(), ()>,<|> x: i32) {}\",\n         )\n     }\n+\n+    #[test]\n+    fn flip_comma_target() {\n+        check_assist_target(flip_comma, \"fn foo(x: i32,<|> y: Result<(), ()>) {}\", \",\")\n+    }\n }"}, {"sha": "934d1d6b3ca2b5a5be12f768eae62ede6045d6ef", "filename": "crates/ra_assists/src/introduce_variable.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs?ref=3be98f2ac93b278828e76eb813bdd8033f647b12", "patch": "@@ -45,6 +45,7 @@ pub(crate) fn introduce_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Ass\n         } else {\n             buf.push_str(\";\");\n             indent.text().push_to(&mut buf);\n+            edit.target(expr.syntax().range());\n             edit.replace(expr.syntax().range(), \"var_name\".to_string());\n             edit.insert(anchor_stmt.range().start(), buf);\n             if wrap_in_block {\n@@ -58,7 +59,7 @@ pub(crate) fn introduce_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Ass\n fn valid_covering_node(node: &SyntaxNode) -> bool {\n     node.kind() != COMMENT\n }\n-/// Check wether the node is a valid expression which can be extracted to a variable.\n+/// Check whether the node is a valid expression which can be extracted to a variable.\n /// In general that's true for any expression, but in some cases that would produce invalid code.\n fn valid_target_expr(node: &SyntaxNode) -> Option<&ast::Expr> {\n     match node.kind() {\n@@ -74,7 +75,7 @@ fn valid_target_expr(node: &SyntaxNode) -> Option<&ast::Expr> {\n /// and a boolean indicating whether we have to wrap it within a { } block\n /// to produce correct code.\n /// It can be a statement, the last in a block expression or a wanna be block\n-/// expression like a lamba or match arm.\n+/// expression like a lambda or match arm.\n fn anchor_stmt(expr: &ast::Expr) -> Option<(&SyntaxNode, bool)> {\n     expr.syntax().ancestors().find_map(|node| {\n         if ast::Stmt::cast(node).is_some() {\n@@ -100,7 +101,7 @@ fn anchor_stmt(expr: &ast::Expr) -> Option<(&SyntaxNode, bool)> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_range};\n+    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_range, check_assist_target, check_assist_range_target};\n \n     #[test]\n     fn test_introduce_var_simple() {\n@@ -425,4 +426,32 @@ fn main() {\n \",\n         );\n     }\n+\n+    // FIXME: This is not quite correct, but good enough(tm) for the sorting heuristic\n+    #[test]\n+    fn introduce_var_target() {\n+        check_assist_target(\n+            introduce_variable,\n+            \"\n+fn foo() -> u32 {\n+    r<|>eturn 2 + 2;\n+}\n+\",\n+            \"2 + 2\",\n+        );\n+\n+        check_assist_range_target(\n+            introduce_variable,\n+            \"\n+fn main() {\n+    let x = true;\n+    let tuple = match x {\n+        true => (<|>2 + 2<|>, true)\n+        _ => (0, false)\n+    };\n+}\n+\",\n+            \"2 + 2\",\n+        );\n+    }\n }"}, {"sha": "2590faca92991fff9394684f9680396b39154335", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=3be98f2ac93b278828e76eb813bdd8033f647b12", "patch": "@@ -65,7 +65,7 @@ where\n                 Assist::Unresolved(..) => unreachable!(),\n             })\n             .collect::<Vec<(AssistLabel, AssistAction)>>();\n-        a.sort_unstable_by(|a, b| match a {\n+        a.sort_by(|a, b| match a {\n             // Some(y) < Some(x) < None for y < x\n             (_, AssistAction { target: Some(a), .. }) => match b {\n                 (_, AssistAction { target: Some(b), .. }) => a.len().cmp(&b.len()),\n@@ -163,6 +163,45 @@ mod helpers {\n         assert_eq_text!(after, &actual);\n     }\n \n+    pub(crate) fn check_assist_target(\n+        assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n+        before: &str,\n+        target: &str,\n+    ) {\n+        let (before_cursor_pos, before) = extract_offset(before);\n+        let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+        let frange =\n+            FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n+        let assist =\n+            AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n+        let action = match assist {\n+            Assist::Unresolved(_) => unreachable!(),\n+            Assist::Resolved(_, it) => it,\n+        };\n+\n+        let range = action.target.expect(\"expected target on action\");\n+        assert_eq_text!(&before[range.start().to_usize()..range.end().to_usize()], target);\n+    }\n+\n+    pub(crate) fn check_assist_range_target(\n+        assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n+        before: &str,\n+        target: &str,\n+    ) {\n+        let (range, before) = extract_range(before);\n+        let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+        let frange = FileRange { file_id, range };\n+        let assist =\n+            AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n+        let action = match assist {\n+            Assist::Unresolved(_) => unreachable!(),\n+            Assist::Resolved(_, it) => it,\n+        };\n+\n+        let range = action.target.expect(\"expected target on action\");\n+        assert_eq_text!(&before[range.start().to_usize()..range.end().to_usize()], target);\n+    }\n+\n     pub(crate) fn check_assist_not_applicable(\n         assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n         before: &str,\n@@ -181,10 +220,10 @@ mod tests {\n     use hir::mock::MockDatabase;\n     use ra_syntax::TextRange;\n     use ra_db::FileRange;\n-    use test_utils::extract_offset;\n+    use test_utils::{extract_offset, extract_range};\n \n     #[test]\n-    fn assist_order() {\n+    fn assist_order_field_struct() {\n         let before = \"struct Foo { <|>bar: u32 }\";\n         let (before_cursor_pos, before) = extract_offset(before);\n         let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n@@ -197,4 +236,25 @@ mod tests {\n         assert_eq!(assists.next().expect(\"expected assist\").0.label, \"add `#[derive]`\");\n     }\n \n+    #[test]\n+    fn assist_order_if_expr() {\n+        let before = \"\n+        pub fn test_some_range(a: int) -> bool {\n+            if let 2..6 = 5<|> {\n+                true\n+            } else {\n+                false\n+            }\n+        }\";\n+        let (before_cursor_pos, before) = extract_offset(before);\n+        let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+        let frange =\n+            FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n+        let assists = super::assists(&db, frange);\n+        let mut assists = assists.iter();\n+\n+        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"introduce variable\");\n+        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"replace with match\");\n+    }\n+\n }"}, {"sha": "e9d0a635b3ed9563908e40494e55309745b9d47e", "filename": "crates/ra_assists/src/remove_dbg.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs?ref=3be98f2ac93b278828e76eb813bdd8033f647b12", "patch": "@@ -47,6 +47,7 @@ pub(crate) fn remove_dbg(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     };\n \n     ctx.build(\"remove dbg!()\", |edit| {\n+        edit.target(macro_call.syntax().range());\n         edit.replace(macro_range, macro_content);\n         edit.set_cursor(cursor_pos);\n     })\n@@ -78,7 +79,7 @@ fn is_valid_macrocall(macro_call: &ast::MacroCall, macro_name: &str) -> Option<b\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn test_remove_dbg() {\n@@ -120,4 +121,19 @@ fn foo(n: usize) {\n         check_assist_not_applicable(remove_dbg, \"<|>dbg(5, 6, 7)\");\n         check_assist_not_applicable(remove_dbg, \"<|>dbg!(5, 6, 7\");\n     }\n+\n+    #[test]\n+    fn remove_dbg_target() {\n+        check_assist_target(\n+            remove_dbg,\n+            \"\n+fn foo(n: usize) {\n+    if let Some(_) = dbg!(n.<|>checked_sub(4)) {\n+        // ...\n+    }\n+}\n+\",\n+            \"dbg!(n.checked_sub(4))\",\n+        );\n+    }\n }"}, {"sha": "a22ec558473ea259c7f00e9578b28ce0c545f449", "filename": "crates/ra_assists/src/replace_if_let_with_match.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs?ref=3be98f2ac93b278828e76eb813bdd8033f647b12", "patch": "@@ -17,6 +17,7 @@ pub(crate) fn replace_if_let_with_match(ctx: AssistCtx<impl HirDatabase>) -> Opt\n \n     ctx.build(\"replace with match\", |edit| {\n         let match_expr = build_match_expr(expr, pat, then_block, else_block);\n+        edit.target(if_expr.syntax().range());\n         edit.replace_node_and_indent(if_expr.syntax(), match_expr);\n         edit.set_cursor(if_expr.syntax().range().start())\n     })\n@@ -46,7 +47,7 @@ fn format_arm(block: &ast::Block) -> String {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::check_assist;\n+    use crate::helpers::{check_assist, check_assist_target};\n \n     #[test]\n     fn test_replace_if_let_with_match_unwraps_simple_expressions() {\n@@ -73,4 +74,26 @@ impl VariantData {\n }           \",\n         )\n     }\n+\n+    #[test]\n+    fn replace_if_let_with_match_target() {\n+        check_assist_target(\n+            replace_if_let_with_match,\n+            \"\n+impl VariantData {\n+    pub fn is_struct(&self) -> bool {\n+        if <|>let VariantData::Struct(..) = *self {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+}           \",\n+            \"if let VariantData::Struct(..) = *self {\n+            true\n+        } else {\n+            false\n+        }\",\n+        );\n+    }\n }"}, {"sha": "051bc6fecf2ab9b8b5b58c915fd2318959eec003", "filename": "crates/ra_assists/src/split_import.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be98f2ac93b278828e76eb813bdd8033f647b12/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs?ref=3be98f2ac93b278828e76eb813bdd8033f647b12", "patch": "@@ -34,7 +34,7 @@ pub(crate) fn split_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::check_assist;\n+    use crate::helpers::{check_assist, check_assist_target};\n \n     #[test]\n     fn test_split_import() {\n@@ -53,4 +53,9 @@ mod tests {\n             \"use algo::{<|>visitor::{Visitor, visit}}\",\n         )\n     }\n+\n+    #[test]\n+    fn split_import_target() {\n+        check_assist_target(split_import, \"use algo::<|>visitor::{Visitor, visit}\", \"::\");\n+    }\n }"}]}