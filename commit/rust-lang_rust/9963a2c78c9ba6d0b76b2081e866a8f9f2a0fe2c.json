{"sha": "9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NjNhMmM3OGM5YmE2ZDBiNzZiMjA4MWU4NjZhOGY5ZjJhMGZlMmM=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-09-19T16:30:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-19T16:30:24Z"}, "message": "Merge pull request #1171 from oli-obk/examples\n\nalso run clippy on examples, tests and benchmarks", "tree": {"sha": "15d4ab04e78974909281e8ce260f981d45de5d6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d4ab04e78974909281e8ce260f981d45de5d6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c", "html_url": "https://github.com/rust-lang/rust/commit/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f1120b3460eff614bb08623cb0be2365a07f8c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1120b3460eff614bb08623cb0be2365a07f8c5", "html_url": "https://github.com/rust-lang/rust/commit/5f1120b3460eff614bb08623cb0be2365a07f8c5"}, {"sha": "c89c5d21c17f2070c03779bfc58254a98eafe0f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c89c5d21c17f2070c03779bfc58254a98eafe0f8", "html_url": "https://github.com/rust-lang/rust/commit/c89c5d21c17f2070c03779bfc58254a98eafe0f8"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "1b9333d80b091d9c5cb0f8c92a8c6146da5367f5", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c", "patch": "@@ -2,23 +2,26 @@\n #![feature(plugin_registrar)]\n #![feature(rustc_private)]\n #![allow(unknown_lints)]\n+#![feature(borrow_state)]\n #![allow(missing_docs_in_private_items)]\n \n extern crate rustc_plugin;\n use rustc_plugin::Registry;\n \n extern crate clippy_lints;\n \n-pub use clippy_lints::*;\n-\n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    register_plugins(reg);\n+    if reg.sess.lint_store.borrow_state() == std::cell::BorrowState::Unused && reg.sess.lint_store.borrow().get_lint_groups().iter().any(|&(s, _, _)| s == \"clippy\") {\n+        reg.sess.struct_warn(\"running cargo clippy on a crate that also imports the clippy plugin\").emit();\n+    } else {\n+        clippy_lints::register_plugins(reg);\n+    }\n }\n \n // only exists to let the dogfood integration test works.\n // Don't run clippy as an executable directly\n-#[allow(dead_code, print_stdout)]\n+#[allow(dead_code)]\n fn main() {\n     panic!(\"Please use the cargo-clippy executable\");\n }"}, {"sha": "83c569ebb397ec7c34ad9f3bb170aaddb24085e2", "filename": "src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c", "patch": "@@ -148,8 +148,8 @@ pub fn main() {\n                     if let Err(code) = process(std::iter::once(\"--lib\".to_owned()).chain(args), &dep_path, &sys_root) {\n                         std::process::exit(code);\n                     }\n-                } else if first == \"bin\" {\n-                    if let Err(code) = process(vec![\"--bin\".to_owned(), target.name].into_iter().chain(args), &dep_path, &sys_root) {\n+                } else if [\"bin\", \"example\", \"test\", \"bench\"].contains(&&**first) {\n+                    if let Err(code) = process(vec![format!(\"--{}\", first), target.name].into_iter().chain(args), &dep_path, &sys_root) {\n                         std::process::exit(code);\n                     }\n                 }"}, {"sha": "b7efbde6596a517a22a30032ff6ff0457daa654d", "filename": "tests/camel_case.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c/tests%2Fcamel_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c/tests%2Fcamel_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcamel_case.rs?ref=9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c", "patch": "@@ -1,7 +1,6 @@\n-#[allow(plugin_as_library)]\n-extern crate clippy;\n+extern crate clippy_lints;\n \n-use clippy::utils::{camel_case_from, camel_case_until};\n+use clippy_lints::utils::{camel_case_from, camel_case_until};\n \n #[test]\n fn from_full() {"}, {"sha": "deadd499192d892f3ffa9b86718ee0cf76bcd21c", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c", "patch": "@@ -6,7 +6,7 @@ use std::env::{set_var, var};\n fn run_mode(dir: &'static str, mode: &'static str) {\n     let mut config = compiletest::default_config();\n \n-    let cfg_mode = mode.parse().ok().expect(\"Invalid mode\");\n+    let cfg_mode = mode.parse().expect(\"Invalid mode\");\n     config.target_rustcflags = Some(\"-L target/debug/ -L target/debug/deps\".to_owned());\n     if let Ok(name) = var::<&str>(\"TESTNAME\") {\n         let s: String = name.to_owned();"}, {"sha": "47ea4d874b67422c3f2bd8fb2a861ec25aa192dd", "filename": "tests/consts.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c/tests%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c/tests%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconsts.rs?ref=9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c", "patch": "@@ -1,13 +1,12 @@\n-#![allow(plugin_as_library)]\n #![feature(rustc_private)]\n \n-extern crate clippy;\n+extern crate clippy_lints;\n extern crate rustc;\n extern crate rustc_const_eval;\n extern crate rustc_const_math;\n extern crate syntax;\n \n-use clippy::consts::{constant_simple, Constant, FloatWidth};\n+use clippy_lints::consts::{constant_simple, Constant, FloatWidth};\n use rustc_const_math::ConstInt;\n use rustc::hir::*;\n use syntax::ast::{LitIntType, LitKind, StrStyle};"}, {"sha": "1d9d3dedd5dd1a5f3d51bbb59ae7ba27cf571a0a", "filename": "tests/matches.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c/tests%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c/tests%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmatches.rs?ref=9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c", "patch": "@@ -1,16 +1,15 @@\n-#![allow(plugin_as_library)]\n #![feature(rustc_private)]\n \n-extern crate clippy;\n+extern crate clippy_lints;\n extern crate syntax;\n \n #[test]\n fn test_overlapping() {\n-    use clippy::matches::overlapping;\n+    use clippy_lints::matches::overlapping;\n     use syntax::codemap::DUMMY_SP;\n \n     let sp = |s, e| {\n-        clippy::matches::SpannedRange {\n+        clippy_lints::matches::SpannedRange {\n             span: DUMMY_SP,\n             node: (s, e),\n         }"}, {"sha": "90f1c76fb80e83a6fe51c1dc330ac18dcff64241", "filename": "tests/trim_multiline.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c/tests%2Ftrim_multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c/tests%2Ftrim_multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftrim_multiline.rs?ref=9963a2c78c9ba6d0b76b2081e866a8f9f2a0fe2c", "patch": "@@ -1,8 +1,7 @@\n /// test the multiline-trim function\n-#[allow(plugin_as_library)]\n-extern crate clippy;\n+extern crate clippy_lints;\n \n-use clippy::utils::trim_multiline;\n+use clippy_lints::utils::trim_multiline;\n \n #[test]\n fn test_single_line() {"}]}