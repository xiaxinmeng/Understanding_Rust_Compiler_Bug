{"sha": "7ffc7d33082475ffd3b8768be001af5b8988a54b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZmM3ZDMzMDgyNDc1ZmZkM2I4NzY4YmUwMDFhZjViODk4OGE1NGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-21T15:20:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-21T15:20:44Z"}, "message": "Move path completion to descriptors", "tree": {"sha": "e60faef02ac8be30ab81dae91676102c61cbbb72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e60faef02ac8be30ab81dae91676102c61cbbb72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ffc7d33082475ffd3b8768be001af5b8988a54b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ffc7d33082475ffd3b8768be001af5b8988a54b", "html_url": "https://github.com/rust-lang/rust/commit/7ffc7d33082475ffd3b8768be001af5b8988a54b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ffc7d33082475ffd3b8768be001af5b8988a54b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11f19b784923ac701bc6fc39a6aea712f0091bf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f19b784923ac701bc6fc39a6aea712f0091bf7", "html_url": "https://github.com/rust-lang/rust/commit/11f19b784923ac701bc6fc39a6aea712f0091bf7"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "8034060de34a028f37a9cdfd95ea217df634ed44", "filename": "crates/ra_analysis/src/completion/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ffc7d33082475ffd3b8768be001af5b8988a54b/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffc7d33082475ffd3b8768be001af5b8988a54b/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fmod.rs?ref=7ffc7d33082475ffd3b8768be001af5b8988a54b", "patch": "@@ -220,6 +220,20 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_completion_self_path() {\n+        check_scope_completion(\n+            r\"\n+            use self::m::B<|>;\n+\n+            mod m {\n+                struct Bar;\n+            }\n+            \",\n+            r#\"[CompletionItem { label: \"Bar\", lookup: None, snippet: None }]\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_completion_mod_scope_nested() {\n         check_scope_completion("}, {"sha": "d301a3c02035a365d524445a4ec3e424138d6c47", "filename": "crates/ra_analysis/src/completion/reference_completion.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7ffc7d33082475ffd3b8768be001af5b8988a54b/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffc7d33082475ffd3b8768be001af5b8988a54b/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs?ref=7ffc7d33082475ffd3b8768be001af5b8988a54b", "patch": "@@ -13,7 +13,7 @@ use crate::{\n     descriptors::{\n         module::{ModuleDescriptor},\n         function::FnScopes,\n-        Path, PathKind,\n+        Path,\n     },\n     Cancelable\n };\n@@ -148,9 +148,13 @@ fn complete_path(\n     acc: &mut Vec<CompletionItem>,\n     db: &RootDatabase,\n     module: &ModuleDescriptor,\n-    path: Path,\n+    mut path: Path,\n ) -> Cancelable<()> {\n-    let target_module = match find_target_module(module, path) {\n+    if path.segments.is_empty() {\n+        return Ok(());\n+    }\n+    path.segments.pop();\n+    let target_module = match module.resolve_path(path) {\n         None => return Ok(()),\n         Some(it) => it,\n     };\n@@ -167,19 +171,6 @@ fn complete_path(\n     Ok(())\n }\n \n-fn find_target_module(module: &ModuleDescriptor, path: Path) -> Option<ModuleDescriptor> {\n-    if path.kind != PathKind::Crate {\n-        return None;\n-    }\n-    let mut segments = path.segments;\n-    segments.pop();\n-    let mut target_module = module.crate_root();\n-    for name in segments {\n-        target_module = target_module.child(&name)?;\n-    }\n-    Some(target_module)\n-}\n-\n fn complete_mod_item_snippets(acc: &mut Vec<CompletionItem>) {\n     acc.push(CompletionItem {\n         label: \"tfn\".to_string(),"}, {"sha": "a7e41e3db385b8763e6629edc5390a4e4b5e22f6", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ffc7d33082475ffd3b8768be001af5b8988a54b/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffc7d33082475ffd3b8768be001af5b8988a54b/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=7ffc7d33082475ffd3b8768be001af5b8988a54b", "patch": "@@ -14,11 +14,11 @@ use relative_path::RelativePathBuf;\n \n use crate::{\n     db::SyntaxDatabase, syntax_ptr::SyntaxPtr, FileId, FilePosition, Cancelable,\n-    descriptors::DescriptorDatabase,\n+    descriptors::{Path, PathKind, DescriptorDatabase},\n     input::SourceRootId\n };\n \n-pub(crate) use self::{nameres::ModuleScope};\n+pub(crate) use self::nameres::ModuleScope;\n \n /// `ModuleDescriptor` is API entry point to get all the information\n /// about a particular module.\n@@ -131,6 +131,19 @@ impl ModuleDescriptor {\n         Ok(res)\n     }\n \n+    pub(crate) fn resolve_path(&self, path: Path) -> Option<ModuleDescriptor> {\n+        let mut curr = match path.kind {\n+            PathKind::Crate => self.crate_root(),\n+            PathKind::Self_ | PathKind::Plain => self.clone(),\n+            PathKind::Super => self.parent()?,\n+        };\n+        let segments = path.segments;\n+        for name in segments {\n+            curr = curr.child(&name)?;\n+        }\n+        Some(curr)\n+    }\n+\n     pub fn problems(&self, db: &impl DescriptorDatabase) -> Vec<(SyntaxNode, Problem)> {\n         self.module_id.problems(&self.tree, db)\n     }"}]}