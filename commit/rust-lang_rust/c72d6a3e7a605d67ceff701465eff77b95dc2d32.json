{"sha": "c72d6a3e7a605d67ceff701465eff77b95dc2d32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MmQ2YTNlN2E2MDVkNjdjZWZmNzAxNDY1ZWZmNzdiOTVkYzJkMzI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-21T19:07:09Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-21T19:07:09Z"}, "message": "Merge remote branch 'espindola/params'", "tree": {"sha": "2e3b287018dc5f4fe9cf22b8b5a2dc3b179f5293", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e3b287018dc5f4fe9cf22b8b5a2dc3b179f5293"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c72d6a3e7a605d67ceff701465eff77b95dc2d32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c72d6a3e7a605d67ceff701465eff77b95dc2d32", "html_url": "https://github.com/rust-lang/rust/commit/c72d6a3e7a605d67ceff701465eff77b95dc2d32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c72d6a3e7a605d67ceff701465eff77b95dc2d32/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51542b279fcae0f740a76b631ce0fbcdf4c7cf5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/51542b279fcae0f740a76b631ce0fbcdf4c7cf5e", "html_url": "https://github.com/rust-lang/rust/commit/51542b279fcae0f740a76b631ce0fbcdf4c7cf5e"}, {"sha": "76728137089ddb174d18accd7024a6187148104d", "url": "https://api.github.com/repos/rust-lang/rust/commits/76728137089ddb174d18accd7024a6187148104d", "html_url": "https://github.com/rust-lang/rust/commit/76728137089ddb174d18accd7024a6187148104d"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "4d9efd4a5da30e514b3fc8d62972714222b23268", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c72d6a3e7a605d67ceff701465eff77b95dc2d32/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72d6a3e7a605d67ceff701465eff77b95dc2d32/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=c72d6a3e7a605d67ceff701465eff77b95dc2d32", "patch": "@@ -31,8 +31,11 @@ import std.option.none;\n import std.option.some;\n \n type ty_table = hashmap[ast.def_id, @ty.t];\n+type ty_item_table = hashmap[ast.def_id,@ast.item];\n+\n type crate_ctxt = rec(session.session sess,\n                       @ty_table item_types,\n+                      @ty_item_table item_items,\n                       vec[ast.obj_field] obj_fields,\n                       mutable int next_var_id);\n \n@@ -41,7 +44,8 @@ type fn_ctxt = rec(@ty.t ret_ty,\n                    @crate_ctxt ccx);\n \n // Used for ast_ty_to_ty() below.\n-type ty_getter = fn(ast.def_id) -> @ty.t;\n+type ty_and_params = rec(vec[ast.ty_param] params, @ty.t ty);\n+type ty_getter = fn(ast.def_id) -> ty_and_params;\n \n // Replaces parameter types inside a type with type variables.\n fn generalize_ty(@crate_ctxt cx, @ty.t t) -> @ty.t {\n@@ -118,7 +122,7 @@ fn ast_ty_to_ty(ty_getter getter, &@ast.ty ast_ty) -> @ty.t {\n                 case (ast.def_ty(?id)) {\n                     // TODO: maybe record cname chains so we can do\n                     // \"foo = int\" like OCaml?\n-                    sty = getter(id).struct;\n+                    sty = getter(id).ty.struct;\n                 }\n                 case (ast.def_ty_arg(?id))  { sty = ty.ty_param(id); }\n                 case (_)                    { fail; }\n@@ -155,14 +159,39 @@ fn ast_ty_to_ty(ty_getter getter, &@ast.ty ast_ty) -> @ty.t {\n // A convenience function to use a crate_ctxt to resolve names for\n // ast_ty_to_ty.\n fn ast_ty_to_ty_crate(@crate_ctxt ccx, &@ast.ty ast_ty) -> @ty.t {\n-    fn getter(@crate_ctxt ccx, ast.def_id id) -> @ty.t {\n+    fn getter(@crate_ctxt ccx, ast.def_id id) -> ty_and_params {\n         check (ccx.item_types.contains_key(id));\n-        ret ccx.item_types.get(id);\n+        check (ccx.item_items.contains_key(id));\n+        auto ty = ccx.item_types.get(id);\n+        auto item = ccx.item_items.get(id);\n+        auto params = ty_params_of_item(item);\n+        ret rec(params = params, ty = ty);\n     }\n     auto f = bind getter(ccx, _);\n     ret ast_ty_to_ty(f, ast_ty);\n }\n \n+fn ty_params_of_item(@ast.item item) -> vec[ast.ty_param] {\n+    alt (item.node) {\n+        case (ast.item_fn(_, _, ?p, _, _)) {\n+            ret p;\n+        }\n+        case (ast.item_ty(_, _, ?p, _, _)) {\n+            ret p;\n+        }\n+        case (ast.item_tag(_, _, ?p, _)) {\n+            ret p;\n+        }\n+        case (ast.item_obj(_, _, ?p, _, _)) {\n+            ret p;\n+        }\n+        case (_) {\n+            let vec[ast.ty_param] r = vec();\n+            ret r;\n+        }\n+    }\n+}\n+\n // Item collection - a pair of bootstrap passes:\n //\n // 1. Collect the IDs of all type items (typedefs) and store them in a table.\n@@ -175,16 +204,16 @@ fn ast_ty_to_ty_crate(@crate_ctxt ccx, &@ast.ty ast_ty) -> @ty.t {\n // AST, along with a table mapping item IDs to their types.\n \n fn collect_item_types(session.session sess, @ast.crate crate)\n-    -> tup(@ast.crate, @ty_table) {\n-\n-    type ty_item_table = hashmap[ast.def_id,@ast.item];\n+    -> tup(@ast.crate, @ty_table, @ty_item_table) {\n \n     fn getter(@ty_item_table id_to_ty_item,\n               @ty_table item_to_ty,\n-              ast.def_id id) -> @ty.t {\n+              ast.def_id id) -> ty_and_params {\n         check (id_to_ty_item.contains_key(id));\n         auto item = id_to_ty_item.get(id);\n-        ret ty_of_item(id_to_ty_item, item_to_ty, item);\n+        auto ty = ty_of_item(id_to_ty_item, item_to_ty, item);\n+        auto params = ty_params_of_item(item);\n+        ret rec(params = params, ty = ty);\n     }\n \n     fn ty_of_arg(@ty_item_table id_to_ty_item,\n@@ -485,7 +514,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n              fold_item_tag   = bind fold_item_tag(_,_,_,_,_,_)\n              with *fld_2);\n     auto crate_ = fold.fold_crate[@env](e, fld_2, crate);\n-    ret tup(crate_, item_to_ty);\n+    ret tup(crate_, item_to_ty, id_to_ty_item);\n }\n \n fn unify(&@fn_ctxt fcx, @ty.t expected, @ty.t actual) -> ty.unify_result {\n@@ -1634,6 +1663,7 @@ fn check_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n \n     auto ccx = @rec(sess=sess,\n                     item_types=result._1,\n+                    item_items=result._2,\n                     obj_fields=fields,\n                     mutable next_var_id=0);\n "}]}