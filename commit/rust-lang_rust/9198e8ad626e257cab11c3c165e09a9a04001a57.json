{"sha": "9198e8ad626e257cab11c3c165e09a9a04001a57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxOThlOGFkNjI2ZTI1N2NhYjExYzNjMTY1ZTA5YTlhMDQwMDFhNTc=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-08-01T15:39:46Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-08-03T09:43:09Z"}, "message": "Work around LLVM issues with explicit register in inline asm\n\nFixes #74658", "tree": {"sha": "11f88513c5e462976bd6fba00d99039f2be44f54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11f88513c5e462976bd6fba00d99039f2be44f54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9198e8ad626e257cab11c3c165e09a9a04001a57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9198e8ad626e257cab11c3c165e09a9a04001a57", "html_url": "https://github.com/rust-lang/rust/commit/9198e8ad626e257cab11c3c165e09a9a04001a57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9198e8ad626e257cab11c3c165e09a9a04001a57/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbc2ef25fb5e15445de38f19ba75547a6cf35cae", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc2ef25fb5e15445de38f19ba75547a6cf35cae", "html_url": "https://github.com/rust-lang/rust/commit/dbc2ef25fb5e15445de38f19ba75547a6cf35cae"}], "stats": {"total": 1050, "additions": 959, "deletions": 91}, "files": [{"sha": "fb2e1c435248b399a27e10ea23af684019cc4eba", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 126, "deletions": 29, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/9198e8ad626e257cab11c3c165e09a9a04001a57/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9198e8ad626e257cab11c3c165e09a9a04001a57/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=9198e8ad626e257cab11c3c165e09a9a04001a57", "patch": "@@ -130,7 +130,9 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         for (idx, op) in operands.iter().enumerate() {\n             match *op {\n                 InlineAsmOperandRef::Out { reg, late, place } => {\n-                    let ty = if let Some(place) = place {\n+                    let mut layout = None;\n+                    let ty = if let Some(ref place) = place {\n+                        layout = Some(&place.layout);\n                         llvm_fixup_output_type(self.cx, reg.reg_class(), &place.layout)\n                     } else {\n                         // If the output is discarded, we don't really care what\n@@ -141,20 +143,21 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                     output_types.push(ty);\n                     op_idx.insert(idx, constraints.len());\n                     let prefix = if late { \"=\" } else { \"=&\" };\n-                    constraints.push(format!(\"{}{}\", prefix, reg_to_llvm(reg)));\n+                    constraints.push(format!(\"{}{}\", prefix, reg_to_llvm(reg, layout)));\n                 }\n                 InlineAsmOperandRef::InOut { reg, late, in_value, out_place } => {\n-                    let ty = if let Some(ref out_place) = out_place {\n-                        llvm_fixup_output_type(self.cx, reg.reg_class(), &out_place.layout)\n+                    let layout = if let Some(ref out_place) = out_place {\n+                        &out_place.layout\n                     } else {\n                         // LLVM required tied operands to have the same type,\n                         // so we just use the type of the input.\n-                        llvm_fixup_output_type(self.cx, reg.reg_class(), &in_value.layout)\n+                        &in_value.layout\n                     };\n+                    let ty = llvm_fixup_output_type(self.cx, reg.reg_class(), layout);\n                     output_types.push(ty);\n                     op_idx.insert(idx, constraints.len());\n                     let prefix = if late { \"=\" } else { \"=&\" };\n-                    constraints.push(format!(\"{}{}\", prefix, reg_to_llvm(reg)));\n+                    constraints.push(format!(\"{}{}\", prefix, reg_to_llvm(reg, Some(layout))));\n                 }\n                 _ => {}\n             }\n@@ -165,11 +168,11 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         for (idx, op) in operands.iter().enumerate() {\n             match *op {\n                 InlineAsmOperandRef::In { reg, value } => {\n-                    let value =\n+                    let llval =\n                         llvm_fixup_input(self, value.immediate(), reg.reg_class(), &value.layout);\n-                    inputs.push(value);\n+                    inputs.push(llval);\n                     op_idx.insert(idx, constraints.len());\n-                    constraints.push(reg_to_llvm(reg));\n+                    constraints.push(reg_to_llvm(reg, Some(&value.layout)));\n                 }\n                 InlineAsmOperandRef::InOut { reg, late: _, in_value, out_place: _ } => {\n                     let value = llvm_fixup_input(\n@@ -410,10 +413,80 @@ fn inline_asm_call(\n     }\n }\n \n+/// If the register is an xmm/ymm/zmm register then return its index.\n+fn xmm_reg_index(reg: InlineAsmReg) -> Option<u32> {\n+    match reg {\n+        InlineAsmReg::X86(reg)\n+            if reg as u32 >= X86InlineAsmReg::xmm0 as u32\n+                && reg as u32 <= X86InlineAsmReg::xmm15 as u32 =>\n+        {\n+            Some(reg as u32 - X86InlineAsmReg::xmm0 as u32)\n+        }\n+        InlineAsmReg::X86(reg)\n+            if reg as u32 >= X86InlineAsmReg::ymm0 as u32\n+                && reg as u32 <= X86InlineAsmReg::ymm15 as u32 =>\n+        {\n+            Some(reg as u32 - X86InlineAsmReg::ymm0 as u32)\n+        }\n+        InlineAsmReg::X86(reg)\n+            if reg as u32 >= X86InlineAsmReg::zmm0 as u32\n+                && reg as u32 <= X86InlineAsmReg::zmm31 as u32 =>\n+        {\n+            Some(reg as u32 - X86InlineAsmReg::zmm0 as u32)\n+        }\n+        _ => None,\n+    }\n+}\n+\n+/// If the register is an AArch64 vector register then return its index.\n+fn a64_vreg_index(reg: InlineAsmReg) -> Option<u32> {\n+    match reg {\n+        InlineAsmReg::AArch64(reg)\n+            if reg as u32 >= AArch64InlineAsmReg::v0 as u32\n+                && reg as u32 <= AArch64InlineAsmReg::v31 as u32 =>\n+        {\n+            Some(reg as u32 - AArch64InlineAsmReg::v0 as u32)\n+        }\n+        _ => None,\n+    }\n+}\n+\n /// Converts a register class to an LLVM constraint code.\n-fn reg_to_llvm(reg: InlineAsmRegOrRegClass) -> String {\n+fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>) -> String {\n     match reg {\n-        InlineAsmRegOrRegClass::Reg(reg) => format!(\"{{{}}}\", reg.name()),\n+        // For vector registers LLVM wants the register name to match the type size.\n+        InlineAsmRegOrRegClass::Reg(reg) => {\n+            if let Some(idx) = xmm_reg_index(reg) {\n+                let class = if let Some(layout) = layout {\n+                    match layout.size.bytes() {\n+                        64 => 'z',\n+                        32 => 'y',\n+                        _ => 'x',\n+                    }\n+                } else {\n+                    // We use f32 as the type for discarded outputs\n+                    'x'\n+                };\n+                format!(\"{{{}mm{}}}\", class, idx)\n+            } else if let Some(idx) = a64_vreg_index(reg) {\n+                let class = if let Some(layout) = layout {\n+                    match layout.size.bytes() {\n+                        16 => 'q',\n+                        8 => 'd',\n+                        4 => 's',\n+                        2 => 'h',\n+                        1 => 'd', // We fixup i8 to i8x8\n+                        _ => unreachable!(),\n+                    }\n+                } else {\n+                    // We use i32 as the type for discarded outputs\n+                    's'\n+                };\n+                format!(\"{{{}{}}}\", class, idx)\n+            } else {\n+                format!(\"{{{}}}\", reg.name())\n+            }\n+        }\n         InlineAsmRegOrRegClass::RegClass(reg) => match reg {\n             InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg) => \"w\",\n@@ -600,18 +673,26 @@ fn llvm_fixup_input(\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::xmm_reg | X86InlineAsmRegClass::zmm_reg),\n             Abi::Vector { .. },\n         ) if layout.size.bytes() == 64 => bx.bitcast(value, bx.cx.type_vector(bx.cx.type_f64(), 8)),\n+        (\n+            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg | ArmInlineAsmRegClass::sreg_low16),\n+            Abi::Scalar(s),\n+        ) => {\n+            if let Primitive::Int(Integer::I32, _) = s.value {\n+                bx.bitcast(value, bx.cx.type_f32())\n+            } else {\n+                value\n+            }\n+        }\n         (\n             InlineAsmRegClass::Arm(\n-                ArmInlineAsmRegClass::sreg_low16\n+                ArmInlineAsmRegClass::dreg\n                 | ArmInlineAsmRegClass::dreg_low8\n-                | ArmInlineAsmRegClass::qreg_low4\n-                | ArmInlineAsmRegClass::dreg\n-                | ArmInlineAsmRegClass::qreg,\n+                | ArmInlineAsmRegClass::dreg_low16,\n             ),\n             Abi::Scalar(s),\n         ) => {\n-            if let Primitive::Int(Integer::I32, _) = s.value {\n-                bx.bitcast(value, bx.cx.type_f32())\n+            if let Primitive::Int(Integer::I64, _) = s.value {\n+                bx.bitcast(value, bx.cx.type_f64())\n             } else {\n                 value\n             }\n@@ -660,18 +741,26 @@ fn llvm_fixup_output(\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::xmm_reg | X86InlineAsmRegClass::zmm_reg),\n             Abi::Vector { .. },\n         ) if layout.size.bytes() == 64 => bx.bitcast(value, layout.llvm_type(bx.cx)),\n+        (\n+            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg | ArmInlineAsmRegClass::sreg_low16),\n+            Abi::Scalar(s),\n+        ) => {\n+            if let Primitive::Int(Integer::I32, _) = s.value {\n+                bx.bitcast(value, bx.cx.type_i32())\n+            } else {\n+                value\n+            }\n+        }\n         (\n             InlineAsmRegClass::Arm(\n-                ArmInlineAsmRegClass::sreg_low16\n+                ArmInlineAsmRegClass::dreg\n                 | ArmInlineAsmRegClass::dreg_low8\n-                | ArmInlineAsmRegClass::qreg_low4\n-                | ArmInlineAsmRegClass::dreg\n-                | ArmInlineAsmRegClass::qreg,\n+                | ArmInlineAsmRegClass::dreg_low16,\n             ),\n             Abi::Scalar(s),\n         ) => {\n-            if let Primitive::Int(Integer::I32, _) = s.value {\n-                bx.bitcast(value, bx.cx.type_i32())\n+            if let Primitive::Int(Integer::I64, _) = s.value {\n+                bx.bitcast(value, bx.cx.type_i64())\n             } else {\n                 value\n             }\n@@ -715,18 +804,26 @@ fn llvm_fixup_output_type(\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::xmm_reg | X86InlineAsmRegClass::zmm_reg),\n             Abi::Vector { .. },\n         ) if layout.size.bytes() == 64 => cx.type_vector(cx.type_f64(), 8),\n+        (\n+            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg | ArmInlineAsmRegClass::sreg_low16),\n+            Abi::Scalar(s),\n+        ) => {\n+            if let Primitive::Int(Integer::I32, _) = s.value {\n+                cx.type_f32()\n+            } else {\n+                layout.llvm_type(cx)\n+            }\n+        }\n         (\n             InlineAsmRegClass::Arm(\n-                ArmInlineAsmRegClass::sreg_low16\n+                ArmInlineAsmRegClass::dreg\n                 | ArmInlineAsmRegClass::dreg_low8\n-                | ArmInlineAsmRegClass::qreg_low4\n-                | ArmInlineAsmRegClass::dreg\n-                | ArmInlineAsmRegClass::qreg,\n+                | ArmInlineAsmRegClass::dreg_low16,\n             ),\n             Abi::Scalar(s),\n         ) => {\n-            if let Primitive::Int(Integer::I32, _) = s.value {\n-                cx.type_f32()\n+            if let Primitive::Int(Integer::I64, _) = s.value {\n+                cx.type_f64()\n             } else {\n                 layout.llvm_type(cx)\n             }"}, {"sha": "a8df350ef60b2b6d91a1dbfd5800ad7fe349dcfa", "filename": "src/test/assembly/asm/aarch64-types.rs", "status": "modified", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/9198e8ad626e257cab11c3c165e09a9a04001a57/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9198e8ad626e257cab11c3c165e09a9a04001a57/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs?ref=9198e8ad626e257cab11c3c165e09a9a04001a57", "patch": "@@ -117,6 +117,23 @@ macro_rules! check {\n     };\n }\n \n+macro_rules! check_reg {\n+    ($func:ident $ty:ident $reg:tt $mov:literal) => {\n+        #[no_mangle]\n+        pub unsafe fn $func(x: $ty) -> $ty {\n+            // Hack to avoid function merging\n+            extern \"Rust\" {\n+                fn dont_merge(s: &str);\n+            }\n+            dont_merge(stringify!($func));\n+\n+            let y;\n+            asm!(concat!($mov, \" \", $reg, \", \", $reg), lateout($reg) y, in($reg) x);\n+            y\n+        }\n+    };\n+}\n+\n // CHECK-LABEL: reg_i8:\n // CHECK: //APP\n // CHECK: mov x{{[0-9]+}}, x{{[0-9]+}}\n@@ -380,3 +397,159 @@ check!(vreg_low16_f32x4 f32x4 vreg_low16 \"fmov\" \"s\");\n // CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n // CHECK: //NO_APP\n check!(vreg_low16_f64x2 f64x2 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: x0_i8:\n+// CHECK: //APP\n+// CHECK: mov x{{[0-9]+}}, x{{[0-9]+}}\n+// CHECK: //NO_APP\n+check_reg!(x0_i8 i8 \"x0\" \"mov\");\n+\n+// CHECK-LABEL: x0_i16:\n+// CHECK: //APP\n+// CHECK: mov x{{[0-9]+}}, x{{[0-9]+}}\n+// CHECK: //NO_APP\n+check_reg!(x0_i16 i16 \"x0\" \"mov\");\n+\n+// CHECK-LABEL: x0_i32:\n+// CHECK: //APP\n+// CHECK: mov x{{[0-9]+}}, x{{[0-9]+}}\n+// CHECK: //NO_APP\n+check_reg!(x0_i32 i32 \"x0\" \"mov\");\n+\n+// CHECK-LABEL: x0_f32:\n+// CHECK: //APP\n+// CHECK: mov x{{[0-9]+}}, x{{[0-9]+}}\n+// CHECK: //NO_APP\n+check_reg!(x0_f32 f32 \"x0\" \"mov\");\n+\n+// CHECK-LABEL: x0_i64:\n+// CHECK: //APP\n+// CHECK: mov x{{[0-9]+}}, x{{[0-9]+}}\n+// CHECK: //NO_APP\n+check_reg!(x0_i64 i64 \"x0\" \"mov\");\n+\n+// CHECK-LABEL: x0_f64:\n+// CHECK: //APP\n+// CHECK: mov x{{[0-9]+}}, x{{[0-9]+}}\n+// CHECK: //NO_APP\n+check_reg!(x0_f64 f64 \"x0\" \"mov\");\n+\n+// CHECK-LABEL: x0_ptr:\n+// CHECK: //APP\n+// CHECK: mov x{{[0-9]+}}, x{{[0-9]+}}\n+// CHECK: //NO_APP\n+check_reg!(x0_ptr ptr \"x0\" \"mov\");\n+\n+// CHECK-LABEL: v0_i8:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_i8 i8 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_i16:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_i16 i16 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_i32:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_i32 i32 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_f32:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_f32 f32 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_i64:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_i64 i64 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_f64:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_f64 f64 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_ptr:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_ptr ptr \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_i8x8:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_i8x8 i8x8 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_i16x4:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_i16x4 i16x4 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_i32x2:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_i32x2 i32x2 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_i64x1:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_i64x1 i64x1 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_f32x2:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_f32x2 f32x2 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_f64x1:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_f64x1 f64x1 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_i8x16:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_i8x16 i8x16 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_i16x8:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_i16x8 i16x8 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_i32x4:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_i32x4 i32x4 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_i64x2:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_i64x2 i64x2 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_f32x4:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_f32x4 f32x4 \"s0\" \"fmov\");\n+\n+// CHECK-LABEL: v0_f64x2:\n+// CHECK: //APP\n+// CHECK: fmov s0, s0\n+// CHECK: //NO_APP\n+check_reg!(v0_f64x2 f64x2 \"s0\" \"fmov\");"}, {"sha": "64b7c93cbc3e6c2693da9f427b67e0c5b9ffe3cf", "filename": "src/test/assembly/asm/arm-types.rs", "status": "modified", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/9198e8ad626e257cab11c3c165e09a9a04001a57/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9198e8ad626e257cab11c3c165e09a9a04001a57/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs?ref=9198e8ad626e257cab11c3c165e09a9a04001a57", "patch": "@@ -108,6 +108,23 @@ macro_rules! check {\n     };\n }\n \n+macro_rules! check_reg {\n+    ($func:ident $ty:ident $reg:tt $mov:literal) => {\n+        #[no_mangle]\n+        pub unsafe fn $func(x: $ty) -> $ty {\n+            // Hack to avoid function merging\n+            extern \"Rust\" {\n+                fn dont_merge(s: &str);\n+            }\n+            dont_merge(stringify!($func));\n+\n+            let y;\n+            asm!(concat!($mov, \" \", $reg, \", \", $reg), lateout($reg) y, in($reg) x);\n+            y\n+        }\n+    };\n+}\n+\n // CHECK-LABEL: reg_i8:\n // CHECK: @APP\n // CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n@@ -413,3 +430,123 @@ check!(qreg_low4_i64x2 i64x2 qreg_low4 \"vmov\");\n // CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n // CHECK: @NO_APP\n check!(qreg_low4_f32x4 f32x4 qreg_low4 \"vmov\");\n+\n+// CHECK-LABEL: r0_i8:\n+// CHECK: @APP\n+// CHECK: mov r0, r0\n+// CHECK: @NO_APP\n+check_reg!(r0_i8 i8 \"r0\" \"mov\");\n+\n+// CHECK-LABEL: r0_i16:\n+// CHECK: @APP\n+// CHECK: mov r0, r0\n+// CHECK: @NO_APP\n+check_reg!(r0_i16 i16 \"r0\" \"mov\");\n+\n+// CHECK-LABEL: r0_i32:\n+// CHECK: @APP\n+// CHECK: mov r0, r0\n+// CHECK: @NO_APP\n+check_reg!(r0_i32 i32 \"r0\" \"mov\");\n+\n+// CHECK-LABEL: r0_f32:\n+// CHECK: @APP\n+// CHECK: mov r0, r0\n+// CHECK: @NO_APP\n+check_reg!(r0_f32 f32 \"r0\" \"mov\");\n+\n+// CHECK-LABEL: r0_ptr:\n+// CHECK: @APP\n+// CHECK: mov r0, r0\n+// CHECK: @NO_APP\n+check_reg!(r0_ptr ptr \"r0\" \"mov\");\n+\n+// CHECK-LABEL: s0_i32:\n+// CHECK: @APP\n+// CHECK: vmov.f32 s0, s0\n+// CHECK: @NO_APP\n+check_reg!(s0_i32 i32 \"s0\" \"vmov.f32\");\n+\n+// CHECK-LABEL: s0_f32:\n+// CHECK: @APP\n+// CHECK: vmov.f32 s0, s0\n+// CHECK: @NO_APP\n+check_reg!(s0_f32 f32 \"s0\" \"vmov.f32\");\n+\n+// CHECK-LABEL: s0_ptr:\n+// CHECK: @APP\n+// CHECK: vmov.f32 s0, s0\n+// CHECK: @NO_APP\n+check_reg!(s0_ptr ptr \"s0\" \"vmov.f32\");\n+\n+// CHECK-LABEL: d0_i64:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d0, d0\n+// CHECK: @NO_APP\n+check_reg!(d0_i64 i64 \"d0\" \"vmov.f64\");\n+\n+// CHECK-LABEL: d0_f64:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d0, d0\n+// CHECK: @NO_APP\n+check_reg!(d0_f64 f64 \"d0\" \"vmov.f64\");\n+\n+// CHECK-LABEL: d0_i8x8:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d0, d0\n+// CHECK: @NO_APP\n+check_reg!(d0_i8x8 i8x8 \"d0\" \"vmov.f64\");\n+\n+// CHECK-LABEL: d0_i16x4:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d0, d0\n+// CHECK: @NO_APP\n+check_reg!(d0_i16x4 i16x4 \"d0\" \"vmov.f64\");\n+\n+// CHECK-LABEL: d0_i32x2:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d0, d0\n+// CHECK: @NO_APP\n+check_reg!(d0_i32x2 i32x2 \"d0\" \"vmov.f64\");\n+\n+// CHECK-LABEL: d0_i64x1:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d0, d0\n+// CHECK: @NO_APP\n+check_reg!(d0_i64x1 i64x1 \"d0\" \"vmov.f64\");\n+\n+// CHECK-LABEL: d0_f32x2:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d0, d0\n+// CHECK: @NO_APP\n+check_reg!(d0_f32x2 f32x2 \"d0\" \"vmov.f64\");\n+\n+// CHECK-LABEL: q0_i8x16:\n+// CHECK: @APP\n+// CHECK: vorr q0, q0, q0\n+// CHECK: @NO_APP\n+check_reg!(q0_i8x16 i8x16 \"q0\" \"vmov\");\n+\n+// CHECK-LABEL: q0_i16x8:\n+// CHECK: @APP\n+// CHECK: vorr q0, q0, q0\n+// CHECK: @NO_APP\n+check_reg!(q0_i16x8 i16x8 \"q0\" \"vmov\");\n+\n+// CHECK-LABEL: q0_i32x4:\n+// CHECK: @APP\n+// CHECK: vorr q0, q0, q0\n+// CHECK: @NO_APP\n+check_reg!(q0_i32x4 i32x4 \"q0\" \"vmov\");\n+\n+// CHECK-LABEL: q0_i64x2:\n+// CHECK: @APP\n+// CHECK: vorr q0, q0, q0\n+// CHECK: @NO_APP\n+check_reg!(q0_i64x2 i64x2 \"q0\" \"vmov\");\n+\n+// CHECK-LABEL: q0_f32x4:\n+// CHECK: @APP\n+// CHECK: vorr q0, q0, q0\n+// CHECK: @NO_APP\n+check_reg!(q0_f32x4 f32x4 \"q0\" \"vmov\");"}, {"sha": "95135a3e5dd63f4744c5129ab9dc553786c045a7", "filename": "src/test/assembly/asm/hexagon-types.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9198e8ad626e257cab11c3c165e09a9a04001a57/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9198e8ad626e257cab11c3c165e09a9a04001a57/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs?ref=9198e8ad626e257cab11c3c165e09a9a04001a57", "patch": "@@ -13,6 +13,10 @@ macro_rules! asm {\n     () => {};\n }\n #[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n macro_rules! stringify {\n     () => {};\n }\n@@ -51,6 +55,23 @@ macro_rules! check {\n     };\n }\n \n+macro_rules! check_reg {\n+    ($func:ident $ty:ident $reg:tt) => {\n+        #[no_mangle]\n+        pub unsafe fn $func(x: $ty) -> $ty {\n+            // Hack to avoid function merging\n+            extern \"Rust\" {\n+                fn dont_merge(s: &str);\n+            }\n+            dont_merge(stringify!($func));\n+\n+            let y;\n+            asm!(concat!($reg, \" = \", $reg), lateout($reg) y, in($reg) x);\n+            y\n+        }\n+    };\n+}\n+\n // CHECK-LABEL: sym_static:\n // CHECK: InlineAsm Start\n // CHECK: r0 = #extern_static\n@@ -100,7 +121,7 @@ pub unsafe fn packet() {\n     }}\", out(reg) _, in(reg) &val);\n }\n \n-// CHECK-LABEL: ptr:\n+// CHECK-LABEL: reg_ptr:\n // CHECK: InlineAsm Start\n // CHECK: r{{[0-9]+}} = r{{[0-9]+}}\n // CHECK: InlineAsm End\n@@ -129,3 +150,33 @@ check!(reg_i8 i8 reg);\n // CHECK: r{{[0-9]+}} = r{{[0-9]+}}\n // CHECK: InlineAsm End\n check!(reg_i16 i16 reg);\n+\n+// CHECK-LABEL: r0_ptr:\n+// CHECK: InlineAsm Start\n+// CHECK: r0 = r0\n+// CHECK: InlineAsm End\n+check_reg!(r0_ptr ptr \"r0\");\n+\n+// CHECK-LABEL: r0_f32:\n+// CHECK: InlineAsm Start\n+// CHECK: r0 = r0\n+// CHECK: InlineAsm End\n+check_reg!(r0_f32 f32 \"r0\");\n+\n+// CHECK-LABEL: r0_i32:\n+// CHECK: InlineAsm Start\n+// CHECK: r0 = r0\n+// CHECK: InlineAsm End\n+check_reg!(r0_i32 i32 \"r0\");\n+\n+// CHECK-LABEL: r0_i8:\n+// CHECK: InlineAsm Start\n+// CHECK: r0 = r0\n+// CHECK: InlineAsm End\n+check_reg!(r0_i8 i8 \"r0\");\n+\n+// CHECK-LABEL: r0_i16:\n+// CHECK: InlineAsm Start\n+// CHECK: r0 = r0\n+// CHECK: InlineAsm End\n+check_reg!(r0_i16 i16 \"r0\");"}, {"sha": "b6735153b5dcf7e25939acb100ee8273a7a803fb", "filename": "src/test/assembly/asm/riscv-modifiers.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/dbc2ef25fb5e15445de38f19ba75547a6cf35cae/src%2Ftest%2Fassembly%2Fasm%2Friscv-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc2ef25fb5e15445de38f19ba75547a6cf35cae/src%2Ftest%2Fassembly%2Fasm%2Friscv-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-modifiers.rs?ref=dbc2ef25fb5e15445de38f19ba75547a6cf35cae", "patch": "@@ -1,60 +0,0 @@\n-// no-system-llvm\n-// assembly-output: emit-asm\n-// compile-flags: -O\n-// compile-flags: --target riscv64gc-unknown-linux-gnu\n-// compile-flags: -C target-feature=+f\n-// needs-llvm-components: riscv\n-\n-#![feature(no_core, lang_items, rustc_attrs)]\n-#![crate_type = \"rlib\"]\n-#![no_core]\n-\n-#[rustc_builtin_macro]\n-macro_rules! asm {\n-    () => {};\n-}\n-#[rustc_builtin_macro]\n-macro_rules! concat {\n-    () => {};\n-}\n-#[rustc_builtin_macro]\n-macro_rules! stringify {\n-    () => {};\n-}\n-\n-#[lang = \"sized\"]\n-trait Sized {}\n-#[lang = \"copy\"]\n-trait Copy {}\n-\n-impl Copy for f32 {}\n-\n-macro_rules! check {\n-    ($func:ident $modifier:literal $reg:ident $mov:literal) => {\n-        // -O and extern \"C\" guarantee that the selected register is always r0/s0/d0/q0\n-        #[no_mangle]\n-        pub unsafe extern \"C\" fn $func() -> f32 {\n-            // Hack to avoid function merging\n-            extern \"Rust\" {\n-                fn dont_merge(s: &str);\n-            }\n-            dont_merge(stringify!($func));\n-\n-            let y;\n-            asm!(concat!($mov, \" {0:\", $modifier, \"}, {0:\", $modifier, \"}\"), out($reg) y);\n-            y\n-        }\n-    };\n-}\n-\n-// CHECK-LABEL: reg:\n-// CHECK: #APP\n-// CHECK: mv a0, a0\n-// CHECK: #NO_APP\n-check!(reg \"\" reg \"mv\");\n-\n-// CHECK-LABEL: freg:\n-// CHECK: #APP\n-// CHECK: fmv.s fa0, fa0\n-// CHECK: #NO_APP\n-check!(freg \"\" freg \"fmv.s\");"}, {"sha": "6b6e582442cbcce12f68f77ddbbf3c1f28443bf0", "filename": "src/test/assembly/asm/riscv-types.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/9198e8ad626e257cab11c3c165e09a9a04001a57/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9198e8ad626e257cab11c3c165e09a9a04001a57/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs?ref=9198e8ad626e257cab11c3c165e09a9a04001a57", "patch": "@@ -79,6 +79,23 @@ macro_rules! check {\n     };\n }\n \n+macro_rules! check_reg {\n+    ($func:ident $ty:ident $reg:tt $mov:literal) => {\n+        #[no_mangle]\n+        pub unsafe fn $func(x: $ty) -> $ty {\n+            // Hack to avoid function merging\n+            extern \"Rust\" {\n+                fn dont_merge(s: &str);\n+            }\n+            dont_merge(stringify!($func));\n+\n+            let y;\n+            asm!(concat!($mov, \" \", $reg, \", \", $reg), lateout($reg) y, in($reg) x);\n+            y\n+        }\n+    };\n+}\n+\n // CHECK-LABEL: reg_i8:\n // CHECK: #APP\n // CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n@@ -134,3 +151,59 @@ check!(freg_f32 f32 freg \"fmv.s\");\n // CHECK: fmv.d f{{[a-z0-9]+}}, f{{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(freg_f64 f64 freg \"fmv.d\");\n+\n+// CHECK-LABEL: a0_i8:\n+// CHECK: #APP\n+// CHECK: mv a0, a0\n+// CHECK: #NO_APP\n+check_reg!(a0_i8 i8 \"a0\" \"mv\");\n+\n+// CHECK-LABEL: a0_i16:\n+// CHECK: #APP\n+// CHECK: mv a0, a0\n+// CHECK: #NO_APP\n+check_reg!(a0_i16 i16 \"a0\" \"mv\");\n+\n+// CHECK-LABEL: a0_i32:\n+// CHECK: #APP\n+// CHECK: mv a0, a0\n+// CHECK: #NO_APP\n+check_reg!(a0_i32 i32 \"a0\" \"mv\");\n+\n+// CHECK-LABEL: a0_f32:\n+// CHECK: #APP\n+// CHECK: mv a0, a0\n+// CHECK: #NO_APP\n+check_reg!(a0_f32 f32 \"a0\" \"mv\");\n+\n+// riscv64-LABEL: a0_i64:\n+// riscv64: #APP\n+// riscv64: mv a0, a0\n+// riscv64: #NO_APP\n+#[cfg(riscv64)]\n+check_reg!(a0_i64 i64 \"a0\" \"mv\");\n+\n+// riscv64-LABEL: a0_f64:\n+// riscv64: #APP\n+// riscv64: mv a0, a0\n+// riscv64: #NO_APP\n+#[cfg(riscv64)]\n+check_reg!(a0_f64 f64 \"a0\" \"mv\");\n+\n+// CHECK-LABEL: a0_ptr:\n+// CHECK: #APP\n+// CHECK: mv a0, a0\n+// CHECK: #NO_APP\n+check_reg!(a0_ptr ptr \"a0\" \"mv\");\n+\n+// CHECK-LABEL: fa0_f32:\n+// CHECK: #APP\n+// CHECK: fmv.s fa0, fa0\n+// CHECK: #NO_APP\n+check_reg!(fa0_f32 f32 \"fa0\" \"fmv.s\");\n+\n+// CHECK-LABEL: fa0_f64:\n+// CHECK: #APP\n+// CHECK: fmv.d fa0, fa0\n+// CHECK: #NO_APP\n+check_reg!(fa0_f64 f64 \"fa0\" \"fmv.d\");"}, {"sha": "f636f1f52962499dd212f14cbee1930fbc97ec5e", "filename": "src/test/assembly/asm/x86-types.rs", "status": "modified", "additions": 398, "deletions": 1, "changes": 399, "blob_url": "https://github.com/rust-lang/rust/blob/9198e8ad626e257cab11c3c165e09a9a04001a57/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9198e8ad626e257cab11c3c165e09a9a04001a57/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs?ref=9198e8ad626e257cab11c3c165e09a9a04001a57", "patch": "@@ -261,7 +261,24 @@ macro_rules! check {\n             dont_merge(stringify!($func));\n \n             let y;\n-            asm!(concat!($mov, \" {}, {}\"), out($class) y, in($class) x);\n+            asm!(concat!($mov, \" {}, {}\"), lateout($class) y, in($class) x);\n+            y\n+        }\n+    };\n+}\n+\n+macro_rules! check_reg {\n+    ($func:ident $ty:ident $reg:tt $mov:literal) => {\n+        #[no_mangle]\n+        pub unsafe fn $func(x: $ty) -> $ty {\n+            // Hack to avoid function merging\n+            extern \"Rust\" {\n+                fn dont_merge(s: &str);\n+            }\n+            dont_merge(stringify!($func));\n+\n+            let y;\n+            asm!(concat!($mov, \" \", $reg, \", \", $reg), lateout($reg) y, in($reg) x);\n             y\n         }\n     };\n@@ -692,3 +709,383 @@ check!(kreg_i64 i64 kreg \"kmovq\");\n // CHECK: kmovq k{{[0-9]+}}, k{{[0-9]+}}\n // CHECK: #NO_APP\n check!(kreg_ptr ptr kreg \"kmovq\");\n+\n+// CHECK-LABEL: eax_i16:\n+// CHECK: #APP\n+// CHECK: mov eax, eax\n+// CHECK: #NO_APP\n+check_reg!(eax_i16 i16 \"eax\" \"mov\");\n+\n+// CHECK-LABEL: eax_i32:\n+// CHECK: #APP\n+// CHECK: mov eax, eax\n+// CHECK: #NO_APP\n+check_reg!(eax_i32 i32 \"eax\" \"mov\");\n+\n+// CHECK-LABEL: eax_f32:\n+// CHECK: #APP\n+// CHECK: mov eax, eax\n+// CHECK: #NO_APP\n+check_reg!(eax_f32 f32 \"eax\" \"mov\");\n+\n+// x86_64-LABEL: eax_i64:\n+// x86_64: #APP\n+// x86_64: mov eax, eax\n+// x86_64: #NO_APP\n+#[cfg(x86_64)]\n+check_reg!(eax_i64 i64 \"eax\" \"mov\");\n+\n+// x86_64-LABEL: eax_f64:\n+// x86_64: #APP\n+// x86_64: mov eax, eax\n+// x86_64: #NO_APP\n+#[cfg(x86_64)]\n+check_reg!(eax_f64 f64 \"eax\" \"mov\");\n+\n+// CHECK-LABEL: eax_ptr:\n+// CHECK: #APP\n+// CHECK: mov eax, eax\n+// CHECK: #NO_APP\n+check_reg!(eax_ptr ptr \"eax\" \"mov\");\n+\n+// CHECK-LABEL: ah_byte:\n+// CHECK: #APP\n+// CHECK: mov ah, ah\n+// CHECK: #NO_APP\n+check_reg!(ah_byte i8 \"ah\" \"mov\");\n+\n+// CHECK-LABEL: xmm0_i32:\n+// CHECK: #APP\n+// CHECK: movaps xmm0, xmm0\n+// CHECK: #NO_APP\n+check_reg!(xmm0_i32 i32 \"xmm0\" \"movaps\");\n+\n+// CHECK-LABEL: xmm0_f32:\n+// CHECK: #APP\n+// CHECK: movaps xmm0, xmm0\n+// CHECK: #NO_APP\n+check_reg!(xmm0_f32 f32 \"xmm0\" \"movaps\");\n+\n+// CHECK-LABEL: xmm0_i64:\n+// CHECK: #APP\n+// CHECK: movaps xmm0, xmm0\n+// CHECK: #NO_APP\n+check_reg!(xmm0_i64 i64 \"xmm0\" \"movaps\");\n+\n+// CHECK-LABEL: xmm0_f64:\n+// CHECK: #APP\n+// CHECK: movaps xmm0, xmm0\n+// CHECK: #NO_APP\n+check_reg!(xmm0_f64 f64 \"xmm0\" \"movaps\");\n+\n+// CHECK-LABEL: xmm0_ptr:\n+// CHECK: #APP\n+// CHECK: movaps xmm0, xmm0\n+// CHECK: #NO_APP\n+check_reg!(xmm0_ptr ptr \"xmm0\" \"movaps\");\n+\n+// CHECK-LABEL: xmm0_i8x16:\n+// CHECK: #APP\n+// CHECK: movaps xmm0, xmm0\n+// CHECK: #NO_APP\n+check_reg!(xmm0_i8x16 i8x16 \"xmm0\" \"movaps\");\n+\n+// CHECK-LABEL: xmm0_i16x8:\n+// CHECK: #APP\n+// CHECK: movaps xmm0, xmm0\n+// CHECK: #NO_APP\n+check_reg!(xmm0_i16x8 i16x8 \"xmm0\" \"movaps\");\n+\n+// CHECK-LABEL: xmm0_i32x4:\n+// CHECK: #APP\n+// CHECK: movaps xmm0, xmm0\n+// CHECK: #NO_APP\n+check_reg!(xmm0_i32x4 i32x4 \"xmm0\" \"movaps\");\n+\n+// CHECK-LABEL: xmm0_i64x2:\n+// CHECK: #APP\n+// CHECK: movaps xmm0, xmm0\n+// CHECK: #NO_APP\n+check_reg!(xmm0_i64x2 i64x2 \"xmm0\" \"movaps\");\n+\n+// CHECK-LABEL: xmm0_f32x4:\n+// CHECK: #APP\n+// CHECK: movaps xmm0, xmm0\n+// CHECK: #NO_APP\n+check_reg!(xmm0_f32x4 f32x4 \"xmm0\" \"movaps\");\n+\n+// CHECK-LABEL: xmm0_f64x2:\n+// CHECK: #APP\n+// CHECK: movaps xmm0, xmm0\n+// CHECK: #NO_APP\n+check_reg!(xmm0_f64x2 f64x2 \"xmm0\" \"movaps\");\n+\n+// CHECK-LABEL: ymm0_i32:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_i32 i32 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_f32:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_f32 f32 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_i64:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_i64 i64 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_f64:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_f64 f64 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_ptr:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_ptr ptr \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_i8x16:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_i8x16 i8x16 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_i16x8:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_i16x8 i16x8 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_i32x4:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_i32x4 i32x4 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_i64x2:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_i64x2 i64x2 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_f32x4:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_f32x4 f32x4 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_f64x2:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_f64x2 f64x2 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_i8x32:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_i8x32 i8x32 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_i16x16:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_i16x16 i16x16 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_i32x8:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_i32x8 i32x8 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_i64x4:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_i64x4 i64x4 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_f32x8:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_f32x8 f32x8 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: ymm0_f64x4:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check_reg!(ymm0_f64x4 f64x4 \"ymm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_i32:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_i32 i32 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_f32:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_f32 f32 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_i64:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_i64 i64 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_f64:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_f64 f64 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_ptr:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_ptr ptr \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_i8x16:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_i8x16 i8x16 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_i16x8:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_i16x8 i16x8 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_i32x4:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_i32x4 i32x4 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_i64x2:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_i64x2 i64x2 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_f32x4:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_f32x4 f32x4 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_f64x2:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_f64x2 f64x2 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_i8x32:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_i8x32 i8x32 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_i16x16:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_i16x16 i16x16 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_i32x8:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_i32x8 i32x8 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_i64x4:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_i64x4 i64x4 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_f32x8:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_f32x8 f32x8 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_f64x4:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_f64x4 f64x4 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_i8x64:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_i8x64 i8x64 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_i16x32:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_i16x32 i16x32 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_i32x16:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_i32x16 i32x16 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_i64x8:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_i64x8 i64x8 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_f32x16:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_f32x16 f32x16 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: zmm0_f64x8:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check_reg!(zmm0_f64x8 f64x8 \"zmm0\" \"vmovaps\");\n+\n+// CHECK-LABEL: k1_i8:\n+// CHECK: #APP\n+// CHECK: kmovb k1, k1\n+// CHECK: #NO_APP\n+check_reg!(k1_i8 i8 \"k1\" \"kmovb\");\n+\n+// CHECK-LABEL: k1_i16:\n+// CHECK: #APP\n+// CHECK: kmovw k1, k1\n+// CHECK: #NO_APP\n+check_reg!(k1_i16 i16 \"k1\" \"kmovw\");\n+\n+// CHECK-LABEL: k1_i32:\n+// CHECK: #APP\n+// CHECK: kmovd k1, k1\n+// CHECK: #NO_APP\n+check_reg!(k1_i32 i32 \"k1\" \"kmovd\");\n+\n+// CHECK-LABEL: k1_i64:\n+// CHECK: #APP\n+// CHECK: kmovq k1, k1\n+// CHECK: #NO_APP\n+check_reg!(k1_i64 i64 \"k1\" \"kmovq\");\n+\n+// CHECK-LABEL: k1_ptr:\n+// CHECK: #APP\n+// CHECK: kmovq k1, k1\n+// CHECK: #NO_APP\n+check_reg!(k1_ptr ptr \"k1\" \"kmovq\");"}]}