{"sha": "9ec21933f1b730862f85c4dc6a4e46359e84a865", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYzIxOTMzZjFiNzMwODYyZjg1YzRkYzZhNGU0NjM1OWU4NGE4NjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-01T22:36:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-01T22:36:56Z"}, "message": "doc: Tutorial fixes\n\nThanks to Mohd. Bilal Husain", "tree": {"sha": "0c23bf6982ac71bea35b66070c37ff8c27f31e71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c23bf6982ac71bea35b66070c37ff8c27f31e71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ec21933f1b730862f85c4dc6a4e46359e84a865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec21933f1b730862f85c4dc6a4e46359e84a865", "html_url": "https://github.com/rust-lang/rust/commit/9ec21933f1b730862f85c4dc6a4e46359e84a865", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ec21933f1b730862f85c4dc6a4e46359e84a865/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efe4c6af23527e19020b707a18597232cb99f2c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/efe4c6af23527e19020b707a18597232cb99f2c1", "html_url": "https://github.com/rust-lang/rust/commit/efe4c6af23527e19020b707a18597232cb99f2c1"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "18317ab529e899a3a0a5118f186dceb5e990a776", "filename": "doc/tutorial.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ec21933f1b730862f85c4dc6a4e46359e84a865/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ec21933f1b730862f85c4dc6a4e46359e84a865/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=9ec21933f1b730862f85c4dc6a4e46359e84a865", "patch": "@@ -1623,10 +1623,9 @@ The previous section mentioned that arguments are passed by pointer or\n by value based on their type. There is one situation in which this is\n difficult. If you try this program:\n \n-~~~~\n-# fn map(f: fn(int) -> int, v: [int]) {}\n+~~~~{.xfail-test}\n fn plus1(x: int) -> int { x + 1 }\n-map(plus1, [1, 2, 3]);\n+vec::map([1, 2, 3], plus1);\n ~~~~\n \n You will get an error message about argument passing styles\n@@ -1639,9 +1638,8 @@ pass to a generic higher-order function as being passed by pointer,\n using the `&&` sigil:\n \n ~~~~\n-# fn map<T, U>(f: fn(T) -> U, v: [T]) {}\n fn plus1(&&x: int) -> int { x + 1 }\n-map(plus1, [1, 2, 3]);\n+vec::map([1, 2, 3], plus1);\n ~~~~\n \n NOTE: This is inconvenient, and we are hoping to get rid of this\n@@ -2134,7 +2132,7 @@ native mod crypto {\n }\n \n fn as_hex(data: [u8]) -> str {\n-    let acc = \"\";\n+    let mut acc = \"\";\n     for byte in data { acc += #fmt(\"%02x\", byte as uint); }\n     ret acc;\n }\n@@ -2517,14 +2515,16 @@ The Rust language has a facility for testing built into the language.\n Tests can be interspersed with other code, and annotated with the\n `#[test]` attribute.\n \n-~~~~\n+~~~~{.xfail-test}\n+# // FIXME: xfailed because test_twice is a #[test] function it's not\n+# // getting compiled\n use std;\n \n fn twice(x: int) -> int { x + x }\n \n #[test]\n fn test_twice() {\n-    let i = -100;\n+    let mut i = -100;\n     while i < 100 {\n         assert twice(i) == 2 * i;\n         i += 1;"}]}