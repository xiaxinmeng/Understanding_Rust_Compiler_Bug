{"sha": "d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NGZiYjk4NTU1YzEwN2ZiNjJmYjVhZTFhNWI4ZjRmYzZlZDNlZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-04T18:22:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-04T18:22:29Z"}, "message": "Auto merge of #87695 - tmiasko:gep-opaque-pointers, r=nagisa\n\nPrepare GEP building for opaque pointers", "tree": {"sha": "63f0a2cc0ac3e03b2a749db84f2c2477ba381d23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63f0a2cc0ac3e03b2a749db84f2c2477ba381d23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "html_url": "https://github.com/rust-lang/rust/commit/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fe0886723c9e08b800c9951f1c6f6a57b2bf22c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe0886723c9e08b800c9951f1c6f6a57b2bf22c", "html_url": "https://github.com/rust-lang/rust/commit/6fe0886723c9e08b800c9951f1c6f6a57b2bf22c"}, {"sha": "8e0df32ad6dd4e171742dc159a08f247c1a256ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0df32ad6dd4e171742dc159a08f247c1a256ab", "html_url": "https://github.com/rust-lang/rust/commit/8e0df32ad6dd4e171742dc159a08f247c1a256ab"}], "stats": {"total": 156, "additions": 110, "deletions": 46}, "files": [{"sha": "d8fa7786c3780d9fbab39c71ad4fda7999b1202c", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "patch": "@@ -497,9 +497,10 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             OperandValue::Immediate(self.to_immediate(llval, place.layout))\n         } else if let abi::Abi::ScalarPair(ref a, ref b) = place.layout.abi {\n             let b_offset = a.value.size(self).align_to(b.value.align(self).abi);\n+            let pair_ty = place.layout.llvm_type(self);\n \n             let mut load = |i, scalar: &abi::Scalar, align| {\n-                let llptr = self.struct_gep(place.llval, i as u64);\n+                let llptr = self.struct_gep(pair_ty, place.llval, i as u64);\n                 let llty = place.layout.scalar_pair_element_llvm_type(self, i, false);\n                 let load = self.load(llty, llptr, align);\n                 scalar_load_metadata(self, load, scalar);\n@@ -543,7 +544,11 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             .val\n             .store(&mut body_bx, PlaceRef::new_sized_aligned(current, cg_elem.layout, align));\n \n-        let next = body_bx.inbounds_gep(current, &[self.const_usize(1)]);\n+        let next = body_bx.inbounds_gep(\n+            self.backend_type(cg_elem.layout),\n+            current,\n+            &[self.const_usize(1)],\n+        );\n         body_bx.br(header_bx.llbb());\n         header_bx.add_incoming_to_phi(current, next, body_bx.llbb());\n \n@@ -639,10 +644,11 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn gep(&mut self, ptr: &'ll Value, indices: &[&'ll Value]) -> &'ll Value {\n+    fn gep(&mut self, ty: &'ll Type, ptr: &'ll Value, indices: &[&'ll Value]) -> &'ll Value {\n         unsafe {\n-            llvm::LLVMBuildGEP(\n+            llvm::LLVMBuildGEP2(\n                 self.llbuilder,\n+                ty,\n                 ptr,\n                 indices.as_ptr(),\n                 indices.len() as c_uint,\n@@ -651,10 +657,16 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn inbounds_gep(&mut self, ptr: &'ll Value, indices: &[&'ll Value]) -> &'ll Value {\n+    fn inbounds_gep(\n+        &mut self,\n+        ty: &'ll Type,\n+        ptr: &'ll Value,\n+        indices: &[&'ll Value],\n+    ) -> &'ll Value {\n         unsafe {\n-            llvm::LLVMBuildInBoundsGEP(\n+            llvm::LLVMBuildInBoundsGEP2(\n                 self.llbuilder,\n+                ty,\n                 ptr,\n                 indices.as_ptr(),\n                 indices.len() as c_uint,\n@@ -663,9 +675,9 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn struct_gep(&mut self, ptr: &'ll Value, idx: u64) -> &'ll Value {\n+    fn struct_gep(&mut self, ty: &'ll Type, ptr: &'ll Value, idx: u64) -> &'ll Value {\n         assert_eq!(idx as c_uint as u64, idx);\n-        unsafe { llvm::LLVMBuildStructGEP(self.llbuilder, ptr, idx as c_uint, UNNAMED) }\n+        unsafe { llvm::LLVMBuildStructGEP2(self.llbuilder, ty, ptr, idx as c_uint, UNNAMED) }\n     }\n \n     /* Casts */"}, {"sha": "5532f53e40823fc0ede2a3e56ed85206001637e7", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "patch": "@@ -268,7 +268,8 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                     }\n                 };\n                 let llval = unsafe {\n-                    llvm::LLVMConstInBoundsGEP(\n+                    llvm::LLVMRustConstInBoundsGEP2(\n+                        self.type_i8(),\n                         self.const_bitcast(base_addr, self.type_i8p_ext(base_addr_space)),\n                         &self.const_usize(offset.bytes()),\n                         1,\n@@ -303,7 +304,8 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             let base_addr = self.static_addr_of(init, alloc.align, None);\n \n             let llval = unsafe {\n-                llvm::LLVMConstInBoundsGEP(\n+                llvm::LLVMRustConstInBoundsGEP2(\n+                    self.type_i8(),\n                     self.const_bitcast(base_addr, self.type_i8p()),\n                     &self.const_usize(offset.bytes()),\n                     1,"}, {"sha": "c33d35cc285d358e969904d6a3ccc246b5f078dd", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/gdb.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs?ref=d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "patch": "@@ -15,12 +15,11 @@ use rustc_span::symbol::sym;\n /// .debug_gdb_scripts global is referenced, so it isn't removed by the linker.\n pub fn insert_reference_to_gdb_debug_scripts_section_global(bx: &mut Builder<'_, '_, '_>) {\n     if needs_gdb_debug_scripts_section(bx) {\n-        let gdb_debug_scripts_section = get_or_insert_gdb_debug_scripts_section_global(bx);\n+        let gdb_debug_scripts_section =\n+            bx.const_bitcast(get_or_insert_gdb_debug_scripts_section_global(bx), bx.type_i8p());\n         // Load just the first byte as that's all that's necessary to force\n         // LLVM to keep around the reference to the global.\n-        let indices = [bx.const_i32(0), bx.const_i32(0)];\n-        let element = bx.inbounds_gep(gdb_debug_scripts_section, &indices);\n-        let volative_load_instruction = bx.volatile_load(bx.type_i8(), element);\n+        let volative_load_instruction = bx.volatile_load(bx.type_i8(), gdb_debug_scripts_section);\n         unsafe {\n             llvm::LLVMSetAlignment(volative_load_instruction, 1);\n         }"}, {"sha": "56563668de6b07898e6a2195fa4c3a507566a058", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "patch": "@@ -686,11 +686,19 @@ fn codegen_emcc_try(\n         // create an alloca and pass a pointer to that.\n         let ptr_align = bx.tcx().data_layout.pointer_align.abi;\n         let i8_align = bx.tcx().data_layout.i8_align.abi;\n-        let catch_data =\n-            catch.alloca(bx.type_struct(&[bx.type_i8p(), bx.type_bool()], false), ptr_align);\n-        let catch_data_0 = catch.inbounds_gep(catch_data, &[bx.const_usize(0), bx.const_usize(0)]);\n+        let catch_data_type = bx.type_struct(&[bx.type_i8p(), bx.type_bool()], false);\n+        let catch_data = catch.alloca(catch_data_type, ptr_align);\n+        let catch_data_0 = catch.inbounds_gep(\n+            catch_data_type,\n+            catch_data,\n+            &[bx.const_usize(0), bx.const_usize(0)],\n+        );\n         catch.store(ptr, catch_data_0, ptr_align);\n-        let catch_data_1 = catch.inbounds_gep(catch_data, &[bx.const_usize(0), bx.const_usize(1)]);\n+        let catch_data_1 = catch.inbounds_gep(\n+            catch_data_type,\n+            catch_data,\n+            &[bx.const_usize(0), bx.const_usize(1)],\n+        );\n         catch.store(is_rust_panic, catch_data_1, i8_align);\n         let catch_data = catch.bitcast(catch_data, bx.type_i8p());\n "}, {"sha": "e803ad6d88e3c05a5b0cf93275778766aeaeda32", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "patch": "@@ -1011,7 +1011,8 @@ extern \"C\" {\n     pub fn LLVMConstVector(ScalarConstantVals: *const &Value, Size: c_uint) -> &Value;\n \n     // Constant expressions\n-    pub fn LLVMConstInBoundsGEP(\n+    pub fn LLVMRustConstInBoundsGEP2(\n+        ty: &'a Type,\n         ConstantVal: &'a Value,\n         ConstantIndices: *const &'a Value,\n         NumIndices: c_uint,\n@@ -1394,22 +1395,25 @@ extern \"C\" {\n \n     pub fn LLVMBuildStore(B: &Builder<'a>, Val: &'a Value, Ptr: &'a Value) -> &'a Value;\n \n-    pub fn LLVMBuildGEP(\n+    pub fn LLVMBuildGEP2(\n         B: &Builder<'a>,\n+        Ty: &'a Type,\n         Pointer: &'a Value,\n         Indices: *const &'a Value,\n         NumIndices: c_uint,\n         Name: *const c_char,\n     ) -> &'a Value;\n-    pub fn LLVMBuildInBoundsGEP(\n+    pub fn LLVMBuildInBoundsGEP2(\n         B: &Builder<'a>,\n+        Ty: &'a Type,\n         Pointer: &'a Value,\n         Indices: *const &'a Value,\n         NumIndices: c_uint,\n         Name: *const c_char,\n     ) -> &'a Value;\n-    pub fn LLVMBuildStructGEP(\n+    pub fn LLVMBuildStructGEP2(\n         B: &Builder<'a>,\n+        Ty: &'a Type,\n         Pointer: &'a Value,\n         Idx: c_uint,\n         Name: *const c_char,"}, {"sha": "c9fb09570c35ad52b4462857adff174b322c4227", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "patch": "@@ -50,12 +50,12 @@ fn emit_direct_ptr_va_arg(\n \n     let aligned_size = size.align_to(slot_size).bytes() as i32;\n     let full_direct_size = bx.cx().const_i32(aligned_size);\n-    let next = bx.inbounds_gep(addr, &[full_direct_size]);\n+    let next = bx.inbounds_gep(bx.type_i8(), addr, &[full_direct_size]);\n     bx.store(next, va_list_addr, bx.tcx().data_layout.pointer_align.abi);\n \n     if size.bytes() < slot_size.bytes() && bx.tcx().sess.target.endian == Endian::Big {\n         let adjusted_size = bx.cx().const_i32((slot_size.bytes() - size.bytes()) as i32);\n-        let adjusted = bx.inbounds_gep(addr, &[adjusted_size]);\n+        let adjusted = bx.inbounds_gep(bx.type_i8(), addr, &[adjusted_size]);\n         (bx.bitcast(adjusted, bx.cx().type_ptr_to(llty)), addr_align)\n     } else {\n         (bx.bitcast(addr, bx.cx().type_ptr_to(llty)), addr_align)\n@@ -98,6 +98,7 @@ fn emit_aapcs_va_arg(\n     // Implementation of the AAPCS64 calling convention for va_args see\n     // https://github.com/ARM-software/abi-aa/blob/master/aapcs64/aapcs64.rst\n     let va_list_addr = list.immediate();\n+    let va_list_ty = list.deref(bx.cx).layout.llvm_type(bx);\n     let layout = bx.cx.layout_of(target_ty);\n \n     let mut maybe_reg = bx.build_sibling_block(\"va_arg.maybe_reg\");\n@@ -109,11 +110,11 @@ fn emit_aapcs_va_arg(\n \n     let gr_type = target_ty.is_any_ptr() || target_ty.is_integral();\n     let (reg_off, reg_top_index, slot_size) = if gr_type {\n-        let gr_offs = bx.struct_gep(va_list_addr, 7);\n+        let gr_offs = bx.struct_gep(va_list_ty, va_list_addr, 7);\n         let nreg = (layout.size.bytes() + 7) / 8;\n         (gr_offs, 3, nreg * 8)\n     } else {\n-        let vr_off = bx.struct_gep(va_list_addr, 9);\n+        let vr_off = bx.struct_gep(va_list_ty, va_list_addr, 9);\n         let nreg = (layout.size.bytes() + 15) / 16;\n         (vr_off, 5, nreg * 16)\n     };\n@@ -141,15 +142,15 @@ fn emit_aapcs_va_arg(\n     maybe_reg.cond_br(use_stack, &on_stack.llbb(), &in_reg.llbb());\n \n     let top_type = bx.type_i8p();\n-    let top = in_reg.struct_gep(va_list_addr, reg_top_index);\n+    let top = in_reg.struct_gep(va_list_ty, va_list_addr, reg_top_index);\n     let top = in_reg.load(top_type, top, bx.tcx().data_layout.pointer_align.abi);\n \n     // reg_value = *(@top + reg_off_v);\n-    let mut reg_addr = in_reg.gep(top, &[reg_off_v]);\n+    let mut reg_addr = in_reg.gep(bx.type_i8(), top, &[reg_off_v]);\n     if bx.tcx().sess.target.endian == Endian::Big && layout.size.bytes() != slot_size {\n         // On big-endian systems the value is right-aligned in its slot.\n         let offset = bx.const_i32((slot_size - layout.size.bytes()) as i32);\n-        reg_addr = in_reg.gep(reg_addr, &[offset]);\n+        reg_addr = in_reg.gep(bx.type_i8(), reg_addr, &[offset]);\n     }\n     let reg_type = layout.llvm_type(bx);\n     let reg_addr = in_reg.bitcast(reg_addr, bx.cx.type_ptr_to(reg_type));"}, {"sha": "b60677267849ac0bb10658537f07c4acef7ebfbc", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "patch": "@@ -168,8 +168,11 @@ pub fn unsized_info<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                 let ptr_ty = cx.type_i8p();\n                 let ptr_align = cx.tcx().data_layout.pointer_align.abi;\n                 let llvtable = bx.pointercast(old_info, bx.type_ptr_to(ptr_ty));\n-                let gep =\n-                    bx.inbounds_gep(llvtable, &[bx.const_usize(u64::try_from(entry_idx).unwrap())]);\n+                let gep = bx.inbounds_gep(\n+                    ptr_ty,\n+                    llvtable,\n+                    &[bx.const_usize(u64::try_from(entry_idx).unwrap())],\n+                );\n                 let new_vptr = bx.load(ptr_ty, gep, ptr_align);\n                 bx.nonnull_metadata(new_vptr);\n                 // Vtable loads are invariant."}, {"sha": "efeec5b728413b88b54fe472890f9aab9239c30a", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "patch": "@@ -23,7 +23,7 @@ impl<'a, 'tcx> VirtualIndex {\n         let llty = bx.fn_ptr_backend_type(fn_abi);\n         let llvtable = bx.pointercast(llvtable, bx.type_ptr_to(llty));\n         let ptr_align = bx.tcx().data_layout.pointer_align.abi;\n-        let gep = bx.inbounds_gep(llvtable, &[bx.const_usize(self.0)]);\n+        let gep = bx.inbounds_gep(llty, llvtable, &[bx.const_usize(self.0)]);\n         let ptr = bx.load(llty, gep, ptr_align);\n         bx.nonnull_metadata(ptr);\n         // Vtable loads are invariant.\n@@ -42,7 +42,7 @@ impl<'a, 'tcx> VirtualIndex {\n         let llty = bx.type_isize();\n         let llvtable = bx.pointercast(llvtable, bx.type_ptr_to(llty));\n         let usize_align = bx.tcx().data_layout.pointer_align.abi;\n-        let gep = bx.inbounds_gep(llvtable, &[bx.const_usize(self.0)]);\n+        let gep = bx.inbounds_gep(llty, llvtable, &[bx.const_usize(self.0)]);\n         let ptr = bx.load(llty, gep, usize_align);\n         // Vtable loads are invariant.\n         bx.set_invariant_load(ptr);"}, {"sha": "75999225c031d2a071b7416a6c79d90f26e1f632", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "patch": "@@ -116,14 +116,18 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 OperandRef::from_const(bx, value, ret_ty).immediate_or_packed_pair(bx)\n             }\n             sym::offset => {\n+                let ty = substs.type_at(0);\n+                let layout = bx.layout_of(ty);\n                 let ptr = args[0].immediate();\n                 let offset = args[1].immediate();\n-                bx.inbounds_gep(ptr, &[offset])\n+                bx.inbounds_gep(bx.backend_type(layout), ptr, &[offset])\n             }\n             sym::arith_offset => {\n+                let ty = substs.type_at(0);\n+                let layout = bx.layout_of(ty);\n                 let ptr = args[0].immediate();\n                 let offset = args[1].immediate();\n-                bx.gep(ptr, &[offset])\n+                bx.gep(bx.backend_type(layout), ptr, &[offset])\n             }\n             sym::copy => {\n                 copy_intrinsic("}, {"sha": "cfb2befdf913752ffe89b4acd0faf8538badf4e0", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "patch": "@@ -311,14 +311,15 @@ impl<'a, 'tcx, V: CodegenObject> OperandValue<V> {\n                     Abi::ScalarPair(ref a, ref b) => (a, b),\n                     _ => bug!(\"store_with_flags: invalid ScalarPair layout: {:#?}\", dest.layout),\n                 };\n+                let ty = bx.backend_type(dest.layout);\n                 let b_offset = a_scalar.value.size(bx).align_to(b_scalar.value.align(bx).abi);\n \n-                let llptr = bx.struct_gep(dest.llval, 0);\n+                let llptr = bx.struct_gep(ty, dest.llval, 0);\n                 let val = bx.from_immediate(a);\n                 let align = dest.align;\n                 bx.store_with_flags(val, llptr, align, flags);\n \n-                let llptr = bx.struct_gep(dest.llval, 1);\n+                let llptr = bx.struct_gep(ty, dest.llval, 1);\n                 let val = bx.from_immediate(b);\n                 let align = dest.align.restrict_for_offset(b_offset);\n                 bx.store_with_flags(val, llptr, align, flags);"}, {"sha": "20be46606a0aad771c585580ccfeaa0f881843a6", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "patch": "@@ -103,12 +103,13 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                     if offset == a.value.size(bx.cx()).align_to(b.value.align(bx.cx()).abi) =>\n                 {\n                     // Offset matches second field.\n-                    bx.struct_gep(self.llval, 1)\n+                    let ty = bx.backend_type(self.layout);\n+                    bx.struct_gep(ty, self.llval, 1)\n                 }\n                 Abi::Scalar(_) | Abi::ScalarPair(..) | Abi::Vector { .. } if field.is_zst() => {\n                     // ZST fields are not included in Scalar, ScalarPair, and Vector layouts, so manually offset the pointer.\n                     let byte_ptr = bx.pointercast(self.llval, bx.cx().type_i8p());\n-                    bx.gep(byte_ptr, &[bx.const_usize(offset.bytes())])\n+                    bx.gep(bx.cx().type_i8(), byte_ptr, &[bx.const_usize(offset.bytes())])\n                 }\n                 Abi::Scalar(_) | Abi::ScalarPair(..) => {\n                     // All fields of Scalar and ScalarPair layouts must have been handled by this point.\n@@ -119,7 +120,10 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                         self.layout\n                     );\n                 }\n-                _ => bx.struct_gep(self.llval, bx.cx().backend_field_index(self.layout, ix)),\n+                _ => {\n+                    let ty = bx.backend_type(self.layout);\n+                    bx.struct_gep(ty, self.llval, bx.cx().backend_field_index(self.layout, ix))\n+                }\n             };\n             PlaceRef {\n                 // HACK(eddyb): have to bitcast pointers until LLVM removes pointee types.\n@@ -185,7 +189,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n \n         // Cast and adjust pointer.\n         let byte_ptr = bx.pointercast(self.llval, bx.cx().type_i8p());\n-        let byte_ptr = bx.gep(byte_ptr, &[offset]);\n+        let byte_ptr = bx.gep(bx.cx().type_i8(), byte_ptr, &[offset]);\n \n         // Finally, cast back to the type expected.\n         let ll_fty = bx.cx().backend_type(field);\n@@ -380,7 +384,11 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         };\n \n         PlaceRef {\n-            llval: bx.inbounds_gep(self.llval, &[bx.cx().const_usize(0), llindex]),\n+            llval: bx.inbounds_gep(\n+                bx.cx().backend_type(self.layout),\n+                self.llval,\n+                &[bx.cx().const_usize(0), llindex],\n+            ),\n             llextra: None,\n             layout,\n             align: self.align.restrict_for_offset(offset),"}, {"sha": "cbb401c63d152246e33fef5f12e40ab4281a6fc9", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "patch": "@@ -636,7 +636,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::BinOp::BitOr => bx.or(lhs, rhs),\n             mir::BinOp::BitAnd => bx.and(lhs, rhs),\n             mir::BinOp::BitXor => bx.xor(lhs, rhs),\n-            mir::BinOp::Offset => bx.inbounds_gep(lhs, &[rhs]),\n+            mir::BinOp::Offset => {\n+                let pointee_type = input_ty\n+                    .builtin_deref(true)\n+                    .unwrap_or_else(|| bug!(\"deref of non-pointer {:?}\", input_ty))\n+                    .ty;\n+                let llty = bx.cx().backend_type(bx.cx().layout_of(pointee_type));\n+                bx.inbounds_gep(llty, lhs, &[rhs])\n+            }\n             mir::BinOp::Shl => common::build_unchecked_lshift(bx, lhs, rhs),\n             mir::BinOp::Shr => common::build_unchecked_rshift(bx, input_ty, lhs, rhs),\n             mir::BinOp::Ne"}, {"sha": "f2c523148530f63cb5de677db401cbc15490bc11", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "patch": "@@ -176,9 +176,14 @@ pub trait BuilderMethods<'a, 'tcx>:\n         size: Size,\n     );\n \n-    fn gep(&mut self, ptr: Self::Value, indices: &[Self::Value]) -> Self::Value;\n-    fn inbounds_gep(&mut self, ptr: Self::Value, indices: &[Self::Value]) -> Self::Value;\n-    fn struct_gep(&mut self, ptr: Self::Value, idx: u64) -> Self::Value;\n+    fn gep(&mut self, ty: Self::Type, ptr: Self::Value, indices: &[Self::Value]) -> Self::Value;\n+    fn inbounds_gep(\n+        &mut self,\n+        ty: Self::Type,\n+        ptr: Self::Value,\n+        indices: &[Self::Value],\n+    ) -> Self::Value;\n+    fn struct_gep(&mut self, ty: Self::Type, ptr: Self::Value, idx: u64) -> Self::Value;\n \n     fn trunc(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;\n     fn sext(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;"}, {"sha": "7666803911e0b6d12fc3c5e19a93aeb8c3741904", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc", "patch": "@@ -1551,6 +1551,16 @@ extern \"C\" void LLVMRustSetLinkage(LLVMValueRef V,\n   LLVMSetLinkage(V, fromRust(RustLinkage));\n }\n \n+extern \"C\" LLVMValueRef LLVMRustConstInBoundsGEP2(LLVMTypeRef Ty,\n+                                                  LLVMValueRef ConstantVal,\n+                                                  LLVMValueRef *ConstantIndices,\n+                                                  unsigned NumIndices) {\n+  ArrayRef<Constant *> IdxList(unwrap<Constant>(ConstantIndices, NumIndices),\n+                               NumIndices);\n+  Constant *Val = unwrap<Constant>(ConstantVal);\n+  return wrap(ConstantExpr::getInBoundsGetElementPtr(unwrap(Ty), Val, IdxList));\n+}\n+\n // Returns true if both high and low were successfully set. Fails in case constant wasn\u2019t any of\n // the common sizes (1, 8, 16, 32, 64, 128 bits)\n extern \"C\" bool LLVMRustConstInt128Get(LLVMValueRef CV, bool sext, uint64_t *high, uint64_t *low)"}]}