{"sha": "169e69d217600062f6299f7f9521f3f2776d0333", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2OWU2OWQyMTc2MDAwNjJmNjI5OWY3Zjk1MjFmM2YyNzc2ZDAzMzM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-07-23T13:38:21Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-07-25T12:17:28Z"}, "message": "Show type decorators", "tree": {"sha": "c7cb0782a1525a7b1355eac2dde80fc82492e59f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7cb0782a1525a7b1355eac2dde80fc82492e59f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/169e69d217600062f6299f7f9521f3f2776d0333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/169e69d217600062f6299f7f9521f3f2776d0333", "html_url": "https://github.com/rust-lang/rust/commit/169e69d217600062f6299f7f9521f3f2776d0333", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/169e69d217600062f6299f7f9521f3f2776d0333/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d68e6171e68b9c95aec7a2e53cbf03ae8a672fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d68e6171e68b9c95aec7a2e53cbf03ae8a672fe", "html_url": "https://github.com/rust-lang/rust/commit/1d68e6171e68b9c95aec7a2e53cbf03ae8a672fe"}], "stats": {"total": 176, "additions": 175, "deletions": 1}, "files": [{"sha": "060a3a247532236857a20c0a23484d6e8d8f20e2", "filename": "editors/code/package.json", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/169e69d217600062f6299f7f9521f3f2776d0333/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/169e69d217600062f6299f7f9521f3f2776d0333/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=169e69d217600062f6299f7f9521f3f2776d0333", "patch": "@@ -238,6 +238,11 @@\n                     \"type\": \"number\",\n                     \"default\": null,\n                     \"description\": \"Number of syntax trees rust-analyzer keeps in memory\"\n+                },\n+                \"rust-analyzer.displayInlayHints\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"description\": \"Display additional type information in the editor\"\n                 }\n             }\n         },\n@@ -444,6 +449,15 @@\n                     \"light\": \"#000000\",\n                     \"highContrast\": \"#FFFFFF\"\n                 }\n+            },\n+            {\n+                \"id\": \"ralsp.inlayHint\",\n+                \"description\": \"Color for inlay hints\",\n+                \"defaults\": {\n+                    \"dark\": \"#A0A0A0F0\",\n+                    \"light\": \"#747474\",\n+                    \"highContrast\": \"#BEBEBE\"\n+                }\n             }\n         ]\n     }"}, {"sha": "d17f702e8d76ddd8dfad90f03f83a7863e11cddd", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/169e69d217600062f6299f7f9521f3f2776d0333/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/169e69d217600062f6299f7f9521f3f2776d0333/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=169e69d217600062f6299f7f9521f3f2776d0333", "patch": "@@ -6,6 +6,7 @@ import * as onEnter from './on_enter';\n import * as parentModule from './parent_module';\n import * as runnables from './runnables';\n import * as syntaxTree from './syntaxTree';\n+import * as inlayHints from './inlay_hints';\n \n export {\n     analyzerStatus,\n@@ -15,5 +16,6 @@ export {\n     parentModule,\n     runnables,\n     syntaxTree,\n-    onEnter\n+    onEnter,\n+    inlayHints,\n };"}, {"sha": "2780e93269488393bb286df6fd04259156b519df", "filename": "editors/code/src/commands/inlay_hints.ts", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/169e69d217600062f6299f7f9521f3f2776d0333/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/169e69d217600062f6299f7f9521f3f2776d0333/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts?ref=169e69d217600062f6299f7f9521f3f2776d0333", "patch": "@@ -0,0 +1,142 @@\n+import * as vscode from 'vscode';\n+import { DecorationOptions, Range, TextDocumentChangeEvent, TextDocumentContentChangeEvent, TextEditor } from 'vscode';\n+import { TextDocumentIdentifier } from 'vscode-languageclient';\n+import { Server } from '../server';\n+\n+interface InlayHintsParams {\n+    textDocument: TextDocumentIdentifier;\n+}\n+\n+interface InlayHint {\n+    range: Range,\n+    kind: string,\n+    label: string,\n+}\n+\n+const typeHintDecorationType = vscode.window.createTextEditorDecorationType({\n+    after: {\n+        color: new vscode.ThemeColor('ralsp.inlayHint'),\n+    },\n+});\n+\n+export class HintsUpdater {\n+    private currentDecorations = new Map<string, DecorationOptions[]>();\n+    private displayHints = true;\n+\n+    public async loadHints(editor: vscode.TextEditor | undefined): Promise<void> {\n+        if (this.displayHints && editor !== undefined) {\n+            await this.updateDecorationsFromServer(editor.document.uri.toString(), editor);\n+        }\n+    }\n+\n+    public dropHints(document: vscode.TextDocument) {\n+        if (this.displayHints) {\n+            this.currentDecorations.delete(document.uri.toString());\n+        }\n+    }\n+\n+    public async toggleHintsDisplay(displayHints: boolean): Promise<void> {\n+        if (this.displayHints !== displayHints) {\n+            this.displayHints = displayHints;\n+            this.currentDecorations.clear();\n+\n+            if (displayHints) {\n+                return this.updateHints();\n+            } else {\n+                const editor = vscode.window.activeTextEditor;\n+                if (editor != null) {\n+                    return editor.setDecorations(typeHintDecorationType, [])\n+                }\n+            }\n+        }\n+    }\n+\n+    public async updateHints(cause?: TextDocumentChangeEvent): Promise<void> {\n+        if (!this.displayHints) {\n+            return;\n+        }\n+        const editor = vscode.window.activeTextEditor;\n+        if (editor == null) {\n+            return;\n+        }\n+        const document = cause == null ? editor.document : cause.document;\n+        if (document.languageId !== 'rust') {\n+            return;\n+        }\n+\n+        const documentUri = document.uri.toString();\n+        const documentDecorators = this.currentDecorations.get(documentUri) || [];\n+\n+        if (documentDecorators.length > 0) {\n+            // FIXME a dbg! in the handlers.rs of the server causes\n+            // an endless storm of events with `cause.contentChanges` with the dbg messages, why?\n+            const changesFromFile = cause !== undefined ? cause.contentChanges.filter(changeEvent => this.isEventInFile(document.lineCount, changeEvent)) : [];\n+            if (changesFromFile.length === 0) {\n+                return;\n+            }\n+\n+            const firstShiftedLine = this.getFirstShiftedLine(changesFromFile);\n+            if (firstShiftedLine !== null) {\n+                const unchangedDecorations = documentDecorators.filter(decoration => decoration.range.start.line < firstShiftedLine);\n+                if (unchangedDecorations.length !== documentDecorators.length) {\n+                    await editor.setDecorations(typeHintDecorationType, unchangedDecorations);\n+                }\n+            }\n+        }\n+        return await this.updateDecorationsFromServer(documentUri, editor);\n+    }\n+\n+    private isEventInFile(documentLineCount: number, event: TextDocumentContentChangeEvent): boolean {\n+        const eventText = event.text;\n+        if (eventText.length === 0) {\n+            return event.range.start.line <= documentLineCount || event.range.end.line <= documentLineCount;\n+        } else {\n+            return event.range.start.line <= documentLineCount && event.range.end.line <= documentLineCount;\n+        }\n+    }\n+\n+    private getFirstShiftedLine(changeEvents: TextDocumentContentChangeEvent[]): number | null {\n+        let topmostUnshiftedLine: number | null = null;\n+\n+        changeEvents\n+            .filter(event => this.isShiftingChange(event))\n+            .forEach(event => {\n+                const shiftedLineNumber = event.range.start.line;\n+                if (topmostUnshiftedLine === null || topmostUnshiftedLine > shiftedLineNumber) {\n+                    topmostUnshiftedLine = shiftedLineNumber;\n+                }\n+            });\n+\n+        return topmostUnshiftedLine;\n+    }\n+\n+    private isShiftingChange(event: TextDocumentContentChangeEvent) {\n+        const eventText = event.text;\n+        if (eventText.length === 0) {\n+            return !event.range.isSingleLine;\n+        } else {\n+            return eventText.indexOf('\\n') >= 0 || eventText.indexOf('\\r') >= 0;\n+        }\n+    }\n+\n+    private async updateDecorationsFromServer(documentUri: string, editor: TextEditor): Promise<void> {\n+        const newHints = await this.queryHints(documentUri) || [];\n+        const newDecorations = newHints.map(hint => (\n+            {\n+                range: hint.range,\n+                renderOptions: { after: { contentText: `: ${hint.label}` } },\n+            }\n+        ));\n+        this.currentDecorations.set(documentUri, newDecorations);\n+        return editor.setDecorations(typeHintDecorationType, newDecorations);\n+    }\n+\n+    private async queryHints(documentUri: string): Promise<InlayHint[] | null> {\n+        const request: InlayHintsParams = { textDocument: { uri: documentUri } };\n+        const client = Server.client;\n+        return client.onReady().then(() => client.sendRequest<InlayHint[] | null>(\n+            'rust-analyzer/inlayHints',\n+            request\n+        ));\n+    }\n+}"}, {"sha": "4d58a1a9361f22ae6d2733fc4eeda5d8e0fd299e", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/169e69d217600062f6299f7f9521f3f2776d0333/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/169e69d217600062f6299f7f9521f3f2776d0333/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=169e69d217600062f6299f7f9521f3f2776d0333", "patch": "@@ -21,6 +21,7 @@ export class Config {\n     public raLspServerPath = RA_LSP_DEBUG || 'ra_lsp_server';\n     public showWorkspaceLoadedNotification = true;\n     public lruCapacity: null | number = null;\n+    public displayInlayHints = true;\n     public cargoWatchOptions: CargoWatchOptions = {\n         enableOnStartup: 'ask',\n         trace: 'off',\n@@ -123,5 +124,9 @@ export class Config {\n         if (config.has('lruCapacity')) {\n             this.lruCapacity = config.get('lruCapacity') as number;\n         }\n+\n+        if (config.has('displayInlayHints')) {\n+            this.displayInlayHints = config.get('displayInlayHints') as boolean;\n+        }\n     }\n }"}, {"sha": "a0b897385e7b3b4c2311d0fdd3bfd8e41d669c27", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/169e69d217600062f6299f7f9521f3f2776d0333/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/169e69d217600062f6299f7f9521f3f2776d0333/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=169e69d217600062f6299f7f9521f3f2776d0333", "patch": "@@ -3,6 +3,7 @@ import * as lc from 'vscode-languageclient';\n \n import * as commands from './commands';\n import { CargoWatchProvider } from './commands/cargo_watch';\n+import { HintsUpdater } from './commands/inlay_hints';\n import {\n     interactivelyStartCargoWatch,\n     startCargoWatch\n@@ -147,6 +148,16 @@ export function activate(context: vscode.ExtensionContext) {\n \n     // Start the language server, finally!\n     startServer();\n+\n+    if (Server.config.displayInlayHints) {\n+        const hintsUpdater = new HintsUpdater();\n+        hintsUpdater.loadHints(vscode.window.activeTextEditor).then(() => {\n+            vscode.window.onDidChangeActiveTextEditor(editor => hintsUpdater.loadHints(editor));\n+            vscode.workspace.onDidChangeTextDocument(e => hintsUpdater.updateHints(e));\n+            vscode.workspace.onDidCloseTextDocument(document => hintsUpdater.dropHints(document));\n+            vscode.workspace.onDidChangeConfiguration(_ => hintsUpdater.toggleHintsDisplay(Server.config.displayInlayHints));\n+        });\n+    }\n }\n \n export function deactivate(): Thenable<void> {"}]}