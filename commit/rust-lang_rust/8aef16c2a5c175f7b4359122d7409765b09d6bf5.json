{"sha": "8aef16c2a5c175f7b4359122d7409765b09d6bf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZWYxNmMyYTVjMTc1ZjdiNDM1OTEyMmQ3NDA5NzY1YjA5ZDZiZjU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-20T01:15:19Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-20T01:15:19Z"}, "message": "Move tts instead of cloning in expansion", "tree": {"sha": "b67ea4b903d4aafff9db7697ca542edf68f004c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b67ea4b903d4aafff9db7697ca542edf68f004c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aef16c2a5c175f7b4359122d7409765b09d6bf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aef16c2a5c175f7b4359122d7409765b09d6bf5", "html_url": "https://github.com/rust-lang/rust/commit/8aef16c2a5c175f7b4359122d7409765b09d6bf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aef16c2a5c175f7b4359122d7409765b09d6bf5/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e5a3254747cf1f76f8ea698d37f688e13344392", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5a3254747cf1f76f8ea698d37f688e13344392", "html_url": "https://github.com/rust-lang/rust/commit/6e5a3254747cf1f76f8ea698d37f688e13344392"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "ffbb7edd385ac4749545cb9480c11132005e8875", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8aef16c2a5c175f7b4359122d7409765b09d6bf5/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aef16c2a5c175f7b4359122d7409765b09d6bf5/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8aef16c2a5c175f7b4359122d7409765b09d6bf5", "patch": "@@ -684,15 +684,15 @@ fn contains_macro_use(fld: &mut MacroExpander, attrs: &[ast::Attribute]) -> bool\n // logic as for expression-position macro invocations.\n pub fn expand_item_mac(it: P<ast::Item>,\n                        fld: &mut MacroExpander) -> SmallVector<P<ast::Item>> {\n-    let (extname, path_span, tts) = match it.node {\n+    let (extname, path_span, tts, span, attrs, ident) = it.and_then(|it| { match it.node {\n         ItemMac(codemap::Spanned {\n-            node: MacInvocTT(ref pth, ref tts, _),\n+            node: MacInvocTT(pth, tts, _),\n             ..\n         }) => {\n-            (pth.segments[0].identifier.name, pth.span, (*tts).clone())\n+            (pth.segments[0].identifier.name, pth.span, tts, it.span, it.attrs, it.ident)\n         }\n         _ => fld.cx.span_bug(it.span, \"invalid item macro invocation\")\n-    };\n+    }});\n \n     let fm = fresh_mark();\n     let items = {\n@@ -706,56 +706,56 @@ pub fn expand_item_mac(it: P<ast::Item>,\n             }\n \n             Some(rc) => match *rc {\n-                NormalTT(ref expander, span, allow_internal_unstable) => {\n-                    if it.ident.name != parse::token::special_idents::invalid.name {\n+                NormalTT(ref expander, tt_span, allow_internal_unstable) => {\n+                    if ident.name != parse::token::special_idents::invalid.name {\n                         fld.cx\n                             .span_err(path_span,\n                                       &format!(\"macro {}! expects no ident argument, given '{}'\",\n                                                extname,\n-                                               it.ident));\n+                                               ident));\n                         return SmallVector::zero();\n                     }\n                     fld.cx.bt_push(ExpnInfo {\n-                        call_site: it.span,\n+                        call_site: span,\n                         callee: NameAndSpan {\n                             format: MacroBang(extname),\n-                            span: span,\n+                            span: tt_span,\n                             allow_internal_unstable: allow_internal_unstable,\n                         }\n                     });\n                     // mark before expansion:\n                     let marked_before = mark_tts(&tts[..], fm);\n-                    expander.expand(fld.cx, it.span, &marked_before[..])\n+                    expander.expand(fld.cx, span, &marked_before[..])\n                 }\n-                IdentTT(ref expander, span, allow_internal_unstable) => {\n-                    if it.ident.name == parse::token::special_idents::invalid.name {\n+                IdentTT(ref expander, tt_span, allow_internal_unstable) => {\n+                    if ident.name == parse::token::special_idents::invalid.name {\n                         fld.cx.span_err(path_span,\n                                         &format!(\"macro {}! expects an ident argument\",\n                                                 extname));\n                         return SmallVector::zero();\n                     }\n                     fld.cx.bt_push(ExpnInfo {\n-                        call_site: it.span,\n+                        call_site: span,\n                         callee: NameAndSpan {\n                             format: MacroBang(extname),\n-                            span: span,\n+                            span: tt_span,\n                             allow_internal_unstable: allow_internal_unstable,\n                         }\n                     });\n                     // mark before expansion:\n                     let marked_tts = mark_tts(&tts[..], fm);\n-                    expander.expand(fld.cx, it.span, it.ident, marked_tts)\n+                    expander.expand(fld.cx, span, ident, marked_tts)\n                 }\n                 MacroRulesTT => {\n-                    if it.ident.name == parse::token::special_idents::invalid.name {\n+                    if ident.name == parse::token::special_idents::invalid.name {\n                         fld.cx.span_err(path_span,\n                                         &format!(\"macro_rules! expects an ident argument\")\n                                         );\n                         return SmallVector::zero();\n                     }\n \n                     fld.cx.bt_push(ExpnInfo {\n-                        call_site: it.span,\n+                        call_site: span,\n                         callee: NameAndSpan {\n                             format: MacroBang(extname),\n                             span: None,\n@@ -767,7 +767,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                     });\n                     // DON'T mark before expansion.\n \n-                    let allow_internal_unstable = attr::contains_name(&it.attrs,\n+                    let allow_internal_unstable = attr::contains_name(&attrs,\n                                                                       \"allow_internal_unstable\");\n \n                     // ensure any #[allow_internal_unstable]s are\n@@ -777,18 +777,19 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                         feature_gate::emit_feature_err(\n                             &fld.cx.parse_sess.span_diagnostic,\n                             \"allow_internal_unstable\",\n-                            it.span,\n+                            span,\n                             feature_gate::GateIssue::Language,\n                             feature_gate::EXPLAIN_ALLOW_INTERNAL_UNSTABLE)\n                     }\n \n+                    let export = attr::contains_name(&attrs, \"macro_export\");\n                     let def = ast::MacroDef {\n-                        ident: it.ident,\n-                        attrs: it.attrs.clone(),\n+                        ident: ident,\n+                        attrs: attrs,\n                         id: ast::DUMMY_NODE_ID,\n-                        span: it.span,\n+                        span: span,\n                         imported_from: None,\n-                        export: attr::contains_name(&it.attrs, \"macro_export\"),\n+                        export: export,\n                         use_locally: true,\n                         allow_internal_unstable: allow_internal_unstable,\n                         body: tts,\n@@ -800,7 +801,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                     return SmallVector::zero();\n                 }\n                 _ => {\n-                    fld.cx.span_err(it.span,\n+                    fld.cx.span_err(span,\n                                     &format!(\"{}! is not legal in item position\",\n                                             extname));\n                     return SmallVector::zero();"}]}