{"sha": "b729368d4e6a7e6a85dd4189ca16d49622a1582a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MjkzNjhkNGU2YTdlNmE4NWRkNDE4OWNhMTZkNDk2MjJhMTU4MmE=", "commit": {"author": {"name": "carbotaniuman", "email": "41451839+carbotaniuman@users.noreply.github.com", "date": "2020-09-11T12:25:28Z"}, "committer": {"name": "carbotaniuman", "email": "41451839+carbotaniuman@users.noreply.github.com", "date": "2020-09-11T12:25:28Z"}, "message": "Address review comments", "tree": {"sha": "8c99d7d3268222b5bbd436fbfd11c4cca05a16ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c99d7d3268222b5bbd436fbfd11c4cca05a16ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b729368d4e6a7e6a85dd4189ca16d49622a1582a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b729368d4e6a7e6a85dd4189ca16d49622a1582a", "html_url": "https://github.com/rust-lang/rust/commit/b729368d4e6a7e6a85dd4189ca16d49622a1582a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b729368d4e6a7e6a85dd4189ca16d49622a1582a/comments", "author": {"login": "carbotaniuman", "id": 41451839, "node_id": "MDQ6VXNlcjQxNDUxODM5", "avatar_url": "https://avatars.githubusercontent.com/u/41451839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carbotaniuman", "html_url": "https://github.com/carbotaniuman", "followers_url": "https://api.github.com/users/carbotaniuman/followers", "following_url": "https://api.github.com/users/carbotaniuman/following{/other_user}", "gists_url": "https://api.github.com/users/carbotaniuman/gists{/gist_id}", "starred_url": "https://api.github.com/users/carbotaniuman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carbotaniuman/subscriptions", "organizations_url": "https://api.github.com/users/carbotaniuman/orgs", "repos_url": "https://api.github.com/users/carbotaniuman/repos", "events_url": "https://api.github.com/users/carbotaniuman/events{/privacy}", "received_events_url": "https://api.github.com/users/carbotaniuman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carbotaniuman", "id": 41451839, "node_id": "MDQ6VXNlcjQxNDUxODM5", "avatar_url": "https://avatars.githubusercontent.com/u/41451839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carbotaniuman", "html_url": "https://github.com/carbotaniuman", "followers_url": "https://api.github.com/users/carbotaniuman/followers", "following_url": "https://api.github.com/users/carbotaniuman/following{/other_user}", "gists_url": "https://api.github.com/users/carbotaniuman/gists{/gist_id}", "starred_url": "https://api.github.com/users/carbotaniuman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carbotaniuman/subscriptions", "organizations_url": "https://api.github.com/users/carbotaniuman/orgs", "repos_url": "https://api.github.com/users/carbotaniuman/repos", "events_url": "https://api.github.com/users/carbotaniuman/events{/privacy}", "received_events_url": "https://api.github.com/users/carbotaniuman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb57c9f91c920a8b1533fb92aa50be342e11f675", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb57c9f91c920a8b1533fb92aa50be342e11f675", "html_url": "https://github.com/rust-lang/rust/commit/bb57c9f91c920a8b1533fb92aa50be342e11f675"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "f998e49dcfcde8dcb4a26c0e9a549ed47b84652e", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b729368d4e6a7e6a85dd4189ca16d49622a1582a/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b729368d4e6a7e6a85dd4189ca16d49622a1582a/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=b729368d4e6a7e6a85dd4189ca16d49622a1582a", "patch": "@@ -295,6 +295,13 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Rc<U>> for Rc<T> {}\n impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Rc<U>> for Rc<T> {}\n \n impl<T: ?Sized> Rc<T> {\n+    #[inline(always)]\n+    fn inner(&self) -> &RcBox<T> {\n+        // This unsafety is ok because while this Rc is alive we're guaranteed\n+        // that the inner pointer is valid.\n+        unsafe { self.ptr.as_ref() }\n+    }\n+\n     fn from_inner(ptr: NonNull<RcBox<T>>) -> Self {\n         Self { ptr, phantom: PhantomData }\n     }\n@@ -845,17 +852,10 @@ impl<T: ?Sized> Rc<T> {\n     #[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]\n     pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {\n         // We are careful to *not* create a reference covering the \"count\" fields, as\n-        // this would alias with concurrent access to the reference counts (e.g. by `Weak`).\n+        // this would conflict with accesses to the reference counts (e.g. by `Weak`).\n         unsafe { &mut (*this.ptr.as_ptr()).value }\n     }\n \n-    #[inline]\n-    fn inner(&self) -> &RcBox<T> {\n-        // This unsafety is ok because while this Rc is alive we're guaranteed\n-        // that the inner pointer is valid.\n-        unsafe { self.ptr.as_ref() }\n-    }\n-\n     #[inline]\n     #[stable(feature = \"ptr_eq\", since = \"1.17.0\")]\n     /// Returns `true` if the two `Rc`s point to the same allocation\n@@ -2145,18 +2145,24 @@ trait RcInnerPtr {\n }\n \n impl<T: ?Sized> RcInnerPtr for RcBox<T> {\n+    #[inline(always)]\n     fn weak_ref(&self) -> &Cell<usize> {\n         &self.weak\n     }\n+\n+    #[inline(always)]\n     fn strong_ref(&self) -> &Cell<usize> {\n         &self.strong\n     }\n }\n \n impl<'a> RcInnerPtr for WeakInner<'a> {\n+    #[inline(always)]\n     fn weak_ref(&self) -> &Cell<usize> {\n         self.weak\n     }\n+\n+    #[inline(always)]\n     fn strong_ref(&self) -> &Cell<usize> {\n         self.strong\n     }"}]}