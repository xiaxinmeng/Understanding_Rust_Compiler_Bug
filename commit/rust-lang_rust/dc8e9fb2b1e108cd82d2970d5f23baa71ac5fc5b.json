{"sha": "dc8e9fb2b1e108cd82d2970d5f23baa71ac5fc5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjOGU5ZmIyYjFlMTA4Y2Q4MmQyOTcwZDVmMjNiYWE3MWFjNWZjNWI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-21T09:47:29Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-21T09:52:01Z"}, "message": "Rollup merge of #53104 - nivkner:unpin_doc, r=RalfJung\n\nexpand the documentation on the `Unpin` trait\n\nprovides an overview of the Pin API which the trait is for,\nand show how it can be used in making self referencial structs\n\npart of #49150", "tree": {"sha": "9d6db830d9d95fb5f74e5e911da8228faf6691a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d6db830d9d95fb5f74e5e911da8228faf6691a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc8e9fb2b1e108cd82d2970d5f23baa71ac5fc5b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlt74MUACgkQ/vbIBR0O\nATzYxQ//R8m4FkZyof9DvegG8XkAPS9F1QmpYfPZfL68E7v/+zOmAfGPI6E2V0lA\nDvZJic5OxNrPiEE1xvhwLFFQZDIr44Josl2VAbzoNGTNAFwG5oGW2/dfl1iMijcq\nS+/poUhdURbVB3ekyb/uzcLzMkIGdNQTK8EelySEn0/UI0XZtQsvTi55fqJnjw9n\nvhdPhpZTpDhT8KaMCUR+zPKblGEpj8lTveDxuzFEU44wnJ+3gH3CP0CMfDJcHxHd\n08hpo3MpkT5WLg9ZvS9v/vpyTpFCLsiKTbk4pNiY6wSw7lRsquhlgdB02rDuTO6d\nPMZh9E4Y2Kjo8j+fSHSSiGdlfj7RPWddFi9ciSUEEdbAxr6JWonzmkh/c9oC+OCw\nGXuvm2HTiAFNatNIcySwjuEIYT7qfC7I1KUvgV5w7ZgMWGP0+HhdLyxu0NzAWPtK\n61Db0IO2EQ7fvSxrRlasMR8DAEbrMq11VsdF9zfFycdSQ9fTZtFOY68gEycl+qER\njO00FUldsbmq36j3nfrS+KeJw1HmQMdheun0iyO4BeA5QQn6vTLpgoWvdeiCeaWu\nnQDuPHOX4Nnzm7gHmdegbvWmgbsdexVFhYvv1035DVK9Z9SR4HIEjipMSy8iO29i\ngjPVzzClLsqlWXWz16fZeLCup+MDC5j6HAe7L+agKfSZO3cEUIw=\n=MZvK\n-----END PGP SIGNATURE-----", "payload": "tree 9d6db830d9d95fb5f74e5e911da8228faf6691a0\nparent fed4298aed281ef34c04be4d63711dbc46b6d95b\nparent 6ae915b29e6df75c6cb20f2af85497460330f1c4\nauthor kennytm <kennytm@gmail.com> 1534844849 +0800\ncommitter kennytm <kennytm@gmail.com> 1534845121 +0800\n\nRollup merge of #53104 - nivkner:unpin_doc, r=RalfJung\n\nexpand the documentation on the `Unpin` trait\n\nprovides an overview of the Pin API which the trait is for,\nand show how it can be used in making self referencial structs\n\npart of #49150\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc8e9fb2b1e108cd82d2970d5f23baa71ac5fc5b", "html_url": "https://github.com/rust-lang/rust/commit/dc8e9fb2b1e108cd82d2970d5f23baa71ac5fc5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc8e9fb2b1e108cd82d2970d5f23baa71ac5fc5b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fed4298aed281ef34c04be4d63711dbc46b6d95b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fed4298aed281ef34c04be4d63711dbc46b6d95b", "html_url": "https://github.com/rust-lang/rust/commit/fed4298aed281ef34c04be4d63711dbc46b6d95b"}, {"sha": "6ae915b29e6df75c6cb20f2af85497460330f1c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae915b29e6df75c6cb20f2af85497460330f1c4", "html_url": "https://github.com/rust-lang/rust/commit/6ae915b29e6df75c6cb20f2af85497460330f1c4"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "e73d998fde8683113c0ba22bacb1f8f261c72da0", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dc8e9fb2b1e108cd82d2970d5f23baa71ac5fc5b/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc8e9fb2b1e108cd82d2970d5f23baa71ac5fc5b/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=dc8e9fb2b1e108cd82d2970d5f23baa71ac5fc5b", "patch": "@@ -603,15 +603,35 @@ unsafe impl<T: ?Sized> Freeze for *mut T {}\n unsafe impl<'a, T: ?Sized> Freeze for &'a T {}\n unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n \n-/// Types which can be moved out of a `PinMut`.\n+/// Types which can be safely moved after being pinned.\n ///\n-/// The `Unpin` trait is used to control the behavior of the [`PinMut`] type. If a\n-/// type implements `Unpin`, it is safe to move a value of that type out of the\n-/// `PinMut` pointer.\n+/// Since Rust itself has no notion of immovable types, and will consider moves to always be safe,\n+/// this trait cannot prevent types from moving by itself.\n+///\n+/// Instead it can be used to prevent moves through the type system,\n+/// by controlling the behavior of special pointer types like [`PinMut`],\n+/// which \"pin\" the type in place by not allowing it to be moved out of them.\n+///\n+/// Implementing this trait lifts the restrictions of pinning off a type,\n+/// which then allows it to move out with functions such as [`replace`].\n+///\n+/// So this, for example, can only be done on types implementing `Unpin`:\n+///\n+/// ```rust\n+/// #![feature(pin)]\n+/// use std::mem::{PinMut, replace};\n+///\n+/// let mut string = \"this\".to_string();\n+/// let mut pinned_string = PinMut::new(&mut string);\n+///\n+/// // dereferencing the pointer mutably is only possible because String implements Unpin\n+/// replace(&mut *pinned_string, \"other\".to_string());\n+/// ```\n ///\n /// This trait is automatically implemented for almost every type.\n ///\n /// [`PinMut`]: ../mem/struct.PinMut.html\n+/// [`replace`]: ../mem/fn.replace.html\n #[unstable(feature = \"pin\", issue = \"49150\")]\n pub auto trait Unpin {}\n "}]}