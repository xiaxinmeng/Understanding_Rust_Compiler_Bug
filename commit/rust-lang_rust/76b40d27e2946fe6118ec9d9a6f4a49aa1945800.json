{"sha": "76b40d27e2946fe6118ec9d9a6f4a49aa1945800", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YjQwZDI3ZTI5NDZmZTYxMThlYzlkOWE2ZjRhNDlhYTE5NDU4MDA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-27T01:34:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-27T01:34:26Z"}, "message": "Rollup merge of #82419 - petrochenkov:inertord, r=Aaron1011\n\nexpand: Preserve order of inert attributes during expansion\n\nFixes https://github.com/rust-lang/rust/issues/67839\nFixes https://github.com/rust-lang/rust/issues/81871\nr? `````@Aaron1011`````", "tree": {"sha": "c1cbf89abea27feec591103e0da540f76bb79fa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1cbf89abea27feec591103e0da540f76bb79fa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76b40d27e2946fe6118ec9d9a6f4a49aa1945800", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgOaGjCRBK7hj4Ov3rIwAAdHIIAHUz7owTnclgssf77WXrpkvE\nBYu0v6Vq3n9IEkTBMtZh7snqS5ELcusCqPscEFnnZxYNExsZ3c2/PIquwh94tkZV\nN6+pa0nElcNf68FxFnjTvRotedmBCeoqu2+ApySg4Cu04b+vVtxZ4MRBJ0QY72Js\nvEQ6qd4Nuxu/41vfJ2BlZO3SbXGHF75qZANJPC45M+Np46kqhu1rVFRtmD2ZcVC9\n3DLb444KXgkJ/sRnjNwg9uXeHQ+xtqmGJijTHErVq84tS4DR+q2qH5wmLGADLmS2\nhSi870hkvI1+8n988/Xr4dkib9xUjWTwG4IvMMSSw+wxDSUzjaBUX0pHHLM0Pus=\n=QEnz\n-----END PGP SIGNATURE-----\n", "payload": "tree c1cbf89abea27feec591103e0da540f76bb79fa3\nparent 2d175bbd2c93ed1d2df00dad296577f1df5b30b8\nparent fc9d578bc5ada5162f49ed02a547cf87f2456a93\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614389666 +0100\ncommitter GitHub <noreply@github.com> 1614389666 +0100\n\nRollup merge of #82419 - petrochenkov:inertord, r=Aaron1011\n\nexpand: Preserve order of inert attributes during expansion\n\nFixes https://github.com/rust-lang/rust/issues/67839\nFixes https://github.com/rust-lang/rust/issues/81871\nr? `````@Aaron1011`````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76b40d27e2946fe6118ec9d9a6f4a49aa1945800", "html_url": "https://github.com/rust-lang/rust/commit/76b40d27e2946fe6118ec9d9a6f4a49aa1945800", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76b40d27e2946fe6118ec9d9a6f4a49aa1945800/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d175bbd2c93ed1d2df00dad296577f1df5b30b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d175bbd2c93ed1d2df00dad296577f1df5b30b8", "html_url": "https://github.com/rust-lang/rust/commit/2d175bbd2c93ed1d2df00dad296577f1df5b30b8"}, {"sha": "fc9d578bc5ada5162f49ed02a547cf87f2456a93", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9d578bc5ada5162f49ed02a547cf87f2456a93", "html_url": "https://github.com/rust-lang/rust/commit/fc9d578bc5ada5162f49ed02a547cf87f2456a93"}], "stats": {"total": 173, "additions": 126, "deletions": 47}, "files": [{"sha": "10c19ea105e4a2b2280d44244d7d4e3d56ae334e", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/76b40d27e2946fe6118ec9d9a6f4a49aa1945800/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b40d27e2946fe6118ec9d9a6f4a49aa1945800/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=76b40d27e2946fe6118ec9d9a6f4a49aa1945800", "patch": "@@ -301,6 +301,8 @@ pub enum InvocationKind {\n     },\n     Attr {\n         attr: ast::Attribute,\n+        // Re-insertion position for inert attributes.\n+        pos: usize,\n         item: Annotatable,\n         // Required for resolving derive helper attributes.\n         derives: Vec<Path>,\n@@ -690,7 +692,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 }\n                 _ => unreachable!(),\n             },\n-            InvocationKind::Attr { attr, mut item, derives } => match ext {\n+            InvocationKind::Attr { attr, pos, mut item, derives } => match ext {\n                 SyntaxExtensionKind::Attr(expander) => {\n                     self.gate_proc_macro_input(&item);\n                     self.gate_proc_macro_attr_item(span, &item);\n@@ -721,7 +723,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                 ExpandResult::Retry(item) => {\n                                     // Reassemble the original invocation for retrying.\n                                     return ExpandResult::Retry(Invocation {\n-                                        kind: InvocationKind::Attr { attr, item, derives },\n+                                        kind: InvocationKind::Attr { attr, pos, item, derives },\n                                         ..invoc\n                                     });\n                                 }\n@@ -739,7 +741,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     if *mark_used {\n                         self.cx.sess.mark_attr_used(&attr);\n                     }\n-                    item.visit_attrs(|attrs| attrs.push(attr));\n+                    item.visit_attrs(|attrs| attrs.insert(pos, attr));\n                     fragment_kind.expect_from_annotatables(iter::once(item))\n                 }\n                 _ => unreachable!(),\n@@ -1000,17 +1002,20 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n \n     fn collect_attr(\n         &mut self,\n-        (attr, derives): (ast::Attribute, Vec<Path>),\n+        (attr, pos, derives): (ast::Attribute, usize, Vec<Path>),\n         item: Annotatable,\n         kind: AstFragmentKind,\n     ) -> AstFragment {\n-        self.collect(kind, InvocationKind::Attr { attr, item, derives })\n+        self.collect(kind, InvocationKind::Attr { attr, pos, item, derives })\n     }\n \n     /// If `item` is an attribute invocation, remove the attribute and return it together with\n-    /// derives following it. We have to collect the derives in order to resolve legacy derive\n-    /// helpers (helpers written before derives that introduce them).\n-    fn take_first_attr(&mut self, item: &mut impl HasAttrs) -> Option<(ast::Attribute, Vec<Path>)> {\n+    /// its position and derives following it. We have to collect the derives in order to resolve\n+    /// legacy derive helpers (helpers written before derives that introduce them).\n+    fn take_first_attr(\n+        &mut self,\n+        item: &mut impl HasAttrs,\n+    ) -> Option<(ast::Attribute, usize, Vec<Path>)> {\n         let mut attr = None;\n \n         item.visit_attrs(|attrs| {\n@@ -1033,7 +1038,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                         })\n                         .collect();\n \n-                    (attr, following_derives)\n+                    (attr, attr_pos, following_derives)\n                 })\n         });\n "}, {"sha": "a7ed4bc88250d96ca5af94a3fb862f4e0d6591b6", "filename": "src/test/ui/proc-macro/auxiliary/test-macros.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/76b40d27e2946fe6118ec9d9a6f4a49aa1945800/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b40d27e2946fe6118ec9d9a6f4a49aa1945800/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=76b40d27e2946fe6118ec9d9a6f4a49aa1945800", "patch": "@@ -7,7 +7,7 @@\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;\n-use proc_macro::TokenStream;\n+use proc_macro::{TokenStream, TokenTree};\n \n // Macro that return empty token stream.\n \n@@ -80,6 +80,10 @@ pub fn recollect_derive(input: TokenStream) -> TokenStream {\n // Macros that print their input in the original and re-collected forms (if they differ).\n \n fn print_helper(input: TokenStream, kind: &str) -> TokenStream {\n+    print_helper_ext(input, kind, true)\n+}\n+\n+fn print_helper_ext(input: TokenStream, kind: &str, debug: bool) -> TokenStream {\n     let input_display = format!(\"{}\", input);\n     let input_debug = format!(\"{:#?}\", input);\n     let recollected = input.into_iter().collect();\n@@ -89,9 +93,11 @@ fn print_helper(input: TokenStream, kind: &str) -> TokenStream {\n     if recollected_display != input_display {\n         println!(\"PRINT-{} RE-COLLECTED (DISPLAY): {}\", kind, recollected_display);\n     }\n-    println!(\"PRINT-{} INPUT (DEBUG): {}\", kind, input_debug);\n-    if recollected_debug != input_debug {\n-        println!(\"PRINT-{} RE-COLLECTED (DEBUG): {}\", kind, recollected_debug);\n+    if debug {\n+        println!(\"PRINT-{} INPUT (DEBUG): {}\", kind, input_debug);\n+        if recollected_debug != input_debug {\n+            println!(\"PRINT-{} RE-COLLECTED (DEBUG): {}\", kind, recollected_debug);\n+        }\n     }\n     recollected\n }\n@@ -108,8 +114,12 @@ pub fn print_bang_consume(input: TokenStream) -> TokenStream {\n }\n \n #[proc_macro_attribute]\n-pub fn print_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n-    print_helper(input, \"ATTR\")\n+pub fn print_attr(args: TokenStream, input: TokenStream) -> TokenStream {\n+    let debug = match &args.into_iter().collect::<Vec<_>>()[..] {\n+        [TokenTree::Ident(ident)] if ident.to_string() == \"nodebug\" => false,\n+        _ => true,\n+    };\n+    print_helper_ext(input, \"ATTR\", debug)\n }\n \n #[proc_macro_attribute]"}, {"sha": "4a7e48eed46c3130e9e9f8ed470094e70fdc3dee", "filename": "src/test/ui/proc-macro/derive-helper-legacy-spurious.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76b40d27e2946fe6118ec9d9a6f4a49aa1945800/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-legacy-spurious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b40d27e2946fe6118ec9d9a6f4a49aa1945800/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-legacy-spurious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-legacy-spurious.rs?ref=76b40d27e2946fe6118ec9d9a6f4a49aa1945800", "patch": "@@ -0,0 +1,12 @@\n+// aux-build:test-macros.rs\n+\n+#![dummy] //~ ERROR cannot find attribute `dummy` in this scope\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+#[derive(Empty)] //~ ERROR cannot determine resolution for the attribute macro `derive`\n+#[empty_helper] //~ ERROR cannot find attribute `empty_helper` in this scope\n+struct Foo {}\n+\n+fn main() {}"}, {"sha": "fd1ed8a3d0ff3e4e520c1269974641ca73694f0f", "filename": "src/test/ui/proc-macro/derive-helper-legacy-spurious.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/76b40d27e2946fe6118ec9d9a6f4a49aa1945800/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-legacy-spurious.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76b40d27e2946fe6118ec9d9a6f4a49aa1945800/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-legacy-spurious.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-legacy-spurious.stderr?ref=76b40d27e2946fe6118ec9d9a6f4a49aa1945800", "patch": "@@ -0,0 +1,22 @@\n+error: cannot find attribute `dummy` in this scope\n+  --> $DIR/derive-helper-legacy-spurious.rs:3:4\n+   |\n+LL | #![dummy]\n+   |    ^^^^^\n+\n+error: cannot determine resolution for the attribute macro `derive`\n+  --> $DIR/derive-helper-legacy-spurious.rs:8:3\n+   |\n+LL | #[derive(Empty)]\n+   |   ^^^^^^\n+   |\n+   = note: import resolution is stuck, try simplifying macro imports\n+\n+error: cannot find attribute `empty_helper` in this scope\n+  --> $DIR/derive-helper-legacy-spurious.rs:9:3\n+   |\n+LL | #[empty_helper]\n+   |   ^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "f8079675641169c2303f8894e8757aab3fb576cc", "filename": "src/test/ui/proc-macro/inert-attribute-order.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/76b40d27e2946fe6118ec9d9a6f4a49aa1945800/src%2Ftest%2Fui%2Fproc-macro%2Finert-attribute-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b40d27e2946fe6118ec9d9a6f4a49aa1945800/src%2Ftest%2Fui%2Fproc-macro%2Finert-attribute-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finert-attribute-order.rs?ref=76b40d27e2946fe6118ec9d9a6f4a49aa1945800", "patch": "@@ -0,0 +1,23 @@\n+// Order of inert attributes, both built-in and custom is preserved during expansion.\n+\n+// check-pass\n+// compile-flags: -Z span-debug\n+// aux-build:test-macros.rs\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+/// 1\n+#[rustfmt::attr2]\n+#[doc = \"3\"]\n+#[print_attr(nodebug)]\n+#[doc = \"4\"]\n+#[rustfmt::attr5]\n+/// 6\n+#[print_attr(nodebug)]\n+struct S;\n+\n+fn main() {}"}, {"sha": "cc215545952df3c43107e999346b30aff3009702", "filename": "src/test/ui/proc-macro/inert-attribute-order.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76b40d27e2946fe6118ec9d9a6f4a49aa1945800/src%2Ftest%2Fui%2Fproc-macro%2Finert-attribute-order.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/76b40d27e2946fe6118ec9d9a6f4a49aa1945800/src%2Ftest%2Fui%2Fproc-macro%2Finert-attribute-order.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finert-attribute-order.stdout?ref=76b40d27e2946fe6118ec9d9a6f4a49aa1945800", "patch": "@@ -0,0 +1,7 @@\n+PRINT-ATTR INPUT (DISPLAY): /// 1\n+#[rustfmt :: attr2] #[doc = \"3\"] #[doc = \"4\"] #[rustfmt :: attr5] /// 6\n+#[print_attr(nodebug)] struct S ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): #[doc = \" 1\"] #[rustfmt :: attr2] #[doc = \"3\"] #[doc = \"4\"]\n+#[rustfmt :: attr5] #[doc = \" 6\"] #[print_attr(nodebug)] struct S ;\n+PRINT-ATTR INPUT (DISPLAY): #[doc = \" 1\"] #[rustfmt :: attr2] #[doc = \"3\"] #[doc = \"4\"]\n+#[rustfmt :: attr5] #[doc = \" 6\"] struct S ;"}, {"sha": "15e63c20eb9bc581790abf52c7e6e78a77f87a6d", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.stdout", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/76b40d27e2946fe6118ec9d9a6f4a49aa1945800/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/76b40d27e2946fe6118ec9d9a6f4a49aa1945800/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout?ref=76b40d27e2946fe6118ec9d9a6f4a49aa1945800", "patch": "@@ -1,4 +1,4 @@\n-PRINT-ATTR INPUT (DISPLAY): #[allow(dead_code)] #[derive(Print)] #[print_helper(b)] #[print_helper(a)]\n+PRINT-ATTR INPUT (DISPLAY): #[print_helper(a)] #[allow(dead_code)] #[derive(Print)] #[print_helper(b)]\n struct Foo < #[cfg(FALSE)] A, B >\n {\n     #[cfg(FALSE)] first : String, #[cfg_attr(FALSE, deny(warnings))] second :\n@@ -23,6 +23,31 @@ struct Foo < #[cfg(FALSE)] A, B >\n      }], #[print_helper(d)] fourth : B\n }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/issue-75930-derive-cfg.rs:16:1: 16:2 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"print_helper\",\n+                span: $DIR/issue-75930-derive-cfg.rs:16:3: 16:15 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"a\",\n+                        span: $DIR/issue-75930-derive-cfg.rs:16:16: 16:17 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75930-derive-cfg.rs:16:15: 16:18 (#0),\n+            },\n+        ],\n+        span: $DIR/issue-75930-derive-cfg.rs:16:2: 16:19 (#0),\n+    },\n     Punct {\n         ch: '#',\n         spacing: Alone,\n@@ -98,31 +123,6 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         ],\n         span: $DIR/issue-75930-derive-cfg.rs:21:2: 21:19 (#0),\n     },\n-    Punct {\n-        ch: '#',\n-        spacing: Alone,\n-        span: $DIR/issue-75930-derive-cfg.rs:16:1: 16:2 (#0),\n-    },\n-    Group {\n-        delimiter: Bracket,\n-        stream: TokenStream [\n-            Ident {\n-                ident: \"print_helper\",\n-                span: $DIR/issue-75930-derive-cfg.rs:16:3: 16:15 (#0),\n-            },\n-            Group {\n-                delimiter: Parenthesis,\n-                stream: TokenStream [\n-                    Ident {\n-                        ident: \"a\",\n-                        span: $DIR/issue-75930-derive-cfg.rs:16:16: 16:17 (#0),\n-                    },\n-                ],\n-                span: $DIR/issue-75930-derive-cfg.rs:16:15: 16:18 (#0),\n-            },\n-        ],\n-        span: $DIR/issue-75930-derive-cfg.rs:16:2: 16:19 (#0),\n-    },\n     Ident {\n         ident: \"struct\",\n         span: $DIR/issue-75930-derive-cfg.rs:22:1: 22:7 (#0),\n@@ -1194,7 +1194,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/issue-75930-derive-cfg.rs:22:32: 65:2 (#0),\n     },\n ]\n-PRINT-DERIVE INPUT (DISPLAY): #[allow(dead_code)] #[print_helper(b)] #[print_helper(a)] struct Foo < B >\n+PRINT-DERIVE INPUT (DISPLAY): #[print_helper(a)] #[allow(dead_code)] #[print_helper(b)] struct Foo < B >\n {\n     second : bool, third :\n     [u8 ;\n@@ -1217,14 +1217,14 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n-                ident: \"allow\",\n+                ident: \"print_helper\",\n                 span: $DIR/issue-75930-derive-cfg.rs:22:1: 65:2 (#0),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n-                        ident: \"dead_code\",\n+                        ident: \"a\",\n                         span: $DIR/issue-75930-derive-cfg.rs:22:1: 65:2 (#0),\n                     },\n                 ],\n@@ -1242,14 +1242,14 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n-                ident: \"print_helper\",\n+                ident: \"allow\",\n                 span: $DIR/issue-75930-derive-cfg.rs:22:1: 65:2 (#0),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n-                        ident: \"b\",\n+                        ident: \"dead_code\",\n                         span: $DIR/issue-75930-derive-cfg.rs:22:1: 65:2 (#0),\n                     },\n                 ],\n@@ -1274,7 +1274,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n-                        ident: \"a\",\n+                        ident: \"b\",\n                         span: $DIR/issue-75930-derive-cfg.rs:22:1: 65:2 (#0),\n                     },\n                 ],"}]}