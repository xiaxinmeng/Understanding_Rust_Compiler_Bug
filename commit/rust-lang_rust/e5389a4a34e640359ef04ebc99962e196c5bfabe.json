{"sha": "e5389a4a34e640359ef04ebc99962e196c5bfabe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1Mzg5YTRhMzRlNjQwMzU5ZWYwNGViYzk5OTYyZTE5NmM1YmZhYmU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-13T18:21:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-13T18:21:09Z"}, "message": "Rollup merge of #76527 - fusion-engineering-forks:cleanup-uninit, r=jonas-schievink\n\nRemove internal and unstable MaybeUninit::UNINIT.\n\nLooks like it is no longer necessary, as `uninit_array()` can be used instead in the few cases where it was needed.\n\n(I wanted to just add `#[doc(hidden)]` to remove clutter from the documentation, but looks like it can just be removed entirely.)", "tree": {"sha": "586b2de55b3d9dbb5ff1518c6cae447348fdf78a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/586b2de55b3d9dbb5ff1518c6cae447348fdf78a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5389a4a34e640359ef04ebc99962e196c5bfabe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfXmMVCRBK7hj4Ov3rIwAAdHIIAFMhTAOlgl85e/YV4XAatz4p\nUHU4y+hDqQ8IgdNesVC7wpy4MLQpNuYWWqg4QR40XJEDGQiyYPli12g1efBhEoim\niKAtcbyWgUen949+7eO3U39piS1LoUeVdK3zyzLhdD1K8GVkkuPNsoqjrr85OoZX\nRV7g1kqe9/D9wp78TGFnkQ7ENbc6u6PZ4p4Vqvm+o11AeVKbS3zRLRdT78S0xKc2\nqNlXj74OYxUUpXNWXvn2COWjTEQarSiV29Bt8kT7Kbj6BxtAHHpwFWtuTz6IZ0DY\naTQjW4Bj2kqwh9/pn+leFhjQDHxpTMN+qwn2pQ3SrLnuLMWUHmwDvkut0pOOH/Y=\n=bD0Q\n-----END PGP SIGNATURE-----\n", "payload": "tree 586b2de55b3d9dbb5ff1518c6cae447348fdf78a\nparent 581524e53777a3721cad1b8c33323e3ef46c8aad\nparent 4506d26cf39dcde786d4853af133bf26799bf65d\nauthor Jonas Schievink <jonasschievink@gmail.com> 1600021269 +0200\ncommitter GitHub <noreply@github.com> 1600021269 +0200\n\nRollup merge of #76527 - fusion-engineering-forks:cleanup-uninit, r=jonas-schievink\n\nRemove internal and unstable MaybeUninit::UNINIT.\n\nLooks like it is no longer necessary, as `uninit_array()` can be used instead in the few cases where it was needed.\n\n(I wanted to just add `#[doc(hidden)]` to remove clutter from the documentation, but looks like it can just be removed entirely.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5389a4a34e640359ef04ebc99962e196c5bfabe", "html_url": "https://github.com/rust-lang/rust/commit/e5389a4a34e640359ef04ebc99962e196c5bfabe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5389a4a34e640359ef04ebc99962e196c5bfabe/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "581524e53777a3721cad1b8c33323e3ef46c8aad", "url": "https://api.github.com/repos/rust-lang/rust/commits/581524e53777a3721cad1b8c33323e3ef46c8aad", "html_url": "https://github.com/rust-lang/rust/commit/581524e53777a3721cad1b8c33323e3ef46c8aad"}, {"sha": "4506d26cf39dcde786d4853af133bf26799bf65d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4506d26cf39dcde786d4853af133bf26799bf65d", "html_url": "https://github.com/rust-lang/rust/commit/4506d26cf39dcde786d4853af133bf26799bf65d"}], "stats": {"total": 17, "additions": 4, "deletions": 13}, "files": [{"sha": "6c343b17264404fb80a94cdbab26085adfe98794", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5389a4a34e640359ef04ebc99962e196c5bfabe/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5389a4a34e640359ef04ebc99962e196c5bfabe/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=e5389a4a34e640359ef04ebc99962e196c5bfabe", "patch": "@@ -78,8 +78,8 @@ impl<K, V> LeafNode<K, V> {\n         LeafNode {\n             // As a general policy, we leave fields uninitialized if they can be, as this should\n             // be both slightly faster and easier to track in Valgrind.\n-            keys: [MaybeUninit::UNINIT; CAPACITY],\n-            vals: [MaybeUninit::UNINIT; CAPACITY],\n+            keys: MaybeUninit::uninit_array(),\n+            vals: MaybeUninit::uninit_array(),\n             parent: ptr::null(),\n             parent_idx: MaybeUninit::uninit(),\n             len: 0,\n@@ -111,7 +111,7 @@ impl<K, V> InternalNode<K, V> {\n     /// `len` of 0), there must be one initialized and valid edge. This function does not set up\n     /// such an edge.\n     unsafe fn new() -> Self {\n-        InternalNode { data: unsafe { LeafNode::new() }, edges: [MaybeUninit::UNINIT; 2 * B] }\n+        InternalNode { data: unsafe { LeafNode::new() }, edges: MaybeUninit::uninit_array() }\n     }\n }\n "}, {"sha": "5774ebb9b195ab5c0c66c91da96d458f007051e2", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5389a4a34e640359ef04ebc99962e196c5bfabe/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5389a4a34e640359ef04ebc99962e196c5bfabe/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=e5389a4a34e640359ef04ebc99962e196c5bfabe", "patch": "@@ -100,7 +100,6 @@\n #![feature(fn_traits)]\n #![feature(fundamental)]\n #![feature(inplace_iteration)]\n-#![feature(internal_uninit_const)]\n #![feature(lang_items)]\n #![feature(layout_for_ptr)]\n #![feature(libc)]\n@@ -135,7 +134,7 @@\n #![feature(unsized_locals)]\n #![feature(allocator_internals)]\n #![feature(slice_partition_dedup)]\n-#![feature(maybe_uninit_extra, maybe_uninit_slice)]\n+#![feature(maybe_uninit_extra, maybe_uninit_slice, maybe_uninit_uninit_array)]\n #![feature(alloc_layout_extra)]\n #![feature(trusted_random_access)]\n #![feature(try_trait)]"}, {"sha": "e629d28eae163c018a99f44bee0960ff0e9644f6", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5389a4a34e640359ef04ebc99962e196c5bfabe/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5389a4a34e640359ef04ebc99962e196c5bfabe/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=e5389a4a34e640359ef04ebc99962e196c5bfabe", "patch": "@@ -306,14 +306,6 @@ impl<T> MaybeUninit<T> {\n         unsafe { MaybeUninit::<[MaybeUninit<T>; LEN]>::uninit().assume_init() }\n     }\n \n-    /// A promotable constant, equivalent to `uninit()`.\n-    #[unstable(\n-        feature = \"internal_uninit_const\",\n-        issue = \"none\",\n-        reason = \"hack to work around promotability\"\n-    )]\n-    pub const UNINIT: Self = Self::uninit();\n-\n     /// Creates a new `MaybeUninit<T>` in an uninitialized state, with the memory being\n     /// filled with `0` bytes. It depends on `T` whether that already makes for\n     /// proper initialization. For example, `MaybeUninit<usize>::zeroed()` is initialized,"}]}