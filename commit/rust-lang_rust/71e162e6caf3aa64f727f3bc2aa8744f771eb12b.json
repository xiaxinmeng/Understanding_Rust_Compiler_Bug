{"sha": "71e162e6caf3aa64f727f3bc2aa8744f771eb12b", "node_id": "C_kwDOAAsO6NoAKDcxZTE2MmU2Y2FmM2FhNjRmNzI3ZjNiYzJhYTg3NDRmNzcxZWIxMmI", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-07-26T13:57:19Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-07-26T14:14:21Z"}, "message": "Fix diagnostics for unfulfilled obligations", "tree": {"sha": "f52d38165b3d4774c94123434567bdaaf98a6505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f52d38165b3d4774c94123434567bdaaf98a6505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71e162e6caf3aa64f727f3bc2aa8744f771eb12b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71e162e6caf3aa64f727f3bc2aa8744f771eb12b", "html_url": "https://github.com/rust-lang/rust/commit/71e162e6caf3aa64f727f3bc2aa8744f771eb12b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71e162e6caf3aa64f727f3bc2aa8744f771eb12b/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d60ebe366bcc6b51e5ae1337288837a0be60ed36", "url": "https://api.github.com/repos/rust-lang/rust/commits/d60ebe366bcc6b51e5ae1337288837a0be60ed36", "html_url": "https://github.com/rust-lang/rust/commit/d60ebe366bcc6b51e5ae1337288837a0be60ed36"}], "stats": {"total": 46, "additions": 20, "deletions": 26}, "files": [{"sha": "31c523aaca9ae39614fea9658eb9c4322fb2646e", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71e162e6caf3aa64f727f3bc2aa8744f771eb12b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e162e6caf3aa64f727f3bc2aa8744f771eb12b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=71e162e6caf3aa64f727f3bc2aa8744f771eb12b", "patch": "@@ -829,6 +829,14 @@ impl<'tcx> TraitPredicate<'tcx> {\n     pub fn is_const_if_const(self) -> bool {\n         self.constness == BoundConstness::ConstIfConst\n     }\n+\n+    pub fn is_constness_satisfied_by(self, constness: hir::Constness) -> bool {\n+        match (self.constness, constness) {\n+            (BoundConstness::NotConst, _)\n+            | (BoundConstness::ConstIfConst, hir::Constness::Const) => true,\n+            (BoundConstness::ConstIfConst, hir::Constness::NotConst) => false,\n+        }\n+    }\n }\n \n impl<'tcx> PolyTraitPredicate<'tcx> {"}, {"sha": "c77540b2f469bc5110c83bfe84c061caab8fdf45", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/71e162e6caf3aa64f727f3bc2aa8744f771eb12b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e162e6caf3aa64f727f3bc2aa8744f771eb12b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=71e162e6caf3aa64f727f3bc2aa8744f771eb12b", "patch": "@@ -666,7 +666,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             );\n                         } else if !suggested {\n                             // Can't show anything else useful, try to find similar impls.\n-                            let impl_candidates = self.find_similar_impl_candidates(trait_ref);\n+                            let impl_candidates = self.find_similar_impl_candidates(trait_predicate);\n                             if !self.report_similar_impl_candidates(\n                                 impl_candidates,\n                                 trait_ref,\n@@ -701,7 +701,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 {\n                                     let trait_ref = trait_pred.to_poly_trait_ref();\n                                     let impl_candidates =\n-                                        self.find_similar_impl_candidates(trait_ref);\n+                                        self.find_similar_impl_candidates(trait_pred);\n                                     self.report_similar_impl_candidates(\n                                         impl_candidates,\n                                         trait_ref,\n@@ -1325,7 +1325,7 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n \n     fn find_similar_impl_candidates(\n         &self,\n-        trait_ref: ty::PolyTraitRef<'tcx>,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> Vec<ImplCandidate<'tcx>>;\n \n     fn report_similar_impl_candidates(\n@@ -1694,18 +1694,22 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n \n     fn find_similar_impl_candidates(\n         &self,\n-        trait_ref: ty::PolyTraitRef<'tcx>,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> Vec<ImplCandidate<'tcx>> {\n         self.tcx\n-            .all_impls(trait_ref.def_id())\n+            .all_impls(trait_pred.def_id())\n             .filter_map(|def_id| {\n-                if self.tcx.impl_polarity(def_id) == ty::ImplPolarity::Negative {\n+                if self.tcx.impl_polarity(def_id) == ty::ImplPolarity::Negative\n+                    || !trait_pred\n+                        .skip_binder()\n+                        .is_constness_satisfied_by(self.tcx.constness(def_id))\n+                {\n                     return None;\n                 }\n \n                 let imp = self.tcx.impl_trait_ref(def_id).unwrap();\n \n-                self.fuzzy_match_tys(trait_ref.skip_binder().self_ty(), imp.self_ty(), false)\n+                self.fuzzy_match_tys(trait_pred.skip_binder().self_ty(), imp.self_ty(), false)\n                     .map(|similarity| ImplCandidate { trait_ref: imp, similarity })\n             })\n             .collect()"}, {"sha": "aba4b5c1a8d8d8794f8cae24f8bf22d3ad610f33", "filename": "src/test/ui/const-generics/issues/issue-90318.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71e162e6caf3aa64f727f3bc2aa8744f771eb12b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71e162e6caf3aa64f727f3bc2aa8744f771eb12b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr?ref=71e162e6caf3aa64f727f3bc2aa8744f771eb12b", "patch": "@@ -10,7 +10,6 @@ note: the trait `PartialEq<_>` is implemented for `TypeId`, but that implementat\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n    |                            ^^\n-   = help: the trait `PartialEq` is implemented for `TypeId`\n \n error[E0277]: can't compare `TypeId` with `_` in const contexts\n   --> $DIR/issue-90318.rs:21:28\n@@ -24,7 +23,6 @@ note: the trait `PartialEq<_>` is implemented for `TypeId`, but that implementat\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n    |                            ^^\n-   = help: the trait `PartialEq` is implemented for `TypeId`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8a1b20a334567a9e041da3aa42a2716df4b438c6", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71e162e6caf3aa64f727f3bc2aa8744f771eb12b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71e162e6caf3aa64f727f3bc2aa8744f771eb12b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr?ref=71e162e6caf3aa64f727f3bc2aa8744f771eb12b", "patch": "@@ -10,16 +10,6 @@ note: the trait `PartialEq<_>` is implemented for `fn()`, but that implementatio\n    |\n LL |     unsafe { x == y }\n    |                ^^\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             extern \"C\" fn() -> Ret\n-             extern \"C\" fn(A, B) -> Ret\n-             extern \"C\" fn(A, B, ...) -> Ret\n-             extern \"C\" fn(A, B, C) -> Ret\n-             extern \"C\" fn(A, B, C, ...) -> Ret\n-             extern \"C\" fn(A, B, C, D) -> Ret\n-             extern \"C\" fn(A, B, C, D, ...) -> Ret\n-             extern \"C\" fn(A, B, C, D, E) -> Ret\n-           and 68 others\n \n error: aborting due to previous error\n "}, {"sha": "83d395dda196ae6af7abaa9a1680e05246dcbd98", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71e162e6caf3aa64f727f3bc2aa8744f771eb12b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71e162e6caf3aa64f727f3bc2aa8744f771eb12b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr?ref=71e162e6caf3aa64f727f3bc2aa8744f771eb12b", "patch": "@@ -9,13 +9,7 @@ note: the trait `PartialEq<_>` is implemented for `T`, but that implementation i\n    |\n LL |     *t == *t\n    |        ^^\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             <&A as PartialEq<&B>>\n-             <&A as PartialEq<&mut B>>\n-             <&mut A as PartialEq<&B>>\n-             <&mut A as PartialEq<&mut B>>\n-             <*const T as PartialEq>\n-             <*mut T as PartialEq>\n+   = help: the trait `PartialEq<&B>` is implemented for `&A`\n \n error: aborting due to previous error\n "}]}