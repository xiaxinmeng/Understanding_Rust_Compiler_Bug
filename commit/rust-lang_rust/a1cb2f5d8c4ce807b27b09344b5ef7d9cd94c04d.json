{"sha": "a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExY2IyZjVkOGM0Y2U4MDdiMjdiMDkzNDRiNWVmN2Q5Y2Q5NGMwNGQ=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-22T13:42:32Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-22T14:47:34Z"}, "message": "doc: Remove Freeze / NoFreeze from docs", "tree": {"sha": "d27e46c57903f919e2b60acc828a0ce031b8736b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d27e46c57903f919e2b60acc828a0ce031b8736b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d", "html_url": "https://github.com/rust-lang/rust/commit/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90e9d8ee6258079e25d49480fcafb41945aa6fbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/90e9d8ee6258079e25d49480fcafb41945aa6fbe", "html_url": "https://github.com/rust-lang/rust/commit/90e9d8ee6258079e25d49480fcafb41945aa6fbe"}], "stats": {"total": 43, "additions": 14, "deletions": 29}, "files": [{"sha": "a61e80818487acaa771a2ec17e7cc2efd9ecd703", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d", "patch": "@@ -1019,7 +1019,7 @@ never invoking this behaviour or exposing an API making it possible for it to oc\n \n * Data races\n * Dereferencing a null/dangling raw pointer\n-* Mutating an immutable value/reference, if it is not marked as non-`Freeze`\n+* Mutating an immutable value/reference\n * Reads of [undef](http://llvm.org/docs/LangRef.html#undefined-values) (uninitialized) memory\n * Breaking the [pointer aliasing rules](http://llvm.org/docs/LangRef.html#pointer-aliasing-rules)\n   with raw pointers (a subset of the rules used by C)\n@@ -3434,10 +3434,6 @@ call to the method `make_string`.\n Types in Rust are categorized into kinds, based on various properties of the components of the type.\n The kinds are:\n \n-`Freeze`\n-  : Types of this kind are deeply immutable;\n-    they contain no mutable memory locations\n-    directly or indirectly via pointers.\n `Send`\n   : Types of this kind can be safely sent between tasks.\n     This kind includes scalars, owning pointers, owned closures, and"}, {"sha": "b854841487d6f8ec92afcea8a939591299a6c29a", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d", "patch": "@@ -2099,10 +2099,6 @@ unless they contain managed boxes, managed closures, or references.\n These are types that are safe to be used across several threads with access to\n a `&T` pointer. `MutexArc` is an example of a *sharable* type with internal mutable data.\n \n-* `Freeze` - Constant (immutable) types.\n-These are types that do not contain anything intrinsically mutable.\n-Intrinsically mutable values include `Cell` in the standard library.\n-\n * `'static` - Non-borrowed types.\n These are types that do not contain any data whose lifetime is bound to\n a particular stack frame. These are types that do not contain any\n@@ -2152,7 +2148,7 @@ We say that the `Printable` trait _provides_ a `print` method with the\n given signature.  This means that we can call `print` on an argument\n of any type that implements the `Printable` trait.\n \n-Rust's built-in `Send` and `Freeze` types are examples of traits that\n+Rust's built-in `Send` and `Share` types are examples of traits that\n don't provide any methods.\n \n Traits may be implemented for specific types with [impls]. An impl for\n@@ -2444,15 +2440,15 @@ Consequently, the trait objects themselves automatically fulfill their\n respective kind bounds. However, this default behavior can be overridden by\n specifying a list of bounds on the trait type, for example, by writing `~Trait:`\n (which indicates that the contents of the owned trait need not fulfill any\n-bounds), or by writing `~Trait:Send+Freeze`, which indicates that in addition\n-to fulfilling `Send`, contents must also fulfill `Freeze`, and as a consequence,\n-the trait itself fulfills `Freeze`.\n+bounds), or by writing `~Trait:Send+Share`, which indicates that in addition\n+to fulfilling `Send`, contents must also fulfill `Share`, and as a consequence,\n+the trait itself fulfills `Share`.\n \n * `~Trait:Send` is equivalent to `~Trait`.\n * `&Trait:` is equivalent to `&Trait`.\n \n Builtin kind bounds can also be specified on closure types in the same way (for\n-example, by writing `fn:Freeze()`), and the default behaviours are the same as\n+example, by writing `fn:Send()`), and the default behaviours are the same as\n for traits of the same storage class.\n \n ## Trait inheritance"}, {"sha": "ee5d896a1c024ee2af5907061d17091948df7adf", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d", "patch": "@@ -30,20 +30,14 @@ use syntax::visit::Visitor;\n // kind is noncopyable. The noncopyable kind can be extended with any number\n // of the following attributes.\n //\n-//  send: Things that can be sent on channels or included in spawned closures.\n-//  freeze: Things thare are deeply immutable. They are guaranteed never to\n-//    change, and can be safely shared without copying between tasks.\n+//  Send: Things that can be sent on channels or included in spawned closures. It\n+//  includes scalar types as well as classes and unique types containing only\n+//  sendable types.\n //  'static: Things that do not contain references.\n //\n-// Send includes scalar types as well as classes and unique types containing\n-// only sendable types.\n-//\n-// Freeze include scalar types, things without non-const fields, and pointers\n-// to freezable things.\n-//\n // This pass ensures that type parameters are only instantiated with types\n // whose kinds are equal or less general than the way the type parameter was\n-// annotated (with the `Send` or `Freeze` bound).\n+// annotated (with the `Send` bound).\n //\n // It also verifies that noncopyable kinds are not copied. Sendability is not\n // applied, since none of our language primitives send. Instead, the sending"}, {"sha": "6c6d6a2867cedb05d128eca9cdc1acbaf59ab01e", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d", "patch": "@@ -1027,8 +1027,7 @@ pub fn ty_generics(ccx: &CrateCtxt,\n          * Translate the AST's notion of ty param bounds (which are an\n          * enum consisting of a newtyped Ty or a region) to ty's\n          * notion of ty param bounds, which can either be user-defined\n-         * traits, or one of the two built-in traits (formerly known\n-         * as kinds): Freeze and Send.\n+         * traits, or the built-in trait (formerly known as kind): Send.\n          */\n \n         let mut param_bounds = ty::ParamBounds {"}, {"sha": "0e9025303d00aa80ed96043a93c79e24f2640aa0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d", "patch": "@@ -116,8 +116,8 @@ pub enum Implementor {\n ///\n /// This structure purposefully does not implement `Clone` because it's intended\n /// to be a fairly large and expensive structure to clone. Instead this adheres\n-/// to both `Send` and `Freeze` so it may be stored in a `Arc` instance and\n-/// shared among the various rendering tasks.\n+/// to `Send` so it may be stored in a `Arc` instance and shared among the various\n+/// rendering tasks.\n pub struct Cache {\n     /// Mapping of typaram ids to the name of the type parameter. This is used\n     /// when pretty-printing a type (so pretty printing doesn't have to"}, {"sha": "f2a256165e2973d9fc53ed07acbf2876a90b5134", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d", "patch": "@@ -169,7 +169,7 @@ pub static DUMMY_NODE_ID: NodeId = -1;\n // The AST represents all type param bounds as types.\n // typeck::collect::compute_bounds matches these against\n // the \"special\" built-in traits (see middle::lang_items) and\n-// detects Copy, Send, Send, and Freeze.\n+// detects Copy, Send and Share.\n #[deriving(Clone, Eq, Encodable, Decodable, Hash)]\n pub enum TyParamBound {\n     TraitTyParamBound(TraitRef),"}]}