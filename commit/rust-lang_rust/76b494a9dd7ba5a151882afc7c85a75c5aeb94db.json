{"sha": "76b494a9dd7ba5a151882afc7c85a75c5aeb94db", "node_id": "C_kwDOAAsO6NoAKDc2YjQ5NGE5ZGQ3YmE1YTE1MTg4MmFmYzdjODVhNzVjNWFlYjk0ZGI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-05T06:44:33Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-05T06:44:33Z"}, "message": "Normalize before erasing late-bound regions in equal_up_to_regions", "tree": {"sha": "93b45bc477e6e329ace824c0cea4c6ba1a48e6bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93b45bc477e6e329ace824c0cea4c6ba1a48e6bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76b494a9dd7ba5a151882afc7c85a75c5aeb94db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76b494a9dd7ba5a151882afc7c85a75c5aeb94db", "html_url": "https://github.com/rust-lang/rust/commit/76b494a9dd7ba5a151882afc7c85a75c5aeb94db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76b494a9dd7ba5a151882afc7c85a75c5aeb94db/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "html_url": "https://github.com/rust-lang/rust/commit/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "f42e8aa53d141dfa0fbb8df26dc76f2f1f7ae012", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/76b494a9dd7ba5a151882afc7c85a75c5aeb94db/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b494a9dd7ba5a151882afc7c85a75c5aeb94db/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=76b494a9dd7ba5a151882afc7c85a75c5aeb94db", "patch": "@@ -89,20 +89,21 @@ pub fn equal_up_to_regions<'tcx>(\n \n     // Normalize lifetimes away on both sides, then compare.\n     let normalize = |ty: Ty<'tcx>| {\n-        let ty = ty.fold_with(&mut BottomUpFolder {\n-            tcx,\n-            // FIXME: We erase all late-bound lifetimes, but this is not fully correct.\n-            // If you have a type like `<for<'a> fn(&'a u32) as SomeTrait>::Assoc`,\n-            // this is not necessarily equivalent to `<fn(&'static u32) as SomeTrait>::Assoc`,\n-            // since one may have an `impl SomeTrait for fn(&32)` and\n-            // `impl SomeTrait for fn(&'static u32)` at the same time which\n-            // specify distinct values for Assoc. (See also #56105)\n-            lt_op: |_| tcx.lifetimes.re_erased,\n-            // Leave consts and types unchanged.\n-            ct_op: |ct| ct,\n-            ty_op: |ty| ty,\n-        });\n-        tcx.try_normalize_erasing_regions(param_env, ty).unwrap_or(ty)\n+        tcx.try_normalize_erasing_regions(param_env, ty).unwrap_or(ty).fold_with(\n+            &mut BottomUpFolder {\n+                tcx,\n+                // FIXME: We erase all late-bound lifetimes, but this is not fully correct.\n+                // If you have a type like `<for<'a> fn(&'a u32) as SomeTrait>::Assoc`,\n+                // this is not necessarily equivalent to `<fn(&'static u32) as SomeTrait>::Assoc`,\n+                // since one may have an `impl SomeTrait for fn(&32)` and\n+                // `impl SomeTrait for fn(&'static u32)` at the same time which\n+                // specify distinct values for Assoc. (See also #56105)\n+                lt_op: |_| tcx.lifetimes.re_erased,\n+                // Leave consts and types unchanged.\n+                ct_op: |ct| ct,\n+                ty_op: |ty| ty,\n+            },\n+        )\n     };\n     tcx.infer_ctxt().enter(|infcx| infcx.can_eq(param_env, normalize(src), normalize(dest)).is_ok())\n }"}]}