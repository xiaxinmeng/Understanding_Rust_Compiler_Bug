{"sha": "876282791e36c482676aeeaee722f5038126e175", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NjI4Mjc5MWUzNmM0ODI2NzZhZWVhZWU3MjJmNTAzODEyNmUxNzU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-09T22:37:50Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-09T22:37:50Z"}, "message": "First sketch of support for const items, not including most of trans.", "tree": {"sha": "6455132ac599209d9263440a5fcb7b8fe30b252b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6455132ac599209d9263440a5fcb7b8fe30b252b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/876282791e36c482676aeeaee722f5038126e175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/876282791e36c482676aeeaee722f5038126e175", "html_url": "https://github.com/rust-lang/rust/commit/876282791e36c482676aeeaee722f5038126e175", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/876282791e36c482676aeeaee722f5038126e175/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9da8d11a52a90832de35cab7285a3413e122a618", "url": "https://api.github.com/repos/rust-lang/rust/commits/9da8d11a52a90832de35cab7285a3413e122a618", "html_url": "https://github.com/rust-lang/rust/commit/9da8d11a52a90832de35cab7285a3413e122a618"}], "stats": {"total": 91, "additions": 88, "deletions": 3}, "files": [{"sha": "553a49f6635c8ce7ed71cec2da199c29eb1659cf", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/876282791e36c482676aeeaee722f5038126e175/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876282791e36c482676aeeaee722f5038126e175/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=876282791e36c482676aeeaee722f5038126e175", "patch": "@@ -204,6 +204,7 @@ type variant = rec(str name, vec[variant_arg] args, def_id id, ann ann);\n \n type item = spanned[item_];\n tag item_ {\n+    item_const(ident, @ty, @expr, def_id, ann);\n     item_fn(ident, _fn, vec[ty_param], def_id, ann);\n     item_mod(ident, _mod, def_id);\n     item_ty(ident, @ty, vec[ty_param], def_id, ann);"}, {"sha": "8cf088e4f71fa081dcc9ddb3d7b46379b49bfc4e", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/876282791e36c482676aeeaee722f5038126e175/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876282791e36c482676aeeaee722f5038126e175/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=876282791e36c482676aeeaee722f5038126e175", "patch": "@@ -1229,6 +1229,9 @@ impure fn parse_mod_items(parser p, token.token term) -> ast._mod {\n \n         // Index the item.\n         alt (item.node) {\n+            case (ast.item_const(?id, _, _, _, _)) {\n+                index.insert(id, ast.mie_item(u));\n+            }\n             case (ast.item_fn(?id, _, _, _, _)) {\n                 index.insert(id, ast.mie_item(u));\n             }\n@@ -1254,6 +1257,19 @@ impure fn parse_mod_items(parser p, token.token term) -> ast._mod {\n     ret rec(items=items, index=index);\n  }\n \n+impure fn parse_item_const(parser p) -> @ast.item {\n+    auto lo = p.get_span();\n+    expect(p, token.CONST);\n+    auto ty = parse_ty(p);\n+    auto id = parse_ident(p);\n+    expect(p, token.EQ);\n+    auto e = parse_expr(p);\n+    auto hi = p.get_span();\n+    expect(p, token.SEMI);\n+    auto item = ast.item_const(id, ty, e, p.next_def_id(), ast.ann_none);\n+    ret @spanned(lo, hi, item);\n+}\n+\n impure fn parse_item_mod(parser p) -> @ast.item {\n     auto lo = p.get_span();\n     expect(p, token.MOD);\n@@ -1369,6 +1385,12 @@ impure fn parse_item(parser p) -> @ast.item {\n     let ast.layer lyr = parse_layer(p);\n \n     alt (p.peek()) {\n+        case (token.CONST) {\n+            check (eff == ast.eff_pure);\n+            check (lyr == ast.layer_value);\n+            ret parse_item_const(p);\n+        }\n+\n         case (token.FN) {\n             check (lyr == ast.layer_value);\n             ret parse_item_fn(p, eff);"}, {"sha": "c81d2785b21d7bc874c1c051c7545acfceb7f9b8", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/876282791e36c482676aeeaee722f5038126e175/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876282791e36c482676aeeaee722f5038126e175/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=876282791e36c482676aeeaee722f5038126e175", "patch": "@@ -169,6 +169,10 @@ type ast_fold[ENV] =\n          @expr e) -> @stmt)                       fold_stmt_expr,\n \n      // Item folds.\n+     (fn(&ENV e, &span sp, ident ident,\n+         @ty t, @expr e,\n+         def_id id, ann a) -> @item)              fold_item_const,\n+\n      (fn(&ENV e, &span sp, ident ident,\n          &ast._fn f,\n          vec[ast.ty_param] ty_params,\n@@ -595,6 +599,12 @@ fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n \n     alt (i.node) {\n \n+        case (ast.item_const(?ident, ?t, ?e, ?id, ?ann)) {\n+            let @ast.ty t_ = fold_ty[ENV](env_, fld, t);\n+            let @ast.expr e_ = fold_expr(env_, fld, e);\n+            ret fld.fold_item_const(env_, i.span, ident, t_, e_, id, ann);\n+        }\n+\n         case (ast.item_fn(?ident, ?ff, ?tps, ?id, ?ann)) {\n             let ast._fn ff_ = fold_fn[ENV](env_, fld, ff);\n             ret fld.fold_item_fn(env_, i.span, ident, ff_, tps, id, ann);\n@@ -878,6 +888,12 @@ fn identity_fold_stmt_expr[ENV](&ENV e, &span sp, @expr x) -> @stmt {\n \n // Item identities.\n \n+fn identity_fold_item_const[ENV](&ENV e, &span sp, ident i,\n+                                 @ty t, @expr ex,\n+                                 def_id id, ann a) -> @item {\n+    ret @respan(sp, ast.item_const(i, t, ex, id, a));\n+}\n+\n fn identity_fold_item_fn[ENV](&ENV e, &span sp, ident i,\n                               &ast._fn f, vec[ast.ty_param] ty_params,\n                               def_id id, ann a) -> @item {\n@@ -1023,6 +1039,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n                           = bind identity_fold_stmt_check_expr[ENV](_,_,_),\n          fold_stmt_expr   = bind identity_fold_stmt_expr[ENV](_,_,_),\n \n+         fold_item_const= bind identity_fold_item_const[ENV](_,_,_,_,_,_,_),\n          fold_item_fn   = bind identity_fold_item_fn[ENV](_,_,_,_,_,_,_),\n          fold_item_mod  = bind identity_fold_item_mod[ENV](_,_,_,_,_),\n          fold_item_ty   = bind identity_fold_item_ty[ENV](_,_,_,_,_,_,_),"}, {"sha": "491d9e4a4c21ef7871d0cc3547810c5deef3f3c2", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/876282791e36c482676aeeaee722f5038126e175/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876282791e36c482676aeeaee722f5038126e175/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=876282791e36c482676aeeaee722f5038126e175", "patch": "@@ -29,6 +29,9 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def] {\n \n     fn found_def_item(@ast.item i) -> option.t[def] {\n         alt (i.node) {\n+            case (ast.item_const(_, _, _, ?id, _)) {\n+                ret some[def](ast.def_const(id));\n+            }\n             case (ast.item_fn(_, _, _, ?id, _)) {\n                 ret some[def](ast.def_fn(id));\n             }"}, {"sha": "8249d31d82b59cdc4a37b43f4b5403395522c722", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/876282791e36c482676aeeaee722f5038126e175/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876282791e36c482676aeeaee722f5038126e175/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=876282791e36c482676aeeaee722f5038126e175", "patch": "@@ -2001,6 +2001,10 @@ fn collect_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n             cx.item_ids.insert(fid, llfn);\n         }\n \n+        case (ast.item_const(?name, _, _, ?cid, _)) {\n+            cx.items.insert(cid, i);\n+        }\n+\n         case (ast.item_mod(?name, ?m, ?mid)) {\n             cx.items.insert(mid, i);\n         }\n@@ -2128,6 +2132,14 @@ fn trans_constant(&@crate_ctxt cx, @ast.item it) -> @crate_ctxt {\n                 i += 1u;\n             }\n         }\n+\n+        case (ast.item_const(?name, _, ?expr, ?cid, ?ann)) {\n+            // FIXME: The whole expr-translation system needs cloning to deal\n+            // with consts.\n+            auto v = C_int(1);\n+            cx.item_ids.insert(cid, v);\n+        }\n+\n         case (_) {\n             // empty\n         }"}, {"sha": "160dce2c8f74273c3aff77701f26f79787b9f363", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/876282791e36c482676aeeaee722f5038126e175/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876282791e36c482676aeeaee722f5038126e175/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=876282791e36c482676aeeaee722f5038126e175", "patch": "@@ -372,6 +372,13 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n                            @ty_table item_to_ty,\n                            @ast.item it) -> @ty {\n         alt (it.node) {\n+\n+            case (ast.item_const(?ident, ?t, _, ?def_id, _)) {\n+                auto f = bind trans_ty_item_id_to_ty(id_to_ty_item,\n+                                                     item_to_ty, _);\n+                item_to_ty.insert(def_id, ast_ty_to_ty(f, t));\n+            }\n+\n             case (ast.item_fn(?ident, ?fn_info, _, ?def_id, _)) {\n                 // TODO: handle ty-params\n \n@@ -391,7 +398,6 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n             case (ast.item_ty(?ident, ?referent_ty, _, ?def_id, _)) {\n                 if (item_to_ty.contains_key(def_id)) {\n                     // Avoid repeating work.\n-                    check (item_to_ty.contains_key(def_id));\n                     ret item_to_ty.get(def_id);\n                 }\n \n@@ -431,11 +437,11 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n                     auto arg_ty = ast_ty_to_ty(f, va.ty);\n                     args += vec(rec(mode=ast.alias, ty=arg_ty));\n                 }\n-                result_ty = plain_ty(ty_fn(args, plain_ty(ty_tag(tag_id)))); \n+                result_ty = plain_ty(ty_fn(args, plain_ty(ty_tag(tag_id))));\n             }\n \n             item_to_ty.insert(variant.id, result_ty);\n-            \n+\n             auto variant_t = rec(ann=ast.ann_type(result_ty) with variant);\n             result += vec(variant_t);\n         }\n@@ -461,6 +467,11 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n     for (@ast.item it in module.items) {\n         let ast.item_ result;\n         alt (it.node) {\n+            case (ast.item_const(?ident, ?t, ?e, ?def_id, _)) {\n+                auto ty = trans_ty_item_to_ty(id_to_ty_item, item_to_ty, it);\n+                result = ast.item_const(ident, t, e, def_id,\n+                                        ast.ann_type(ty));\n+            }\n             case (ast.item_fn(?ident, ?fn_info, ?tps, ?def_id, _)) {\n                 // TODO: type-params\n \n@@ -1659,11 +1670,30 @@ fn check_block(&fn_ctxt fcx, &ast.block block) -> ast.block {\n                                     index=block.node.index));\n }\n \n+fn check_const(&@crate_ctxt ccx, &span sp, ast.ident ident, @ast.ty t,\n+               @ast.expr e, ast.def_id id, ast.ann ann) -> @ast.item {\n+    // FIXME: this is kinda a kludge; we manufacture a fake \"function context\"\n+    // for checking the initializer expression.\n+    auto rty = ann_to_type(ann);\n+    let fn_ctxt fcx = rec(ret_ty = rty,\n+                          locals = @common.new_def_hash[@ty](),\n+                          ccx = ccx);\n+    auto e_ = check_expr(fcx, e);\n+    // FIXME: necessary? Correct sequence?\n+    demand_expr(fcx, rty, e_);\n+    auto item = ast.item_const(ident, t, e_, id, ann);\n+    ret @fold.respan[ast.item_](sp, item);\n+}\n+\n fn check_fn(&@crate_ctxt ccx, &span sp, ast.ident ident, &ast._fn f,\n             vec[ast.ty_param] ty_params, ast.def_id id,\n             ast.ann ann) -> @ast.item {\n     auto local_ty_table = @common.new_def_hash[@ty]();\n \n+    // FIXME: duplicate work: the item annotation already has the arg types\n+    // and return type translated to typeck.ty values. We don't need do to it\n+    // again here, we can extract them.\n+\n     // Store the type of each argument in the table.\n     let vec[arg] inputs = vec();\n     for (ast.arg arg in f.inputs) {"}]}