{"sha": "1040cab53b95aa47c2ea8e1a6de73eddadc57aa7", "node_id": "C_kwDOAAsO6NoAKDEwNDBjYWI1M2I5NWFhNDdjMmVhOGUxYTZkZTczZWRkYWRjNTdhYTc", "commit": {"author": {"name": "Aria Beingessner", "email": "a.beingessner@gmail.com", "date": "2022-03-21T23:25:44Z"}, "committer": {"name": "niluxv", "email": "niluxv.opensource.C-h2ty6xl@yandex.com", "date": "2022-04-08T15:40:33Z"}, "message": "WIP PROOF-OF-CONCEPT: Make the compiler complain about all int<->ptr casts.\n\nALL\n\nOF\n\nTHEM", "tree": {"sha": "aecc5ec60b9f6cb10be5e00b100eec7cea3c8158", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aecc5ec60b9f6cb10be5e00b100eec7cea3c8158"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1040cab53b95aa47c2ea8e1a6de73eddadc57aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1040cab53b95aa47c2ea8e1a6de73eddadc57aa7", "html_url": "https://github.com/rust-lang/rust/commit/1040cab53b95aa47c2ea8e1a6de73eddadc57aa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1040cab53b95aa47c2ea8e1a6de73eddadc57aa7/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "niluxv", "id": 34834616, "node_id": "MDQ6VXNlcjM0ODM0NjE2", "avatar_url": "https://avatars.githubusercontent.com/u/34834616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niluxv", "html_url": "https://github.com/niluxv", "followers_url": "https://api.github.com/users/niluxv/followers", "following_url": "https://api.github.com/users/niluxv/following{/other_user}", "gists_url": "https://api.github.com/users/niluxv/gists{/gist_id}", "starred_url": "https://api.github.com/users/niluxv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niluxv/subscriptions", "organizations_url": "https://api.github.com/users/niluxv/orgs", "repos_url": "https://api.github.com/users/niluxv/repos", "events_url": "https://api.github.com/users/niluxv/events{/privacy}", "received_events_url": "https://api.github.com/users/niluxv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "html_url": "https://github.com/rust-lang/rust/commit/e4f5b15b8832334eca2c0bd3929eb3969f1d166d"}], "stats": {"total": 100, "additions": 96, "deletions": 4}, "files": [{"sha": "f9ac0a54a2f3409a5c3bba69dd6386fb2e227d42", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1040cab53b95aa47c2ea8e1a6de73eddadc57aa7/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1040cab53b95aa47c2ea8e1a6de73eddadc57aa7/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=1040cab53b95aa47c2ea8e1a6de73eddadc57aa7", "patch": "@@ -2648,6 +2648,41 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    /// The `fuzzy_provenance_casts` lint detects an `as` cast between an integer\n+    /// and a pointer.\n+    ///\n+    /// ### Example\n+    ///\n+    /// fn main() {\n+    ///     let my_ref = &0;\n+    ///     let my_addr = my_ref as usize;\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Casting a pointer to an integer or an integer to a pointer is a lossy operation,\n+    /// because beyond just an *address* a pointer may be associated with a particular\n+    /// *provenance* and *segment*. This information is required by both the compiler\n+    /// and the hardware to correctly execute your code. If you need to do this kind\n+    /// of operation, use ptr::addr and ptr::with_addr.\n+    ///\n+    /// This is a [future-incompatible] lint to transition this to a hard error\n+    /// in the future. See [issue #9999999] for more details.\n+    ///\n+    /// [future-incompatible]: ../index.md#future-incompatible-lints\n+    /// [issue #9999999]: https://github.com/rust-lang/rust/issues/9999999\n+    pub FUZZY_PROVENANCE_CASTS,\n+    Warn,\n+    \"A lossy pointer-integer integer cast is used\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #9999999 <https://github.com/rust-lang/rust/issues/9999999>\",\n+    };\n+}\n+\n declare_lint! {\n     /// The `const_evaluatable_unchecked` lint detects a generic constant used\n     /// in a type.\n@@ -3101,6 +3136,7 @@ declare_lint_pass! {\n         UNSAFE_OP_IN_UNSAFE_FN,\n         INCOMPLETE_INCLUDE,\n         CENUM_IMPL_DROP_CAST,\n+        FUZZY_PROVENANCE_CASTS,\n         CONST_EVALUATABLE_UNCHECKED,\n         INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n         MUST_NOT_SUSPEND,"}, {"sha": "9b67fd54bd66f52784e70aa1feede1c1889ad7d6", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 60, "deletions": 4, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1040cab53b95aa47c2ea8e1a6de73eddadc57aa7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1040cab53b95aa47c2ea8e1a6de73eddadc57aa7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=1040cab53b95aa47c2ea8e1a6de73eddadc57aa7", "patch": "@@ -807,11 +807,22 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n \n             // ptr -> *\n             (Ptr(m_e), Ptr(m_c)) => self.check_ptr_ptr_cast(fcx, m_e, m_c), // ptr-ptr-cast\n-            (Ptr(m_expr), Int(_)) => self.check_ptr_addr_cast(fcx, m_expr), // ptr-addr-cast\n-            (FnPtr, Int(_)) => Ok(CastKind::FnPtrAddrCast),\n \n-            // * -> ptr\n-            (Int(_), Ptr(mt)) => self.check_addr_ptr_cast(fcx, mt), // addr-ptr-cast\n+            // ptr-addr-cast\n+            (Ptr(m_expr), Int(_)) => {\n+                self.fuzzy_provenance_ptr2int_lint(fcx, t_from);\n+                self.check_ptr_addr_cast(fcx, m_expr)\n+            }\n+            (FnPtr, Int(_)) => {\n+                self.fuzzy_provenance_ptr2int_lint(fcx, t_from);\n+                Ok(CastKind::FnPtrAddrCast)\n+            }\n+            // addr-ptr-cast\n+            (Int(_), Ptr(mt)) => {\n+                self.fuzzy_provenance_int2ptr_lint(fcx);\n+                self.check_addr_ptr_cast(fcx, mt)\n+            }\n+            // fn-ptr-cast\n             (FnPtr, Ptr(mt)) => self.check_fptr_ptr_cast(fcx, mt),\n \n             // prim -> prim\n@@ -934,6 +945,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         fcx: &FnCtxt<'a, 'tcx>,\n         m_cast: TypeAndMut<'tcx>,\n     ) -> Result<CastKind, CastError> {\n+        self.fuzzy_provenance_int2ptr_lint(fcx);\n         // ptr-addr cast. pointer must be thin.\n         match fcx.pointer_kind(m_cast.ty, self.span)? {\n             None => Err(CastError::UnknownCastPtrKind),\n@@ -973,6 +985,50 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             }\n         }\n     }\n+\n+    fn fuzzy_provenance_ptr2int_lint(&self, fcx: &FnCtxt<'a, 'tcx>, t_from: CastTy<'tcx>) {\n+        fcx.tcx.struct_span_lint_hir(\n+            lint::builtin::FUZZY_PROVENANCE_CASTS,\n+            self.expr.hir_id,\n+            self.span,\n+            |err| {\n+                let mut err = err.build(&format!(\n+                    \"strict provenance disallows casting pointer `{}` to integer `{}`\",\n+                    self.expr_ty, self.cast_ty\n+                ));\n+\n+                if let CastTy::FnPtr = t_from {\n+                    err.help(\n+                        \"use `(... as *const u8).addr()` to obtain \\\n+                         the address of a function pointer\",\n+                    );\n+                } else {\n+                    err.help(\"use `.addr()` to obtain the address of a pointer\");\n+                }\n+\n+                err.emit();\n+            },\n+        );\n+    }\n+\n+    fn fuzzy_provenance_int2ptr_lint(&self, fcx: &FnCtxt<'a, 'tcx>) {\n+        fcx.tcx.struct_span_lint_hir(\n+            lint::builtin::FUZZY_PROVENANCE_CASTS,\n+            self.expr.hir_id,\n+            self.span,\n+            |err| {\n+                err.build(&format!(\n+                    \"strict provenance disallows casting integer `{}` to pointer `{}`\",\n+                    self.expr_ty, self.cast_ty\n+                ))\n+                .help(\n+                    \"use `.with_addr(...)` to adjust a valid pointer \\\n+                     in the same allocation, to this address\",\n+                )\n+                .emit();\n+            },\n+        );\n+    }\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {"}]}