{"sha": "e5f20212028fd6cb5161dbb2c0f14c9d94f1caea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZjIwMjEyMDI4ZmQ2Y2I1MTYxZGJiMmMwZjE0YzlkOTRmMWNhZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-09T09:01:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-09T09:01:43Z"}, "message": "auto merge of #10874 : vadimcn/rust/integrated-as, r=alexcrichton\n\nLast LLVM update seems to have fixed whatever prevented LLVM integrated assembler from generating correct unwind tables on Windows.   This PR switches Windows builds to use internal assembler by default.\r\nCompilation via external assembler can still be requested via the newly added `-Z no-integrated-as` option.\r\n\r\nCloses #8809", "tree": {"sha": "ba3244a7c4cffc47b604ffbcd915c433931b6efe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba3244a7c4cffc47b604ffbcd915c433931b6efe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5f20212028fd6cb5161dbb2c0f14c9d94f1caea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f20212028fd6cb5161dbb2c0f14c9d94f1caea", "html_url": "https://github.com/rust-lang/rust/commit/e5f20212028fd6cb5161dbb2c0f14c9d94f1caea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5f20212028fd6cb5161dbb2c0f14c9d94f1caea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09db61fb4f2ab880726dc29624ce66b41f1eb341", "url": "https://api.github.com/repos/rust-lang/rust/commits/09db61fb4f2ab880726dc29624ce66b41f1eb341", "html_url": "https://github.com/rust-lang/rust/commit/09db61fb4f2ab880726dc29624ce66b41f1eb341"}, {"sha": "c8498c19337f63b891f7f830a45636942badc56e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8498c19337f63b891f7f830a45636942badc56e", "html_url": "https://github.com/rust-lang/rust/commit/c8498c19337f63b891f7f830a45636942badc56e"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "6b76fdc52f8ea3035bf0c3bfb3725d5d191cd88f", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5f20212028fd6cb5161dbb2c0f14c9d94f1caea/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f20212028fd6cb5161dbb2c0f14c9d94f1caea/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=e5f20212028fd6cb5161dbb2c0f14c9d94f1caea", "patch": "@@ -356,13 +356,7 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n                                trans: &CrateTranslation,\n                                outputs: &OutputFilenames) {\n \n-    // On Windows, LLVM integrated assembler emits bad stack unwind tables when\n-    // segmented stacks are enabled.  However, unwind info directives in assembly\n-    // output are OK, so we generate assembly first and then run it through\n-    // an external assembler.\n-    if sess.targ_cfg.os == abi::OsWin32 &&\n-        (sess.opts.output_type == link::output_type_object ||\n-         sess.opts.output_type == link::output_type_exe) {\n+    if sess.no_integrated_as() {\n         let output_type = link::output_type_assembly;\n         let asm_filename = outputs.obj_filename.with_extension(\"s\");\n \n@@ -375,7 +369,7 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n \n         link::write::run_assembler(sess, &asm_filename, &outputs.obj_filename);\n \n-        // Remove assembly source unless --save-temps was specified\n+        // Remove assembly source, unless --save-temps was specified\n         if !sess.opts.save_temps {\n             fs::unlink(&asm_filename);\n         }"}, {"sha": "2d1d7033300b53516454023708542a25d7471aa2", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5f20212028fd6cb5161dbb2c0f14c9d94f1caea/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f20212028fd6cb5161dbb2c0f14c9d94f1caea/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=e5f20212028fd6cb5161dbb2c0f14c9d94f1caea", "patch": "@@ -66,6 +66,7 @@ pub static no_prepopulate_passes:   uint = 1 << 25;\n pub static use_softfp:              uint = 1 << 26;\n pub static gen_crate_map:           uint = 1 << 27;\n pub static prefer_dynamic:          uint = 1 << 28;\n+pub static no_integrated_as:        uint = 1 << 29;\n \n pub fn debugging_opts_map() -> ~[(&'static str, &'static str, uint)] {\n     ~[(\"verbose\", \"in general, enable more debug printouts\", verbose),\n@@ -117,6 +118,8 @@ pub fn debugging_opts_map() -> ~[(&'static str, &'static str, uint)] {\n      (\"soft-float\", \"Generate software floating point library calls\", use_softfp),\n      (\"gen-crate-map\", \"Force generation of a toplevel crate map\", gen_crate_map),\n      (\"prefer-dynamic\", \"Prefer dynamic linking to static linking\", prefer_dynamic),\n+     (\"no-integrated-as\",\n+      \"Use external assembler rather than LLVM's integrated one\", no_integrated_as),\n     ]\n }\n \n@@ -335,6 +338,9 @@ impl Session_ {\n     pub fn prefer_dynamic(&self) -> bool {\n         self.debugging_opt(prefer_dynamic)\n     }\n+    pub fn no_integrated_as(&self) -> bool {\n+        self.debugging_opt(no_integrated_as)\n+    }\n \n     // pointless function, now...\n     pub fn str_of(&self, id: ast::Ident) -> @str {"}, {"sha": "42d5cb4f211d2004711a1449d2aec8a456182a2a", "filename": "src/test/run-pass/test-runner-hides-main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f20212028fd6cb5161dbb2c0f14c9d94f1caea/src%2Ftest%2Frun-pass%2Ftest-runner-hides-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f20212028fd6cb5161dbb2c0f14c9d94f1caea/src%2Ftest%2Frun-pass%2Ftest-runner-hides-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-runner-hides-main.rs?ref=e5f20212028fd6cb5161dbb2c0f14c9d94f1caea", "patch": "@@ -10,6 +10,7 @@\n \n // compile-flags:--test\n // xfail-fast\n+// xfail-win32 #10872\n \n extern mod extra;\n "}]}