{"sha": "0031617f30f159df2cef301c9d574cd219e16b16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMzE2MTdmMzBmMTU5ZGYyY2VmMzAxYzlkNTc0Y2QyMTllMTZiMTY=", "commit": {"author": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-08-28T17:58:04Z"}, "committer": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-08-28T18:05:32Z"}, "message": "rustc: Add cfg(gc) and cfg(nogc).\n\nNeeded in libcore to determine whether core::gc is being compiled with\nGC on or not, which then affects various safety checks to avoid\ncollecting memory the GC is itself using.", "tree": {"sha": "eebd184e7e3abe6daad7d879ca4da906f30b1f3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eebd184e7e3abe6daad7d879ca4da906f30b1f3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0031617f30f159df2cef301c9d574cd219e16b16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0031617f30f159df2cef301c9d574cd219e16b16", "html_url": "https://github.com/rust-lang/rust/commit/0031617f30f159df2cef301c9d574cd219e16b16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0031617f30f159df2cef301c9d574cd219e16b16/comments", "author": null, "committer": null, "parents": [{"sha": "adf9fa229fbf9da048c766ec966d6d7c0babb5c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/adf9fa229fbf9da048c766ec966d6d7c0babb5c9", "html_url": "https://github.com/rust-lang/rust/commit/adf9fa229fbf9da048c766ec966d6d7c0babb5c9"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "8b70b25f88a165bb07c9869c2ab52e06f8e04b86", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0031617f30f159df2cef301c9d574cd219e16b16/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0031617f30f159df2cef301c9d574cd219e16b16/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=0031617f30f159df2cef301c9d574cd219e16b16", "patch": "@@ -62,22 +62,29 @@ fn default_configuration(sess: session, argv0: ~str, input: input) ->\n          mk(~\"build_input\", source_name(input))];\n }\n \n+fn append_configuration(cfg: ast::crate_cfg, name: ~str) -> ast::crate_cfg {\n+    if attr::contains_name(cfg, name) {\n+        return cfg;\n+    } else {\n+        return vec::append_one(cfg, attr::mk_word_item(name));\n+    }\n+}\n+\n fn build_configuration(sess: session, argv0: ~str, input: input) ->\n    ast::crate_cfg {\n     // Combine the configuration requested by the session (command line) with\n     // some default and generated configuration items\n     let default_cfg = default_configuration(sess, argv0, input);\n     let user_cfg = sess.opts.cfg;\n     // If the user wants a test runner, then add the test cfg\n-    let gen_cfg =\n-        {\n-            if sess.opts.test && !attr::contains_name(user_cfg, ~\"test\") {\n-                ~[attr::mk_word_item(~\"test\")]\n-            } else {\n-                ~[attr::mk_word_item(~\"notest\")]\n-            }\n-        };\n-    return vec::append(vec::append(user_cfg, gen_cfg), default_cfg);\n+    let user_cfg = append_configuration(\n+        user_cfg,\n+        if sess.opts.test { ~\"test\" } else { ~\"notest\" });\n+    // If the user requested GC, then add the GC cfg\n+    let user_cfg = append_configuration(\n+        user_cfg,\n+        if sess.opts.gc { ~\"gc\" } else { ~\"nogc\" });\n+    return vec::append(user_cfg, default_cfg);\n }\n \n // Convert strings provided as --cfg [cfgspec] into a crate_cfg"}]}