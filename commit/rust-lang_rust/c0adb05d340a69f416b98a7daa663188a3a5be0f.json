{"sha": "c0adb05d340a69f416b98a7daa663188a3a5be0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYWRiMDVkMzQwYTY5ZjQxNmI5OGE3ZGFhNjYzMTg4YTNhNWJlMGY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-04-21T18:33:20Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-07-19T21:15:11Z"}, "message": "proc_macro: don't use DiagnosticBuilder for building up Diagnostics.", "tree": {"sha": "86aae996ecd64f2de416097c8c297afcc5c82189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86aae996ecd64f2de416097c8c297afcc5c82189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0adb05d340a69f416b98a7daa663188a3a5be0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0adb05d340a69f416b98a7daa663188a3a5be0f", "html_url": "https://github.com/rust-lang/rust/commit/c0adb05d340a69f416b98a7daa663188a3a5be0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0adb05d340a69f416b98a7daa663188a3a5be0f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11864c4e6cbf9f76ba8589c251908a73c6d9277b", "url": "https://api.github.com/repos/rust-lang/rust/commits/11864c4e6cbf9f76ba8589c251908a73c6d9277b", "html_url": "https://github.com/rust-lang/rust/commit/11864c4e6cbf9f76ba8589c251908a73c6d9277b"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "d178f03ad96e15fb36d27b8aba1cf2c608af178b", "filename": "src/libproc_macro/diagnostic.rs", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c0adb05d340a69f416b98a7daa663188a3a5be0f/src%2Flibproc_macro%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0adb05d340a69f416b98a7daa663188a3a5be0f/src%2Flibproc_macro%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fdiagnostic.rs?ref=c0adb05d340a69f416b98a7daa663188a3a5be0f", "patch": "@@ -10,7 +10,8 @@\n \n use Span;\n \n-use rustc_errors as rustc;\n+use rustc_errors as errors;\n+use syntax_pos::MultiSpan;\n \n /// An enum representing a diagnostic level.\n #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n@@ -97,37 +98,32 @@ impl Diagnostic {\n     /// Emit the diagnostic.\n     #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n     pub fn emit(self) {\n-        ::__internal::with_sess(move |sess, _| {\n-            let handler = &sess.span_diagnostic;\n-            let level = __internal::level_to_internal_level(self.level);\n-            let mut diag = rustc::DiagnosticBuilder::new(handler, level, &*self.message);\n+        let level = self.level.to_internal();\n+        let mut diag = errors::Diagnostic::new(level, &*self.message);\n \n-            if let Some(span) = self.span {\n-                diag.set_span(span.0);\n-            }\n+        if let Some(span) = self.span {\n+            diag.set_span(span.0);\n+        }\n \n-            for child in self.children {\n-                let span = child.span.map(|s| s.0);\n-                let level = __internal::level_to_internal_level(child.level);\n-                diag.sub(level, &*child.message, span);\n-            }\n+        for child in self.children {\n+            let span = child.span.map_or(MultiSpan::new(), |s| s.0.into());\n+            let level = child.level.to_internal();\n+            diag.sub(level, &*child.message, span, None);\n+        }\n \n-            diag.emit();\n+        ::__internal::with_sess(move |sess, _| {\n+            errors::DiagnosticBuilder::new_diagnostic(&sess.span_diagnostic, diag).emit();\n         });\n     }\n }\n \n-#[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]\n-#[doc(hidden)]\n-pub mod __internal {\n-    use super::{Level, rustc};\n-\n-    pub fn level_to_internal_level(level: Level) -> rustc::Level {\n-        match level {\n-            Level::Error => rustc::Level::Error,\n-            Level::Warning => rustc::Level::Warning,\n-            Level::Note => rustc::Level::Note,\n-            Level::Help => rustc::Level::Help,\n+impl Level {\n+    fn to_internal(self) -> errors::Level {\n+        match self {\n+            Level::Error => errors::Level::Error,\n+            Level::Warning => errors::Level::Warning,\n+            Level::Note => errors::Level::Note,\n+            Level::Help => errors::Level::Help,\n             Level::__Nonexhaustive => unreachable!(\"Level::__Nonexhaustive\")\n         }\n     }"}, {"sha": "b1578b697bb8c3e1f389d68fe16f911d72269fdf", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0adb05d340a69f416b98a7daa663188a3a5be0f/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0adb05d340a69f416b98a7daa663188a3a5be0f/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=c0adb05d340a69f416b98a7daa663188a3a5be0f", "patch": "@@ -379,7 +379,7 @@ impl Diagnostic {\n \n     /// Convenience function for internal use, clients should use one of the\n     /// public methods above.\n-    pub(crate) fn sub(&mut self,\n+    pub fn sub(&mut self,\n            level: Level,\n            message: &str,\n            span: MultiSpan,"}]}