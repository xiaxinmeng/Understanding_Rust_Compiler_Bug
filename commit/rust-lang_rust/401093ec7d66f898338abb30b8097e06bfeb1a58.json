{"sha": "401093ec7d66f898338abb30b8097e06bfeb1a58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMTA5M2VjN2Q2NmY4OTgzMzhhYmIzMGI4MDk3ZTA2YmZlYjFhNTg=", "commit": {"author": {"name": "Jesse Jones", "email": "jesse9jones@gmail.com", "date": "2012-11-17T19:01:08Z"}, "committer": {"name": "Jesse Jones", "email": "jesse9jones@gmail.com", "date": "2012-11-17T19:01:08Z"}, "message": "Made from_str pure", "tree": {"sha": "ab9a147726ff67b07c04b4f766c5a6d082d72781", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab9a147726ff67b07c04b4f766c5a6d082d72781"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/401093ec7d66f898338abb30b8097e06bfeb1a58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/401093ec7d66f898338abb30b8097e06bfeb1a58", "html_url": "https://github.com/rust-lang/rust/commit/401093ec7d66f898338abb30b8097e06bfeb1a58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/401093ec7d66f898338abb30b8097e06bfeb1a58/comments", "author": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c11a12bdbfb804c2aef0dc164fd8ecc1f5d3eeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c11a12bdbfb804c2aef0dc164fd8ecc1f5d3eeb", "html_url": "https://github.com/rust-lang/rust/commit/0c11a12bdbfb804c2aef0dc164fd8ecc1f5d3eeb"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "8e9cd5a022763cb9ce8ad6f5ef80113ea9a63ee4", "filename": "src/libcore/from_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/401093ec7d66f898338abb30b8097e06bfeb1a58/src%2Flibcore%2Ffrom_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401093ec7d66f898338abb30b8097e06bfeb1a58/src%2Flibcore%2Ffrom_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffrom_str.rs?ref=401093ec7d66f898338abb30b8097e06bfeb1a58", "patch": "@@ -7,6 +7,6 @@\n use option::Option;\n \n pub trait FromStr {\n-    static fn from_str(s: &str) -> Option<self>;\n+    static pure fn from_str(s: &str) -> Option<self>;\n }\n "}, {"sha": "e5da7d6abe10638e74e2c998ce6e26c704c44c9d", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/401093ec7d66f898338abb30b8097e06bfeb1a58/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401093ec7d66f898338abb30b8097e06bfeb1a58/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=401093ec7d66f898338abb30b8097e06bfeb1a58", "patch": "@@ -106,7 +106,7 @@ impl T: iter::Times {\n  * * buf - A byte buffer\n  * * radix - The base of the number\n  */\n-pub fn parse_bytes(buf: &[u8], radix: uint) -> Option<T> {\n+pub pure fn parse_bytes(buf: &[u8], radix: uint) -> Option<T> {\n     if vec::len(buf) == 0u { return None; }\n     let mut i = vec::len(buf) - 1u;\n     let mut start = 0u;\n@@ -129,10 +129,13 @@ pub fn parse_bytes(buf: &[u8], radix: uint) -> Option<T> {\n }\n \n /// Parse a string to an int\n-pub fn from_str(s: &str) -> Option<T> { parse_bytes(str::to_bytes(s), 10u) }\n+pub pure fn from_str(s: &str) -> Option<T>\n+{\n+    parse_bytes(str::to_bytes(s), 10u)\n+}\n \n impl T : FromStr {\n-    static fn from_str(s: &str) -> Option<T> { from_str(s) }\n+    static pure fn from_str(s: &str) -> Option<T> { from_str(s) }\n }\n \n /// Convert to a string in a given base"}, {"sha": "d406e36cc0771a72c31708bfffd5a1b101a4a222", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/401093ec7d66f898338abb30b8097e06bfeb1a58/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401093ec7d66f898338abb30b8097e06bfeb1a58/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=401093ec7d66f898338abb30b8097e06bfeb1a58", "patch": "@@ -100,7 +100,7 @@ impl T: iter::Times {\n  *\n  * `buf` must not be empty\n  */\n-pub fn parse_bytes(buf: &[const u8], radix: uint) -> Option<T> {\n+pub pure fn parse_bytes(buf: &[const u8], radix: uint) -> Option<T> {\n     if vec::len(buf) == 0u { return None; }\n     let mut i = vec::len(buf) - 1u;\n     let mut power = 1u as T;\n@@ -117,10 +117,13 @@ pub fn parse_bytes(buf: &[const u8], radix: uint) -> Option<T> {\n }\n \n /// Parse a string to an int\n-pub fn from_str(s: &str) -> Option<T> { parse_bytes(str::to_bytes(s), 10u) }\n+pub pure fn from_str(s: &str) -> Option<T>\n+{\n+    parse_bytes(str::to_bytes(s), 10u)\n+}\n \n impl T : FromStr {\n-    static fn from_str(s: &str) -> Option<T> { from_str(s) }\n+    static pure fn from_str(s: &str) -> Option<T> { from_str(s) }\n }\n \n /// Parse a string as an unsigned integer."}]}