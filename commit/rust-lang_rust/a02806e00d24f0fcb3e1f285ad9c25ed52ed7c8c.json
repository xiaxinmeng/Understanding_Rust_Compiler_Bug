{"sha": "a02806e00d24f0fcb3e1f285ad9c25ed52ed7c8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMjgwNmUwMGQyNGYwZmNiM2UxZjI4NWFkOWMyNWVkNTJlZDdjOGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-02T23:51:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-02T23:51:49Z"}, "message": "Auto merge of #6518 - ThibsG:CopyException, r=ebroto\n\nEnsure `Copy` exception in trait definition for `wrong_self_conventio\u2026\n\nAdd a test case to ensure `Copy` exception is preserved also in trait definition, when passing `self` by value.\n\nFollow up of #6316\n\nchangelog: none", "tree": {"sha": "98b9744143bd667151f950d23541e005f9831778", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98b9744143bd667151f950d23541e005f9831778"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a02806e00d24f0fcb3e1f285ad9c25ed52ed7c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a02806e00d24f0fcb3e1f285ad9c25ed52ed7c8c", "html_url": "https://github.com/rust-lang/rust/commit/a02806e00d24f0fcb3e1f285ad9c25ed52ed7c8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a02806e00d24f0fcb3e1f285ad9c25ed52ed7c8c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "592f7eb7eb373bcb4f0ed4d3e91f59689c489c1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/592f7eb7eb373bcb4f0ed4d3e91f59689c489c1d", "html_url": "https://github.com/rust-lang/rust/commit/592f7eb7eb373bcb4f0ed4d3e91f59689c489c1d"}, {"sha": "af480a67be108a936073c44942b5f7c5d2a69621", "url": "https://api.github.com/repos/rust-lang/rust/commits/af480a67be108a936073c44942b5f7c5d2a69621", "html_url": "https://github.com/rust-lang/rust/commit/af480a67be108a936073c44942b5f7c5d2a69621"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "6cfc0fcb4cae45edcd4f970215fa73898050358d", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a02806e00d24f0fcb3e1f285ad9c25ed52ed7c8c/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02806e00d24f0fcb3e1f285ad9c25ed52ed7c8c/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=a02806e00d24f0fcb3e1f285ad9c25ed52ed7c8c", "patch": "@@ -94,7 +94,8 @@ mod issue6307 {\n     trait T: Sized {\n         fn as_i32(self) {}\n         fn as_u32(&self) {}\n-        fn into_i32(&self) {}\n+        fn into_i32(self) {}\n+        fn into_i32_ref(&self) {}\n         fn into_u32(self) {}\n         fn is_i32(self) {}\n         fn is_u32(&self) {}\n@@ -117,7 +118,32 @@ mod issue6307 {\n     trait U {\n         fn as_i32(self);\n         fn as_u32(&self);\n-        fn into_i32(&self);\n+        fn into_i32(self);\n+        fn into_i32_ref(&self);\n+        fn into_u32(self);\n+        fn is_i32(self);\n+        fn is_u32(&self);\n+        fn to_i32(self);\n+        fn to_u32(&self);\n+        fn from_i32(self);\n+        // check whether the lint can be allowed at the function level\n+        #[allow(clippy::wrong_self_convention)]\n+        fn from_cake(self);\n+\n+        // test for false positives\n+        fn as_(self);\n+        fn into_(&self);\n+        fn is_(self);\n+        fn to_(self);\n+        fn from_(self);\n+        fn to_mut(&mut self);\n+    }\n+\n+    trait C: Copy {\n+        fn as_i32(self);\n+        fn as_u32(&self);\n+        fn into_i32(self);\n+        fn into_i32_ref(&self);\n         fn into_u32(self);\n         fn is_i32(self);\n         fn is_u32(&self);"}, {"sha": "32bd9075bd5e14c0a399055c6deeaab65f218c45", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a02806e00d24f0fcb3e1f285ad9c25ed52ed7c8c/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a02806e00d24f0fcb3e1f285ad9c25ed52ed7c8c/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=a02806e00d24f0fcb3e1f285ad9c25ed52ed7c8c", "patch": "@@ -79,58 +79,70 @@ LL |         fn as_i32(self) {}\n    |                   ^^^^\n \n error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:97:21\n+  --> $DIR/wrong_self_convention.rs:98:25\n    |\n-LL |         fn into_i32(&self) {}\n-   |                     ^^^^^\n+LL |         fn into_i32_ref(&self) {}\n+   |                         ^^^^^\n \n error: methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:99:19\n+  --> $DIR/wrong_self_convention.rs:100:19\n    |\n LL |         fn is_i32(self) {}\n    |                   ^^^^\n \n error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:101:19\n+  --> $DIR/wrong_self_convention.rs:102:19\n    |\n LL |         fn to_i32(self) {}\n    |                   ^^^^\n \n error: methods called `from_*` usually take no self; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:103:21\n+  --> $DIR/wrong_self_convention.rs:104:21\n    |\n LL |         fn from_i32(self) {}\n    |                     ^^^^\n \n error: methods called `as_*` usually take self by reference or self by mutable reference; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:118:19\n+  --> $DIR/wrong_self_convention.rs:119:19\n    |\n LL |         fn as_i32(self);\n    |                   ^^^^\n \n error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:120:21\n+  --> $DIR/wrong_self_convention.rs:122:25\n    |\n-LL |         fn into_i32(&self);\n-   |                     ^^^^^\n+LL |         fn into_i32_ref(&self);\n+   |                         ^^^^^\n \n error: methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:122:19\n+  --> $DIR/wrong_self_convention.rs:124:19\n    |\n LL |         fn is_i32(self);\n    |                   ^^^^\n \n error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:124:19\n+  --> $DIR/wrong_self_convention.rs:126:19\n    |\n LL |         fn to_i32(self);\n    |                   ^^^^\n \n error: methods called `from_*` usually take no self; consider choosing a less ambiguous name\n-  --> $DIR/wrong_self_convention.rs:126:21\n+  --> $DIR/wrong_self_convention.rs:128:21\n+   |\n+LL |         fn from_i32(self);\n+   |                     ^^^^\n+\n+error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:146:25\n+   |\n+LL |         fn into_i32_ref(&self);\n+   |                         ^^^^^\n+\n+error: methods called `from_*` usually take no self; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:152:21\n    |\n LL |         fn from_i32(self);\n    |                     ^^^^\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 24 previous errors\n "}]}