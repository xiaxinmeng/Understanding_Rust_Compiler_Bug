{"sha": "5b84550d7c39821704a48b53c8cbe3916ab100b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViODQ1NTBkN2MzOTgyMTcwNGE0OGI1M2M4Y2JlMzkxNmFiMTAwYjc=", "commit": {"author": {"name": "Michael Bradshaw", "email": "mjbshaw@gmail.com", "date": "2018-10-22T14:03:53Z"}, "committer": {"name": "Michael Bradshaw", "email": "mjbshaw@gmail.com", "date": "2018-10-22T14:06:22Z"}, "message": "Keep an obligation for both sized and unsized types", "tree": {"sha": "ab44c44eb62776ef9171ad34b023ef7499aa9e03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab44c44eb62776ef9171ad34b023ef7499aa9e03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b84550d7c39821704a48b53c8cbe3916ab100b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b84550d7c39821704a48b53c8cbe3916ab100b7", "html_url": "https://github.com/rust-lang/rust/commit/5b84550d7c39821704a48b53c8cbe3916ab100b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b84550d7c39821704a48b53c8cbe3916ab100b7/comments", "author": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "412ad9bf3746bd0682db136c36a433f3205715f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/412ad9bf3746bd0682db136c36a433f3205715f1", "html_url": "https://github.com/rust-lang/rust/commit/412ad9bf3746bd0682db136c36a433f3205715f1"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "f21296a2a0772de8b37718d7c3a68e4f09719300", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5b84550d7c39821704a48b53c8cbe3916ab100b7/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b84550d7c39821704a48b53c8cbe3916ab100b7/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=5b84550d7c39821704a48b53c8cbe3916ab100b7", "patch": "@@ -340,33 +340,31 @@ fn check_item_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item: &hir::Item) {\n     })\n }\n \n-fn check_item_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             item_id: ast::NodeId,\n-                             ty_span: Span,\n-                             allow_foreign_ty: bool) {\n+fn check_item_type<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    item_id: ast::NodeId,\n+    ty_span: Span,\n+    allow_foreign_ty: bool,\n+) {\n     debug!(\"check_item_type: {:?}\", item_id);\n \n     for_id(tcx, item_id, ty_span).with_fcx(|fcx, _this| {\n         let ty = fcx.tcx.type_of(fcx.tcx.hir.local_def_id(item_id));\n         let item_ty = fcx.normalize_associated_types_in(ty_span, &ty);\n \n-        let mut allow_unsized = false;\n+        let mut forbid_unsized = true;\n         if allow_foreign_ty {\n             if let TyKind::Foreign(_) = tcx.struct_tail(item_ty).sty {\n-                allow_unsized = true;\n+                forbid_unsized = false;\n             }\n         }\n \n-        if !allow_unsized {\n-            fcx.register_wf_obligation(item_ty, ty_span, ObligationCauseCode::MiscObligation);\n+        fcx.register_wf_obligation(item_ty, ty_span, ObligationCauseCode::MiscObligation);\n+        if forbid_unsized {\n             fcx.register_bound(\n                 item_ty,\n                 fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem),\n-                traits::ObligationCause::new(\n-                    ty_span,\n-                    fcx.body_id,\n-                    traits::MiscObligation,\n-                ),\n+                traits::ObligationCause::new(ty_span, fcx.body_id, traits::MiscObligation),\n             );\n         }\n "}]}