{"sha": "10d69db0a8ea5f2825170dfec789b4d4eb4581f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZDY5ZGIwYThlYTVmMjgyNTE3MGRmZWM3ODliNGQ0ZWI0NTgxZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-23T00:57:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-23T00:57:39Z"}, "message": "Auto merge of #27947 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #27903, #27904, #27920, #27921, #27924, #27926, #27934, #27935\n- Failed merges:", "tree": {"sha": "1c4ee9aa8916011defd5abb44d135664df65124f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c4ee9aa8916011defd5abb44d135664df65124f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10d69db0a8ea5f2825170dfec789b4d4eb4581f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10d69db0a8ea5f2825170dfec789b4d4eb4581f9", "html_url": "https://github.com/rust-lang/rust/commit/10d69db0a8ea5f2825170dfec789b4d4eb4581f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10d69db0a8ea5f2825170dfec789b4d4eb4581f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50ebf76f2206651beb8f124044b91d178677b646", "url": "https://api.github.com/repos/rust-lang/rust/commits/50ebf76f2206651beb8f124044b91d178677b646", "html_url": "https://github.com/rust-lang/rust/commit/50ebf76f2206651beb8f124044b91d178677b646"}, {"sha": "17c1d0ce04f4626f33be421b10de9268f12e4548", "url": "https://api.github.com/repos/rust-lang/rust/commits/17c1d0ce04f4626f33be421b10de9268f12e4548", "html_url": "https://github.com/rust-lang/rust/commit/17c1d0ce04f4626f33be421b10de9268f12e4548"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "1d2897ce3bd1f37e260389cde03328d0d6bb5cb6", "filename": "src/doc/nomicon/coercions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d69db0a8ea5f2825170dfec789b4d4eb4581f9/src%2Fdoc%2Fnomicon%2Fcoercions.md", "raw_url": "https://github.com/rust-lang/rust/raw/10d69db0a8ea5f2825170dfec789b4d4eb4581f9/src%2Fdoc%2Fnomicon%2Fcoercions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fcoercions.md?ref=10d69db0a8ea5f2825170dfec789b4d4eb4581f9", "patch": "@@ -22,7 +22,7 @@ Coercion is allowed between the following types:\n for all pointer types (including smart pointers like Box and Rc). Unsize is\n only implemented automatically, and enables the following transformations:\n \n-* `[T, ..n]` => `[T]`\n+* `[T; n]` => `[T]`\n * `T` => `Trait` where `T: Trait`\n * `Foo<..., T, ...>` => `Foo<..., U, ...>` where:\n     * `T: Unsize<U>`"}, {"sha": "e9037b56ff9d7a0bae0ab769a1e825c4bcc5ef5b", "filename": "src/doc/nomicon/safe-unsafe-meaning.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d69db0a8ea5f2825170dfec789b4d4eb4581f9/src%2Fdoc%2Fnomicon%2Fsafe-unsafe-meaning.md", "raw_url": "https://github.com/rust-lang/rust/raw/10d69db0a8ea5f2825170dfec789b4d4eb4581f9/src%2Fdoc%2Fnomicon%2Fsafe-unsafe-meaning.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsafe-unsafe-meaning.md?ref=10d69db0a8ea5f2825170dfec789b4d4eb4581f9", "patch": "@@ -125,7 +125,7 @@ unsafe impl UnsafeOrd for MyType {\n But it's probably not the implementation you want.\n \n Rust has traditionally avoided making traits unsafe because it makes Unsafe\n-pervasive, which is not desirable. Send and Sync are unsafe is because thread\n+pervasive, which is not desirable. The reason Send and Sync are unsafe is because thread\n safety is a *fundamental property* that unsafe code cannot possibly hope to defend\n against in the same way it would defend against a bad Ord implementation. The\n only way to possibly defend against thread-unsafety would be to *not use"}, {"sha": "284fcf6aed0c20df1de9088fbf6dbb2a83014b0f", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10d69db0a8ea5f2825170dfec789b4d4eb4581f9/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/10d69db0a8ea5f2825170dfec789b4d4eb4581f9/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=10d69db0a8ea5f2825170dfec789b4d4eb4581f9", "patch": "@@ -2073,6 +2073,7 @@ The following configurations must be defined by the implementation:\n * `target_pointer_width = \"...\"`. Target pointer width in bits. This is set\n   to `\"32\"` for targets with 32-bit pointers, and likewise set to `\"64\"` for\n   64-bit pointers.\n+* `test`. Enabled when compiling the test harness (using the `--test` flag).\n * `unix`. See `target_family`.\n * `windows`. See `target_family`.\n "}, {"sha": "e00fe75013e29cf31fac8e2bb1f8d1abade5806d", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10d69db0a8ea5f2825170dfec789b4d4eb4581f9/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/10d69db0a8ea5f2825170dfec789b4d4eb4581f9/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=10d69db0a8ea5f2825170dfec789b4d4eb4581f9", "patch": "@@ -343,12 +343,14 @@ threads as a simple isolation mechanism:\n ```rust\n use std::thread;\n \n-let result = thread::spawn(move || {\n+let handle = thread::spawn(move || {\n     panic!(\"oops!\");\n-}).join();\n+});\n+\n+let result = handle.join();\n \n assert!(result.is_err());\n ```\n \n-Our `Thread` gives us a `Result` back, which allows us to check if the thread\n+`Thread.join()` gives us a `Result` back, which allows us to check if the thread\n has panicked or not."}, {"sha": "0a471beb43914fdd84967f80cefd6b4c58a793ec", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10d69db0a8ea5f2825170dfec789b4d4eb4581f9/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/10d69db0a8ea5f2825170dfec789b4d4eb4581f9/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=10d69db0a8ea5f2825170dfec789b4d4eb4581f9", "patch": "@@ -73,8 +73,8 @@ hello.rs:4 }\n ```\n \n This [unfortunate error](https://github.com/rust-lang/rust/issues/22547) is\n-correct: documentation comments apply to the thing after them, and there's no\n-thing after that last comment.\n+correct: documentation comments apply to the thing after them, and there's \n+nothing after that last comment.\n \n [rc-new]: https://doc.rust-lang.org/nightly/std/rc/struct.Rc.html#method.new\n \n@@ -196,10 +196,10 @@ This will highlight according to whatever language you're showing off.\n If you're just showing plain text, choose `text`.\n \n It's important to choose the correct annotation here, because `rustdoc` uses it\n-in an interesting way: It can be used to actually test your examples, so that\n-they don't get out of date. If you have some C code but `rustdoc` thinks it's\n-Rust because you left off the annotation, `rustdoc` will complain when trying to\n-generate the documentation.\n+in an interesting way: It can be used to actually test your examples in a\n+library crate, so that they don't get out of date. If you have some C code but\n+`rustdoc` thinks it's Rust because you left off the annotation, `rustdoc` will\n+complain when trying to generate the documentation.\n \n ## Documentation as tests\n \n@@ -377,8 +377,8 @@ $ rustdoc --test path/to/my/crate/root.rs\n $ cargo test\n ```\n \n-That's right, `cargo test` tests embedded documentation too. However,\n-`cargo test` will not test binary crates, only library ones. This is\n+That's right, `cargo test` tests embedded documentation too. **However,\n+`cargo test` will not test binary crates, only library ones.** This is\n due to the way `rustdoc` works: it links against the library to be tested,\n but with a binary, there\u2019s nothing to link to.\n "}, {"sha": "cbf33febf876f339c68c5b60705c74b050d17bca", "filename": "src/doc/trpl/testing.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10d69db0a8ea5f2825170dfec789b4d4eb4581f9/src%2Fdoc%2Ftrpl%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/10d69db0a8ea5f2825170dfec789b4d4eb4581f9/src%2Fdoc%2Ftrpl%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftesting.md?ref=10d69db0a8ea5f2825170dfec789b4d4eb4581f9", "patch": "@@ -355,8 +355,8 @@ Let's finally check out that third section: documentation tests.\n Nothing is better than documentation with examples. Nothing is worse than\n examples that don't actually work, because the code has changed since the\n documentation has been written. To this end, Rust supports automatically\n-running examples in your documentation. Here's a fleshed-out `src/lib.rs`\n-with examples:\n+running examples in your documentation (**note:** this only works in library\n+crates, not binary crates). Here's a fleshed-out `src/lib.rs` with examples:\n \n ```rust,ignore\n //! The `adder` crate provides functions that add numbers to other numbers."}, {"sha": "ece285a831355e3610ead728e5d6193d87667c44", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10d69db0a8ea5f2825170dfec789b4d4eb4581f9/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d69db0a8ea5f2825170dfec789b4d4eb4581f9/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=10d69db0a8ea5f2825170dfec789b4d4eb4581f9", "patch": "@@ -247,11 +247,11 @@ extern \"rust-intrinsic\" {\n     /// ```\n     /// use std::mem;\n     ///\n-    /// let v: &[u8] = unsafe { mem::transmute(\"L\") };\n-    /// assert!(v == [76]);\n+    /// let array: &[u8] = unsafe { mem::transmute(\"Rust\") };\n+    /// assert_eq!(array, [82, 117, 115, 116]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn transmute<T,U>(e: T) -> U;\n+    pub fn transmute<T, U>(e: T) -> U;\n \n     /// Gives the address for the return value of the enclosing function.\n     ///"}]}