{"sha": "89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZDI2MDBkMDFkZWMwZmE3M2UxMWVkYzljNWJiNDM1ZTRlYzEyODU=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-06-22T18:00:58Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-31T01:17:45Z"}, "message": "Add let-else to AST", "tree": {"sha": "5eb77645bb936b009cfc616489a2473e10f91fd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eb77645bb936b009cfc616489a2473e10f91fd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "html_url": "https://github.com/rust-lang/rust/commit/89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f388bb369ddb6fb64e547009e031598425f773c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f388bb369ddb6fb64e547009e031598425f773c", "html_url": "https://github.com/rust-lang/rust/commit/6f388bb369ddb6fb64e547009e031598425f773c"}], "stats": {"total": 118, "additions": 92, "deletions": 26}, "files": [{"sha": "0632d937c4c17e2d154fe856e0f4343e3b746608", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "patch": "@@ -1005,13 +1005,42 @@ pub struct Local {\n     pub id: NodeId,\n     pub pat: P<Pat>,\n     pub ty: Option<P<Ty>>,\n-    /// Initializer expression to set the value, if any.\n-    pub init: Option<P<Expr>>,\n+    pub kind: LocalKind,\n     pub span: Span,\n     pub attrs: AttrVec,\n     pub tokens: Option<LazyTokenStream>,\n }\n \n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub enum LocalKind {\n+    /// Local declaration.\n+    /// Example: `let x;`\n+    Decl,\n+    /// Local declaration with an initializer.\n+    /// Example: `let x = y;`\n+    Init(P<Expr>),\n+    /// Local declaration with an initializer and an `else` clause.\n+    /// Example: `let Some(x) = y else { return };`\n+    InitElse(P<Expr>, P<Block>),\n+}\n+\n+impl LocalKind {\n+    pub fn init(&self) -> Option<&Expr> {\n+        match self {\n+            Self::Decl => None,\n+            Self::Init(i) | Self::InitElse(i, _) => Some(i),\n+        }\n+    }\n+\n+    pub fn init_else_opt(&self) -> Option<(&Expr, Option<&Block>)> {\n+        match self {\n+            Self::Decl => None,\n+            Self::Init(init) => Some((init, None)),\n+            Self::InitElse(init, els) => Some((init, Some(els))),\n+        }\n+    }\n+}\n+\n /// An arm of a 'match'.\n ///\n /// E.g., `0..=10 => { println!(\"match!\") }` as in"}, {"sha": "368a23e34290dd99855fb74ac108182e7da221ed", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "patch": "@@ -571,11 +571,20 @@ pub fn noop_visit_parenthesized_parameter_data<T: MutVisitor>(\n }\n \n pub fn noop_visit_local<T: MutVisitor>(local: &mut P<Local>, vis: &mut T) {\n-    let Local { id, pat, ty, init, span, attrs, tokens } = local.deref_mut();\n+    let Local { id, pat, ty, kind, span, attrs, tokens } = local.deref_mut();\n     vis.visit_id(id);\n     vis.visit_pat(pat);\n     visit_opt(ty, |ty| vis.visit_ty(ty));\n-    visit_opt(init, |init| vis.visit_expr(init));\n+    match kind {\n+        LocalKind::Decl => {}\n+        LocalKind::Init(init) => {\n+            vis.visit_expr(init);\n+        }\n+        LocalKind::InitElse(init, els) => {\n+            vis.visit_expr(init);\n+            vis.visit_block(els);\n+        }\n+    }\n     vis.visit_span(span);\n     visit_thin_attrs(attrs, vis);\n     visit_lazy_tts(tokens, vis);"}, {"sha": "c30f711b3970793fdde4b52ec1c3adc40740aefa", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "patch": "@@ -242,7 +242,10 @@ pub fn walk_local<'a, V: Visitor<'a>>(visitor: &mut V, local: &'a Local) {\n     }\n     visitor.visit_pat(&local.pat);\n     walk_list!(visitor, visit_ty, &local.ty);\n-    walk_list!(visitor, visit_expr, &local.init);\n+    if let Some((init, els)) = local.kind.init_else_opt() {\n+        visitor.visit_expr(init);\n+        walk_list!(visitor, visit_block, els);\n+    }\n }\n \n pub fn walk_label<'a, V: Visitor<'a>>(visitor: &mut V, label: &'a Label) {"}, {"sha": "8efb1680d856f176a97178305b7e70e3132de8fb", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "patch": "@@ -1798,7 +1798,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .ty\n             .as_ref()\n             .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Binding)));\n-        let init = l.init.as_ref().map(|e| self.lower_expr(e));\n+        let init = l.kind.init().map(|init| self.lower_expr(init));\n         let hir_id = self.lower_node_id(l.id);\n         self.lower_attrs(hir_id, &l.attrs);\n         hir::Local {"}, {"sha": "3cf04be160c64a0a8003493187d618cbca4217a2", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "patch": "@@ -1518,13 +1518,19 @@ impl<'a> State<'a> {\n                 self.ibox(INDENT_UNIT);\n                 self.print_local_decl(loc);\n                 self.end();\n-                if let Some(ref init) = loc.init {\n+                if let Some((init, els)) = loc.kind.init_else_opt() {\n                     self.nbsp();\n                     self.word_space(\"=\");\n                     self.print_expr(init);\n+                    if let Some(els) = els {\n+                        self.cbox(INDENT_UNIT);\n+                        self.ibox(INDENT_UNIT);\n+                        self.s.word(\" else \");\n+                        self.print_block(els);\n+                    }\n                 }\n                 self.s.word(\";\");\n-                self.end();\n+                self.end(); // `let` ibox\n             }\n             ast::StmtKind::Item(ref item) => self.print_item(item),\n             ast::StmtKind::Expr(ref expr) => {"}, {"sha": "14506f296bf95d294964445da692c648ceceacdc", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "patch": "@@ -3,7 +3,7 @@ use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n use rustc_ast::ptr::P;\n-use rustc_ast::{self as ast, Expr, MetaItem};\n+use rustc_ast::{self as ast, Expr, LocalKind, MetaItem};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n@@ -135,8 +135,8 @@ fn stmt_let_underscore(cx: &mut ExtCtxt<'_>, sp: Span, expr: P<ast::Expr>) -> as\n     let local = P(ast::Local {\n         pat: cx.pat_wild(sp),\n         ty: None,\n-        init: Some(expr),\n         id: ast::DUMMY_NODE_ID,\n+        kind: LocalKind::Init(expr),\n         span: sp,\n         attrs: ast::AttrVec::new(),\n         tokens: None,"}, {"sha": "1d83ecbfd404bd2b3b6e1c47a08cefb453c661dc", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "patch": "@@ -2,7 +2,7 @@ use crate::base::ExtCtxt;\n \n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n-use rustc_ast::{self as ast, AttrVec, BlockCheckMode, Expr, PatKind, UnOp};\n+use rustc_ast::{self as ast, AttrVec, BlockCheckMode, Expr, LocalKind, PatKind, UnOp};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n \n@@ -153,8 +153,8 @@ impl<'a> ExtCtxt<'a> {\n         let local = P(ast::Local {\n             pat,\n             ty: None,\n-            init: Some(ex),\n             id: ast::DUMMY_NODE_ID,\n+            kind: LocalKind::Init(ex),\n             span: sp,\n             attrs: AttrVec::new(),\n             tokens: None,\n@@ -167,8 +167,8 @@ impl<'a> ExtCtxt<'a> {\n         let local = P(ast::Local {\n             pat: self.pat_wild(span),\n             ty: Some(ty),\n-            init: None,\n             id: ast::DUMMY_NODE_ID,\n+            kind: LocalKind::Decl,\n             span,\n             attrs: AttrVec::new(),\n             tokens: None,"}, {"sha": "a289b379fc813985ccb56b2395868aac124d7ace", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "patch": "@@ -618,7 +618,7 @@ trait UnusedDelimLint {\n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n         match s.kind {\n             StmtKind::Local(ref local) if Self::LINT_EXPR_IN_PATTERN_MATCHING_CTX => {\n-                if let Some(ref value) = local.init {\n+                if let Some(value) = local.kind.init() {\n                     self.check_unused_delims_expr(\n                         cx,\n                         &value,"}, {"sha": "d083c379f77209fc316fb776cc7d7e83f285a79d", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "patch": "@@ -11,8 +11,9 @@ use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, TokenKind};\n use rustc_ast::util::classify;\n-use rustc_ast::AstLike;\n-use rustc_ast::{AttrStyle, AttrVec, Attribute, MacCall, MacCallStmt, MacStmtStyle};\n+use rustc_ast::{\n+    AstLike, AttrStyle, AttrVec, Attribute, LocalKind, MacCall, MacCallStmt, MacStmtStyle,\n+};\n use rustc_ast::{Block, BlockCheckMode, Expr, ExprKind, Local, Stmt};\n use rustc_ast::{StmtKind, DUMMY_NODE_ID};\n use rustc_errors::{Applicability, PResult};\n@@ -292,8 +293,19 @@ impl<'a> Parser<'a> {\n                 return Err(err);\n             }\n         };\n+        let kind = match init {\n+            None => LocalKind::Decl,\n+            Some(init) => {\n+                if self.eat_keyword(kw::Else) {\n+                    let els = self.parse_block()?;\n+                    LocalKind::InitElse(init, els)\n+                } else {\n+                    LocalKind::Init(init)\n+                }\n+            }\n+        };\n         let hi = if self.token == token::Semi { self.token.span } else { self.prev_token.span };\n-        Ok(P(ast::Local { ty, pat, init, id: DUMMY_NODE_ID, span: lo.to(hi), attrs, tokens: None }))\n+        Ok(P(ast::Local { ty, pat, kind, id: DUMMY_NODE_ID, span: lo.to(hi), attrs, tokens: None }))\n     }\n \n     /// Parses the RHS of a local variable declaration (e.g., `= 14;`).\n@@ -495,13 +507,13 @@ impl<'a> Parser<'a> {\n             StmtKind::Expr(_) | StmtKind::MacCall(_) => {}\n             StmtKind::Local(ref mut local) if let Err(e) = self.expect_semi() => {\n                 // We might be at the `,` in `let x = foo<bar, baz>;`. Try to recover.\n-                match &mut local.init {\n-                    Some(ref mut expr) => {\n-                        self.check_mistyped_turbofish_with_multiple_type_params(e, expr)?;\n-                        // We found `foo<bar, baz>`, have we fully recovered?\n-                        self.expect_semi()?;\n-                    }\n-                    None => return Err(e),\n+                match &mut local.kind {\n+                    LocalKind::Init(expr) | LocalKind::InitElse(expr, _) => {\n+                            self.check_mistyped_turbofish_with_multiple_type_params(e, expr)?;\n+                            // We found `foo<bar, baz>`, have we fully recovered?\n+                            self.expect_semi()?;\n+                        }\n+                        LocalKind::Decl => return Err(e),\n                 }\n                 eat_semi = false;\n             }"}, {"sha": "5c7b4b028227ec3c9c0bc67654ffc5827e8c825f", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d2600d01dec0fa73e11edc9c5bb435e4ec1285/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=89d2600d01dec0fa73e11edc9c5bb435e4ec1285", "patch": "@@ -454,7 +454,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n             _ => Some((\n                 local.pat.span,\n                 local.ty.as_ref().map(|ty| ty.span),\n-                local.init.as_ref().map(|init| init.span),\n+                local.kind.init().map(|init| init.span),\n             )),\n         };\n         let original = replace(&mut self.diagnostic_metadata.current_let_binding, local_spans);\n@@ -1426,7 +1426,14 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         walk_list!(self, visit_ty, &local.ty);\n \n         // Resolve the initializer.\n-        walk_list!(self, visit_expr, &local.init);\n+        if let Some((init, els)) = local.kind.init_else_opt() {\n+            self.visit_expr(init);\n+\n+            // Resolve the `else` block\n+            if let Some(els) = els {\n+                self.visit_block(els);\n+            }\n+        }\n \n         // Resolve the pattern.\n         self.resolve_pattern_top(&local.pat, PatternSource::Let);"}]}