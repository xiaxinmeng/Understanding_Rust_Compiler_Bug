{"sha": "8ed82ebb2ad82b1cb95b7f68482a3a6d201a7462", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZDgyZWJiMmFkODJiMWNiOTViN2Y2ODQ4MmEzYTZkMjAxYTc0NjI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-15T08:55:53Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-30T13:16:41Z"}, "message": "Only test if key is local.", "tree": {"sha": "72536da73a04004ef1efd2c9bd0624b8e27d4ad9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72536da73a04004ef1efd2c9bd0624b8e27d4ad9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ed82ebb2ad82b1cb95b7f68482a3a6d201a7462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed82ebb2ad82b1cb95b7f68482a3a6d201a7462", "html_url": "https://github.com/rust-lang/rust/commit/8ed82ebb2ad82b1cb95b7f68482a3a6d201a7462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ed82ebb2ad82b1cb95b7f68482a3a6d201a7462/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd318a2f9b3027be74900114a5c6edfc5fb8ec86", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd318a2f9b3027be74900114a5c6edfc5fb8ec86", "html_url": "https://github.com/rust-lang/rust/commit/fd318a2f9b3027be74900114a5c6edfc5fb8ec86"}], "stats": {"total": 186, "additions": 110, "deletions": 76}, "files": [{"sha": "b3cc7de4662a5dd5aa613af4fe414b0d71cc2147", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 109, "deletions": 73, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/8ed82ebb2ad82b1cb95b7f68482a3a6d201a7462/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed82ebb2ad82b1cb95b7f68482a3a6d201a7462/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=8ed82ebb2ad82b1cb95b7f68482a3a6d201a7462", "patch": "@@ -14,16 +14,17 @@ use rustc_span::{Span, DUMMY_SP};\n pub trait Key {\n     /// Given an instance of this key, what crate is it referring to?\n     /// This is used to find the provider.\n-    fn query_crate(&self) -> CrateNum;\n+    fn query_crate_is_local(&self) -> bool;\n \n     /// In the event that a cycle occurs, if no explicit span has been\n     /// given for a query with key `self`, what span should we use?\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span;\n }\n \n impl Key for () {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n@@ -32,8 +33,9 @@ impl Key for () {\n }\n \n impl<'tcx> Key for ty::InstanceDef<'tcx> {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n@@ -42,8 +44,9 @@ impl<'tcx> Key for ty::InstanceDef<'tcx> {\n }\n \n impl<'tcx> Key for ty::Instance<'tcx> {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n@@ -52,8 +55,9 @@ impl<'tcx> Key for ty::Instance<'tcx> {\n }\n \n impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n-    fn query_crate(&self) -> CrateNum {\n-        self.instance.query_crate()\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n@@ -62,8 +66,9 @@ impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n }\n \n impl<'tcx> Key for mir::interpret::LitToConstInput<'tcx> {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n@@ -72,125 +77,139 @@ impl<'tcx> Key for mir::interpret::LitToConstInput<'tcx> {\n }\n \n impl Key for CrateNum {\n-    fn query_crate(&self) -> CrateNum {\n-        *self\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        *self == LOCAL_CRATE\n     }\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl Key for LocalDefId {\n-    fn query_crate(&self) -> CrateNum {\n-        self.to_def_id().query_crate()\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.to_def_id().default_span(tcx)\n     }\n }\n \n impl Key for DefId {\n-    fn query_crate(&self) -> CrateNum {\n-        self.krate\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        self.krate == LOCAL_CRATE\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(*self)\n     }\n }\n \n impl Key for ty::WithOptConstParam<LocalDefId> {\n-    fn query_crate(&self) -> CrateNum {\n-        self.did.query_crate()\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.did.default_span(tcx)\n     }\n }\n \n impl Key for (DefId, DefId) {\n-    fn query_crate(&self) -> CrateNum {\n-        self.0.krate\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        self.0.krate == LOCAL_CRATE\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.1.default_span(tcx)\n     }\n }\n \n impl Key for (ty::Instance<'tcx>, LocalDefId) {\n-    fn query_crate(&self) -> CrateNum {\n-        self.0.query_crate()\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n     }\n }\n \n impl Key for (DefId, LocalDefId) {\n-    fn query_crate(&self) -> CrateNum {\n-        self.0.krate\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        self.0.krate == LOCAL_CRATE\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.1.default_span(tcx)\n     }\n }\n \n impl Key for (LocalDefId, DefId) {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n     }\n }\n \n impl Key for (DefId, Option<Ident>) {\n-    fn query_crate(&self) -> CrateNum {\n-        self.0.krate\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        self.0.krate == LOCAL_CRATE\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.0)\n     }\n }\n \n impl Key for (DefId, LocalDefId, Ident) {\n-    fn query_crate(&self) -> CrateNum {\n-        self.0.krate\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        self.0.krate == LOCAL_CRATE\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.1.default_span(tcx)\n     }\n }\n \n impl Key for (CrateNum, DefId) {\n-    fn query_crate(&self) -> CrateNum {\n-        self.0\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        self.0 == LOCAL_CRATE\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.1.default_span(tcx)\n     }\n }\n \n impl Key for (DefId, SimplifiedType) {\n-    fn query_crate(&self) -> CrateNum {\n-        self.0.krate\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        self.0.krate == LOCAL_CRATE\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n     }\n }\n \n impl<'tcx> Key for SubstsRef<'tcx> {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n-    fn query_crate(&self) -> CrateNum {\n-        self.0.krate\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        self.0.krate == LOCAL_CRATE\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n@@ -203,125 +222,139 @@ impl<'tcx> Key\n         (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n     )\n {\n-    fn query_crate(&self) -> CrateNum {\n-        (self.0).0.did.krate\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        (self.0).0.did.krate == LOCAL_CRATE\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         (self.0).0.did.default_span(tcx)\n     }\n }\n \n impl<'tcx> Key for (LocalDefId, DefId, SubstsRef<'tcx>) {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n     }\n }\n \n impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n-    fn query_crate(&self) -> CrateNum {\n-        self.1.def_id().krate\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        self.1.def_id().krate == LOCAL_CRATE\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.1.def_id())\n     }\n }\n \n impl<'tcx> Key for (&'tcx ty::Const<'tcx>, mir::Field) {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for mir::interpret::ConstAlloc<'tcx> {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for ty::PolyTraitRef<'tcx> {\n-    fn query_crate(&self) -> CrateNum {\n-        self.def_id().krate\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        self.def_id().krate == LOCAL_CRATE\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.def_id())\n     }\n }\n \n impl<'tcx> Key for GenericArg<'tcx> {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for mir::ConstantKind<'tcx> {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for &'tcx ty::Const<'tcx> {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for Ty<'tcx> {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for &'tcx ty::List<ty::Predicate<'tcx>> {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for ty::ParamEnv<'tcx> {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n-    fn query_crate(&self) -> CrateNum {\n-        self.value.query_crate()\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        self.value.query_crate_is_local()\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.value.default_span(tcx)\n     }\n }\n \n impl Key for Symbol {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -331,8 +364,9 @@ impl Key for Symbol {\n /// Canonical query goals correspond to abstract trait operations that\n /// are not tied to any crate in particular.\n impl<'tcx, T> Key for Canonical<'tcx, T> {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n@@ -341,8 +375,9 @@ impl<'tcx, T> Key for Canonical<'tcx, T> {\n }\n \n impl Key for (Symbol, u32, u32) {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n@@ -351,8 +386,9 @@ impl Key for (Symbol, u32, u32) {\n }\n \n impl<'tcx> Key for (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>) {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n     }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {"}, {"sha": "176f4b3eff81b7315032a0ee3d4510924f771b42", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ed82ebb2ad82b1cb95b7f68482a3a6d201a7462/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed82ebb2ad82b1cb95b7f68482a3a6d201a7462/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=8ed82ebb2ad82b1cb95b7f68482a3a6d201a7462", "patch": "@@ -19,7 +19,6 @@ extern crate tracing;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::{DiagnosticBuilder, Handler};\n-use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::dep_graph;\n use rustc_middle::ich::StableHashingContext;\n use rustc_middle::ty::query::{query_keys, query_storage, query_stored, query_values};"}, {"sha": "eaf3259d2eff90edd1046102cc090710674ea828", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ed82ebb2ad82b1cb95b7f68482a3a6d201a7462/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed82ebb2ad82b1cb95b7f68482a3a6d201a7462/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=8ed82ebb2ad82b1cb95b7f68482a3a6d201a7462", "patch": "@@ -389,8 +389,7 @@ macro_rules! define_queries {\n             fn compute_fn(tcx: QueryCtxt<'tcx>, key: &Self::Key) ->\n                 fn(TyCtxt<'tcx>, Self::Key) -> Self::Value\n             {\n-                let is_local = key.query_crate() == LOCAL_CRATE;\n-                if is_local {\n+                if key.query_crate_is_local() {\n                     tcx.queries.local_providers.$name\n                 } else {\n                     tcx.queries.extern_providers.$name"}]}