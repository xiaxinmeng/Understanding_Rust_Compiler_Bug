{"sha": "9684c38450db1c1771d1fe71ce37862ad40f1578", "node_id": "C_kwDOAAsO6NoAKDk2ODRjMzg0NTBkYjFjMTc3MWQxZmU3MWNlMzc4NjJhZDQwZjE1Nzg", "commit": {"author": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2023-03-05T23:37:55Z"}, "committer": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2023-03-06T01:11:58Z"}, "message": "Add support for the x86_64h-apple-darwin target", "tree": {"sha": "c6e4e4b63d1ebc065b9b5f8e2da9c8bd447339d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6e4e4b63d1ebc065b9b5f8e2da9c8bd447339d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9684c38450db1c1771d1fe71ce37862ad40f1578", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgMrDyZKNSLq6TEmWvPtNWv4vJNv\nay7sfrM7c6iOWHdh8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQCXhJYMsBB+8k8chG+oi3Osy/GGsbnTzYOX2ubBjG6eBJIbmtzWkSTK1nghgAAHvSh\nZ/FwPmwIgd9S0MCKzopwg=\n-----END SSH SIGNATURE-----", "payload": "tree c6e4e4b63d1ebc065b9b5f8e2da9c8bd447339d1\nparent 73c8d2df7b36387553442a815d2b72f7ea5878aa\nauthor Thom Chiovoloni <thom@shift.click> 1678059475 -0800\ncommitter Thom Chiovoloni <thom@shift.click> 1678065118 -0800\n\nAdd support for the x86_64h-apple-darwin target\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9684c38450db1c1771d1fe71ce37862ad40f1578", "html_url": "https://github.com/rust-lang/rust/commit/9684c38450db1c1771d1fe71ce37862ad40f1578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9684c38450db1c1771d1fe71ce37862ad40f1578/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73c8d2df7b36387553442a815d2b72f7ea5878aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/73c8d2df7b36387553442a815d2b72f7ea5878aa", "html_url": "https://github.com/rust-lang/rust/commit/73c8d2df7b36387553442a815d2b72f7ea5878aa"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "4c7f64b20785b10a3717c141a4c54662ee7ab673", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9684c38450db1c1771d1fe71ce37862ad40f1578/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9684c38450db1c1771d1fe71ce37862ad40f1578/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=9684c38450db1c1771d1fe71ce37862ad40f1578", "patch": "@@ -19,6 +19,7 @@ pub enum Arch {\n     I386,\n     I686,\n     X86_64,\n+    X86_64h,\n     X86_64_sim,\n     X86_64_macabi,\n     Arm64_macabi,\n@@ -36,6 +37,7 @@ impl Arch {\n             I386 => \"i386\",\n             I686 => \"i686\",\n             X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n+            X86_64h => \"x86_64h\",\n         }\n     }\n \n@@ -44,13 +46,13 @@ impl Arch {\n             Armv7 | Armv7k | Armv7s => \"arm\",\n             Arm64 | Arm64_32 | Arm64_macabi | Arm64_sim => \"aarch64\",\n             I386 | I686 => \"x86\",\n-            X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n+            X86_64 | X86_64_sim | X86_64_macabi | X86_64h => \"x86_64\",\n         })\n     }\n \n     fn target_abi(self) -> &'static str {\n         match self {\n-            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 => \"\",\n+            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 | X86_64h => \"\",\n             X86_64_macabi | Arm64_macabi => \"macabi\",\n             // x86_64-apple-ios is a simulator target, even though it isn't\n             // declared that way in the target like the other ones...\n@@ -67,6 +69,10 @@ impl Arch {\n             Arm64_32 => \"apple-s4\",\n             I386 | I686 => \"yonah\",\n             X86_64 | X86_64_sim => \"core2\",\n+            // Note: `core-avx2` is slightly more advanced than `x86_64h`, see\n+            // comments (and disabled features) in `x86_64h_apple_darwin` for\n+            // details.\n+            X86_64h => \"core-avx2\",\n             X86_64_macabi => \"core2\",\n             Arm64_macabi => \"apple-a12\",\n             Arm64_sim => \"apple-a12\",\n@@ -182,8 +188,13 @@ fn deployment_target(var_name: &str) -> Option<(u32, u32)> {\n }\n \n fn macos_default_deployment_target(arch: Arch) -> (u32, u32) {\n-    // Note: Arm64_sim is not included since macOS has no simulator.\n-    if matches!(arch, Arm64 | Arm64_macabi) { (11, 0) } else { (10, 7) }\n+    match arch {\n+        // Note: Arm64_sim is not included since macOS has no simulator.\n+        Arm64 | Arm64_macabi => (11, 0),\n+        // x86_64h-apple-darwin only supports macOS 10.8 and later\n+        X86_64h => (10, 8),\n+        _ => (10, 7),\n+    }\n }\n \n fn macos_deployment_target(arch: Arch) -> (u32, u32) {\n@@ -227,7 +238,7 @@ fn link_env_remove(arch: Arch, os: &'static str) -> StaticCow<[StaticCow<str>]>\n         // of the linking environment that's wrong and reversed.\n         match arch {\n             Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 | X86_64_sim\n-            | Arm64_sim => {\n+            | X86_64h | Arm64_sim => {\n                 cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n             }\n             X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],"}, {"sha": "9747789c25435f8b46ac2be407f12e9c0cf8933d", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9684c38450db1c1771d1fe71ce37862ad40f1578/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9684c38450db1c1771d1fe71ce37862ad40f1578/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=9684c38450db1c1771d1fe71ce37862ad40f1578", "patch": "@@ -1110,6 +1110,7 @@ supported_targets! {\n \n     (\"aarch64-apple-darwin\", aarch64_apple_darwin),\n     (\"x86_64-apple-darwin\", x86_64_apple_darwin),\n+    (\"x86_64h-apple-darwin\", x86_64h_apple_darwin),\n     (\"i686-apple-darwin\", i686_apple_darwin),\n \n     // FIXME(#106649): Remove aarch64-fuchsia in favor of aarch64-unknown-fuchsia"}, {"sha": "54f7490b2c052b8d6d9dd6221e217c591267ba8a", "filename": "compiler/rustc_target/src/spec/x86_64h_apple_darwin.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9684c38450db1c1771d1fe71ce37862ad40f1578/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64h_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9684c38450db1c1771d1fe71ce37862ad40f1578/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64h_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64h_apple_darwin.rs?ref=9684c38450db1c1771d1fe71ce37862ad40f1578", "patch": "@@ -0,0 +1,44 @@\n+use super::apple_base::{macos_llvm_target, opts, Arch};\n+use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, SanitizerSet};\n+use crate::spec::{StackProbeType, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let arch = Arch::X86_64h;\n+    let mut base = opts(\"macos\", arch);\n+    base.max_atomic_width = Some(128);\n+    base.frame_pointer = FramePointer::Always;\n+    base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m64\"]);\n+    base.stack_probes = StackProbeType::X86;\n+    base.supported_sanitizers =\n+        SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::LEAK | SanitizerSet::THREAD;\n+\n+    // x86_64h is core2-avx without a few of the features which would otherwise\n+    // be guaranteed, so we need to disable those. This imitates clang's logic:\n+    // - https://github.com/llvm/llvm-project/blob/bd1f7c417/clang/lib/Driver/ToolChains/Arch/X86.cpp#L77-L78\n+    // - https://github.com/llvm/llvm-project/blob/bd1f7c417/clang/lib/Driver/ToolChains/Arch/X86.cpp#L133-L141\n+    //\n+    // FIXME: Sadly, turning these off here disables them in such a way that they\n+    // aren't re-enabled by `-Ctarget-cpu=native` (on a machine that has them).\n+    // It would be nice if this were not the case, but fixing it seems tricky\n+    // (and given that the main use-case for this target is for use in universal\n+    // binaries, probably not that important).\n+    base.features = \"-rdrnd,-aes,-pclmul,-rtm,-fsgsbase\".into();\n+    // Double-check that the `cpu` is what we expect (if it's not the list above\n+    // may need updating).\n+    assert_eq!(\n+        base.cpu, \"core-avx2\",\n+        \"you need to adjust the feature list in x86_64h-apple-darwin if you change this\",\n+    );\n+\n+    Target {\n+        // Clang automatically chooses a more specific target based on\n+        // MACOSX_DEPLOYMENT_TARGET. To enable cross-language LTO to work\n+        // correctly, we do too.\n+        llvm_target: macos_llvm_target(arch).into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .into(),\n+        arch: arch.target_arch(),\n+        options: TargetOptions { mcount: \"\\u{1}mcount\".into(), ..base },\n+    }\n+}"}]}