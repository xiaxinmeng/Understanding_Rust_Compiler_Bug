{"sha": "2935d294ff862fdf96578d0cbbdc289e8e7ba81c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MzVkMjk0ZmY4NjJmZGY5NjU3OGQwY2JiZGMyODllOGU3YmE4MWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-17T11:30:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-17T11:30:56Z"}, "message": "Auto merge of #69890 - lenary:lenary/riscv-frame-pointers, r=hanna-kruppe,Mark-Simulacrum\n\n[RISC-V] Do not force frame pointers\n\nWe have been seeing some very inefficient code that went away when using\n`-Cforce-frame-pointers=no`. For instance `core::ptr::drop_in_place` at\n`-Oz` was compiled into a function which consisted entirely of saving\nregisters to the stack, then using the frame pointer to restore the same\nregisters (without any instructions between the prolog and epilog).\n\nThe RISC-V LLVM backend supports frame pointer elimination, so it makes\nsense to allow this to happen when using Rust. It's not clear to me that\nframe pointers have ever been required in the general case.\n\nIn rust-lang/rust#61675 it was pointed out that this made reassembling\nstack traces easier, which is true, but there is a code generation\noption for forcing frame pointers, and I feel the default should not be\nto require frame pointers, given it demonstrably makes code size worse\n(around 10% in some embedded applications).\n\nThe kinds of targets mentioned in rust-lang/rust#61675 are popular, but\nshould not dictate that code generation should be worse for all RISC-V\ntargets, especially as there is a way to use CFI information to\nreconstruct the stack when the frame pointer is eliminated. It is also\na misconception that `fp` is always used for the frame pointer. `fp` is\nan ABI name for `x8` (aka `s0`), and if no frame pointer is required,\n`x8` may be used for other callee-saved values.\n\n---\n\nI am partly posting this to get feedback from @fintelia who introduced the change to require frame pointers, and @hanna-kruppe who had issues with the original PR. I would understand if we wanted to remove this setting on only a subset of RISC-V targets, but my preference would be to remove this setting everywhere.\n\nThere are more details on the code size savings seen in Tock here: https://github.com/tock/tock/pull/1660", "tree": {"sha": "207812bb763529b6eb1502f91cde747a170034ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/207812bb763529b6eb1502f91cde747a170034ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2935d294ff862fdf96578d0cbbdc289e8e7ba81c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2935d294ff862fdf96578d0cbbdc289e8e7ba81c", "html_url": "https://github.com/rust-lang/rust/commit/2935d294ff862fdf96578d0cbbdc289e8e7ba81c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2935d294ff862fdf96578d0cbbdc289e8e7ba81c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8ff4bcbd02475cf487cd101bf32954dc63366d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ff4bcbd02475cf487cd101bf32954dc63366d4", "html_url": "https://github.com/rust-lang/rust/commit/e8ff4bcbd02475cf487cd101bf32954dc63366d4"}, {"sha": "3da3d15f9f150dafd7d635859795c4c714e7b7ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/3da3d15f9f150dafd7d635859795c4c714e7b7ad", "html_url": "https://github.com/rust-lang/rust/commit/3da3d15f9f150dafd7d635859795c4c714e7b7ad"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "c9c75aed7b0fba6246dd6b5595d34771d44d9af2", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2935d294ff862fdf96578d0cbbdc289e8e7ba81c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2935d294ff862fdf96578d0cbbdc289e8e7ba81c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=2935d294ff862fdf96578d0cbbdc289e8e7ba81c", "patch": "@@ -244,6 +244,16 @@ pub fn std_cargo(builder: &Builder<'_>, target: Interned<String>, stage: u32, ca\n     if stage >= 1 {\n         cargo.rustflag(\"-Cembed-bitcode=yes\");\n     }\n+\n+    // By default, rustc does not include unwind tables unless they are required\n+    // for a particular target. They are not required by RISC-V targets, but\n+    // compiling the standard library with them means that users can get\n+    // backtraces without having to recompile the standard library themselves.\n+    //\n+    // This choice was discussed in https://github.com/rust-lang/rust/pull/69890\n+    if target.contains(\"riscv\") {\n+        cargo.rustflag(\"-Cforce-unwind-tables=yes\");\n+    }\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "d7b3e7e15307a9345c1095847378ec17efa3ccda", "filename": "src/librustc_target/spec/riscv32i_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2935d294ff862fdf96578d0cbbdc289e8e7ba81c/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2935d294ff862fdf96578d0cbbdc289e8e7ba81c/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs?ref=2935d294ff862fdf96578d0cbbdc289e8e7ba81c", "patch": "@@ -25,7 +25,6 @@ pub fn target() -> TargetResult {\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n-            eliminate_frame_pointer: false,\n             ..Default::default()\n         },\n     })"}, {"sha": "b93b6fcf8002a0a950945fcb10ee480fd8de6d02", "filename": "src/librustc_target/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2935d294ff862fdf96578d0cbbdc289e8e7ba81c/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2935d294ff862fdf96578d0cbbdc289e8e7ba81c/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=2935d294ff862fdf96578d0cbbdc289e8e7ba81c", "patch": "@@ -25,7 +25,6 @@ pub fn target() -> TargetResult {\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n-            eliminate_frame_pointer: false,\n             ..Default::default()\n         },\n     })"}, {"sha": "a16e7e31c6619efaa3a5943b9971766e42267866", "filename": "src/librustc_target/spec/riscv32imc_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2935d294ff862fdf96578d0cbbdc289e8e7ba81c/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2935d294ff862fdf96578d0cbbdc289e8e7ba81c/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs?ref=2935d294ff862fdf96578d0cbbdc289e8e7ba81c", "patch": "@@ -25,7 +25,6 @@ pub fn target() -> TargetResult {\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n-            eliminate_frame_pointer: false,\n             ..Default::default()\n         },\n     })"}, {"sha": "e5147a12ed3204c9d2d203045c7be5daed11005e", "filename": "src/librustc_target/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2935d294ff862fdf96578d0cbbdc289e8e7ba81c/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2935d294ff862fdf96578d0cbbdc289e8e7ba81c/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=2935d294ff862fdf96578d0cbbdc289e8e7ba81c", "patch": "@@ -26,7 +26,6 @@ pub fn target() -> TargetResult {\n             code_model: Some(CodeModel::Medium),\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n-            eliminate_frame_pointer: false,\n             ..Default::default()\n         },\n     })"}, {"sha": "dc056b55b38680540dae88c0c3cbcad44753b26f", "filename": "src/librustc_target/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2935d294ff862fdf96578d0cbbdc289e8e7ba81c/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2935d294ff862fdf96578d0cbbdc289e8e7ba81c/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=2935d294ff862fdf96578d0cbbdc289e8e7ba81c", "patch": "@@ -26,7 +26,6 @@ pub fn target() -> TargetResult {\n             code_model: Some(CodeModel::Medium),\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n-            eliminate_frame_pointer: false,\n             ..Default::default()\n         },\n     })"}]}