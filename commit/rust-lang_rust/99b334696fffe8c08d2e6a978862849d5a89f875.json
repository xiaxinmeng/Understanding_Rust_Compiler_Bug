{"sha": "99b334696fffe8c08d2e6a978862849d5a89f875", "node_id": "C_kwDOAAsO6NoAKDk5YjMzNDY5NmZmZmU4YzA4ZDJlNmE5Nzg4NjI4NDlkNWE4OWY4NzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-16T09:02:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-16T09:02:50Z"}, "message": "Auto merge of #112597 - danakj:map-linker-paths, r=michaelwoerister\n\nUse the relative sysroot path in the linker command line to specify sysroot rlibs\n\nThis addresses https://github.com/rust-lang/rust/issues/112586", "tree": {"sha": "0fffa1f92004050bd77a5beab4072a67260c146a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fffa1f92004050bd77a5beab4072a67260c146a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99b334696fffe8c08d2e6a978862849d5a89f875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99b334696fffe8c08d2e6a978862849d5a89f875", "html_url": "https://github.com/rust-lang/rust/commit/99b334696fffe8c08d2e6a978862849d5a89f875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99b334696fffe8c08d2e6a978862849d5a89f875/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0966f3202d1e811cd3aa35ac876b61a211b4819a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0966f3202d1e811cd3aa35ac876b61a211b4819a", "html_url": "https://github.com/rust-lang/rust/commit/0966f3202d1e811cd3aa35ac876b61a211b4819a"}, {"sha": "c340325ebf348914c67fc62e868db8833845eeb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c340325ebf348914c67fc62e868db8833845eeb9", "html_url": "https://github.com/rust-lang/rust/commit/c340325ebf348914c67fc62e868db8833845eeb9"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "557b120b2c8f9d60e3a6a93c5611bcaf87ce67f9", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/99b334696fffe8c08d2e6a978862849d5a89f875/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b334696fffe8c08d2e6a978862849d5a89f875/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=99b334696fffe8c08d2e6a978862849d5a89f875", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::{ErrorGuaranteed, Handler};\n-use rustc_fs_util::fix_windows_verbatim_for_gcc;\n+use rustc_fs_util::{fix_windows_verbatim_for_gcc, try_canonicalize};\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_metadata::find_native_static_library;\n use rustc_metadata::fs::{copy_to_stdout, emit_wrapper_file, METADATA_FILENAME};\n@@ -2682,6 +2682,30 @@ fn add_upstream_native_libraries(\n     }\n }\n \n+// Rehome lib paths (which exclude the library file name) that point into the sysroot lib directory\n+// to be relative to the sysroot directory, which may be a relative path specified by the user.\n+//\n+// If the sysroot is a relative path, and the sysroot libs are specified as an absolute path, the\n+// linker command line can be non-deterministic due to the paths including the current working\n+// directory. The linker command line needs to be deterministic since it appears inside the PDB\n+// file generated by the MSVC linker. See https://github.com/rust-lang/rust/issues/112586.\n+//\n+// The returned path will always have `fix_windows_verbatim_for_gcc()` applied to it.\n+fn rehome_sysroot_lib_dir<'a>(sess: &'a Session, lib_dir: &Path) -> PathBuf {\n+    let sysroot_lib_path = sess.target_filesearch(PathKind::All).get_lib_path();\n+    let canonical_sysroot_lib_path =\n+        { try_canonicalize(&sysroot_lib_path).unwrap_or_else(|_| sysroot_lib_path.clone()) };\n+\n+    let canonical_lib_dir = try_canonicalize(lib_dir).unwrap_or_else(|_| lib_dir.to_path_buf());\n+    if canonical_lib_dir == canonical_sysroot_lib_path {\n+        // This path, returned by `target_filesearch().get_lib_path()`, has\n+        // already had `fix_windows_verbatim_for_gcc()` applied if needed.\n+        sysroot_lib_path\n+    } else {\n+        fix_windows_verbatim_for_gcc(&lib_dir)\n+    }\n+}\n+\n // Adds the static \"rlib\" versions of all crates to the command line.\n // There's a bit of magic which happens here specifically related to LTO,\n // namely that we remove upstream object files.\n@@ -2713,7 +2737,13 @@ fn add_static_crate<'a>(\n     let cratepath = &src.rlib.as_ref().unwrap().0;\n \n     let mut link_upstream = |path: &Path| {\n-        cmd.link_rlib(&fix_windows_verbatim_for_gcc(path));\n+        let rlib_path = if let Some(dir) = path.parent() {\n+            let file_name = path.file_name().expect(\"rlib path has no file name path component\");\n+            rehome_sysroot_lib_dir(sess, &dir).join(file_name)\n+        } else {\n+            fix_windows_verbatim_for_gcc(path)\n+        };\n+        cmd.link_rlib(&rlib_path);\n     };\n \n     if !are_upstream_rust_objects_already_included(sess)\n@@ -2782,7 +2812,7 @@ fn add_dynamic_crate(cmd: &mut dyn Linker, sess: &Session, cratepath: &Path) {\n     // what its name is\n     let parent = cratepath.parent();\n     if let Some(dir) = parent {\n-        cmd.include_path(&fix_windows_verbatim_for_gcc(dir));\n+        cmd.include_path(&rehome_sysroot_lib_dir(sess, dir));\n     }\n     let stem = cratepath.file_stem().unwrap().to_str().unwrap();\n     // Convert library file-stem into a cc -l argument."}]}