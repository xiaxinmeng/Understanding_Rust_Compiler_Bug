{"sha": "41f6b958d502b3e3d4de1b787a3981c9d752dd78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZjZiOTU4ZDUwMmIzZTNkNGRlMWI3ODdhMzk4MWM5ZDc1MmRkNzg=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-05-12T05:56:29Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-05-12T05:56:29Z"}, "message": "Remove ty::UnnormalizedProjection", "tree": {"sha": "fb48d3693a73d63ee1a88e0acacd015b8460735d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb48d3693a73d63ee1a88e0acacd015b8460735d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41f6b958d502b3e3d4de1b787a3981c9d752dd78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41f6b958d502b3e3d4de1b787a3981c9d752dd78", "html_url": "https://github.com/rust-lang/rust/commit/41f6b958d502b3e3d4de1b787a3981c9d752dd78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41f6b958d502b3e3d4de1b787a3981c9d752dd78/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99cb9ccb9ca2067ad6e60508e3d52da77396b2f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/99cb9ccb9ca2067ad6e60508e3d52da77396b2f1", "html_url": "https://github.com/rust-lang/rust/commit/99cb9ccb9ca2067ad6e60508e3d52da77396b2f1"}], "stats": {"total": 124, "additions": 24, "deletions": 100}, "files": [{"sha": "1d8730db546029ef23b339c6e8791bf25cc3be36", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -198,7 +198,6 @@ pub fn push_debuginfo_type_name<'tcx>(\n         ty::Error\n         | ty::Infer(_)\n         | ty::Placeholder(..)\n-        | ty::UnnormalizedProjection(..)\n         | ty::Projection(..)\n         | ty::Bound(..)\n         | ty::Opaque(..)"}, {"sha": "5551b56ab797b02e23df7566836d2f156b5daa08", "filename": "src/librustc_infer/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -415,7 +415,6 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             | ty::Never\n             | ty::Tuple(..)\n             | ty::Projection(..)\n-            | ty::UnnormalizedProjection(..)\n             | ty::Foreign(..)\n             | ty::Param(..)\n             | ty::Opaque(..) => {"}, {"sha": "0141ba8273775aa1b20b8ecdb155d400ca24dcad", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -554,7 +554,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let output = bound_output.skip_binder();\n                     err.span_label(e.span, &format!(\"this method call resolves to `{:?}`\", output));\n                     let kind = &output.kind;\n-                    if let ty::Projection(proj) | ty::UnnormalizedProjection(proj) = kind {\n+                    if let ty::Projection(proj) = kind {\n                         if let Some(span) = self.tcx.hir().span_if_local(proj.item_def_id) {\n                             err.span_label(span, &format!(\"`{:?}` defined here\", output));\n                         }"}, {"sha": "c9ed687eaf2567ef8fa34077de3875dffc388479", "filename": "src/librustc_infer/infer/freshen.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -204,7 +204,6 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             | ty::Never\n             | ty::Tuple(..)\n             | ty::Projection(..)\n-            | ty::UnnormalizedProjection(..)\n             | ty::Foreign(..)\n             | ty::Param(..)\n             | ty::Closure(..)"}, {"sha": "703c2a7a443a9721a1dfca6a0fa1b35bd8b54f5e", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -888,7 +888,6 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n             | ty::Placeholder(..)\n-            | ty::UnnormalizedProjection(..)\n             | ty::Projection(..)\n             | ty::Opaque(..)\n             | ty::FnDef(..) => bug!(\"unexpected type in foreign function: {:?}\", ty),"}, {"sha": "e030125b5b15c3adbb27d46f4bf6a80d1e717046", "filename": "src/librustc_middle/traits/query.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fquery.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -255,8 +255,6 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         | ty::Infer(_)\n         | ty::Bound(..)\n         | ty::Generator(..) => false,\n-\n-        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n     }\n }\n "}, {"sha": "7feb080d4b8d421d844090ae8eb8e8f754e727b0", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -1878,7 +1878,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             Bound,\n             Param,\n             Infer,\n-            UnnormalizedProjection,\n             Projection,\n             Opaque,\n             Foreign"}, {"sha": "cf63a659e6c0f652e656c8300e1e01f0e73a5e21", "filename": "src/librustc_middle/ty/error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferror.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -284,7 +284,6 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::Infer(ty::FreshIntTy(_)) => \"fresh integral type\".into(),\n             ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".into(),\n             ty::Projection(_) => \"associated type\".into(),\n-            ty::UnnormalizedProjection(_) => \"non-normalized associated type\".into(),\n             ty::Param(p) => format!(\"type parameter `{}`\", p).into(),\n             ty::Opaque(..) => \"opaque type\".into(),\n             ty::Error => \"type error\".into(),\n@@ -323,7 +322,6 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::Placeholder(..) => \"higher-ranked type\".into(),\n             ty::Bound(..) => \"bound type variable\".into(),\n             ty::Projection(_) => \"associated type\".into(),\n-            ty::UnnormalizedProjection(_) => \"associated type\".into(),\n             ty::Param(_) => \"type parameter\".into(),\n             ty::Opaque(..) => \"opaque type\".into(),\n         }"}, {"sha": "16d8e37940763646d83655fae5b3d63da737319e", "filename": "src/librustc_middle/ty/fast_reject.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ffast_reject.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -90,7 +90,6 @@ pub fn simplify_type(\n         ty::Never => Some(NeverSimplifiedType),\n         ty::Tuple(ref tys) => Some(TupleSimplifiedType(tys.len())),\n         ty::FnPtr(ref f) => Some(FunctionSimplifiedType(f.skip_binder().inputs().len())),\n-        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n         ty::Projection(_) | ty::Param(_) => {\n             if can_simplify_params {\n                 // In normalized types, projections don't unify with"}, {"sha": "042ffc4d1e55013a5fbd29c2b754af459234b38a", "filename": "src/librustc_middle/ty/flags.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fflags.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -121,11 +121,6 @@ impl FlagComputation {\n                 self.add_projection_ty(data);\n             }\n \n-            &ty::UnnormalizedProjection(ref data) => {\n-                self.add_flags(TypeFlags::HAS_TY_PROJECTION);\n-                self.add_projection_ty(data);\n-            }\n-\n             &ty::Opaque(_, substs) => {\n                 self.add_flags(TypeFlags::HAS_TY_OPAQUE);\n                 self.add_substs(substs);"}, {"sha": "1339281667e7d933e6ff6b62793c5bebecad5ddb", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -1241,11 +1241,9 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 tcx.layout_raw(param_env.and(normalized))?\n             }\n \n-            ty::Bound(..)\n-            | ty::Placeholder(..)\n-            | ty::UnnormalizedProjection(..)\n-            | ty::GeneratorWitness(..)\n-            | ty::Infer(_) => bug!(\"Layout::compute: unexpected type `{}`\", ty),\n+            ty::Bound(..) | ty::Placeholder(..) | ty::GeneratorWitness(..) | ty::Infer(_) => {\n+                bug!(\"Layout::compute: unexpected type `{}`\", ty)\n+            }\n \n             ty::Param(_) | ty::Error => {\n                 return Err(LayoutError::Unknown(ty));\n@@ -2138,7 +2136,6 @@ where\n             }\n \n             ty::Projection(_)\n-            | ty::UnnormalizedProjection(..)\n             | ty::Bound(..)\n             | ty::Placeholder(..)\n             | ty::Opaque(..)"}, {"sha": "5ed3c3dab934ce09cf66ce91c82f081d5493a63b", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -555,7 +555,7 @@ bitflags! {\n                                           | TypeFlags::HAS_CT_PLACEHOLDER.bits\n                                           | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits;\n \n-        /// Does this have [Projection] or [UnnormalizedProjection]?\n+        /// Does this have [Projection]?\n         const HAS_TY_PROJECTION           = 1 << 10;\n         /// Does this have [Opaque]?\n         const HAS_TY_OPAQUE               = 1 << 11;"}, {"sha": "afd670b85775b2de643c31cca6c93dda8ab3d06c", "filename": "src/librustc_middle/ty/outlives.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Foutlives.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -135,8 +135,6 @@ fn compute_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, out: &mut SmallVec<[Compo\n                 }\n             }\n \n-            ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n-\n             // We assume that inference variables are fully resolved.\n             // So, if we encounter an inference variable, just record\n             // the unresolved variable as a component."}, {"sha": "69b36980bd73cee0f711682982bd12385fdd0fd4", "filename": "src/librustc_middle/ty/print/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fmod.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -294,7 +294,6 @@ pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n         | ty::FnPtr(_)\n         | ty::Projection(_)\n         | ty::Placeholder(..)\n-        | ty::UnnormalizedProjection(..)\n         | ty::Param(_)\n         | ty::Opaque(..)\n         | ty::Infer(_)"}, {"sha": "41a6cd5466f5efc2956a9efab95f32dd80332db4", "filename": "src/librustc_middle/ty/print/obsolete.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fobsolete.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -148,7 +148,6 @@ impl DefPathBasedNames<'tcx> {\n             | ty::Bound(..)\n             | ty::Infer(_)\n             | ty::Placeholder(..)\n-            | ty::UnnormalizedProjection(..)\n             | ty::Projection(..)\n             | ty::Param(_)\n             | ty::GeneratorWitness(_)"}, {"sha": "06ad90a147ad70ee1bc3c7adcc48513fc916712c", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -540,9 +540,6 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(print_def_path(def_id, &[]));\n             }\n             ty::Projection(ref data) => p!(print(data)),\n-            ty::UnnormalizedProjection(ref data) => {\n-                p!(write(\"Unnormalized(\"), print(data), write(\")\"))\n-            }\n             ty::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n             ty::Opaque(def_id, substs) => {\n                 // FIXME(eddyb) print this with `print_def_path`."}, {"sha": "d68bc7221f92dd5e692daaea025edad1bff4fdac", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -477,11 +477,6 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n             Ok(tcx.mk_fn_ptr(fty))\n         }\n \n-        (ty::UnnormalizedProjection(a_data), ty::UnnormalizedProjection(b_data)) => {\n-            let projection_ty = relation.relate(a_data, b_data)?;\n-            Ok(tcx.mk_ty(ty::UnnormalizedProjection(projection_ty)))\n-        }\n-\n         // these two are already handled downstream in case of lazy normalization\n         (ty::Projection(a_data), ty::Projection(b_data)) => {\n             let projection_ty = relation.relate(a_data, b_data)?;"}, {"sha": "680b718792199605cf420ffbaafdd4094ded0399", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -888,9 +888,6 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::GeneratorWitness(types) => ty::GeneratorWitness(types.fold_with(folder)),\n             ty::Closure(did, substs) => ty::Closure(did, substs.fold_with(folder)),\n             ty::Projection(ref data) => ty::Projection(data.fold_with(folder)),\n-            ty::UnnormalizedProjection(ref data) => {\n-                ty::UnnormalizedProjection(data.fold_with(folder))\n-            }\n             ty::Opaque(did, substs) => ty::Opaque(did, substs.fold_with(folder)),\n \n             ty::Bool\n@@ -931,9 +928,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::Generator(_did, ref substs, _) => substs.visit_with(visitor),\n             ty::GeneratorWitness(ref types) => types.visit_with(visitor),\n             ty::Closure(_did, ref substs) => substs.visit_with(visitor),\n-            ty::Projection(ref data) | ty::UnnormalizedProjection(ref data) => {\n-                data.visit_with(visitor)\n-            }\n+            ty::Projection(ref data) => data.visit_with(visitor),\n             ty::Opaque(_, ref substs) => substs.visit_with(visitor),\n \n             ty::Bool"}, {"sha": "2ad673b2c194379cc77d6a532287b61b0e5be3d1", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -181,11 +181,6 @@ pub enum TyKind<'tcx> {\n     /// `<T as Trait<..>>::N`.\n     Projection(ProjectionTy<'tcx>),\n \n-    /// A placeholder type used when we do not have enough information\n-    /// to normalize the projection of an associated type to an\n-    /// existing concrete type. Currently only used with chalk-engine.\n-    UnnormalizedProjection(ProjectionTy<'tcx>),\n-\n     /// Opaque (`impl Trait`) type found in a return type.\n     /// The `DefId` comes either from\n     /// * the `impl Trait` ast::Ty node,\n@@ -2186,8 +2181,6 @@ impl<'tcx> TyS<'tcx> {\n \n             ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,\n \n-            ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n-\n             ty::Infer(ty::TyVar(_)) => false,\n \n             ty::Bound(..)"}, {"sha": "f9c10488ffbc0350bafac6e154ba0be381063b0b", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -745,8 +745,7 @@ impl<'tcx> ty::TyS<'tcx> {\n             | ty::Opaque(..)\n             | ty::Param(_)\n             | ty::Placeholder(_)\n-            | ty::Projection(_)\n-            | ty::UnnormalizedProjection(_) => false,\n+            | ty::Projection(_) => false,\n         }\n     }\n \n@@ -1077,7 +1076,6 @@ pub fn needs_drop_components(\n         // These require checking for `Copy` bounds or `Adt` destructors.\n         ty::Adt(..)\n         | ty::Projection(..)\n-        | ty::UnnormalizedProjection(..)\n         | ty::Param(_)\n         | ty::Bound(..)\n         | ty::Placeholder(..)"}, {"sha": "0093c60d7689b6d09dc6871154fc3c3b08dd4443", "filename": "src/librustc_middle/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fwalk.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -127,7 +127,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 stack.push(ty.into());\n                 stack.push(lt.into());\n             }\n-            ty::Projection(data) | ty::UnnormalizedProjection(data) => {\n+            ty::Projection(data) => {\n                 stack.extend(data.substs.iter().copied().rev());\n             }\n             ty::Dynamic(obj, lt) => {"}, {"sha": "71cca725982f5bdd4ec16e6e4ca085c089a403f8", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -60,7 +60,6 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             | ty::FnDef(def_id, substs)\n             | ty::Opaque(def_id, substs)\n             | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n-            | ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),"}, {"sha": "748cb8d9d1a40084f62d6c3cf2a31600ddacb9f6", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -566,7 +566,6 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             | ty::Bound(..)\n             | ty::Param(..)\n             | ty::Opaque(..)\n-            | ty::UnnormalizedProjection(..)\n             | ty::Projection(..)\n             | ty::GeneratorWitness(..) => bug!(\"Encountered invalid type {:?}\", ty),\n         }"}, {"sha": "b474b23ac4f5ce1a5f1bb5d0c6b49d99a3aeaa0b", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -160,7 +160,7 @@ where\n                     }\n                 }\n             }\n-            ty::Projection(proj) | ty::UnnormalizedProjection(proj) => {\n+            ty::Projection(proj) => {\n                 if self.def_id_visitor.skip_assoc_tys() {\n                     // Visitors searching for minimal visibility/reachability want to\n                     // conservatively approximate associated types like `<Type as Trait>::Alias`"}, {"sha": "3038b0c6bd7eb26062d824e718fc07b16381f881", "filename": "src/librustc_symbol_mangling/legacy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Flegacy.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -216,7 +216,6 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n             ty::FnDef(def_id, substs)\n             | ty::Opaque(def_id, substs)\n             | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n-            | ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n             _ => self.pretty_print_type(ty),\n@@ -264,7 +263,6 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n             ty::FnDef(..)\n             | ty::Opaque(..)\n             | ty::Projection(_)\n-            | ty::UnnormalizedProjection(_)\n             | ty::Closure(..)\n             | ty::Generator(..)\n                 if trait_ref.is_none() =>"}, {"sha": "3b439e09a9d150f2fc18b3554fad069f59f167aa", "filename": "src/librustc_symbol_mangling/v0.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_symbol_mangling%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_symbol_mangling%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Fv0.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -413,7 +413,6 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             | ty::FnDef(def_id, substs)\n             | ty::Opaque(def_id, substs)\n             | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n-            | ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => {\n                 self = self.print_def_path(def_id, substs)?;"}, {"sha": "85c2f9246afcc6e92b8d2d07136414fb9511c2b0", "filename": "src/librustc_trait_selection/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -567,9 +567,8 @@ fn ty_is_non_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> Option<Ty<'_>>\n \n         ty::Error => None,\n \n-        ty::UnnormalizedProjection(..)\n-        | ty::Closure(..)\n-        | ty::Generator(..)\n-        | ty::GeneratorWitness(..) => bug!(\"ty_is_local invoked on unexpected type: {:?}\", ty),\n+        ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(..) => {\n+            bug!(\"ty_is_local invoked on unexpected type: {:?}\", ty)\n+        }\n     }\n }"}, {"sha": "1620bdfa66e1b531cf996b7e6ef3a144b7552a75", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -1194,7 +1194,6 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 ty::Foreign(..) => Some(19),\n                 ty::GeneratorWitness(..) => Some(20),\n                 ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error => None,\n-                ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n             }\n         }\n "}, {"sha": "856a2111fc82c8da116de604909a7ddef4f4b789", "filename": "src/librustc_trait_selection/traits/query/dropck_outlives.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -135,7 +135,5 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         | ty::Infer(_)\n         | ty::Bound(..)\n         | ty::Generator(..) => false,\n-\n-        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n     }\n }"}, {"sha": "f0ff30232b96dea78c6e7ef88cae76afcddb4acd", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -2178,8 +2178,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,\n             ty::Infer(ty::TyVar(_)) => Ambiguous,\n \n-            ty::UnnormalizedProjection(..)\n-            | ty::Placeholder(..)\n+            ty::Placeholder(..)\n             | ty::Bound(..)\n             | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"asked to assemble builtin bounds of unexpected type: {:?}\", self_ty);\n@@ -2250,8 +2249,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ambiguous\n             }\n \n-            ty::UnnormalizedProjection(..)\n-            | ty::Placeholder(..)\n+            ty::Placeholder(..)\n             | ty::Bound(..)\n             | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"asked to assemble builtin bounds of unexpected type: {:?}\", self_ty);\n@@ -2284,8 +2282,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Never\n             | ty::Char => Vec::new(),\n \n-            ty::UnnormalizedProjection(..)\n-            | ty::Placeholder(..)\n+            ty::Placeholder(..)\n             | ty::Dynamic(..)\n             | ty::Param(..)\n             | ty::Foreign(..)"}, {"sha": "ba7ec96775c047dd5688c55627480955dadd6987", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -389,8 +389,6 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     self.compute_projection(data);\n                 }\n \n-                ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n-\n                 ty::Adt(def, substs) => {\n                     // WfNominalType\n                     let obligations = self.nominal_obligations(def.did, substs);"}, {"sha": "6ba8e63886b058f0cf4cf94425dd69b8300084d3", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -353,7 +353,6 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 apply(chalk_ir::TypeName::Tuple(substs.len()), substs.lower_into(interner))\n             }\n             Projection(proj) => TyData::Alias(proj.lower_into(interner)).intern(interner),\n-            UnnormalizedProjection(_proj) => unimplemented!(),\n             Opaque(_def_id, _substs) => unimplemented!(),\n             // This should have been done eagerly prior to this, and all Params\n             // should have been substituted to placeholders"}, {"sha": "08475d6a09db14d4b1c2ec8835ab6a659334ba8c", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -271,8 +271,6 @@ fn dtorck_constraint_for_ty<'tcx>(\n             constraints.dtorck_types.push(ty);\n         }\n \n-        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n-\n         ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error => {\n             // By the time this code runs, all type variables ought to\n             // be fully resolved."}, {"sha": "1aa11a761c821eb4fca286be48bd534c3f8d3d15", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -47,8 +47,6 @@ fn sized_constraint_for_ty<'tcx>(\n             vec![ty]\n         }\n \n-        UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n-\n         Param(..) => {\n             // perf hack: if there is a `T: Sized` bound, then\n             // we know that `T` is Sized and do not need to check"}, {"sha": "46d6706cbf42925e674fb8d71c4b05ba94ea6e44", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -115,7 +115,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Foreign(..) => Some(PointerKind::Thin),\n             // We should really try to normalize here.\n             ty::Projection(ref pi) => Some(PointerKind::OfProjection(pi)),\n-            ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n             ty::Opaque(def_id, substs) => Some(PointerKind::OfOpaque(def_id, substs)),\n             ty::Param(ref p) => Some(PointerKind::OfParam(p)),\n             // Insufficient type information."}, {"sha": "3a680f55c8c309146ce40738571d529294217cf2", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -344,11 +344,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 // types, where we use Error as the Self type\n             }\n \n-            ty::Placeholder(..)\n-            | ty::UnnormalizedProjection(..)\n-            | ty::GeneratorWitness(..)\n-            | ty::Bound(..)\n-            | ty::Infer(..) => {\n+            ty::Placeholder(..) | ty::GeneratorWitness(..) | ty::Bound(..) | ty::Infer(..) => {\n                 bug!(\n                     \"unexpected type encountered in \\\n                       variance inference: {}\","}, {"sha": "6c001bc548410670f9825e0d1920b9eae77e2f62", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -1722,7 +1722,6 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n             ty::Bound(..) => panic!(\"Bound\"),\n             ty::Placeholder(..) => panic!(\"Placeholder\"),\n-            ty::UnnormalizedProjection(..) => panic!(\"UnnormalizedProjection\"),\n             ty::GeneratorWitness(..) => panic!(\"GeneratorWitness\"),\n             ty::Infer(..) => panic!(\"Infer\"),\n             ty::Error => panic!(\"Error\"),"}, {"sha": "27fe432e96ded03ca64ece5361602bc91363b0be", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -32,7 +32,6 @@ fn main() {\n         TyKind::Never => (), //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Tuple(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Projection(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n-        TyKind::UnnormalizedProjection(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Opaque(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Param(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Bound(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`"}, {"sha": "0486c90a5a07a4a995601902dfe3c18bc297cb97", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.stderr", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41f6b958d502b3e3d4de1b787a3981c9d752dd78/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr?ref=41f6b958d502b3e3d4de1b787a3981c9d752dd78", "patch": "@@ -139,58 +139,52 @@ LL |         TyKind::Projection(..) => (),\n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:35:9\n    |\n-LL |         TyKind::UnnormalizedProjection(..) => (),\n-   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n-\n-error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:36:9\n-   |\n LL |         TyKind::Opaque(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:37:9\n+  --> $DIR/ty_tykind_usage.rs:36:9\n    |\n LL |         TyKind::Param(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:38:9\n+  --> $DIR/ty_tykind_usage.rs:37:9\n    |\n LL |         TyKind::Bound(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:39:9\n+  --> $DIR/ty_tykind_usage.rs:38:9\n    |\n LL |         TyKind::Placeholder(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:40:9\n+  --> $DIR/ty_tykind_usage.rs:39:9\n    |\n LL |         TyKind::Infer(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:41:9\n+  --> $DIR/ty_tykind_usage.rs:40:9\n    |\n LL |         TyKind::Error => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:46:12\n+  --> $DIR/ty_tykind_usage.rs:45:12\n    |\n LL |     if let TyKind::Int(int_ty) = kind {}\n    |            ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind`\n-  --> $DIR/ty_tykind_usage.rs:48:24\n+  --> $DIR/ty_tykind_usage.rs:47:24\n    |\n LL |     fn ty_kind(ty_bad: TyKind<'_>, ty_good: Ty<'_>) {}\n    |                        ^^^^^^^^^^\n    |\n    = help: try using `Ty` instead\n \n-error: aborting due to 31 previous errors\n+error: aborting due to 30 previous errors\n "}]}