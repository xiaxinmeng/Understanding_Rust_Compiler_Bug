{"sha": "166f66403746ffc8575c43819db9462ad485a96c", "node_id": "C_kwDOAAsO6NoAKDE2NmY2NjQwMzc0NmZmYzg1NzVjNDM4MTlkYjk0NjJhZDQ4NWE5NmM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-10-16T02:41:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-16T02:41:12Z"}, "message": "Rollup merge of #102023 - SUPERCILEX:maybeuninit-transpose, r=scottmcm\n\nAdd MaybeUninit array transpose From impls\n\nSee discussion in https://github.com/rust-lang/rust/pull/101179 and https://github.com/rust-lang/rust/issues/96097. I believe this solution offers the simplest implementation with minimal future API regret.\n\n`@RalfJung` mind doing a correctness review?", "tree": {"sha": "2536ff428185852b800a8999f5b7bfa290b4e56f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2536ff428185852b800a8999f5b7bfa290b4e56f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/166f66403746ffc8575c43819db9462ad485a96c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjS29ICRBK7hj4Ov3rIwAA0SUIALNTEBOmu2hbonOvEipzNCIg\nlOBQJOp1adxHbJivUcLROvm+lLyXJnKkcbo58kpOU0mynDalxKE5uSE5IBOrnElY\nNGLPsfWdI+POQPJM5JyhVPVDWnye8z7uduInMKYALLMOJMAOOPlt7dbkNpHnq/Na\n5Bo+vmtXMq/7YIKqTrlk3thKb6htGTj2rdNu+PFdww6s08aeI1BAO52jyFKNU8O1\nRZpGKZA0XSl7cwEZ63t3Sq4/YDR4tKkQG1Fl4JQOUwMpqNLctQYSpe5rxOceo34E\nMYLUrtH57bRGM3koz+j0aIwL/7H5O4sks+U6CRsOc7J11+iWz4gcrTpqt7jX6Hc=\n=HcXT\n-----END PGP SIGNATURE-----\n", "payload": "tree 2536ff428185852b800a8999f5b7bfa290b4e56f\nparent cbc0a73c951128b783ea4953844ef5beb6e9cc5a\nparent 393434c29eee2aa939dddfb8db0a4d692bcb96c0\nauthor Yuki Okushi <jtitor@2k36.org> 1665888072 +0900\ncommitter GitHub <noreply@github.com> 1665888072 +0900\n\nRollup merge of #102023 - SUPERCILEX:maybeuninit-transpose, r=scottmcm\n\nAdd MaybeUninit array transpose From impls\n\nSee discussion in https://github.com/rust-lang/rust/pull/101179 and https://github.com/rust-lang/rust/issues/96097. I believe this solution offers the simplest implementation with minimal future API regret.\n\n`@RalfJung` mind doing a correctness review?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/166f66403746ffc8575c43819db9462ad485a96c", "html_url": "https://github.com/rust-lang/rust/commit/166f66403746ffc8575c43819db9462ad485a96c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/166f66403746ffc8575c43819db9462ad485a96c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbc0a73c951128b783ea4953844ef5beb6e9cc5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc0a73c951128b783ea4953844ef5beb6e9cc5a", "html_url": "https://github.com/rust-lang/rust/commit/cbc0a73c951128b783ea4953844ef5beb6e9cc5a"}, {"sha": "393434c29eee2aa939dddfb8db0a4d692bcb96c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/393434c29eee2aa939dddfb8db0a4d692bcb96c0", "html_url": "https://github.com/rust-lang/rust/commit/393434c29eee2aa939dddfb8db0a4d692bcb96c0"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "2ae9636762813f087706986c13dbc0dcfa80e3cf", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/166f66403746ffc8575c43819db9462ad485a96c/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/166f66403746ffc8575c43819db9462ad485a96c/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=166f66403746ffc8575c43819db9462ad485a96c", "patch": "@@ -1284,3 +1284,40 @@ impl<T> MaybeUninit<T> {\n         }\n     }\n }\n+\n+impl<T, const N: usize> MaybeUninit<[T; N]> {\n+    /// Transposes a `MaybeUninit<[T; N]>` into a `[MaybeUninit<T>; N]`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(maybe_uninit_uninit_array_transpose)]\n+    /// # use std::mem::MaybeUninit;\n+    ///\n+    /// let data: [MaybeUninit<u8>; 1000] = MaybeUninit::uninit().transpose();\n+    /// ```\n+    #[unstable(feature = \"maybe_uninit_uninit_array_transpose\", issue = \"96097\")]\n+    pub fn transpose(self) -> [MaybeUninit<T>; N] {\n+        // SAFETY: T and MaybeUninit<T> have the same layout\n+        unsafe { super::transmute_copy(&ManuallyDrop::new(self)) }\n+    }\n+}\n+\n+impl<T, const N: usize> [MaybeUninit<T>; N] {\n+    /// Transposes a `[MaybeUninit<T>; N]` into a `MaybeUninit<[T; N]>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(maybe_uninit_uninit_array_transpose)]\n+    /// # use std::mem::MaybeUninit;\n+    ///\n+    /// let data = [MaybeUninit::<u8>::uninit(); 1000];\n+    /// let data: MaybeUninit<[u8; 1000]> = data.transpose();\n+    /// ```\n+    #[unstable(feature = \"maybe_uninit_uninit_array_transpose\", issue = \"96097\")]\n+    pub fn transpose(self) -> MaybeUninit<[T; N]> {\n+        // SAFETY: T and MaybeUninit<T> have the same layout\n+        unsafe { super::transmute_copy(&ManuallyDrop::new(self)) }\n+    }\n+}"}]}