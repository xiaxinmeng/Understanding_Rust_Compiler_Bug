{"sha": "ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmN2RjYTUwYTQ3ZDAzNzY0Yzc0Y2FjNmQ4MDNlMTdjOWQ5ZjJhN2I=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-03-01T14:56:43Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-03-01T19:42:44Z"}, "message": "Make explain borrow work for Universal lifetimes", "tree": {"sha": "553ab0e0d1209a993fed896041165e4dc0de57ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/553ab0e0d1209a993fed896041165e4dc0de57ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAlqYV7UACgkQiMlBzaHU\nZDJMXA//ZyhlSNfdURZm7jNHrsd+gi/ZHrWDiKvr17iCVlgsmT1Bx/vyxq8+eFh8\njcFCkMFe+vipyloZCUb5yEKSZignMrSTslLHB/CkMzI4nmkOIkGZY8GD71F+5vHL\nvqmUuol+qqCItfAQONUPifGm/NbE5YQnjE0cxp+wuQzUhgPiYpLhfmg/goWI1Q2P\nayxAiSnJoJVf/vL9xUk9aR/X7N4OcrRDkL4L8ZleBFbWHWKmInihWZAIrU2wDkkJ\ndLlngPOnUrr6wVpPUwSrc8Ycg3EUHPRZ4INkbKesdtbqv1xtOYcktoPTeLdZpIdz\nsDK8deLUqGHxMIBhJ786peGjBnBKGWJrVhH7Htqk94uavjy1DGhaNezDLIS+Ug0y\naOVMh3rSRYhJRySAN+jn1397jbKST5sQGNbuOQzudcO8cs5WlWw1o7MkLs6l4ZFo\n3wjTKYTu8A6k+37hOv7U5se75muzH+eLoQ7YXSk+c/owJgNtHmOIOp1wwqQFflU3\ntdnKeLKQrLYm+m6TfhuFUHkm6ZEnQxChwBR2kf7n/djS4C7ZI/zRdP4LYsebMsKU\nLi2djJtWiEmxd2uum4lA5+eYb+ehKF4Me+qEHPCfTVsj4hudDSxUd70/f7H5BZpy\ntm26j1stDkgn01EdfUA27Y9pneRvidz/QngNzciwl7sxIODP80M=\n=1fqh\n-----END PGP SIGNATURE-----", "payload": "tree 553ab0e0d1209a993fed896041165e4dc0de57ec\nparent 834e39289d46783193b9ce43f6725f4ed8c64519\nauthor Santiago Pastorino <spastorino@gmail.com> 1519916203 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1519933364 -0300\n\nMake explain borrow work for Universal lifetimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "html_url": "https://github.com/rust-lang/rust/commit/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "834e39289d46783193b9ce43f6725f4ed8c64519", "url": "https://api.github.com/repos/rust-lang/rust/commits/834e39289d46783193b9ce43f6725f4ed8c64519", "html_url": "https://github.com/rust-lang/rust/commit/834e39289d46783193b9ce43f6725f4ed8c64519"}], "stats": {"total": 149, "additions": 127, "deletions": 22}, "files": [{"sha": "b51ddf719cbf3d15317ede3c9f2078e45585dea4", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "patch": "@@ -165,12 +165,19 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 );\n             }\n         };\n-        let message = format!(\"{}{}{}\", prefix, description, suffix);\n-        if let Some(span) = span {\n-            err.span_note(span, &message);\n-        } else {\n-            err.note(&message);\n-        }\n+\n+        TyCtxt::emit_msg_span(err, prefix, description, span, suffix);\n+    }\n+\n+    pub fn note_and_explain_free_region(self,\n+                                        err: &mut DiagnosticBuilder,\n+                                        prefix: &str,\n+                                        region: ty::Region<'tcx>,\n+                                        suffix: &str) {\n+        let (description, span) = self.msg_span_from_free_region(region);\n+\n+\n+        TyCtxt::emit_msg_span(err, prefix, description, span, suffix);\n     }\n \n     fn msg_span_from_free_region(self,\n@@ -224,6 +231,20 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         (format!(\"{} {}\", prefix, msg), opt_span)\n     }\n \n+    fn emit_msg_span(err: &mut DiagnosticBuilder,\n+                     prefix: &str,\n+                     description: String,\n+                     span: Option<Span>,\n+                     suffix: &str) {\n+        let message = format!(\"{}{}{}\", prefix, description, suffix);\n+\n+        if let Some(span) = span {\n+            err.span_note(span, &message);\n+        } else {\n+            err.note(&message);\n+        }\n+    }\n+\n     fn item_scope_tag(item: &hir::Item) -> &'static str {\n         match item.node {\n             hir::ItemImpl(..) => \"impl\","}, {"sha": "667450c3f352d8132eef4250955a7841cecffcfd", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "patch": "@@ -233,7 +233,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         context: Context,\n         (place, span): (&Place<'tcx>, Span),\n         gen_borrow_kind: BorrowKind,\n-        issued_borrow: &BorrowData,\n+        issued_borrow: &BorrowData<'tcx>,\n         end_issued_loan_span: Option<Span>,\n     ) {\n         let issued_span = self.retrieve_borrow_span(issued_borrow);\n@@ -574,7 +574,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         &mut self,\n         context: Context,\n         (place, span): (&Place<'tcx>, Span),\n-        loan: &BorrowData,\n+        loan: &BorrowData<'tcx>,\n     ) {\n         let mut err = self.tcx.cannot_assign_to_borrowed(\n             span,"}, {"sha": "c93c1848e25fe7d9159a8bb230a72f716cd5d387", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "patch": "@@ -21,7 +21,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     pub(in borrow_check) fn explain_why_borrow_contains_point(\n         &self,\n         context: Context,\n-        borrow: &BorrowData<'_>,\n+        borrow: &BorrowData<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n     ) {\n         if let Some(regioncx) = &self.nonlexical_regioncx {\n@@ -70,6 +70,18 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         }\n                     }\n \n+                    Cause::UniversalRegion(region_vid) => {\n+                        if let Some(region) = regioncx.to_error_region(region_vid) {\n+\n+                            self.tcx.note_and_explain_free_region(\n+                                err,\n+                                \"borrowed value must be valid for \",\n+                                region,\n+                                \"...\",\n+                            );\n+                        }\n+                    }\n+\n                     _ => {\n                     }\n                 }"}, {"sha": "e0a8877a6ab1c7b5cbf8e6fb5f076f8cf547834f", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "patch": "@@ -588,7 +588,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// existentially bound, then we check its inferred value and try\n     /// to find a good name from that. Returns `None` if we can't find\n     /// one (e.g., this is just some random part of the CFG).\n-    fn to_error_region(&self, r: RegionVid) -> Option<ty::Region<'tcx>> {\n+    pub fn to_error_region(&self, r: RegionVid) -> Option<ty::Region<'tcx>> {\n         if self.universal_regions.is_universal_region(r) {\n             return self.definitions[r].external_name;\n         } else {"}, {"sha": "da03a9fc39b632adb7d07e95e58801f4a94ea18e", "filename": "src/test/ui/nll/borrowed-universal-error-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.rs?ref=ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Znll-dump-cause\n+\n+#![feature(nll)]\n+#![allow(warnings)]\n+\n+fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n+    let v = 22;\n+    &v\n+    //~^ ERROR `v` does not live long enough [E0597]\n+}\n+\n+fn main() {}"}, {"sha": "ff999a71e0f92e603e420ba8b699cd436dff117a", "filename": "src/test/ui/nll/borrowed-universal-error-2.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr?ref=ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "patch": "@@ -0,0 +1,18 @@\n+error[E0597]: `v` does not live long enough\n+  --> $DIR/borrowed-universal-error-2.rs:18:5\n+   |\n+LL |     &v\n+   |     ^^ borrowed value does not live long enough\n+LL |     //~^ ERROR `v` does not live long enough [E0597]\n+LL | }\n+   | - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 16:1...\n+  --> $DIR/borrowed-universal-error-2.rs:16:1\n+   |\n+LL | fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+If you want more information on this error, try using \"rustc --explain E0597\""}, {"sha": "fdc4c29071ee9500ca523b5d679365ac06a65adc", "filename": "src/test/ui/nll/borrowed-universal-error.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs?ref=ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Znll-dump-cause\n+\n+#![feature(nll)]\n+#![allow(warnings)]\n+\n+fn gimme(x: &(u32,)) -> &u32 {\n+    &x.0\n+}\n+\n+fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n+    let v = 22;\n+    gimme(&(v,))\n+    //~^ ERROR borrowed value does not live long enough [E0597]\n+}\n+\n+fn main() {}"}, {"sha": "4a3d0c6d959fce2de0ac19212c74cb577614b09d", "filename": "src/test/ui/nll/borrowed-universal-error.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr?ref=ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "patch": "@@ -0,0 +1,18 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/borrowed-universal-error.rs:22:12\n+   |\n+LL |     gimme(&(v,))\n+   |            ^^^^ temporary value does not live long enough\n+LL |     //~^ ERROR borrowed value does not live long enough [E0597]\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 20:1...\n+  --> $DIR/borrowed-universal-error.rs:20:1\n+   |\n+LL | fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+If you want more information on this error, try using \"rustc --explain E0597\""}, {"sha": "1c545906893a232c24436ae134940cc5806c7c71", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "patch": "@@ -9,8 +9,6 @@ LL |     }\n LL | \n LL |     deref(p);\n    |           - borrow later used here\n-   |\n-   = note: borrowed value must be valid for lifetime '_#5r...\n \n error: aborting due to previous error\n "}, {"sha": "18ffdc5834975ae703a741b25848f798eba660ef", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "patch": "@@ -34,8 +34,6 @@ LL |     }\n LL | \n LL |     deref(p);\n    |           - borrow later used here\n-   |\n-   = note: borrowed value must be valid for lifetime '_#6r...\n \n error: aborting due to previous error\n "}, {"sha": "7b2b2f748726c95f9ce0306b922e89f4bd03c647", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "patch": "@@ -61,8 +61,6 @@ LL |       }\n LL | \n LL |       deref(p);\n    |             - borrow later used here\n-   |\n-   = note: borrowed value must be valid for lifetime '_#4r...\n \n error: aborting due to previous error\n "}, {"sha": "0a45603a42cd08d6c593cae1fbe408048ec59c18", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "patch": "@@ -38,8 +38,6 @@ LL |     }\n LL | \n LL |     deref(p);\n    |           - borrow later used here\n-   |\n-   = note: borrowed value must be valid for lifetime '_#4r...\n \n error: aborting due to previous error\n "}, {"sha": "21ed421fe96ca80e52355e77a62e37e76500724f", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "patch": "@@ -78,8 +78,6 @@ LL |     let cell = Cell::new(&a);\n ...\n LL | }\n    | - borrowed value only lives until here\n-   |\n-   = note: borrowed value must be valid for lifetime '_#2r...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c77e0772ce962bc12653dbe4be16f93b084d83ba", "filename": "src/test/ui/nll/return-ref-mut-issue-46557.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff7dca50a47d03764c74cac6d803e17c9d9f2a7b/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr?ref=ff7dca50a47d03764c74cac6d803e17c9d9f2a7b", "patch": "@@ -6,8 +6,6 @@ LL |     let ref mut x = 1234543; //~ ERROR borrowed value does not live long en\n LL |     x\n LL | }\n    | - temporary value only lives until here\n-   |\n-   = note: borrowed value must be valid for lifetime '_#2r...\n \n error: aborting due to previous error\n "}]}