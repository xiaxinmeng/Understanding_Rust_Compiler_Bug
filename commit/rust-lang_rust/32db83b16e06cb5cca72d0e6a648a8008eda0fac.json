{"sha": "32db83b16e06cb5cca72d0e6a648a8008eda0fac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZGI4M2IxNmUwNmNiNWNjYTcyZDBlNmE2NDhhODAwOGVkYTBmYWM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-01-01T14:42:32Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-01-03T15:09:20Z"}, "message": "Support `extern` in paths", "tree": {"sha": "28ad66a5b4c14a728cbdb3d4665458ffd5fbe4b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28ad66a5b4c14a728cbdb3d4665458ffd5fbe4b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32db83b16e06cb5cca72d0e6a648a8008eda0fac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32db83b16e06cb5cca72d0e6a648a8008eda0fac", "html_url": "https://github.com/rust-lang/rust/commit/32db83b16e06cb5cca72d0e6a648a8008eda0fac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32db83b16e06cb5cca72d0e6a648a8008eda0fac/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b107f720e5422bff4fa0671e54ff5458f682f603", "url": "https://api.github.com/repos/rust-lang/rust/commits/b107f720e5422bff4fa0671e54ff5458f682f603", "html_url": "https://github.com/rust-lang/rust/commit/b107f720e5422bff4fa0671e54ff5458f682f603"}], "stats": {"total": 211, "additions": 185, "deletions": 26}, "files": [{"sha": "53c2adeec98c268ec096c5f60d2a99d531ae8ab3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=32db83b16e06cb5cca72d0e6a648a8008eda0fac", "patch": "@@ -2982,6 +2982,8 @@ impl<'a> Resolver<'a> {\n                     let msg = \"There are too many initial `super`s.\".to_string();\n                     return PathResult::Failed(ident.span, msg, false);\n                 }\n+            } else if i == 0 && ns == TypeNS && name == keywords::Extern.name() {\n+                continue;\n             }\n             allow_super = false;\n \n@@ -2996,16 +2998,19 @@ impl<'a> Resolver<'a> {\n                     // `$crate::a::b`\n                     module = Some(self.resolve_crate_root(ident.node.ctxt));\n                     continue\n-                } else if i == 1 && self.session.features.borrow().extern_absolute_paths &&\n-                                    path[0].node.name == keywords::CrateRoot.name() &&\n-                                    !token::Ident(ident.node).is_path_segment_keyword() {\n-                    // `::extern_crate::a::b`\n-                    let crate_id = self.crate_loader.resolve_crate_from_path(name, ident.span);\n-                    let crate_root =\n-                        self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n-                    self.populate_module_if_necessary(crate_root);\n-                    module = Some(crate_root);\n-                    continue\n+                } else if i == 1 && !token::Ident(ident.node).is_path_segment_keyword() {\n+                    let prev_name = path[0].node.name;\n+                    if prev_name == keywords::Extern.name() ||\n+                       prev_name == keywords::CrateRoot.name() &&\n+                       self.session.features.borrow().extern_absolute_paths {\n+                        // `::extern_crate::a::b`\n+                        let crate_id = self.crate_loader.resolve_crate_from_path(name, ident.span);\n+                        let crate_root =\n+                            self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n+                        self.populate_module_if_necessary(crate_root);\n+                        module = Some(crate_root);\n+                        continue\n+                    }\n                 }\n             }\n \n@@ -3015,6 +3020,7 @@ impl<'a> Resolver<'a> {\n                name == keywords::SelfValue.name() && i != 0 ||\n                name == keywords::SelfType.name() && i != 0 ||\n                name == keywords::Super.name() && i != 0 ||\n+               name == keywords::Extern.name() && i != 0 ||\n                name == keywords::Crate.name() && i != 1 &&\n                     path[0].node.name != keywords::CrateRoot.name() {\n                 let name_str = if name == keywords::CrateRoot.name() {"}, {"sha": "98cbb6609085cf34fd4c638d6e85c9d391999121", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=32db83b16e06cb5cca72d0e6a648a8008eda0fac", "patch": "@@ -604,26 +604,28 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         self.current_module = directive.parent;\n         let ImportDirective { ref module_path, span, .. } = *directive;\n \n-        // Extern crate mode for absolute paths needs some\n-        // special support for single-segment imports.\n-        let extern_absolute_paths = self.session.features.borrow().extern_absolute_paths;\n-        if module_path.len() == 1 && module_path[0].node.name == keywords::CrateRoot.name() {\n+        // FIXME: Last path segment is treated specially in import resolution, so extern crate\n+        // mode for absolute paths needs some special support for single-segment imports.\n+        if module_path.len() == 1 && (module_path[0].node.name == keywords::CrateRoot.name() ||\n+                                      module_path[0].node.name == keywords::Extern.name()) {\n+            let is_extern = module_path[0].node.name == keywords::Extern.name() ||\n+                            self.session.features.borrow().extern_absolute_paths;\n             match directive.subclass {\n-                GlobImport { .. } if extern_absolute_paths => {\n+                GlobImport { .. } if is_extern => {\n                     return Some((directive.span,\n                                  \"cannot glob-import all possible crates\".to_string()));\n                 }\n                 SingleImport { source, target, .. } => {\n-                    let crate_root = if source.name == keywords::Crate.name() {\n+                    let crate_root = if source.name == keywords::Crate.name() &&\n+                                        module_path[0].node.name != keywords::Extern.name() {\n                         if target.name == keywords::Crate.name() {\n                             return Some((directive.span,\n                                          \"crate root imports need to be explicitly named: \\\n                                           `use crate as name;`\".to_string()));\n                         } else {\n                             Some(self.resolve_crate_root(source.ctxt.modern()))\n                         }\n-                    } else if extern_absolute_paths &&\n-                              !token::Ident(source).is_path_segment_keyword() {\n+                    } else if is_extern && !token::Ident(source).is_path_segment_keyword() {\n                         let crate_id =\n                             self.crate_loader.resolve_crate_from_path(source.name, directive.span);\n                         let crate_root ="}, {"sha": "08eec0f9117f8723ec32864fa81ce00a1d72db36", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=32db83b16e06cb5cca72d0e6a648a8008eda0fac", "patch": "@@ -450,6 +450,9 @@ declare_features! (\n \n     // Allows use of the :lifetime macro fragment specifier\n     (active, macro_lifetime_matcher, \"1.24.0\", Some(46895)),\n+\n+    // `extern` in paths\n+    (active, extern_in_paths, \"1.23.0\", Some(44660)),\n );\n \n declare_features! (\n@@ -1790,6 +1793,9 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             if segment.identifier.name == keywords::Crate.name() {\n                 gate_feature_post!(&self, crate_in_paths, segment.span,\n                                    \"`crate` in paths is experimental\");\n+            } else if segment.identifier.name == keywords::Extern.name() {\n+                gate_feature_post!(&self, extern_in_paths, segment.span,\n+                                   \"`extern` in paths is experimental\");\n             }\n         }\n "}, {"sha": "e7c648d5e37d3f882c3a48847bc3d323e080fbf6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=32db83b16e06cb5cca72d0e6a648a8008eda0fac", "patch": "@@ -1387,7 +1387,7 @@ impl<'a> Parser<'a> {\n                 None\n             };\n             (ident, TraitItemKind::Const(ty, default), ast::Generics::default())\n-        } else if self.token.is_path_start() {\n+        } else if self.token.is_path_start() && !self.is_extern_non_path() {\n             // trait item macro.\n             // code copied from parse_macro_use_or_failure... abstraction!\n             let prev_span = self.prev_span;\n@@ -4037,6 +4037,10 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(keywords::Crate) && self.look_ahead(1, |t| t != &token::ModSep)\n     }\n \n+    fn is_extern_non_path(&self) -> bool {\n+        self.token.is_keyword(keywords::Extern) && self.look_ahead(1, |t| t != &token::ModSep)\n+    }\n+\n     fn eat_auto_trait(&mut self) -> bool {\n         if self.token.is_keyword(keywords::Auto)\n             && self.look_ahead(1, |t| t.is_keyword(keywords::Trait))\n@@ -4152,10 +4156,12 @@ impl<'a> Parser<'a> {\n         // like a path (1 token), but it fact not a path.\n         // `union::b::c` - path, `union U { ... }` - not a path.\n         // `crate::b::c` - path, `crate struct S;` - not a path.\n+        // `extern::b::c` - path, `extern crate c;` - not a path.\n         } else if self.token.is_path_start() &&\n                   !self.token.is_qpath_start() &&\n                   !self.is_union_item() &&\n-                  !self.is_crate_vis() {\n+                  !self.is_crate_vis() &&\n+                  !self.is_extern_non_path() {\n             let pth = self.parse_path(PathStyle::Expr)?;\n \n             if !self.eat(&token::Not) {\n@@ -5236,7 +5242,7 @@ impl<'a> Parser<'a> {\n                          -> PResult<'a, (Ident, Vec<ast::Attribute>, ast::Generics,\n                              ast::ImplItemKind)> {\n         // code copied from parse_macro_use_or_failure... abstraction!\n-        if self.token.is_path_start() {\n+        if self.token.is_path_start() && !self.is_extern_non_path() {\n             // Method macro.\n \n             let prev_span = self.prev_span;\n@@ -6238,7 +6244,8 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n \n-        if self.eat_keyword(keywords::Extern) {\n+        if self.check_keyword(keywords::Extern) && self.is_extern_non_path() {\n+            self.bump(); // `extern`\n             if self.eat_keyword(keywords::Crate) {\n                 return Ok(Some(self.parse_item_extern_crate(lo, visibility, attrs)?));\n             }"}, {"sha": "2be93c07d5ad771774fd5beaa727d9a284db04d1", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=32db83b16e06cb5cca72d0e6a648a8008eda0fac", "patch": "@@ -359,6 +359,7 @@ impl Token {\n             Some(id) => id.name == keywords::Super.name() ||\n                         id.name == keywords::SelfValue.name() ||\n                         id.name == keywords::SelfType.name() ||\n+                        id.name == keywords::Extern.name() ||\n                         id.name == keywords::Crate.name() ||\n                         id.name == keywords::DollarCrate.name(),\n             None => false,"}, {"sha": "e5927d09b41653b12ccc877a9a1929f95ec8de10", "filename": "src/test/compile-fail/keyword-extern-as-identifier.rs", "status": "renamed", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fcompile-fail%2Fkeyword-extern-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fcompile-fail%2Fkeyword-extern-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeyword-extern-as-identifier.rs?ref=32db83b16e06cb5cca72d0e6a648a8008eda0fac", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n-\n-// This file was auto-generated using 'src/etc/generate-keyword-tests.py extern'\n+#![feature(extern_in_paths)]\n \n fn main() {\n-    let extern = \"foo\"; //~ error: expected pattern, found keyword `extern`\n+    let extern = 0; //~ ERROR expected unit struct/variant or constant, found module `extern`\n }", "previous_filename": "src/test/parse-fail/keyword-extern-as-identifier.rs"}, {"sha": "c3da4a518720d4e8ccdc8efcfe7e4b254e6d93da", "filename": "src/test/compile-fail/rfc-2126-extern-in-paths/auxiliary/xcrate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fauxiliary%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fauxiliary%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fauxiliary%2Fxcrate.rs?ref=32db83b16e06cb5cca72d0e6a648a8008eda0fac", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Debug)]\n+pub struct S;\n+\n+#[derive(Debug)]\n+pub struct Z;"}, {"sha": "7eba02ed444bb89417aaad0c4c58da9605e32b81", "filename": "src/test/compile-fail/rfc-2126-extern-in-paths/non-existent-1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-1.rs?ref=32db83b16e06cb5cca72d0e6a648a8008eda0fac", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_in_paths)]\n+\n+use extern::xcrate::S; //~ ERROR can't find crate for `xcrate`\n+\n+fn main() {}"}, {"sha": "4d09a05253ec2c338abbdd9381c86d68a3a0e699", "filename": "src/test/compile-fail/rfc-2126-extern-in-paths/non-existent-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-2.rs?ref=32db83b16e06cb5cca72d0e6a648a8008eda0fac", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_in_paths)]\n+\n+fn main() {\n+    let s = extern::xcrate::S; //~ ERROR can't find crate for `xcrate`\n+}"}, {"sha": "402d294b2e324d98dea61b313dc39b72409cc941", "filename": "src/test/compile-fail/rfc-2126-extern-in-paths/non-existent-3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-3.rs?ref=32db83b16e06cb5cca72d0e6a648a8008eda0fac", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_in_paths)]\n+\n+use extern::ycrate; //~ ERROR can't find crate for `ycrate`\n+\n+fn main() {}"}, {"sha": "ebc42aa9d4492f8e7fe7b66fd249f60f631ae0f3", "filename": "src/test/compile-fail/rfc-2126-extern-in-paths/single-segment.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fsingle-segment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fsingle-segment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fsingle-segment.rs?ref=32db83b16e06cb5cca72d0e6a648a8008eda0fac", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:xcrate.rs\n+\n+#![feature(extern_in_paths)]\n+\n+use extern; //~ ERROR unresolved import `extern`\n+            //~^ NOTE no `extern` in the root\n+use extern::*; //~ ERROR unresolved import `extern::*`\n+               //~^ NOTE cannot glob-import all possible crates\n+\n+fn main() {\n+    let s = extern::xcrate; //~ ERROR expected value, found module `extern::xcrate`\n+                            //~^ NOTE not a value\n+}"}, {"sha": "52b52b23c874abf2a67f5a68e1603c54fd8a886c", "filename": "src/test/run-pass/rfc-2126-extern-absolute-paths/extern.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fextern.rs?ref=32db83b16e06cb5cca72d0e6a648a8008eda0fac", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:xcrate.rs\n+\n+#![feature(extern_in_paths)]\n+\n+use extern::xcrate::Z;\n+\n+fn f() {\n+    use extern::xcrate;\n+    use extern::xcrate as ycrate;\n+    let s = xcrate::S;\n+    assert_eq!(format!(\"{:?}\", s), \"S\");\n+    let z = ycrate::Z;\n+    assert_eq!(format!(\"{:?}\", z), \"Z\");\n+}\n+\n+fn main() {\n+    let s = extern::xcrate::S;\n+    assert_eq!(format!(\"{:?}\", s), \"S\");\n+    let z = Z;\n+    assert_eq!(format!(\"{:?}\", z), \"Z\");\n+}"}, {"sha": "3c01fcf68331bcb49c0f10d8fdee21d83c8538fa", "filename": "src/test/ui/feature-gate-extern_in_paths.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fui%2Ffeature-gate-extern_in_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fui%2Ffeature-gate-extern_in_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-extern_in_paths.rs?ref=32db83b16e06cb5cca72d0e6a648a8008eda0fac", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S;\n+\n+fn main() {\n+    let _ = extern::std::vec::Vec::new(); //~ ERROR `extern` in paths is experimental\n+}"}, {"sha": "ac68e79e1ca0f82bef11511a051f2460a3ee0e06", "filename": "src/test/ui/feature-gate-extern_in_paths.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fui%2Ffeature-gate-extern_in_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32db83b16e06cb5cca72d0e6a648a8008eda0fac/src%2Ftest%2Fui%2Ffeature-gate-extern_in_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-extern_in_paths.stderr?ref=32db83b16e06cb5cca72d0e6a648a8008eda0fac", "patch": "@@ -0,0 +1,10 @@\n+error: `extern` in paths is experimental (see issue #44660)\n+  --> $DIR/feature-gate-extern_in_paths.rs:14:13\n+   |\n+14 |     let _ = extern::std::vec::Vec::new(); //~ ERROR `extern` in paths is experimental\n+   |             ^^^^^^\n+   |\n+   = help: add #![feature(extern_in_paths)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}]}