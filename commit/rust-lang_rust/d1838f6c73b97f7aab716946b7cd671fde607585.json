{"sha": "d1838f6c73b97f7aab716946b7cd671fde607585", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxODM4ZjZjNzNiOTdmN2FhYjcxNjk0NmI3Y2Q2NzFmZGU2MDc1ODU=", "commit": {"author": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-19T13:12:28Z"}, "committer": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-19T13:12:28Z"}, "message": "Use intra-doc links for compare_exchange and compare_exchange_weak", "tree": {"sha": "6ea0ef66423934adfd7085cef557f6f843d7e46e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ea0ef66423934adfd7085cef557f6f843d7e46e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1838f6c73b97f7aab716946b7cd671fde607585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1838f6c73b97f7aab716946b7cd671fde607585", "html_url": "https://github.com/rust-lang/rust/commit/d1838f6c73b97f7aab716946b7cd671fde607585", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1838f6c73b97f7aab716946b7cd671fde607585/comments", "author": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "751e343ab2714bbbc4e2622d650f65466b98d676", "url": "https://api.github.com/repos/rust-lang/rust/commits/751e343ab2714bbbc4e2622d650f65466b98d676", "html_url": "https://github.com/rust-lang/rust/commit/751e343ab2714bbbc4e2622d650f65466b98d676"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "469dd0cbdd88611e4171023cd3d42d558706bc9b", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d1838f6c73b97f7aab716946b7cd671fde607585/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1838f6c73b97f7aab716946b7cd671fde607585/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=d1838f6c73b97f7aab716946b7cd671fde607585", "patch": "@@ -76,7 +76,7 @@ extern \"rust-intrinsic\" {\n     /// as both the `success` and `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n-    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n+    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n     pub fn atomic_cxchg<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -86,7 +86,7 @@ extern \"rust-intrinsic\" {\n     /// as both the `success` and `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n-    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n+    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n     pub fn atomic_cxchg_acq<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -98,7 +98,7 @@ extern \"rust-intrinsic\" {\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n-    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n+    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n     pub fn atomic_cxchg_rel<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -110,7 +110,7 @@ extern \"rust-intrinsic\" {\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n-    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n+    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n     pub fn atomic_cxchg_acqrel<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -120,7 +120,7 @@ extern \"rust-intrinsic\" {\n     /// as both the `success` and `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n-    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n+    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n     pub fn atomic_cxchg_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -132,7 +132,7 @@ extern \"rust-intrinsic\" {\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n-    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n+    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n     pub fn atomic_cxchg_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -144,7 +144,7 @@ extern \"rust-intrinsic\" {\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n-    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n+    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n     pub fn atomic_cxchg_failacq<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -156,7 +156,7 @@ extern \"rust-intrinsic\" {\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n-    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n+    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n     pub fn atomic_cxchg_acq_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -168,7 +168,7 @@ extern \"rust-intrinsic\" {\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n-    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n+    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n     pub fn atomic_cxchg_acqrel_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n     /// Stores a value if the current value is the same as the `old` value.\n@@ -179,7 +179,7 @@ extern \"rust-intrinsic\" {\n     /// as both the `success` and `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n     pub fn atomic_cxchgweak<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -189,7 +189,7 @@ extern \"rust-intrinsic\" {\n     /// as both the `success` and `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n     pub fn atomic_cxchgweak_acq<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -201,7 +201,7 @@ extern \"rust-intrinsic\" {\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n     pub fn atomic_cxchgweak_rel<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -213,7 +213,7 @@ extern \"rust-intrinsic\" {\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n     pub fn atomic_cxchgweak_acqrel<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -223,7 +223,7 @@ extern \"rust-intrinsic\" {\n     /// as both the `success` and `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n     pub fn atomic_cxchgweak_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -235,7 +235,7 @@ extern \"rust-intrinsic\" {\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n     pub fn atomic_cxchgweak_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -247,7 +247,7 @@ extern \"rust-intrinsic\" {\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n     pub fn atomic_cxchgweak_failacq<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -259,7 +259,7 @@ extern \"rust-intrinsic\" {\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n     pub fn atomic_cxchgweak_acq_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n@@ -271,7 +271,7 @@ extern \"rust-intrinsic\" {\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n     pub fn atomic_cxchgweak_acqrel_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n     /// Loads the current value of the pointer."}]}