{"sha": "62a4f91a5a7c8c89e3eb681e6218d637ef419181", "node_id": "C_kwDOAAsO6NoAKDYyYTRmOTFhNWE3YzhjODllM2ViNjgxZTYyMThkNjM3ZWY0MTkxODE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-03T19:14:15Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-06-03T16:46:19Z"}, "message": "Use serde_json for json error messages", "tree": {"sha": "4487a55c87bc85ded62f1ef497c3566549dd6036", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4487a55c87bc85ded62f1ef497c3566549dd6036"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62a4f91a5a7c8c89e3eb681e6218d637ef419181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62a4f91a5a7c8c89e3eb681e6218d637ef419181", "html_url": "https://github.com/rust-lang/rust/commit/62a4f91a5a7c8c89e3eb681e6218d637ef419181", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62a4f91a5a7c8c89e3eb681e6218d637ef419181/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449", "html_url": "https://github.com/rust-lang/rust/commit/fc1df4ff170ec137ecab7d7aa7f4dc894bb17449"}], "stats": {"total": 72, "additions": 39, "deletions": 33}, "files": [{"sha": "e0f6ee6c7915577208b49ec1a3c8af3f78cc80bc", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62a4f91a5a7c8c89e3eb681e6218d637ef419181/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/62a4f91a5a7c8c89e3eb681e6218d637ef419181/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=62a4f91a5a7c8c89e3eb681e6218d637ef419181", "patch": "@@ -3810,6 +3810,8 @@ dependencies = [\n  \"rustc_macros\",\n  \"rustc_serialize\",\n  \"rustc_span\",\n+ \"serde\",\n+ \"serde_json\",\n  \"termcolor\",\n  \"termize\",\n  \"tracing\",\n@@ -4025,6 +4027,7 @@ dependencies = [\n  \"rustc_serialize\",\n  \"rustc_span\",\n  \"rustc_target\",\n+ \"serde\",\n ]\n \n [[package]]"}, {"sha": "89557626057133ccbd2d623bcf7e46105d21521e", "filename": "compiler/rustc_errors/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a4f91a5a7c8c89e3eb681e6218d637ef419181/compiler%2Frustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/62a4f91a5a7c8c89e3eb681e6218d637ef419181/compiler%2Frustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2FCargo.toml?ref=62a4f91a5a7c8c89e3eb681e6218d637ef419181", "patch": "@@ -19,6 +19,8 @@ atty = \"0.2\"\n termcolor = \"1.0\"\n annotate-snippets = \"0.8.0\"\n termize = \"0.1.1\"\n+serde = { version = \"1.0.125\", features = [\"derive\"] }\n+serde_json = \"1.0.59\"\n \n [target.'cfg(windows)'.dependencies]\n winapi = { version = \"0.3\", features = [\"handleapi\", \"synchapi\", \"winbase\"] }"}, {"sha": "fff35ac6ac894be46a2ae26678a410b188661aab", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/62a4f91a5a7c8c89e3eb681e6218d637ef419181/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a4f91a5a7c8c89e3eb681e6218d637ef419181/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=62a4f91a5a7c8c89e3eb681e6218d637ef419181", "patch": "@@ -28,7 +28,7 @@ use std::path::Path;\n use std::sync::{Arc, Mutex};\n use std::vec;\n \n-use rustc_serialize::json::{as_json, as_pretty_json};\n+use serde::Serialize;\n \n #[cfg(test)]\n mod tests;\n@@ -126,9 +126,9 @@ impl Emitter for JsonEmitter {\n     fn emit_diagnostic(&mut self, diag: &crate::Diagnostic) {\n         let data = Diagnostic::from_errors_diagnostic(diag, self);\n         let result = if self.pretty {\n-            writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n+            writeln!(&mut self.dst, \"{}\", serde_json::to_string_pretty(&data).unwrap())\n         } else {\n-            writeln!(&mut self.dst, \"{}\", as_json(&data))\n+            writeln!(&mut self.dst, \"{}\", serde_json::to_string(&data).unwrap())\n         }\n         .and_then(|_| self.dst.flush());\n         if let Err(e) = result {\n@@ -139,9 +139,9 @@ impl Emitter for JsonEmitter {\n     fn emit_artifact_notification(&mut self, path: &Path, artifact_type: &str) {\n         let data = ArtifactNotification { artifact: path, emit: artifact_type };\n         let result = if self.pretty {\n-            writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n+            writeln!(&mut self.dst, \"{}\", serde_json::to_string_pretty(&data).unwrap())\n         } else {\n-            writeln!(&mut self.dst, \"{}\", as_json(&data))\n+            writeln!(&mut self.dst, \"{}\", serde_json::to_string(&data).unwrap())\n         }\n         .and_then(|_| self.dst.flush());\n         if let Err(e) = result {\n@@ -161,9 +161,9 @@ impl Emitter for JsonEmitter {\n             .collect();\n         let report = FutureIncompatReport { future_incompat_report: data };\n         let result = if self.pretty {\n-            writeln!(&mut self.dst, \"{}\", as_pretty_json(&report))\n+            writeln!(&mut self.dst, \"{}\", serde_json::to_string_pretty(&report).unwrap())\n         } else {\n-            writeln!(&mut self.dst, \"{}\", as_json(&report))\n+            writeln!(&mut self.dst, \"{}\", serde_json::to_string(&report).unwrap())\n         }\n         .and_then(|_| self.dst.flush());\n         if let Err(e) = result {\n@@ -175,9 +175,9 @@ impl Emitter for JsonEmitter {\n         let lint_level = lint_level.as_str();\n         let data = UnusedExterns { lint_level, unused_extern_names: unused_externs };\n         let result = if self.pretty {\n-            writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n+            writeln!(&mut self.dst, \"{}\", serde_json::to_string_pretty(&data).unwrap())\n         } else {\n-            writeln!(&mut self.dst, \"{}\", as_json(&data))\n+            writeln!(&mut self.dst, \"{}\", serde_json::to_string(&data).unwrap())\n         }\n         .and_then(|_| self.dst.flush());\n         if let Err(e) = result {\n@@ -204,7 +204,7 @@ impl Emitter for JsonEmitter {\n \n // The following data types are provided just for serialisation.\n \n-#[derive(Encodable)]\n+#[derive(Serialize)]\n struct Diagnostic {\n     /// The primary error message.\n     message: String,\n@@ -218,7 +218,7 @@ struct Diagnostic {\n     rendered: Option<String>,\n }\n \n-#[derive(Encodable)]\n+#[derive(Serialize)]\n struct DiagnosticSpan {\n     file_name: String,\n     byte_start: u32,\n@@ -245,7 +245,7 @@ struct DiagnosticSpan {\n     expansion: Option<Box<DiagnosticSpanMacroExpansion>>,\n }\n \n-#[derive(Encodable)]\n+#[derive(Serialize)]\n struct DiagnosticSpanLine {\n     text: String,\n \n@@ -255,7 +255,7 @@ struct DiagnosticSpanLine {\n     highlight_end: usize,\n }\n \n-#[derive(Encodable)]\n+#[derive(Serialize)]\n struct DiagnosticSpanMacroExpansion {\n     /// span where macro was applied to generate this code; note that\n     /// this may itself derive from a macro (if\n@@ -269,28 +269,28 @@ struct DiagnosticSpanMacroExpansion {\n     def_site_span: DiagnosticSpan,\n }\n \n-#[derive(Encodable)]\n+#[derive(Serialize)]\n struct DiagnosticCode {\n     /// The code itself.\n     code: String,\n     /// An explanation for the code.\n     explanation: Option<&'static str>,\n }\n \n-#[derive(Encodable)]\n+#[derive(Serialize)]\n struct ArtifactNotification<'a> {\n     /// The path of the artifact.\n     artifact: &'a Path,\n     /// What kind of artifact we're emitting.\n     emit: &'a str,\n }\n \n-#[derive(Encodable)]\n+#[derive(Serialize)]\n struct FutureBreakageItem {\n     diagnostic: Diagnostic,\n }\n \n-#[derive(Encodable)]\n+#[derive(Serialize)]\n struct FutureIncompatReport {\n     future_incompat_report: Vec<FutureBreakageItem>,\n }\n@@ -299,7 +299,7 @@ struct FutureIncompatReport {\n // doctest component (as well as cargo).\n // We could unify this struct the one in rustdoc but they have different\n // ownership semantics, so doing so would create wasteful allocations.\n-#[derive(Encodable)]\n+#[derive(Serialize)]\n struct UnusedExterns<'a, 'b, 'c> {\n     /// The severity level of the unused dependencies lint\n     lint_level: &'a str,"}, {"sha": "d940d14e1db91f26b8e803a48cdb10b9c4874b6f", "filename": "compiler/rustc_errors/src/json/tests.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/62a4f91a5a7c8c89e3eb681e6218d637ef419181/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a4f91a5a7c8c89e3eb681e6218d637ef419181/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs?ref=62a4f91a5a7c8c89e3eb681e6218d637ef419181", "patch": "@@ -5,12 +5,18 @@ use rustc_span::source_map::{FilePathMapping, SourceMap};\n \n use crate::emitter::{ColorConfig, HumanReadableErrorType};\n use crate::Handler;\n-use rustc_serialize::json;\n use rustc_span::{BytePos, Span};\n \n use std::str;\n \n-#[derive(Debug, PartialEq, Eq)]\n+use serde::Deserialize;\n+\n+#[derive(Deserialize, Debug, PartialEq, Eq)]\n+struct TestData {\n+    spans: Vec<SpanTestData>,\n+}\n+\n+#[derive(Deserialize, Debug, PartialEq, Eq)]\n struct SpanTestData {\n     pub byte_start: u32,\n     pub byte_end: u32,\n@@ -61,19 +67,11 @@ fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n \n         let bytes = output.lock().unwrap();\n         let actual_output = str::from_utf8(&bytes).unwrap();\n-        let actual_output = json::from_str(&actual_output).unwrap();\n-        let spans = actual_output[\"spans\"].as_array().unwrap();\n+        let actual_output: TestData = serde_json::from_str(actual_output).unwrap();\n+        let spans = actual_output.spans;\n         assert_eq!(spans.len(), 1);\n-        let obj = &spans[0];\n-        let actual_output = SpanTestData {\n-            byte_start: obj[\"byte_start\"].as_u64().unwrap() as u32,\n-            byte_end: obj[\"byte_end\"].as_u64().unwrap() as u32,\n-            line_start: obj[\"line_start\"].as_u64().unwrap() as u32,\n-            line_end: obj[\"line_end\"].as_u64().unwrap() as u32,\n-            column_start: obj[\"column_start\"].as_u64().unwrap() as u32,\n-            column_end: obj[\"column_end\"].as_u64().unwrap() as u32,\n-        };\n-        assert_eq!(expected_output, actual_output);\n+\n+        assert_eq!(expected_output, spans[0])\n     })\n }\n "}, {"sha": "2bf34d82f395c0c91772d319b781e97ef6c661aa", "filename": "compiler/rustc_lint_defs/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62a4f91a5a7c8c89e3eb681e6218d637ef419181/compiler%2Frustc_lint_defs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/62a4f91a5a7c8c89e3eb681e6218d637ef419181/compiler%2Frustc_lint_defs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2FCargo.toml?ref=62a4f91a5a7c8c89e3eb681e6218d637ef419181", "patch": "@@ -4,6 +4,7 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n+serde = { version = \"1.0.125\", features = [\"derive\"] }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_error_messages = { path = \"../rustc_error_messages\" }"}, {"sha": "913dc58a1025953f7c2ba130c0066ac3723d743a", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62a4f91a5a7c8c89e3eb681e6218d637ef419181/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a4f91a5a7c8c89e3eb681e6218d637ef419181/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=62a4f91a5a7c8c89e3eb681e6218d637ef419181", "patch": "@@ -14,6 +14,8 @@ use rustc_span::edition::Edition;\n use rustc_span::{sym, symbol::Ident, Span, Symbol};\n use rustc_target::spec::abi::Abi;\n \n+use serde::{Deserialize, Serialize};\n+\n pub mod builtin;\n \n #[macro_export]\n@@ -34,7 +36,7 @@ macro_rules! pluralize {\n /// All suggestions are marked with an `Applicability`. Tools use the applicability of a suggestion\n /// to determine whether it should be automatically applied or if the user should be consulted\n /// before applying the suggestion.\n-#[derive(Copy, Clone, Debug, PartialEq, Hash, Encodable, Decodable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Hash, Encodable, Decodable, Serialize, Deserialize)]\n pub enum Applicability {\n     /// The suggestion is definitely what the user intended, or maintains the exact meaning of the code.\n     /// This suggestion should be automatically applied."}]}