{"sha": "bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYzQ5YjEwOTI1MTJhZWU0ZmUzZDEzNDhjMzI1MGZjZGM4OTc4ZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-19T01:40:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-19T01:40:57Z"}, "message": "Auto merge of #40538 - aturon:stab-1.17, r=alexcrichton\n\nLibrary stabilizations for 1.17\n\nDetails of the stabilizations are available in the commits. Includes only library stabilizations; there are a couple of compiler stabilizations that should also be done for 1.17.\n\nWill need a beta backport, which I will create after approval.\n\nr? @alexcrichton", "tree": {"sha": "dc83cc0640869000912004d809bb4630c0442e69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc83cc0640869000912004d809bb4630c0442e69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "html_url": "https://github.com/rust-lang/rust/commit/bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4853584000c2e71710318b1ff3393b6be25c076a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4853584000c2e71710318b1ff3393b6be25c076a", "html_url": "https://github.com/rust-lang/rust/commit/4853584000c2e71710318b1ff3393b6be25c076a"}, {"sha": "1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4", "html_url": "https://github.com/rust-lang/rust/commit/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4"}], "stats": {"total": 190, "additions": 77, "deletions": 113}, "files": [{"sha": "1d616233881b4bb955247d17304323bed0e7d4e0", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -287,17 +287,15 @@ impl<T> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rc_raw)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// let x = Arc::new(10);\n     /// let x_ptr = Arc::into_raw(x);\n     /// assert_eq!(unsafe { *x_ptr }, 10);\n     /// ```\n-    #[unstable(feature = \"rc_raw\", issue = \"37197\")]\n-    pub fn into_raw(this: Self) -> *mut T {\n-        let ptr = unsafe { &mut (**this.ptr).data as *mut _ };\n+    #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n+    pub fn into_raw(this: Self) -> *const T {\n+        let ptr = unsafe { &(**this.ptr).data as *const _ };\n         mem::forget(this);\n         ptr\n     }\n@@ -315,8 +313,6 @@ impl<T> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rc_raw)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// let x = Arc::new(10);\n@@ -332,11 +328,14 @@ impl<T> Arc<T> {\n     ///\n     /// // The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!\n     /// ```\n-    #[unstable(feature = \"rc_raw\", issue = \"37197\")]\n-    pub unsafe fn from_raw(ptr: *mut T) -> Self {\n+    #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n+    pub unsafe fn from_raw(ptr: *const T) -> Self {\n         // To find the corresponding pointer to the `ArcInner` we need to subtract the offset of the\n         // `data` field from the pointer.\n-        Arc { ptr: Shared::new((ptr as *mut u8).offset(-offset_of!(ArcInner<T>, data)) as *mut _) }\n+        let ptr = (ptr as *const u8).offset(-offset_of!(ArcInner<T>, data));\n+        Arc {\n+            ptr: Shared::new(ptr as *const _),\n+        }\n     }\n }\n \n@@ -448,7 +447,7 @@ impl<T: ?Sized> Arc<T> {\n     // Non-inlined part of `drop`.\n     #[inline(never)]\n     unsafe fn drop_slow(&mut self) {\n-        let ptr = *self.ptr;\n+        let ptr = self.ptr.as_mut_ptr();\n \n         // Destroy the data at this time, even though we may not free the box\n         // allocation itself (there may still be weak pointers lying around).\n@@ -461,17 +460,13 @@ impl<T: ?Sized> Arc<T> {\n     }\n \n     #[inline]\n-    #[unstable(feature = \"ptr_eq\",\n-               reason = \"newly added\",\n-               issue = \"36497\")]\n+    #[stable(feature = \"ptr_eq\", since = \"1.17.0\")]\n     /// Returns true if the two `Arc`s point to the same value (not\n     /// just values that compare as equal).\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ptr_eq)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -628,7 +623,7 @@ impl<T: Clone> Arc<T> {\n         // As with `get_mut()`, the unsafety is ok because our reference was\n         // either unique to begin with, or became one upon cloning the contents.\n         unsafe {\n-            let inner = &mut **this.ptr;\n+            let inner = &mut *this.ptr.as_mut_ptr();\n             &mut inner.data\n         }\n     }\n@@ -671,7 +666,7 @@ impl<T: ?Sized> Arc<T> {\n             // the Arc itself to be `mut`, so we're returning the only possible\n             // reference to the inner data.\n             unsafe {\n-                let inner = &mut **this.ptr;\n+                let inner = &mut *this.ptr.as_mut_ptr();\n                 Some(&mut inner.data)\n             }\n         } else {"}, {"sha": "e9b59017692eb3907747cb5d3874215823c44e8f", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -364,17 +364,15 @@ impl<T> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rc_raw)]\n-    ///\n     /// use std::rc::Rc;\n     ///\n     /// let x = Rc::new(10);\n     /// let x_ptr = Rc::into_raw(x);\n     /// assert_eq!(unsafe { *x_ptr }, 10);\n     /// ```\n-    #[unstable(feature = \"rc_raw\", issue = \"37197\")]\n-    pub fn into_raw(this: Self) -> *mut T {\n-        let ptr = unsafe { &mut (**this.ptr).value as *mut _ };\n+    #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n+    pub fn into_raw(this: Self) -> *const T {\n+        let ptr = unsafe { &mut (*this.ptr.as_mut_ptr()).value as *const _ };\n         mem::forget(this);\n         ptr\n     }\n@@ -392,8 +390,6 @@ impl<T> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rc_raw)]\n-    ///\n     /// use std::rc::Rc;\n     ///\n     /// let x = Rc::new(10);\n@@ -409,11 +405,11 @@ impl<T> Rc<T> {\n     ///\n     /// // The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!\n     /// ```\n-    #[unstable(feature = \"rc_raw\", issue = \"37197\")]\n-    pub unsafe fn from_raw(ptr: *mut T) -> Self {\n+    #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n+    pub unsafe fn from_raw(ptr: *const T) -> Self {\n         // To find the corresponding pointer to the `RcBox` we need to subtract the offset of the\n         // `value` field from the pointer.\n-        Rc { ptr: Shared::new((ptr as *mut u8).offset(-offset_of!(RcBox<T>, value)) as *mut _) }\n+        Rc { ptr: Shared::new((ptr as *const u8).offset(-offset_of!(RcBox<T>, value)) as *const _) }\n     }\n }\n \n@@ -543,25 +539,21 @@ impl<T: ?Sized> Rc<T> {\n     #[stable(feature = \"rc_unique\", since = \"1.4.0\")]\n     pub fn get_mut(this: &mut Self) -> Option<&mut T> {\n         if Rc::is_unique(this) {\n-            let inner = unsafe { &mut **this.ptr };\n+            let inner = unsafe { &mut *this.ptr.as_mut_ptr() };\n             Some(&mut inner.value)\n         } else {\n             None\n         }\n     }\n \n     #[inline]\n-    #[unstable(feature = \"ptr_eq\",\n-               reason = \"newly added\",\n-               issue = \"36497\")]\n+    #[stable(feature = \"ptr_eq\", since = \"1.17.0\")]\n     /// Returns true if the two `Rc`s point to the same value (not\n     /// just values that compare as equal).\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ptr_eq)]\n-    ///\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -631,7 +623,7 @@ impl<T: Clone> Rc<T> {\n         // reference count is guaranteed to be 1 at this point, and we required\n         // the `Rc<T>` itself to be `mut`, so we're returning the only possible\n         // reference to the inner value.\n-        let inner = unsafe { &mut **this.ptr };\n+        let inner = unsafe { &mut *this.ptr.as_mut_ptr() };\n         &mut inner.value\n     }\n }\n@@ -677,7 +669,7 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {\n     /// ```\n     fn drop(&mut self) {\n         unsafe {\n-            let ptr = *self.ptr;\n+            let ptr = self.ptr.as_mut_ptr();\n \n             self.dec_strong();\n             if self.strong() == 0 {"}, {"sha": "53fe6b4bc9f4f6bbbbe1dc43d3fcce6e6085ee23", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -338,6 +338,7 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n }\n \n /// An iterator over a sub-range of BTreeMap's entries.\n+#[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct Range<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n     back: Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n@@ -351,6 +352,7 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Range<'a, K, V>\n }\n \n /// A mutable iterator over a sub-range of BTreeMap's entries.\n+#[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct RangeMut<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>,\n     back: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>,\n@@ -724,8 +726,6 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(btree_range, collections_bound)]\n-    ///\n     /// use std::collections::BTreeMap;\n     /// use std::collections::Bound::Included;\n     ///\n@@ -738,9 +738,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// }\n     /// assert_eq!(Some((&5, &\"b\")), map.range(4..).next());\n     /// ```\n-    #[unstable(feature = \"btree_range\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\",\n-               issue = \"27787\")]\n+    #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n     pub fn range<T: ?Sized, R>(&self, range: R) -> Range<K, V>\n         where T: Ord, K: Borrow<T>, R: RangeArgument<T>\n     {\n@@ -768,8 +766,6 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(btree_range)]\n-    ///\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map: BTreeMap<&str, i32> = [\"Alice\", \"Bob\", \"Carol\", \"Cheryl\"].iter()\n@@ -782,9 +778,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     ///     println!(\"{} => {}\", name, balance);\n     /// }\n     /// ```\n-    #[unstable(feature = \"btree_range\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\",\n-               issue = \"27787\")]\n+    #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n     pub fn range_mut<T: ?Sized, R>(&mut self, range: R) -> RangeMut<K, V>\n         where T: Ord, K: Borrow<T>, R: RangeArgument<T>\n     {"}, {"sha": "72d25f87bca9515858b9765f7dc047d90841ddc1", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -113,6 +113,7 @@ pub struct IntoIter<T> {\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`range`]: struct.BTreeSet.html#method.range\n #[derive(Debug)]\n+#[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct Range<'a, T: 'a> {\n     iter: ::btree_map::Range<'a, T, ()>,\n }\n@@ -264,8 +265,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(btree_range, collections_bound)]\n-    ///\n     /// use std::collections::BTreeSet;\n     /// use std::collections::Bound::Included;\n     ///\n@@ -278,9 +277,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// }\n     /// assert_eq!(Some(&5), set.range(4..).next());\n     /// ```\n-    #[unstable(feature = \"btree_range\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\",\n-               issue = \"27787\")]\n+    #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n     pub fn range<K: ?Sized, R>(&self, range: R) -> Range<T>\n         where K: Ord, T: Borrow<K>, R: RangeArgument<K>\n     {"}, {"sha": "10650dab583c392bb295e69f91425e3cdf645a58", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -129,14 +129,17 @@ mod std {\n }\n \n /// An endpoint of a range of keys.\n-#[unstable(feature = \"collections_bound\", issue = \"27787\")]\n+#[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n #[derive(Clone, Copy, Debug, Hash, PartialEq, Eq)]\n pub enum Bound<T> {\n     /// An inclusive bound.\n+    #[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n     Included(T),\n     /// An exclusive bound.\n+    #[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n     Excluded(T),\n     /// An infinite endpoint. Indicates that there is no bound in this direction.\n+    #[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n     Unbounded,\n }\n "}, {"sha": "f58c87b801f552852d2f7c4392971eeaf2d18c3c", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -142,7 +142,7 @@ impl<T> LinkedList<T> {\n \n             match self.head {\n                 None => self.tail = node,\n-                Some(head) => (**head).prev = node,\n+                Some(head) => (*head.as_mut_ptr()).prev = node,\n             }\n \n             self.head = node;\n@@ -154,12 +154,12 @@ impl<T> LinkedList<T> {\n     #[inline]\n     fn pop_front_node(&mut self) -> Option<Box<Node<T>>> {\n         self.head.map(|node| unsafe {\n-            let node = Box::from_raw(*node);\n+            let node = Box::from_raw(node.as_mut_ptr());\n             self.head = node.next;\n \n             match self.head {\n                 None => self.tail = None,\n-                Some(head) => (**head).prev = None,\n+                Some(head) => (*head.as_mut_ptr()).prev = None,\n             }\n \n             self.len -= 1;\n@@ -177,7 +177,7 @@ impl<T> LinkedList<T> {\n \n             match self.tail {\n                 None => self.head = node,\n-                Some(tail) => (**tail).next = node,\n+                Some(tail) => (*tail.as_mut_ptr()).next = node,\n             }\n \n             self.tail = node;\n@@ -189,12 +189,12 @@ impl<T> LinkedList<T> {\n     #[inline]\n     fn pop_back_node(&mut self) -> Option<Box<Node<T>>> {\n         self.tail.map(|node| unsafe {\n-            let node = Box::from_raw(*node);\n+            let node = Box::from_raw(node.as_mut_ptr());\n             self.tail = node.prev;\n \n             match self.tail {\n                 None => self.head = None,\n-                Some(tail) => (**tail).next = None,\n+                Some(tail) => (*tail.as_mut_ptr()).next = None,\n             }\n \n             self.len -= 1;\n@@ -269,8 +269,8 @@ impl<T> LinkedList<T> {\n             Some(tail) => {\n                 if let Some(other_head) = other.head.take() {\n                     unsafe {\n-                        (**tail).next = Some(other_head);\n-                        (**other_head).prev = Some(tail);\n+                        (*tail.as_mut_ptr()).next = Some(other_head);\n+                        (*other_head.as_mut_ptr()).prev = Some(tail);\n                     }\n \n                     self.tail = other.tail.take();\n@@ -484,7 +484,7 @@ impl<T> LinkedList<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn front_mut(&mut self) -> Option<&mut T> {\n-        self.head.map(|node| unsafe { &mut (**node).element })\n+        self.head.map(|node| unsafe { &mut (*node.as_mut_ptr()).element })\n     }\n \n     /// Provides a reference to the back element, or `None` if the list is\n@@ -530,7 +530,7 @@ impl<T> LinkedList<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn back_mut(&mut self) -> Option<&mut T> {\n-        self.tail.map(|node| unsafe { &mut (**node).element })\n+        self.tail.map(|node| unsafe { &mut (*node.as_mut_ptr()).element })\n     }\n \n     /// Adds an element first in the list.\n@@ -675,9 +675,9 @@ impl<T> LinkedList<T> {\n         let second_part_head;\n \n         unsafe {\n-            second_part_head = (**split_node.unwrap()).next.take();\n+            second_part_head = (*split_node.unwrap().as_mut_ptr()).next.take();\n             if let Some(head) = second_part_head {\n-                (**head).prev = None;\n+                (*head.as_mut_ptr()).prev = None;\n             }\n         }\n \n@@ -816,7 +816,7 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n             None\n         } else {\n             self.head.map(|node| unsafe {\n-                let node = &mut **node;\n+                let node = &mut *node.as_mut_ptr();\n                 self.len -= 1;\n                 self.head = node.next;\n                 &mut node.element\n@@ -838,7 +838,7 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n             None\n         } else {\n             self.tail.map(|node| unsafe {\n-                let node = &mut **node;\n+                let node = &mut *node.as_mut_ptr();\n                 self.len -= 1;\n                 self.tail = node.prev;\n                 &mut node.element\n@@ -896,8 +896,8 @@ impl<'a, T> IterMut<'a, T> {\n                     element: element,\n                 })));\n \n-                (**prev).next = node;\n-                (**head).prev = node;\n+                (*prev.as_mut_ptr()).next = node;\n+                (*head.as_mut_ptr()).prev = node;\n \n                 self.list.len += 1;\n             },\n@@ -929,7 +929,7 @@ impl<'a, T> IterMut<'a, T> {\n         if self.len == 0 {\n             None\n         } else {\n-            self.head.map(|node| unsafe { &mut (**node).element })\n+            self.head.map(|node| unsafe { &mut (*node.as_mut_ptr()).element })\n         }\n     }\n }"}, {"sha": "31e4d001397bf51fc93b148eca34d09a1bb98d52", "filename": "src/libcollections/range.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollections%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollections%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Frange.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -29,7 +29,6 @@ pub trait RangeArgument<T: ?Sized> {\n     /// ```\n     /// #![feature(collections)]\n     /// #![feature(collections_range)]\n-    /// #![feature(collections_bound)]\n     ///\n     /// extern crate collections;\n     ///\n@@ -52,7 +51,6 @@ pub trait RangeArgument<T: ?Sized> {\n     /// ```\n     /// #![feature(collections)]\n     /// #![feature(collections_range)]\n-    /// #![feature(collections_bound)]\n     ///\n     /// extern crate collections;\n     ///"}, {"sha": "7b408af13aa2f4b435ad64beed14b0871dd77b8e", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -2120,7 +2120,7 @@ unsafe impl<#[may_dangle] T> Drop for IntoIter<T> {\n         for _x in self.by_ref() {}\n \n         // RawVec handles deallocation\n-        let _ = unsafe { RawVec::from_raw_parts(*self.buf, self.cap) };\n+        let _ = unsafe { RawVec::from_raw_parts(self.buf.as_mut_ptr(), self.cap) };\n     }\n }\n \n@@ -2185,7 +2185,7 @@ impl<'a, T> Drop for Drain<'a, T> {\n \n         if self.tail_len > 0 {\n             unsafe {\n-                let source_vec = &mut **self.vec;\n+                let source_vec = &mut *self.vec.as_mut_ptr();\n                 // memmove back untouched tail, update to new length\n                 let start = source_vec.len();\n                 let tail = self.tail_start;"}, {"sha": "6a04d47a345e8e93de4e1c5e9dc6ae77ca14c69a", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -2125,7 +2125,7 @@ impl<'a, T: 'a> Drop for Drain<'a, T> {\n     fn drop(&mut self) {\n         for _ in self.by_ref() {}\n \n-        let source_deque = unsafe { &mut **self.deque };\n+        let source_deque = unsafe { &mut *self.deque.as_mut_ptr() };\n \n         // T = source_deque_tail; H = source_deque_head; t = drain_tail; h = drain_head\n         //"}, {"sha": "618eb386c0f4c88887b1baab32c2cc553ce64a69", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -13,11 +13,9 @@\n #![feature(binary_heap_extras)]\n #![feature(binary_heap_peek_mut_pop)]\n #![feature(box_syntax)]\n-#![feature(btree_range)]\n #![feature(inclusive_range_syntax)]\n #![feature(collection_placement)]\n #![feature(collections)]\n-#![feature(collections_bound)]\n #![feature(const_fn)]\n #![feature(exact_size_is_empty)]\n #![feature(pattern)]"}, {"sha": "0186d9727828d0420a0d048d0bcd8037bf470901", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -394,7 +394,6 @@ impl<T> Cell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(move_cell)]\n     /// use std::cell::Cell;\n     ///\n     /// let c1 = Cell::new(5i32);\n@@ -404,7 +403,7 @@ impl<T> Cell<T> {\n     /// assert_eq!(5, c2.get());\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"move_cell\", issue = \"39264\")]\n+    #[stable(feature = \"move_cell\", since = \"1.17.0\")]\n     pub fn swap(&self, other: &Self) {\n         if ptr::eq(self, other) {\n             return;\n@@ -419,15 +418,14 @@ impl<T> Cell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(move_cell)]\n     /// use std::cell::Cell;\n     ///\n     /// let c = Cell::new(5);\n     /// let old = c.replace(10);\n     ///\n     /// assert_eq!(5, old);\n     /// ```\n-    #[unstable(feature = \"move_cell\", issue = \"39264\")]\n+    #[stable(feature = \"move_cell\", since = \"1.17.0\")]\n     pub fn replace(&self, val: T) -> T {\n         mem::replace(unsafe { &mut *self.value.get() }, val)\n     }\n@@ -437,15 +435,14 @@ impl<T> Cell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(move_cell)]\n     /// use std::cell::Cell;\n     ///\n     /// let c = Cell::new(5);\n     /// let five = c.into_inner();\n     ///\n     /// assert_eq!(five, 5);\n     /// ```\n-    #[unstable(feature = \"move_cell\", issue = \"39264\")]\n+    #[stable(feature = \"move_cell\", since = \"1.17.0\")]\n     pub fn into_inner(self) -> T {\n         unsafe { self.value.into_inner() }\n     }\n@@ -457,7 +454,6 @@ impl<T: Default> Cell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(move_cell)]\n     /// use std::cell::Cell;\n     ///\n     /// let c = Cell::new(5);\n@@ -466,7 +462,7 @@ impl<T: Default> Cell<T> {\n     /// assert_eq!(five, 5);\n     /// assert_eq!(c.into_inner(), 0);\n     /// ```\n-    #[unstable(feature = \"move_cell\", issue = \"39264\")]\n+    #[stable(feature = \"move_cell\", since = \"1.17.0\")]\n     pub fn take(&self) -> T {\n         self.replace(Default::default())\n     }"}, {"sha": "cb39796eecd7ddfea530e25c3051c041e898b8e6", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -255,8 +255,6 @@ impl Ordering {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ordering_chaining)]\n-    ///\n     /// use std::cmp::Ordering;\n     ///\n     /// let result = Ordering::Equal.then(Ordering::Less);\n@@ -278,7 +276,7 @@ impl Ordering {\n     /// assert_eq!(result, Ordering::Less);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"ordering_chaining\", issue = \"37053\")]\n+    #[stable(feature = \"ordering_chaining\", since = \"1.17.0\")]\n     pub fn then(self, other: Ordering) -> Ordering {\n         match self {\n             Equal => other,\n@@ -294,8 +292,6 @@ impl Ordering {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ordering_chaining)]\n-    ///\n     /// use std::cmp::Ordering;\n     ///\n     /// let result = Ordering::Equal.then_with(|| Ordering::Less);\n@@ -317,7 +313,7 @@ impl Ordering {\n     /// assert_eq!(result, Ordering::Less);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"ordering_chaining\", issue = \"37053\")]\n+    #[stable(feature = \"ordering_chaining\", since = \"1.17.0\")]\n     pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {\n         match self {\n             Equal => f(),"}, {"sha": "909e44df20abbb67d8edf0eb749fba5791600a6d", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -161,8 +161,6 @@ pub unsafe fn read<T>(src: *const T) -> T {\n /// Basic usage:\n ///\n /// ```\n-/// #![feature(ptr_unaligned)]\n-///\n /// let x = 12;\n /// let y = &x as *const i32;\n ///\n@@ -171,7 +169,7 @@ pub unsafe fn read<T>(src: *const T) -> T {\n /// }\n /// ```\n #[inline(always)]\n-#[unstable(feature = \"ptr_unaligned\", issue = \"37955\")]\n+#[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n     let mut tmp: T = mem::uninitialized();\n     copy_nonoverlapping(src as *const u8,\n@@ -243,8 +241,6 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n /// Basic usage:\n ///\n /// ```\n-/// #![feature(ptr_unaligned)]\n-///\n /// let mut x = 0;\n /// let y = &mut x as *mut i32;\n /// let z = 12;\n@@ -255,7 +251,7 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n /// }\n /// ```\n #[inline]\n-#[unstable(feature = \"ptr_unaligned\", issue = \"37955\")]\n+#[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n     copy_nonoverlapping(&src as *const T as *const u8,\n                         dst as *mut u8,\n@@ -662,7 +658,6 @@ impl<T: ?Sized> Eq for *mut T {}\n /// # Examples\n ///\n /// ```\n-/// #![feature(ptr_eq)]\n /// use std::ptr;\n ///\n /// let five = 5;\n@@ -677,7 +672,7 @@ impl<T: ?Sized> Eq for *mut T {}\n /// assert!(ptr::eq(five_ref, same_five_ref));\n /// assert!(!ptr::eq(five_ref, other_five_ref));\n /// ```\n-#[unstable(feature = \"ptr_eq\", reason = \"newly added\", issue = \"36497\")]\n+#[stable(feature = \"ptr_eq\", since = \"1.17.0\")]\n #[inline]\n pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {\n     a == b\n@@ -972,11 +967,19 @@ impl<T: ?Sized> Shared<T> {\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n-    pub unsafe fn new(ptr: *mut T) -> Self {\n+    pub unsafe fn new(ptr: *const T) -> Self {\n         Shared { pointer: NonZero::new(ptr), _marker: PhantomData }\n     }\n }\n \n+#[unstable(feature = \"shared\", issue = \"27730\")]\n+impl<T: ?Sized> Shared<T> {\n+    /// Acquires the underlying pointer as a `*mut` pointer.\n+    pub unsafe fn as_mut_ptr(&self) -> *mut T {\n+        **self as _\n+    }\n+}\n+\n #[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> Clone for Shared<T> {\n     fn clone(&self) -> Self {\n@@ -992,10 +995,10 @@ impl<T: ?Sized, U: ?Sized> CoerceUnsized<Shared<U>> for Shared<T> where T: Unsiz\n \n #[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> Deref for Shared<T> {\n-    type Target = *mut T;\n+    type Target = *const T;\n \n     #[inline]\n-    fn deref(&self) -> &*mut T {\n+    fn deref(&self) -> &*const T {\n         unsafe { mem::transmute(&*self.pointer) }\n     }\n }"}, {"sha": "00ff2fd2ce5efae5ca2a711dd0e0c200ca780a40", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -803,12 +803,11 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     /// Basic usage:\n     ///\n     /// ```{.should_panic}\n-    /// # #![feature(result_expect_err)]\n     /// let x: Result<u32, &str> = Ok(10);\n     /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"result_expect_err\", issue = \"39041\")]\n+    #[stable(feature = \"result_expect_err\", since = \"1.17.0\")]\n     pub fn expect_err(self, msg: &str) -> E {\n         match self {\n             Ok(t) => unwrap_failed(msg, t),"}, {"sha": "d84a1e227560ea45383e42759c491dee9c8564dd", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -23,17 +23,13 @@\n #![feature(nonzero)]\n #![feature(rand)]\n #![feature(raw)]\n-#![feature(result_expect_err)]\n #![feature(sip_hash_13)]\n #![feature(slice_patterns)]\n #![feature(step_by)]\n #![feature(test)]\n #![feature(try_from)]\n #![feature(unicode)]\n #![feature(unique)]\n-#![feature(ordering_chaining)]\n-#![feature(ptr_unaligned)]\n-#![feature(move_cell)]\n #![feature(fmt_internals)]\n \n extern crate core;"}, {"sha": "29fbcb70756ba08adeca9c87caff42d202225183", "filename": "src/librustc_data_structures/array_vec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibrustc_data_structures%2Farray_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibrustc_data_structures%2Farray_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Farray_vec.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -248,7 +248,7 @@ impl<'a, A: Array> Drop for Drain<'a, A> {\n \n         if self.tail_len > 0 {\n             unsafe {\n-                let source_array_vec = &mut **self.array_vec;\n+                let source_array_vec = &mut *self.array_vec.as_mut_ptr();\n                 // memmove back untouched tail, update to new length\n                 let start = source_array_vec.len();\n                 let tail = self.tail_start;\n@@ -317,4 +317,3 @@ impl<T> Default for ManuallyDrop<T> {\n         ManuallyDrop::new()\n     }\n }\n-"}, {"sha": "8ecfd75dc95a922e00f9e127bb6bb53b14b0b92a", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -27,7 +27,6 @@\n \n #![feature(shared)]\n #![feature(collections_range)]\n-#![feature(collections_bound)]\n #![cfg_attr(stage0,feature(field_init_shorthand))]\n #![feature(nonzero)]\n #![feature(rustc_private)]"}, {"sha": "211605bef1ee092aa8dc9201b78f1dc49fbcffb4", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -1154,7 +1154,7 @@ impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     fn next(&mut self) -> Option<(SafeHash, K, V)> {\n         self.iter.next().map(|bucket| {\n             unsafe {\n-                (**self.table).size -= 1;\n+                (*self.table.as_mut_ptr()).size -= 1;\n                 let (k, v) = ptr::read(bucket.pair);\n                 (SafeHash { hash: ptr::replace(bucket.hash, EMPTY_BUCKET) }, k, v)\n             }"}, {"sha": "206a37b8e5db83e48b2e61d292b71e82bd6990d8", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -245,7 +245,6 @@\n #![feature(char_escape_debug)]\n #![feature(char_internals)]\n #![feature(collections)]\n-#![feature(collections_bound)]\n #![feature(collections_range)]\n #![feature(compiler_builtins_lib)]\n #![feature(const_fn)]"}, {"sha": "97c48ee59034135b8cc3de89d0dfb13ea45b2c9b", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc49b1092512aee4fe3d1348c3250fcdc8978d3/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=bfc49b1092512aee4fe3d1348c3250fcdc8978d3", "patch": "@@ -1032,7 +1032,7 @@ pub fn exit(code: i32) -> ! {\n /// will be run. If a clean shutdown is needed it is recommended to only call\n /// this function at a known point where there are no more destructors left\n /// to run.\n-#[unstable(feature = \"process_abort\", issue = \"37838\")]\n+#[stable(feature = \"process_abort\", since = \"1.17.0\")]\n pub fn abort() -> ! {\n     unsafe { ::sys::abort_internal() };\n }"}]}