{"sha": "6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMWMwNjM3Y2U0NGFlZWE2YzYwNTI3ZjRjMGU3ZmIzM2YyYmNkMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-23T21:44:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-23T21:44:37Z"}, "message": "Auto merge of #52175 - fpoli:testsuite-callsite-span, r=petrochenkov\n\nMatch errors using the callsite of macro expansions\n\nFix for issue #51848", "tree": {"sha": "25e3c072744828f6dbfceb3a09c0328176e5afbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25e3c072744828f6dbfceb3a09c0328176e5afbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "html_url": "https://github.com/rust-lang/rust/commit/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00204c2f52ec0280bda17de347c79f88e9c6b479", "url": "https://api.github.com/repos/rust-lang/rust/commits/00204c2f52ec0280bda17de347c79f88e9c6b479", "html_url": "https://github.com/rust-lang/rust/commit/00204c2f52ec0280bda17de347c79f88e9c6b479"}, {"sha": "8ec9d7242c3352fbc617d907bec3632215811356", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec9d7242c3352fbc617d907bec3632215811356", "html_url": "https://github.com/rust-lang/rust/commit/8ec9d7242c3352fbc617d907bec3632215811356"}], "stats": {"total": 186, "additions": 137, "deletions": 49}, "files": [{"sha": "df7d5fe927ed9b8796f792eac256065dd8c68b81", "filename": "src/test/ui/codemap_tests/bad-format-args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    format!();\n-    format!(\"\" 1);\n-    format!(\"\", 1 1);\n+    format!(); //~ ERROR requires at least a format string argument\n+    format!(\"\" 1); //~ ERROR expected token: `,`\n+    format!(\"\", 1 1); //~ ERROR expected token: `,`\n }"}, {"sha": "d0cdeb2178f15bf9a692908f844c4725d3f4339b", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -1,23 +1,23 @@\n error: requires at least a format string argument\n   --> $DIR/bad-format-args.rs:12:5\n    |\n-LL |     format!();\n+LL |     format!(); //~ ERROR requires at least a format string argument\n    |     ^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:13:5\n    |\n-LL |     format!(\"\" 1);\n+LL |     format!(\"\" 1); //~ ERROR expected token: `,`\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:14:5\n    |\n-LL |     format!(\"\", 1 1);\n+LL |     format!(\"\", 1 1); //~ ERROR expected token: `,`\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "9a6fa3e69206f2dd65a2942c457215dc6ba22df4", "filename": "src/test/ui/cross-crate-macro-backtrace/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: in format string\n-\n // aux-build:extern_macro_crate.rs\n #[macro_use(myprintln, myprint)]\n extern crate extern_macro_crate;\n \n fn main() {\n     myprintln!(\"{}\");\n+    //~^ ERROR in format string\n }"}, {"sha": "bffd76ca587a089dfc596d081a439a0801037aff", "filename": "src/test/ui/cross-crate-macro-backtrace/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -1,5 +1,5 @@\n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/main.rs:18:5\n+  --> $DIR/main.rs:16:5\n    |\n LL |     myprintln!(\"{}\");\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "659075acd8802f59513742856b6ea91902a3cc2e", "filename": "src/test/ui/cross-file-errors/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fcross-file-errors%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fcross-file-errors%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-file-errors%2Fmain.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -13,4 +13,5 @@ mod underscore;\n \n fn main() {\n     underscore!();\n+    //~^ ERROR expected expression, found reserved identifier `_`\n }"}, {"sha": "41d5ebd3e7db12fa5acdd8f5646891c10b85a859", "filename": "src/test/ui/edition-keywords-2015-2018-expansion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -17,7 +17,7 @@\n extern crate edition_kw_macro_2018;\n \n mod one_async {\n-    produces_async! {} // ERROR expected identifier, found reserved keyword\n+    produces_async! {} //~ ERROR expected identifier, found reserved keyword\n }\n mod two_async {\n     produces_async_raw! {} // OK"}, {"sha": "5852d56e6d37438c1437bfded9ecba6be2a9510c", "filename": "src/test/ui/edition-keywords-2015-2018-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -1,7 +1,7 @@\n error: expected identifier, found reserved keyword `async`\n   --> $DIR/edition-keywords-2015-2018-expansion.rs:20:5\n    |\n-LL |     produces_async! {} // ERROR expected identifier, found reserved keyword\n+LL |     produces_async! {} //~ ERROR expected identifier, found reserved keyword\n    |     ^^^^^^^^^^^^^^^^^^ expected identifier, found reserved keyword\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "a1ae1b5d0046a24183e9b4917ddcf6b05248e6d6", "filename": "src/test/ui/edition-keywords-2018-2018-expansion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-expansion.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -17,7 +17,7 @@\n extern crate edition_kw_macro_2018;\n \n mod one_async {\n-    produces_async! {} // ERROR expected identifier, found reserved keyword `async`\n+    produces_async! {} //~ ERROR expected identifier, found reserved keyword `async`\n }\n mod two_async {\n     produces_async_raw! {} // OK"}, {"sha": "91d0b2d30b5f99d9e34ba5bd26eba28ac4048ad4", "filename": "src/test/ui/edition-keywords-2018-2018-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-expansion.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -1,7 +1,7 @@\n error: expected identifier, found reserved keyword `async`\n   --> $DIR/edition-keywords-2018-2018-expansion.rs:20:5\n    |\n-LL |     produces_async! {} // ERROR expected identifier, found reserved keyword `async`\n+LL |     produces_async! {} //~ ERROR expected identifier, found reserved keyword `async`\n    |     ^^^^^^^^^^^^^^^^^^ expected identifier, found reserved keyword\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "f27eed59b8f989ad4cae5bd7194aa5fa31f4c2dd", "filename": "src/test/ui/hygiene/intercrate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -12,12 +12,11 @@\n \n // aux-build:intercrate.rs\n \n-// error-pattern:type `fn() -> u32 {intercrate::foo::bar::f}` is private\n-\n #![feature(decl_macro)]\n \n extern crate intercrate;\n \n fn main() {\n     assert_eq!(intercrate::foo::m!(), 1);\n+    //~^ ERROR type `fn() -> u32 {intercrate::foo::bar::f}` is private\n }"}, {"sha": "b0792412aa0ace2cc6616a68766236766692712f", "filename": "src/test/ui/hygiene/intercrate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -1,5 +1,5 @@\n error: type `fn() -> u32 {intercrate::foo::bar::f}` is private\n-  --> $DIR/intercrate.rs:22:16\n+  --> $DIR/intercrate.rs:20:16\n    |\n LL |     assert_eq!(intercrate::foo::m!(), 1);\n    |                ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "0a4bdb74807c73d842bed9e436a51ab0a12bfc27", "filename": "src/test/ui/hygiene/local_inner_macros_disabled.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -11,11 +11,10 @@\n // `local_inner_macros` has no effect if `feature(use_extern_macros)` is not enabled\n \n // aux-build:local_inner_macros.rs\n-// error-pattern: cannot find macro `helper2!` in this scope\n \n #[macro_use(public_macro)]\n extern crate local_inner_macros;\n \n-public_macro!();\n+public_macro!(); //~ ERROR cannot find macro `helper2!` in this scope\n \n fn main() {}"}, {"sha": "3dcd03b6f42e173592bc14a97408733d49cec299", "filename": "src/test/ui/hygiene/local_inner_macros_disabled.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -1,7 +1,7 @@\n error: cannot find macro `helper2!` in this scope\n-  --> $DIR/local_inner_macros_disabled.rs:19:1\n+  --> $DIR/local_inner_macros_disabled.rs:18:1\n    |\n-LL | public_macro!();\n+LL | public_macro!(); //~ ERROR cannot find macro `helper2!` in this scope\n    | ^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "6607e1903b6324b04783c0f27f90c38524194710", "filename": "src/test/ui/issue-13446.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-13446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-13446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13446.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -11,8 +11,7 @@\n \n // Used to cause ICE\n \n-// error-pattern: mismatched types\n-\n static VEC: [u32; 256] = vec![];\n+//~^ ERROR mismatched types\n \n fn main() {}"}, {"sha": "110bb4b83db46da39ea4cf52b1f9fc194a83d730", "filename": "src/test/ui/issue-13446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-13446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-13446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13446.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-13446.rs:16:26\n+  --> $DIR/issue-13446.rs:14:26\n    |\n LL | static VEC: [u32; 256] = vec![];\n    |                          ^^^^^^ expected array of 256 elements, found struct `std::vec::Vec`"}, {"sha": "38b102c7e3e6b663a3d60a4bb1dadcff2c106146", "filename": "src/test/ui/issue-16966.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-16966.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-16966.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-16966.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:type annotations needed\n fn main() {\n-    panic!(\n-        std::default::Default::default()\n-    );\n+    panic!(std::default::Default::default());\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "a26910e0146fa30cecc104b48bb3f32e21ea2449", "filename": "src/test/ui/issue-16966.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-16966.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -1,10 +1,8 @@\n error[E0282]: type annotations needed\n-  --> $DIR/issue-16966.rs:13:5\n+  --> $DIR/issue-16966.rs:12:5\n    |\n-LL | /     panic!(\n-LL | |         std::default::Default::default()\n-LL | |     );\n-   | |______^ cannot infer type for `M`\n+LL |     panic!(std::default::Default::default());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for `M`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "60e83138c76e9351efee926d9c8d057f6de2bbe2", "filename": "src/test/ui/issue-32829.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-32829.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-32829.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-32829.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: calls in statics are limited\n-\n static S : u64 = { { panic!(\"foo\"); 0 } };\n+//~^ ERROR calls in statics are limited\n \n fn main() {\n     println!(\"{:?}\", S);"}, {"sha": "30b6a6429046c0877f4d9a4a498ac9a9a4bcb2b1", "filename": "src/test/ui/issue-32829.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-32829.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-32829.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-32829.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -1,5 +1,5 @@\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-32829.rs:13:22\n+  --> $DIR/issue-32829.rs:11:22\n    |\n LL | static S : u64 = { { panic!(\"foo\"); 0 } };\n    |                      ^^^^^^^^^^^^^^"}, {"sha": "6fd680c1519168fecbe41c22c54fc805539f6264", "filename": "src/test/ui/issue-50577.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-50577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-50577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50577.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -11,5 +11,6 @@\n fn main() {\n     enum Foo {\n         Drop = assert_eq!(1, 1)\n+        //~^ ERROR if may be missing an else clause\n     }\n }"}, {"sha": "ec90d3f62d232ad13376748598b84182d7b5ba74", "filename": "src/test/ui/issue-51848.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-51848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-51848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51848.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// In case of macro expansion, the errors should be matched using the deepest callsite in the\n+// macro call stack whose span is in the current file\n+\n+macro_rules! macro_with_error {\n+    ( ) => {\n+        println!(\"{\"); //~ ERROR invalid\n+    };\n+}\n+\n+fn foo() {\n+\n+}\n+\n+fn main() {\n+    macro_with_error!();\n+    //^ In case of a local macro we want the error to be matched in the macro definition, not here\n+\n+    println!(\"}\"); //~ ERROR invalid\n+    //^ In case of an external macro we want the error to be matched here\n+}"}, {"sha": "8e5001dca3386074c92d937d0fd7999fe4ce854f", "filename": "src/test/ui/issue-51848.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-51848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fissue-51848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51848.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -0,0 +1,21 @@\n+error: invalid format string: expected `'}'` but string was terminated\n+  --> $DIR/issue-51848.rs:16:20\n+   |\n+LL |         println!(\"{\"); //~ ERROR invalid\n+   |                    ^ expected `'}'` in format string\n+...\n+LL |     macro_with_error!();\n+   |     -------------------- in this macro invocation\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/issue-51848.rs:28:15\n+   |\n+LL |     println!(\"}\"); //~ ERROR invalid\n+   |               ^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a485c80f3b0d81e0913d2fa36d4f5d13da57555f", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -5,6 +5,7 @@ LL |     let mut x = vec![1].iter();\n    |                 ^^^^^^^       - temporary value only lives until here\n    |                 |\n    |                 temporary value does not live long enough\n+LL |     //~^ ERROR borrowed value does not live long enough\n LL |     x.use_mut();\n    |     - borrow later used here\n    |"}, {"sha": "37d6e35182827f4e76107ef36019306f0279e3e0", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -10,6 +10,7 @@\n \n fn f() {\n     let mut x = vec![1].iter();\n+    //~^ ERROR borrowed value does not live long enough\n     x.use_mut();\n }\n "}, {"sha": "a7ff1fd9d0a73706b10ebca311e3b8f87d4eb425", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -5,7 +5,7 @@ LL |     let mut x = vec![1].iter();\n    |                 ^^^^^^^       - temporary value dropped here while still borrowed\n    |                 |\n    |                 temporary value does not live long enough\n-LL |     x.use_mut();\n+...\n LL | }\n    | - temporary value needs to live until here\n    |"}, {"sha": "cf6a1f7b3b4d7cc1d93a91db4da5c1fc235008f1", "filename": "src/test/ui/reachable/expr_again.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_again.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_again.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_again.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -16,5 +16,6 @@ fn main() {\n     let x = loop {\n         continue;\n         println!(\"hi\");\n+        //~^ ERROR unreachable statement\n     };\n }"}, {"sha": "1f74f61ce2a2b40b97806bb1e172f3eef90c1505", "filename": "src/test/ui/reachable/expr_block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_block.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -33,6 +33,7 @@ fn c() {\n     let x = {\n         return;\n         println!(\"foo\");\n+        //~^ ERROR unreachable statement\n         22\n     };\n }"}, {"sha": "4b540ab5b7e67459096577bb3d3f75833ee5242b", "filename": "src/test/ui/reachable/expr_if.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -35,6 +35,7 @@ fn baz() {\n     // As the next action to be taken after the if arms, we should\n     // report the `println!` as unreachable:\n     println!(\"But I am.\");\n+    //~^ ERROR unreachable statement\n }\n \n fn main() { }"}, {"sha": "41394f204842960b34066afbf74fabdf15f4f05d", "filename": "src/test/ui/reachable/expr_loop.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -16,6 +16,7 @@\n fn a() {\n     loop { return; }\n     println!(\"I am dead.\");\n+    //~^ ERROR unreachable statement\n }\n \n fn b() {\n@@ -28,6 +29,7 @@ fn b() {\n fn c() {\n     loop { return; }\n     println!(\"I am dead.\");\n+    //~^ ERROR unreachable statement\n }\n \n fn d() {\n@@ -38,6 +40,7 @@ fn d() {\n fn e() {\n     loop { 'middle: loop { loop { break 'middle; } } }\n     println!(\"I am dead.\");\n+    //~^ ERROR unreachable statement\n }\n \n fn main() { }"}, {"sha": "0208972a3dfb2215dd738e11c4a36580e8ed6d75", "filename": "src/test/ui/reachable/expr_loop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -12,15 +12,15 @@ LL | #![deny(unreachable_code)]\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_loop.rs:30:5\n+  --> $DIR/expr_loop.rs:31:5\n    |\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_loop.rs:40:5\n+  --> $DIR/expr_loop.rs:42:5\n    |\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "2faa262d11036d08b400ec3b00c8ff195ce4c708", "filename": "src/test/ui/reachable/expr_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -22,6 +22,7 @@ fn a() {\n fn b() {\n     match () { () => return }\n     println!(\"I am dead\");\n+    //~^ ERROR unreachable statement\n }\n \n fn c() {\n@@ -32,6 +33,7 @@ fn c() {\n fn d() {\n     match () { () if false => return, () => return }\n     println!(\"I am dead\");\n+    //~^ ERROR unreachable statement\n }\n \n fn e() {"}, {"sha": "240341232d8c0e0f3df87317063a260f0b5f4de2", "filename": "src/test/ui/reachable/expr_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -19,7 +19,7 @@ LL |     println!(\"I am dead\");\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_match.rs:34:5\n+  --> $DIR/expr_match.rs:35:5\n    |\n LL |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "27e8d5d9b97f42b28bca62d96c5beccc30bf4f25", "filename": "src/test/ui/reachable/expr_while.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_while.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -16,6 +16,7 @@\n fn foo() {\n     while {return} {\n         println!(\"Hello, world!\");\n+        //~^ ERROR unreachable\n     }\n }\n \n@@ -30,8 +31,10 @@ fn baz() {\n     // Here, we cite the `while` loop as dead.\n     while {return} {\n         println!(\"I am dead.\");\n+        //~^ ERROR unreachable\n     }\n     println!(\"I am, too.\");\n+    //~^ ERROR unreachable\n }\n \n fn main() { }"}, {"sha": "3a27fe5e027f4288d66d882af56b9333b81450a8", "filename": "src/test/ui/reachable/expr_while.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -12,15 +12,15 @@ LL | #![deny(unreachable_code)]\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_while.rs:32:9\n+  --> $DIR/expr_while.rs:33:9\n    |\n LL |         println!(\"I am dead.\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_while.rs:34:5\n+  --> $DIR/expr_while.rs:36:5\n    |\n LL |     println!(\"I am, too.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "48653ba0562fcff5f970e6127d7b6ffb96d29897", "filename": "src/test/ui/span/coerce-suggestions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -29,4 +29,5 @@ fn main() {\n \n     let s = &mut String::new();\n     s = format!(\"foo\");\n+    //~^ ERROR E0308\n }"}, {"sha": "f7836a6790fe233d7af42feb24544d1555e13dd0", "filename": "src/test/ui/span/issue-33884.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fspan%2Fissue-33884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fspan%2Fissue-33884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-33884.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -16,6 +16,7 @@ use std::io::{self, Read, Write};\n \n fn handle_client(stream: TcpStream) -> io::Result<()> {\n     stream.write_fmt(format!(\"message received\"))\n+    //~^ ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "aefba8324cf9cf1c28c893428dd8eeb196a5ac16", "filename": "src/test/ui/span/slice-borrow.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -3,7 +3,7 @@ error[E0597]: borrowed value does not live long enough\n    |\n LL |         let x: &[isize] = &vec![1, 2, 3, 4, 5];\n    |                            ^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n-LL |         y = &x[1..];\n+...\n LL |     }\n    |     - temporary value only lives until here\n LL |     y.use_ref();"}, {"sha": "27765fe56fd9d8e32f7cd2d3628009a14671e844", "filename": "src/test/ui/span/slice-borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -14,6 +14,7 @@ fn main() {\n     let y;\n     {\n         let x: &[isize] = &vec![1, 2, 3, 4, 5];\n+        //~^ ERROR borrowed value does not live long enough\n         y = &x[1..];\n     }\n     y.use_ref();"}, {"sha": "cdcb65bf9f11d67e95c7a16e38b150f67c94d69f", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -3,7 +3,7 @@ error[E0597]: borrowed value does not live long enough\n    |\n LL |         let x: &[isize] = &vec![1, 2, 3, 4, 5];\n    |                            ^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n-LL |         y = &x[1..];\n+...\n LL |     }\n    |     - temporary value dropped here while still borrowed\n LL |     y.use_ref();"}, {"sha": "a4626799691a2177f5e83a0900956bd9f184b5a4", "filename": "src/test/ui/type-check/cannot_infer_local_or_vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -10,4 +10,5 @@\n \n fn main() {\n     let x = vec![];\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "930c51f52d9af5eb20d747079e62099ec9ad39cc", "filename": "src/test/ui/type-check/cannot_infer_local_or_vec_in_tuples.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -10,4 +10,5 @@\n \n fn main() {\n     let (x, ) = (vec![], );\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "201a661726e9179940849bc4dca2126aeca410c6", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -40,6 +40,21 @@ struct DiagnosticSpan {\n     expansion: Option<Box<DiagnosticSpanMacroExpansion>>,\n }\n \n+impl DiagnosticSpan {\n+    /// Returns the deepest source span in the macro call stack with a given file name.\n+    /// This is either the supplied span, or the span for some macro callsite that expanded to it.\n+    fn first_callsite_in_file(&self, file_name: &str) -> &DiagnosticSpan {\n+        if self.file_name == file_name {\n+            self\n+        } else {\n+            self.expansion\n+                .as_ref()\n+                .map(|origin| origin.span.first_callsite_in_file(file_name))\n+                .unwrap_or(self)\n+        }\n+    }\n+}\n+\n #[derive(Deserialize, Clone)]\n struct DiagnosticSpanMacroExpansion {\n     /// span where macro was applied to generate this code\n@@ -115,16 +130,23 @@ fn push_expected_errors(\n     default_spans: &[&DiagnosticSpan],\n     file_name: &str,\n ) {\n-    let spans_in_this_file: Vec<_> = diagnostic\n+    // In case of macro expansions, we need to get the span of the callsite\n+    let spans_info_in_this_file: Vec<_> = diagnostic\n         .spans\n         .iter()\n-        .filter(|span| Path::new(&span.file_name) == Path::new(&file_name))\n+        .map(|span| (span.is_primary, span.first_callsite_in_file(file_name)))\n+        .filter(|(_, span)| Path::new(&span.file_name) == Path::new(&file_name))\n         .collect();\n \n-    let primary_spans: Vec<_> = spans_in_this_file.iter()\n-        .cloned()\n-        .filter(|span| span.is_primary)\n+    let spans_in_this_file: Vec<_> = spans_info_in_this_file.iter()\n+        .map(|(_, span)| span)\n+        .collect();\n+\n+    let primary_spans: Vec<_> = spans_info_in_this_file.iter()\n+        .filter(|(is_primary, _)| *is_primary)\n+        .map(|(_, span)| span)\n         .take(1) // sometimes we have more than one showing up in the json; pick first\n+        .cloned()\n         .collect();\n     let primary_spans = if primary_spans.is_empty() {\n         // subdiagnostics often don't have a span of their own;"}, {"sha": "ad86844cec3238674d3ffe37be20ab925da62170", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "patch": "@@ -1194,6 +1194,10 @@ impl<'test> TestCx<'test> {\n             self.fatal_proc_rec(\"process did not return an error status\", proc_res);\n         }\n \n+        // On Windows, keep all '\\' path separators to match the paths reported in the JSON output\n+        // from the compiler\n+        let os_file_name = self.testpaths.file.display().to_string();\n+\n         // on windows, translate all '\\' path separators to '/'\n         let file_name = format!(\"{}\", self.testpaths.file.display()).replace(r\"\\\", \"/\");\n \n@@ -1209,7 +1213,7 @@ impl<'test> TestCx<'test> {\n             .any(|ee| ee.kind == Some(ErrorKind::Note));\n \n         // Parse the JSON output from the compiler and extract out the messages.\n-        let actual_errors = json::parse_output(&file_name, &proc_res.stderr, proc_res);\n+        let actual_errors = json::parse_output(&os_file_name, &proc_res.stderr, proc_res);\n         let mut unexpected = Vec::new();\n         let mut found = vec![false; expected_errors.len()];\n         for actual_error in &actual_errors {"}]}