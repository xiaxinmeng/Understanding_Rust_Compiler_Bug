{"sha": "c00104f36a1dd6aad318d410ffa41b9ec531880a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMDEwNGYzNmExZGQ2YWFkMzE4ZDQxMGZmYTQxYjllYzUzMTg4MGE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-19T14:12:56Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-19T14:26:03Z"}, "message": "std: silence warnings when compiling test.", "tree": {"sha": "2e317d3960f021384faa3f8ae7f19a9eed1ac849", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e317d3960f021384faa3f8ae7f19a9eed1ac849"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c00104f36a1dd6aad318d410ffa41b9ec531880a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c00104f36a1dd6aad318d410ffa41b9ec531880a", "html_url": "https://github.com/rust-lang/rust/commit/c00104f36a1dd6aad318d410ffa41b9ec531880a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c00104f36a1dd6aad318d410ffa41b9ec531880a/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3cee6203457b98c030a8597f97b037a8d447f40", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3cee6203457b98c030a8597f97b037a8d447f40", "html_url": "https://github.com/rust-lang/rust/commit/b3cee6203457b98c030a8597f97b037a8d447f40"}], "stats": {"total": 74, "additions": 28, "deletions": 46}, "files": [{"sha": "38deaf2dbcbb86c146c9cf4e4288863699bb2677", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=c00104f36a1dd6aad318d410ffa41b9ec531880a", "patch": "@@ -377,7 +377,6 @@ mod tests {\n     use libc;\n     use ptr;\n     use option::{Some, None};\n-    use vec;\n \n     #[test]\n     fn test_str_multistring_parsing() {\n@@ -440,7 +439,7 @@ mod tests {\n                 assert_eq!(*ptr::offset(buf, 0), 'f' as libc::c_char);\n                 assert_eq!(*ptr::offset(buf, 1), 'o' as libc::c_char);\n                 assert_eq!(*ptr::offset(buf, 2), 'o' as libc::c_char);\n-                assert_eq!(*ptr::offset(buf, 3), 0xff);\n+                assert_eq!(*ptr::offset(buf, 3), 0xff as i8);\n                 assert_eq!(*ptr::offset(buf, 4), 0);\n             }\n         });"}, {"sha": "de2655303d606dd399bf2769bc36b4a02ed9e107", "filename": "src/libstd/io/native/file.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Fio%2Fnative%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Fio%2Fnative%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnative%2Ffile.rs?ref=c00104f36a1dd6aad318d410ffa41b9ec531880a", "patch": "@@ -907,22 +907,14 @@ pub fn utime(p: &CString, atime: u64, mtime: u64) -> IoResult<()> {\n #[cfg(test)]\n mod tests {\n     use io::native::file::{CFile, FileDesc};\n-    use io::fs;\n     use io;\n     use libc;\n     use os;\n-    use path::Path;\n-    use rand;\n     use result::Ok;\n     use rt::rtio::RtioFileStream;\n \n-    fn tmpdir() -> Path {\n-        let ret = os::tmpdir().join(format!(\"rust-{}\", rand::random::<u32>()));\n-        fs::mkdir(&ret, io::UserRWX);\n-        ret\n-    }\n-\n     #[ignore(cfg(target_os = \"freebsd\"))] // hmm, maybe pipes have a tiny buffer\n+    #[test]\n     fn test_file_desc() {\n         // Run this test with some pipes so we don't have to mess around with\n         // opening or closing files.\n@@ -949,6 +941,7 @@ mod tests {\n     }\n \n     #[ignore(cfg(windows))] // apparently windows doesn't like tmpfile\n+    #[test]\n     fn test_cfile() {\n         unsafe {\n             let f = libc::tmpfile();"}, {"sha": "4803054333607090c6a74f1f5a9532f0c323d46f", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=c00104f36a1dd6aad318d410ffa41b9ec531880a", "patch": "@@ -220,7 +220,7 @@ mod test {\n     #[test]\n     fn test_null_writer() {\n         let mut s = NullWriter;\n-        let mut buf = ~[0, 0, 0];\n+        let buf = ~[0, 0, 0];\n         s.write(buf);\n         s.flush();\n     }\n@@ -248,7 +248,7 @@ mod test {\n \n         struct TestWriter;\n         impl Writer for TestWriter {\n-            fn write(&mut self, buf: &[u8]) {\n+            fn write(&mut self, _buf: &[u8]) {\n                 unsafe { writes += 1 }\n             }\n "}, {"sha": "ad624f71d0c7aec7a162273af459a93ba6f94ae4", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=c00104f36a1dd6aad318d410ffa41b9ec531880a", "patch": "@@ -438,6 +438,9 @@ mod tests {\n         static int_key: Key<@int> = &Key;\n         do task::spawn {\n             set(str_key, @~\"string data\");\n+            set(str_key, @~\"string data 2\");\n+            set(box_key, @@());\n+            set(box_key, @@());\n             set(int_key, @42);\n             // This could cause a segfault if overwriting-destruction is done\n             // with the crazy polymorphic transmute rather than the provided"}, {"sha": "9cf36adc36f23da64f00103d7be5af44c85f64e1", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=c00104f36a1dd6aad318d410ffa41b9ec531880a", "patch": "@@ -557,8 +557,6 @@ pub mod ptr_tests {\n \n     #[test]\n     fn test_ptr_addition() {\n-        use vec::raw::*;\n-\n         unsafe {\n             let xs = ~[5, ..16];\n             let mut ptr = xs.as_ptr();"}, {"sha": "360f16971acade104a703c8cdeb9ad86ea5c282f", "filename": "src/libstd/rand/rand_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Frand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Frand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Frand_impls.rs?ref=c00104f36a1dd6aad318d410ffa41b9ec531880a", "patch": "@@ -240,12 +240,14 @@ mod tests {\n         }\n     }\n \n+    #[test]\n     fn floating_point_edge_cases() {\n         // the test for exact equality is correct here.\n         assert!(ConstantRng(0xffff_ffff).gen::<f32>() != 1.0)\n         assert!(ConstantRng(0xffff_ffff_ffff_ffff).gen::<f64>() != 1.0)\n     }\n \n+    #[test]\n     fn rand_open() {\n         // this is unlikely to catch an incorrect implementation that\n         // generates exactly 0 or 1, but it keeps it sane.\n@@ -260,6 +262,7 @@ mod tests {\n         }\n     }\n \n+    #[test]\n     fn rand_closed() {\n         let mut rng = task_rng();\n         for _ in range(0, 1_000) {"}, {"sha": "a767af4cc0ebed29a02c79369b73bcba6b7e6ae1", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=c00104f36a1dd6aad318d410ffa41b9ec531880a", "patch": "@@ -64,23 +64,25 @@ pub unsafe fn init(argc: int, argv: **u8) { realargs::init(argc, argv) }\n #[cfg(target_os = \"freebsd\")]\n mod imp {\n     use cast;\n-    use libc;\n+    #[cfg(not(test))] use libc;\n     use option::{Option, Some, None};\n     use iter::Iterator;\n-    use str;\n+    #[cfg(not(test))] use str;\n     use unstable::finally::Finally;\n     use unstable::mutex::{Mutex, MUTEX_INIT};\n     use util;\n-    use vec;\n+    #[cfg(not(test))] use vec;\n \n     static mut global_args_ptr: uint = 0;\n     static mut lock: Mutex = MUTEX_INIT;\n \n+    #[cfg(not(test))]\n     pub unsafe fn init(argc: int, argv: **u8) {\n         let args = load_argc_and_argv(argc, argv);\n         put(args);\n     }\n \n+    #[cfg(not(test))]\n     pub unsafe fn cleanup() {\n         rtassert!(take().is_some());\n         lock.destroy();\n@@ -127,6 +129,7 @@ mod imp {\n     }\n \n     // Copied from `os`.\n+    #[cfg(not(test))]\n     unsafe fn load_argc_and_argv(argc: int, argv: **u8) -> ~[~str] {\n         vec::from_fn(argc as uint, |i| {\n             str::raw::from_c_str(*(argv as **libc::c_char).offset(i as int))\n@@ -163,8 +166,8 @@ mod imp {\n     }\n }\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"macos\", not(test))]\n+#[cfg(target_os = \"win32\", not(test))]\n mod imp {\n     use option::Option;\n "}, {"sha": "31cf069688168071c24562b78de620a6a22429f7", "filename": "src/libstd/rt/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcontext.rs?ref=c00104f36a1dd6aad318d410ffa41b9ec531880a", "patch": "@@ -395,6 +395,9 @@ pub unsafe fn record_sp_limit(limit: uint) {\n /// As with the setter, this function does not have a __morestack header and can\n /// therefore be called in a \"we're out of stack\" situation.\n #[inline(always)]\n+// currently only called by `rust_stack_exhausted`, which doesn't\n+// exist in a test build.\n+#[cfg(not(test))]\n pub unsafe fn get_sp_limit() -> uint {\n     return target_get_sp_limit();\n "}, {"sha": "15aa1602cd0e0e35eb6fada1f5202950d8c22b13", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=c00104f36a1dd6aad318d410ffa41b9ec531880a", "patch": "@@ -1341,6 +1341,8 @@ mod test {\n     }\n \n     // FIXME: #9407: xfail-test\n+    #[ignore]\n+    #[test]\n     fn dont_starve_1() {\n         stress_factor().times(|| {\n             do run_in_mt_newsched_task {"}, {"sha": "3299caa089aba7d10d13862b12d51a55c4ae1629", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=c00104f36a1dd6aad318d410ffa41b9ec531880a", "patch": "@@ -26,7 +26,6 @@ use local_data;\n use option::{Option, Some, None};\n use rt::borrowck::BorrowRecord;\n use rt::borrowck;\n-use rt::context;\n use rt::context::Context;\n use rt::env;\n use rt::kill::Death;\n@@ -511,6 +510,7 @@ impl Unwinder {\n                   //   irrelevant for documentation purposes.\n #[cfg(not(test))] // in testing, use the original libstd's version\n pub extern \"C\" fn rust_stack_exhausted() {\n+    use rt::context;\n     use rt::in_green_task_context;\n     use rt::task::Task;\n     use rt::local::Local;"}, {"sha": "d92291bbfbd064d9e222ea31a8c429666f18640d", "filename": "src/libstd/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=c00104f36a1dd6aad318d410ffa41b9ec531880a", "patch": "@@ -339,7 +339,7 @@ mod tests {\n     use task::spawn;\n     use unstable::running_on_valgrind;\n     use io::native::file;\n-    use io::{FileNotFound, OtherIoError, Reader, Writer, io_error};\n+    use io::{FileNotFound, Reader, Writer, io_error};\n \n     #[test]\n     #[cfg(not(target_os=\"android\"))] // FIXME(#10380)"}, {"sha": "5f98a34520c096a0bef20d311897d981d4693c3d", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=c00104f36a1dd6aad318d410ffa41b9ec531880a", "patch": "@@ -2734,7 +2734,6 @@ mod tests {\n     use option::{None, Some, Option};\n     use ptr;\n     use str::*;\n-    use vec;\n     use vec::{Vector, ImmutableVector, CopyableVector};\n     use cmp::{TotalOrd, Less, Equal, Greater};\n     use send_str::{SendStrOwned, SendStrStatic};"}, {"sha": "3310dddc3276a09408f50522e4744d4d1b6e47af", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=c00104f36a1dd6aad318d410ffa41b9ec531880a", "patch": "@@ -437,9 +437,6 @@ pub fn failing() -> bool {\n // !!! These tests are dangerous. If Something is buggy, they will hang, !!!\n // !!! instead of exiting cleanly. This might wedge the buildbots.       !!!\n \n-#[cfg(test)]\n-fn block_forever() { let (po, _ch) = Chan::<()>::new(); po.recv(); }\n-\n #[test]\n fn test_unnamed_task() {\n     use rt::test::run_in_uv_task;\n@@ -507,11 +504,6 @@ fn test_run_basic() {\n     po.recv();\n }\n \n-#[cfg(test)]\n-struct Wrapper {\n-    f: Option<Chan<()>>\n-}\n-\n #[test]\n fn test_add_wrapper() {\n     let (po, ch) = Chan::new();"}, {"sha": "3fa41711d2b0a1172e511abcd56ece160063e30a", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00104f36a1dd6aad318d410ffa41b9ec531880a/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=c00104f36a1dd6aad318d410ffa41b9ec531880a", "patch": "@@ -2678,7 +2678,7 @@ impl<A> Extendable<A> for ~[A] {\n \n #[cfg(test)]\n mod tests {\n-    use option::{None, Option, Some};\n+    use option::{None, Some};\n     use mem;\n     use vec::*;\n     use cmp::*;\n@@ -2688,22 +2688,8 @@ mod tests {\n \n     fn square_ref(n: &uint) -> uint { square(*n) }\n \n-    fn is_three(n: &uint) -> bool { *n == 3u }\n-\n     fn is_odd(n: &uint) -> bool { *n % 2u == 1u }\n \n-    fn is_equal(x: &uint, y:&uint) -> bool { *x == *y }\n-\n-    fn square_if_odd_r(n: &uint) -> Option<uint> {\n-        if *n % 2u == 1u { Some(*n * *n) } else { None }\n-    }\n-\n-    fn square_if_odd_v(n: uint) -> Option<uint> {\n-        if n % 2u == 1u { Some(n * n) } else { None }\n-    }\n-\n-    fn add(x: uint, y: &uint) -> uint { x + *y }\n-\n     #[test]\n     fn test_unsafe_ptrs() {\n         unsafe {\n@@ -2982,6 +2968,7 @@ mod tests {\n         assert_eq!(g, None);\n     }\n \n+    #[test]\n     fn test_swap_remove() {\n         let mut v = ~[1, 2, 3, 4, 5];\n         let mut e = v.swap_remove(0);"}]}