{"sha": "6f0f2fc6d6ca0800c8b8b95932010d51af4e4663", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMGYyZmM2ZDZjYTA4MDBjOGI4Yjk1OTMyMDEwZDUxYWY0ZTQ2NjM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-04T20:59:43Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-07T02:46:11Z"}, "message": "Simplify code", "tree": {"sha": "efcd823eb3d56fdb6a770dfb711720bfad5cbb77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efcd823eb3d56fdb6a770dfb711720bfad5cbb77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f0f2fc6d6ca0800c8b8b95932010d51af4e4663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f0f2fc6d6ca0800c8b8b95932010d51af4e4663", "html_url": "https://github.com/rust-lang/rust/commit/6f0f2fc6d6ca0800c8b8b95932010d51af4e4663", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f0f2fc6d6ca0800c8b8b95932010d51af4e4663/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3818f8ba340de08f863b1c431fdf27f767dfca8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3818f8ba340de08f863b1c431fdf27f767dfca8a", "html_url": "https://github.com/rust-lang/rust/commit/3818f8ba340de08f863b1c431fdf27f767dfca8a"}], "stats": {"total": 45, "additions": 16, "deletions": 29}, "files": [{"sha": "6583458b4469494c55ff2a653d0493de1cbc8b6d", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f0f2fc6d6ca0800c8b8b95932010d51af4e4663/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0f2fc6d6ca0800c8b8b95932010d51af4e4663/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=6f0f2fc6d6ca0800c8b8b95932010d51af4e4663", "patch": "@@ -6,6 +6,7 @@ use crate::source_map::{SourceMap, FilePathMapping};\n use crate::feature_gate::UnstableFeatures;\n use crate::parse::parser::Parser;\n use crate::symbol::Symbol;\n+use crate::syntax::parse::parser::emit_unclosed_delims;\n use crate::tokenstream::{TokenStream, TokenTree};\n use crate::diagnostics::plugin::ErrorMap;\n use crate::print::pprust::token_to_string;\n@@ -141,8 +142,14 @@ pub fn parse_stream_from_source_str(\n     source: String,\n     sess: &ParseSess,\n     override_span: Option<Span>,\n-) -> (TokenStream, Vec<lexer::UnmatchedBrace>) {\n-    source_file_to_stream(sess, sess.source_map().new_source_file(name, source), override_span)\n+) -> TokenStream {\n+    let (stream, mut errors) = source_file_to_stream(\n+        sess,\n+        sess.source_map().new_source_file(name, source),\n+        override_span,\n+    );\n+    emit_unclosed_delims(&mut errors, &sess.span_diagnostic);\n+    stream\n }\n \n /// Creates a new parser from a source string."}, {"sha": "58c1c5006bbf4f921f57aac1ee1eb181ff7bf83e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f0f2fc6d6ca0800c8b8b95932010d51af4e4663/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0f2fc6d6ca0800c8b8b95932010d51af4e4663/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6f0f2fc6d6ca0800c8b8b95932010d51af4e4663", "patch": "@@ -261,10 +261,8 @@ pub struct Parser<'a> {\n \n impl<'a> Drop for Parser<'a> {\n     fn drop(&mut self) {\n-        if !self.unclosed_delims.is_empty() {\n-            let diag = self.diagnostic();\n-            emit_unclosed_delims(&mut self.unclosed_delims, diag);\n-        }\n+        let diag = self.diagnostic();\n+        emit_unclosed_delims(&mut self.unclosed_delims, diag);\n     }\n }\n "}, {"sha": "2fa4f5263fbc581b951d2aeddf3b49e638846860", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6f0f2fc6d6ca0800c8b8b95932010d51af4e4663/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0f2fc6d6ca0800c8b8b95932010d51af4e4663/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=6f0f2fc6d6ca0800c8b8b95932010d51af4e4663", "patch": "@@ -10,7 +10,6 @@ use crate::print::pprust;\n use crate::ptr::P;\n use crate::symbol::keywords;\n use crate::syntax::parse::parse_stream_from_source_str;\n-use crate::syntax::parse::parser::emit_unclosed_delims;\n use crate::tokenstream::{self, DelimSpan, TokenStream, TokenTree};\n \n use syntax_pos::symbol::{self, Symbol};\n@@ -675,9 +674,7 @@ impl Nonterminal {\n         // FIXME(#43081): Avoid this pretty-print + reparse hack\n         let source = pprust::nonterminal_to_string(self);\n         let filename = FileName::macro_expansion_source_code(&source);\n-        let (tokens_for_real, mut errors) =\n-            parse_stream_from_source_str(filename, source, sess, Some(span));\n-        emit_unclosed_delims(&mut errors, &sess.span_diagnostic);\n+        let tokens_for_real = parse_stream_from_source_str(filename, source, sess, Some(span));\n \n         // During early phases of the compiler the AST could get modified\n         // directly (e.g., attributes added or removed) and the internal cache\n@@ -740,13 +737,7 @@ fn prepend_attrs(sess: &ParseSess,\n         let source = pprust::attr_to_string(attr);\n         let macro_filename = FileName::macro_expansion_source_code(&source);\n         if attr.is_sugared_doc {\n-            let (stream, mut errors) = parse_stream_from_source_str(\n-                macro_filename,\n-                source,\n-                sess,\n-                Some(span),\n-            );\n-            emit_unclosed_delims(&mut errors, &sess.span_diagnostic);\n+            let stream = parse_stream_from_source_str(macro_filename, source, sess, Some(span));\n             builder.push(stream);\n             continue\n         }\n@@ -763,13 +754,7 @@ fn prepend_attrs(sess: &ParseSess,\n         // ... and for more complicated paths, fall back to a reparse hack that\n         // should eventually be removed.\n         } else {\n-            let (stream, mut errors) = parse_stream_from_source_str(\n-                macro_filename,\n-                source,\n-                sess,\n-                Some(span),\n-            );\n-            emit_unclosed_delims(&mut errors, &sess.span_diagnostic);\n+            let stream = parse_stream_from_source_str(macro_filename, source, sess, Some(span));\n             brackets.push(stream);\n         }\n "}, {"sha": "a7ac95ba9ef504c3d882e35874182cb5ff1734bc", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f0f2fc6d6ca0800c8b8b95932010d51af4e4663/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0f2fc6d6ca0800c8b8b95932010d51af4e4663/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=6f0f2fc6d6ca0800c8b8b95932010d51af4e4663", "patch": "@@ -12,7 +12,6 @@ use syntax::ast;\n use syntax::ext::base::ExtCtxt;\n use syntax::parse::lexer::comments;\n use syntax::parse::{self, token, ParseSess};\n-use syntax::parse::parser::emit_unclosed_delims;\n use syntax::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n use syntax_pos::hygiene::{SyntaxContext, Transparency};\n use syntax_pos::symbol::{keywords, Symbol};\n@@ -410,14 +409,12 @@ impl server::TokenStream for Rustc<'_> {\n         stream.is_empty()\n     }\n     fn from_str(&mut self, src: &str) -> Self::TokenStream {\n-        let (tokens, mut errors) = parse::parse_stream_from_source_str(\n+        parse::parse_stream_from_source_str(\n             FileName::proc_macro_source_code(src.clone()),\n             src.to_string(),\n             self.sess,\n             Some(self.call_site),\n-        );\n-        emit_unclosed_delims(&mut errors, &self.sess.span_diagnostic);\n-        tokens\n+        )\n     }\n     fn to_string(&mut self, stream: &Self::TokenStream) -> String {\n         stream.to_string()"}]}