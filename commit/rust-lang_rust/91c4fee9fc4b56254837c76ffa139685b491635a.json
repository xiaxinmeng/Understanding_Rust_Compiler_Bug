{"sha": "91c4fee9fc4b56254837c76ffa139685b491635a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYzRmZWU5ZmM0YjU2MjU0ODM3Yzc2ZmZhMTM5Njg1YjQ5MTYzNWE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-31T15:54:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-31T15:54:59Z"}, "message": "Rollup merge of #88501 - m-ou-se:prelude-collusion-oh-no-macros-help, r=estebank\n\nUse right span in prelude collision suggestions with macros.\n\nFixes https://github.com/rust-lang/rust/issues/88347\n\nr? `@estebank`", "tree": {"sha": "7736a5b1e8d5916f683f0ee1c79c237d2dd73066", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7736a5b1e8d5916f683f0ee1c79c237d2dd73066"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91c4fee9fc4b56254837c76ffa139685b491635a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhLlDTCRBK7hj4Ov3rIwAASrIIAA/o87VU64wp5SoyXdQBGaBv\n0DzB7eBBwZDp0j5lgNf5AX9AWYJqRI5Q28ISw66NRwXktx3ERJS3Nwfckt1AMKqA\n4r0hepwpR+Good8iTLObqZdBmEg0Ne5GAO0Rk9jkoncSMuMEna3ZKtbgE1eKoXOJ\n9STX6RQWRfr0lCoDumTa6LJ2LfWNHzpe/qYkTD4zsU55NaZQYqOlaRGcThMv+hUp\nRpKCwKivb4vcPdXMpp9DDxikYlzvfJujIsTHR//u8XWrtOnGr7CqHInl09in+qD/\nD0ETORFUXYmx7GqW0Ta3m5PwWyptFIu3Q/kx1D8cjrhaB/+ByT3wcStp4kBx5JA=\n=kgHv\n-----END PGP SIGNATURE-----\n", "payload": "tree 7736a5b1e8d5916f683f0ee1c79c237d2dd73066\nparent c5a34d802db7e445de84728e310740cb68857d90\nparent 7c0479bd8c1c811e25ac285b43187cef52b71f2e\nauthor Mara Bos <m-ou.se@m-ou.se> 1630425299 +0200\ncommitter GitHub <noreply@github.com> 1630425299 +0200\n\nRollup merge of #88501 - m-ou-se:prelude-collusion-oh-no-macros-help, r=estebank\n\nUse right span in prelude collision suggestions with macros.\n\nFixes https://github.com/rust-lang/rust/issues/88347\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91c4fee9fc4b56254837c76ffa139685b491635a", "html_url": "https://github.com/rust-lang/rust/commit/91c4fee9fc4b56254837c76ffa139685b491635a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91c4fee9fc4b56254837c76ffa139685b491635a/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5a34d802db7e445de84728e310740cb68857d90", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a34d802db7e445de84728e310740cb68857d90", "html_url": "https://github.com/rust-lang/rust/commit/c5a34d802db7e445de84728e310740cb68857d90"}, {"sha": "7c0479bd8c1c811e25ac285b43187cef52b71f2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0479bd8c1c811e25ac285b43187cef52b71f2e", "html_url": "https://github.com/rust-lang/rust/commit/7c0479bd8c1c811e25ac285b43187cef52b71f2e"}], "stats": {"total": 167, "additions": 148, "deletions": 19}, "files": [{"sha": "10e9bde0d972be2b904373b8e93291943a7eb42f", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91c4fee9fc4b56254837c76ffa139685b491635a/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c4fee9fc4b56254837c76ffa139685b491635a/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=91c4fee9fc4b56254837c76ffa139685b491635a", "patch": "@@ -597,6 +597,14 @@ impl Span {\n         if !expn_data.is_root() { Some(expn_data.call_site) } else { None }\n     }\n \n+    /// Walk down the expansion ancestors to find a span that's contained within `outer`.\n+    pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {\n+        while !outer.contains(self) {\n+            self = self.parent()?;\n+        }\n+        Some(self)\n+    }\n+\n     /// Edition of the crate from which this span came.\n     pub fn edition(self) -> edition::Edition {\n         self.ctxt().edition()"}, {"sha": "05f1b3740aeb1d5fa3264c5b0d8561dccf76d199", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/91c4fee9fc4b56254837c76ffa139685b491635a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c4fee9fc4b56254837c76ffa139685b491635a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=91c4fee9fc4b56254837c76ffa139685b491635a", "patch": "@@ -156,15 +156,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         segment.ident.name\n                     ));\n \n-                    let (self_adjusted, precise) = self.adjust_expr(pick, self_expr);\n+                    let (self_adjusted, precise) = self.adjust_expr(pick, self_expr, sp);\n                     if precise {\n                         let args = args\n                             .iter()\n                             .skip(1)\n                             .map(|arg| {\n+                                let span = arg.span.find_ancestor_inside(sp).unwrap_or_default();\n                                 format!(\n                                     \", {}\",\n-                                    self.sess().source_map().span_to_snippet(arg.span).unwrap()\n+                                    self.sess().source_map().span_to_snippet(span).unwrap()\n                                 )\n                             })\n                             .collect::<String>();\n@@ -272,11 +273,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 method_name.name\n             ));\n \n-            let mut self_ty_name = self\n-                .sess()\n-                .source_map()\n-                .span_to_snippet(self_ty_span)\n-                .unwrap_or_else(|_| self_ty.to_string());\n+            let mut self_ty_name = self_ty_span\n+                .find_ancestor_inside(span)\n+                .and_then(|span| self.sess().source_map().span_to_snippet(span).ok())\n+                .unwrap_or_else(|| self_ty.to_string());\n \n             // Get the number of generics the self type has (if an Adt) unless we can determine that\n             // the user has written the self type with generics already which we (naively) do by looking\n@@ -370,7 +370,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Creates a string version of the `expr` that includes explicit adjustments.\n     /// Returns the string and also a bool indicating whther this is a *precise*\n     /// suggestion.\n-    fn adjust_expr(&self, pick: &Pick<'tcx>, expr: &hir::Expr<'tcx>) -> (String, bool) {\n+    fn adjust_expr(\n+        &self,\n+        pick: &Pick<'tcx>,\n+        expr: &hir::Expr<'tcx>,\n+        outer: Span,\n+    ) -> (String, bool) {\n         let derefs = \"*\".repeat(pick.autoderefs);\n \n         let autoref = match pick.autoref_or_ptr_adjustment {\n@@ -379,12 +384,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Some(probe::AutorefOrPtrAdjustment::ToConstPtr) | None => \"\",\n         };\n \n-        let (expr_text, precise) =\n-            if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {\n-                (expr_text, true)\n-            } else {\n-                (\"(..)\".to_string(), false)\n-            };\n+        let (expr_text, precise) = if let Some(expr_text) = expr\n+            .span\n+            .find_ancestor_inside(outer)\n+            .and_then(|span| self.sess().source_map().span_to_snippet(span).ok())\n+        {\n+            (expr_text, true)\n+        } else {\n+            (\"(..)\".to_string(), false)\n+        };\n \n         let adjusted_text = if let Some(probe::AutorefOrPtrAdjustment::ToConstPtr) =\n             pick.autoref_or_ptr_adjustment"}, {"sha": "a25d0f8064404783d96d6912cbc90e2980136c59", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91c4fee9fc4b56254837c76ffa139685b491635a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c4fee9fc4b56254837c76ffa139685b491635a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=91c4fee9fc4b56254837c76ffa139685b491635a", "patch": "@@ -680,15 +680,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         migrated_variables_concat\n                     );\n \n-                    let mut closure_body_span = self.tcx.hir().span(body_id.hir_id);\n-\n                     // If the body was entirely expanded from a macro\n                     // invocation, i.e. the body is not contained inside the\n                     // closure span, then we walk up the expansion until we\n                     // find the span before the expansion.\n-                    while !closure_body_span.is_dummy() && !closure_span.contains(closure_body_span) {\n-                        closure_body_span = closure_body_span.parent().unwrap_or(DUMMY_SP);\n-                    }\n+                    let closure_body_span = self.tcx.hir().span(body_id.hir_id)\n+                        .find_ancestor_inside(closure_span)\n+                        .unwrap_or(DUMMY_SP);\n \n                     if let Ok(s) = self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n                         let mut lines = s.lines();"}, {"sha": "a97dc176e1b8b019ccdef82fcb40adcfb3ead81d", "filename": "src/test/ui/rust-2021/future-prelude-collision-macros.fixed", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/91c4fee9fc4b56254837c76ffa139685b491635a/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-macros.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/91c4fee9fc4b56254837c76ffa139685b491635a/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-macros.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-macros.fixed?ref=91c4fee9fc4b56254837c76ffa139685b491635a", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(rust_2021_prelude_collisions)]\n+#![allow(unreachable_code)]\n+\n+macro_rules! foo {\n+    () => {{\n+        123;\n+        S\n+    }};\n+}\n+\n+trait MyTry<T> {\n+    fn try_into(self, _: u8);\n+}\n+\n+struct S;\n+\n+impl MyTry<i32> for S {\n+    fn try_into(self, _: u8) {}\n+}\n+\n+trait TryFromU8: Sized {\n+    fn try_from(_: u8);\n+}\n+\n+impl TryFromU8 for u32 {\n+    fn try_from(_: u8) {}\n+}\n+\n+macro_rules! bar {\n+    () => {\n+        u32\n+    };\n+}\n+\n+fn main() {\n+    MyTry::try_into(foo!(), todo!());\n+    //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+    //~| WARNING this is accepted in the current edition\n+    <bar!() as TryFromU8>::try_from(0);\n+    //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+    //~| WARNING this is accepted in the current edition\n+}"}, {"sha": "82484b5b3688d52dc8c98fe87fa8a24cd1b03352", "filename": "src/test/ui/rust-2021/future-prelude-collision-macros.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/91c4fee9fc4b56254837c76ffa139685b491635a/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c4fee9fc4b56254837c76ffa139685b491635a/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-macros.rs?ref=91c4fee9fc4b56254837c76ffa139685b491635a", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(rust_2021_prelude_collisions)]\n+#![allow(unreachable_code)]\n+\n+macro_rules! foo {\n+    () => {{\n+        123;\n+        S\n+    }};\n+}\n+\n+trait MyTry<T> {\n+    fn try_into(self, _: u8);\n+}\n+\n+struct S;\n+\n+impl MyTry<i32> for S {\n+    fn try_into(self, _: u8) {}\n+}\n+\n+trait TryFromU8: Sized {\n+    fn try_from(_: u8);\n+}\n+\n+impl TryFromU8 for u32 {\n+    fn try_from(_: u8) {}\n+}\n+\n+macro_rules! bar {\n+    () => {\n+        u32\n+    };\n+}\n+\n+fn main() {\n+    foo!().try_into(todo!());\n+    //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+    //~| WARNING this is accepted in the current edition\n+    <bar!()>::try_from(0);\n+    //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+    //~| WARNING this is accepted in the current edition\n+}"}, {"sha": "4c3543ca782e8340e8af45e94af425cdedffdec5", "filename": "src/test/ui/rust-2021/future-prelude-collision-macros.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/91c4fee9fc4b56254837c76ffa139685b491635a/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91c4fee9fc4b56254837c76ffa139685b491635a/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-macros.stderr?ref=91c4fee9fc4b56254837c76ffa139685b491635a", "patch": "@@ -0,0 +1,25 @@\n+warning: trait method `try_into` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision-macros.rs:39:5\n+   |\n+LL |     foo!().try_into(todo!());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `MyTry::try_into(foo!(), todo!())`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/future-prelude-collision-macros.rs:4:9\n+   |\n+LL | #![warn(rust_2021_prelude_collisions)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n+\n+warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision-macros.rs:42:5\n+   |\n+LL |     <bar!()>::try_from(0);\n+   |     ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<bar!() as TryFromU8>::try_from`\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n+\n+warning: 2 warnings emitted\n+"}]}