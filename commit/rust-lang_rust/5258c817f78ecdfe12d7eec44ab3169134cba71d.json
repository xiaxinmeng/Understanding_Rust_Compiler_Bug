{"sha": "5258c817f78ecdfe12d7eec44ab3169134cba71d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNThjODE3Zjc4ZWNkZmUxMmQ3ZWVjNDRhYjMxNjkxMzRjYmE3MWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T09:54:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T11:00:50Z"}, "message": "Remove cross-crate marks\n\nThey create quite a bit of friction. Really, we should just move the\ntests to the same crate, rather than paper over existing split.", "tree": {"sha": "fc9f085a5a491d48d24166e7d1cb267f2dc2cd20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc9f085a5a491d48d24166e7d1cb267f2dc2cd20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5258c817f78ecdfe12d7eec44ab3169134cba71d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5258c817f78ecdfe12d7eec44ab3169134cba71d", "html_url": "https://github.com/rust-lang/rust/commit/5258c817f78ecdfe12d7eec44ab3169134cba71d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5258c817f78ecdfe12d7eec44ab3169134cba71d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d18d1c05949eaa890e7bb75710816a61b09a93dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d18d1c05949eaa890e7bb75710816a61b09a93dd", "html_url": "https://github.com/rust-lang/rust/commit/d18d1c05949eaa890e7bb75710816a61b09a93dd"}], "stats": {"total": 49, "additions": 4, "deletions": 45}, "files": [{"sha": "90e85d4197126f12f0aba169c477a15b2e2a8978", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5258c817f78ecdfe12d7eec44ab3169134cba71d/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5258c817f78ecdfe12d7eec44ab3169134cba71d/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=5258c817f78ecdfe12d7eec44ab3169134cba71d", "patch": "@@ -93,7 +93,7 @@ pub(crate) fn reference_definition(\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::{assert_eq_text, covers};\n+    use test_utils::assert_eq_text;\n \n     use crate::mock_analysis::analysis_and_position;\n \n@@ -208,7 +208,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_macros() {\n-        covers!(ra_ide_db::goto_def_for_macros);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -225,7 +224,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_macros_from_other_crates() {\n-        covers!(ra_ide_db::goto_def_for_macros);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -245,7 +243,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_use_alias() {\n-        covers!(ra_ide_db::goto_def_for_use_alias);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -370,7 +367,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_methods() {\n-        covers!(ra_ide_db::goto_def_for_methods);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -390,7 +386,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_fields() {\n-        covers!(ra_ide_db::goto_def_for_fields);\n         check_goto(\n             r\"\n             //- /lib.rs\n@@ -409,7 +404,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_record_fields() {\n-        covers!(ra_ide_db::goto_def_for_record_fields);\n         check_goto(\n             r\"\n             //- /lib.rs\n@@ -430,7 +424,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_record_pat_fields() {\n-        covers!(ra_ide_db::goto_def_for_record_field_pats);\n         check_goto(\n             r\"\n             //- /lib.rs\n@@ -873,7 +866,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_field_init_shorthand() {\n-        covers!(ra_ide_db::goto_def_for_field_init_shorthand);\n         check_goto(\n             \"\n             //- /lib.rs"}, {"sha": "96444bf6a52d2f8a72767d4deb322dc924d084ac", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5258c817f78ecdfe12d7eec44ab3169134cba71d/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5258c817f78ecdfe12d7eec44ab3169134cba71d/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=5258c817f78ecdfe12d7eec44ab3169134cba71d", "patch": "@@ -190,8 +190,6 @@ fn get_struct_def_name_for_struct_literal_search(\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::covers;\n-\n     use crate::{\n         mock_analysis::{analysis_and_position, single_file_with_position, MockAnalysis},\n         Declaration, Reference, ReferenceSearchResult, SearchScope,\n@@ -301,7 +299,6 @@ mod tests {\n \n     #[test]\n     fn search_filters_by_range() {\n-        covers!(ra_ide_db::search_filters_by_range);\n         let code = r#\"\n             fn foo() {\n                 let spam<|> = 92;"}, {"sha": "8b06cbfc54b7ca8681708f783e216ff77cad68b4", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5258c817f78ecdfe12d7eec44ab3169134cba71d/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5258c817f78ecdfe12d7eec44ab3169134cba71d/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=5258c817f78ecdfe12d7eec44ab3169134cba71d", "patch": "@@ -14,7 +14,6 @@ use ra_syntax::{\n     ast::{self, AstNode},\n     match_ast,\n };\n-use test_utils::tested_by;\n \n use crate::RootDatabase;\n \n@@ -118,7 +117,6 @@ fn classify_name_inner(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Opti\n     match_ast! {\n         match parent {\n             ast::Alias(it) => {\n-                tested_by!(goto_def_for_use_alias; force);\n                 let use_tree = it.syntax().parent().and_then(ast::UseTree::cast)?;\n                 let path = use_tree.path()?;\n                 let path_segment = path.segment()?;\n@@ -203,6 +201,8 @@ impl NameRefClass {\n     }\n }\n \n+// Note: we don't have unit-tests for this rather important function.\n+// It is primarily exercised via goto definition tests in `ra_ide`.\n pub fn classify_name_ref(\n     sema: &Semantics<RootDatabase>,\n     name_ref: &ast::NameRef,\n@@ -212,22 +212,18 @@ pub fn classify_name_ref(\n     let parent = name_ref.syntax().parent()?;\n \n     if let Some(method_call) = ast::MethodCallExpr::cast(parent.clone()) {\n-        tested_by!(goto_def_for_methods; force);\n         if let Some(func) = sema.resolve_method_call(&method_call) {\n             return Some(NameRefClass::Definition(Definition::ModuleDef(func.into())));\n         }\n     }\n \n     if let Some(field_expr) = ast::FieldExpr::cast(parent.clone()) {\n-        tested_by!(goto_def_for_fields; force);\n         if let Some(field) = sema.resolve_field(&field_expr) {\n             return Some(NameRefClass::Definition(Definition::Field(field)));\n         }\n     }\n \n     if let Some(record_field) = ast::RecordField::for_field_name(name_ref) {\n-        tested_by!(goto_def_for_record_fields; force);\n-        tested_by!(goto_def_for_field_init_shorthand; force);\n         if let Some((field, local)) = sema.resolve_record_field(&record_field) {\n             let field = Definition::Field(field);\n             let res = match local {\n@@ -239,15 +235,13 @@ pub fn classify_name_ref(\n     }\n \n     if let Some(record_field_pat) = ast::RecordFieldPat::cast(parent.clone()) {\n-        tested_by!(goto_def_for_record_field_pats; force);\n         if let Some(field) = sema.resolve_record_field_pat(&record_field_pat) {\n             let field = Definition::Field(field);\n             return Some(NameRefClass::Definition(field));\n         }\n     }\n \n     if let Some(macro_call) = parent.ancestors().find_map(ast::MacroCall::cast) {\n-        tested_by!(goto_def_for_macros; force);\n         if let Some(macro_def) = sema.resolve_macro_call(&macro_call) {\n             return Some(NameRefClass::Definition(Definition::Macro(macro_def)));\n         }"}, {"sha": "4f37954bf7f09e4d354f2cc55d43412a9f9aac2c", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5258c817f78ecdfe12d7eec44ab3169134cba71d/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5258c817f78ecdfe12d7eec44ab3169134cba71d/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=5258c817f78ecdfe12d7eec44ab3169134cba71d", "patch": "@@ -2,7 +2,6 @@\n //!\n //! It is mainly a `HirDatabase` for semantic analysis, plus a `SymbolsDatabase`, for fuzzy search.\n \n-pub mod marks;\n pub mod line_index;\n pub mod line_index_utils;\n pub mod symbol_index;"}, {"sha": "386fe605c74884c7ee29657b7443c0ddb48ff74a", "filename": "crates/ra_ide_db/src/marks.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d18d1c05949eaa890e7bb75710816a61b09a93dd/crates%2Fra_ide_db%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18d1c05949eaa890e7bb75710816a61b09a93dd/crates%2Fra_ide_db%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fmarks.rs?ref=d18d1c05949eaa890e7bb75710816a61b09a93dd", "patch": "@@ -1,12 +0,0 @@\n-//! See test_utils/src/marks.rs\n-\n-test_utils::marks![\n-    goto_def_for_macros\n-    goto_def_for_use_alias\n-    goto_def_for_methods\n-    goto_def_for_fields\n-    goto_def_for_record_fields\n-    goto_def_for_field_init_shorthand\n-    goto_def_for_record_field_pats\n-    search_filters_by_range\n-];"}, {"sha": "589f4477192609a13f94807bf3ecf384ad77754a", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5258c817f78ecdfe12d7eec44ab3169134cba71d/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5258c817f78ecdfe12d7eec44ab3169134cba71d/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=5258c817f78ecdfe12d7eec44ab3169134cba71d", "patch": "@@ -12,7 +12,6 @@ use ra_db::{FileId, FileRange, SourceDatabaseExt};\n use ra_prof::profile;\n use ra_syntax::{ast, match_ast, AstNode, TextRange, TextSize};\n use rustc_hash::FxHashMap;\n-use test_utils::tested_by;\n \n use crate::{\n     defs::{classify_name_ref, Definition, NameRefClass},\n@@ -209,7 +208,6 @@ impl Definition {\n             for (idx, _) in text.match_indices(pat) {\n                 let offset: TextSize = idx.try_into().unwrap();\n                 if !search_range.contains_inclusive(offset) {\n-                    tested_by!(search_filters_by_range; force);\n                     continue;\n                 }\n "}, {"sha": "f20fb978ee35754e53fee9afe5a81a8c6e9e3d5c", "filename": "crates/test_utils/src/marks.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5258c817f78ecdfe12d7eec44ab3169134cba71d/crates%2Ftest_utils%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5258c817f78ecdfe12d7eec44ab3169134cba71d/crates%2Ftest_utils%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fmarks.rs?ref=5258c817f78ecdfe12d7eec44ab3169134cba71d", "patch": "@@ -30,12 +30,6 @@ use std::sync::atomic::{AtomicUsize, Ordering};\n \n #[macro_export]\n macro_rules! tested_by {\n-    ($ident:ident; force) => {{\n-        {\n-            // sic! use call-site crate\n-            crate::marks::$ident.fetch_add(1, std::sync::atomic::Ordering::SeqCst);\n-        }\n-    }};\n     ($ident:ident) => {{\n         #[cfg(test)]\n         {\n@@ -49,10 +43,7 @@ macro_rules! tested_by {\n macro_rules! covers {\n     // sic! use call-site crate\n     ($ident:ident) => {\n-        $crate::covers!(crate::$ident)\n-    };\n-    ($krate:ident :: $ident:ident) => {\n-        let _checker = $crate::marks::MarkChecker::new(&$krate::marks::$ident);\n+        let _checker = $crate::marks::MarkChecker::new(&crate::marks::$ident);\n     };\n }\n "}]}