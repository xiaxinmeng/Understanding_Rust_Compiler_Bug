{"sha": "d4d2b24d5530c50aa80985938fe13e51e6db8750", "node_id": "C_kwDOAAsO6NoAKGQ0ZDJiMjRkNTUzMGM1MGFhODA5ODU5MzhmZTEzZTUxZTZkYjg3NTA", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T16:44:55Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T16:44:55Z"}, "message": "Slightly simplify some macros by removing an extra case for when signedness doesn't matter\n\nThis is slightly more verbose when invoking the macro.", "tree": {"sha": "9890624a354f945480d4a63d386473883d297e05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9890624a354f945480d4a63d386473883d297e05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4d2b24d5530c50aa80985938fe13e51e6db8750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d2b24d5530c50aa80985938fe13e51e6db8750", "html_url": "https://github.com/rust-lang/rust/commit/d4d2b24d5530c50aa80985938fe13e51e6db8750", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4d2b24d5530c50aa80985938fe13e51e6db8750/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78e2d4a275caec70a0b64bdc97084bacc3610076", "url": "https://api.github.com/repos/rust-lang/rust/commits/78e2d4a275caec70a0b64bdc97084bacc3610076", "html_url": "https://github.com/rust-lang/rust/commit/78e2d4a275caec70a0b64bdc97084bacc3610076"}], "stats": {"total": 146, "additions": 60, "deletions": 86}, "files": [{"sha": "bea99346b0a8d445d4d3d2a977d0692fdb5145e2", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 60, "deletions": 86, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/d4d2b24d5530c50aa80985938fe13e51e6db8750/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d2b24d5530c50aa80985938fe13e51e6db8750/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=d4d2b24d5530c50aa80985938fe13e51e6db8750", "patch": "@@ -15,90 +15,64 @@ fn validate_simd_type(fx: &mut FunctionCx<'_, '_, '_>, intrinsic: Symbol, span:\n     }\n }\n \n-macro simd_cmp {\n-    ($fx:expr, $cc:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        // FIXME use vector icmp when possible\n-        simd_pair_for_each_lane(\n-            $fx,\n-            $x,\n-            $y,\n-            $ret,\n-            |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.kind() {\n-                    ty::Uint(_) | ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc, x_lane, y_lane),\n-                    ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::$cc_f, x_lane, y_lane),\n-                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                };\n-                bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n-            },\n-        );\n-    },\n-    ($fx:expr, $cc_u:ident|$cc_s:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        // FIXME use vector icmp when possible\n-        simd_pair_for_each_lane(\n-            $fx,\n-            $x,\n-            $y,\n-            $ret,\n-            |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.kind() {\n-                    ty::Uint(_) => fx.bcx.ins().icmp(IntCC::$cc_u, x_lane, y_lane),\n-                    ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc_s, x_lane, y_lane),\n-                    ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::$cc_f, x_lane, y_lane),\n-                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                };\n-                bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n-            },\n-        );\n-    },\n+macro simd_cmp($fx:expr, $cc_u:ident|$cc_s:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) {\n+    // FIXME use vector instructions when possible\n+    simd_pair_for_each_lane(\n+        $fx,\n+        $x,\n+        $y,\n+        $ret,\n+        |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n+            let res_lane = match lane_layout.ty.kind() {\n+                ty::Uint(_) => fx.bcx.ins().icmp(IntCC::$cc_u, x_lane, y_lane),\n+                ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc_s, x_lane, y_lane),\n+                ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::$cc_f, x_lane, y_lane),\n+                _ => unreachable!(\"{:?}\", lane_layout.ty),\n+            };\n+            bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n+        },\n+    );\n }\n \n-macro simd_int_binop {\n-    ($fx:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_int_binop!($fx, $op|$op($x, $y) -> $ret);\n-    },\n-    ($fx:expr, $op_u:ident|$op_s:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_pair_for_each_lane(\n-            $fx,\n-            $x,\n-            $y,\n-            $ret,\n-            |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.kind() {\n-                    ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n-                    ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n-                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                };\n-                CValue::by_val(res_lane, ret_lane_layout)\n-            },\n-        );\n-    },\n+macro simd_int_binop($fx:expr, $op_u:ident|$op_s:ident($x:ident, $y:ident) -> $ret:ident) {\n+    // FIXME use vector instructions when possible\n+    simd_pair_for_each_lane(\n+        $fx,\n+        $x,\n+        $y,\n+        $ret,\n+        |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n+            let res_lane = match lane_layout.ty.kind() {\n+                ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n+                ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n+                _ => unreachable!(\"{:?}\", lane_layout.ty),\n+            };\n+            CValue::by_val(res_lane, ret_lane_layout)\n+        },\n+    );\n }\n \n-macro simd_int_flt_binop {\n-    ($fx:expr, $op:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_int_flt_binop!($fx, $op|$op|$op_f($x, $y) -> $ret);\n-    },\n-    ($fx:expr, $op_u:ident|$op_s:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_pair_for_each_lane(\n-            $fx,\n-            $x,\n-            $y,\n-            $ret,\n-            |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.kind() {\n-                    ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n-                    ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n-                    ty::Float(_) => fx.bcx.ins().$op_f(x_lane, y_lane),\n-                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                };\n-                CValue::by_val(res_lane, ret_lane_layout)\n-            },\n-        );\n-    },\n+macro simd_int_flt_binop($fx:expr, $op_u:ident|$op_s:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) {\n+    // FIXME use vector instructions when possible\n+    simd_pair_for_each_lane(\n+        $fx,\n+        $x,\n+        $y,\n+        $ret,\n+        |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n+            let res_lane = match lane_layout.ty.kind() {\n+                ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n+                ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n+                ty::Float(_) => fx.bcx.ins().$op_f(x_lane, y_lane),\n+                _ => unreachable!(\"{:?}\", lane_layout.ty),\n+            };\n+            CValue::by_val(res_lane, ret_lane_layout)\n+        },\n+    );\n }\n \n macro simd_flt_binop($fx:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) {\n+    // FIXME use vector instructions when possible\n     simd_pair_for_each_lane(\n         $fx,\n         $x,\n@@ -143,11 +117,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_eq, (c x, c y) {\n             validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, Equal|Equal(x, y) -> ret);\n+            simd_cmp!(fx, Equal|Equal|Equal(x, y) -> ret);\n         };\n         simd_ne, (c x, c y) {\n             validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, NotEqual|NotEqual(x, y) -> ret);\n+            simd_cmp!(fx, NotEqual|NotEqual|NotEqual(x, y) -> ret);\n         };\n         simd_lt, (c x, c y) {\n             validate_simd_type(fx, intrinsic, span, x.layout().ty);\n@@ -331,15 +305,15 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_add, (c x, c y) {\n             validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_flt_binop!(fx, iadd|fadd(x, y) -> ret);\n+            simd_int_flt_binop!(fx, iadd|iadd|fadd(x, y) -> ret);\n         };\n         simd_sub, (c x, c y) {\n             validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_flt_binop!(fx, isub|fsub(x, y) -> ret);\n+            simd_int_flt_binop!(fx, isub|isub|fsub(x, y) -> ret);\n         };\n         simd_mul, (c x, c y) {\n             validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_flt_binop!(fx, imul|fmul(x, y) -> ret);\n+            simd_int_flt_binop!(fx, imul|imul|fmul(x, y) -> ret);\n         };\n         simd_div, (c x, c y) {\n             validate_simd_type(fx, intrinsic, span, x.layout().ty);\n@@ -370,23 +344,23 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n         simd_shl, (c x, c y) {\n             validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_binop!(fx, ishl(x, y) -> ret);\n+            simd_int_binop!(fx, ishl|ishl(x, y) -> ret);\n         };\n         simd_shr, (c x, c y) {\n             validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_int_binop!(fx, ushr|sshr(x, y) -> ret);\n         };\n         simd_and, (c x, c y) {\n             validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_binop!(fx, band(x, y) -> ret);\n+            simd_int_binop!(fx, band|band(x, y) -> ret);\n         };\n         simd_or, (c x, c y) {\n             validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_binop!(fx, bor(x, y) -> ret);\n+            simd_int_binop!(fx, bor|bor(x, y) -> ret);\n         };\n         simd_xor, (c x, c y) {\n             validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_binop!(fx, bxor(x, y) -> ret);\n+            simd_int_binop!(fx, bxor|bxor(x, y) -> ret);\n         };\n \n         simd_fma, (c a, c b, c c) {"}]}