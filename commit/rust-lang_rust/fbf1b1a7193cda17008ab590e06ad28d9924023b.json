{"sha": "fbf1b1a7193cda17008ab590e06ad28d9924023b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZjFiMWE3MTkzY2RhMTcwMDhhYjU5MGUwNmFkMjhkOTkyNDAyM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-25T11:12:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-25T11:12:47Z"}, "message": "Auto merge of #85664 - GuillaumeGomez:rollup-o7qgo8c, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #85361 (Use TargetTriple::from_path in rustdoc)\n - #85605 (Replace Local::new(1) with CAPTURE_STRUCT_LOCAL)\n - #85631 (Move keyword primitive css dom)\n - #85644 (Better English for documenting when to use unimplemented!())\n - #85650 (Add some backticks to the `rustc_middle::ty::adjustment::Adjustment` docs)\n - #85657 (Remove doubled braces in non_exhaustive structs\u2019 documentation text.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5e17401ba2a6a8c5bd792502886ac0a46e767020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e17401ba2a6a8c5bd792502886ac0a46e767020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbf1b1a7193cda17008ab590e06ad28d9924023b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbf1b1a7193cda17008ab590e06ad28d9924023b", "html_url": "https://github.com/rust-lang/rust/commit/fbf1b1a7193cda17008ab590e06ad28d9924023b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbf1b1a7193cda17008ab590e06ad28d9924023b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdbe2888979bb8797b05f0d58a6f6e60753983d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdbe2888979bb8797b05f0d58a6f6e60753983d2", "html_url": "https://github.com/rust-lang/rust/commit/cdbe2888979bb8797b05f0d58a6f6e60753983d2"}, {"sha": "afec7261bc97a4b0467c92d9a3eb1964d594d872", "url": "https://api.github.com/repos/rust-lang/rust/commits/afec7261bc97a4b0467c92d9a3eb1964d594d872", "html_url": "https://github.com/rust-lang/rust/commit/afec7261bc97a4b0467c92d9a3eb1964d594d872"}], "stats": {"total": 161, "additions": 104, "deletions": 57}, "files": [{"sha": "8f648b211314533fb94f8913e1606f99c5b96978", "filename": "compiler/rustc_middle/src/ty/adjustment.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -47,7 +47,7 @@ pub enum PointerCast {\n /// 1. The simplest cases are where a pointer is not adjusted fat vs thin.\n ///    Here the pointer will be dereferenced N times (where a dereference can\n ///    happen to raw or borrowed pointers or any smart pointer which implements\n-///    Deref, including Box<_>). The types of dereferences is given by\n+///    `Deref`, including `Box<_>`). The types of dereferences is given by\n ///    `autoderefs`. It can then be auto-referenced zero or one times, indicated\n ///    by `autoref`, to either a raw or borrowed pointer. In these cases unsize is\n ///    `false`.\n@@ -56,7 +56,7 @@ pub enum PointerCast {\n ///    with a thin pointer, deref a number of times, unsize the underlying data,\n ///    then autoref. The 'unsize' phase may change a fixed length array to a\n ///    dynamically sized one, a concrete object to a trait object, or statically\n-///    sized struct to a dynamically sized one. E.g., &[i32; 4] -> &[i32] is\n+///    sized struct to a dynamically sized one. E.g., `&[i32; 4]` -> `&[i32]` is\n ///    represented by:\n ///\n ///    ```\n@@ -66,7 +66,7 @@ pub enum PointerCast {\n ///    ```\n ///\n ///    Note that for a struct, the 'deep' unsizing of the struct is not recorded.\n-///    E.g., `struct Foo<T> { x: T }` we can coerce &Foo<[i32; 4]> to &Foo<[i32]>\n+///    E.g., `struct Foo<T> { x: T }` we can coerce `&Foo<[i32; 4]>` to `&Foo<[i32]>`\n ///    The autoderef and -ref are the same as in the above example, but the type\n ///    stored in `unsize` is `Foo<[i32]>`, we don't store any further detail about\n ///    the underlying conversions from `[i32; 4]` to `[i32]`.\n@@ -75,8 +75,8 @@ pub enum PointerCast {\n ///    that case, we have the pointer we need coming in, so there are no\n ///    autoderefs, and no autoref. Instead we just do the `Unsize` transformation.\n ///    At some point, of course, `Box` should move out of the compiler, in which\n-///    case this is analogous to transforming a struct. E.g., Box<[i32; 4]> ->\n-///    Box<[i32]> is an `Adjust::Unsize` with the target `Box<[i32]>`.\n+///    case this is analogous to transforming a struct. E.g., `Box<[i32; 4]>` ->\n+///    `Box<[i32]>` is an `Adjust::Unsize` with the target `Box<[i32]>`.\n #[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n pub struct Adjustment<'tcx> {\n     pub kind: Adjust<'tcx>,"}, {"sha": "0706a057dd0c6d6d335989d6ce9663e1ab85b18d", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -1,7 +1,7 @@\n use crate::hir::place::{\n     Place as HirPlace, PlaceBase as HirPlaceBase, ProjectionKind as HirProjectionKind,\n };\n-use crate::ty;\n+use crate::{mir, ty};\n \n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_hir as hir;\n@@ -12,6 +12,10 @@ use super::{Ty, TyCtxt};\n \n use self::BorrowKind::*;\n \n+// Captures are represented using fields inside a structure.\n+// This represents accessing self in the closure structure\n+pub const CAPTURE_STRUCT_LOCAL: mir::Local = mir::Local::from_u32(1);\n+\n #[derive(\n     Clone,\n     Copy,"}, {"sha": "8b0761889b83453b9d205d5418a57f4e14bb01e5", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -4,10 +4,9 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind};\n-use rustc_index::vec::Idx;\n use rustc_middle::mir::{\n     self, AggregateKind, BindingForm, BorrowKind, ClearCrossCrate, ConstraintCategory,\n-    FakeReadCause, Local, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n+    FakeReadCause, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n     ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind, VarBindingForm,\n };\n use rustc_middle::ty::{self, suggest_constraining_type_param, Ty, TypeFoldable};\n@@ -1274,7 +1273,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         bug!(\"temporary or return pointer with a name\")\n                     }\n                     LocalKind::Var => \"local variable \",\n-                    LocalKind::Arg if !self.upvars.is_empty() && local == Local::new(1) => {\n+                    LocalKind::Arg\n+                        if !self.upvars.is_empty() && local == ty::CAPTURE_STRUCT_LOCAL =>\n+                    {\n                         \"variable captured by `move` \"\n                     }\n                     LocalKind::Arg => \"function parameter \","}, {"sha": "d2b156610476c9f561d8f6dd4a85cd6e087aa652", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -1,6 +1,5 @@\n use rustc_hir as hir;\n use rustc_hir::Node;\n-use rustc_index::vec::Idx;\n use rustc_middle::hir::map::Map;\n use rustc_middle::mir::{Mutability, Place, PlaceRef, ProjectionElem};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -115,12 +114,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n             PlaceRef { local: _, projection: [proj_base @ .., ProjectionElem::Deref] } => {\n-                if the_place_err.local == Local::new(1)\n+                if the_place_err.local == ty::CAPTURE_STRUCT_LOCAL\n                     && proj_base.is_empty()\n                     && !self.upvars.is_empty()\n                 {\n                     item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n-                    debug_assert!(self.body.local_decls[Local::new(1)].ty.is_region_ptr());\n+                    debug_assert!(\n+                        self.body.local_decls[ty::CAPTURE_STRUCT_LOCAL].ty.is_region_ptr()\n+                    );\n                     debug_assert!(is_closure_or_generator(\n                         Place::ty_from(\n                             the_place_err.local,\n@@ -478,11 +479,9 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            PlaceRef {\n-                local,\n-                projection: [ProjectionElem::Deref],\n-                // FIXME document what is this 1 magic number about\n-            } if local == Local::new(1) && !self.upvars.is_empty() => {\n+            PlaceRef { local, projection: [ProjectionElem::Deref] }\n+                if local == ty::CAPTURE_STRUCT_LOCAL && !self.upvars.is_empty() =>\n+            {\n                 self.expected_fn_found_fn_mut_call(&mut err, span, act);\n             }\n "}, {"sha": "5511cd4c73b7de6d4ac8a7dccae4bc28f9cb22a0", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -209,9 +209,7 @@ fn to_upvars_resolved_place_builder<'a, 'tcx>(\n     match from_builder.base {\n         PlaceBase::Local(_) => Ok(from_builder),\n         PlaceBase::Upvar { var_hir_id, closure_def_id, closure_kind } => {\n-            // Captures are represented using fields inside a structure.\n-            // This represents accessing self in the closure structure\n-            let mut upvar_resolved_place_builder = PlaceBuilder::from(Local::new(1));\n+            let mut upvar_resolved_place_builder = PlaceBuilder::from(ty::CAPTURE_STRUCT_LOCAL);\n             match closure_kind {\n                 ty::ClosureKind::Fn | ty::ClosureKind::FnMut => {\n                     upvar_resolved_place_builder = upvar_resolved_place_builder.deref();"}, {"sha": "a19ee80243844bd35724c85c38c425f2ac269281", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -446,7 +446,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     } => {\n                         // Not in a closure\n                         debug_assert!(\n-                            local == Local::new(1),\n+                            local == ty::CAPTURE_STRUCT_LOCAL,\n                             \"Expected local to be Local(1), found {:?}\",\n                             local\n                         );"}, {"sha": "10d6521e7debaab8ebbd11b30ff7aaa623168a16", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -953,9 +953,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // the given closure and use the necessary information to create upvar\n         // debuginfo and to fill `self.upvar_mutbls`.\n         if hir_typeck_results.closure_min_captures.get(&fn_def_id).is_some() {\n-            let closure_env_arg = Local::new(1);\n             let mut closure_env_projs = vec![];\n-            let mut closure_ty = self.local_decls[closure_env_arg].ty;\n+            let mut closure_ty = self.local_decls[ty::CAPTURE_STRUCT_LOCAL].ty;\n             if let ty::Ref(_, ty, _) = closure_ty.kind() {\n                 closure_env_projs.push(ProjectionElem::Deref);\n                 closure_ty = ty;\n@@ -1001,7 +1000,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         name,\n                         source_info: SourceInfo::outermost(tcx_hir.span(var_id)),\n                         value: VarDebugInfoContents::Place(Place {\n-                            local: closure_env_arg,\n+                            local: ty::CAPTURE_STRUCT_LOCAL,\n                             projection: tcx.intern_place_elems(&projs),\n                         }),\n                     });"}, {"sha": "1c6fad2ae8e1cb66e29a3e7237fa1867d1d9fd7c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -1507,7 +1507,10 @@ fn collect_print_requests(\n     prints\n }\n \n-fn parse_target_triple(matches: &getopts::Matches, error_format: ErrorOutputType) -> TargetTriple {\n+pub fn parse_target_triple(\n+    matches: &getopts::Matches,\n+    error_format: ErrorOutputType,\n+) -> TargetTriple {\n     match matches.opt_str(\"target\") {\n         Some(target) if target.ends_with(\".json\") => {\n             let path = Path::new(&target);"}, {"sha": "feadf5b4c7c9a72d6e081bd644f34bef920bf1b3", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -595,7 +595,7 @@ macro_rules! unreachable {\n /// Indicates unimplemented code by panicking with a message of \"not implemented\".\n ///\n /// This allows your code to type-check, which is useful if you are prototyping or\n-/// implementing a trait that requires multiple methods which you don't plan of using all of.\n+/// implementing a trait that requires multiple methods which you don't plan to use all of.\n ///\n /// The difference between `unimplemented!` and [`todo!`] is that while `todo!`\n /// conveys an intent of implementing the functionality later and the message is \"not yet"}, {"sha": "6e1fdf67a652fc762d38221d7ef9e81944b4c6f0", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -6,8 +6,10 @@ use std::path::PathBuf;\n use std::str::FromStr;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_session::config::{self, parse_crate_types_from_list, parse_externs, CrateType};\n-use rustc_session::config::{get_cmd_lint_options, host_triple, nightly_options};\n+use rustc_session::config::{\n+    self, parse_crate_types_from_list, parse_externs, parse_target_triple, CrateType,\n+};\n+use rustc_session::config::{get_cmd_lint_options, nightly_options};\n use rustc_session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n use rustc_session::getopts;\n use rustc_session::lint::Level;\n@@ -562,14 +564,7 @@ impl Options {\n             }\n         }\n \n-        let target =\n-            matches.opt_str(\"target\").map_or(TargetTriple::from_triple(host_triple()), |target| {\n-                if target.ends_with(\".json\") {\n-                    TargetTriple::TargetPath(PathBuf::from(target))\n-                } else {\n-                    TargetTriple::TargetTriple(target)\n-                }\n-            });\n+        let target = parse_target_triple(matches, error_format);\n \n         let show_coverage = matches.opt_present(\"show-coverage\");\n "}, {"sha": "50153ac14a2049a6785b4f688419f4350fa76f9c", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -1502,7 +1502,7 @@ fn document_non_exhaustive(w: &mut Buffer, item: &clean::Item) {\n             w.write_str(\n                 \"Non-exhaustive structs could have additional fields added in future. \\\n                  Therefore, non-exhaustive structs cannot be constructed in external crates \\\n-                 using the traditional <code>Struct {{ .. }}</code> syntax; cannot be \\\n+                 using the traditional <code>Struct { .. }</code> syntax; cannot be \\\n                  matched against without a wildcard <code>..</code>; and \\\n                  struct update syntax will not work.\",\n             );"}, {"sha": "593c7cba3a7a9a351f5118a4ece343c63ac6e772", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -796,16 +796,6 @@ a {\n \tdisplay: inline-block;\n }\n \n-.result-name span.primitive::after {\n-\tcontent: ' (primitive type)';\n-\tfont-style: italic;\n-}\n-\n-.result-name span.keyword::after {\n-\tcontent: ' (keyword)';\n-\tfont-style: italic;\n-}\n-\n body.blur > :not(#help) {\n \tfilter: blur(8px);\n \t-webkit-filter: blur(8px);"}, {"sha": "26b14f675f68d0b77491662a479a53feaaef78b6", "filename": "src/librustdoc/html/static/search.js", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -975,26 +975,32 @@ window.initSearch = function(rawSearchIndex) {\n             output = \"<div class=\\\"search-results \" + extraClass + \"\\\">\";\n \n             array.forEach(function(item) {\n-                var name, type;\n-\n-                name = item.name;\n-                type = itemTypes[item.ty];\n-\n                 if (item.is_alias !== true) {\n                     if (duplicates[item.fullPath]) {\n                         return;\n                     }\n                     duplicates[item.fullPath] = true;\n                 }\n+\n+                var name = item.name;\n+                var type = itemTypes[item.ty];\n+\n                 length += 1;\n \n+                var extra = \"\";\n+                if (type === \"primitive\") {\n+                    extra = \" <i>(primitive type)</i>\";\n+                } else if (type === \"keyword\") {\n+                    extra = \" <i>(keyword)</i>\";\n+                }\n+\n                 output += \"<a class=\\\"result-\" + type + \"\\\" href=\\\"\" + item.href + \"\\\">\" +\n                           \"<div><div class=\\\"result-name\\\">\" +\n                           (item.is_alias === true ?\n                            (\"<span class=\\\"alias\\\"><b>\" + item.alias + \" </b></span><span \" +\n                               \"class=\\\"grey\\\"><i>&nbsp;- see&nbsp;</i></span>\") : \"\") +\n                           item.displayPath + \"<span class=\\\"\" + type + \"\\\">\" +\n-                          name + \"</span></div><div class=\\\"desc\\\">\" +\n+                          name + extra + \"</span></div><div class=\\\"desc\\\">\" +\n                           \"<span>\" + item.desc +\n                           \"&nbsp;</span></div></div></a>\";\n             });"}, {"sha": "6d0bc4186f229206f98a812312ad161730d31860", "filename": "src/test/run-make-fulldeps/rustdoc-target-spec-json-path/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-target-spec-json-path%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-target-spec-json-path%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-target-spec-json-path%2FMakefile?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -0,0 +1,9 @@\n+include ../tools.mk\n+\n+# Test that rustdoc will properly canonicalize the target spec json path just like rustc\n+\n+OUTPUT_DIR := \"$(TMPDIR)/rustdoc-target-spec-json-path\"\n+\n+all:\n+\t$(RUSTC) --crate-type lib dummy_core.rs --target target.json\n+\t$(RUSTDOC) -o $(OUTPUT_DIR) -L $(TMPDIR) my_crate.rs --target target.json"}, {"sha": "da27b7f3463da5e12803a2d12850aa88fbc21401", "filename": "src/test/run-make-fulldeps/rustdoc-target-spec-json-path/dummy_core.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-target-spec-json-path%2Fdummy_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-target-spec-json-path%2Fdummy_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-target-spec-json-path%2Fdummy_core.rs?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -0,0 +1,2 @@\n+#![feature(no_core)]\n+#![no_core]"}, {"sha": "12aa0822084751bffed522614f6f13f571f76435", "filename": "src/test/run-make-fulldeps/rustdoc-target-spec-json-path/my_crate.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-target-spec-json-path%2Fmy_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-target-spec-json-path%2Fmy_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-target-spec-json-path%2Fmy_crate.rs?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -0,0 +1,3 @@\n+#![feature(no_core)]\n+#![no_core]\n+extern crate dummy_core;"}, {"sha": "58e924a9895c85b7687780a562e52ffde7101414", "filename": "src/test/run-make-fulldeps/rustdoc-target-spec-json-path/target.json", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-target-spec-json-path%2Ftarget.json", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-target-spec-json-path%2Ftarget.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-target-spec-json-path%2Ftarget.json?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -0,0 +1,39 @@\n+{\n+  \"arch\": \"x86_64\",\n+  \"cpu\": \"x86-64\",\n+  \"crt-static-respected\": true,\n+  \"data-layout\": \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\",\n+  \"dynamic-linking\": true,\n+  \"env\": \"gnu\",\n+  \"executables\": true,\n+  \"has-elf-tls\": true,\n+  \"has-rpath\": true,\n+  \"is-builtin\": true,\n+  \"linker-is-gnu\": true,\n+  \"llvm-target\": \"x86_64-unknown-linux-gnu\",\n+  \"max-atomic-width\": 64,\n+  \"os\": \"linux\",\n+  \"position-independent-executables\": true,\n+  \"pre-link-args\": {\n+    \"gcc\": [\n+      \"-m64\"\n+    ]\n+  },\n+  \"relro-level\": \"full\",\n+  \"stack-probes\": {\n+    \"kind\": \"inline-or-call\",\n+    \"min-llvm-version-for-inline\": [\n+      11,\n+      0,\n+      1\n+    ]\n+  },\n+  \"supported-sanitizers\": [\n+    \"address\",\n+    \"leak\",\n+    \"memory\",\n+    \"thread\"\n+  ],\n+  \"target-family\": \"unix\",\n+  \"target-pointer-width\": \"64\"\n+}"}, {"sha": "e7612d663717ad41cb2f335ad39d75cb01633afa", "filename": "src/test/rustdoc-gui/search-result-keyword.goml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Ftest%2Frustdoc-gui%2Fsearch-result-keyword.goml", "raw_url": "https://github.com/rust-lang/rust/raw/fbf1b1a7193cda17008ab590e06ad28d9924023b/src%2Ftest%2Frustdoc-gui%2Fsearch-result-keyword.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-keyword.goml?ref=fbf1b1a7193cda17008ab590e06ad28d9924023b", "patch": "@@ -5,7 +5,6 @@ wait-for: \"#titles\"\n // Note: The two next assert commands could be merged as one but readability would be\n // less good.\n //\n-// Checking that the CSS is displaying \" (keyword)\"...\n-assert: (\".result-name span.keyword::after\", {\"content\": '\" (keyword)\"'})\n-// ... in italic.\n-assert: (\".result-name span.keyword::after\", {\"font-style\": \"italic\"})\n+// Checking that the CSS is displaying \" (keyword)\" in italic.\n+assert: (\".result-name span.keyword > i\", \"(keyword)\")\n+assert: (\".result-name span.keyword\", \"CookieMonster (keyword)\")"}]}