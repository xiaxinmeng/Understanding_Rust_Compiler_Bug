{"sha": "a2775a5b72b7cad1bfe2a480a79bfe48281dd40f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNzc1YTViNzJiN2NhZDFiZmUyYTQ4MGE3OWJmZTQ4MjgxZGQ0MGY=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-07-03T06:33:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-04T04:46:17Z"}, "message": "Make non-str fail expression a type checking failure instead of a translation one.", "tree": {"sha": "fbf0b50b1039915b40b96d9d4c40ce6c8bb91906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbf0b50b1039915b40b96d9d4c40ce6c8bb91906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2775a5b72b7cad1bfe2a480a79bfe48281dd40f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2775a5b72b7cad1bfe2a480a79bfe48281dd40f", "html_url": "https://github.com/rust-lang/rust/commit/a2775a5b72b7cad1bfe2a480a79bfe48281dd40f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2775a5b72b7cad1bfe2a480a79bfe48281dd40f/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b110bbf886fd2d9d99c6e66b084ebd2430c57fe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b110bbf886fd2d9d99c6e66b084ebd2430c57fe3", "html_url": "https://github.com/rust-lang/rust/commit/b110bbf886fd2d9d99c6e66b084ebd2430c57fe3"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "8797d05a51f7da0ab4dbcb24b73001e159b54e71", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2775a5b72b7cad1bfe2a480a79bfe48281dd40f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2775a5b72b7cad1bfe2a480a79bfe48281dd40f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a2775a5b72b7cad1bfe2a480a79bfe48281dd40f", "patch": "@@ -6388,9 +6388,9 @@ fn trans_fail_expr(&@block_ctxt cx, &option::t[common::span] sp_opt,\n                                         [C_int(0), C_int(abi::vec_elt_data)]);\n                 ret trans_fail_value(bcx, sp_opt, elt);\n             } else {\n-                bcx.fcx.lcx.ccx.sess.span_fatal(expr.span,\n-                                               \"fail called with unsupported \\\n-                                               type \" + ty_to_str(tcx, e_ty));\n+                cx.fcx.lcx.ccx.sess.span_bug(expr.span,\n+                                             \"fail called with unsupported \\\n+                                              type \" + ty_to_str(tcx, e_ty));\n             }\n         }\n         case (_) {"}, {"sha": "6fbe6493061ec4a1fad93d5c42353dfc7844e624", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a2775a5b72b7cad1bfe2a480a79bfe48281dd40f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2775a5b72b7cad1bfe2a480a79bfe48281dd40f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=a2775a5b72b7cad1bfe2a480a79bfe48281dd40f", "patch": "@@ -229,6 +229,11 @@ fn type_is_scalar(&@fn_ctxt fcx, &span sp, ty::t typ) -> bool {\n     ret ty::type_is_scalar(fcx.ccx.tcx, typ_s);\n }\n \n+fn type_is_str(&@fn_ctxt fcx, &span sp, ty::t typ) -> bool {\n+    auto typ_s = structurally_resolved_type(fcx, sp, typ);\n+    ret ty::type_is_str(fcx.ccx.tcx, typ_s);    \n+}\n+\n \n // Parses the programmer's textual representation of a type into our internal\n // notion of a type. `getter` is a function that returns the type\n@@ -1658,7 +1663,17 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n         case (ast::expr_fail(?expr_opt)) {\n             alt (expr_opt) {\n                 case (none) { /* do nothing */ }\n-                case (some(?e)) { check_expr(fcx, e); }\n+                case (some(?e)) {\n+                    check_expr(fcx, e);\n+                    auto tcx = fcx.ccx.tcx;\n+                    auto ety = expr_ty(tcx, e);\n+                    if (!type_is_str(fcx, e.span, ety)) {\n+                        tcx.sess.span_fatal(e.span,\n+                                            #fmt(\"mismatched types: expected \\\n+                                                  str, found %s\",\n+                                                 ty_to_str(tcx, ety)));\n+                    }\n+                }\n             }\n             write::bot_ty(fcx.ccx.tcx, id);\n         }"}, {"sha": "dbc5afa016dbbf4e3383cb999d06ec9b7daa6c5f", "filename": "src/test/compile-fail/fail-expr.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a2775a5b72b7cad1bfe2a480a79bfe48281dd40f/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2775a5b72b7cad1bfe2a480a79bfe48281dd40f/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs?ref=a2775a5b72b7cad1bfe2a480a79bfe48281dd40f", "patch": "@@ -0,0 +1,5 @@\n+// error-pattern:mismatched types\n+\n+fn main() {\n+  fail 5;\n+}\n\\ No newline at end of file"}]}