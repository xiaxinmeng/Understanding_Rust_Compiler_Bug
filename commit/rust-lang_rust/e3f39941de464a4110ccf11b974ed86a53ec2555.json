{"sha": "e3f39941de464a4110ccf11b974ed86a53ec2555", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZjM5OTQxZGU0NjRhNDExMGNjZjExYjk3NGVkODZhNTNlYzI1NTU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-11-23T00:23:41Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-11-23T00:55:53Z"}, "message": "Types which can be return types for function types\n\nFixes #643", "tree": {"sha": "98a2904402be898b3704e97c9c630a90b40d62b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98a2904402be898b3704e97c9c630a90b40d62b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3f39941de464a4110ccf11b974ed86a53ec2555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f39941de464a4110ccf11b974ed86a53ec2555", "html_url": "https://github.com/rust-lang/rust/commit/e3f39941de464a4110ccf11b974ed86a53ec2555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3f39941de464a4110ccf11b974ed86a53ec2555/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e86872c95ba21ed16b791a95e30cffb52b82e0ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e86872c95ba21ed16b791a95e30cffb52b82e0ba", "html_url": "https://github.com/rust-lang/rust/commit/e86872c95ba21ed16b791a95e30cffb52b82e0ba"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "c483032b451272f079524d549fc89cc142ed2749", "filename": "src/types.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e3f39941de464a4110ccf11b974ed86a53ec2555/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f39941de464a4110ccf11b974ed86a53ec2555/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=e3f39941de464a4110ccf11b974ed86a53ec2555", "patch": "@@ -215,8 +215,12 @@ fn rewrite_segment(expr_context: bool,\n             format!(\"{}<{}>\", separator, list_str)\n         }\n         ast::PathParameters::ParenthesizedParameters(ref data) => {\n+            let output = match data.output {\n+                Some(ref ty) => FunctionRetTy::Return(ty.clone()),\n+                None => FunctionRetTy::DefaultReturn(codemap::DUMMY_SP),\n+            };\n             try_opt!(format_function_type(data.inputs.iter().map(|x| &**x),\n-                                          data.output.as_ref().map(|x| &**x),\n+                                          &output,\n                                           data.span,\n                                           context,\n                                           width,\n@@ -229,7 +233,7 @@ fn rewrite_segment(expr_context: bool,\n }\n \n fn format_function_type<'a, I>(inputs: I,\n-                               output: Option<&ast::Ty>,\n+                               output: &FunctionRetTy,\n                                span: Span,\n                                context: &RewriteContext,\n                                width: usize,\n@@ -253,13 +257,14 @@ fn format_function_type<'a, I>(inputs: I,\n \n     let list_str = try_opt!(format_fn_args(items, budget, offset, context.config));\n \n-    let output = match output {\n-        Some(ref ty) => {\n+    let output = match *output {\n+        FunctionRetTy::Return(ref ty) => {\n             let budget = try_opt!(width.checked_sub(4));\n             let type_str = try_opt!(ty.rewrite(context, budget, offset + 4));\n             format!(\" -> {}\", type_str)\n         }\n-        None => String::new(),\n+        FunctionRetTy::NoReturn(..) => \" -> !\".to_owned(),\n+        FunctionRetTy::DefaultReturn(..) => String::new(),\n     };\n \n     let infix = if output.len() + list_str.len() > width {\n@@ -540,17 +545,11 @@ fn rewrite_bare_fn(bare_fn: &ast::BareFnTy,\n \n     result.push_str(\"fn\");\n \n-    let output = match bare_fn.decl.output {\n-        FunctionRetTy::Return(ref ty) => Some(&**ty),\n-        FunctionRetTy::NoReturn(..) => None,\n-        FunctionRetTy::DefaultReturn(..) => unreachable!(),\n-    };\n-\n     let budget = try_opt!(width.checked_sub(result.len()));\n     let indent = offset + result.len();\n \n     let rewrite = try_opt!(format_function_type(bare_fn.decl.inputs.iter().map(|x| &*(x.ty)),\n-                                                output,\n+                                                &bare_fn.decl.output,\n                                                 span,\n                                                 context,\n                                                 budget,"}, {"sha": "7432fcded349756eee32e69090a5828d815b6169", "filename": "tests/target/fn-ty.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3f39941de464a4110ccf11b974ed86a53ec2555/tests%2Ftarget%2Ffn-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f39941de464a4110ccf11b974ed86a53ec2555/tests%2Ftarget%2Ffn-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-ty.rs?ref=e3f39941de464a4110ccf11b974ed86a53ec2555", "patch": "@@ -0,0 +1,12 @@\n+fn f(xxxxxxxxxxxxxxxxxx: fn(a, b, b) -> a,\n+     xxxxxxxxxxxxxxxxxx: fn() -> a,\n+     xxxxxxxxxxxxxxxxxx: fn(a, b, b),\n+     xxxxxxxxxxxxxxxxxx: fn(),\n+     xxxxxxxxxxxxxxxxxx: fn(a, b, b) -> !,\n+     xxxxxxxxxxxxxxxxxx: fn() -> !)\n+    where F1: Fn(a, b, b) -> a,\n+          F2: Fn(a, b, b),\n+          F3: Fn(),\n+          F4: Fn() -> u32\n+{\n+}"}]}