{"sha": "a7f1ce37bfc1dff62a6b22e88e687a9a1a2ff475", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZjFjZTM3YmZjMWRmZjYyYTZiMjJlODhlNjg3YTlhMWEyZmY0NzU=", "commit": {"author": {"name": "Jarod Liu", "email": "liuyuanzhi@gmail.com", "date": "2014-12-20T08:07:03Z"}, "committer": {"name": "Jarod Liu", "email": "liuyuanzhi@gmail.com", "date": "2014-12-20T08:07:03Z"}, "message": "use binary literals to better reflect \"bitflags\"", "tree": {"sha": "96ace5b6b57ddd3d3815e29fae96d52b764a3ba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96ace5b6b57ddd3d3815e29fae96d52b764a3ba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7f1ce37bfc1dff62a6b22e88e687a9a1a2ff475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f1ce37bfc1dff62a6b22e88e687a9a1a2ff475", "html_url": "https://github.com/rust-lang/rust/commit/a7f1ce37bfc1dff62a6b22e88e687a9a1a2ff475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7f1ce37bfc1dff62a6b22e88e687a9a1a2ff475/comments", "author": {"login": "jarod", "id": 7960, "node_id": "MDQ6VXNlcjc5NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/7960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jarod", "html_url": "https://github.com/jarod", "followers_url": "https://api.github.com/users/jarod/followers", "following_url": "https://api.github.com/users/jarod/following{/other_user}", "gists_url": "https://api.github.com/users/jarod/gists{/gist_id}", "starred_url": "https://api.github.com/users/jarod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jarod/subscriptions", "organizations_url": "https://api.github.com/users/jarod/orgs", "repos_url": "https://api.github.com/users/jarod/repos", "events_url": "https://api.github.com/users/jarod/events{/privacy}", "received_events_url": "https://api.github.com/users/jarod/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jarod", "id": 7960, "node_id": "MDQ6VXNlcjc5NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/7960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jarod", "html_url": "https://github.com/jarod", "followers_url": "https://api.github.com/users/jarod/followers", "following_url": "https://api.github.com/users/jarod/following{/other_user}", "gists_url": "https://api.github.com/users/jarod/gists{/gist_id}", "starred_url": "https://api.github.com/users/jarod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jarod/subscriptions", "organizations_url": "https://api.github.com/users/jarod/orgs", "repos_url": "https://api.github.com/users/jarod/repos", "events_url": "https://api.github.com/users/jarod/events{/privacy}", "received_events_url": "https://api.github.com/users/jarod/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c2df5cc3cfc0c9e80adf9fa6504d55056741c5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2df5cc3cfc0c9e80adf9fa6504d55056741c5a", "html_url": "https://github.com/rust-lang/rust/commit/1c2df5cc3cfc0c9e80adf9fa6504d55056741c5a"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "3285708fbffb27964df64aeb4c3700c45bb85764", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a7f1ce37bfc1dff62a6b22e88e687a9a1a2ff475/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f1ce37bfc1dff62a6b22e88e687a9a1a2ff475/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=a7f1ce37bfc1dff62a6b22e88e687a9a1a2ff475", "patch": "@@ -24,9 +24,9 @@\n /// ```{.rust}\n /// bitflags! {\n ///     flags Flags: u32 {\n-///         const FLAG_A       = 0x00000001,\n-///         const FLAG_B       = 0x00000010,\n-///         const FLAG_C       = 0x00000100,\n+///         const FLAG_A       = 0b00000001,\n+///         const FLAG_B       = 0b00000010,\n+///         const FLAG_C       = 0b00000100,\n ///         const FLAG_ABC     = FLAG_A.bits\n ///                            | FLAG_B.bits\n ///                            | FLAG_C.bits,\n@@ -50,8 +50,8 @@\n ///\n /// bitflags! {\n ///     flags Flags: u32 {\n-///         const FLAG_A   = 0x00000001,\n-///         const FLAG_B   = 0x00000010,\n+///         const FLAG_A   = 0b00000001,\n+///         const FLAG_B   = 0b00000010,\n ///     }\n /// }\n ///\n@@ -326,10 +326,10 @@ mod tests {\n         #[doc = \"> \"]\n         #[doc = \"> - Richard Feynman\"]\n         flags Flags: u32 {\n-            const FlagA       = 0x00000001,\n+            const FlagA       = 0b00000001,\n             #[doc = \"<pcwalton> macros are way better at generating code than trans is\"]\n-            const FlagB       = 0x00000010,\n-            const FlagC       = 0x00000100,\n+            const FlagB       = 0b00000010,\n+            const FlagC       = 0b00000100,\n             #[doc = \"* cmr bed\"]\n             #[doc = \"* strcat table\"]\n             #[doc = \"<strcat> wait what?\"]\n@@ -347,33 +347,33 @@ mod tests {\n \n     #[test]\n     fn test_bits(){\n-        assert_eq!(Flags::empty().bits(), 0x00000000);\n-        assert_eq!(FlagA.bits(), 0x00000001);\n-        assert_eq!(FlagABC.bits(), 0x00000111);\n+        assert_eq!(Flags::empty().bits(), 0b00000000);\n+        assert_eq!(FlagA.bits(), 0b00000001);\n+        assert_eq!(FlagABC.bits(), 0b00000111);\n \n-        assert_eq!(AnotherSetOfFlags::empty().bits(), 0x00);\n+        assert_eq!(AnotherSetOfFlags::empty().bits(), 0b00);\n         assert_eq!(AnotherFlag.bits(), !0_i8);\n     }\n \n     #[test]\n     fn test_from_bits() {\n         assert!(Flags::from_bits(0) == Some(Flags::empty()));\n-        assert!(Flags::from_bits(0x1) == Some(FlagA));\n-        assert!(Flags::from_bits(0x10) == Some(FlagB));\n-        assert!(Flags::from_bits(0x11) == Some(FlagA | FlagB));\n-        assert!(Flags::from_bits(0x1000) == None);\n+        assert!(Flags::from_bits(0b1) == Some(FlagA));\n+        assert!(Flags::from_bits(0b10) == Some(FlagB));\n+        assert!(Flags::from_bits(0b11) == Some(FlagA | FlagB));\n+        assert!(Flags::from_bits(0b1000) == None);\n \n         assert!(AnotherSetOfFlags::from_bits(!0_i8) == Some(AnotherFlag));\n     }\n \n     #[test]\n     fn test_from_bits_truncate() {\n         assert!(Flags::from_bits_truncate(0) == Flags::empty());\n-        assert!(Flags::from_bits_truncate(0x1) == FlagA);\n-        assert!(Flags::from_bits_truncate(0x10) == FlagB);\n-        assert!(Flags::from_bits_truncate(0x11) == (FlagA | FlagB));\n-        assert!(Flags::from_bits_truncate(0x1000) == Flags::empty());\n-        assert!(Flags::from_bits_truncate(0x1001) == FlagA);\n+        assert!(Flags::from_bits_truncate(0b1) == FlagA);\n+        assert!(Flags::from_bits_truncate(0b10) == FlagB);\n+        assert!(Flags::from_bits_truncate(0b11) == (FlagA | FlagB));\n+        assert!(Flags::from_bits_truncate(0b1000) == Flags::empty());\n+        assert!(Flags::from_bits_truncate(0b1001) == FlagA);\n \n         assert!(AnotherSetOfFlags::from_bits_truncate(0_i8) == AnotherSetOfFlags::empty());\n     }"}]}