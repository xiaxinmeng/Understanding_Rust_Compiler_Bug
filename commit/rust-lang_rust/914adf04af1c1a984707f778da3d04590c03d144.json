{"sha": "914adf04af1c1a984707f778da3d04590c03d144", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNGFkZjA0YWYxYzFhOTg0NzA3Zjc3OGRhM2QwNDU5MGMwM2QxNDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-19T08:08:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-19T08:08:48Z"}, "message": "Auto merge of #71447 - cuviper:unsized_cow, r=dtolnay\n\nimpl From<Cow> for Box, Rc, and Arc\n\nThese forward `Borrowed`/`Owned` values to existing `From` impls.\n\n- `Box<T>` is a fundamental type, so it would be a breaking change to add a blanket impl. Therefore, `From<Cow>` is only implemented for `[T]`, `str`, `CStr`, `OsStr`, and `Path`.\n- For `Rc<T>` and `Arc<T>`, `From<Cow>` is implemented for everything that implements `From` the borrowed and owned types separately.", "tree": {"sha": "cf43672b28ea604bd6b54ca7712e0001b17c5e2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf43672b28ea604bd6b54ca7712e0001b17c5e2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/914adf04af1c1a984707f778da3d04590c03d144", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/914adf04af1c1a984707f778da3d04590c03d144", "html_url": "https://github.com/rust-lang/rust/commit/914adf04af1c1a984707f778da3d04590c03d144", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/914adf04af1c1a984707f778da3d04590c03d144/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5943351d0eb878c1cb5af42b9e85e101d8c58ed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5943351d0eb878c1cb5af42b9e85e101d8c58ed7", "html_url": "https://github.com/rust-lang/rust/commit/5943351d0eb878c1cb5af42b9e85e101d8c58ed7"}, {"sha": "22efd959109b9a231edbc81a8bc818eaa5763e78", "url": "https://api.github.com/repos/rust-lang/rust/commits/22efd959109b9a231edbc81a8bc818eaa5763e78", "html_url": "https://github.com/rust-lang/rust/commit/22efd959109b9a231edbc81a8bc818eaa5763e78"}], "stats": {"total": 146, "additions": 141, "deletions": 5}, "files": [{"sha": "8ef6090c743a9e6daf052670d370ef8a08e7a719", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/914adf04af1c1a984707f778da3d04590c03d144/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/914adf04af1c1a984707f778da3d04590c03d144/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=914adf04af1c1a984707f778da3d04590c03d144", "patch": "@@ -146,6 +146,7 @@ use core::ptr::{self, NonNull, Unique};\n use core::task::{Context, Poll};\n \n use crate::alloc::{self, AllocInit, AllocRef, Global};\n+use crate::borrow::Cow;\n use crate::raw_vec::RawVec;\n use crate::str::from_boxed_utf8_unchecked;\n use crate::vec::Vec;\n@@ -800,6 +801,17 @@ impl<T: Copy> From<&[T]> for Box<[T]> {\n     }\n }\n \n+#[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n+impl<T: Copy> From<Cow<'_, [T]>> for Box<[T]> {\n+    #[inline]\n+    fn from(cow: Cow<'_, [T]>) -> Box<[T]> {\n+        match cow {\n+            Cow::Borrowed(slice) => Box::from(slice),\n+            Cow::Owned(slice) => Box::from(slice),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"box_from_slice\", since = \"1.17.0\")]\n impl From<&str> for Box<str> {\n     /// Converts a `&str` into a `Box<str>`\n@@ -818,6 +830,17 @@ impl From<&str> for Box<str> {\n     }\n }\n \n+#[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n+impl From<Cow<'_, str>> for Box<str> {\n+    #[inline]\n+    fn from(cow: Cow<'_, str>) -> Box<str> {\n+        match cow {\n+            Cow::Borrowed(s) => Box::from(s),\n+            Cow::Owned(s) => Box::from(s),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"boxed_str_conv\", since = \"1.19.0\")]\n impl From<Box<str>> for Box<[u8]> {\n     /// Converts a `Box<str>>` into a `Box<[u8]>`"}, {"sha": "ad96a138d7e55b36fb80664e00b096821a3b0e64", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/914adf04af1c1a984707f778da3d04590c03d144/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/914adf04af1c1a984707f778da3d04590c03d144/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=914adf04af1c1a984707f778da3d04590c03d144", "patch": "@@ -252,6 +252,7 @@ use core::ptr::{self, NonNull};\n use core::slice::from_raw_parts_mut;\n \n use crate::alloc::{box_free, handle_alloc_error, AllocInit, AllocRef, Global, Layout};\n+use crate::borrow::{Cow, ToOwned};\n use crate::string::String;\n use crate::vec::Vec;\n \n@@ -1497,6 +1498,21 @@ impl<T> From<Vec<T>> for Rc<[T]> {\n     }\n }\n \n+#[stable(feature = \"shared_from_cow\", since = \"1.45.0\")]\n+impl<'a, B> From<Cow<'a, B>> for Rc<B>\n+where\n+    B: ToOwned + ?Sized,\n+    Rc<B>: From<&'a B> + From<B::Owned>,\n+{\n+    #[inline]\n+    fn from(cow: Cow<'a, B>) -> Rc<B> {\n+        match cow {\n+            Cow::Borrowed(s) => Rc::from(s),\n+            Cow::Owned(s) => Rc::from(s),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]\n impl<T, const N: usize> TryFrom<Rc<[T]>> for Rc<[T; N]>\n where"}, {"sha": "b7be8042ea49f33114750b3405eb26cece218b7f", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/914adf04af1c1a984707f778da3d04590c03d144/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/914adf04af1c1a984707f778da3d04590c03d144/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=914adf04af1c1a984707f778da3d04590c03d144", "patch": "@@ -25,6 +25,7 @@ use core::sync::atomic;\n use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n \n use crate::alloc::{box_free, handle_alloc_error, AllocInit, AllocRef, Global, Layout};\n+use crate::borrow::{Cow, ToOwned};\n use crate::boxed::Box;\n use crate::rc::is_dangling;\n use crate::string::String;\n@@ -2128,6 +2129,21 @@ impl<T> From<Vec<T>> for Arc<[T]> {\n     }\n }\n \n+#[stable(feature = \"shared_from_cow\", since = \"1.45.0\")]\n+impl<'a, B> From<Cow<'a, B>> for Arc<B>\n+where\n+    B: ToOwned + ?Sized,\n+    Arc<B>: From<&'a B> + From<B::Owned>,\n+{\n+    #[inline]\n+    fn from(cow: Cow<'a, B>) -> Arc<B> {\n+        match cow {\n+            Cow::Borrowed(s) => Arc::from(s),\n+            Cow::Owned(s) => Arc::from(s),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]\n impl<T, const N: usize> TryFrom<Arc<[T]>> for Arc<[T; N]>\n where"}, {"sha": "8bfcf323f674a74c610038a96cb1ed3beb9b473d", "filename": "src/liballoc/tests/borrow.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/914adf04af1c1a984707f778da3d04590c03d144/src%2Fliballoc%2Ftests%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/914adf04af1c1a984707f778da3d04590c03d144/src%2Fliballoc%2Ftests%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fborrow.rs?ref=914adf04af1c1a984707f778da3d04590c03d144", "patch": "@@ -0,0 +1,47 @@\n+use std::borrow::{Cow, ToOwned};\n+use std::ffi::{CStr, OsStr};\n+use std::path::Path;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+macro_rules! test_from_cow {\n+    ($value:ident => $($ty:ty),+) => {$(\n+        let borrowed = <$ty>::from(Cow::Borrowed($value));\n+        let owned = <$ty>::from(Cow::Owned($value.to_owned()));\n+        assert_eq!($value, &*borrowed);\n+        assert_eq!($value, &*owned);\n+    )+};\n+    ($value:ident : & $ty:ty) => {\n+        test_from_cow!($value => Box<$ty>, Rc<$ty>, Arc<$ty>);\n+    }\n+}\n+\n+#[test]\n+fn test_from_cow_slice() {\n+    let slice: &[i32] = &[1, 2, 3];\n+    test_from_cow!(slice: &[i32]);\n+}\n+\n+#[test]\n+fn test_from_cow_str() {\n+    let string = \"hello\";\n+    test_from_cow!(string: &str);\n+}\n+\n+#[test]\n+fn test_from_cow_c_str() {\n+    let string = CStr::from_bytes_with_nul(b\"hello\\0\").unwrap();\n+    test_from_cow!(string: &CStr);\n+}\n+\n+#[test]\n+fn test_from_cow_os_str() {\n+    let string = OsStr::new(\"hello\");\n+    test_from_cow!(string: &OsStr);\n+}\n+\n+#[test]\n+fn test_from_cow_path() {\n+    let path = Path::new(\"hello\");\n+    test_from_cow!(path: &Path);\n+}"}, {"sha": "f3da46bd0cc4ebf5470b0241f3687802d3aa8b09", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/914adf04af1c1a984707f778da3d04590c03d144/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/914adf04af1c1a984707f778da3d04590c03d144/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=914adf04af1c1a984707f778da3d04590c03d144", "patch": "@@ -21,6 +21,7 @@ use std::hash::{Hash, Hasher};\n \n mod arc;\n mod binary_heap;\n+mod borrow;\n mod boxed;\n mod btree;\n mod cow_str;"}, {"sha": "4bac9a4917d8f0a07b4cf4c852cba539d650d7f4", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/914adf04af1c1a984707f778da3d04590c03d144/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/914adf04af1c1a984707f778da3d04590c03d144/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=914adf04af1c1a984707f778da3d04590c03d144", "patch": "@@ -730,6 +730,17 @@ impl From<&CStr> for Box<CStr> {\n     }\n }\n \n+#[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n+impl From<Cow<'_, CStr>> for Box<CStr> {\n+    #[inline]\n+    fn from(cow: Cow<'_, CStr>) -> Box<CStr> {\n+        match cow {\n+            Cow::Borrowed(s) => Box::from(s),\n+            Cow::Owned(s) => Box::from(s),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"c_string_from_box\", since = \"1.18.0\")]\n impl From<Box<CStr>> for CString {\n     /// Converts a [`Box`]`<CStr>` into a [`CString`] without copying or allocating."}, {"sha": "d1eaf3c583f2d4b5a0ced796d64aec3576eaf263", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/914adf04af1c1a984707f778da3d04590c03d144/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/914adf04af1c1a984707f778da3d04590c03d144/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=914adf04af1c1a984707f778da3d04590c03d144", "patch": "@@ -850,6 +850,17 @@ impl From<&OsStr> for Box<OsStr> {\n     }\n }\n \n+#[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n+impl From<Cow<'_, OsStr>> for Box<OsStr> {\n+    #[inline]\n+    fn from(cow: Cow<'_, OsStr>) -> Box<OsStr> {\n+        match cow {\n+            Cow::Borrowed(s) => Box::from(s),\n+            Cow::Owned(s) => Box::from(s),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"os_string_from_box\", since = \"1.18.0\")]\n impl From<Box<OsStr>> for OsString {\n     /// Converts a [`Box`]`<`[`OsStr`]`>` into a `OsString` without copying or"}, {"sha": "0fe5451bb956470d036110543b8655e22a6a08fb", "filename": "src/libstd/path.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/914adf04af1c1a984707f778da3d04590c03d144/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/914adf04af1c1a984707f778da3d04590c03d144/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=914adf04af1c1a984707f778da3d04590c03d144", "patch": "@@ -1433,6 +1433,17 @@ impl From<&Path> for Box<Path> {\n     }\n }\n \n+#[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n+impl From<Cow<'_, Path>> for Box<Path> {\n+    #[inline]\n+    fn from(cow: Cow<'_, Path>) -> Box<Path> {\n+        match cow {\n+            Cow::Borrowed(path) => Box::from(path),\n+            Cow::Owned(path) => Box::from(path),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"path_buf_from_box\", since = \"1.18.0\")]\n impl From<Box<Path>> for PathBuf {\n     /// Converts a `Box<Path>` into a `PathBuf`"}, {"sha": "ce1c9ae551ea538a98448d660200ada9b826cc38", "filename": "src/test/ui/const-generics/array-impls/alloc-types-no-impls-length-33.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/914adf04af1c1a984707f778da3d04590c03d144/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/914adf04af1c1a984707f778da3d04590c03d144/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr?ref=914adf04af1c1a984707f778da3d04590c03d144", "patch": "@@ -18,7 +18,7 @@ LL |     let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n              <std::boxed::Box<(dyn std::error::Error + 'static)> as std::convert::From<&str>>\n              <std::boxed::Box<(dyn std::error::Error + 'static)> as std::convert::From<std::borrow::Cow<'a, str>>>\n              <std::boxed::Box<(dyn std::error::Error + 'static)> as std::convert::From<std::string::String>>\n-           and 16 others\n+           and 21 others\n    = note: required because of the requirements on the impl of `std::convert::Into<std::boxed::Box<[i32; 33]>>` for `std::boxed::Box<[i32]>`\n    = note: required because of the requirements on the impl of `std::convert::TryFrom<std::boxed::Box<[i32]>>` for `std::boxed::Box<[i32; 33]>`\n \n@@ -38,11 +38,11 @@ LL |     let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<std::rc::Rc<[i32]>>` is not implemented for `std::rc::Rc<[i32; 33]>`\n    |\n    = help: the following implementations were found:\n+             <std::rc::Rc<B> as std::convert::From<std::borrow::Cow<'a, B>>>\n              <std::rc::Rc<T> as std::convert::From<T>>\n              <std::rc::Rc<T> as std::convert::From<std::boxed::Box<T>>>\n              <std::rc::Rc<[T]> as std::convert::From<&[T]>>\n-             <std::rc::Rc<[T]> as std::convert::From<std::vec::Vec<T>>>\n-           and 8 others\n+           and 9 others\n    = note: required because of the requirements on the impl of `std::convert::Into<std::rc::Rc<[i32; 33]>>` for `std::rc::Rc<[i32]>`\n    = note: required because of the requirements on the impl of `std::convert::TryFrom<std::rc::Rc<[i32]>>` for `std::rc::Rc<[i32; 33]>`\n \n@@ -62,11 +62,11 @@ LL |     let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<std::sync::Arc<[i32]>>` is not implemented for `std::sync::Arc<[i32; 33]>`\n    |\n    = help: the following implementations were found:\n+             <std::sync::Arc<B> as std::convert::From<std::borrow::Cow<'a, B>>>\n              <std::sync::Arc<T> as std::convert::From<T>>\n              <std::sync::Arc<T> as std::convert::From<std::boxed::Box<T>>>\n              <std::sync::Arc<[T]> as std::convert::From<&[T]>>\n-             <std::sync::Arc<[T]> as std::convert::From<std::vec::Vec<T>>>\n-           and 8 others\n+           and 9 others\n    = note: required because of the requirements on the impl of `std::convert::Into<std::sync::Arc<[i32; 33]>>` for `std::sync::Arc<[i32]>`\n    = note: required because of the requirements on the impl of `std::convert::TryFrom<std::sync::Arc<[i32]>>` for `std::sync::Arc<[i32; 33]>`\n "}]}