{"sha": "3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "node_id": "C_kwDOAAsO6NoAKDMyOThkZTdmNjYxYjFmOTFkZWM1ZmFlZjhlYjZkMzZhNmIzMGZmYTA", "commit": {"author": {"name": "Federico Guerinoni", "email": "guerinoni.federico@gmail.com", "date": "2022-01-02T13:26:44Z"}, "committer": {"name": "Federico Guerinoni", "email": "guerra@lenovo.homenet.telecomitalia.it", "date": "2022-01-11T08:53:29Z"}, "message": "Add borrow_as_ptr lint\n\nCloses: #6995\n\nSigned-off-by: Federico Guerinoni <guerinoni.federico@gmail.com>\nCo-authored-by: Paolo Barbolini <paolo@paolo565.org>", "tree": {"sha": "5c100254d30c1faa541dd147bf7e560bd7d37534", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c100254d30c1faa541dd147bf7e560bd7d37534"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "html_url": "https://github.com/rust-lang/rust/commit/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/comments", "author": {"login": "guerinoni", "id": 41150432, "node_id": "MDQ6VXNlcjQxMTUwNDMy", "avatar_url": "https://avatars.githubusercontent.com/u/41150432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guerinoni", "html_url": "https://github.com/guerinoni", "followers_url": "https://api.github.com/users/guerinoni/followers", "following_url": "https://api.github.com/users/guerinoni/following{/other_user}", "gists_url": "https://api.github.com/users/guerinoni/gists{/gist_id}", "starred_url": "https://api.github.com/users/guerinoni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guerinoni/subscriptions", "organizations_url": "https://api.github.com/users/guerinoni/orgs", "repos_url": "https://api.github.com/users/guerinoni/repos", "events_url": "https://api.github.com/users/guerinoni/events{/privacy}", "received_events_url": "https://api.github.com/users/guerinoni/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fccf07bae582fe2640971f5cc4cb358d8c7d36aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/fccf07bae582fe2640971f5cc4cb358d8c7d36aa", "html_url": "https://github.com/rust-lang/rust/commit/fccf07bae582fe2640971f5cc4cb358d8c7d36aa"}], "stats": {"total": 369, "additions": 294, "deletions": 75}, "files": [{"sha": "e521995a18864ca496e32cd483cdf464d7cb314d", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -2887,6 +2887,7 @@ Released 2018-09-13\n [`blocks_in_if_conditions`]: https://rust-lang.github.io/rust-clippy/master/index.html#blocks_in_if_conditions\n [`bool_assert_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_assert_comparison\n [`bool_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_comparison\n+[`borrow_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr\n [`borrow_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const\n [`borrowed_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box\n [`box_collection`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_collection"}, {"sha": "de72e8d124d45adb0d083e4e8793e5065cd0d952", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -5,7 +5,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are over 450 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are over 500 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n Lints are divided into categories, each with a default [lint level](https://doc.rust-lang.org/rustc/lints/levels.html).\n You can choose how much Clippy is supposed to ~~annoy~~ help you by changing the lint level by category."}, {"sha": "b8f5217af2b7d68dcda02e14ea6bd66783b0b7c5", "filename": "clippy_lints/src/borrow_as_ptr.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/clippy_lints%2Fsrc%2Fborrow_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/clippy_lints%2Fsrc%2Fborrow_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fborrow_as_ptr.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -0,0 +1,97 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_no_std_crate;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::{meets_msrv, msrvs};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, TyKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for the usage of `&expr as *const T` or\n+    /// `&mut expr as *mut T`, and suggest using `ptr::addr_of` or\n+    /// `ptr::addr_of_mut` instead.\n+    ///\n+    /// ### Why is this bad?\n+    /// This would improve readability and avoid creating a reference\n+    /// that points to an uninitialized value or unaligned place.\n+    /// Read the `ptr::addr_of` docs for more information.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let val = 1;\n+    /// let p = &val as *const i32;\n+    ///\n+    /// let mut val_mut = 1;\n+    /// let p_mut = &mut val_mut as *mut i32;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let val = 1;\n+    /// let p = std::ptr::addr_of!(val);\n+    ///\n+    /// let mut val_mut = 1;\n+    /// let p_mut = std::ptr::addr_of_mut!(val_mut);\n+    /// ```\n+    #[clippy::version = \"1.60.0\"]\n+    pub BORROW_AS_PTR,\n+    pedantic,\n+    \"borrowing just to cast to a raw pointer\"\n+}\n+\n+impl_lint_pass!(BorrowAsPtr => [BORROW_AS_PTR]);\n+\n+pub struct BorrowAsPtr {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl BorrowAsPtr {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for BorrowAsPtr {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::BORROW_AS_PTR) {\n+            return;\n+        }\n+\n+        if expr.span.from_expansion() {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::Cast(left_expr, ty) = &expr.kind;\n+            if let TyKind::Ptr(_) = ty.kind;\n+            if let ExprKind::AddrOf(BorrowKind::Ref, mutability, e) = &left_expr.kind;\n+\n+            then {\n+                let core_or_std = if is_no_std_crate(cx) { \"core\" } else { \"std\" };\n+                let macro_name = match mutability {\n+                    Mutability::Not => \"addr_of\",\n+                    Mutability::Mut => \"addr_of_mut\",\n+                };\n+\n+                span_lint_and_sugg(\n+                    cx,\n+                    BORROW_AS_PTR,\n+                    expr.span,\n+                    \"borrow as raw pointer\",\n+                    \"try\",\n+                    format!(\n+                        \"{}::ptr::{}!({})\",\n+                        core_or_std,\n+                        macro_name,\n+                        snippet_opt(cx, e.span).unwrap()\n+                    ),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "09e4f6ae2750404460e3bace19cee017d2470ea6", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -59,6 +59,7 @@ store.register_lints(&[\n     bool_assert_comparison::BOOL_ASSERT_COMPARISON,\n     booleans::LOGIC_BUG,\n     booleans::NONMINIMAL_BOOL,\n+    borrow_as_ptr::BORROW_AS_PTR,\n     bytecount::NAIVE_BYTECOUNT,\n     cargo_common_metadata::CARGO_COMMON_METADATA,\n     case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,"}, {"sha": "1744b7c825078e40ed37210384bb3cda7a4d0409", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -7,6 +7,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n     LintId::of(bit_mask::VERBOSE_BIT_MASK),\n+    LintId::of(borrow_as_ptr::BORROW_AS_PTR),\n     LintId::of(bytecount::NAIVE_BYTECOUNT),\n     LintId::of(case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS),\n     LintId::of(casts::CAST_LOSSLESS),"}, {"sha": "732df4d2b8be0adf8a2254e22cfffe1608c420fd", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -174,6 +174,7 @@ mod blacklisted_name;\n mod blocks_in_if_conditions;\n mod bool_assert_comparison;\n mod booleans;\n+mod borrow_as_ptr;\n mod bytecount;\n mod cargo_common_metadata;\n mod case_sensitive_file_extension_comparisons;\n@@ -857,6 +858,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(return_self_not_must_use::ReturnSelfNotMustUse));\n     store.register_late_pass(|| Box::new(init_numbered_fields::NumberedFields));\n     store.register_early_pass(|| Box::new(single_char_lifetime_names::SingleCharLifetimeNames));\n+    store.register_late_pass(move || Box::new(borrow_as_ptr::BorrowAsPtr::new(msrv)));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "af677d8b00f7b45ebfae8132e7be4260bf04ad26", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -14,6 +14,7 @@ macro_rules! msrv_aliases {\n msrv_aliases! {\n     1,53,0 { OR_PATTERNS }\n     1,52,0 { STR_SPLIT_ONCE }\n+    1,51,0 { BORROW_AS_PTR }\n     1,50,0 { BOOL_THEN }\n     1,47,0 { TAU }\n     1,46,0 { CONST_IF_MATCH }"}, {"sha": "ba4394defbf20d75f6f3c33bc47c48123b9fcb4b", "filename": "tests/ui/as_conversions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fas_conversions.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,6 +1,7 @@\n // aux-build:macro_rules.rs\n \n #![warn(clippy::as_conversions)]\n+#![allow(clippy::borrow_as_ptr)]\n \n #[macro_use]\n extern crate macro_rules;"}, {"sha": "d11b56171b07211b6bd6f6a4bda0d6947eb32ab7", "filename": "tests/ui/as_conversions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fas_conversions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fas_conversions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fas_conversions.stderr?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,5 +1,5 @@\n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:14:13\n+  --> $DIR/as_conversions.rs:15:13\n    |\n LL |     let i = 0u32 as u64;\n    |             ^^^^^^^^^^^\n@@ -8,15 +8,15 @@ LL |     let i = 0u32 as u64;\n    = help: consider using a safe wrapper for this conversion\n \n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:16:13\n+  --> $DIR/as_conversions.rs:17:13\n    |\n LL |     let j = &i as *const u64 as *mut u64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a safe wrapper for this conversion\n \n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:16:13\n+  --> $DIR/as_conversions.rs:17:13\n    |\n LL |     let j = &i as *const u64 as *mut u64;\n    |             ^^^^^^^^^^^^^^^^"}, {"sha": "ff5c6a8c3774bfbc39ea9698d1d388a444d3ddcd", "filename": "tests/ui/borrow_as_ptr.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fborrow_as_ptr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fborrow_as_ptr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_as_ptr.fixed?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+#![warn(clippy::borrow_as_ptr)]\n+\n+fn main() {\n+    let val = 1;\n+    let _p = std::ptr::addr_of!(val);\n+\n+    let mut val_mut = 1;\n+    let _p_mut = std::ptr::addr_of_mut!(val_mut);\n+}"}, {"sha": "0f62ec6ee58b4f88fc1a1251129c96e61653277d", "filename": "tests/ui/borrow_as_ptr.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fborrow_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fborrow_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_as_ptr.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+#![warn(clippy::borrow_as_ptr)]\n+\n+fn main() {\n+    let val = 1;\n+    let _p = &val as *const i32;\n+\n+    let mut val_mut = 1;\n+    let _p_mut = &mut val_mut as *mut i32;\n+}"}, {"sha": "be1ed733056740f2dc702da987c0f69380e7bfbb", "filename": "tests/ui/borrow_as_ptr.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fborrow_as_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fborrow_as_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_as_ptr.stderr?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -0,0 +1,16 @@\n+error: borrow as raw pointer\n+  --> $DIR/borrow_as_ptr.rs:6:14\n+   |\n+LL |     let _p = &val as *const i32;\n+   |              ^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of!(val)`\n+   |\n+   = note: `-D clippy::borrow-as-ptr` implied by `-D warnings`\n+\n+error: borrow as raw pointer\n+  --> $DIR/borrow_as_ptr.rs:9:18\n+   |\n+LL |     let _p_mut = &mut val_mut as *mut i32;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(val_mut)`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "eaba3b1c20c8d22afe98ae17c6cbd8686d324054", "filename": "tests/ui/borrow_as_ptr_no_std.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fborrow_as_ptr_no_std.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fborrow_as_ptr_no_std.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_as_ptr_no_std.fixed?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+#![warn(clippy::borrow_as_ptr)]\n+#![feature(lang_items, start, libc)]\n+#![no_std]\n+\n+#[start]\n+fn main(_argc: isize, _argv: *const *const u8) -> isize {\n+    let val = 1;\n+    let _p = core::ptr::addr_of!(val);\n+\n+    let mut val_mut = 1;\n+    let _p_mut = core::ptr::addr_of_mut!(val_mut);\n+    0\n+}\n+\n+#[panic_handler]\n+fn panic(_info: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+extern \"C\" fn eh_personality() {}"}, {"sha": "d83f9d1f875bafed872fecaef1d85ebd1125368b", "filename": "tests/ui/borrow_as_ptr_no_std.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fborrow_as_ptr_no_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fborrow_as_ptr_no_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_as_ptr_no_std.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+#![warn(clippy::borrow_as_ptr)]\n+#![feature(lang_items, start, libc)]\n+#![no_std]\n+\n+#[start]\n+fn main(_argc: isize, _argv: *const *const u8) -> isize {\n+    let val = 1;\n+    let _p = &val as *const i32;\n+\n+    let mut val_mut = 1;\n+    let _p_mut = &mut val_mut as *mut i32;\n+    0\n+}\n+\n+#[panic_handler]\n+fn panic(_info: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+extern \"C\" fn eh_personality() {}"}, {"sha": "84c8ba7d07f1e19ee65860fd27591fb78ba60f3d", "filename": "tests/ui/borrow_as_ptr_no_std.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fborrow_as_ptr_no_std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fborrow_as_ptr_no_std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_as_ptr_no_std.stderr?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -0,0 +1,16 @@\n+error: borrow as raw pointer\n+  --> $DIR/borrow_as_ptr_no_std.rs:9:14\n+   |\n+LL |     let _p = &val as *const i32;\n+   |              ^^^^^^^^^^^^^^^^^^ help: try: `core::ptr::addr_of!(val)`\n+   |\n+   = note: `-D clippy::borrow-as-ptr` implied by `-D warnings`\n+\n+error: borrow as raw pointer\n+  --> $DIR/borrow_as_ptr_no_std.rs:12:18\n+   |\n+LL |     let _p_mut = &mut val_mut as *mut i32;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `core::ptr::addr_of_mut!(val_mut)`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "659591fffbecdb56993cdf8cbd8676430ec52e8c", "filename": "tests/ui/cast_alignment.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fcast_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fcast_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -4,7 +4,13 @@\n extern crate libc;\n \n #[warn(clippy::cast_ptr_alignment)]\n-#[allow(clippy::no_effect, clippy::unnecessary_operation, clippy::cast_lossless)]\n+#[allow(\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::cast_lossless,\n+    clippy::borrow_as_ptr\n+)]\n+\n fn main() {\n     /* These should be warned against */\n "}, {"sha": "aedd368445554b05ad2d1744be82e682081534d4", "filename": "tests/ui/cast_alignment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fcast_alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fcast_alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.stderr?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,25 +1,25 @@\n error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`) (1 < 2 bytes)\n-  --> $DIR/cast_alignment.rs:12:5\n+  --> $DIR/cast_alignment.rs:18:5\n    |\n LL |     (&1u8 as *const u8) as *const u16;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-ptr-alignment` implied by `-D warnings`\n \n error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`) (1 < 2 bytes)\n-  --> $DIR/cast_alignment.rs:13:5\n+  --> $DIR/cast_alignment.rs:19:5\n    |\n LL |     (&mut 1u8 as *mut u8) as *mut u16;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`) (1 < 2 bytes)\n-  --> $DIR/cast_alignment.rs:16:5\n+  --> $DIR/cast_alignment.rs:22:5\n    |\n LL |     (&1u8 as *const u8).cast::<u16>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`) (1 < 2 bytes)\n-  --> $DIR/cast_alignment.rs:17:5\n+  --> $DIR/cast_alignment.rs:23:5\n    |\n LL |     (&mut 1u8 as *mut u8).cast::<u16>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c48a734ba32c26874a19c58d8c6d959fe9e7f066", "filename": "tests/ui/cast_ref_to_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fcast_ref_to_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fcast_ref_to_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_ref_to_mut.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::cast_ref_to_mut)]\n-#![allow(clippy::no_effect)]\n+#![allow(clippy::no_effect, clippy::borrow_as_ptr)]\n \n extern \"C\" {\n     // N.B., mutability can be easily incorrect in FFI calls -- as"}, {"sha": "47b3dad3989779188290cf5ede5cf10a443e076b", "filename": "tests/ui/mutex_atomic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmutex_atomic.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,6 +1,7 @@\n #![warn(clippy::all)]\n #![warn(clippy::mutex_integer)]\n #![warn(clippy::mutex_atomic)]\n+#![allow(clippy::borrow_as_ptr)]\n \n fn main() {\n     use std::sync::Mutex;"}, {"sha": "262028a8723a3f9a2931d13f3a3ef08c0a8ad70a", "filename": "tests/ui/mutex_atomic.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fmutex_atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fmutex_atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmutex_atomic.stderr?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,45 +1,45 @@\n error: consider using an `AtomicBool` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n-  --> $DIR/mutex_atomic.rs:7:5\n+  --> $DIR/mutex_atomic.rs:8:5\n    |\n LL |     Mutex::new(true);\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::mutex-atomic` implied by `-D warnings`\n \n error: consider using an `AtomicUsize` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n-  --> $DIR/mutex_atomic.rs:8:5\n+  --> $DIR/mutex_atomic.rs:9:5\n    |\n LL |     Mutex::new(5usize);\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: consider using an `AtomicIsize` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n-  --> $DIR/mutex_atomic.rs:9:5\n+  --> $DIR/mutex_atomic.rs:10:5\n    |\n LL |     Mutex::new(9isize);\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: consider using an `AtomicPtr` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n-  --> $DIR/mutex_atomic.rs:11:5\n+  --> $DIR/mutex_atomic.rs:12:5\n    |\n LL |     Mutex::new(&x as *const u32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: consider using an `AtomicPtr` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n-  --> $DIR/mutex_atomic.rs:12:5\n+  --> $DIR/mutex_atomic.rs:13:5\n    |\n LL |     Mutex::new(&mut x as *mut u32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: consider using an `AtomicUsize` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n-  --> $DIR/mutex_atomic.rs:13:5\n+  --> $DIR/mutex_atomic.rs:14:5\n    |\n LL |     Mutex::new(0u32);\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::mutex-integer` implied by `-D warnings`\n \n error: consider using an `AtomicIsize` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n-  --> $DIR/mutex_atomic.rs:14:5\n+  --> $DIR/mutex_atomic.rs:15:5\n    |\n LL |     Mutex::new(0i32);\n    |     ^^^^^^^^^^^^^^^^"}, {"sha": "87cdb3ace47cb68176d4f4f6921313f55017cc9e", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -2,7 +2,7 @@\n \n #![warn(clippy::or_fun_call)]\n #![allow(dead_code)]\n-#![allow(clippy::unnecessary_wraps)]\n+#![allow(clippy::unnecessary_wraps, clippy::borrow_as_ptr)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "3f69cef301c8b1b96d262067a2e719b1b6056735", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -2,7 +2,7 @@\n \n #![warn(clippy::or_fun_call)]\n #![allow(dead_code)]\n-#![allow(clippy::unnecessary_wraps)]\n+#![allow(clippy::unnecessary_wraps, clippy::borrow_as_ptr)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "9b681a79aae7a385f922a6c04aaf2cd06b37bd94", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,4 +1,4 @@\n-#![allow(dead_code)]\n+#![allow(dead_code, clippy::borrow_as_ptr)]\n \n extern crate core;\n "}, {"sha": "f06ffab5d9be966df12a1fd93267c5be60f96135", "filename": "tests/ui/transmute_ptr_to_ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Ftransmute_ptr_to_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Ftransmute_ptr_to_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ptr.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::transmute_ptr_to_ptr)]\n+#![allow(clippy::borrow_as_ptr)]\n \n // Make sure we can modify lifetimes, which is one of the recommended uses\n // of transmute"}, {"sha": "49a8a3347e40497fede9a81d9d9ab0979ae7d9be", "filename": "tests/ui/transmute_ptr_to_ptr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Ftransmute_ptr_to_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Ftransmute_ptr_to_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ptr.stderr?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,37 +1,37 @@\n error: transmute from a pointer to a pointer\n-  --> $DIR/transmute_ptr_to_ptr.rs:29:29\n+  --> $DIR/transmute_ptr_to_ptr.rs:30:29\n    |\n LL |         let _: *const f32 = std::mem::transmute(ptr);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr as *const f32`\n    |\n    = note: `-D clippy::transmute-ptr-to-ptr` implied by `-D warnings`\n \n error: transmute from a pointer to a pointer\n-  --> $DIR/transmute_ptr_to_ptr.rs:30:27\n+  --> $DIR/transmute_ptr_to_ptr.rs:31:27\n    |\n LL |         let _: *mut f32 = std::mem::transmute(mut_ptr);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `mut_ptr as *mut f32`\n \n error: transmute from a reference to a reference\n-  --> $DIR/transmute_ptr_to_ptr.rs:32:23\n+  --> $DIR/transmute_ptr_to_ptr.rs:33:23\n    |\n LL |         let _: &f32 = std::mem::transmute(&1u32);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1u32 as *const u32 as *const f32)`\n \n error: transmute from a reference to a reference\n-  --> $DIR/transmute_ptr_to_ptr.rs:33:23\n+  --> $DIR/transmute_ptr_to_ptr.rs:34:23\n    |\n LL |         let _: &f64 = std::mem::transmute(&1f32);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1f32 as *const f32 as *const f64)`\n \n error: transmute from a reference to a reference\n-  --> $DIR/transmute_ptr_to_ptr.rs:36:27\n+  --> $DIR/transmute_ptr_to_ptr.rs:37:27\n    |\n LL |         let _: &mut f32 = std::mem::transmute(&mut 1u32);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(&mut 1u32 as *mut u32 as *mut f32)`\n \n error: transmute from a reference to a reference\n-  --> $DIR/transmute_ptr_to_ptr.rs:37:37\n+  --> $DIR/transmute_ptr_to_ptr.rs:38:37\n    |\n LL |         let _: &GenericParam<f32> = std::mem::transmute(&GenericParam { t: 1u32 });\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&GenericParam { t: 1u32 } as *const GenericParam<u32> as *const GenericParam<f32>)`"}, {"sha": "9ae0ed0b13f1e779a8ee08e82d3a9b4d1505a065", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.fixed", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -4,8 +4,7 @@\n // would otherwise be responsible for\n #![warn(clippy::useless_transmute)]\n #![warn(clippy::transmute_ptr_to_ptr)]\n-#![allow(unused_unsafe)]\n-#![allow(dead_code)]\n+#![allow(dead_code, unused_unsafe, clippy::borrow_as_ptr)]\n \n use std::mem::{size_of, transmute};\n "}, {"sha": "985cf9a075d312899d88409f78cb93b40a81529e", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -4,8 +4,7 @@\n // would otherwise be responsible for\n #![warn(clippy::useless_transmute)]\n #![warn(clippy::transmute_ptr_to_ptr)]\n-#![allow(unused_unsafe)]\n-#![allow(dead_code)]\n+#![allow(dead_code, unused_unsafe, clippy::borrow_as_ptr)]\n \n use std::mem::{size_of, transmute};\n "}, {"sha": "e8496a325d6dc670178d789d13e73e60bb302848", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,53 +1,53 @@\n error: transmute from an integer to a pointer\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:19:39\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:18:39\n    |\n LL |     let _ptr_i32_transmute = unsafe { transmute::<usize, *const i32>(usize::MAX) };\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `usize::MAX as *const i32`\n    |\n    = note: `-D clippy::useless-transmute` implied by `-D warnings`\n \n error: transmute from a pointer to a pointer\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:23:38\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:22:38\n    |\n LL |     let _ptr_i8_transmute = unsafe { transmute::<*const i32, *const i8>(ptr_i32) };\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr_i32 as *const i8`\n    |\n    = note: `-D clippy::transmute-ptr-to-ptr` implied by `-D warnings`\n \n error: transmute from a pointer to a pointer\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:29:46\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:28:46\n    |\n LL |     let _ptr_to_unsized_transmute = unsafe { transmute::<*const [i32], *const [u16]>(slice_ptr) };\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `slice_ptr as *const [u16]`\n \n error: transmute from `*const i32` to `usize` which could be expressed as a pointer cast instead\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:35:50\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:34:50\n    |\n LL |     let _usize_from_int_ptr_transmute = unsafe { transmute::<*const i32, usize>(ptr_i32) };\n    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr_i32 as usize`\n    |\n    = note: `-D clippy::transmutes-expressible-as-ptr-casts` implied by `-D warnings`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:41:41\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:40:41\n    |\n LL |     let _array_ptr_transmute = unsafe { transmute::<&[i32; 4], *const [i32; 4]>(array_ref) };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `array_ref as *const [i32; 4]`\n \n error: transmute from `fn(usize) -> u8 {main::foo}` to `*const usize` which could be expressed as a pointer cast instead\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:49:41\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:48:41\n    |\n LL |     let _usize_ptr_transmute = unsafe { transmute::<fn(usize) -> u8, *const usize>(foo) };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `foo as *const usize`\n \n error: transmute from `fn(usize) -> u8 {main::foo}` to `usize` which could be expressed as a pointer cast instead\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:53:49\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:52:49\n    |\n LL |     let _usize_from_fn_ptr_transmute = unsafe { transmute::<fn(usize) -> u8, usize>(foo) };\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `foo as usize`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmutes_expressible_as_ptr_casts.rs:65:14\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:64:14\n    |\n LL |     unsafe { transmute::<&[i32; 1], *const u8>(in_param) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `in_param as *const [i32; 1] as *const u8`"}, {"sha": "3332f49c80c9758c2f8cbd61fc19d48a7681dfee", "filename": "tests/ui/unnecessary_cast_fixable.fixed", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Funnecessary_cast_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Funnecessary_cast_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.fixed?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,7 +1,12 @@\n // run-rustfix\n \n #![warn(clippy::unnecessary_cast)]\n-#![allow(clippy::no_effect, clippy::unnecessary_operation, clippy::nonstandard_macro_braces)]\n+#![allow(\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::nonstandard_macro_braces,\n+    clippy::borrow_as_ptr\n+)]\n \n fn main() {\n     // casting integer literal to float is unnecessary"}, {"sha": "ec01e93877927af3f51217fe4f194bfb6d8d9645", "filename": "tests/ui/unnecessary_cast_fixable.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Funnecessary_cast_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Funnecessary_cast_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,7 +1,12 @@\n // run-rustfix\n \n #![warn(clippy::unnecessary_cast)]\n-#![allow(clippy::no_effect, clippy::unnecessary_operation, clippy::nonstandard_macro_braces)]\n+#![allow(\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::nonstandard_macro_braces,\n+    clippy::borrow_as_ptr\n+)]\n \n fn main() {\n     // casting integer literal to float is unnecessary"}, {"sha": "a281143281b54fa591f29d71559da82fd7fca74f", "filename": "tests/ui/unnecessary_cast_fixable.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Funnecessary_cast_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Funnecessary_cast_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.stderr?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,103 +1,103 @@\n error: casting integer literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:8:5\n+  --> $DIR/unnecessary_cast_fixable.rs:13:5\n    |\n LL |     100 as f32;\n    |     ^^^^^^^^^^ help: try: `100_f32`\n    |\n    = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n \n error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:9:5\n+  --> $DIR/unnecessary_cast_fixable.rs:14:5\n    |\n LL |     100 as f64;\n    |     ^^^^^^^^^^ help: try: `100_f64`\n \n error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:10:5\n+  --> $DIR/unnecessary_cast_fixable.rs:15:5\n    |\n LL |     100_i32 as f64;\n    |     ^^^^^^^^^^^^^^ help: try: `100_f64`\n \n error: casting integer literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:11:13\n+  --> $DIR/unnecessary_cast_fixable.rs:16:13\n    |\n LL |     let _ = -100 as f32;\n    |             ^^^^^^^^^^^ help: try: `-100_f32`\n \n error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:12:13\n+  --> $DIR/unnecessary_cast_fixable.rs:17:13\n    |\n LL |     let _ = -100 as f64;\n    |             ^^^^^^^^^^^ help: try: `-100_f64`\n \n error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:13:13\n+  --> $DIR/unnecessary_cast_fixable.rs:18:13\n    |\n LL |     let _ = -100_i32 as f64;\n    |             ^^^^^^^^^^^^^^^ help: try: `-100_f64`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:14:5\n+  --> $DIR/unnecessary_cast_fixable.rs:19:5\n    |\n LL |     100. as f32;\n    |     ^^^^^^^^^^^ help: try: `100_f32`\n \n error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:15:5\n+  --> $DIR/unnecessary_cast_fixable.rs:20:5\n    |\n LL |     100. as f64;\n    |     ^^^^^^^^^^^ help: try: `100_f64`\n \n error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:27:5\n+  --> $DIR/unnecessary_cast_fixable.rs:32:5\n    |\n LL |     1 as u32;\n    |     ^^^^^^^^ help: try: `1_u32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:28:5\n+  --> $DIR/unnecessary_cast_fixable.rs:33:5\n    |\n LL |     0x10 as i32;\n    |     ^^^^^^^^^^^ help: try: `0x10_i32`\n \n error: casting integer literal to `usize` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:29:5\n+  --> $DIR/unnecessary_cast_fixable.rs:34:5\n    |\n LL |     0b10 as usize;\n    |     ^^^^^^^^^^^^^ help: try: `0b10_usize`\n \n error: casting integer literal to `u16` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:30:5\n+  --> $DIR/unnecessary_cast_fixable.rs:35:5\n    |\n LL |     0o73 as u16;\n    |     ^^^^^^^^^^^ help: try: `0o73_u16`\n \n error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:31:5\n+  --> $DIR/unnecessary_cast_fixable.rs:36:5\n    |\n LL |     1_000_000_000 as u32;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: try: `1_000_000_000_u32`\n \n error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:33:5\n+  --> $DIR/unnecessary_cast_fixable.rs:38:5\n    |\n LL |     1.0 as f64;\n    |     ^^^^^^^^^^ help: try: `1.0_f64`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:34:5\n+  --> $DIR/unnecessary_cast_fixable.rs:39:5\n    |\n LL |     0.5 as f32;\n    |     ^^^^^^^^^^ help: try: `0.5_f32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:38:13\n+  --> $DIR/unnecessary_cast_fixable.rs:43:13\n    |\n LL |     let _ = -1 as i32;\n    |             ^^^^^^^^^ help: try: `-1_i32`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:39:13\n+  --> $DIR/unnecessary_cast_fixable.rs:44:13\n    |\n LL |     let _ = -1.0 as f32;\n    |             ^^^^^^^^^^^ help: try: `-1.0_f32`"}, {"sha": "a9a4a0f5a6b5c8da75d41c3d0fe318d1cac553d0", "filename": "tests/ui/vtable_address_comparisons.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fvtable_address_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fvtable_address_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvtable_address_comparisons.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -4,6 +4,8 @@ use std::rc::Rc;\n use std::sync::Arc;\n \n #[warn(clippy::vtable_address_comparisons)]\n+#[allow(clippy::borrow_as_ptr)]\n+\n fn main() {\n     let a: *const dyn Debug = &1 as &dyn Debug;\n     let b: *const dyn Debug = &1 as &dyn Debug;"}, {"sha": "2f1be61e5df72acd660326acd0d4db83deecf58d", "filename": "tests/ui/vtable_address_comparisons.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fvtable_address_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fvtable_address_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvtable_address_comparisons.stderr?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,5 +1,5 @@\n error: comparing trait object pointers compares a non-unique vtable address\n-  --> $DIR/vtable_address_comparisons.rs:12:13\n+  --> $DIR/vtable_address_comparisons.rs:14:13\n    |\n LL |     let _ = a == b;\n    |             ^^^^^^\n@@ -8,71 +8,71 @@ LL |     let _ = a == b;\n    = help: consider extracting and comparing data pointers only\n \n error: comparing trait object pointers compares a non-unique vtable address\n-  --> $DIR/vtable_address_comparisons.rs:13:13\n+  --> $DIR/vtable_address_comparisons.rs:15:13\n    |\n LL |     let _ = a != b;\n    |             ^^^^^^\n    |\n    = help: consider extracting and comparing data pointers only\n \n error: comparing trait object pointers compares a non-unique vtable address\n-  --> $DIR/vtable_address_comparisons.rs:14:13\n+  --> $DIR/vtable_address_comparisons.rs:16:13\n    |\n LL |     let _ = a < b;\n    |             ^^^^^\n    |\n    = help: consider extracting and comparing data pointers only\n \n error: comparing trait object pointers compares a non-unique vtable address\n-  --> $DIR/vtable_address_comparisons.rs:15:13\n+  --> $DIR/vtable_address_comparisons.rs:17:13\n    |\n LL |     let _ = a <= b;\n    |             ^^^^^^\n    |\n    = help: consider extracting and comparing data pointers only\n \n error: comparing trait object pointers compares a non-unique vtable address\n-  --> $DIR/vtable_address_comparisons.rs:16:13\n+  --> $DIR/vtable_address_comparisons.rs:18:13\n    |\n LL |     let _ = a > b;\n    |             ^^^^^\n    |\n    = help: consider extracting and comparing data pointers only\n \n error: comparing trait object pointers compares a non-unique vtable address\n-  --> $DIR/vtable_address_comparisons.rs:17:13\n+  --> $DIR/vtable_address_comparisons.rs:19:13\n    |\n LL |     let _ = a >= b;\n    |             ^^^^^^\n    |\n    = help: consider extracting and comparing data pointers only\n \n error: comparing trait object pointers compares a non-unique vtable address\n-  --> $DIR/vtable_address_comparisons.rs:18:5\n+  --> $DIR/vtable_address_comparisons.rs:20:5\n    |\n LL |     ptr::eq(a, b);\n    |     ^^^^^^^^^^^^^\n    |\n    = help: consider extracting and comparing data pointers only\n \n error: comparing trait object pointers compares a non-unique vtable address\n-  --> $DIR/vtable_address_comparisons.rs:22:5\n+  --> $DIR/vtable_address_comparisons.rs:24:5\n    |\n LL |     ptr::eq(a, b);\n    |     ^^^^^^^^^^^^^\n    |\n    = help: consider extracting and comparing data pointers only\n \n error: comparing trait object pointers compares a non-unique vtable address\n-  --> $DIR/vtable_address_comparisons.rs:25:5\n+  --> $DIR/vtable_address_comparisons.rs:27:5\n    |\n LL |     Rc::ptr_eq(&a, &a);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider extracting and comparing data pointers only\n \n error: comparing trait object pointers compares a non-unique vtable address\n-  --> $DIR/vtable_address_comparisons.rs:28:5\n+  --> $DIR/vtable_address_comparisons.rs:30:5\n    |\n LL |     Arc::ptr_eq(&a, &a);\n    |     ^^^^^^^^^^^^^^^^^^^"}, {"sha": "fd9ac1fa7663b897333d1453e604e44a3143d1e7", "filename": "tests/ui/zero_offset.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fzero_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fzero_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_offset.rs?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,3 +1,4 @@\n+#[allow(clippy::borrow_as_ptr)]\n fn main() {\n     unsafe {\n         let m = &mut () as *mut ();"}, {"sha": "481a446571ab0880bece640007231774cf253cf6", "filename": "tests/ui/zero_offset.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fzero_offset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3298de7f661b1f91dec5faef8eb6d36a6b30ffa0/tests%2Fui%2Fzero_offset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_offset.stderr?ref=3298de7f661b1f91dec5faef8eb6d36a6b30ffa0", "patch": "@@ -1,49 +1,49 @@\n error: offset calculation on zero-sized value\n-  --> $DIR/zero_offset.rs:4:9\n+  --> $DIR/zero_offset.rs:5:9\n    |\n LL |         m.offset(0);\n    |         ^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::zst_offset)]` on by default\n \n error: offset calculation on zero-sized value\n-  --> $DIR/zero_offset.rs:5:9\n+  --> $DIR/zero_offset.rs:6:9\n    |\n LL |         m.wrapping_add(0);\n    |         ^^^^^^^^^^^^^^^^^\n \n error: offset calculation on zero-sized value\n-  --> $DIR/zero_offset.rs:6:9\n+  --> $DIR/zero_offset.rs:7:9\n    |\n LL |         m.sub(0);\n    |         ^^^^^^^^\n \n error: offset calculation on zero-sized value\n-  --> $DIR/zero_offset.rs:7:9\n+  --> $DIR/zero_offset.rs:8:9\n    |\n LL |         m.wrapping_sub(0);\n    |         ^^^^^^^^^^^^^^^^^\n \n error: offset calculation on zero-sized value\n-  --> $DIR/zero_offset.rs:10:9\n+  --> $DIR/zero_offset.rs:11:9\n    |\n LL |         c.offset(0);\n    |         ^^^^^^^^^^^\n \n error: offset calculation on zero-sized value\n-  --> $DIR/zero_offset.rs:11:9\n+  --> $DIR/zero_offset.rs:12:9\n    |\n LL |         c.wrapping_add(0);\n    |         ^^^^^^^^^^^^^^^^^\n \n error: offset calculation on zero-sized value\n-  --> $DIR/zero_offset.rs:12:9\n+  --> $DIR/zero_offset.rs:13:9\n    |\n LL |         c.sub(0);\n    |         ^^^^^^^^\n \n error: offset calculation on zero-sized value\n-  --> $DIR/zero_offset.rs:13:9\n+  --> $DIR/zero_offset.rs:14:9\n    |\n LL |         c.wrapping_sub(0);\n    |         ^^^^^^^^^^^^^^^^^"}]}