{"sha": "4839c790aeb91e080412c2290569a3b95e438d87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MzljNzkwYWViOTFlMDgwNDEyYzIyOTA1NjlhM2I5NWU0MzhkODc=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-19T08:10:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-19T08:10:20Z"}, "message": "Merge pull request #2844 from illicitonion/default_trait_access\n\nAdd default_trait_access lint", "tree": {"sha": "4d8e78c7a45c0fffe90439bf888046aa7016b755", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d8e78c7a45c0fffe90439bf888046aa7016b755"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4839c790aeb91e080412c2290569a3b95e438d87", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbKLpsCRBK7hj4Ov3rIwAAdHIIAE5WOJr9G5yyyaI6kPKHk2KW\nhUJ/9attrTrfElYsS9oD0W7JWrTsKgKMiChrH/3ODDko14bigWBCsZYG1laUWgmk\nNIWKh0dEI5yV+txhomtDSFDl8eSmU3Lm8XwHp7zus16hIEs1C5AV8+4TsCtQTtBM\nFQkiP/j+vBz5eYbNBcwNsME6SWy4YTBBWz9tQVtcd+bY9twYyPxBkAyTlOHq9kYo\ndhRNyGMVNqUDW0eeBohX6mGvcbWeDVIC2V215wzwdry9mnpUeLc3p0BaxHt/P5M+\nUMZY5ljgqiFTK9SU3WkHX3zDDuO84AEo77ti5ooMS/p87kCjvtsI3m2ZMRF3pdE=\n=IjON\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d8e78c7a45c0fffe90439bf888046aa7016b755\nparent 7d672888fe192290c31b626a393dd14ec1865fbc\nparent b24d75313ebda42104cf60977d03748976da8c40\nauthor Oliver Schneider <github35764891676564198441@oli-obk.de> 1529395820 +0200\ncommitter GitHub <noreply@github.com> 1529395820 +0200\n\nMerge pull request #2844 from illicitonion/default_trait_access\n\nAdd default_trait_access lint"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4839c790aeb91e080412c2290569a3b95e438d87", "html_url": "https://github.com/rust-lang/rust/commit/4839c790aeb91e080412c2290569a3b95e438d87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4839c790aeb91e080412c2290569a3b95e438d87/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d672888fe192290c31b626a393dd14ec1865fbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d672888fe192290c31b626a393dd14ec1865fbc", "html_url": "https://github.com/rust-lang/rust/commit/7d672888fe192290c31b626a393dd14ec1865fbc"}, {"sha": "b24d75313ebda42104cf60977d03748976da8c40", "url": "https://api.github.com/repos/rust-lang/rust/commits/b24d75313ebda42104cf60977d03748976da8c40", "html_url": "https://github.com/rust-lang/rust/commit/b24d75313ebda42104cf60977d03748976da8c40"}], "stats": {"total": 624, "additions": 432, "deletions": 192}, "files": [{"sha": "d96ed8db78653e4779db10ed83aaf3e97c980798", "filename": "clippy_lints/src/default_trait_access.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4839c790aeb91e080412c2290569a3b95e438d87/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839c790aeb91e080412c2290569a3b95e438d87/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=4839c790aeb91e080412c2290569a3b95e438d87", "patch": "@@ -0,0 +1,68 @@\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use rustc::ty::TypeVariants;\n+\n+use crate::utils::{any_parent_is_automatically_derived, match_def_path, opt_def_id, paths, span_lint_and_sugg};\n+\n+\n+/// **What it does:** Checks for literal calls to `Default::default()`.\n+///\n+/// **Why is this bad?** It's more clear to the reader to use the name of the type whose default is\n+/// being gotten than the generic `Default`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// // Bad\n+/// let s: String = Default::default();\n+///\n+/// // Good\n+/// let s = String::default();\n+/// ```\n+declare_clippy_lint! {\n+    pub DEFAULT_TRAIT_ACCESS,\n+    style,\n+    \"checks for literal calls to Default::default()\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct DefaultTraitAccess;\n+\n+impl LintPass for DefaultTraitAccess {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DEFAULT_TRAIT_ACCESS)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DefaultTraitAccess {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_chain! {\n+            if let ExprCall(ref path, ..) = expr.node;\n+            if !any_parent_is_automatically_derived(cx.tcx, expr.id);\n+            if let ExprPath(ref qpath) = path.node;\n+            if let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, path.hir_id));\n+            if match_def_path(cx.tcx, def_id, &paths::DEFAULT_TRAIT_METHOD);\n+            then {\n+                match qpath {\n+                    QPath::Resolved(..) => {\n+                        // TODO: Work out a way to put \"whatever the imported way of referencing\n+                        // this type in this file\" rather than a fully-qualified type.\n+                        let expr_ty = cx.tables.expr_ty(expr);\n+                        if let TypeVariants::TyAdt(..) = expr_ty.sty {\n+                            let replacement = format!(\"{}::default()\", expr_ty);\n+                            span_lint_and_sugg(\n+                                cx,\n+                                DEFAULT_TRAIT_ACCESS,\n+                                expr.span,\n+                                &format!(\"Calling {} is more clear than this expression\", replacement),\n+                                \"try\",\n+                                replacement);\n+                         }\n+                    },\n+                    QPath::TypeRelative(..) => {},\n+                }\n+            }\n+         }\n+    }\n+}"}, {"sha": "adf1020e07b83fdca63dcc55d54f6fe80949b396", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4839c790aeb91e080412c2290569a3b95e438d87/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839c790aeb91e080412c2290569a3b95e438d87/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4839c790aeb91e080412c2290569a3b95e438d87", "patch": "@@ -111,6 +111,7 @@ pub mod collapsible_if;\n pub mod const_static_lifetime;\n pub mod copies;\n pub mod cyclomatic_complexity;\n+pub mod default_trait_access;\n pub mod derive;\n pub mod doc;\n pub mod double_comparison;\n@@ -430,6 +431,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd);\n     reg.register_late_lint_pass(box unwrap::Pass);\n     reg.register_late_lint_pass(box duration_subsec::DurationSubsec);\n+    reg.register_late_lint_pass(box default_trait_access::DefaultTraitAccess);\n \n \n     reg.register_lint_group(\"clippy_restriction\", vec![\n@@ -517,6 +519,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         copies::IF_SAME_THEN_ELSE,\n         copies::IFS_SAME_COND,\n         cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n+        default_trait_access::DEFAULT_TRAIT_ACCESS,\n         derive::DERIVE_HASH_XOR_EQ,\n         double_comparison::DOUBLE_COMPARISONS,\n         double_parens::DOUBLE_PARENS,\n@@ -715,6 +718,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n         collapsible_if::COLLAPSIBLE_IF,\n         const_static_lifetime::CONST_STATIC_LIFETIME,\n+        default_trait_access::DEFAULT_TRAIT_ACCESS,\n         enum_variants::ENUM_VARIANT_NAMES,\n         enum_variants::MODULE_INCEPTION,\n         eq_op::OP_REF,"}, {"sha": "612fdfafe3bb5d07e4e417ad56e1899480307a05", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4839c790aeb91e080412c2290569a3b95e438d87/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839c790aeb91e080412c2290569a3b95e438d87/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=4839c790aeb91e080412c2290569a3b95e438d87", "patch": "@@ -1129,3 +1129,17 @@ pub fn without_block_comments(lines: Vec<&str>) -> Vec<&str> {\n \n     without\n }\n+\n+pub fn any_parent_is_automatically_derived(tcx: TyCtxt, node: NodeId) -> bool {\n+    let map = &tcx.hir;\n+    let mut prev_enclosing_node = None;\n+    let mut enclosing_node = node;\n+    while Some(enclosing_node) != prev_enclosing_node {\n+        if is_automatically_derived(map.attrs(enclosing_node)) {\n+            return true;\n+        }\n+        prev_enclosing_node = Some(enclosing_node);\n+        enclosing_node = map.get_parent(enclosing_node);\n+    }\n+    false\n+}"}, {"sha": "7606f4f8471e9f8ddfc4762dee38f12791630e37", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4839c790aeb91e080412c2290569a3b95e438d87/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839c790aeb91e080412c2290569a3b95e438d87/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=4839c790aeb91e080412c2290569a3b95e438d87", "patch": "@@ -24,6 +24,7 @@ pub const C_VOID: [&str; 4] = [\"std\", \"os\", \"raw\", \"c_void\"];\n pub const C_VOID_LIBC: [&str; 2] = [\"libc\", \"c_void\"];\n pub const DEBUG_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Debug\", \"fmt\"];\n pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n+pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n pub const DISPLAY_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];"}, {"sha": "675e64246fa909b43339da9424780205812b5400", "filename": "tests/ui/default_trait_access.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/4839c790aeb91e080412c2290569a3b95e438d87/tests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839c790aeb91e080412c2290569a3b95e438d87/tests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.rs?ref=4839c790aeb91e080412c2290569a3b95e438d87", "patch": "@@ -0,0 +1,100 @@\n+#![warn(default_trait_access)]\n+\n+use std::default::Default as D2;\n+use std::string;\n+use std::default;\n+\n+fn main() {\n+    let s1: String = Default::default();\n+\n+    let s2 = String::default();\n+\n+    let s3: String = D2::default();\n+\n+    let s4: String = std::default::Default::default();\n+\n+    let s5 = string::String::default();\n+\n+    let s6: String = default::Default::default();\n+\n+    let s7 = std::string::String::default();\n+\n+    let s8: String = DefaultFactory::make_t_badly();\n+\n+    let s9: String = DefaultFactory::make_t_nicely();\n+\n+    let s10 = DerivedDefault::default();\n+\n+    let s11: GenericDerivedDefault<String> = Default::default();\n+\n+    let s12 = GenericDerivedDefault::<String>::default();\n+\n+    let s13 = TupleDerivedDefault::default();\n+\n+    let s14: TupleDerivedDefault = Default::default();\n+\n+    let s15: ArrayDerivedDefault = Default::default();\n+\n+    let s16 = ArrayDerivedDefault::default();\n+\n+    let s17: TupleStructDerivedDefault = Default::default();\n+\n+    let s18 = TupleStructDerivedDefault::default();\n+\n+    println!(\n+        \"[{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}]\",\n+        s1,\n+        s2,\n+        s3,\n+        s4,\n+        s5,\n+        s6,\n+        s7,\n+        s8,\n+        s9,\n+        s10,\n+        s11,\n+        s12,\n+        s13,\n+        s14,\n+        s15,\n+        s16,\n+        s17,\n+        s18,\n+    );\n+}\n+\n+struct DefaultFactory;\n+\n+impl DefaultFactory {\n+    pub fn make_t_badly<T: Default>() -> T {\n+        Default::default()\n+    }\n+\n+    pub fn make_t_nicely<T: Default>() -> T {\n+        T::default()\n+    }\n+}\n+\n+#[derive(Debug, Default)]\n+struct DerivedDefault {\n+    pub s: String,\n+}\n+\n+#[derive(Debug, Default)]\n+struct GenericDerivedDefault<T: Default + std::fmt::Debug> {\n+    pub s: T,\n+}\n+\n+#[derive(Debug, Default)]\n+struct TupleDerivedDefault {\n+    pub s: (String, String),\n+}\n+\n+#[derive(Debug, Default)]\n+struct ArrayDerivedDefault {\n+    pub s: [String; 10],\n+}\n+\n+#[derive(Debug, Default)]\n+struct TupleStructDerivedDefault(String);"}, {"sha": "8bb4731035aecd5496af36bbd5af1ce0d276c88f", "filename": "tests/ui/default_trait_access.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4839c790aeb91e080412c2290569a3b95e438d87/tests%2Fui%2Fdefault_trait_access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4839c790aeb91e080412c2290569a3b95e438d87/tests%2Fui%2Fdefault_trait_access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.stderr?ref=4839c790aeb91e080412c2290569a3b95e438d87", "patch": "@@ -0,0 +1,52 @@\n+error: Calling std::string::String::default() is more clear than this expression\n+ --> $DIR/default_trait_access.rs:8:22\n+  |\n+8 |     let s1: String = Default::default();\n+  |                      ^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+  |\n+  = note: `-D default-trait-access` implied by `-D warnings`\n+\n+error: Calling std::string::String::default() is more clear than this expression\n+  --> $DIR/default_trait_access.rs:12:22\n+   |\n+12 |     let s3: String = D2::default();\n+   |                      ^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+\n+error: Calling std::string::String::default() is more clear than this expression\n+  --> $DIR/default_trait_access.rs:14:22\n+   |\n+14 |     let s4: String = std::default::Default::default();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+\n+error: Calling std::string::String::default() is more clear than this expression\n+  --> $DIR/default_trait_access.rs:18:22\n+   |\n+18 |     let s6: String = default::Default::default();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+\n+error: Calling GenericDerivedDefault<std::string::String>::default() is more clear than this expression\n+  --> $DIR/default_trait_access.rs:28:46\n+   |\n+28 |     let s11: GenericDerivedDefault<String> = Default::default();\n+   |                                              ^^^^^^^^^^^^^^^^^^ help: try: `GenericDerivedDefault<std::string::String>::default()`\n+\n+error: Calling TupleDerivedDefault::default() is more clear than this expression\n+  --> $DIR/default_trait_access.rs:34:36\n+   |\n+34 |     let s14: TupleDerivedDefault = Default::default();\n+   |                                    ^^^^^^^^^^^^^^^^^^ help: try: `TupleDerivedDefault::default()`\n+\n+error: Calling ArrayDerivedDefault::default() is more clear than this expression\n+  --> $DIR/default_trait_access.rs:36:36\n+   |\n+36 |     let s15: ArrayDerivedDefault = Default::default();\n+   |                                    ^^^^^^^^^^^^^^^^^^ help: try: `ArrayDerivedDefault::default()`\n+\n+error: Calling TupleStructDerivedDefault::default() is more clear than this expression\n+  --> $DIR/default_trait_access.rs:40:42\n+   |\n+40 |     let s17: TupleStructDerivedDefault = Default::default();\n+   |                                          ^^^^^^^^^^^^^^^^^^ help: try: `TupleStructDerivedDefault::default()`\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/default_trait_access.stdout", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4839c790aeb91e080412c2290569a3b95e438d87/tests%2Fui%2Fdefault_trait_access.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4839c790aeb91e080412c2290569a3b95e438d87/tests%2Fui%2Fdefault_trait_access.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.stdout?ref=4839c790aeb91e080412c2290569a3b95e438d87"}, {"sha": "49df39ca71bcbec5917ebfc39c9b378ee94355c2", "filename": "tests/ui/implicit_hasher.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4839c790aeb91e080412c2290569a3b95e438d87/tests%2Fui%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839c790aeb91e080412c2290569a3b95e438d87/tests%2Fui%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.rs?ref=4839c790aeb91e080412c2290569a3b95e438d87", "patch": "@@ -30,12 +30,12 @@ impl Foo<i16> for HashMap<String, String> {\n \n impl<K: Hash + Eq, V, S: BuildHasher + Default> Foo<i32> for HashMap<K, V, S> {\n     fn make() -> (Self, Self) {\n-        (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n+        (HashMap::default(), HashMap::with_capacity_and_hasher(10, S::default()))\n     }\n }\n impl<S: BuildHasher + Default> Foo<i64> for HashMap<String, String, S> {\n     fn make() -> (Self, Self) {\n-        (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n+        (HashMap::default(), HashMap::with_capacity_and_hasher(10, S::default()))\n     }\n }\n \n@@ -53,12 +53,12 @@ impl Foo<i16> for HashSet<String> {\n \n impl<T: Hash + Eq, S: BuildHasher + Default> Foo<i32> for HashSet<T, S> {\n     fn make() -> (Self, Self) {\n-        (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default::default()))\n+        (HashSet::default(), HashSet::with_capacity_and_hasher(10, S::default()))\n     }\n }\n impl<S: BuildHasher + Default> Foo<i64> for HashSet<String, S> {\n     fn make() -> (Self, Self) {\n-        (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default::default()))\n+        (HashSet::default(), HashSet::with_capacity_and_hasher(10, S::default()))\n     }\n }\n "}, {"sha": "b42cc1f75b7242a0447f768d4991774c23f5dfde", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4839c790aeb91e080412c2290569a3b95e438d87/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4839c790aeb91e080412c2290569a3b95e438d87/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=4839c790aeb91e080412c2290569a3b95e438d87", "patch": "@@ -3,7 +3,8 @@\n \n #![warn(clippy, clippy_pedantic, option_unwrap_used)]\n #![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default,\n-    new_without_default_derive, missing_docs_in_private_items, needless_pass_by_value)]\n+    new_without_default_derive, missing_docs_in_private_items, needless_pass_by_value,\n+    default_trait_access)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "01ec0895fb00e7503edfdabd923b554b76a4efcb", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 187, "deletions": 187, "changes": 374, "blob_url": "https://github.com/rust-lang/rust/blob/4839c790aeb91e080412c2290569a3b95e438d87/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4839c790aeb91e080412c2290569a3b95e438d87/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=4839c790aeb91e080412c2290569a3b95e438d87", "patch": "@@ -1,528 +1,528 @@\n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:20:29\n+  --> $DIR/methods.rs:21:29\n    |\n-20 |     pub fn add(self, other: T) -> T { self }\n+21 |     pub fn add(self, other: T) -> T { self }\n    |                             ^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:20:35\n+  --> $DIR/methods.rs:21:35\n    |\n-20 |     pub fn add(self, other: T) -> T { self }\n+21 |     pub fn add(self, other: T) -> T { self }\n    |                                   ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:24:25\n+  --> $DIR/methods.rs:25:25\n    |\n-24 |     fn eq(&self, other: T) -> bool { true } // no error, private function\n+25 |     fn eq(&self, other: T) -> bool { true } // no error, private function\n    |                         ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:26:26\n+  --> $DIR/methods.rs:27:26\n    |\n-26 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n+27 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n    |                          ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:26:33\n+  --> $DIR/methods.rs:27:33\n    |\n-26 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n+27 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n    |                                 ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:27:21\n+  --> $DIR/methods.rs:28:21\n    |\n-27 |     fn div(self) -> T { self } // no error, different #arguments\n+28 |     fn div(self) -> T { self } // no error, different #arguments\n    |                     ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:28:25\n+  --> $DIR/methods.rs:29:25\n    |\n-28 |     fn rem(self, other: T) { } // no error, wrong return type\n+29 |     fn rem(self, other: T) { } // no error, wrong return type\n    |                         ^ help: use the applicable keyword: `Self`\n \n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:20:5\n+  --> $DIR/methods.rs:21:5\n    |\n-20 |     pub fn add(self, other: T) -> T { self }\n+21 |     pub fn add(self, other: T) -> T { self }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D should-implement-trait` implied by `-D warnings`\n \n error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:31:17\n+  --> $DIR/methods.rs:32:17\n    |\n-31 |     fn into_u16(&self) -> u16 { 0 }\n+32 |     fn into_u16(&self) -> u16 { 0 }\n    |                 ^^^^^\n    |\n    = note: `-D wrong-self-convention` implied by `-D warnings`\n \n error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:33:21\n+  --> $DIR/methods.rs:34:21\n    |\n-33 |     fn to_something(self) -> u32 { 0 }\n+34 |     fn to_something(self) -> u32 { 0 }\n    |                     ^^^^\n \n error: methods called `new` usually take no self; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:35:12\n+  --> $DIR/methods.rs:36:12\n    |\n-35 |     fn new(self) {}\n+36 |     fn new(self) {}\n    |            ^^^^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/methods.rs:35:5\n+  --> $DIR/methods.rs:36:5\n    |\n-35 |     fn new(self) {}\n+36 |     fn new(self) {}\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: `-D new-ret-no-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:79:24\n+  --> $DIR/methods.rs:80:24\n    |\n-79 |     fn new() -> Option<V<T>> { None }\n+80 |     fn new() -> Option<V<T>> { None }\n    |                        ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:83:19\n+  --> $DIR/methods.rs:84:19\n    |\n-83 |     type Output = T;\n+84 |     type Output = T;\n    |                   ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:84:25\n+  --> $DIR/methods.rs:85:25\n    |\n-84 |     fn mul(self, other: T) -> T { self } // no error, obviously\n+85 |     fn mul(self, other: T) -> T { self } // no error, obviously\n    |                         ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:84:31\n+  --> $DIR/methods.rs:85:31\n    |\n-84 |     fn mul(self, other: T) -> T { self } // no error, obviously\n+85 |     fn mul(self, other: T) -> T { self } // no error, obviously\n    |                               ^ help: use the applicable keyword: `Self`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-   --> $DIR/methods.rs:103:13\n+   --> $DIR/methods.rs:104:13\n     |\n-103 |       let _ = opt.map(|x| x + 1)\n+104 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-104 | |\n-105 | |                .unwrap_or(0); // should lint even though this call is on a separate line\n+105 | |\n+106 | |                .unwrap_or(0); // should lint even though this call is on a separate line\n     | |____________________________^\n     |\n     = note: `-D option-map-unwrap-or` implied by `-D warnings`\n     = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-   --> $DIR/methods.rs:107:13\n+   --> $DIR/methods.rs:108:13\n     |\n-107 |       let _ = opt.map(|x| {\n+108 |       let _ = opt.map(|x| {\n     |  _____________^\n-108 | |                         x + 1\n-109 | |                     }\n-110 | |               ).unwrap_or(0);\n+109 | |                         x + 1\n+110 | |                     }\n+111 | |               ).unwrap_or(0);\n     | |____________________________^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-   --> $DIR/methods.rs:111:13\n+   --> $DIR/methods.rs:112:13\n     |\n-111 |       let _ = opt.map(|x| x + 1)\n+112 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-112 | |                .unwrap_or({\n-113 | |                     0\n-114 | |                 });\n+113 | |                .unwrap_or({\n+114 | |                     0\n+115 | |                 });\n     | |__________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-   --> $DIR/methods.rs:116:13\n+   --> $DIR/methods.rs:117:13\n     |\n-116 |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n+117 |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-   --> $DIR/methods.rs:118:13\n+   --> $DIR/methods.rs:119:13\n     |\n-118 |       let _ = opt.map(|x| {\n+119 |       let _ = opt.map(|x| {\n     |  _____________^\n-119 | |         Some(x + 1)\n-120 | |     }\n-121 | |     ).unwrap_or(None);\n+120 | |         Some(x + 1)\n+121 | |     }\n+122 | |     ).unwrap_or(None);\n     | |_____________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-   --> $DIR/methods.rs:122:13\n+   --> $DIR/methods.rs:123:13\n     |\n-122 |       let _ = opt\n+123 |       let _ = opt\n     |  _____________^\n-123 | |         .map(|x| Some(x + 1))\n-124 | |         .unwrap_or(None);\n+124 | |         .map(|x| Some(x + 1))\n+125 | |         .unwrap_or(None);\n     | |________________________^\n     |\n     = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:130:13\n+   --> $DIR/methods.rs:131:13\n     |\n-130 |       let _ = opt.map(|x| x + 1)\n+131 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-131 | |\n-132 | |                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n+132 | |\n+133 | |                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n     | |____________________________________^\n     |\n     = note: `-D option-map-unwrap-or-else` implied by `-D warnings`\n     = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:134:13\n+   --> $DIR/methods.rs:135:13\n     |\n-134 |       let _ = opt.map(|x| {\n+135 |       let _ = opt.map(|x| {\n     |  _____________^\n-135 | |                         x + 1\n-136 | |                     }\n-137 | |               ).unwrap_or_else(|| 0);\n+136 | |                         x + 1\n+137 | |                     }\n+138 | |               ).unwrap_or_else(|| 0);\n     | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:138:13\n+   --> $DIR/methods.rs:139:13\n     |\n-138 |       let _ = opt.map(|x| x + 1)\n+139 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-139 | |                .unwrap_or_else(||\n-140 | |                     0\n-141 | |                 );\n+140 | |                .unwrap_or_else(||\n+141 | |                     0\n+142 | |                 );\n     | |_________________^\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-   --> $DIR/methods.rs:147:13\n+   --> $DIR/methods.rs:148:13\n     |\n-147 |     let _ = opt.map_or(None, |x| Some(x + 1));\n+148 |     let _ = opt.map_or(None, |x| Some(x + 1));\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using and_then instead: `opt.and_then(|x| Some(x + 1))`\n     |\n     = note: `-D option-map-or-none` implied by `-D warnings`\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-   --> $DIR/methods.rs:149:13\n+   --> $DIR/methods.rs:150:13\n     |\n-149 |       let _ = opt.map_or(None, |x| {\n+150 |       let _ = opt.map_or(None, |x| {\n     |  _____________^\n-150 | |                         Some(x + 1)\n-151 | |                        }\n-152 | |                 );\n+151 | |                         Some(x + 1)\n+152 | |                        }\n+153 | |                 );\n     | |_________________^\n help: try using and_then instead\n     |\n-149 |     let _ = opt.and_then(|x| {\n-150 |                         Some(x + 1)\n-151 |                        });\n+150 |     let _ = opt.and_then(|x| {\n+151 |                         Some(x + 1)\n+152 |                        });\n     |\n \n error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:162:13\n+   --> $DIR/methods.rs:163:13\n     |\n-162 |       let _ = res.map(|x| x + 1)\n+163 |       let _ = res.map(|x| x + 1)\n     |  _____________^\n-163 | |\n-164 | |                .unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n+164 | |\n+165 | |                .unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n     | |_____________________________________^\n     |\n     = note: `-D result-map-unwrap-or-else` implied by `-D warnings`\n     = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `ok().map_or_else(|e| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:166:13\n+   --> $DIR/methods.rs:167:13\n     |\n-166 |       let _ = res.map(|x| {\n+167 |       let _ = res.map(|x| {\n     |  _____________^\n-167 | |                         x + 1\n-168 | |                     }\n-169 | |               ).unwrap_or_else(|e| 0);\n+168 | |                         x + 1\n+169 | |                     }\n+170 | |               ).unwrap_or_else(|e| 0);\n     | |_____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:170:13\n+   --> $DIR/methods.rs:171:13\n     |\n-170 |       let _ = res.map(|x| x + 1)\n+171 |       let _ = res.map(|x| x + 1)\n     |  _____________^\n-171 | |                .unwrap_or_else(|e|\n-172 | |                     0\n-173 | |                 );\n+172 | |                .unwrap_or_else(|e|\n+173 | |                     0\n+174 | |                 );\n     | |_________________^\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:199:24\n+   --> $DIR/methods.rs:200:24\n     |\n-199 |     fn filter(self) -> IteratorFalsePositives {\n+200 |     fn filter(self) -> IteratorFalsePositives {\n     |                        ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:203:22\n+   --> $DIR/methods.rs:204:22\n     |\n-203 |     fn next(self) -> IteratorFalsePositives {\n+204 |     fn next(self) -> IteratorFalsePositives {\n     |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:223:32\n+   --> $DIR/methods.rs:224:32\n     |\n-223 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n+224 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n     |                                ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:233:13\n+   --> $DIR/methods.rs:234:13\n     |\n-233 |     let _ = v.iter().filter(|&x| *x < 0).next();\n+234 |     let _ = v.iter().filter(|&x| *x < 0).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D filter-next` implied by `-D warnings`\n     = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:236:13\n+   --> $DIR/methods.rs:237:13\n     |\n-236 |       let _ = v.iter().filter(|&x| {\n+237 |       let _ = v.iter().filter(|&x| {\n     |  _____________^\n-237 | |                                 *x < 0\n-238 | |                             }\n-239 | |                    ).next();\n+238 | |                                 *x < 0\n+239 | |                             }\n+240 | |                    ).next();\n     | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:251:13\n+   --> $DIR/methods.rs:252:13\n     |\n-251 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+252 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D search-is-some` implied by `-D warnings`\n     = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:254:13\n+   --> $DIR/methods.rs:255:13\n     |\n-254 |       let _ = v.iter().find(|&x| {\n+255 |       let _ = v.iter().find(|&x| {\n     |  _____________^\n-255 | |                               *x < 0\n-256 | |                           }\n-257 | |                    ).is_some();\n+256 | |                               *x < 0\n+257 | |                           }\n+258 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:260:13\n+   --> $DIR/methods.rs:261:13\n     |\n-260 |     let _ = v.iter().position(|&x| x < 0).is_some();\n+261 |     let _ = v.iter().position(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:263:13\n+   --> $DIR/methods.rs:264:13\n     |\n-263 |       let _ = v.iter().position(|&x| {\n+264 |       let _ = v.iter().position(|&x| {\n     |  _____________^\n-264 | |                                   x < 0\n-265 | |                               }\n-266 | |                    ).is_some();\n+265 | |                                   x < 0\n+266 | |                               }\n+267 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:269:13\n+   --> $DIR/methods.rs:270:13\n     |\n-269 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+270 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:272:13\n+   --> $DIR/methods.rs:273:13\n     |\n-272 |       let _ = v.iter().rposition(|&x| {\n+273 |       let _ = v.iter().rposition(|&x| {\n     |  _____________^\n-273 | |                                    x < 0\n-274 | |                                }\n-275 | |                    ).is_some();\n+274 | |                                    x < 0\n+275 | |                                }\n+276 | |                    ).is_some();\n     | |______________________________^\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:289:21\n+   --> $DIR/methods.rs:290:21\n     |\n-289 |         fn new() -> Foo { Foo }\n+290 |         fn new() -> Foo { Foo }\n     |                     ^^^ help: use the applicable keyword: `Self`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:307:22\n+   --> $DIR/methods.rs:308:22\n     |\n-307 |     with_constructor.unwrap_or(make());\n+308 |     with_constructor.unwrap_or(make());\n     |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n     |\n     = note: `-D or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-   --> $DIR/methods.rs:310:5\n+   --> $DIR/methods.rs:311:5\n     |\n-310 |     with_new.unwrap_or(Vec::new());\n+311 |     with_new.unwrap_or(Vec::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:313:21\n+   --> $DIR/methods.rs:314:21\n     |\n-313 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n+314 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:316:14\n+   --> $DIR/methods.rs:317:14\n     |\n-316 |     with_err.unwrap_or(make());\n+317 |     with_err.unwrap_or(make());\n     |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:319:19\n+   --> $DIR/methods.rs:320:19\n     |\n-319 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n+320 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:322:5\n+   --> $DIR/methods.rs:323:5\n     |\n-322 |     with_default_trait.unwrap_or(Default::default());\n+323 |     with_default_trait.unwrap_or(Default::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:325:5\n+   --> $DIR/methods.rs:326:5\n     |\n-325 |     with_default_type.unwrap_or(u64::default());\n+326 |     with_default_type.unwrap_or(u64::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:328:14\n+   --> $DIR/methods.rs:329:14\n     |\n-328 |     with_vec.unwrap_or(vec![]);\n+329 |     with_vec.unwrap_or(vec![]);\n     |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:333:21\n+   --> $DIR/methods.rs:334:21\n     |\n-333 |     without_default.unwrap_or(Foo::new());\n+334 |     without_default.unwrap_or(Foo::new());\n     |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:336:19\n+   --> $DIR/methods.rs:337:19\n     |\n-336 |     map.entry(42).or_insert(String::new());\n+337 |     map.entry(42).or_insert(String::new());\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:339:21\n+   --> $DIR/methods.rs:340:21\n     |\n-339 |     btree.entry(42).or_insert(String::new());\n+340 |     btree.entry(42).or_insert(String::new());\n     |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:342:21\n+   --> $DIR/methods.rs:343:21\n     |\n-342 |     let _ = stringy.unwrap_or(\"\".to_owned());\n+343 |     let _ = stringy.unwrap_or(\"\".to_owned());\n     |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:365:26\n+   --> $DIR/methods.rs:366:26\n     |\n-365 |     with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n+366 |     with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n     |\n     = note: `-D expect-fun-call` implied by `-D warnings`\n \n error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:368:26\n+   --> $DIR/methods.rs:369:26\n     |\n-368 |     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+369 |     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(format!(\"Error {}: fake error\", error_code).as_str()))`\n \n error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:378:25\n+   --> $DIR/methods.rs:379:25\n     |\n-378 |     with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n+379 |     with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:381:25\n+   --> $DIR/methods.rs:382:25\n     |\n-381 |     with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+382 |     with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(format!(\"Error {}: fake error\", error_code).as_str()))`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:401:23\n+   --> $DIR/methods.rs:402:23\n     |\n-401 |         let bad_vec = some_vec.iter().nth(3);\n+402 |         let bad_vec = some_vec.iter().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:402:26\n+   --> $DIR/methods.rs:403:26\n     |\n-402 |         let bad_slice = &some_vec[..].iter().nth(3);\n+403 |         let bad_slice = &some_vec[..].iter().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:403:31\n+   --> $DIR/methods.rs:404:31\n     |\n-403 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+404 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:404:29\n+   --> $DIR/methods.rs:405:29\n     |\n-404 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+405 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:409:23\n+   --> $DIR/methods.rs:410:23\n     |\n-409 |         let bad_vec = some_vec.iter_mut().nth(3);\n+410 |         let bad_vec = some_vec.iter_mut().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:412:26\n+   --> $DIR/methods.rs:413:26\n     |\n-412 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+413 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:415:29\n+   --> $DIR/methods.rs:416:29\n     |\n-415 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+416 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:427:13\n+   --> $DIR/methods.rs:428:13\n     |\n-427 |     let _ = some_vec.iter().skip(42).next();\n+428 |     let _ = some_vec.iter().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:428:13\n+   --> $DIR/methods.rs:429:13\n     |\n-428 |     let _ = some_vec.iter().cycle().skip(42).next();\n+429 |     let _ = some_vec.iter().cycle().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:429:13\n+   --> $DIR/methods.rs:430:13\n     |\n-429 |     let _ = (1..10).skip(10).next();\n+430 |     let _ = (1..10).skip(10).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:430:14\n+   --> $DIR/methods.rs:431:14\n     |\n-430 |     let _ = &some_vec[..].iter().skip(3).next();\n+431 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:439:13\n+   --> $DIR/methods.rs:440:13\n     |\n-439 |     let _ = opt.unwrap();\n+440 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`"}]}