{"sha": "91e3b5172ce53ff957b0955533f4b3cc39aebf56", "node_id": "C_kwDOAAsO6NoAKDkxZTNiNTE3MmNlNTNmZjk1N2IwOTU1NTMzZjRiM2NjMzlhZWJmNTY", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-06T19:33:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-06T19:33:15Z"}, "message": "Rollup merge of #89050 - DeveloperC286:drain_fields_to_private, r=joshtriplett\n\nrefactor: VecDeques Drain fields to private\n\nMade the fields of VecDeque's Drain private by creating a Drain::new(...) function to create a new instance of Drain and migrating usage to use Drain::new(...).", "tree": {"sha": "9c6817402f7fb3a87e177f4a959819f8c0edd8ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c6817402f7fb3a87e177f4a959819f8c0edd8ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91e3b5172ce53ff957b0955533f4b3cc39aebf56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXfn7CRBK7hj4Ov3rIwAA3a4IAAaafXh7rw05x0rB49rafTW/\nRICAn9xnjosW1IOXODz8L4Ef1vuV++BLrcP9e/vW0RFG7Uw4q3VvClCAqSTDx2+0\nqxAbMwDlYX+FpwT+bINAF2jKiJMSeY139y1d01lkCpktvySj+uPXBb0cQKcjwDkz\ntc1mNYzii9PPplSjtzppkKqWKbYKm1V7LHeFOZbE3XdEPcFEZ8oke39rtuZro9Hi\nlJvpZlQL+w+06L/DVPBcAteK52vOxhmRXNs6aRtRxBSpI61o1EKPBtJoRVgnTlIJ\nim1HGbGzqnEIth0O8GHqB4GSvevPB5bU+aB3BOQjknenMK3sUcwAPswlhiCAW4o=\n=gy9h\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c6817402f7fb3a87e177f4a959819f8c0edd8ef\nparent 1e3b5d6725a84b2060f66e61a59f33ad12aa17f8\nparent b2e4e59fbe201ff23fd2911f2650827ad46902b9\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633548795 -0700\ncommitter GitHub <noreply@github.com> 1633548795 -0700\n\nRollup merge of #89050 - DeveloperC286:drain_fields_to_private, r=joshtriplett\n\nrefactor: VecDeques Drain fields to private\n\nMade the fields of VecDeque's Drain private by creating a Drain::new(...) function to create a new instance of Drain and migrating usage to use Drain::new(...).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91e3b5172ce53ff957b0955533f4b3cc39aebf56", "html_url": "https://github.com/rust-lang/rust/commit/91e3b5172ce53ff957b0955533f4b3cc39aebf56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91e3b5172ce53ff957b0955533f4b3cc39aebf56/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e3b5d6725a84b2060f66e61a59f33ad12aa17f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3b5d6725a84b2060f66e61a59f33ad12aa17f8", "html_url": "https://github.com/rust-lang/rust/commit/1e3b5d6725a84b2060f66e61a59f33ad12aa17f8"}, {"sha": "b2e4e59fbe201ff23fd2911f2650827ad46902b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e4e59fbe201ff23fd2911f2650827ad46902b9", "html_url": "https://github.com/rust-lang/rust/commit/b2e4e59fbe201ff23fd2911f2650827ad46902b9"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "05f94da6de70d796d077e22d3b4f6509b39cea25", "filename": "library/alloc/src/collections/vec_deque/drain.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/91e3b5172ce53ff957b0955533f4b3cc39aebf56/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e3b5172ce53ff957b0955533f4b3cc39aebf56/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs?ref=91e3b5172ce53ff957b0955533f4b3cc39aebf56", "patch": "@@ -18,10 +18,21 @@ pub struct Drain<\n     T: 'a,\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n > {\n-    pub(crate) after_tail: usize,\n-    pub(crate) after_head: usize,\n-    pub(crate) iter: Iter<'a, T>,\n-    pub(crate) deque: NonNull<VecDeque<T, A>>,\n+    after_tail: usize,\n+    after_head: usize,\n+    iter: Iter<'a, T>,\n+    deque: NonNull<VecDeque<T, A>>,\n+}\n+\n+impl<'a, T, A: Allocator> Drain<'a, T, A> {\n+    pub(super) unsafe fn new(\n+        after_tail: usize,\n+        after_head: usize,\n+        iter: Iter<'a, T>,\n+        deque: NonNull<VecDeque<T, A>>,\n+    ) -> Self {\n+        Drain { after_tail, after_head, iter, deque }\n+    }\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]"}, {"sha": "ea3136cae42b57ad83c237d44f24903b9a101ff5", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/91e3b5172ce53ff957b0955533f4b3cc39aebf56/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e3b5172ce53ff957b0955533f4b3cc39aebf56/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=91e3b5172ce53ff957b0955533f4b3cc39aebf56", "patch": "@@ -1269,19 +1269,17 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         // the drain is complete and the Drain destructor is run.\n         self.head = drain_tail;\n \n-        Drain {\n-            deque: NonNull::from(&mut *self),\n-            after_tail: drain_head,\n-            after_head: head,\n-            iter: Iter {\n-                tail: drain_tail,\n-                head: drain_head,\n-                // Crucially, we only create shared references from `self` here and read from\n-                // it.  We do not write to `self` nor reborrow to a mutable reference.\n-                // Hence the raw pointer we created above, for `deque`, remains valid.\n-                ring: unsafe { self.buffer_as_slice() },\n-            },\n-        }\n+        let deque = NonNull::from(&mut *self);\n+        let iter = Iter {\n+            tail: drain_tail,\n+            head: drain_head,\n+            // Crucially, we only create shared references from `self` here and read from\n+            // it.  We do not write to `self` nor reborrow to a mutable reference.\n+            // Hence the raw pointer we created above, for `deque`, remains valid.\n+            ring: unsafe { self.buffer_as_slice() },\n+        };\n+\n+        unsafe { Drain::new(drain_head, head, iter, deque) }\n     }\n \n     /// Clears the `VecDeque`, removing all values."}]}