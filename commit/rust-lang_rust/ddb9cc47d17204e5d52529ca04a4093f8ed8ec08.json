{"sha": "ddb9cc47d17204e5d52529ca04a4093f8ed8ec08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYjljYzQ3ZDE3MjA0ZTVkNTI1MjljYTA0YTQwOTNmOGVkOGVjMDg=", "commit": {"author": {"name": "Matthew Hall", "email": "matthew@quickbeam.me.uk", "date": "2020-03-29T11:45:15Z"}, "committer": {"name": "Matthew Hall", "email": "matthew@quickbeam.me.uk", "date": "2020-03-29T11:45:15Z"}, "message": "Tidy up insertion position logic", "tree": {"sha": "2dbce068250f59ddbc9b4f1323720c70a5798789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dbce068250f59ddbc9b4f1323720c70a5798789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddb9cc47d17204e5d52529ca04a4093f8ed8ec08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb9cc47d17204e5d52529ca04a4093f8ed8ec08", "html_url": "https://github.com/rust-lang/rust/commit/ddb9cc47d17204e5d52529ca04a4093f8ed8ec08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddb9cc47d17204e5d52529ca04a4093f8ed8ec08/comments", "author": {"login": "mattyhall", "id": 5175499, "node_id": "MDQ6VXNlcjUxNzU0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5175499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattyhall", "html_url": "https://github.com/mattyhall", "followers_url": "https://api.github.com/users/mattyhall/followers", "following_url": "https://api.github.com/users/mattyhall/following{/other_user}", "gists_url": "https://api.github.com/users/mattyhall/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattyhall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattyhall/subscriptions", "organizations_url": "https://api.github.com/users/mattyhall/orgs", "repos_url": "https://api.github.com/users/mattyhall/repos", "events_url": "https://api.github.com/users/mattyhall/events{/privacy}", "received_events_url": "https://api.github.com/users/mattyhall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattyhall", "id": 5175499, "node_id": "MDQ6VXNlcjUxNzU0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5175499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattyhall", "html_url": "https://github.com/mattyhall", "followers_url": "https://api.github.com/users/mattyhall/followers", "following_url": "https://api.github.com/users/mattyhall/following{/other_user}", "gists_url": "https://api.github.com/users/mattyhall/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattyhall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattyhall/subscriptions", "organizations_url": "https://api.github.com/users/mattyhall/orgs", "repos_url": "https://api.github.com/users/mattyhall/repos", "events_url": "https://api.github.com/users/mattyhall/events{/privacy}", "received_events_url": "https://api.github.com/users/mattyhall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8b271d98485f822ab45ff9a89090c267a2d62c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b271d98485f822ab45ff9a89090c267a2d62c6", "html_url": "https://github.com/rust-lang/rust/commit/b8b271d98485f822ab45ff9a89090c267a2d62c6"}], "stats": {"total": 26, "additions": 6, "deletions": 20}, "files": [{"sha": "baf9a1b4b20db31f4ce7b631c0fa279d4944b519", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ddb9cc47d17204e5d52529ca04a4093f8ed8ec08/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb9cc47d17204e5d52529ca04a4093f8ed8ec08/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=ddb9cc47d17204e5d52529ca04a4093f8ed8ec08", "patch": "@@ -390,26 +390,12 @@ impl ast::MatchArmList {\n             Some(t) => t,\n             None => return self.clone(),\n         };\n-        let mut sib = r_curly.prev_sibling_or_token();\n-        while let Some(s) = sib.clone() {\n-            if let Some(tok) = s.as_token() {\n-                if tok.kind() != WHITESPACE {\n-                    break;\n-                }\n-                sib = s.prev_sibling_or_token();\n-            } else {\n-                break;\n-            }\n-        }\n-        let indent = \"    \".to_string() + &leading_indent(self.syntax()).unwrap_or_default();\n-        let sib = match sib {\n-            Some(s) => s,\n-            None => return self.clone(),\n-        };\n-        let position = InsertPosition::After(sib.into());\n-        let ws = tokens::WsBuilder::new(&format!(\"\\n{}\", indent));\n-        let to_insert: ArrayVec<[SyntaxElement; 2]> =\n-            [ws.ws().into(), item.syntax().clone().into()].into();\n+        let position = InsertPosition::Before(r_curly.into());\n+        let arm_ws = tokens::WsBuilder::new(\"    \");\n+        let match_indent = &leading_indent(self.syntax()).unwrap_or_default();\n+        let match_ws = tokens::WsBuilder::new(&format!(\"\\n{}\", match_indent));\n+        let to_insert: ArrayVec<[SyntaxElement; 3]> =\n+            [arm_ws.ws().into(), item.syntax().clone().into(), match_ws.ws().into()].into();\n         self.insert_children(position, to_insert)\n     }\n }"}]}