{"sha": "d97d1e192b37557f760f41cbc9826bb431b14d1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5N2QxZTE5MmIzNzU1N2Y3NjBmNDFjYmM5ODI2YmI0MzFiMTRkMWE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-17T14:07:23Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-31T13:22:52Z"}, "message": "Persist ThinLTO import data in incr. comp. session directory.", "tree": {"sha": "ed8b9e3fdc374a2001503d5083c524897be5969e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed8b9e3fdc374a2001503d5083c524897be5969e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d97d1e192b37557f760f41cbc9826bb431b14d1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d97d1e192b37557f760f41cbc9826bb431b14d1a", "html_url": "https://github.com/rust-lang/rust/commit/d97d1e192b37557f760f41cbc9826bb431b14d1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d97d1e192b37557f760f41cbc9826bb431b14d1a/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e587df6e2215b9dd053879d2ad42044781fc1c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e587df6e2215b9dd053879d2ad42044781fc1c4", "html_url": "https://github.com/rust-lang/rust/commit/2e587df6e2215b9dd053879d2ad42044781fc1c4"}], "stats": {"total": 143, "additions": 139, "deletions": 4}, "files": [{"sha": "22d862f4ad5d94ded5094c4596169f4d2275eef5", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 116, "deletions": 3, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/d97d1e192b37557f760f41cbc9826bb431b14d1a/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97d1e192b37557f760f41cbc9826bb431b14d1a/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=d97d1e192b37557f760f41cbc9826bb431b14d1a", "patch": "@@ -20,16 +20,23 @@ use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::middle::exported_symbols::SymbolExportLevel;\n use rustc::session::config::{self, Lto};\n use rustc::util::common::time_ext;\n+use rustc_data_structures::fx::FxHashMap;\n use time_graph::Timeline;\n use {ModuleCodegen, ModuleLlvm, ModuleKind, ModuleSource};\n \n use libc;\n \n-use std::ffi::CString;\n+use std::ffi::{CStr, CString};\n+use std::fs::File;\n+use std::io;\n+use std::mem;\n+use std::path::Path;\n use std::ptr;\n use std::slice;\n use std::sync::Arc;\n \n+pub const THIN_LTO_IMPORTS_INCR_COMP_FILE_NAME: &str = \"thin-lto-imports.bin\";\n+\n pub fn crate_type_allows_lto(crate_type: config::CrateType) -> bool {\n     match crate_type {\n         config::CrateType::Executable |\n@@ -199,7 +206,7 @@ pub(crate) fn run(cgcx: &CodegenContext,\n                 unreachable!(\"We should never reach this case if the LTO step \\\n                               is deferred to the linker\");\n             }\n-            thin_lto(&diag_handler, modules, upstream_modules, &arr, timeline)\n+            thin_lto(cgcx, &diag_handler, modules, upstream_modules, &arr, timeline)\n         }\n         Lto::No => unreachable!(),\n     }\n@@ -362,7 +369,8 @@ impl Drop for Linker<'a> {\n /// calculating the *index* for ThinLTO. This index will then be shared amongst\n /// all of the `LtoModuleCodegen` units returned below and destroyed once\n /// they all go out of scope.\n-fn thin_lto(diag_handler: &Handler,\n+fn thin_lto(cgcx: &CodegenContext,\n+            diag_handler: &Handler,\n             modules: Vec<ModuleCodegen>,\n             serialized_modules: Vec<(SerializedModule, CString)>,\n             symbol_white_list: &[*const libc::c_char],\n@@ -439,6 +447,17 @@ fn thin_lto(diag_handler: &Handler,\n             write::llvm_err(&diag_handler, \"failed to prepare thin LTO context\".to_string())\n         })?;\n \n+        // Save the ThinLTO import information for incremental compilation.\n+        if let Some(ref incr_comp_session_dir) = cgcx.incr_comp_session_dir {\n+            let path = incr_comp_session_dir.join(THIN_LTO_IMPORTS_INCR_COMP_FILE_NAME);\n+            let imports = ThinLTOImports::from_thin_lto_data(data);\n+            if let Err(err) = imports.save_to_file(&path) {\n+                let msg = format!(\"Error while writing ThinLTO import data: {}\",\n+                                  err);\n+                return Err(write::llvm_err(&diag_handler, msg));\n+            }\n+        }\n+\n         let data = ThinData(data);\n         info!(\"thin LTO data created\");\n         timeline.record(\"data\");\n@@ -776,3 +795,97 @@ impl ThinModule {\n         Ok(module)\n     }\n }\n+\n+#[derive(Debug)]\n+pub struct ThinLTOImports {\n+    // key = llvm name of importing module, value = list of modules it imports from\n+    imports: FxHashMap<String, Vec<String>>,\n+}\n+\n+impl ThinLTOImports {\n+    pub fn new() -> ThinLTOImports {\n+        ThinLTOImports {\n+            imports: FxHashMap(),\n+        }\n+    }\n+\n+    /// Load the ThinLTO import map from ThinLTOData.\n+    unsafe fn from_thin_lto_data(data: *const llvm::ThinLTOData) -> ThinLTOImports {\n+        fn module_name_to_str(c_str: &CStr) -> &str {\n+            match c_str.to_str() {\n+                Ok(s) => s,\n+                Err(e) => {\n+                    bug!(\"Encountered non-utf8 LLVM module name `{}`: {}\",\n+                        c_str.to_string_lossy(),\n+                        e)\n+                }\n+            }\n+        }\n+        unsafe extern \"C\" fn imported_module_callback(payload: *mut libc::c_void,\n+                                                      importing_module_name: *const libc::c_char,\n+                                                      imported_module_name: *const libc::c_char) {\n+            let map = &mut* (payload as *mut ThinLTOImports);\n+            let importing_module_name = CStr::from_ptr(importing_module_name);\n+            let importing_module_name = module_name_to_str(&importing_module_name);\n+            let imported_module_name = CStr::from_ptr(imported_module_name);\n+            let imported_module_name = module_name_to_str(&imported_module_name);\n+            if !map.imports.contains_key(importing_module_name) {\n+                map.imports.insert(importing_module_name.to_owned(), vec![]);\n+            }\n+            map.imports\n+               .get_mut(importing_module_name)\n+               .unwrap()\n+               .push(imported_module_name.to_owned());\n+        }\n+        let mut map = ThinLTOImports {\n+            imports: FxHashMap(),\n+        };\n+        llvm::LLVMRustGetThinLTOModuleImports(data,\n+                                              imported_module_callback,\n+                                              &mut map as *mut _ as *mut libc::c_void);\n+        map\n+    }\n+\n+    pub fn save_to_file(&self, path: &Path) -> io::Result<()> {\n+        use std::io::Write;\n+        let file = File::create(path)?;\n+        let mut writer = io::BufWriter::new(file);\n+        for (importing_module_name, imported_modules) in &self.imports {\n+            writeln!(writer, \"{}\", importing_module_name)?;\n+            for imported_module in imported_modules {\n+                writeln!(writer, \"  {}\", imported_module)?;\n+            }\n+            writeln!(writer)?;\n+        }\n+        Ok(())\n+    }\n+\n+    pub fn load_from_file(path: &Path) -> io::Result<ThinLTOImports> {\n+        use std::io::BufRead;\n+        let mut imports = FxHashMap();\n+        let mut current_module = None;\n+        let mut current_imports = vec![];\n+        let file = File::open(path)?;\n+        for line in io::BufReader::new(file).lines() {\n+            let line = line?;\n+            if line.is_empty() {\n+                let importing_module = current_module\n+                    .take()\n+                    .expect(\"Importing module not set\");\n+                imports.insert(importing_module,\n+                               mem::replace(&mut current_imports, vec![]));\n+            } else if line.starts_with(\" \") {\n+                // This is an imported module\n+                assert_ne!(current_module, None);\n+                current_imports.push(line.trim().to_string());\n+            } else {\n+                // This is the beginning of a new module\n+                assert_eq!(current_module, None);\n+                current_module = Some(line.trim().to_string());\n+            }\n+        }\n+        Ok(ThinLTOImports {\n+            imports\n+        })\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "32f88f86743174a265c833dfe5a2250a879f46a8", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d97d1e192b37557f760f41cbc9826bb431b14d1a/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97d1e192b37557f760f41cbc9826bb431b14d1a/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=d97d1e192b37557f760f41cbc9826bb431b14d1a", "patch": "@@ -29,6 +29,7 @@ use super::ModuleCodegen;\n use super::ModuleKind;\n \n use abi;\n+use back::lto;\n use back::write::{self, OngoingCodegen};\n use llvm::{self, TypeKind, get_param};\n use metadata;\n@@ -1314,6 +1315,25 @@ pub fn visibility_to_llvm(linkage: Visibility) -> llvm::Visibility {\n     }\n }\n \n+#[allow(unused)]\n+fn load_thin_lto_imports(sess: &Session) -> lto::ThinLTOImports {\n+    let path = rustc_incremental::in_incr_comp_dir_sess(\n+        sess,\n+        lto::THIN_LTO_IMPORTS_INCR_COMP_FILE_NAME\n+    );\n+    if !path.exists() {\n+        return lto::ThinLTOImports::new();\n+    }\n+    match lto::ThinLTOImports::load_from_file(&path) {\n+        Ok(imports) => imports,\n+        Err(e) => {\n+            let msg = format!(\"Error while trying to load ThinLTO import data \\\n+                               for incremental compilation: {}\", e);\n+            sess.fatal(&msg)\n+        }\n+    }\n+}\n+\n // FIXME(mw): Anything that is produced via DepGraph::with_task() must implement\n //            the HashStable trait. Normally DepGraph::with_task() calls are\n //            hidden behind queries, but CGU creation is a special case in two"}, {"sha": "e02fd2cae2036cfd763bdb17b6c3d5a235aa78d9", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d97d1e192b37557f760f41cbc9826bb431b14d1a/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97d1e192b37557f760f41cbc9826bb431b14d1a/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=d97d1e192b37557f760f41cbc9826bb431b14d1a", "patch": "@@ -100,7 +100,7 @@ mod back {\n     mod command;\n     pub mod linker;\n     pub mod link;\n-    mod lto;\n+    pub mod lto;\n     pub mod symbol_export;\n     pub mod write;\n     mod rpath;"}, {"sha": "4ffd726c1d47ce2b5aba82c21f2e403fdcc28992", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d97d1e192b37557f760f41cbc9826bb431b14d1a/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97d1e192b37557f760f41cbc9826bb431b14d1a/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=d97d1e192b37557f760f41cbc9826bb431b14d1a", "patch": "@@ -44,6 +44,7 @@ pub use persist::copy_cgu_workproducts_to_incr_comp_cache_dir;\n pub use persist::save_dep_graph;\n pub use persist::save_work_product_index;\n pub use persist::in_incr_comp_dir;\n+pub use persist::in_incr_comp_dir_sess;\n pub use persist::prepare_session_directory;\n pub use persist::finalize_session_directory;\n pub use persist::delete_workproduct_files;"}, {"sha": "17d36ba3fa7f4bbbd2051ae78b26fcce1e62df99", "filename": "src/librustc_incremental/persist/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d97d1e192b37557f760f41cbc9826bb431b14d1a/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97d1e192b37557f760f41cbc9826bb431b14d1a/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs?ref=d97d1e192b37557f760f41cbc9826bb431b14d1a", "patch": "@@ -23,6 +23,7 @@ mod file_format;\n pub use self::fs::finalize_session_directory;\n pub use self::fs::garbage_collect_session_directories;\n pub use self::fs::in_incr_comp_dir;\n+pub use self::fs::in_incr_comp_dir_sess;\n pub use self::fs::prepare_session_directory;\n pub use self::load::dep_graph_tcx_init;\n pub use self::load::load_dep_graph;"}]}