{"sha": "e81ec20af061d3a58216d4f23c20da87358d0d8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MWVjMjBhZjA2MWQzYTU4MjE2ZDRmMjNjMjBkYTg3MzU4ZDBkOGE=", "commit": {"author": {"name": "CreepySkeleton", "email": "creepy-skeleton@yandex.ru", "date": "2019-09-05T02:15:19Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-09-05T02:15:19Z"}, "message": "Add --config command line option (#3767)", "tree": {"sha": "6a0408bcf2d85f24b1508f490e28dff29ed3b88e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a0408bcf2d85f24b1508f490e28dff29ed3b88e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e81ec20af061d3a58216d4f23c20da87358d0d8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e81ec20af061d3a58216d4f23c20da87358d0d8a", "html_url": "https://github.com/rust-lang/rust/commit/e81ec20af061d3a58216d4f23c20da87358d0d8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e81ec20af061d3a58216d4f23c20da87358d0d8a/comments", "author": {"login": "CreepySkeleton", "id": 50968528, "node_id": "MDQ6VXNlcjUwOTY4NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/50968528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CreepySkeleton", "html_url": "https://github.com/CreepySkeleton", "followers_url": "https://api.github.com/users/CreepySkeleton/followers", "following_url": "https://api.github.com/users/CreepySkeleton/following{/other_user}", "gists_url": "https://api.github.com/users/CreepySkeleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/CreepySkeleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CreepySkeleton/subscriptions", "organizations_url": "https://api.github.com/users/CreepySkeleton/orgs", "repos_url": "https://api.github.com/users/CreepySkeleton/repos", "events_url": "https://api.github.com/users/CreepySkeleton/events{/privacy}", "received_events_url": "https://api.github.com/users/CreepySkeleton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a28f79b8fc16f28aab5f7cc45b3e14ff7f7e47", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a28f79b8fc16f28aab5f7cc45b3e14ff7f7e47", "html_url": "https://github.com/rust-lang/rust/commit/15a28f79b8fc16f28aab5f7cc45b3e14ff7f7e47"}], "stats": {"total": 86, "additions": 80, "deletions": 6}, "files": [{"sha": "dcee77a8549c5b9cf9beacd47663cb39d177c4ce", "filename": "config_proc_macro/src/item_enum.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e81ec20af061d3a58216d4f23c20da87358d0d8a/config_proc_macro%2Fsrc%2Fitem_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ec20af061d3a58216d4f23c20da87358d0d8a/config_proc_macro%2Fsrc%2Fitem_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Fsrc%2Fitem_enum.rs?ref=e81ec20af061d3a58216d4f23c20da87358d0d8a", "patch": "@@ -105,13 +105,18 @@ fn impl_from_str(ident: &syn::Ident, variants: &Variants) -> TokenStream {\n             }\n         }\n     });\n+    let mut err_msg = String::from(\"Bad variant, expected one of:\");\n+    for v in variants.iter().filter(|v| is_unit(v)) {\n+        err_msg.push_str(&format!(\" `{}`\", v.ident));\n+    }\n+\n     quote! {\n         impl ::std::str::FromStr for #ident {\n             type Err = &'static str;\n \n             fn from_str(s: &str) -> Result<Self, Self::Err> {\n                 #if_patterns\n-                return Err(\"Bad variant\");\n+                return Err(#err_msg);\n             }\n         }\n     }"}, {"sha": "7290c2f30d5a0d8edc211a6a6d69ef3a714895d2", "filename": "src/bin/main.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e81ec20af061d3a58216d4f23c20da87358d0d8a/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ec20af061d3a58216d4f23c20da87358d0d8a/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=e81ec20af061d3a58216d4f23c20da87358d0d8a", "patch": "@@ -4,6 +4,7 @@ use io::Error as IoError;\n \n use rustfmt_nightly as rustfmt;\n \n+use std::collections::HashMap;\n use std::env;\n use std::fs::File;\n use std::io::{self, stdout, Read, Write};\n@@ -132,6 +133,12 @@ fn make_opts() -> Options {\n         \"Prints the names of mismatched files that were formatted. Prints the names of \\\n          files that would be formated when used with `--check` mode. \",\n     );\n+    opts.optmulti(\n+        \"\",\n+        \"config\",\n+        \"Set options from command line. These settings take priority over .rustfmt.toml\",\n+        \"[key1=val1,key2=val2...]\",\n+    );\n \n     if is_nightly {\n         opts.optflag(\n@@ -478,6 +485,7 @@ struct GetOptsOptions {\n     quiet: bool,\n     verbose: bool,\n     config_path: Option<PathBuf>,\n+    inline_config: HashMap<String, String>,\n     emit_mode: EmitMode,\n     backup: bool,\n     check: bool,\n@@ -537,6 +545,29 @@ impl GetOptsOptions {\n \n         options.config_path = matches.opt_str(\"config-path\").map(PathBuf::from);\n \n+        options.inline_config = matches\n+            .opt_strs(\"config\")\n+            .iter()\n+            .flat_map(|config| config.split(\",\"))\n+            .map(\n+                |key_val| match key_val.char_indices().find(|(_, ch)| *ch == '=') {\n+                    Some((middle, _)) => {\n+                        let (key, val) = (&key_val[..middle], &key_val[middle + 1..]);\n+                        if !Config::is_valid_key_val(key, val) {\n+                            Err(format_err!(\"invalid key=val pair: `{}`\", key_val))\n+                        } else {\n+                            Ok((key.to_string(), val.to_string()))\n+                        }\n+                    }\n+\n+                    None => Err(format_err!(\n+                        \"--config expects comma-separated list of key=val pairs, found `{}`\",\n+                        key_val\n+                    )),\n+                },\n+            )\n+            .collect::<Result<HashMap<_, _>, _>>()?;\n+\n         options.check = matches.opt_present(\"check\");\n         if let Some(ref emit_str) = matches.opt_str(\"emit\") {\n             if options.check {\n@@ -624,6 +655,10 @@ impl CliOptions for GetOptsOptions {\n         if self.print_misformatted_file_names {\n             config.set().print_misformatted_file_names(true);\n         }\n+\n+        for (key, val) in self.inline_config {\n+            config.override_value(&key, &val);\n+        }\n     }\n \n     fn config_path(&self) -> Option<&Path> {"}, {"sha": "7f7e8905fba92a7025573bce0ee41887a9e2ebed", "filename": "src/config/config_type.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e81ec20af061d3a58216d4f23c20da87358d0d8a/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ec20af061d3a58216d4f23c20da87358d0d8a/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=e81ec20af061d3a58216d4f23c20da87358d0d8a", "patch": "@@ -178,6 +178,16 @@ macro_rules! create_config {\n                 }\n             }\n \n+            #[allow(unreachable_pub)]\n+            pub fn is_valid_key_val(key: &str, val: &str) -> bool {\n+                match key {\n+                    $(\n+                        stringify!($i) => val.parse::<$ty>().is_ok(),\n+                    )+\n+                        _ => false,\n+                }\n+            }\n+\n             #[allow(unreachable_pub)]\n             pub fn used_options(&self) -> PartialConfig {\n                 PartialConfig {"}, {"sha": "ccf2db120b3b65b11b820a33b69ac95c081f5124", "filename": "tests/rustfmt/main.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e81ec20af061d3a58216d4f23c20da87358d0d8a/tests%2Frustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ec20af061d3a58216d4f23c20da87358d0d8a/tests%2Frustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustfmt%2Fmain.rs?ref=e81ec20af061d3a58216d4f23c20da87358d0d8a", "patch": "@@ -30,17 +30,16 @@ fn rustfmt(args: &[&str]) -> (String, String) {\n }\n \n macro_rules! assert_that {\n-    ($args:expr, $check:ident $check_args:tt) => {\n+    ($args:expr, $($check:ident $check_args:tt)&&+) => {\n         let (stdout, stderr) = rustfmt($args);\n-        if !stdout.$check$check_args && !stderr.$check$check_args {\n+        if $(!stdout.$check$check_args && !stderr.$check$check_args)||* {\n             panic!(\n                 \"Output not expected for rustfmt {:?}\\n\\\n-                 expected: {}{}\\n\\\n+                 expected: {}\\n\\\n                  actual stdout:\\n{}\\n\\\n                  actual stderr:\\n{}\",\n                 $args,\n-                stringify!($check),\n-                stringify!($check_args),\n+                stringify!($( $check$check_args )&&*),\n                 stdout,\n                 stderr\n             );\n@@ -76,3 +75,28 @@ fn print_config() {\n     );\n     remove_file(\"minimal-config\").unwrap();\n }\n+\n+#[ignore]\n+#[test]\n+fn inline_config() {\n+    // single invocation\n+    assert_that!(\n+        &[\n+            \"--print-config\",\n+            \"current\",\n+            \".\",\n+            \"--config=color=Never,edition=2018\"\n+        ],\n+        contains(\"color = \\\"Never\\\"\") && contains(\"edition = \\\"2018\\\"\")\n+    );\n+\n+    // multiple overriding invocations\n+    assert_that!(\n+        &[\"--print-config\", \"current\", \".\",\n+        \"--config\", \"color=never,edition=2018\",\n+        \"--config\", \"color=always,format_strings=true\"],\n+        contains(\"color = \\\"Always\\\"\") &&\n+        contains(\"edition = \\\"2018\\\"\") &&\n+        contains(\"format_strings = true\")\n+    );\n+}"}]}