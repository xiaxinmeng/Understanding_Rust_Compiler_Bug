{"sha": "8d58a928e5956c8531fecc04cb92bf7d63979605", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNThhOTI4ZTU5NTZjODUzMWZlY2MwNGNiOTJiZjdkNjM5Nzk2MDU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-29T19:24:20Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-01T15:12:48Z"}, "message": "Use `utils::sugg` in `ASSIGN_OPS`", "tree": {"sha": "60db31263310d5d87c3d8aef443679eecf2325a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60db31263310d5d87c3d8aef443679eecf2325a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d58a928e5956c8531fecc04cb92bf7d63979605", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXdohwAAoJEF5CfHlMukXo/6kP/jxmYBZ3cg7vMaLyc8fnYTu4\nKdo8zl57Gz9yV89ig7OFZ9xCCNempjuQJf+m6wUWm+Dhi+ZOTeIg5eX+PUpBeXb5\nDqcbKxUg5mbqtkZw/5CKhYlrsGZ+wyTOEa0xtwMBzsYI4jMkXVLFiiOjlFczJRbs\neLzFnlf5WwK0r2QVJDiRIcdZ6CsmXGkXEDoUNwR6ZzQSsiaVUQ5HQ8tGsOXiY4WL\nkOIxBaX/t/IalI/pIWbayDYGRyYB/srSRQJolYQQBat4wVQezp/TEWyOYfR+jfND\n/36MGqDGkPdP1Gix8iSSJvxDhLCQtqLZrzduv4oHPu3yNxdjm+nRZvVj4DrbuX5u\nZw7msobAq8aRsiTai0rQgrMsL3K1XiABudb05oc+fekwMIX+m5eISJnilH6COzrO\ndUXM8/d3EfxMm+iFCiRWqCKzHwoqBvHQwIarDp/4BN9WOVqfXmJbThCTeyjJL3zx\n4cv+gubWWwrswkXTALkudf0IVviU/cbHFkzBBInic3GUFnv44OIoq+WcTkhkLgai\nyAUxKSiwnWEPbkOdBP3bzDXWFo+ZjmhOEQy2V1RW0ytfdi5eH4GPzgxrFUDsUJqI\nu/RtbD85aX2CbrnvrOnu8993SejolL4rf+eHLSfPiK+X4M0Jexp8ViuFz0IAVwhh\n1BugXGpsLIyZ3sWUQ6QM\n=WFVf\n-----END PGP SIGNATURE-----", "payload": "tree 60db31263310d5d87c3d8aef443679eecf2325a8\nparent 9811dea2377cfe835dc22f8c129bf83a75669319\nauthor mcarton <cartonmartin+git@gmail.com> 1467228260 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467385968 +0200\n\nUse `utils::sugg` in `ASSIGN_OPS`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d58a928e5956c8531fecc04cb92bf7d63979605", "html_url": "https://github.com/rust-lang/rust/commit/8d58a928e5956c8531fecc04cb92bf7d63979605", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d58a928e5956c8531fecc04cb92bf7d63979605/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9811dea2377cfe835dc22f8c129bf83a75669319", "url": "https://api.github.com/repos/rust-lang/rust/commits/9811dea2377cfe835dc22f8c129bf83a75669319", "html_url": "https://github.com/rust-lang/rust/commit/9811dea2377cfe835dc22f8c129bf83a75669319"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "20c6c6a38a8ae0763b56685fb223900151c60dfb", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d58a928e5956c8531fecc04cb92bf7d63979605/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8d58a928e5956c8531fecc04cb92bf7d63979605/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8d58a928e5956c8531fecc04cb92bf7d63979605", "patch": "@@ -25,7 +25,7 @@ name\n [almost_swapped](https://github.com/Manishearth/rust-clippy/wiki#almost_swapped)                                     | warn    | `foo = bar; bar = foo` sequence\n [approx_constant](https://github.com/Manishearth/rust-clippy/wiki#approx_constant)                                   | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n [assign_op_pattern](https://github.com/Manishearth/rust-clippy/wiki#assign_op_pattern)                               | warn    | assigning the result of an operation on a variable to that same variable\n-[assign_ops](https://github.com/Manishearth/rust-clippy/wiki#assign_ops)                                             | allow   | Any assignment operation\n+[assign_ops](https://github.com/Manishearth/rust-clippy/wiki#assign_ops)                                             | allow   | any assignment operation\n [bad_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#bad_bit_mask)                                         | warn    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n [blacklisted_name](https://github.com/Manishearth/rust-clippy/wiki#blacklisted_name)                                 | warn    | usage of a blacklisted/placeholder name\n [block_in_if_condition_expr](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_expr)             | warn    | braces can be eliminated in conditions that are expressions, e.g `if { true } ...`"}, {"sha": "6ae76f9c3eff93607f0c04ca48f50bf3af3db9f6", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8d58a928e5956c8531fecc04cb92bf7d63979605/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d58a928e5956c8531fecc04cb92bf7d63979605/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=8d58a928e5956c8531fecc04cb92bf7d63979605", "patch": "@@ -1,28 +1,29 @@\n use rustc::hir;\n use rustc::lint::*;\n use utils::{span_lint_and_then, span_lint, snippet_opt, SpanlessEq, get_trait_def_id, implements_trait};\n+use utils::{higher, sugg};\n \n-/// **What it does:** This lint checks for `+=` operations and similar\n+/// **What it does:** This lint checks for `+=` operations and similar.\n ///\n-/// **Why is this bad?** Projects with many developers from languages without those operations\n-///                      may find them unreadable and not worth their weight\n+/// **Why is this bad?** Projects with many developers from languages without those operations may\n+/// find them unreadable and not worth their weight.\n ///\n-/// **Known problems:** Types implementing `OpAssign` don't necessarily implement `Op`\n+/// **Known problems:** Types implementing `OpAssign` don't necessarily implement `Op`.\n ///\n /// **Example:**\n /// ```\n /// a += 1;\n /// ```\n declare_restriction_lint! {\n     pub ASSIGN_OPS,\n-    \"Any assignment operation\"\n+    \"any assignment operation\"\n }\n \n-/// **What it does:** Check for `a = a op b` or `a = b commutative_op a` patterns\n+/// **What it does:** Check for `a = a op b` or `a = b commutative_op a` patterns.\n ///\n-/// **Why is this bad?** These can be written as the shorter `a op= b`\n+/// **Why is this bad?** These can be written as the shorter `a op= b`.\n ///\n-/// **Known problems:** While forbidden by the spec, `OpAssign` traits may have implementations that differ from the regular `Op` impl\n+/// **Known problems:** While forbidden by the spec, `OpAssign` traits may have implementations that differ from the regular `Op` impl.\n ///\n /// **Example:**\n ///\n@@ -50,24 +51,14 @@ impl LateLintPass for AssignOps {\n     fn check_expr(&mut self, cx: &LateContext, expr: &hir::Expr) {\n         match expr.node {\n             hir::ExprAssignOp(op, ref lhs, ref rhs) => {\n-                if let (Some(l), Some(r)) = (snippet_opt(cx, lhs.span), snippet_opt(cx, rhs.span)) {\n-                    span_lint_and_then(cx, ASSIGN_OPS, expr.span, \"assign operation detected\", |db| {\n-                        match rhs.node {\n-                            hir::ExprBinary(op2, _, _) if op2 != op => {\n-                                db.span_suggestion(expr.span,\n-                                                   \"replace it with\",\n-                                                   format!(\"{} = {} {} ({})\", l, l, op.node.as_str(), r));\n-                            }\n-                            _ => {\n-                                db.span_suggestion(expr.span,\n-                                                   \"replace it with\",\n-                                                   format!(\"{} = {} {} {}\", l, l, op.node.as_str(), r));\n-                            }\n-                        }\n-                    });\n-                } else {\n-                    span_lint(cx, ASSIGN_OPS, expr.span, \"assign operation detected\");\n-                }\n+                span_lint_and_then(cx, ASSIGN_OPS, expr.span, \"assign operation detected\", |db| {\n+                    let lhs = &sugg::Sugg::hir(cx, lhs, \"..\");\n+                    let rhs = &sugg::Sugg::hir(cx, rhs, \"..\");\n+\n+                    db.span_suggestion(expr.span,\n+                                       \"replace it with\",\n+                                       format!(\"{} = {}\", lhs, sugg::make_binop(higher::binop(op.node), lhs, rhs)));\n+                });\n             }\n             hir::ExprAssign(ref assignee, ref e) => {\n                 if let hir::ExprBinary(op, ref l, ref r) = e.node {"}, {"sha": "2b69e110f43d7749dc9e3d93d5c4053051428c81", "filename": "tests/compile-fail/assign_ops.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8d58a928e5956c8531fecc04cb92bf7d63979605/tests%2Fcompile-fail%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d58a928e5956c8531fecc04cb92bf7d63979605/tests%2Fcompile-fail%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fassign_ops.rs?ref=8d58a928e5956c8531fecc04cb92bf7d63979605", "patch": "@@ -8,15 +8,31 @@ fn main() {\n     i += 2; //~ ERROR assign operation detected\n     //~^ HELP replace it with\n     //~| SUGGESTION i = i + 2\n+    i += 2 + 17; //~ ERROR assign operation detected\n+    //~^ HELP replace it with\n+    //~| SUGGESTION i = i + 2 + 17\n     i -= 6; //~ ERROR assign operation detected\n     //~^ HELP replace it with\n     //~| SUGGESTION i = i - 6\n+    i -= 2 - 1;\n+    //~^ ERROR assign operation detected\n+    //~| HELP replace it with\n+    //~| SUGGESTION i = i - (2 - 1)\n     i *= 5; //~ ERROR assign operation detected\n     //~^ HELP replace it with\n     //~| SUGGESTION i = i * 5\n+    i *= 1+5; //~ ERROR assign operation detected\n+    //~^ HELP replace it with\n+    //~| SUGGESTION i = i * (1+5)\n     i /= 32; //~ ERROR assign operation detected\n     //~^ HELP replace it with\n     //~| SUGGESTION i = i / 32\n+    i /= 32 | 5; //~ ERROR assign operation detected\n+    //~^ HELP replace it with\n+    //~| SUGGESTION i = i / (32 | 5)\n+    i /= 32 / 5; //~ ERROR assign operation detected\n+    //~^ HELP replace it with\n+    //~| SUGGESTION i = i / (32 / 5)\n     i %= 42; //~ ERROR assign operation detected\n     //~^ HELP replace it with\n     //~| SUGGESTION i = i % 42\n@@ -26,6 +42,10 @@ fn main() {\n     i <<= 9 + 6 - 7; //~ ERROR assign operation detected\n     //~^ HELP replace it with\n     //~| SUGGESTION i = i << (9 + 6 - 7)\n+    i += 1 << 5;\n+    //~^ ERROR assign operation detected\n+    //~| HELP replace it with\n+    //~| SUGGESTION i = i + (1 << 5)\n }\n \n #[allow(dead_code, unused_assignments)]"}]}