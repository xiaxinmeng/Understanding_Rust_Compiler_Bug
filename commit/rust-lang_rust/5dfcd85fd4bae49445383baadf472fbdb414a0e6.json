{"sha": "5dfcd85fd4bae49445383baadf472fbdb414a0e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZmNkODVmZDRiYWU0OTQ0NTM4M2JhYWRmNDcyZmJkYjQxNGEwZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-19T20:41:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-19T20:41:18Z"}, "message": "Auto merge of #42105 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 17 pull requests\n\n- Successful merges: #41870, #41910, #41958, #41971, #42006, #42024, #42037, #42056, #42067, #42070, #42079, #42080, #42082, #42089, #42092, #42096, #42100\n- Failed merges:", "tree": {"sha": "6812e7e07285e77a85e3619139280ca3cd09b0a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6812e7e07285e77a85e3619139280ca3cd09b0a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dfcd85fd4bae49445383baadf472fbdb414a0e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dfcd85fd4bae49445383baadf472fbdb414a0e6", "html_url": "https://github.com/rust-lang/rust/commit/5dfcd85fd4bae49445383baadf472fbdb414a0e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dfcd85fd4bae49445383baadf472fbdb414a0e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "543691d0ebbbf9e3c996980d2b841794098e5e85", "url": "https://api.github.com/repos/rust-lang/rust/commits/543691d0ebbbf9e3c996980d2b841794098e5e85", "html_url": "https://github.com/rust-lang/rust/commit/543691d0ebbbf9e3c996980d2b841794098e5e85"}, {"sha": "040cd6d15dcc8c1f66726293d52df93abd2e4b76", "url": "https://api.github.com/repos/rust-lang/rust/commits/040cd6d15dcc8c1f66726293d52df93abd2e4b76", "html_url": "https://github.com/rust-lang/rust/commit/040cd6d15dcc8c1f66726293d52df93abd2e4b76"}], "stats": {"total": 1460, "additions": 947, "deletions": 513}, "files": [{"sha": "bfba1a0dede24d50cb9929afb0a6d3b1d8b0ec61", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -398,13 +398,14 @@ def run(self, args, env=None, cwd=None):\n             sys.exit(ret)\n \n     def output(self, args, env=None, cwd=None):\n+        default_encoding = sys.getdefaultencoding()\n         proc = subprocess.Popen(args, stdout=subprocess.PIPE, env=env, cwd=cwd)\n         (out, err) = proc.communicate()\n         ret = proc.wait()\n         if ret != 0:\n             print(out)\n             sys.exit(ret)\n-        return out\n+        return out.decode(default_encoding)\n \n     def build_triple(self):\n         default_encoding = sys.getdefaultencoding()\n@@ -570,10 +571,10 @@ def update_submodules(self):\n \n         for submod in submodules:\n             path, status = submod\n-            if path.endswith(b\"llvm\") and \\\n+            if path.endswith('llvm') and \\\n                 (self.get_toml('llvm-config') or self.get_mk('CFG_LLVM_ROOT')):\n                 continue\n-            if path.endswith(b\"jemalloc\") and \\\n+            if path.endswith('jemalloc') and \\\n                 (self.get_toml('jemalloc') or self.get_mk('CFG_JEMALLOC_ROOT')):\n                 continue\n             submod_path = os.path.join(self.rust_root, path)"}, {"sha": "dce0b1670e181612c25fb045b992e036154e3d99", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 98, "deletions": 71, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -21,83 +21,110 @@ use std::process::Command;\n use Build;\n use dist::{sanitize_sh, tmpdir};\n \n-/// Installs everything.\n-pub fn install(build: &Build, stage: u32, host: &str) {\n-    let prefix_default = PathBuf::from(\"/usr/local\");\n-    let sysconfdir_default = PathBuf::from(\"/etc\");\n-    let docdir_default = PathBuf::from(\"share/doc/rust\");\n-    let bindir_default = PathBuf::from(\"bin\");\n-    let libdir_default = PathBuf::from(\"lib\");\n-    let mandir_default = PathBuf::from(\"share/man\");\n-    let prefix = build.config.prefix.as_ref().unwrap_or(&prefix_default);\n-    let sysconfdir = build.config.sysconfdir.as_ref().unwrap_or(&sysconfdir_default);\n-    let docdir = build.config.docdir.as_ref().unwrap_or(&docdir_default);\n-    let bindir = build.config.bindir.as_ref().unwrap_or(&bindir_default);\n-    let libdir = build.config.libdir.as_ref().unwrap_or(&libdir_default);\n-    let mandir = build.config.mandir.as_ref().unwrap_or(&mandir_default);\n-\n-    let sysconfdir = prefix.join(sysconfdir);\n-    let docdir = prefix.join(docdir);\n-    let bindir = prefix.join(bindir);\n-    let libdir = prefix.join(libdir);\n-    let mandir = prefix.join(mandir);\n-\n-    let destdir = env::var_os(\"DESTDIR\").map(PathBuf::from);\n-\n-    let prefix = add_destdir(&prefix, &destdir);\n-    let sysconfdir = add_destdir(&sysconfdir, &destdir);\n-    let docdir = add_destdir(&docdir, &destdir);\n-    let bindir = add_destdir(&bindir, &destdir);\n-    let libdir = add_destdir(&libdir, &destdir);\n-    let mandir = add_destdir(&mandir, &destdir);\n-\n-    let empty_dir = build.out.join(\"tmp/empty_dir\");\n-    t!(fs::create_dir_all(&empty_dir));\n-    if build.config.docs {\n-        install_sh(&build, \"docs\", \"rust-docs\", &build.rust_package_vers(),\n-                   stage, host, &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n-                   &mandir, &empty_dir);\n-    }\n+pub struct Installer<'a> {\n+    build: &'a Build,\n+    prefix: PathBuf,\n+    sysconfdir: PathBuf,\n+    docdir: PathBuf,\n+    bindir: PathBuf,\n+    libdir: PathBuf,\n+    mandir: PathBuf,\n+}\n \n-    for target in build.config.target.iter() {\n-        install_sh(&build, \"std\", \"rust-std\", &build.rust_package_vers(),\n-                   stage, target, &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n-                   &mandir, &empty_dir);\n-    }\n+impl<'a> Installer<'a> {\n+    pub fn new(build: &'a Build) -> Installer<'a> {\n+        let prefix_default = PathBuf::from(\"/usr/local\");\n+        let sysconfdir_default = PathBuf::from(\"/etc\");\n+        let docdir_default = PathBuf::from(\"share/doc/rust\");\n+        let bindir_default = PathBuf::from(\"bin\");\n+        let libdir_default = PathBuf::from(\"lib\");\n+        let mandir_default = PathBuf::from(\"share/man\");\n+        let prefix = build.config.prefix.as_ref().unwrap_or(&prefix_default);\n+        let sysconfdir = build.config.sysconfdir.as_ref().unwrap_or(&sysconfdir_default);\n+        let docdir = build.config.docdir.as_ref().unwrap_or(&docdir_default);\n+        let bindir = build.config.bindir.as_ref().unwrap_or(&bindir_default);\n+        let libdir = build.config.libdir.as_ref().unwrap_or(&libdir_default);\n+        let mandir = build.config.mandir.as_ref().unwrap_or(&mandir_default);\n+\n+        let sysconfdir = prefix.join(sysconfdir);\n+        let docdir = prefix.join(docdir);\n+        let bindir = prefix.join(bindir);\n+        let libdir = prefix.join(libdir);\n+        let mandir = prefix.join(mandir);\n+\n+        let destdir = env::var_os(\"DESTDIR\").map(PathBuf::from);\n \n-    if build.config.extended {\n-        install_sh(&build, \"cargo\", \"cargo\", &build.cargo_package_vers(),\n-                   stage, host, &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n-                   &mandir, &empty_dir);\n-        install_sh(&build, \"rls\", \"rls\", &build.rls_package_vers(),\n-                   stage, host, &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n-                   &mandir, &empty_dir);\n+        let prefix = add_destdir(&prefix, &destdir);\n+        let sysconfdir = add_destdir(&sysconfdir, &destdir);\n+        let docdir = add_destdir(&docdir, &destdir);\n+        let bindir = add_destdir(&bindir, &destdir);\n+        let libdir = add_destdir(&libdir, &destdir);\n+        let mandir = add_destdir(&mandir, &destdir);\n+\n+        Installer {\n+            build,\n+            prefix,\n+            sysconfdir,\n+            docdir,\n+            bindir,\n+            libdir,\n+            mandir,\n+        }\n     }\n \n-    install_sh(&build, \"rustc\", \"rustc\", &build.rust_package_vers(),\n-               stage, host, &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n-               &mandir, &empty_dir);\n+    /// Installs everything.\n+    pub fn install(&self, stage: u32, host: &str) {\n+        let empty_dir = self.build.out.join(\"tmp/empty_dir\");\n+        t!(fs::create_dir_all(&empty_dir));\n \n-    t!(fs::remove_dir_all(&empty_dir));\n-}\n+        if self.build.config.docs {\n+            self.install_sh(\"docs\", \"rust-docs\", &self.build.rust_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+        }\n \n-fn install_sh(build: &Build, package: &str, name: &str, version: &str, stage: u32, host: &str,\n-              prefix: &Path, sysconfdir: &Path, docdir: &Path, bindir: &Path, libdir: &Path,\n-              mandir: &Path, empty_dir: &Path) {\n-    println!(\"Install {} stage{} ({})\", package, stage, host);\n-    let package_name = format!(\"{}-{}-{}\", name, version, host);\n-\n-    let mut cmd = Command::new(\"sh\");\n-    cmd.current_dir(empty_dir)\n-       .arg(sanitize_sh(&tmpdir(build).join(&package_name).join(\"install.sh\")))\n-       .arg(format!(\"--prefix={}\", sanitize_sh(prefix)))\n-       .arg(format!(\"--sysconfdir={}\", sanitize_sh(sysconfdir)))\n-       .arg(format!(\"--docdir={}\", sanitize_sh(docdir)))\n-       .arg(format!(\"--bindir={}\", sanitize_sh(bindir)))\n-       .arg(format!(\"--libdir={}\", sanitize_sh(libdir)))\n-       .arg(format!(\"--mandir={}\", sanitize_sh(mandir)))\n-       .arg(\"--disable-ldconfig\");\n-    build.run(&mut cmd);\n+        for target in self.build.config.target.iter() {\n+            self.install_sh(\"std\", \"rust-std\", &self.build.rust_package_vers(),\n+                            stage, Some(target), &empty_dir);\n+        }\n+\n+        if self.build.config.extended {\n+            self.install_sh(\"cargo\", \"cargo\", &self.build.cargo_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+            self.install_sh(\"rls\", \"rls\", &self.build.rls_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+            self.install_sh(\"analysis\", \"rust-analysis\", &self.build.rust_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+            self.install_sh(\"src\", \"rust-src\", &self.build.rust_package_vers(),\n+                            stage, None, &empty_dir);\n+        }\n+\n+        self.install_sh(\"rustc\", \"rustc\", &self.build.rust_package_vers(),\n+                        stage, Some(host), &empty_dir);\n+\n+        t!(fs::remove_dir_all(&empty_dir));\n+    }\n+\n+    fn install_sh(&self, package: &str, name: &str, version: &str,\n+                  stage: u32, host: Option<&str>,  empty_dir: &Path) {\n+        println!(\"Install {} stage{} ({:?})\", package, stage, host);\n+        let package_name = if let Some(host) = host {\n+            format!(\"{}-{}-{}\", name, version, host)\n+        } else {\n+            format!(\"{}-{}\", name, version)\n+        };\n+\n+        let mut cmd = Command::new(\"sh\");\n+        cmd.current_dir(empty_dir)\n+           .arg(sanitize_sh(&tmpdir(self.build).join(&package_name).join(\"install.sh\")))\n+           .arg(format!(\"--prefix={}\", sanitize_sh(&self.prefix)))\n+           .arg(format!(\"--sysconfdir={}\", sanitize_sh(&self.sysconfdir)))\n+           .arg(format!(\"--docdir={}\", sanitize_sh(&self.docdir)))\n+           .arg(format!(\"--bindir={}\", sanitize_sh(&self.bindir)))\n+           .arg(format!(\"--libdir={}\", sanitize_sh(&self.libdir)))\n+           .arg(format!(\"--mandir={}\", sanitize_sh(&self.mandir)))\n+           .arg(\"--disable-ldconfig\");\n+        self.build.run(&mut cmd);\n+    }\n }\n \n fn add_destdir(path: &Path, destdir: &Option<PathBuf>) -> PathBuf {"}, {"sha": "57915446e1d1aee8e94586284d7b2546abd5c8fb", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -761,7 +761,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .run(move |s| dist::rls(build, s.stage, s.target));\n     rules.dist(\"install\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"default:dist\"))\n-         .run(move |s| install::install(build, s.stage, s.target));\n+         .run(move |s| install::Installer::new(build).install(s.stage, s.target));\n     rules.dist(\"dist-cargo\", \"cargo\")\n          .host(true)\n          .only_host_build(true)"}, {"sha": "627b5062df3334701e4a64c0995bb42ada55c2e0", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -16,6 +16,12 @@ for example:\n \n Images will output artifacts in an `obj` dir at the root of a repository.\n \n+## Filesystem layout\n+\n+- Each directory, excluding `scripts` and `disabled`, corresponds to a docker image\n+- `scripts` contains files shared by docker images\n+- `disabled` contains images that are not build travis\n+\n ## Cross toolchains\n \n A number of these images take quite a long time to compile as they're building"}, {"sha": "2a928c5ec7e894b4a1f331e879be3db19e15441d", "filename": "src/ci/docker/arm-android/Dockerfile", "status": "modified", "additions": 33, "deletions": 37, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -2,52 +2,44 @@ FROM ubuntu:16.04\n \n RUN apt-get update && \\\n     apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n   g++ \\\n+  git \\\n+  libssl-dev \\\n   make \\\n-  file \\\n-  curl \\\n-  ca-certificates \\\n+  pkg-config \\\n   python2.7 \\\n-  git \\\n-  cmake \\\n-  unzip \\\n   sudo \\\n-  xz-utils \\\n-  libssl-dev \\\n-  pkg-config\n-\n-RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n-    dpkg -i dumb-init_*.deb && \\\n-    rm dumb-init_*.deb\n+  unzip \\\n+  xz-utils\n \n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n-    chmod +x /usr/local/bin/sccache\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n \n-# Install NDK\n-COPY install-ndk.sh /tmp\n-RUN . /tmp/install-ndk.sh && \\\n-    download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n-    make_standalone_toolchain arm 9 && \\\n-    remove_ndk\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n+    download_and_make_toolchain android-ndk-r13b-linux-x86_64.zip arm 9\n \n-# Install SDK\n+# sdk\n RUN dpkg --add-architecture i386 && \\\n     apt-get update && \\\n     apt-get install -y --no-install-recommends \\\n-  openjdk-9-jre-headless \\\n-  tzdata \\\n-  libstdc++6:i386 \\\n   libgl1-mesa-glx \\\n-  libpulse0\n+  libpulse0 \\\n+  libstdc++6:i386 \\\n+  openjdk-9-jre-headless \\\n+  tzdata\n \n-COPY install-sdk.sh /tmp\n-RUN . /tmp/install-sdk.sh && \\\n-    download_sdk tools_r25.2.5-linux.zip && \\\n-    download_sysimage armeabi-v7a 18 && \\\n-    create_avd armeabi-v7a 18\n+COPY scripts/android-sdk.sh /scripts/\n+RUN . /scripts/android-sdk.sh && \\\n+    download_and_create_avd tools_r25.2.5-linux.zip armeabi-v7a 18\n \n-# Setup env\n+# env\n ENV PATH=$PATH:/android/sdk/tools\n ENV PATH=$PATH:/android/sdk/platform-tools\n \n@@ -57,8 +49,12 @@ ENV RUST_CONFIGURE_ARGS \\\n       --target=$TARGETS \\\n       --arm-linux-androideabi-ndk=/android/ndk/arm-9\n \n-ENV SCRIPT python2.7 ../x.py test --target $TARGETS --verbose\n+ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n+\n+# sccache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n \n-# Entrypoint\n-COPY start-emulator.sh /android/\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\", \"/android/start-emulator.sh\"]\n+# init\n+COPY scripts/android-start-emulator.sh /scripts/\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\", \"/scripts/android-start-emulator.sh\"]"}, {"sha": "80818721199838adf8fa0a6b509739366098e9c5", "filename": "src/ci/docker/arm-android/install-ndk.sh", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/543691d0ebbbf9e3c996980d2b841794098e5e85/src%2Fci%2Fdocker%2Farm-android%2Finstall-ndk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/543691d0ebbbf9e3c996980d2b841794098e5e85/src%2Fci%2Fdocker%2Farm-android%2Finstall-ndk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2Finstall-ndk.sh?ref=543691d0ebbbf9e3c996980d2b841794098e5e85", "patch": "@@ -1,35 +0,0 @@\n-#!/bin/sh\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-\n-URL=https://dl.google.com/android/repository\n-\n-download_ndk() {\n-    mkdir -p /android/ndk\n-    cd /android/ndk\n-    curl -O $URL/$1\n-    unzip -q $1\n-    rm $1\n-    mv android-ndk-* ndk\n-}\n-\n-make_standalone_toolchain() {\n-    # See https://developer.android.com/ndk/guides/standalone_toolchain.html\n-    python2.7 /android/ndk/ndk/build/tools/make_standalone_toolchain.py \\\n-        --install-dir /android/ndk/$1-$2 \\\n-        --arch $1 \\\n-        --api $2\n-}\n-\n-remove_ndk() {\n-    rm -rf /android/ndk/ndk\n-}"}, {"sha": "03e0b78ba89b3d83a8c3e2b6444aa0c7fe54b25d", "filename": "src/ci/docker/armhf-gnu/Dockerfile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -31,7 +31,7 @@ WORKDIR /build\n # The `vexpress_config` config file was a previously generated config file for\n # the kernel. This file was generated by running `make vexpress_defconfig`\n # followed by `make menuconfig` and then enabling the IPv6 protocol page.\n-COPY vexpress_config /build/.config\n+COPY armhf-gnu/vexpress_config /build/.config\n RUN curl https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.4.42.tar.xz | \\\n       tar xJf - && \\\n       cd /build/linux-4.4.42 && \\\n@@ -63,11 +63,11 @@ RUN curl http://cdimage.ubuntu.com/ubuntu-base/releases/16.04/release/ubuntu-bas\n \n # Copy over our init script, which starts up our test server and also a few\n # other misc tasks.\n-COPY rcS rootfs/etc/init.d/rcS\n+COPY armhf-gnu/rcS rootfs/etc/init.d/rcS\n RUN chmod +x rootfs/etc/init.d/rcS\n \n # Helper to quickly fill the entropy pool in the kernel.\n-COPY addentropy.c /tmp/\n+COPY armhf-gnu/addentropy.c /tmp/\n RUN arm-linux-gnueabihf-gcc addentropy.c -o rootfs/addentropy -static\n \n # TODO: What is this?!"}, {"sha": "7759d91e1bb635c41ba6b89a426616ebda65a293", "filename": "src/ci/docker/cross/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -32,10 +32,10 @@ ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n WORKDIR /tmp\n \n-COPY build-rumprun.sh /tmp/\n+COPY cross/build-rumprun.sh /tmp/\n RUN ./build-rumprun.sh\n \n-COPY build-arm-musl.sh /tmp/\n+COPY cross/build-arm-musl.sh /tmp/\n RUN ./build-arm-musl.sh\n \n # originally from"}, {"sha": "918d2911ae28f5a5ba301294068740568e8a29e4", "filename": "src/ci/docker/disabled/dist-aarch64-android/Dockerfile", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -2,36 +2,30 @@ FROM ubuntu:16.04\n \n RUN apt-get update && \\\n     apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n   g++ \\\n+  git \\\n+  libssl-dev \\\n   make \\\n-  file \\\n-  curl \\\n-  ca-certificates \\\n+  pkg-config \\\n   python2.7 \\\n-  git \\\n-  cmake \\\n-  unzip \\\n   sudo \\\n-  xz-utils \\\n-  libssl-dev \\\n-  pkg-config\n-\n-RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n-    dpkg -i dumb-init_*.deb && \\\n-    rm dumb-init_*.deb\n-\n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n+  unzip \\\n+  xz-utils\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n \n-COPY android-ndk.sh /\n-RUN . /android-ndk.sh && \\\n-    download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n-    make_standalone_toolchain arm64 21 && \\\n-    remove_ndk\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n+    download_and_make_toolchain android-ndk-r13b-linux-x86_64.zip arm64 21\n \n+# env\n ENV PATH=$PATH:/android/ndk/arm64-21/bin\n \n ENV DEP_Z_ROOT=/android/ndk/arm64-21/sysroot/usr/\n@@ -47,3 +41,10 @@ ENV RUST_CONFIGURE_ARGS \\\n       --enable-cargo-openssl-static\n \n ENV SCRIPT python2.7 ../x.py dist --target $HOSTS --host $HOSTS\n+\n+# sccache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# init\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "aed82e6c13872d6a276aeddd974cb6e81654b769", "filename": "src/ci/docker/disabled/dist-armv7-android/Dockerfile", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -2,37 +2,36 @@ FROM ubuntu:16.04\n \n RUN apt-get update && \\\n     apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n   g++ \\\n+  git \\\n+  libssl-dev \\\n   make \\\n-  file \\\n-  curl \\\n-  ca-certificates \\\n+  pkg-config \\\n   python2.7 \\\n-  git \\\n-  cmake \\\n-  unzip \\\n   sudo \\\n-  xz-utils \\\n-  libssl-dev \\\n-  pkg-config\n-\n-RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n-    dpkg -i dumb-init_*.deb && \\\n-    rm dumb-init_*.deb\n-\n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n+  unzip \\\n+  xz-utils\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n \n-COPY android-ndk.sh /\n-RUN . /android-ndk.sh && \\\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n     download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n     make_standalone_toolchain arm 9 && \\\n     make_standalone_toolchain arm 21 && \\\n     remove_ndk\n \n+RUN chmod 777 /android/ndk && \\\n+    ln -s /android/ndk/arm-21 /android/ndk/arm\n+\n+# env\n ENV PATH=$PATH:/android/ndk/arm-9/bin\n \n ENV DEP_Z_ROOT=/android/ndk/arm-9/sysroot/usr/\n@@ -54,12 +53,16 @@ ENV RUST_CONFIGURE_ARGS \\\n # level 9), the default linker behavior is to generate an error, to allow the\n # build to finish we use --warn-unresolved-symbols. Note that the missing\n # symbols does not affect std, only the compiler (llvm) and cargo (openssl).\n-RUN chmod 777 /android/ndk && \\\n-    ln -s /android/ndk/arm-21 /android/ndk/arm\n-\n ENV SCRIPT \\\n   python2.7 ../x.py build src/llvm --host $HOSTS --target $HOSTS && \\\n   (export RUSTFLAGS=\"\\\"-C link-arg=-Wl,--warn-unresolved-symbols\\\"\"; \\\n     rm /android/ndk/arm && \\\n     ln -s /android/ndk/arm-9 /android/ndk/arm && \\\n     python2.7 ../x.py dist --host $HOSTS --target $HOSTS)\n+\n+# sccache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# init\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "f012e869e7885fb4963e33f09bd616b9f64c7383", "filename": "src/ci/docker/disabled/dist-i686-android/Dockerfile", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -2,37 +2,36 @@ FROM ubuntu:16.04\n \n RUN apt-get update && \\\n     apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n   g++ \\\n+  git \\\n+  libssl-dev \\\n   make \\\n-  file \\\n-  curl \\\n-  ca-certificates \\\n+  pkg-config \\\n   python2.7 \\\n-  git \\\n-  cmake \\\n-  unzip \\\n   sudo \\\n-  xz-utils \\\n-  libssl-dev \\\n-  pkg-config\n-\n-RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n-    dpkg -i dumb-init_*.deb && \\\n-    rm dumb-init_*.deb\n-\n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n+  unzip \\\n+  xz-utils\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n \n-COPY android-ndk.sh /\n-RUN . /android-ndk.sh && \\\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n     download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n     make_standalone_toolchain x86 9 && \\\n     make_standalone_toolchain x86 21 && \\\n     remove_ndk\n \n+RUN chmod 777 /android/ndk && \\\n+    ln -s /android/ndk/x86-21 /android/ndk/x86\n+\n+# env\n ENV PATH=$PATH:/android/ndk/x86-9/bin\n \n ENV DEP_Z_ROOT=/android/ndk/x86-9/sysroot/usr/\n@@ -54,12 +53,16 @@ ENV RUST_CONFIGURE_ARGS \\\n # level 9), the default linker behavior is to generate an error, to allow the\n # build to finish we use --warn-unresolved-symbols. Note that the missing\n # symbols does not affect std, only the compiler (llvm) and cargo (openssl).\n-RUN chmod 777 /android/ndk && \\\n-    ln -s /android/ndk/x86-21 /android/ndk/x86\n-\n ENV SCRIPT \\\n   python2.7 ../x.py build src/llvm --host $HOSTS --target $HOSTS && \\\n   (export RUSTFLAGS=\"\\\"-C link-arg=-Wl,--warn-unresolved-symbols\\\"\"; \\\n     rm /android/ndk/x86 && \\\n     ln -s /android/ndk/x86-9 /android/ndk/x86 && \\\n     python2.7 ../x.py dist --host $HOSTS --target $HOSTS)\n+\n+# sccache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# init\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "0c586452840f97afa0e098c8d3c85516bc9d5953", "filename": "src/ci/docker/disabled/dist-x86_64-android/Dockerfile", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -2,36 +2,30 @@ FROM ubuntu:16.04\n \n RUN apt-get update && \\\n     apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n   g++ \\\n+  git \\\n+  libssl-dev \\\n   make \\\n-  file \\\n-  curl \\\n-  ca-certificates \\\n+  pkg-config \\\n   python2.7 \\\n-  git \\\n-  cmake \\\n-  unzip \\\n   sudo \\\n-  xz-utils \\\n-  libssl-dev \\\n-  pkg-config\n-\n-RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n-    dpkg -i dumb-init_*.deb && \\\n-    rm dumb-init_*.deb\n-\n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n+  unzip \\\n+  xz-utils\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n \n-COPY android-ndk.sh /\n-RUN . /android-ndk.sh && \\\n-    download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n-    make_standalone_toolchain x86_64 21 && \\\n-    remove_ndk\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n+    download_and_make_toolchain android-ndk-r13b-linux-x86_64.zip x86_64 21\n \n+# env\n ENV PATH=$PATH:/android/ndk/x86_64-21/bin\n \n ENV DEP_Z_ROOT=/android/ndk/x86_64-21/sysroot/usr/\n@@ -47,3 +41,10 @@ ENV RUST_CONFIGURE_ARGS \\\n       --enable-cargo-openssl-static\n \n ENV SCRIPT python2.7 ../x.py dist --target $HOSTS --host $HOSTS\n+\n+# sccache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# init\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "0134a5407932ad08906e86e786fcaa5da3a05700", "filename": "src/ci/docker/dist-aarch64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -56,7 +56,7 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY aarch64-linux-gnu.config build-toolchains.sh /tmp/\n+COPY dist-aarch64-linux/aarch64-linux-gnu.config dist-aarch64-linux/build-toolchains.sh /tmp/\n RUN ./build-toolchains.sh\n \n USER root"}, {"sha": "31389dd148a8ae0cd23dc3f95f775226d4a5038f", "filename": "src/ci/docker/dist-android/Dockerfile", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -2,40 +2,35 @@ FROM ubuntu:16.04\n \n RUN apt-get update && \\\n     apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n   g++ \\\n+  git \\\n+  libssl-dev \\\n   make \\\n-  file \\\n-  curl \\\n-  ca-certificates \\\n+  pkg-config \\\n   python2.7 \\\n-  git \\\n-  cmake \\\n-  unzip \\\n   sudo \\\n-  xz-utils \\\n-  libssl-dev \\\n-  pkg-config\n-\n-RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n-    dpkg -i dumb-init_*.deb && \\\n-    rm dumb-init_*.deb\n-\n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n-    chmod +x /usr/local/bin/sccache\n+  unzip \\\n+  xz-utils\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n \n-# Install NDK\n-COPY install-ndk.sh /tmp\n-RUN . /tmp/install-ndk.sh && \\\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n     download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n     make_standalone_toolchain arm 9 && \\\n     make_standalone_toolchain x86 9 && \\\n     make_standalone_toolchain arm64 21 && \\\n     make_standalone_toolchain x86_64 21 && \\\n     remove_ndk\n \n+# env\n ENV TARGETS=arm-linux-androideabi\n ENV TARGETS=$TARGETS,armv7-linux-androideabi\n ENV TARGETS=$TARGETS,i686-linux-android\n@@ -52,3 +47,10 @@ ENV RUST_CONFIGURE_ARGS \\\n       --x86_64-linux-android-ndk=/android/ndk/x86_64-21\n \n ENV SCRIPT python2.7 ../x.py dist --target $TARGETS\n+\n+# cache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# init\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "80818721199838adf8fa0a6b509739366098e9c5", "filename": "src/ci/docker/dist-android/install-ndk.sh", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/543691d0ebbbf9e3c996980d2b841794098e5e85/src%2Fci%2Fdocker%2Fdist-android%2Finstall-ndk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/543691d0ebbbf9e3c996980d2b841794098e5e85/src%2Fci%2Fdocker%2Fdist-android%2Finstall-ndk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2Finstall-ndk.sh?ref=543691d0ebbbf9e3c996980d2b841794098e5e85", "patch": "@@ -1,35 +0,0 @@\n-#!/bin/sh\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-\n-URL=https://dl.google.com/android/repository\n-\n-download_ndk() {\n-    mkdir -p /android/ndk\n-    cd /android/ndk\n-    curl -O $URL/$1\n-    unzip -q $1\n-    rm $1\n-    mv android-ndk-* ndk\n-}\n-\n-make_standalone_toolchain() {\n-    # See https://developer.android.com/ndk/guides/standalone_toolchain.html\n-    python2.7 /android/ndk/ndk/build/tools/make_standalone_toolchain.py \\\n-        --install-dir /android/ndk/$1-$2 \\\n-        --arch $1 \\\n-        --api $2\n-}\n-\n-remove_ndk() {\n-    rm -rf /android/ndk/ndk\n-}"}, {"sha": "862818a7c918250b43f6d7ac20287cd829520a3e", "filename": "src/ci/docker/dist-arm-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -56,7 +56,7 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY arm-linux-gnueabi.config build-toolchains.sh /tmp/\n+COPY dist-arm-linux/arm-linux-gnueabi.config dist-arm-linux/build-toolchains.sh /tmp/\n RUN ./build-toolchains.sh\n \n USER root"}, {"sha": "7f1f91f844c771ba31c15fa22029ab6a5ddfecdf", "filename": "src/ci/docker/dist-armhf-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -56,7 +56,7 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY arm-linux-gnueabihf.config build-toolchains.sh /tmp/\n+COPY dist-armhf-linux/arm-linux-gnueabihf.config dist-armhf-linux/build-toolchains.sh /tmp/\n RUN ./build-toolchains.sh\n \n USER root"}, {"sha": "030fd24ebcdd0c1daa5d69b724175d65c21c4933", "filename": "src/ci/docker/dist-armv7-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -56,7 +56,7 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY build-toolchains.sh armv7-linux-gnueabihf.config /tmp/\n+COPY dist-armv7-linux/build-toolchains.sh dist-armv7-linux/armv7-linux-gnueabihf.config /tmp/\n RUN ./build-toolchains.sh\n \n USER root"}, {"sha": "d1d9767d35e631c9c70f572b55a2ebc07f90a4ba", "filename": "src/ci/docker/dist-fuchsia/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -21,7 +21,7 @@ RUN curl -L https://cmake.org/files/v3.8/cmake-3.8.0-rc1-Linux-x86_64.tar.gz | \\\n       tar xzf - -C /usr/local --strip-components=1\n \n WORKDIR /tmp\n-COPY shared.sh build-toolchain.sh compiler-rt-dso-handle.patch /tmp/\n+COPY dist-fuchsia/shared.sh dist-fuchsia/build-toolchain.sh dist-fuchsia/compiler-rt-dso-handle.patch /tmp/\n RUN /tmp/build-toolchain.sh\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "805d238de1f9b5c78dcc4a9d7d281e07c38ca717", "filename": "src/ci/docker/dist-i586-gnu-i686-musl/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n WORKDIR /build/\n-COPY musl-libunwind-patch.patch build-musl.sh /build/\n+COPY dist-i586-gnu-i686-musl/musl-libunwind-patch.patch dist-i586-gnu-i686-musl/build-musl.sh /build/\n RUN sh /build/build-musl.sh && rm -rf /build\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "9c4d43bfa92bc600899cc8acd0881bd343f4b2cb", "filename": "src/ci/docker/dist-i686-freebsd/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -16,7 +16,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-COPY build-toolchain.sh /tmp/\n+COPY dist-i686-freebsd/build-toolchain.sh /tmp/\n RUN /tmp/build-toolchain.sh i686\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "a3c08e93ed158ce47175d05deef91f95bd5feaf5", "filename": "src/ci/docker/dist-i686-linux/Dockerfile", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -29,13 +29,13 @@ ENV PATH=/rustroot/bin:$PATH\n ENV LD_LIBRARY_PATH=/rustroot/lib64:/rustroot/lib\n ENV PKG_CONFIG_PATH=/rustroot/lib/pkgconfig\n WORKDIR /tmp\n-COPY shared.sh build-binutils.sh /tmp/\n+COPY dist-i686-linux/shared.sh dist-i686-linux/build-binutils.sh /tmp/\n \n # We need a build of openssl which supports SNI to download artifacts from\n # static.rust-lang.org. This'll be used to link into libcurl below (and used\n # later as well), so build a copy of OpenSSL with dynamic libraries into our\n # generic root.\n-COPY build-openssl.sh /tmp/\n+COPY dist-i686-linux/build-openssl.sh /tmp/\n RUN ./build-openssl.sh\n \n # The `curl` binary on CentOS doesn't support SNI which is needed for fetching\n@@ -44,7 +44,7 @@ RUN ./build-openssl.sh\n #\n # Note that we also disable a bunch of optional features of curl that we don't\n # really need.\n-COPY build-curl.sh /tmp/\n+COPY dist-i686-linux/build-curl.sh /tmp/\n RUN ./build-curl.sh\n \n # binutils < 2.22 has a bug where the 32-bit executables it generates\n@@ -54,26 +54,26 @@ RUN ./build-curl.sh\n RUN ./build-binutils.sh\n \n # Need a newer version of gcc than centos has to compile LLVM nowadays\n-COPY build-gcc.sh /tmp/\n+COPY dist-i686-linux/build-gcc.sh /tmp/\n RUN ./build-gcc.sh\n \n # CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\n-COPY build-python.sh /tmp/\n+COPY dist-i686-linux/build-python.sh /tmp/\n RUN ./build-python.sh\n \n # Apparently CentOS 5.5 desn't have `git` in yum, but we're gonna need it for\n # cloning, so download and build it here.\n-COPY build-git.sh /tmp/\n+COPY dist-i686-linux/build-git.sh /tmp/\n RUN ./build-git.sh\n \n # libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n # only has 2.6.4, so build our own\n-COPY build-cmake.sh /tmp/\n+COPY dist-i686-linux/build-cmake.sh /tmp/\n RUN ./build-cmake.sh\n \n # for sanitizers, we need kernel headers files newer than the ones CentOS ships\n # with so we install newer ones here\n-COPY build-headers.sh /tmp/\n+COPY dist-i686-linux/build-headers.sh /tmp/\n RUN ./build-headers.sh\n \n RUN curl -Lo /rustroot/dumb-init \\"}, {"sha": "0074665f34f7ed54f0ddff57da78bfa71dfbf89e", "filename": "src/ci/docker/dist-powerpc-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -56,8 +56,8 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY patches/ /tmp/patches/\n-COPY powerpc-linux-gnu.config build-powerpc-toolchain.sh /tmp/\n+COPY dist-powerpc-linux/patches/ /tmp/patches/\n+COPY dist-powerpc-linux/powerpc-linux-gnu.config dist-powerpc-linux/build-powerpc-toolchain.sh /tmp/\n RUN ./build-powerpc-toolchain.sh\n \n USER root"}, {"sha": "bd38ee0c111582a2f88dbf4f53d2ddb87b7eac57", "filename": "src/ci/docker/dist-powerpc64-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -56,8 +56,8 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY patches/ /tmp/patches/\n-COPY shared.sh powerpc64-linux-gnu.config build-powerpc64-toolchain.sh /tmp/\n+COPY dist-powerpc64-linux/patches/ /tmp/patches/\n+COPY dist-powerpc64-linux/shared.sh dist-powerpc64-linux/powerpc64-linux-gnu.config dist-powerpc64-linux/build-powerpc64-toolchain.sh /tmp/\n RUN ./build-powerpc64-toolchain.sh\n \n USER root"}, {"sha": "cbded156b4cbde53f26d4ce6508eaeeb9e74395b", "filename": "src/ci/docker/dist-powerpc64le-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -59,7 +59,7 @@ WORKDIR /tmp\n USER root\n \n RUN apt-get install -y --no-install-recommends rpm2cpio cpio\n-COPY shared.sh build-powerpc64le-toolchain.sh /tmp/\n+COPY dist-powerpc64le-linux/shared.sh dist-powerpc64le-linux/build-powerpc64le-toolchain.sh /tmp/\n RUN ./build-powerpc64le-toolchain.sh\n \n RUN curl -o /usr/local/bin/sccache \\"}, {"sha": "5c00287107aa3be399eda238a718a0050ec65b82", "filename": "src/ci/docker/dist-s390x-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -56,8 +56,8 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY patches/ /tmp/patches/\n-COPY s390x-linux-gnu.config build-s390x-toolchain.sh /tmp/\n+COPY dist-s390x-linux/patches/ /tmp/patches/\n+COPY dist-s390x-linux/s390x-linux-gnu.config dist-s390x-linux/build-s390x-toolchain.sh /tmp/\n RUN ./build-s390x-toolchain.sh\n \n USER root"}, {"sha": "a6c4eee5e812c5407e07fdce89ee73c4864e60de", "filename": "src/ci/docker/dist-x86_64-freebsd/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -16,7 +16,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-COPY build-toolchain.sh /tmp/\n+COPY dist-x86_64-freebsd/build-toolchain.sh /tmp/\n RUN /tmp/build-toolchain.sh x86_64\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "e2e42836dcdaf136786b7ad9b0194493d817cc83", "filename": "src/ci/docker/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -29,13 +29,13 @@ ENV PATH=/rustroot/bin:$PATH\n ENV LD_LIBRARY_PATH=/rustroot/lib64:/rustroot/lib\n ENV PKG_CONFIG_PATH=/rustroot/lib/pkgconfig\n WORKDIR /tmp\n-COPY shared.sh build-binutils.sh /tmp/\n+COPY dist-x86_64-linux/shared.sh dist-x86_64-linux/build-binutils.sh /tmp/\n \n # We need a build of openssl which supports SNI to download artifacts from\n # static.rust-lang.org. This'll be used to link into libcurl below (and used\n # later as well), so build a copy of OpenSSL with dynamic libraries into our\n # generic root.\n-COPY build-openssl.sh /tmp/\n+COPY dist-x86_64-linux/build-openssl.sh /tmp/\n RUN ./build-openssl.sh\n \n # The `curl` binary on CentOS doesn't support SNI which is needed for fetching\n@@ -44,7 +44,7 @@ RUN ./build-openssl.sh\n #\n # Note that we also disable a bunch of optional features of curl that we don't\n # really need.\n-COPY build-curl.sh /tmp/\n+COPY dist-x86_64-linux/build-curl.sh /tmp/\n RUN ./build-curl.sh\n \n # binutils < 2.22 has a bug where the 32-bit executables it generates\n@@ -54,26 +54,26 @@ RUN ./build-curl.sh\n RUN ./build-binutils.sh\n \n # Need a newer version of gcc than centos has to compile LLVM nowadays\n-COPY build-gcc.sh /tmp/\n+COPY dist-x86_64-linux/build-gcc.sh /tmp/\n RUN ./build-gcc.sh\n \n # CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\n-COPY build-python.sh /tmp/\n+COPY dist-x86_64-linux/build-python.sh /tmp/\n RUN ./build-python.sh\n \n # Apparently CentOS 5.5 desn't have `git` in yum, but we're gonna need it for\n # cloning, so download and build it here.\n-COPY build-git.sh /tmp/\n+COPY dist-x86_64-linux/build-git.sh /tmp/\n RUN ./build-git.sh\n \n # libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n # only has 2.6.4, so build our own\n-COPY build-cmake.sh /tmp/\n+COPY dist-x86_64-linux/build-cmake.sh /tmp/\n RUN ./build-cmake.sh\n \n # for sanitizers, we need kernel headers files newer than the ones CentOS ships\n # with so we install newer ones here\n-COPY build-headers.sh /tmp/\n+COPY dist-x86_64-linux/build-headers.sh /tmp/\n RUN ./build-headers.sh\n \n RUN curl -Lo /rustroot/dumb-init \\"}, {"sha": "2eea5ab1469728e210795b257e85ce33f2fb56db", "filename": "src/ci/docker/dist-x86_64-musl/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n WORKDIR /build/\n-COPY build-musl.sh /build/\n+COPY dist-x86_64-musl/build-musl.sh /build/\n RUN sh /build/build-musl.sh && rm -rf /build\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "f76e6271f4c8c22eddfbb4eec38760f60570fac3", "filename": "src/ci/docker/dist-x86_64-netbsd/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -56,7 +56,7 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY build-netbsd-toolchain.sh /tmp/\n+COPY dist-x86_64-netbsd/build-netbsd-toolchain.sh /tmp/\n RUN ./build-netbsd-toolchain.sh\n \n USER root"}, {"sha": "0f0e5b69c32cf787d2a2fafb6dacbd370bce6c7a", "filename": "src/ci/docker/emscripten/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Femscripten%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Femscripten%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Femscripten%2FDockerfile?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -24,7 +24,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n WORKDIR /tmp\n-COPY build-emscripten.sh /tmp/\n+COPY emscripten/build-emscripten.sh /tmp/\n RUN ./build-emscripten.sh\n ENV PATH=$PATH:/tmp/emsdk_portable\n ENV PATH=$PATH:/tmp/emsdk_portable/clang/tag-e1.37.10/build_tag-e1.37.10_32/bin"}, {"sha": "bb9a860574dd2f175245cd6e8e97fc911d8787c7", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -26,7 +26,8 @@ if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n       build \\\n       --rm \\\n       -t rust-ci \\\n-      \"$docker_dir/$image\"\n+      -f \"$docker_dir/$image/Dockerfile\" \\\n+      \"$docker_dir\"\n elif [ -f \"$docker_dir/disabled/$image/Dockerfile\" ]; then\n     if [ -n \"$TRAVIS_OS_NAME\" ]; then\n         echo Cannot run disabled images on travis!"}, {"sha": "c3d83c087e52fee5a5ccec4206a6e936656d99f1", "filename": "src/ci/docker/scripts/android-ndk.sh", "status": "renamed", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fscripts%2Fandroid-ndk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fscripts%2Fandroid-ndk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-ndk.sh?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -1,4 +1,3 @@\n-#!/bin/sh\n # Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n@@ -33,3 +32,9 @@ make_standalone_toolchain() {\n remove_ndk() {\n     rm -rf /android/ndk/ndk\n }\n+\n+download_and_make_toolchain() {\n+    download_ndk $1 && \\\n+    make_standalone_toolchain $2 $3 && \\\n+    remove_ndk\n+}", "previous_filename": "src/ci/docker/android-ndk.sh"}, {"sha": "7d8110efedec936d2ac49c8813c0b445193f21d7", "filename": "src/ci/docker/scripts/android-sdk.sh", "status": "renamed", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -1,4 +1,3 @@\n-#!/bin/sh\n # Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n@@ -47,3 +46,8 @@ create_avd() {\n             --abi $abi\n }\n \n+download_and_create_avd() {\n+    download_sdk $1\n+    download_sysimage $2 $3\n+    create_avd $2 $3\n+}", "previous_filename": "src/ci/docker/arm-android/install-sdk.sh"}, {"sha": "cd3369d5eaddc7da93f844b4fa3fd7ceceee021f", "filename": "src/ci/docker/scripts/android-start-emulator.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fscripts%2Fandroid-start-emulator.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fscripts%2Fandroid-start-emulator.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-start-emulator.sh?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "previous_filename": "src/ci/docker/arm-android/start-emulator.sh"}, {"sha": "839c390799278c98ef227d6c63b2f440e2cb421e", "filename": "src/ci/docker/scripts/dumb-init.sh", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fscripts%2Fdumb-init.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fscripts%2Fdumb-init.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fdumb-init.sh?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -0,0 +1,15 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb\n+dpkg -i dumb-init_*.deb\n+rm dumb-init_*.deb"}, {"sha": "7a2befaf6715ff692a9c7d49409a6294c030d49a", "filename": "src/ci/docker/scripts/sccache.sh", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -0,0 +1,16 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+curl -o /usr/local/bin/sccache \\\n+  https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl\n+\n+chmod +x /usr/local/bin/sccache"}, {"sha": "fc4063fae927754353d5e736099f0a365b0dd2d7", "filename": "src/libcollections/benches/str.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibcollections%2Fbenches%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibcollections%2Fbenches%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbenches%2Fstr.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -195,30 +195,34 @@ fn bench_contains_equal(b: &mut Bencher) {\n     })\n }\n \n+\n macro_rules! make_test_inner {\n-    ($s:ident, $code:expr, $name:ident, $str:expr) => {\n+    ($s:ident, $code:expr, $name:ident, $str:expr, $iters:expr) => {\n         #[bench]\n         fn $name(bencher: &mut Bencher) {\n             let mut $s = $str;\n             black_box(&mut $s);\n-            bencher.iter(|| $code);\n+            bencher.iter(|| for _ in 0..$iters { black_box($code); });\n         }\n     }\n }\n \n macro_rules! make_test {\n     ($name:ident, $s:ident, $code:expr) => {\n+        make_test!($name, $s, $code, 1);\n+    };\n+    ($name:ident, $s:ident, $code:expr, $iters:expr) => {\n         mod $name {\n             use test::Bencher;\n             use test::black_box;\n \n             // Short strings: 65 bytes each\n             make_test_inner!($s, $code, short_ascii,\n-                \"Mary had a little lamb, Little lamb Mary had a littl lamb, lamb!\");\n+                \"Mary had a little lamb, Little lamb Mary had a littl lamb, lamb!\", $iters);\n             make_test_inner!($s, $code, short_mixed,\n-                \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lam!\");\n+                \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lam!\", $iters);\n             make_test_inner!($s, $code, short_pile_of_poo,\n-                \"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9!\");\n+                \"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9!\", $iters);\n             make_test_inner!($s, $code, long_lorem_ipsum,\"\\\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis lorem sit amet dolor \\\n ultricies condimentum. Praesent iaculis purus elit, ac malesuada quam malesuada in. Duis sed orci \\\n@@ -253,7 +257,7 @@ Nam lectus enim, dapibus non nisi tempor, consectetur convallis massa. Maecenas\n feugiat. Etiam quis mauris vel risus luctus mattis a a nunc. Nullam orci quam, imperdiet id \\\n vehicula in, porttitor ut nibh. Duis sagittis adipiscing nisl vitae congue. Donec mollis risus eu \\\n leo suscipit, varius porttitor nulla porta. Pellentesque ut sem nec nisi euismod vehicula. Nulla \\\n-malesuada sollicitudin quam eu fermentum!\");\n+malesuada sollicitudin quam eu fermentum!\", $iters);\n         }\n     }\n }\n@@ -288,6 +292,13 @@ make_test!(find_zzz_char, s, s.find('\\u{1F4A4}'));\n make_test!(rfind_zzz_char, s, s.rfind('\\u{1F4A4}'));\n make_test!(find_zzz_str, s, s.find(\"\\u{1F4A4}\"));\n \n+make_test!(starts_with_ascii_char, s, s.starts_with('/'), 1024);\n+make_test!(ends_with_ascii_char, s, s.ends_with('/'), 1024);\n+make_test!(starts_with_unichar, s, s.starts_with('\\u{1F4A4}'), 1024);\n+make_test!(ends_with_unichar, s, s.ends_with('\\u{1F4A4}'), 1024);\n+make_test!(starts_with_str, s, s.starts_with(\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\"), 1024);\n+make_test!(ends_with_str, s, s.ends_with(\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\"), 1024);\n+\n make_test!(split_space_char, s, s.split(' ').count());\n make_test!(split_terminator_space_char, s, s.split_terminator(' ').count());\n "}, {"sha": "7e67befb700dbcd16a5039cf6bdb26716417744b", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -813,6 +813,7 @@ impl str {\n     /// assert!(!bananas.contains(\"apples\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n         core_str::StrExt::contains(self, pat)\n     }\n@@ -900,6 +901,7 @@ impl str {\n     /// assert_eq!(s.find(x), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {\n         core_str::StrExt::find(self, pat)\n     }\n@@ -944,6 +946,7 @@ impl str {\n     /// assert_eq!(s.rfind(x), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rfind<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1057,6 +1060,7 @@ impl str {\n     ///\n     /// [`split_whitespace`]: #method.split_whitespace\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> {\n         core_str::StrExt::split(self, pat)\n     }\n@@ -1106,6 +1110,7 @@ impl str {\n     /// assert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rsplit<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplit<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1152,6 +1157,7 @@ impl str {\n     /// assert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn split_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitTerminator<'a, P> {\n         core_str::StrExt::split_terminator(self, pat)\n     }\n@@ -1195,6 +1201,7 @@ impl str {\n     /// assert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rsplit_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplitTerminator<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1247,6 +1254,7 @@ impl str {\n     /// assert_eq!(v, [\"abc\", \"defXghi\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn splitn<'a, P: Pattern<'a>>(&'a self, n: usize, pat: P) -> SplitN<'a, P> {\n         core_str::StrExt::splitn(self, n, pat)\n     }\n@@ -1294,6 +1302,7 @@ impl str {\n     /// assert_eq!(v, [\"ghi\", \"abc1def\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rsplitn<'a, P: Pattern<'a>>(&'a self, n: usize, pat: P) -> RSplitN<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1334,6 +1343,7 @@ impl str {\n     /// assert_eq!(v, [\"1\", \"2\", \"3\"]);\n     /// ```\n     #[stable(feature = \"str_matches\", since = \"1.2.0\")]\n+    #[inline]\n     pub fn matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> Matches<'a, P> {\n         core_str::StrExt::matches(self, pat)\n     }\n@@ -1370,6 +1380,7 @@ impl str {\n     /// assert_eq!(v, [\"3\", \"2\", \"1\"]);\n     /// ```\n     #[stable(feature = \"str_matches\", since = \"1.2.0\")]\n+    #[inline]\n     pub fn rmatches<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatches<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1415,6 +1426,7 @@ impl str {\n     /// assert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n     /// ```\n     #[stable(feature = \"str_match_indices\", since = \"1.5.0\")]\n+    #[inline]\n     pub fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P> {\n         core_str::StrExt::match_indices(self, pat)\n     }\n@@ -1457,6 +1469,7 @@ impl str {\n     /// assert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n     /// ```\n     #[stable(feature = \"str_match_indices\", since = \"1.5.0\")]\n+    #[inline]\n     pub fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1737,6 +1750,7 @@ impl str {\n     /// assert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn replace<'a, P: Pattern<'a>>(&'a self, from: P, to: &str) -> String {\n         let mut result = String::new();\n         let mut last_end = 0;"}, {"sha": "4918e37eb35f08a266122920a2def0a07bb2ea81", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -429,7 +429,33 @@ impl<'a> DoubleEndedSearcher<'a> for CharSearcher<'a> {}\n \n /// Searches for chars that are equal to a given char\n impl<'a> Pattern<'a> for char {\n-    pattern_methods!(CharSearcher<'a>, CharEqPattern, CharSearcher);\n+    type Searcher = CharSearcher<'a>;\n+\n+    #[inline]\n+    fn into_searcher(self, haystack: &'a str) -> Self::Searcher {\n+        CharSearcher(CharEqPattern(self).into_searcher(haystack))\n+    }\n+\n+    #[inline]\n+    fn is_contained_in(self, haystack: &'a str) -> bool {\n+        if (self as u32) < 128 {\n+            haystack.as_bytes().contains(&(self as u8))\n+        } else {\n+            let mut buffer = [0u8; 4];\n+            self.encode_utf8(&mut buffer).is_contained_in(haystack)\n+        }\n+    }\n+\n+    #[inline]\n+    fn is_prefix_of(self, haystack: &'a str) -> bool {\n+        CharEqPattern(self).is_prefix_of(haystack)\n+    }\n+\n+    #[inline]\n+    fn is_suffix_of(self, haystack: &'a str) -> bool where Self::Searcher: ReverseSearcher<'a>\n+    {\n+        CharEqPattern(self).is_suffix_of(haystack)\n+    }\n }\n \n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "9537b40b28a0bec7234ccf31c8aec309c0dd135b", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -16,6 +16,7 @@\n \n use hir;\n use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace};\n+use ich::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::stable_hasher::StableHasher;\n@@ -34,7 +35,7 @@ use util::nodemap::NodeMap;\n pub struct DefPathTable {\n     index_to_key: [Vec<DefKey>; 2],\n     key_to_index: FxHashMap<DefKey, DefIndex>,\n-    def_path_hashes: [Vec<u64>; 2],\n+    def_path_hashes: [Vec<Fingerprint>; 2],\n }\n \n // Unfortunately we have to provide a manual impl of Clone because of the\n@@ -55,7 +56,7 @@ impl DefPathTable {\n \n     fn allocate(&mut self,\n                 key: DefKey,\n-                def_path_hash: u64,\n+                def_path_hash: Fingerprint,\n                 address_space: DefIndexAddressSpace)\n                 -> DefIndex {\n         let index = {\n@@ -79,7 +80,7 @@ impl DefPathTable {\n     }\n \n     #[inline(always)]\n-    pub fn def_path_hash(&self, index: DefIndex) -> u64 {\n+    pub fn def_path_hash(&self, index: DefIndex) -> Fingerprint {\n         self.def_path_hashes[index.address_space().index()]\n                             [index.as_array_index()]\n     }\n@@ -146,8 +147,8 @@ impl Decodable for DefPathTable {\n         let index_to_key_lo: Vec<DefKey> = Decodable::decode(d)?;\n         let index_to_key_hi: Vec<DefKey> = Decodable::decode(d)?;\n \n-        let def_path_hashes_lo: Vec<u64> = Decodable::decode(d)?;\n-        let def_path_hashes_hi: Vec<u64> = Decodable::decode(d)?;\n+        let def_path_hashes_lo: Vec<Fingerprint> = Decodable::decode(d)?;\n+        let def_path_hashes_hi: Vec<Fingerprint> = Decodable::decode(d)?;\n \n         let index_to_key = [index_to_key_lo, index_to_key_hi];\n         let def_path_hashes = [def_path_hashes_lo, def_path_hashes_hi];\n@@ -210,7 +211,7 @@ pub struct DefKey {\n }\n \n impl DefKey {\n-    fn compute_stable_hash(&self, parent_hash: u64) -> u64 {\n+    fn compute_stable_hash(&self, parent_hash: Fingerprint) -> Fingerprint {\n         let mut hasher = StableHasher::new();\n \n         // We hash a 0u8 here to disambiguate between regular DefPath hashes,\n@@ -221,7 +222,7 @@ impl DefKey {\n         hasher.finish()\n     }\n \n-    fn root_parent_stable_hash(crate_name: &str, crate_disambiguator: &str) -> u64 {\n+    fn root_parent_stable_hash(crate_name: &str, crate_disambiguator: &str) -> Fingerprint {\n         let mut hasher = StableHasher::new();\n         // Disambiguate this from a regular DefPath hash,\n         // see compute_stable_hash() above.\n@@ -396,7 +397,7 @@ impl Definitions {\n     }\n \n     #[inline(always)]\n-    pub fn def_path_hash(&self, index: DefIndex) -> u64 {\n+    pub fn def_path_hash(&self, index: DefIndex) -> Fingerprint {\n         self.table.def_path_hash(index)\n     }\n "}, {"sha": "a947f6aeff709af0ebc9ec71a47658cc2988e084", "filename": "src/librustc/ich/fingerprint.rs", "status": "modified", "additions": 26, "deletions": 46, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fich%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fich%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Ffingerprint.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -10,95 +10,75 @@\n \n use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::stable_hasher;\n-use rustc_data_structures::ToHex;\n-\n-const FINGERPRINT_LENGTH: usize = 16;\n+use std::mem;\n+use std::slice;\n \n #[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy)]\n-pub struct Fingerprint(pub [u8; FINGERPRINT_LENGTH]);\n+pub struct Fingerprint(u64, u64);\n \n impl Fingerprint {\n     #[inline]\n     pub fn zero() -> Fingerprint {\n-        Fingerprint([0; FINGERPRINT_LENGTH])\n+        Fingerprint(0, 0)\n     }\n \n+    #[inline]\n     pub fn from_smaller_hash(hash: u64) -> Fingerprint {\n-        let mut result = Fingerprint::zero();\n-        result.0[0] = (hash >>  0) as u8;\n-        result.0[1] = (hash >>  8) as u8;\n-        result.0[2] = (hash >> 16) as u8;\n-        result.0[3] = (hash >> 24) as u8;\n-        result.0[4] = (hash >> 32) as u8;\n-        result.0[5] = (hash >> 40) as u8;\n-        result.0[6] = (hash >> 48) as u8;\n-        result.0[7] = (hash >> 56) as u8;\n-        result\n+        Fingerprint(hash, hash)\n     }\n \n+    #[inline]\n     pub fn to_smaller_hash(&self) -> u64 {\n-        ((self.0[0] as u64) <<  0) |\n-        ((self.0[1] as u64) <<  8) |\n-        ((self.0[2] as u64) << 16) |\n-        ((self.0[3] as u64) << 24) |\n-        ((self.0[4] as u64) << 32) |\n-        ((self.0[5] as u64) << 40) |\n-        ((self.0[6] as u64) << 48) |\n-        ((self.0[7] as u64) << 56)\n+        self.0\n     }\n \n     pub fn to_hex(&self) -> String {\n-        self.0.to_hex()\n+        format!(\"{:x}{:x}\", self.0, self.1)\n     }\n }\n \n impl Encodable for Fingerprint {\n     #[inline]\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        for &byte in &self.0 {\n-            s.emit_u8(byte)?;\n-        }\n-        Ok(())\n+        s.emit_u64(self.0.to_le())?;\n+        s.emit_u64(self.1.to_le())\n     }\n }\n \n impl Decodable for Fingerprint {\n     #[inline]\n     fn decode<D: Decoder>(d: &mut D) -> Result<Fingerprint, D::Error> {\n-        let mut result = Fingerprint([0u8; FINGERPRINT_LENGTH]);\n-        for byte in &mut result.0 {\n-            *byte = d.read_u8()?;\n-        }\n-        Ok(result)\n+        let _0 = u64::from_le(d.read_u64()?);\n+        let _1 = u64::from_le(d.read_u64()?);\n+        Ok(Fingerprint(_0, _1))\n     }\n }\n \n impl ::std::fmt::Display for Fingerprint {\n     fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> Result<(), ::std::fmt::Error> {\n-        for i in 0 .. self.0.len() {\n-            if i > 0 {\n-                write!(formatter, \"::\")?;\n-            }\n-\n-            write!(formatter, \"{}\", self.0[i])?;\n-        }\n-        Ok(())\n+        write!(formatter, \"{:x}-{:x}\", self.0, self.1)\n     }\n }\n \n-\n impl stable_hasher::StableHasherResult for Fingerprint {\n     fn finish(mut hasher: stable_hasher::StableHasher<Self>) -> Self {\n-        let mut fingerprint = Fingerprint::zero();\n-        fingerprint.0.copy_from_slice(hasher.finalize());\n-        fingerprint\n+        let hash_bytes: &[u8] = hasher.finalize();\n+\n+        assert!(hash_bytes.len() >= mem::size_of::<u64>() * 2);\n+        let hash_bytes: &[u64] = unsafe {\n+            slice::from_raw_parts(hash_bytes.as_ptr() as *const u64, 2)\n+        };\n+\n+        // The bytes returned bytes the Blake2B hasher are always little-endian.\n+        Fingerprint(u64::from_le(hash_bytes[0]), u64::from_le(hash_bytes[1]))\n     }\n }\n \n impl<CTX> stable_hasher::HashStable<CTX> for Fingerprint {\n+    #[inline]\n     fn hash_stable<W: stable_hasher::StableHasherResult>(&self,\n                                           _: &mut CTX,\n                                           hasher: &mut stable_hasher::StableHasher<W>) {\n-        ::std::hash::Hash::hash(&self.0, hasher);\n+        ::std::hash::Hash::hash(self, hasher);\n     }\n }"}, {"sha": "f25ec8ecd4d71beee729bf73ba0107d38cc38fa8", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx: 'a> StableHashingContext<'a, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn def_path_hash(&mut self, def_id: DefId) -> u64 {\n+    pub fn def_path_hash(&mut self, def_id: DefId) -> ich::Fingerprint {\n         self.tcx.def_path_hash(def_id)\n     }\n "}, {"sha": "8ad1db7859566d41d26147eeb7777084321e5dd1", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -282,7 +282,7 @@ pub trait CrateStore {\n                     -> Option<DefId>;\n     fn def_key(&self, def: DefId) -> DefKey;\n     fn def_path(&self, def: DefId) -> hir_map::DefPath;\n-    fn def_path_hash(&self, def: DefId) -> u64;\n+    fn def_path_hash(&self, def: DefId) -> ich::Fingerprint;\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children(&self, did: DefId) -> Vec<def::Export>;\n     fn load_macro(&self, did: DefId, sess: &Session) -> LoadedMacro;\n@@ -414,7 +414,7 @@ impl CrateStore for DummyCrateStore {\n     fn def_path(&self, def: DefId) -> hir_map::DefPath {\n         bug!(\"relative_def_path\")\n     }\n-    fn def_path_hash(&self, def: DefId) -> u64 {\n+    fn def_path_hash(&self, def: DefId) -> ich::Fingerprint {\n         bug!(\"wa\")\n     }\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { bug!(\"struct_field_names\") }"}, {"sha": "7cb5f2510d5c7acdc363048165bca73f44d2d85d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -824,9 +824,9 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     linker: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"system linker to link outputs with\"),\n     link_arg: Vec<String> = (vec![], parse_string_push, [UNTRACKED],\n-        \"a single extra argument to pass to the linker (can be used several times)\"),\n+        \"a single extra argument to append to the linker invocation (can be used several times)\"),\n     link_args: Option<Vec<String>> = (None, parse_opt_list, [UNTRACKED],\n-        \"extra arguments to pass to the linker (space separated)\"),\n+        \"extra arguments to append to the linker invocation (space separated)\"),\n     link_dead_code: bool = (false, parse_bool, [UNTRACKED],\n         \"don't let linker strip dead code (turning it on can be used for code coverage)\"),\n     lto: bool = (false, parse_bool, [TRACKED],\n@@ -1029,6 +1029,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"add a mapping target to the file path remapping config\"),\n     force_unstable_if_unmarked: bool = (false, parse_bool, [TRACKED],\n         \"force all crates to be `rustc_private` unstable\"),\n+    pre_link_arg: Vec<String> = (vec![], parse_string_push, [UNTRACKED],\n+        \"a single extra argument to prepend the linker invocation (can be used several times)\"),\n+    pre_link_args: Option<Vec<String>> = (None, parse_opt_list, [UNTRACKED],\n+        \"extra arguments to prepend to the linker invocation (space separated)\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "47b988a21b4c1d402628ff043556310704bd3b7c", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -159,9 +159,14 @@ pub fn get_or_default_sysroot() -> PathBuf {\n         })\n     }\n \n-    match canonicalize(env::current_exe().ok()) {\n-        Some(mut p) => { p.pop(); p.pop(); p }\n-        None => bug!(\"can't determine value for sysroot\")\n+    match env::current_exe() {\n+        Ok(exe) => {\n+            match canonicalize(Some(exe)) {\n+                Some(mut p) => { p.pop(); p.pop(); return p; },\n+                None => bug!(\"can't determine value for sysroot\")\n+            }\n+        }\n+        Err(ref e) => panic!(format!(\"failed to get current_exe: {}\", e))\n     }\n }\n "}, {"sha": "359722ce96ec9786f0131c197805fac38806bfe7", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -19,7 +19,7 @@ use dep_graph::DepNode;\n use hir::{map as hir_map, FreevarMap, TraitMap};\n use hir::def::{Def, CtorKind, ExportMap};\n use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use ich::StableHashingContext;\n+use ich::{self, StableHashingContext};\n use middle::const_val::ConstVal;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use middle::privacy::AccessLevels;\n@@ -2248,7 +2248,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn def_path_hash(self, def_id: DefId) -> u64 {\n+    pub fn def_path_hash(self, def_id: DefId) -> ich::Fingerprint {\n         if def_id.is_local() {\n             self.hir.definitions().def_path_hash(def_id.index)\n         } else {"}, {"sha": "348d164af4190af2d12ba7592cdfb06bf8b8b0c7", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -29,6 +29,7 @@ use util::nodemap::FxHashMap;\n use serialize;\n \n use hir;\n+use ich;\n \n use self::InferTy::*;\n use self::TypeVariants::*;\n@@ -849,7 +850,7 @@ impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> {\n         self.item_name // safe to skip the binder to access a name\n     }\n \n-    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (u64, InternedString) {\n+    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (ich::Fingerprint, InternedString) {\n         // We want something here that is stable across crate boundaries.\n         // The DefId isn't but the `deterministic_hash` of the corresponding\n         // DefPath is.\n@@ -884,7 +885,7 @@ impl<'a, 'tcx, 'gcx> PolyExistentialProjection<'tcx> {\n         self.skip_binder().item_name()\n     }\n \n-    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (u64, InternedString) {\n+    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (ich::Fingerprint, InternedString) {\n         self.skip_binder().sort_key(tcx)\n     }\n "}, {"sha": "86774136bd6cbc0c07741dd3c83b22b4a8ee8395", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n+use ich::Fingerprint;\n use traits::specialization_graph;\n use ty::fast_reject;\n use ty::fold::TypeFoldable;\n@@ -32,7 +33,7 @@ pub struct TraitDef {\n \n     /// The ICH of this trait's DefPath, cached here so it doesn't have to be\n     /// recomputed all the time.\n-    pub def_path_hash: u64,\n+    pub def_path_hash: Fingerprint,\n }\n \n // We don't store the list of impls in a flat list because each cached list of\n@@ -94,7 +95,7 @@ impl<'a, 'gcx, 'tcx> TraitDef {\n                unsafety: hir::Unsafety,\n                paren_sugar: bool,\n                has_default_impl: bool,\n-               def_path_hash: u64)\n+               def_path_hash: Fingerprint)\n                -> TraitDef {\n         TraitDef {\n             def_id,"}, {"sha": "18a57f78a503719e7bcc48fb26362977f8a79bcd", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -1148,9 +1148,18 @@ pub fn diagnostics_registry() -> errors::registry::Registry {\n     Registry::new(&all_errors)\n }\n \n+fn get_args() -> Vec<String> {\n+    env::args_os().enumerate()\n+        .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n+             early_error(ErrorOutputType::default(),\n+                         &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg))\n+         }))\n+        .collect()\n+}\n+\n pub fn main() {\n     env_logger::init().unwrap();\n-    let result = run(|| run_compiler(&env::args().collect::<Vec<_>>(),\n+    let result = run(|| run_compiler(&get_args(),\n                                      &mut RustcDefaultCalls,\n                                      None,\n                                      None));"}, {"sha": "c9ed9ad3c7d2d4d2027ab5b31fee1bac4259980d", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -224,7 +224,7 @@ impl<'a, 'tcx: 'a> ComputeItemHashesVisitor<'a, 'tcx> {\n     {\n         let tcx = self.hcx.tcx();\n \n-        let mut impls: Vec<(u64, Fingerprint)> = krate\n+        let mut impls: Vec<(Fingerprint, Fingerprint)> = krate\n             .trait_impls\n             .iter()\n             .map(|(&trait_id, impls)| {"}, {"sha": "7478f902e061a321614af006535e68a6f129dcae", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -17,6 +17,7 @@ use rustc::middle::cstore::{CrateStore, CrateSource, LibSource, DepKind,\n                             ExternCrate, NativeLibrary, MetadataLoader, LinkMeta,\n                             LinkagePreference, LoadedMacro, EncodedMetadata};\n use rustc::hir::def;\n+use rustc::ich;\n use rustc::middle::lang_items;\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n@@ -337,7 +338,7 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(def.krate).def_path(def.index)\n     }\n \n-    fn def_path_hash(&self, def: DefId) -> u64 {\n+    fn def_path_hash(&self, def: DefId) -> ich::Fingerprint {\n         self.get_crate_data(def.krate).def_path_hash(def.index)\n     }\n "}, {"sha": "d8826d87d4d0f4fd0752b05e5b4ff0dd7197d907", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -16,6 +16,7 @@ use schema::*;\n use rustc::dep_graph::{DepGraph, DepNode, GlobalMetaDataKind};\n use rustc::hir::map::{DefKey, DefPath, DefPathData};\n use rustc::hir;\n+use rustc::ich;\n \n use rustc::middle::cstore::LinkagePreference;\n use rustc::hir::def::{self, Def, CtorKind};\n@@ -1106,7 +1107,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     #[inline]\n-    pub fn def_path_hash(&self, index: DefIndex) -> u64 {\n+    pub fn def_path_hash(&self, index: DefIndex) -> ich::Fingerprint {\n         self.def_path_table.def_path_hash(index)\n     }\n "}, {"sha": "f85d3f9f54dfd7cd8b63ad152089bfa10e10eca0", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -715,6 +715,10 @@ fn link_natively(sess: &Session,\n     if let Some(args) = sess.target.target.options.pre_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n+    if let Some(ref args) = sess.opts.debugging_opts.pre_link_args {\n+        cmd.args(args);\n+    }\n+    cmd.args(&sess.opts.debugging_opts.pre_link_arg);\n \n     let pre_link_objects = if crate_type == config::CrateTypeExecutable {\n         &sess.target.target.options.pre_link_objects_exe"}, {"sha": "c2f2c63790a4c64d04ec9e9ca93ffb175364fc24", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -375,7 +375,10 @@ impl<'a, 'tcx> LocalCrateContext<'a, 'tcx> {\n \n             let dbg_cx = if shared.tcx.sess.opts.debuginfo != NoDebugInfo {\n                 let dctx = debuginfo::CrateDebugContext::new(llmod);\n-                debuginfo::metadata::compile_unit_metadata(shared, &dctx, shared.tcx.sess);\n+                debuginfo::metadata::compile_unit_metadata(shared,\n+                                                           codegen_unit.name(),\n+                                                           &dctx,\n+                                                           shared.tcx.sess);\n                 Some(dctx)\n             } else {\n                 None"}, {"sha": "7d8b8161abe0282e2751b87ab95e20be3cb1c8e4", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -762,31 +762,38 @@ fn pointer_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n }\n \n pub fn compile_unit_metadata(scc: &SharedCrateContext,\n+                             codegen_unit_name: &str,\n                              debug_context: &CrateDebugContext,\n                              sess: &Session)\n                              -> DIDescriptor {\n-    let compile_unit_name = match sess.local_crate_source_file {\n-        None => fallback_path(scc),\n-        Some(ref path) => {\n-            CString::new(&path[..]).unwrap()\n-        }\n+    let mut name_in_debuginfo = match sess.local_crate_source_file {\n+        Some(ref path) => path.clone(),\n+        None => scc.tcx().crate_name(LOCAL_CRATE).to_string(),\n     };\n \n-    debug!(\"compile_unit_metadata: {:?}\", compile_unit_name);\n+    // The OSX linker has an idiosyncrasy where it will ignore some debuginfo\n+    // if multiple object files with the same DW_AT_name are linked together.\n+    // As a workaround we generate unique names for each object file. Those do\n+    // not correspond to an actual source file but that should be harmless.\n+    if scc.sess().target.target.options.is_like_osx {\n+        name_in_debuginfo.push_str(\"@\");\n+        name_in_debuginfo.push_str(codegen_unit_name);\n+    }\n+\n+    debug!(\"compile_unit_metadata: {:?}\", name_in_debuginfo);\n     // FIXME(#41252) Remove \"clang LLVM\" if we can get GDB and LLVM to play nice.\n     let producer = format!(\"clang LLVM (rustc version {})\",\n                            (option_env!(\"CFG_VERSION\")).expect(\"CFG_VERSION\"));\n \n-    let compile_unit_name = compile_unit_name.as_ptr();\n-\n+    let name_in_debuginfo = CString::new(name_in_debuginfo).unwrap();\n     let work_dir = CString::new(&sess.working_dir.0[..]).unwrap();\n     let producer = CString::new(producer).unwrap();\n     let flags = \"\\0\";\n     let split_name = \"\\0\";\n \n     unsafe {\n         let file_metadata = llvm::LLVMRustDIBuilderCreateFile(\n-            debug_context.builder, compile_unit_name, work_dir.as_ptr());\n+            debug_context.builder, name_in_debuginfo.as_ptr(), work_dir.as_ptr());\n \n         return llvm::LLVMRustDIBuilderCreateCompileUnit(\n             debug_context.builder,\n@@ -798,10 +805,6 @@ pub fn compile_unit_metadata(scc: &SharedCrateContext,\n             0,\n             split_name.as_ptr() as *const _)\n     };\n-\n-    fn fallback_path(scc: &SharedCrateContext) -> CString {\n-        CString::new(scc.tcx().crate_name(LOCAL_CRATE).to_string()).unwrap()\n-    }\n }\n \n struct MetadataCreationResult {"}, {"sha": "53e341226af3ecc6c681b7c62334cd018a1f924d", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -215,14 +215,14 @@\n         } else if (ev.target.tagName === 'SPAN' && hasClass(ev.target.parentNode, 'line-numbers')) {\n             var prev_id = 0;\n \n-            function set_fragment(name) {\n+            var set_fragment = function (name) {\n                 if (browserSupportsHistoryApi()) {\n                     history.replaceState(null, null, '#' + name);\n                     window.hashchange();\n                 } else {\n                     location.replace('#' + name);\n                 }\n-            }\n+            };\n \n             var cur_id = parseInt(ev.target.id, 10);\n \n@@ -685,7 +685,7 @@\n         }\n \n         function escape(content) {\n-            let h1 = document.createElement('h1');\n+            var h1 = document.createElement('h1');\n             h1.textContent = content;\n             return h1.innerHTML;\n         }\n@@ -1083,10 +1083,10 @@\n                 code.innerHTML = structs[j];\n \n                 var x = code.getElementsByTagName('a');\n-                for (var i = 0; i < x.length; i++) {\n-                    var href = x[i].href;\n+                for (var k = 0; k < x.length; k++) {\n+                    var href = x[k].getAttribute('href');\n                     if (href && href.indexOf('http') !== 0) {\n-                        x[i].href = rootPath + href;\n+                        x[k].setAttribute('href', rootPath + href);\n                     }\n                 }\n                 var li = document.createElement('li');"}, {"sha": "f682f6aa763c5cd43e94f38f35724eeadd668256", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -107,12 +107,19 @@ pub fn main() {\n     const STACK_SIZE: usize = 32_000_000; // 32MB\n     env_logger::init().unwrap();\n     let res = std::thread::Builder::new().stack_size(STACK_SIZE).spawn(move || {\n-        let s = env::args().collect::<Vec<_>>();\n-        main_args(&s)\n+        get_args().map(|args| main_args(&args)).unwrap_or(1)\n     }).unwrap().join().unwrap_or(101);\n     process::exit(res as i32);\n }\n \n+fn get_args() -> Option<Vec<String>> {\n+    env::args_os().enumerate()\n+        .map(|(i, arg)| arg.into_string().map_err(|arg| {\n+             print_error(format!(\"Argument {} is not valid Unicode: {:?}\", i, arg));\n+        }).ok())\n+        .collect()\n+}\n+\n fn stable(g: getopts::OptGroup) -> RustcOptGroup { RustcOptGroup::stable(g) }\n fn unstable(g: getopts::OptGroup) -> RustcOptGroup { RustcOptGroup::unstable(g) }\n "}, {"sha": "96c10c5d10d1aa9349b966c48c5f54bfd561a251", "filename": "src/libstd/env.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -43,16 +43,19 @@ use sys::os as os_imp;\n /// use std::env;\n ///\n /// // We assume that we are in a valid directory.\n-/// let p = env::current_dir().unwrap();\n-/// println!(\"The current directory is {}\", p.display());\n+/// let path = env::current_dir().unwrap();\n+/// println!(\"The current directory is {}\", path.display());\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn current_dir() -> io::Result<PathBuf> {\n     os_imp::getcwd()\n }\n \n-/// Changes the current working directory to the specified path, returning\n-/// whether the change was completed successfully or not.\n+/// Changes the current working directory to the specified path.\n+///\n+/// Returns an [`Err`] if the operation fails.\n+///\n+/// [`Err`]: ../../std/result/enum.Result.html#method.err\n ///\n /// # Examples\n ///\n@@ -65,8 +68,8 @@ pub fn current_dir() -> io::Result<PathBuf> {\n /// println!(\"Successfully changed working directory to {}!\", root.display());\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n-pub fn set_current_dir<P: AsRef<Path>>(p: P) -> io::Result<()> {\n-    os_imp::chdir(p.as_ref())\n+pub fn set_current_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n+    os_imp::chdir(path.as_ref())\n }\n \n /// An iterator over a snapshot of the environment variables of this process.\n@@ -175,10 +178,10 @@ impl fmt::Debug for VarsOs {\n ///\n /// The returned result is [`Ok(s)`] if the environment variable is present and is\n /// valid unicode. If the environment variable is not present, or it is not\n-/// valid unicode, then [`Err`] will be returned.\n+/// valid unicode, then [`VarError`] will be returned.\n ///\n /// [`Ok(s)`]: ../result/enum.Result.html#variant.Ok\n-/// [`Err`]: ../result/enum.Result.html#variant.Err\n+/// [`VarError`]: enum.VarError.html\n ///\n /// # Examples\n ///\n@@ -199,7 +202,7 @@ pub fn var<K: AsRef<OsStr>>(key: K) -> Result<String, VarError> {\n fn _var(key: &OsStr) -> Result<String, VarError> {\n     match var_os(key) {\n         Some(s) => s.into_string().map_err(VarError::NotUnicode),\n-        None => Err(VarError::NotPresent)\n+        None => Err(VarError::NotPresent),\n     }\n }\n "}, {"sha": "d0e7defbbbb9a15f0b9af79925d319c8d8e22d59", "filename": "src/libstd/process.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -754,6 +754,13 @@ impl fmt::Debug for Stdio {\n }\n \n /// Describes the result of a process after it has terminated.\n+///\n+/// This `struct` is used to represent the exit status of a child process.\n+/// Child processes are created via the [`Command`] struct and their exit\n+/// status is exposed through the [`status`] method.\n+///\n+/// [`Command`]: struct.Command.html\n+/// [`status`]: struct.Command.html#method.status\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ExitStatus(imp::ExitStatus);\n@@ -788,6 +795,22 @@ impl ExitStatus {\n     /// On Unix, this will return `None` if the process was terminated\n     /// by a signal; `std::os::unix` provides an extension trait for\n     /// extracting the signal and other details from the `ExitStatus`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::process::Command;\n+    ///\n+    /// let status = Command::new(\"mkdir\")\n+    ///                      .arg(\"projects\")\n+    ///                      .status()\n+    ///                      .expect(\"failed to execute mkdir\");\n+    ///\n+    /// match status.code() {\n+    ///     Some(code) => println!(\"Exited with status code: {}\", code),\n+    ///     None       => println!(\"Process terminated by signal\")\n+    /// }\n+    /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn code(&self) -> Option<i32> {\n         self.0.code()"}, {"sha": "284a5fbd9d5066dcc87353daca96e9e2dbaee58e", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -1067,7 +1067,7 @@ impl<T> Receiver<T> {\n         Receiver { inner: UnsafeCell::new(inner) }\n     }\n \n-    /// Attempts to return a pending value on this receiver without blocking\n+    /// Attempts to return a pending value on this receiver without blocking.\n     ///\n     /// This method will never block the caller in order to wait for data to\n     /// become available. Instead, this will always return immediately with a"}, {"sha": "8e41fd009be675db4954e19aae6da513f546913f", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -253,7 +253,12 @@ pub fn current_exe() -> io::Result<PathBuf> {\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"emscripten\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n-    ::fs::read_link(\"/proc/self/exe\")\n+    let selfexe = PathBuf::from(\"/proc/self/exe\");\n+    if selfexe.exists() {\n+        ::fs::read_link(selfexe)\n+    } else {\n+        Err(io::Error::new(io::ErrorKind::Other, \"no /proc/self/exe available. Is /proc mounted?\"))\n+    }\n }\n \n #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]"}, {"sha": "3f6c2827a3f937242b2522ccf29904545e6b39d8", "filename": "src/libstd/sys/windows/ext/ffi.rs", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -26,8 +26,22 @@ pub trait OsStringExt {\n     /// Creates an `OsString` from a potentially ill-formed UTF-16 slice of\n     /// 16-bit code units.\n     ///\n-    /// This is lossless: calling `.encode_wide()` on the resulting string\n+    /// This is lossless: calling [`encode_wide`] on the resulting string\n     /// will always return the original code units.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// // UTF-16 encoding for \"Unicode\".\n+    /// let source = [0x0055, 0x006E, 0x0069, 0x0063, 0x006F, 0x0064, 0x0065];\n+    ///\n+    /// let string = OsString::from_wide(&source[..]);\n+    /// ```\n+    ///\n+    /// [`encode_wide`]: ./trait.OsStrExt.html#tymethod.encode_wide\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from_wide(wide: &[u16]) -> Self;\n }\n@@ -42,11 +56,29 @@ impl OsStringExt for OsString {\n /// Windows-specific extensions to `OsStr`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStrExt {\n-    /// Re-encodes an `OsStr` as a wide character sequence,\n-    /// i.e. potentially ill-formed UTF-16.\n+    /// Re-encodes an `OsStr` as a wide character sequence, i.e. potentially\n+    /// ill-formed UTF-16.\n+    ///\n+    /// This is lossless: calling [`OsString::from_wide`] and then\n+    /// `encode_wide` on the result will yield the original code units.\n+    /// Note that the encoding does not add a final null terminator.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// // UTF-16 encoding for \"Unicode\".\n+    /// let source = [0x0055, 0x006E, 0x0069, 0x0063, 0x006F, 0x0064, 0x0065];\n+    ///\n+    /// let string = OsString::from_wide(&source[..]);\n+    ///\n+    /// let result: Vec<u16> = string.encode_wide().collect();\n+    /// assert_eq!(&source[..], &result[..]);\n+    /// ```\n     ///\n-    /// This is lossless. Note that the encoding does not include a final\n-    /// null.\n+    /// [`OsString::from_wide`]: ./trait.OsStringExt.html#tymethod.from_wide\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn encode_wide(&self) -> EncodeWide;\n }"}, {"sha": "2d00cb38ec4fcb9ba20d85f642c60c1c6140f22d", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 243, "deletions": 48, "changes": 291, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Windows-specific extensions for the primitives in `std::fs`\n+//! Windows-specific extensions for the primitives in the `std::fs` module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -18,7 +18,9 @@ use path::Path;\n use sys;\n use sys_common::{AsInnerMut, AsInner};\n \n-/// Windows-specific extensions to `File`\n+/// Windows-specific extensions to [`File`].\n+///\n+/// [`File`]: ../../../fs/struct.File.html\n #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n pub trait FileExt {\n     /// Seeks to a given position and reads a number of bytes.\n@@ -35,6 +37,24 @@ pub trait FileExt {\n     /// Note that similar to `File::read`, it is not an error to return with a\n     /// short read. When returning from such a short read, the file pointer is\n     /// still updated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::fs::File;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    /// let mut buffer = [0; 10];\n+    ///\n+    /// // Read 10 bytes, starting 72 bytes from the\n+    /// // start of the file.\n+    /// file.seek_read(&mut buffer[..], 72)?;\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn seek_read(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>;\n \n@@ -52,6 +72,22 @@ pub trait FileExt {\n     /// Note that similar to `File::write`, it is not an error to return a\n     /// short write. When returning from such a short write, the file pointer\n     /// is still updated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs::File;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut buffer = File::create(\"foo.txt\")?;\n+    ///\n+    /// // Write a byte string starting 72 bytes from\n+    /// // the start of the file.\n+    /// buffer.seek_write(b\"some bytes\", 72)?;\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn seek_write(&self, buf: &[u8], offset: u64) -> io::Result<usize>;\n }\n@@ -67,81 +103,94 @@ impl FileExt for fs::File {\n     }\n }\n \n-/// Windows-specific extensions to `OpenOptions`\n+/// Windows-specific extensions to [`OpenOptions`].\n+///\n+/// [`OpenOptions`]: ../../../fs/struct.OpenOptions.html\n #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n pub trait OpenOptionsExt {\n-    /// Overrides the `dwDesiredAccess` argument to the call to `CreateFile`\n+    /// Overrides the `dwDesiredAccess` argument to the call to [`CreateFile`]\n     /// with the specified value.\n     ///\n     /// This will override the `read`, `write`, and `append` flags on the\n     /// `OpenOptions` structure. This method provides fine-grained control over\n     /// the permissions to read, write and append data, attributes (like hidden\n-    /// and system) and extended attributes.\n+    /// and system), and extended attributes.\n     ///\n     /// # Examples\n     ///\n     /// ```no_run\n     /// use std::fs::OpenOptions;\n-    /// use std::os::windows::fs::OpenOptionsExt;\n+    /// use std::os::windows::prelude::*;\n     ///\n     /// // Open without read and write permission, for example if you only need\n-    /// // to call `stat()` on the file\n+    /// // to call `stat` on the file\n     /// let file = OpenOptions::new().access_mode(0).open(\"foo.txt\");\n     /// ```\n+    ///\n+    /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn access_mode(&mut self, access: u32) -> &mut Self;\n \n-    /// Overrides the `dwShareMode` argument to the call to `CreateFile` with\n+    /// Overrides the `dwShareMode` argument to the call to [`CreateFile`] with\n     /// the specified value.\n     ///\n     /// By default `share_mode` is set to\n-    /// `FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE`. Specifying\n-    /// less permissions denies others to read from, write to and/or delete the\n-    /// file while it is open.\n+    /// `FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE`. This allows\n+    /// other processes to to read, write, and delete/rename the same file\n+    /// while it is open. Removing any of the flags will prevent other\n+    /// processes from performing the corresponding operation until the file\n+    /// handle is closed.\n     ///\n     /// # Examples\n     ///\n     /// ```no_run\n     /// use std::fs::OpenOptions;\n-    /// use std::os::windows::fs::OpenOptionsExt;\n+    /// use std::os::windows::prelude::*;\n     ///\n     /// // Do not allow others to read or modify this file while we have it open\n-    /// // for writing\n-    /// let file = OpenOptions::new().write(true)\n-    ///                              .share_mode(0)\n-    ///                              .open(\"foo.txt\");\n+    /// // for writing.\n+    /// let file = OpenOptions::new()\n+    ///     .write(true)\n+    ///     .share_mode(0)\n+    ///     .open(\"foo.txt\");\n     /// ```\n+    ///\n+    /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn share_mode(&mut self, val: u32) -> &mut Self;\n \n     /// Sets extra flags for the `dwFileFlags` argument to the call to\n-    /// `CreateFile2` (or combines it with `attributes` and `security_qos_flags`\n-    /// to set the `dwFlagsAndAttributes` for `CreateFile`).\n+    /// [`CreateFile2`] to the specified value (or combines it with\n+    /// `attributes` and `security_qos_flags` to set the `dwFlagsAndAttributes`\n+    /// for [`CreateFile`]).\n     ///\n-    /// Custom flags can only set flags, not remove flags set by Rusts options.\n-    /// This options overwrites any previously set custom flags.\n+    /// Custom flags can only set flags, not remove flags set by Rust's options.\n+    /// This option overwrites any previously set custom flags.\n     ///\n     /// # Examples\n     ///\n-    /// ```rust,ignore\n+    /// ```ignore\n     /// extern crate winapi;\n+    ///\n     /// use std::fs::OpenOptions;\n-    /// use std::os::windows::fs::OpenOptionsExt;\n-    ///\n-    /// let mut options = OpenOptions::new();\n-    /// options.create(true).write(true);\n-    /// if cfg!(windows) {\n-    ///     options.custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE);\n-    /// }\n-    /// let file = options.open(\"foo.txt\");\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// let file = OpenOptions::new()\n+    ///     .create(true)\n+    ///     .write(true)\n+    ///     .custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE)\n+    ///     .open(\"foo.txt\");\n     /// ```\n+    ///\n+    /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n+    /// [`CreateFile2`]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn custom_flags(&mut self, flags: u32) -> &mut Self;\n \n-    /// Sets the `dwFileAttributes` argument to the call to `CreateFile2` to\n+    /// Sets the `dwFileAttributes` argument to the call to [`CreateFile2`] to\n     /// the specified value (or combines it with `custom_flags` and\n     /// `security_qos_flags` to set the `dwFlagsAndAttributes` for\n-    /// `CreateFile`).\n+    /// [`CreateFile`]).\n     ///\n     /// If a _new_ file is created because it does not yet exist and\n     /// `.create(true)` or `.create_new(true)` are specified, the new file is\n@@ -155,21 +204,52 @@ pub trait OpenOptionsExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust,ignore\n+    /// ```ignore\n     /// extern crate winapi;\n+    ///\n     /// use std::fs::OpenOptions;\n-    /// use std::os::windows::fs::OpenOptionsExt;\n+    /// use std::os::windows::prelude::*;\n     ///\n-    /// let file = OpenOptions::new().write(true).create(true)\n-    ///                              .attributes(winapi::FILE_ATTRIBUTE_HIDDEN)\n-    ///                              .open(\"foo.txt\");\n+    /// let file = OpenOptions::new()\n+    ///     .write(true)\n+    ///     .create(true)\n+    ///     .attributes(winapi::FILE_ATTRIBUTE_HIDDEN)\n+    ///     .open(\"foo.txt\");\n     /// ```\n+    ///\n+    /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n+    /// [`CreateFile2`]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn attributes(&mut self, val: u32) -> &mut Self;\n \n-    /// Sets the `dwSecurityQosFlags` argument to the call to `CreateFile2` to\n+    /// Sets the `dwSecurityQosFlags` argument to the call to [`CreateFile2`] to\n     /// the specified value (or combines it with `custom_flags` and `attributes`\n-    /// to set the `dwFlagsAndAttributes` for `CreateFile`).\n+    /// to set the `dwFlagsAndAttributes` for [`CreateFile`]).\n+    ///\n+    /// By default, `security_qos_flags` is set to `SECURITY_ANONYMOUS`. For\n+    /// information about possible values, see [Impersonation Levels] on the\n+    /// Windows Dev Center site.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs::OpenOptions;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// let file = OpenOptions::new()\n+    ///     .write(true)\n+    ///     .create(true)\n+    ///\n+    ///     // Sets the flag value to `SecurityIdentification`.\n+    ///     .security_qos_flags(1)\n+    ///\n+    ///     .open(\"foo.txt\");\n+    /// ```\n+    ///\n+    /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n+    /// [`CreateFile2`]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx\n+    /// [Impersonation Levels]:\n+    ///     https://msdn.microsoft.com/en-us/library/windows/desktop/aa379572.aspx\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn security_qos_flags(&mut self, flags: u32) -> &mut OpenOptions;\n }\n@@ -197,42 +277,157 @@ impl OpenOptionsExt for OpenOptions {\n     }\n }\n \n-/// Extension methods for `fs::Metadata` to access the raw fields contained\n+/// Extension methods for [`fs::Metadata`] to access the raw fields contained\n /// within.\n+///\n+/// The data members that this trait exposes correspond to the members\n+/// of the [`BY_HANDLE_FILE_INFORMATION`] structure.\n+///\n+/// [`fs::Metadata`]: ../../../fs/struct.Metadata.html\n+/// [`BY_HANDLE_FILE_INFORMATION`]:\n+///     https://msdn.microsoft.com/en-us/library/windows/desktop/aa363788.aspx\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Returns the value of the `dwFileAttributes` field of this metadata.\n     ///\n     /// This field contains the file system attribute information for a file\n-    /// or directory.\n+    /// or directory. For possible values and their descriptions, see\n+    /// [File Attribute Constants] in the Windows Dev Center.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::fs;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// let attributes = metadata.file_attributes();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    ///\n+    /// [File Attribute Constants]:\n+    ///     https://msdn.microsoft.com/en-us/library/windows/desktop/gg258117.aspx\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn file_attributes(&self) -> u32;\n \n     /// Returns the value of the `ftCreationTime` field of this metadata.\n     ///\n-    /// The returned 64-bit value represents the number of 100-nanosecond\n-    /// intervals since January 1, 1601 (UTC).\n+    /// The returned 64-bit value is equivalent to a [`FILETIME`] struct,\n+    /// which represents the number of 100-nanosecond intervals since\n+    /// January 1, 1601 (UTC). The struct is automatically\n+    /// converted to a `u64` value, as that is the recommended way\n+    /// to use it.\n+    ///\n+    /// If the underlying filesystem does not support creation time, the\n+    /// returned value is 0.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::fs;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// let creation_time = metadata.creation_time();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    ///\n+    /// [`FILETIME`]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn creation_time(&self) -> u64;\n \n     /// Returns the value of the `ftLastAccessTime` field of this metadata.\n     ///\n-    /// The returned 64-bit value represents the number of 100-nanosecond\n-    /// intervals since January 1, 1601 (UTC).\n+    /// The returned 64-bit value is equivalent to a [`FILETIME`] struct,\n+    /// which represents the number of 100-nanosecond intervals since\n+    /// January 1, 1601 (UTC). The struct is automatically\n+    /// converted to a `u64` value, as that is the recommended way\n+    /// to use it.\n+    ///\n+    /// For a file, the value specifies the last time that a file was read\n+    /// from or written to. For a directory, the value specifies when\n+    /// the directory was created. For both files and directories, the\n+    /// specified date is correct, but the time of day is always set to\n+    /// midnight.\n+    ///\n+    /// If the underlying filesystem does not support last access time, the\n+    /// returned value is 0.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::fs;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// let last_access_time = metadata.last_access_time();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    ///\n+    /// [`FILETIME`]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn last_access_time(&self) -> u64;\n \n     /// Returns the value of the `ftLastWriteTime` field of this metadata.\n     ///\n-    /// The returned 64-bit value represents the number of 100-nanosecond\n-    /// intervals since January 1, 1601 (UTC).\n+    /// The returned 64-bit value is equivalent to a [`FILETIME`] struct,\n+    /// which represents the number of 100-nanosecond intervals since\n+    /// January 1, 1601 (UTC). The struct is automatically\n+    /// converted to a `u64` value, as that is the recommended way\n+    /// to use it.\n+    ///\n+    /// For a file, the value specifies the last time that a file was written\n+    /// to. For a directory, the structure specifies when the directory was\n+    /// created.\n+    ///\n+    /// If the underlying filesystem does not support the last write time\n+    /// time, the returned value is 0.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::fs;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// let last_write_time = metadata.last_write_time();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    ///\n+    /// [`FILETIME`]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn last_write_time(&self) -> u64;\n \n     /// Returns the value of the `nFileSize{High,Low}` fields of this\n     /// metadata.\n     ///\n     /// The returned value does not have meaning for directories.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::fs;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// let file_size = metadata.file_size();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn file_size(&self) -> u64;\n }\n@@ -253,7 +448,7 @@ impl MetadataExt for Metadata {\n ///\n /// # Examples\n ///\n-/// ```ignore\n+/// ```no_run\n /// use std::os::windows::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n@@ -274,7 +469,7 @@ pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q)\n ///\n /// # Examples\n ///\n-/// ```ignore\n+/// ```no_run\n /// use std::os::windows::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {"}, {"sha": "11b1337a8aec0b933965d39c9cb1b070ad0a44a5", "filename": "src/libstd/sys/windows/ext/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Experimental extensions to `std` for Windows.\n+//! Platform-specific extensions to `std` for Windows.\n //!\n-//! For now, this module is limited to extracting handles, file\n-//! descriptors, and sockets, but its functionality will grow over\n-//! time.\n+//! Provides access to platform-level information for Windows, and exposes\n+//! Windows-specific idioms that would otherwise be inappropriate as part\n+//! the core `std` library. These extensions allow developers to use\n+//! `std` types and idioms with Windows in a way that the normal\n+//! platform-agnostic idioms would not normally support.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "df5e4ef1d886e9f589e413b2ba46d54beb4be1be", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -750,6 +750,7 @@ impl<'a> Iterator for Wtf8CodePoints<'a> {\n     }\n }\n \n+/// Generates a wide character sequence for potentially ill-formed UTF-16.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct EncodeWide<'a> {"}, {"sha": "1930f61121bb028113f2dc37d5b037f6ca9f2a47", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -700,7 +700,7 @@ impl<'a> ExtCtxt<'a> {\n     /// Returns span for the macro which originally caused the current expansion to happen.\n     ///\n     /// Stops backtracing at include! boundary.\n-    pub fn expansion_cause(&self) -> Span {\n+    pub fn expansion_cause(&self) -> Option<Span> {\n         let mut ctxt = self.backtrace();\n         let mut last_macro = None;\n         loop {\n@@ -716,7 +716,7 @@ impl<'a> ExtCtxt<'a> {\n                 break\n             }\n         }\n-        last_macro.expect(\"missing expansion backtrace\")\n+        last_macro\n     }\n \n     pub fn struct_span_warn(&self,"}, {"sha": "3cdd3a4b2c31d8a313c863cde1311e5b1a5c8a17", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -35,7 +35,7 @@ pub fn expand_line(cx: &mut ExtCtxt, sp: Span, tts: &[tokenstream::TokenTree])\n                    -> Box<base::MacResult+'static> {\n     base::check_zero_tts(cx, sp, tts, \"line!\");\n \n-    let topmost = cx.expansion_cause();\n+    let topmost = cx.expansion_cause().unwrap_or(sp);\n     let loc = cx.codemap().lookup_char_pos(topmost.lo);\n \n     base::MacEager::expr(cx.expr_u32(topmost, loc.line as u32))\n@@ -46,7 +46,7 @@ pub fn expand_column(cx: &mut ExtCtxt, sp: Span, tts: &[tokenstream::TokenTree])\n                   -> Box<base::MacResult+'static> {\n     base::check_zero_tts(cx, sp, tts, \"column!\");\n \n-    let topmost = cx.expansion_cause();\n+    let topmost = cx.expansion_cause().unwrap_or(sp);\n     let loc = cx.codemap().lookup_char_pos(topmost.lo);\n \n     base::MacEager::expr(cx.expr_u32(topmost, loc.col.to_usize() as u32))\n@@ -59,7 +59,7 @@ pub fn expand_file(cx: &mut ExtCtxt, sp: Span, tts: &[tokenstream::TokenTree])\n                    -> Box<base::MacResult+'static> {\n     base::check_zero_tts(cx, sp, tts, \"file!\");\n \n-    let topmost = cx.expansion_cause();\n+    let topmost = cx.expansion_cause().unwrap_or(sp);\n     let loc = cx.codemap().lookup_char_pos(topmost.lo);\n     base::MacEager::expr(cx.expr_str(topmost, Symbol::intern(&loc.file.name)))\n }"}, {"sha": "ef048ac8ca355f9ea0e43f3bc5c1cb9774de0fb4", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -542,6 +542,7 @@ struct ConsoleTestState<T> {\n     passed: usize,\n     failed: usize,\n     ignored: usize,\n+    filtered_out: usize,\n     measured: usize,\n     metrics: MetricMap,\n     failures: Vec<(TestDesc, Vec<u8>)>,\n@@ -570,6 +571,7 @@ impl<T: Write> ConsoleTestState<T> {\n             passed: 0,\n             failed: 0,\n             ignored: 0,\n+            filtered_out: 0,\n             measured: 0,\n             metrics: MetricMap::new(),\n             failures: Vec::new(),\n@@ -775,11 +777,12 @@ impl<T: Write> ConsoleTestState<T> {\n         } else {\n             self.write_pretty(\"FAILED\", term::color::RED)?;\n         }\n-        let s = format!(\". {} passed; {} failed; {} ignored; {} measured\\n\\n\",\n+        let s = format!(\". {} passed; {} failed; {} ignored; {} measured; {} filtered out\\n\\n\",\n                         self.passed,\n                         self.failed,\n                         self.ignored,\n-                        self.measured);\n+                        self.measured,\n+                        self.filtered_out);\n         self.write_plain(&s)?;\n         return Ok(success);\n     }\n@@ -875,6 +878,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n     fn callback<T: Write>(event: &TestEvent, st: &mut ConsoleTestState<T>) -> io::Result<()> {\n         match (*event).clone() {\n             TeFiltered(ref filtered_tests) => st.write_run_start(filtered_tests.len()),\n+            TeFilteredOut(filtered_out) => Ok(st.filtered_out = filtered_out),\n             TeWait(ref test, padding) => st.write_test_start(test, padding),\n             TeTimeout(ref test) => st.write_timeout(test),\n             TeResult(test, result, stdout) => {\n@@ -957,6 +961,7 @@ fn should_sort_failures_before_printing_them() {\n         passed: 0,\n         failed: 0,\n         ignored: 0,\n+        filtered_out: 0,\n         measured: 0,\n         max_name_len: 10,\n         metrics: MetricMap::new(),\n@@ -1017,6 +1022,7 @@ pub enum TestEvent {\n     TeWait(TestDesc, NamePadding),\n     TeResult(TestDesc, TestResult, Vec<u8>),\n     TeTimeout(TestDesc),\n+    TeFilteredOut(usize),\n }\n \n pub type MonitorMsg = (TestDesc, TestResult, Vec<u8>);\n@@ -1028,11 +1034,16 @@ pub fn run_tests<F>(opts: &TestOpts, tests: Vec<TestDescAndFn>, mut callback: F)\n     use std::collections::HashMap;\n     use std::sync::mpsc::RecvTimeoutError;\n \n+    let tests_len = tests.len();\n+\n     let mut filtered_tests = filter_tests(opts, tests);\n     if !opts.bench_benchmarks {\n         filtered_tests = convert_benchmarks_to_tests(filtered_tests);\n     }\n \n+    let filtered_out = tests_len - filtered_tests.len();\n+    callback(TeFilteredOut(filtered_out))?;\n+\n     let filtered_descs = filtered_tests.iter()\n                                        .map(|t| t.desc.clone())\n                                        .collect();"}, {"sha": "5f108e0a1ed813565fb3df0bf38ba9083d8832f7", "filename": "src/test/compile-fail/issue-41776.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Ftest%2Fcompile-fail%2Fissue-41776.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Ftest%2Fcompile-fail%2Fissue-41776.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41776.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    include!(line!()); //~ ERROR argument must be a string literal\n+}"}, {"sha": "f4f9f92396f2c20d3fb822eba05b41b247cc116a", "filename": "src/test/debuginfo/multi-cgu.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Ftest%2Fdebuginfo%2Fmulti-cgu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dfcd85fd4bae49445383baadf472fbdb414a0e6/src%2Ftest%2Fdebuginfo%2Fmulti-cgu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmulti-cgu.rs?ref=5dfcd85fd4bae49445383baadf472fbdb414a0e6", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case makes sure that we get proper break points for binaries\n+// compiled with multiple codegen units. (see #39160)\n+\n+\n+// min-lldb-version: 310\n+\n+// compile-flags:-g -Ccodegen-units=2\n+\n+// === GDB TESTS ===============================================================\n+\n+// gdb-command:run\n+\n+// gdb-command:print xxx\n+// gdb-check:$1 = 12345\n+// gdb-command:continue\n+\n+// gdb-command:print yyy\n+// gdb-check:$2 = 67890\n+// gdb-command:continue\n+\n+\n+// === LLDB TESTS ==============================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print xxx\n+// lldb-check:[...]$0 = 12345\n+// lldb-command:continue\n+\n+// lldb-command:print yyy\n+// lldb-check:[...]$1 = 67890\n+// lldb-command:continue\n+\n+\n+#![feature(omit_gdb_pretty_printer_section)]\n+#![omit_gdb_pretty_printer_section]\n+\n+mod a {\n+    pub fn foo(xxx: u32) {\n+        super::_zzz(); // #break\n+    }\n+}\n+\n+mod b {\n+    pub fn bar(yyy: u64) {\n+        super::_zzz(); // #break\n+    }\n+}\n+\n+fn main() {\n+    a::foo(12345);\n+    b::bar(67890);\n+}\n+\n+#[inline(never)]\n+fn _zzz() {}"}]}