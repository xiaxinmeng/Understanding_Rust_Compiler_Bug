{"sha": "40d60a4608c76e8a74ab643f4629dbaf129e07a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZDYwYTQ2MDhjNzZlOGE3NGFiNjQzZjQ2MjlkYmFmMTI5ZTA3YTQ=", "commit": {"author": {"name": "Thomas Heck", "email": "t@b128.net", "date": "2018-12-05T20:43:44Z"}, "committer": {"name": "Thomas Heck", "email": "t@b128.net", "date": "2018-12-08T12:30:54Z"}, "message": "Use private trait for Rc/Arc Eq specialization", "tree": {"sha": "b8f88a5acaeb69a364f06bbb7d1958a03cafed6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8f88a5acaeb69a364f06bbb7d1958a03cafed6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40d60a4608c76e8a74ab643f4629dbaf129e07a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40d60a4608c76e8a74ab643f4629dbaf129e07a4", "html_url": "https://github.com/rust-lang/rust/commit/40d60a4608c76e8a74ab643f4629dbaf129e07a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40d60a4608c76e8a74ab643f4629dbaf129e07a4/comments", "author": {"login": "chpio", "id": 545659, "node_id": "MDQ6VXNlcjU0NTY1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/545659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chpio", "html_url": "https://github.com/chpio", "followers_url": "https://api.github.com/users/chpio/followers", "following_url": "https://api.github.com/users/chpio/following{/other_user}", "gists_url": "https://api.github.com/users/chpio/gists{/gist_id}", "starred_url": "https://api.github.com/users/chpio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chpio/subscriptions", "organizations_url": "https://api.github.com/users/chpio/orgs", "repos_url": "https://api.github.com/users/chpio/repos", "events_url": "https://api.github.com/users/chpio/events{/privacy}", "received_events_url": "https://api.github.com/users/chpio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chpio", "id": 545659, "node_id": "MDQ6VXNlcjU0NTY1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/545659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chpio", "html_url": "https://github.com/chpio", "followers_url": "https://api.github.com/users/chpio/followers", "following_url": "https://api.github.com/users/chpio/following{/other_user}", "gists_url": "https://api.github.com/users/chpio/gists{/gist_id}", "starred_url": "https://api.github.com/users/chpio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chpio/subscriptions", "organizations_url": "https://api.github.com/users/chpio/orgs", "repos_url": "https://api.github.com/users/chpio/repos", "events_url": "https://api.github.com/users/chpio/events{/privacy}", "received_events_url": "https://api.github.com/users/chpio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a916a617f6c6c62536a3b164f4b15ea58eaa148", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a916a617f6c6c62536a3b164f4b15ea58eaa148", "html_url": "https://github.com/rust-lang/rust/commit/2a916a617f6c6c62536a3b164f4b15ea58eaa148"}], "stats": {"total": 111, "additions": 74, "deletions": 37}, "files": [{"sha": "6769a70ddbe0a8333a5335aa159176adde7432e4", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/40d60a4608c76e8a74ab643f4629dbaf129e07a4/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d60a4608c76e8a74ab643f4629dbaf129e07a4/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=40d60a4608c76e8a74ab643f4629dbaf129e07a4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(specialization)]\n #![allow(deprecated)]\n \n //! Single-threaded reference-counting pointers. 'Rc' stands for 'Reference\n@@ -901,6 +900,38 @@ impl<T: Default> Default for Rc<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+trait RcEqIdent<T: ?Sized + PartialEq> {\n+    fn eq(&self, other: &Rc<T>) -> bool;\n+    fn ne(&self, other: &Rc<T>) -> bool;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized + PartialEq> RcEqIdent<T> for Rc<T> {\n+    #[inline]\n+    default fn eq(&self, other: &Rc<T>) -> bool {\n+        **self == **other\n+    }\n+\n+    #[inline]\n+    default fn ne(&self, other: &Rc<T>) -> bool {\n+        **self != **other\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized + Eq> RcEqIdent<T> for Rc<T> {\n+    #[inline]\n+    fn eq(&self, other: &Rc<T>) -> bool {\n+        Rc::ptr_eq(self, other) || **self == **other\n+    }\n+\n+    #[inline]\n+    fn ne(&self, other: &Rc<T>) -> bool {\n+        !Rc::ptr_eq(self, other) && **self != **other\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + PartialEq> PartialEq for Rc<T> {\n     /// Equality for two `Rc`s.\n@@ -919,9 +950,9 @@ impl<T: ?Sized + PartialEq> PartialEq for Rc<T> {\n     ///\n     /// assert!(five == Rc::new(5));\n     /// ```\n-    #[inline(always)]\n-    default fn eq(&self, other: &Rc<T>) -> bool {\n-        **self == **other\n+    #[inline]\n+    fn eq(&self, other: &Rc<T>) -> bool {\n+        RcEqIdent::eq(self, other)\n     }\n \n     /// Inequality for two `Rc`s.\n@@ -940,23 +971,9 @@ impl<T: ?Sized + PartialEq> PartialEq for Rc<T> {\n     ///\n     /// assert!(five != Rc::new(6));\n     /// ```\n-    #[inline(always)]\n-    default fn ne(&self, other: &Rc<T>) -> bool {\n-        **self != **other\n-    }\n-}\n-\n-#[doc(hidden)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized + Eq> PartialEq for Rc<T> {\n-    #[inline(always)]\n-    fn eq(&self, other: &Rc<T>) -> bool {\n-        Rc::ptr_eq(self, other) || **self == **other\n-    }\n-\n-    #[inline(always)]\n+    #[inline]\n     fn ne(&self, other: &Rc<T>) -> bool {\n-        !Rc::ptr_eq(self, other) && **self != **other\n+        RcEqIdent::ne(self, other)\n     }\n }\n "}, {"sha": "e596694fb9d4b6e7070a55f1e8f244bf5c23cd94", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/40d60a4608c76e8a74ab643f4629dbaf129e07a4/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d60a4608c76e8a74ab643f4629dbaf129e07a4/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=40d60a4608c76e8a74ab643f4629dbaf129e07a4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(specialization)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n //! Thread-safe reference-counting pointers.\n@@ -1288,6 +1287,37 @@ impl<T: ?Sized> Drop for Weak<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+trait ArcEqIdent<T: ?Sized + PartialEq> {\n+    fn eq(&self, other: &Arc<T>) -> bool;\n+    fn ne(&self, other: &Arc<T>) -> bool;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized + PartialEq> ArcEqIdent<T> for Arc<T> {\n+    #[inline]\n+    default fn eq(&self, other: &Arc<T>) -> bool {\n+        **self == **other\n+    }\n+    #[inline]\n+    default fn ne(&self, other: &Arc<T>) -> bool {\n+        **self != **other\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized + Eq> ArcEqIdent<T> for Arc<T> {\n+    #[inline]\n+    fn eq(&self, other: &Arc<T>) -> bool {\n+        Arc::ptr_eq(self, other) || **self == **other\n+    }\n+\n+    #[inline]\n+    fn ne(&self, other: &Arc<T>) -> bool {\n+        !Arc::ptr_eq(self, other) && **self != **other\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + PartialEq> PartialEq for Arc<T> {\n     /// Equality for two `Arc`s.\n@@ -1306,8 +1336,9 @@ impl<T: ?Sized + PartialEq> PartialEq for Arc<T> {\n     ///\n     /// assert!(five == Arc::new(5));\n     /// ```\n-    default fn eq(&self, other: &Arc<T>) -> bool {\n-        **self == **other\n+    #[inline]\n+    fn eq(&self, other: &Arc<T>) -> bool {\n+        ArcEqIdent::eq(self, other)\n     }\n \n     /// Inequality for two `Arc`s.\n@@ -1326,23 +1357,12 @@ impl<T: ?Sized + PartialEq> PartialEq for Arc<T> {\n     ///\n     /// assert!(five != Arc::new(6));\n     /// ```\n-    default fn ne(&self, other: &Arc<T>) -> bool {\n-        **self != **other\n-    }\n-}\n-#[doc(hidden)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized + Eq> PartialEq for Arc<T> {\n-    #[inline(always)]\n-    fn eq(&self, other: &Arc<T>) -> bool {\n-        Arc::ptr_eq(self, other) || **self == **other\n-    }\n-\n-    #[inline(always)]\n+    #[inline]\n     fn ne(&self, other: &Arc<T>) -> bool {\n-        !Arc::ptr_eq(self, other) && **self != **other\n+        ArcEqIdent::ne(self, other)\n     }\n }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + PartialOrd> PartialOrd for Arc<T> {\n     /// Partial comparison for two `Arc`s."}]}