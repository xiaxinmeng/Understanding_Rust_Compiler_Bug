{"sha": "566012ebf2a0a3af5edd2fe5faaec54c8d197c59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NjAxMmViZjJhMGEzYWY1ZWRkMmZlNWZhYWVjNTRjOGQxOTdjNTk=", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-05-12T09:45:23Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-05-12T11:57:30Z"}, "message": "Update wrong-number-of-args test to cover more edge cases", "tree": {"sha": "d714b390c4dce574a80d7c1c66fd009a24f0742a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d714b390c4dce574a80d7c1c66fd009a24f0742a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/566012ebf2a0a3af5edd2fe5faaec54c8d197c59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/566012ebf2a0a3af5edd2fe5faaec54c8d197c59", "html_url": "https://github.com/rust-lang/rust/commit/566012ebf2a0a3af5edd2fe5faaec54c8d197c59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/566012ebf2a0a3af5edd2fe5faaec54c8d197c59/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cedccbdc83e6653ce550c24a04957eeee0b32e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cedccbdc83e6653ce550c24a04957eeee0b32e1", "html_url": "https://github.com/rust-lang/rust/commit/2cedccbdc83e6653ce550c24a04957eeee0b32e1"}], "stats": {"total": 182, "additions": 182, "deletions": 0}, "files": [{"sha": "ec2ed9926e2aa04539316be7f78ad7d2308783bd", "filename": "src/test/ui/generics/wrong-number-of-args.rs", "status": "modified", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/566012ebf2a0a3af5edd2fe5faaec54c8d197c59/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/566012ebf2a0a3af5edd2fe5faaec54c8d197c59/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.rs?ref=566012ebf2a0a3af5edd2fe5faaec54c8d197c59", "patch": "@@ -36,6 +36,10 @@ mod type_and_type {\n     type D = Ty<usize, String, char>;\n     //~^ ERROR this struct takes 2 generic arguments but 3 generic arguments\n     //~| HELP remove this\n+\n+    type E = Ty<>;\n+    //~^ ERROR this struct takes 2 generic arguments but 0 generic arguments were supplied\n+    //~| HELP add missing\n }\n \n mod lifetime_and_type {\n@@ -56,6 +60,12 @@ mod lifetime_and_type {\n     //~| HELP consider introducing\n \n     type D = Ty<'static, usize>;\n+\n+    type E = Ty<>;\n+    //~^ ERROR this struct takes 1 generic argument but 0 generic arguments\n+    //~| ERROR missing lifetime specifier\n+    //~| HELP consider introducing\n+    //~| HELP add missing\n }\n \n mod type_and_type_and_type {\n@@ -76,6 +86,10 @@ mod type_and_type_and_type {\n     type E = Ty<usize, String, char, f64>;\n     //~^ ERROR this struct takes at most 3\n     //~| HELP remove\n+\n+    type F = Ty<>;\n+    //~^ ERROR this struct takes at least 2 generic arguments but 0 generic arguments\n+    //~| HELP add missing\n }\n \n // Traits have an implicit `Self` type - these tests ensure we don't accidentally return it\n@@ -112,6 +126,166 @@ mod r#trait {\n     type E = Box<dyn GenericType<String, usize>>;\n     //~^ ERROR this trait takes 1 generic argument but 2 generic arguments\n     //~| HELP remove\n+\n+    type F = Box<dyn GenericLifetime<>>;\n+    //~^ ERROR missing lifetime specifier\n+    //~| HELP consider introducing\n+\n+    type G = Box<dyn GenericType<>>;\n+    //~^ ERROR this trait takes 1 generic argument but 0 generic arguments\n+    //~| HELP add missing\n+}\n+\n+mod associated_item {\n+    mod non_generic {\n+        trait NonGenericAT {\n+            type AssocTy;\n+        }\n+\n+        type A = Box<dyn NonGenericAT<usize, AssocTy=()>>;\n+        //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n+        //~| HELP remove\n+    }\n+\n+    mod lifetime {\n+        trait GenericLifetimeAT<'a> {\n+            type AssocTy;\n+        }\n+\n+        type A = Box<dyn GenericLifetimeAT<AssocTy=()>>;\n+        //~^ ERROR missing lifetime specifier\n+        //~| HELP consider introducing\n+\n+        type B = Box<dyn GenericLifetimeAT<'static, 'static, AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+        //~| HELP remove\n+\n+        type C = Box<dyn GenericLifetimeAT<(), AssocTy=()>>;\n+        //~^ ERROR missing lifetime specifier\n+        //~| HELP consider introducing\n+        //~| ERROR this trait takes 0 generic arguments but 1 generic argument\n+        //~| HELP remove\n+    }\n+\n+    mod r#type {\n+        trait GenericTypeAT<A> {\n+            type AssocTy;\n+        }\n+\n+        type A = Box<dyn GenericTypeAT<AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~| HELP add missing\n+\n+        type B = Box<dyn GenericTypeAT<(), (), AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 generic argument but 2 generic arguments\n+        //~| HELP remove\n+\n+        type C = Box<dyn GenericTypeAT<'static, AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~| HELP add missing\n+        //~| ERROR this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+        //~| HELP remove\n+    }\n+\n+    mod lifetime_and_type {\n+        trait GenericLifetimeTypeAT<'a, A> {\n+            type AssocTy;\n+        }\n+\n+        type A = Box<dyn GenericLifetimeTypeAT<AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~| HELP add missing\n+        //~| ERROR missing lifetime specifier\n+        //~| HELP consider introducing\n+\n+        type B = Box<dyn GenericLifetimeTypeAT<'static, AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 generic argument but 0 generic arguments were supplied\n+        //~| HELP add missing\n+\n+        type C = Box<dyn GenericLifetimeTypeAT<'static, 'static, AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+        //~| HELP remove\n+        //~| ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~| HELP add missing\n+\n+        type D = Box<dyn GenericLifetimeTypeAT<(), AssocTy=()>>;\n+        //~^ ERROR missing lifetime specifier\n+        //~| HELP consider introducing\n+\n+        type E = Box<dyn GenericLifetimeTypeAT<(), (), AssocTy=()>>;\n+        //~^ ERROR missing lifetime specifier\n+        //~| HELP consider introducing\n+        //~| ERROR this trait takes 1 generic argument but 2 generic arguments\n+        //~| HELP remove\n+\n+        type F = Box<dyn GenericLifetimeTypeAT<'static, 'static, (), AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+        //~| HELP remove\n+\n+        type G = Box<dyn GenericLifetimeTypeAT<'static, (), (), AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 generic argument but 2 generic arguments\n+        //~| HELP remove\n+\n+        type H = Box<dyn GenericLifetimeTypeAT<'static, 'static, (), (), AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+        //~| HELP remove\n+        //~| ERROR this trait takes 1 generic argument but 2 generic arguments\n+        //~| HELP remove\n+    }\n+\n+    mod type_and_type {\n+        trait GenericTypeTypeAT<A, B> {\n+            type AssocTy;\n+        }\n+\n+        type A = Box<dyn GenericTypeTypeAT<AssocTy=()>>;\n+        //~^ ERROR this trait takes 2 generic arguments but 0 generic arguments\n+        //~| HELP add missing\n+\n+        type B = Box<dyn GenericTypeTypeAT<(), AssocTy=()>>;\n+        //~^ ERROR this trait takes 2 generic arguments but 1 generic argument\n+        //~| HELP add missing\n+\n+        type C = Box<dyn GenericTypeTypeAT<(), (), (), AssocTy=()>>;\n+        //~^ ERROR this trait takes 2 generic arguments but 3 generic arguments\n+        //~| HELP remove\n+    }\n+\n+    mod lifetime_and_lifetime {\n+        trait GenericLifetimeLifetimeAT<'a, 'b> {\n+            type AssocTy;\n+        }\n+\n+        type A = Box<dyn GenericLifetimeLifetimeAT<AssocTy=()>>;\n+        //~^ ERROR missing lifetime specifier\n+        //~| HELP consider introducing\n+\n+        type B = Box<dyn GenericLifetimeLifetimeAT<'static, AssocTy=()>>;\n+        //~^ ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+        //~| HELP add missing lifetime argument\n+    }\n+\n+    mod lifetime_and_lifetime_and_type {\n+        trait GenericLifetimeLifetimeTypeAT<'a, 'b, A> {\n+            type AssocTy;\n+        }\n+\n+        type A = Box<dyn GenericLifetimeLifetimeTypeAT<AssocTy=()>>;\n+        //~^ ERROR missing lifetime specifier\n+        //~| HELP consider introducing\n+        //~| ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~| HELP add missing\n+\n+        type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, AssocTy=()>>;\n+        //~^ ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+        //~| HELP add missing lifetime argument\n+        //~| ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~| HELP add missing\n+\n+        type C = Box<dyn GenericLifetimeLifetimeTypeAT<'static, (), AssocTy=()>>;\n+        //~^ ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+        //~| HELP add missing lifetime argument\n+    }\n }\n \n mod stdlib {\n@@ -135,6 +309,10 @@ mod stdlib {\n         type D = HashMap<usize, String, char, f64>;\n         //~^ ERROR this struct takes at most 3\n         //~| HELP remove this\n+\n+        type E = HashMap<>;\n+        //~^ ERROR this struct takes at least 2 generic arguments but 0 generic arguments\n+        //~| HELP add missing\n     }\n \n     mod result {\n@@ -155,6 +333,10 @@ mod stdlib {\n         type D = Result<usize, String, char>;\n         //~^ ERROR this enum takes 2 generic arguments but 3 generic arguments\n         //~| HELP remove\n+\n+        type E = Result<>;\n+        //~^ ERROR this enum takes 2 generic arguments but 0 generic arguments\n+        //~| HELP add missing\n     }\n }\n "}]}