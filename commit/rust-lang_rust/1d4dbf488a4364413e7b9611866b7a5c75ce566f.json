{"sha": "1d4dbf488a4364413e7b9611866b7a5c75ce566f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNGRiZjQ4OGE0MzY0NDEzZTdiOTYxMTg2NmI3YTVjNzVjZTU2NmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-11T20:14:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-11T20:14:39Z"}, "message": "Auto merge of #51442 - tinaun:more-future-impls, r=cramertj\n\n[futures] add a few blanket impls to std\n\nthese were defined in the futures crate, but with the core definitions moving to std these would need to move too.", "tree": {"sha": "de372b0f4be645ac0087448bffc272d09a807878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de372b0f4be645ac0087448bffc272d09a807878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d4dbf488a4364413e7b9611866b7a5c75ce566f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d4dbf488a4364413e7b9611866b7a5c75ce566f", "html_url": "https://github.com/rust-lang/rust/commit/1d4dbf488a4364413e7b9611866b7a5c75ce566f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d4dbf488a4364413e7b9611866b7a5c75ce566f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b7c9e756e8bee2efd4f6929c79f9e3ed9115689", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7c9e756e8bee2efd4f6929c79f9e3ed9115689", "html_url": "https://github.com/rust-lang/rust/commit/0b7c9e756e8bee2efd4f6929c79f9e3ed9115689"}, {"sha": "fb507cadf32e1eacccc07c1c3511636fd6378f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb507cadf32e1eacccc07c1c3511636fd6378f7b", "html_url": "https://github.com/rust-lang/rust/commit/fb507cadf32e1eacccc07c1c3511636fd6378f7b"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "c794fb8220a9ef351e77041c2a0c72d561de1e34", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d4dbf488a4364413e7b9611866b7a5c75ce566f/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4dbf488a4364413e7b9611866b7a5c75ce566f/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=1d4dbf488a4364413e7b9611866b7a5c75ce566f", "patch": "@@ -914,6 +914,24 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinBox<U>> for PinBox<T> {}\n #[unstable(feature = \"pin\", issue = \"49150\")]\n impl<T: ?Sized> Unpin for PinBox<T> {}\n \n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+impl<'a, F: ?Sized + Future + Unpin> Future for Box<F> {\n+    type Output = F::Output;\n+\n+    fn poll(mut self: PinMut<Self>, cx: &mut Context) -> Poll<Self::Output> {\n+        PinMut::new(&mut **self).poll(cx)\n+    }\n+}\n+\n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+impl<'a, F: ?Sized + Future> Future for PinBox<F> {\n+    type Output = F::Output;\n+\n+    fn poll(mut self: PinMut<Self>, cx: &mut Context) -> Poll<Self::Output> {\n+        self.as_pin_mut().poll(cx)\n+    }\n+}\n+\n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n unsafe impl<F: Future<Output = ()> + Send + 'static> UnsafePoll for PinBox<F> {\n     fn into_raw(self) -> *mut () {"}, {"sha": "a1139189c9a4446859fd32ffc78781e354960709", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d4dbf488a4364413e7b9611866b7a5c75ce566f/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4dbf488a4364413e7b9611866b7a5c75ce566f/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=1d4dbf488a4364413e7b9611866b7a5c75ce566f", "patch": "@@ -80,6 +80,7 @@\n #![cfg_attr(test, feature(rand, test))]\n #![feature(allocator_api)]\n #![feature(allow_internal_unstable)]\n+#![feature(arbitrary_self_types)]\n #![feature(ascii_ctype)]\n #![feature(box_into_raw_non_null)]\n #![feature(box_patterns)]"}, {"sha": "a8c8f69411ea6d705e921356da21bb38186f1c7a", "filename": "src/libcore/future.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1d4dbf488a4364413e7b9611866b7a5c75ce566f/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4dbf488a4364413e7b9611866b7a5c75ce566f/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=1d4dbf488a4364413e7b9611866b7a5c75ce566f", "patch": "@@ -15,6 +15,7 @@\n //! Asynchronous values.\n \n use mem::PinMut;\n+use marker::Unpin;\n use task::{self, Poll};\n \n /// A future represents an asychronous computation.\n@@ -91,3 +92,19 @@ pub trait Future {\n     /// about the behavior of `poll` after a future has completed.\n     fn poll(self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output>;\n }\n+\n+impl<'a, F: ?Sized + Future + Unpin> Future for &'a mut F {\n+    type Output = F::Output;\n+\n+    fn poll(mut self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n+        F::poll(PinMut::new(&mut **self), cx)\n+    }\n+}\n+\n+impl<'a, F: ?Sized + Future> Future for PinMut<'a, F> {\n+    type Output = F::Output;\n+\n+    fn poll(mut self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n+        F::poll((*self).reborrow(), cx)\n+    }\n+}"}, {"sha": "bef6d3677d0a37232e7b27310340d1c45caaae80", "filename": "src/libcore/task.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1d4dbf488a4364413e7b9611866b7a5c75ce566f/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4dbf488a4364413e7b9611866b7a5c75ce566f/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=1d4dbf488a4364413e7b9611866b7a5c75ce566f", "patch": "@@ -32,6 +32,61 @@ pub enum Poll<T> {\n     Pending,\n }\n \n+impl<T> Poll<T> {\n+    /// Change the ready value of this `Poll` with the closure provided\n+    pub fn map<U, F>(self, f: F) -> Poll<U>\n+        where F: FnOnce(T) -> U\n+    {\n+        match self {\n+            Poll::Ready(t) => Poll::Ready(f(t)),\n+            Poll::Pending => Poll::Pending,\n+        }\n+    }\n+\n+    /// Returns whether this is `Poll::Ready`\n+    pub fn is_ready(&self) -> bool {\n+        match *self {\n+            Poll::Ready(_) => true,\n+            Poll::Pending => false,\n+        }\n+    }\n+\n+    /// Returns whether this is `Poll::Pending`\n+    pub fn is_pending(&self) -> bool {\n+        !self.is_ready()\n+    }\n+}\n+\n+impl<T, E> Poll<Result<T, E>> {\n+    /// Change the success value of this `Poll` with the closure provided\n+    pub fn map_ok<U, F>(self, f: F) -> Poll<Result<U, E>>\n+        where F: FnOnce(T) -> U\n+    {\n+        match self {\n+            Poll::Ready(Ok(t)) => Poll::Ready(Ok(f(t))),\n+            Poll::Ready(Err(e)) => Poll::Ready(Err(e)),\n+            Poll::Pending => Poll::Pending,\n+        }\n+    }\n+\n+    /// Change the error value of this `Poll` with the closure provided\n+    pub fn map_err<U, F>(self, f: F) -> Poll<Result<T, U>>\n+        where F: FnOnce(E) -> U\n+    {\n+        match self {\n+            Poll::Ready(Ok(t)) => Poll::Ready(Ok(t)),\n+            Poll::Ready(Err(e)) => Poll::Ready(Err(f(e))),\n+            Poll::Pending => Poll::Pending,\n+        }\n+    }\n+}\n+\n+impl<T> From<T> for Poll<T> {\n+    fn from(t: T) -> Poll<T> {\n+        Poll::Ready(t)\n+    }\n+}\n+\n /// A `Waker` is a handle for waking up a task by notifying its executor that it\n /// is ready to be run.\n ///"}, {"sha": "144977460b61b4d5e846d1408ab380b34a04f4b3", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d4dbf488a4364413e7b9611866b7a5c75ce566f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4dbf488a4364413e7b9611866b7a5c75ce566f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=1d4dbf488a4364413e7b9611866b7a5c75ce566f", "patch": "@@ -239,6 +239,7 @@\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n #![feature(align_offset)]\n+#![feature(arbitrary_self_types)]\n #![feature(array_error_internals)]\n #![feature(ascii_ctype)]\n #![feature(asm)]"}, {"sha": "4b5a063ea73aa2a5b823be0667a874022da31ef6", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d4dbf488a4364413e7b9611866b7a5c75ce566f/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4dbf488a4364413e7b9611866b7a5c75ce566f/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=1d4dbf488a4364413e7b9611866b7a5c75ce566f", "patch": "@@ -15,11 +15,14 @@\n use any::Any;\n use cell::UnsafeCell;\n use fmt;\n+use future::Future;\n+use mem::PinMut;\n use ops::{Deref, DerefMut};\n use panicking;\n use ptr::{Unique, NonNull};\n use rc::Rc;\n use sync::{Arc, Mutex, RwLock, atomic};\n+use task::{self, Poll};\n use thread::Result;\n \n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n@@ -315,6 +318,21 @@ impl<T: fmt::Debug> fmt::Debug for AssertUnwindSafe<T> {\n     }\n }\n \n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+impl<'a, F: Future> Future for AssertUnwindSafe<F> {\n+    type Output = F::Output;\n+\n+    fn poll(mut self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n+        unsafe {\n+            let pinned_field = PinMut::new_unchecked(\n+                &mut PinMut::get_mut(self.reborrow()).0\n+            );\n+\n+            pinned_field.poll(cx)\n+        }\n+    }\n+}\n+\n /// Invokes a closure, capturing the cause of an unwinding panic if one occurs.\n ///\n /// This function will return `Ok` with the closure's result if the closure"}]}