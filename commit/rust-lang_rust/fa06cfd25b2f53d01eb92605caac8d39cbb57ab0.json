{"sha": "fa06cfd25b2f53d01eb92605caac8d39cbb57ab0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMDZjZmQyNWIyZjUzZDAxZWI5MjYwNWNhYWM4ZDM5Y2JiNTdhYjA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-24T22:46:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-26T08:40:51Z"}, "message": "Move generics on QueryCache.", "tree": {"sha": "5a454818a7f204eb200c9b473cc55eb8c22d0f56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a454818a7f204eb200c9b473cc55eb8c22d0f56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0", "html_url": "https://github.com/rust-lang/rust/commit/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e8b59a2f4d006943424de9363421b7e2ed45e89", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e8b59a2f4d006943424de9363421b7e2ed45e89", "html_url": "https://github.com/rust-lang/rust/commit/0e8b59a2f4d006943424de9363421b7e2ed45e89"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "8e34aba8a9edd2bbf68342f4a77340ec38373ff6", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=fa06cfd25b2f53d01eb92605caac8d39cbb57ab0", "patch": "@@ -208,7 +208,7 @@ macro_rules! is_eval_always {\n \n macro_rules! query_storage {\n     (<$tcx:tt>[][$K:ty, $V:ty]) => {\n-        <<$K as Key>::CacheSelector as CacheSelector<TyCtxt<$tcx>, $K, $V>>::Cache\n+        <<$K as Key>::CacheSelector as CacheSelector<$K, $V>>::Cache\n     };\n     (<$tcx:tt>[storage($ty:ty) $($rest:tt)*][$K:ty, $V:ty]) => {\n         $ty"}, {"sha": "e0d3e764dad8396c99ee39760b2624af43b1ce07", "filename": "src/librustc/ty/query/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs?ref=fa06cfd25b2f53d01eb92605caac8d39cbb57ab0", "patch": "@@ -163,7 +163,7 @@ pub(super) fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n     query_state: &QueryState<TyCtxt<'tcx>, C>,\n     string_cache: &mut QueryKeyStringCache,\n ) where\n-    C: QueryCache<TyCtxt<'tcx>>,\n+    C: QueryCache,\n     C::Key: Debug + Clone,\n {\n     tcx.prof.with_profiler(|profiler| {"}, {"sha": "b496bf839ab9e70bcab14cba64c86b2d89e76da2", "filename": "src/librustc/ty/query/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0/src%2Flibrustc%2Fty%2Fquery%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0/src%2Flibrustc%2Fty%2Fquery%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fstats.rs?ref=fa06cfd25b2f53d01eb92605caac8d39cbb57ab0", "patch": "@@ -38,7 +38,7 @@ struct QueryStats {\n     local_def_id_keys: Option<usize>,\n }\n \n-fn stats<CTX: QueryContext, C: QueryCache<CTX>>(\n+fn stats<CTX: QueryContext, C: QueryCache>(\n     name: &'static str,\n     map: &QueryState<CTX, C>,\n ) -> QueryStats {"}, {"sha": "51bea58fd80d82d018301549de1a48b92de24b4b", "filename": "src/librustc_query_system/query/caches.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0/src%2Flibrustc_query_system%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0/src%2Flibrustc_query_system%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fcaches.rs?ref=fa06cfd25b2f53d01eb92605caac8d39cbb57ab0", "patch": "@@ -8,11 +8,11 @@ use std::default::Default;\n use std::hash::Hash;\n use std::marker::PhantomData;\n \n-pub trait CacheSelector<CTX: QueryContext, K: Hash, V> {\n-    type Cache: QueryCache<CTX, Key = K, Value = V>;\n+pub trait CacheSelector<K: Hash, V> {\n+    type Cache: QueryCache<Key = K, Value = V>;\n }\n \n-pub trait QueryCache<CTX: QueryContext>: Default {\n+pub trait QueryCache: Default {\n     type Key: Hash;\n     type Value;\n     type Sharded: Default;\n@@ -21,7 +21,7 @@ pub trait QueryCache<CTX: QueryContext>: Default {\n     /// It returns the shard index and a lock guard to the shard,\n     /// which will be used if the query is not in the cache and we need\n     /// to compute it.\n-    fn lookup<R, OnHit, OnMiss>(\n+    fn lookup<CTX: QueryContext, R, OnHit, OnMiss>(\n         &self,\n         state: &QueryState<CTX, Self>,\n         key: Self::Key,\n@@ -33,7 +33,7 @@ pub trait QueryCache<CTX: QueryContext>: Default {\n         OnHit: FnOnce(&Self::Value, DepNodeIndex) -> R,\n         OnMiss: FnOnce(Self::Key, QueryLookup<'_, CTX, Self::Key, Self::Sharded>) -> R;\n \n-    fn complete(\n+    fn complete<CTX: QueryContext>(\n         &self,\n         tcx: CTX,\n         lock_sharded_storage: &mut Self::Sharded,\n@@ -54,7 +54,7 @@ pub trait QueryCache<CTX: QueryContext>: Default {\n \n pub struct DefaultCacheSelector;\n \n-impl<CTX: QueryContext, K: Eq + Hash, V: Clone> CacheSelector<CTX, K, V> for DefaultCacheSelector {\n+impl<K: Eq + Hash, V: Clone> CacheSelector<K, V> for DefaultCacheSelector {\n     type Cache = DefaultCache<K, V>;\n }\n \n@@ -66,13 +66,13 @@ impl<K, V> Default for DefaultCache<K, V> {\n     }\n }\n \n-impl<CTX: QueryContext, K: Eq + Hash, V: Clone> QueryCache<CTX> for DefaultCache<K, V> {\n+impl<K: Eq + Hash, V: Clone> QueryCache for DefaultCache<K, V> {\n     type Key = K;\n     type Value = V;\n     type Sharded = FxHashMap<K, (V, DepNodeIndex)>;\n \n     #[inline(always)]\n-    fn lookup<R, OnHit, OnMiss>(\n+    fn lookup<CTX: QueryContext, R, OnHit, OnMiss>(\n         &self,\n         state: &QueryState<CTX, Self>,\n         key: K,\n@@ -92,7 +92,7 @@ impl<CTX: QueryContext, K: Eq + Hash, V: Clone> QueryCache<CTX> for DefaultCache\n     }\n \n     #[inline]\n-    fn complete(\n+    fn complete<CTX: QueryContext>(\n         &self,\n         _: CTX,\n         lock_sharded_storage: &mut Self::Sharded,"}, {"sha": "4800b66d88930db346483b474c9f5462e1418445", "filename": "src/librustc_query_system/query/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs?ref=fa06cfd25b2f53d01eb92605caac8d39cbb57ab0", "patch": "@@ -63,7 +63,7 @@ pub trait QueryAccessors<CTX: QueryContext>: QueryConfig<CTX> {\n     const EVAL_ALWAYS: bool;\n     const DEP_KIND: CTX::DepKind;\n \n-    type Cache: QueryCache<CTX, Key = Self::Key, Value = Self::Value>;\n+    type Cache: QueryCache<Key = Self::Key, Value = Self::Value>;\n \n     // Don't use this method to access query results, instead use the methods on TyCtxt\n     fn query_state<'a>(tcx: CTX) -> &'a QueryState<CTX, Self::Cache>;"}, {"sha": "1bba4bd7e8816dbbf86c1df806adb080f1e0a15c", "filename": "src/librustc_query_system/query/plumbing.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa06cfd25b2f53d01eb92605caac8d39cbb57ab0/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs?ref=fa06cfd25b2f53d01eb92605caac8d39cbb57ab0", "patch": "@@ -42,14 +42,14 @@ impl<CTX: QueryContext, K, C: Default> Default for QueryStateShard<CTX, K, C> {\n     }\n }\n \n-pub struct QueryState<CTX: QueryContext, C: QueryCache<CTX>> {\n+pub struct QueryState<CTX: QueryContext, C: QueryCache> {\n     cache: C,\n     shards: Sharded<QueryStateShard<CTX, C::Key, C::Sharded>>,\n     #[cfg(debug_assertions)]\n     pub cache_hits: AtomicUsize,\n }\n \n-impl<CTX: QueryContext, C: QueryCache<CTX>> QueryState<CTX, C> {\n+impl<CTX: QueryContext, C: QueryCache> QueryState<CTX, C> {\n     pub(super) fn get_lookup<'tcx>(\n         &'tcx self,\n         key: &C::Key,\n@@ -77,7 +77,7 @@ enum QueryResult<CTX: QueryContext> {\n     Poisoned,\n }\n \n-impl<CTX: QueryContext, C: QueryCache<CTX>> QueryState<CTX, C> {\n+impl<CTX: QueryContext, C: QueryCache> QueryState<CTX, C> {\n     pub fn iter_results<R>(\n         &self,\n         f: impl for<'a> FnOnce(\n@@ -122,7 +122,7 @@ impl<CTX: QueryContext, C: QueryCache<CTX>> QueryState<CTX, C> {\n     }\n }\n \n-impl<CTX: QueryContext, C: QueryCache<CTX>> Default for QueryState<CTX, C> {\n+impl<CTX: QueryContext, C: QueryCache> Default for QueryState<CTX, C> {\n     fn default() -> QueryState<CTX, C> {\n         QueryState {\n             cache: C::default(),\n@@ -144,7 +144,7 @@ pub struct QueryLookup<'tcx, CTX: QueryContext, K, C> {\n /// This will poison the relevant query if dropped.\n struct JobOwner<'tcx, CTX: QueryContext, C>\n where\n-    C: QueryCache<CTX>,\n+    C: QueryCache,\n     C::Key: Eq + Hash + Clone + Debug,\n     C::Value: Clone,\n {\n@@ -155,7 +155,7 @@ where\n \n impl<'tcx, CTX: QueryContext, C> JobOwner<'tcx, CTX, C>\n where\n-    C: QueryCache<CTX>,\n+    C: QueryCache,\n     C::Key: Eq + Hash + Clone + Debug,\n     C::Value: Clone,\n {\n@@ -292,7 +292,7 @@ where\n     (result, diagnostics.into_inner())\n }\n \n-impl<'tcx, CTX: QueryContext, C: QueryCache<CTX>> Drop for JobOwner<'tcx, CTX, C>\n+impl<'tcx, CTX: QueryContext, C: QueryCache> Drop for JobOwner<'tcx, CTX, C>\n where\n     C::Key: Eq + Hash + Clone + Debug,\n     C::Value: Clone,\n@@ -326,7 +326,7 @@ pub struct CycleError<Q> {\n }\n \n /// The result of `try_start`.\n-enum TryGetJob<'tcx, CTX: QueryContext, C: QueryCache<CTX>>\n+enum TryGetJob<'tcx, CTX: QueryContext, C: QueryCache>\n where\n     C::Key: Eq + Hash + Clone + Debug,\n     C::Value: Clone,\n@@ -358,7 +358,7 @@ fn try_get_cached<CTX, C, R, OnHit, OnMiss>(\n     on_miss: OnMiss,\n ) -> R\n where\n-    C: QueryCache<CTX>,\n+    C: QueryCache,\n     CTX: QueryContext,\n     OnHit: FnOnce(&C::Value, DepNodeIndex) -> R,\n     OnMiss: FnOnce(C::Key, QueryLookup<'_, CTX, C::Key, C::Sharded>) -> R,\n@@ -385,7 +385,7 @@ fn try_execute_query<Q, CTX>(\n     tcx: CTX,\n     span: Span,\n     key: Q::Key,\n-    lookup: QueryLookup<'_, CTX, Q::Key, <Q::Cache as QueryCache<CTX>>::Sharded>,\n+    lookup: QueryLookup<'_, CTX, Q::Key, <Q::Cache as QueryCache>::Sharded>,\n ) -> Q::Value\n where\n     Q: QueryDescription<CTX>,"}]}