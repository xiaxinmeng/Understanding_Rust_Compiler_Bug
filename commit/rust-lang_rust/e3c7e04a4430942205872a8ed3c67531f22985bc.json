{"sha": "e3c7e04a4430942205872a8ed3c67531f22985bc", "node_id": "C_kwDOAAsO6NoAKGUzYzdlMDRhNDQzMDk0MjIwNTg3MmE4ZWQzYzY3NTMxZjIyOTg1YmM", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2022-07-25T20:36:03Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2022-08-03T10:17:23Z"}, "message": "Warn about dead tuple struct fields", "tree": {"sha": "895cfbea996b14bae6ceb61d30e55d1c539cdc0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/895cfbea996b14bae6ceb61d30e55d1c539cdc0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3c7e04a4430942205872a8ed3c67531f22985bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c7e04a4430942205872a8ed3c67531f22985bc", "html_url": "https://github.com/rust-lang/rust/commit/e3c7e04a4430942205872a8ed3c67531f22985bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3c7e04a4430942205872a8ed3c67531f22985bc/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e141246cbbce2a6001f3181d3d0f661bbfd9c7ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e141246cbbce2a6001f3181d3d0f661bbfd9c7ea", "html_url": "https://github.com/rust-lang/rust/commit/e141246cbbce2a6001f3181d3d0f661bbfd9c7ea"}], "stats": {"total": 697, "additions": 451, "deletions": 246}, "files": [{"sha": "65a0f66645befec023eb9de8fd11e6a373033072", "filename": "compiler/rustc_apfloat/src/ppc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/compiler%2Frustc_apfloat%2Fsrc%2Fppc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/compiler%2Frustc_apfloat%2Fsrc%2Fppc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Fppc.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -30,7 +30,7 @@ pub type DoubleDouble = DoubleFloat<ieee::Double>;\n // FIXME: Implement all operations in DoubleDouble, and delete these\n // semantics.\n // FIXME(eddyb) This shouldn't need to be `pub`, it's only used in bounds.\n-pub struct FallbackS<F>(F);\n+pub struct FallbackS<F>(#[allow(unused)] F);\n type Fallback<F> = ieee::IeeeFloat<FallbackS<F>>;\n impl<F: Float> ieee::Semantics for FallbackS<F> {\n     // Forbid any conversion to/from bits.\n@@ -45,7 +45,7 @@ impl<F: Float> ieee::Semantics for FallbackS<F> {\n // truncate the mantissa. The result of that second conversion\n // may be inexact, but should never underflow.\n // FIXME(eddyb) This shouldn't need to be `pub`, it's only used in bounds.\n-pub struct FallbackExtendedS<F>(F);\n+pub struct FallbackExtendedS<F>(#[allow(unused)] F);\n type FallbackExtended<F> = ieee::IeeeFloat<FallbackExtendedS<F>>;\n impl<F: Float> ieee::Semantics for FallbackExtendedS<F> {\n     // Forbid any conversion to/from bits."}, {"sha": "f00165cd3b370c2637906c6023ffec452bb04be8", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -630,6 +630,32 @@ declare_lint! {\n     \"detects attributes that were not used by the compiler\"\n }\n \n+declare_lint! {\n+    /// The `unused_tuple_struct_fields` lint detects fields of tuple structs\n+    /// that are never read.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```\n+    /// #[warn(unused_tuple_struct_fields)]\n+    /// struct S(i32, i32, i32);\n+    /// let s = S(1, 2, 3);\n+    /// let _ = (s.0, s.2);\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Tuple struct fields that are never read anywhere may indicate a\n+    /// mistake or unfinished code. To silence this warning, consider\n+    /// removing the unused field(s) or, to preserve the numbering of the\n+    /// remaining fields, change the unused field(s) to have unit type.\n+    pub UNUSED_TUPLE_STRUCT_FIELDS,\n+    Allow,\n+    \"detects tuple struct fields that are never read\"\n+}\n+\n declare_lint! {\n     /// The `unreachable_code` lint detects unreachable code paths.\n     ///\n@@ -3281,6 +3307,7 @@ declare_lint_pass! {\n         UNSUPPORTED_CALLING_CONVENTIONS,\n         BREAK_WITH_LABEL_AND_LOOP,\n         UNUSED_ATTRIBUTES,\n+        UNUSED_TUPLE_STRUCT_FIELDS,\n         NON_EXHAUSTIVE_OMITTED_PATTERNS,\n         TEXT_DIRECTION_CODEPOINT_IN_COMMENT,\n         DEREF_INTO_DYN_SUPERTRAIT,"}, {"sha": "e8de412aff61ae2852c4d42f1ebfe4672bc2cd3e", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -53,7 +53,7 @@ pub(crate) fn target_from_impl_item<'tcx>(\n #[derive(Clone, Copy)]\n enum ItemLike<'tcx> {\n     Item(&'tcx Item<'tcx>),\n-    ForeignItem(&'tcx ForeignItem<'tcx>),\n+    ForeignItem,\n }\n \n struct CheckAttrVisitor<'tcx> {\n@@ -1995,12 +1995,7 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n     fn visit_foreign_item(&mut self, f_item: &'tcx ForeignItem<'tcx>) {\n         let target = Target::from_foreign_item(f_item);\n-        self.check_attributes(\n-            f_item.hir_id(),\n-            f_item.span,\n-            target,\n-            Some(ItemLike::ForeignItem(f_item)),\n-        );\n+        self.check_attributes(f_item.hir_id(), f_item.span, target, Some(ItemLike::ForeignItem));\n         intravisit::walk_foreign_item(self, f_item)\n     }\n "}, {"sha": "1e2fbeb384ceee14a8d36070a17788e4bc29fef7", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 111, "deletions": 18, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -4,7 +4,7 @@\n \n use itertools::Itertools;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, MultiSpan};\n+use rustc_errors::{pluralize, Applicability, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -42,6 +42,7 @@ struct MarkSymbolVisitor<'tcx> {\n     maybe_typeck_results: Option<&'tcx ty::TypeckResults<'tcx>>,\n     live_symbols: FxHashSet<LocalDefId>,\n     repr_has_repr_c: bool,\n+    repr_has_repr_simd: bool,\n     in_pat: bool,\n     ignore_variant_stack: Vec<DefId>,\n     // maps from tuple struct constructors to tuple struct items\n@@ -220,6 +221,32 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         }\n     }\n \n+    fn handle_tuple_field_pattern_match(\n+        &mut self,\n+        lhs: &hir::Pat<'_>,\n+        res: Res,\n+        pats: &[hir::Pat<'_>],\n+        dotdot: Option<usize>,\n+    ) {\n+        let variant = match self.typeck_results().node_type(lhs.hir_id).kind() {\n+            ty::Adt(adt, _) => adt.variant_of_res(res),\n+            _ => span_bug!(lhs.span, \"non-ADT in tuple struct pattern\"),\n+        };\n+        let first_n = pats.iter().enumerate().take(dotdot.unwrap_or(pats.len()));\n+        let missing = variant.fields.len() - pats.len();\n+        let last_n = pats\n+            .iter()\n+            .enumerate()\n+            .skip(dotdot.unwrap_or(pats.len()))\n+            .map(|(idx, pat)| (idx + missing, pat));\n+        for (idx, pat) in first_n.chain(last_n) {\n+            if let PatKind::Wild = pat.kind {\n+                continue;\n+            }\n+            self.insert_def_id(variant.fields[idx].did);\n+        }\n+    }\n+\n     fn mark_live_symbols(&mut self) {\n         let mut scanned = FxHashSet::default();\n         while let Some(id) = self.worklist.pop() {\n@@ -274,12 +301,15 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         }\n \n         let had_repr_c = self.repr_has_repr_c;\n+        let had_repr_simd = self.repr_has_repr_simd;\n         self.repr_has_repr_c = false;\n+        self.repr_has_repr_simd = false;\n         match node {\n             Node::Item(item) => match item.kind {\n                 hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {\n                     let def = self.tcx.adt_def(item.def_id);\n                     self.repr_has_repr_c = def.repr().c();\n+                    self.repr_has_repr_simd = def.repr().simd();\n \n                     intravisit::walk_item(self, &item)\n                 }\n@@ -315,6 +345,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n             }\n             _ => {}\n         }\n+        self.repr_has_repr_simd = had_repr_simd;\n         self.repr_has_repr_c = had_repr_c;\n     }\n \n@@ -347,9 +378,10 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n     ) {\n         let tcx = self.tcx;\n         let has_repr_c = self.repr_has_repr_c;\n+        let has_repr_simd = self.repr_has_repr_simd;\n         let live_fields = def.fields().iter().filter_map(|f| {\n             let def_id = tcx.hir().local_def_id(f.hir_id);\n-            if has_repr_c {\n+            if has_repr_c || (f.is_positional() && has_repr_simd) {\n                 return Some(def_id);\n             }\n             if !tcx.visibility(f.hir_id.owner).is_public() {\n@@ -408,6 +440,10 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n                 let res = self.typeck_results().qpath_res(qpath, pat.hir_id);\n                 self.handle_res(res);\n             }\n+            PatKind::TupleStruct(ref qpath, ref fields, dotdot) => {\n+                let res = self.typeck_results().qpath_res(qpath, pat.hir_id);\n+                self.handle_tuple_field_pattern_match(pat, res, fields, dotdot);\n+            }\n             _ => (),\n         }\n \n@@ -440,7 +476,11 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n     }\n }\n \n-fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n+fn has_allow_dead_code_or_lang_attr_helper(\n+    tcx: TyCtxt<'_>,\n+    id: hir::HirId,\n+    lint: &'static lint::Lint,\n+) -> bool {\n     let attrs = tcx.hir().attrs(id);\n     if tcx.sess.contains_name(attrs, sym::lang) {\n         return true;\n@@ -470,7 +510,11 @@ fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n         }\n     }\n \n-    tcx.lint_level_at_node(lint::builtin::DEAD_CODE, id).0 == lint::Allow\n+    tcx.lint_level_at_node(lint, id).0 == lint::Allow\n+}\n+\n+fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n+    has_allow_dead_code_or_lang_attr_helper(tcx, id, lint::builtin::DEAD_CODE)\n }\n \n // These check_* functions seeds items that\n@@ -623,6 +667,7 @@ fn live_symbols_and_ignored_derived_traits<'tcx>(\n         maybe_typeck_results: None,\n         live_symbols: Default::default(),\n         repr_has_repr_c: false,\n+        repr_has_repr_simd: false,\n         in_pat: false,\n         ignore_variant_stack: vec![],\n         struct_constructors,\n@@ -644,32 +689,46 @@ struct DeadVisitor<'tcx> {\n     ignored_derived_traits: &'tcx FxHashMap<LocalDefId, Vec<(DefId, DefId)>>,\n }\n \n+enum ShouldWarnAboutField {\n+    Yes(bool), // positional?\n+    No,\n+}\n+\n impl<'tcx> DeadVisitor<'tcx> {\n-    fn should_warn_about_field(&mut self, field: &ty::FieldDef) -> bool {\n+    fn should_warn_about_field(&mut self, field: &ty::FieldDef) -> ShouldWarnAboutField {\n         if self.live_symbols.contains(&field.did.expect_local()) {\n-            return false;\n+            return ShouldWarnAboutField::No;\n+        }\n+        let field_type = self.tcx.type_of(field.did);\n+        if field_type.is_phantom_data() {\n+            return ShouldWarnAboutField::No;\n         }\n         let is_positional = field.name.as_str().starts_with(|c: char| c.is_ascii_digit());\n-        if is_positional {\n-            return false;\n+        if is_positional\n+            && self\n+                .tcx\n+                .layout_of(self.tcx.param_env(field.did).and(field_type))\n+                .map_or(true, |layout| layout.is_zst())\n+        {\n+            return ShouldWarnAboutField::No;\n         }\n-        let field_type = self.tcx.type_of(field.did);\n-        !field_type.is_phantom_data()\n+        ShouldWarnAboutField::Yes(is_positional)\n     }\n \n     fn warn_multiple_dead_codes(\n         &self,\n         dead_codes: &[LocalDefId],\n         participle: &str,\n         parent_item: Option<LocalDefId>,\n+        is_positional: bool,\n     ) {\n         if let Some(&first_id) = dead_codes.first() {\n             let tcx = self.tcx;\n             let names: Vec<_> = dead_codes\n                 .iter()\n                 .map(|&def_id| tcx.item_name(def_id.to_def_id()).to_string())\n                 .collect();\n-            let spans = dead_codes\n+            let spans: Vec<_> = dead_codes\n                 .iter()\n                 .map(|&def_id| match tcx.def_ident_span(def_id) {\n                     Some(s) => s.with_ctxt(tcx.def_span(def_id).ctxt()),\n@@ -678,9 +737,13 @@ impl<'tcx> DeadVisitor<'tcx> {\n                 .collect();\n \n             tcx.struct_span_lint_hir(\n-                lint::builtin::DEAD_CODE,\n+                if is_positional {\n+                    lint::builtin::UNUSED_TUPLE_STRUCT_FIELDS\n+                } else {\n+                    lint::builtin::DEAD_CODE\n+                },\n                 tcx.hir().local_def_id_to_hir_id(first_id),\n-                MultiSpan::from_spans(spans),\n+                MultiSpan::from_spans(spans.clone()),\n                 |lint| {\n                     let descr = tcx.def_kind(first_id).descr(first_id.to_def_id());\n                     let span_len = dead_codes.len();\n@@ -702,6 +765,21 @@ impl<'tcx> DeadVisitor<'tcx> {\n                         are = pluralize!(\"is\", span_len),\n                     ));\n \n+                    if is_positional {\n+                        err.multipart_suggestion(\n+                            &format!(\n+                                \"consider changing the field{s} to be of unit type to \\\n+                                      suppress this warning while preserving the field \\\n+                                      numbering, or remove the field{s}\",\n+                                s = pluralize!(span_len)\n+                            ),\n+                            spans.iter().map(|sp| (*sp, \"()\".to_string())).collect(),\n+                            // \"HasPlaceholders\" because applying this fix by itself isn't\n+                            // enough: All constructor calls have to be adjusted as well\n+                            Applicability::HasPlaceholders,\n+                        );\n+                    }\n+\n                     if let Some(parent_item) = parent_item {\n                         let parent_descr = tcx.def_kind(parent_item).descr(parent_item.to_def_id());\n                         err.span_label(\n@@ -743,6 +821,7 @@ impl<'tcx> DeadVisitor<'tcx> {\n         def_id: LocalDefId,\n         participle: &str,\n         dead_codes: Vec<DeadVariant>,\n+        is_positional: bool,\n     ) {\n         let mut dead_codes = dead_codes\n             .iter()\n@@ -758,12 +837,13 @@ impl<'tcx> DeadVisitor<'tcx> {\n                 &group.map(|v| v.def_id).collect::<Vec<_>>(),\n                 participle,\n                 Some(def_id),\n+                is_positional,\n             );\n         }\n     }\n \n     fn warn_dead_code(&mut self, id: LocalDefId, participle: &str) {\n-        self.warn_multiple_dead_codes(&[id], participle, None);\n+        self.warn_multiple_dead_codes(&[id], participle, None, false);\n     }\n \n     fn check_definition(&mut self, def_id: LocalDefId) {\n@@ -829,24 +909,37 @@ fn check_mod_deathness(tcx: TyCtxt<'_>, module: LocalDefId) {\n                     continue;\n                 }\n \n+                let mut is_positional = false;\n                 let dead_fields = variant\n                     .fields\n                     .iter()\n                     .filter_map(|field| {\n                         let def_id = field.did.expect_local();\n                         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-                        if visitor.should_warn_about_field(&field) {\n-                            let level = tcx.lint_level_at_node(lint::builtin::DEAD_CODE, hir_id).0;\n+                        if let ShouldWarnAboutField::Yes(is_pos) =\n+                            visitor.should_warn_about_field(&field)\n+                        {\n+                            let level = tcx\n+                                .lint_level_at_node(\n+                                    if is_pos {\n+                                        is_positional = true;\n+                                        lint::builtin::UNUSED_TUPLE_STRUCT_FIELDS\n+                                    } else {\n+                                        lint::builtin::DEAD_CODE\n+                                    },\n+                                    hir_id,\n+                                )\n+                                .0;\n                             Some(DeadVariant { def_id, name: field.name, level })\n                         } else {\n                             None\n                         }\n                     })\n                     .collect();\n-                visitor.warn_dead_fields_and_variants(def_id, \"read\", dead_fields)\n+                visitor.warn_dead_fields_and_variants(def_id, \"read\", dead_fields, is_positional)\n             }\n \n-            visitor.warn_dead_fields_and_variants(item.def_id, \"constructed\", dead_variants);\n+            visitor.warn_dead_fields_and_variants(item.def_id, \"constructed\", dead_variants, false);\n         }\n     }\n "}, {"sha": "6df4ff7e58bb2839493bbc39a29656ca26190210", "filename": "src/test/codegen-units/item-collection/generic-drop-glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -34,9 +34,9 @@ enum EnumNoDrop<T1, T2> {\n }\n \n \n-struct NonGenericNoDrop(i32);\n+struct NonGenericNoDrop(#[allow(unused_tuple_struct_fields)] i32);\n \n-struct NonGenericWithDrop(i32);\n+struct NonGenericWithDrop(#[allow(unused_tuple_struct_fields)] i32);\n //~ MONO_ITEM fn std::ptr::drop_in_place::<NonGenericWithDrop> - shim(Some(NonGenericWithDrop)) @@ generic_drop_glue-cgu.0[Internal]\n \n impl Drop for NonGenericWithDrop {"}, {"sha": "e286c800b7cae4c048253ee84d785a1235e78e25", "filename": "src/test/codegen-units/item-collection/transitive-drop-glue.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -6,9 +6,9 @@\n #![feature(start)]\n \n //~ MONO_ITEM fn std::ptr::drop_in_place::<Root> - shim(Some(Root)) @@ transitive_drop_glue-cgu.0[Internal]\n-struct Root(Intermediate);\n+struct Root(#[allow(unused_tuple_struct_fields)] Intermediate);\n //~ MONO_ITEM fn std::ptr::drop_in_place::<Intermediate> - shim(Some(Intermediate)) @@ transitive_drop_glue-cgu.0[Internal]\n-struct Intermediate(Leaf);\n+struct Intermediate(#[allow(unused_tuple_struct_fields)] Leaf);\n //~ MONO_ITEM fn std::ptr::drop_in_place::<Leaf> - shim(Some(Leaf)) @@ transitive_drop_glue-cgu.0[Internal]\n struct Leaf;\n \n@@ -17,9 +17,9 @@ impl Drop for Leaf {\n     fn drop(&mut self) {}\n }\n \n-struct RootGen<T>(IntermediateGen<T>);\n-struct IntermediateGen<T>(LeafGen<T>);\n-struct LeafGen<T>(T);\n+struct RootGen<T>(#[allow(unused_tuple_struct_fields)] IntermediateGen<T>);\n+struct IntermediateGen<T>(#[allow(unused_tuple_struct_fields)] LeafGen<T>);\n+struct LeafGen<T>(#[allow(unused_tuple_struct_fields)] T);\n \n impl<T> Drop for LeafGen<T> {\n     fn drop(&mut self) {}"}, {"sha": "111a7231209a15f41ed394937ac4d4e6fdf03a40", "filename": "src/test/codegen-units/item-collection/unsizing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -40,7 +40,7 @@ impl Trait for u32 {\n }\n \n #[derive(Clone, Copy)]\n-struct Wrapper<T: ?Sized>(*const T);\n+struct Wrapper<T: ?Sized>(#[allow(unused_tuple_struct_fields)] *const T);\n \n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Wrapper<U>> for Wrapper<T> {}\n "}, {"sha": "b072235b5bc5ad21f87ed52d5ca24bd4362ebd3e", "filename": "src/test/run-make-fulldeps/issues-41478-43796/a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Frun-make-fulldeps%2Fissues-41478-43796%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Frun-make-fulldeps%2Fissues-41478-43796%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissues-41478-43796%2Fa.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,5 +1,5 @@\n #![crate_type = \"lib\"]\n-pub struct V<S>(S);\n+pub struct V<S>(#[allow(unused_tuple_struct_fields)] S);\n pub trait An {\n     type U;\n }"}, {"sha": "9e490e27ad17df34a21c18ac29ceae61d154b9e6", "filename": "src/test/ui/align-with-extern-c-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Falign-with-extern-c-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Falign-with-extern-c-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falign-with-extern-c-fn.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -8,7 +8,7 @@\n #![feature(repr_align)]\n \n #[repr(align(16))]\n-pub struct A(i64);\n+pub struct A(#[allow(unused_tuple_struct_fields)] i64);\n \n #[allow(improper_ctypes_definitions)]\n pub extern \"C\" fn foo(x: A) {}"}, {"sha": "54b7c8bb9c6f81af6fa62276202c17c1c53e73de", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -92,7 +92,7 @@ fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n extern fn rust_eh_personality() {}\n \n #[derive(Debug)]\n-struct Page([[u64; 32]; 16]);\n+struct Page(#[allow(unused_tuple_struct_fields)] [[u64; 32]; 16]);\n \n #[start]\n pub fn main(_argc: isize, _argv: *const *const u8) -> isize {"}, {"sha": "ffa331a992c8b42265769f2763721fd1a9c498ff", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -79,7 +79,7 @@ fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n extern fn rust_eh_personality() {}\n \n #[derive(Debug)]\n-struct Page([[u64; 32]; 16]);\n+struct Page(#[allow(unused_tuple_struct_fields)] [[u64; 32]; 16]);\n \n #[start]\n pub fn main(_argc: isize, _argv: *const *const u8) -> isize {"}, {"sha": "c10f779b1f6172f3dd543756c99cf65c46ff3839", "filename": "src/test/ui/array-slice-vec/show-boxed-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Farray-slice-vec%2Fshow-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Farray-slice-vec%2Fshow-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fshow-boxed-slice.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #[derive(Debug)]\n-struct Foo(Box<[u8]>);\n+struct Foo(#[allow(unused_tuple_struct_fields)] Box<[u8]>);\n \n pub fn main() {\n     println!(\"{:?}\", Foo(Box::new([0, 1, 2])));"}, {"sha": "e7ead1045e6369682c5f1744ff40d72f7b72564e", "filename": "src/test/ui/associated-consts/associated-const-type-parameters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameters.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -17,7 +17,7 @@ impl Foo for Def {\n     const X: i32 = 97;\n }\n \n-struct Proxy<T>(T);\n+struct Proxy<T>(#[allow(unused_tuple_struct_fields)] T);\n \n impl<T: Foo> Foo for Proxy<T> {\n     const X: i32 = T::X;"}, {"sha": "193f2efe19929f0a6d15e7eae819ab5db28fec9d", "filename": "src/test/ui/associated-type-bounds/enum-bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fenum-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fenum-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fenum-bounds.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![feature(associated_type_bounds)]\n+#![allow(dead_code)]\n \n trait Tr1 { type As1; }\n trait Tr2 { type As2; }"}, {"sha": "45df3ac20c2ea8350cedee545f860adfa6d136bd", "filename": "src/test/ui/associated-types/associated-types-method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-method.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -5,6 +5,7 @@\n trait Device {\n     type Resources;\n }\n+#[allow(unused_tuple_struct_fields)]\n struct Foo<D, R>(D, R);\n \n trait Tr {"}, {"sha": "8612911d8f809a78a29452333ee2b7db28684801", "filename": "src/test/ui/associated-types/associated-types-struct-field-numbered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-struct-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-struct-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-struct-field-numbered.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -9,7 +9,7 @@ pub trait UnifyKey {\n     fn dummy(&self) { }\n }\n \n-pub struct Node<K:UnifyKey>(K, K::Value);\n+pub struct Node<K:UnifyKey>(#[allow(unused_tuple_struct_fields)] K, K::Value);\n \n fn foo<K : UnifyKey<Value=Option<V>>,V : Clone>(node: &Node<K>) -> Option<V> {\n     node.1.clone()"}, {"sha": "15566256600df828844d397679cc46afd8018dc3", "filename": "src/test/ui/async-await/async-fn-size-moved-locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -17,7 +17,7 @@ use std::pin::Pin;\n use std::task::{Context, Poll};\n \n const BIG_FUT_SIZE: usize = 1024;\n-struct BigFut([u8; BIG_FUT_SIZE]);\n+struct BigFut(#[allow(unused_tuple_struct_fields)] [u8; BIG_FUT_SIZE]);\n \n impl BigFut {\n     fn new() -> Self {"}, {"sha": "31a086ba975696010c7f1336bff90ef0b75d8a4f", "filename": "src/test/ui/async-await/async-fn-size-uninit-locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-uninit-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-uninit-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-uninit-locals.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -16,7 +16,7 @@ use std::pin::Pin;\n use std::task::{Context, Poll};\n \n const BIG_FUT_SIZE: usize = 1024;\n-struct Big([u8; BIG_FUT_SIZE]);\n+struct Big(#[allow(unused_tuple_struct_fields)] [u8; BIG_FUT_SIZE]);\n \n impl Big {\n     fn new() -> Self {"}, {"sha": "7b52d9c176e88704e8fd623179e97666b03c798f", "filename": "src/test/ui/auto-traits/auto-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fauto-traits%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fauto-traits%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-traits.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -9,7 +9,7 @@ unsafe auto trait AutoUnsafe {}\n impl !Auto for bool {}\n impl !AutoUnsafe for bool {}\n \n-struct AutoBool(bool);\n+struct AutoBool(#[allow(unused_tuple_struct_fields)] bool);\n \n impl Auto for AutoBool {}\n unsafe impl AutoUnsafe for AutoBool {}"}, {"sha": "7eb52196e16e773bf0718192e86153783362e51e", "filename": "src/test/ui/bench/issue-32062.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fbench%2Fissue-32062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fbench%2Fissue-32062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbench%2Fissue-32062.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -15,7 +15,7 @@ trait Parser {\n     }\n }\n \n-struct Token<T>(T::Item) where T: Iterator;\n+struct Token<T>(#[allow(unused_tuple_struct_fields)] T::Item) where T: Iterator;\n \n impl<T> Parser for Token<T> where T: Iterator {\n     type Input = T;\n@@ -25,7 +25,7 @@ impl<T> Parser for Token<T> where T: Iterator {\n     }\n }\n \n-struct Chain<L, R>(L, R);\n+struct Chain<L, R>(#[allow(unused_tuple_struct_fields)] L, #[allow(unused_tuple_struct_fields)] R);\n \n impl<L, R> Parser for Chain<L, R> where L: Parser, R: Parser<Input = L::Input> {\n     type Input = L::Input;"}, {"sha": "407716aa28af9a0f7520a773dac9f03974fd1dd5", "filename": "src/test/ui/binding/match-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fbinding%2Fmatch-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fbinding%2Fmatch-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fmatch-tag.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -3,7 +3,7 @@\n #![allow(non_camel_case_types)]\n \n \n-\n+#[allow(unused_tuple_struct_fields)]\n enum color {\n     rgb(isize, isize, isize),\n     rgba(isize, isize, isize, isize),"}, {"sha": "47623a3d72263671d2f7405988e334a8b75258f8", "filename": "src/test/ui/binding/or-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fbinding%2For-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fbinding%2For-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2For-pattern.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #![allow(non_camel_case_types)]\n \n-enum blah { a(isize, isize, usize), b(isize, isize), c, }\n+enum blah { a(isize, isize, #[allow(unused_tuple_struct_fields)] usize), b(isize, isize), c, }\n \n fn or_alt(q: blah) -> isize {\n     match q { blah::a(x, y, _) | blah::b(x, y) => { return x + y; } blah::c => { return 0; } }"}, {"sha": "2cf050d011daebdcd487dee7b215a106f4ae88de", "filename": "src/test/ui/binding/simple-generic-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fbinding%2Fsimple-generic-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fbinding%2Fsimple-generic-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fsimple-generic-match.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -3,6 +3,6 @@\n \n // pretty-expanded FIXME #23616\n \n-enum clam<T> { a(T), }\n+enum clam<T> { a(#[allow(unused_tuple_struct_fields)] T), }\n \n pub fn main() { let c = clam::a(2); match c { clam::a::<isize>(_) => { } } }"}, {"sha": "cdde48871ea905378c242c14a02202a3c929eb5b", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata2.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -12,7 +12,7 @@ use trait_superkinds_in_metadata::RequiresCopy;\n use std::marker;\n \n #[derive(Copy, Clone)]\n-struct X<T>(T);\n+struct X<T>(#[allow(unused_tuple_struct_fields)] T);\n \n impl<T:Sync> RequiresShare for X<T> { }\n "}, {"sha": "7712e9465424b46534009e5f6248b1acf893bbd5", "filename": "src/test/ui/chalkify/builtin-copy-clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fchalkify%2Fbuiltin-copy-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fchalkify%2Fbuiltin-copy-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbuiltin-copy-clone.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -4,7 +4,7 @@\n // Test that `Clone` is correctly implemented for builtin types.\n \n #[derive(Copy, Clone)]\n-struct S(i32);\n+struct S(#[allow(unused_tuple_struct_fields)] i32);\n \n fn test_clone<T: Clone>(arg: T) {\n     let _ = arg.clone();"}, {"sha": "173dd2e2cff2ee3f630982a3ee2bc5c43d600b7f", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -18,10 +18,10 @@ impl Foo {\n     }\n }\n \n-struct S(Foo);\n+struct S(#[allow(unused_tuple_struct_fields)] Foo);\n \n #[derive(Clone)]\n-struct T(i32);\n+struct T(#[allow(unused_tuple_struct_fields)] i32);\n \n struct U(S, T);\n "}, {"sha": "cfc4555ca03a0b91d8e9d46b0719d9ad14f47df5", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -18,10 +18,10 @@ impl Foo {\n     }\n }\n \n-struct S(Foo);\n+struct S(#[allow(unused_tuple_struct_fields)] Foo);\n \n #[derive(Clone)]\n-struct T(i32);\n+struct T(#[allow(unused_tuple_struct_fields)] i32);\n \n struct U(S, T);\n "}, {"sha": "e99dbb5ab3a4aae0fd91495bc571d7a77f284a04", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -13,7 +13,7 @@ impl Drop for Foo {\n }\n \n #[derive(Debug)]\n-struct ConstainsDropField(Foo, Foo);\n+struct ConstainsDropField(Foo, #[allow(unused_tuple_struct_fields)] Foo);\n \n // `t` needs Drop because one of its elements needs drop,\n // therefore precise capture might affect drop ordering"}, {"sha": "62a984c9eebdd81430f1eed07f7ec49f99b134e3", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -13,7 +13,7 @@ impl Drop for Foo {\n }\n \n #[derive(Debug)]\n-struct ConstainsDropField(Foo, Foo);\n+struct ConstainsDropField(Foo, #[allow(unused_tuple_struct_fields)] Foo);\n \n // `t` needs Drop because one of its elements needs drop,\n // therefore precise capture might affect drop ordering"}, {"sha": "ca1ab3cc7feb909e62258fa12260e2ab3fec7daa", "filename": "src/test/ui/codegen/issue-16602-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fcodegen%2Fissue-16602-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fcodegen%2Fissue-16602-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fissue-16602-3.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -2,6 +2,7 @@\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #[derive(Debug)]\n+#[allow(unused_tuple_struct_fields)]\n enum Foo {\n     Bar(u32, u32),\n     Baz(&'static u32, &'static u32)"}, {"sha": "d35ee5c731ecf0bc30b057a882c5f0720acebeaf", "filename": "src/test/ui/coercion/issue-14589.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fcoercion%2Fissue-14589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fcoercion%2Fissue-14589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fissue-14589.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -20,5 +20,5 @@ impl<T> Test<T> {\n }\n \n trait Foo { fn dummy(&self) { }}\n-struct Output(isize);\n+struct Output(#[allow(unused_tuple_struct_fields)] isize);\n impl Foo for Output {}"}, {"sha": "c9e26c302bf576c82f39779d8339e759cc99ca1d", "filename": "src/test/ui/const-generics/conservative_is_privately_uninhabited_uses_correct_param_env-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-1.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -9,6 +9,7 @@ trait Foo {\n     const ASSOC: usize = 1;\n }\n \n+#[allow(unused_tuple_struct_fields)]\n struct Iced<T: Foo>(T, [(); T::ASSOC])\n where\n     [(); T::ASSOC]: ;"}, {"sha": "3017920fc98c392ed5a80e57630cf897c6801540", "filename": "src/test/ui/const-generics/conservative_is_privately_uninhabited_uses_correct_param_env-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-2.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -9,6 +9,7 @@ trait Foo {\n     const ASSOC: usize = 1;\n }\n \n+#[allow(unused_tuple_struct_fields)]\n struct Iced<T: Foo>(T, [(); T::ASSOC])\n where\n     [(); T::ASSOC]: ;"}, {"sha": "5693409e99205c8ce45ee9c2b55993c438110d33", "filename": "src/test/ui/const-generics/const-argument-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -4,7 +4,7 @@\n \n extern crate const_generic_lib;\n \n-struct Container(const_generic_lib::Alias);\n+struct Container(#[allow(unused_tuple_struct_fields)] const_generic_lib::Alias);\n \n fn main() {\n     let res = const_generic_lib::function(const_generic_lib::Struct([14u8, 1u8, 2u8]));"}, {"sha": "b839008d424e9c382284527ee74057c20b856c2b", "filename": "src/test/ui/const-generics/generic_const_exprs/associated-consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassociated-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassociated-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassociated-consts.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -16,7 +16,7 @@ impl BlockCipher for BarCipher {\n     const BLOCK_SIZE: usize = 32;\n }\n \n-pub struct Block<C>(C);\n+pub struct Block<C>(#[allow(unused_tuple_struct_fields)] C);\n \n pub fn test<C: BlockCipher, const M: usize>()\n where"}, {"sha": "f542f2dcb523f5e662b40f76d9113440eea458ac", "filename": "src/test/ui/consts/assoc-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconsts%2Fassoc-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconsts%2Fassoc-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc-const.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -6,7 +6,7 @@ trait Nat {\n }\n \n struct Zero;\n-struct Succ<N>(N);\n+struct Succ<N>(#[allow(unused_tuple_struct_fields)] N);\n \n impl Nat for Zero {\n     const VALUE: usize = 0;"}, {"sha": "11ee7084ce88b8ef58ae1ea6b94f76b9013aefa1", "filename": "src/test/ui/consts/const-needs_drop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconsts%2Fconst-needs_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconsts%2Fconst-needs_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-needs_drop.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -2,8 +2,10 @@\n \n use std::mem;\n \n+#[allow(unused_tuple_struct_fields)]\n struct Trivial(u8, f32);\n \n+#[allow(unused_tuple_struct_fields)]\n struct NonTrivial(u8, String);\n \n const CONST_U8: bool = mem::needs_drop::<u8>();"}, {"sha": "e8323e4ae60031f24d3ff8ce666d6928172aee67", "filename": "src/test/ui/consts/const-size_of_val-align_of_val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -5,7 +5,7 @@\n \n use std::{mem, ptr};\n \n-struct Foo(u32);\n+struct Foo(#[allow(unused_tuple_struct_fields)] u32);\n \n #[derive(Clone, Copy)]\n struct Bar {"}, {"sha": "15cf3c84d85f9b1ec3c1a5ee6cd48bc0350789bc", "filename": "src/test/ui/consts/const_in_pattern/warn_corner_cases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -15,7 +15,7 @@\n #![warn(indirect_structural_match)]\n \n #[derive(Copy, Clone, Debug)]\n-struct NoDerive(u32);\n+struct NoDerive(#[allow(unused_tuple_struct_fields)] u32);\n \n // This impl makes `NoDerive` irreflexive.\n impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }"}, {"sha": "dd56faa318570698d0c8f63ec63dba2c51c400e9", "filename": "src/test/ui/consts/issue-70773-mir-typeck-lt-norm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconsts%2Fissue-70773-mir-typeck-lt-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconsts%2Fissue-70773-mir-typeck-lt-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-70773-mir-typeck-lt-norm.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n const HASH_LEN: usize = 20;\n-struct Hash([u8; HASH_LEN]);\n+struct Hash(#[allow(unused_tuple_struct_fields)] [u8; HASH_LEN]);\n fn init_hash(_: &mut [u8; HASH_LEN]) {}\n \n fn foo<'a>() -> &'a () {"}, {"sha": "c48d9eae92879fc7e1da1588cf76e1c16d5face3", "filename": "src/test/ui/consts/rvalue-static-promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconsts%2Frvalue-static-promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconsts%2Frvalue-static-promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frvalue-static-promotion.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -4,7 +4,7 @@ use std::cell::Cell;\n \n const NONE_CELL_STRING: Option<Cell<String>> = None;\n \n-struct Foo<T>(T);\n+struct Foo<T>(#[allow(unused_tuple_struct_fields)] T);\n impl<T> Foo<T> {\n     const FOO: Option<Box<T>> = None;\n }"}, {"sha": "c5c3dfc4cc7bda06fed3c71c41b2289b60d3833f", "filename": "src/test/ui/consts/transmute-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconsts%2Ftransmute-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fconsts%2Ftransmute-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-const.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -3,7 +3,7 @@\n use std::mem;\n \n #[repr(transparent)]\n-struct Foo(u32);\n+struct Foo(#[allow(unused_tuple_struct_fields)] u32);\n \n const TRANSMUTED_U32: u32 = unsafe { mem::transmute(Foo(3)) };\n "}, {"sha": "3480ccc10899e8848c8923f01223b9da75716a64", "filename": "src/test/ui/deriving/deriving-clone-generic-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-generic-tuple-struct.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -2,6 +2,7 @@\n // pretty-expanded FIXME #23616\n \n #[derive(Clone)]\n+#[allow(unused_tuple_struct_fields)]\n struct S<T>(T, ());\n \n pub fn main() {"}, {"sha": "f8403b1feacbd0ff21d02fdf9974476249217e1e", "filename": "src/test/ui/deriving/deriving-copyclone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fderiving%2Fderiving-copyclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fderiving%2Fderiving-copyclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-copyclone.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -23,7 +23,7 @@ impl Clone for Liar {\n \n /// This struct is actually Copy... at least, it thinks it is!\n #[derive(Copy, Clone)]\n-struct Innocent(Liar);\n+struct Innocent(#[allow(unused_tuple_struct_fields)] Liar);\n \n impl Innocent {\n     fn new() -> Self {"}, {"sha": "8041bd5bb3c652d06302b5adfb56ca7812761fed", "filename": "src/test/ui/deriving/issue-58319.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fderiving%2Fissue-58319.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fderiving%2Fissue-58319.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fissue-58319.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -3,6 +3,7 @@ fn main() {}\n #[derive(Clone)]\n pub struct Little;\n #[derive(Clone)]\n+#[allow(unused_tuple_struct_fields)]\n pub struct Big(\n     Little,\n     Little,"}, {"sha": "0d7af3d4f61a87a5adb625a75128ba125df0b8ed", "filename": "src/test/ui/drop/dropck-eyepatch-reorder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fdrop%2Fdropck-eyepatch-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fdrop%2Fdropck-eyepatch-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdropck-eyepatch-reorder.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -12,10 +12,10 @@ trait Foo { fn foo(&self, _: &str); }\n \n struct Dt<A: Foo>(&'static str, A);\n struct Dr<'a, B:'a+Foo>(&'static str, &'a B);\n-struct Pt<A: Foo, B: Foo>(&'static str, A, B);\n-struct Pr<'a, 'b, B:'a+'b+Foo>(&'static str, &'a B, &'b B);\n-struct St<A: Foo>(&'static str, A);\n-struct Sr<'a, B:'a+Foo>(&'static str, &'a B);\n+struct Pt<A: Foo, B: Foo>(&'static str, #[allow(unused_tuple_struct_fields)] A, B);\n+struct Pr<'a, 'b, B:'a+'b+Foo>(&'static str, #[allow(unused_tuple_struct_fields)] &'a B, &'b B);\n+struct St<A: Foo>(&'static str, #[allow(unused_tuple_struct_fields)] A);\n+struct Sr<'a, B:'a+Foo>(&'static str, #[allow(unused_tuple_struct_fields)] &'a B);\n \n impl<A: Foo> Drop for Dt<A> {\n     fn drop(&mut self) { println!(\"drop {}\", self.0); self.1.foo(self.0); }"}, {"sha": "3c4840d5c7a30223def667a6f933a998f827d0ba", "filename": "src/test/ui/drop/dropck-eyepatch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fdrop%2Fdropck-eyepatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fdrop%2Fdropck-eyepatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdropck-eyepatch.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -35,10 +35,10 @@ trait Foo { fn foo(&self, _: &str); }\n \n struct Dt<A: Foo>(&'static str, A);\n struct Dr<'a, B:'a+Foo>(&'static str, &'a B);\n-struct Pt<A,B: Foo>(&'static str, A, B);\n-struct Pr<'a, 'b, B:'a+'b+Foo>(&'static str, &'a B, &'b B);\n-struct St<A: Foo>(&'static str, A);\n-struct Sr<'a, B:'a+Foo>(&'static str, &'a B);\n+struct Pt<A,B: Foo>(&'static str, #[allow(unused_tuple_struct_fields)] A, B);\n+struct Pr<'a, 'b, B:'a+'b+Foo>(&'static str, #[allow(unused_tuple_struct_fields)] &'a B, &'b B);\n+struct St<A: Foo>(&'static str, #[allow(unused_tuple_struct_fields)] A);\n+struct Sr<'a, B:'a+Foo>(&'static str, #[allow(unused_tuple_struct_fields)] &'a B);\n \n impl<A: Foo> Drop for Dt<A> {\n     fn drop(&mut self) { println!(\"drop {}\", self.0); self.1.foo(self.0); }"}, {"sha": "e70686774233742021991c2c67c761731fa43787", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -103,7 +103,7 @@ fn dynamic_drop(a: &Allocator, c: bool) {\n     };\n }\n \n-struct TwoPtrs<'a>(Ptr<'a>, Ptr<'a>);\n+struct TwoPtrs<'a>(Ptr<'a>, #[allow(unused_tuple_struct_fields)] Ptr<'a>);\n fn struct_dynamic_drop(a: &Allocator, c0: bool, c1: bool, c: bool) {\n     for i in 0..2 {\n         let x;"}, {"sha": "04d0d32033a12cdbef4b780b7dfd905c1999fbbf", "filename": "src/test/ui/dropck/issue-28498-ugeh-with-passed-to-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fdropck%2Fissue-28498-ugeh-with-passed-to-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fdropck%2Fissue-28498-ugeh-with-passed-to-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fissue-28498-ugeh-with-passed-to-fn.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -21,7 +21,7 @@ impl Drop for ScribbleOnDrop {\n     }\n }\n \n-struct Foo<T>(u32, T, Box<for <'r> fn(&'r T) -> String>);\n+struct Foo<T>(u32, T, #[allow(unused_tuple_struct_fields)] Box<for <'r> fn(&'r T) -> String>);\n \n unsafe impl<#[may_dangle] T> Drop for Foo<T> {\n     fn drop(&mut self) {"}, {"sha": "8e162d5c455127be15e81f1f6093845bcc974400", "filename": "src/test/ui/enum-discriminant/discriminant_value-wrapper.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value-wrapper.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -4,6 +4,7 @@\n \n use std::mem;\n \n+#[allow(unused_tuple_struct_fields)]\n enum ADT {\n     First(u32, u32),\n     Second(u64)"}, {"sha": "65ab411dbcbe640d09491ff7e1717aa49883771b", "filename": "src/test/ui/enum-discriminant/discriminant_value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -27,13 +27,14 @@ enum CLike3 {\n     D\n }\n \n+#[allow(unused_tuple_struct_fields)]\n enum ADT {\n     First(u32, u32),\n     Second(u64)\n }\n \n enum NullablePointer {\n-    Something(&'static u32),\n+    Something(#[allow(unused_tuple_struct_fields)] &'static u32),\n     Nothing\n }\n "}, {"sha": "3c756a86fc5a5e212eb99906c4c128a6786da2cb", "filename": "src/test/ui/generator/size-moved-locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -18,7 +18,7 @@\n use std::ops::Generator;\n \n const FOO_SIZE: usize = 1024;\n-struct Foo([u8; FOO_SIZE]);\n+struct Foo(#[allow(unused_tuple_struct_fields)] [u8; FOO_SIZE]);\n \n impl Drop for Foo {\n     fn drop(&mut self) {}"}, {"sha": "834b15be1c59db56354ce0a94d06e4a5ff25a663", "filename": "src/test/ui/generics/generic-default-type-params-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-default-type-params-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-default-type-params-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-default-type-params-cross-crate.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -5,7 +5,7 @@\n \n extern crate default_type_params_xc;\n \n-struct Vec<T, A = default_type_params_xc::Heap>(Option<(T,A)>);\n+struct Vec<T, A = default_type_params_xc::Heap>(#[allow(unused_tuple_struct_fields)] Option<(T,A)>);\n \n struct Foo;\n "}, {"sha": "9610bdcb3382e95b9647afed62457cf3c73443b8", "filename": "src/test/ui/generics/generic-ivec-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-ivec-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-ivec-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-ivec-leak.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n #![allow(non_camel_case_types)]\n-enum wrapper<T> { wrapped(T), }\n+enum wrapper<T> { wrapped(#[allow(unused_tuple_struct_fields)] T), }\n \n pub fn main() { let _w = wrapper::wrapped(vec![1, 2, 3, 4, 5]); }"}, {"sha": "aa879f01a583f025247c3edb8792d86f288234a6", "filename": "src/test/ui/generics/generic-newtype-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-newtype-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-newtype-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-newtype-struct.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-struct S<T>(T);\n+struct S<T>(#[allow(unused_tuple_struct_fields)] T);\n \n pub fn main() {\n     let _s = S(2);"}, {"sha": "501acb6e1638a83613f765c044bf91cec3178889", "filename": "src/test/ui/generics/generic-no-mangle.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.fixed?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -76,7 +76,7 @@ impl<T> Trait2<T> for Foo {\n     fn qux<'a>(x: &'a i32) -> &i32 { x } //~ ERROR functions generic over types or consts must be mangled\n }\n \n-pub struct Bar<T>(T);\n+pub struct Bar<T>(#[allow(unused_tuple_struct_fields)] T);\n \n impl<T> Bar<T> {\n     \n@@ -111,7 +111,7 @@ impl<T> Trait3 for Bar<T> {\n     fn baz<U>() {} //~ ERROR functions generic over types or consts must be mangled\n }\n \n-pub struct Baz<'a>(&'a i32);\n+pub struct Baz<'a>(#[allow(unused_tuple_struct_fields)] &'a i32);\n \n impl<'a> Baz<'a> {\n     #[no_mangle]"}, {"sha": "74e407078e8b19cfa1a8b6ce5ada61f05aa35b5b", "filename": "src/test/ui/generics/generic-no-mangle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -76,7 +76,7 @@ impl<T> Trait2<T> for Foo {\n     fn qux<'a>(x: &'a i32) -> &i32 { x } //~ ERROR functions generic over types or consts must be mangled\n }\n \n-pub struct Bar<T>(T);\n+pub struct Bar<T>(#[allow(unused_tuple_struct_fields)] T);\n \n impl<T> Bar<T> {\n     #[no_mangle]\n@@ -111,7 +111,7 @@ impl<T> Trait3 for Bar<T> {\n     fn baz<U>() {} //~ ERROR functions generic over types or consts must be mangled\n }\n \n-pub struct Baz<'a>(&'a i32);\n+pub struct Baz<'a>(#[allow(unused_tuple_struct_fields)] &'a i32);\n \n impl<'a> Baz<'a> {\n     #[no_mangle]"}, {"sha": "b344da1c7ddeba73872bdaf08e81ba0ad160544b", "filename": "src/test/ui/generics/generic-recursive-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-recursive-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-recursive-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-recursive-tag.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #![allow(non_camel_case_types)]\n \n-enum list<T> { cons(Box<T>, Box<list<T>>), nil, }\n+enum list<T> { #[allow(unused_tuple_struct_fields)] cons(Box<T>, Box<list<T>>), nil, }\n \n pub fn main() {\n     let _a: list<isize> ="}, {"sha": "35de3c1f7124693748d53f319e7c2ad50208402a", "filename": "src/test/ui/generics/generic-tag-corruption.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-tag-corruption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-tag-corruption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-tag-corruption.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -5,6 +5,6 @@\n // This used to cause memory corruption in stage 0.\n // pretty-expanded FIXME #23616\n \n-enum thing<K> { some(K), }\n+enum thing<K> { some(#[allow(unused_tuple_struct_fields)] K), }\n \n pub fn main() { let _x = thing::some(\"hi\".to_string()); }"}, {"sha": "c5772e84193ac7ff67a5d50ffcbf6c1315af5a70", "filename": "src/test/ui/generics/generic-tag-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-tag-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-tag-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-tag-local.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -3,6 +3,6 @@\n \n // pretty-expanded FIXME #23616\n \n-enum clam<T> { a(T), }\n+enum clam<T> { a(#[allow(unused_tuple_struct_fields)] T), }\n \n pub fn main() { let _c = clam::a(3); }"}, {"sha": "31fc2178d6d630db4f1c804e9c300885f441d44f", "filename": "src/test/ui/generics/generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-tag.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -6,7 +6,7 @@\n \n #![allow(unused_variables)]\n \n-enum option<T> { some(Box<T>), none, }\n+enum option<T> { some(#[allow(unused_tuple_struct_fields)] Box<T>), none, }\n \n pub fn main() {\n     let mut a: option<isize> = option::some::<isize>(Box::new(10));"}, {"sha": "31fc46203d32912c0fbf11b3a72227f796390f23", "filename": "src/test/ui/impl-trait/bounds_regression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fimpl-trait%2Fbounds_regression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fimpl-trait%2Fbounds_regression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbounds_regression.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -15,7 +15,7 @@ pub fn future_from_generator<\n     GenFuture(x)\n }\n \n-struct GenFuture<T: FakeGenerator<Yield = ()>>(T);\n+struct GenFuture<T: FakeGenerator<Yield = ()>>(#[allow(unused_tuple_struct_fields)] T);\n \n impl<T: FakeGenerator<Yield = ()>> FakeFuture for GenFuture<T> {\n     type Output = T::Return;"}, {"sha": "64bf2a11d0ecd0261f977ba3711a163dc689b559", "filename": "src/test/ui/issues/issue-13027.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-13027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-13027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13027.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -164,7 +164,7 @@ fn range_shadow_multi_pats() {\n \n fn misc() {\n     enum Foo {\n-        Bar(usize, bool)\n+        Bar(#[allow(unused_tuple_struct_fields)] usize, bool)\n     }\n     // This test basically mimics how trace_macros! macro is implemented,\n     // which is a rare combination of vector patterns, multiple wild-card"}, {"sha": "dca24d0be8a2acb458ea7771beaccd1b25269f3e", "filename": "src/test/ui/issues/issue-14382.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-14382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-14382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14382.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #[derive(Debug)]\n-struct Matrix4<S>(S);\n+struct Matrix4<S>(#[allow(unused_tuple_struct_fields)] S);\n trait POrd<S> {}\n \n fn translate<S: POrd<S>>(s: S) -> Matrix4<S> { Matrix4(s) }"}, {"sha": "8d65afc4883d7071237a08b8a3ce50f491143e1f", "filename": "src/test/ui/issues/issue-15858.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-15858.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-15858.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15858.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -12,7 +12,7 @@ impl Bar for BarImpl {\n }\n \n \n-struct Foo<B: Bar>(B);\n+struct Foo<B: Bar>(#[allow(unused_tuple_struct_fields)] B);\n \n impl<B: Bar> Drop for Foo<B> {\n     fn drop(&mut self) {"}, {"sha": "dae9648b9173f0a3324fb35ada1fc1af5f0ff8d7", "filename": "src/test/ui/issues/issue-17905.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-17905.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-17905.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #[derive(Debug)]\n+#[allow(unused_tuple_struct_fields)]\n struct Pair<T, V> (T, V);\n \n impl Pair<"}, {"sha": "f08f9d4cfe4103b55a8989edd7b5b17cbc0a76f5", "filename": "src/test/ui/issues/issue-2063.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-2063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-2063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2063.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -3,7 +3,7 @@\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed.\n \n-struct T(Box<T>);\n+struct T(#[allow(unused_tuple_struct_fields)] Box<T>);\n \n trait ToStr2 {\n     fn my_to_string(&self) -> String;"}, {"sha": "1cb969731e29c3e116caad7f0b31780518b88a13", "filename": "src/test/ui/issues/issue-23491.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-23491.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-23491.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23491.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_variables)]\n #![feature(box_syntax)]\n \n-struct Node<T: ?Sized>(T);\n+struct Node<T: ?Sized>(#[allow(unused_tuple_struct_fields)] T);\n \n fn main() {\n     let x: Box<Node<[isize]>> = box Node([]);"}, {"sha": "4a582c68efc9bb01d8453cb093416cd44703c409", "filename": "src/test/ui/issues/issue-24308.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-24308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-24308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24308.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -4,7 +4,7 @@ pub trait Foo {\n     fn method2();\n }\n \n-struct Slice<'a, T: 'a>(&'a [T]);\n+struct Slice<'a, T: 'a>(#[allow(unused_tuple_struct_fields)] &'a [T]);\n \n impl<'a, T: 'a> Foo for Slice<'a, T> {\n     fn method2() {"}, {"sha": "45761b61c3e95097b5108020b3188d8473998c1a", "filename": "src/test/ui/issues/issue-24805-dropck-itemless.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-24805-dropck-itemless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-24805-dropck-itemless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24805-dropck-itemless.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -19,7 +19,7 @@ impl<'a, T> UserDefined for &'a T { }\n //   ```\n macro_rules! impl_drop {\n     ($Bound:ident, $Id:ident) => {\n-        struct $Id<T: $Bound>(T);\n+        struct $Id<T: $Bound>(#[allow(unused_tuple_struct_fields)] T);\n         unsafe impl <#[may_dangle] T: $Bound> Drop for $Id<T> {\n             fn drop(&mut self) { }\n         }"}, {"sha": "c988f8f55fa47a0b43ea229d383afb9866c2e083", "filename": "src/test/ui/issues/issue-25089.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-25089.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-25089.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25089.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -4,7 +4,7 @@\n \n use std::thread;\n \n-struct Foo(i32);\n+struct Foo(#[allow(unused_tuple_struct_fields)] i32);\n \n impl Drop for Foo {\n     fn drop(&mut self) {"}, {"sha": "b548da98888872d22c33fdd559d3d47d1c9f0df3", "filename": "src/test/ui/issues/issue-25679.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-25679.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-25679.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25679.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -2,6 +2,7 @@\n trait Device {\n     type Resources;\n }\n+#[allow(unused_tuple_struct_fields)]\n struct Foo<D, R>(D, R);\n \n impl<D: Device> Foo<D, D::Resources> {"}, {"sha": "5e71a52ba4e963104c75e293f2c48e0095ed73aa", "filename": "src/test/ui/issues/issue-25700-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-25700-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-25700-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25700-1.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-struct S<T: 'static>(Option<&'static T>);\n+struct S<T: 'static>(#[allow(unused_tuple_struct_fields)] Option<&'static T>);\n \n trait Tr { type Out; }\n impl<T> Tr for T { type Out = T; }"}, {"sha": "89b1db496f95c5e10e0ddff25bda6627f95009fd", "filename": "src/test/ui/issues/issue-25700-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-25700-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-25700-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25700-2.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -3,8 +3,9 @@ pub trait Parser {\n     type Input;\n }\n \n-pub struct Iter<P: Parser>(P, P::Input);\n+pub struct Iter<P: Parser>(#[allow(unused_tuple_struct_fields)] P, P::Input);\n \n+#[allow(unused_tuple_struct_fields)]\n pub struct Map<P, F>(P, F);\n impl<P, F> Parser for Map<P, F> where F: FnMut(P) {\n     type Input = u8;"}, {"sha": "e5b9a97523dfd7452fbf34af6ce60246ad53b74e", "filename": "src/test/ui/issues/issue-25700.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-25700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-25700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25700.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,4 +1,4 @@\n-struct S<T: 'static>(Option<&'static T>);\n+struct S<T: 'static>(#[allow(unused_tuple_struct_fields)] Option<&'static T>);\n \n trait Tr { type Out; }\n impl<T> Tr for T { type Out = T; }"}, {"sha": "f3f9c1d9ae821b18db99ead7465f4a2781554a9e", "filename": "src/test/ui/issues/issue-26127.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-26127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-26127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26127.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n trait Tr { type T; }\n impl Tr for u8 { type T=(); }\n-struct S<I: Tr>(I::T);\n+struct S<I: Tr>(#[allow(unused_tuple_struct_fields)] I::T);\n \n fn foo<I: Tr>(i: I::T) {\n     S::<I>(i);"}, {"sha": "e08edd0b5cb67c4b64cfc379b8d95a31eb2d2d4c", "filename": "src/test/ui/issues/issue-26641.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-26641.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-26641.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26641.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-struct Parser<'a>(Box<dyn FnMut(Parser) + 'a>);\n+struct Parser<'a>(#[allow(unused_tuple_struct_fields)] Box<dyn FnMut(Parser) + 'a>);\n \n fn main() {\n     let _x = Parser(Box::new(|_|{}));"}, {"sha": "1bd2651dd6c12e7bd686874ee68dd3a2808be910", "filename": "src/test/ui/issues/issue-26709.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-26709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-26709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26709.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-struct Wrapper<'a, T: ?Sized>(&'a mut i32, T);\n+struct Wrapper<'a, T: ?Sized>(&'a mut i32, #[allow(unused_tuple_struct_fields)] T);\n \n impl<'a, T: ?Sized> Drop for Wrapper<'a, T> {\n     fn drop(&mut self) {"}, {"sha": "eaf254f3361932a399f50d4ad9ef964b48ac8e53", "filename": "src/test/ui/issues/issue-27240.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-27240.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-27240.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27240.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -2,19 +2,20 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n use std::fmt;\n-struct NoisyDrop<T: fmt::Debug>(T);\n+struct NoisyDrop<T: fmt::Debug>(#[allow(unused_tuple_struct_fields)] T);\n impl<T: fmt::Debug> Drop for NoisyDrop<T> {\n     fn drop(&mut self) {}\n }\n \n-struct Bar<T: fmt::Debug>([*const NoisyDrop<T>; 2]);\n+struct Bar<T: fmt::Debug>(#[allow(unused_tuple_struct_fields)] [*const NoisyDrop<T>; 2]);\n \n fn fine() {\n     let (u,b);\n     u = vec![43];\n     b = Bar([&NoisyDrop(&u), &NoisyDrop(&u)]);\n }\n \n+#[allow(unused_tuple_struct_fields)]\n struct Bar2<T: fmt::Debug>(*const NoisyDrop<T>, *const NoisyDrop<T>);\n \n fn lolwut() {"}, {"sha": "ab6d190e0a153ee90313c7846853ecbc0ac6293c", "filename": "src/test/ui/issues/issue-28498-must-work-ex1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-28498-must-work-ex1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-28498-must-work-ex1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28498-must-work-ex1.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -6,7 +6,7 @@\n \n use std::cell::Cell;\n \n-struct Concrete<'a>(u32, Cell<Option<&'a Concrete<'a>>>);\n+struct Concrete<'a>(#[allow(unused_tuple_struct_fields)] u32, Cell<Option<&'a Concrete<'a>>>);\n \n fn main() {\n     let mut data = Vec::new();"}, {"sha": "378d736ee3d9bf55aed7b9bf0db7cbfc6a15b8fd", "filename": "src/test/ui/issues/issue-28498-must-work-ex2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-28498-must-work-ex2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-28498-must-work-ex2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28498-must-work-ex2.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -6,7 +6,7 @@\n \n use std::cell::Cell;\n \n-struct Concrete<'a>(u32, Cell<Option<&'a Concrete<'a>>>);\n+struct Concrete<'a>(#[allow(unused_tuple_struct_fields)] u32, Cell<Option<&'a Concrete<'a>>>);\n \n struct Foo<T> { data: Vec<T> }\n "}, {"sha": "24bf706cef9da895b486edc7339c1bd934c5b3b0", "filename": "src/test/ui/issues/issue-28498-ugeh-ex1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-28498-ugeh-ex1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-28498-ugeh-ex1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28498-ugeh-ex1.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -8,7 +8,7 @@\n #![feature(dropck_eyepatch)]\n use std::cell::Cell;\n \n-struct Concrete<'a>(u32, Cell<Option<&'a Concrete<'a>>>);\n+struct Concrete<'a>(#[allow(unused_tuple_struct_fields)] u32, Cell<Option<&'a Concrete<'a>>>);\n \n struct Foo<T> { data: Vec<T> }\n "}, {"sha": "439f8bb5308f2dfe93a3df89e859edd6bf9c08cf", "filename": "src/test/ui/issues/issue-29147-rpass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-29147-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-29147-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29147-rpass.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![recursion_limit=\"1024\"]\n+#![allow(dead_code)]\n \n use std::mem;\n "}, {"sha": "190ecf46009ffe974f849d607568075d660a38d0", "filename": "src/test/ui/issues/issue-29147.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-29147.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-29147.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29147.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,4 +1,5 @@\n #![recursion_limit=\"1024\"]\n+#![allow(dead_code)]\n \n pub struct S0<T>(T,T);\n pub struct S1<T>(Option<Box<S0<S0<T>>>>,Option<Box<S0<S0<T>>>>);"}, {"sha": "138d477dc6b29d5a12cf5dd170a941feeae35a1e", "filename": "src/test/ui/issues/issue-29147.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,11 +1,11 @@\n error[E0283]: type annotations needed\n-  --> $DIR/issue-29147.rs:21:13\n+  --> $DIR/issue-29147.rs:22:13\n    |\n LL |     let _ = <S5<_>>::xxx;\n    |             ^^^^^^^^^^^^ cannot infer type for struct `S5<_>`\n    |\n note: multiple `impl`s satisfying `S5<_>: Foo` found\n-  --> $DIR/issue-29147.rs:17:1\n+  --> $DIR/issue-29147.rs:18:1\n    |\n LL | impl Foo for S5<u32> { fn xxx(&self) {} }\n    | ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7f0cbd658f1177f05d2624082ae28dbe8bbf05c7", "filename": "src/test/ui/issues/issue-31267-additional.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-31267-additional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-31267-additional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31267-additional.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -6,7 +6,7 @@ struct Bar;\n const BAZ: Bar = Bar;\n \n #[derive(Debug)]\n-struct Foo([Bar; 1]);\n+struct Foo(#[allow(unused_tuple_struct_fields)] [Bar; 1]);\n \n struct Biz;\n "}, {"sha": "78c3252d32e81d7a3409a2bef633aa476124150f", "filename": "src/test/ui/issues/issue-31299.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-31299.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-31299.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31299.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -25,9 +25,9 @@ impl<T> Front for Vec<T> {\n     type Back = Vec<T>;\n }\n \n-struct PtrBack<T: Front>(Vec<T::Back>);\n+struct PtrBack<T: Front>(#[allow(unused_tuple_struct_fields)] Vec<T::Back>);\n \n-struct M(PtrBack<Vec<M>>);\n+struct M(#[allow(unused_tuple_struct_fields)] PtrBack<Vec<M>>);\n \n #[allow(unused_must_use)]\n fn main() {"}, {"sha": "5498091da58e36896f7f616dce0e3c63c94e8f3d", "filename": "src/test/ui/issues/issue-34571.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-34571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-34571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34571.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #[repr(u8)]\n enum Foo {\n-    Foo(u8),\n+    Foo(#[allow(unused_tuple_struct_fields)] u8),\n }\n \n fn main() {"}, {"sha": "5c6d078041600b7d92b7a1f083e52826d8a0675e", "filename": "src/test/ui/issues/issue-36053.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-36053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-36053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36053.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -7,7 +7,7 @@\n \n use std::iter::FusedIterator;\n \n-struct Thing<'a>(&'a str);\n+struct Thing<'a>(#[allow(unused_tuple_struct_fields)] &'a str);\n impl<'a> Iterator for Thing<'a> {\n     type Item = &'a str;\n     fn next(&mut self) -> Option<&'a str> {"}, {"sha": "a809f7f132937c6f2cbad3ff0f76c0921a3fb425", "filename": "src/test/ui/issues/issue-36278-prefix-nesting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-36278-prefix-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-36278-prefix-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36278-prefix-nesting.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -5,6 +5,7 @@\n use std::mem;\n \n const SZ: usize = 100;\n+#[allow(unused_tuple_struct_fields)]\n struct P<T: ?Sized>([u8; SZ], T);\n \n type Ack<T> = P<P<T>>;"}, {"sha": "5e61361f9877a2a1c87db010847106719e780ff9", "filename": "src/test/ui/issues/issue-40003.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-40003.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-40003.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40003.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -153,7 +153,7 @@ mod stream {\n     }\n \n     enum Slot<T> {\n-        Next(usize),\n+        Next(#[allow(unused_tuple_struct_fields)] usize),\n         _Data { _a: T },\n     }\n "}, {"sha": "0d47a7f0c16c22a9e1770647295db96c3d1d924e", "filename": "src/test/ui/issues/issue-4252.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-4252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-4252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4252.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -7,7 +7,7 @@ trait X {\n }\n \n #[derive(Debug)]\n-struct Y(isize);\n+struct Y(#[allow(unused_tuple_struct_fields)] isize);\n \n #[derive(Debug)]\n struct Z<T: X+std::fmt::Debug> {"}, {"sha": "c418128c1866fe00edf37e953a355c954e359ef6", "filename": "src/test/ui/issues/issue-46069.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-46069.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-46069.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46069.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -2,7 +2,7 @@\n use std::iter::{Fuse, Cloned};\n use std::slice::Iter;\n \n-struct Foo<'a, T: 'a>(&'a T);\n+struct Foo<'a, T: 'a>(#[allow(unused_tuple_struct_fields)] &'a T);\n impl<'a, T: 'a> Copy for Foo<'a, T> {}\n impl<'a, T: 'a> Clone for Foo<'a, T> {\n     fn clone(&self) -> Self { *self }"}, {"sha": "0c121a5eee6389b963fcb31da314725260591d77", "filename": "src/test/ui/issues/issue-5315.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-5315.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-5315.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5315.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-struct A(bool);\n+struct A(#[allow(unused_tuple_struct_fields)] bool);\n \n pub fn main() {\n     let f = A;"}, {"sha": "776fdbb7466f7a17ac7b1f9246d7d7989c84449c", "filename": "src/test/ui/issues/issue-61894.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-61894.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-61894.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61894.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -4,7 +4,7 @@\n \n use std::any::type_name;\n \n-struct Bar<M>(M);\n+struct Bar<M>(#[allow(unused_tuple_struct_fields)] M);\n \n impl<M> Bar<M> {\n     fn foo(&self) -> &'static str {"}, {"sha": "f64887136cad646daa73b532d95c92b278e31d6d", "filename": "src/test/ui/issues/issue-7911.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-7911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fissues%2Fissue-7911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7911.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -6,7 +6,7 @@\n trait FooBar {\n     fn dummy(&self) { }\n }\n-struct Bar(i32);\n+struct Bar(#[allow(unused_tuple_struct_fields)] i32);\n struct Foo { bar: Bar }\n \n impl FooBar for Bar {}"}, {"sha": "68bcc3c1aff0ea96c364085ed5d60e3c7fb6987b", "filename": "src/test/ui/layout/unsafe-cell-hides-niche.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -14,10 +14,10 @@ use std::mem::size_of;\n use std::num::NonZeroU32 as N32;\n use std::sync::{Mutex, RwLock};\n \n-struct Wrapper<T>(T);\n+struct Wrapper<T>(#[allow(unused_tuple_struct_fields)] T);\n \n #[repr(transparent)]\n-struct Transparent<T>(T);\n+struct Transparent<T>(#[allow(unused_tuple_struct_fields)] T);\n \n struct NoNiche<T>(UnsafeCell<T>);\n "}, {"sha": "b15d706368633e3e9cd9142f7462ad97c60228cf", "filename": "src/test/ui/lint/dead-code/tuple-struct-field.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftuple-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftuple-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftuple-struct-field.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,12 +1,37 @@\n-// check-pass\n+#![deny(unused_tuple_struct_fields)]\n+//~^ NOTE: the lint level is defined here\n \n-#![deny(dead_code)]\n+use std::marker::PhantomData;\n \n const LEN: usize = 4;\n \n-#[derive(Debug)]\n-struct Wrapper([u8; LEN]);\n+struct SingleUnused(i32, [u8; LEN], String);\n+//~^ ERROR: field `1` is never read\n+//~| NOTE: field in this struct\n+//~| HELP: consider changing the field to be of unit type\n+\n+struct MultipleUnused(i32, f32, String, u8);\n+//~^ ERROR: fields `0`, `1`, `2` and `3` are never read\n+//~| NOTE: fields in this struct\n+//~| HELP: consider changing the fields to be of unit type\n+\n+struct GoodUnit(());\n+\n+struct GoodPhantom(PhantomData<i32>);\n+\n+struct Void;\n+struct GoodVoid(Void);\n \n fn main() {\n-    println!(\"{:?}\", Wrapper([0, 1, 2, 3]));\n+    let w = SingleUnused(42, [0, 1, 2, 3], \"abc\".to_string());\n+    let _ = w.0;\n+    let _ = w.2;\n+\n+    let m = MultipleUnused(42, 3.14, \"def\".to_string(), 4u8);\n+\n+    let gu = GoodUnit(());\n+    let gp = GoodPhantom(PhantomData);\n+    let gv = GoodVoid(Void);\n+\n+    let _ = (gu, gp, gv, m);\n }"}, {"sha": "ca0989f5b987f145864975465db9f0935fd0b603", "filename": "src/test/ui/lint/dead-code/tuple-struct-field.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftuple-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftuple-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftuple-struct-field.stderr?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -0,0 +1,33 @@\n+error: field `1` is never read\n+  --> $DIR/tuple-struct-field.rs:8:26\n+   |\n+LL | struct SingleUnused(i32, [u8; LEN], String);\n+   |        ------------      ^^^^^^^^^\n+   |        |\n+   |        field in this struct\n+   |\n+note: the lint level is defined here\n+  --> $DIR/tuple-struct-field.rs:1:9\n+   |\n+LL | #![deny(unused_tuple_struct_fields)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\n+   |\n+LL | struct SingleUnused(i32, (), String);\n+   |                          ~~\n+\n+error: fields `0`, `1`, `2` and `3` are never read\n+  --> $DIR/tuple-struct-field.rs:13:23\n+   |\n+LL | struct MultipleUnused(i32, f32, String, u8);\n+   |        -------------- ^^^  ^^^  ^^^^^^  ^^\n+   |        |\n+   |        fields in this struct\n+   |\n+help: consider changing the fields to be of unit type to suppress this warning while preserving the field numbering, or remove the fields\n+   |\n+LL | struct MultipleUnused((), (), (), ());\n+   |                       ~~  ~~  ~~  ~~\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "812fcdd09b6cf9635eb7faa3d782a7d29cff25cd", "filename": "src/test/ui/lint/dead-code/with-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwith-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwith-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwith-impl.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -2,7 +2,7 @@\n \n #![deny(dead_code)]\n \n-pub struct GenericFoo<T>(T);\n+pub struct GenericFoo<T>(#[allow(unused_tuple_struct_fields)] T);\n \n type Foo = GenericFoo<u32>;\n "}, {"sha": "ffe9f93860a31255d79b790185f1d7b9f3767d5f", "filename": "src/test/ui/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flist.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -3,7 +3,7 @@\n #![allow(non_camel_case_types)]\n // pretty-expanded FIXME #23616\n \n-enum list { cons(isize, Box<list>), nil, }\n+enum list { #[allow(unused_tuple_struct_fields)] cons(isize, Box<list>), nil, }\n \n pub fn main() {\n     list::cons(10, Box::new(list::cons(11, Box::new(list::cons(12, Box::new(list::nil))))));"}, {"sha": "26f00fed9c45a41f58dcfa3a5a522ef5e17f78a1", "filename": "src/test/ui/macros/html-literals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmacros%2Fhtml-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmacros%2Fhtml-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fhtml-literals.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -88,6 +88,7 @@ pub fn main() {\n     );\n }\n \n+#[allow(unused_tuple_struct_fields)]\n enum HTMLFragment {\n     tag(String, Vec<HTMLFragment> ),\n     text(String),"}, {"sha": "080dbcfdd41dbc0cf88acd91b78c18eb29f7e2ad", "filename": "src/test/ui/macros/macro-tt-followed-by-seq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmacros%2Fmacro-tt-followed-by-seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmacros%2Fmacro-tt-followed-by-seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-tt-followed-by-seq.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -5,6 +5,7 @@\n use self::Join::*;\n \n #[derive(Debug)]\n+#[allow(unused_tuple_struct_fields)]\n enum Join<A,B> {\n   Keep(A,B),\n   Skip(A,B),"}, {"sha": "a3c31fab1c2c8c0b4028640b1f0424d202fa5366", "filename": "src/test/ui/methods/method-argument-inference-associated-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmethods%2Fmethod-argument-inference-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmethods%2Fmethod-argument-inference-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-argument-inference-associated-type.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -7,7 +7,7 @@ pub trait Service {\n     fn call(&self, _req: Self::Request);\n }\n \n-pub struct S<T>(T);\n+pub struct S<T>(#[allow(unused_tuple_struct_fields)] T);\n \n impl Service for ClientMap {\n     type Request = S<Box<dyn Fn(i32)>>;"}, {"sha": "ec41b7117097077234baf94bfea5b108a375eeae", "filename": "src/test/ui/methods/method-probe-no-guessing-dyn-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmethods%2Fmethod-probe-no-guessing-dyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmethods%2Fmethod-probe-no-guessing-dyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-probe-no-guessing-dyn-trait.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -15,7 +15,7 @@ trait MyTrait1 {\n \n impl MyTrait1 for Foo<u32> {}\n \n-struct Foo<T>(T);\n+struct Foo<T>(#[allow(unused_tuple_struct_fields)] T);\n \n impl Deref for Foo<()> {\n     type Target = dyn MyTrait1 + 'static;\n@@ -33,7 +33,7 @@ trait MyTrait2 {\n }\n \n impl MyTrait2 for u32 {}\n-struct Bar<T>(T, u32);\n+struct Bar<T>(#[allow(unused_tuple_struct_fields)] T, u32);\n impl Deref for Bar<u8> {\n     type Target = dyn MyTrait2 + 'static;\n     fn deref(&self) -> &(dyn MyTrait2 + 'static) {"}, {"sha": "9c93499d948036b81bffa40a181805a82be487fc", "filename": "src/test/ui/mir/mir_codegen_switch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_switch.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n enum Abc {\n-    A(u8),\n-    B(i8),\n+    A(#[allow(unused_tuple_struct_fields)] u8),\n+    B(#[allow(unused_tuple_struct_fields)] i8),\n     C,\n     D,\n }"}, {"sha": "7c3e07c9e346fb4ef52d9bf98148f525e0e37442", "filename": "src/test/ui/mir/mir_fat_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmir%2Fmir_fat_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmir%2Fmir_fat_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_fat_ptr.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // test that ordinary fat pointer operations work.\n \n-struct Wrapper<T: ?Sized>(u32, T);\n+struct Wrapper<T: ?Sized>(#[allow(unused_tuple_struct_fields)] u32, T);\n \n struct FatPtrContainer<'a> {\n     ptr: &'a [u8]"}, {"sha": "6aceefbe7159dccf8fa72700c059467306cf7db6", "filename": "src/test/ui/mir/mir_raw_fat_ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmir%2Fmir_raw_fat_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmir%2Fmir_raw_fat_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_raw_fat_ptr.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -103,6 +103,7 @@ impl<T> Foo for T {\n     }\n }\n \n+#[allow(unused_tuple_struct_fields)]\n struct S<T:?Sized>(u32, T);\n \n fn main_ref() {"}, {"sha": "6cd9526b749f3f06b12568d70ea2c315b62d0d31", "filename": "src/test/ui/mir/mir_refs_correct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmir%2Fmir_refs_correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fmir%2Fmir_refs_correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_refs_correct.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -3,7 +3,7 @@\n \n extern crate mir_external_refs as ext;\n \n-struct S(u8);\n+struct S(#[allow(unused_tuple_struct_fields)] u8);\n #[derive(Debug, PartialEq, Eq)]\n struct Unit;\n \n@@ -46,7 +46,7 @@ impl<I, O> T<I, O> for O {}\n impl X for S {}\n \n enum E {\n-    U(u8)\n+    U(#[allow(unused_tuple_struct_fields)] u8)\n }\n \n #[derive(PartialEq, Debug, Eq)]"}, {"sha": "d345fec811854890fdbaa09ab69d8f0fca29778d", "filename": "src/test/ui/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnullable-pointer-iotareduction.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -8,7 +8,7 @@\n // trying to get assert failure messages that at least identify which case\n // failed.\n \n-enum E<T> { Thing(isize, T), Nothing((), ((), ()), [i8; 0]) }\n+enum E<T> { Thing(isize, T), #[allow(unused_tuple_struct_fields)] Nothing((), ((), ()), [i8; 0]) }\n impl<T> E<T> {\n     fn is_none(&self) -> bool {\n         match *self {"}, {"sha": "2643dbea1c4347f4112066fe0397a3567663c033", "filename": "src/test/ui/optimization-fuel-0.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Foptimization-fuel-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Foptimization-fuel-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foptimization-fuel-0.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -6,7 +6,9 @@ use std::mem::size_of;\n \n // compile-flags: -Z fuel=foo=0\n \n+#[allow(unused_tuple_struct_fields)]\n struct S1(u8, u16, u8);\n+#[allow(unused_tuple_struct_fields)]\n struct S2(u8, u16, u8);\n \n fn main() {"}, {"sha": "d5e2255d9f06fdfbdccfaf17a08aec0caf7681e7", "filename": "src/test/ui/optimization-fuel-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Foptimization-fuel-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Foptimization-fuel-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foptimization-fuel-1.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -6,7 +6,9 @@ use std::mem::size_of;\n \n // compile-flags: -Z fuel=foo=1\n \n+#[allow(unused_tuple_struct_fields)]\n struct S1(u8, u16, u8);\n+#[allow(unused_tuple_struct_fields)]\n struct S2(u8, u16, u8);\n \n fn main() {"}, {"sha": "9f9f41e251564608a9fe60431daed988e65ef5f6", "filename": "src/test/ui/packed/packed-struct-drop-aligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-drop-aligned.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -24,7 +24,7 @@ impl<'a> Drop for Aligned<'a> {\n }\n \n #[repr(transparent)]\n-struct NotCopy(u8);\n+struct NotCopy(#[allow(unused_tuple_struct_fields)] u8);\n \n #[repr(packed)]\n struct Packed<'a>(NotCopy, Aligned<'a>);"}, {"sha": "5e1a1f518c57049f15f4e1cc53c7d9b97533e29c", "filename": "src/test/ui/packed/packed-struct-optimized-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-optimized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-optimized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-optimized-enum.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #[repr(packed)]\n-struct Packed<T: Copy>(T);\n+struct Packed<T: Copy>(#[allow(unused_tuple_struct_fields)] T);\n \n impl<T: Copy> Copy for Packed<T> {}\n impl<T: Copy> Clone for Packed<T> {"}, {"sha": "931be5b941443420854d3f89a9316d8f42ae7af3", "filename": "src/test/ui/packed/packed-tuple-struct-layout.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fpacked%2Fpacked-tuple-struct-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fpacked%2Fpacked-tuple-struct-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-tuple-struct-layout.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -2,9 +2,11 @@\n use std::mem;\n \n #[repr(packed)]\n+#[allow(unused_tuple_struct_fields)]\n struct S4(u8,[u8; 3]);\n \n #[repr(packed)]\n+#[allow(unused_tuple_struct_fields)]\n struct S5(u8,u32);\n \n pub fn main() {"}, {"sha": "8d981405ea1ca344466bf2a6c1ffad5e2bc18575", "filename": "src/test/ui/parser/issues/issue-70388-without-witness.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-70388-without-witness.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-70388-without-witness.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-70388-without-witness.fixed?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n // This is for checking if we can apply suggestions as-is.\n \n-pub struct Foo(i32);\n+pub struct Foo(#[allow(unused_tuple_struct_fields)] i32);\n \n fn main() {\n     let Foo(..) = Foo(0); //~ ERROR unexpected `...`"}, {"sha": "bf36073083a39ee48d75e455d69ccd19b5f8c631", "filename": "src/test/ui/parser/issues/issue-70388-without-witness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-70388-without-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-70388-without-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-70388-without-witness.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n // This is for checking if we can apply suggestions as-is.\n \n-pub struct Foo(i32);\n+pub struct Foo(#[allow(unused_tuple_struct_fields)] i32);\n \n fn main() {\n     let Foo(...) = Foo(0); //~ ERROR unexpected `...`"}, {"sha": "c9107d24ed092f791c23be804c0f6d8a8aa3ec18", "filename": "src/test/ui/range_inclusive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange_inclusive.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -11,7 +11,7 @@ fn foo() -> isize { 42 }\n pub fn return_range_to() -> RangeToInclusive<i32> { return ..=1; }\n \n #[derive(Debug)]\n-struct P(u8);\n+struct P(#[allow(unused_tuple_struct_fields)] u8);\n \n pub fn main() {\n     let mut count = 0;"}, {"sha": "91958dffcf4df4cc7fc5102b52666897b7c865cb", "filename": "src/test/ui/recursion/issue-26548-recursion-via-normalize.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frecursion%2Fissue-26548-recursion-via-normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frecursion%2Fissue-26548-recursion-via-normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-26548-recursion-via-normalize.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,9 +1,8 @@\n-//~ ERROR cycle detected when computing layout of `S`\n+//~ ERROR cycle detected when computing layout of `core::option::Option<S>`\n+//~| NOTE ...which requires computing layout of `S`...\n //~| NOTE ...which requires computing layout of `core::option::Option<<S as Mirror>::It>`...\n-//~| NOTE ...which requires computing layout of `core::option::Option<S>`...\n-//~| NOTE ...which again requires computing layout of `S`, completing the cycle\n-\n-// build-fail\n+//~| NOTE ...which again requires computing layout of `core::option::Option<S>`, completing the cycle\n+//~| NOTE cycle used when computing layout of `core::option::Option<<S as Mirror>::It>`\n \n trait Mirror {\n     type It: ?Sized;\n@@ -14,6 +13,5 @@ impl<T: ?Sized> Mirror for T {\n struct S(Option<<S as Mirror>::It>);\n \n fn main() {\n-    //~^ NOTE cycle used when elaborating drops for `main`\n     let _s = S(None);\n }"}, {"sha": "a75097cdbfbdadad273f41634b3a7298559a210f", "filename": "src/test/ui/recursion/issue-26548-recursion-via-normalize.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frecursion%2Fissue-26548-recursion-via-normalize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frecursion%2Fissue-26548-recursion-via-normalize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-26548-recursion-via-normalize.stderr?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,13 +1,9 @@\n-error[E0391]: cycle detected when computing layout of `S`\n+error[E0391]: cycle detected when computing layout of `core::option::Option<S>`\n    |\n+   = note: ...which requires computing layout of `S`...\n    = note: ...which requires computing layout of `core::option::Option<<S as Mirror>::It>`...\n-   = note: ...which requires computing layout of `core::option::Option<S>`...\n-   = note: ...which again requires computing layout of `S`, completing the cycle\n-note: cycle used when elaborating drops for `main`\n-  --> $DIR/issue-26548-recursion-via-normalize.rs:16:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n+   = note: ...which again requires computing layout of `core::option::Option<S>`, completing the cycle\n+   = note: cycle used when computing layout of `core::option::Option<<S as Mirror>::It>`\n \n error: aborting due to previous error\n "}, {"sha": "1914e15549307227e1f5da5d06f8c0ff60af84a6", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/allow-hide-behind-direct-unsafe-ptr-embedded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-direct-unsafe-ptr-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-direct-unsafe-ptr-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-direct-unsafe-ptr-embedded.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -5,7 +5,7 @@\n \n #![warn(pointer_structural_match)]\n \n-struct NoDerive(i32);\n+struct NoDerive(#[allow(unused_tuple_struct_fields)] i32);\n \n // This impl makes NoDerive irreflexive\n // (which doesn't matter here because `<*const T>::eq` won't recur on `T`)."}, {"sha": "e713b003b0059c98ee6fc8e1763b13e45e61a5dc", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/allow-hide-behind-direct-unsafe-ptr-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-direct-unsafe-ptr-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-direct-unsafe-ptr-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-direct-unsafe-ptr-param.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -5,7 +5,7 @@\n \n #![warn(pointer_structural_match)]\n \n-struct NoDerive(i32);\n+struct NoDerive(#[allow(unused_tuple_struct_fields)] i32);\n \n // This impl makes NoDerive irreflexive\n // (which doesn't matter here because `<*const T>::eq` won't recur on `T`)."}, {"sha": "04da14c54194ae0d8dcdf4c731db6b0e532863b1", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/allow-hide-behind-indirect-unsafe-ptr-embedded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-indirect-unsafe-ptr-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-indirect-unsafe-ptr-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-indirect-unsafe-ptr-embedded.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -5,7 +5,7 @@\n \n #![warn(pointer_structural_match)]\n \n-struct NoDerive(i32);\n+struct NoDerive(#[allow(unused_tuple_struct_fields)] i32);\n \n // This impl makes NoDerive irreflexive\n // (which doesn't matter here because `<*const T>::eq` won't recur on `T`)."}, {"sha": "8313c25e7538db40ec230df49388cfb6625d7fd2", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/allow-hide-behind-indirect-unsafe-ptr-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-indirect-unsafe-ptr-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-indirect-unsafe-ptr-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-indirect-unsafe-ptr-param.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -5,7 +5,7 @@\n \n #![warn(pointer_structural_match)]\n \n-struct NoDerive(i32);\n+struct NoDerive(#[allow(unused_tuple_struct_fields)] i32);\n \n // This impl makes NoDerive irreflexive\n // (which doesn't matter here because `<*const T>::eq` won't recur on `T`)."}, {"sha": "7623839fdd13a9ce270112f53e006d5b5cad9c49", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-direct-struct-embedded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-embedded.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -5,7 +5,7 @@\n //\n // See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n \n-struct NoDerive(i32);\n+struct NoDerive(#[allow(unused_tuple_struct_fields)] i32);\n \n // This impl makes NoDerive irreflexive.\n impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }"}, {"sha": "894739ff705c317f50ae7b94cd8f519f49551d73", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-doubly-indirect-embedded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-embedded.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -7,7 +7,7 @@\n #![warn(indirect_structural_match)]\n // run-pass\n \n-struct NoDerive(i32);\n+struct NoDerive(#[allow(unused_tuple_struct_fields)] i32);\n \n // This impl makes NoDerive irreflexive.\n impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }"}, {"sha": "1699dae46247e748f16e7804b04639f941eb5123", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-doubly-indirect-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-param.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -7,7 +7,7 @@\n #![warn(indirect_structural_match)]\n // run-pass\n \n-struct NoDerive(i32);\n+struct NoDerive(#[allow(unused_tuple_struct_fields)] i32);\n \n // This impl makes NoDerive irreflexive.\n impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }"}, {"sha": "2672bdd9e5669dd8695ccc30d0175dc599b6230e", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-indirect-struct-embedded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-embedded.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -7,7 +7,7 @@\n #![warn(indirect_structural_match)]\n // run-pass\n \n-struct NoDerive(i32);\n+struct NoDerive(#[allow(unused_tuple_struct_fields)] i32);\n \n // This impl makes NoDerive irreflexive.\n impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }"}, {"sha": "3489995ae71a01ad99f13f8f9735fe65d34f35fc", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-indirect-struct-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-param.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -7,7 +7,7 @@\n #![warn(indirect_structural_match)]\n // run-pass\n \n-struct NoDerive(i32);\n+struct NoDerive(#[allow(unused_tuple_struct_fields)] i32);\n \n // This impl makes NoDerive irreflexive.\n impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }"}, {"sha": "04462c0a11b89f24cb947ac9ab2548f3e0836532", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -96,7 +96,7 @@ implements_const_drop! {\n }\n \n fn main() {\n-    struct HasDropGlue(Box<u8>);\n+    struct HasDropGlue(#[allow(unused_tuple_struct_fields)] Box<u8>);\n     struct HasDropImpl;\n     impl Drop for HasDropImpl {\n         fn drop(&mut self) {"}, {"sha": "d359067f627e3dcd1a51999e7c311e05c4c98660", "filename": "src/test/ui/rfcs/rfc-2151-raw-identifiers/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfcs%2Frfc-2151-raw-identifiers%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Frfcs%2Frfc-2151-raw-identifiers%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2151-raw-identifiers%2Fattr.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -7,7 +7,7 @@ struct Test {\n }\n \n #[r#derive(r#Debug)]\n-struct Test2(u32);\n+struct Test2(#[allow(unused_tuple_struct_fields)] u32);\n \n pub fn main() {\n     assert_eq!(mem::size_of::<Test>(), 9);"}, {"sha": "d9381d66152260a82d92754f5ff2f4abcde0d98f", "filename": "src/test/ui/specialization/specialization-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -14,7 +14,7 @@ struct NotClone;\n struct MarkedAndClone;\n impl MyMarker for MarkedAndClone {}\n \n-struct MyType<T>(T);\n+struct MyType<T>(#[allow(unused_tuple_struct_fields)] T);\n impl<T> Foo for MyType<T> {\n     default fn foo(&self) -> &'static str {\n         \"generic MyType\""}, {"sha": "904aeaa088b769eff4095c7c7e7b66007a18a4d3", "filename": "src/test/ui/specialization/specialization-translate-projections-with-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -14,7 +14,7 @@ impl<'a> WithAssoc for &'a () {\n     type Item = &'a u32;\n }\n \n-struct Cloned<I>(I);\n+struct Cloned<I>(#[allow(unused_tuple_struct_fields)] I);\n \n impl<'a, I, T: 'a> Iterator for Cloned<I>\n     where I: WithAssoc<Item=&'a T>, T: Clone"}, {"sha": "6b0b09c98945c0edf85cba263dcb1d485805eacb", "filename": "src/test/ui/stdlib-unit-tests/raw-fat-ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fraw-fat-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fraw-fat-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstdlib-unit-tests%2Fraw-fat-ptr.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -39,6 +39,7 @@ impl<T> Foo for T {\n     }\n }\n \n+#[allow(unused_tuple_struct_fields)]\n struct S<T:?Sized>(u32, T);\n \n fn main() {"}, {"sha": "ba6abbf03a539f6d15cc1f4052389b636398b13a", "filename": "src/test/ui/struct-ctor-mangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fstruct-ctor-mangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fstruct-ctor-mangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-ctor-mangling.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -4,7 +4,7 @@ fn size_of_val<T>(_: &T) -> usize {\n     std::mem::size_of::<T>()\n }\n \n-struct Foo(i64);\n+struct Foo(#[allow(unused_tuple_struct_fields)] i64);\n \n // Test that the (symbol) mangling of `Foo` (the `struct` type) and that of\n // `typeof Foo` (the function type of the `struct` constructor) don't collide."}, {"sha": "85fa1eac2e2a6fd751b46f8dc7e0532965f0e37d", "filename": "src/test/ui/structs-enums/enum-null-pointer-opt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-null-pointer-opt.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -10,8 +10,8 @@ use std::sync::Arc;\n trait Trait { fn dummy(&self) { } }\n trait Mirror { type Image; }\n impl<T> Mirror for T { type Image = T; }\n-struct ParamTypeStruct<T>(T);\n-struct AssocTypeStruct<T>(<T as Mirror>::Image);\n+struct ParamTypeStruct<T>(#[allow(unused_tuple_struct_fields)] T);\n+struct AssocTypeStruct<T>(#[allow(unused_tuple_struct_fields)] <T as Mirror>::Image);\n #[repr(transparent)]\n union MaybeUninitUnion<T: Copy> {\n     _value: T,\n@@ -46,7 +46,7 @@ fn main() {\n     struct Foo {\n         _a: Box<isize>\n     }\n-    struct Bar(Box<isize>);\n+    struct Bar(#[allow(unused_tuple_struct_fields)] Box<isize>);\n \n     // Should apply through structs\n     assert_eq!(size_of::<Foo>(), size_of::<Option<Foo>>());"}, {"sha": "a05cf8b93d5bd215787ad88cf96fc36b933ca8ec", "filename": "src/test/ui/structs-enums/enum-nullable-simplifycfg-misopt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-nullable-simplifycfg-misopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-nullable-simplifycfg-misopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-nullable-simplifycfg-misopt.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -6,7 +6,7 @@\n  * represented with nullable pointers could be misoptimized in some cases.\n  */\n \n-enum List<X> { Nil, Cons(X, Box<List<X>>) }\n+enum List<X> { Nil, Cons(X, #[allow(unused_tuple_struct_fields)] Box<List<X>>) }\n pub fn main() {\n     match List::Cons(10, Box::new(List::Nil)) {\n         List::Cons(10, _) => {}"}, {"sha": "9613ca62a49e62c75f286c8ded5871b3752293c1", "filename": "src/test/ui/structs-enums/resource-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fstructs-enums%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fstructs-enums%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fresource-in-struct.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -25,7 +25,7 @@ fn close_res(i: closable) -> close_res {\n     }\n }\n \n-enum option<T> { none, some(T), }\n+enum option<T> { none, some(#[allow(unused_tuple_struct_fields)] T), }\n \n fn sink(_res: option<close_res>) { }\n "}, {"sha": "fbf97e6b22558152fe41c394d6167e56bf212759", "filename": "src/test/ui/structs-enums/tuple-struct-construct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fstructs-enums%2Ftuple-struct-construct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fstructs-enums%2Ftuple-struct-construct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Ftuple-struct-construct.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#[allow(unused_tuple_struct_fields)]\n #[derive(Debug)]\n struct Foo(isize, isize);\n "}, {"sha": "b24effe5a9c48d91ddb26ed373f72960824b154e", "filename": "src/test/ui/structs-enums/uninstantiable-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fstructs-enums%2Funinstantiable-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Fstructs-enums%2Funinstantiable-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Funinstantiable-struct.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,4 +1,4 @@\n // run-pass\n-pub struct Z(&'static Z);\n+pub struct Z(#[allow(unused_tuple_struct_fields)] &'static Z);\n \n pub fn main() {}"}, {"sha": "90adba99e542bc8abdba5aa5758b0b5d4bdad5f1", "filename": "src/test/ui/trailing-comma.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftrailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftrailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrailing-comma.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -3,7 +3,7 @@\n \n fn f<T,>(_: T,) {}\n \n-struct Foo<T,>(T);\n+struct Foo<T,>(#[allow(unused_tuple_struct_fields)] T);\n \n struct Bar;\n \n@@ -14,7 +14,7 @@ impl Bar {\n }\n \n enum Baz {\n-    Qux(isize,),\n+    Qux(#[allow(unused_tuple_struct_fields)] isize,),\n }\n \n #[allow(unused,)]"}, {"sha": "747a5393f125734ae22b6ad4f1a826a3b8cb24fa", "filename": "src/test/ui/traits/augmented-assignments-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftraits%2Faugmented-assignments-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftraits%2Faugmented-assignments-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Faugmented-assignments-trait.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n use std::ops::AddAssign;\n \n-struct Int(i32);\n+struct Int(#[allow(unused_tuple_struct_fields)] i32);\n \n impl AddAssign for Int {\n     fn add_assign(&mut self, _: Int) {"}, {"sha": "a1042f8310a98c29d18b2b93a576fab48ea35018", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-rpass.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -7,7 +7,7 @@ use std::marker::Send;\n pub struct WaitToken;\n impl !Send for WaitToken {}\n \n-pub struct Test<T>(T);\n+pub struct Test<T>(#[allow(unused_tuple_struct_fields)] T);\n unsafe impl<T: 'static> Send for Test<T> {}\n \n pub fn spawn<F>(_: F) -> () where F: FnOnce(), F: Send + 'static {}"}, {"sha": "766dceeaffe00413247ddcadab56de69c7ed286e", "filename": "src/test/ui/traits/object/exclusion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fexclusion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fexclusion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fexclusion.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -8,7 +8,7 @@ trait Future: 'static {\n     }\n }\n \n-struct Map<A>(A);\n+struct Map<A>(#[allow(unused_tuple_struct_fields)] A);\n impl<A: Future> Future for Map<A> {}\n \n pub struct Promise;"}, {"sha": "5a4a6aecc6b957f754c6d88f4f18ed2263cbdc30", "filename": "src/test/ui/traits/object/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fgenerics.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -25,7 +25,7 @@ impl<A1, A2, A3> Impl<A1, A2, A3> {\n \n // test for #8601\n \n-enum Type<T> { Constant(T) }\n+enum Type<T> { Constant(#[allow(unused_tuple_struct_fields)] T) }\n \n trait Trait<K,V> {\n     fn method(&self, _: Type<(K,V)>) -> isize;"}, {"sha": "c333b0129c8d4e309682ab95234c33e79c4a322b", "filename": "src/test/ui/traits/pointee-deduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftraits%2Fpointee-deduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftraits%2Fpointee-deduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpointee-deduction.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -13,8 +13,8 @@ impl Foo for () {\n     type Bar = ();\n }\n \n-struct Wrapper1<T: Foo>(<T as Foo>::Bar);\n-struct Wrapper2<T: Foo>(<Wrapper1<T> as Pointee>::Metadata);\n+struct Wrapper1<T: Foo>(#[allow(unused_tuple_struct_fields)] <T as Foo>::Bar);\n+struct Wrapper2<T: Foo>(#[allow(unused_tuple_struct_fields)] <Wrapper1<T> as Pointee>::Metadata);\n \n fn main() {\n     let _: Wrapper2<()> = Wrapper2(());"}, {"sha": "62bad0d7d77ab95100a9ed9226037c39ee9f1a99", "filename": "src/test/ui/traits/principal-less-objects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftraits%2Fprincipal-less-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftraits%2Fprincipal-less-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fprincipal-less-objects.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -7,7 +7,7 @@ use std::mem;\n // Array is to make sure the size is not exactly pointer-size, so\n // we can be sure we are measuring the right size in the\n // `size_of_val` test.\n-struct SetOnDrop<'a>(&'a AtomicUsize, [u8; 64]);\n+struct SetOnDrop<'a>(&'a AtomicUsize, #[allow(unused_tuple_struct_fields)] [u8; 64]);\n impl<'a> Drop for SetOnDrop<'a> {\n     fn drop(&mut self) {\n         self.0.store(self.0.load(Ordering::Relaxed) + 1, Ordering::Relaxed);"}, {"sha": "0aa644db052f0f1a3a159c14d64364e33e41f979", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args-pass.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -9,7 +9,7 @@\n \n #![allow(irrefutable_let_patterns)]\n \n-enum Enum<T> { TSVariant(T), SVariant { _v: T }, UVariant }\n+enum Enum<T> { TSVariant(#[allow(unused_tuple_struct_fields)] T), SVariant { _v: T }, UVariant }\n type Alias<T> = Enum<T>;\n type AliasFixed = Enum<()>;\n "}, {"sha": "1f8aec205fbeb41e405c6bea947871524efc9f76", "filename": "src/test/ui/unboxed-closures/type-id-higher-rank.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Funboxed-closures%2Ftype-id-higher-rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Funboxed-closures%2Ftype-id-higher-rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Ftype-id-higher-rank.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -4,7 +4,7 @@\n \n use std::any::{Any, TypeId};\n \n-struct Struct<'a>(&'a ());\n+struct Struct<'a>(#[allow(unused_tuple_struct_fields)] &'a ());\n trait Trait<'a> {}\n \n fn main() {"}, {"sha": "175b02fcb817539f63314d307e42b091abac8547", "filename": "src/test/ui/unsized-locals/unsized-exprs-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs-rpass.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -2,7 +2,7 @@\n #![allow(incomplete_features, unused_braces, unused_parens)]\n #![feature(unsized_tuple_coercion, unsized_locals, unsized_fn_params)]\n \n-struct A<X: ?Sized>(X);\n+struct A<X: ?Sized>(#[allow(unused_tuple_struct_fields)] X);\n \n fn udrop<T: ?Sized>(_x: T) {}\n fn foo() -> Box<[u8]> {"}, {"sha": "6bdc89310ebaeaeb0d281e36b5b7aa20f00b73b8", "filename": "src/test/ui/unsized/unchanged-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,8 +1,8 @@\n // run-pass\n // Test that we allow unsizing even if there is an unchanged param in the\n // field getting unsized.\n-struct A<T, U: ?Sized + 'static>(T, B<T, U>);\n-struct B<T, U: ?Sized>(T, U);\n+struct A<T, U: ?Sized + 'static>(#[allow(unused_tuple_struct_fields)] T, B<T, U>);\n+struct B<T, U: ?Sized>(#[allow(unused_tuple_struct_fields)] T, U);\n \n fn main() {\n     let x: A<[u32; 1], [u32; 1]> = A([0; 1], B([0; 1], [0; 1]));"}, {"sha": "f13733af3d0d18a04244d716541c232c85700347", "filename": "src/tools/clippy/tests/ui/borrow_interior_mutable_const/auxiliary/helper.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -2,6 +2,7 @@\n // As the most common case is the `http` crate, it replicates `http::HeadewrName`'s structure.\n \n #![allow(clippy::declare_interior_mutable_const)]\n+#![allow(unused_tuple_struct_fields)]\n \n use std::sync::atomic::AtomicUsize;\n "}, {"sha": "6b754f3bd7103bb3f6ff068ab637acc368f85c7c", "filename": "src/tools/clippy/tests/ui/format.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.fixed?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![allow(\n+    unused_tuple_struct_fields,\n     clippy::print_literal,\n     clippy::redundant_clone,\n     clippy::to_string_in_format_args,"}, {"sha": "ca9826b356ec8aea1642450c6f3789244323f071", "filename": "src/tools/clippy/tests/ui/format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![allow(\n+    unused_tuple_struct_fields,\n     clippy::print_literal,\n     clippy::redundant_clone,\n     clippy::to_string_in_format_args,"}, {"sha": "6c35caeb034d0fe5e817b2c51700a771dd68666d", "filename": "src/tools/clippy/tests/ui/format.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.stderr?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,25 +1,25 @@\n error: useless use of `format!`\n-  --> $DIR/format.rs:18:5\n+  --> $DIR/format.rs:19:5\n    |\n LL |     format!(\"foo\");\n    |     ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n    |\n    = note: `-D clippy::useless-format` implied by `-D warnings`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:19:5\n+  --> $DIR/format.rs:20:5\n    |\n LL |     format!(\"{{}}\");\n    |     ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{}\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:20:5\n+  --> $DIR/format.rs:21:5\n    |\n LL |     format!(\"{{}} abc {{}}\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{} abc {}\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:21:5\n+  --> $DIR/format.rs:22:5\n    |\n LL | /     format!(\n LL | |         r##\"foo {{}}\n@@ -34,91 +34,91 @@ LL ~ \" bar\"##.to_string();\n    |\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:26:13\n+  --> $DIR/format.rs:27:13\n    |\n LL |     let _ = format!(\"\");\n    |             ^^^^^^^^^^^ help: consider using `String::new()`: `String::new()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:28:5\n+  --> $DIR/format.rs:29:5\n    |\n LL |     format!(\"{}\", \"foo\");\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:32:5\n+  --> $DIR/format.rs:33:5\n    |\n LL |     format!(\"{:+}\", \"foo\"); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:33:5\n+  --> $DIR/format.rs:34:5\n    |\n LL |     format!(\"{:<}\", \"foo\"); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:38:5\n+  --> $DIR/format.rs:39:5\n    |\n LL |     format!(\"{}\", arg);\n    |     ^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:42:5\n+  --> $DIR/format.rs:43:5\n    |\n LL |     format!(\"{:+}\", arg); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:43:5\n+  --> $DIR/format.rs:44:5\n    |\n LL |     format!(\"{:<}\", arg); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:70:5\n+  --> $DIR/format.rs:71:5\n    |\n LL |     format!(\"{}\", 42.to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `42.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:72:5\n+  --> $DIR/format.rs:73:5\n    |\n LL |     format!(\"{}\", x.display().to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.display().to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:76:18\n+  --> $DIR/format.rs:77:18\n    |\n LL |     let _ = Some(format!(\"{}\", a + \"bar\"));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `a + \"bar\"`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:80:22\n+  --> $DIR/format.rs:81:22\n    |\n LL |     let _s: String = format!(\"{}\", &*v.join(\"/n\"));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `(&*v.join(\"/n\")).to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:86:13\n+  --> $DIR/format.rs:87:13\n    |\n LL |     let _ = format!(\"{x}\");\n    |             ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:88:13\n+  --> $DIR/format.rs:89:13\n    |\n LL |     let _ = format!(\"{y}\", y = x);\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:92:13\n+  --> $DIR/format.rs:93:13\n    |\n LL |     let _ = format!(\"{abc}\");\n    |             ^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `abc.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:94:13\n+  --> $DIR/format.rs:95:13\n    |\n LL |     let _ = format!(\"{xx}\");\n    |             ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `xx.to_string()`"}, {"sha": "48f8093311cbdb41ad7c1700873457cb1154a8be", "filename": "src/tools/clippy/tests/ui/from_iter_instead_of_collect.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_iter_instead_of_collect.fixed?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::from_iter_instead_of_collect)]\n-#![allow(unused_imports)]\n+#![allow(unused_imports, unused_tuple_struct_fields)]\n \n use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n "}, {"sha": "ebe0ad278be30f9502a29aade0f99821092f37fe", "filename": "src/tools/clippy/tests/ui/from_iter_instead_of_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_iter_instead_of_collect.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::from_iter_instead_of_collect)]\n-#![allow(unused_imports)]\n+#![allow(unused_imports, unused_tuple_struct_fields)]\n \n use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n "}, {"sha": "04a74a009e09213cb84581fb7ccce94700324a50", "filename": "src/tools/clippy/tests/ui/must_use_candidates.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmust_use_candidates.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmust_use_candidates.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmust_use_candidates.fixed?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![feature(never_type)]\n-#![allow(unused_mut, clippy::redundant_allocation)]\n+#![allow(unused_mut, unused_tuple_struct_fields, clippy::redundant_allocation)]\n #![warn(clippy::must_use_candidate)]\n use std::rc::Rc;\n use std::sync::atomic::{AtomicBool, Ordering};"}, {"sha": "f04122f4eeab653057d27b5300e9e8c4ef3d2ebe", "filename": "src/tools/clippy/tests/ui/must_use_candidates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmust_use_candidates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmust_use_candidates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmust_use_candidates.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![feature(never_type)]\n-#![allow(unused_mut, clippy::redundant_allocation)]\n+#![allow(unused_mut, unused_tuple_struct_fields, clippy::redundant_allocation)]\n #![warn(clippy::must_use_candidate)]\n use std::rc::Rc;\n use std::sync::atomic::{AtomicBool, Ordering};"}, {"sha": "68c987eb4c6771702ffac0374e4463631af244a9", "filename": "src/tools/clippy/tests/ui/numbered_fields.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.fixed?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,5 +1,6 @@\n //run-rustfix\n #![warn(clippy::init_numbered_fields)]\n+#![allow(unused_tuple_struct_fields)]\n \n #[derive(Default)]\n struct TupleStruct(u32, u32, u8);"}, {"sha": "2ef4fb4de5370becc102ce60feb1278f6ff267be", "filename": "src/tools/clippy/tests/ui/numbered_fields.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,5 +1,6 @@\n //run-rustfix\n #![warn(clippy::init_numbered_fields)]\n+#![allow(unused_tuple_struct_fields)]\n \n #[derive(Default)]\n struct TupleStruct(u32, u32, u8);"}, {"sha": "60c0d7898063f5f07087b3e1da51c47c1603f539", "filename": "src/tools/clippy/tests/ui/numbered_fields.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.stderr?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,5 +1,5 @@\n error: used a field initializer for a tuple struct\n-  --> $DIR/numbered_fields.rs:18:13\n+  --> $DIR/numbered_fields.rs:19:13\n    |\n LL |       let _ = TupleStruct {\n    |  _____________^\n@@ -12,7 +12,7 @@ LL | |     };\n    = note: `-D clippy::init-numbered-fields` implied by `-D warnings`\n \n error: used a field initializer for a tuple struct\n-  --> $DIR/numbered_fields.rs:25:13\n+  --> $DIR/numbered_fields.rs:26:13\n    |\n LL |       let _ = TupleStruct {\n    |  _____________^"}, {"sha": "b6d5e106f057a36ab1503f701f144a37614e98db", "filename": "src/tools/clippy/tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.fixed?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n #![allow(\n+    unused_tuple_struct_fields,\n     clippy::redundant_closure,\n     clippy::ref_option_ref,\n     clippy::equatable_if_let,"}, {"sha": "35bae159343587be7ea1a98c959260a0cc3ab62b", "filename": "src/tools/clippy/tests/ui/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n #![allow(\n+    unused_tuple_struct_fields,\n     clippy::redundant_closure,\n     clippy::ref_option_ref,\n     clippy::equatable_if_let,"}, {"sha": "daba606004e114d68ed95d95682e94a4fd59c7f2", "filename": "src/tools/clippy/tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.stderr?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,5 +1,5 @@\n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:11:5\n+  --> $DIR/option_if_let_else.rs:12:5\n    |\n LL | /     if let Some(x) = string {\n LL | |         (true, x)\n@@ -11,19 +11,19 @@ LL | |     }\n    = note: `-D clippy::option-if-let-else` implied by `-D warnings`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:29:13\n+  --> $DIR/option_if_let_else.rs:30:13\n    |\n LL |     let _ = if let Some(s) = *string { s.len() } else { 0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `string.map_or(0, |s| s.len())`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:30:13\n+  --> $DIR/option_if_let_else.rs:31:13\n    |\n LL |     let _ = if let Some(s) = &num { s } else { &0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.as_ref().map_or(&0, |s| s)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:31:13\n+  --> $DIR/option_if_let_else.rs:32:13\n    |\n LL |       let _ = if let Some(s) = &mut num {\n    |  _____________^\n@@ -43,13 +43,13 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:37:13\n+  --> $DIR/option_if_let_else.rs:38:13\n    |\n LL |     let _ = if let Some(ref s) = num { s } else { &0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.as_ref().map_or(&0, |s| s)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:38:13\n+  --> $DIR/option_if_let_else.rs:39:13\n    |\n LL |       let _ = if let Some(mut s) = num {\n    |  _____________^\n@@ -69,7 +69,7 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:44:13\n+  --> $DIR/option_if_let_else.rs:45:13\n    |\n LL |       let _ = if let Some(ref mut s) = num {\n    |  _____________^\n@@ -89,7 +89,7 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:53:5\n+  --> $DIR/option_if_let_else.rs:54:5\n    |\n LL | /     if let Some(x) = arg {\n LL | |         let y = x * x;\n@@ -108,7 +108,7 @@ LL +     })\n    |\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:66:13\n+  --> $DIR/option_if_let_else.rs:67:13\n    |\n LL |       let _ = if let Some(x) = arg {\n    |  _____________^\n@@ -120,7 +120,7 @@ LL | |     };\n    | |_____^ help: try: `arg.map_or_else(|| side_effect(), |x| x)`\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:75:13\n+  --> $DIR/option_if_let_else.rs:76:13\n    |\n LL |       let _ = if let Some(x) = arg {\n    |  _____________^\n@@ -143,7 +143,7 @@ LL ~     }, |x| x * x * x * x);\n    |\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:108:13\n+  --> $DIR/option_if_let_else.rs:109:13\n    |\n LL | /             if let Some(idx) = s.find('.') {\n LL | |                 vec![s[..idx].to_string(), s[idx..].to_string()]\n@@ -153,13 +153,13 @@ LL | |             }\n    | |_____________^ help: try: `s.find('.').map_or_else(|| vec![s.to_string()], |idx| vec![s[..idx].to_string(), s[idx..].to_string()])`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:132:13\n+  --> $DIR/option_if_let_else.rs:133:13\n    |\n LL |     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `optional.map_or(5, |x| x + 2)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:141:13\n+  --> $DIR/option_if_let_else.rs:142:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^\n@@ -181,13 +181,13 @@ LL ~         });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:169:13\n+  --> $DIR/option_if_let_else.rs:170:13\n    |\n LL |     let _ = if let Some(x) = Some(0) { s.len() + x } else { s.len() };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(0).map_or(s.len(), |x| s.len() + x)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:173:13\n+  --> $DIR/option_if_let_else.rs:174:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^"}, {"sha": "a67363b09ea5ac7e675d053ed791a05466435fb2", "filename": "src/tools/clippy/tests/ui/unreadable_literal.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.fixed?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::unreadable_literal)]\n+#![allow(unused_tuple_struct_fields)]\n \n struct Foo(u64);\n "}, {"sha": "82f04e7ced5279f95e8959ca7e4a8848ad6e6721", "filename": "src/tools/clippy/tests/ui/unreadable_literal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.rs?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::unreadable_literal)]\n+#![allow(unused_tuple_struct_fields)]\n \n struct Foo(u64);\n "}, {"sha": "b51130c6a6abae11e2ba30908ab8a34ec94a9c7b", "filename": "src/tools/clippy/tests/ui/unreadable_literal.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3c7e04a4430942205872a8ed3c67531f22985bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.stderr?ref=e3c7e04a4430942205872a8ed3c67531f22985bc", "patch": "@@ -1,69 +1,69 @@\n error: digits of hex or binary literal not grouped by four\n-  --> $DIR/unreadable_literal.rs:25:9\n+  --> $DIR/unreadable_literal.rs:26:9\n    |\n LL |         0x1_234_567,\n    |         ^^^^^^^^^^^ help: consider: `0x0123_4567`\n    |\n    = note: `-D clippy::unusual-byte-groupings` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:33:17\n+  --> $DIR/unreadable_literal.rs:34:17\n    |\n LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n    |                 ^^^^^^^^^^^^ help: consider: `0b11_0110_i64`\n    |\n    = note: `-D clippy::unreadable-literal` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:33:31\n+  --> $DIR/unreadable_literal.rs:34:31\n    |\n LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n    |                               ^^^^^^^^^^^^^^^^ help: consider: `0x1234_5678_usize`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:33:49\n+  --> $DIR/unreadable_literal.rs:34:49\n    |\n LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n    |                                                 ^^^^^^^^^^ help: consider: `123_456_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:33:61\n+  --> $DIR/unreadable_literal.rs:34:61\n    |\n LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n    |                                                             ^^^^^^^^^^^^ help: consider: `1.234_567_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:35:20\n+  --> $DIR/unreadable_literal.rs:36:20\n    |\n LL |     let _bad_sci = 1.123456e1;\n    |                    ^^^^^^^^^^ help: consider: `1.123_456e1`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:37:18\n+  --> $DIR/unreadable_literal.rs:38:18\n    |\n LL |     let _fail1 = 0xabcdef;\n    |                  ^^^^^^^^ help: consider: `0x00ab_cdef`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:38:23\n+  --> $DIR/unreadable_literal.rs:39:23\n    |\n LL |     let _fail2: u32 = 0xBAFEBAFE;\n    |                       ^^^^^^^^^^ help: consider: `0xBAFE_BAFE`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:39:18\n+  --> $DIR/unreadable_literal.rs:40:18\n    |\n LL |     let _fail3 = 0xabcdeff;\n    |                  ^^^^^^^^^ help: consider: `0x0abc_deff`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:40:24\n+  --> $DIR/unreadable_literal.rs:41:24\n    |\n LL |     let _fail4: i128 = 0xabcabcabcabcabcabc;\n    |                        ^^^^^^^^^^^^^^^^^^^^ help: consider: `0x00ab_cabc_abca_bcab_cabc`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:41:18\n+  --> $DIR/unreadable_literal.rs:42:18\n    |\n LL |     let _fail5 = 1.100300400;\n    |                  ^^^^^^^^^^^ help: consider: `1.100_300_400`"}]}