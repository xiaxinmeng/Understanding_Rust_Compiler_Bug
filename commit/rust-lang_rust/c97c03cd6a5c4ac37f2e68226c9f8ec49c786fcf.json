{"sha": "c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5N2MwM2NkNmE1YzRhYzM3ZjJlNjgyMjZjOWY4ZWM0OWM3ODZmY2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-09T00:43:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-11T00:32:03Z"}, "message": "tests: changes in response to #5656", "tree": {"sha": "0c685c7898e792d0bfc073f9379a1a5ec7023405", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c685c7898e792d0bfc073f9379a1a5ec7023405"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf", "html_url": "https://github.com/rust-lang/rust/commit/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03396473b879b37d68f26588d136c840280b0ab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/03396473b879b37d68f26588d136c840280b0ab5", "html_url": "https://github.com/rust-lang/rust/commit/03396473b879b37d68f26588d136c840280b0ab5"}], "stats": {"total": 139, "additions": 14, "deletions": 125}, "files": [{"sha": "67059e4623e8f836bdc8f72dd3c9ec4a335d1aaa", "filename": "src/test/compile-fail/issue-3311.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/03396473b879b37d68f26588d136c840280b0ab5/src%2Ftest%2Fcompile-fail%2Fissue-3311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03396473b879b37d68f26588d136c840280b0ab5/src%2Ftest%2Fcompile-fail%2Fissue-3311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3311.rs?ref=03396473b879b37d68f26588d136c840280b0ab5", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[legacy_mode]\n-struct Foo<'self> {\n-    s: &'self str,\n-    u: ~()\n-}\n-\n-pub impl<'self> Foo<'self> {\n-    fn get_s(&self) -> &'self str {\n-        self.s\n-    }\n-}\n-\n-fn bar(s: &str, f: &fn(Option<Foo>)) {\n-    f(Some(Foo {s: s, u: ~()}));\n-}\n-\n-fn main() {\n-    do bar(~\"testing\") |opt| {\n-        io::println(opt.unwrap().get_s()); //~ ERROR illegal borrow:\n-    };\n-}"}, {"sha": "38f28bd79dfa1905d9ed09d82583c03d4b5f1ee4", "filename": "src/test/compile-fail/issue-3563.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Fcompile-fail%2Fissue-3563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Fcompile-fail%2Fissue-3563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3563.rs?ref=c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf", "patch": "@@ -10,7 +10,7 @@\n \n trait A {\n   fn a(&self) {\n-      || self.b() //~ ERROR type `&'self Self` does not implement any method in scope named `b`\n+      || self.b() //~ ERROR type `&Self` does not implement any method in scope named `b`\n   }\n }\n fn main() {}"}, {"sha": "35f8557c32b608ff7bd1626aa446bff00b74bb23", "filename": "src/test/compile-fail/issue-3888.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/03396473b879b37d68f26588d136c840280b0ab5/src%2Ftest%2Fcompile-fail%2Fissue-3888.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03396473b879b37d68f26588d136c840280b0ab5/src%2Ftest%2Fcompile-fail%2Fissue-3888.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3888.rs?ref=03396473b879b37d68f26588d136c840280b0ab5", "patch": "@@ -1,42 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// n.b. This should be a run-pass test, but for now I'm testing\n-// that we don't see an \"unknown scope\" error.\n-fn vec_peek<'r, T>(v: &'r [T]) -> Option< (&'r T, &'r [T]) > {\n-    if v.len() == 0 {\n-        None\n-    } else {\n-        let vec_len = v.len();\n-        let head = &v[0];\n-        // note: this *shouldn't* be an illegal borrow! See #3888\n-        let tail = v.slice(1, vec_len); //~ ERROR illegal borrow: borrowed value does not live long enough\n-        Some( (head, tail) )\n-    }\n-}\n-\n-\n-fn test_peek_empty_stack() {\n-    let v : &[int] = &[];\n-    assert!((None == vec_peek(v)));\n-}\n-\n-fn test_peek_empty_unique() {\n-    let v : ~[int] = ~[];\n-    assert!((None == vec_peek(v)));\n-}\n-\n-fn test_peek_empty_managed() {\n-    let v : @[int] = @[];\n-    assert!((None == vec_peek(v)));\n-}\n-\n-\n-fn main() {}"}, {"sha": "b60a54a44bbfdf853fe8874151597b6688813439", "filename": "src/test/compile-fail/issue-3969.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Fcompile-fail%2Fissue-3969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Fcompile-fail%2Fissue-3969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3969.rs?ref=c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf", "patch": "@@ -18,7 +18,7 @@ trait BikeMethods {\n \n impl BikeMethods for Bike {\n     fn woops() -> ~str { ~\"foo\" }\n-    //~^ ERROR method `woops` is declared as static in its impl, but not in its trait\n+    //~^ ERROR has a `&const self` declaration in the trait, but not in the impl\n }\n \n pub fn main() {"}, {"sha": "e8d66ab297b71852a5f9490e89cebcd0646fa8c7", "filename": "src/test/compile-fail/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs?ref=c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf", "patch": "@@ -18,12 +18,12 @@ struct c<'self> {\n     f: @b<'self>\n }\n \n-trait set_f {\n+trait set_f<'self> {\n     fn set_f_ok(&self, b: @b<'self>);\n     fn set_f_bad(&self, b: @b);\n }\n \n-impl<'self> set_f for c<'self> {\n+impl<'self> set_f<'self> for c<'self> {\n     fn set_f_ok(&self, b: @b<'self>) {\n         self.f = b;\n     }"}, {"sha": "9bcf0777bbd349ae3d35ccc482c9381bab14620c", "filename": "src/test/compile-fail/staticness-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs?ref=c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf", "patch": "@@ -14,7 +14,7 @@ trait foo {\n }\n \n impl foo for int {\n-    fn bar(&self) {} //~ ERROR method `bar` is declared as static in its trait, but not in its impl\n+    fn bar(&self) {} //~ ERROR method `bar` has a `&self` declaration in the impl, but not in the trait\n }\n \n fn main() {}"}, {"sha": "e4374e4d225a7b453e1157feb1b8b1e9c3849a94", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf", "patch": "@@ -59,7 +59,7 @@ impl<T> Mutable for cat<T> {\n }\n \n impl<T> Map<int, T> for cat<T> {\n-    fn each(&self, f: &fn(&int, &T) -> bool) {\n+    fn each<'a>(&'a self, f: &fn(&int, &'a T) -> bool) {\n         let mut n = int::abs(self.meows);\n         while n > 0 {\n             if !f(&n, &self.name) { break; }\n@@ -73,7 +73,7 @@ impl<T> Map<int, T> for cat<T> {\n         for self.each |k, _| { if !f(k) { break; } loop;};\n     }\n \n-    fn each_value(&self, f: &fn(v: &T) -> bool) {\n+    fn each_value<'a>(&'a self, f: &fn(v: &'a T) -> bool) {\n         for self.each |_, v| { if !f(v) { break; } loop;};\n     }\n \n@@ -86,15 +86,15 @@ impl<T> Map<int, T> for cat<T> {\n         true\n     }\n \n-    fn find(&self, k: &int) -> Option<&'self T> {\n+    fn find<'a>(&'a self, k: &int) -> Option<&'a T> {\n         if *k <= self.meows {\n             Some(&self.name)\n         } else {\n             None\n         }\n     }\n \n-    fn find_mut(&mut self, _k: &int) -> Option<&'self mut T> { fail!() }\n+    fn find_mut<'a>(&'a mut self, _k: &int) -> Option<&'a mut T> { fail!() }\n \n     fn remove(&mut self, k: &int) -> bool {\n         if self.find(k).is_some() {\n@@ -106,7 +106,7 @@ impl<T> Map<int, T> for cat<T> {\n }\n \n pub impl<T> cat<T> {\n-    fn get(&self, k: &int) -> &'self T {\n+    fn get<'a>(&'a self, k: &int) -> &'a T {\n         match self.find(k) {\n           Some(v) => { v }\n           None    => { fail!(~\"epic fail\"); }"}, {"sha": "7e46bf22c4d92f40b0ea3a02ba09d584b0ac5032", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf", "patch": "@@ -58,7 +58,7 @@ pub impl thing {\n     fn foo(@self) -> int { *self.x.a }\n     fn bar(~self) -> int { *self.x.a }\n     fn quux(&self) -> int { *self.x.a }\n-    fn baz(&self) -> &'self A { &self.x }\n+    fn baz<'a>(&'a self) -> &'a A { &self.x }\n     fn spam(self) -> int { *self.x.a }\n }\n "}, {"sha": "46aa7187c9a02af6785fe263ad4caa557046eb32", "filename": "src/test/run-pass/issue-3860.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Frun-pass%2Fissue-3860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Frun-pass%2Fissue-3860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3860.rs?ref=c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf", "patch": "@@ -11,7 +11,7 @@\n struct Foo { x: int }\n \n pub impl Foo {\n-    fn stuff(&mut self) -> &'self mut Foo {\n+    fn stuff<'a>(&'a mut self) -> &'a mut Foo {\n         return self;\n     }\n }"}, {"sha": "346a0fcfe07939c4ac9c592fa1bbbd9221eee40f", "filename": "src/test/run-pass/regions-parameterization-self-types-issue-5224.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/03396473b879b37d68f26588d136c840280b0ab5/src%2Ftest%2Frun-pass%2Fregions-parameterization-self-types-issue-5224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03396473b879b37d68f26588d136c840280b0ab5/src%2Ftest%2Frun-pass%2Fregions-parameterization-self-types-issue-5224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-parameterization-self-types-issue-5224.rs?ref=03396473b879b37d68f26588d136c840280b0ab5", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test how region-parameterization inference\n-// interacts with explicit self types.\n-//\n-// Issue #5224.\n-\n-trait Getter {\n-    // This trait does not need to be\n-    // region-parameterized, because 'self\n-    // is bound in the self type:\n-    fn get(&self) -> &'self int;\n-}\n-\n-struct Foo {\n-    field: int\n-}\n-\n-impl Getter for Foo {\n-    fn get(&self) -> &'self int { &self.field }\n-}\n-\n-fn get_int<G: Getter>(g: &G) -> int {\n-    *g.get()\n-}\n-\n-pub fn main() {\n-    let foo = Foo { field: 22 };\n-    assert!(get_int(&foo) == 22);\n-}"}, {"sha": "2f4eefe5243add3c61d4ab7ad230b3f29f90259c", "filename": "src/test/run-pass/regions-self-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs?ref=c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf", "patch": "@@ -16,7 +16,7 @@ trait get_chowder<'self> {\n     fn get_chowder(&self) -> &'self int;\n }\n \n-impl<'self> get_chowder for Clam<'self> {\n+impl<'self> get_chowder<'self> for Clam<'self> {\n     fn get_chowder(&self) -> &'self int { return self.chowder; }\n }\n "}, {"sha": "a2ed9da67f264d002e4bb879476e745e79bed72a", "filename": "src/test/run-pass/regions-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-trait.rs?ref=c97c03cd6a5c4ac37f2e68226c9f8ec49c786fcf", "patch": "@@ -16,7 +16,7 @@ trait get_ctxt<'self> {\n \n struct HasCtxt<'self> { c: &'self Ctxt }\n \n-impl<'self> get_ctxt for HasCtxt<'self> {\n+impl<'self> get_ctxt<'self> for HasCtxt<'self> {\n     fn get_ctxt(&self) -> &'self Ctxt {\n         self.c\n     }"}]}