{"sha": "f6341065912ff1b284e54acfec96b000dee81a34", "node_id": "C_kwDOAAsO6NoAKGY2MzQxMDY1OTEyZmYxYjI4NGU1NGFjZmVjOTZiMDAwZGVlODFhMzQ", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-10T14:31:08Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-13T09:32:24Z"}, "message": "resolve: Regroup lifetime rib kinds to account for their purpose", "tree": {"sha": "de215f632e84f7bc3565e990be3d518d0b622cac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de215f632e84f7bc3565e990be3d518d0b622cac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6341065912ff1b284e54acfec96b000dee81a34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6341065912ff1b284e54acfec96b000dee81a34", "html_url": "https://github.com/rust-lang/rust/commit/f6341065912ff1b284e54acfec96b000dee81a34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6341065912ff1b284e54acfec96b000dee81a34/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94ec30dc4205911c53901f1255a47089f95ddd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94ec30dc4205911c53901f1255a47089f95ddd2", "html_url": "https://github.com/rust-lang/rust/commit/e94ec30dc4205911c53901f1255a47089f95ddd2"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "060f7987a5d6df88df96071bd198f11dbdaf2c9d", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f6341065912ff1b284e54acfec96b000dee81a34/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6341065912ff1b284e54acfec96b000dee81a34/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=f6341065912ff1b284e54acfec96b000dee81a34", "patch": "@@ -224,22 +224,14 @@ enum LifetimeUseSet {\n \n #[derive(Copy, Clone, Debug)]\n enum LifetimeRibKind {\n-    /// This rib acts as a barrier to forbid reference to lifetimes of a parent item.\n-    Item,\n-\n+    // -- Ribs introducing named lifetimes\n+    //\n     /// This rib declares generic parameters.\n+    /// Only for this kind the `LifetimeRib::bindings` field can be non-empty.\n     Generics { binder: NodeId, span: Span, kind: LifetimeBinderKind },\n \n-    /// FIXME(const_generics): This patches over an ICE caused by non-'static lifetimes in const\n-    /// generics. We are disallowing this until we can decide on how we want to handle non-'static\n-    /// lifetimes in const generics. See issue #74052 for discussion.\n-    ConstGeneric,\n-\n-    /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics`.\n-    /// This function will emit an error if `generic_const_exprs` is not enabled, the body identified by\n-    /// `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n-    AnonConst,\n-\n+    // -- Ribs introducing unnamed lifetimes\n+    //\n     /// Create a new anonymous lifetime parameter and reference it.\n     ///\n     /// If `report_in_path`, report an error when encountering lifetime elision in a path:\n@@ -256,16 +248,31 @@ enum LifetimeRibKind {\n     /// ```\n     AnonymousCreateParameter { binder: NodeId, report_in_path: bool },\n \n+    /// Replace all anonymous lifetimes by provided lifetime.\n+    Elided(LifetimeRes),\n+\n+    // -- Barrier ribs that stop lifetime lookup, or continue it but produce an error later.\n+    //\n     /// Give a hard error when either `&` or `'_` is written. Used to\n     /// rule out things like `where T: Foo<'_>`. Does not imply an\n     /// error on default object bounds (e.g., `Box<dyn Foo>`).\n     AnonymousReportError,\n \n-    /// Replace all anonymous lifetimes by provided lifetime.\n-    Elided(LifetimeRes),\n-\n     /// Signal we cannot find which should be the anonymous lifetime.\n     ElisionFailure,\n+\n+    /// FIXME(const_generics): This patches over an ICE caused by non-'static lifetimes in const\n+    /// generics. We are disallowing this until we can decide on how we want to handle non-'static\n+    /// lifetimes in const generics. See issue #74052 for discussion.\n+    ConstGeneric,\n+\n+    /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics`.\n+    /// This function will emit an error if `generic_const_exprs` is not enabled, the body\n+    /// identified by `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n+    AnonConst,\n+\n+    /// This rib acts as a barrier to forbid reference to lifetimes of a parent item.\n+    Item,\n }\n \n #[derive(Copy, Clone, Debug)]"}]}