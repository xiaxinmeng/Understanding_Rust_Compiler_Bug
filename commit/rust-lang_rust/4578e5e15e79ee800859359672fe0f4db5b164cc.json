{"sha": "4578e5e15e79ee800859359672fe0f4db5b164cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NzhlNWUxNWU3OWVlODAwODU5MzU5NjcyZmUwZjRkYjViMTY0Y2M=", "commit": {"author": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2019-10-18T05:15:54Z"}, "committer": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2019-10-18T05:15:54Z"}, "message": "Fix suggestion span in `explicit_counter_loop`", "tree": {"sha": "07b6b195e37361e98234bddf1e0868b24e77a101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07b6b195e37361e98234bddf1e0868b24e77a101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4578e5e15e79ee800859359672fe0f4db5b164cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFIBAABCAAyFiEE30PRORiHa0gkBHJnH7R33dJ4Ic4FAl2pSpoUHGhtcGVyc29u\nMUBnbWFpbC5jb20ACgkQH7R33dJ4Ic64SAf/XfiU1kQE8h5Y0BZ9GIUy0aA6Zhul\n6mZqYCum0YRXMt+3cI85ClFwoHe036rcWgImLGMxgeVegfB6jYBgWwpz2x1OHGAD\nwxxb03oJ/kKwEC+csro3qK8PdP4YFeqEk67cdH9PASAXtXXZPRO1UuHkzmUym8EQ\ntHoMeXkX2mUWs1BIJdZ5ZBsxc2VNnzDVcXRn9l0r1Noxi597TK8JY5YFLLhO1slE\nm6bMdzcOXlz+si2pzwukWrA4XE4veutIc1lzPC1Rx/KpGPbykKXD1cfi+uXvZuyi\nKSM7sHAPFClk4o8JGGgvyBb0kRxSqikEBVCY7zEuh0oEDaCT6QVZ5G5MNQ==\n=miT5\n-----END PGP SIGNATURE-----", "payload": "tree 07b6b195e37361e98234bddf1e0868b24e77a101\nparent 72f343934680d27d7a38972a165582198deb3bc4\nauthor HMPerson1 <hmperson1@gmail.com> 1571375754 -0400\ncommitter HMPerson1 <hmperson1@gmail.com> 1571375754 -0400\n\nFix suggestion span in `explicit_counter_loop`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4578e5e15e79ee800859359672fe0f4db5b164cc", "html_url": "https://github.com/rust-lang/rust/commit/4578e5e15e79ee800859359672fe0f4db5b164cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4578e5e15e79ee800859359672fe0f4db5b164cc/comments", "author": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72f343934680d27d7a38972a165582198deb3bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/72f343934680d27d7a38972a165582198deb3bc4", "html_url": "https://github.com/rust-lang/rust/commit/72f343934680d27d7a38972a165582198deb3bc4"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "731dd92c82aefbe4486e504d8fbf0366ae9205a7", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4578e5e15e79ee800859359672fe0f4db5b164cc/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4578e5e15e79ee800859359672fe0f4db5b164cc/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=4578e5e15e79ee800859359672fe0f4db5b164cc", "patch": "@@ -1461,10 +1461,19 @@ fn check_for_loop_explicit_counter<'a, 'tcx>(\n             if visitor2.state == VarState::Warn {\n                 if let Some(name) = visitor2.name {\n                     let mut applicability = Applicability::MachineApplicable;\n+\n+                    // for some reason this is the only way to get the `Span`\n+                    // of the entire `for` loop\n+                    let for_span = if let ExprKind::Match(_, arms, _) = &expr.kind {\n+                        arms[0].body.span\n+                    } else {\n+                        unreachable!()\n+                    };\n+\n                     span_lint_and_sugg(\n                         cx,\n                         EXPLICIT_COUNTER_LOOP,\n-                        expr.span,\n+                        for_span.with_hi(arg.span.hi()),\n                         &format!(\"the variable `{}` is used as a loop counter.\", name),\n                         \"consider using\",\n                         format!("}, {"sha": "1853e0c054c471b40c493007b40fcd2d94b37186", "filename": "tests/ui/explicit_counter_loop.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4578e5e15e79ee800859359672fe0f4db5b164cc/tests%2Fui%2Fexplicit_counter_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4578e5e15e79ee800859359672fe0f4db5b164cc/tests%2Fui%2Fexplicit_counter_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.stderr?ref=4578e5e15e79ee800859359672fe0f4db5b164cc", "patch": "@@ -1,46 +1,46 @@\n error: the variable `_index` is used as a loop counter.\n-  --> $DIR/explicit_counter_loop.rs:6:15\n+  --> $DIR/explicit_counter_loop.rs:6:5\n    |\n LL |     for _v in &vec {\n-   |               ^^^^ help: consider using: `for (_index, _v) in vec.iter().enumerate()`\n+   |     ^^^^^^^^^^^^^^ help: consider using: `for (_index, _v) in vec.iter().enumerate()`\n    |\n    = note: `-D clippy::explicit-counter-loop` implied by `-D warnings`\n \n error: the variable `_index` is used as a loop counter.\n-  --> $DIR/explicit_counter_loop.rs:12:15\n+  --> $DIR/explicit_counter_loop.rs:12:5\n    |\n LL |     for _v in &vec {\n-   |               ^^^^ help: consider using: `for (_index, _v) in vec.iter().enumerate()`\n+   |     ^^^^^^^^^^^^^^ help: consider using: `for (_index, _v) in vec.iter().enumerate()`\n \n error: the variable `_index` is used as a loop counter.\n-  --> $DIR/explicit_counter_loop.rs:17:15\n+  --> $DIR/explicit_counter_loop.rs:17:5\n    |\n LL |     for _v in &mut vec {\n-   |               ^^^^^^^^ help: consider using: `for (_index, _v) in vec.iter_mut().enumerate()`\n+   |     ^^^^^^^^^^^^^^^^^^ help: consider using: `for (_index, _v) in vec.iter_mut().enumerate()`\n \n error: the variable `_index` is used as a loop counter.\n-  --> $DIR/explicit_counter_loop.rs:22:15\n+  --> $DIR/explicit_counter_loop.rs:22:5\n    |\n LL |     for _v in vec {\n-   |               ^^^ help: consider using: `for (_index, _v) in vec.into_iter().enumerate()`\n+   |     ^^^^^^^^^^^^^ help: consider using: `for (_index, _v) in vec.into_iter().enumerate()`\n \n error: the variable `count` is used as a loop counter.\n-  --> $DIR/explicit_counter_loop.rs:61:19\n+  --> $DIR/explicit_counter_loop.rs:61:9\n    |\n LL |         for ch in text.chars() {\n-   |                   ^^^^^^^^^^^^ help: consider using: `for (count, ch) in text.chars().enumerate()`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `for (count, ch) in text.chars().enumerate()`\n \n error: the variable `count` is used as a loop counter.\n-  --> $DIR/explicit_counter_loop.rs:72:19\n+  --> $DIR/explicit_counter_loop.rs:72:9\n    |\n LL |         for ch in text.chars() {\n-   |                   ^^^^^^^^^^^^ help: consider using: `for (count, ch) in text.chars().enumerate()`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `for (count, ch) in text.chars().enumerate()`\n \n error: the variable `count` is used as a loop counter.\n-  --> $DIR/explicit_counter_loop.rs:130:19\n+  --> $DIR/explicit_counter_loop.rs:130:9\n    |\n LL |         for _i in 3..10 {\n-   |                   ^^^^^ help: consider using: `for (count, _i) in 3..10.enumerate()`\n+   |         ^^^^^^^^^^^^^^^ help: consider using: `for (count, _i) in 3..10.enumerate()`\n \n error: aborting due to 7 previous errors\n "}]}