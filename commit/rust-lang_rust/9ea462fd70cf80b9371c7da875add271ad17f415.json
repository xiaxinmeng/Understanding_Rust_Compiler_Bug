{"sha": "9ea462fd70cf80b9371c7da875add271ad17f415", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYTQ2MmZkNzBjZjgwYjkzNzFjN2RhODc1YWRkMjcxYWQxN2Y0MTU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-04T13:45:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-04T13:45:39Z"}, "message": "Rollup merge of #77368 - est31:apfloat_fix, r=varkor\n\nBackport LLVM apfloat commit to rustc_apfloat\n\nBackports LLVM commit: https://github.com/llvm/llvm-project/commit/e34bd1e0b03d20a506ada156d87e1b3a96d82fa2\n\nFixes #69532", "tree": {"sha": "2b857bf81d6abd66a5a9d8f6530000ab2e548b87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b857bf81d6abd66a5a9d8f6530000ab2e548b87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ea462fd70cf80b9371c7da875add271ad17f415", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfedIECRBK7hj4Ov3rIwAAdHIIADb+MYVHqMcN6XuedFNYzox6\nr7Vc1iBOmP0QWTIgnbVoPtpgmG+nbSQ0cIwrUWalbAzoV7r/npWkMebcr4oh/H5C\n12VOyRsDIjd/AOIVvDbRMEB+Udv40R0fRjAQ1XADJkZxjRf3CqctSqV2EiJOjwHz\nuJ/pkLK2TAB/0KJPH1NNkGAitA4MB8hZLfMtfVPchYEYV6lTi97/IF+tx6y063Mi\nJA73r/9cuGY9sGrrEQz2710DWbX7He50L0zTUCS8jIeGebFGyL5R44ok50NRtbog\npvZfqckJIKxU62ZZZ3Uyy3ZvO1fJuSVeQhI+i8Y63c5897PE/T6Ggqu6Ns0bgfY=\n=7WJ4\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b857bf81d6abd66a5a9d8f6530000ab2e548b87\nparent 4ae7710e1df02a1c38f2d2908fbbe5543c2e9d51\nparent d010809c8c0062a4c7a3249254a5193dd1ca15c7\nauthor Jonas Schievink <jonasschievink@gmail.com> 1601819139 +0200\ncommitter GitHub <noreply@github.com> 1601819139 +0200\n\nRollup merge of #77368 - est31:apfloat_fix, r=varkor\n\nBackport LLVM apfloat commit to rustc_apfloat\n\nBackports LLVM commit: https://github.com/llvm/llvm-project/commit/e34bd1e0b03d20a506ada156d87e1b3a96d82fa2\n\nFixes #69532\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea462fd70cf80b9371c7da875add271ad17f415", "html_url": "https://github.com/rust-lang/rust/commit/9ea462fd70cf80b9371c7da875add271ad17f415", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ea462fd70cf80b9371c7da875add271ad17f415/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ae7710e1df02a1c38f2d2908fbbe5543c2e9d51", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae7710e1df02a1c38f2d2908fbbe5543c2e9d51", "html_url": "https://github.com/rust-lang/rust/commit/4ae7710e1df02a1c38f2d2908fbbe5543c2e9d51"}, {"sha": "d010809c8c0062a4c7a3249254a5193dd1ca15c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d010809c8c0062a4c7a3249254a5193dd1ca15c7", "html_url": "https://github.com/rust-lang/rust/commit/d010809c8c0062a4c7a3249254a5193dd1ca15c7"}], "stats": {"total": 73, "additions": 59, "deletions": 14}, "files": [{"sha": "71bcb8f090d07f98a9f50fe31c0e63a83ef9b113", "filename": "compiler/rustc_apfloat/src/ieee.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ea462fd70cf80b9371c7da875add271ad17f415/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea462fd70cf80b9371c7da875add271ad17f415/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs?ref=9ea462fd70cf80b9371c7da875add271ad17f415", "patch": "@@ -1511,11 +1511,16 @@ impl<S: Semantics, T: Semantics> FloatConvert<IeeeFloat<T>> for IeeeFloat<S> {\n                 sig::set_bit(&mut r.sig, T::PRECISION - 1);\n             }\n \n-            // gcc forces the Quiet bit on, which means (float)(double)(float_sNan)\n-            // does not give you back the same bits. This is dubious, and we\n-            // don't currently do it. You're really supposed to get\n-            // an invalid operation signal at runtime, but nobody does that.\n-            status = Status::OK;\n+            // Convert of sNaN creates qNaN and raises an exception (invalid op).\n+            // This also guarantees that a sNaN does not become Inf on a truncation\n+            // that loses all payload bits.\n+            if self.is_signaling() {\n+                // Quiet signaling NaN.\n+                sig::set_bit(&mut r.sig, T::QNAN_BIT);\n+                status = Status::INVALID_OP;\n+            } else {\n+                status = Status::OK;\n+            }\n         } else {\n             *loses_info = false;\n             status = Status::OK;"}, {"sha": "63d925cce9ad7f6e22e55388ef772b127c57bba6", "filename": "compiler/rustc_apfloat/tests/ieee.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9ea462fd70cf80b9371c7da875add271ad17f415/compiler%2Frustc_apfloat%2Ftests%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea462fd70cf80b9371c7da875add271ad17f415/compiler%2Frustc_apfloat%2Ftests%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Ftests%2Fieee.rs?ref=9ea462fd70cf80b9371c7da875add271ad17f415", "patch": "@@ -566,6 +566,17 @@ fn fma() {\n     }\n }\n \n+#[test]\n+fn issue_69532() {\n+    let f = Double::from_bits(0x7FF0_0000_0000_0001u64 as u128);\n+    let mut loses_info = false;\n+    let sta = f.convert(&mut loses_info);\n+    let r: Single = sta.value;\n+    assert!(loses_info);\n+    assert!(r.is_nan());\n+    assert_eq!(sta.status, Status::INVALID_OP);\n+}\n+\n #[test]\n fn min_num() {\n     let f1 = Double::from_f64(1.0);\n@@ -1492,27 +1503,32 @@ fn convert() {\n     assert_eq!(4294967295.0, test.to_f64());\n     assert!(!loses_info);\n \n-    let test = Single::snan(None);\n-    let x87_snan = X87DoubleExtended::snan(None);\n-    let test: X87DoubleExtended = test.convert(&mut loses_info).value;\n-    assert!(test.bitwise_eq(x87_snan));\n-    assert!(!loses_info);\n-\n     let test = Single::qnan(None);\n     let x87_qnan = X87DoubleExtended::qnan(None);\n     let test: X87DoubleExtended = test.convert(&mut loses_info).value;\n     assert!(test.bitwise_eq(x87_qnan));\n     assert!(!loses_info);\n \n-    let test = X87DoubleExtended::snan(None);\n-    let test: X87DoubleExtended = test.convert(&mut loses_info).value;\n-    assert!(test.bitwise_eq(x87_snan));\n+    let test = Single::snan(None);\n+    let sta = test.convert(&mut loses_info);\n+    let test: X87DoubleExtended = sta.value;\n+    assert!(test.is_nan());\n+    assert!(!test.is_signaling());\n     assert!(!loses_info);\n+    assert_eq!(sta.status, Status::INVALID_OP);\n \n     let test = X87DoubleExtended::qnan(None);\n     let test: X87DoubleExtended = test.convert(&mut loses_info).value;\n     assert!(test.bitwise_eq(x87_qnan));\n     assert!(!loses_info);\n+\n+    let test = X87DoubleExtended::snan(None);\n+    let sta = test.convert(&mut loses_info);\n+    let test: X87DoubleExtended = sta.value;\n+    assert!(test.is_nan());\n+    assert!(!test.is_signaling());\n+    assert!(!loses_info);\n+    assert_eq!(sta.status, Status::INVALID_OP);\n }\n \n #[test]"}, {"sha": "81007b15074f7bb82551347652bf04d886b1e432", "filename": "src/test/ui/issues/issue-69532.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9ea462fd70cf80b9371c7da875add271ad17f415/src%2Ftest%2Fui%2Fissues%2Fissue-69532.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea462fd70cf80b9371c7da875add271ad17f415/src%2Ftest%2Fui%2Fissues%2Fissue-69532.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69532.rs?ref=9ea462fd70cf80b9371c7da875add271ad17f415", "patch": "@@ -0,0 +1,24 @@\n+// run-pass\n+#![feature(const_fn_transmute)]\n+\n+const fn make_nans() -> (f64, f64, f32, f32) {\n+    let nan1: f64 = unsafe { std::mem::transmute(0x7FF0_0001_0000_0001u64) };\n+    let nan2: f64 = unsafe { std::mem::transmute(0x7FF0_0000_0000_0001u64) };\n+\n+    let nan1_32 = nan1 as f32;\n+    let nan2_32 = nan2 as f32;\n+\n+    (nan1, nan2, nan1_32, nan2_32)\n+}\n+\n+static NANS: (f64, f64, f32, f32) = make_nans();\n+\n+fn main() {\n+    let (nan1, nan2, nan1_32, nan2_32) = NANS;\n+\n+    assert!(nan1.is_nan());\n+    assert!(nan2.is_nan());\n+\n+    assert!(nan1_32.is_nan());\n+    assert!(nan2_32.is_nan());\n+}"}]}