{"sha": "eb7ce1703bb719c1d038be6572a349a3e70f7ca2", "node_id": "C_kwDOAAsO6NoAKGViN2NlMTcwM2JiNzE5YzFkMDM4YmU2NTcyYTM0OWEzZTcwZjdjYTI", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-10-14T18:50:06Z"}, "committer": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-12-28T11:53:47Z"}, "message": "Use eager translation", "tree": {"sha": "08b05f4bf37f2453cb2d0e450eb110a74e685b8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08b05f4bf37f2453cb2d0e450eb110a74e685b8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb7ce1703bb719c1d038be6572a349a3e70f7ca2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEAWou4Gq79HasRseDspeR1Nh440UFAmOsLksACgkQspeR1Nh4\n40XoCxAAkjIuj4KWoPOJEiD57/8P2BV3M+7rK/f7O4JtnlF8Crs5cJ9dbdNIyOy4\nj0weGp9oMKfoTblJocdbYK2RQm+j8B7q3AaasWymY37sxmbAC3qBk7OdsIrJ5KPs\nnZkL5krRgqxxX64jGSIisU5yHpIlkVWtBY4IQnIQAOWjDxMV2BjYlX9bE2OpUqkA\nbJBsvw6WQtknaUoat2BKQbNv2wRxxXnPccjXUwOaW/G7wewv+c7QXmJtvgmUAU7U\nvjTL7PPFiA7rhH3nX7sfSlSr9PlYrEuEbQS0gm3yok+GSxFIQ8KMcsjcyr4RI6jW\nsZqMZqDE9UEFZGhgadpbPOqnX4VhuDL5Qc8dXFTKhmzsWRLl73COKSxiWjBYzbDj\nCS7lmgXCQlu62N1ljmi+hZseI0G8M/9GhBNvolDWNwpK7k6BR2a/wbu0DJHBLAwl\nXzFAr64VTZSfeDpCn9zeNYgUCH8rkMZI2/dQ0d6sLkGQKC/JJd4lVrthPhCmYiqy\nXUwtNom+2hWrj0aiaE0O8T3Hq7yo6/oOinm/7aciz9Am3zymg+Og/eVluyt9aFnB\nIRu2deUpjTqKvpD3hLODyAVRZRS3+TsT1xYGqJfhyQVtIsZ73CJ8tx5RrzyDZ1iJ\nYZcQNV+3+IJaxZW38zir01jNRfnIJrGcxtwj5uA0K3o3EAGca48=\n=IDLQ\n-----END PGP SIGNATURE-----", "payload": "tree 08b05f4bf37f2453cb2d0e450eb110a74e685b8e\nparent 71d24da665c122fe885d0f62917c01b7f8e8d77f\nauthor Nikita Tomashevich <quant3234@gmail.com> 1665773406 +0300\ncommitter Nikita Tomashevich <quant3234@gmail.com> 1672228427 +0300\n\nUse eager translation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7ce1703bb719c1d038be6572a349a3e70f7ca2", "html_url": "https://github.com/rust-lang/rust/commit/eb7ce1703bb719c1d038be6572a349a3e70f7ca2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb7ce1703bb719c1d038be6572a349a3e70f7ca2/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71d24da665c122fe885d0f62917c01b7f8e8d77f", "url": "https://api.github.com/repos/rust-lang/rust/commits/71d24da665c122fe885d0f62917c01b7f8e8d77f", "html_url": "https://github.com/rust-lang/rust/commit/71d24da665c122fe885d0f62917c01b7f8e8d77f"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "4219964a8773931b98edb1aa3ed5f160a7545de1", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb7ce1703bb719c1d038be6572a349a3e70f7ca2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/eb7ce1703bb719c1d038be6572a349a3e70f7ca2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=eb7ce1703bb719c1d038be6572a349a3e70f7ca2", "patch": "@@ -258,7 +258,7 @@ infer_trait_impl_diff = `impl` item signature doesn't match `trait` item signatu\n                {\"   \"}found `{$found}`\n \n infer_tid_rel_help = verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n-infer_tid_consider_borriwing = consider borrowing this type parameter in the trait\n+infer_tid_consider_borrowing = consider borrowing this type parameter in the trait\n infer_tid_param_help = the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n \n infer_dtcs_has_lifetime_req_label = this has an implicit `'static` lifetime requirement"}, {"sha": "9092874dfae7889464e4d2a977f325d89d8af0c2", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/eb7ce1703bb719c1d038be6572a349a3e70f7ca2/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7ce1703bb719c1d038be6572a349a3e70f7ca2/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=eb7ce1703bb719c1d038be6572a349a3e70f7ca2", "patch": "@@ -544,7 +544,6 @@ pub struct ExplicitLifetimeRequired<'a> {\n \n #[derive(Subdiagnostic)]\n pub enum ActualImplExplNotes {\n-    // Field names have to be different across Expected* and ButActually variants\n     #[note(infer::actual_impl_expl_expected_signature_two)]\n     ExpectedSignatureTwo {\n         leading_ellipsis: bool,\n@@ -731,7 +730,7 @@ pub struct TraitPlaceholderMismatch {\n     pub def_id: String,\n     pub trait_def_id: String,\n \n-    #[subdiagnostic]\n+    #[subdiagnostic(eager)]\n     pub actual_impl_expl_notes: Vec<ActualImplExplNotes>,\n }\n \n@@ -740,12 +739,17 @@ pub struct ConsiderBorrowingParamHelp {\n }\n \n impl AddToDiagnostic for ConsiderBorrowingParamHelp {\n-    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, f: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         let mut type_param_span: MultiSpan = self.spans.clone().into();\n         for &span in &self.spans {\n-            type_param_span.push_span_label(span, fluent::infer::tid_consider_borriwing);\n+            // Seems like we can't call f() here as Into<DiagnosticMessage> is required\n+            type_param_span.push_span_label(span, fluent::infer::tid_consider_borrowing);\n         }\n-        diag.span_help(type_param_span, fluent::infer::tid_param_help);\n+        let msg = f(diag, fluent::infer::tid_param_help.into());\n+        diag.span_help(type_param_span, msg);\n     }\n }\n \n@@ -779,14 +783,19 @@ pub struct DynTraitConstraintSuggestion {\n }\n \n impl AddToDiagnostic for DynTraitConstraintSuggestion {\n-    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, f: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         let mut multi_span: MultiSpan = vec![self.span].into();\n         multi_span.push_span_label(self.span, fluent::infer::dtcs_has_lifetime_req_label);\n         multi_span.push_span_label(self.ident.span, fluent::infer::dtcs_introduces_requirement);\n-        diag.span_note(multi_span, fluent::infer::dtcs_has_req_note);\n+        let msg = f(diag, fluent::infer::dtcs_has_req_note.into());\n+        diag.span_note(multi_span, msg);\n+        let msg = f(diag, fluent::infer::dtcs_suggestion.into());\n         diag.span_suggestion_verbose(\n             self.span.shrink_to_hi(),\n-            fluent::infer::dtcs_suggestion,\n+            msg,\n             \" + '_\",\n             Applicability::MaybeIncorrect,\n         );\n@@ -820,7 +829,10 @@ pub struct ReqIntroducedLocations {\n }\n \n impl AddToDiagnostic for ReqIntroducedLocations {\n-    fn add_to_diagnostic(mut self, diag: &mut rustc_errors::Diagnostic) {\n+    fn add_to_diagnostic_with<F>(mut self, diag: &mut Diagnostic, f: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         for sp in self.spans {\n             self.span.push_span_label(sp, fluent::infer::ril_introduced_here);\n         }\n@@ -829,7 +841,8 @@ impl AddToDiagnostic for ReqIntroducedLocations {\n             self.span.push_span_label(self.fn_decl_span, fluent::infer::ril_introduced_by);\n         }\n         self.span.push_span_label(self.cause_span, fluent::infer::ril_because_of);\n-        diag.span_note(self.span, fluent::infer::ril_static_introduced_by);\n+        let msg = f(diag, fluent::infer::ril_static_introduced_by.into());\n+        diag.span_note(self.span, msg);\n     }\n }\n \n@@ -838,7 +851,10 @@ pub struct MoreTargeted {\n }\n \n impl AddToDiagnostic for MoreTargeted {\n-    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _f: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         diag.code(rustc_errors::error_code!(E0772));\n         diag.set_primary_message(fluent::infer::more_targeted);\n         diag.set_arg(\"ident\", self.ident);"}]}