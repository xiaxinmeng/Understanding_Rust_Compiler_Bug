{"sha": "644b931437402d9e27606923bda4f63b7365d516", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NGI5MzE0Mzc0MDJkOWUyNzYwNjkyM2JkYTRmNjNiNzM2NWQ1MTY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-01T22:24:07Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-01T22:24:07Z"}, "message": "Rollup merge of #22922 - dotdash:closure_env_attr, r=eddyb", "tree": {"sha": "61445799492a521ade6c497981849a1c00c2d9c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61445799492a521ade6c497981849a1c00c2d9c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/644b931437402d9e27606923bda4f63b7365d516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/644b931437402d9e27606923bda4f63b7365d516", "html_url": "https://github.com/rust-lang/rust/commit/644b931437402d9e27606923bda4f63b7365d516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/644b931437402d9e27606923bda4f63b7365d516/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb28214dcc1ee7dddaa6d318352937fa3e5ce0b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb28214dcc1ee7dddaa6d318352937fa3e5ce0b2", "html_url": "https://github.com/rust-lang/rust/commit/fb28214dcc1ee7dddaa6d318352937fa3e5ce0b2"}, {"sha": "549be5f867764e30d425790e8728da75411f6fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/549be5f867764e30d425790e8728da75411f6fec", "html_url": "https://github.com/rust-lang/rust/commit/549be5f867764e30d425790e8728da75411f6fec"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "1f578ac0bdbab2b8d80d354d73af7934cec02137", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/644b931437402d9e27606923bda4f63b7365d516/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644b931437402d9e27606923bda4f63b7365d516/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=644b931437402d9e27606923bda4f63b7365d516", "patch": "@@ -2435,21 +2435,19 @@ pub fn get_fn_llvm_attributes<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_ty: Ty<\n     use middle::ty::{BrAnon, ReLateBound};\n \n     let function_type;\n-    let (fn_sig, abi, has_env) = match fn_ty.sty {\n-        ty::ty_bare_fn(_, ref f) => (&f.sig, f.abi, false),\n+    let (fn_sig, abi, env_ty) = match fn_ty.sty {\n+        ty::ty_bare_fn(_, ref f) => (&f.sig, f.abi, None),\n         ty::ty_closure(closure_did, _, substs) => {\n             let typer = common::NormalizingClosureTyper::new(ccx.tcx());\n             function_type = typer.closure_type(closure_did, substs);\n-            (&function_type.sig, RustCall, true)\n+            let self_type = self_type_for_closure(ccx, closure_did, fn_ty);\n+            (&function_type.sig, RustCall, Some(self_type))\n         }\n         _ => ccx.sess().bug(\"expected closure or function.\")\n     };\n \n     let fn_sig = ty::erase_late_bound_regions(ccx.tcx(), fn_sig);\n \n-    // Since index 0 is the return value of the llvm func, we start\n-    // at either 1 or 2 depending on whether there's an env slot or not\n-    let mut first_arg_offset = if has_env { 2 } else { 1 };\n     let mut attrs = llvm::AttrBuilder::new();\n     let ret_ty = fn_sig.output;\n \n@@ -2460,7 +2458,11 @@ pub fn get_fn_llvm_attributes<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_ty: Ty<\n             assert!(abi == RustCall);\n \n             match fn_sig.inputs[0].sty {\n-                ty::ty_tup(ref inputs) => inputs.clone(),\n+                ty::ty_tup(ref inputs) => {\n+                    let mut full_inputs = vec![env_ty.expect(\"Missing closure environment\")];\n+                    full_inputs.push_all(inputs);\n+                    full_inputs\n+                }\n                 _ => ccx.sess().bug(\"expected tuple'd inputs\")\n             }\n         },\n@@ -2478,6 +2480,8 @@ pub fn get_fn_llvm_attributes<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_ty: Ty<\n         _ => fn_sig.inputs.clone()\n     };\n \n+    // Index 0 is the return value of the llvm func, so we start at 1\n+    let mut first_arg_offset = 1;\n     if let ty::FnConverging(ret_ty) = ret_ty {\n         // A function pointer is called without the declaration\n         // available, so we have to apply any attributes with ABI"}]}