{"sha": "d40c13ae02900e7bdef494d0212eb99335b7616c", "node_id": "C_kwDOAAsO6NoAKGQ0MGMxM2FlMDI5MDBlN2JkZWY0OTRkMDIxMmViOTkzMzViNzYxNmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-15T20:30:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-15T20:30:56Z"}, "message": "Rollup merge of #107972 - saethlin:fix-test-ub, r=michaelwoerister\n\nFix unintentional UB in ui tests\n\n`@matthiaskrgr` found UB in a bunch of the ui tests. This PR fixes a batch of miscellaneous tests I didn't think needed reviewers from a particular part of the project.", "tree": {"sha": "a944b0b93f09970e455f604161cae443c2cbe6cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a944b0b93f09970e455f604161cae443c2cbe6cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d40c13ae02900e7bdef494d0212eb99335b7616c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj7UEACRBK7hj4Ov3rIwAA/zMIAACKWBOPuI2c2CWKzM1ie66K\nNXdJYpA1b0vLj8ytccbOX85UKjrF2mIrFmqiV2GNUT7DeiIV/4cOPsdx/Wa3jrSV\nAEEOTNpAvk1wkR1ivK/ukiGqkpf3ZvHZsnYyDkprhNOb9yIBbC+6YgQ3FLJThBoN\nZ+ojo4FJlGJ98l8TGM8IHYqdh5XERbP8JlDp53UzXdRxuSt0cuslEuAQZ52mGMei\n9cXGsNMuoUL3A3d+s+fN7XqtxhfkkVjLGqmVoKBbuoeqted+n1RIwBaRBMiNOhFT\nCvUMtZF2zR9aAXl8XE6ODcKc/OLR87prb/dKNoU/WbuwFmjC96ExrBktIkKCNS0=\n=hIXc\n-----END PGP SIGNATURE-----\n", "payload": "tree a944b0b93f09970e455f604161cae443c2cbe6cc\nparent 1fdf0e1334a61b8c7e3d6e91c83c19bb3a27e28f\nparent de01ea26c915cc1acdd739da2150d39d144bbcad\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676493056 +0100\ncommitter GitHub <noreply@github.com> 1676493056 +0100\n\nRollup merge of #107972 - saethlin:fix-test-ub, r=michaelwoerister\n\nFix unintentional UB in ui tests\n\n`@matthiaskrgr` found UB in a bunch of the ui tests. This PR fixes a batch of miscellaneous tests I didn't think needed reviewers from a particular part of the project.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d40c13ae02900e7bdef494d0212eb99335b7616c", "html_url": "https://github.com/rust-lang/rust/commit/d40c13ae02900e7bdef494d0212eb99335b7616c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d40c13ae02900e7bdef494d0212eb99335b7616c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fdf0e1334a61b8c7e3d6e91c83c19bb3a27e28f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fdf0e1334a61b8c7e3d6e91c83c19bb3a27e28f", "html_url": "https://github.com/rust-lang/rust/commit/1fdf0e1334a61b8c7e3d6e91c83c19bb3a27e28f"}, {"sha": "de01ea26c915cc1acdd739da2150d39d144bbcad", "url": "https://api.github.com/repos/rust-lang/rust/commits/de01ea26c915cc1acdd739da2150d39d144bbcad", "html_url": "https://github.com/rust-lang/rust/commit/de01ea26c915cc1acdd739da2150d39d144bbcad"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "b74b5e94e2b751ae00a03c7abedad480802cd9d8", "filename": "tests/ui/closures/2229_closure_analysis/migrations/auto_traits.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed?ref=d40c13ae02900e7bdef494d0212eb99335b7616c", "patch": "@@ -26,7 +26,7 @@ fn test_send_trait() {\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0 = 20;\n         //~^ NOTE: in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0`\n-    } });\n+    } }).join().unwrap();\n }\n \n /* Test Sync Trait Migration */\n@@ -47,7 +47,7 @@ fn test_sync_trait() {\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n         //~^ NOTE: in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0.0`\n-    } });\n+    } }).join().unwrap();\n }\n \n /* Test Clone Trait Migration */"}, {"sha": "e4965e33cc16fce2f117efe56ae8549063d29bf7", "filename": "tests/ui/closures/2229_closure_analysis/migrations/auto_traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs?ref=d40c13ae02900e7bdef494d0212eb99335b7616c", "patch": "@@ -26,7 +26,7 @@ fn test_send_trait() {\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0 = 20;\n         //~^ NOTE: in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0`\n-    });\n+    }).join().unwrap();\n }\n \n /* Test Sync Trait Migration */\n@@ -47,7 +47,7 @@ fn test_sync_trait() {\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n         //~^ NOTE: in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0.0`\n-    });\n+    }).join().unwrap();\n }\n \n /* Test Clone Trait Migration */"}, {"sha": "856ec4a5b9eb3fa7007409608e3640b642c65152", "filename": "tests/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=d40c13ae02900e7bdef494d0212eb99335b7616c", "patch": "@@ -19,7 +19,7 @@ LL ~     thread::spawn(move || { let _ = &fptr; unsafe {\n LL |\n  ...\n LL |\n-LL ~     } });\n+LL ~     } }).join().unwrap();\n    |\n \n error: changes to closure capture in Rust 2021 will affect which traits the closure implements\n@@ -41,7 +41,7 @@ LL ~     thread::spawn(move || { let _ = &fptr; unsafe {\n LL |\n  ...\n LL |\n-LL ~     } });\n+LL ~     } }).join().unwrap();\n    |\n \n error: changes to closure capture in Rust 2021 will affect drop order and which traits the closure implements"}, {"sha": "bde8c7497310d76149bd2c341caca5771d7feae8", "filename": "tests/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed?ref=d40c13ae02900e7bdef494d0212eb99335b7616c", "patch": "@@ -145,7 +145,7 @@ fn test_multi_traits_issues() {\n         //~^ NOTE: in Rust 2018, this closure captures all of `fptr1`, but in Rust 2021, it will only capture `fptr1.0.0`\n         *fptr2.0 = 20;\n         //~^ NOTE: in Rust 2018, this closure captures all of `fptr2`, but in Rust 2021, it will only capture `fptr2.0`\n-    } });\n+    } }).join().unwrap();\n }\n \n fn main() {"}, {"sha": "584c52ea134303adecd8b6e7eba7cc4ff597125e", "filename": "tests/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs?ref=d40c13ae02900e7bdef494d0212eb99335b7616c", "patch": "@@ -141,7 +141,7 @@ fn test_multi_traits_issues() {\n         //~^ NOTE: in Rust 2018, this closure captures all of `fptr1`, but in Rust 2021, it will only capture `fptr1.0.0`\n         *fptr2.0 = 20;\n         //~^ NOTE: in Rust 2018, this closure captures all of `fptr2`, but in Rust 2021, it will only capture `fptr2.0`\n-    });\n+    }).join().unwrap();\n }\n \n fn main() {"}, {"sha": "344bc662ee73feddf4236ba7c82f89658db804ae", "filename": "tests/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr?ref=d40c13ae02900e7bdef494d0212eb99335b7616c", "patch": "@@ -111,7 +111,7 @@ LL ~     thread::spawn(move || { let _ = (&fptr1, &fptr2); unsafe {\n LL |\n  ...\n LL |\n-LL ~     } });\n+LL ~     } }).join().unwrap();\n    |\n \n error: aborting due to 5 previous errors"}, {"sha": "c9aaa6e558747f482244580b1136fcd971fdc6c6", "filename": "tests/ui/consts/const-eval/issue-91827-extern-types.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-91827-extern-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-91827-extern-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-91827-extern-types.rs?ref=d40c13ae02900e7bdef494d0212eb99335b7616c", "patch": "@@ -28,7 +28,10 @@ pub struct ListImpl<T, const N: usize> {\n \n impl<T> List<T> {\n     const fn as_slice(&self) -> &[T] {\n-        unsafe { std::slice::from_raw_parts(self.data.as_ptr(), self.len) }\n+        unsafe {\n+            let ptr = addr_of!(self.tail) as *const T;\n+            std::slice::from_raw_parts(ptr, self.len)\n+        }\n     }\n }\n "}, {"sha": "a3f92be6cf61fccbb4c549cdd76c0223dc31f135", "filename": "tests/ui/unsized/unsized3-rpass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Funsized%2Funsized3-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40c13ae02900e7bdef494d0212eb99335b7616c/tests%2Fui%2Funsized%2Funsized3-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized3-rpass.rs?ref=d40c13ae02900e7bdef494d0212eb99335b7616c", "patch": "@@ -59,7 +59,7 @@ pub fn main() {\n         }\n \n         let data: Box<Foo_<i32>> = Box::new(Foo_ { f: [1, 2, 3] });\n-        let x: &Foo<i32> = mem::transmute(slice::from_raw_parts(&*data, 3));\n+        let x: &Foo<i32> = mem::transmute(ptr::slice_from_raw_parts(&*data, 3));\n         assert_eq!(x.f.len(), 3);\n         assert_eq!(x.f[0], 1);\n \n@@ -70,7 +70,7 @@ pub fn main() {\n \n         let data: Box<_> =\n             Box::new(Baz_ { f1: 42, f2: ['a' as u8, 'b' as u8, 'c' as u8, 'd' as u8, 'e' as u8] });\n-        let x: &Baz = mem::transmute(slice::from_raw_parts(&*data, 5));\n+        let x: &Baz = mem::transmute(ptr::slice_from_raw_parts(&*data, 5));\n         assert_eq!(x.f1, 42);\n         let chs: Vec<char> = x.f2.chars().collect();\n         assert_eq!(chs.len(), 5);"}]}