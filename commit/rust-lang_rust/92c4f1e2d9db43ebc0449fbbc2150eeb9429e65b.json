{"sha": "92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "node_id": "C_kwDOAAsO6NoAKDkyYzRmMWUyZDlkYjQzZWJjMDQ0OWZiYmMyMTUwZWViOTQyOWU2NWI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-22T18:00:33Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-28T09:51:50Z"}, "message": "Take a LocalDefId in hir::Visitor::visit_fn.", "tree": {"sha": "4edef5255b1a17f3904e4670624c0b1df3776b9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4edef5255b1a17f3904e4670624c0b1df3776b9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "html_url": "https://github.com/rust-lang/rust/commit/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06e785548b1367c581c0713fa66635e074b2425e", "url": "https://api.github.com/repos/rust-lang/rust/commits/06e785548b1367c581c0713fa66635e074b2425e", "html_url": "https://github.com/rust-lang/rust/commit/06e785548b1367c581c0713fa66635e074b2425e"}], "stats": {"total": 322, "additions": 175, "deletions": 147}, "files": [{"sha": "e8106beec37423b191d554b31c4700f8922bb776", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -6,9 +6,10 @@ use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n-use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, HirId, UnOp};\n+use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n@@ -82,7 +83,7 @@ impl<'tcx> LateLintPass<'tcx> for NonminimalBool {\n         _: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         _: Span,\n-        _: HirId,\n+        _: LocalDefId,\n     ) {\n         NonminimalBoolVisitor { cx }.visit_body(body);\n     }"}, {"sha": "e8531157e0f7a538465c5adf5b3c4d055ea322d1", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -8,9 +8,10 @@ use clippy_utils::{get_async_fn_body, is_async_fn, LimitStack};\n use core::ops::ControlFlow;\n use rustc_ast::ast::Attribute;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId};\n+use rustc_hir::{Body, Expr, ExprKind, FnDecl};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::{sym, BytePos};\n \n@@ -140,9 +141,8 @@ impl<'tcx> LateLintPass<'tcx> for CognitiveComplexity {\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n-        hir_id: HirId,\n+        def_id: LocalDefId,\n     ) {\n-        let def_id = cx.tcx.hir().local_def_id(hir_id);\n         if !cx.tcx.has_attr(def_id.to_def_id(), sym::test) {\n             let expr = if is_async_fn(kind) {\n                 match get_async_fn_body(cx.tcx, body) {"}, {"sha": "f8fc726d603f8dd5a32fdc1f5c740de1871f4f01", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -7,7 +7,7 @@ use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, Visitor};\n use rustc_hir::{\n-    self as hir, BlockCheckMode, BodyId, Constness, Expr, ExprKind, FnDecl, HirId, Impl, Item, ItemKind, UnsafeSource,\n+    self as hir, BlockCheckMode, BodyId, Constness, Expr, ExprKind, FnDecl, Impl, Item, ItemKind, UnsafeSource,\n     Unsafety,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -18,6 +18,7 @@ use rustc_middle::ty::{\n     TraitPredicate, Ty, TyCtxt,\n };\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n@@ -425,7 +426,7 @@ struct UnsafeVisitor<'a, 'tcx> {\n impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_fn(&mut self, kind: FnKind<'tcx>, decl: &'tcx FnDecl<'_>, body_id: BodyId, _: Span, id: HirId) {\n+    fn visit_fn(&mut self, kind: FnKind<'tcx>, decl: &'tcx FnDecl<'_>, body_id: BodyId, _: Span, id: LocalDefId) {\n         if self.has_unsafe {\n             return;\n         }"}, {"sha": "127201b72e275948a46124bcb0c3cb7e97fac2e7", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -23,7 +23,6 @@ use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_parse::parser::ForceCollect;\n use rustc_session::parse::ParseSess;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::def_id::LocalDefId;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{BytePos, FilePathMapping, SourceMap, Span};\n use rustc_span::{sym, FileName, Pos};\n@@ -302,7 +301,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n                         panic_span: None,\n                     };\n                     fpu.visit_expr(body.value);\n-                    lint_for_missing_headers(cx, item.owner_id.def_id, sig, headers, Some(body_id), fpu.panic_span);\n+                    lint_for_missing_headers(cx, item.owner_id, sig, headers, Some(body_id), fpu.panic_span);\n                 }\n             },\n             hir::ItemKind::Impl(impl_) => {\n@@ -338,7 +337,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         let Some(headers) = check_attrs(cx, &self.valid_idents, attrs) else { return };\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n-                lint_for_missing_headers(cx, item.owner_id.def_id, sig, headers, None, None);\n+                lint_for_missing_headers(cx, item.owner_id, sig, headers, None, None);\n             }\n         }\n     }\n@@ -357,34 +356,34 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n                 panic_span: None,\n             };\n             fpu.visit_expr(body.value);\n-            lint_for_missing_headers(cx, item.owner_id.def_id, sig, headers, Some(body_id), fpu.panic_span);\n+            lint_for_missing_headers(cx, item.owner_id, sig, headers, Some(body_id), fpu.panic_span);\n         }\n     }\n }\n \n fn lint_for_missing_headers(\n     cx: &LateContext<'_>,\n-    def_id: LocalDefId,\n+    owner_id: hir::OwnerId,\n     sig: &hir::FnSig<'_>,\n     headers: DocHeaders,\n     body_id: Option<hir::BodyId>,\n     panic_span: Option<Span>,\n ) {\n-    if !cx.effective_visibilities.is_exported(def_id) {\n+    if !cx.effective_visibilities.is_exported(owner_id.def_id) {\n         return; // Private functions do not require doc comments\n     }\n \n     // do not lint if any parent has `#[doc(hidden)]` attribute (#7347)\n     if cx\n         .tcx\n         .hir()\n-        .parent_iter(cx.tcx.hir().local_def_id_to_hir_id(def_id))\n+        .parent_iter(owner_id.into())\n         .any(|(id, _node)| is_doc_hidden(cx.tcx.hir().attrs(id)))\n     {\n         return;\n     }\n \n-    let span = cx.tcx.def_span(def_id);\n+    let span = cx.tcx.def_span(owner_id);\n     match (headers.safety, sig.header.unsafety) {\n         (false, hir::Unsafety::Unsafe) => span_lint(\n             cx,\n@@ -411,8 +410,7 @@ fn lint_for_missing_headers(\n         );\n     }\n     if !headers.errors {\n-        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n-        if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::Result) {\n+        if is_type_diagnostic_item(cx, return_ty(cx, owner_id), sym::Result) {\n             span_lint(\n                 cx,\n                 MISSING_ERRORS_DOC,"}, {"sha": "d6ab4c25e83ef9a4593be1406173c043fd5c2585", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -8,6 +8,7 @@ use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, TraitRef, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::kw;\n use rustc_target::spec::abi::Abi;\n@@ -63,15 +64,19 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n         _: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         _: Span,\n-        hir_id: HirId,\n+        fn_def_id: LocalDefId,\n     ) {\n         if let Some(header) = fn_kind.header() {\n             if header.abi != Abi::Rust {\n                 return;\n             }\n         }\n \n-        let parent_id = cx.tcx.hir().get_parent_item(hir_id).def_id;\n+        let parent_id = cx\n+            .tcx\n+            .hir()\n+            .get_parent_item(cx.tcx.hir().local_def_id_to_hir_id(fn_def_id))\n+            .def_id;\n         let parent_node = cx.tcx.hir().find_by_def_id(parent_id);\n \n         let mut trait_self_ty = None;\n@@ -84,7 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n             // find `self` ty for this trait if relevant\n             if let ItemKind::Trait(_, _, _, _, items) = item.kind {\n                 for trait_item in items {\n-                    if trait_item.id.hir_id() == hir_id {\n+                    if trait_item.id.owner_id.def_id == fn_def_id {\n                         // be sure we have `self` parameter in this function\n                         if trait_item.kind == (AssocItemKind::Fn { has_self: true }) {\n                             trait_self_ty = Some(\n@@ -105,7 +110,6 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n             too_large_for_stack: self.too_large_for_stack,\n         };\n \n-        let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n         let infcx = cx.tcx.infer_ctxt().build();\n         ExprUseVisitor::new(&mut v, &infcx, fn_def_id, cx.param_env, cx.typeck_results()).consume_body(body);\n "}, {"sha": "9d089fcad70e695ccf8cf04160de13b42dccd497", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -1,10 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::{get_parent_as_impl, has_repr_attr, is_bool};\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, FnDecl, HirId, Item, ItemKind, TraitFn, TraitItem, TraitItemKind, Ty};\n+use rustc_hir::{Body, FnDecl, Item, ItemKind, TraitFn, TraitItem, TraitItemKind, Ty};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n+use rustc_span::def_id::LocalDefId;\n use rustc_target::spec::abi::Abi;\n \n declare_clippy_lint! {\n@@ -168,8 +169,9 @@ impl<'tcx> LateLintPass<'tcx> for ExcessiveBools {\n         fn_decl: &'tcx FnDecl<'tcx>,\n         _: &'tcx Body<'tcx>,\n         span: Span,\n-        hir_id: HirId,\n+        def_id: LocalDefId,\n     ) {\n+        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n         if let Some(fn_header) = fn_kind.header()\n             && fn_header.abi == Abi::Rust\n             && get_parent_as_impl(cx.tcx, hir_id)"}, {"sha": "9fd13084dc9e860b191a8e5de5f5b23e77ba5686", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -79,8 +79,7 @@ impl LateLintPass<'_> for ExhaustiveItems {\n             then {\n                 let (lint, msg) = if let ItemKind::Struct(ref v, ..) = item.kind {\n                     if v.fields().iter().any(|f| {\n-                        let def_id = cx.tcx.hir().local_def_id(f.hir_id);\n-                        !cx.tcx.visibility(def_id).is_public()\n+                        !cx.tcx.visibility(f.def_id).is_public()\n                     }) {\n                         // skip structs with private fields\n                         return;"}, {"sha": "d6b50537c2e1d91e97195eeadbac58df8c5a9604", "filename": "clippy_lints/src/functions/misnamed_getters.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet;\n use rustc_errors::Applicability;\n-use rustc_hir::{intravisit::FnKind, Body, ExprKind, FnDecl, HirId, ImplicitSelfKind, Unsafety};\n+use rustc_hir::{intravisit::FnKind, Body, ExprKind, FnDecl, ImplicitSelfKind, Unsafety};\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n use rustc_span::Span;\n@@ -16,7 +16,6 @@ pub fn check_fn(\n     decl: &FnDecl<'_>,\n     body: &Body<'_>,\n     span: Span,\n-    _hir_id: HirId,\n ) {\n     let FnKind::Method(ref ident, sig) = kind else {\n             return;"}, {"sha": "4399c68e130f7b7330c1c2a6f782d26ab297fc1d", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -9,6 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::intravisit;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::Span;\n \n declare_clippy_lint! {\n@@ -363,12 +364,13 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         decl: &'tcx hir::FnDecl<'_>,\n         body: &'tcx hir::Body<'_>,\n         span: Span,\n-        hir_id: hir::HirId,\n+        def_id: LocalDefId,\n     ) {\n+        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n         too_many_arguments::check_fn(cx, kind, decl, span, hir_id, self.too_many_arguments_threshold);\n         too_many_lines::check_fn(cx, kind, span, body, self.too_many_lines_threshold);\n-        not_unsafe_ptr_arg_deref::check_fn(cx, kind, decl, body, hir_id);\n-        misnamed_getters::check_fn(cx, kind, decl, body, span, hir_id);\n+        not_unsafe_ptr_arg_deref::check_fn(cx, kind, decl, body, def_id);\n+        misnamed_getters::check_fn(cx, kind, decl, body, span);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {"}, {"sha": "29bdc46b647d5a8b807803d34f56949d5e0289bb", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n-use rustc_hir::def_id::{DefIdSet, LocalDefId};\n+use rustc_hir::def_id::DefIdSet;\n use rustc_hir::{self as hir, def::Res, QPath};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::{\n@@ -27,14 +27,14 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>\n         let is_public = cx.effective_visibilities.is_exported(item.owner_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         if let Some(attr) = attr {\n-            check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n+            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n         } else if is_public && !is_proc_macro(cx.sess(), attrs) && !attrs.iter().any(|a| a.has_name(sym::no_mangle)) {\n             check_must_use_candidate(\n                 cx,\n                 sig.decl,\n                 cx.tcx.hir().body(*body_id),\n                 item.span,\n-                item.owner_id.def_id,\n+                item.owner_id,\n                 item.span.with_hi(sig.decl.output.span().hi()),\n                 \"this function could have a `#[must_use]` attribute\",\n             );\n@@ -49,7 +49,7 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n         let attr = cx.tcx.get_attr(item.owner_id.to_def_id(), sym::must_use);\n         if let Some(attr) = attr {\n-            check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n+            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n         } else if is_public\n             && !is_proc_macro(cx.sess(), attrs)\n             && trait_ref_of_method(cx, item.owner_id.def_id).is_none()\n@@ -59,7 +59,7 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n                 sig.decl,\n                 cx.tcx.hir().body(*body_id),\n                 item.span,\n-                item.owner_id.def_id,\n+                item.owner_id,\n                 item.span.with_hi(sig.decl.output.span().hi()),\n                 \"this method could have a `#[must_use]` attribute\",\n             );\n@@ -75,7 +75,7 @@ pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Tr\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n         let attr = cx.tcx.get_attr(item.owner_id.to_def_id(), sym::must_use);\n         if let Some(attr) = attr {\n-            check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n+            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n         } else if let hir::TraitFn::Provided(eid) = *eid {\n             let body = cx.tcx.hir().body(eid);\n             if attr.is_none() && is_public && !is_proc_macro(cx.sess(), attrs) {\n@@ -84,7 +84,7 @@ pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Tr\n                     sig.decl,\n                     body,\n                     item.span,\n-                    item.owner_id.def_id,\n+                    item.owner_id,\n                     item.span.with_hi(sig.decl.output.span().hi()),\n                     \"this method could have a `#[must_use]` attribute\",\n                 );\n@@ -96,7 +96,7 @@ pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Tr\n fn check_needless_must_use(\n     cx: &LateContext<'_>,\n     decl: &hir::FnDecl<'_>,\n-    item_id: hir::HirId,\n+    item_id: hir::OwnerId,\n     item_span: Span,\n     fn_header_span: Span,\n     attr: &Attribute,\n@@ -131,16 +131,16 @@ fn check_must_use_candidate<'tcx>(\n     decl: &'tcx hir::FnDecl<'_>,\n     body: &'tcx hir::Body<'_>,\n     item_span: Span,\n-    item_id: LocalDefId,\n+    item_id: hir::OwnerId,\n     fn_span: Span,\n     msg: &str,\n ) {\n     if has_mutable_arg(cx, body)\n         || mutates_static(cx, body)\n         || in_external_macro(cx.sess(), item_span)\n         || returns_unit(decl)\n-        || !cx.effective_visibilities.is_exported(item_id)\n-        || is_must_use_ty(cx, return_ty(cx, cx.tcx.hir().local_def_id_to_hir_id(item_id)))\n+        || !cx.effective_visibilities.is_exported(item_id.def_id)\n+        || is_must_use_ty(cx, return_ty(cx, item_id))\n     {\n         return;\n     }"}, {"sha": "a13909a2cdb8fe9016ebc016eebc35285ba0f489", "filename": "clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -17,15 +17,15 @@ pub(super) fn check_fn<'tcx>(\n     kind: intravisit::FnKind<'tcx>,\n     decl: &'tcx hir::FnDecl<'tcx>,\n     body: &'tcx hir::Body<'tcx>,\n-    hir_id: hir::HirId,\n+    def_id: LocalDefId,\n ) {\n     let unsafety = match kind {\n         intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }) => unsafety,\n         intravisit::FnKind::Method(_, sig) => sig.header.unsafety,\n         intravisit::FnKind::Closure => return,\n     };\n \n-    check_raw_ptr(cx, unsafety, decl, body, cx.tcx.hir().local_def_id(hir_id));\n+    check_raw_ptr(cx, unsafety, decl, body, def_id)\n }\n \n pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {"}, {"sha": "9fb73a371b8f478505a64142671b96256328c1bf", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -1,11 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::return_ty;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, FnDecl, HirId};\n+use rustc_hir::{Body, FnDecl};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, AliasTy, Clause, EarlyBinder, PredicateKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::TypeErrCtxtExt;\n use rustc_trait_selection::traits::{self, FulfillmentError};\n@@ -56,12 +57,12 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n         decl: &'tcx FnDecl<'tcx>,\n         _: &'tcx Body<'tcx>,\n         _: Span,\n-        hir_id: HirId,\n+        fn_def_id: LocalDefId,\n     ) {\n         if let FnKind::Closure = kind {\n             return;\n         }\n-        let ret_ty = return_ty(cx, hir_id);\n+        let ret_ty = return_ty(cx, cx.tcx.hir().local_def_id_to_hir_id(fn_def_id).expect_owner());\n         if let ty::Alias(ty::Opaque, AliasTy { def_id, substs, .. }) = *ret_ty.kind() {\n             let preds = cx.tcx.explicit_item_bounds(def_id);\n             let mut is_future = false;\n@@ -78,8 +79,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                 let send_trait = cx.tcx.get_diagnostic_item(sym::Send).unwrap();\n                 let span = decl.output.span();\n                 let infcx = cx.tcx.infer_ctxt().build();\n-                let def_id = cx.tcx.hir().local_def_id(hir_id);\n-                let cause = traits::ObligationCause::misc(span, def_id);\n+                let cause = traits::ObligationCause::misc(span, fn_def_id);\n                 let send_errors = traits::fully_solve_bound(&infcx, cause, cx.param_env, ret_ty, send_trait);\n                 if !send_errors.is_empty() {\n                     span_lint_and_then("}, {"sha": "372b6ead3fe4685e6206645e17ec3a3dbd696207", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -11,6 +11,7 @@ use rustc_hir::{Block, Body, Expr, ExprKind, FnDecl, FnRetTy, HirId};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::{Span, SyntaxContext};\n \n declare_clippy_lint! {\n@@ -223,7 +224,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitReturn {\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n-        _: HirId,\n+        _: LocalDefId,\n     ) {\n         if (!matches!(kind, FnKind::Closure) && matches!(decl.output, FnRetTy::DefaultReturn(_)))\n             || span.ctxt() != body.value.span.ctxt()"}, {"sha": "d43e5cc9b2c3d23c84edc14c121c5e2a2c654337", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             if impl_item.generics.params.iter().all(|p| matches!(p.kind, GenericParamKind::Lifetime { .. }));\n \n             // Check if return type is String\n-            if is_type_lang_item(cx, return_ty(cx, impl_item.hir_id()), LangItem::String);\n+            if is_type_lang_item(cx, return_ty(cx, impl_item.owner_id), LangItem::String);\n \n             // Filters instances of to_string which are required by a trait\n             if trait_ref_of_method(cx, impl_item.owner_id.def_id).is_none();"}, {"sha": "747a94ba5a6edc23bf08c77b494393b2e9e75fbe", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -15,7 +15,6 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter as middle_nested_filter;\n-use rustc_middle::ty::TyCtxt;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n@@ -154,7 +153,7 @@ fn check_fn_inner<'tcx>(\n         .filter(|param| matches!(param.kind, GenericParamKind::Type { .. }));\n \n     for typ in types {\n-        for pred in generics.bounds_for_param(cx.tcx.hir().local_def_id(typ.hir_id)) {\n+        for pred in generics.bounds_for_param(typ.def_id) {\n             if pred.origin == PredicateOrigin::WhereClause {\n                 // has_where_lifetimes checked that this predicate contains no lifetime.\n                 continue;\n@@ -251,7 +250,7 @@ fn could_use_elision<'tcx>(\n     // level of the current item.\n \n     // check named LTs\n-    let allowed_lts = allowed_lts_from(cx.tcx, named_generics);\n+    let allowed_lts = allowed_lts_from(named_generics);\n \n     // these will collect all the lifetimes for references in arg/return types\n     let mut input_visitor = RefVisitor::new(cx);\n@@ -360,11 +359,11 @@ fn could_use_elision<'tcx>(\n     }\n }\n \n-fn allowed_lts_from(tcx: TyCtxt<'_>, named_generics: &[GenericParam<'_>]) -> FxHashSet<RefLt> {\n+fn allowed_lts_from(named_generics: &[GenericParam<'_>]) -> FxHashSet<RefLt> {\n     let mut allowed_lts = FxHashSet::default();\n     for par in named_generics.iter() {\n         if let GenericParamKind::Lifetime { .. } = par.kind {\n-            allowed_lts.insert(RefLt::Named(tcx.hir().local_def_id(par.hir_id)));\n+            allowed_lts.insert(RefLt::Named(par.def_id));\n         }\n     }\n     allowed_lts.insert(RefLt::Unnamed);\n@@ -516,7 +515,7 @@ fn has_where_lifetimes<'tcx>(cx: &LateContext<'tcx>, generics: &'tcx Generics<'_\n                     return true;\n                 }\n                 // if the bounds define new lifetimes, they are fine to occur\n-                let allowed_lts = allowed_lts_from(cx.tcx, pred.bound_generic_params);\n+                let allowed_lts = allowed_lts_from(pred.bound_generic_params);\n                 // now walk the bounds\n                 for bound in pred.bounds.iter() {\n                     walk_param_bound(&mut visitor, bound);"}, {"sha": "3778eb4c732d7ea73686ab434b0b9513fd68f0fa", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -6,10 +6,11 @@ use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n     AsyncGeneratorKind, Block, Body, Closure, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound,\n-    HirId, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n+    ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n@@ -45,7 +46,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n-        _: HirId,\n+        _: LocalDefId,\n     ) {\n         if_chain! {\n             if let Some(header) = kind.header();"}, {"sha": "7dfa155c5c35f9cb8568491c0a9fb74bcae5723e", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -157,11 +157,10 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n             && def.variants.len() > 1\n         {\n             let mut iter = def.variants.iter().filter_map(|v| {\n-                let id = cx.tcx.hir().local_def_id(v.hir_id);\n                 (matches!(v.data, hir::VariantData::Unit(..))\n                     && v.ident.as_str().starts_with('_')\n                     && is_doc_hidden(cx.tcx.hir().attrs(v.hir_id)))\n-                .then_some((id, v.span))\n+                .then_some((v.def_id, v.span))\n             });\n             if let Some((id, span)) = iter.next()\n                 && iter.next().is_none()"}, {"sha": "fb94dfa5980b76f05a9b002a765961379f3138b6", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -3412,7 +3412,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         }\n \n         if let hir::ImplItemKind::Fn(_, _) = impl_item.kind {\n-            let ret_ty = return_ty(cx, impl_item.hir_id());\n+            let ret_ty = return_ty(cx, impl_item.owner_id);\n \n             if contains_ty_adt_constructor_opaque(cx, ret_ty, self_ty) {\n                 return;\n@@ -3460,7 +3460,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         if_chain! {\n             if item.ident.name == sym::new;\n             if let TraitItemKind::Fn(_, _) = item.kind;\n-            let ret_ty = return_ty(cx, item.hir_id());\n+            let ret_ty = return_ty(cx, item.owner_id);\n             let self_ty = TraitRef::identity(cx.tcx, item.owner_id.to_def_id())\n                 .self_ty()\n                 .skip_binder();"}, {"sha": "6050226434f2738bc173c8bd6311f692876d2ea4", "filename": "clippy_lints/src/methods/suspicious_map.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -12,9 +12,8 @@ pub fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, count_recv: &hir::Expr<\n     if_chain! {\n         if is_trait_method(cx, count_recv, sym::Iterator);\n         let closure = expr_or_init(cx, map_arg);\n-        if let Some(def_id) = cx.tcx.hir().opt_local_def_id(closure.hir_id);\n-        if let Some(body_id) = cx.tcx.hir().maybe_body_owned_by(def_id);\n-        let closure_body = cx.tcx.hir().body(body_id);\n+        if let hir::ExprKind::Closure(closure) = closure.kind;\n+        let closure_body = cx.tcx.hir().body(closure.body);\n         if !cx.typeck_results().expr_ty(closure_body.value).is_unit();\n         then {\n             if let Some(map_mutated_vars) = mutated_variables(closure_body.value, cx) {"}, {"sha": "4e5af1c7c71249bba4dab76cba74386d2214e484", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -368,10 +368,9 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n             Node::Block(..) => continue,\n             Node::Item(item) => {\n                 if let ItemKind::Fn(_, _, body_id) = &item.kind\n-                && let output_ty = return_ty(cx, item.hir_id())\n-                && let local_def_id = cx.tcx.hir().local_def_id(item.hir_id())\n-                && Inherited::build(cx.tcx, local_def_id).enter(|inherited| {\n-                    let fn_ctxt = FnCtxt::new(inherited, cx.param_env, local_def_id);\n+                && let output_ty = return_ty(cx, item.owner_id)\n+                && Inherited::build(cx.tcx, item.owner_id.def_id).enter(|inherited| {\n+                    let fn_ctxt = FnCtxt::new(inherited, cx.param_env, item.owner_id.def_id);\n                     fn_ctxt.can_coerce(ty, output_ty)\n                 }) {\n                     if has_lifetime(output_ty) && has_lifetime(ty) {"}, {"sha": "0705029a613bba3e1f863e46eb68ca82bdcd73eb", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -4,12 +4,13 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    self as hir, def, BinOpKind, BindingAnnotation, Body, ByRef, Expr, ExprKind, FnDecl, HirId, Mutability, PatKind,\n-    Stmt, StmtKind, TyKind,\n+    self as hir, def, BinOpKind, BindingAnnotation, Body, ByRef, Expr, ExprKind, FnDecl, Mutability, PatKind, Stmt,\n+    StmtKind, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{ExpnKind, Span};\n \n@@ -151,7 +152,7 @@ impl<'tcx> LateLintPass<'tcx> for LintPass {\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n-        _: HirId,\n+        _: LocalDefId,\n     ) {\n         if let FnKind::Closure = k {\n             // Does not apply to closures"}, {"sha": "87bd007a26a241e7dcbf43bca5d01a10932ab39a", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -6,11 +6,12 @@ use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, is_from_proc_ma\n use rustc_hir as hir;\n use rustc_hir::def_id::CRATE_DEF_ID;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n+use rustc_hir::{Body, Constness, FnDecl, GenericParamKind};\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::Span;\n \n declare_clippy_lint! {\n@@ -91,14 +92,12 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n         _: &FnDecl<'_>,\n         body: &Body<'tcx>,\n         span: Span,\n-        hir_id: HirId,\n+        def_id: LocalDefId,\n     ) {\n         if !self.msrv.meets(msrvs::CONST_IF_MATCH) {\n             return;\n         }\n \n-        let def_id = cx.tcx.hir().local_def_id(hir_id);\n-\n         if in_external_macro(cx.tcx.sess, span) || is_entrypoint_fn(cx, def_id.to_def_id()) {\n             return;\n         }\n@@ -132,6 +131,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n             FnKind::Closure => return,\n         }\n \n+        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n+\n         // Const fns are not allowed as methods in a trait.\n         {\n             let parent = cx.tcx.hir().get_parent_item(hir_id).def_id;"}, {"sha": "5f7aac21e6eb00a194ba232c714fb94017e82e5b", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -6,6 +6,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::TypeVisitable;\n use rustc_middle::ty::{Adt, Array, Ref, Slice, Tuple, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n use std::iter;\n@@ -102,21 +103,21 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n         if let hir::ItemKind::Fn(ref sig, ..) = item.kind {\n-            self.check_sig(cx, item.hir_id(), sig.decl);\n+            self.check_sig(cx, item.owner_id.def_id, sig.decl);\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'tcx>) {\n         if let hir::ImplItemKind::Fn(ref sig, ..) = item.kind {\n             if trait_ref_of_method(cx, item.owner_id.def_id).is_none() {\n-                self.check_sig(cx, item.hir_id(), sig.decl);\n+                self.check_sig(cx, item.owner_id.def_id, sig.decl);\n             }\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'tcx>) {\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n-            self.check_sig(cx, item.hir_id(), sig.decl);\n+            self.check_sig(cx, item.owner_id.def_id, sig.decl);\n         }\n     }\n \n@@ -136,8 +137,7 @@ impl MutableKeyType {\n         }\n     }\n \n-    fn check_sig(&self, cx: &LateContext<'_>, item_hir_id: hir::HirId, decl: &hir::FnDecl<'_>) {\n-        let fn_def_id = cx.tcx.hir().local_def_id(item_hir_id);\n+    fn check_sig(&self, cx: &LateContext<'_>, fn_def_id: LocalDefId, decl: &hir::FnDecl<'_>) {\n         let fn_sig = cx.tcx.fn_sig(fn_def_id).subst_identity();\n         for (hir_ty, ty) in iter::zip(decl.inputs, fn_sig.inputs().skip_binder()) {\n             self.check_ty_(cx, hir_ty.span, *ty);"}, {"sha": "996ea6ed723160d8a7bb31d080059ffab7de6436", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -20,6 +20,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::{self, TypeVisitable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::symbol::kw;\n use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi;\n@@ -82,12 +83,14 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n-        hir_id: HirId,\n+        fn_def_id: LocalDefId,\n     ) {\n         if span.from_expansion() {\n             return;\n         }\n \n+        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(fn_def_id);\n+\n         match kind {\n             FnKind::ItemFn(.., header) => {\n                 let attrs = cx.tcx.hir().attrs(hir_id);\n@@ -119,8 +122,6 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n \n         let sized_trait = need!(cx.tcx.lang_items().sized_trait());\n \n-        let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n-\n         let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds().iter())\n             .filter(|p| !p.is_global())\n             .filter_map(|obligation| {"}, {"sha": "faf9ec61ec504396d37c9eb076cfe9049d645602", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -75,7 +75,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                     }\n                     if let hir::ImplItemKind::Fn(ref sig, _) = impl_item.kind {\n                         let name = impl_item.ident.name;\n-                        let id = impl_item.hir_id();\n+                        let id = impl_item.owner_id;\n                         if sig.header.constness == hir::Constness::Const {\n                             // can't be implemented by default\n                             return;\n@@ -97,7 +97,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             if sig.decl.inputs.is_empty();\n                             if name == sym::new;\n                             if cx.effective_visibilities.is_reachable(impl_item.owner_id.def_id);\n-                            let self_def_id = cx.tcx.hir().get_parent_item(id);\n+                            let self_def_id = cx.tcx.hir().get_parent_item(id.into());\n                             let self_ty = cx.tcx.type_of(self_def_id);\n                             if self_ty == return_ty(cx, id);\n                             if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n@@ -133,7 +133,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                                 span_lint_hir_and_then(\n                                     cx,\n                                     NEW_WITHOUT_DEFAULT,\n-                                    id,\n+                                    id.into(),\n                                     impl_item.span,\n                                     &format!(\n                                         \"you should consider adding a `Default` implementation for `{self_type_snip}`\""}, {"sha": "d592f6e814c1d3599ceb0dcdac485a729d7d2c6b", "filename": "clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -209,7 +209,8 @@ impl<'tcx> LateLintPass<'tcx> for ArithmeticSideEffects {\n \n     fn check_body(&mut self, cx: &LateContext<'_>, body: &hir::Body<'_>) {\n         let body_owner = cx.tcx.hir().body_owner(body.id());\n-        let body_owner_def_id = cx.tcx.hir().local_def_id(body_owner);\n+        let body_owner_def_id = cx.tcx.hir().body_owner_def_id(body.id());\n+\n         let body_owner_kind = cx.tcx.hir().body_owner_kind(body_owner_def_id);\n         if let hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) = body_owner_kind {\n             let body_span = cx.tcx.hir().span_with_body(body_owner);"}, {"sha": "777395f452c92397e47a9caeeee568184e3d6ed6", "filename": "clippy_lints/src/operators/numeric_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Foperators%2Fnumeric_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Foperators%2Fnumeric_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fnumeric_arithmetic.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -96,7 +96,7 @@ impl Context {\n \n     pub fn enter_body(&mut self, cx: &LateContext<'_>, body: &hir::Body<'_>) {\n         let body_owner = cx.tcx.hir().body_owner(body.id());\n-        let body_owner_def_id = cx.tcx.hir().local_def_id(body_owner);\n+        let body_owner_def_id = cx.tcx.hir().body_owner_def_id(body.id());\n \n         match cx.tcx.hir().body_owner_kind(body_owner_def_id) {\n             hir::BodyOwnerKind::Static(_) | hir::BodyOwnerKind::Const => {"}, {"sha": "849cd03dd7bf639fd8e97d1fe884c16066b6f47e", "filename": "clippy_lints/src/panic_in_result_fn.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -8,6 +8,7 @@ use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n@@ -49,9 +50,13 @@ impl<'tcx> LateLintPass<'tcx> for PanicInResultFn {\n         _: &'tcx hir::FnDecl<'tcx>,\n         body: &'tcx hir::Body<'tcx>,\n         span: Span,\n-        hir_id: hir::HirId,\n+        def_id: LocalDefId,\n     ) {\n-        if !matches!(fn_kind, FnKind::Closure) && is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::Result) {\n+        if matches!(fn_kind, FnKind::Closure) {\n+            return;\n+        }\n+        let owner = cx.tcx.hir().local_def_id_to_hir_id(def_id).expect_owner();\n+        if is_type_diagnostic_item(cx, return_ty(cx, owner), sym::Result) {\n             lint_impl_body(cx, span, body);\n         }\n     }"}, {"sha": "0d78c3048ba127bc2ae74f88b0e7a9c8183f000e", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{BindingAnnotation, Body, FnDecl, HirId, Impl, ItemKind, MutTy, Mutability, Node, PatKind};\n+use rustc_hir::{BindingAnnotation, Body, FnDecl, Impl, ItemKind, MutTy, Mutability, Node, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, PointerCast};\n use rustc_middle::ty::layout::LayoutOf;\n@@ -272,12 +272,13 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         decl: &'tcx FnDecl<'_>,\n         _body: &'tcx Body<'_>,\n         span: Span,\n-        hir_id: HirId,\n+        def_id: LocalDefId,\n     ) {\n         if span.from_expansion() {\n             return;\n         }\n \n+        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n         match kind {\n             FnKind::ItemFn(.., header) => {\n                 if header.abi != Abi::Rust {\n@@ -308,6 +309,6 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n             }\n         }\n \n-        self.check_poly_fn(cx, cx.tcx.hir().local_def_id(hir_id), decl, Some(span));\n+        self.check_poly_fn(cx, def_id, decl, Some(span));\n     }\n }"}, {"sha": "9f98195d311fed80f3e84e79d64512809bbf1b1f", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -1,11 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use rustc_hir::{\n-    intravisit, Body, Expr, ExprKind, FnDecl, HirId, Let, LocalSource, Mutability, Pat, PatKind, Stmt, StmtKind,\n-};\n+use rustc_hir::{intravisit, Body, Expr, ExprKind, FnDecl, Let, LocalSource, Mutability, Pat, PatKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n@@ -116,7 +115,7 @@ impl<'tcx> LateLintPass<'tcx> for PatternTypeMismatch {\n         _: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         _: Span,\n-        _: HirId,\n+        _: LocalDefId,\n     ) {\n         for param in body.params {\n             apply_lint(cx, param.pat, DerefPossible::Impossible);"}, {"sha": "944a33cc3e53fad4c0ee3d0fcd9944739fcb76b2", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -6,11 +6,12 @@ use clippy_utils::{fn_has_unsatisfiable_preds, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{def_id, Body, FnDecl, HirId, LangItem};\n+use rustc_hir::{def_id, Body, FnDecl, LangItem};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::sym;\n \n@@ -69,12 +70,10 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n         cx: &LateContext<'tcx>,\n         _: FnKind<'tcx>,\n         _: &'tcx FnDecl<'_>,\n-        body: &'tcx Body<'_>,\n+        _: &'tcx Body<'_>,\n         _: Span,\n-        _: HirId,\n+        def_id: LocalDefId,\n     ) {\n-        let def_id = cx.tcx.hir().body_owner_def_id(body.id());\n-\n         // Building MIR for `fn`s with unsatisfiable preds results in ICE.\n         if fn_has_unsatisfiable_preds(cx, def_id.to_def_id()) {\n             return;"}, {"sha": "8c39b4fc5691b97735a2a483b16ef2bf98a57510", "filename": "clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::ty::is_must_use_ty;\n use clippy_utils::{nth_arg, return_ty};\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, FnDecl, HirId, TraitItem, TraitItemKind};\n+use rustc_hir::{Body, FnDecl, OwnerId, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -68,18 +68,18 @@ declare_clippy_lint! {\n \n declare_lint_pass!(ReturnSelfNotMustUse => [RETURN_SELF_NOT_MUST_USE]);\n \n-fn check_method(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_def: LocalDefId, span: Span, hir_id: HirId) {\n+fn check_method(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_def: LocalDefId, span: Span, owner_id: OwnerId) {\n     if_chain! {\n         // If it comes from an external macro, better ignore it.\n         if !in_external_macro(cx.sess(), span);\n         if decl.implicit_self.has_implicit_self();\n         // We only show this warning for public exported methods.\n         if cx.effective_visibilities.is_exported(fn_def);\n         // We don't want to emit this lint if the `#[must_use]` attribute is already there.\n-        if !cx.tcx.hir().attrs(hir_id).iter().any(|attr| attr.has_name(sym::must_use));\n+        if !cx.tcx.hir().attrs(owner_id.into()).iter().any(|attr| attr.has_name(sym::must_use));\n         if cx.tcx.visibility(fn_def.to_def_id()).is_public();\n-        let ret_ty = return_ty(cx, hir_id);\n-        let self_arg = nth_arg(cx, hir_id, 0);\n+        let ret_ty = return_ty(cx, owner_id.into());\n+        let self_arg = nth_arg(cx, owner_id.into(), 0);\n         // If `Self` has the same type as the returned type, then we want to warn.\n         //\n         // For this check, we don't want to remove the reference on the returned type because if\n@@ -109,26 +109,26 @@ impl<'tcx> LateLintPass<'tcx> for ReturnSelfNotMustUse {\n         decl: &'tcx FnDecl<'tcx>,\n         _: &'tcx Body<'tcx>,\n         span: Span,\n-        hir_id: HirId,\n+        fn_def: LocalDefId,\n     ) {\n         if_chain! {\n             // We are only interested in methods, not in functions or associated functions.\n             if matches!(kind, FnKind::Method(_, _));\n-            if let Some(fn_def) = cx.tcx.hir().opt_local_def_id(hir_id);\n             if let Some(impl_def) = cx.tcx.impl_of_method(fn_def.to_def_id());\n             // We don't want this method to be te implementation of a trait because the\n             // `#[must_use]` should be put on the trait definition directly.\n             if cx.tcx.trait_id_of_impl(impl_def).is_none();\n \n             then {\n-                check_method(cx, decl, fn_def, span, hir_id);\n+                let hir_id = cx.tcx.hir().local_def_id_to_hir_id(fn_def);\n+                check_method(cx, decl, fn_def, span, hir_id.expect_owner());\n             }\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'tcx>) {\n         if let TraitItemKind::Fn(ref sig, _) = item.kind {\n-            check_method(cx, sig.decl, item.owner_id.def_id, item.span, item.hir_id());\n+            check_method(cx, sig.decl, item.owner_id.def_id, item.span, item.owner_id);\n         }\n     }\n }"}, {"sha": "84a0c6b9558531ae41f7116b69d09d8ec4ecd1d6", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -6,11 +6,12 @@ use core::ops::ControlFlow;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Block, Body, Expr, ExprKind, FnDecl, HirId, LangItem, MatchSource, PatKind, QPath, StmtKind};\n+use rustc_hir::{Block, Body, Expr, ExprKind, FnDecl, LangItem, MatchSource, PatKind, QPath, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::{BytePos, Pos};\n \n@@ -152,7 +153,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n         _: &'tcx FnDecl<'tcx>,\n         body: &'tcx Body<'tcx>,\n         sp: Span,\n-        _: HirId,\n+        _: LocalDefId,\n     ) {\n         match kind {\n             FnKind::Closure => {"}, {"sha": "3ce030cd721a713491a0db0fd79a1f4f72a045f0", "filename": "clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.owner_id);\n-        let ret_ty = return_ty(cx, impl_item.hir_id());\n+        let ret_ty = return_ty(cx, impl_item.owner_id);\n \n         // Do not check trait impls\n         if matches!(item.kind, ItemKind::Impl(Impl { of_trait: Some(_), .. })) {"}, {"sha": "de0c5d56e41566ba89a39c34aad08fe6052283f1", "filename": "clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -61,8 +61,7 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'_>, item: &Item<'_\n         if let rustc_hir::TyKind::Array(_, rustc_hir::ArrayLen::Body(length)) = last_field.ty.kind;\n \n         // Then check if that that array zero-sized\n-        let length_ldid = cx.tcx.hir().local_def_id(length.hir_id);\n-        let length = Const::from_anon_const(cx.tcx, length_ldid);\n+        let length = Const::from_anon_const(cx.tcx, length.def_id);\n         let length = length.try_eval_usize(cx.tcx, cx.param_env);\n         if let Some(length) = length;\n         then {"}, {"sha": "585e2075fa904d0d80549d8b9fe179f9f538ea26", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -12,11 +12,12 @@ mod vec_box;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    Body, FnDecl, FnRetTy, GenericArg, HirId, ImplItem, ImplItemKind, Item, ItemKind, Local, MutTy, QPath, TraitItem,\n+    Body, FnDecl, FnRetTy, GenericArg, ImplItem, ImplItemKind, Item, ItemKind, Local, MutTy, QPath, TraitItem,\n     TraitItemKind, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n@@ -311,15 +312,27 @@ pub struct Types {\n impl_lint_pass!(Types => [BOX_COLLECTION, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION, RC_BUFFER, RC_MUTEX, TYPE_COMPLEXITY]);\n \n impl<'tcx> LateLintPass<'tcx> for Types {\n-    fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {\n-        let is_in_trait_impl =\n-            if let Some(hir::Node::Item(item)) = cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(id).def_id) {\n-                matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n-            } else {\n-                false\n-            };\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'_>,\n+        _: FnKind<'_>,\n+        decl: &FnDecl<'_>,\n+        _: &Body<'_>,\n+        _: Span,\n+        def_id: LocalDefId,\n+    ) {\n+        let is_in_trait_impl = if let Some(hir::Node::Item(item)) = cx.tcx.hir().find_by_def_id(\n+            cx.tcx\n+                .hir()\n+                .get_parent_item(cx.tcx.hir().local_def_id_to_hir_id(def_id))\n+                .def_id,\n+        ) {\n+            matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n+        } else {\n+            false\n+        };\n \n-        let is_exported = cx.effective_visibilities.is_exported(cx.tcx.hir().local_def_id(id));\n+        let is_exported = cx.effective_visibilities.is_exported(def_id);\n \n         self.check_fn_decl(\n             cx,\n@@ -381,7 +394,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n         let is_exported = cx\n             .effective_visibilities\n-            .is_exported(cx.tcx.hir().local_def_id(field.hir_id));\n+            .is_exported(field.def_id);\n \n         self.check_ty(\n             cx,"}, {"sha": "8b0e0ce5a3001581d97c8c9708195e9ae92189ce", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -5,10 +5,11 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::LangItem::{OptionSome, ResultOk};\n-use rustc_hir::{Body, ExprKind, FnDecl, HirId, Impl, ItemKind, Node};\n+use rustc_hir::{Body, ExprKind, FnDecl, Impl, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -77,12 +78,11 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         fn_decl: &FnDecl<'tcx>,\n         body: &Body<'tcx>,\n         span: Span,\n-        hir_id: HirId,\n+        def_id: LocalDefId,\n     ) {\n         // Abort if public function/method or closure.\n         match fn_kind {\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n-                let def_id = cx.tcx.hir().local_def_id(hir_id);\n                 if self.avoid_breaking_exported_api && cx.effective_visibilities.is_exported(def_id) {\n                     return;\n                 }\n@@ -91,6 +91,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         }\n \n         // Abort if the method is implementing a trait or of it a trait method.\n+        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n         if let Some(Node::Item(item)) = cx.tcx.hir().find_parent(hir_id) {\n             if matches!(\n                 item.kind,\n@@ -101,17 +102,18 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         }\n \n         // Get the wrapper and inner types, if can't, abort.\n-        let (return_type_label, lang_item, inner_type) = if let ty::Adt(adt_def, subst) = return_ty(cx, hir_id).kind() {\n-            if cx.tcx.is_diagnostic_item(sym::Option, adt_def.did()) {\n-                (\"Option\", OptionSome, subst.type_at(0))\n-            } else if cx.tcx.is_diagnostic_item(sym::Result, adt_def.did()) {\n-                (\"Result\", ResultOk, subst.type_at(0))\n+        let (return_type_label, lang_item, inner_type) =\n+            if let ty::Adt(adt_def, subst) = return_ty(cx, hir_id.expect_owner()).kind() {\n+                if cx.tcx.is_diagnostic_item(sym::Option, adt_def.did()) {\n+                    (\"Option\", OptionSome, subst.type_at(0))\n+                } else if cx.tcx.is_diagnostic_item(sym::Result, adt_def.did()) {\n+                    (\"Result\", ResultOk, subst.type_at(0))\n+                } else {\n+                    return;\n+                }\n             } else {\n                 return;\n-            }\n-        } else {\n-            return;\n-        };\n+            };\n \n         // Check if all return expression respect the following condition and collect them.\n         let mut suggs = Vec::new();"}, {"sha": "55651a28be9246b660c9f81f7f886c14819ea612", "filename": "clippy_lints/src/unused_async.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_async.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -1,9 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, Visitor};\n-use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId, YieldSource};\n+use rustc_hir::{Body, Expr, ExprKind, FnDecl, YieldSource};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::Span;\n \n declare_clippy_lint! {\n@@ -66,11 +67,11 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n         fn_decl: &'tcx FnDecl<'tcx>,\n         body: &Body<'tcx>,\n         span: Span,\n-        hir_id: HirId,\n+        def_id: LocalDefId,\n     ) {\n         if !span.from_expansion() && fn_kind.asyncness().is_async() {\n             let mut visitor = AsyncFnVisitor { cx, found_await: false };\n-            walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), hir_id);\n+            walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), def_id);\n             if !visitor.found_await {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "377d3fb6f4e1ccee8b6e9d9abc53dd571c95cd1e", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -11,6 +11,7 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::Ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n@@ -312,7 +313,7 @@ impl<'tcx> LateLintPass<'tcx> for Unwrap {\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n-        fn_id: HirId,\n+        fn_id: LocalDefId,\n     ) {\n         if span.from_expansion() {\n             return;"}, {"sha": "3a1845425a251b12eb0c1f2b4d358282bded6dc8", "filename": "clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -64,8 +64,8 @@ impl<'tcx> LateLintPass<'tcx> for UnwrapInResult {\n             // first check if it's a method or function\n             if let hir::ImplItemKind::Fn(ref _signature, _) = impl_item.kind;\n             // checking if its return type is `result` or `option`\n-            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::Result)\n-                || is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::Option);\n+            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.owner_id), sym::Result)\n+                || is_type_diagnostic_item(cx, return_ty(cx, impl_item.owner_id), sym::Option);\n             then {\n                 lint_impl_body(cx, impl_item.span, impl_item);\n             }"}, {"sha": "81c1a052b586956553543cd62862df6fa00d9cbb", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=92c4f1e2d9db43ebc0449fbbc2150eeb9429e65b", "patch": "@@ -1578,8 +1578,7 @@ pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n }\n \n /// Convenience function to get the return type of a function.\n-pub fn return_ty<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId) -> Ty<'tcx> {\n-    let fn_def_id = cx.tcx.hir().local_def_id(fn_item);\n+pub fn return_ty<'tcx>(cx: &LateContext<'tcx>, fn_def_id: hir::OwnerId) -> Ty<'tcx> {\n     let ret_ty = cx.tcx.fn_sig(fn_def_id).subst_identity().output();\n     cx.tcx.erase_late_bound_regions(ret_ty)\n }"}]}