{"sha": "3692ab673e45488ef0d276618a12982964e95c9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2OTJhYjY3M2U0NTQ4OGVmMGQyNzY2MThhMTI5ODI5NjRlOTVjOWU=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-12-30T18:00:26Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-01-07T00:12:36Z"}, "message": "[MIR] Set dest \u2200 expr with optional value\n\nAssign a default unit value to the destinations of block expressions without trailing expression,\nreturn expressions without return value (i.e. `return;`) and conditionals without else clause.", "tree": {"sha": "7880bbcb499d7e974a822d67bf47e0ec0b43df94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7880bbcb499d7e974a822d67bf47e0ec0b43df94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3692ab673e45488ef0d276618a12982964e95c9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3692ab673e45488ef0d276618a12982964e95c9e", "html_url": "https://github.com/rust-lang/rust/commit/3692ab673e45488ef0d276618a12982964e95c9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3692ab673e45488ef0d276618a12982964e95c9e/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15096371dc957f2ef1a4d9f2853f576dc374b42e", "url": "https://api.github.com/repos/rust-lang/rust/commits/15096371dc957f2ef1a4d9f2853f576dc374b42e", "html_url": "https://github.com/rust-lang/rust/commit/15096371dc957f2ef1a4d9f2853f576dc374b42e"}], "stats": {"total": 86, "additions": 53, "deletions": 33}, "files": [{"sha": "12b9130b48c612c9081914e2af66f6597a819951", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3692ab673e45488ef0d276618a12982964e95c9e/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3692ab673e45488ef0d276618a12982964e95c9e/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=3692ab673e45488ef0d276618a12982964e95c9e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use build::{BlockAnd, Builder};\n+use build::{BlockAnd, BlockAndExtension, Builder};\n use hair::*;\n use rustc::mir::repr::*;\n use rustc_front::hir;\n@@ -19,11 +19,16 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                      mut block: BasicBlock,\n                      ast_block: &'tcx hir::Block)\n                      -> BlockAnd<()> {\n-        let this = self;\n-        let Block { extent, span: _, stmts, expr } = this.hir.mirror(ast_block);\n-        this.in_scope(extent, block, |this| {\n+        let Block { extent, span, stmts, expr } = self.hir.mirror(ast_block);\n+        self.in_scope(extent, block, move |this| {\n             unpack!(block = this.stmts(block, stmts));\n-            this.into(destination, block, expr)\n+            match expr {\n+                Some(expr) => this.into(destination, block, expr),\n+                None => {\n+                    this.cfg.push_assign_unit(block, span, destination);\n+                    block.unit()\n+                }\n+            }\n         })\n     }\n }"}, {"sha": "523ac85cdc5090414e3d93f812ec1669380d6fd3", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3692ab673e45488ef0d276618a12982964e95c9e/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3692ab673e45488ef0d276618a12982964e95c9e/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=3692ab673e45488ef0d276618a12982964e95c9e", "patch": "@@ -37,14 +37,6 @@ impl<'tcx> CFG<'tcx> {\n         self.block_data_mut(block).statements.push(statement);\n     }\n \n-    pub fn push_assign_constant(&mut self,\n-                                block: BasicBlock,\n-                                span: Span,\n-                                temp: &Lvalue<'tcx>,\n-                                constant: Constant<'tcx>) {\n-        self.push_assign(block, span, temp, Rvalue::Use(Operand::Constant(constant)));\n-    }\n-\n     pub fn push_drop(&mut self, block: BasicBlock, span: Span,\n                      kind: DropKind, lvalue: &Lvalue<'tcx>) {\n         self.push(block, Statement {\n@@ -64,6 +56,23 @@ impl<'tcx> CFG<'tcx> {\n         });\n     }\n \n+    pub fn push_assign_constant(&mut self,\n+                                block: BasicBlock,\n+                                span: Span,\n+                                temp: &Lvalue<'tcx>,\n+                                constant: Constant<'tcx>) {\n+        self.push_assign(block, span, temp, Rvalue::Use(Operand::Constant(constant)));\n+    }\n+\n+    pub fn push_assign_unit(&mut self,\n+                            block: BasicBlock,\n+                            span: Span,\n+                            lvalue: &Lvalue<'tcx>) {\n+        self.push_assign(block, span, lvalue, Rvalue::Aggregate(\n+            AggregateKind::Tuple, vec![]\n+        ));\n+    }\n+\n     pub fn terminate(&mut self,\n                      block: BasicBlock,\n                      terminator: Terminator<'tcx>) {"}, {"sha": "63eb760720479a750d90779fa96a21c135332975", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3692ab673e45488ef0d276618a12982964e95c9e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3692ab673e45488ef0d276618a12982964e95c9e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=3692ab673e45488ef0d276618a12982964e95c9e", "patch": "@@ -58,7 +58,14 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 });\n \n                 unpack!(then_block = this.into(destination, then_block, then_expr));\n-                unpack!(else_block = this.into(destination, else_block, else_expr));\n+                else_block = if let Some(else_expr) = else_expr {\n+                    unpack!(this.into(destination, else_block, else_expr))\n+                } else {\n+                    // Body of the `if` expression without an `else` clause must return `()`, thus\n+                    // we implicitly generate a `else {}` if it is not specified.\n+                    this.cfg.push_assign_unit(else_block, expr_span, &Lvalue::ReturnPointer);\n+                    else_block\n+                };\n \n                 let join_block = this.cfg.start_new_block();\n                 this.cfg.terminate(then_block, Terminator::Goto { target: join_block });\n@@ -157,12 +164,18 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                     }\n \n                     // execute the body, branching back to the test\n-                    // FIXME(#30636): this should not create or request any sort of destination at\n-                    // all.\n+                    // We write body\u2019s \u201creturn value\u201d into the destination of loop. This is fine,\n+                    // because:\n+                    //\n+                    // * In Rust both loop expression and its body are required to have `()`\n+                    //   as the \u201creturn value\u201d;\n+                    // * The destination will be considered uninitialised (given it was\n+                    //   uninitialised before the loop) during the first iteration, thus\n+                    //   disallowing its use inside the body. Alternatively, if it was already\n+                    //   initialised, the `destination` can only possibly have a value of `()`,\n+                    //   therefore, \u201cmutating\u201d the destination during iteration is fine.\n                     let body_block_end = unpack!(this.into(destination, body_block, body));\n                     this.cfg.terminate(body_block_end, Terminator::Goto { target: loop_block });\n-\n-                    // final point is exit_block\n                     exit_block.unit()\n                 })\n             }\n@@ -207,7 +220,13 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 this.break_or_continue(expr_span, label, block, |loop_scope| loop_scope.break_block)\n             }\n             ExprKind::Return { value } => {\n-                unpack!(block = this.into(&Lvalue::ReturnPointer, block, value));\n+                block = match value {\n+                    Some(value) => unpack!(this.into(&Lvalue::ReturnPointer, block, value)),\n+                    None => {\n+                        this.cfg.push_assign_unit(block, expr_span, &Lvalue::ReturnPointer);\n+                        block\n+                    }\n+                };\n                 let extent = this.extent_of_outermost_scope();\n                 this.exit_scope(expr_span, extent, block, END_BLOCK);\n                 this.cfg.start_new_block().unit()"}, {"sha": "77d9d926328fc5535bf26967ad79797c2d7a07b9", "filename": "src/librustc_mir/build/into.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3692ab673e45488ef0d276618a12982964e95c9e/src%2Flibrustc_mir%2Fbuild%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3692ab673e45488ef0d276618a12982964e95c9e/src%2Flibrustc_mir%2Fbuild%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Finto.rs?ref=3692ab673e45488ef0d276618a12982964e95c9e", "patch": "@@ -14,7 +14,7 @@\n //! wrapped up as expressions (e.g. blocks). To make this ergonomic, we use this\n //! latter `EvalInto` trait.\n \n-use build::{BlockAnd, BlockAndExtension, Builder};\n+use build::{BlockAnd, Builder};\n use hair::*;\n use rustc::mir::repr::*;\n \n@@ -58,16 +58,3 @@ impl<'tcx> EvalInto<'tcx> for Expr<'tcx> {\n         builder.into_expr(destination, block, self)\n     }\n }\n-\n-impl<'tcx> EvalInto<'tcx> for Option<ExprRef<'tcx>> {\n-    fn eval_into<'a>(self,\n-                     builder: &mut Builder<'a, 'tcx>,\n-                     destination: &Lvalue<'tcx>,\n-                     block: BasicBlock)\n-                     -> BlockAnd<()> {\n-        match self {\n-            Some(expr) => builder.into(destination, block, expr),\n-            None => block.unit(),\n-        }\n-    }\n-}"}]}