{"sha": "edcc02bfee262ce8bc3f087d9793ce68d73b1a40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkY2MwMmJmZWUyNjJjZThiYzNmMDg3ZDk3OTNjZTY4ZDczYjFhNDA=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-03-01T01:27:27Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-03-01T01:27:27Z"}, "message": "derive: Emit only PartialOrd::partial_cmp for simple enums\n\nUsing the same logic as for `PartialEq`, when possible define only\n`partial_cmp` and leave `lt, le, gt, ge` to their default\nimplementations. This works well for c-like enums.", "tree": {"sha": "209c1bbe422feed715024758bcbb7176227c549b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/209c1bbe422feed715024758bcbb7176227c549b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edcc02bfee262ce8bc3f087d9793ce68d73b1a40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edcc02bfee262ce8bc3f087d9793ce68d73b1a40", "html_url": "https://github.com/rust-lang/rust/commit/edcc02bfee262ce8bc3f087d9793ce68d73b1a40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edcc02bfee262ce8bc3f087d9793ce68d73b1a40/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e0a7e5d8872c8fcea47fc20239b8921bda2576", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e0a7e5d8872c8fcea47fc20239b8921bda2576", "html_url": "https://github.com/rust-lang/rust/commit/57e0a7e5d8872c8fcea47fc20239b8921bda2576"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "6406ee59a5eb555a2e28fc7fabfa3f4ebede0ab3", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/edcc02bfee262ce8bc3f087d9793ce68d73b1a40/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edcc02bfee262ce8bc3f087d9793ce68d73b1a40/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=edcc02bfee262ce8bc3f087d9793ce68d73b1a40", "patch": "@@ -11,29 +11,13 @@\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n-use syntax::ast::{MetaItem, Expr, BinOpKind, ItemKind};\n+use syntax::ast::{MetaItem, Expr, BinOpKind};\n use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n \n-fn is_type_without_fields(item: &Annotatable) -> bool {\n-    if let Annotatable::Item(ref item) = *item {\n-        match item.node {\n-            ItemKind::Enum(ref enum_def, _) => {\n-                enum_def.variants.iter().all(|v| v.node.data.fields().is_empty())\n-            }\n-            ItemKind::Struct(ref variant_data, _) => {\n-                variant_data.fields().is_empty()\n-            }\n-            _ => false\n-        }\n-    } else {\n-        false\n-    }\n-}\n-\n pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n                                   span: Span,\n                                   mitem: &MetaItem,"}, {"sha": "fafcf0ea960319e4353bd1c60106239e544a340b", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/edcc02bfee262ce8bc3f087d9793ce68d73b1a40/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edcc02bfee262ce8bc3f087d9793ce68d73b1a40/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=edcc02bfee262ce8bc3f087d9793ce68d73b1a40", "patch": "@@ -67,20 +67,29 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n         }))\n     };\n \n+    // avoid defining extra methods if we can\n+    // c-like enums, enums without any fields and structs without fields\n+    // can safely define only `partial_cmp`.\n+    let methods = if is_type_without_fields(item) {\n+        vec![partial_cmp_def]\n+    } else {\n+        vec![\n+            partial_cmp_def,\n+            md!(\"lt\", true, false),\n+            md!(\"le\", true, true),\n+            md!(\"gt\", false, false),\n+            md!(\"ge\", false, true)\n+        ]\n+    };\n+\n     let trait_def = TraitDef {\n         span: span,\n         attributes: vec![],\n         path: path_std!(cx, core::cmp::PartialOrd),\n         additional_bounds: vec![],\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,\n-        methods: vec![\n-            partial_cmp_def,\n-            md!(\"lt\", true, false),\n-            md!(\"le\", true, true),\n-            md!(\"gt\", false, false),\n-            md!(\"ge\", false, true)\n-        ],\n+        methods: methods,\n         associated_types: Vec::new(),\n     };\n     trait_def.expand(cx, mitem, item, push)"}, {"sha": "e8954b1a2fc2aa3027e7ffca37e6a363f49f61b5", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/edcc02bfee262ce8bc3f087d9793ce68d73b1a40/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edcc02bfee262ce8bc3f087d9793ce68d73b1a40/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=edcc02bfee262ce8bc3f087d9793ce68d73b1a40", "patch": "@@ -1638,3 +1638,21 @@ pub fn cs_same_method<F>(f: F,\n         }\n     }\n }\n+\n+/// Return true if the type has no value fields\n+/// (for an enum, no variant has any fields)\n+pub fn is_type_without_fields(item: &Annotatable) -> bool {\n+    if let Annotatable::Item(ref item) = *item {\n+        match item.node {\n+            ast::ItemKind::Enum(ref enum_def, _) => {\n+                enum_def.variants.iter().all(|v| v.node.data.fields().is_empty())\n+            }\n+            ast::ItemKind::Struct(ref variant_data, _) => {\n+                variant_data.fields().is_empty()\n+            }\n+            _ => false\n+        }\n+    } else {\n+        false\n+    }\n+}"}]}