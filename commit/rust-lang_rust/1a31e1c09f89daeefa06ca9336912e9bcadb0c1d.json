{"sha": "1a31e1c09f89daeefa06ca9336912e9bcadb0c1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMzFlMWMwOWY4OWRhZWVmYTA2Y2E5MzM2OTEyZTliY2FkYjBjMWQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-04T21:56:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-06T01:11:02Z"}, "message": "std: Add a helper for symbols that may not exist\n\nRight now we only attempt to call one symbol which my not exist everywhere,\n__pthread_get_minstack, but this pattern will come up more often as we start to\nbind newer functionality of systems like Linux.\n\nTake a similar strategy as the Windows implementation where we use `dlopen` to\nlookup whether a symbol exists or not.", "tree": {"sha": "21555a570bd032e4aab39c7f9a6ee6aa9c16eada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21555a570bd032e4aab39c7f9a6ee6aa9c16eada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a31e1c09f89daeefa06ca9336912e9bcadb0c1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a31e1c09f89daeefa06ca9336912e9bcadb0c1d", "html_url": "https://github.com/rust-lang/rust/commit/1a31e1c09f89daeefa06ca9336912e9bcadb0c1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a31e1c09f89daeefa06ca9336912e9bcadb0c1d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bd2d2016178fe85e42d4d34868e9bc58dfd5d07", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd2d2016178fe85e42d4d34868e9bc58dfd5d07", "html_url": "https://github.com/rust-lang/rust/commit/1bd2d2016178fe85e42d4d34868e9bc58dfd5d07"}], "stats": {"total": 115, "additions": 87, "deletions": 28}, "files": [{"sha": "a64ee24718c0289b82a77d692cf56f8a1226de51", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=1a31e1c09f89daeefa06ca9336912e9bcadb0c1d", "patch": "@@ -1 +1 @@\n-Subproject commit 30f70baa6cc1ba3ddebb55b988fafbad0c0cc810\n+Subproject commit a64ee24718c0289b82a77d692cf56f8a1226de51"}, {"sha": "01769a75afde3d301a41247a204e198636eb2a9b", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a31e1c09f89daeefa06ca9336912e9bcadb0c1d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a31e1c09f89daeefa06ca9336912e9bcadb0c1d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=1a31e1c09f89daeefa06ca9336912e9bcadb0c1d", "patch": "@@ -27,6 +27,9 @@ use ops::Neg;\n #[cfg(target_os = \"openbsd\")]   pub use os::openbsd as platform;\n #[cfg(target_os = \"solaris\")]   pub use os::solaris as platform;\n \n+#[macro_use]\n+pub mod weak;\n+\n pub mod backtrace;\n pub mod condvar;\n pub mod ext;"}, {"sha": "a7195bab74192cff39f0759d301c2c95a5d68876", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1a31e1c09f89daeefa06ca9336912e9bcadb0c1d/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a31e1c09f89daeefa06ca9336912e9bcadb0c1d/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=1a31e1c09f89daeefa06ca9336912e9bcadb0c1d", "patch": "@@ -317,37 +317,12 @@ pub mod guard {\n // storage.  We need that information to avoid blowing up when a small stack\n // is created in an application with big thread-local storage requirements.\n // See #6233 for rationale and details.\n-//\n-// Use dlsym to get the symbol value at runtime, both for\n-// compatibility with older versions of glibc, and to avoid creating\n-// dependencies on GLIBC_PRIVATE symbols.  Assumes that we've been\n-// dynamically linked to libpthread but that is currently always the\n-// case.  We previously used weak linkage (under the same assumption),\n-// but that caused Debian to detect an unnecessarily strict versioned\n-// dependency on libc6 (#23628).\n #[cfg(target_os = \"linux\")]\n #[allow(deprecated)]\n fn min_stack_size(attr: *const libc::pthread_attr_t) -> usize {\n-    use dynamic_lib::DynamicLibrary;\n-    use sync::Once;\n-\n-    type F = unsafe extern \"C\" fn(*const libc::pthread_attr_t) -> libc::size_t;\n-    static INIT: Once = Once::new();\n-    static mut __pthread_get_minstack: Option<F> = None;\n-\n-    INIT.call_once(|| {\n-        let lib = match DynamicLibrary::open(None) {\n-            Ok(l) => l,\n-            Err(..) => return,\n-        };\n-        unsafe {\n-            if let Ok(f) = lib.symbol(\"__pthread_get_minstack\") {\n-                __pthread_get_minstack = Some(mem::transmute::<*const (), F>(f));\n-            }\n-        }\n-    });\n+    weak!(fn __pthread_get_minstack(*const libc::pthread_attr_t) -> libc::size_t);\n \n-    match unsafe { __pthread_get_minstack } {\n+    match __pthread_get_minstack.get() {\n         None => libc::PTHREAD_STACK_MIN as usize,\n         Some(f) => unsafe { f(attr) as usize },\n     }"}, {"sha": "2cbcd62f5339621724f760f81e006a62dc83f640", "filename": "src/libstd/sys/unix/weak.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/1a31e1c09f89daeefa06ca9336912e9bcadb0c1d/src%2Flibstd%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a31e1c09f89daeefa06ca9336912e9bcadb0c1d/src%2Flibstd%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fweak.rs?ref=1a31e1c09f89daeefa06ca9336912e9bcadb0c1d", "patch": "@@ -0,0 +1,81 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Support for \"weak linkage\" to symbols on Unix\n+//!\n+//! Some I/O operations we do in libstd require newer versions of OSes but we\n+//! need to maintain binary compatibility with older releases for now. In order\n+//! to use the new functionality when available we use this module for\n+//! detection.\n+//!\n+//! One option to use here is weak linkage, but that is unfortunately only\n+//! really workable on Linux. Hence, use dlsym to get the symbol value at\n+//! runtime. This is also done for compatibility with older versions of glibc,\n+//! and to avoid creating dependencies on GLIBC_PRIVATE symbols. It assumes that\n+//! we've been dynamically linked to the library the symbol comes from, but that\n+//! is currently always the case for things like libpthread/libc.\n+//!\n+//! A long time ago this used weak linkage for the __pthread_get_minstack\n+//! symbol, but that caused Debian to detect an unnecessarily strict versioned\n+//! dependency on libc6 (#23628).\n+\n+use libc;\n+\n+use ffi::CString;\n+use marker;\n+use mem;\n+use sync::atomic::{AtomicUsize, Ordering};\n+\n+macro_rules! weak {\n+    (fn $name:ident($($t:ty),*) -> $ret:ty) => (\n+        static $name: ::sys::weak::Weak<unsafe extern fn($($t),*) -> $ret> =\n+            ::sys::weak::Weak::new(stringify!($name));\n+    )\n+}\n+\n+pub struct Weak<F> {\n+    name: &'static str,\n+    addr: AtomicUsize,\n+    _marker: marker::PhantomData<F>,\n+}\n+\n+impl<F> Weak<F> {\n+    pub const fn new(name: &'static str) -> Weak<F> {\n+        Weak {\n+            name: name,\n+            addr: AtomicUsize::new(1),\n+            _marker: marker::PhantomData,\n+        }\n+    }\n+\n+    pub fn get(&self) -> Option<&F> {\n+        assert_eq!(mem::size_of::<F>(), mem::size_of::<usize>());\n+        unsafe {\n+            if self.addr.load(Ordering::SeqCst) == 1 {\n+                self.addr.store(fetch(self.name), Ordering::SeqCst);\n+            }\n+            mem::transmute::<&AtomicUsize, Option<&F>>(&self.addr)\n+        }\n+    }\n+}\n+\n+unsafe fn fetch(name: &str) -> usize {\n+    let name = match CString::new(name) {\n+        Ok(cstr) => cstr,\n+        Err(..) => return 0,\n+    };\n+    let lib = libc::dlopen(0 as *const _, libc::RTLD_LAZY);\n+    if lib.is_null() {\n+        return 0\n+    }\n+    let ret = libc::dlsym(lib, name.as_ptr()) as usize;\n+    libc::dlclose(lib);\n+    return ret\n+}"}]}