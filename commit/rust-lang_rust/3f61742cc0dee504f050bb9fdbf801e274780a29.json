{"sha": "3f61742cc0dee504f050bb9fdbf801e274780a29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNjE3NDJjYzBkZWU1MDRmMDUwYmI5ZmRiZjgwMWUyNzQ3ODBhMjk=", "commit": {"author": {"name": "Vadzim Dambrouski", "email": "pftbest@gmail.com", "date": "2018-01-15T13:42:44Z"}, "committer": {"name": "Vadzim Dambrouski", "email": "pftbest@gmail.com", "date": "2018-01-15T13:42:44Z"}, "message": "Fix no_integrated_as option to work with new codegen architecture.\n\nOld implementation called the assembler once per crate, but we need to call\nit for each object file instead, because a single crate can now have more\nthan one object file.\n\nThis patch fixes issue #45836 (Can't compile core for msp430 in release mode)", "tree": {"sha": "7693d37dffa93a1fcc37f866c7daf0e0abfc8b23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7693d37dffa93a1fcc37f866c7daf0e0abfc8b23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f61742cc0dee504f050bb9fdbf801e274780a29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f61742cc0dee504f050bb9fdbf801e274780a29", "html_url": "https://github.com/rust-lang/rust/commit/3f61742cc0dee504f050bb9fdbf801e274780a29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f61742cc0dee504f050bb9fdbf801e274780a29/comments", "author": {"login": "pftbest", "id": 1573340, "node_id": "MDQ6VXNlcjE1NzMzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1573340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pftbest", "html_url": "https://github.com/pftbest", "followers_url": "https://api.github.com/users/pftbest/followers", "following_url": "https://api.github.com/users/pftbest/following{/other_user}", "gists_url": "https://api.github.com/users/pftbest/gists{/gist_id}", "starred_url": "https://api.github.com/users/pftbest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pftbest/subscriptions", "organizations_url": "https://api.github.com/users/pftbest/orgs", "repos_url": "https://api.github.com/users/pftbest/repos", "events_url": "https://api.github.com/users/pftbest/events{/privacy}", "received_events_url": "https://api.github.com/users/pftbest/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pftbest", "id": 1573340, "node_id": "MDQ6VXNlcjE1NzMzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1573340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pftbest", "html_url": "https://github.com/pftbest", "followers_url": "https://api.github.com/users/pftbest/followers", "following_url": "https://api.github.com/users/pftbest/following{/other_user}", "gists_url": "https://api.github.com/users/pftbest/gists{/gist_id}", "starred_url": "https://api.github.com/users/pftbest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pftbest/subscriptions", "organizations_url": "https://api.github.com/users/pftbest/orgs", "repos_url": "https://api.github.com/users/pftbest/repos", "events_url": "https://api.github.com/users/pftbest/events{/privacy}", "received_events_url": "https://api.github.com/users/pftbest/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff449d505728276e822ca9a80c1e7b2da8288a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff449d505728276e822ca9a80c1e7b2da8288a2", "html_url": "https://github.com/rust-lang/rust/commit/8ff449d505728276e822ca9a80c1e7b2da8288a2"}], "stats": {"total": 110, "additions": 58, "deletions": 52}, "files": [{"sha": "024f80f050f5174af88e1b65319b8e7868a2d749", "filename": "src/librustc_trans/back/command.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f61742cc0dee504f050bb9fdbf801e274780a29/src%2Flibrustc_trans%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f61742cc0dee504f050bb9fdbf801e274780a29/src%2Flibrustc_trans%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fcommand.rs?ref=3f61742cc0dee504f050bb9fdbf801e274780a29", "patch": "@@ -16,6 +16,7 @@ use std::fmt;\n use std::io;\n use std::process::{self, Output, Child};\n \n+#[derive(Clone)]\n pub struct Command {\n     program: OsString,\n     args: Vec<OsString>,"}, {"sha": "d401d68783aa4001da95fc6721fef82e4ed7b959", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 57, "deletions": 52, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/3f61742cc0dee504f050bb9fdbf801e274780a29/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f61742cc0dee504f050bb9fdbf801e274780a29/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=3f61742cc0dee504f050bb9fdbf801e274780a29", "patch": "@@ -11,14 +11,15 @@\n use back::bytecode::{self, RLIB_BYTECODE_EXTENSION};\n use back::lto::{self, ModuleBuffer, ThinBuffer};\n use back::link::{self, get_linker, remove};\n+use back::command::Command;\n use back::linker::LinkerInfo;\n use back::symbol_export::ExportedSymbols;\n use base;\n use consts;\n use rustc_incremental::{save_trans_partition, in_incr_comp_dir};\n use rustc::dep_graph::{DepGraph, WorkProductFileKind};\n use rustc::middle::cstore::{LinkMeta, EncodedMetadata};\n-use rustc::session::config::{self, OutputFilenames, OutputType, OutputTypes, Passes, SomePasses,\n+use rustc::session::config::{self, OutputFilenames, OutputType, Passes, SomePasses,\n                              AllPasses, Sanitizer};\n use rustc::session::Session;\n use rustc::util::nodemap::FxHashMap;\n@@ -32,7 +33,7 @@ use CrateInfo;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::ty::TyCtxt;\n use rustc::util::common::{time, time_depth, set_time_depth, path2cstr, print_time_passes_entry};\n-use rustc::util::fs::{link_or_copy, rename_or_copy_remove};\n+use rustc::util::fs::{link_or_copy};\n use errors::{self, Handler, Level, DiagnosticBuilder, FatalError, DiagnosticId};\n use errors::emitter::{Emitter};\n use syntax::attr;\n@@ -258,6 +259,7 @@ pub struct ModuleConfig {\n     // make the object file bitcode. Provides easy compatibility with\n     // emscripten's ecc compiler, when used as the linker.\n     obj_is_bitcode: bool,\n+    no_integrated_as: bool,\n }\n \n impl ModuleConfig {\n@@ -275,6 +277,7 @@ impl ModuleConfig {\n             emit_asm: false,\n             emit_obj: false,\n             obj_is_bitcode: false,\n+            no_integrated_as: false,\n \n             no_verify: false,\n             no_prepopulate_passes: false,\n@@ -313,6 +316,12 @@ impl ModuleConfig {\n     }\n }\n \n+/// Assembler name and command used by codegen when no_integrated_as is enabled\n+struct AssemblerCommand {\n+    name: PathBuf,\n+    cmd: Command,\n+}\n+\n /// Additional resources used by optimize_and_codegen (not module specific)\n #[derive(Clone)]\n pub struct CodegenContext {\n@@ -356,6 +365,8 @@ pub struct CodegenContext {\n     // A reference to the TimeGraph so we can register timings. None means that\n     // measuring is disabled.\n     time_graph: Option<TimeGraph>,\n+    // The assembler command if no_integrated_as option is enabled, None otherwise\n+    assembler_cmd: Option<Arc<AssemblerCommand>>,\n }\n \n impl CodegenContext {\n@@ -639,13 +650,17 @@ unsafe fn codegen(cgcx: &CodegenContext,\n         !cgcx.crate_types.contains(&config::CrateTypeRlib) &&\n         mtrans.kind == ModuleKind::Regular;\n \n+    // If we don't have the integrated assembler, then we need to emit asm\n+    // from LLVM and use `gcc` to create the object file.\n+    let asm_to_obj = config.emit_obj && config.no_integrated_as;\n+\n     // Change what we write and cleanup based on whether obj files are\n     // just llvm bitcode. In that case write bitcode, and possibly\n     // delete the bitcode if it wasn't requested. Don't generate the\n     // machine code, instead copy the .o file from the .bc\n     let write_bc = config.emit_bc || (config.obj_is_bitcode && !asm2wasm);\n     let rm_bc = !config.emit_bc && config.obj_is_bitcode && !asm2wasm;\n-    let write_obj = config.emit_obj && !config.obj_is_bitcode && !asm2wasm;\n+    let write_obj = config.emit_obj && !config.obj_is_bitcode && !asm2wasm && !asm_to_obj;\n     let copy_bc_to_obj = config.emit_obj && config.obj_is_bitcode && !asm2wasm;\n \n     let bc_out = cgcx.output_filenames.temp_path(OutputType::Bitcode, module_name);\n@@ -725,7 +740,7 @@ unsafe fn codegen(cgcx: &CodegenContext,\n             timeline.record(\"ir\");\n         }\n \n-        if config.emit_asm || (asm2wasm && config.emit_obj) {\n+        if config.emit_asm || (asm2wasm && config.emit_obj) || asm_to_obj {\n             let path = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n \n             // We can't use the same module for asm and binary output, because that triggers\n@@ -760,6 +775,14 @@ unsafe fn codegen(cgcx: &CodegenContext,\n                                   llvm::FileType::ObjectFile)\n             })?;\n             timeline.record(\"obj\");\n+        } else if asm_to_obj {\n+            let assembly = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n+            run_assembler(cgcx, diag_handler, &assembly, &obj_out);\n+            timeline.record(\"asm_to_obj\");\n+\n+            if !config.emit_asm && !cgcx.save_temps {\n+                drop(fs::remove_file(&assembly));\n+            }\n         }\n \n         Ok(())\n@@ -841,7 +864,6 @@ pub fn start_async_translation(tcx: TyCtxt,\n                                total_cgus: usize)\n                                -> OngoingCrateTranslation {\n     let sess = tcx.sess;\n-    let crate_output = tcx.output_filenames(LOCAL_CRATE);\n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n     let no_builtins = attr::contains_name(&tcx.hir.krate().attrs, \"no_builtins\");\n     let subsystem = attr::first_attr_value_str_by_name(&tcx.hir.krate().attrs,\n@@ -855,19 +877,9 @@ pub fn start_async_translation(tcx: TyCtxt,\n         subsystem.to_string()\n     });\n \n-    let no_integrated_as = tcx.sess.opts.cg.no_integrated_as ||\n-        (tcx.sess.target.target.options.no_integrated_as &&\n-         (crate_output.outputs.contains_key(&OutputType::Object) ||\n-          crate_output.outputs.contains_key(&OutputType::Exe)));\n     let linker_info = LinkerInfo::new(tcx);\n     let crate_info = CrateInfo::new(tcx);\n \n-    let output_types_override = if no_integrated_as {\n-        OutputTypes::new(&[(OutputType::Assembly, None)])\n-    } else {\n-        sess.opts.output_types.clone()\n-    };\n-\n     // Figure out what we actually need to build.\n     let mut modules_config = ModuleConfig::new(sess.opts.cg.passes.clone());\n     let mut metadata_config = ModuleConfig::new(vec![]);\n@@ -913,7 +925,10 @@ pub fn start_async_translation(tcx: TyCtxt,\n         allocator_config.emit_bc_compressed = true;\n     }\n \n-    for output_type in output_types_override.keys() {\n+    modules_config.no_integrated_as = tcx.sess.opts.cg.no_integrated_as ||\n+        tcx.sess.target.target.options.no_integrated_as;\n+\n+    for output_type in sess.opts.output_types.keys() {\n         match *output_type {\n             OutputType::Bitcode => { modules_config.emit_bc = true; }\n             OutputType::LlvmAssembly => { modules_config.emit_ir = true; }\n@@ -976,7 +991,6 @@ pub fn start_async_translation(tcx: TyCtxt,\n         metadata,\n         windows_subsystem,\n         linker_info,\n-        no_integrated_as,\n         crate_info,\n \n         time_graph,\n@@ -1389,6 +1403,18 @@ fn start_executing_work(tcx: TyCtxt,\n     let wasm_import_memory =\n         attr::contains_name(&tcx.hir.krate().attrs, \"wasm_import_memory\");\n \n+    let assembler_cmd = if modules_config.no_integrated_as {\n+        // HACK: currently we use linker (gcc) as our assembler\n+        let (name, mut cmd, _) = get_linker(sess);\n+        cmd.args(&sess.target.target.options.asm_args);\n+        Some(Arc::new(AssemblerCommand {\n+            name,\n+            cmd,\n+        }))\n+    } else {\n+        None\n+    };\n+\n     let cgcx = CodegenContext {\n         crate_types: sess.crate_types.borrow().clone(),\n         each_linked_rlib_for_lto,\n@@ -1428,6 +1454,7 @@ fn start_executing_work(tcx: TyCtxt,\n         binaryen_linker: tcx.sess.linker_flavor() == LinkerFlavor::Binaryen,\n         debuginfo: tcx.sess.opts.debuginfo,\n         wasm_import_memory: wasm_import_memory,\n+        assembler_cmd,\n     };\n \n     // This is the \"main loop\" of parallel work happening for parallel codegen.\n@@ -1936,15 +1963,14 @@ fn spawn_work(cgcx: CodegenContext, work: WorkItem) {\n     });\n }\n \n-pub fn run_assembler(sess: &Session, outputs: &OutputFilenames) {\n-    let (pname, mut cmd, _) = get_linker(sess);\n+pub fn run_assembler(cgcx: &CodegenContext, handler: &Handler, assembly: &Path, object: &Path) {\n+    let assembler = cgcx.assembler_cmd\n+        .as_ref()\n+        .expect(\"cgcx.assembler_cmd is missing?\");\n \n-    for arg in &sess.target.target.options.asm_args {\n-        cmd.arg(arg);\n-    }\n-\n-    cmd.arg(\"-c\").arg(\"-o\").arg(&outputs.path(OutputType::Object))\n-                           .arg(&outputs.temp_path(OutputType::Assembly, None));\n+    let pname = &assembler.name;\n+    let mut cmd = assembler.cmd.clone();\n+    cmd.arg(\"-c\").arg(\"-o\").arg(object).arg(assembly);\n     debug!(\"{:?}\", cmd);\n \n     match cmd.output() {\n@@ -1953,18 +1979,18 @@ pub fn run_assembler(sess: &Session, outputs: &OutputFilenames) {\n                 let mut note = prog.stderr.clone();\n                 note.extend_from_slice(&prog.stdout);\n \n-                sess.struct_err(&format!(\"linking with `{}` failed: {}\",\n-                                         pname.display(),\n-                                         prog.status))\n+                handler.struct_err(&format!(\"linking with `{}` failed: {}\",\n+                                            pname.display(),\n+                                            prog.status))\n                     .note(&format!(\"{:?}\", &cmd))\n                     .note(str::from_utf8(&note[..]).unwrap())\n                     .emit();\n-                sess.abort_if_errors();\n+                handler.abort_if_errors();\n             }\n         },\n         Err(e) => {\n-            sess.err(&format!(\"could not exec the linker `{}`: {}\", pname.display(), e));\n-            sess.abort_if_errors();\n+            handler.err(&format!(\"could not exec the linker `{}`: {}\", pname.display(), e));\n+            handler.abort_if_errors();\n         }\n     }\n }\n@@ -2138,7 +2164,6 @@ pub struct OngoingCrateTranslation {\n     metadata: EncodedMetadata,\n     windows_subsystem: Option<String>,\n     linker_info: LinkerInfo,\n-    no_integrated_as: bool,\n     crate_info: CrateInfo,\n     time_graph: Option<TimeGraph>,\n     coordinator_send: Sender<Box<Any + Send>>,\n@@ -2194,26 +2219,6 @@ impl OngoingCrateTranslation {\n             metadata_module: compiled_modules.metadata_module,\n         };\n \n-        if self.no_integrated_as {\n-            run_assembler(sess,  &self.output_filenames);\n-\n-            // HACK the linker expects the object file to be named foo.0.o but\n-            // `run_assembler` produces an object named just foo.o. Rename it if we\n-            // are going to build an executable\n-            if sess.opts.output_types.contains_key(&OutputType::Exe) {\n-                let f =  self.output_filenames.path(OutputType::Object);\n-                rename_or_copy_remove(&f,\n-                    f.with_file_name(format!(\"{}.0.o\",\n-                                             f.file_stem().unwrap().to_string_lossy()))).unwrap();\n-            }\n-\n-            // Remove assembly source, unless --save-temps was specified\n-            if !sess.opts.cg.save_temps {\n-                fs::remove_file(&self.output_filenames\n-                                     .temp_path(OutputType::Assembly, None)).unwrap();\n-            }\n-        }\n-\n         trans\n     }\n "}]}