{"sha": "7f268838cd2ea00e3d9a724b8994962510cc7778", "node_id": "C_kwDOAAsO6NoAKDdmMjY4ODM4Y2QyZWEwMGUzZDlhNzI0Yjg5OTQ5NjI1MTBjYzc3Nzg", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-11-04T16:43:13Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-11-04T16:43:13Z"}, "message": "rustdoc: Use conditional for _stripped fold\n\nFollowup: https://github.com/rust-lang/rust/pull/90475#discussion_r741405472", "tree": {"sha": "77438e71b176016ca23ad93c47d3334046ff834d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77438e71b176016ca23ad93c47d3334046ff834d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f268838cd2ea00e3d9a724b8994962510cc7778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f268838cd2ea00e3d9a724b8994962510cc7778", "html_url": "https://github.com/rust-lang/rust/commit/7f268838cd2ea00e3d9a724b8994962510cc7778", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f268838cd2ea00e3d9a724b8994962510cc7778/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27143a9094b55a00d5f440b05b0cb4233b300d33", "url": "https://api.github.com/repos/rust-lang/rust/commits/27143a9094b55a00d5f440b05b0cb4233b300d33", "html_url": "https://github.com/rust-lang/rust/commit/27143a9094b55a00d5f440b05b0cb4233b300d33"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "cd0f44e5696fec3e2038dcb5d5a76f24b8fbfbb5", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7f268838cd2ea00e3d9a724b8994962510cc7778/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f268838cd2ea00e3d9a724b8994962510cc7778/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=7f268838cd2ea00e3d9a724b8994962510cc7778", "patch": "@@ -20,22 +20,28 @@ crate trait DocFolder: Sized {\n             StructItem(mut i) => {\n                 let num_fields = i.fields.len();\n                 i.fields = i.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                i.fields_stripped |=\n-                    num_fields != i.fields.len() || i.fields.iter().any(|f| f.is_stripped());\n+                if !i.fields_stripped {\n+                    i.fields_stripped =\n+                        num_fields != i.fields.len() || i.fields.iter().any(|f| f.is_stripped());\n+                }\n                 StructItem(i)\n             }\n             UnionItem(mut i) => {\n                 let num_fields = i.fields.len();\n                 i.fields = i.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                i.fields_stripped |=\n-                    num_fields != i.fields.len() || i.fields.iter().any(|f| f.is_stripped());\n+                if !i.fields_stripped {\n+                    i.fields_stripped =\n+                        num_fields != i.fields.len() || i.fields.iter().any(|f| f.is_stripped());\n+                }\n                 UnionItem(i)\n             }\n             EnumItem(mut i) => {\n                 let num_variants = i.variants.len();\n                 i.variants = i.variants.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                i.variants_stripped |=\n-                    num_variants != i.variants.len() || i.variants.iter().any(|f| f.is_stripped());\n+                if !i.variants_stripped {\n+                    i.variants_stripped = num_variants != i.variants.len()\n+                        || i.variants.iter().any(|f| f.is_stripped());\n+                }\n                 EnumItem(i)\n             }\n             TraitItem(mut i) => {\n@@ -50,8 +56,10 @@ crate trait DocFolder: Sized {\n                 Variant::Struct(mut j) => {\n                     let num_fields = j.fields.len();\n                     j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                    j.fields_stripped |=\n-                        num_fields != j.fields.len() || j.fields.iter().any(|f| f.is_stripped());\n+                    if !j.fields_stripped {\n+                        j.fields_stripped = num_fields != j.fields.len()\n+                            || j.fields.iter().any(|f| f.is_stripped());\n+                    }\n                     VariantItem(Variant::Struct(j))\n                 }\n                 Variant::Tuple(fields) => {"}]}