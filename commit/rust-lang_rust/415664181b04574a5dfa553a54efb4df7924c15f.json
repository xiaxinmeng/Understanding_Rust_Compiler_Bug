{"sha": "415664181b04574a5dfa553a54efb4df7924c15f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNTY2NDE4MWIwNDU3NGE1ZGZhNTUzYTU0ZWZiNGRmNzkyNGMxNWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-20T02:48:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-21T06:13:50Z"}, "message": "rustdoc: Begin removing legacy modes", "tree": {"sha": "565165e6d69d4c86acbf0461d2ba00462ed7742f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/565165e6d69d4c86acbf0461d2ba00462ed7742f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/415664181b04574a5dfa553a54efb4df7924c15f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/415664181b04574a5dfa553a54efb4df7924c15f", "html_url": "https://github.com/rust-lang/rust/commit/415664181b04574a5dfa553a54efb4df7924c15f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/415664181b04574a5dfa553a54efb4df7924c15f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "145e02347e88176e342631033abb748c51db45e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/145e02347e88176e342631033abb748c51db45e8", "html_url": "https://github.com/rust-lang/rust/commit/145e02347e88176e342631033abb748c51db45e8"}], "stats": {"total": 387, "additions": 197, "deletions": 190}, "files": [{"sha": "79e0deb77ce6465b8852ce98d14b6431f64b0c86", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -28,7 +28,7 @@ pub type Ctxt = {\n \n type SrvOwner<T> = fn(srv: Srv) -> T;\n pub type CtxtHandler<T> = fn~(ctxt: Ctxt) -> T;\n-type Parser = fn~(Session, ~str) -> @ast::crate;\n+type Parser = fn~(Session, +s: ~str) -> @ast::crate;\n \n enum Msg {\n     HandleRequest(fn~(Ctxt)),"}, {"sha": "0dec45e02c5368f66d061bba27023dd1bc33b5a2", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -17,7 +17,7 @@ pub type CrateAttrs = {\n mod test {\n     #[legacy_exports];\n \n-    fn parse_attributes(source: ~str) -> ~[ast::attribute] {\n+    fn parse_attributes(+source: ~str) -> ~[ast::attribute] {\n         use syntax::parse;\n         use parse::parser;\n         use parse::attr::parser_attr;\n@@ -33,7 +33,7 @@ mod test {\n }\n \n fn doc_metas(\n-    attrs: ~[ast::attribute]\n+    +attrs: ~[ast::attribute]\n ) -> ~[@ast::meta_item] {\n \n     let doc_attrs = attr::find_attrs_by_name(attrs, ~\"doc\");\n@@ -44,7 +44,7 @@ fn doc_metas(\n     return doc_metas;\n }\n \n-pub fn parse_crate(attrs: ~[ast::attribute]) -> CrateAttrs {\n+pub fn parse_crate(+attrs: ~[ast::attribute]) -> CrateAttrs {\n     let link_metas = attr::find_linkage_metas(attrs);\n \n     {\n@@ -76,7 +76,7 @@ fn should_not_extract_crate_name_if_no_name_value_in_link_attribute() {\n     assert attrs.name == None;\n }\n \n-pub fn parse_desc(attrs: ~[ast::attribute]) -> Option<~str> {\n+pub fn parse_desc(+attrs: ~[ast::attribute]) -> Option<~str> {\n     let doc_strs = do doc_metas(attrs).filter_map |meta| {\n         attr::get_meta_item_value_str(*meta)\n     };\n@@ -103,7 +103,7 @@ fn parse_desc_should_parse_simple_doc_attributes() {\n     assert attrs == Some(~\"basic\");\n }\n \n-pub fn parse_hidden(attrs: ~[ast::attribute]) -> bool {\n+pub fn parse_hidden(+attrs: ~[ast::attribute]) -> bool {\n     do doc_metas(attrs).find |meta| {\n         match attr::get_meta_item_list(meta) {\n           Some(metas) => {"}, {"sha": "fd68c48a5a7a7a6bb6e7f661cf748cb32a4713a4", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -21,7 +21,7 @@ pub fn mk_pass() -> Pass {\n \n fn run(\n     srv: astsrv::Srv,\n-    doc: doc::Doc\n+    +doc: doc::Doc\n ) -> doc::Doc {\n     let fold = fold::Fold({\n         fold_crate: fold_crate,\n@@ -31,12 +31,12 @@ fn run(\n         fold_impl: fold_impl,\n         .. *fold::default_any_fold(srv)\n     });\n-    fold.fold_doc(fold, doc)\n+    fold.fold_doc(&fold, doc)\n }\n \n fn fold_crate(\n-    fold: fold::Fold<astsrv::Srv>,\n-    doc: doc::CrateDoc\n+    fold: &fold::Fold<astsrv::Srv>,\n+    +doc: doc::CrateDoc\n ) -> doc::CrateDoc {\n \n     let srv = fold.ctxt;\n@@ -65,8 +65,8 @@ fn should_replace_top_module_name_with_crate_name() {\n }\n \n fn fold_item(\n-    fold: fold::Fold<astsrv::Srv>,\n-    doc: doc::ItemDoc\n+    fold: &fold::Fold<astsrv::Srv>,\n+    +doc: doc::ItemDoc\n ) -> doc::ItemDoc {\n \n     let srv = fold.ctxt;\n@@ -90,7 +90,7 @@ fn fold_item(\n fn parse_item_attrs<T:Send>(\n     srv: astsrv::Srv,\n     id: doc::AstId,\n-    +parse_attrs: fn~(~[ast::attribute]) -> T) -> T {\n+    +parse_attrs: fn~(+a: ~[ast::attribute]) -> T) -> T {\n     do astsrv::exec(srv) |move parse_attrs, ctxt| {\n         let attrs = match ctxt.ast_map.get(id) {\n           ast_map::node_item(item, _) => item.attrs,\n@@ -132,8 +132,8 @@ fn should_extract_fn_attributes() {\n }\n \n fn fold_enum(\n-    fold: fold::Fold<astsrv::Srv>,\n-    doc: doc::EnumDoc\n+    fold: &fold::Fold<astsrv::Srv>,\n+    +doc: doc::EnumDoc\n ) -> doc::EnumDoc {\n \n     let srv = fold.ctxt;\n@@ -183,8 +183,8 @@ fn should_extract_variant_docs() {\n }\n \n fn fold_trait(\n-    fold: fold::Fold<astsrv::Srv>,\n-    doc: doc::TraitDoc\n+    fold: &fold::Fold<astsrv::Srv>,\n+    +doc: doc::TraitDoc\n ) -> doc::TraitDoc {\n     let srv = fold.ctxt;\n     let doc = fold::default_seq_fold_trait(fold, doc);\n@@ -259,8 +259,8 @@ fn should_extract_trait_method_docs() {\n \n \n fn fold_impl(\n-    fold: fold::Fold<astsrv::Srv>,\n-    doc: doc::ImplDoc\n+    fold: &fold::Fold<astsrv::Srv>,\n+    +doc: doc::ImplDoc\n ) -> doc::ImplDoc {\n     let srv = fold.ctxt;\n     let doc = fold::default_seq_fold_impl(fold, doc);"}, {"sha": "87f601ccc45ad4161acb183807efd276291d76b7", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -1,5 +1,6 @@\n use result::Result;\n use std::getopts;\n+use std::cell::Cell;\n \n /// The type of document to output\n pub enum OutputFormat {\n@@ -115,21 +116,21 @@ fn mock_program_output(_prog: &str, _args: &[~str]) -> {\n     }\n }\n \n-fn parse_config(args: ~[~str]) -> Result<Config, ~str> {\n+fn parse_config(args: &[~str]) -> Result<Config, ~str> {\n     parse_config_(args, run::program_output)\n }\n \n fn parse_config_(\n-    args: ~[~str],\n-    program_output: ProgramOutput\n+    args: &[~str],\n+    +program_output: ProgramOutput\n ) -> Result<Config, ~str> {\n     let args = vec::tail(args);\n     let opts = vec::unzip(opts()).first();\n     match getopts::getopts(args, opts) {\n         result::Ok(matches) => {\n             if vec::len(matches.free) == 1u {\n                 let input_crate = Path(vec::head(matches.free));\n-                config_from_opts(&input_crate, matches, program_output)\n+                config_from_opts(&input_crate, matches, move program_output)\n             } else if vec::is_empty(matches.free) {\n                 result::Err(~\"no crates specified\")\n             } else {\n@@ -144,8 +145,8 @@ fn parse_config_(\n \n fn config_from_opts(\n     input_crate: &Path,\n-    matches: getopts::Matches,\n-    program_output: ProgramOutput\n+    +matches: getopts::Matches,\n+    +program_output: ProgramOutput\n ) -> Result<Config, ~str> {\n \n     let config = default_config(input_crate);\n@@ -187,10 +188,11 @@ fn config_from_opts(\n             }\n         }\n     };\n+    let program_output = Cell(move program_output);\n     let result = do result::chain(result) |config| {\n         let pandoc_cmd = getopts::opt_maybe_str(matches, opt_pandoc_cmd());\n         let pandoc_cmd = maybe_find_pandoc(\n-            config, pandoc_cmd, program_output);\n+            &config, pandoc_cmd, move program_output.take());\n         do result::chain(pandoc_cmd) |pandoc_cmd| {\n             result::Ok({\n                 pandoc_cmd: pandoc_cmd,\n@@ -201,26 +203,26 @@ fn config_from_opts(\n     return result;\n }\n \n-fn parse_output_format(output_format: ~str) -> Result<OutputFormat, ~str> {\n-    match output_format {\n+fn parse_output_format(output_format: &str) -> Result<OutputFormat, ~str> {\n+    match output_format.to_str() {\n       ~\"markdown\" => result::Ok(Markdown),\n       ~\"html\" => result::Ok(PandocHtml),\n       _ => result::Err(fmt!(\"unknown output format '%s'\", output_format))\n     }\n }\n \n-fn parse_output_style(output_style: ~str) -> Result<OutputStyle, ~str> {\n-    match output_style {\n+fn parse_output_style(output_style: &str) -> Result<OutputStyle, ~str> {\n+    match output_style.to_str() {\n       ~\"doc-per-crate\" => result::Ok(DocPerCrate),\n       ~\"doc-per-mod\" => result::Ok(DocPerMod),\n       _ => result::Err(fmt!(\"unknown output style '%s'\", output_style))\n     }\n }\n \n fn maybe_find_pandoc(\n-    config: Config,\n-    maybe_pandoc_cmd: Option<~str>,\n-    program_output: ProgramOutput\n+    config: &Config,\n+    +maybe_pandoc_cmd: Option<~str>,\n+    +program_output: ProgramOutput\n ) -> Result<Option<~str>, ~str> {\n     if config.output_format != PandocHtml {\n         return result::Ok(maybe_pandoc_cmd);\n@@ -264,7 +266,7 @@ fn should_find_pandoc() {\n             status: 0, out: ~\"pandoc 1.8.2.1\", err: ~\"\"\n         }\n     };\n-    let result = maybe_find_pandoc(config, None, mock_program_output);\n+    let result = maybe_find_pandoc(&config, None, move mock_program_output);\n     assert result == result::Ok(Some(~\"pandoc\"));\n }\n \n@@ -281,14 +283,14 @@ fn should_error_with_no_pandoc() {\n             status: 1, out: ~\"\", err: ~\"\"\n         }\n     };\n-    let result = maybe_find_pandoc(config, None, mock_program_output);\n+    let result = maybe_find_pandoc(&config, None, move mock_program_output);\n     assert result == result::Err(~\"couldn't find pandoc\");\n }\n \n #[cfg(test)]\n mod test {\n     #[legacy_exports];\n-    fn parse_config(args: ~[~str]) -> Result<Config, ~str> {\n+    fn parse_config(args: &[~str]) -> Result<Config, ~str> {\n         parse_config_(args, mock_program_output)\n     }\n }"}, {"sha": "0fbdc0f7e5b7ea87ea99440545a41f0901c55832", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -16,18 +16,18 @@ pub fn mk_pass() -> Pass {\n \n fn run(\n     _srv: astsrv::Srv,\n-    doc: doc::Doc\n+    +doc: doc::Doc\n ) -> doc::Doc {\n     let fold = fold::Fold({\n         fold_item: fold_item,\n         fold_trait: fold_trait,\n         fold_impl: fold_impl,\n         .. *fold::default_any_fold(())\n     });\n-    fold.fold_doc(fold, doc)\n+    fold.fold_doc(&fold, doc)\n }\n \n-fn fold_item(fold: fold::Fold<()>, doc: doc::ItemDoc) -> doc::ItemDoc {\n+fn fold_item(fold: &fold::Fold<()>, +doc: doc::ItemDoc) -> doc::ItemDoc {\n     let doc = fold::default_seq_fold_item(fold, doc);\n \n     {\n@@ -36,7 +36,7 @@ fn fold_item(fold: fold::Fold<()>, doc: doc::ItemDoc) -> doc::ItemDoc {\n     }\n }\n \n-fn fold_trait(fold: fold::Fold<()>, doc: doc::TraitDoc) -> doc::TraitDoc {\n+fn fold_trait(fold: &fold::Fold<()>, +doc: doc::TraitDoc) -> doc::TraitDoc {\n     let doc =fold::default_seq_fold_trait(fold, doc);\n \n     {\n@@ -48,7 +48,7 @@ fn fold_trait(fold: fold::Fold<()>, doc: doc::TraitDoc) -> doc::TraitDoc {\n     }\n }\n \n-fn fold_impl(fold: fold::Fold<()>, doc: doc::ImplDoc) -> doc::ImplDoc {\n+fn fold_impl(fold: &fold::Fold<()>, +doc: doc::ImplDoc) -> doc::ImplDoc {\n     let doc =fold::default_seq_fold_impl(fold, doc);\n \n     {"}, {"sha": "9111c6242c98ca33b228d745885d6ae20bb4bf2c", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -25,7 +25,7 @@ pub fn interner() -> @syntax::parse::token::ident_interner {\n \n pub fn from_srv(\n     srv: astsrv::Srv,\n-    default_name: ~str\n+    +default_name: ~str\n ) -> doc::Doc {\n \n     //! Use the AST service to create a document tree\n@@ -37,7 +37,7 @@ pub fn from_srv(\n \n pub fn extract(\n     crate: @ast::crate,\n-    default_name: ~str\n+    +default_name: ~str\n ) -> doc::Doc {\n     doc::Doc_({\n         pages: ~[\n@@ -50,13 +50,13 @@ pub fn extract(\n \n fn top_moddoc_from_crate(\n     crate: @ast::crate,\n-    default_name: ~str\n+    +default_name: ~str\n ) -> doc::ModDoc {\n     moddoc_from_mod(mk_itemdoc(ast::crate_node_id, default_name),\n                     crate.node.module)\n }\n \n-fn mk_itemdoc(id: ast::node_id, name: ~str) -> doc::ItemDoc {\n+fn mk_itemdoc(id: ast::node_id, +name: ~str) -> doc::ItemDoc {\n     {\n         id: id,\n         name: name,\n@@ -69,7 +69,7 @@ fn mk_itemdoc(id: ast::node_id, name: ~str) -> doc::ItemDoc {\n }\n \n fn moddoc_from_mod(\n-    itemdoc: doc::ItemDoc,\n+    +itemdoc: doc::ItemDoc,\n     module_: ast::_mod\n ) -> doc::ModDoc {\n     doc::ModDoc_({\n@@ -130,7 +130,7 @@ fn moddoc_from_mod(\n }\n \n fn nmoddoc_from_mod(\n-    itemdoc: doc::ItemDoc,\n+    +itemdoc: doc::ItemDoc,\n     module_: ast::foreign_mod\n ) -> doc::NmodDoc {\n     let mut fns = ~[];\n@@ -150,14 +150,14 @@ fn nmoddoc_from_mod(\n     }\n }\n \n-fn fndoc_from_fn(itemdoc: doc::ItemDoc) -> doc::FnDoc {\n+fn fndoc_from_fn(+itemdoc: doc::ItemDoc) -> doc::FnDoc {\n     {\n         item: itemdoc,\n         sig: None\n     }\n }\n \n-fn constdoc_from_const(itemdoc: doc::ItemDoc) -> doc::ConstDoc {\n+fn constdoc_from_const(+itemdoc: doc::ItemDoc) -> doc::ConstDoc {\n     {\n         item: itemdoc,\n         sig: None\n@@ -172,8 +172,8 @@ fn should_extract_const_name_and_id() {\n }\n \n fn enumdoc_from_enum(\n-    itemdoc: doc::ItemDoc,\n-    variants: ~[ast::variant]\n+    +itemdoc: doc::ItemDoc,\n+    +variants: ~[ast::variant]\n ) -> doc::EnumDoc {\n     {\n         item: itemdoc,\n@@ -182,7 +182,7 @@ fn enumdoc_from_enum(\n }\n \n fn variantdocs_from_variants(\n-    variants: ~[ast::variant]\n+    +variants: ~[ast::variant]\n ) -> ~[doc::VariantDoc] {\n     vec::map(variants, variantdoc_from_variant)\n }\n@@ -210,8 +210,8 @@ fn should_extract_enum_variants() {\n }\n \n fn traitdoc_from_trait(\n-    itemdoc: doc::ItemDoc,\n-    methods: ~[ast::trait_method]\n+    +itemdoc: doc::ItemDoc,\n+    +methods: ~[ast::trait_method]\n ) -> doc::TraitDoc {\n     {\n         item: itemdoc,\n@@ -255,7 +255,7 @@ fn should_extract_trait_methods() {\n }\n \n fn impldoc_from_impl(\n-    itemdoc: doc::ItemDoc,\n+    +itemdoc: doc::ItemDoc,\n     methods: ~[@ast::method]\n ) -> doc::ImplDoc {\n     {\n@@ -282,7 +282,7 @@ fn should_extract_impl_methods() {\n }\n \n fn tydoc_from_ty(\n-    itemdoc: doc::ItemDoc\n+    +itemdoc: doc::ItemDoc\n ) -> doc::TyDoc {\n     {\n         item: itemdoc,\n@@ -297,7 +297,7 @@ fn should_extract_tys() {\n }\n \n fn structdoc_from_struct(\n-    itemdoc: doc::ItemDoc,\n+    +itemdoc: doc::ItemDoc,\n     struct_def: @ast::struct_def\n ) -> doc::StructDoc {\n     {\n@@ -328,7 +328,7 @@ fn should_extract_struct_fields() {\n mod test {\n     #[legacy_exports];\n \n-    fn mk_doc(source: ~str) -> doc::Doc {\n+    fn mk_doc(+source: ~str) -> doc::Doc {\n         let ast = parse::from_str(source);\n         extract(ast, ~\"\")\n     }"}, {"sha": "7722379c330f2948daaa17bb05b2a1118f200b37", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 61, "deletions": 57, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -1,18 +1,18 @@\n pub enum Fold<T> = Fold_<T>;\n \n-type FoldDoc<T> = fn~(fold: Fold<T>, doc: doc::Doc) -> doc::Doc;\n-type FoldCrate<T> = fn~(fold: Fold<T>, doc: doc::CrateDoc) -> doc::CrateDoc;\n-type FoldItem<T> = fn~(fold: Fold<T>, doc: doc::ItemDoc) -> doc::ItemDoc;\n-type FoldMod<T> = fn~(fold: Fold<T>, doc: doc::ModDoc) -> doc::ModDoc;\n-type FoldNmod<T> = fn~(fold: Fold<T>, doc: doc::NmodDoc) -> doc::NmodDoc;\n-type FoldFn<T> = fn~(fold: Fold<T>, doc: doc::FnDoc) -> doc::FnDoc;\n-type FoldConst<T> = fn~(fold: Fold<T>, doc: doc::ConstDoc) -> doc::ConstDoc;\n-type FoldEnum<T> = fn~(fold: Fold<T>, doc: doc::EnumDoc) -> doc::EnumDoc;\n-type FoldTrait<T> = fn~(fold: Fold<T>, doc: doc::TraitDoc) -> doc::TraitDoc;\n-type FoldImpl<T> = fn~(fold: Fold<T>, doc: doc::ImplDoc) -> doc::ImplDoc;\n-type FoldType<T> = fn~(fold: Fold<T>, doc: doc::TyDoc) -> doc::TyDoc;\n-type FoldStruct<T> = fn~(fold: Fold<T>,\n-                         doc: doc::StructDoc) -> doc::StructDoc;\n+type FoldDoc<T> = fn~(fold: &Fold<T>, +doc: doc::Doc) -> doc::Doc;\n+type FoldCrate<T> = fn~(fold: &Fold<T>, +doc: doc::CrateDoc) -> doc::CrateDoc;\n+type FoldItem<T> = fn~(fold: &Fold<T>, +doc: doc::ItemDoc) -> doc::ItemDoc;\n+type FoldMod<T> = fn~(fold: &Fold<T>, +doc: doc::ModDoc) -> doc::ModDoc;\n+type FoldNmod<T> = fn~(fold: &Fold<T>, +doc: doc::NmodDoc) -> doc::NmodDoc;\n+type FoldFn<T> = fn~(fold: &Fold<T>, +doc: doc::FnDoc) -> doc::FnDoc;\n+type FoldConst<T> = fn~(fold: &Fold<T>, +doc: doc::ConstDoc) -> doc::ConstDoc;\n+type FoldEnum<T> = fn~(fold: &Fold<T>, +doc: doc::EnumDoc) -> doc::EnumDoc;\n+type FoldTrait<T> = fn~(fold: &Fold<T>, +doc: doc::TraitDoc) -> doc::TraitDoc;\n+type FoldImpl<T> = fn~(fold: &Fold<T>, +doc: doc::ImplDoc) -> doc::ImplDoc;\n+type FoldType<T> = fn~(fold: &Fold<T>, +doc: doc::TyDoc) -> doc::TyDoc;\n+type FoldStruct<T> = fn~(fold: &Fold<T>,\n+                         +doc: doc::StructDoc) -> doc::StructDoc;\n \n type Fold_<T> = {\n     ctxt: T,\n@@ -119,7 +119,7 @@ pub fn default_par_fold<T:Send Copy>(ctxt: T) -> Fold<T> {\n     )\n }\n \n-pub fn default_seq_fold_doc<T>(fold: Fold<T>, doc: doc::Doc) -> doc::Doc {\n+pub fn default_seq_fold_doc<T>(fold: &Fold<T>, +doc: doc::Doc) -> doc::Doc {\n     doc::Doc_({\n         pages: do vec::map(doc.pages) |page| {\n             match *page {\n@@ -136,37 +136,38 @@ pub fn default_seq_fold_doc<T>(fold: Fold<T>, doc: doc::Doc) -> doc::Doc {\n }\n \n pub fn default_seq_fold_crate<T>(\n-    fold: Fold<T>,\n-    doc: doc::CrateDoc\n+    fold: &Fold<T>,\n+    +doc: doc::CrateDoc\n ) -> doc::CrateDoc {\n     {\n         topmod: fold.fold_mod(fold, doc.topmod)\n     }\n }\n \n pub fn default_seq_fold_item<T>(\n-    _fold: Fold<T>,\n-    doc: doc::ItemDoc\n+    _fold: &Fold<T>,\n+    +doc: doc::ItemDoc\n ) -> doc::ItemDoc {\n     doc\n }\n \n pub fn default_any_fold_mod<T:Send Copy>(\n-    fold: Fold<T>,\n-    doc: doc::ModDoc\n+    fold: &Fold<T>,\n+    +doc: doc::ModDoc\n ) -> doc::ModDoc {\n+    let fold_copy = copy *fold;\n     doc::ModDoc_({\n         item: fold.fold_item(fold, doc.item),\n-        items: par::map(doc.items, |ItemTag, copy fold| {\n-            fold_ItemTag(fold, *ItemTag)\n+        items: par::map(doc.items, |ItemTag, move fold_copy| {\n+            fold_ItemTag(&fold_copy, *ItemTag)\n         }),\n         .. *doc\n     })\n }\n \n pub fn default_seq_fold_mod<T>(\n-    fold: Fold<T>,\n-    doc: doc::ModDoc\n+    fold: &Fold<T>,\n+    +doc: doc::ModDoc\n ) -> doc::ModDoc {\n     doc::ModDoc_({\n         item: fold.fold_item(fold, doc.item),\n@@ -178,34 +179,36 @@ pub fn default_seq_fold_mod<T>(\n }\n \n pub fn default_par_fold_mod<T:Send Copy>(\n-    fold: Fold<T>,\n-    doc: doc::ModDoc\n+    fold: &Fold<T>,\n+    +doc: doc::ModDoc\n ) -> doc::ModDoc {\n+    let fold_copy = copy *fold;\n     doc::ModDoc_({\n         item: fold.fold_item(fold, doc.item),\n-        items: par::map(doc.items, |ItemTag, copy fold| {\n-            fold_ItemTag(fold, *ItemTag)\n+        items: par::map(doc.items, |ItemTag, move fold_copy| {\n+            fold_ItemTag(&fold_copy, *ItemTag)\n         }),\n         .. *doc\n     })\n }\n \n pub fn default_any_fold_nmod<T:Send Copy>(\n-    fold: Fold<T>,\n-    doc: doc::NmodDoc\n+    fold: &Fold<T>,\n+    +doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n+    let fold_copy = copy *fold;\n     {\n         item: fold.fold_item(fold, doc.item),\n-        fns: par::map(doc.fns, |FnDoc, copy fold| {\n-            fold.fold_fn(fold, *FnDoc)\n+        fns: par::map(doc.fns, |FnDoc, move fold_copy| {\n+            fold_copy.fold_fn(&fold_copy, *FnDoc)\n         }),\n         .. doc\n     }\n }\n \n pub fn default_seq_fold_nmod<T>(\n-    fold: Fold<T>,\n-    doc: doc::NmodDoc\n+    fold: &Fold<T>,\n+    +doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n     {\n         item: fold.fold_item(fold, doc.item),\n@@ -217,19 +220,20 @@ pub fn default_seq_fold_nmod<T>(\n }\n \n pub fn default_par_fold_nmod<T:Send Copy>(\n-    fold: Fold<T>,\n-    doc: doc::NmodDoc\n+    fold: &Fold<T>,\n+    +doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n+    let fold_copy = copy *fold;\n     {\n         item: fold.fold_item(fold, doc.item),\n-        fns: par::map(doc.fns, |FnDoc, copy fold| {\n-            fold.fold_fn(fold, *FnDoc)\n+        fns: par::map(doc.fns, |FnDoc, move fold_copy| {\n+            fold_copy.fold_fn(&fold_copy, *FnDoc)\n         }),\n         .. doc\n     }\n }\n \n-pub fn fold_ItemTag<T>(fold: Fold<T>, doc: doc::ItemTag) -> doc::ItemTag {\n+pub fn fold_ItemTag<T>(fold: &Fold<T>, +doc: doc::ItemTag) -> doc::ItemTag {\n     match doc {\n       doc::ModTag(ModDoc) => {\n         doc::ModTag(fold.fold_mod(fold, ModDoc))\n@@ -262,8 +266,8 @@ pub fn fold_ItemTag<T>(fold: Fold<T>, doc: doc::ItemTag) -> doc::ItemTag {\n }\n \n pub fn default_seq_fold_fn<T>(\n-    fold: Fold<T>,\n-    doc: doc::FnDoc\n+    fold: &Fold<T>,\n+    +doc: doc::FnDoc\n ) -> doc::FnDoc {\n     {\n         item: fold.fold_item(fold, doc.item),\n@@ -272,8 +276,8 @@ pub fn default_seq_fold_fn<T>(\n }\n \n pub fn default_seq_fold_const<T>(\n-    fold: Fold<T>,\n-    doc: doc::ConstDoc\n+    fold: &Fold<T>,\n+    +doc: doc::ConstDoc\n ) -> doc::ConstDoc {\n     {\n         item: fold.fold_item(fold, doc.item),\n@@ -282,8 +286,8 @@ pub fn default_seq_fold_const<T>(\n }\n \n pub fn default_seq_fold_enum<T>(\n-    fold: Fold<T>,\n-    doc: doc::EnumDoc\n+    fold: &Fold<T>,\n+    +doc: doc::EnumDoc\n ) -> doc::EnumDoc {\n     {\n         item: fold.fold_item(fold, doc.item),\n@@ -292,8 +296,8 @@ pub fn default_seq_fold_enum<T>(\n }\n \n pub fn default_seq_fold_trait<T>(\n-    fold: Fold<T>,\n-    doc: doc::TraitDoc\n+    fold: &Fold<T>,\n+    +doc: doc::TraitDoc\n ) -> doc::TraitDoc {\n     {\n         item: fold.fold_item(fold, doc.item),\n@@ -302,8 +306,8 @@ pub fn default_seq_fold_trait<T>(\n }\n \n pub fn default_seq_fold_impl<T>(\n-    fold: Fold<T>,\n-    doc: doc::ImplDoc\n+    fold: &Fold<T>,\n+    +doc: doc::ImplDoc\n ) -> doc::ImplDoc {\n     {\n         item: fold.fold_item(fold, doc.item),\n@@ -312,8 +316,8 @@ pub fn default_seq_fold_impl<T>(\n }\n \n pub fn default_seq_fold_type<T>(\n-    fold: Fold<T>,\n-    doc: doc::TyDoc\n+    fold: &Fold<T>,\n+    +doc: doc::TyDoc\n ) -> doc::TyDoc {\n     {\n         item: fold.fold_item(fold, doc.item),\n@@ -322,8 +326,8 @@ pub fn default_seq_fold_type<T>(\n }\n \n pub fn default_seq_fold_struct<T>(\n-    fold: Fold<T>,\n-    doc: doc::StructDoc\n+    fold: &Fold<T>,\n+    +doc: doc::StructDoc\n ) -> doc::StructDoc {\n     {\n         item: fold.fold_item(fold, doc.item),\n@@ -337,7 +341,7 @@ fn default_fold_should_produce_same_doc() {\n     let ast = parse::from_str(source);\n     let doc = extract::extract(ast, ~\"\");\n     let fld = default_seq_fold(());\n-    let folded = fld.fold_doc(fld, doc);\n+    let folded = fld.fold_doc(&fld, doc);\n     assert doc == folded;\n }\n \n@@ -347,7 +351,7 @@ fn default_fold_should_produce_same_consts() {\n     let ast = parse::from_str(source);\n     let doc = extract::extract(ast, ~\"\");\n     let fld = default_seq_fold(());\n-    let folded = fld.fold_doc(fld, doc);\n+    let folded = fld.fold_doc(&fld, doc);\n     assert doc == folded;\n }\n \n@@ -357,7 +361,7 @@ fn default_fold_should_produce_same_enums() {\n     let ast = parse::from_str(source);\n     let doc = extract::extract(ast, ~\"\");\n     let fld = default_seq_fold(());\n-    let folded = fld.fold_doc(fld, doc);\n+    let folded = fld.fold_doc(&fld, doc);\n     assert doc == folded;\n }\n \n@@ -367,6 +371,6 @@ fn default_parallel_fold_should_produce_same_doc() {\n     let ast = parse::from_str(source);\n     let doc = extract::extract(ast, ~\"\");\n     let fld = default_par_fold(());\n-    let folded = fld.fold_doc(fld, doc);\n+    let folded = fld.fold_doc(&fld, doc);\n     assert doc == folded;\n }"}, {"sha": "916393c0ff60e3a1fcda42c7c3973324121d984b", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -2,31 +2,31 @@\n \n use doc::ItemUtils;\n \n-pub fn mk_pass(config: config::Config) -> Pass {\n+pub fn mk_pass(+config: config::Config) -> Pass {\n     {\n         name: ~\"markdown_index\",\n-        f: fn~(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n+        f: fn~(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n             run(srv, doc, config)\n         }\n     }\n }\n \n fn run(\n     _srv: astsrv::Srv,\n-    doc: doc::Doc,\n-    config: config::Config\n+    +doc: doc::Doc,\n+    +config: config::Config\n ) -> doc::Doc {\n     let fold = fold::Fold({\n         fold_mod: fold_mod,\n         fold_nmod: fold_nmod,\n         .. *fold::default_any_fold(config)\n     });\n-    fold.fold_doc(fold, doc)\n+    fold.fold_doc(&fold, doc)\n }\n \n fn fold_mod(\n-    fold: fold::Fold<config::Config>,\n-    doc: doc::ModDoc\n+    fold: &fold::Fold<config::Config>,\n+    +doc: doc::ModDoc\n ) -> doc::ModDoc {\n \n     let doc = fold::default_any_fold_mod(fold, doc);\n@@ -38,8 +38,8 @@ fn fold_mod(\n }\n \n fn fold_nmod(\n-    fold: fold::Fold<config::Config>,\n-    doc: doc::NmodDoc\n+    fold: &fold::Fold<config::Config>,\n+    +doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n \n     let doc = fold::default_any_fold_nmod(fold, doc);"}, {"sha": "845bb7f52ceaf70a8d49f464cef9a28e5403f3ce", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -7,7 +7,7 @@ use markdown_writer::WriterFactory;\n \n pub fn mk_pass(+writer_factory: WriterFactory) -> Pass {\n     let f = fn~(move writer_factory,\n-                srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n+                srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n         run(srv, doc, copy writer_factory)\n     };\n "}, {"sha": "67323a3d4c34d2f2b87c2e84cdd051a8bfd75203", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -11,15 +11,15 @@ use syntax::ast;\n pub fn mk_pass(output_style: config::OutputStyle) -> Pass {\n     {\n         name: ~\"page\",\n-        f: fn~(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n+        f: fn~(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n             run(srv, doc, output_style)\n         }\n     }\n }\n \n fn run(\n     _srv: astsrv::Srv,\n-    doc: doc::Doc,\n+    +doc: doc::Doc,\n     output_style: config::OutputStyle\n ) -> doc::Doc {\n \n@@ -61,14 +61,14 @@ fn find_pages(doc: doc::Doc, page_chan: PageChan) {\n         fold_nmod: fold_nmod,\n         .. *fold::default_any_fold(page_chan)\n     });\n-    fold.fold_doc(fold, doc);\n+    fold.fold_doc(&fold, doc);\n \n     comm::send(page_chan, None);\n }\n \n fn fold_crate(\n-    fold: fold::Fold<PageChan>,\n-    doc: doc::CrateDoc\n+    fold: &fold::Fold<PageChan>,\n+    +doc: doc::CrateDoc\n ) -> doc::CrateDoc {\n \n     let doc = fold::default_seq_fold_crate(fold, doc);\n@@ -84,8 +84,8 @@ fn fold_crate(\n }\n \n fn fold_mod(\n-    fold: fold::Fold<PageChan>,\n-    doc: doc::ModDoc\n+    fold: &fold::Fold<PageChan>,\n+    +doc: doc::ModDoc\n ) -> doc::ModDoc {\n \n     let doc = fold::default_any_fold_mod(fold, doc);\n@@ -114,8 +114,8 @@ fn strip_mod(doc: doc::ModDoc) -> doc::ModDoc {\n }\n \n fn fold_nmod(\n-    fold: fold::Fold<PageChan>,\n-    doc: doc::NmodDoc\n+    fold: &fold::Fold<PageChan>,\n+    +doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n     let doc = fold::default_seq_fold_nmod(fold, doc);\n     let page = doc::ItemPage(doc::NmodTag(doc));"}, {"sha": "768f445de3b274bc4e728d70fd3ed872c5060bdc", "filename": "src/librustdoc/parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fparse.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -13,7 +13,7 @@ pub fn from_file(file: &Path) -> @ast::crate {\n         file, ~[], parse::new_parse_sess(None))\n }\n \n-pub fn from_str(source: ~str) -> @ast::crate {\n+pub fn from_str(+source: ~str) -> @ast::crate {\n     parse::parse_crate_from_source_str(\n         ~\"-\", @source, ~[], parse::new_parse_sess(None))\n }\n@@ -23,11 +23,11 @@ pub fn from_file_sess(sess: session::Session, file: &Path) -> @ast::crate {\n         file, cfg(sess, file_input(*file)), sess.parse_sess)\n }\n \n-pub fn from_str_sess(sess: session::Session, source: ~str) -> @ast::crate {\n+pub fn from_str_sess(sess: session::Session, +source: ~str) -> @ast::crate {\n     parse::parse_crate_from_source_str(\n         ~\"-\", @source, cfg(sess, str_input(source)), sess.parse_sess)\n }\n \n-fn cfg(sess: session::Session, input: driver::input) -> ast::crate_cfg {\n+fn cfg(sess: session::Session, +input: driver::input) -> ast::crate_cfg {\n     driver::default_configuration(sess, ~\"rustdoc\", input)\n }"}, {"sha": "68ea4774fb5139fd67d14fb3189a68bffa14a65c", "filename": "src/librustdoc/pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpass.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -1,13 +1,13 @@\n /// A single operation on the document model\n pub type Pass = {\n     name: ~str,\n-    f: fn~(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc\n+    f: fn~(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc\n };\n \n pub fn run_passes(\n     srv: astsrv::Srv,\n-    doc: doc::Doc,\n-    passes: ~[Pass]\n+    +doc: doc::Doc,\n+    +passes: ~[Pass]\n ) -> doc::Doc {\n     let mut passno = 0;\n     do vec::foldl(doc, passes) |doc, pass| {\n@@ -24,7 +24,7 @@ pub fn run_passes(\n fn test_run_passes() {\n     fn pass1(\n         _srv: astsrv::Srv,\n-        doc: doc::Doc\n+        +doc: doc::Doc\n     ) -> doc::Doc {\n         doc::Doc_({\n             pages: ~[\n@@ -43,7 +43,7 @@ fn test_run_passes() {\n     }\n     fn pass2(\n         _srv: astsrv::Srv,\n-        doc: doc::Doc\n+        +doc: doc::Doc\n     ) -> doc::Doc {\n         doc::Doc_({\n             pages: ~["}, {"sha": "9b76efc756e2946e188bd547dfb6368b63c0a587", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -16,7 +16,7 @@ type Ctxt = {\n };\n \n #[allow(non_implicitly_copyable_typarams)]\n-fn run(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n+fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n     let ctxt = {\n         srv: srv,\n         mut path: ~[]\n@@ -27,18 +27,18 @@ fn run(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n         fold_nmod: fold_nmod,\n         .. *fold::default_any_fold(ctxt)\n     });\n-    fold.fold_doc(fold, doc)\n+    fold.fold_doc(&fold, doc)\n }\n \n-fn fold_item(fold: fold::Fold<Ctxt>, doc: doc::ItemDoc) -> doc::ItemDoc {\n+fn fold_item(fold: &fold::Fold<Ctxt>, +doc: doc::ItemDoc) -> doc::ItemDoc {\n     {\n         path: fold.ctxt.path,\n         .. doc\n     }\n }\n \n #[allow(non_implicitly_copyable_typarams)]\n-fn fold_mod(fold: fold::Fold<Ctxt>, doc: doc::ModDoc) -> doc::ModDoc {\n+fn fold_mod(fold: &fold::Fold<Ctxt>, +doc: doc::ModDoc) -> doc::ModDoc {\n     let is_topmod = doc.id() == ast::crate_node_id;\n \n     if !is_topmod { fold.ctxt.path.push(doc.name()); }\n@@ -51,7 +51,7 @@ fn fold_mod(fold: fold::Fold<Ctxt>, doc: doc::ModDoc) -> doc::ModDoc {\n     })\n }\n \n-fn fold_nmod(fold: fold::Fold<Ctxt>, doc: doc::NmodDoc) -> doc::NmodDoc {\n+fn fold_nmod(fold: &fold::Fold<Ctxt>, +doc: doc::NmodDoc) -> doc::NmodDoc {\n     fold.ctxt.path.push(doc.name());\n     let doc = fold::default_seq_fold_nmod(fold, doc);\n     fold.ctxt.path.pop();"}, {"sha": "c86dbcba7362d885d659153ef14a8cf9e0fd4dab", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -10,17 +10,17 @@ pub fn mk_pass() -> Pass {\n     }\n }\n \n-fn run(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n+fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n     let fold = fold::Fold({\n         fold_mod: fold_mod,\n         .. *fold::default_any_fold(srv)\n     });\n-    fold.fold_doc(fold, doc)\n+    fold.fold_doc(&fold, doc)\n }\n \n fn fold_mod(\n-    fold: fold::Fold<astsrv::Srv>,\n-    doc: doc::ModDoc\n+    fold: &fold::Fold<astsrv::Srv>,\n+    +doc: doc::ModDoc\n ) -> doc::ModDoc {\n     let doc = fold::default_any_fold_mod(fold, doc);\n "}, {"sha": "ee50dfd360b3c08dbb6700feb6e948f90a27b67d", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -11,17 +11,17 @@ fn mk_pass() -> Pass {\n     }\n }\n \n-fn run(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n+fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n     let fold = fold::Fold({\n         fold_mod: fold_mod,\n         .. *fold::default_any_fold(srv)\n     });\n-    fold.fold_doc(fold, doc)\n+    fold.fold_doc(&fold, doc)\n }\n \n fn fold_mod(\n-    fold: fold::Fold<astsrv::Srv>,\n-    doc: doc::ModDoc\n+    fold: &fold::Fold<astsrv::Srv>,\n+    +doc: doc::ModDoc\n ) -> doc::ModDoc {\n     let doc = fold::default_any_fold_mod(fold, doc);\n "}, {"sha": "864522f419a2483c8ea98e53c017b8f32961b4b6", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -9,17 +9,17 @@ pub fn mk_pass() -> Pass {\n     }\n }\n \n-fn run(_srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n+fn run(_srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n     let fold = fold::Fold({\n         fold_item: fold_item,\n         fold_trait: fold_trait,\n         fold_impl: fold_impl,\n         .. *fold::default_any_fold(())\n     });\n-    fold.fold_doc(fold, doc)\n+    fold.fold_doc(&fold, doc)\n }\n \n-fn fold_item(fold: fold::Fold<()>, doc: doc::ItemDoc) -> doc::ItemDoc {\n+fn fold_item(fold: &fold::Fold<()>, +doc: doc::ItemDoc) -> doc::ItemDoc {\n     let doc = fold::default_seq_fold_item(fold, doc);\n     let (desc, sections) = sectionalize(doc.desc);\n \n@@ -30,7 +30,7 @@ fn fold_item(fold: fold::Fold<()>, doc: doc::ItemDoc) -> doc::ItemDoc {\n     }\n }\n \n-fn fold_trait(fold: fold::Fold<()>, doc: doc::TraitDoc) -> doc::TraitDoc {\n+fn fold_trait(fold: &fold::Fold<()>, +doc: doc::TraitDoc) -> doc::TraitDoc {\n     let doc = fold::default_seq_fold_trait(fold, doc);\n \n     {\n@@ -47,7 +47,7 @@ fn fold_trait(fold: fold::Fold<()>, doc: doc::TraitDoc) -> doc::TraitDoc {\n     }\n }\n \n-fn fold_impl(fold: fold::Fold<()>, doc: doc::ImplDoc) -> doc::ImplDoc {\n+fn fold_impl(fold: &fold::Fold<()>, +doc: doc::ImplDoc) -> doc::ImplDoc {\n     let doc = fold::default_seq_fold_impl(fold, doc);\n \n     {"}, {"sha": "53607ba46d0bda9df1ef236033b08612698fc247", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -8,7 +8,7 @@ pub type ItemLtEq = pure fn~(v1: &doc::ItemTag, v2:  &doc::ItemTag) -> bool;\n pub fn mk_pass(name: ~str, +lteq: ItemLtEq) -> Pass {\n     {\n         name: name,\n-        f: fn~(move lteq, srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n+        f: fn~(move lteq, srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n             run(srv, doc, lteq)\n         }\n     }\n@@ -17,20 +17,20 @@ pub fn mk_pass(name: ~str, +lteq: ItemLtEq) -> Pass {\n #[allow(non_implicitly_copyable_typarams)]\n fn run(\n     _srv: astsrv::Srv,\n-    doc: doc::Doc,\n+    +doc: doc::Doc,\n     lteq: ItemLtEq\n ) -> doc::Doc {\n     let fold = fold::Fold({\n         fold_mod: fold_mod,\n         .. *fold::default_any_fold(lteq)\n     });\n-    fold.fold_doc(fold, doc)\n+    fold.fold_doc(&fold, doc)\n }\n \n #[allow(non_implicitly_copyable_typarams)]\n fn fold_mod(\n-    fold: fold::Fold<ItemLtEq>,\n-    doc: doc::ModDoc\n+    fold: &fold::Fold<ItemLtEq>,\n+    +doc: doc::ModDoc\n ) -> doc::ModDoc {\n     let doc = fold::default_any_fold_mod(fold, doc);\n     doc::ModDoc_({"}, {"sha": "79466c4ec1ea22f10b8022a3fdda29efd5307d31", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -5,7 +5,7 @@ use doc::ItemUtils;\n pub fn mk_pass(name: ~str, +op: fn~(~str) -> ~str) -> Pass {\n     {\n         name: name,\n-        f: fn~(move op, srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n+        f: fn~(move op, srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n             run(srv, doc, op)\n         }\n     }\n@@ -16,7 +16,7 @@ type Op = fn~(~str) -> ~str;\n #[allow(non_implicitly_copyable_typarams)]\n fn run(\n     _srv: astsrv::Srv,\n-    doc: doc::Doc,\n+    +doc: doc::Doc,\n     op: Op\n ) -> doc::Doc {\n     let fold = fold::Fold({\n@@ -26,14 +26,14 @@ fn run(\n         fold_impl: fold_impl,\n         .. *fold::default_any_fold(op)\n     });\n-    fold.fold_doc(fold, doc)\n+    fold.fold_doc(&fold, doc)\n }\n \n fn maybe_apply_op(op: Op, s: Option<~str>) -> Option<~str> {\n     s.map(|s| op(*s) )\n }\n \n-fn fold_item(fold: fold::Fold<Op>, doc: doc::ItemDoc) -> doc::ItemDoc {\n+fn fold_item(fold: &fold::Fold<Op>, +doc: doc::ItemDoc) -> doc::ItemDoc {\n     let doc = fold::default_seq_fold_item(fold, doc);\n \n     {\n@@ -51,21 +51,22 @@ fn apply_to_sections(op: Op, sections: ~[doc::Section]) -> ~[doc::Section] {\n     })\n }\n \n-fn fold_enum(fold: fold::Fold<Op>, doc: doc::EnumDoc) -> doc::EnumDoc {\n+fn fold_enum(fold: &fold::Fold<Op>, +doc: doc::EnumDoc) -> doc::EnumDoc {\n     let doc = fold::default_seq_fold_enum(fold, doc);\n+    let fold_copy = copy *fold;\n \n     {\n-        variants: do par::map(doc.variants) |variant, copy fold| {\n+        variants: do par::map(doc.variants) |variant, copy fold_copy| {\n             {\n-                desc: maybe_apply_op(fold.ctxt, variant.desc),\n+                desc: maybe_apply_op(fold_copy.ctxt, variant.desc),\n                 .. *variant\n             }\n         },\n         .. doc\n     }\n }\n \n-fn fold_trait(fold: fold::Fold<Op>, doc: doc::TraitDoc) -> doc::TraitDoc {\n+fn fold_trait(fold: &fold::Fold<Op>, +doc: doc::TraitDoc) -> doc::TraitDoc {\n     let doc = fold::default_seq_fold_trait(fold, doc);\n \n     {\n@@ -85,7 +86,7 @@ fn apply_to_methods(op: Op, docs: ~[doc::MethodDoc]) -> ~[doc::MethodDoc] {\n     }\n }\n \n-fn fold_impl(fold: fold::Fold<Op>, doc: doc::ImplDoc) -> doc::ImplDoc {\n+fn fold_impl(fold: &fold::Fold<Op>, +doc: doc::ImplDoc) -> doc::ImplDoc {\n     let doc = fold::default_seq_fold_impl(fold, doc);\n \n     {"}, {"sha": "791caa44d81486fa9a7ec521df058b7344852f7e", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415664181b04574a5dfa553a54efb4df7924c15f/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=415664181b04574a5dfa553a54efb4df7924c15f", "patch": "@@ -16,7 +16,7 @@ pub fn mk_pass() -> Pass {\n \n fn run(\n     srv: astsrv::Srv,\n-    doc: doc::Doc\n+    +doc: doc::Doc\n ) -> doc::Doc {\n     let fold = fold::Fold({\n         fold_fn: fold_fn,\n@@ -28,12 +28,12 @@ fn run(\n         fold_struct: fold_struct,\n         .. *fold::default_any_fold(srv)\n     });\n-    fold.fold_doc(fold, doc)\n+    fold.fold_doc(&fold, doc)\n }\n \n fn fold_fn(\n-    fold: fold::Fold<astsrv::Srv>,\n-    doc: doc::FnDoc\n+    fold: &fold::Fold<astsrv::Srv>,\n+    +doc: doc::FnDoc\n ) -> doc::FnDoc {\n \n     let srv = fold.ctxt;\n@@ -75,8 +75,8 @@ fn should_add_foreign_fn_sig() {\n }\n \n fn fold_const(\n-    fold: fold::Fold<astsrv::Srv>,\n-    doc: doc::ConstDoc\n+    fold: &fold::Fold<astsrv::Srv>,\n+    +doc: doc::ConstDoc\n ) -> doc::ConstDoc {\n     let srv = fold.ctxt;\n \n@@ -102,8 +102,8 @@ fn should_add_const_types() {\n }\n \n fn fold_enum(\n-    fold: fold::Fold<astsrv::Srv>,\n-    doc: doc::EnumDoc\n+    fold: &fold::Fold<astsrv::Srv>,\n+    +doc: doc::EnumDoc\n ) -> doc::EnumDoc {\n     let doc_id = doc.id();\n     let srv = fold.ctxt;\n@@ -143,8 +143,8 @@ fn should_add_variant_sigs() {\n }\n \n fn fold_trait(\n-    fold: fold::Fold<astsrv::Srv>,\n-    doc: doc::TraitDoc\n+    fold: &fold::Fold<astsrv::Srv>,\n+    +doc: doc::TraitDoc\n ) -> doc::TraitDoc {\n     {\n         methods: merge_methods(fold.ctxt, doc.id(), doc.methods),\n@@ -234,8 +234,8 @@ fn should_add_trait_method_sigs() {\n }\n \n fn fold_impl(\n-    fold: fold::Fold<astsrv::Srv>,\n-    doc: doc::ImplDoc\n+    fold: &fold::Fold<astsrv::Srv>,\n+    +doc: doc::ImplDoc\n ) -> doc::ImplDoc {\n \n     let srv = fold.ctxt;\n@@ -289,8 +289,8 @@ fn should_add_impl_method_sigs() {\n }\n \n fn fold_type(\n-    fold: fold::Fold<astsrv::Srv>,\n-    doc: doc::TyDoc\n+    fold: &fold::Fold<astsrv::Srv>,\n+    +doc: doc::TyDoc\n ) -> doc::TyDoc {\n \n     let srv = fold.ctxt;\n@@ -323,8 +323,8 @@ fn should_add_type_signatures() {\n }\n \n fn fold_struct(\n-    fold: fold::Fold<astsrv::Srv>,\n-    doc: doc::StructDoc\n+    fold: &fold::Fold<astsrv::Srv>,\n+    +doc: doc::StructDoc\n ) -> doc::StructDoc {\n     let srv = fold.ctxt;\n "}]}