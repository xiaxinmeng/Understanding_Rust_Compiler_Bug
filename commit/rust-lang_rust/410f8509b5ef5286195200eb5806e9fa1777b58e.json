{"sha": "410f8509b5ef5286195200eb5806e9fa1777b58e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMGY4NTA5YjVlZjUyODYxOTUyMDBlYjU4MDZlOWZhMTc3N2I1OGU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-29T11:42:59Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-12-01T12:48:59Z"}, "message": "incr.comp.: Use the awesome new '_ in a few places.", "tree": {"sha": "2abaf9711ed2d6cc5c3ac890c14c8553b7354221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2abaf9711ed2d6cc5c3ac890c14c8553b7354221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/410f8509b5ef5286195200eb5806e9fa1777b58e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/410f8509b5ef5286195200eb5806e9fa1777b58e", "html_url": "https://github.com/rust-lang/rust/commit/410f8509b5ef5286195200eb5806e9fa1777b58e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/410f8509b5ef5286195200eb5806e9fa1777b58e/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c531d9f733e504697309ba6b85ff18ec276da162", "url": "https://api.github.com/repos/rust-lang/rust/commits/c531d9f733e504697309ba6b85ff18ec276da162", "html_url": "https://github.com/rust-lang/rust/commit/c531d9f733e504697309ba6b85ff18ec276da162"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "96d6b0f79cffffaf74641a18a7689b187c3cfc33", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/410f8509b5ef5286195200eb5806e9fa1777b58e/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410f8509b5ef5286195200eb5806e9fa1777b58e/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=410f8509b5ef5286195200eb5806e9fa1777b58e", "patch": "@@ -461,10 +461,10 @@ impl DepGraph {\n         self.data.as_ref().and_then(|data| data.colors.borrow().get(dep_node).cloned())\n     }\n \n-    pub fn try_mark_green<'a, 'tcx>(&self,\n-                                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                    dep_node: &DepNode)\n-                                    -> Option<DepNodeIndex> {\n+    pub fn try_mark_green<'tcx>(&self,\n+                                tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+                                dep_node: &DepNode)\n+                                -> Option<DepNodeIndex> {\n         debug!(\"try_mark_green({:?}) - BEGIN\", dep_node);\n         let data = self.data.as_ref().unwrap();\n "}, {"sha": "496284ad9c9f4b8cb340dfb6b85ee936fe651801", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/410f8509b5ef5286195200eb5806e9fa1777b58e/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410f8509b5ef5286195200eb5806e9fa1777b58e/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=410f8509b5ef5286195200eb5806e9fa1777b58e", "patch": "@@ -31,9 +31,9 @@ pub(super) trait QueryDescription<'tcx>: QueryConfig {\n         false\n     }\n \n-    fn try_load_from_disk<'a>(_: TyCtxt<'a, 'tcx, 'tcx>,\n-                              _: SerializedDepNodeIndex)\n-                              -> Option<Self::Value> {\n+    fn try_load_from_disk(_: TyCtxt<'_, 'tcx, 'tcx>,\n+                          _: SerializedDepNodeIndex)\n+                          -> Option<Self::Value> {\n         bug!(\"QueryDescription::load_from_disk() called for unsupport query.\")\n     }\n }\n@@ -556,9 +556,9 @@ impl<'tcx> QueryDescription<'tcx> for queries::typeck_tables_of<'tcx> {\n         def_id.is_local()\n     }\n \n-    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                              id: SerializedDepNodeIndex)\n-                              -> Option<Self::Value> {\n+    fn try_load_from_disk(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+                          id: SerializedDepNodeIndex)\n+                          -> Option<Self::Value> {\n         let typeck_tables: Option<ty::TypeckTables<'tcx>> = tcx\n             .on_disk_query_result_cache\n             .try_load_query_result(tcx, id);"}, {"sha": "c0daba5cace5153bd50586ddb07bf928717b8d64", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/410f8509b5ef5286195200eb5806e9fa1777b58e/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410f8509b5ef5286195200eb5806e9fa1777b58e/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=410f8509b5ef5286195200eb5806e9fa1777b58e", "patch": "@@ -291,10 +291,10 @@ impl<'sess> OnDiskCache<'sess> {\n \n     /// Returns the cached query result if there is something in the cache for\n     /// the given SerializedDepNodeIndex. Otherwise returns None.\n-    pub fn try_load_query_result<'a, 'tcx, T>(&self,\n-                                              tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                              dep_node_index: SerializedDepNodeIndex)\n-                                              -> Option<T>\n+    pub fn try_load_query_result<'tcx, T>(&self,\n+                                          tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+                                          dep_node_index: SerializedDepNodeIndex)\n+                                          -> Option<T>\n         where T: Decodable\n     {\n         self.load_indexed(tcx,\n@@ -319,13 +319,13 @@ impl<'sess> OnDiskCache<'sess> {\n         x.extend(diagnostics.into_iter());\n     }\n \n-    fn load_indexed<'a, 'tcx, T>(&self,\n-                                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 dep_node_index: SerializedDepNodeIndex,\n-                                 index: &FxHashMap<SerializedDepNodeIndex,\n-                                                   AbsoluteBytePos>,\n-                                 debug_tag: &'static str)\n-                                 -> Option<T>\n+    fn load_indexed<'tcx, T>(&self,\n+                             tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+                             dep_node_index: SerializedDepNodeIndex,\n+                             index: &FxHashMap<SerializedDepNodeIndex,\n+                                               AbsoluteBytePos>,\n+                             debug_tag: &'static str)\n+                             -> Option<T>\n         where T: Decodable\n     {\n         let pos = if let Some(&pos) = index.get(&dep_node_index) {"}]}