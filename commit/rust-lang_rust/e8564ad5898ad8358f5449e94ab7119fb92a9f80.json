{"sha": "e8564ad5898ad8358f5449e94ab7119fb92a9f80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NTY0YWQ1ODk4YWQ4MzU4ZjU0NDllOTRhYjcxMTlmYjkyYTlmODA=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-27T02:44:09Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-27T03:02:35Z"}, "message": "Use custom macro instead of println\n\nLoading a macro from libstd causes us to load serialized\n`SyntaxContext`s in a platform-dependent way, causing the printed spans\nto differ between platforms.", "tree": {"sha": "085c3c0f0e3c3b66e2ebdafb62a841593a1e6bde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/085c3c0f0e3c3b66e2ebdafb62a841593a1e6bde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8564ad5898ad8358f5449e94ab7119fb92a9f80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl/AbIoACgkQtAh+UQ6Y\nsWQjjhAAtkykMMrjh6yFnZdCEyUe7q/f0r1fAPpvEsewL72jgwjplSsFOJJIo0X7\ndIKfvAtD+Fgz5dSy8+G8x/6eeziAjX+oGx7iREnsF1VEp90aBgY5oWh1aoaPpllV\nUrueqTyGHHY88qr3DWcbHlQNGIiHivMOegvIQUhuKo91caXw5UqD54Uu+N0F84Ep\nmtIXOJdiolQ4Lh07TdjZUFg3sbMbj6HcyE+Qn8P2+6I0oF6O522C62kAZNhi+pJL\nspQbQrOdvAFMqhB4vJAh84UdtUKYhCs1ze7VZl174iETQ4koFVovnFCqH503wiL0\nFpguSJqgygyvvhdeLVQqUrGvuCXmywJzj3FB8OchOm0k9NHr1HpN9JZJjyoN1rei\nIEumEKyFA0ymj+IItTo2tE7KYTVhTp0vGhfn7ZuXM1wR5YujYEZeJ3hCE2mIgGVU\nEWGoOkOzGFF5BwJ3s21WOP9fOe1dlHy11mdVuxhiGqCOglYGSzsKd/Bp/eYWK7IN\nbVZugXf4zfdHWxlzxPojUlF78g0UMobJovhXjztP3eWA5tUowGfXkCTzOOfC43L+\nm0T4S+UoELNGUzZjusaLPm4+c22FZcBXJrxahKYiA9DgvUDF9XUYEHx/9Io4v63p\n4eEh2CJTA2iPkSEju8k6+RmRxSV9C32WBjtPu01AhLvSNIL7MhI=\n=ASbY\n-----END PGP SIGNATURE-----", "payload": "tree 085c3c0f0e3c3b66e2ebdafb62a841593a1e6bde\nparent 6f91c32da68aac9956c894608bd0a85f554d98c6\nauthor Aaron Hill <aa1ronham@gmail.com> 1606445049 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1606446155 -0500\n\nUse custom macro instead of println\n\nLoading a macro from libstd causes us to load serialized\n`SyntaxContext`s in a platform-dependent way, causing the printed spans\nto differ between platforms.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8564ad5898ad8358f5449e94ab7119fb92a9f80", "html_url": "https://github.com/rust-lang/rust/commit/e8564ad5898ad8358f5449e94ab7119fb92a9f80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8564ad5898ad8358f5449e94ab7119fb92a9f80/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f91c32da68aac9956c894608bd0a85f554d98c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f91c32da68aac9956c894608bd0a85f554d98c6", "html_url": "https://github.com/rust-lang/rust/commit/6f91c32da68aac9956c894608bd0a85f554d98c6"}], "stats": {"total": 293, "additions": 152, "deletions": 141}, "files": [{"sha": "25243aeef3b446569ea6edef513d9bb6e7ad3bdd", "filename": "src/test/ui/proc-macro/allowed-attr-stmt-expr.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8564ad5898ad8358f5449e94ab7119fb92a9f80/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8564ad5898ad8358f5449e94ab7119fb92a9f80/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.rs?ref=e8564ad5898ad8358f5449e94ab7119fb92a9f80", "patch": "@@ -13,14 +13,20 @@ extern crate std;\n \n extern crate attr_stmt_expr;\n extern crate test_macros;\n-use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};\n+use attr_stmt_expr::{expect_let, expect_my_macro_stmt, expect_expr, expect_my_macro_expr};\n use test_macros::print_attr;\n-use std::println;\n+\n+// We don't use `std::println` so that we avoid loading hygiene\n+// information from libstd, which would affect the SyntaxContext ids\n+macro_rules! my_macro {\n+    ($($tt:tt)*) => { () }\n+}\n+\n \n fn print_str(string: &'static str) {\n     // macros are handled a bit differently\n-    #[expect_print_expr]\n-    println!(\"{}\", string)\n+    #[expect_my_macro_expr]\n+    my_macro!(\"{}\", string)\n }\n \n macro_rules! make_stmt {\n@@ -51,8 +57,8 @@ fn main() {\n     let string = \"Hello, world!\";\n \n     #[print_attr]\n-    #[expect_print_stmt]\n-    println!(\"{}\", string);\n+    #[expect_my_macro_stmt]\n+    my_macro!(\"{}\", string);\n \n     #[print_attr]\n     second_make_stmt!(#[allow(dead_code)] struct Bar {});"}, {"sha": "6cf864f35908583ae531beea9d791b92bd5684f6", "filename": "src/test/ui/proc-macro/allowed-attr-stmt-expr.stdout", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/e8564ad5898ad8358f5449e94ab7119fb92a9f80/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e8564ad5898ad8358f5449e94ab7119fb92a9f80/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout?ref=e8564ad5898ad8358f5449e94ab7119fb92a9f80", "patch": "@@ -2,116 +2,116 @@ PRINT-ATTR INPUT (DISPLAY): struct ItemWithSemi ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:43:1: 43:7 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:49:1: 49:7 (#0),\n     },\n     Ident {\n         ident: \"ItemWithSemi\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:43:8: 43:20 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:49:8: 49:20 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:43:20: 43:21 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:49:20: 49:21 (#0),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Foo { }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:29:9: 29:10 (#15),\n+        span: $DIR/allowed-attr-stmt-expr.rs:35:9: 35:10 (#11),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"rustc_dummy\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:29:11: 29:22 (#15),\n+                span: $DIR/allowed-attr-stmt-expr.rs:35:11: 35:22 (#11),\n             },\n         ],\n-        span: $DIR/allowed-attr-stmt-expr.rs:29:10: 29:23 (#15),\n+        span: $DIR/allowed-attr-stmt-expr.rs:35:10: 35:23 (#11),\n     },\n     Ident {\n         ident: \"struct\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:47:16: 47:22 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:53:16: 53:22 (#0),\n     },\n     Ident {\n         ident: \"Foo\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:47:23: 47:26 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:53:23: 53:26 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [],\n-        span: $DIR/allowed-attr-stmt-expr.rs:47:27: 47:29 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:53:27: 53:29 (#0),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): #[expect_let] let string = \"Hello, world!\" ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:50:5: 50:6 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:56:5: 56:6 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"expect_let\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:50:7: 50:17 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:56:7: 56:17 (#0),\n             },\n         ],\n-        span: $DIR/allowed-attr-stmt-expr.rs:50:6: 50:18 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:56:6: 56:18 (#0),\n     },\n     Ident {\n         ident: \"let\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:51:5: 51:8 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:57:5: 57:8 (#0),\n     },\n     Ident {\n         ident: \"string\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:51:9: 51:15 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:57:9: 57:15 (#0),\n     },\n     Punct {\n         ch: '=',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:51:16: 51:17 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:57:16: 57:17 (#0),\n     },\n     Literal {\n         kind: Str,\n         symbol: \"Hello, world!\",\n         suffix: None,\n-        span: $DIR/allowed-attr-stmt-expr.rs:51:18: 51:33 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:57:18: 57:33 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:51:33: 51:34 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:57:33: 57:34 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): #[expect_print_stmt] println ! (\"{}\", string) ;\n+PRINT-ATTR INPUT (DISPLAY): #[expect_my_macro_stmt] my_macro ! (\"{}\", string) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:54:5: 54:6 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:60:5: 60:6 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n-                ident: \"expect_print_stmt\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:54:7: 54:24 (#0),\n+                ident: \"expect_my_macro_stmt\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:60:7: 60:27 (#0),\n             },\n         ],\n-        span: $DIR/allowed-attr-stmt-expr.rs:54:6: 54:25 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:60:6: 60:28 (#0),\n     },\n     Ident {\n-        ident: \"println\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:55:5: 55:12 (#0),\n+        ident: \"my_macro\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:61:5: 61:13 (#0),\n     },\n     Punct {\n         ch: '!',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:55:12: 55:13 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:61:13: 61:14 (#0),\n     },\n     Group {\n         delimiter: Parenthesis,\n@@ -120,202 +120,202 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n                 kind: Str,\n                 symbol: \"{}\",\n                 suffix: None,\n-                span: $DIR/allowed-attr-stmt-expr.rs:55:14: 55:18 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:61:15: 61:19 (#0),\n             },\n             Punct {\n                 ch: ',',\n                 spacing: Alone,\n-                span: $DIR/allowed-attr-stmt-expr.rs:55:18: 55:19 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:61:19: 61:20 (#0),\n             },\n             Ident {\n                 ident: \"string\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:55:20: 55:26 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:61:21: 61:27 (#0),\n             },\n         ],\n-        span: $DIR/allowed-attr-stmt-expr.rs:55:13: 55:27 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:61:14: 61:28 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:55:27: 55:28 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:61:28: 61:29 (#0),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): second_make_stmt ! (#[allow(dead_code)] struct Bar { }) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"second_make_stmt\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:58:5: 58:21 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:5: 64:21 (#0),\n     },\n     Punct {\n         ch: '!',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:58:21: 58:22 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:21: 64:22 (#0),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Punct {\n                 ch: '#',\n                 spacing: Alone,\n-                span: $DIR/allowed-attr-stmt-expr.rs:58:23: 58:24 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:64:23: 64:24 (#0),\n             },\n             Group {\n                 delimiter: Bracket,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"allow\",\n-                        span: $DIR/allowed-attr-stmt-expr.rs:58:25: 58:30 (#0),\n+                        span: $DIR/allowed-attr-stmt-expr.rs:64:25: 64:30 (#0),\n                     },\n                     Group {\n                         delimiter: Parenthesis,\n                         stream: TokenStream [\n                             Ident {\n                                 ident: \"dead_code\",\n-                                span: $DIR/allowed-attr-stmt-expr.rs:58:31: 58:40 (#0),\n+                                span: $DIR/allowed-attr-stmt-expr.rs:64:31: 64:40 (#0),\n                             },\n                         ],\n-                        span: $DIR/allowed-attr-stmt-expr.rs:58:30: 58:41 (#0),\n+                        span: $DIR/allowed-attr-stmt-expr.rs:64:30: 64:41 (#0),\n                     },\n                 ],\n-                span: $DIR/allowed-attr-stmt-expr.rs:58:24: 58:42 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:64:24: 64:42 (#0),\n             },\n             Ident {\n                 ident: \"struct\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:58:43: 58:49 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:64:43: 64:49 (#0),\n             },\n             Ident {\n                 ident: \"Bar\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:58:50: 58:53 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:64:50: 64:53 (#0),\n             },\n             Group {\n                 delimiter: Brace,\n                 stream: TokenStream [],\n-                span: $DIR/allowed-attr-stmt-expr.rs:58:54: 58:56 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:64:54: 64:56 (#0),\n             },\n         ],\n-        span: $DIR/allowed-attr-stmt-expr.rs:58:22: 58:57 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:22: 64:57 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:58:57: 58:58 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:57: 64:58 (#0),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] #[allow(dead_code)] struct Bar { }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:29:9: 29:10 (#37),\n+        span: $DIR/allowed-attr-stmt-expr.rs:35:9: 35:10 (#32),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"rustc_dummy\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:29:11: 29:22 (#37),\n+                span: $DIR/allowed-attr-stmt-expr.rs:35:11: 35:22 (#32),\n             },\n         ],\n-        span: $DIR/allowed-attr-stmt-expr.rs:29:10: 29:23 (#37),\n+        span: $DIR/allowed-attr-stmt-expr.rs:35:10: 35:23 (#32),\n     },\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:58:23: 58:24 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:23: 64:24 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"allow\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:58:25: 58:30 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:64:25: 64:30 (#0),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"dead_code\",\n-                        span: $DIR/allowed-attr-stmt-expr.rs:58:31: 58:40 (#0),\n+                        span: $DIR/allowed-attr-stmt-expr.rs:64:31: 64:40 (#0),\n                     },\n                 ],\n-                span: $DIR/allowed-attr-stmt-expr.rs:58:30: 58:41 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:64:30: 64:41 (#0),\n             },\n         ],\n-        span: $DIR/allowed-attr-stmt-expr.rs:58:24: 58:42 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:24: 64:42 (#0),\n     },\n     Ident {\n         ident: \"struct\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:58:43: 58:49 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:43: 64:49 (#0),\n     },\n     Ident {\n         ident: \"Bar\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:58:50: 58:53 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:50: 64:53 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [],\n-        span: $DIR/allowed-attr-stmt-expr.rs:58:54: 58:56 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:54: 64:56 (#0),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Other { }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:61:5: 61:6 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:67:5: 67:6 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"rustc_dummy\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:61:7: 61:18 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:67:7: 67:18 (#0),\n             },\n         ],\n-        span: $DIR/allowed-attr-stmt-expr.rs:61:6: 61:19 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:67:6: 67:19 (#0),\n     },\n     Ident {\n         ident: \"struct\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:62:5: 62:11 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:68:5: 68:11 (#0),\n     },\n     Ident {\n         ident: \"Other\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:62:12: 62:17 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:68:12: 68:17 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [],\n-        span: $DIR/allowed-attr-stmt-expr.rs:62:18: 62:20 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:68:18: 68:20 (#0),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct NonBracedStruct ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:67:5: 67:6 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:73:5: 73:6 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"rustc_dummy\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:67:7: 67:18 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:73:7: 73:18 (#0),\n             },\n         ],\n-        span: $DIR/allowed-attr-stmt-expr.rs:67:6: 67:19 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:73:6: 73:19 (#0),\n     },\n     Ident {\n         ident: \"struct\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:68:5: 68:11 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:74:5: 74:11 (#0),\n     },\n     Ident {\n         ident: \"NonBracedStruct\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:68:12: 68:27 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:74:12: 74:27 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:68:27: 68:28 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:74:27: 74:28 (#0),\n     },\n ]"}, {"sha": "0403684cda004febfbb194321e846782b051a6a5", "filename": "src/test/ui/proc-macro/attr-stmt-expr.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e8564ad5898ad8358f5449e94ab7119fb92a9f80/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8564ad5898ad8358f5449e94ab7119fb92a9f80/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.rs?ref=e8564ad5898ad8358f5449e94ab7119fb92a9f80", "patch": "@@ -11,15 +11,20 @@ extern crate test_macros;\n extern crate attr_stmt_expr;\n \n use test_macros::print_attr;\n-use std::println;\n-use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};\n+use attr_stmt_expr::{expect_let, expect_my_macro_stmt, expect_expr, expect_my_macro_expr};\n+\n+// We don't use `std::println` so that we avoid loading hygiene\n+// information from libstd, which would affect the SyntaxContext ids\n+macro_rules! my_macro {\n+    ($($tt:tt)*) => { () }\n+}\n \n fn print_str(string: &'static str) {\n     // macros are handled a bit differently\n-    #[expect_print_expr]\n+    #[expect_my_macro_expr]\n     //~^ ERROR attributes on expressions are experimental\n     //~| HELP add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n-    println!(\"{}\", string)\n+    my_macro!(\"{}\", string)\n }\n \n macro_rules! make_stmt {\n@@ -44,8 +49,8 @@ fn main() {\n     let string = \"Hello, world!\";\n \n     #[print_attr]\n-    #[expect_print_stmt]\n-    println!(\"{}\", string);\n+    #[expect_my_macro_stmt]\n+    my_macro!(\"{}\", string);\n \n     #[print_attr]\n     second_make_stmt!(#[allow(dead_code)] struct Bar {});"}, {"sha": "56178259d4352ff6502b2a652308c6de9bbe6674", "filename": "src/test/ui/proc-macro/attr-stmt-expr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8564ad5898ad8358f5449e94ab7119fb92a9f80/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8564ad5898ad8358f5449e94ab7119fb92a9f80/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr?ref=e8564ad5898ad8358f5449e94ab7119fb92a9f80", "patch": "@@ -1,14 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/attr-stmt-expr.rs:19:5\n+  --> $DIR/attr-stmt-expr.rs:24:5\n    |\n-LL |     #[expect_print_expr]\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+LL |     #[expect_my_macro_expr]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/attr-stmt-expr.rs:57:5\n+  --> $DIR/attr-stmt-expr.rs:62:5\n    |\n LL |     #[expect_expr]\n    |     ^^^^^^^^^^^^^^"}, {"sha": "f75309e6872f96b305d6ff48a88b2c96fe2af5c9", "filename": "src/test/ui/proc-macro/attr-stmt-expr.stdout", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/e8564ad5898ad8358f5449e94ab7119fb92a9f80/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e8564ad5898ad8358f5449e94ab7119fb92a9f80/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout?ref=e8564ad5898ad8358f5449e94ab7119fb92a9f80", "patch": "@@ -3,99 +3,99 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:28:9: 28:10 (#12),\n+        span: $DIR/attr-stmt-expr.rs:33:9: 33:10 (#8),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"rustc_dummy\",\n-                span: $DIR/attr-stmt-expr.rs:28:11: 28:22 (#12),\n+                span: $DIR/attr-stmt-expr.rs:33:11: 33:22 (#8),\n             },\n         ],\n-        span: $DIR/attr-stmt-expr.rs:28:10: 28:23 (#12),\n+        span: $DIR/attr-stmt-expr.rs:33:10: 33:23 (#8),\n     },\n     Ident {\n         ident: \"struct\",\n-        span: $DIR/attr-stmt-expr.rs:40:16: 40:22 (#0),\n+        span: $DIR/attr-stmt-expr.rs:45:16: 45:22 (#0),\n     },\n     Ident {\n         ident: \"Foo\",\n-        span: $DIR/attr-stmt-expr.rs:40:23: 40:26 (#0),\n+        span: $DIR/attr-stmt-expr.rs:45:23: 45:26 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [],\n-        span: $DIR/attr-stmt-expr.rs:40:27: 40:29 (#0),\n+        span: $DIR/attr-stmt-expr.rs:45:27: 45:29 (#0),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): #[expect_let] let string = \"Hello, world!\" ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:43:5: 43:6 (#0),\n+        span: $DIR/attr-stmt-expr.rs:48:5: 48:6 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"expect_let\",\n-                span: $DIR/attr-stmt-expr.rs:43:7: 43:17 (#0),\n+                span: $DIR/attr-stmt-expr.rs:48:7: 48:17 (#0),\n             },\n         ],\n-        span: $DIR/attr-stmt-expr.rs:43:6: 43:18 (#0),\n+        span: $DIR/attr-stmt-expr.rs:48:6: 48:18 (#0),\n     },\n     Ident {\n         ident: \"let\",\n-        span: $DIR/attr-stmt-expr.rs:44:5: 44:8 (#0),\n+        span: $DIR/attr-stmt-expr.rs:49:5: 49:8 (#0),\n     },\n     Ident {\n         ident: \"string\",\n-        span: $DIR/attr-stmt-expr.rs:44:9: 44:15 (#0),\n+        span: $DIR/attr-stmt-expr.rs:49:9: 49:15 (#0),\n     },\n     Punct {\n         ch: '=',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:44:16: 44:17 (#0),\n+        span: $DIR/attr-stmt-expr.rs:49:16: 49:17 (#0),\n     },\n     Literal {\n         kind: Str,\n         symbol: \"Hello, world!\",\n         suffix: None,\n-        span: $DIR/attr-stmt-expr.rs:44:18: 44:33 (#0),\n+        span: $DIR/attr-stmt-expr.rs:49:18: 49:33 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:44:33: 44:34 (#0),\n+        span: $DIR/attr-stmt-expr.rs:49:33: 49:34 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): #[expect_print_stmt] println ! (\"{}\", string) ;\n+PRINT-ATTR INPUT (DISPLAY): #[expect_my_macro_stmt] my_macro ! (\"{}\", string) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:47:5: 47:6 (#0),\n+        span: $DIR/attr-stmt-expr.rs:52:5: 52:6 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n-                ident: \"expect_print_stmt\",\n-                span: $DIR/attr-stmt-expr.rs:47:7: 47:24 (#0),\n+                ident: \"expect_my_macro_stmt\",\n+                span: $DIR/attr-stmt-expr.rs:52:7: 52:27 (#0),\n             },\n         ],\n-        span: $DIR/attr-stmt-expr.rs:47:6: 47:25 (#0),\n+        span: $DIR/attr-stmt-expr.rs:52:6: 52:28 (#0),\n     },\n     Ident {\n-        ident: \"println\",\n-        span: $DIR/attr-stmt-expr.rs:48:5: 48:12 (#0),\n+        ident: \"my_macro\",\n+        span: $DIR/attr-stmt-expr.rs:53:5: 53:13 (#0),\n     },\n     Punct {\n         ch: '!',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:48:12: 48:13 (#0),\n+        span: $DIR/attr-stmt-expr.rs:53:13: 53:14 (#0),\n     },\n     Group {\n         delimiter: Parenthesis,\n@@ -104,171 +104,171 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n                 kind: Str,\n                 symbol: \"{}\",\n                 suffix: None,\n-                span: $DIR/attr-stmt-expr.rs:48:14: 48:18 (#0),\n+                span: $DIR/attr-stmt-expr.rs:53:15: 53:19 (#0),\n             },\n             Punct {\n                 ch: ',',\n                 spacing: Alone,\n-                span: $DIR/attr-stmt-expr.rs:48:18: 48:19 (#0),\n+                span: $DIR/attr-stmt-expr.rs:53:19: 53:20 (#0),\n             },\n             Ident {\n                 ident: \"string\",\n-                span: $DIR/attr-stmt-expr.rs:48:20: 48:26 (#0),\n+                span: $DIR/attr-stmt-expr.rs:53:21: 53:27 (#0),\n             },\n         ],\n-        span: $DIR/attr-stmt-expr.rs:48:13: 48:27 (#0),\n+        span: $DIR/attr-stmt-expr.rs:53:14: 53:28 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:48:27: 48:28 (#0),\n+        span: $DIR/attr-stmt-expr.rs:53:28: 53:29 (#0),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): second_make_stmt ! (#[allow(dead_code)] struct Bar { }) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"second_make_stmt\",\n-        span: $DIR/attr-stmt-expr.rs:51:5: 51:21 (#0),\n+        span: $DIR/attr-stmt-expr.rs:56:5: 56:21 (#0),\n     },\n     Punct {\n         ch: '!',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:51:21: 51:22 (#0),\n+        span: $DIR/attr-stmt-expr.rs:56:21: 56:22 (#0),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Punct {\n                 ch: '#',\n                 spacing: Alone,\n-                span: $DIR/attr-stmt-expr.rs:51:23: 51:24 (#0),\n+                span: $DIR/attr-stmt-expr.rs:56:23: 56:24 (#0),\n             },\n             Group {\n                 delimiter: Bracket,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"allow\",\n-                        span: $DIR/attr-stmt-expr.rs:51:25: 51:30 (#0),\n+                        span: $DIR/attr-stmt-expr.rs:56:25: 56:30 (#0),\n                     },\n                     Group {\n                         delimiter: Parenthesis,\n                         stream: TokenStream [\n                             Ident {\n                                 ident: \"dead_code\",\n-                                span: $DIR/attr-stmt-expr.rs:51:31: 51:40 (#0),\n+                                span: $DIR/attr-stmt-expr.rs:56:31: 56:40 (#0),\n                             },\n                         ],\n-                        span: $DIR/attr-stmt-expr.rs:51:30: 51:41 (#0),\n+                        span: $DIR/attr-stmt-expr.rs:56:30: 56:41 (#0),\n                     },\n                 ],\n-                span: $DIR/attr-stmt-expr.rs:51:24: 51:42 (#0),\n+                span: $DIR/attr-stmt-expr.rs:56:24: 56:42 (#0),\n             },\n             Ident {\n                 ident: \"struct\",\n-                span: $DIR/attr-stmt-expr.rs:51:43: 51:49 (#0),\n+                span: $DIR/attr-stmt-expr.rs:56:43: 56:49 (#0),\n             },\n             Ident {\n                 ident: \"Bar\",\n-                span: $DIR/attr-stmt-expr.rs:51:50: 51:53 (#0),\n+                span: $DIR/attr-stmt-expr.rs:56:50: 56:53 (#0),\n             },\n             Group {\n                 delimiter: Brace,\n                 stream: TokenStream [],\n-                span: $DIR/attr-stmt-expr.rs:51:54: 51:56 (#0),\n+                span: $DIR/attr-stmt-expr.rs:56:54: 56:56 (#0),\n             },\n         ],\n-        span: $DIR/attr-stmt-expr.rs:51:22: 51:57 (#0),\n+        span: $DIR/attr-stmt-expr.rs:56:22: 56:57 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:51:57: 51:58 (#0),\n+        span: $DIR/attr-stmt-expr.rs:56:57: 56:58 (#0),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] #[allow(dead_code)] struct Bar { }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:28:9: 28:10 (#34),\n+        span: $DIR/attr-stmt-expr.rs:33:9: 33:10 (#29),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"rustc_dummy\",\n-                span: $DIR/attr-stmt-expr.rs:28:11: 28:22 (#34),\n+                span: $DIR/attr-stmt-expr.rs:33:11: 33:22 (#29),\n             },\n         ],\n-        span: $DIR/attr-stmt-expr.rs:28:10: 28:23 (#34),\n+        span: $DIR/attr-stmt-expr.rs:33:10: 33:23 (#29),\n     },\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:51:23: 51:24 (#0),\n+        span: $DIR/attr-stmt-expr.rs:56:23: 56:24 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"allow\",\n-                span: $DIR/attr-stmt-expr.rs:51:25: 51:30 (#0),\n+                span: $DIR/attr-stmt-expr.rs:56:25: 56:30 (#0),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"dead_code\",\n-                        span: $DIR/attr-stmt-expr.rs:51:31: 51:40 (#0),\n+                        span: $DIR/attr-stmt-expr.rs:56:31: 56:40 (#0),\n                     },\n                 ],\n-                span: $DIR/attr-stmt-expr.rs:51:30: 51:41 (#0),\n+                span: $DIR/attr-stmt-expr.rs:56:30: 56:41 (#0),\n             },\n         ],\n-        span: $DIR/attr-stmt-expr.rs:51:24: 51:42 (#0),\n+        span: $DIR/attr-stmt-expr.rs:56:24: 56:42 (#0),\n     },\n     Ident {\n         ident: \"struct\",\n-        span: $DIR/attr-stmt-expr.rs:51:43: 51:49 (#0),\n+        span: $DIR/attr-stmt-expr.rs:56:43: 56:49 (#0),\n     },\n     Ident {\n         ident: \"Bar\",\n-        span: $DIR/attr-stmt-expr.rs:51:50: 51:53 (#0),\n+        span: $DIR/attr-stmt-expr.rs:56:50: 56:53 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [],\n-        span: $DIR/attr-stmt-expr.rs:51:54: 51:56 (#0),\n+        span: $DIR/attr-stmt-expr.rs:56:54: 56:56 (#0),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Other { }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:54:5: 54:6 (#0),\n+        span: $DIR/attr-stmt-expr.rs:59:5: 59:6 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"rustc_dummy\",\n-                span: $DIR/attr-stmt-expr.rs:54:7: 54:18 (#0),\n+                span: $DIR/attr-stmt-expr.rs:59:7: 59:18 (#0),\n             },\n         ],\n-        span: $DIR/attr-stmt-expr.rs:54:6: 54:19 (#0),\n+        span: $DIR/attr-stmt-expr.rs:59:6: 59:19 (#0),\n     },\n     Ident {\n         ident: \"struct\",\n-        span: $DIR/attr-stmt-expr.rs:55:5: 55:11 (#0),\n+        span: $DIR/attr-stmt-expr.rs:60:5: 60:11 (#0),\n     },\n     Ident {\n         ident: \"Other\",\n-        span: $DIR/attr-stmt-expr.rs:55:12: 55:17 (#0),\n+        span: $DIR/attr-stmt-expr.rs:60:12: 60:17 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [],\n-        span: $DIR/attr-stmt-expr.rs:55:18: 55:20 (#0),\n+        span: $DIR/attr-stmt-expr.rs:60:18: 60:20 (#0),\n     },\n ]"}, {"sha": "19183c616516acf316149b15d89531adcddbc873", "filename": "src/test/ui/proc-macro/auxiliary/attr-stmt-expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8564ad5898ad8358f5449e94ab7119fb92a9f80/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8564ad5898ad8358f5449e94ab7119fb92a9f80/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs?ref=e8564ad5898ad8358f5449e94ab7119fb92a9f80", "patch": "@@ -15,9 +15,9 @@ pub fn expect_let(attr: TokenStream, item: TokenStream) -> TokenStream {\n }\n \n #[proc_macro_attribute]\n-pub fn expect_print_stmt(attr: TokenStream, item: TokenStream) -> TokenStream {\n+pub fn expect_my_macro_stmt(attr: TokenStream, item: TokenStream) -> TokenStream {\n     assert!(attr.to_string().is_empty());\n-    assert_eq!(item.to_string(), \"println ! (\\\"{}\\\", string) ;\");\n+    assert_eq!(item.to_string(), \"my_macro ! (\\\"{}\\\", string) ;\");\n     item\n }\n \n@@ -29,9 +29,9 @@ pub fn expect_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n }\n \n #[proc_macro_attribute]\n-pub fn expect_print_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n+pub fn expect_my_macro_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n     assert!(attr.to_string().is_empty());\n-    assert_eq!(item.to_string(), \"println ! (\\\"{}\\\", string)\");\n+    assert_eq!(item.to_string(), \"my_macro ! (\\\"{}\\\", string)\");\n     item\n }\n "}]}