{"sha": "b210b3168a572c84710bc160915592307f7a3ac5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMTBiMzE2OGE1NzJjODQ3MTBiYzE2MDkxNTU5MjMwN2Y3YTNhYzU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-15T14:45:12Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-19T18:52:55Z"}, "message": "Make the span of the MIR return place point to the return type", "tree": {"sha": "821d6f99cccb0c4393fec7509b869599846ac998", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/821d6f99cccb0c4393fec7509b869599846ac998"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b210b3168a572c84710bc160915592307f7a3ac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b210b3168a572c84710bc160915592307f7a3ac5", "html_url": "https://github.com/rust-lang/rust/commit/b210b3168a572c84710bc160915592307f7a3ac5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b210b3168a572c84710bc160915592307f7a3ac5/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f3ff5a97bcd2d05ee0c768122752dc74f96ccc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3ff5a97bcd2d05ee0c768122752dc74f96ccc3", "html_url": "https://github.com/rust-lang/rust/commit/4f3ff5a97bcd2d05ee0c768122752dc74f96ccc3"}], "stats": {"total": 127, "additions": 81, "deletions": 46}, "files": [{"sha": "f75ce7b08162d35a95e1135c78643f403f9c7b86", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 49, "deletions": 14, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b210b3168a572c84710bc160915592307f7a3ac5/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b210b3168a572c84710bc160915592307f7a3ac5/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=b210b3168a572c84710bc160915592307f7a3ac5", "patch": "@@ -40,16 +40,44 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n     let id = tcx.hir.as_local_node_id(def_id).unwrap();\n \n     // Figure out what primary body this item has.\n-    let body_id = match tcx.hir.get(id) {\n+    let (body_id, return_ty_span) = match tcx.hir.get(id) {\n         Node::Variant(variant) =>\n             return create_constructor_shim(tcx, id, &variant.node.data),\n         Node::StructCtor(ctor) =>\n             return create_constructor_shim(tcx, id, ctor),\n \n-        _ => match tcx.hir.maybe_body_owned_by(id) {\n-            Some(body) => body,\n-            None => span_bug!(tcx.hir.span(id), \"can't build MIR for {:?}\", def_id),\n-        },\n+        Node::Expr(hir::Expr { node: hir::ExprKind::Closure(_, decl, body_id, _, _), .. })\n+        | Node::Item(hir::Item { node: hir::ItemKind::Fn(decl, _, _, body_id), .. })\n+        | Node::ImplItem(\n+            hir::ImplItem {\n+                node: hir::ImplItemKind::Method(hir::MethodSig { decl, .. }, body_id),\n+                ..\n+            }\n+        )\n+        | Node::TraitItem(\n+            hir::TraitItem {\n+                node: hir::TraitItemKind::Method(\n+                    hir::MethodSig { decl, .. },\n+                    hir::TraitMethod::Provided(body_id),\n+                ),\n+                ..\n+            }\n+        ) => {\n+            (*body_id, decl.output.span())\n+        }\n+        Node::Item(hir::Item { node: hir::ItemKind::Static(ty, _, body_id), .. })\n+        | Node::Item(hir::Item { node: hir::ItemKind::Const(ty, body_id), .. })\n+        | Node::ImplItem(hir::ImplItem { node: hir::ImplItemKind::Const(ty, body_id), .. })\n+        | Node::TraitItem(\n+            hir::TraitItem { node: hir::TraitItemKind::Const(ty, Some(body_id)), .. }\n+        ) => {\n+            (*body_id, ty.span)\n+        }\n+        Node::AnonConst(hir::AnonConst { body, id, .. }) => {\n+            (*body, tcx.hir.span(*id))\n+        }\n+\n+        _ => span_bug!(tcx.hir.span(id), \"can't build MIR for {:?}\", def_id),\n     };\n \n     tcx.infer_ctxt().enter(|infcx| {\n@@ -124,9 +152,9 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n             };\n \n             build::construct_fn(cx, id, arguments, safety, abi,\n-                                return_ty, yield_ty, body)\n+                                return_ty, yield_ty, return_ty_span, body)\n         } else {\n-            build::construct_const(cx, body_id)\n+            build::construct_const(cx, body_id, return_ty_span)\n         };\n \n         // Convert the Mir to global types.\n@@ -494,6 +522,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                                    abi: Abi,\n                                    return_ty: Ty<'gcx>,\n                                    yield_ty: Option<Ty<'gcx>>,\n+                                   return_ty_span: Span,\n                                    body: &'gcx hir::Body)\n                                    -> Mir<'tcx>\n     where A: Iterator<Item=ArgInfo<'gcx>>\n@@ -547,6 +576,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n         arguments.len(),\n         safety,\n         return_ty,\n+        return_ty_span,\n         upvar_decls);\n \n     let fn_def_id = tcx.hir.local_def_id(fn_id);\n@@ -601,15 +631,17 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     mir\n }\n \n-fn construct_const<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n-                                   body_id: hir::BodyId)\n-                                   -> Mir<'tcx> {\n+fn construct_const<'a, 'gcx, 'tcx>(\n+    hir: Cx<'a, 'gcx, 'tcx>,\n+    body_id: hir::BodyId,\n+    ty_span: Span,\n+) -> Mir<'tcx> {\n     let tcx = hir.tcx();\n     let ast_expr = &tcx.hir.body(body_id).value;\n     let ty = hir.tables().expr_ty_adjusted(ast_expr);\n     let owner_id = tcx.hir.body_owner(body_id);\n     let span = tcx.hir.span(owner_id);\n-    let mut builder = Builder::new(hir.clone(), span, 0, Safety::Safe, ty, vec![]);\n+    let mut builder = Builder::new(hir.clone(), span, 0, Safety::Safe, ty, ty_span,vec![]);\n \n     let mut block = START_BLOCK;\n     let expr = builder.hir.mirror(ast_expr);\n@@ -637,7 +669,7 @@ fn construct_error<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n     let owner_id = hir.tcx().hir.body_owner(body_id);\n     let span = hir.tcx().hir.span(owner_id);\n     let ty = hir.tcx().types.err;\n-    let mut builder = Builder::new(hir, span, 0, Safety::Safe, ty, vec![]);\n+    let mut builder = Builder::new(hir, span, 0, Safety::Safe, ty, span, vec![]);\n     let source_info = builder.source_info(span);\n     builder.cfg.terminate(START_BLOCK, source_info, TerminatorKind::Unreachable);\n     builder.finish(None)\n@@ -649,6 +681,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n            arg_count: usize,\n            safety: Safety,\n            return_ty: Ty<'tcx>,\n+           return_span: Span,\n            upvar_decls: Vec<UpvarDecl>)\n            -> Builder<'a, 'gcx, 'tcx> {\n         let lint_level = LintLevel::Explicit(hir.root_lint_level);\n@@ -665,8 +698,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             push_unsafe_count: 0,\n             unpushed_unsafe: safety,\n             breakable_scopes: vec![],\n-            local_decls: IndexVec::from_elem_n(LocalDecl::new_return_place(return_ty,\n-                                                                             span), 1),\n+            local_decls: IndexVec::from_elem_n(\n+                LocalDecl::new_return_place(return_ty, return_span),\n+                1,\n+            ),\n             upvar_decls,\n             var_indices: NodeMap(),\n             unit_temp: None,"}, {"sha": "5803b5e355a2cacd5c89a399c579bd3d566b795c", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b210b3168a572c84710bc160915592307f7a3ac5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b210b3168a572c84710bc160915592307f7a3ac5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=b210b3168a572c84710bc160915592307f7a3ac5", "patch": "@@ -5,10 +5,10 @@ LL |     const fn into_inner(self) -> T { self.0 } //~ destructors cannot be eva\n    |                         ^^^^ constant functions cannot evaluate destructors\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:51:5\n+  --> $DIR/min_const_fn.rs:51:36\n    |\n LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                    ^^^^^^\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:56:28\n@@ -17,10 +17,10 @@ LL |     const fn into_inner_lt(self) -> T { self.0 } //~ destructors cannot be\n    |                            ^^^^ constant functions cannot evaluate destructors\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:58:5\n+  --> $DIR/min_const_fn.rs:58:42\n    |\n LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                          ^^^^^^\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:63:27\n@@ -29,16 +29,16 @@ LL |     const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructors\n    |                           ^^^^ constant functions cannot evaluate destructors\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:65:5\n+  --> $DIR/min_const_fn.rs:65:38\n    |\n LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                      ^^^^^^\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:70:5\n+  --> $DIR/min_const_fn.rs:70:39\n    |\n LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                       ^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:88:16\n@@ -155,10 +155,10 @@ LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n \n error: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:137:1\n+  --> $DIR/min_const_fn.rs:137:24\n    |\n LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:139:34\n@@ -173,10 +173,10 @@ LL | const fn no_apit(_x: impl std::fmt::Debug) {} //~ ERROR trait bounds other\n    |                      ^^^^^^^^^^^^^^^^^^^^\n \n error: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:142:1\n+  --> $DIR/min_const_fn.rs:142:23\n    |\n LL | const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn is unstable\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:143:23\n@@ -185,10 +185,10 @@ LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds o\n    |                       ^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:144:1\n+  --> $DIR/min_const_fn.rs:144:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0597]: borrowed value does not live long enough\n   --> $DIR/min_const_fn.rs:144:64\n@@ -213,10 +213,10 @@ LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n \n error: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:154:1\n+  --> $DIR/min_const_fn.rs:154:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           ^^^^\n \n error: aborting due to 36 previous errors\n "}, {"sha": "6779b8a761461dcdacb7476628290a88e082e587", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b210b3168a572c84710bc160915592307f7a3ac5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b210b3168a572c84710bc160915592307f7a3ac5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=b210b3168a572c84710bc160915592307f7a3ac5", "patch": "@@ -5,10 +5,10 @@ LL |     const fn into_inner(self) -> T { self.0 } //~ destructors cannot be eva\n    |                         ^^^^ constant functions cannot evaluate destructors\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:51:5\n+  --> $DIR/min_const_fn.rs:51:36\n    |\n LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                    ^^^^^^\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:56:28\n@@ -17,10 +17,10 @@ LL |     const fn into_inner_lt(self) -> T { self.0 } //~ destructors cannot be\n    |                            ^^^^ constant functions cannot evaluate destructors\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:58:5\n+  --> $DIR/min_const_fn.rs:58:42\n    |\n LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                          ^^^^^^\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:63:27\n@@ -29,16 +29,16 @@ LL |     const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructors\n    |                           ^^^^ constant functions cannot evaluate destructors\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:65:5\n+  --> $DIR/min_const_fn.rs:65:38\n    |\n LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                      ^^^^^^\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:70:5\n+  --> $DIR/min_const_fn.rs:70:39\n    |\n LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                       ^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:88:16\n@@ -155,10 +155,10 @@ LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n \n error: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:137:1\n+  --> $DIR/min_const_fn.rs:137:24\n    |\n LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:139:34\n@@ -173,10 +173,10 @@ LL | const fn no_apit(_x: impl std::fmt::Debug) {} //~ ERROR trait bounds other\n    |                      ^^^^^^^^^^^^^^^^^^^^\n \n error: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:142:1\n+  --> $DIR/min_const_fn.rs:142:23\n    |\n LL | const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn is unstable\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:143:23\n@@ -185,10 +185,10 @@ LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds o\n    |                       ^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:144:1\n+  --> $DIR/min_const_fn.rs:144:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:149:41\n@@ -203,10 +203,10 @@ LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n \n error: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:154:1\n+  --> $DIR/min_const_fn.rs:154:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           ^^^^\n \n error: aborting due to 35 previous errors\n "}]}