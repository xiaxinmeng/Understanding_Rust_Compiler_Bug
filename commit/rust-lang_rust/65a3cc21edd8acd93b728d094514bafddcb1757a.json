{"sha": "65a3cc21edd8acd93b728d094514bafddcb1757a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YTNjYzIxZWRkOGFjZDkzYjcyOGQwOTQ1MTRiYWZkZGNiMTc1N2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-03T20:31:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-03T20:31:25Z"}, "message": "Merge #4717\n\n4717: Implementation of lazy assits r=matklad a=mcrakhman\n\n\n\nCo-authored-by: Mikhail Rakhmanov <rakhmanov.m@gmail.com>", "tree": {"sha": "8327b508541f80ff539c2b13559e7f2df2fe4d6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8327b508541f80ff539c2b13559e7f2df2fe4d6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65a3cc21edd8acd93b728d094514bafddcb1757a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe2AidCRBK7hj4Ov3rIwAAdHIIAFiRB/WCmSop1dedf3OanQNC\n41dx1nX2IgMrhqvmcFeQkIpXzKOd3Q3lAIXqKG7T5eA3xivTlHU7LDPAXhZgn1mw\nUM95BHPsEeTTXEZ2SI0PmbTZgDJFhDNc4wkHX3G/y4o4dqvfPKCkIgHEkAQyICtO\nXPftFrs1wC7ne2WC6xMF8gJ4JOINAQfEMUN9wqe7S95WuAyO2vL9TNFWeVU+tTNZ\n/lmoWDWynkQkcH0+2HTIeJda3Z+EII9QXx4kuOZmeEJGGJ/9EJnxLox+DVMt8R7D\nxH985UnLgs5RfVpcEVQclLLIiqRQZaLZs63Bt4PkLIex4QZW+0lunv7qswuEko0=\n=Myy5\n-----END PGP SIGNATURE-----\n", "payload": "tree 8327b508541f80ff539c2b13559e7f2df2fe4d6b\nparent 794f6da821c5d6e2490b996baffe162e4753262d\nparent 6cd2e04bd2a703c335566224e8b6bf773b83c0c6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591216285 +0000\ncommitter GitHub <noreply@github.com> 1591216285 +0000\n\nMerge #4717\n\n4717: Implementation of lazy assits r=matklad a=mcrakhman\n\n\n\nCo-authored-by: Mikhail Rakhmanov <rakhmanov.m@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65a3cc21edd8acd93b728d094514bafddcb1757a", "html_url": "https://github.com/rust-lang/rust/commit/65a3cc21edd8acd93b728d094514bafddcb1757a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65a3cc21edd8acd93b728d094514bafddcb1757a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "794f6da821c5d6e2490b996baffe162e4753262d", "url": "https://api.github.com/repos/rust-lang/rust/commits/794f6da821c5d6e2490b996baffe162e4753262d", "html_url": "https://github.com/rust-lang/rust/commit/794f6da821c5d6e2490b996baffe162e4753262d"}, {"sha": "6cd2e04bd2a703c335566224e8b6bf773b83c0c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd2e04bd2a703c335566224e8b6bf773b83c0c6", "html_url": "https://github.com/rust-lang/rust/commit/6cd2e04bd2a703c335566224e8b6bf773b83c0c6"}], "stats": {"total": 295, "additions": 210, "deletions": 85}, "files": [{"sha": "34c2d75fed2b025c5010c17d1c53408f3be02afb", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=65a3cc21edd8acd93b728d094514bafddcb1757a", "patch": "@@ -77,7 +77,7 @@ pub use crate::{\n };\n \n pub use hir::Documentation;\n-pub use ra_assists::{AssistConfig, AssistId};\n+pub use ra_assists::{Assist, AssistConfig, AssistId, ResolvedAssist};\n pub use ra_db::{\n     Canceled, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRootId,\n };\n@@ -142,14 +142,6 @@ pub struct AnalysisHost {\n     db: RootDatabase,\n }\n \n-#[derive(Debug)]\n-pub struct Assist {\n-    pub id: AssistId,\n-    pub label: String,\n-    pub group_label: Option<String>,\n-    pub source_change: SourceChange,\n-}\n-\n impl AnalysisHost {\n     pub fn new(lru_capacity: Option<usize>) -> AnalysisHost {\n         AnalysisHost { db: RootDatabase::new(lru_capacity) }\n@@ -470,20 +462,23 @@ impl Analysis {\n         self.with_db(|db| completion::completions(db, config, position).map(Into::into))\n     }\n \n-    /// Computes assists (aka code actions aka intentions) for the given\n+    /// Computes resolved assists with source changes for the given position.\n+    pub fn resolved_assists(\n+        &self,\n+        config: &AssistConfig,\n+        frange: FileRange,\n+    ) -> Cancelable<Vec<ResolvedAssist>> {\n+        self.with_db(|db| ra_assists::Assist::resolved(db, config, frange))\n+    }\n+\n+    /// Computes unresolved assists (aka code actions aka intentions) for the given\n     /// position.\n-    pub fn assists(&self, config: &AssistConfig, frange: FileRange) -> Cancelable<Vec<Assist>> {\n-        self.with_db(|db| {\n-            ra_assists::Assist::resolved(db, config, frange)\n-                .into_iter()\n-                .map(|assist| Assist {\n-                    id: assist.assist.id,\n-                    label: assist.assist.label,\n-                    group_label: assist.assist.group.map(|it| it.0),\n-                    source_change: assist.source_change,\n-                })\n-                .collect()\n-        })\n+    pub fn unresolved_assists(\n+        &self,\n+        config: &AssistConfig,\n+        frange: FileRange,\n+    ) -> Cancelable<Vec<Assist>> {\n+        self.with_db(|db| Assist::unresolved(db, config, frange))\n     }\n \n     /// Computes the set of diagnostics for the given file."}, {"sha": "23168c3ae9a28f53d151054b4873eeeedbc71826", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=65a3cc21edd8acd93b728d094514bafddcb1757a", "patch": "@@ -123,6 +123,7 @@ pub struct ClientCapsConfig {\n     pub code_action_literals: bool,\n     pub work_done_progress: bool,\n     pub code_action_group: bool,\n+    pub resolve_code_action: bool,\n }\n \n impl Default for Config {\n@@ -336,7 +337,11 @@ impl Config {\n \n             let code_action_group =\n                 experimental.get(\"codeActionGroup\").and_then(|it| it.as_bool()) == Some(true);\n-            self.client_caps.code_action_group = code_action_group\n+            self.client_caps.code_action_group = code_action_group;\n+\n+            let resolve_code_action =\n+                experimental.get(\"resolveCodeAction\").and_then(|it| it.as_bool()) == Some(true);\n+            self.client_caps.resolve_code_action = resolve_code_action;\n         }\n     }\n }"}, {"sha": "272057b47ea668cadc03335b799d010ae046f54c", "filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap", "raw_url": "https://github.com/rust-lang/rust/raw/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap?ref=65a3cc21edd8acd93b728d094514bafddcb1757a", "patch": "@@ -65,6 +65,7 @@ expression: diag\n         fixes: [\n             CodeAction {\n                 title: \"return the expression directly\",\n+                id: None,\n                 group: None,\n                 kind: Some(\n                     \"quickfix\","}, {"sha": "f0273315e932706b572d3b667faacb8ecdd929a3", "filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap", "raw_url": "https://github.com/rust-lang/rust/raw/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap?ref=65a3cc21edd8acd93b728d094514bafddcb1757a", "patch": "@@ -50,6 +50,7 @@ expression: diag\n         fixes: [\n             CodeAction {\n                 title: \"consider prefixing with an underscore\",\n+                id: None,\n                 group: None,\n                 kind: Some(\n                     \"quickfix\","}, {"sha": "04e286780c18313a62dc47092d0d2aad6f442a9d", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=65a3cc21edd8acd93b728d094514bafddcb1757a", "patch": "@@ -145,6 +145,7 @@ fn map_rust_child_diagnostic(\n     } else {\n         MappedRustChildDiagnostic::SuggestedFix(lsp_ext::CodeAction {\n             title: rd.message.clone(),\n+            id: None,\n             group: None,\n             kind: Some(\"quickfix\".to_string()),\n             edit: Some(lsp_ext::SnippetWorkspaceEdit {"}, {"sha": "3b957534ddd0bd4b5b0bf86c94740b6ada7dff9b", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=65a3cc21edd8acd93b728d094514bafddcb1757a", "patch": "@@ -97,6 +97,22 @@ pub struct JoinLinesParams {\n     pub ranges: Vec<Range>,\n }\n \n+pub enum ResolveCodeActionRequest {}\n+\n+impl Request for ResolveCodeActionRequest {\n+    type Params = ResolveCodeActionParams;\n+    type Result = Option<SnippetWorkspaceEdit>;\n+    const METHOD: &'static str = \"experimental/resolveCodeAction\";\n+}\n+\n+/// Params for the ResolveCodeActionRequest\n+#[derive(Debug, Eq, PartialEq, Clone, Deserialize, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct ResolveCodeActionParams {\n+    pub code_action_params: lsp_types::CodeActionParams,\n+    pub id: String,\n+}\n+\n pub enum OnEnter {}\n \n impl Request for OnEnter {\n@@ -202,6 +218,8 @@ impl Request for CodeActionRequest {\n pub struct CodeAction {\n     pub title: String,\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub id: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub group: Option<String>,\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub kind: Option<String>,"}, {"sha": "e60337b8e8b61fa582b58a4977bc2c84ef8fe3a4", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=65a3cc21edd8acd93b728d094514bafddcb1757a", "patch": "@@ -509,6 +509,7 @@ fn on_request(\n         .on::<lsp_ext::Runnables>(handlers::handle_runnables)?\n         .on::<lsp_ext::InlayHints>(handlers::handle_inlay_hints)?\n         .on::<lsp_ext::CodeActionRequest>(handlers::handle_code_action)?\n+        .on::<lsp_ext::ResolveCodeActionRequest>(handlers::handle_resolve_code_action)?\n         .on::<lsp_types::request::OnTypeFormatting>(handlers::handle_on_type_formatting)?\n         .on::<lsp_types::request::DocumentSymbolRequest>(handlers::handle_document_symbol)?\n         .on::<lsp_types::request::WorkspaceSymbol>(handlers::handle_workspace_symbol)?"}, {"sha": "6acf80c5827f86c48c46042577404915c02e1382", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 58, "deletions": 19, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=65a3cc21edd8acd93b728d094514bafddcb1757a", "patch": "@@ -25,7 +25,7 @@ use ra_project_model::TargetKind;\n use ra_syntax::{AstNode, SyntaxKind, TextRange, TextSize};\n use serde::{Deserialize, Serialize};\n use serde_json::to_value;\n-use stdx::format_to;\n+use stdx::{format_to, split1};\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n@@ -701,37 +701,27 @@ pub fn handle_formatting(\n     }]))\n }\n \n-pub fn handle_code_action(\n-    snap: GlobalStateSnapshot,\n-    params: lsp_types::CodeActionParams,\n-) -> Result<Option<Vec<lsp_ext::CodeAction>>> {\n-    let _p = profile(\"handle_code_action\");\n-    // We intentionally don't support command-based actions, as those either\n-    // requires custom client-code anyway, or requires server-initiated edits.\n-    // Server initiated edits break causality, so we avoid those as well.\n-    if !snap.config.client_caps.code_action_literals {\n-        return Ok(None);\n-    }\n-\n+fn handle_fixes(\n+    snap: &GlobalStateSnapshot,\n+    params: &lsp_types::CodeActionParams,\n+    res: &mut Vec<lsp_ext::CodeAction>,\n+) -> Result<()> {\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.analysis().file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.range);\n-    let frange = FileRange { file_id, range };\n-\n     let diagnostics = snap.analysis().diagnostics(file_id)?;\n-    let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n \n     let fixes_from_diagnostics = diagnostics\n         .into_iter()\n         .filter_map(|d| Some((d.range, d.fix?)))\n         .filter(|(diag_range, _fix)| diag_range.intersect(range).is_some())\n         .map(|(_range, fix)| fix);\n-\n     for fix in fixes_from_diagnostics {\n         let title = fix.label;\n         let edit = to_proto::snippet_workspace_edit(&snap, fix.source_change)?;\n         let action = lsp_ext::CodeAction {\n             title,\n+            id: None,\n             group: None,\n             kind: Some(lsp_types::code_action_kind::QUICKFIX.into()),\n             edit: Some(edit),\n@@ -747,13 +737,62 @@ pub fn handle_code_action(\n         }\n         res.push(fix.action.clone());\n     }\n+    Ok(())\n+}\n+\n+pub fn handle_code_action(\n+    snap: GlobalStateSnapshot,\n+    params: lsp_types::CodeActionParams,\n+) -> Result<Option<Vec<lsp_ext::CodeAction>>> {\n+    let _p = profile(\"handle_code_action\");\n+    // We intentionally don't support command-based actions, as those either\n+    // requires custom client-code anyway, or requires server-initiated edits.\n+    // Server initiated edits break causality, so we avoid those as well.\n+    if !snap.config.client_caps.code_action_literals {\n+        return Ok(None);\n+    }\n+\n+    let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n+    let line_index = snap.analysis().file_line_index(file_id)?;\n+    let range = from_proto::text_range(&line_index, params.range);\n+    let frange = FileRange { file_id, range };\n+    let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n \n-    for assist in snap.analysis().assists(&snap.config.assist, frange)?.into_iter() {\n-        res.push(to_proto::code_action(&snap, assist)?.into());\n+    handle_fixes(&snap, &params, &mut res)?;\n+\n+    if snap.config.client_caps.resolve_code_action {\n+        for (index, assist) in\n+            snap.analysis().unresolved_assists(&snap.config.assist, frange)?.into_iter().enumerate()\n+        {\n+            res.push(to_proto::unresolved_code_action(&snap, assist, index)?);\n+        }\n+    } else {\n+        for assist in snap.analysis().resolved_assists(&snap.config.assist, frange)?.into_iter() {\n+            res.push(to_proto::resolved_code_action(&snap, assist)?);\n+        }\n     }\n+\n     Ok(Some(res))\n }\n \n+pub fn handle_resolve_code_action(\n+    snap: GlobalStateSnapshot,\n+    params: lsp_ext::ResolveCodeActionParams,\n+) -> Result<Option<lsp_ext::SnippetWorkspaceEdit>> {\n+    let _p = profile(\"handle_resolve_code_action\");\n+    let file_id = from_proto::file_id(&snap, &params.code_action_params.text_document.uri)?;\n+    let line_index = snap.analysis().file_line_index(file_id)?;\n+    let range = from_proto::text_range(&line_index, params.code_action_params.range);\n+    let frange = FileRange { file_id, range };\n+\n+    let assists = snap.analysis().resolved_assists(&snap.config.assist, frange)?;\n+    let (id_string, index) = split1(&params.id, ':').unwrap();\n+    let index = index.parse::<usize>().unwrap();\n+    let assist = &assists[index];\n+    assert!(assist.assist.id.0 == id_string);\n+    Ok(to_proto::resolved_code_action(&snap, assist.clone())?.edit)\n+}\n+\n pub fn handle_code_lens(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::CodeLensParams,"}, {"sha": "1da4d80eceab0cabae2a4c55040c08849abf92f0", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a3cc21edd8acd93b728d094514bafddcb1757a/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=65a3cc21edd8acd93b728d094514bafddcb1757a", "patch": "@@ -3,8 +3,8 @@ use ra_db::{FileId, FileRange};\n use ra_ide::{\n     Assist, CompletionItem, CompletionItemKind, Documentation, FileSystemEdit, Fold, FoldKind,\n     FunctionSignature, Highlight, HighlightModifier, HighlightTag, HighlightedRange, Indel,\n-    InlayHint, InlayKind, InsertTextFormat, LineIndex, NavigationTarget, ReferenceAccess, Runnable,\n-    RunnableKind, Severity, SourceChange, SourceFileEdit, TextEdit,\n+    InlayHint, InlayKind, InsertTextFormat, LineIndex, NavigationTarget, ReferenceAccess,\n+    ResolvedAssist, Runnable, RunnableKind, Severity, SourceChange, SourceFileEdit, TextEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextSize};\n use ra_vfs::LineEndings;\n@@ -623,20 +623,36 @@ fn main() <fold>{\n     }\n }\n \n-pub(crate) fn code_action(\n+pub(crate) fn unresolved_code_action(\n     snap: &GlobalStateSnapshot,\n     assist: Assist,\n+    index: usize,\n ) -> Result<lsp_ext::CodeAction> {\n     let res = lsp_ext::CodeAction {\n         title: assist.label,\n-        group: if snap.config.client_caps.code_action_group { assist.group_label } else { None },\n+        id: Some(format!(\"{}:{}\", assist.id.0.to_owned(), index.to_string())),\n+        group: assist.group.filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n         kind: Some(String::new()),\n-        edit: Some(snippet_workspace_edit(snap, assist.source_change)?),\n+        edit: None,\n         command: None,\n     };\n     Ok(res)\n }\n \n+pub(crate) fn resolved_code_action(\n+    snap: &GlobalStateSnapshot,\n+    assist: ResolvedAssist,\n+) -> Result<lsp_ext::CodeAction> {\n+    let change = assist.source_change;\n+    unresolved_code_action(snap, assist.assist, 0).and_then(|it| {\n+        Ok(lsp_ext::CodeAction {\n+            id: None,\n+            edit: Some(snippet_workspace_edit(snap, change)?),\n+            ..it\n+        })\n+    })\n+}\n+\n pub(crate) fn runnable(\n     snap: &GlobalStateSnapshot,\n     file_id: FileId,"}, {"sha": "7f7940d0b6af10ff12313d04145391c98f2db2d7", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/65a3cc21edd8acd93b728d094514bafddcb1757a/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/65a3cc21edd8acd93b728d094514bafddcb1757a/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=65a3cc21edd8acd93b728d094514bafddcb1757a", "patch": "@@ -97,6 +97,30 @@ Invoking code action at this position will yield two code actions for importing\n * Is a fixed two-level structure enough?\n * Should we devise a general way to encode custom interaction protocols for GUI refactorings?\n \n+## Lazy assists with `ResolveCodeAction`\n+\n+**Issue:** https://github.com/microsoft/language-server-protocol/issues/787\n+\n+**Client Capability** `{ \"resolveCodeAction\": boolean }`\n+\n+If this capability is set, the assists will be computed lazily. Thus `CodeAction` returned from the server will only contain `id` but not `edit` or `command` fields. The only exclusion from the rule is the diagnostic edits.\n+\n+After the client got the id, it should then call `experimental/resolveCodeAction` command on the server and provide the following payload:\n+\n+```typescript\n+interface ResolveCodeActionParams {\n+    id: string;\n+    codeActionParams: lc.CodeActionParams;\n+}\n+```\n+\n+As a result of the command call the client will get the respective workspace edit (`lc.WorkspaceEdit`).\n+\n+### Unresolved Questions\n+\n+* Apply smarter filtering for ids?\n+* Upon `resolveCodeAction` command only call the assits which should be resolved and not all of them?\n+\n ## Parent Module\n \n **Issue:** https://github.com/microsoft/language-server-protocol/issues/1002"}, {"sha": "40ad1e3cd84780fb77558b356d425317e6ecf33c", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 38, "deletions": 36, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/65a3cc21edd8acd93b728d094514bafddcb1757a/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/65a3cc21edd8acd93b728d094514bafddcb1757a/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=65a3cc21edd8acd93b728d094514bafddcb1757a", "patch": "@@ -1,8 +1,11 @@\n import * as lc from 'vscode-languageclient';\n import * as vscode from 'vscode';\n+import * as ra from '../src/lsp_ext';\n+import * as Is from 'vscode-languageclient/lib/utils/is';\n \n import { CallHierarchyFeature } from 'vscode-languageclient/lib/callHierarchy.proposed';\n import { SemanticTokensFeature, DocumentSemanticsTokensSignature } from 'vscode-languageclient/lib/semanticTokens.proposed';\n+import { assert } from './util';\n \n export function createClient(serverPath: string, cwd: string): lc.LanguageClient {\n     // '.' Is the fallback if no folder is open\n@@ -32,6 +35,8 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n                 if (res === undefined) throw new Error('busy');\n                 return res;\n             },\n+            // Using custom handling of CodeActions where each code action is resloved lazily\n+            // That's why we are not waiting for any command or edits\n             async provideCodeActions(document: vscode.TextDocument, range: vscode.Range, context: vscode.CodeActionContext, token: vscode.CancellationToken, _next: lc.ProvideCodeActionsSignature) {\n                 const params: lc.CodeActionParams = {\n                     textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n@@ -43,32 +48,36 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n                     const result: (vscode.CodeAction | vscode.Command)[] = [];\n                     const groups = new Map<string, { index: number; items: vscode.CodeAction[] }>();\n                     for (const item of values) {\n+                        // In our case we expect to get code edits only from diagnostics\n                         if (lc.CodeAction.is(item)) {\n+                            assert(!item.command, \"We don't expect to receive commands in CodeActions\");\n                             const action = client.protocol2CodeConverter.asCodeAction(item);\n-                            const group = actionGroup(item);\n-                            if (isSnippetEdit(item) || group) {\n-                                action.command = {\n-                                    command: \"rust-analyzer.applySnippetWorkspaceEdit\",\n-                                    title: \"\",\n-                                    arguments: [action.edit],\n-                                };\n-                                action.edit = undefined;\n-                            }\n-\n-                            if (group) {\n-                                let entry = groups.get(group);\n-                                if (!entry) {\n-                                    entry = { index: result.length, items: [] };\n-                                    groups.set(group, entry);\n-                                    result.push(action);\n-                                }\n-                                entry.items.push(action);\n-                            } else {\n+                            result.push(action);\n+                            continue;\n+                        }\n+                        assert(isCodeActionWithoutEditsAndCommands(item), \"We don't expect edits or commands here\");\n+                        const action = new vscode.CodeAction(item.title);\n+                        const group = (item as any).group;\n+                        const id = (item as any).id;\n+                        const resolveParams: ra.ResolveCodeActionParams = {\n+                            id: id,\n+                            codeActionParams: params\n+                        };\n+                        action.command = {\n+                            command: \"rust-analyzer.resolveCodeAction\",\n+                            title: item.title,\n+                            arguments: [resolveParams],\n+                        };\n+                        if (group) {\n+                            let entry = groups.get(group);\n+                            if (!entry) {\n+                                entry = { index: result.length, items: [] };\n+                                groups.set(group, entry);\n                                 result.push(action);\n                             }\n+                            entry.items.push(action);\n                         } else {\n-                            const command = client.protocol2CodeConverter.asCommand(item);\n-                            result.push(command);\n+                            result.push(action);\n                         }\n                     }\n                     for (const [group, { index, items }] of groups) {\n@@ -80,7 +89,7 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n                                 command: \"rust-analyzer.applyActionGroup\",\n                                 title: \"\",\n                                 arguments: [items.map((item) => {\n-                                    return { label: item.title, edit: item.command!!.arguments!![0] };\n+                                    return { label: item.title, arguments: item.command!!.arguments!![0] };\n                                 })],\n                             };\n                             result[index] = action;\n@@ -119,24 +128,17 @@ class ExperimentalFeatures implements lc.StaticFeature {\n         const caps: any = capabilities.experimental ?? {};\n         caps.snippetTextEdit = true;\n         caps.codeActionGroup = true;\n+        caps.resolveCodeAction = true;\n         capabilities.experimental = caps;\n     }\n     initialize(_capabilities: lc.ServerCapabilities<any>, _documentSelector: lc.DocumentSelector | undefined): void {\n     }\n }\n \n-function isSnippetEdit(action: lc.CodeAction): boolean {\n-    const documentChanges = action.edit?.documentChanges ?? [];\n-    for (const edit of documentChanges) {\n-        if (lc.TextDocumentEdit.is(edit)) {\n-            if (edit.edits.some((indel) => (indel as any).insertTextFormat === lc.InsertTextFormat.Snippet)) {\n-                return true;\n-            }\n-        }\n-    }\n-    return false;\n-}\n-\n-function actionGroup(action: lc.CodeAction): string | undefined {\n-    return (action as any).group;\n+function isCodeActionWithoutEditsAndCommands(value: any): boolean {\n+    const candidate: lc.CodeAction = value;\n+    return candidate && Is.string(candidate.title) &&\n+        (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, lc.Diagnostic.is)) &&\n+        (candidate.kind === void 0 || Is.string(candidate.kind)) &&\n+        (candidate.edit === void 0 && candidate.command === void 0);\n }"}, {"sha": "3e9c3aa0e59be26f82658bd984c7f54d2f6be1a6", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/65a3cc21edd8acd93b728d094514bafddcb1757a/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/65a3cc21edd8acd93b728d094514bafddcb1757a/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=65a3cc21edd8acd93b728d094514bafddcb1757a", "patch": "@@ -343,10 +343,25 @@ export function showReferences(ctx: Ctx): Cmd {\n }\n \n export function applyActionGroup(_ctx: Ctx): Cmd {\n-    return async (actions: { label: string; edit: vscode.WorkspaceEdit }[]) => {\n+    return async (actions: { label: string; arguments: ra.ResolveCodeActionParams }[]) => {\n         const selectedAction = await vscode.window.showQuickPick(actions);\n         if (!selectedAction) return;\n-        await applySnippetWorkspaceEdit(selectedAction.edit);\n+        vscode.commands.executeCommand(\n+            'rust-analyzer.resolveCodeAction',\n+            selectedAction.arguments,\n+        );\n+    };\n+}\n+\n+export function resolveCodeAction(ctx: Ctx): Cmd {\n+    const client = ctx.client;\n+    return async (params: ra.ResolveCodeActionParams) => {\n+        const item: lc.WorkspaceEdit = await client.sendRequest(ra.resolveCodeAction, params);\n+        if (!item) {\n+            return;\n+        }\n+        const edit = client.protocol2CodeConverter.asWorkspaceEdit(item);\n+        await applySnippetWorkspaceEdit(edit);\n     };\n }\n "}, {"sha": "9793b926c26e2863b5f88f119589da96fe3c46fa", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65a3cc21edd8acd93b728d094514bafddcb1757a/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/65a3cc21edd8acd93b728d094514bafddcb1757a/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=65a3cc21edd8acd93b728d094514bafddcb1757a", "patch": "@@ -33,6 +33,12 @@ export const matchingBrace = new lc.RequestType<MatchingBraceParams, lc.Position\n \n export const parentModule = new lc.RequestType<lc.TextDocumentPositionParams, lc.LocationLink[], void>(\"experimental/parentModule\");\n \n+export interface ResolveCodeActionParams {\n+    id: string;\n+    codeActionParams: lc.CodeActionParams;\n+}\n+export const resolveCodeAction = new lc.RequestType<ResolveCodeActionParams, lc.WorkspaceEdit, unknown>('experimental/resolveCodeAction');\n+\n export interface JoinLinesParams {\n     textDocument: lc.TextDocumentIdentifier;\n     ranges: lc.Range[];"}, {"sha": "a92c676fa2dd7ddda1b9f5047c9ad9e58707349b", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65a3cc21edd8acd93b728d094514bafddcb1757a/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/65a3cc21edd8acd93b728d094514bafddcb1757a/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=65a3cc21edd8acd93b728d094514bafddcb1757a", "patch": "@@ -98,6 +98,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('debugSingle', commands.debugSingle);\n     ctx.registerCommand('showReferences', commands.showReferences);\n     ctx.registerCommand('applySnippetWorkspaceEdit', commands.applySnippetWorkspaceEditCommand);\n+    ctx.registerCommand('resolveCodeAction', commands.resolveCodeAction);\n     ctx.registerCommand('applyActionGroup', commands.applyActionGroup);\n \n     ctx.pushCleanup(activateTaskProvider(workspaceFolder));"}]}