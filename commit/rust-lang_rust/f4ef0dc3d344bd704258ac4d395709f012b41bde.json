{"sha": "f4ef0dc3d344bd704258ac4d395709f012b41bde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZWYwZGMzZDM0NGJkNzA0MjU4YWM0ZDM5NTcwOWYwMTJiNDFiZGU=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-13T00:59:59Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-17T23:17:05Z"}, "message": "Allow old-style syntax extensions to be called with new syntax.", "tree": {"sha": "1e8bec93f16ab6a7a4ebc2d5325ba5481e4cc2d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e8bec93f16ab6a7a4ebc2d5325ba5481e4cc2d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4ef0dc3d344bd704258ac4d395709f012b41bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ef0dc3d344bd704258ac4d395709f012b41bde", "html_url": "https://github.com/rust-lang/rust/commit/f4ef0dc3d344bd704258ac4d395709f012b41bde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4ef0dc3d344bd704258ac4d395709f012b41bde/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db020ab63cd51dd4a25cba2d00117f016128762b", "url": "https://api.github.com/repos/rust-lang/rust/commits/db020ab63cd51dd4a25cba2d00117f016128762b", "html_url": "https://github.com/rust-lang/rust/commit/db020ab63cd51dd4a25cba2d00117f016128762b"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "79eb71969ff8cdb084a264ffbf5090348d7b63db", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f4ef0dc3d344bd704258ac4d395709f012b41bde/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ef0dc3d344bd704258ac4d395709f012b41bde/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=f4ef0dc3d344bd704258ac4d395709f012b41bde", "patch": "@@ -244,6 +244,43 @@ fn get_mac_body(cx: ext_ctxt, sp: span, args: ast::mac_body)\n     }\n }\n \n+fn tt_args_to_original_flavor(cx: ext_ctxt, sp: span, arg: ~[ast::token_tree])\n+    -> ast::mac_arg {\n+    import ast::{matcher, matcher_, mtc_tok, mtc_rep, mtc_bb};\n+    import parse::lexer::{new_tt_reader, tt_reader_as_reader, reader};\n+    import tt::earley_parser::{parse_or_else, seq, leaf};\n+\n+    // these spans won't matter, anyways\n+    fn ms(m: matcher_) -> matcher {\n+        {node: m, span: {lo: 0u, hi: 0u, expn_info: none}}\n+    }\n+\n+    let argument_gram = ~[ms(mtc_rep(~[\n+        ms(mtc_bb(@\"arg\",@\"expr\", 0u))\n+    ], some(parse::token::COMMA), true))];\n+\n+    let arg_reader = new_tt_reader(cx.parse_sess().span_diagnostic,\n+                                   cx.parse_sess().interner, none, arg);\n+    let args =\n+        alt parse_or_else(cx.parse_sess(), cx.cfg(), arg_reader as reader,\n+                          argument_gram).get(@\"arg\") {\n+          @seq(s, _) {\n+            do s.map() |lf| {\n+                alt lf {\n+                  @leaf(parse::token::w_expr(arg)) {\n+                    arg /* whew! list of exprs, here we come! */\n+                  }\n+                  _ { fail \"badly-structured parse result\"; }\n+                }\n+            }\n+          }\n+          _ { fail \"badly-structured parse result\"; }\n+        };\n+\n+    ret some(@{id: parse::next_node_id(cx.parse_sess()),\n+               node: ast::expr_vec(args, ast::m_imm), span: sp});\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "c470daaf02285d2985bf01b3de06f5f156d462e0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f4ef0dc3d344bd704258ac4d395709f012b41bde/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ef0dc3d344bd704258ac4d395709f012b41bde/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f4ef0dc3d344bd704258ac4d395709f012b41bde", "patch": "@@ -81,7 +81,20 @@ fn expand_expr(exts: hashmap<~str, syntax_extension>, cx: ext_ctxt,\n                     cx.bt_pop();\n \n                     (fully_expanded, s)\n+                  }\n+                  some(normal({expander: exp, span: exp_sp})) {\n+                    //convert the new-style invoc for the old-style macro\n+                    let arg = base::tt_args_to_original_flavor(cx, pth.span,\n+                                                               tts);\n+                    let expanded = exp(cx, mac.span, arg, none);\n \n+                    cx.bt_push(expanded_from({call_site: s,\n+                                callie: {name: *extname, span: exp_sp}}));\n+                    //keep going, outside-in\n+                    let fully_expanded = fld.fold_expr(expanded).node;\n+                    cx.bt_pop();\n+\n+                    (fully_expanded, s)\n                   }\n                   _ {\n                     cx.span_fatal(pth.span,"}, {"sha": "aac2bb2ddf1550adb3a82e129c92e8e61489dbad", "filename": "src/libsyntax/ext/tt/earley_parser.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4ef0dc3d344bd704258ac4d395709f012b41bde/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ef0dc3d344bd704258ac4d395709f012b41bde/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs?ref=f4ef0dc3d344bd704258ac4d395709f012b41bde", "patch": "@@ -101,6 +101,16 @@ enum parse_result {\n     failure(codemap::span, ~str)\n }\n \n+fn parse_or_else(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader,\n+                 ms: ~[matcher]) -> hashmap<ident, @arb_depth> {\n+    alt parse(sess, cfg, rdr, ms) {\n+      success(m) { m }\n+      failure(sp, str) {\n+        sess.span_diagnostic.span_fatal(sp, str);\n+      }\n+    }\n+}\n+\n fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n     -> parse_result {\n     let mut cur_eis = ~[];"}]}