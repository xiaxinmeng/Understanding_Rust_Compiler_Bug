{"sha": "200c4d041059dd233c2181ff0fd0997b08bdc755", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMGM0ZDA0MTA1OWRkMjMzYzIxODFmZjBmZDA5OTdiMDhiZGM3NTU=", "commit": {"author": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2017-07-23T07:27:13Z"}, "committer": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2017-07-23T07:27:13Z"}, "message": "Better detection of repr packed and align\n\nFixes issue #43317.", "tree": {"sha": "5dd1060b9fa1ba4a97956ec72876dde92e9dc505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dd1060b9fa1ba4a97956ec72876dde92e9dc505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/200c4d041059dd233c2181ff0fd0997b08bdc755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/200c4d041059dd233c2181ff0fd0997b08bdc755", "html_url": "https://github.com/rust-lang/rust/commit/200c4d041059dd233c2181ff0fd0997b08bdc755", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/200c4d041059dd233c2181ff0fd0997b08bdc755/comments", "author": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "504328a31a211814f9cac6de84c5a7ed154f58eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/504328a31a211814f9cac6de84c5a7ed154f58eb", "html_url": "https://github.com/rust-lang/rust/commit/504328a31a211814f9cac6de84c5a7ed154f58eb"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "131972a920899f9db9bb42f9fe25a12ee08ac192", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/200c4d041059dd233c2181ff0fd0997b08bdc755/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200c4d041059dd233c2181ff0fd0997b08bdc755/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=200c4d041059dd233c2181ff0fd0997b08bdc755", "patch": "@@ -2025,5 +2025,4 @@ register_diagnostics! {\n     E0490, // a value of type `..` is borrowed for too long\n     E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n     E0566, // conflicting representation hints\n-    E0587, // conflicting packed and align representation hints\n }"}, {"sha": "946cbb7960b67634df29978633c9ee432effc801", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/200c4d041059dd233c2181ff0fd0997b08bdc755/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200c4d041059dd233c2181ff0fd0997b08bdc755/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=200c4d041059dd233c2181ff0fd0997b08bdc755", "patch": "@@ -76,8 +76,6 @@ impl<'a> CheckAttrVisitor<'a> {\n         };\n \n         let mut conflicting_reprs = 0;\n-        let mut found_packed = false;\n-        let mut found_align = false;\n \n         for word in words {\n \n@@ -106,7 +104,6 @@ impl<'a> CheckAttrVisitor<'a> {\n                                 (\"attribute should be applied to struct or union\",\n                                  \"a struct or union\")\n                     } else {\n-                        found_packed = true;\n                         continue\n                     }\n                 }\n@@ -120,7 +117,6 @@ impl<'a> CheckAttrVisitor<'a> {\n                     }\n                 }\n                 \"align\" => {\n-                    found_align = true;\n                     if target != Target::Struct &&\n                             target != Target::Union {\n                         (\"attribute should be applied to struct or union\",\n@@ -150,10 +146,6 @@ impl<'a> CheckAttrVisitor<'a> {\n             span_warn!(self.sess, attr.span, E0566,\n                        \"conflicting representation hints\");\n         }\n-        if found_align && found_packed {\n-            struct_span_err!(self.sess, attr.span, E0587,\n-                             \"conflicting packed and align representation hints\").emit();\n-        }\n     }\n }\n "}, {"sha": "1a5ef9b3ba7e34ed6c1ea1fed9136619f9ab9a7b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/200c4d041059dd233c2181ff0fd0997b08bdc755/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200c4d041059dd233c2181ff0fd0997b08bdc755/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=200c4d041059dd233c2181ff0fd0997b08bdc755", "patch": "@@ -1063,11 +1063,7 @@ fn check_struct<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         check_simd(tcx, span, def_id);\n     }\n \n-    // if struct is packed and not aligned, check fields for alignment.\n-    // Checks for combining packed and align attrs on single struct are done elsewhere.\n-    if tcx.adt_def(def_id).repr.packed() && tcx.adt_def(def_id).repr.align == 0 {\n-        check_packed(tcx, span, def_id);\n-    }\n+    check_packed(tcx, span, def_id);\n }\n \n fn check_union<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -1478,9 +1474,15 @@ pub fn check_simd<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: DefId\n }\n \n fn check_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: DefId) {\n-    if check_packed_inner(tcx, def_id, &mut Vec::new()) {\n-        struct_span_err!(tcx.sess, sp, E0588,\n-            \"packed struct cannot transitively contain a `[repr(align)]` struct\").emit();\n+    if tcx.adt_def(def_id).repr.packed() {\n+        if tcx.adt_def(def_id).repr.align > 0 {\n+            struct_span_err!(tcx.sess, sp, E0587,\n+                             \"struct has conflicting packed and align representation hints\").emit();\n+        }\n+        else if check_packed_inner(tcx, def_id, &mut Vec::new()) {\n+            struct_span_err!(tcx.sess, sp, E0588,\n+                \"packed struct cannot transitively contain a `[repr(align)]` struct\").emit();\n+        }\n     }\n }\n "}, {"sha": "60f32408abba1a7bdda4529c6d4fa3b49d5e402d", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/200c4d041059dd233c2181ff0fd0997b08bdc755/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200c4d041059dd233c2181ff0fd0997b08bdc755/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=200c4d041059dd233c2181ff0fd0997b08bdc755", "patch": "@@ -4663,6 +4663,7 @@ register_diagnostics! {\n            // but `{}` was found in the type `{}`\n     E0567, // auto traits can not have type parameters\n     E0568, // auto-traits can not have predicates,\n+    E0587, // struct has conflicting packed and align representation hints\n     E0588, // packed struct cannot transitively contain a `[repr(align)]` struct\n     E0592, // duplicate definitions with name `{}`\n //  E0613, // Removed (merged with E0609)"}, {"sha": "e4a9205409bf167024bd46d991e1244b4f472bd8", "filename": "src/test/compile-fail/conflicting-repr-hints.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/200c4d041059dd233c2181ff0fd0997b08bdc755/src%2Ftest%2Fcompile-fail%2Fconflicting-repr-hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200c4d041059dd233c2181ff0fd0997b08bdc755/src%2Ftest%2Fcompile-fail%2Fconflicting-repr-hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconflicting-repr-hints.rs?ref=200c4d041059dd233c2181ff0fd0997b08bdc755", "patch": "@@ -27,7 +27,15 @@ enum D { D }\n #[repr(C, packed)]\n struct E(i32);\n \n-#[repr(packed, align(8))] //~ ERROR conflicting packed and align representation hints\n-struct F(i32);\n+#[repr(packed, align(8))]\n+struct F(i32); //~ ERROR struct has conflicting packed and align representation hints\n+\n+#[repr(packed)]\n+#[repr(align(8))]\n+struct G(i32); //~ ERROR struct has conflicting packed and align representation hints\n+\n+#[repr(align(8))]\n+#[repr(packed)]\n+struct H(i32); //~ ERROR struct has conflicting packed and align representation hints\n \n fn main() {}"}]}