{"sha": "a3305f87c154aae5e7b46f4525683567a0938455", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMzA1Zjg3YzE1NGFhZTVlN2I0NmY0NTI1NjgzNTY3YTA5Mzg0NTU=", "commit": {"author": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2015-09-17T20:24:15Z"}, "committer": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2015-09-17T20:55:40Z"}, "message": "reference: actual keywords feel more appropriate", "tree": {"sha": "90092565146bc3c24e308b6b05c15a424edca520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90092565146bc3c24e308b6b05c15a424edca520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3305f87c154aae5e7b46f4525683567a0938455", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3305f87c154aae5e7b46f4525683567a0938455", "html_url": "https://github.com/rust-lang/rust/commit/a3305f87c154aae5e7b46f4525683567a0938455", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3305f87c154aae5e7b46f4525683567a0938455/comments", "author": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2e13e822a73e0ea46ae9e21afdd3155fc997f6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e13e822a73e0ea46ae9e21afdd3155fc997f6d", "html_url": "https://github.com/rust-lang/rust/commit/d2e13e822a73e0ea46ae9e21afdd3155fc997f6d"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "d7d9f938ed87b2268fe12a2ec27fa23489f0236e", "filename": "src/doc/reference.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a3305f87c154aae5e7b46f4525683567a0938455/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/a3305f87c154aae5e7b46f4525683567a0938455/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=a3305f87c154aae5e7b46f4525683567a0938455", "patch": "@@ -3035,18 +3035,18 @@ A `loop` expression may optionally have a _label_. The label is written as\n a lifetime preceding the loop expression, as in `'foo: loop{ }`. If a\n label is present, then labeled `break` and `continue` expressions nested\n within this loop may exit out of this loop or return control to its head.\n-See [Break expressions](#break-expressions) and [Continue\n+See [break expressions](#break-expressions) and [continue\n expressions](#continue-expressions).\n \n-### Break expressions\n+### `break` expressions\n \n A `break` expression has an optional _label_. If the label is absent, then\n executing a `break` expression immediately terminates the innermost loop\n enclosing it. It is only permitted in the body of a loop. If the label is\n present, then `break 'foo` terminates the loop with label `'foo`, which need not\n be the innermost label enclosing the `break` expression, but must enclose it.\n \n-### Continue expressions\n+### `continue` expressions\n \n A `continue` expression has an optional _label_. If the label is absent, then\n executing a `continue` expression immediately terminates the current iteration\n@@ -3059,7 +3059,7 @@ innermost label enclosing the `break` expression, but must enclose it.\n \n A `continue` expression is only permitted in the body of a loop.\n \n-### While loops\n+### `while` loops\n \n A `while` loop begins by evaluating the boolean loop conditional expression.\n If the loop conditional expression evaluates to `true`, the loop body block\n@@ -3082,7 +3082,7 @@ Like `loop` expressions, `while` loops can be controlled with `break` or\n loops](#infinite-loops), [break expressions](#break-expressions), and\n [continue expressions](#continue-expressions) for more information.\n \n-### For expressions\n+### `for` expressions\n \n A `for` expression is a syntactic construct for looping over elements provided\n by an implementation of `std::iter::IntoIterator`.\n@@ -3117,7 +3117,7 @@ Like `loop` expressions, `for` loops can be controlled with `break` or\n loops](#infinite-loops), [break expressions](#break-expressions), and\n [continue expressions](#continue-expressions) for more information.\n \n-### If expressions\n+### `if` expressions\n \n An `if` expression is a conditional branch in program control. The form of an\n `if` expression is a condition expression, followed by a consequent block, any\n@@ -3129,7 +3129,7 @@ evaluates to `false`, the consequent block is skipped and any subsequent `else\n if` condition is evaluated. If all `if` and `else if` conditions evaluate to\n `false` then any `else` block is executed.\n \n-### Match expressions\n+### `match` expressions\n \n A `match` expression branches on a *pattern*. The exact form of matching that\n occurs depends on the pattern. Patterns consist of some combination of\n@@ -3235,7 +3235,7 @@ let message = match maybe_digit {\n };\n ```\n \n-### If let expressions\n+### `if let` expressions\n \n An `if let` expression is semantically identical to an `if` expression but in place\n of a condition expression it expects a refutable let statement. If the value of the\n@@ -3256,15 +3256,15 @@ if let (\"Ham\", b) = dish {\n }\n ```\n \n-### While let loops\n+### `while let` loops\n \n A `while let` loop is semantically identical to a `while` loop but in place of a\n condition expression it expects a refutable let statement. If the value of the\n expression on the right hand side of the let statement matches the pattern, the\n loop body block executes and control returns to the pattern matching statement.\n Otherwise, the while expression completes.\n \n-### Return expressions\n+### `return` expressions\n \n Return expressions are denoted with the keyword `return`. Evaluating a `return`\n expression moves its argument into the designated output location for the"}]}