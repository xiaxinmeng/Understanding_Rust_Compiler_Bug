{"sha": "33972da625c06403b4845d28d226d8cef123e736", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOTcyZGE2MjVjMDY0MDNiNDg0NWQyOGQyMjZkOGNlZjEyM2U3MzY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-20T16:38:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-20T16:38:40Z"}, "message": "Merge #9651\n\n9651: Restrict completions inside visibility modifiers r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "a9b77b46666da931be0191368212314efac215c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9b77b46666da931be0191368212314efac215c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33972da625c06403b4845d28d226d8cef123e736", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg9vwQCRBK7hj4Ov3rIwAAMMgIAFZwMaXnFDkifkqu3tz/nacH\n+ia/373YEQO9iyVpxxzd6e5dHfPxEX2YszW7BtfQIucrKndlwIAScsxY5wJy48+F\nCdogZn9tn2Fv/9mGYVGqRk9YHeGwBh9o6cNgQXe94fIzw6yut0m/PNKKsyPoA4CO\nGry+yE3F6fPkjvDE9AR/szQYHzfX6ijTfBVokkQX4kK0gIGmmPQlde69GH6wnGOM\nZiGUrvjNg6TRX2g8Ox7cz3bHO0RGmZ9ANYH03JHB/51tSMFKCyJdwZ0LIwJsF9be\nkHDeHMl1Jx5/kdNL8X14gfCRWTU/3CGS+usPHxHu/C/0xYTD1C+jCJUtsdYOu7Y=\n=RqYD\n-----END PGP SIGNATURE-----\n", "payload": "tree a9b77b46666da931be0191368212314efac215c5\nparent 4705df44c74b3b9f344ed077dc68e4284dd78a62\nparent f6cb42fdb8e4cd22359037bedf76349db24a23d4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626799120 +0000\ncommitter GitHub <noreply@github.com> 1626799120 +0000\n\nMerge #9651\n\n9651: Restrict completions inside visibility modifiers r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33972da625c06403b4845d28d226d8cef123e736", "html_url": "https://github.com/rust-lang/rust/commit/33972da625c06403b4845d28d226d8cef123e736", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33972da625c06403b4845d28d226d8cef123e736/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4705df44c74b3b9f344ed077dc68e4284dd78a62", "url": "https://api.github.com/repos/rust-lang/rust/commits/4705df44c74b3b9f344ed077dc68e4284dd78a62", "html_url": "https://github.com/rust-lang/rust/commit/4705df44c74b3b9f344ed077dc68e4284dd78a62"}, {"sha": "f6cb42fdb8e4cd22359037bedf76349db24a23d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6cb42fdb8e4cd22359037bedf76349db24a23d4", "html_url": "https://github.com/rust-lang/rust/commit/f6cb42fdb8e4cd22359037bedf76349db24a23d4"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "c7c2aca1b16750ae57a420e0c77881def0a49652", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/33972da625c06403b4845d28d226d8cef123e736/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33972da625c06403b4845d28d226d8cef123e736/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=33972da625c06403b4845d28d226d8cef123e736", "patch": "@@ -39,10 +39,16 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     let has_block_expr_parent = ctx.has_block_expr_parent();\n     let expects_item = ctx.expects_item();\n \n+    if let Some(ImmediateLocation::Visibility(vis)) = &ctx.completion_location {\n+        if vis.in_token().is_none() {\n+            add_keyword(\"in\", \"in\");\n+        }\n+        return;\n+    }\n     if ctx.has_impl_or_trait_prev_sibling() {\n-        add_keyword(\"where\", \"where \");\n+        add_keyword(\"where\", \"where\");\n         if ctx.has_impl_prev_sibling() {\n-            add_keyword(\"for\", \"for \");\n+            add_keyword(\"for\", \"for\");\n         }\n         return;\n     }\n@@ -62,12 +68,12 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     if !ctx.has_visibility_prev_sibling()\n         && (expects_item || ctx.expects_non_trait_assoc_item() || ctx.expect_field())\n     {\n-        add_keyword(\"pub(crate)\", \"pub(crate) \");\n-        add_keyword(\"pub\", \"pub \");\n+        add_keyword(\"pub(crate)\", \"pub(crate)\");\n+        add_keyword(\"pub\", \"pub\");\n     }\n \n     if expects_item || expects_assoc_item || has_block_expr_parent {\n-        add_keyword(\"unsafe\", \"unsafe \");\n+        add_keyword(\"unsafe\", \"unsafe\");\n         add_keyword(\"fn\", \"fn $1($2) {\\n    $0\\n}\");\n         add_keyword(\"const\", \"const $0\");\n         add_keyword(\"type\", \"type $0\");\n@@ -110,7 +116,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     }\n \n     if ctx.previous_token_is(T![if]) || ctx.previous_token_is(T![while]) || has_block_expr_parent {\n-        add_keyword(\"let\", \"let \");\n+        add_keyword(\"let\", \"let\");\n     }\n \n     if ctx.after_if() {"}, {"sha": "6942a305b4d9006f8e743c98dacdfbf9fff0910f", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33972da625c06403b4845d28d226d8cef123e736/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33972da625c06403b4845d28d226d8cef123e736/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=33972da625c06403b4845d28d226d8cef123e736", "patch": "@@ -24,6 +24,9 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         return;\n     }\n     std::array::IntoIter::new([\"self\", \"super\", \"crate\"]).for_each(|kw| acc.add_keyword(ctx, kw));\n+    if let Some(ImmediateLocation::Visibility(_)) = ctx.completion_location {\n+        return;\n+    }\n \n     if ctx.expects_item() || ctx.expects_assoc_item() {\n         // only show macros in {Assoc}ItemList"}, {"sha": "bd24bbc88b624b3d4fc0a29f8a9e615e1749f1db", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33972da625c06403b4845d28d226d8cef123e736/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33972da625c06403b4845d28d226d8cef123e736/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=33972da625c06403b4845d28d226d8cef123e736", "patch": "@@ -41,6 +41,7 @@ pub(crate) enum ImmediateLocation {\n     Attribute(ast::Attr),\n     // Fake file ast node\n     ModDeclaration(ast::Module),\n+    Visibility(ast::Visibility),\n     // Original file ast node\n     MethodCall {\n         receiver: Option<ast::Expr>,\n@@ -246,6 +247,8 @@ pub(crate) fn determine_location(\n                     .and_then(|r| find_node_with_range(original_file, r)),\n                 has_parens: it.arg_list().map_or(false, |it| it.l_paren_token().is_some())\n             },\n+            ast::Visibility(it) => it.pub_token()\n+                .and_then(|t| (t.text_range().end() < offset).then(|| ImmediateLocation::Visibility(it)))?,\n             _ => return None,\n         }\n     };"}, {"sha": "9018e913c3c8f51e8703517f7c265295c6d3aa6d", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33972da625c06403b4845d28d226d8cef123e736/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33972da625c06403b4845d28d226d8cef123e736/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=33972da625c06403b4845d28d226d8cef123e736", "patch": "@@ -9,10 +9,10 @@ mod item_list;\n mod item;\n mod pattern;\n mod predicate;\n+mod sourcegen;\n mod type_pos;\n mod use_tree;\n-\n-mod sourcegen;\n+mod visibility;\n \n use std::mem;\n "}, {"sha": "1988b1d0f52b7bf2b514e3bffdf0b8e29bdd759e", "filename": "crates/ide_completion/src/tests/visibility.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/33972da625c06403b4845d28d226d8cef123e736/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33972da625c06403b4845d28d226d8cef123e736/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs?ref=33972da625c06403b4845d28d226d8cef123e736", "patch": "@@ -0,0 +1,24 @@\n+//! Completion tests for visibility modifiers.\n+use expect_test::{expect, Expect};\n+\n+use crate::tests::completion_list;\n+\n+fn check(ra_fixture: &str, expect: Expect) {\n+    let actual = completion_list(ra_fixture);\n+    expect.assert_eq(&actual)\n+}\n+\n+#[test]\n+fn empty_pub() {\n+    check(\n+        r#\"\n+pub($0)\n+\"#,\n+        expect![[r#\"\n+            kw in\n+            kw self\n+            kw super\n+            kw crate\n+        \"#]],\n+    );\n+}"}, {"sha": "53a20cd124915014199d5dd909ba648bf4cf0675", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33972da625c06403b4845d28d226d8cef123e736/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33972da625c06403b4845d28d226d8cef123e736/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=33972da625c06403b4845d28d226d8cef123e736", "patch": "@@ -162,7 +162,7 @@ fn opt_visibility(p: &mut Parser) -> bool {\n                     // test pub_parens_typepath\n                     // struct B(pub (super::A));\n                     // struct B(pub (crate::A,));\n-                    T![crate] | T![self] | T![super] if p.nth(2) != T![:] => {\n+                    T![crate] | T![self] | T![super] | T![ident] if p.nth(2) != T![:] => {\n                         p.bump_any();\n                         let path_m = p.start();\n                         let path_segment_m = p.start();"}, {"sha": "ea71da04226916abd2b80b8b1abfea3113dde4da", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33972da625c06403b4845d28d226d8cef123e736/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33972da625c06403b4845d28d226d8cef123e736/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=33972da625c06403b4845d28d226d8cef123e736", "patch": "@@ -211,6 +211,14 @@ fn validate_numeric_name(name_ref: Option<ast::NameRef>, errors: &mut Vec<Syntax\n }\n \n fn validate_visibility(vis: ast::Visibility, errors: &mut Vec<SyntaxError>) {\n+    if vis.in_token().is_none() {\n+        if vis.path().and_then(|p| p.as_single_name_ref()).and_then(|n| n.ident_token()).is_some() {\n+            errors.push(SyntaxError::new(\n+                \"incorrect visibility restriction\",\n+                vis.syntax.text_range(),\n+            ));\n+        }\n+    }\n     let parent = match vis.syntax().parent() {\n         Some(it) => it,\n         None => return,"}]}