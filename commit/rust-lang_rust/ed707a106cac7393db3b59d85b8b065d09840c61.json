{"sha": "ed707a106cac7393db3b59d85b8b065d09840c61", "node_id": "C_kwDOAAsO6NoAKGVkNzA3YTEwNmNhYzczOTNkYjNiNTlkODViOGIwNjVkMDk4NDBjNjE", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-19T23:48:08Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-27T11:27:22Z"}, "message": "Detect references to non-existant messages in Fluent resources", "tree": {"sha": "09494db58a72442679c02b53d692ceaccfc288b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09494db58a72442679c02b53d692ceaccfc288b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed707a106cac7393db3b59d85b8b065d09840c61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed707a106cac7393db3b59d85b8b065d09840c61", "html_url": "https://github.com/rust-lang/rust/commit/ed707a106cac7393db3b59d85b8b065d09840c61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed707a106cac7393db3b59d85b8b065d09840c61/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e37043d63bfe2f3be8fa5a05b07d6c0dad5775d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e37043d63bfe2f3be8fa5a05b07d6c0dad5775d", "html_url": "https://github.com/rust-lang/rust/commit/5e37043d63bfe2f3be8fa5a05b07d6c0dad5775d"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "08098c9bb2a85c5a2c37b7a557e7b91fc5f4a2bc", "filename": "compiler/rustc_macros/src/diagnostics/fluent.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ed707a106cac7393db3b59d85b8b065d09840c61/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed707a106cac7393db3b59d85b8b065d09840c61/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs?ref=ed707a106cac7393db3b59d85b8b065d09840c61", "patch": "@@ -4,7 +4,10 @@ use annotate_snippets::{\n };\n use fluent_bundle::{FluentBundle, FluentError, FluentResource};\n use fluent_syntax::{\n-    ast::{Attribute, Entry, Identifier, Message},\n+    ast::{\n+        Attribute, Entry, Expression, Identifier, InlineExpression, Message, Pattern,\n+        PatternElement,\n+    },\n     parser::ParserError,\n };\n use proc_macro::{Diagnostic, Level, Span};\n@@ -185,9 +188,12 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n         };\n \n         let mut constants = TokenStream::new();\n+        let mut messagerefs = Vec::new();\n         for entry in resource.entries() {\n             let span = res.krate.span();\n-            if let Entry::Message(Message { id: Identifier { name }, attributes, .. }) = entry {\n+            if let Entry::Message(Message { id: Identifier { name }, attributes, value, .. }) =\n+                entry\n+            {\n                 let _ = previous_defns.entry(name.to_string()).or_insert(path_span);\n \n                 if name.contains('-') {\n@@ -200,6 +206,18 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n                     .emit();\n                 }\n \n+                if let Some(Pattern { elements }) = value {\n+                    for elt in elements {\n+                        if let PatternElement::Placeable {\n+                            expression:\n+                                Expression::Inline(InlineExpression::MessageReference { id, .. }),\n+                        } = elt\n+                        {\n+                            messagerefs.push((id.name, *name));\n+                        }\n+                    }\n+                }\n+\n                 // Require that the message name starts with the crate name\n                 // `hir_typeck_foo_bar` (in `hir_typeck.ftl`)\n                 // `const_eval_baz` (in `const_eval.ftl`)\n@@ -258,6 +276,18 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n             }\n         }\n \n+        for (mref, name) in messagerefs.into_iter() {\n+            if !previous_defns.contains_key(mref) {\n+                Diagnostic::spanned(\n+                    path_span,\n+                    Level::Error,\n+                    format!(\"referenced message `{mref}` does not exist (in message `{name}`)\"),\n+                )\n+                .help(&format!(\"you may have meant to use a variable reference (`{{${mref}}}`)\"))\n+                .emit();\n+            }\n+        }\n+\n         if let Err(errs) = bundle.add_resource(resource) {\n             for e in errs {\n                 match e {"}, {"sha": "0cd8229b23010923dd646848aa61b859014a1c6d", "filename": "tests/ui-fulldeps/fluent-messages/missing-message-ref.ftl", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed707a106cac7393db3b59d85b8b065d09840c61/tests%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message-ref.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ed707a106cac7393db3b59d85b8b065d09840c61/tests%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message-ref.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message-ref.ftl?ref=ed707a106cac7393db3b59d85b8b065d09840c61", "patch": "@@ -0,0 +1 @@\n+missing_message_ref = {message}"}, {"sha": "74303e97dba947c5b9b1e4605c3566eb865f9eb8", "filename": "tests/ui-fulldeps/fluent-messages/test.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed707a106cac7393db3b59d85b8b065d09840c61/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed707a106cac7393db3b59d85b8b065d09840c61/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs?ref=ed707a106cac7393db3b59d85b8b065d09840c61", "patch": "@@ -96,3 +96,12 @@ mod missing_crate_name {\n \n     use self::fluent_generated::{DEFAULT_LOCALE_RESOURCES, test_crate_foo, with_hyphens};\n }\n+\n+mod missing_message_ref {\n+    use super::fluent_messages;\n+\n+    fluent_messages! {\n+        missing => \"./missing-message-ref.ftl\"\n+//~^ ERROR referenced message `message` does not exist\n+    }\n+}"}, {"sha": "2631b0a623275a08382774ba415aec60889574f9", "filename": "tests/ui-fulldeps/fluent-messages/test.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed707a106cac7393db3b59d85b8b065d09840c61/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed707a106cac7393db3b59d85b8b065d09840c61/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr?ref=ed707a106cac7393db3b59d85b8b065d09840c61", "patch": "@@ -93,6 +93,14 @@ LL |         test_crate => \"./missing-crate-name.ftl\",\n    |\n    = help: replace any '-'s with '_'s\n \n-error: aborting due to 10 previous errors\n+error: referenced message `message` does not exist (in message `missing_message_ref`)\n+  --> $DIR/test.rs:104:20\n+   |\n+LL |         missing => \"./missing-message-ref.ftl\"\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: you may have meant to use a variable reference (`{$message}`)\n+\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0428`."}]}