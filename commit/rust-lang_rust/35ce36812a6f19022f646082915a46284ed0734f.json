{"sha": "35ce36812a6f19022f646082915a46284ed0734f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1Y2UzNjgxMmE2ZjE5MDIyZjY0NjA4MjkxNWE0NjI4NGVkMDczNGY=", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-04-02T05:05:43Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-05-26T22:07:10Z"}, "message": "Unify feature flags as `step_trait`\n\nWhile stdlib implementations of the unchecked methods require unchecked\nmath, there is no reason to gate it behind this for external users. The\nreasoning for a separate `step_trait_ext` feature is unclear, and as\nsuch has been merged as well.", "tree": {"sha": "e8c5cd37b49a60b9b07a7010dc8aca0c7871b49b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8c5cd37b49a60b9b07a7010dc8aca0c7871b49b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35ce36812a6f19022f646082915a46284ed0734f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCYK7GjgAKCRC4DhnkZita\npEHRAQDW+TkClkNZssEK7ic93yqJlXCA7KkThMqThLaG91W3GAEAqJAgS5CMM7gk\nzNSaAfl6o3ajHyfs4927vsoSefcz0Qc=\n=QS4W\n-----END PGP SIGNATURE-----", "payload": "tree e8c5cd37b49a60b9b07a7010dc8aca0c7871b49b\nparent bc2f0fb5a9783ab2d70aa2831b7ffd056f5a16e9\nauthor Jacob Pratt <jacob@jhpratt.dev> 1617339943 -0400\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1622066830 -0400\n\nUnify feature flags as `step_trait`\n\nWhile stdlib implementations of the unchecked methods require unchecked\nmath, there is no reason to gate it behind this for external users. The\nreasoning for a separate `step_trait_ext` feature is unclear, and as\nsuch has been merged as well.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35ce36812a6f19022f646082915a46284ed0734f", "html_url": "https://github.com/rust-lang/rust/commit/35ce36812a6f19022f646082915a46284ed0734f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35ce36812a6f19022f646082915a46284ed0734f/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc2f0fb5a9783ab2d70aa2831b7ffd056f5a16e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc2f0fb5a9783ab2d70aa2831b7ffd056f5a16e9", "html_url": "https://github.com/rust-lang/rust/commit/bc2f0fb5a9783ab2d70aa2831b7ffd056f5a16e9"}], "stats": {"total": 10, "additions": 1, "deletions": 9}, "files": [{"sha": "3f759f4023b57e71137abfe9140c1a7fa7ac0cfa", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ce36812a6f19022f646082915a46284ed0734f/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ce36812a6f19022f646082915a46284ed0734f/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=35ce36812a6f19022f646082915a46284ed0734f", "patch": "@@ -65,7 +65,7 @@ impl Idx for u32 {\n /// `u32::MAX`. You can also customize things like the `Debug` impl,\n /// what traits are derived, and so forth via the macro.\n #[macro_export]\n-#[allow_internal_unstable(step_trait, step_trait_ext, rustc_attrs)]\n+#[allow_internal_unstable(step_trait, rustc_attrs)]\n macro_rules! newtype_index {\n     // ---- public rules ----\n "}, {"sha": "de5d77e96ee568b98be6e79864600d47ae7147ab", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35ce36812a6f19022f646082915a46284ed0734f/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ce36812a6f19022f646082915a46284ed0734f/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=35ce36812a6f19022f646082915a46284ed0734f", "patch": "@@ -57,7 +57,6 @@ pub trait Step: Clone + PartialOrd + Sized {\n     ///\n     /// * `Step::forward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::forward_checked(&x, 1))`\n     ///   * Corollary: `Step::forward_checked(&a, 0) == Some(a)`\n-    #[unstable(feature = \"step_trait_ext\", reason = \"recently added\", issue = \"42168\")]\n     fn forward_checked(start: Self, count: usize) -> Option<Self>;\n \n     /// Returns the value that would be obtained by taking the *successor*\n@@ -83,7 +82,6 @@ pub trait Step: Clone + PartialOrd + Sized {\n     ///   * Corollary: `Step::forward(a, 0) == a`\n     /// * `Step::forward(a, n) >= a`\n     /// * `Step::backward(Step::forward(a, n), n) == a`\n-    #[unstable(feature = \"step_trait_ext\", reason = \"recently added\", issue = \"42168\")]\n     fn forward(start: Self, count: usize) -> Self {\n         Step::forward_checked(start, count).expect(\"overflow in `Step::forward`\")\n     }\n@@ -108,7 +106,6 @@ pub trait Step: Clone + PartialOrd + Sized {\n     /// For any `a` and `n`, where no overflow occurs:\n     ///\n     /// * `Step::forward_unchecked(a, n)` is equivalent to `Step::forward(a, n)`\n-    #[unstable(feature = \"step_trait_ext\", reason = \"recently added\", issue = \"42168\")]\n     unsafe fn forward_unchecked(start: Self, count: usize) -> Self {\n         Step::forward(start, count)\n     }\n@@ -129,7 +126,6 @@ pub trait Step: Clone + PartialOrd + Sized {\n     ///\n     /// * `Step::backward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::backward_checked(&x, 1))`\n     ///   * Corollary: `Step::backward_checked(&a, 0) == Some(a)`\n-    #[unstable(feature = \"step_trait_ext\", reason = \"recently added\", issue = \"42168\")]\n     fn backward_checked(start: Self, count: usize) -> Option<Self>;\n \n     /// Returns the value that would be obtained by taking the *predecessor*\n@@ -155,7 +151,6 @@ pub trait Step: Clone + PartialOrd + Sized {\n     ///   * Corollary: `Step::backward(a, 0) == a`\n     /// * `Step::backward(a, n) <= a`\n     /// * `Step::forward(Step::backward(a, n), n) == a`\n-    #[unstable(feature = \"step_trait_ext\", reason = \"recently added\", issue = \"42168\")]\n     fn backward(start: Self, count: usize) -> Self {\n         Step::backward_checked(start, count).expect(\"overflow in `Step::backward`\")\n     }\n@@ -180,7 +175,6 @@ pub trait Step: Clone + PartialOrd + Sized {\n     /// For any `a` and `n`, where no overflow occurs:\n     ///\n     /// * `Step::backward_unchecked(a, n)` is equivalent to `Step::backward(a, n)`\n-    #[unstable(feature = \"step_trait_ext\", reason = \"recently added\", issue = \"42168\")]\n     unsafe fn backward_unchecked(start: Self, count: usize) -> Self {\n         Step::backward(start, count)\n     }"}, {"sha": "16051b3bc36c72701cf83546a8f60cac73b5fb21", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ce36812a6f19022f646082915a46284ed0734f/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ce36812a6f19022f646082915a46284ed0734f/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=35ce36812a6f19022f646082915a46284ed0734f", "patch": "@@ -40,7 +40,6 @@\n #![feature(maybe_uninit_write_slice)]\n #![feature(min_specialization)]\n #![feature(step_trait)]\n-#![feature(step_trait_ext)]\n #![feature(str_internals)]\n #![feature(test)]\n #![feature(trusted_len)]"}, {"sha": "45dcb74a6e05c41cbbc263b916c9f642aa5d8228", "filename": "src/test/ui/impl-trait/example-calendar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ce36812a6f19022f646082915a46284ed0734f/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ce36812a6f19022f646082915a46284ed0734f/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs?ref=35ce36812a6f19022f646082915a46284ed0734f", "patch": "@@ -3,7 +3,6 @@\n \n #![feature(fn_traits,\n            step_trait,\n-           step_trait_ext,\n            unboxed_closures,\n )]\n "}]}