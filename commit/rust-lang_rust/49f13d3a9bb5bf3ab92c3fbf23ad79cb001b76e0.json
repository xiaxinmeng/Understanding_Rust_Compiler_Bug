{"sha": "49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZjEzZDNhOWJiNWJmM2FiOTJjM2ZiZjIzYWQ3OWNiMDAxYjc2ZTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-02T10:26:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-02T10:26:09Z"}, "message": "fix a panic with glob-import missing a source map", "tree": {"sha": "55a59317e363ba5aa419366643502ce3656e1bb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55a59317e363ba5aa419366643502ce3656e1bb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0", "html_url": "https://github.com/rust-lang/rust/commit/49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab19ff16e55d4d64445fc2809e52d913ad492040", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab19ff16e55d4d64445fc2809e52d913ad492040", "html_url": "https://github.com/rust-lang/rust/commit/ab19ff16e55d4d64445fc2809e52d913ad492040"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "46455bd83cd712b7385eb08ee4c4c5879f4d3356", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0", "patch": "@@ -117,11 +117,7 @@ impl Module {\n     }\n \n     /// Returns the syntax of the last path segment corresponding to this import\n-    pub fn import_source(\n-        &self,\n-        db: &impl HirDatabase,\n-        import: ImportId,\n-    ) -> TreeArc<ast::PathSegment> {\n+    pub fn import_source(&self, db: &impl HirDatabase, import: ImportId) -> TreeArc<ast::UseTree> {\n         self.import_source_impl(db, import)\n     }\n "}, {"sha": "ccca2b7e5fc544b92fb2c5fba6dc2c92fc228442", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0", "patch": "@@ -72,7 +72,7 @@ impl Module {\n         &self,\n         db: &impl HirDatabase,\n         import: ImportId,\n-    ) -> TreeArc<ast::PathSegment> {\n+    ) -> TreeArc<ast::UseTree> {\n         let (file_id, source) = self.definition_source(db);\n         let (_, source_map) = db.raw_items_with_source_map(file_id);\n         source_map.get(&source, import)"}, {"sha": "35cbe66551a5fe43b2fe32ec483f7379cdceb103", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0", "patch": "@@ -31,15 +31,15 @@ pub struct RawItems {\n \n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct ImportSourceMap {\n-    map: ArenaMap<ImportId, AstPtr<ast::PathSegment>>,\n+    map: ArenaMap<ImportId, AstPtr<ast::UseTree>>,\n }\n \n impl ImportSourceMap {\n-    fn insert(&mut self, import: ImportId, segment: &ast::PathSegment) {\n-        self.map.insert(import, AstPtr::new(segment))\n+    fn insert(&mut self, import: ImportId, use_tree: &ast::UseTree) {\n+        self.map.insert(import, AstPtr::new(use_tree))\n     }\n \n-    pub(crate) fn get(&self, source: &ModuleSource, import: ImportId) -> TreeArc<ast::PathSegment> {\n+    pub(crate) fn get(&self, source: &ModuleSource, import: ImportId) -> TreeArc<ast::UseTree> {\n         let file = match source {\n             ModuleSource::SourceFile(file) => &*file,\n             ModuleSource::Module(m) => m.syntax().ancestors().find_map(SourceFile::cast).unwrap(),\n@@ -256,17 +256,15 @@ impl RawItemsCollector {\n     fn add_use_item(&mut self, current_module: Option<Module>, use_item: &ast::UseItem) {\n         let is_prelude = use_item.has_atom_attr(\"prelude_import\");\n \n-        Path::expand_use_item(use_item, |path, segment, alias| {\n+        Path::expand_use_item(use_item, |path, use_tree, is_glob, alias| {\n             let import = self.raw_items.imports.alloc(ImportData {\n                 path,\n                 alias,\n-                is_glob: segment.is_none(),\n+                is_glob,\n                 is_prelude,\n                 is_extern_crate: false,\n             });\n-            if let Some(segment) = segment {\n-                self.source_map.insert(import, segment)\n-            }\n+            self.source_map.insert(import, use_tree);\n             self.push_item(current_module, RawItem::Import(import))\n         })\n     }"}, {"sha": "5449cddfdd814b0a44171fc4efd64fb6f7935819", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0", "patch": "@@ -46,7 +46,7 @@ impl Path {\n     /// Calls `cb` with all paths, represented by this use item.\n     pub fn expand_use_item<'a>(\n         item: &'a ast::UseItem,\n-        mut cb: impl FnMut(Path, Option<&'a ast::PathSegment>, Option<Name>),\n+        mut cb: impl FnMut(Path, &'a ast::UseTree, bool, Option<Name>),\n     ) {\n         if let Some(tree) = item.use_tree() {\n             expand_use_tree(None, tree, &mut cb);\n@@ -156,7 +156,7 @@ impl From<Name> for Path {\n fn expand_use_tree<'a>(\n     prefix: Option<Path>,\n     tree: &'a ast::UseTree,\n-    cb: &mut impl FnMut(Path, Option<&'a ast::PathSegment>, Option<Name>),\n+    cb: &mut impl FnMut(Path, &'a ast::UseTree, bool, Option<Name>),\n ) {\n     if let Some(use_tree_list) = tree.use_tree_list() {\n         let prefix = match tree.path() {\n@@ -181,18 +181,15 @@ fn expand_use_tree<'a>(\n                 if let Some(segment) = ast_path.segment() {\n                     if segment.kind() == Some(ast::PathSegmentKind::SelfKw) {\n                         if let Some(prefix) = prefix {\n-                            cb(prefix, Some(segment), alias);\n+                            cb(prefix, tree, false, alias);\n                             return;\n                         }\n                     }\n                 }\n             }\n             if let Some(path) = convert_path(prefix, ast_path) {\n-                if tree.has_star() {\n-                    cb(path, None, alias)\n-                } else if let Some(segment) = ast_path.segment() {\n-                    cb(path, Some(segment), alias)\n-                };\n+                let is_glob = tree.has_star();\n+                cb(path, tree, is_glob, alias)\n             }\n             // FIXME: report errors somewhere\n             // We get here if we do"}, {"sha": "122dd7bddf1fd6ec6bb4e2ff119deb9e874e0e96", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=49f13d3a9bb5bf3ab92c3fbf23ad79cb001b76e0", "patch": "@@ -72,6 +72,18 @@ mod tests {\n         assert!(completions.is_empty());\n     }\n \n+    #[test]\n+    fn dont_complete_current_use_in_braces_with_glob() {\n+        let completions = do_completion(\n+            r\"\n+            mod foo { pub struct S; }\n+            use self::{foo::*, bar<|>};\n+            \",\n+            CompletionKind::Reference,\n+        );\n+        assert_eq!(completions.len(), 2);\n+    }\n+\n     #[test]\n     fn completes_mod_with_docs() {\n         check_reference_completion("}]}