{"sha": "f78cc075099f608787d50e151b4b6f529a0629c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3OGNjMDc1MDk5ZjYwODc4N2Q1MGUxNTFiNGI2ZjUyOWEwNjI5YzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-21T06:22:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-21T06:22:05Z"}, "message": "Auto merge of #5068 - JohnTitor:split-up-transmute, r=phansch\n\nSplit up `transmute` ui test\n\nPart of #2038\n\nchangelog: none", "tree": {"sha": "78212e442411cb200c65cd5499b925d646f8e36f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78212e442411cb200c65cd5499b925d646f8e36f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f78cc075099f608787d50e151b4b6f529a0629c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f78cc075099f608787d50e151b4b6f529a0629c1", "html_url": "https://github.com/rust-lang/rust/commit/f78cc075099f608787d50e151b4b6f529a0629c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f78cc075099f608787d50e151b4b6f529a0629c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd06c06183e634b000198958c4ba9dc6d1f0616d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd06c06183e634b000198958c4ba9dc6d1f0616d", "html_url": "https://github.com/rust-lang/rust/commit/dd06c06183e634b000198958c4ba9dc6d1f0616d"}, {"sha": "c9d5cb9645c55db211208266c270608a06450f06", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d5cb9645c55db211208266c270608a06450f06", "html_url": "https://github.com/rust-lang/rust/commit/c9d5cb9645c55db211208266c270608a06450f06"}], "stats": {"total": 433, "additions": 219, "deletions": 214}, "files": [{"sha": "df11bf02ef37994d36bb251ab675f31ca7d83e08", "filename": "clippy_dev/src/stderr_length_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f78cc075099f608787d50e151b4b6f529a0629c1/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78cc075099f608787d50e151b4b6f529a0629c1/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fstderr_length_check.rs?ref=f78cc075099f608787d50e151b4b6f529a0629c1", "patch": "@@ -7,7 +7,7 @@ use std::io::prelude::*;\n // The maximum length allowed for stderr files.\n //\n // We limit this because small files are easier to deal with than bigger files.\n-const LIMIT: usize = 275;\n+const LIMIT: usize = 245;\n \n pub fn check() {\n     let stderr_files = stderr_files();"}, {"sha": "bb853d237047fbc33f6bd85b50c04ad8f2e5edf2", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/f78cc075099f608787d50e151b4b6f529a0629c1/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78cc075099f608787d50e151b4b6f529a0629c1/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=f78cc075099f608787d50e151b4b6f529a0629c1", "patch": "@@ -27,46 +27,6 @@ unsafe fn _generic<'a, T, U: 'a>(t: &'a T) {\n     let _: *const U = core::intrinsics::transmute(t);\n }\n \n-#[warn(clippy::transmute_ptr_to_ref)]\n-unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n-    let _: &T = std::mem::transmute(p);\n-    let _: &T = &*p;\n-\n-    let _: &mut T = std::mem::transmute(m);\n-    let _: &mut T = &mut *m;\n-\n-    let _: &T = std::mem::transmute(m);\n-    let _: &T = &*m;\n-\n-    let _: &mut T = std::mem::transmute(p as *mut T);\n-    let _ = &mut *(p as *mut T);\n-\n-    let _: &T = std::mem::transmute(o);\n-    let _: &T = &*(o as *const T);\n-\n-    let _: &mut T = std::mem::transmute(om);\n-    let _: &mut T = &mut *(om as *mut T);\n-\n-    let _: &T = std::mem::transmute(om);\n-    let _: &T = &*(om as *const T);\n-}\n-\n-#[warn(clippy::transmute_ptr_to_ref)]\n-fn issue1231() {\n-    struct Foo<'a, T> {\n-        bar: &'a T,\n-    }\n-\n-    let raw = 42 as *const i32;\n-    let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n-\n-    let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n-\n-    type Bar<'a> = &'a u8;\n-    let raw = 42 as *const i32;\n-    unsafe { std::mem::transmute::<_, Bar>(raw) };\n-}\n-\n #[warn(clippy::useless_transmute)]\n fn useless() {\n     unsafe {\n@@ -131,58 +91,4 @@ fn bytes_to_str(b: &[u8], mb: &mut [u8]) {\n     let _: &mut str = unsafe { std::mem::transmute(mb) };\n }\n \n-// Make sure we can modify lifetimes, which is one of the recommended uses\n-// of transmute\n-\n-// Make sure we can do static lifetime transmutes\n-#[warn(clippy::transmute_ptr_to_ptr)]\n-unsafe fn transmute_lifetime_to_static<'a, T>(t: &'a T) -> &'static T {\n-    std::mem::transmute::<&'a T, &'static T>(t)\n-}\n-\n-// Make sure we can do non-static lifetime transmutes\n-#[warn(clippy::transmute_ptr_to_ptr)]\n-unsafe fn transmute_lifetime<'a, 'b, T>(t: &'a T, u: &'b T) -> &'b T {\n-    std::mem::transmute::<&'a T, &'b T>(t)\n-}\n-\n-struct LifetimeParam<'a> {\n-    s: &'a str,\n-}\n-\n-struct GenericParam<T> {\n-    t: T,\n-}\n-\n-#[warn(clippy::transmute_ptr_to_ptr)]\n-fn transmute_ptr_to_ptr() {\n-    let ptr = &1u32 as *const u32;\n-    let mut_ptr = &mut 1u32 as *mut u32;\n-    unsafe {\n-        // pointer-to-pointer transmutes; bad\n-        let _: *const f32 = std::mem::transmute(ptr);\n-        let _: *mut f32 = std::mem::transmute(mut_ptr);\n-        // ref-ref transmutes; bad\n-        let _: &f32 = std::mem::transmute(&1u32);\n-        let _: &f64 = std::mem::transmute(&1f32);\n-        // ^ this test is here because both f32 and f64 are the same TypeVariant, but they are not\n-        // the same type\n-        let _: &mut f32 = std::mem::transmute(&mut 1u32);\n-        let _: &GenericParam<f32> = std::mem::transmute(&GenericParam { t: 1u32 });\n-    }\n-\n-    // these are recommendations for solving the above; if these lint we need to update\n-    // those suggestions\n-    let _ = ptr as *const f32;\n-    let _ = mut_ptr as *mut f32;\n-    let _ = unsafe { &*(&1u32 as *const u32 as *const f32) };\n-    let _ = unsafe { &mut *(&mut 1u32 as *mut u32 as *mut f32) };\n-\n-    // transmute internal lifetimes, should not lint\n-    let s = \"hello world\".to_owned();\n-    let lp = LifetimeParam { s: &s };\n-    let _: &LifetimeParam<'static> = unsafe { std::mem::transmute(&lp) };\n-    let _: &GenericParam<&LifetimeParam<'static>> = unsafe { std::mem::transmute(&GenericParam { t: &lp }) };\n-}\n-\n fn main() {}"}, {"sha": "37162ecf4756f9f651acca2ff3ddd30256a056e7", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 19, "deletions": 119, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/f78cc075099f608787d50e151b4b6f529a0629c1/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f78cc075099f608787d50e151b4b6f529a0629c1/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=f78cc075099f608787d50e151b4b6f529a0629c1", "patch": "@@ -24,223 +24,123 @@ error: transmute from a reference to a pointer\n LL |     let _: *const U = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T as *const U`\n \n-error: transmute from a pointer type (`*const T`) to a reference type (`&T`)\n-  --> $DIR/transmute.rs:32:17\n-   |\n-LL |     let _: &T = std::mem::transmute(p);\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*p`\n-   |\n-   = note: `-D clippy::transmute-ptr-to-ref` implied by `-D warnings`\n-\n-error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n-  --> $DIR/transmute.rs:35:21\n-   |\n-LL |     let _: &mut T = std::mem::transmute(m);\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *m`\n-\n-error: transmute from a pointer type (`*mut T`) to a reference type (`&T`)\n-  --> $DIR/transmute.rs:38:17\n-   |\n-LL |     let _: &T = std::mem::transmute(m);\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*m`\n-\n-error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n-  --> $DIR/transmute.rs:41:21\n-   |\n-LL |     let _: &mut T = std::mem::transmute(p as *mut T);\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(p as *mut T)`\n-\n-error: transmute from a pointer type (`*const U`) to a reference type (`&T`)\n-  --> $DIR/transmute.rs:44:17\n-   |\n-LL |     let _: &T = std::mem::transmute(o);\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(o as *const T)`\n-\n-error: transmute from a pointer type (`*mut U`) to a reference type (`&mut T`)\n-  --> $DIR/transmute.rs:47:21\n-   |\n-LL |     let _: &mut T = std::mem::transmute(om);\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(om as *mut T)`\n-\n-error: transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n-  --> $DIR/transmute.rs:50:17\n-   |\n-LL |     let _: &T = std::mem::transmute(om);\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(om as *const T)`\n-\n-error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, u8>`)\n-  --> $DIR/transmute.rs:61:32\n-   |\n-LL |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<_>)`\n-\n-error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, &u8>`)\n-  --> $DIR/transmute.rs:63:33\n-   |\n-LL |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<&_>)`\n-\n-error: transmute from a pointer type (`*const i32`) to a reference type (`&u8`)\n-  --> $DIR/transmute.rs:67:14\n-   |\n-LL |     unsafe { std::mem::transmute::<_, Bar>(raw) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const u8)`\n-\n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:73:27\n+  --> $DIR/transmute.rs:33:27\n    |\n LL |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:75:27\n+  --> $DIR/transmute.rs:35:27\n    |\n LL |         let _: Vec<i32> = core::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:77:27\n+  --> $DIR/transmute.rs:37:27\n    |\n LL |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:79:27\n+  --> $DIR/transmute.rs:39:27\n    |\n LL |         let _: Vec<i32> = std::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:81:27\n+  --> $DIR/transmute.rs:41:27\n    |\n LL |         let _: Vec<i32> = my_transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from an integer to a pointer\n-  --> $DIR/transmute.rs:83:31\n+  --> $DIR/transmute.rs:43:31\n    |\n LL |         let _: *const usize = std::mem::transmute(5_isize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `5_isize as *const usize`\n \n error: transmute from an integer to a pointer\n-  --> $DIR/transmute.rs:87:31\n+  --> $DIR/transmute.rs:47:31\n    |\n LL |         let _: *const usize = std::mem::transmute(1 + 1usize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(1 + 1usize) as *const usize`\n \n error: transmute from a type (`*const Usize`) to the type that it points to (`Usize`)\n-  --> $DIR/transmute.rs:102:24\n+  --> $DIR/transmute.rs:62:24\n    |\n LL |         let _: Usize = core::intrinsics::transmute(int_const_ptr);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::crosspointer-transmute` implied by `-D warnings`\n \n error: transmute from a type (`*mut Usize`) to the type that it points to (`Usize`)\n-  --> $DIR/transmute.rs:104:24\n+  --> $DIR/transmute.rs:64:24\n    |\n LL |         let _: Usize = core::intrinsics::transmute(int_mut_ptr);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*const Usize`)\n-  --> $DIR/transmute.rs:106:31\n+  --> $DIR/transmute.rs:66:31\n    |\n LL |         let _: *const Usize = core::intrinsics::transmute(my_int());\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*mut Usize`)\n-  --> $DIR/transmute.rs:108:29\n+  --> $DIR/transmute.rs:68:29\n    |\n LL |         let _: *mut Usize = core::intrinsics::transmute(my_int());\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a `u32` to a `char`\n-  --> $DIR/transmute.rs:114:28\n+  --> $DIR/transmute.rs:74:28\n    |\n LL |     let _: char = unsafe { std::mem::transmute(0_u32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_u32).unwrap()`\n    |\n    = note: `-D clippy::transmute-int-to-char` implied by `-D warnings`\n \n error: transmute from a `i32` to a `char`\n-  --> $DIR/transmute.rs:115:28\n+  --> $DIR/transmute.rs:75:28\n    |\n LL |     let _: char = unsafe { std::mem::transmute(0_i32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_i32 as u32).unwrap()`\n \n error: transmute from a `u8` to a `bool`\n-  --> $DIR/transmute.rs:120:28\n+  --> $DIR/transmute.rs:80:28\n    |\n LL |     let _: bool = unsafe { std::mem::transmute(0_u8) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `0_u8 != 0`\n    |\n    = note: `-D clippy::transmute-int-to-bool` implied by `-D warnings`\n \n error: transmute from a `u32` to a `f32`\n-  --> $DIR/transmute.rs:125:27\n+  --> $DIR/transmute.rs:85:27\n    |\n LL |     let _: f32 = unsafe { std::mem::transmute(0_u32) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_u32)`\n    |\n    = note: `-D clippy::transmute-int-to-float` implied by `-D warnings`\n \n error: transmute from a `i32` to a `f32`\n-  --> $DIR/transmute.rs:126:27\n+  --> $DIR/transmute.rs:86:27\n    |\n LL |     let _: f32 = unsafe { std::mem::transmute(0_i32) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n \n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:130:28\n+  --> $DIR/transmute.rs:90:28\n    |\n LL |     let _: &str = unsafe { std::mem::transmute(b) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(b).unwrap()`\n    |\n    = note: `-D clippy::transmute-bytes-to-str` implied by `-D warnings`\n \n error: transmute from a `&mut [u8]` to a `&mut str`\n-  --> $DIR/transmute.rs:131:32\n+  --> $DIR/transmute.rs:91:32\n    |\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n-error: transmute from a pointer to a pointer\n-  --> $DIR/transmute.rs:163:29\n-   |\n-LL |         let _: *const f32 = std::mem::transmute(ptr);\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr as *const f32`\n-   |\n-   = note: `-D clippy::transmute-ptr-to-ptr` implied by `-D warnings`\n-\n-error: transmute from a pointer to a pointer\n-  --> $DIR/transmute.rs:164:27\n-   |\n-LL |         let _: *mut f32 = std::mem::transmute(mut_ptr);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `mut_ptr as *mut f32`\n-\n-error: transmute from a reference to a reference\n-  --> $DIR/transmute.rs:166:23\n-   |\n-LL |         let _: &f32 = std::mem::transmute(&1u32);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1u32 as *const u32 as *const f32)`\n-\n-error: transmute from a reference to a reference\n-  --> $DIR/transmute.rs:167:23\n-   |\n-LL |         let _: &f64 = std::mem::transmute(&1f32);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1f32 as *const f32 as *const f64)`\n-\n-error: transmute from a reference to a reference\n-  --> $DIR/transmute.rs:170:27\n-   |\n-LL |         let _: &mut f32 = std::mem::transmute(&mut 1u32);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(&mut 1u32 as *mut u32 as *mut f32)`\n-\n-error: transmute from a reference to a reference\n-  --> $DIR/transmute.rs:171:37\n-   |\n-LL |         let _: &GenericParam<f32> = std::mem::transmute(&GenericParam { t: 1u32 });\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&GenericParam { t: 1u32 } as *const GenericParam<u32> as *const GenericParam<f32>)`\n-\n-error: aborting due to 38 previous errors\n+error: aborting due to 22 previous errors\n "}, {"sha": "0d8a322f2b2b0b7fa31f410c4af644409b1e0310", "filename": "tests/ui/transmute_ptr_to_ptr.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f78cc075099f608787d50e151b4b6f529a0629c1/tests%2Fui%2Ftransmute_ptr_to_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78cc075099f608787d50e151b4b6f529a0629c1/tests%2Fui%2Ftransmute_ptr_to_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ptr.rs?ref=f78cc075099f608787d50e151b4b6f529a0629c1", "patch": "@@ -0,0 +1,54 @@\n+#![warn(clippy::transmute_ptr_to_ptr)]\n+\n+// Make sure we can modify lifetimes, which is one of the recommended uses\n+// of transmute\n+\n+// Make sure we can do static lifetime transmutes\n+unsafe fn transmute_lifetime_to_static<'a, T>(t: &'a T) -> &'static T {\n+    std::mem::transmute::<&'a T, &'static T>(t)\n+}\n+\n+// Make sure we can do non-static lifetime transmutes\n+unsafe fn transmute_lifetime<'a, 'b, T>(t: &'a T, u: &'b T) -> &'b T {\n+    std::mem::transmute::<&'a T, &'b T>(t)\n+}\n+\n+struct LifetimeParam<'a> {\n+    s: &'a str,\n+}\n+\n+struct GenericParam<T> {\n+    t: T,\n+}\n+\n+fn transmute_ptr_to_ptr() {\n+    let ptr = &1u32 as *const u32;\n+    let mut_ptr = &mut 1u32 as *mut u32;\n+    unsafe {\n+        // pointer-to-pointer transmutes; bad\n+        let _: *const f32 = std::mem::transmute(ptr);\n+        let _: *mut f32 = std::mem::transmute(mut_ptr);\n+        // ref-ref transmutes; bad\n+        let _: &f32 = std::mem::transmute(&1u32);\n+        let _: &f64 = std::mem::transmute(&1f32);\n+        // ^ this test is here because both f32 and f64 are the same TypeVariant, but they are not\n+        // the same type\n+        let _: &mut f32 = std::mem::transmute(&mut 1u32);\n+        let _: &GenericParam<f32> = std::mem::transmute(&GenericParam { t: 1u32 });\n+    }\n+\n+    // these are recommendations for solving the above; if these lint we need to update\n+    // those suggestions\n+    let _ = ptr as *const f32;\n+    let _ = mut_ptr as *mut f32;\n+    let _ = unsafe { &*(&1u32 as *const u32 as *const f32) };\n+    let _ = unsafe { &mut *(&mut 1u32 as *mut u32 as *mut f32) };\n+\n+    // transmute internal lifetimes, should not lint\n+    let s = \"hello world\".to_owned();\n+    let lp = LifetimeParam { s: &s };\n+    let _: &LifetimeParam<'static> = unsafe { std::mem::transmute(&lp) };\n+    let _: &GenericParam<&LifetimeParam<'static>> = unsafe { std::mem::transmute(&GenericParam { t: &lp }) };\n+}\n+\n+fn main() {}"}, {"sha": "4d1b8fcc199e80b0860876026fa2febf28105a26", "filename": "tests/ui/transmute_ptr_to_ptr.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f78cc075099f608787d50e151b4b6f529a0629c1/tests%2Fui%2Ftransmute_ptr_to_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f78cc075099f608787d50e151b4b6f529a0629c1/tests%2Fui%2Ftransmute_ptr_to_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ptr.stderr?ref=f78cc075099f608787d50e151b4b6f529a0629c1", "patch": "@@ -0,0 +1,40 @@\n+error: transmute from a pointer to a pointer\n+  --> $DIR/transmute_ptr_to_ptr.rs:29:29\n+   |\n+LL |         let _: *const f32 = std::mem::transmute(ptr);\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr as *const f32`\n+   |\n+   = note: `-D clippy::transmute-ptr-to-ptr` implied by `-D warnings`\n+\n+error: transmute from a pointer to a pointer\n+  --> $DIR/transmute_ptr_to_ptr.rs:30:27\n+   |\n+LL |         let _: *mut f32 = std::mem::transmute(mut_ptr);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `mut_ptr as *mut f32`\n+\n+error: transmute from a reference to a reference\n+  --> $DIR/transmute_ptr_to_ptr.rs:32:23\n+   |\n+LL |         let _: &f32 = std::mem::transmute(&1u32);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1u32 as *const u32 as *const f32)`\n+\n+error: transmute from a reference to a reference\n+  --> $DIR/transmute_ptr_to_ptr.rs:33:23\n+   |\n+LL |         let _: &f64 = std::mem::transmute(&1f32);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1f32 as *const f32 as *const f64)`\n+\n+error: transmute from a reference to a reference\n+  --> $DIR/transmute_ptr_to_ptr.rs:36:27\n+   |\n+LL |         let _: &mut f32 = std::mem::transmute(&mut 1u32);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(&mut 1u32 as *mut u32 as *mut f32)`\n+\n+error: transmute from a reference to a reference\n+  --> $DIR/transmute_ptr_to_ptr.rs:37:37\n+   |\n+LL |         let _: &GenericParam<f32> = std::mem::transmute(&GenericParam { t: 1u32 });\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&GenericParam { t: 1u32 } as *const GenericParam<u32> as *const GenericParam<f32>)`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "ba35c6adc4deebb66edd529fb8c432ad0cb5dfbb", "filename": "tests/ui/transmute_ptr_to_ref.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f78cc075099f608787d50e151b4b6f529a0629c1/tests%2Fui%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78cc075099f608787d50e151b4b6f529a0629c1/tests%2Fui%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ref.rs?ref=f78cc075099f608787d50e151b4b6f529a0629c1", "patch": "@@ -0,0 +1,41 @@\n+#![warn(clippy::transmute_ptr_to_ref)]\n+\n+unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n+    let _: &T = std::mem::transmute(p);\n+    let _: &T = &*p;\n+\n+    let _: &mut T = std::mem::transmute(m);\n+    let _: &mut T = &mut *m;\n+\n+    let _: &T = std::mem::transmute(m);\n+    let _: &T = &*m;\n+\n+    let _: &mut T = std::mem::transmute(p as *mut T);\n+    let _ = &mut *(p as *mut T);\n+\n+    let _: &T = std::mem::transmute(o);\n+    let _: &T = &*(o as *const T);\n+\n+    let _: &mut T = std::mem::transmute(om);\n+    let _: &mut T = &mut *(om as *mut T);\n+\n+    let _: &T = std::mem::transmute(om);\n+    let _: &T = &*(om as *const T);\n+}\n+\n+fn issue1231() {\n+    struct Foo<'a, T> {\n+        bar: &'a T,\n+    }\n+\n+    let raw = 42 as *const i32;\n+    let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n+\n+    let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n+\n+    type Bar<'a> = &'a u8;\n+    let raw = 42 as *const i32;\n+    unsafe { std::mem::transmute::<_, Bar>(raw) };\n+}\n+\n+fn main() {}"}, {"sha": "2d52e421816ee17682f6c650a3682ad2b85c7c19", "filename": "tests/ui/transmute_ptr_to_ref.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f78cc075099f608787d50e151b4b6f529a0629c1/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f78cc075099f608787d50e151b4b6f529a0629c1/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ref.stderr?ref=f78cc075099f608787d50e151b4b6f529a0629c1", "patch": "@@ -0,0 +1,64 @@\n+error: transmute from a pointer type (`*const T`) to a reference type (`&T`)\n+  --> $DIR/transmute_ptr_to_ref.rs:4:17\n+   |\n+LL |     let _: &T = std::mem::transmute(p);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*p`\n+   |\n+   = note: `-D clippy::transmute-ptr-to-ref` implied by `-D warnings`\n+\n+error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n+  --> $DIR/transmute_ptr_to_ref.rs:7:21\n+   |\n+LL |     let _: &mut T = std::mem::transmute(m);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *m`\n+\n+error: transmute from a pointer type (`*mut T`) to a reference type (`&T`)\n+  --> $DIR/transmute_ptr_to_ref.rs:10:17\n+   |\n+LL |     let _: &T = std::mem::transmute(m);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*m`\n+\n+error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n+  --> $DIR/transmute_ptr_to_ref.rs:13:21\n+   |\n+LL |     let _: &mut T = std::mem::transmute(p as *mut T);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(p as *mut T)`\n+\n+error: transmute from a pointer type (`*const U`) to a reference type (`&T`)\n+  --> $DIR/transmute_ptr_to_ref.rs:16:17\n+   |\n+LL |     let _: &T = std::mem::transmute(o);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(o as *const T)`\n+\n+error: transmute from a pointer type (`*mut U`) to a reference type (`&mut T`)\n+  --> $DIR/transmute_ptr_to_ref.rs:19:21\n+   |\n+LL |     let _: &mut T = std::mem::transmute(om);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(om as *mut T)`\n+\n+error: transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n+  --> $DIR/transmute_ptr_to_ref.rs:22:17\n+   |\n+LL |     let _: &T = std::mem::transmute(om);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(om as *const T)`\n+\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, u8>`)\n+  --> $DIR/transmute_ptr_to_ref.rs:32:32\n+   |\n+LL |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<_>)`\n+\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, &u8>`)\n+  --> $DIR/transmute_ptr_to_ref.rs:34:33\n+   |\n+LL |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<&_>)`\n+\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&u8`)\n+  --> $DIR/transmute_ptr_to_ref.rs:38:14\n+   |\n+LL |     unsafe { std::mem::transmute::<_, Bar>(raw) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const u8)`\n+\n+error: aborting due to 10 previous errors\n+"}]}