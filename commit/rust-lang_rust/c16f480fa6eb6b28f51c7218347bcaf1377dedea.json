{"sha": "c16f480fa6eb6b28f51c7218347bcaf1377dedea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNmY0ODBmYTZlYjZiMjhmNTFjNzIxODM0N2JjYWYxMzc3ZGVkZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-04T10:02:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-04T10:02:48Z"}, "message": "Auto merge of #46485 - khuey:cursor-read_exact, r=Manishearth\n\nAdd a specialization of read_exact for Cursor.\n\nThe read_exact implementation for &[u8] is optimized and usually allows LLVM to reduce a read_exact call for small numbers of bytes to a bounds check and a register load instead of a generic memcpy.  On a workload I have that decompresses, deserializes (via bincode), and processes some data, this leads to a 40% speedup by essentially eliminating the deserialization overhead entirely.", "tree": {"sha": "3a209104c80c17b525a626b0c80d72a3ecd3a56d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a209104c80c17b525a626b0c80d72a3ecd3a56d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c16f480fa6eb6b28f51c7218347bcaf1377dedea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c16f480fa6eb6b28f51c7218347bcaf1377dedea", "html_url": "https://github.com/rust-lang/rust/commit/c16f480fa6eb6b28f51c7218347bcaf1377dedea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c16f480fa6eb6b28f51c7218347bcaf1377dedea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdfbcf85d55da97ed1a00823510b876018047aaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdfbcf85d55da97ed1a00823510b876018047aaf", "html_url": "https://github.com/rust-lang/rust/commit/fdfbcf85d55da97ed1a00823510b876018047aaf"}, {"sha": "02c1862fb55c6ae4198038b1b317bcdd06e395d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/02c1862fb55c6ae4198038b1b317bcdd06e395d1", "html_url": "https://github.com/rust-lang/rust/commit/02c1862fb55c6ae4198038b1b317bcdd06e395d1"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "b5ea5531b65a72db087b4a306d4441ef2765119b", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c16f480fa6eb6b28f51c7218347bcaf1377dedea/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16f480fa6eb6b28f51c7218347bcaf1377dedea/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=c16f480fa6eb6b28f51c7218347bcaf1377dedea", "patch": "@@ -230,6 +230,13 @@ impl<T> Read for Cursor<T> where T: AsRef<[u8]> {\n         Ok(n)\n     }\n \n+    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n+        let n = buf.len();\n+        Read::read_exact(&mut self.fill_buf()?, buf)?;\n+        self.pos += n as u64;\n+        Ok(())\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -475,6 +482,24 @@ mod tests {\n         assert_eq!(reader.read(&mut buf).unwrap(), 0);\n     }\n \n+    #[test]\n+    fn test_read_exact() {\n+        let in_buf = vec![0, 1, 2, 3, 4, 5, 6, 7];\n+        let reader = &mut &in_buf[..];\n+        let mut buf = [];\n+        assert!(reader.read_exact(&mut buf).is_ok());\n+        let mut buf = [8];\n+        assert!(reader.read_exact(&mut buf).is_ok());\n+        assert_eq!(buf[0], 0);\n+        assert_eq!(reader.len(), 7);\n+        let mut buf = [0, 0, 0, 0, 0, 0, 0];\n+        assert!(reader.read_exact(&mut buf).is_ok());\n+        assert_eq!(buf, [1, 2, 3, 4, 5, 6, 7]);\n+        assert_eq!(reader.len(), 0);\n+        let mut buf = [0];\n+        assert!(reader.read_exact(&mut buf).is_err());\n+    }\n+\n     #[test]\n     fn test_buf_reader() {\n         let in_buf = vec![0, 1, 2, 3, 4, 5, 6, 7];"}]}