{"sha": "355a4bdb883ee9edc1c32b553fcf91c302b3df19", "node_id": "C_kwDOAAsO6NoAKDM1NWE0YmRiODgzZWU5ZWRjMWMzMmI1NTNmY2Y5MWMzMDJiM2RmMTk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-28T16:22:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-28T16:22:20Z"}, "message": "Merge #11134\n\n11134: internal: tighten up parser API r=matklad a=matklad\n\nIt's tempting to expose things like `Expr::parse`, \nbut they'll necessary have somewhat ad-hoc semantics. \n\nInstead, we narrow down the parser's interface strictly \nto what's needed for MBE. For everything else (eg, parsing\nimports), the proper way is enclose the input string into \nsome context, parse the whole as a file, and then verify \nthat the input was parsed as intended.\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e0fc3236e0472c44f5a9f02bcc9f8418de374708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0fc3236e0472c44f5a9f02bcc9f8418de374708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/355a4bdb883ee9edc1c32b553fcf91c302b3df19", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhyzm8CRBK7hj4Ov3rIwAAm3IIAIEVWnvGwQcnINgSFKJpAsnJ\nWGX8oQ71rWWo76Yf9FFb3dO5P6BP6UdVq+9omcSVgwB4rHvD964vXtyx/qRhb/6L\n5dGHVHerQlLakZafH8xn3uj/owrkQNxnS3wKrFzE+ntxXPxul+8Qi9SyLQkvCSFn\n0EQNmToScvKRw8qcbDji8C2M6Z7KLEuVD4bn3lC/5WSoS+hcrV0lciXu5goPWquF\n4Hk8Gxu2mf6uGm7BIfBcrvuz1Ry/IEGkJgCCzRAe5FsHUlsbBt00w9TBHNHSK8Mf\no4fLXIfxK2xY8P07lORkiAzckp2dwO93cGBXvsab4UyOo6iF8vKMmHsv0ulIHB4=\n=xzlX\n-----END PGP SIGNATURE-----\n", "payload": "tree e0fc3236e0472c44f5a9f02bcc9f8418de374708\nparent 4d3ad04a9c84ac70c15465c1124c4d4dbef3b772\nparent ea96c376c85e02ec86df5ff6522754395ad819e9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1640708540 +0000\ncommitter GitHub <noreply@github.com> 1640708540 +0000\n\nMerge #11134\n\n11134: internal: tighten up parser API r=matklad a=matklad\n\nIt's tempting to expose things like `Expr::parse`, \nbut they'll necessary have somewhat ad-hoc semantics. \n\nInstead, we narrow down the parser's interface strictly \nto what's needed for MBE. For everything else (eg, parsing\nimports), the proper way is enclose the input string into \nsome context, parse the whole as a file, and then verify \nthat the input was parsed as intended.\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/355a4bdb883ee9edc1c32b553fcf91c302b3df19", "html_url": "https://github.com/rust-lang/rust/commit/355a4bdb883ee9edc1c32b553fcf91c302b3df19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/355a4bdb883ee9edc1c32b553fcf91c302b3df19/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "html_url": "https://github.com/rust-lang/rust/commit/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772"}, {"sha": "ea96c376c85e02ec86df5ff6522754395ad819e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea96c376c85e02ec86df5ff6522754395ad819e9", "html_url": "https://github.com/rust-lang/rust/commit/ea96c376c85e02ec86df5ff6522754395ad819e9"}], "stats": {"total": 982, "additions": 331, "deletions": 651}, "files": [{"sha": "46e9c54dad659df68463ff92dd7379342a646ce9", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -11,7 +11,7 @@ use hir_def::{\n };\n use hir_expand::{hygiene::Hygiene, MacroDefId};\n use hir_ty::db::HirDatabase;\n-use syntax::ast;\n+use syntax::{ast, AstNode};\n \n use crate::{\n     Adt, AssocItem, Const, ConstParam, Enum, Field, Function, GenericParam, Impl, LifetimeParam,\n@@ -147,8 +147,18 @@ fn resolve_doc_path(\n         // FIXME\n         AttrDefId::MacroDefId(_) => return None,\n     };\n-    let path = ast::Path::parse(link).ok()?;\n-    let modpath = ModPath::from_src(db.upcast(), path, &Hygiene::new_unhygienic())?;\n+\n+    let modpath = {\n+        let ast_path = ast::SourceFile::parse(&format!(\"type T = {};\", link))\n+            .syntax_node()\n+            .descendants()\n+            .find_map(ast::Path::cast)?;\n+        if ast_path.to_string() != link {\n+            return None;\n+        }\n+        ModPath::from_src(db.upcast(), ast_path, &Hygiene::new_unhygienic())?\n+    };\n+\n     let resolved = resolver.resolve_module_path_in_items(db.upcast(), &modpath);\n     let resolved = if resolved == PerNs::none() {\n         resolver.resolve_module_path_in_trait_assoc_items(db.upcast(), &modpath)?"}, {"sha": "383ad7f0c83282924817eaef866ad8e0adfea5fd", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -714,8 +714,7 @@ impl Attr {\n         hygiene: &Hygiene,\n         id: AttrId,\n     ) -> Option<Attr> {\n-        let (parse, _) =\n-            mbe::token_tree_to_syntax_node(tt, mbe::ParserEntryPoint::MetaItem).ok()?;\n+        let (parse, _) = mbe::token_tree_to_syntax_node(tt, mbe::TopEntryPoint::MetaItem).ok()?;\n         let ast = ast::Meta::cast(parse.syntax_node())?;\n \n         Self::from_src(db, ast, hygiene, id)"}, {"sha": "c1542f48f0e1967554fdbcee7c3f6358a2e596c4", "filename": "crates/hir_expand/src/builtin_derive_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive_macro.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -72,7 +72,7 @@ struct BasicAdtInfo {\n }\n \n fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, mbe::ExpandError> {\n-    let (parsed, token_map) = mbe::token_tree_to_syntax_node(tt, mbe::ParserEntryPoint::Items)?; // FragmentKind::Items doesn't parse attrs?\n+    let (parsed, token_map) = mbe::token_tree_to_syntax_node(tt, mbe::TopEntryPoint::MacroItems)?; // FragmentKind::Items doesn't parse attrs?\n     let macro_items = ast::MacroItems::cast(parsed.syntax_node()).ok_or_else(|| {\n         debug!(\"derive node didn't parse\");\n         mbe::ExpandError::UnexpectedToken"}, {"sha": "3369e3e5fedff0cd2bf9d15fc2b625b9652b71b8", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -497,11 +497,11 @@ fn token_tree_to_syntax_node(\n     expand_to: ExpandTo,\n ) -> Result<(Parse<SyntaxNode>, mbe::TokenMap), ExpandError> {\n     let entry_point = match expand_to {\n-        ExpandTo::Statements => mbe::ParserEntryPoint::Statements,\n-        ExpandTo::Items => mbe::ParserEntryPoint::Items,\n-        ExpandTo::Pattern => mbe::ParserEntryPoint::Pattern,\n-        ExpandTo::Type => mbe::ParserEntryPoint::Type,\n-        ExpandTo::Expr => mbe::ParserEntryPoint::Expr,\n+        ExpandTo::Statements => mbe::TopEntryPoint::MacroStmts,\n+        ExpandTo::Items => mbe::TopEntryPoint::MacroItems,\n+        ExpandTo::Pattern => mbe::TopEntryPoint::Pattern,\n+        ExpandTo::Type => mbe::TopEntryPoint::Type,\n+        ExpandTo::Expr => mbe::TopEntryPoint::Expr,\n     };\n     mbe::token_tree_to_syntax_node(tt, entry_point)\n }"}, {"sha": "1d29ad26307e2205e34a2f1bd6dd7543d2750dc7", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -131,7 +131,7 @@ pub fn expand_eager_macro(\n     let arg_file_id = arg_id;\n \n     let parsed_args = diagnostic_sink\n-        .result(mbe::token_tree_to_syntax_node(&parsed_args, mbe::ParserEntryPoint::Expr))?\n+        .result(mbe::token_tree_to_syntax_node(&parsed_args, mbe::TopEntryPoint::Expr))?\n         .0;\n     let result = eager_macro_recur(\n         db,"}, {"sha": "07dcfd967177e72d539d5fa8ac801d4c831f0793", "filename": "crates/ide_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -36,9 +36,8 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let input_expressions = input_expressions\n         .into_iter()\n         .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n-        .map(|mut tokens| ast::Expr::parse(&tokens.join(\"\")))\n-        .collect::<Result<Vec<ast::Expr>, _>>()\n-        .ok()?;\n+        .map(|mut tokens| syntax::hacks::parse_expr_from_str(&tokens.join(\"\")))\n+        .collect::<Option<Vec<ast::Expr>>>()?;\n \n     let parent = macro_call.syntax().parent()?;\n     let (range, text) = match &*input_expressions {"}, {"sha": "f67d7d56d81989d9dec1480fcf45e351c3d0a62e", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -309,7 +309,7 @@ fn parse_comma_sep_expr(input: ast::TokenTree) -> Option<Vec<ast::Expr>> {\n         input_expressions\n             .into_iter()\n             .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n-            .filter_map(|mut tokens| ast::Expr::parse(&tokens.join(\"\")).ok())\n+            .filter_map(|mut tokens| syntax::hacks::parse_expr_from_str(&tokens.join(\"\")))\n             .collect::<Vec<ast::Expr>>(),\n     )\n }"}, {"sha": "98cd3f8f3370b586413f80d93ad2c591d63c29ad", "filename": "crates/ide_completion/src/snippet.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fsnippet.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -212,15 +212,14 @@ fn validate_snippet(\n ) -> Option<(Box<[GreenNode]>, String, Option<Box<str>>)> {\n     let mut imports = Vec::with_capacity(requires.len());\n     for path in requires.iter() {\n-        let path = ast::Path::parse(path).ok()?;\n-        let valid_use_path = path.segments().all(|seg| {\n-            matches!(seg.kind(), Some(ast::PathSegmentKind::Name(_)))\n-                || seg.generic_arg_list().is_none()\n-        });\n-        if !valid_use_path {\n+        let use_path = ast::SourceFile::parse(&format!(\"use {};\", path))\n+            .syntax_node()\n+            .descendants()\n+            .find_map(ast::Path::cast)?;\n+        if use_path.syntax().text() != path.as_str() {\n             return None;\n         }\n-        let green = path.syntax().green().into_owned();\n+        let green = use_path.syntax().green().into_owned();\n         imports.push(green);\n     }\n     let snippet = snippet.iter().join(\"\\n\");"}, {"sha": "e589940dae29f58ef7bb0d2d48eb80a4de89cf21", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -67,7 +67,11 @@ pub fn get_path_at_cursor_in_tt(cursor: &ast::Ident) -> Option<ast::Path> {\n         .filter_map(SyntaxElement::into_token)\n         .take_while(|tok| tok != cursor);\n \n-    ast::Path::parse(&path_tokens.chain(iter::once(cursor.clone())).join(\"\")).ok()\n+    syntax::hacks::parse_expr_from_str(&path_tokens.chain(iter::once(cursor.clone())).join(\"\"))\n+        .and_then(|expr| match expr {\n+            ast::Expr::PathExpr(it) => it.path(),\n+            _ => None,\n+        })\n }\n \n /// Parses and resolves the path at the cursor position in the given attribute, if it is a derive.\n@@ -323,7 +327,12 @@ pub fn parse_tt_as_comma_sep_paths(input: ast::TokenTree) -> Option<Vec<ast::Pat\n     let paths = input_expressions\n         .into_iter()\n         .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n-        .filter_map(|mut tokens| ast::Path::parse(&tokens.join(\"\")).ok())\n+        .filter_map(|mut tokens| {\n+            syntax::hacks::parse_expr_from_str(&tokens.join(\"\")).and_then(|expr| match expr {\n+                ast::Expr::PathExpr(it) => it.path(),\n+                _ => None,\n+            })\n+        })\n         .collect();\n     Some(paths)\n }"}, {"sha": "503754afe7c26accea9f705aebc44c76f4666a4b", "filename": "crates/ide_ssr/src/fragments.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_ssr%2Fsrc%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_ssr%2Fsrc%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Ffragments.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -0,0 +1,58 @@\n+//! When specifying SSR rule, you generally want to map one *kind* of thing to\n+//! the same kind of thing: path to path, expression to expression, type to\n+//! type.\n+//!\n+//! The problem is, while this *kind* is generally obvious to the human, the ide\n+//! needs to determine it somehow. We do this in a stupid way -- by pasting SSR\n+//! rule into different contexts and checking what works.\n+\n+use syntax::{ast, AstNode, SyntaxNode};\n+\n+pub(crate) fn ty(s: &str) -> Result<SyntaxNode, ()> {\n+    fragment::<ast::Type>(\"type T = {};\", s)\n+}\n+\n+pub(crate) fn item(s: &str) -> Result<SyntaxNode, ()> {\n+    fragment::<ast::Item>(\"{}\", s)\n+}\n+\n+pub(crate) fn pat(s: &str) -> Result<SyntaxNode, ()> {\n+    fragment::<ast::Pat>(\"const _: () = {let {} = ();};\", s)\n+}\n+\n+pub(crate) fn expr(s: &str) -> Result<SyntaxNode, ()> {\n+    fragment::<ast::Expr>(\"const _: () = {};\", s)\n+}\n+\n+pub(crate) fn stmt(s: &str) -> Result<SyntaxNode, ()> {\n+    let template = \"const _: () = { {}; };\";\n+    let input = template.replace(\"{}\", s);\n+    let parse = syntax::SourceFile::parse(&input);\n+    if !parse.errors().is_empty() {\n+        return Err(());\n+    }\n+    let mut node =\n+        parse.tree().syntax().descendants().skip(2).find_map(ast::Stmt::cast).ok_or(())?;\n+    if !s.ends_with(';') && node.to_string().ends_with(';') {\n+        node = node.clone_for_update();\n+        node.syntax().last_token().map(|it| it.detach());\n+    }\n+    if node.to_string() != s {\n+        return Err(());\n+    }\n+    Ok(node.syntax().clone_subtree())\n+}\n+\n+fn fragment<T: AstNode>(template: &str, s: &str) -> Result<SyntaxNode, ()> {\n+    let s = s.trim();\n+    let input = template.replace(\"{}\", s);\n+    let parse = syntax::SourceFile::parse(&input);\n+    if !parse.errors().is_empty() {\n+        return Err(());\n+    }\n+    let node = parse.tree().syntax().descendants().find_map(T::cast).ok_or(())?;\n+    if node.syntax().text() != s {\n+        return Err(());\n+    }\n+    Ok(node.syntax().clone_subtree())\n+}"}, {"sha": "d56bc12b680cc6e0195413fca4face58c8637fbc", "filename": "crates/ide_ssr/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Flib.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -71,6 +71,7 @@ mod from_comment;\n mod matching;\n mod nester;\n mod parsing;\n+mod fragments;\n mod replacing;\n mod resolving;\n mod search;"}, {"sha": "aaaee576b52b447571a99e3d1b397a92a2c9ec8f", "filename": "crates/ide_ssr/src/parsing.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_ssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_ssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fparsing.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -4,12 +4,12 @@\n //! placeholders, which start with `$`. For replacement templates, this is the final form. For\n //! search patterns, we go further and parse the pattern as each kind of thing that we can match.\n //! e.g. expressions, type references etc.\n-\n-use crate::errors::bail;\n-use crate::{SsrError, SsrPattern, SsrRule};\n use rustc_hash::{FxHashMap, FxHashSet};\n use std::{fmt::Display, str::FromStr};\n-use syntax::{ast, AstNode, SmolStr, SyntaxKind, SyntaxNode, T};\n+use syntax::{SmolStr, SyntaxKind, SyntaxNode, T};\n+\n+use crate::errors::bail;\n+use crate::{fragments, SsrError, SsrPattern, SsrRule};\n \n #[derive(Debug)]\n pub(crate) struct ParsedRule {\n@@ -73,17 +73,16 @@ impl ParsedRule {\n             rules: Vec::new(),\n         };\n \n-        let raw_template_stmt = raw_template.map(ast::Stmt::parse);\n-        if let raw_template_expr @ Some(Ok(_)) = raw_template.map(ast::Expr::parse) {\n-            builder.try_add(ast::Expr::parse(&raw_pattern), raw_template_expr);\n+        let raw_template_stmt = raw_template.map(fragments::stmt);\n+        if let raw_template_expr @ Some(Ok(_)) = raw_template.map(fragments::expr) {\n+            builder.try_add(fragments::expr(&raw_pattern), raw_template_expr);\n         } else {\n-            builder.try_add(ast::Expr::parse(&raw_pattern), raw_template_stmt.clone());\n+            builder.try_add(fragments::expr(&raw_pattern), raw_template_stmt.clone());\n         }\n-        builder.try_add(ast::Type::parse(&raw_pattern), raw_template.map(ast::Type::parse));\n-        builder.try_add(ast::Item::parse(&raw_pattern), raw_template.map(ast::Item::parse));\n-        builder.try_add(ast::Path::parse(&raw_pattern), raw_template.map(ast::Path::parse));\n-        builder.try_add(ast::Pat::parse(&raw_pattern), raw_template.map(ast::Pat::parse));\n-        builder.try_add(ast::Stmt::parse(&raw_pattern), raw_template_stmt);\n+        builder.try_add(fragments::ty(&raw_pattern), raw_template.map(fragments::ty));\n+        builder.try_add(fragments::item(&raw_pattern), raw_template.map(fragments::item));\n+        builder.try_add(fragments::pat(&raw_pattern), raw_template.map(fragments::pat));\n+        builder.try_add(fragments::stmt(&raw_pattern), raw_template_stmt);\n         builder.build()\n     }\n }\n@@ -94,20 +93,20 @@ struct RuleBuilder {\n }\n \n impl RuleBuilder {\n-    fn try_add<T: AstNode, T2: AstNode>(\n+    fn try_add(\n         &mut self,\n-        pattern: Result<T, ()>,\n-        template: Option<Result<T2, ()>>,\n+        pattern: Result<SyntaxNode, ()>,\n+        template: Option<Result<SyntaxNode, ()>>,\n     ) {\n         match (pattern, template) {\n             (Ok(pattern), Some(Ok(template))) => self.rules.push(ParsedRule {\n                 placeholders_by_stand_in: self.placeholders_by_stand_in.clone(),\n-                pattern: pattern.syntax().clone(),\n-                template: Some(template.syntax().clone()),\n+                pattern,\n+                template: Some(template),\n             }),\n             (Ok(pattern), None) => self.rules.push(ParsedRule {\n                 placeholders_by_stand_in: self.placeholders_by_stand_in.clone(),\n-                pattern: pattern.syntax().clone(),\n+                pattern,\n                 template: None,\n             }),\n             _ => {}"}, {"sha": "6d21bad1eb3804951ebd8b9dc4267e1d2a2ded2b", "filename": "crates/ide_ssr/src/replacing.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_ssr%2Fsrc%2Freplacing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_ssr%2Fsrc%2Freplacing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Freplacing.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -1,5 +1,6 @@\n //! Code for applying replacement templates for matches that have previously been found.\n \n+use crate::fragments;\n use crate::{resolving::ResolvedRule, Match, SsrMatches};\n use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -225,12 +226,13 @@ fn token_is_method_call_receiver(token: &SyntaxToken) -> bool {\n \n fn parse_as_kind(code: &str, kind: SyntaxKind) -> Option<SyntaxNode> {\n     if ast::Expr::can_cast(kind) {\n-        if let Ok(expr) = ast::Expr::parse(code) {\n-            return Some(expr.syntax().clone());\n+        if let Ok(expr) = fragments::expr(code) {\n+            return Some(expr);\n         }\n-    } else if ast::Item::can_cast(kind) {\n-        if let Ok(item) = ast::Item::parse(code) {\n-            return Some(item.syntax().clone());\n+    }\n+    if ast::Item::can_cast(kind) {\n+        if let Ok(item) = fragments::item(code) {\n+            return Some(item);\n         }\n     }\n     None"}, {"sha": "30eda9d56cb559be78dde600e992a942399c5f85", "filename": "crates/ide_ssr/src/tests.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fide_ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Ftests.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -331,6 +331,15 @@ fn ssr_struct_lit() {\n     )\n }\n \n+#[test]\n+fn ssr_struct_def() {\n+    assert_ssr_transform(\n+        \"struct Foo { $f: $t } ==>> struct Foo($t);\",\n+        r#\"struct Foo { field: i32 }\"#,\n+        expect![[r#\"struct Foo(i32);\"#]],\n+    )\n+}\n+\n #[test]\n fn ignores_whitespace() {\n     assert_matches(\"1+2\", \"fn f() -> i32 {1  +  2}\", &[\"1  +  2\"]);\n@@ -792,6 +801,19 @@ fn replace_type() {\n             \"struct Result<T, E> {} struct Option<T> {} fn f1() -> Option<Vec<Error>> {foo()}\"\n         ]],\n     );\n+    assert_ssr_transform(\n+        \"dyn Trait<$a> ==>> DynTrait<$a>\",\n+        r#\"\n+trait Trait<T> {}\n+struct DynTrait<T> {}\n+fn f1() -> dyn Trait<Vec<Error>> {foo()}\n+\"#,\n+        expect![[r#\"\n+trait Trait<T> {}\n+struct DynTrait<T> {}\n+fn f1() -> DynTrait<Vec<Error>> {foo()}\n+\"#]],\n+    );\n }\n \n #[test]"}, {"sha": "bcda2381a486452d599bd6d4f48ce646146c8ea9", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 21, "deletions": 31, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -61,18 +61,16 @@\n \n use std::rc::Rc;\n \n+use smallvec::{smallvec, SmallVec};\n+use syntax::SmolStr;\n+\n use crate::{\n-    expander::{Binding, Bindings, Fragment},\n+    expander::{Binding, Bindings, ExpandResult, Fragment},\n     parser::{Op, RepeatKind, Separator},\n     tt_iter::TtIter,\n     ExpandError, MetaTemplate,\n };\n \n-use super::ExpandResult;\n-use parser::ParserEntryPoint::*;\n-use smallvec::{smallvec, SmallVec};\n-use syntax::SmolStr;\n-\n impl Bindings {\n     fn push_optional(&mut self, name: &SmolStr) {\n         // FIXME: Do we have a better way to represent an empty token ?\n@@ -691,14 +689,21 @@ fn match_leaf(lhs: &tt::Leaf, src: &mut TtIter) -> Result<(), ExpandError> {\n \n fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragment>> {\n     let fragment = match kind {\n-        \"path\" => Path,\n-        \"expr\" => Expr,\n-        \"ty\" => Type,\n-        \"pat\" | \"pat_param\" => Pattern, // FIXME: edition2021\n-        \"stmt\" => Statement,\n-        \"block\" => Block,\n-        \"meta\" => MetaItem,\n-        \"item\" => Item,\n+        \"path\" => parser::PrefixEntryPoint::Path,\n+        \"ty\" => parser::PrefixEntryPoint::Ty,\n+        // FIXME: These two should actually behave differently depending on the edition.\n+        //\n+        // https://doc.rust-lang.org/edition-guide/rust-2021/or-patterns-macro-rules.html\n+        \"pat\" | \"pat_param\" => parser::PrefixEntryPoint::Pat,\n+        \"stmt\" => parser::PrefixEntryPoint::Stmt,\n+        \"block\" => parser::PrefixEntryPoint::Block,\n+        \"meta\" => parser::PrefixEntryPoint::MetaItem,\n+        \"item\" => parser::PrefixEntryPoint::Item,\n+        \"expr\" => {\n+            return input\n+                .expect_fragment(parser::PrefixEntryPoint::Expr)\n+                .map(|tt| tt.map(Fragment::Expr))\n+        }\n         _ => {\n             let tt_result = match kind {\n                 \"ident\" => input\n@@ -726,17 +731,13 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n                         .map_err(|()| err!())\n                 }\n                 // `vis` is optional\n-                \"vis\" => match input.eat_vis() {\n-                    Some(vis) => Ok(Some(vis)),\n-                    None => Ok(None),\n-                },\n+                \"vis\" => Ok(input.expect_fragment(parser::PrefixEntryPoint::Vis).value),\n                 _ => Err(ExpandError::UnexpectedToken),\n             };\n             return tt_result.map(|it| it.map(Fragment::Tokens)).into();\n         }\n     };\n-    let result = input.expect_fragment(fragment);\n-    result.map(|tt| if kind == \"expr\" { tt.map(Fragment::Expr) } else { tt.map(Fragment::Tokens) })\n+    input.expect_fragment(fragment).map(|it| it.map(Fragment::Tokens))\n }\n \n fn collect_vars(buf: &mut Vec<SmolStr>, pattern: &MetaTemplate) {\n@@ -898,17 +899,6 @@ impl<'a> TtIter<'a> {\n         .into())\n     }\n \n-    fn eat_vis(&mut self) -> Option<tt::TokenTree> {\n-        let mut fork = self.clone();\n-        match fork.expect_fragment(Visibility) {\n-            ExpandResult { value: tt, err: None } => {\n-                *self = fork;\n-                tt\n-            }\n-            ExpandResult { value: _, err: Some(_) } => None,\n-        }\n-    }\n-\n     fn eat_char(&mut self, c: char) -> Option<tt::TokenTree> {\n         let mut fork = self.clone();\n         match fork.expect_char(c) {"}, {"sha": "62e7509eb37c063edf557e785a953b800f0b3c21", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -24,7 +24,7 @@ use crate::{\n };\n \n // FIXME: we probably should re-think  `token_tree_to_syntax_node` interfaces\n-pub use ::parser::ParserEntryPoint;\n+pub use ::parser::TopEntryPoint;\n pub use tt::{Delimiter, DelimiterKind, Punct};\n \n #[derive(Debug, PartialEq, Eq, Clone)]"}, {"sha": "8bdc5e6e9463165dfc55d25c0834bc487a49599a", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -9,9 +9,7 @@ use syntax::{\n };\n use tt::buffer::{Cursor, TokenBuffer};\n \n-use crate::{\n-    to_parser_input::to_parser_input, tt_iter::TtIter, ExpandError, ParserEntryPoint, TokenMap,\n-};\n+use crate::{to_parser_input::to_parser_input, tt_iter::TtIter, ExpandError, TokenMap};\n \n /// Convert the syntax node to a `TokenTree` (what macro\n /// will consume).\n@@ -46,7 +44,7 @@ pub fn syntax_node_to_token_tree_censored(\n \n pub fn token_tree_to_syntax_node(\n     tt: &tt::Subtree,\n-    entry_point: ParserEntryPoint,\n+    entry_point: parser::TopEntryPoint,\n ) -> Result<(Parse<SyntaxNode>, TokenMap), ExpandError> {\n     let buffer = match tt {\n         tt::Subtree { delimiter: None, token_trees } => {\n@@ -55,7 +53,7 @@ pub fn token_tree_to_syntax_node(\n         _ => TokenBuffer::from_subtree(tt),\n     };\n     let parser_input = to_parser_input(&buffer);\n-    let parser_output = parser::parse(&parser_input, entry_point);\n+    let parser_output = entry_point.parse(&parser_input);\n     let mut tree_sink = TtTreeSink::new(buffer.begin());\n     for event in parser_output.iter() {\n         match event {\n@@ -106,7 +104,7 @@ pub fn parse_exprs_with_sep(tt: &tt::Subtree, sep: char) -> Vec<tt::Subtree> {\n     let mut res = Vec::new();\n \n     while iter.peek_n(0).is_some() {\n-        let expanded = iter.expect_fragment(ParserEntryPoint::Expr);\n+        let expanded = iter.expect_fragment(parser::PrefixEntryPoint::Expr);\n \n         res.push(match expanded.value {\n             None => break,"}, {"sha": "6c9f615c7a92dc38294c8d313d1d08fa810b7c01", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -1,7 +1,7 @@\n //! A \"Parser\" structure for token trees. We use this when parsing a declarative\n //! macro definition into a list of patterns and templates.\n \n-use crate::{to_parser_input::to_parser_input, ExpandError, ExpandResult, ParserEntryPoint};\n+use crate::{to_parser_input::to_parser_input, ExpandError, ExpandResult};\n \n use syntax::SyntaxKind;\n use tt::buffer::TokenBuffer;\n@@ -91,11 +91,11 @@ impl<'a> TtIter<'a> {\n \n     pub(crate) fn expect_fragment(\n         &mut self,\n-        entry_point: ParserEntryPoint,\n+        entry_point: parser::PrefixEntryPoint,\n     ) -> ExpandResult<Option<tt::TokenTree>> {\n         let buffer = TokenBuffer::from_tokens(self.inner.as_slice());\n         let parser_input = to_parser_input(&buffer);\n-        let tree_traversal = parser::parse(&parser_input, entry_point);\n+        let tree_traversal = entry_point.parse(&parser_input);\n \n         let mut cursor = buffer.begin();\n         let mut error = false;"}, {"sha": "42426a1df285871ffa2a134cd698a7e6cdf41023", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 53, "deletions": 49, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -44,72 +44,76 @@ use crate::{\n     TokenSet, T,\n };\n \n-pub(crate) mod entry_points {\n+pub(crate) mod entry {\n     use super::*;\n \n-    pub(crate) fn source_file(p: &mut Parser) {\n-        let m = p.start();\n-        p.eat(SHEBANG);\n-        items::mod_contents(p, false);\n-        m.complete(p, SOURCE_FILE);\n-    }\n-\n-    pub(crate) use expressions::block_expr;\n-\n-    pub(crate) use paths::type_path as path;\n+    pub(crate) mod prefix {\n+        use super::*;\n \n-    pub(crate) use patterns::pattern_single as pattern;\n-\n-    pub(crate) use types::type_;\n+        pub(crate) fn vis(p: &mut Parser) {\n+            let _ = opt_visibility(p, false);\n+        }\n \n-    pub(crate) fn expr(p: &mut Parser) {\n-        let _ = expressions::expr(p);\n-    }\n+        pub(crate) fn block(p: &mut Parser) {\n+            expressions::block_expr(p);\n+        }\n \n-    pub(crate) fn stmt(p: &mut Parser) {\n-        expressions::stmt(p, expressions::StmtWithSemi::No, true);\n-    }\n+        pub(crate) fn stmt(p: &mut Parser) {\n+            expressions::stmt(p, expressions::StmtWithSemi::No, true);\n+        }\n \n-    pub(crate) fn stmt_optional_semi(p: &mut Parser) {\n-        expressions::stmt(p, expressions::StmtWithSemi::Optional, false);\n-    }\n+        pub(crate) fn pat(p: &mut Parser) {\n+            patterns::pattern_single(p);\n+        }\n \n-    pub(crate) fn visibility(p: &mut Parser) {\n-        let _ = opt_visibility(p, false);\n+        pub(crate) fn ty(p: &mut Parser) {\n+            types::type_(p);\n+        }\n+        pub(crate) fn expr(p: &mut Parser) {\n+            let _ = expressions::expr(p);\n+        }\n+        pub(crate) fn path(p: &mut Parser) {\n+            let _ = paths::type_path(p);\n+        }\n+        pub(crate) fn item(p: &mut Parser) {\n+            items::item_or_macro(p, true);\n+        }\n+        // Parse a meta item , which excluded [], e.g : #[ MetaItem ]\n+        pub(crate) fn meta_item(p: &mut Parser) {\n+            attributes::meta(p);\n+        }\n     }\n \n-    // Parse a meta item , which excluded [], e.g : #[ MetaItem ]\n-    pub(crate) fn meta_item(p: &mut Parser) {\n-        attributes::meta(p);\n-    }\n+    pub(crate) mod top {\n+        use super::*;\n \n-    pub(crate) fn item(p: &mut Parser) {\n-        items::item_or_macro(p, true);\n-    }\n+        pub(crate) fn source_file(p: &mut Parser) {\n+            let m = p.start();\n+            p.eat(SHEBANG);\n+            items::mod_contents(p, false);\n+            m.complete(p, SOURCE_FILE);\n+        }\n \n-    pub(crate) fn macro_items(p: &mut Parser) {\n-        let m = p.start();\n-        items::mod_contents(p, false);\n-        m.complete(p, MACRO_ITEMS);\n-    }\n+        pub(crate) fn macro_stmts(p: &mut Parser) {\n+            let m = p.start();\n \n-    pub(crate) fn macro_stmts(p: &mut Parser) {\n-        let m = p.start();\n+            while !p.at(EOF) {\n+                if p.at(T![;]) {\n+                    p.bump(T![;]);\n+                    continue;\n+                }\n \n-        while !p.at(EOF) {\n-            if p.at(T![;]) {\n-                p.bump(T![;]);\n-                continue;\n+                expressions::stmt(p, expressions::StmtWithSemi::Optional, true);\n             }\n \n-            expressions::stmt(p, expressions::StmtWithSemi::Optional, true);\n+            m.complete(p, MACRO_STMTS);\n         }\n \n-        m.complete(p, MACRO_STMTS);\n-    }\n-\n-    pub(crate) fn attr(p: &mut Parser) {\n-        attributes::outer_attrs(p);\n+        pub(crate) fn macro_items(p: &mut Parser) {\n+            let m = p.start();\n+            items::mod_contents(p, false);\n+            m.complete(p, MACRO_ITEMS);\n+        }\n     }\n }\n "}, {"sha": "c5014be6c33668f90dc6577771187b1bbbaa1e64", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 79, "deletions": 47, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -41,63 +41,95 @@ pub use crate::{\n     syntax_kind::SyntaxKind,\n };\n \n-/// rust-analyzer parser allows you to choose one of the possible entry points.\n+/// Parse a prefix of the input as a given syntactic construct.\n ///\n-/// The primary consumer of this API are declarative macros, `$x:expr` matchers\n-/// are implemented by calling into the parser with non-standard entry point.\n-#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]\n-pub enum ParserEntryPoint {\n-    SourceFile,\n-    Path,\n+/// This is used by macro-by-example parser to implement things like `$i:item`\n+/// and the naming of variants follows the naming of macro fragments.\n+///\n+/// Note that this is generally non-optional -- the result is intentionally not\n+/// `Option<Output>`. The way MBE work, by the time we *try* to parse `$e:expr`\n+/// we already commit to expression. In other words, this API by design can't be\n+/// used to implement \"rollback and try another alternative\" logic.\n+#[derive(Debug)]\n+pub enum PrefixEntryPoint {\n+    Vis,\n+    Block,\n+    Stmt,\n+    Pat,\n+    Ty,\n     Expr,\n-    Statement,\n-    StatementOptionalSemi,\n-    Type,\n-    Pattern,\n+    Path,\n     Item,\n-    Block,\n-    Visibility,\n     MetaItem,\n-    Items,\n-    Statements,\n-    Attr,\n }\n \n-/// Parse given tokens into the given sink as a rust file.\n-pub fn parse_source_file(inp: &Input) -> Output {\n-    parse(inp, ParserEntryPoint::SourceFile)\n+impl PrefixEntryPoint {\n+    pub fn parse(&self, input: &Input) -> Output {\n+        let entry_point: fn(&'_ mut parser::Parser) = match self {\n+            PrefixEntryPoint::Vis => grammar::entry::prefix::vis,\n+            PrefixEntryPoint::Block => grammar::entry::prefix::block,\n+            PrefixEntryPoint::Stmt => grammar::entry::prefix::stmt,\n+            PrefixEntryPoint::Pat => grammar::entry::prefix::pat,\n+            PrefixEntryPoint::Ty => grammar::entry::prefix::ty,\n+            PrefixEntryPoint::Expr => grammar::entry::prefix::expr,\n+            PrefixEntryPoint::Path => grammar::entry::prefix::path,\n+            PrefixEntryPoint::Item => grammar::entry::prefix::item,\n+            PrefixEntryPoint::MetaItem => grammar::entry::prefix::meta_item,\n+        };\n+        let mut p = parser::Parser::new(input);\n+        entry_point(&mut p);\n+        let events = p.finish();\n+        event::process(events)\n+    }\n }\n \n-/// Parses the given [`Input`] into [`Output`] assuming that the top-level\n-/// syntactic construct is the given [`ParserEntryPoint`].\n+/// Parse the whole of the input as a given syntactic construct.\n+///\n+/// This covers two main use-cases:\n+///\n+///   * Parsing a Rust file.\n+///   * Parsing a result of macro expansion.\n ///\n-/// Both input and output here are fairly abstract. The overall flow is that the\n-/// caller has some \"real\" tokens, converts them to [`Input`], parses them to\n-/// [`Output`], and then converts that into a \"real\" tree. The \"real\" tree is\n-/// made of \"real\" tokens, so this all hinges on rather tight coordination of\n-/// indices between the four stages.\n-pub fn parse(inp: &Input, entry_point: ParserEntryPoint) -> Output {\n-    let entry_point: fn(&'_ mut parser::Parser) = match entry_point {\n-        ParserEntryPoint::SourceFile => grammar::entry_points::source_file,\n-        ParserEntryPoint::Path => grammar::entry_points::path,\n-        ParserEntryPoint::Expr => grammar::entry_points::expr,\n-        ParserEntryPoint::Type => grammar::entry_points::type_,\n-        ParserEntryPoint::Pattern => grammar::entry_points::pattern,\n-        ParserEntryPoint::Item => grammar::entry_points::item,\n-        ParserEntryPoint::Block => grammar::entry_points::block_expr,\n-        ParserEntryPoint::Visibility => grammar::entry_points::visibility,\n-        ParserEntryPoint::MetaItem => grammar::entry_points::meta_item,\n-        ParserEntryPoint::Statement => grammar::entry_points::stmt,\n-        ParserEntryPoint::StatementOptionalSemi => grammar::entry_points::stmt_optional_semi,\n-        ParserEntryPoint::Items => grammar::entry_points::macro_items,\n-        ParserEntryPoint::Statements => grammar::entry_points::macro_stmts,\n-        ParserEntryPoint::Attr => grammar::entry_points::attr,\n-    };\n+/// That is, for something like\n+///\n+/// ```\n+/// quick_check! {\n+///    fn prop() {}\n+/// }\n+/// ```\n+///\n+/// the input to the macro will be parsed with [`PrefixEntryPoint::Item`], and\n+/// the result will be [`TopEntryPoint::Items`].\n+///\n+/// This *should* (but currently doesn't) guarantee that all input is consumed.\n+#[derive(Debug)]\n+pub enum TopEntryPoint {\n+    SourceFile,\n+    MacroStmts,\n+    MacroItems,\n+    Pattern,\n+    Type,\n+    Expr,\n+    MetaItem,\n+}\n \n-    let mut p = parser::Parser::new(inp);\n-    entry_point(&mut p);\n-    let events = p.finish();\n-    event::process(events)\n+impl TopEntryPoint {\n+    pub fn parse(&self, input: &Input) -> Output {\n+        let entry_point: fn(&'_ mut parser::Parser) = match self {\n+            TopEntryPoint::SourceFile => grammar::entry::top::source_file,\n+            TopEntryPoint::MacroStmts => grammar::entry::top::macro_stmts,\n+            TopEntryPoint::MacroItems => grammar::entry::top::macro_items,\n+            // FIXME\n+            TopEntryPoint::Pattern => grammar::entry::prefix::pat,\n+            TopEntryPoint::Type => grammar::entry::prefix::ty,\n+            TopEntryPoint::Expr => grammar::entry::prefix::expr,\n+            TopEntryPoint::MetaItem => grammar::entry::prefix::meta_item,\n+        };\n+        let mut p = parser::Parser::new(input);\n+        entry_point(&mut p);\n+        let events = p.finish();\n+        event::process(events)\n+    }\n }\n \n /// A parsing function for a specific braced-block."}, {"sha": "3d28f814c9f2ece9e953f7995da5940c9db22557", "filename": "crates/parser/src/shortcuts.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fparser%2Fsrc%2Fshortcuts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fparser%2Fsrc%2Fshortcuts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fshortcuts.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -52,14 +52,10 @@ impl<'a> LexedStr<'a> {\n     pub fn intersperse_trivia(\n         &self,\n         output: &crate::Output,\n-        synthetic_root: bool,\n         sink: &mut dyn FnMut(StrStep),\n     ) -> bool {\n         let mut builder = Builder { lexed: self, pos: 0, state: State::PendingEnter, sink };\n \n-        if synthetic_root {\n-            builder.enter(SyntaxKind::SOURCE_FILE);\n-        }\n         for event in output.iter() {\n             match event {\n                 Step::Token { kind, n_input_tokens: n_raw_tokens } => {\n@@ -73,9 +69,6 @@ impl<'a> LexedStr<'a> {\n                 }\n             }\n         }\n-        if synthetic_root {\n-            builder.exit();\n-        }\n \n         match mem::replace(&mut builder.state, State::Normal) {\n             State::PendingExit => {"}, {"sha": "512f7ddb95bbc05ab63478f0006d6963027c2408", "filename": "crates/parser/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fparser%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fparser%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -80,12 +80,12 @@ fn parse_inline_err() {\n fn parse(text: &str) -> (String, bool) {\n     let lexed = LexedStr::new(text);\n     let input = lexed.to_input();\n-    let output = crate::parse_source_file(&input);\n+    let output = crate::TopEntryPoint::SourceFile.parse(&input);\n \n     let mut buf = String::new();\n     let mut errors = Vec::new();\n     let mut indent = String::new();\n-    lexed.intersperse_trivia(&output, false, &mut |step| match step {\n+    lexed.intersperse_trivia(&output, &mut |step| match step {\n         crate::StrStep::Token { kind, text } => {\n             write!(buf, \"{}\", indent).unwrap();\n             write!(buf, \"{:?} {:?}\\n\", kind, text).unwrap();"}, {"sha": "a047f61fa03cbc177de53a1eaab12ca2b96b02fd", "filename": "crates/syntax/src/hacks.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fsyntax%2Fsrc%2Fhacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fsyntax%2Fsrc%2Fhacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fhacks.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -0,0 +1,15 @@\n+//! Things which exist to solve practial issues, but which shouldn't exist.\n+//!\n+//! Please avoid adding new usages of the functions in this module\n+\n+use crate::{ast, AstNode};\n+\n+pub fn parse_expr_from_str(s: &str) -> Option<ast::Expr> {\n+    let s = s.trim();\n+    let file = ast::SourceFile::parse(&format!(\"const _: () = {};\", s));\n+    let expr = file.syntax_node().descendants().find_map(ast::Expr::cast)?;\n+    if expr.syntax().text() != s {\n+        return None;\n+    }\n+    Some(expr)\n+}"}, {"sha": "d6b1cce45ff7fa1bc10be4d65eb1bb76c105f666", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 55, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -40,6 +40,7 @@ pub mod ast;\n pub mod fuzz;\n pub mod utils;\n pub mod ted;\n+pub mod hacks;\n \n use std::{marker::PhantomData, sync::Arc};\n \n@@ -167,61 +168,6 @@ impl SourceFile {\n     }\n }\n \n-// FIXME: `parse` functions shouldn't hang directly from AST nodes, and they\n-// shouldn't return `Result`.\n-//\n-// We need a dedicated module for parser entry points, and they should always\n-// return `Parse`.\n-\n-impl ast::Path {\n-    /// Returns `text`, parsed as a path, but only if it has no errors.\n-    pub fn parse(text: &str) -> Result<Self, ()> {\n-        parsing::parse_text_as(text, parser::ParserEntryPoint::Path)\n-    }\n-}\n-\n-impl ast::Pat {\n-    /// Returns `text`, parsed as a pattern, but only if it has no errors.\n-    pub fn parse(text: &str) -> Result<Self, ()> {\n-        parsing::parse_text_as(text, parser::ParserEntryPoint::Pattern)\n-    }\n-}\n-\n-impl ast::Expr {\n-    /// Returns `text`, parsed as an expression, but only if it has no errors.\n-    pub fn parse(text: &str) -> Result<Self, ()> {\n-        parsing::parse_text_as(text, parser::ParserEntryPoint::Expr)\n-    }\n-}\n-\n-impl ast::Item {\n-    /// Returns `text`, parsed as an item, but only if it has no errors.\n-    pub fn parse(text: &str) -> Result<Self, ()> {\n-        parsing::parse_text_as(text, parser::ParserEntryPoint::Item)\n-    }\n-}\n-\n-impl ast::Type {\n-    /// Returns `text`, parsed as an type reference, but only if it has no errors.\n-    pub fn parse(text: &str) -> Result<Self, ()> {\n-        parsing::parse_text_as(text, parser::ParserEntryPoint::Type)\n-    }\n-}\n-\n-impl ast::Attr {\n-    /// Returns `text`, parsed as an attribute, but only if it has no errors.\n-    pub fn parse(text: &str) -> Result<Self, ()> {\n-        parsing::parse_text_as(text, parser::ParserEntryPoint::Attr)\n-    }\n-}\n-\n-impl ast::Stmt {\n-    /// Returns `text`, parsed as statement, but only if it has no errors.\n-    pub fn parse(text: &str) -> Result<Self, ()> {\n-        parsing::parse_text_as(text, parser::ParserEntryPoint::StatementOptionalSemi)\n-    }\n-}\n-\n /// Matches a `SyntaxNode` against an `ast` type.\n ///\n /// # Example:"}, {"sha": "047e670c9f45eb0d7b32b9e40f8c5b14d8dec152", "filename": "crates/syntax/src/parsing.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fsyntax%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fsyntax%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -5,46 +5,25 @@ mod reparsing;\n \n use rowan::TextRange;\n \n-use crate::{syntax_node::GreenNode, AstNode, SyntaxError, SyntaxNode, SyntaxTreeBuilder};\n+use crate::{syntax_node::GreenNode, SyntaxError, SyntaxTreeBuilder};\n \n pub(crate) use crate::parsing::reparsing::incremental_reparse;\n \n pub(crate) fn parse_text(text: &str) -> (GreenNode, Vec<SyntaxError>) {\n     let lexed = parser::LexedStr::new(text);\n     let parser_input = lexed.to_input();\n-    let parser_output = parser::parse_source_file(&parser_input);\n-    let (node, errors, _eof) = build_tree(lexed, parser_output, false);\n+    let parser_output = parser::TopEntryPoint::SourceFile.parse(&parser_input);\n+    let (node, errors, _eof) = build_tree(lexed, parser_output);\n     (node, errors)\n }\n \n-/// Returns `text` parsed as a `T` provided there are no parse errors.\n-pub(crate) fn parse_text_as<T: AstNode>(\n-    text: &str,\n-    entry_point: parser::ParserEntryPoint,\n-) -> Result<T, ()> {\n-    let lexed = parser::LexedStr::new(text);\n-    if lexed.errors().next().is_some() {\n-        return Err(());\n-    }\n-    let parser_input = lexed.to_input();\n-    let parser_output = parser::parse(&parser_input, entry_point);\n-    let (node, errors, eof) = build_tree(lexed, parser_output, true);\n-\n-    if !errors.is_empty() || !eof {\n-        return Err(());\n-    }\n-\n-    SyntaxNode::new_root(node).first_child().and_then(T::cast).ok_or(())\n-}\n-\n pub(crate) fn build_tree(\n     lexed: parser::LexedStr<'_>,\n     parser_output: parser::Output,\n-    synthetic_root: bool,\n ) -> (GreenNode, Vec<SyntaxError>, bool) {\n     let mut builder = SyntaxTreeBuilder::default();\n \n-    let is_eof = lexed.intersperse_trivia(&parser_output, synthetic_root, &mut |step| match step {\n+    let is_eof = lexed.intersperse_trivia(&parser_output, &mut |step| match step {\n         parser::StrStep::Token { kind, text } => builder.token(kind, text),\n         parser::StrStep::Enter { kind } => builder.start_node(kind),\n         parser::StrStep::Exit => builder.finish_node(),"}, {"sha": "701e6232d5898ba0e9976d72d03ddfbe59acf42e", "filename": "crates/syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -96,7 +96,7 @@ fn reparse_block(\n \n     let tree_traversal = reparser.parse(&parser_input);\n \n-    let (green, new_parser_errors, _eof) = build_tree(lexed, tree_traversal, false);\n+    let (green, new_parser_errors, _eof) = build_tree(lexed, tree_traversal);\n \n     Some((node.replace_with(green), new_parser_errors, node.text_range()))\n }"}, {"sha": "0611143e2afefcced93c1a5078648ce90585d0e6", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355a4bdb883ee9edc1c32b553fcf91c302b3df19/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=355a4bdb883ee9edc1c32b553fcf91c302b3df19", "patch": "@@ -59,60 +59,6 @@ fn validation_tests() {\n     });\n }\n \n-#[test]\n-fn expr_parser_tests() {\n-    fragment_parser_dir_test(\n-        &[\"parser/fragments/expr/ok\"],\n-        &[\"parser/fragments/expr/err\"],\n-        crate::ast::Expr::parse,\n-    );\n-}\n-\n-#[test]\n-fn path_parser_tests() {\n-    fragment_parser_dir_test(\n-        &[\"parser/fragments/path/ok\"],\n-        &[\"parser/fragments/path/err\"],\n-        crate::ast::Path::parse,\n-    );\n-}\n-\n-#[test]\n-fn pattern_parser_tests() {\n-    fragment_parser_dir_test(\n-        &[\"parser/fragments/pattern/ok\"],\n-        &[\"parser/fragments/pattern/err\"],\n-        crate::ast::Pat::parse,\n-    );\n-}\n-\n-#[test]\n-fn item_parser_tests() {\n-    fragment_parser_dir_test(\n-        &[\"parser/fragments/item/ok\"],\n-        &[\"parser/fragments/item/err\"],\n-        crate::ast::Item::parse,\n-    );\n-}\n-\n-#[test]\n-fn type_parser_tests() {\n-    fragment_parser_dir_test(\n-        &[\"parser/fragments/type/ok\"],\n-        &[\"parser/fragments/type/err\"],\n-        crate::ast::Type::parse,\n-    );\n-}\n-\n-#[test]\n-fn stmt_parser_tests() {\n-    fragment_parser_dir_test(\n-        &[\"parser/fragments/stmt/ok\"],\n-        &[\"parser/fragments/stmt/err\"],\n-        crate::ast::Stmt::parse,\n-    );\n-}\n-\n #[test]\n fn parser_fuzz_tests() {\n     for (_, text) in collect_rust_files(&test_data_dir(), &[\"parser/fuzz-failures\"]) {\n@@ -172,24 +118,6 @@ fn assert_errors_are_present(errors: &[SyntaxError], path: &Path) {\n     assert!(!errors.is_empty(), \"There should be errors in the file {:?}\", path.display());\n }\n \n-fn fragment_parser_dir_test<T, F>(ok_paths: &[&str], err_paths: &[&str], f: F)\n-where\n-    T: crate::AstNode,\n-    F: Fn(&str) -> Result<T, ()>,\n-{\n-    dir_tests(&test_data_dir(), ok_paths, \"rast\", |text, path| match f(text) {\n-        Ok(node) => format!(\"{:#?}\", crate::ast::AstNode::syntax(&node)),\n-        Err(_) => panic!(\"Failed to parse '{:?}'\", path),\n-    });\n-    dir_tests(&test_data_dir(), err_paths, \"rast\", |text, path| {\n-        if f(text).is_ok() {\n-            panic!(\"'{:?}' successfully parsed when it should have errored\", path);\n-        } else {\n-            \"ERROR\\n\".to_owned()\n-        }\n-    });\n-}\n-\n /// Calls callback `f` with input code and file paths for each `.rs` file in `test_data_dir`\n /// subdirectories defined by `paths`.\n ///"}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/expr/err/0000_truncated_add.rast", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fexpr%2Ferr%2F0000_truncated_add.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fexpr%2Ferr%2F0000_truncated_add.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fexpr%2Ferr%2F0000_truncated_add.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-ERROR"}, {"sha": "ca49acb079e2e0a90ef5cecad257a0e27b7f7ef1", "filename": "crates/syntax/test_data/parser/fragments/expr/err/0000_truncated_add.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fexpr%2Ferr%2F0000_truncated_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fexpr%2Ferr%2F0000_truncated_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fexpr%2Ferr%2F0000_truncated_add.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-1 +"}, {"sha": "fa78a02a6bf449e4d1bf583c0a5a03231792f42b", "filename": "crates/syntax/test_data/parser/fragments/expr/ok/0000_add.rast", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fexpr%2Fok%2F0000_add.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fexpr%2Fok%2F0000_add.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fexpr%2Fok%2F0000_add.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,8 +0,0 @@\n-BIN_EXPR@0..5\n-  LITERAL@0..1\n-    INT_NUMBER@0..1 \"1\"\n-  WHITESPACE@1..2 \" \"\n-  PLUS@2..3 \"+\"\n-  WHITESPACE@3..4 \" \"\n-  LITERAL@4..5\n-    INT_NUMBER@4..5 \"2\""}, {"sha": "e0ef5840209cba55095233da06d417f0c5ac7e00", "filename": "crates/syntax/test_data/parser/fragments/expr/ok/0000_add.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fexpr%2Fok%2F0000_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fexpr%2Fok%2F0000_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fexpr%2Fok%2F0000_add.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-1 + 2"}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/item/err/0000_extra_keyword.rast", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fitem%2Ferr%2F0000_extra_keyword.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fitem%2Ferr%2F0000_extra_keyword.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fitem%2Ferr%2F0000_extra_keyword.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-ERROR"}, {"sha": "dc32389bbb79e914093ab979ef9d23b11cdddcc0", "filename": "crates/syntax/test_data/parser/fragments/item/err/0000_extra_keyword.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fitem%2Ferr%2F0000_extra_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fitem%2Ferr%2F0000_extra_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fitem%2Ferr%2F0000_extra_keyword.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-fn fn foo() {}"}, {"sha": "4ff9967beac9e4011fdccb57d7e5225d25e981b2", "filename": "crates/syntax/test_data/parser/fragments/item/ok/0000_fn.rast", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fitem%2Fok%2F0000_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fitem%2Fok%2F0000_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fitem%2Fok%2F0000_fn.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,13 +0,0 @@\n-FN@0..11\n-  FN_KW@0..2 \"fn\"\n-  WHITESPACE@2..3 \" \"\n-  NAME@3..6\n-    IDENT@3..6 \"foo\"\n-  PARAM_LIST@6..8\n-    L_PAREN@6..7 \"(\"\n-    R_PAREN@7..8 \")\"\n-  WHITESPACE@8..9 \" \"\n-  BLOCK_EXPR@9..11\n-    STMT_LIST@9..11\n-      L_CURLY@9..10 \"{\"\n-      R_CURLY@10..11 \"}\""}, {"sha": "8f3b7ef112a0f4951016967f520b9399c02f902d", "filename": "crates/syntax/test_data/parser/fragments/item/ok/0000_fn.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fitem%2Fok%2F0000_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fitem%2Fok%2F0000_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fitem%2Fok%2F0000_fn.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-fn foo() {}"}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/path/err/0000_reserved_word.rast", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Ferr%2F0000_reserved_word.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Ferr%2F0000_reserved_word.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Ferr%2F0000_reserved_word.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-ERROR"}, {"sha": "2046de04929f3945bf86c84d65496deba7ae7fd8", "filename": "crates/syntax/test_data/parser/fragments/path/err/0000_reserved_word.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Ferr%2F0000_reserved_word.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Ferr%2F0000_reserved_word.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Ferr%2F0000_reserved_word.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-struct"}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/path/err/0001_expression.rast", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Ferr%2F0001_expression.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Ferr%2F0001_expression.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Ferr%2F0001_expression.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-ERROR"}, {"sha": "745e8d376f74da507d315cea74116b2d5cbf96de", "filename": "crates/syntax/test_data/parser/fragments/path/err/0001_expression.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Ferr%2F0001_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Ferr%2F0001_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Ferr%2F0001_expression.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-a + b"}, {"sha": "0c5d4360fa8d5dbdb2000708f24c232f7ad8ba49", "filename": "crates/syntax/test_data/parser/fragments/path/ok/0000_single_ident.rast", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Fok%2F0000_single_ident.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Fok%2F0000_single_ident.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Fok%2F0000_single_ident.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,4 +0,0 @@\n-PATH@0..3\n-  PATH_SEGMENT@0..3\n-    NAME_REF@0..3\n-      IDENT@0..3 \"foo\""}, {"sha": "257cc5642cb1a054f08cc83f2d943e56fd3ebe99", "filename": "crates/syntax/test_data/parser/fragments/path/ok/0000_single_ident.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Fok%2F0000_single_ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Fok%2F0000_single_ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Fok%2F0000_single_ident.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-foo"}, {"sha": "4a2b45e6a968e00a44bec5af2227042a90f20d71", "filename": "crates/syntax/test_data/parser/fragments/path/ok/0001_multipart.rast", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Fok%2F0001_multipart.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Fok%2F0001_multipart.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Fok%2F0001_multipart.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,14 +0,0 @@\n-PATH@0..13\n-  PATH@0..8\n-    PATH@0..3\n-      PATH_SEGMENT@0..3\n-        NAME_REF@0..3\n-          IDENT@0..3 \"foo\"\n-    COLON2@3..5 \"::\"\n-    PATH_SEGMENT@5..8\n-      NAME_REF@5..8\n-        IDENT@5..8 \"bar\"\n-  COLON2@8..10 \"::\"\n-  PATH_SEGMENT@10..13\n-    NAME_REF@10..13\n-      IDENT@10..13 \"baz\""}, {"sha": "81e0b21cd4105c0225f62f414f2fac29adaccf3d", "filename": "crates/syntax/test_data/parser/fragments/path/ok/0001_multipart.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Fok%2F0001_multipart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Fok%2F0001_multipart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpath%2Fok%2F0001_multipart.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-foo::bar::baz"}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/pattern/err/0000_reserved_word.rast", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Ferr%2F0000_reserved_word.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Ferr%2F0000_reserved_word.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Ferr%2F0000_reserved_word.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-ERROR"}, {"sha": "ae26fc4556604acde5227fb00eb5c35a5bb4077f", "filename": "crates/syntax/test_data/parser/fragments/pattern/err/0000_reserved_word.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Ferr%2F0000_reserved_word.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Ferr%2F0000_reserved_word.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Ferr%2F0000_reserved_word.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-fn"}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/pattern/err/0001_missing_paren.rast", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Ferr%2F0001_missing_paren.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Ferr%2F0001_missing_paren.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Ferr%2F0001_missing_paren.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-ERROR"}, {"sha": "61a391d08460babc26054738b42da0612b7cfc30", "filename": "crates/syntax/test_data/parser/fragments/pattern/err/0001_missing_paren.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Ferr%2F0001_missing_paren.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Ferr%2F0001_missing_paren.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Ferr%2F0001_missing_paren.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-Some(x"}, {"sha": "dcf102339aa9f3a81a76b36a4d65d3170ec26f5a", "filename": "crates/syntax/test_data/parser/fragments/pattern/ok/0000_enum.rast", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Fok%2F0000_enum.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Fok%2F0000_enum.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Fok%2F0000_enum.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,10 +0,0 @@\n-TUPLE_STRUCT_PAT@0..7\n-  PATH@0..4\n-    PATH_SEGMENT@0..4\n-      NAME_REF@0..4\n-        IDENT@0..4 \"Some\"\n-  L_PAREN@4..5 \"(\"\n-  IDENT_PAT@5..6\n-    NAME@5..6\n-      IDENT@5..6 \"x\"\n-  R_PAREN@6..7 \")\""}, {"sha": "87114dd78814cac401f0fd74424cf08d09d15451", "filename": "crates/syntax/test_data/parser/fragments/pattern/ok/0000_enum.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Fok%2F0000_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Fok%2F0000_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fpattern%2Fok%2F0000_enum.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-Some(x)"}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_attr.rast", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_attr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_attr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_attr.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-ERROR"}, {"sha": "988df07059795429d6c02945609e67e1ba1ec404", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_attr.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_attr.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-#[foo]"}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_multiple_stmts.rast", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_multiple_stmts.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_multiple_stmts.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_multiple_stmts.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-ERROR"}, {"sha": "7e3b2fd493671acd381325b4def6fce39734f482", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_multiple_stmts.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_multiple_stmts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_multiple_stmts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_multiple_stmts.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-a(); b(); c()"}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_open_parenthesis.rast", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_open_parenthesis.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_open_parenthesis.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_open_parenthesis.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-ERROR"}, {"sha": "2d06f376636f6c39f974e77031dfd8c4f890fa2f", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_open_parenthesis.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_open_parenthesis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_open_parenthesis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_open_parenthesis.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-("}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_semicolon.rast", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_semicolon.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_semicolon.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_semicolon.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-ERROR"}, {"sha": "092bc2b04126100878530888e6b1b30602dce213", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_semicolon.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_semicolon.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-;"}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_unterminated_expr.rast", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_unterminated_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_unterminated_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_unterminated_expr.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-ERROR"}, {"sha": "ca49acb079e2e0a90ef5cecad257a0e27b7f7ef1", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_unterminated_expr.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_unterminated_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_unterminated_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_unterminated_expr.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-1 +"}, {"sha": "274fdf16deb90f2df1cfb79a12d462884d1b523e", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_expr.rast", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,9 +0,0 @@\n-EXPR_STMT@0..5\n-  BIN_EXPR@0..5\n-    LITERAL@0..1\n-      INT_NUMBER@0..1 \"1\"\n-    WHITESPACE@1..2 \" \"\n-    PLUS@2..3 \"+\"\n-    WHITESPACE@3..4 \" \"\n-    LITERAL@4..5\n-      INT_NUMBER@4..5 \"1\""}, {"sha": "8d2f0971e2ce6dbec02115565c6f0e9c10ee9a02", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_expr.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-1 + 1"}, {"sha": "a2d4f18988a96733bf7dc2cfa43f19606187f274", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_expr_block.rast", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr_block.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,70 +0,0 @@\n-EXPR_STMT@0..55\n-  BLOCK_EXPR@0..55\n-    STMT_LIST@0..55\n-      L_CURLY@0..1 \"{\"\n-      WHITESPACE@1..6 \"\\n    \"\n-      LET_STMT@6..20\n-        LET_KW@6..9 \"let\"\n-        WHITESPACE@9..10 \" \"\n-        IDENT_PAT@10..11\n-          NAME@10..11\n-            IDENT@10..11 \"x\"\n-        WHITESPACE@11..12 \" \"\n-        EQ@12..13 \"=\"\n-        WHITESPACE@13..14 \" \"\n-        CALL_EXPR@14..19\n-          PATH_EXPR@14..17\n-            PATH@14..17\n-              PATH_SEGMENT@14..17\n-                NAME_REF@14..17\n-                  IDENT@14..17 \"foo\"\n-          ARG_LIST@17..19\n-            L_PAREN@17..18 \"(\"\n-            R_PAREN@18..19 \")\"\n-        SEMICOLON@19..20 \";\"\n-      WHITESPACE@20..25 \"\\n    \"\n-      LET_STMT@25..39\n-        LET_KW@25..28 \"let\"\n-        WHITESPACE@28..29 \" \"\n-        IDENT_PAT@29..30\n-          NAME@29..30\n-            IDENT@29..30 \"y\"\n-        WHITESPACE@30..31 \" \"\n-        EQ@31..32 \"=\"\n-        WHITESPACE@32..33 \" \"\n-        CALL_EXPR@33..38\n-          PATH_EXPR@33..36\n-            PATH@33..36\n-              PATH_SEGMENT@33..36\n-                NAME_REF@33..36\n-                  IDENT@33..36 \"bar\"\n-          ARG_LIST@36..38\n-            L_PAREN@36..37 \"(\"\n-            R_PAREN@37..38 \")\"\n-        SEMICOLON@38..39 \";\"\n-      WHITESPACE@39..44 \"\\n    \"\n-      CALL_EXPR@44..53\n-        PATH_EXPR@44..46\n-          PATH@44..46\n-            PATH_SEGMENT@44..46\n-              NAME_REF@44..46\n-                IDENT@44..46 \"Ok\"\n-        ARG_LIST@46..53\n-          L_PAREN@46..47 \"(\"\n-          BIN_EXPR@47..52\n-            PATH_EXPR@47..48\n-              PATH@47..48\n-                PATH_SEGMENT@47..48\n-                  NAME_REF@47..48\n-                    IDENT@47..48 \"x\"\n-            WHITESPACE@48..49 \" \"\n-            PLUS@49..50 \"+\"\n-            WHITESPACE@50..51 \" \"\n-            PATH_EXPR@51..52\n-              PATH@51..52\n-                PATH_SEGMENT@51..52\n-                  NAME_REF@51..52\n-                    IDENT@51..52 \"y\"\n-          R_PAREN@52..53 \")\"\n-      WHITESPACE@53..54 \"\\n\"\n-      R_CURLY@54..55 \"}\""}, {"sha": "ffa5c1e66ef678251f2bba0f6f241b23ca41a66c", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_expr_block.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr_block.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,5 +0,0 @@\n-{\n-    let x = foo();\n-    let y = bar();\n-    Ok(x + y)\n-}"}, {"sha": "8c186da93eed7fd500de0571f9c70ffd26f2a529", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_fn_call.rast", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_fn_call.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_fn_call.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_fn_call.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,11 +0,0 @@\n-EXPR_STMT@0..6\n-  CALL_EXPR@0..5\n-    PATH_EXPR@0..3\n-      PATH@0..3\n-        PATH_SEGMENT@0..3\n-          NAME_REF@0..3\n-            IDENT@0..3 \"foo\"\n-    ARG_LIST@3..5\n-      L_PAREN@3..4 \"(\"\n-      R_PAREN@4..5 \")\"\n-  SEMICOLON@5..6 \";\""}, {"sha": "a280f9a5cce661edc17cdec211f76bd35ae48268", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_fn_call.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_fn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_fn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_fn_call.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-foo();"}, {"sha": "8ab38da21cb55bab5d2bdf4c4b937d0dd0856022", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_let_stmt.rast", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_let_stmt.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_let_stmt.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_let_stmt.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,12 +0,0 @@\n-LET_STMT@0..11\n-  LET_KW@0..3 \"let\"\n-  WHITESPACE@3..4 \" \"\n-  IDENT_PAT@4..5\n-    NAME@4..5\n-      IDENT@4..5 \"x\"\n-  WHITESPACE@5..6 \" \"\n-  EQ@6..7 \"=\"\n-  WHITESPACE@7..8 \" \"\n-  LITERAL@8..10\n-    INT_NUMBER@8..10 \"10\"\n-  SEMICOLON@10..11 \";\""}, {"sha": "de8a7f1fc6c40dd376e1b73d4d661518ba084c52", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_let_stmt.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_let_stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_let_stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_let_stmt.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-let x = 10;"}, {"sha": "81d6df29a5fb8ff8bcd2ecf4d53c5dd5c85f5fbe", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_macro_let_stmt.rast", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_let_stmt.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_let_stmt.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_let_stmt.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,21 +0,0 @@\n-EXPR_STMT@0..18\n-  MACRO_CALL@0..17\n-    PATH@0..2\n-      PATH_SEGMENT@0..2\n-        NAME_REF@0..2\n-          IDENT@0..2 \"m1\"\n-    BANG@2..3 \"!\"\n-    TOKEN_TREE@3..17\n-      L_CURLY@3..4 \"{\"\n-      WHITESPACE@4..5 \" \"\n-      LET_KW@5..8 \"let\"\n-      WHITESPACE@8..9 \" \"\n-      IDENT@9..10 \"a\"\n-      WHITESPACE@10..11 \" \"\n-      EQ@11..12 \"=\"\n-      WHITESPACE@12..13 \" \"\n-      INT_NUMBER@13..14 \"0\"\n-      SEMICOLON@14..15 \";\"\n-      WHITESPACE@15..16 \" \"\n-      R_CURLY@16..17 \"}\"\n-  SEMICOLON@17..18 \";\""}, {"sha": "075f30159b246eafafb6ca48f431099b3bf0450a", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_macro_let_stmt.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_let_stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_let_stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_let_stmt.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-m1!{ let a = 0; };"}, {"sha": "81d6df29a5fb8ff8bcd2ecf4d53c5dd5c85f5fbe", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_macro_unterminated_let_stmt.rast", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_unterminated_let_stmt.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_unterminated_let_stmt.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_unterminated_let_stmt.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,21 +0,0 @@\n-EXPR_STMT@0..18\n-  MACRO_CALL@0..17\n-    PATH@0..2\n-      PATH_SEGMENT@0..2\n-        NAME_REF@0..2\n-          IDENT@0..2 \"m1\"\n-    BANG@2..3 \"!\"\n-    TOKEN_TREE@3..17\n-      L_CURLY@3..4 \"{\"\n-      WHITESPACE@4..5 \" \"\n-      LET_KW@5..8 \"let\"\n-      WHITESPACE@8..9 \" \"\n-      IDENT@9..10 \"a\"\n-      WHITESPACE@10..11 \" \"\n-      EQ@11..12 \"=\"\n-      WHITESPACE@12..13 \" \"\n-      INT_NUMBER@13..14 \"0\"\n-      SEMICOLON@14..15 \";\"\n-      WHITESPACE@15..16 \" \"\n-      R_CURLY@16..17 \"}\"\n-  SEMICOLON@17..18 \";\""}, {"sha": "075f30159b246eafafb6ca48f431099b3bf0450a", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_macro_unterminated_let_stmt.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_unterminated_let_stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_unterminated_let_stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_unterminated_let_stmt.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-m1!{ let a = 0; };"}, {"sha": "64c5d296911e3c633a427575ac523308fa0dc14f", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_struct_item.rast", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_struct_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_struct_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_struct_item.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,22 +0,0 @@\n-STRUCT@0..28\n-  STRUCT_KW@0..6 \"struct\"\n-  WHITESPACE@6..7 \" \"\n-  NAME@7..10\n-    IDENT@7..10 \"Foo\"\n-  WHITESPACE@10..11 \" \"\n-  RECORD_FIELD_LIST@11..28\n-    L_CURLY@11..12 \"{\"\n-    WHITESPACE@12..17 \"\\n    \"\n-    RECORD_FIELD@17..25\n-      NAME@17..20\n-        IDENT@17..20 \"bar\"\n-      COLON@20..21 \":\"\n-      WHITESPACE@21..22 \" \"\n-      PATH_TYPE@22..25\n-        PATH@22..25\n-          PATH_SEGMENT@22..25\n-            NAME_REF@22..25\n-              IDENT@22..25 \"u32\"\n-    COMMA@25..26 \",\"\n-    WHITESPACE@26..27 \"\\n\"\n-    R_CURLY@27..28 \"}\""}, {"sha": "e5473e3ac8d7781ac44a0e2ee3081fc0654308fc", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_struct_item.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_struct_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_struct_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_struct_item.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,3 +0,0 @@\n-struct Foo {\n-    bar: u32,\n-}"}, {"sha": "9089906bcea1b605eedfdd6aff817405c374bb1e", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_unterminated_fn_call.rast", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_fn_call.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_fn_call.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_fn_call.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,10 +0,0 @@\n-EXPR_STMT@0..5\n-  CALL_EXPR@0..5\n-    PATH_EXPR@0..3\n-      PATH@0..3\n-        PATH_SEGMENT@0..3\n-          NAME_REF@0..3\n-            IDENT@0..3 \"foo\"\n-    ARG_LIST@3..5\n-      L_PAREN@3..4 \"(\"\n-      R_PAREN@4..5 \")\""}, {"sha": "eb28ef4401b2e7fcd41a13bb52794a2881a313d2", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_unterminated_fn_call.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_fn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_fn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_fn_call.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-foo()"}, {"sha": "37663671fafb07f77e46b1f2edca7e64765720e5", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_unterminated_let_stmt.rast", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_let_stmt.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_let_stmt.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_let_stmt.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,11 +0,0 @@\n-LET_STMT@0..10\n-  LET_KW@0..3 \"let\"\n-  WHITESPACE@3..4 \" \"\n-  IDENT_PAT@4..5\n-    NAME@4..5\n-      IDENT@4..5 \"x\"\n-  WHITESPACE@5..6 \" \"\n-  EQ@6..7 \"=\"\n-  WHITESPACE@7..8 \" \"\n-  LITERAL@8..10\n-    INT_NUMBER@8..10 \"10\""}, {"sha": "78364b2a96e47fddb1d5fe7fa80eeec784e9f981", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_unterminated_let_stmt.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_let_stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_let_stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_let_stmt.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-let x = 10"}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/type/err/0000_missing_close.rast", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Ferr%2F0000_missing_close.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Ferr%2F0000_missing_close.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Ferr%2F0000_missing_close.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-ERROR"}, {"sha": "caa4d7c09275bdbff9d1ec03c7469fd0abbffd4a", "filename": "crates/syntax/test_data/parser/fragments/type/err/0000_missing_close.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Ferr%2F0000_missing_close.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Ferr%2F0000_missing_close.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Ferr%2F0000_missing_close.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-Result<Foo, Bar"}, {"sha": "38c15b5815e45bd2ef8d49032202a4cfd59e2683", "filename": "crates/syntax/test_data/parser/fragments/type/ok/0000_result.rast", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rast?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1,22 +0,0 @@\n-PATH_TYPE@0..16\n-  PATH@0..16\n-    PATH_SEGMENT@0..16\n-      NAME_REF@0..6\n-        IDENT@0..6 \"Result\"\n-      GENERIC_ARG_LIST@6..16\n-        L_ANGLE@6..7 \"<\"\n-        TYPE_ARG@7..10\n-          PATH_TYPE@7..10\n-            PATH@7..10\n-              PATH_SEGMENT@7..10\n-                NAME_REF@7..10\n-                  IDENT@7..10 \"Foo\"\n-        COMMA@10..11 \",\"\n-        WHITESPACE@11..12 \" \"\n-        TYPE_ARG@12..15\n-          PATH_TYPE@12..15\n-            PATH@12..15\n-              PATH_SEGMENT@12..15\n-                NAME_REF@12..15\n-                  IDENT@12..15 \"Bar\"\n-        R_ANGLE@15..16 \">\""}, {"sha": "b50b3bb3bfd68dfe86f0948907e844ae4e1335b6", "filename": "crates/syntax/test_data/parser/fragments/type/ok/0000_result.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ad04a9c84ac70c15465c1124c4d4dbef3b772/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rs?ref=4d3ad04a9c84ac70c15465c1124c4d4dbef3b772", "patch": "@@ -1 +0,0 @@\n-Result<Foo, Bar>"}]}