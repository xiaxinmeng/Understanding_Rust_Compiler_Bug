{"sha": "d76573abd19d50c25c5b58ec7fc5cfef579e6eef", "node_id": "C_kwDOAAsO6NoAKGQ3NjU3M2FiZDE5ZDUwYzI1YzViNThlYzdmYzVjZmVmNTc5ZTZlZWY", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-10-22T05:51:31Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2022-06-13T07:56:47Z"}, "message": "Integrate measureme's hardware performance counter support.", "tree": {"sha": "dfc4bfb7dbb0054bff1ced5d5c0ed836b63d4718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfc4bfb7dbb0054bff1ced5d5c0ed836b63d4718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d76573abd19d50c25c5b58ec7fc5cfef579e6eef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d76573abd19d50c25c5b58ec7fc5cfef579e6eef", "html_url": "https://github.com/rust-lang/rust/commit/d76573abd19d50c25c5b58ec7fc5cfef579e6eef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d76573abd19d50c25c5b58ec7fc5cfef579e6eef/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083721a1a7365d3afe1521cd2661b2201aac0450", "url": "https://api.github.com/repos/rust-lang/rust/commits/083721a1a7365d3afe1521cd2661b2201aac0450", "html_url": "https://github.com/rust-lang/rust/commit/083721a1a7365d3afe1521cd2661b2201aac0450"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "a1f42d8d3c0597320a85d589dc88d484c5b9861c", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d76573abd19d50c25c5b58ec7fc5cfef579e6eef/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76573abd19d50c25c5b58ec7fc5cfef579e6eef/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=d76573abd19d50c25c5b58ec7fc5cfef579e6eef", "patch": "@@ -550,14 +550,20 @@ impl SelfProfiler {\n     pub fn new(\n         output_directory: &Path,\n         crate_name: Option<&str>,\n-        event_filters: &Option<Vec<String>>,\n+        event_filters: Option<&[String]>,\n+        counter_name: &str,\n     ) -> Result<SelfProfiler, Box<dyn Error + Send + Sync>> {\n         fs::create_dir_all(output_directory)?;\n \n         let crate_name = crate_name.unwrap_or(\"unknown-crate\");\n-        let filename = format!(\"{}-{}.rustc_profile\", crate_name, process::id());\n+        // HACK(eddyb) we need to pad the PID, strange as it may seem, as its\n+        // length can behave as a source of entropy for heap addresses, when\n+        // ASLR is disabled and the heap is otherwise determinic.\n+        let pid: u32 = process::id();\n+        let filename = format!(\"{}-{:07}.rustc_profile\", crate_name, pid);\n         let path = output_directory.join(&filename);\n-        let profiler = Profiler::new(&path)?;\n+        let profiler =\n+            Profiler::with_counter(&path, measureme::counters::Counter::by_name(counter_name)?)?;\n \n         let query_event_kind = profiler.alloc_string(\"Query\");\n         let generic_activity_event_kind = profiler.alloc_string(\"GenericActivity\");\n@@ -570,7 +576,7 @@ impl SelfProfiler {\n \n         let mut event_filter_mask = EventFilter::empty();\n \n-        if let Some(ref event_filters) = *event_filters {\n+        if let Some(event_filters) = event_filters {\n             let mut unknown_events = vec![];\n             for item in event_filters {\n                 if let Some(&(_, mask)) ="}, {"sha": "551f094209e4eff666bef352c7b34ee5f605a546", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d76573abd19d50c25c5b58ec7fc5cfef579e6eef/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76573abd19d50c25c5b58ec7fc5cfef579e6eef/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=d76573abd19d50c25c5b58ec7fc5cfef579e6eef", "patch": "@@ -275,6 +275,9 @@ fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n             let query_name = profiler.get_or_alloc_cached_string(query_name);\n             let event_id = event_id_builder.from_label(query_name).to_string_id();\n \n+            // FIXME(eddyb) make this O(1) by using a pre-cached query name `EventId`,\n+            // instead of passing the `DepNodeIndex` to `finish_with_query_invocation_id`,\n+            // when recording the event in the first place.\n             let mut query_invocation_ids = Vec::new();\n             query_cache.iter(&mut |_, _, i| {\n                 query_invocation_ids.push(i.into());"}, {"sha": "64c8274abdfccfcb6bd368e46e014ebde09a4295", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d76573abd19d50c25c5b58ec7fc5cfef579e6eef/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76573abd19d50c25c5b58ec7fc5cfef579e6eef/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=d76573abd19d50c25c5b58ec7fc5cfef579e6eef", "patch": "@@ -1473,6 +1473,12 @@ options! {\n         for example: `-Z self-profile-events=default,query-keys`\n         all options: none, all, default, generic-activity, query-provider, query-cache-hit\n                      query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\"),\n+    self_profile_counter: String = (\"wall-time\".to_string(), parse_string, [UNTRACKED],\n+        \"counter used by the self profiler (default: `wall-time`), one of:\n+        `wall-time` (monotonic clock, i.e. `std::time::Instant`)\n+        `instructions:u` (retired instructions, userspace-only)\n+        `instructions-minus-irqs:u` (subtracting hardware interrupt counts for extra accuracy)\"\n+    ),\n     share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"make the current crate share its generic instantiations\"),\n     show_span: Option<String> = (None, parse_opt_string, [TRACKED],"}, {"sha": "f74de55ad7b99a863ecc50e98139c69d20d303fe", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d76573abd19d50c25c5b58ec7fc5cfef579e6eef/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76573abd19d50c25c5b58ec7fc5cfef579e6eef/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=d76573abd19d50c25c5b58ec7fc5cfef579e6eef", "patch": "@@ -1252,7 +1252,8 @@ pub fn build_session(\n         let profiler = SelfProfiler::new(\n             directory,\n             sopts.crate_name.as_deref(),\n-            &sopts.debugging_opts.self_profile_events,\n+            sopts.debugging_opts.self_profile_events.as_ref().map(|xs| &xs[..]),\n+            &sopts.debugging_opts.self_profile_counter,\n         );\n         match profiler {\n             Ok(profiler) => Some(Arc::new(profiler)),"}]}