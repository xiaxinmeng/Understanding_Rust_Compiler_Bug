{"sha": "ecb15ca7173a6d416c9f74af06f71cf003cdd597", "node_id": "C_kwDOAAsO6NoAKGVjYjE1Y2E3MTczYTZkNDE2YzlmNzRhZjA2ZjcxY2YwMDNjZGQ1OTc", "commit": {"author": {"name": "Mihail Mihov", "email": "mmihov.personal@gmail.com", "date": "2022-11-09T21:43:07Z"}, "committer": {"name": "Mihail Mihov", "email": "mmihov.personal@gmail.com", "date": "2022-11-21T20:27:26Z"}, "message": "Add assist to generate trait impl's", "tree": {"sha": "3472c4dbb35f6dfd5033f5b6b0efce05b6621cf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3472c4dbb35f6dfd5033f5b6b0efce05b6621cf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecb15ca7173a6d416c9f74af06f71cf003cdd597", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecb15ca7173a6d416c9f74af06f71cf003cdd597", "html_url": "https://github.com/rust-lang/rust/commit/ecb15ca7173a6d416c9f74af06f71cf003cdd597", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecb15ca7173a6d416c9f74af06f71cf003cdd597/comments", "author": null, "committer": null, "parents": [{"sha": "26562973b3482a635416b2b663a13016d4d90e20", "url": "https://api.github.com/repos/rust-lang/rust/commits/26562973b3482a635416b2b663a13016d4d90e20", "html_url": "https://github.com/rust-lang/rust/commit/26562973b3482a635416b2b663a13016d4d90e20"}], "stats": {"total": 249, "additions": 249, "deletions": 0}, "files": [{"sha": "7b1ee5b5c31018745402c8a0d28bf85fe29fc471", "filename": "crates/ide-assists/src/handlers/generate_trait_impl.rs", "status": "added", "additions": 226, "deletions": 0, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/ecb15ca7173a6d416c9f74af06f71cf003cdd597/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb15ca7173a6d416c9f74af06f71cf003cdd597/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_trait_impl.rs?ref=ecb15ca7173a6d416c9f74af06f71cf003cdd597", "patch": "@@ -0,0 +1,226 @@\n+use syntax::ast::{self, AstNode, HasName};\n+\n+use crate::{utils::generate_trait_impl_text, AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: generate_trait_impl\n+//\n+// Adds a new trait impl for a type.\n+//\n+// ```\n+// struct $0Ctx<T: Clone> {\n+//     data: T,\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Ctx<T: Clone> {\n+//     data: T,\n+// }\n+//\n+// impl<T: Clone> $0 for Ctx<T> {\n+//\n+// }\n+// ```\n+pub(crate) fn generate_trait_impl(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    let nominal = ctx.find_node_at_offset::<ast::Adt>()?;\n+    let name = nominal.name()?;\n+    let target = nominal.syntax().text_range();\n+\n+    if let Some(_) = ctx.find_node_at_offset::<ast::RecordFieldList>() {\n+        return None;\n+    }\n+\n+    acc.add(\n+        AssistId(\"generate_trait_impl\", AssistKind::Generate),\n+        format!(\"Generate trait impl for `{name}`\"),\n+        target,\n+        |edit| {\n+            let start_offset = nominal.syntax().text_range().end();\n+            match ctx.config.snippet_cap {\n+                Some(cap) => {\n+                    let snippet = generate_trait_impl_text(&nominal, \"$0\", \"\");\n+                    edit.insert_snippet(cap, start_offset, snippet);\n+                }\n+                None => {\n+                    let text = generate_trait_impl_text(&nominal, \"\", \"\");\n+                    edit.insert(start_offset, text);\n+                }\n+            }\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_target};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn test_add_trait_impl() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Foo$0 {}\n+            \"#,\n+            r#\"\n+                struct Foo {}\n+\n+                impl $0 for Foo {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_generics() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Foo$0<T: Clone> {}\n+            \"#,\n+            r#\"\n+                struct Foo<T: Clone> {}\n+\n+                impl<T: Clone> $0 for Foo<T> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_generics_and_lifetime_parameters() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Foo<'a, T: Foo<'a>>$0 {}\n+            \"#,\n+            r#\"\n+                struct Foo<'a, T: Foo<'a>> {}\n+\n+                impl<'a, T: Foo<'a>> $0 for Foo<'a, T> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_attributes() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                #[cfg(feature = \"foo\")]\n+                struct Foo<'a, T: Foo$0<'a>> {}\n+            \"#,\n+            r#\"\n+                #[cfg(feature = \"foo\")]\n+                struct Foo<'a, T: Foo<'a>> {}\n+\n+                #[cfg(feature = \"foo\")]\n+                impl<'a, T: Foo<'a>> $0 for Foo<'a, T> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_default_generic() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Defaulted$0<T = i32> {}\n+            \"#,\n+            r#\"\n+                struct Defaulted<T = i32> {}\n+\n+                impl<T> $0 for Defaulted<T> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_constrained_default_generic() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Defaulted$0<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}\n+            \"#,\n+            r#\"\n+                struct Defaulted<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}\n+\n+                impl<'a, 'b: 'a, T: Debug + Clone + 'a + 'b, const S: usize> $0 for Defaulted<'a, 'b, T, S> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_const_defaulted_generic() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Defaulted$0<const N: i32 = 0> {}\n+            \"#,\n+            r#\"\n+                struct Defaulted<const N: i32 = 0> {}\n+\n+                impl<const N: i32> $0 for Defaulted<N> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_trait_constraint() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                pub trait Trait {}\n+                struct Struct$0<T>\n+                where\n+                    T: Trait,\n+                {\n+                    inner: T,\n+                }\n+            \"#,\n+            r#\"\n+                pub trait Trait {}\n+                struct Struct<T>\n+                where\n+                    T: Trait,\n+                {\n+                    inner: T,\n+                }\n+\n+                impl<T> $0 for Struct<T>\n+                where\n+                    T: Trait,\n+                {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_trait_impl_target() {\n+        check_assist_target(\n+            generate_trait_impl,\n+            r#\"\n+                struct SomeThingIrrelevant;\n+                /// Has a lifetime parameter\n+                struct Foo$0<'a, T: Foo<'a>> {}\n+                struct EvenMoreIrrelevant;\n+            \"#,\n+            \"/// Has a lifetime parameter\\nstruct Foo<'a, T: Foo<'a>> {}\",\n+        );\n+    }\n+}"}, {"sha": "e3c483cf0a96543196fabc9cee84528064b8a22d", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecb15ca7173a6d416c9f74af06f71cf003cdd597/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb15ca7173a6d416c9f74af06f71cf003cdd597/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=ecb15ca7173a6d416c9f74af06f71cf003cdd597", "patch": "@@ -152,6 +152,7 @@ mod handlers {\n     mod generate_function;\n     mod generate_getter;\n     mod generate_impl;\n+    mod generate_trait_impl;\n     mod generate_is_empty_from_len;\n     mod generate_new;\n     mod generate_setter;\n@@ -247,6 +248,7 @@ mod handlers {\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n             generate_impl::generate_impl,\n+            generate_trait_impl::generate_trait_impl,\n             generate_is_empty_from_len::generate_is_empty_from_len,\n             generate_new::generate_new,\n             inline_call::inline_call,"}, {"sha": "67657b61bb5283bc4bcdcbf141c2ec713e40b569", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ecb15ca7173a6d416c9f74af06f71cf003cdd597/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb15ca7173a6d416c9f74af06f71cf003cdd597/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=ecb15ca7173a6d416c9f74af06f71cf003cdd597", "patch": "@@ -1341,6 +1341,27 @@ impl Person {\n     )\n }\n \n+#[test]\n+fn doctest_generate_trait_impl() {\n+    check_doc_test(\n+        \"generate_trait_impl\",\n+        r#####\"\n+struct $0Ctx<T: Clone> {\n+    data: T,\n+}\n+\"#####,\n+        r#####\"\n+struct Ctx<T: Clone> {\n+    data: T,\n+}\n+\n+impl<T: Clone> $0 for Ctx<T> {\n+\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_inline_call() {\n     check_doc_test("}]}