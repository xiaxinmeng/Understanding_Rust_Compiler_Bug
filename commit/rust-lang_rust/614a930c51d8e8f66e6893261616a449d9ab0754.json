{"sha": "614a930c51d8e8f66e6893261616a449d9ab0754", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNGE5MzBjNTFkOGU4ZjY2ZTY4OTMyNjE2MTZhNDQ5ZDlhYjA3NTQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-01T02:19:05Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-01T02:19:05Z"}, "message": "rt: Make the dynamic stack self-describing", "tree": {"sha": "5ec334ad863047aae11989bef8ad5d6ff1327129", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ec334ad863047aae11989bef8ad5d6ff1327129"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/614a930c51d8e8f66e6893261616a449d9ab0754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/614a930c51d8e8f66e6893261616a449d9ab0754", "html_url": "https://github.com/rust-lang/rust/commit/614a930c51d8e8f66e6893261616a449d9ab0754", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/614a930c51d8e8f66e6893261616a449d9ab0754/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "729437d2c07cfaf3d924df59a9341b3ac2efa1d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/729437d2c07cfaf3d924df59a9341b3ac2efa1d6", "html_url": "https://github.com/rust-lang/rust/commit/729437d2c07cfaf3d924df59a9341b3ac2efa1d6"}], "stats": {"total": 99, "additions": 74, "deletions": 25}, "files": [{"sha": "4d14145d8f73c2d356df837f4f0915a8340dccd4", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/614a930c51d8e8f66e6893261616a449d9ab0754/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/614a930c51d8e8f66e6893261616a449d9ab0754/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=614a930c51d8e8f66e6893261616a449d9ab0754", "patch": "@@ -109,7 +109,8 @@ fn declare_upcalls(_tn: type_names, tydesc_type: TypeRef,\n                  [taskptr_type, T_ptr(tydesc_type), T_ptr(T_i8()), T_i32()],\n                  T_void()),\n           dynastack_mark: d(~\"dynastack_mark\", [], T_ptr(T_i8())),\n-          dynastack_alloc: d(~\"dynastack_alloc\", [T_size_t()], T_ptr(T_i8())),\n+          dynastack_alloc: d(~\"dynastack_alloc_2\",\n+                             [T_size_t(), T_ptr(tydesc_type)], T_ptr(T_i8())),\n           dynastack_free: d(~\"dynastack_free\", [T_ptr(T_i8())], T_void())};\n }\n //"}, {"sha": "bf548e5ea73a9c9e9b07ca8cb57dd811608d252a", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/614a930c51d8e8f66e6893261616a449d9ab0754/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/614a930c51d8e8f66e6893261616a449d9ab0754/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=614a930c51d8e8f66e6893261616a449d9ab0754", "patch": "@@ -471,7 +471,8 @@ fn alloca(cx: &@block_ctxt, t: TypeRef) -> ValueRef {\n     ret Alloca(new_raw_block_ctxt(cx.fcx, cx.fcx.llstaticallocas), t);\n }\n \n-fn array_alloca(cx: &@block_ctxt, t: TypeRef, n: ValueRef) -> ValueRef {\n+fn dynastack_alloca(cx: &@block_ctxt, t: TypeRef, n: ValueRef, ty: ty::t)\n+        -> ValueRef {\n     let bcx = cx;\n     let dy_cx = new_raw_block_ctxt(cx.fcx, cx.fcx.lldynamicallocas);\n     let lltaskptr = bcx_fcx(bcx).lltaskptr;\n@@ -485,7 +486,11 @@ fn array_alloca(cx: &@block_ctxt, t: TypeRef, n: ValueRef) -> ValueRef {\n \n     let dynastack_alloc = bcx_ccx(bcx).upcalls.dynastack_alloc;\n     let llsz = Mul(dy_cx, C_uint(llsize_of_real(bcx_ccx(bcx), t)), n);\n-    let llresult = Call(dy_cx, dynastack_alloc, [lltaskptr, llsz]);\n+\n+    let ti = none;\n+    let lltydesc = get_tydesc(cx, ty, false, tps_normal, ti).result.val;\n+\n+    let llresult = Call(dy_cx, dynastack_alloc, [lltaskptr, llsz, lltydesc]);\n     ret PointerCast(dy_cx, llresult, T_ptr(t));\n }\n \n@@ -4868,8 +4873,10 @@ fn alloc_ty(cx: &@block_ctxt, t: ty::t) -> result {\n \n         let n = size_of(llderivedtydescs_block_ctxt(bcx.fcx), t);\n         bcx.fcx.llderivedtydescs = n.bcx.llbb;\n-        val = array_alloca(bcx, T_i8(), n.val);\n-    } else { val = alloca(bcx, type_of(bcx_ccx(cx), cx.sp, t)); }\n+        val = dynastack_alloca(bcx, T_i8(), n.val, t);\n+    } else {\n+        val = alloca(bcx, type_of(bcx_ccx(cx), cx.sp, t));\n+    }\n     // NB: since we've pushed all size calculations in this\n     // function up to the alloca block, we actually return the\n     // block passed into us unmodified; it doesn't really"}, {"sha": "9b269d042c0959f2487e5a31db6c075d814ff3c6", "filename": "src/comp/middle/trans_ivec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/614a930c51d8e8f66e6893261616a449d9ab0754/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/614a930c51d8e8f66e6893261616a449d9ab0754/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs?ref=614a930c51d8e8f66e6893261616a449d9ab0754", "patch": "@@ -5,7 +5,7 @@ import lib::llvm::llvm::{ValueRef, TypeRef};\n import back::abi;\n import trans::{call_memmove, trans_shared_malloc, llsize_of,\n                type_of_or_i8, incr_ptr, INIT, copy_val, load_if_immediate,\n-               alloca, array_alloca, size_of, llderivedtydescs_block_ctxt,\n+               alloca, size_of, llderivedtydescs_block_ctxt,\n                lazily_emit_tydesc_glue, get_tydesc, load_inbounds,\n                move_val_if_temp, trans_lval, node_id_type,\n                new_sub_block_ctxt, tps_normal, do_spill};"}, {"sha": "d703cfca63cad6efb89a351f85629a672151573f", "filename": "src/rt/rust_obstack.cpp", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/614a930c51d8e8f66e6893261616a449d9ab0754/src%2Frt%2Frust_obstack.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/614a930c51d8e8f66e6893261616a449d9ab0754/src%2Frt%2Frust_obstack.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_obstack.cpp?ref=614a930c51d8e8f66e6893261616a449d9ab0754", "patch": "@@ -3,6 +3,7 @@\n #include <algorithm>\n #include <cassert>\n #include <cstdlib>\n+#include <new>\n #include <stdint.h>\n \n #include \"rust_internal.h\"\n@@ -18,9 +19,20 @@\n #define DPRINT(fmt,...)\n \n //const size_t DEFAULT_CHUNK_SIZE = 4096;\n-const size_t DEFAULT_CHUNK_SIZE = 300000;\n+const size_t DEFAULT_CHUNK_SIZE = 500000;\n const size_t DEFAULT_ALIGNMENT = 16;\n \n+// A single type-tagged allocation in a chunk.\n+struct rust_obstack_alloc {\n+    size_t len;\n+    const type_desc *tydesc;\n+    uint8_t data[];\n+\n+    rust_obstack_alloc(size_t in_len, const type_desc *in_tydesc)\n+    : len(in_len), tydesc(in_tydesc) {}\n+};\n+\n+// A contiguous set of allocations.\n struct rust_obstack_chunk {\n     rust_obstack_chunk *prev;\n     size_t size;\n@@ -31,22 +43,24 @@ struct rust_obstack_chunk {\n     rust_obstack_chunk(rust_obstack_chunk *in_prev, size_t in_size)\n     : prev(in_prev), size(in_size), alen(0) {}\n \n-    void *alloc(size_t len);\n+    void *alloc(size_t len, type_desc *tydesc);\n     bool free(void *ptr);\n+    void *mark();\n };\n \n void *\n-rust_obstack_chunk::alloc(size_t len) {\n+rust_obstack_chunk::alloc(size_t len, type_desc *tydesc) {\n     alen = align_to(alen, DEFAULT_ALIGNMENT);\n \n-    if (len > size - alen) {\n+    if (sizeof(rust_obstack_alloc) + len > size - alen) {\n         DPRINT(\"Not enough space, len=%lu!\\n\", len);\n         assert(0);\n         return NULL;    // Not enough space.\n     }\n-    void *result = data + alen;\n-    alen += len;\n-    return result;\n+\n+    rust_obstack_alloc *a = new(data + alen) rust_obstack_alloc(len, tydesc);\n+    alen += sizeof(*a) + len;\n+    return &a->data;\n }\n \n bool\n@@ -59,14 +73,20 @@ rust_obstack_chunk::free(void *ptr) {\n     return true;\n }\n \n+void *\n+rust_obstack_chunk::mark() {\n+    return data + alen;\n+}\n+\n // Allocates the given number of bytes in a new chunk.\n void *\n-rust_obstack::alloc_new(size_t len) {\n-    size_t chunk_size = std::max(len, DEFAULT_CHUNK_SIZE);\n+rust_obstack::alloc_new(size_t len, type_desc *tydesc) {\n+    size_t chunk_size = std::max(sizeof(rust_obstack_alloc) + len,\n+                                 DEFAULT_CHUNK_SIZE);\n     void *ptr = task->malloc(sizeof(chunk) + chunk_size, \"obstack\");\n     DPRINT(\"making new chunk at %p, len %lu\\n\", ptr, chunk_size);\n     chunk = new(ptr) rust_obstack_chunk(chunk, chunk_size);\n-    return chunk->alloc(len);\n+    return chunk->alloc(len, tydesc);\n }\n \n rust_obstack::~rust_obstack() {\n@@ -78,14 +98,14 @@ rust_obstack::~rust_obstack() {\n }\n \n void *\n-rust_obstack::alloc(size_t len) {\n+rust_obstack::alloc(size_t len, type_desc *tydesc) {\n     if (!chunk)\n-        return alloc_new(len);\n+        return alloc_new(len, tydesc);\n \n     DPRINT(\"alloc sz %u\", (uint32_t)len);\n \n-    void *ptr = chunk->alloc(len);\n-    ptr = ptr ? ptr : alloc_new(len);\n+    void *ptr = chunk->alloc(len, tydesc);\n+    ptr = ptr ? ptr : alloc_new(len, tydesc);\n \n     return ptr;\n }\n@@ -107,3 +127,8 @@ rust_obstack::free(void *ptr) {\n     }\n }\n \n+void *\n+rust_obstack::mark() {\n+    return chunk ? chunk->mark() : NULL;\n+}\n+"}, {"sha": "6483a5f8d11afb13b989c208628708ee8853ef83", "filename": "src/rt/rust_obstack.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/614a930c51d8e8f66e6893261616a449d9ab0754/src%2Frt%2Frust_obstack.h", "raw_url": "https://github.com/rust-lang/rust/raw/614a930c51d8e8f66e6893261616a449d9ab0754/src%2Frt%2Frust_obstack.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_obstack.h?ref=614a930c51d8e8f66e6893261616a449d9ab0754", "patch": "@@ -5,20 +5,22 @@\n \n struct rust_obstack_chunk;\n struct rust_task;\n+struct type_desc;\n \n class rust_obstack {\n     rust_obstack_chunk *chunk;\n     rust_task *task;\n \n     // Allocates the given number of bytes in a new chunk.\n-    void *alloc_new(size_t len);\n+    void *alloc_new(size_t len, type_desc *tydesc);\n \n public:\n     rust_obstack(rust_task *in_task) : chunk(NULL), task(in_task) {}\n     ~rust_obstack();\n \n-    void *alloc(size_t len);\n+    void *alloc(size_t len, type_desc *tydesc);\n     void free(void *ptr);\n+    void *mark();\n };\n \n #endif"}, {"sha": "98dd9136d9dceda46f9699bfc4631b33b8054f70", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/614a930c51d8e8f66e6893261616a449d9ab0754/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/614a930c51d8e8f66e6893261616a449d9ab0754/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=614a930c51d8e8f66e6893261616a449d9ab0754", "patch": "@@ -368,13 +368,26 @@ upcall_vec_push(rust_task* task, rust_vec** vp, type_desc* elt_ty,\n  */\n extern \"C\" CDECL void *\n upcall_dynastack_mark(rust_task *task) {\n-    return task->dynastack.alloc(0);\n+    return task->dynastack.mark();\n }\n \n-/** Allocates space in the dynamic stack and returns it. */\n+/**\n+ * Allocates space in the dynamic stack and returns it.\n+ *\n+ * FIXME: Deprecated since dynamic stacks need to be self-describing for GC.\n+ */\n extern \"C\" CDECL void *\n upcall_dynastack_alloc(rust_task *task, size_t sz) {\n-    return sz ? task->dynastack.alloc(sz) : NULL;\n+    return sz ? task->dynastack.alloc(sz, NULL) : NULL;\n+}\n+\n+/**\n+ * Allocates space associated with a type descriptor in the dynamic stack and\n+ * returns it.\n+ */\n+extern \"C\" CDECL void *\n+upcall_dynastack_alloc_2(rust_task *task, size_t sz, type_desc *ty) {\n+    return sz ? task->dynastack.alloc(sz, ty) : NULL;\n }\n \n /** Frees space in the dynamic stack. */"}, {"sha": "3bfad837555f05a6466c2c2ff068cb58f394f23b", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/614a930c51d8e8f66e6893261616a449d9ab0754/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/614a930c51d8e8f66e6893261616a449d9ab0754/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=614a930c51d8e8f66e6893261616a449d9ab0754", "patch": "@@ -77,6 +77,7 @@ task_join\n unsupervise\n upcall_cmp_type\n upcall_dynastack_alloc\n+upcall_dynastack_alloc_2\n upcall_dynastack_free\n upcall_dynastack_mark\n upcall_exit"}]}