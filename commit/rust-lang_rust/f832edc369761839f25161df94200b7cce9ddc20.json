{"sha": "f832edc369761839f25161df94200b7cce9ddc20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MzJlZGMzNjk3NjE4MzlmMjUxNjFkZjk0MjAwYjdjY2U5ZGRjMjA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-04T22:16:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-05T18:44:38Z"}, "message": "require a non-semi expr acting as a stmt to have unit return type", "tree": {"sha": "0637da37218224a4ffe12032567b272aa9135f30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0637da37218224a4ffe12032567b272aa9135f30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f832edc369761839f25161df94200b7cce9ddc20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f832edc369761839f25161df94200b7cce9ddc20", "html_url": "https://github.com/rust-lang/rust/commit/f832edc369761839f25161df94200b7cce9ddc20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f832edc369761839f25161df94200b7cce9ddc20/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37ba5f3b3252aceb28c037021225bbb6a27006f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/37ba5f3b3252aceb28c037021225bbb6a27006f3", "html_url": "https://github.com/rust-lang/rust/commit/37ba5f3b3252aceb28c037021225bbb6a27006f3"}], "stats": {"total": 155, "additions": 89, "deletions": 66}, "files": [{"sha": "570c18b857c9607b134c7ab2128775e6e7d43503", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -318,7 +318,7 @@ fn mk_test_wrapper(cx: test_ctxt,\n     };\n \n     let call_stmt: ast::stmt = nospan(\n-        ast::stmt_expr(@call_expr, cx.sess.next_node_id()));\n+        ast::stmt_semi(@call_expr, cx.sess.next_node_id()));\n \n     let wrapper_decl: ast::fn_decl = {\n         inputs: [],"}, {"sha": "a6a67bb0158849c7a7c6806f6b1f4aecd1c8dbec", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -155,7 +155,7 @@ fn visit_block(cx: @ctx, b: ast::blk, sc: scope, v: vt<scope>) {\n                 }\n             }\n           }\n-          ast::stmt_expr(ex, _) {\n+          ast::stmt_expr(ex, _) | ast::stmt_semi(ex, _) {\n             v.visit_expr(ex, sc, v);\n           }\n         }"}, {"sha": "1160c8de627f4d342ca9ca3afa34396ff6f6ecfb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -4053,7 +4053,9 @@ fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> @block_ctxt {\n     debuginfo::update_source_pos(cx, s.span);\n \n     alt s.node {\n-      ast::stmt_expr(e, _) { bcx = trans_expr(cx, e, ignore); }\n+      ast::stmt_expr(e, _) | ast::stmt_semi(e, _) {\n+        bcx = trans_expr(cx, e, ignore);\n+      }\n       ast::stmt_decl(d, _) {\n         alt d.node {\n           ast::decl_local(locals) {"}, {"sha": "d4dbf830a5f301d7cdba11d8e8afbe74f04eaaec", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -14,14 +14,9 @@ fn collect_ids_block(b: blk, rs: @mutable [node_id]) { *rs += [b.node.id]; }\n \n fn collect_ids_stmt(s: @stmt, rs: @mutable [node_id]) {\n     alt s.node {\n-      stmt_decl(_, id) {\n+      stmt_decl(_, id) | stmt_expr(_, id) | stmt_semi(_, id) {\n         log(debug, \"node_id \" + int::str(id));\n-        log_stmt(*s);;\n-        *rs += [id];\n-      }\n-      stmt_expr(_, id) {\n-        log(debug, \"node_id \" + int::str(id));\n-        log_stmt(*s);;\n+        log_stmt(*s);\n         *rs += [id];\n       }\n       _ { }"}, {"sha": "e0134eaa4ebe3daf9d57b999b52ad617d7356091", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -324,8 +324,9 @@ fn node_id_to_poststate(ccx: crate_ctxt, id: node_id) -> poststate {\n fn stmt_to_ann(ccx: crate_ctxt, s: stmt) -> ts_ann {\n     #debug(\"stmt_to_ann\");\n     alt s.node {\n-      stmt_decl(_, id) { ret node_id_to_ts_ann(ccx, id); }\n-      stmt_expr(_, id) { ret node_id_to_ts_ann(ccx, id); }\n+      stmt_decl(_, id) | stmt_expr(_, id) | stmt_semi(_, id) {\n+        ret node_id_to_ts_ann(ccx, id);\n+      }\n     }\n }\n "}, {"sha": "89d18ca2c2d666914095ee41842623e3f8b9c63b", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -647,7 +647,7 @@ fn find_pre_post_stmt(fcx: fn_ctxt, s: stmt) {\n           }\n         }\n       }\n-      stmt_expr(e, id) {\n+      stmt_expr(e, id) | stmt_semi(e, id) {\n         find_pre_post_expr(fcx, e);\n         copy_pre_post(fcx.ccx, id, e);\n       }"}, {"sha": "e2927174b560a75f8b3d2902f38a9223a34df1fe", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -664,7 +664,7 @@ fn find_pre_post_state_stmt(fcx: fn_ctxt, pres: prestate, s: @stmt) -> bool {\n           }\n         }\n       }\n-      stmt_expr(ex, _) {\n+      stmt_expr(ex, _) | stmt_semi(ex, _) {\n         let changed =\n             find_pre_post_state_expr(fcx, pres, ex) |\n                 set_prestate(stmt_ann, expr_prestate(fcx.ccx, ex)) |"}, {"sha": "6c90c212ddde38966a40507e685226545df398c9", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -1660,8 +1660,9 @@ fn expr_is_lval(method_map: typeck::method_map, tcx: ty::ctxt,\n \n fn stmt_node_id(s: @ast::stmt) -> ast::node_id {\n     alt s.node {\n-      ast::stmt_decl(_, id) { ret id; }\n-      ast::stmt_expr(_, id) { ret id; }\n+      ast::stmt_decl(_, id) | stmt_expr(_, id) | stmt_semi(_, id) {\n+        ret id;\n+      }\n     }\n }\n "}, {"sha": "7037fa3ff30b9cd55eb4c2e0e2df2659d96235aa", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -2539,7 +2539,14 @@ fn check_stmt(fcx: @fn_ctxt, stmt: @ast::stmt) -> bool {\n           ast::decl_item(_) {/* ignore for now */ }\n         }\n       }\n-      ast::stmt_expr(expr, id) { node_id = id; bot = check_expr(fcx, expr); }\n+      ast::stmt_expr(expr, id) {\n+        node_id = id;\n+        bot = check_expr_with(fcx, expr, ty::mk_nil(fcx.ccx.tcx));\n+      }\n+      ast::stmt_semi(expr, id) {\n+        node_id = id;\n+        bot = check_expr(fcx, expr);\n+      }\n     }\n     write::nil_ty(fcx.ccx.tcx, node_id);\n     ret bot;\n@@ -2567,7 +2574,7 @@ fn check_block(fcx0: @fn_ctxt, blk: ast::blk) -> bool {\n         if bot && !warned &&\n                alt s.node {\n                  ast::stmt_decl(@{node: ast::decl_local(_), _}, _) |\n-                 ast::stmt_expr(_, _) {\n+                 ast::stmt_expr(_, _) | ast::stmt_semi(_, _) {\n                    true\n                  }\n                  _ { false }"}, {"sha": "c5e9a13616fd18fc722fe1317b58773c4b954683", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -156,7 +156,12 @@ type stmt = spanned<stmt_>;\n \n tag stmt_ {\n     stmt_decl(@decl, node_id);\n+\n+    // expr without trailing semi-colon (must have unit type):\n     stmt_expr(@expr, node_id);\n+\n+    // expr with trailing semi-colon (may have any type):\n+    stmt_semi(@expr, node_id);\n }\n \n tag init_op { init_assign; init_move; }"}, {"sha": "ff6a401227307bc6f663fd3afaeeb79cbe9b4a20", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -272,8 +272,9 @@ fn noop_fold_block(b: blk_, fld: ast_fold) -> blk_ {\n \n fn noop_fold_stmt(s: stmt_, fld: ast_fold) -> stmt_ {\n     ret alt s {\n-          stmt_decl(d, nid) { stmt_decl(fld.fold_decl(d), nid) }\n-          stmt_expr(e, nid) { stmt_expr(fld.fold_expr(e), nid) }\n+      stmt_decl(d, nid) { stmt_decl(fld.fold_decl(d), nid) }\n+      stmt_expr(e, nid) { stmt_expr(fld.fold_expr(e), nid) }\n+      stmt_semi(e, nid) { stmt_semi(fld.fold_expr(e), nid) }\n     };\n }\n "}, {"sha": "6a59b395ab4bfdc493e99449c7ce7fec512835ab", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -1639,13 +1639,6 @@ fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n     }\n }\n \n-fn stmt_to_expr(stmt: @ast::stmt) -> option::t<@ast::expr> {\n-    alt stmt.node {\n-      ast::stmt_expr(e, _) { some(e) }\n-      _ { none }\n-    }\n-}\n-\n fn stmt_ends_with_semi(stmt: ast::stmt) -> bool {\n     alt stmt.node {\n       ast::stmt_decl(d, _) {\n@@ -1657,6 +1650,9 @@ fn stmt_ends_with_semi(stmt: ast::stmt) -> bool {\n       ast::stmt_expr(e, _) {\n         ret expr_requires_semi_to_be_stmt(e);\n       }\n+      ast::stmt_semi(e, _) {\n+        ret false;\n+      }\n     }\n }\n \n@@ -1695,11 +1691,16 @@ fn parse_block_tail(p: parser, lo: uint, s: ast::blk_check_mode) -> ast::blk {\n           }\n           _ {\n             let stmt = parse_stmt(p);\n-            alt stmt_to_expr(stmt) {\n-              some(e) {\n+            alt stmt.node {\n+              ast::stmt_expr(e, stmt_id) { // Expression without semicolon:\n                 alt p.peek() {\n-                  token::SEMI. { p.bump(); stmts += [stmt]; }\n-                  token::RBRACE. { expr = some(e); }\n+                  token::SEMI. {\n+                    p.bump();\n+                    stmts += [@{node: ast::stmt_semi(e, stmt_id) with *stmt}];\n+                  }\n+                  token::RBRACE. {\n+                    expr = some(e);\n+                  }\n                   t {\n                     if stmt_ends_with_semi(*stmt) {\n                         p.fatal(\"expected ';' or '}' after expression but \\\n@@ -1710,8 +1711,8 @@ fn parse_block_tail(p: parser, lo: uint, s: ast::blk_check_mode) -> ast::blk {\n                   }\n                 }\n               }\n-              none. {\n-                // Not an expression statement.\n+\n+              _ { // All other kinds of statements:\n                 stmts += [stmt];\n \n                 if stmt_ends_with_semi(*stmt) {"}, {"sha": "f54771be5728f3cba55c6b297783080cfa4dc0c6", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -569,6 +569,11 @@ fn print_stmt(s: ps, st: ast::stmt) {\n         space_if_not_bol(s);\n         print_tl_expr(s, expr);\n       }\n+      ast::stmt_semi(expr, _) {\n+        space_if_not_bol(s);\n+        print_tl_expr(s, expr);\n+        word(s.s, \";\");\n+      }\n     }\n     if parse::parser::stmt_ends_with_semi(st) { word(s.s, \";\"); }\n     maybe_print_trailing_comment(s, st.span, none::<uint>);"}, {"sha": "7fec9e97e06ca26afd1f094b4846000942835300", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -262,6 +262,7 @@ fn visit_stmt<E>(s: @stmt, e: E, v: vt<E>) {\n     alt s.node {\n       stmt_decl(d, _) { v.visit_decl(d, e, v); }\n       stmt_expr(ex, _) { v.visit_expr(ex, e, v); }\n+      stmt_semi(ex, _) { v.visit_expr(ex, e, v); }\n     }\n }\n "}, {"sha": "ccdc29f004a12a0224fcb6d3cdcedd272d70114b", "filename": "src/test/compile-fail/block-arg-as-stmt-with-value.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -0,0 +1,13 @@\n+\n+fn compute1() -> float {\n+    let v = [0f, 1f, 2f, 3f];\n+\n+    vec::foldl(0f, v) { |x, y| x + y } - 10f\n+    //!^ ERROR mismatched types: expected `()`\n+}\n+\n+fn main() {\n+    let x = compute1();\n+    log(debug, x);\n+    assert(y == -4f);\n+}"}, {"sha": "53187408af112291ad0b39dd3aec3275200b17c9", "filename": "src/test/run-pass/block-arg-as-stmt.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/37ba5f3b3252aceb28c037021225bbb6a27006f3/src%2Ftest%2Frun-pass%2Fblock-arg-as-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba5f3b3252aceb28c037021225bbb6a27006f3/src%2Ftest%2Frun-pass%2Fblock-arg-as-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-as-stmt.rs?ref=37ba5f3b3252aceb28c037021225bbb6a27006f3", "patch": "@@ -1,25 +0,0 @@\n-\n-fn compute1() -> float {\n-    let v = [0f, 1f, 2f, 3f];\n-\n-    // Here the \"-10f\" parses as a second\n-    // statement in tail position:\n-    vec::foldl(0f, v) { |x, y| x + y } - 10f\n-}\n-\n-fn compute2() -> float {\n-    let v = [0f, 1f, 2f, 3f];\n-\n-    // Here the ret makes this explicit:\n-    ret vec::foldl(0f, v) { |x, y| x + y } - 10f;\n-}\n-\n-fn main() {\n-    let x = compute1();\n-    log(debug, x);\n-    assert(x == -10f);\n-\n-    let y = compute2();\n-    log(debug, y);\n-    assert(y == -4f);\n-}"}, {"sha": "4a5a0fbea07352cea87d42470a0464fa9d780834", "filename": "src/test/run-pass/block-arg-in-parentheses.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -1,21 +1,26 @@\n fn w_semi(v: [int]) -> int {\n+    // the semicolon causes compiler not to\n+    // complain about the ignored return value:\n     vec::foldl(0, v) {|x,y| x+y};\n     -10\n }\n \n-fn wo_paren(v: [int]) -> int {\n-    // Perhaps surprising: this is parsed equivalently to w_semi()\n-    vec::foldl(0, v) {|x,y| x+y} - 10\n+fn w_paren1(v: [int]) -> int {\n+    (vec::foldl(0, v) {|x,y| x+y}) - 10\n }\n \n-fn w_paren(v: [int]) -> int {\n-    // Here the parentheses force interpretation as an expression:\n-    (vec::foldl(0, v) {|x,y| x+y}) - 10\n+fn w_paren2(v: [int]) -> int {\n+    (vec::foldl(0, v) {|x,y| x+y} - 10)\n+}\n+\n+fn w_ret(v: [int]) -> int {\n+    ret vec::foldl(0, v) {|x,y| x+y} - 10;\n }\n \n fn main() {\n-    assert wo_paren([0, 1, 2, 3]) == -10;\n     assert w_semi([0, 1, 2, 3]) == -10;\n-    assert w_paren([0, 1, 2, 3]) == -4;\n+    assert w_paren1([0, 1, 2, 3]) == -4;\n+    assert w_paren2([0, 1, 2, 3]) == -4;\n+    assert w_ret([0, 1, 2, 3]) == -4;\n }\n "}, {"sha": "aaef6e8e366de8bf897ff90a22536c28262b922e", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f832edc369761839f25161df94200b7cce9ddc20/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f832edc369761839f25161df94200b7cce9ddc20/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=f832edc369761839f25161df94200b7cce9ddc20", "patch": "@@ -0,0 +1,11 @@\n+// Make sure #1399 stays fixed\n+\n+fn foo() -> lambda() -> int {\n+    let k = ~22;\n+    let _u = {a: k};\n+    ret lambda[move k]() -> int { 22 };\n+}\n+\n+fn main() {\n+    assert foo()() == 22;\n+}"}]}