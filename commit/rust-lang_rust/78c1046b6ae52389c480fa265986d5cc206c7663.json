{"sha": "78c1046b6ae52389c480fa265986d5cc206c7663", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YzEwNDZiNmFlNTIzODljNDgwZmEyNjU5ODZkNWNjMjA2Yzc2NjM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-12-03T20:39:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-03T20:39:52Z"}, "message": "Rollup merge of #38029 - dns2utf8:fix_verify.rs, r=petrochenkov\n\nFix verify.rs\n\nFinishing d2f8fb0 from @jseyfried", "tree": {"sha": "4495d6fbd7dd755ccd65f7510125e2e087adba14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4495d6fbd7dd755ccd65f7510125e2e087adba14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78c1046b6ae52389c480fa265986d5cc206c7663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78c1046b6ae52389c480fa265986d5cc206c7663", "html_url": "https://github.com/rust-lang/rust/commit/78c1046b6ae52389c480fa265986d5cc206c7663", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78c1046b6ae52389c480fa265986d5cc206c7663/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca0c8395a00dcb57549fa1a8a407185b4a2a54c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0c8395a00dcb57549fa1a8a407185b4a2a54c0", "html_url": "https://github.com/rust-lang/rust/commit/ca0c8395a00dcb57549fa1a8a407185b4a2a54c0"}, {"sha": "28b64dc1b955afd6e89b21499dfa1fd1d452e31c", "url": "https://api.github.com/repos/rust-lang/rust/commits/28b64dc1b955afd6e89b21499dfa1fd1d452e31c", "html_url": "https://github.com/rust-lang/rust/commit/28b64dc1b955afd6e89b21499dfa1fd1d452e31c"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "919fc98e438c52a0ceb21bf41f38d2fecd48a274", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/78c1046b6ae52389c480fa265986d5cc206c7663/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c1046b6ae52389c480fa265986d5cc206c7663/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=78c1046b6ae52389c480fa265986d5cc206c7663", "patch": "@@ -23,23 +23,23 @@ use std::fs::File;\n use std::io::{BufRead, Read};\n use std::path::Path;\n \n-use syntax::parse;\n use syntax::parse::lexer;\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config};\n use rustc::middle::cstore::DummyCrateStore;\n \n use std::rc::Rc;\n use syntax::ast;\n-use syntax::ast::Name;\n use syntax::codemap;\n use syntax::parse::token::{self, BinOpToken, DelimToken, Lit, Token};\n use syntax::parse::lexer::TokenAndSpan;\n use syntax_pos::Pos;\n \n+use syntax::symbol::{Symbol, keywords};\n+\n fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n     fn id() -> token::Token {\n-        Token::Ident(ast::Ident::with_empty_ctxt(Name(0)))\n+        Token::Ident(ast::Ident::with_empty_ctxt(keywords::Invalid.name()))\n     }\n \n     let mut res = HashMap::new();\n@@ -65,7 +65,7 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"SHL\"               => Token::BinOp(BinOpToken::Shl),\n             \"LBRACE\"            => Token::OpenDelim(DelimToken::Brace),\n             \"RARROW\"            => Token::RArrow,\n-            \"LIT_STR\"           => Token::Literal(Lit::Str_(Name(0)), None),\n+            \"LIT_STR\"           => Token::Literal(Lit::Str_(keywords::Invalid.name()), None),\n             \"DOTDOT\"            => Token::DotDot,\n             \"MOD_SEP\"           => Token::ModSep,\n             \"DOTDOTDOT\"         => Token::DotDotDot,\n@@ -75,21 +75,22 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"ANDAND\"            => Token::AndAnd,\n             \"AT\"                => Token::At,\n             \"LBRACKET\"          => Token::OpenDelim(DelimToken::Bracket),\n-            \"LIT_STR_RAW\"       => Token::Literal(Lit::StrRaw(Name(0), 0), None),\n+            \"LIT_STR_RAW\"       => Token::Literal(Lit::StrRaw(keywords::Invalid.name(), 0), None),\n             \"RPAREN\"            => Token::CloseDelim(DelimToken::Paren),\n             \"SLASH\"             => Token::BinOp(BinOpToken::Slash),\n             \"COMMA\"             => Token::Comma,\n-            \"LIFETIME\"          => Token::Lifetime(ast::Ident::with_empty_ctxt(Name(0))),\n+            \"LIFETIME\"          => Token::Lifetime(\n+                                            ast::Ident::with_empty_ctxt(keywords::Invalid.name())),\n             \"CARET\"             => Token::BinOp(BinOpToken::Caret),\n             \"TILDE\"             => Token::Tilde,\n             \"IDENT\"             => id(),\n             \"PLUS\"              => Token::BinOp(BinOpToken::Plus),\n-            \"LIT_CHAR\"          => Token::Literal(Lit::Char(Name(0)), None),\n-            \"LIT_BYTE\"          => Token::Literal(Lit::Byte(Name(0)), None),\n+            \"LIT_CHAR\"          => Token::Literal(Lit::Char(keywords::Invalid.name()), None),\n+            \"LIT_BYTE\"          => Token::Literal(Lit::Byte(keywords::Invalid.name()), None),\n             \"EQ\"                => Token::Eq,\n             \"RBRACKET\"          => Token::CloseDelim(DelimToken::Bracket),\n             \"COMMENT\"           => Token::Comment,\n-            \"DOC_COMMENT\"       => Token::DocComment(Name(0)),\n+            \"DOC_COMMENT\"       => Token::DocComment(keywords::Invalid.name()),\n             \"DOT\"               => Token::Dot,\n             \"EQEQ\"              => Token::EqEq,\n             \"NE\"                => Token::Ne,\n@@ -99,9 +100,9 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"BINOP\"             => Token::BinOp(BinOpToken::Plus),\n             \"POUND\"             => Token::Pound,\n             \"OROR\"              => Token::OrOr,\n-            \"LIT_INTEGER\"       => Token::Literal(Lit::Integer(Name(0)), None),\n+            \"LIT_INTEGER\"       => Token::Literal(Lit::Integer(keywords::Invalid.name()), None),\n             \"BINOPEQ\"           => Token::BinOpEq(BinOpToken::Plus),\n-            \"LIT_FLOAT\"         => Token::Literal(Lit::Float(Name(0)), None),\n+            \"LIT_FLOAT\"         => Token::Literal(Lit::Float(keywords::Invalid.name()), None),\n             \"WHITESPACE\"        => Token::Whitespace,\n             \"UNDERSCORE\"        => Token::Underscore,\n             \"MINUS\"             => Token::BinOp(BinOpToken::Minus),\n@@ -111,10 +112,11 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"OR\"                => Token::BinOp(BinOpToken::Or),\n             \"GT\"                => Token::Gt,\n             \"LE\"                => Token::Le,\n-            \"LIT_BINARY\"        => Token::Literal(Lit::ByteStr(Name(0)), None),\n-            \"LIT_BINARY_RAW\"    => Token::Literal(Lit::ByteStrRaw(Name(0), 0), None),\n+            \"LIT_BINARY\"        => Token::Literal(Lit::ByteStr(keywords::Invalid.name()), None),\n+            \"LIT_BINARY_RAW\"    => Token::Literal(\n+                                            Lit::ByteStrRaw(keywords::Invalid.name(), 0), None),\n             \"QUESTION\"          => Token::Question,\n-            \"SHEBANG\"           => Token::Shebang(Name(0)),\n+            \"SHEBANG\"           => Token::Shebang(keywords::Invalid.name()),\n             _                   => continue,\n         };\n \n@@ -158,7 +160,7 @@ fn fix(mut lit: &str) -> ast::Name {\n     let leading_hashes = count(lit);\n \n     // +1/-1 to adjust for single quotes\n-    parse::token::intern(&lit[leading_hashes + 1..lit.len() - leading_hashes - 1])\n+    Symbol::intern(&lit[leading_hashes + 1..lit.len() - leading_hashes - 1])\n }\n \n /// Assuming a char/byte literal, strip the 'b' prefix and the single quotes.\n@@ -168,7 +170,7 @@ fn fixchar(mut lit: &str) -> ast::Name {\n         lit = &lit[1..];\n     }\n \n-    parse::token::intern(&lit[1..lit.len() - 1])\n+    Symbol::intern(&lit[1..lit.len() - 1])\n }\n \n fn count(lit: &str) -> usize {\n@@ -196,7 +198,7 @@ fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>, surrogate_\n     let not_found = format!(\"didn't find token {:?} in the map\", toknum);\n     let proto_tok = tokens.get(toknum).expect(&not_found[..]);\n \n-    let nm = parse::token::intern(content);\n+    let nm = Symbol::intern(content);\n \n     debug!(\"What we got: content (`{}`), proto: {:?}\", content, proto_tok);\n "}]}