{"sha": "bf37de9fc675a90d12c37fd0e8acdfe4107545f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMzdkZTlmYzY3NWE5MGQxMmMzN2ZkMGU4YWNkZmU0MTA3NTQ1Zjk=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-09-11T09:08:44Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-09-15T10:28:25Z"}, "message": "debuginfo: Basic support for trait objects.", "tree": {"sha": "86d3da6715392e8cfdb41c11f5eedf1f7dda899a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86d3da6715392e8cfdb41c11f5eedf1f7dda899a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf37de9fc675a90d12c37fd0e8acdfe4107545f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf37de9fc675a90d12c37fd0e8acdfe4107545f9", "html_url": "https://github.com/rust-lang/rust/commit/bf37de9fc675a90d12c37fd0e8acdfe4107545f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf37de9fc675a90d12c37fd0e8acdfe4107545f9/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ecb0a372d4b246f694bf780d50809dc0fb32018", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecb0a372d4b246f694bf780d50809dc0fb32018", "html_url": "https://github.com/rust-lang/rust/commit/4ecb0a372d4b246f694bf780d50809dc0fb32018"}], "stats": {"total": 112, "additions": 96, "deletions": 16}, "files": [{"sha": "34da9a7af0edd7008e1e737b3740bff8bfac3f71", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 51, "deletions": 15, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/bf37de9fc675a90d12c37fd0e8acdfe4107545f9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf37de9fc675a90d12c37fd0e8acdfe4107545f9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=bf37de9fc675a90d12c37fd0e8acdfe4107545f9", "patch": "@@ -60,7 +60,7 @@ use middle::trans::adt;\n use middle::trans;\n use middle::ty;\n use middle::pat_util;\n-use util::ppaux::ty_to_str;\n+use util::ppaux;\n \n use std::c_str::ToCStr;\n use std::hashmap::HashMap;\n@@ -742,7 +742,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n                                                           codemap::dummy_sp());\n \n             // Add self type name to <...> clause of function name\n-            let actual_self_type_name = ty_to_str(cx.tcx, actual_self_type);\n+            let actual_self_type_name = ppaux::ty_to_str(cx.tcx, actual_self_type);\n             name_to_append_suffix_to.push_str(actual_self_type_name);\n             if generics.is_type_parameterized() {\n                 name_to_append_suffix_to.push_str(\",\");\n@@ -779,7 +779,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n             let actual_type_metadata = type_metadata(cx, actual_type, codemap::dummy_sp());\n \n             // Add actual type name to <...> clause of function name\n-            let actual_type_name = ty_to_str(cx.tcx, actual_type);\n+            let actual_type_name = ppaux::ty_to_str(cx.tcx, actual_type);\n             name_to_append_suffix_to.push_str(actual_type_name);\n \n             if index != generics.ty_params.len() - 1 {\n@@ -1039,7 +1039,7 @@ fn pointer_type_metadata(cx: &mut CrateContext,\n                       -> DIType {\n     let pointer_llvm_type = type_of::type_of(cx, pointer_type);\n     let (pointer_size, pointer_align) = size_and_align_of(cx, pointer_llvm_type);\n-    let name = ty_to_str(cx.tcx, pointer_type);\n+    let name = ppaux::ty_to_str(cx.tcx, pointer_type);\n     let ptr_metadata = do name.with_c_str |name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreatePointerType(\n@@ -1059,7 +1059,7 @@ fn struct_metadata(cx: &mut CrateContext,\n                    substs: &ty::substs,\n                    span: Span)\n                 -> DICompositeType {\n-    let struct_name = ty_to_str(cx.tcx, struct_type);\n+    let struct_name = ppaux::ty_to_str(cx.tcx, struct_type);\n     debug!(\"struct_metadata: %s\", struct_name);\n \n     let struct_llvm_type = type_of::type_of(cx, struct_type);\n@@ -1098,7 +1098,7 @@ fn tuple_metadata(cx: &mut CrateContext,\n                   component_types: &[ty::t],\n                   span: Span)\n                -> DICompositeType {\n-    let tuple_name = ty_to_str(cx.tcx, tuple_type);\n+    let tuple_name = ppaux::ty_to_str(cx.tcx, tuple_type);\n     let tuple_llvm_type = type_of::type_of(cx, tuple_type);\n \n     let component_descriptions = do component_types.map |&component_type| {\n@@ -1127,7 +1127,7 @@ fn enum_metadata(cx: &mut CrateContext,\n                  enum_def_id: ast::DefId,\n                  span: Span)\n               -> DIType {\n-    let enum_name = ty_to_str(cx.tcx, enum_type);\n+    let enum_name = ppaux::ty_to_str(cx.tcx, enum_type);\n \n     let (containing_scope, definition_span) = get_namespace_and_span_for_item(cx,\n                                                                               enum_def_id,\n@@ -1502,7 +1502,7 @@ fn vec_metadata(cx: &mut CrateContext,\n     let (element_size, element_align) = size_and_align_of(cx, element_llvm_type);\n \n     let vec_llvm_type = Type::vec(cx.sess.targ_cfg.arch, &element_llvm_type);\n-    let vec_type_name: &str = fmt!(\"[%s]\", ty_to_str(cx.tcx, element_type));\n+    let vec_type_name: &str = fmt!(\"[%s]\", ppaux::ty_to_str(cx.tcx, element_type));\n \n     let member_llvm_types = vec_llvm_type.field_types();\n \n@@ -1556,7 +1556,7 @@ fn boxed_vec_metadata(cx: &mut CrateContext,\n \n     let element_llvm_type = type_of::type_of(cx, element_type);\n     let vec_llvm_type = Type::vec(cx.sess.targ_cfg.arch, &element_llvm_type);\n-    let vec_type_name: &str = fmt!(\"[%s]\", ty_to_str(cx.tcx, element_type));\n+    let vec_type_name: &str = fmt!(\"[%s]\", ppaux::ty_to_str(cx.tcx, element_type));\n     let vec_metadata = vec_metadata(cx, element_type, span);\n \n     return boxed_type_metadata(\n@@ -1576,7 +1576,7 @@ fn vec_slice_metadata(cx: &mut CrateContext,\n     debug!(\"vec_slice_metadata: %?\", ty::get(vec_type));\n \n     let slice_llvm_type = type_of::type_of(cx, vec_type);\n-    let slice_type_name = ty_to_str(cx.tcx, vec_type);\n+    let slice_type_name = ppaux::ty_to_str(cx.tcx, vec_type);\n \n     let member_llvm_types = slice_llvm_type.field_types();\n     assert!(slice_layout_is_correct(cx, member_llvm_types, element_type));\n@@ -1648,10 +1648,47 @@ fn subroutine_type_metadata(cx: &mut CrateContext,\n     };\n }\n \n+fn trait_metadata(cx: &mut CrateContext,\n+                  def_id: ast::DefId,\n+                  trait_type: ty::t,\n+                  substs: &ty::substs,\n+                  trait_store: ty::TraitStore,\n+                  mutability: ast::Mutability,\n+                  builtinBounds: &ty::BuiltinBounds,\n+                  usage_site_span: Span)\n+               -> DIType {\n+    // The implementation provided here is a stub. It makes sure that the trait type is\n+    // assigned the correct name, size, namespace, and source location. But it does not describe\n+    // the trait's methods.\n+    let path = ty::item_path(cx.tcx, def_id);\n+    let ident = path.last().ident();\n+    let name = ppaux::trait_store_to_str(cx.tcx, trait_store)\n+             + ppaux::mutability_to_str(mutability)\n+             + token::ident_to_str(&ident);\n+    // Add type and region parameters\n+    let name = ppaux::parameterized(cx.tcx, name, &substs.regions, substs.tps);\n+\n+    let (containing_scope,\n+         definition_span) = get_namespace_and_span_for_item(cx, def_id, usage_site_span);\n+\n+    let file_name = span_start(cx, definition_span).file.name;\n+    let file_metadata = file_metadata(cx, file_name);\n+\n+    let trait_llvm_type = type_of::type_of(cx, trait_type);\n+\n+    return composite_type_metadata(cx,\n+                                   trait_llvm_type,\n+                                   name,\n+                                   [],\n+                                   containing_scope,\n+                                   file_metadata,\n+                                   definition_span);\n+}\n+\n fn unimplemented_type_metadata(cx: &mut CrateContext, t: ty::t) -> DIType {\n     debug!(\"unimplemented_type_metadata: %?\", ty::get(t));\n \n-    let name = ty_to_str(cx.tcx, t);\n+    let name = ppaux::ty_to_str(cx.tcx, t);\n     let metadata = do fmt!(\"NYI<%s>\", name).with_c_str |name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreateBasicType(\n@@ -1681,7 +1718,7 @@ fn type_metadata(cx: &mut CrateContext,\n                                       type_in_box: ty::t)\n                                    -> DIType {\n \n-        let content_type_name: &str = ty_to_str(cx.tcx, type_in_box);\n+        let content_type_name: &str = ppaux::ty_to_str(cx.tcx, type_in_box);\n         let content_llvm_type = type_of::type_of(cx, type_in_box);\n         let content_type_metadata = type_metadata(\n             cx,\n@@ -1773,9 +1810,8 @@ fn type_metadata(cx: &mut CrateContext,\n         ty::ty_closure(ref closurety) => {\n             subroutine_type_metadata(cx, &closurety.sig, usage_site_span)\n         },\n-        ty::ty_trait(_did, ref _substs, ref _vstore, _, _bounds) => {\n-            cx.sess.span_note(usage_site_span, \"debuginfo for trait NYI\");\n-            unimplemented_type_metadata(cx, t)\n+        ty::ty_trait(def_id, ref substs, trait_store, mutability, ref bounds) => {\n+            trait_metadata(cx, def_id, t, substs, trait_store, mutability, bounds, usage_site_span)\n         },\n         ty::ty_struct(def_id, ref substs) => {\n             struct_metadata(cx, t, def_id, substs, usage_site_span)"}, {"sha": "9350bf8d3d9ad87b5b6e1c05187e6417ac6feec3", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf37de9fc675a90d12c37fd0e8acdfe4107545f9/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf37de9fc675a90d12c37fd0e8acdfe4107545f9/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=bf37de9fc675a90d12c37fd0e8acdfe4107545f9", "patch": "@@ -235,7 +235,7 @@ pub fn region_to_str(cx: ctxt, prefix: &str, space: bool, region: Region) -> ~st\n     }\n }\n \n-fn mutability_to_str(m: ast::Mutability) -> ~str {\n+pub fn mutability_to_str(m: ast::Mutability) -> ~str {\n     match m {\n         ast::MutMutable => ~\"mut \",\n         ast::MutImmutable => ~\"\","}, {"sha": "1323db7acba51505a3cb010fe35fae38ac62e06a", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf37de9fc675a90d12c37fd0e8acdfe4107545f9/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf37de9fc675a90d12c37fd0e8acdfe4107545f9/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=bf37de9fc675a90d12c37fd0e8acdfe4107545f9", "patch": "@@ -38,6 +38,16 @@ pub enum path_elt {\n     path_pretty_name(Ident, u64),\n }\n \n+impl path_elt {\n+    pub fn ident(&self) -> Ident {\n+        match *self {\n+            path_mod(ident)            |\n+            path_name(ident)           |\n+            path_pretty_name(ident, _) => ident\n+        }\n+    }\n+}\n+\n pub type path = ~[path_elt];\n \n pub fn path_to_str_with_sep(p: &[path_elt], sep: &str, itr: @ident_interner)"}, {"sha": "beb1096b0f4d85bad01f4699c84632d49e546cee", "filename": "src/test/debug-info/trait-pointers.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bf37de9fc675a90d12c37fd0e8acdfe4107545f9/src%2Ftest%2Fdebug-info%2Ftrait-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf37de9fc675a90d12c37fd0e8acdfe4107545f9/src%2Ftest%2Fdebug-info%2Ftrait-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftrait-pointers.rs?ref=bf37de9fc675a90d12c37fd0e8acdfe4107545f9", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:run\n+\n+#[allow(unused_variable)];\n+\n+trait Trait {\n+    fn method(&self) -> int { 0 }\n+}\n+\n+struct Struct {\n+    a: int,\n+    b: float\n+}\n+\n+impl Trait for Struct {}\n+\n+fn main() {\n+    let stack_struct = Struct { a:0, b: 1.0 };\n+    let reference: &Trait = &stack_struct as &Trait;\n+    let managed: @Trait = @Struct { a:2, b: 3.0 } as @Trait;\n+    let unique: ~Trait = ~Struct { a:2, b: 3.0 } as ~Trait;\n+}\n+\n+fn zzz() {()}"}]}