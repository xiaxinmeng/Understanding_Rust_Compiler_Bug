{"sha": "b21cc36ee92a2cf3c387b47e40faa2aa4d39fd1a", "node_id": "C_kwDOAAsO6NoAKGIyMWNjMzZlZTkyYTJjZjNjMzg3YjQ3ZTQwZmFhMmFhNGQzOWZkMWE", "commit": {"author": {"name": "chansuke", "email": "moonset20@gmail.com", "date": "2022-12-17T12:13:02Z"}, "committer": {"name": "chansuke", "email": "moonset20@gmail.com", "date": "2022-12-20T14:43:34Z"}, "message": "hotfix: add help dialog for `PermissionExt`", "tree": {"sha": "36a73c5e3e82f4e65909328663b4c2e478f620fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36a73c5e3e82f4e65909328663b4c2e478f620fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b21cc36ee92a2cf3c387b47e40faa2aa4d39fd1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b21cc36ee92a2cf3c387b47e40faa2aa4d39fd1a", "html_url": "https://github.com/rust-lang/rust/commit/b21cc36ee92a2cf3c387b47e40faa2aa4d39fd1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b21cc36ee92a2cf3c387b47e40faa2aa4d39fd1a/comments", "author": {"login": "chansuke", "id": 501052, "node_id": "MDQ6VXNlcjUwMTA1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/501052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chansuke", "html_url": "https://github.com/chansuke", "followers_url": "https://api.github.com/users/chansuke/followers", "following_url": "https://api.github.com/users/chansuke/following{/other_user}", "gists_url": "https://api.github.com/users/chansuke/gists{/gist_id}", "starred_url": "https://api.github.com/users/chansuke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chansuke/subscriptions", "organizations_url": "https://api.github.com/users/chansuke/orgs", "repos_url": "https://api.github.com/users/chansuke/repos", "events_url": "https://api.github.com/users/chansuke/events{/privacy}", "received_events_url": "https://api.github.com/users/chansuke/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chansuke", "id": 501052, "node_id": "MDQ6VXNlcjUwMTA1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/501052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chansuke", "html_url": "https://github.com/chansuke", "followers_url": "https://api.github.com/users/chansuke/followers", "following_url": "https://api.github.com/users/chansuke/following{/other_user}", "gists_url": "https://api.github.com/users/chansuke/gists{/gist_id}", "starred_url": "https://api.github.com/users/chansuke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chansuke/subscriptions", "organizations_url": "https://api.github.com/users/chansuke/orgs", "repos_url": "https://api.github.com/users/chansuke/repos", "events_url": "https://api.github.com/users/chansuke/events{/privacy}", "received_events_url": "https://api.github.com/users/chansuke/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d3c1e8f1f2d7bd819fbaafe80de74e67ebb488", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d3c1e8f1f2d7bd819fbaafe80de74e67ebb488", "html_url": "https://github.com/rust-lang/rust/commit/e1d3c1e8f1f2d7bd819fbaafe80de74e67ebb488"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "e7095ec191f7d50998e22a2eedec2e0125d6f4aa", "filename": "clippy_lints/src/permissions_set_readonly_false.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b21cc36ee92a2cf3c387b47e40faa2aa4d39fd1a/clippy_lints%2Fsrc%2Fpermissions_set_readonly_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21cc36ee92a2cf3c387b47e40faa2aa4d39fd1a/clippy_lints%2Fsrc%2Fpermissions_set_readonly_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpermissions_set_readonly_false.rs?ref=b21cc36ee92a2cf3c387b47e40faa2aa4d39fd1a", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint_and_note;\n+use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::paths;\n use clippy_utils::ty::match_type;\n use rustc_ast::ast::LitKind;\n@@ -8,11 +8,11 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for calls to `std::fs::Permissions.set_readonly` with argument `false`\n+    /// Checks for calls to `std::fs::Permissions.set_readonly` with argument `false`.\n     ///\n     /// ### Why is this bad?\n-    /// On Unix platforms this results in the file being world writable\n-    ///\n+    /// On Unix platforms this results in the file being world writable,\n+    /// equivalent to `chmod a+w <file>`.\n     /// ### Example\n     /// ```rust\n     /// use std::fs::File;\n@@ -32,18 +32,21 @@ impl<'tcx> LateLintPass<'tcx> for PermissionsSetReadonlyFalse {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         if let ExprKind::MethodCall(path, receiver, [arg], _) = &expr.kind\n             && match_type(cx, cx.typeck_results().expr_ty(receiver), &paths::PERMISSIONS)\n-                && path.ident.name == sym!(set_readonly)\n-                && let ExprKind::Lit(lit) = &arg.kind\n-                && LitKind::Bool(false) == lit.node\n+            && path.ident.name == sym!(set_readonly)\n+            && let ExprKind::Lit(lit) = &arg.kind\n+            && LitKind::Bool(false) == lit.node\n         {\n-                span_lint_and_note(\n-                    cx,\n-                    PERMISSIONS_SET_READONLY_FALSE,\n-                    expr.span,\n-                    \"call to `set_readonly` with argument `false`\",\n-                    None,\n-                    \"on Unix platforms this results in the file being world writable\",\n-                );\n+            span_lint_and_then(\n+                cx,\n+                PERMISSIONS_SET_READONLY_FALSE,\n+                expr.span,\n+                \"call to `set_readonly` with argument `false`\",\n+                |diag| {\n+                    diag.note(\"on Unix platforms this results in the file being world writable\");\n+                    diag.help(\"you can set the desired permissions using `PermissionsExt`. For more information, see\\n\\\n+                        https://doc.rust-lang.org/std/os/unix/fs/trait.PermissionsExt.html\");\n+                }\n+            );\n         }\n     }\n }"}, {"sha": "e7a8ee6cb19bee4827325663180aac1a3d1625a4", "filename": "tests/ui/permissions_set_readonly_false.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b21cc36ee92a2cf3c387b47e40faa2aa4d39fd1a/tests%2Fui%2Fpermissions_set_readonly_false.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b21cc36ee92a2cf3c387b47e40faa2aa4d39fd1a/tests%2Fui%2Fpermissions_set_readonly_false.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpermissions_set_readonly_false.stderr?ref=b21cc36ee92a2cf3c387b47e40faa2aa4d39fd1a", "patch": "@@ -5,6 +5,8 @@ LL |     permissions.set_readonly(false);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: on Unix platforms this results in the file being world writable\n+   = help: you can set the desired permissions using `PermissionsExt`. For more information, see\n+           https://doc.rust-lang.org/std/os/unix/fs/trait.PermissionsExt.html\n    = note: `-D clippy::permissions-set-readonly-false` implied by `-D warnings`\n \n error: aborting due to previous error"}]}