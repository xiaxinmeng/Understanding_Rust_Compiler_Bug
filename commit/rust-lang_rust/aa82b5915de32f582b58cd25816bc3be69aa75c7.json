{"sha": "aa82b5915de32f582b58cd25816bc3be69aa75c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhODJiNTkxNWRlMzJmNTgyYjU4Y2QyNTgxNmJjM2JlNjlhYTc1Yzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-06T15:08:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-06T15:08:41Z"}, "message": "Merge #3494\n\n3494: Implement include macro r=matklad a=edwin0cheng\n\nThis PR implement builtin `include` macro.\r\n\r\n* It does not support include as expression yet.\r\n* It doesn't consider `env!(\"OUT_DIR\")` yet.\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "4c95641a41ee48e120a6d54d2211dda2e70cadb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c95641a41ee48e120a6d54d2211dda2e70cadb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa82b5915de32f582b58cd25816bc3be69aa75c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeYmd5CRBK7hj4Ov3rIwAAdHIIAFyujSrTTwrt6l3q986MaU7G\nuqMJpmeMKPGcr6/DggwdHsRz3d5DTkxPmRCutdxwy+Yg+ntTbcDHNb3c9o4p6c/Q\nLOSpyQxSk7M/5L4/+uxWmcVfbHhpYznsR0Rl4wP9QD7ZYttnN9wu1g4VDHmA2o6h\nHXalKVmW93Y0iC0a8KfHPqRI9A/JPikShEKyTZvhKnrETEKrB6Dmfn4L6gH55JAT\ns10dNzmr2hAzswPUIPst7SQ6k9FUobWbU3RioS5++Fl2ZCaXuPgQ5nNqhHn3NLAN\nhuX8r6yHKWuvjMSibthGPB+0beitwZ9ZYoh6L2giLoV0+YKniZlSGNSLsNzqOSQ=\n=Wm4p\n-----END PGP SIGNATURE-----\n", "payload": "tree 4c95641a41ee48e120a6d54d2211dda2e70cadb1\nparent 4173645a717ab9b7a7d9b2534e3219cacbcfb93a\nparent 0a06c7e6e6d4f59cacc22b9c1d3122b3faecb62d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583507321 +0000\ncommitter GitHub <noreply@github.com> 1583507321 +0000\n\nMerge #3494\n\n3494: Implement include macro r=matklad a=edwin0cheng\n\nThis PR implement builtin `include` macro.\r\n\r\n* It does not support include as expression yet.\r\n* It doesn't consider `env!(\"OUT_DIR\")` yet.\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa82b5915de32f582b58cd25816bc3be69aa75c7", "html_url": "https://github.com/rust-lang/rust/commit/aa82b5915de32f582b58cd25816bc3be69aa75c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa82b5915de32f582b58cd25816bc3be69aa75c7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4173645a717ab9b7a7d9b2534e3219cacbcfb93a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4173645a717ab9b7a7d9b2534e3219cacbcfb93a", "html_url": "https://github.com/rust-lang/rust/commit/4173645a717ab9b7a7d9b2534e3219cacbcfb93a"}, {"sha": "0a06c7e6e6d4f59cacc22b9c1d3122b3faecb62d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a06c7e6e6d4f59cacc22b9c1d3122b3faecb62d", "html_url": "https://github.com/rust-lang/rust/commit/0a06c7e6e6d4f59cacc22b9c1d3122b3faecb62d"}], "stats": {"total": 126, "additions": 107, "deletions": 19}, "files": [{"sha": "9fc33e4b16afc4606d917b45b8a840e052d6d69c", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/aa82b5915de32f582b58cd25816bc3be69aa75c7/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa82b5915de32f582b58cd25816bc3be69aa75c7/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=aa82b5915de32f582b58cd25816bc3be69aa75c7", "patch": "@@ -5,8 +5,9 @@ use crate::{\n     name, AstId, CrateId, MacroDefId, MacroDefKind, TextUnit,\n };\n \n-use crate::{quote, LazyMacroId};\n+use crate::{quote, EagerMacroId, LazyMacroId, MacroCallId};\n use either::Either;\n+use ra_db::{FileId, RelativePath};\n use ra_parser::FragmentKind;\n \n macro_rules! register_builtin {\n@@ -38,12 +39,14 @@ macro_rules! register_builtin {\n         impl EagerExpander {\n             pub fn expand(\n                 &self,\n+                db: &dyn AstDatabase,\n+                arg_id: EagerMacroId,\n                 tt: &tt::Subtree,\n             ) -> Result<(tt::Subtree, FragmentKind), mbe::ExpandError> {\n                 let expander = match *self {\n                     $( EagerExpander::$e_kind => $e_expand, )*\n                 };\n-                expander(tt)\n+                expander(db,arg_id,tt)\n             }\n         }\n \n@@ -80,7 +83,6 @@ pub fn find_builtin_macro(\n \n register_builtin! {\n     LAZY:\n-\n     (column, Column) => column_expand,\n     (compile_error, CompileError) => compile_error_expand,\n     (file, File) => file_expand,\n@@ -94,8 +96,8 @@ register_builtin! {\n     (format_args_nl, FormatArgsNl) => format_args_expand,\n \n     EAGER:\n-    // eagers\n-    (concat, Concat) => concat_expand\n+    (concat, Concat) => concat_expand,\n+    (include, Include) => include_expand\n }\n \n fn line_expand(\n@@ -251,7 +253,11 @@ fn unquote_str(lit: &tt::Literal) -> Option<String> {\n     token.value()\n }\n \n-fn concat_expand(tt: &tt::Subtree) -> Result<(tt::Subtree, FragmentKind), mbe::ExpandError> {\n+fn concat_expand(\n+    _db: &dyn AstDatabase,\n+    _arg_id: EagerMacroId,\n+    tt: &tt::Subtree,\n+) -> Result<(tt::Subtree, FragmentKind), mbe::ExpandError> {\n     let mut text = String::new();\n     for (i, t) in tt.token_trees.iter().enumerate() {\n         match t {\n@@ -266,6 +272,40 @@ fn concat_expand(tt: &tt::Subtree) -> Result<(tt::Subtree, FragmentKind), mbe::E\n     Ok((quote!(#text), FragmentKind::Expr))\n }\n \n+fn relative_file(db: &dyn AstDatabase, call_id: MacroCallId, path: &str) -> Option<FileId> {\n+    let call_site = call_id.as_file().original_file(db);\n+    let path = RelativePath::new(&path);\n+\n+    db.resolve_relative_path(call_site, &path)\n+}\n+\n+fn include_expand(\n+    db: &dyn AstDatabase,\n+    arg_id: EagerMacroId,\n+    tt: &tt::Subtree,\n+) -> Result<(tt::Subtree, FragmentKind), mbe::ExpandError> {\n+    let path = tt\n+        .token_trees\n+        .get(0)\n+        .and_then(|tt| match tt {\n+            tt::TokenTree::Leaf(tt::Leaf::Literal(it)) => unquote_str(&it),\n+            _ => None,\n+        })\n+        .ok_or_else(|| mbe::ExpandError::ConversionError)?;\n+\n+    let file_id =\n+        relative_file(db, arg_id.into(), &path).ok_or_else(|| mbe::ExpandError::ConversionError)?;\n+\n+    // FIXME:\n+    // Handle include as expression\n+    let node =\n+        db.parse_or_expand(file_id.into()).ok_or_else(|| mbe::ExpandError::ConversionError)?;\n+    let res =\n+        mbe::syntax_node_to_token_tree(&node).ok_or_else(|| mbe::ExpandError::ConversionError)?.0;\n+\n+    Ok((res, FragmentKind::Items))\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "2e6dd3dd89f91d5534c0d44117b702abb4d9f87f", "filename": "crates/ra_hir_expand/src/eager.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aa82b5915de32f582b58cd25816bc3be69aa75c7/crates%2Fra_hir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa82b5915de32f582b58cd25816bc3be69aa75c7/crates%2Fra_hir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Feager.rs?ref=aa82b5915de32f582b58cd25816bc3be69aa75c7", "patch": "@@ -42,24 +42,26 @@ pub fn expand_eager_macro(\n     // When `lazy_expand` is called, its *parent* file must be already exists.\n     // Here we store an eager macro id for the argument expanded subtree here\n     // for that purpose.\n-    let arg_id: MacroCallId = db\n-        .intern_eager_expansion({\n-            EagerCallLoc {\n-                def,\n-                fragment: FragmentKind::Expr,\n-                subtree: Arc::new(parsed_args.clone()),\n-                file_id: macro_call.file_id,\n-            }\n-        })\n-        .into();\n+    let arg_id = db.intern_eager_expansion({\n+        EagerCallLoc {\n+            def,\n+            fragment: FragmentKind::Expr,\n+            subtree: Arc::new(parsed_args.clone()),\n+            file_id: macro_call.file_id,\n+        }\n+    });\n+    let arg_file_id: MacroCallId = arg_id.into();\n \n     let parsed_args = mbe::token_tree_to_syntax_node(&parsed_args, FragmentKind::Expr).ok()?.0;\n-    let result =\n-        eager_macro_recur(db, InFile::new(arg_id.as_file(), parsed_args.syntax_node()), resolver)?;\n+    let result = eager_macro_recur(\n+        db,\n+        InFile::new(arg_file_id.as_file(), parsed_args.syntax_node()),\n+        resolver,\n+    )?;\n     let subtree = to_subtree(&result)?;\n \n     if let MacroDefKind::BuiltInEager(eager) = def.kind {\n-        let (subtree, fragment) = eager.expand(&subtree).ok()?;\n+        let (subtree, fragment) = eager.expand(db, arg_id, &subtree).ok()?;\n         let eager =\n             EagerCallLoc { def, fragment, subtree: Arc::new(subtree), file_id: macro_call.file_id };\n "}, {"sha": "6d201256f16a9bb8e4923e8d814c1ff915c2eac3", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa82b5915de32f582b58cd25816bc3be69aa75c7/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa82b5915de32f582b58cd25816bc3be69aa75c7/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=aa82b5915de32f582b58cd25816bc3be69aa75c7", "patch": "@@ -174,6 +174,7 @@ pub mod known {\n         line,\n         stringify,\n         concat,\n+        include,\n         format_args,\n         format_args_nl,\n         env,"}, {"sha": "42814941fd930ac04c7eb3e1fd69e238e24cb1da", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/aa82b5915de32f582b58cd25816bc3be69aa75c7/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa82b5915de32f582b58cd25816bc3be69aa75c7/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=aa82b5915de32f582b58cd25816bc3be69aa75c7", "patch": "@@ -438,6 +438,51 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn infer_builtin_macros_include() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs \n+#[rustc_builtin_macro]\n+macro_rules! include {() => {}}\n+\n+include!(\"foo.rs\");\n+\n+fn main() {\n+    bar()<|>;\n+}\n+\n+//- /foo.rs\n+fn bar() -> u32 {0}\n+\"#,\n+    );\n+    assert_eq!(\"u32\", type_at_pos(&db, pos));\n+}\n+\n+#[test]\n+fn infer_builtin_macros_include_concat() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs \n+#[rustc_builtin_macro]\n+macro_rules! include {() => {}}\n+\n+#[rustc_builtin_macro]\n+macro_rules! concat {() => {}}\n+\n+include!(concat!(\"f\", \"oo.rs\"));\n+\n+fn main() {\n+    bar()<|>;\n+}\n+\n+//- /foo.rs\n+fn bar() -> u32 {0}\n+\"#,\n+    );\n+    assert_eq!(\"u32\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_builtin_macros_concat_with_lazy() {\n     assert_snapshot!("}]}