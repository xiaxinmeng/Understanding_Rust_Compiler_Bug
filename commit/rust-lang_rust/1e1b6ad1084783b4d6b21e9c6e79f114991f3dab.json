{"sha": "1e1b6ad1084783b4d6b21e9c6e79f114991f3dab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMWI2YWQxMDg0NzgzYjRkNmIyMWU5YzZlNzlmMTE0OTkxZjNkYWI=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-02-12T23:20:29Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-02-13T16:11:09Z"}, "message": "Update books.", "tree": {"sha": "9430dba3dd96ad611fccc49a0341df63453fe9f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9430dba3dd96ad611fccc49a0341df63453fe9f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e1b6ad1084783b4d6b21e9c6e79f114991f3dab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1b6ad1084783b4d6b21e9c6e79f114991f3dab", "html_url": "https://github.com/rust-lang/rust/commit/1e1b6ad1084783b4d6b21e9c6e79f114991f3dab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e1b6ad1084783b4d6b21e9c6e79f114991f3dab/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1912f2e89b77cfe2a0e64b96f444848fe4e2d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1912f2e89b77cfe2a0e64b96f444848fe4e2d49", "html_url": "https://github.com/rust-lang/rust/commit/a1912f2e89b77cfe2a0e64b96f444848fe4e2d49"}], "stats": {"total": 131, "additions": 95, "deletions": 36}, "files": [{"sha": "43561fa4f2fc1fa8d04ef2fc5e3fcb5a847f9dd3", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 58, "deletions": 24, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1e1b6ad1084783b4d6b21e9c6e79f114991f3dab/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1b6ad1084783b4d6b21e9c6e79f114991f3dab/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=1e1b6ad1084783b4d6b21e9c6e79f114991f3dab", "patch": "@@ -1264,28 +1264,75 @@ impl Step for Compiletest {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-struct DocTest {\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+struct BookTest {\n     compiler: Compiler,\n-    path: &'static str,\n+    path: PathBuf,\n     name: &'static str,\n     is_ext_doc: bool,\n }\n \n-impl Step for DocTest {\n+impl Step for BookTest {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.never()\n     }\n \n-    /// Runs `rustdoc --test` for all documentation in `src/doc`.\n+    /// Runs the documentation tests for a book in `src/doc`.\n     ///\n-    /// This will run all tests in our markdown documentation (e.g., the book)\n-    /// located in `src/doc`. The `rustdoc` that's run is the one that sits next to\n-    /// `compiler`.\n+    /// This uses the `rustdoc` that sits next to `compiler`.\n     fn run(self, builder: &Builder<'_>) {\n+        // External docs are different from local because:\n+        // - Some books need pre-processing by mdbook before being tested.\n+        // - They need to save their state to toolstate.\n+        // - They are only tested on the \"checktools\" builders.\n+        //\n+        // The local docs are tested by default, and we don't want to pay the\n+        // cost of building mdbook, so they use `rustdoc --test` directly.\n+        // Also, the unstable book is special because SUMMARY.md is generated,\n+        // so it is easier to just run `rustdoc` on its files.\n+        if self.is_ext_doc {\n+            self.run_ext_doc(builder);\n+        } else {\n+            self.run_local_doc(builder);\n+        }\n+    }\n+}\n+\n+impl BookTest {\n+    /// This runs the equivalent of `mdbook test` (via the rustbook wrapper)\n+    /// which in turn runs `rustdoc --test` on each file in the book.\n+    fn run_ext_doc(self, builder: &Builder<'_>) {\n+        let compiler = self.compiler;\n+\n+        builder.ensure(compile::Std { compiler, target: compiler.host });\n+\n+        // mdbook just executes a binary named \"rustdoc\", so we need to update\n+        // PATH so that it points to our rustdoc.\n+        let mut rustdoc_path = builder.rustdoc(compiler);\n+        rustdoc_path.pop();\n+        let old_path = env::var_os(\"PATH\").unwrap_or_default();\n+        let new_path = env::join_paths(iter::once(rustdoc_path).chain(env::split_paths(&old_path)))\n+            .expect(\"could not add rustdoc to PATH\");\n+\n+        let mut rustbook_cmd = builder.tool_cmd(Tool::Rustbook);\n+        let path = builder.src.join(&self.path);\n+        rustbook_cmd.env(\"PATH\", new_path).arg(\"test\").arg(path);\n+        builder.add_rust_test_threads(&mut rustbook_cmd);\n+        builder.info(&format!(\"Testing rustbook {}\", self.path.display()));\n+        let _time = util::timeit(&builder);\n+        let toolstate = if try_run(builder, &mut rustbook_cmd) {\n+            ToolState::TestPass\n+        } else {\n+            ToolState::TestFail\n+        };\n+        builder.save_toolstate(self.name, toolstate);\n+    }\n+\n+    /// This runs `rustdoc --test` on all `.md` files in the path.\n+    fn run_local_doc(self, builder: &Builder<'_>) {\n         let compiler = self.compiler;\n \n         builder.ensure(compile::Std { compiler, target: compiler.host });\n@@ -1294,7 +1341,6 @@ impl Step for DocTest {\n         // tests for all files that end in `*.md`\n         let mut stack = vec![builder.src.join(self.path)];\n         let _time = util::timeit(&builder);\n-\n         let mut files = Vec::new();\n         while let Some(p) = stack.pop() {\n             if p.is_dir() {\n@@ -1306,25 +1352,13 @@ impl Step for DocTest {\n                 continue;\n             }\n \n-            // The nostarch directory in the book is for no starch, and so isn't\n-            // guaranteed to builder. We don't care if it doesn't build, so skip it.\n-            if p.to_str().map_or(false, |p| p.contains(\"nostarch\")) {\n-                continue;\n-            }\n-\n             files.push(p);\n         }\n \n         files.sort();\n \n-        let mut toolstate = ToolState::TestPass;\n         for file in files {\n-            if !markdown_test(builder, compiler, &file) {\n-                toolstate = ToolState::TestFail;\n-            }\n-        }\n-        if self.is_ext_doc {\n-            builder.save_toolstate(self.name, toolstate);\n+            markdown_test(builder, compiler, &file);\n         }\n     }\n }\n@@ -1353,9 +1387,9 @@ macro_rules! test_book {\n                 }\n \n                 fn run(self, builder: &Builder<'_>) {\n-                    builder.ensure(DocTest {\n+                    builder.ensure(BookTest {\n                         compiler: self.compiler,\n-                        path: $path,\n+                        path: PathBuf::from($path),\n                         name: $book_name,\n                         is_ext_doc: !$default,\n                     });"}, {"sha": "6fb3705e5230311b096d47f7e2c91f9ce24393d0", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=1e1b6ad1084783b4d6b21e9c6e79f114991f3dab", "patch": "@@ -1 +1 @@\n-Subproject commit 87dd6843678575f8dda962f239d14ef4be14b352\n+Subproject commit 6fb3705e5230311b096d47f7e2c91f9ce24393d0"}, {"sha": "37f9e6848411188a1062ead1bd8ebe4b8aa16899", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=1e1b6ad1084783b4d6b21e9c6e79f114991f3dab", "patch": "@@ -1 +1 @@\n-Subproject commit 1a2390247ad6d08160e0dd74f40a01a9578659c2\n+Subproject commit 37f9e6848411188a1062ead1bd8ebe4b8aa16899"}, {"sha": "b2e1092bf67bd4d7686c4553f186edbb7f5f92db", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=1e1b6ad1084783b4d6b21e9c6e79f114991f3dab", "patch": "@@ -1 +1 @@\n-Subproject commit 4d78994915af1bde9a95c04a8c27d8dca066232a\n+Subproject commit b2e1092bf67bd4d7686c4553f186edbb7f5f92db"}, {"sha": "64239df6d173562b9deb4f012e4c3e6e960c4754", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=1e1b6ad1084783b4d6b21e9c6e79f114991f3dab", "patch": "@@ -1 +1 @@\n-Subproject commit 11e893fc1357bc688418ddf1087c2b7aa25d154d\n+Subproject commit 64239df6d173562b9deb4f012e4c3e6e960c4754"}, {"sha": "32facd5522ddbbf37baf01e4e4b6562bc55c071a", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=1e1b6ad1084783b4d6b21e9c6e79f114991f3dab", "patch": "@@ -1 +1 @@\n-Subproject commit 1c2bd024d13f8011307e13386cf1fea2180352b5\n+Subproject commit 32facd5522ddbbf37baf01e4e4b6562bc55c071a"}, {"sha": "ba30c107667edbab1b3bdcb47d3b24b7bc26e184", "filename": "src/doc/rustdoc/book.toml", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e1b6ad1084783b4d6b21e9c6e79f114991f3dab/src%2Fdoc%2Frustdoc%2Fbook.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1e1b6ad1084783b4d6b21e9c6e79f114991f3dab/src%2Fdoc%2Frustdoc%2Fbook.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fbook.toml?ref=1e1b6ad1084783b4d6b21e9c6e79f114991f3dab", "patch": "@@ -0,0 +1,4 @@\n+[book]\n+authors = [\"The Rust Project Developers\"]\n+src = \"src\"\n+title = \"The rustdoc book\""}, {"sha": "ca4bf4ea662c5d85541fa309679835b7aa8492a3", "filename": "src/tools/rustbook/src/main.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1e1b6ad1084783b4d6b21e9c6e79f114991f3dab/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1b6ad1084783b4d6b21e9c6e79f114991f3dab/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=1e1b6ad1084783b4d6b21e9c6e79f114991f3dab", "patch": "@@ -25,6 +25,11 @@ fn main() {\n                 .arg_from_usage(d_message)\n                 .arg_from_usage(dir_message),\n         )\n+        .subcommand(\n+            SubCommand::with_name(\"test\")\n+                .about(\"Tests that a book's Rust code samples compile\")\n+                .arg_from_usage(dir_message),\n+        )\n         .subcommand(\n             SubCommand::with_name(\"linkcheck\")\n                 .about(\"Run linkcheck with mdBook 3\")\n@@ -36,13 +41,12 @@ fn main() {\n     match matches.subcommand() {\n         (\"build\", Some(sub_matches)) => {\n             if let Err(e) = build(sub_matches) {\n-                eprintln!(\"Error: {}\", e);\n-\n-                for cause in e.iter().skip(1) {\n-                    eprintln!(\"\\tCaused By: {}\", cause);\n-                }\n-\n-                ::std::process::exit(101);\n+                handle_error(e);\n+            }\n+        }\n+        (\"test\", Some(sub_matches)) => {\n+            if let Err(e) = test(sub_matches) {\n+                handle_error(e);\n             }\n         }\n         (\"linkcheck\", Some(sub_matches)) => {\n@@ -146,6 +150,12 @@ pub fn build(args: &ArgMatches<'_>) -> Result3<()> {\n     Ok(())\n }\n \n+fn test(args: &ArgMatches<'_>) -> Result3<()> {\n+    let book_dir = get_book_dir(args);\n+    let mut book = MDBook::load(&book_dir)?;\n+    book.test(vec![])\n+}\n+\n fn get_book_dir(args: &ArgMatches<'_>) -> PathBuf {\n     if let Some(dir) = args.value_of(\"dir\") {\n         // Check if path is relative from current dir, or absolute...\n@@ -155,3 +165,13 @@ fn get_book_dir(args: &ArgMatches<'_>) -> PathBuf {\n         env::current_dir().unwrap()\n     }\n }\n+\n+fn handle_error(error: mdbook::errors::Error) -> ! {\n+    eprintln!(\"Error: {}\", error);\n+\n+    for cause in error.iter().skip(1) {\n+        eprintln!(\"\\tCaused By: {}\", cause);\n+    }\n+\n+    ::std::process::exit(101);\n+}"}, {"sha": "be1e598d8d4feec83795fca5f4358a17d2a36086", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e1b6ad1084783b4d6b21e9c6e79f114991f3dab/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1b6ad1084783b4d6b21e9c6e79f114991f3dab/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=1e1b6ad1084783b4d6b21e9c6e79f114991f3dab", "patch": "@@ -58,6 +58,7 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/tools/rls\",\n         \"src/tools/rust-installer\",\n         \"src/tools/rustfmt\",\n+        \"src/doc/book\",\n         // Filter RLS output directories\n         \"target/rls\",\n     ];"}]}