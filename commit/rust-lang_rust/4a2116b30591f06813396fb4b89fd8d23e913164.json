{"sha": "4a2116b30591f06813396fb4b89fd8d23e913164", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMjExNmIzMDU5MWYwNjgxMzM5NmZiNGI4OWZkOGQyM2U5MTMxNjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-28T11:37:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-28T11:37:45Z"}, "message": "Auto merge of #3711 - rust-lang:rustup, r=oli-obk\n\nRustup\n\nfixes #3709\n\nI'm currently in the process of making rustc's deprecation lint emit the `AtomicFoo::new(0)` suggestion", "tree": {"sha": "c03082b3903a8d84a2fc76f8dc97ca95db7164d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c03082b3903a8d84a2fc76f8dc97ca95db7164d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a2116b30591f06813396fb4b89fd8d23e913164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a2116b30591f06813396fb4b89fd8d23e913164", "html_url": "https://github.com/rust-lang/rust/commit/4a2116b30591f06813396fb4b89fd8d23e913164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a2116b30591f06813396fb4b89fd8d23e913164/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62f40e28b9b4e44d683ca2508b1bd9e637d2df38", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f40e28b9b4e44d683ca2508b1bd9e637d2df38", "html_url": "https://github.com/rust-lang/rust/commit/62f40e28b9b4e44d683ca2508b1bd9e637d2df38"}, {"sha": "60332941c9aab8419f9bc1dbec5071214f0d8077", "url": "https://api.github.com/repos/rust-lang/rust/commits/60332941c9aab8419f9bc1dbec5071214f0d8077", "html_url": "https://github.com/rust-lang/rust/commit/60332941c9aab8419f9bc1dbec5071214f0d8077"}], "stats": {"total": 219, "additions": 48, "deletions": 171}, "files": [{"sha": "832fb8752867a499577f7b4f31266c4433787f5b", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a2116b30591f06813396fb4b89fd8d23e913164/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2116b30591f06813396fb4b89fd8d23e913164/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=4a2116b30591f06813396fb4b89fd8d23e913164", "patch": "@@ -10,6 +10,7 @@ use rustc::{bug, span_bug};\n use rustc_data_structures::sync::Lrc;\n use std::cmp::Ordering::{self, Equal};\n use std::cmp::PartialOrd;\n+use std::convert::TryFrom;\n use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n use syntax::ast::{FloatTy, LitKind};\n@@ -441,12 +442,12 @@ pub fn miri_to_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, result: &ty::Const<'\n             // FIXME: implement other conversion\n             _ => None,\n         },\n-        ConstValue::ScalarPair(Scalar::Ptr(ptr), Scalar::Bits { bits: n, .. }) => match result.ty.sty {\n+        ConstValue::Slice(Scalar::Ptr(ptr), n) => match result.ty.sty {\n             ty::Ref(_, tam, _) => match tam.sty {\n                 ty::Str => {\n                     let alloc = tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n                     let offset = ptr.offset.bytes().try_into().expect(\"too-large pointer offset\");\n-                    let n = n as usize;\n+                    let n = usize::try_from(n).unwrap();\n                     String::from_utf8(alloc.bytes[offset..(offset + n)].to_owned())\n                         .ok()\n                         .map(Constant::Str)"}, {"sha": "47168445ad3c518941e14fd69c82469e7908f8f5", "filename": "clippy_lints/src/replace_consts.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a2116b30591f06813396fb4b89fd8d23e913164/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2116b30591f06813396fb4b89fd8d23e913164/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=4a2116b30591f06813396fb4b89fd8d23e913164", "patch": "@@ -69,21 +69,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ReplaceConsts {\n const REPLACEMENTS: &[(&[&str], &str)] = &[\n     // Once\n     (&[\"core\", \"sync\", \"ONCE_INIT\"], \"Once::new()\"),\n-    // Atomic\n-    (\n-        &[\"core\", \"sync\", \"atomic\", \"ATOMIC_BOOL_INIT\"],\n-        \"AtomicBool::new(false)\",\n-    ),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_ISIZE_INIT\"], \"AtomicIsize::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I8_INIT\"], \"AtomicI8::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I16_INIT\"], \"AtomicI16::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I32_INIT\"], \"AtomicI32::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I64_INIT\"], \"AtomicI64::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_USIZE_INIT\"], \"AtomicUsize::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U8_INIT\"], \"AtomicU8::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U16_INIT\"], \"AtomicU16::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U32_INIT\"], \"AtomicU32::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U64_INIT\"], \"AtomicU64::new(0)\"),\n     // Min\n     (&[\"core\", \"isize\", \"MIN\"], \"isize::min_value()\"),\n     (&[\"core\", \"i8\", \"MIN\"], \"i8::min_value()\"),"}, {"sha": "0a1b53c32ac666fdd5fe1f6d695cf5daf4d9bd76", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a2116b30591f06813396fb4b89fd8d23e913164/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2116b30591f06813396fb4b89fd8d23e913164/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=4a2116b30591f06813396fb4b89fd8d23e913164", "patch": "@@ -38,10 +38,10 @@ pub const INDEX: [&str; 3] = [\"core\", \"ops\", \"Index\"];\n pub const INDEX_MUT: [&str; 3] = [\"core\", \"ops\", \"IndexMut\"];\n pub const INIT: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"init\"];\n pub const INTO: [&str; 3] = [\"core\", \"convert\", \"Into\"];\n-pub const INTO_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"IntoIterator\"];\n+pub const INTO_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"IntoIterator\"];\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n-pub const ITERATOR: [&str; 4] = [\"core\", \"iter\", \"iterator\", \"Iterator\"];\n+pub const ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\"];\n pub const LATE_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"LateContext\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n pub const LINT: [&str; 3] = [\"rustc\", \"lint\", \"Lint\"];"}, {"sha": "00cbcaeacb9f7d56af93b2f8b675d1997ee3a05e", "filename": "tests/ui/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a2116b30591f06813396fb4b89fd8d23e913164/tests%2Fui%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2116b30591f06813396fb4b89fd8d23e913164/tests%2Fui%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_copy_const.rs?ref=4a2116b30591f06813396fb4b89fd8d23e913164", "patch": "@@ -4,7 +4,7 @@\n use std::borrow::Cow;\n use std::cell::Cell;\n use std::fmt::Display;\n-use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n use std::sync::Once;\n \n const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n@@ -95,9 +95,6 @@ fn main() {\n     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5); //~ ERROR interior mutability\n \n-    ATOMIC_USIZE_INIT.store(2, Ordering::SeqCst); //~ ERROR interior mutability\n-    assert_eq!(ATOMIC_USIZE_INIT.load(Ordering::SeqCst), 0); //~ ERROR interior mutability\n-\n     let _once = ONCE_INIT;\n     let _once_ref = &ONCE_INIT; //~ ERROR interior mutability\n     let _once_ref_2 = &&ONCE_INIT; //~ ERROR interior mutability"}, {"sha": "1276491127ad70ea22c542fab251da1202da3038", "filename": "tests/ui/non_copy_const.stderr", "status": "modified", "additions": 15, "deletions": 31, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4a2116b30591f06813396fb4b89fd8d23e913164/tests%2Fui%2Fnon_copy_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a2116b30591f06813396fb4b89fd8d23e913164/tests%2Fui%2Fnon_copy_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_copy_const.stderr?ref=4a2116b30591f06813396fb4b89fd8d23e913164", "patch": "@@ -144,132 +144,116 @@ LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5); //~ ERROR interior mutabi\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:98:5\n-   |\n-LL |     ATOMIC_USIZE_INIT.store(2, Ordering::SeqCst); //~ ERROR interior mutability\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:99:16\n-   |\n-LL |     assert_eq!(ATOMIC_USIZE_INIT.load(Ordering::SeqCst), 0); //~ ERROR interior mutability\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:102:22\n+  --> $DIR/non_copy_const.rs:99:22\n    |\n LL |     let _once_ref = &ONCE_INIT; //~ ERROR interior mutability\n    |                      ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:103:25\n+  --> $DIR/non_copy_const.rs:100:25\n    |\n LL |     let _once_ref_2 = &&ONCE_INIT; //~ ERROR interior mutability\n    |                         ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:104:27\n+  --> $DIR/non_copy_const.rs:101:27\n    |\n LL |     let _once_ref_4 = &&&&ONCE_INIT; //~ ERROR interior mutability\n    |                           ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:105:26\n+  --> $DIR/non_copy_const.rs:102:26\n    |\n LL |     let _once_mut = &mut ONCE_INIT; //~ ERROR interior mutability\n    |                          ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:116:14\n+  --> $DIR/non_copy_const.rs:113:14\n    |\n LL |     let _ = &ATOMIC_TUPLE; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:117:14\n+  --> $DIR/non_copy_const.rs:114:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:118:19\n+  --> $DIR/non_copy_const.rs:115:19\n    |\n LL |     let _ = &(&&&&ATOMIC_TUPLE).0; //~ ERROR interior mutability\n    |                   ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:119:14\n+  --> $DIR/non_copy_const.rs:116:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:120:13\n+  --> $DIR/non_copy_const.rs:117:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0].load(Ordering::SeqCst); //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:126:13\n+  --> $DIR/non_copy_const.rs:123:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:131:5\n+  --> $DIR/non_copy_const.rs:128:5\n    |\n LL |     CELL.set(2); //~ ERROR interior mutability\n    |     ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:132:16\n+  --> $DIR/non_copy_const.rs:129:16\n    |\n LL |     assert_eq!(CELL.get(), 6); //~ ERROR interior mutability\n    |                ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:145:5\n+  --> $DIR/non_copy_const.rs:142:5\n    |\n LL |     u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n    |     ^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed\n-  --> $DIR/non_copy_const.rs:146:16\n+  --> $DIR/non_copy_const.rs:143:16\n    |\n LL |     assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n    |                ^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: aborting due to 31 previous errors\n+error: aborting due to 29 previous errors\n "}, {"sha": "2c125f978d9893435803724beac9e9f67b40e802", "filename": "tests/ui/replace_consts.fixed", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a2116b30591f06813396fb4b89fd8d23e913164/tests%2Fui%2Freplace_consts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a2116b30591f06813396fb4b89fd8d23e913164/tests%2Fui%2Freplace_consts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.fixed?ref=4a2116b30591f06813396fb4b89fd8d23e913164", "patch": "@@ -10,18 +10,6 @@ use std::sync::{Once, ONCE_INIT};\n fn bad() {\n     // Once\n     { let foo = ONCE_INIT; };\n-    // Atomic\n-    { let foo = AtomicBool::new(false); };\n-    { let foo = AtomicIsize::new(0); };\n-    { let foo = AtomicI8::new(0); };\n-    { let foo = AtomicI16::new(0); };\n-    { let foo = AtomicI32::new(0); };\n-    { let foo = AtomicI64::new(0); };\n-    { let foo = AtomicUsize::new(0); };\n-    { let foo = AtomicU8::new(0); };\n-    { let foo = AtomicU16::new(0); };\n-    { let foo = AtomicU32::new(0); };\n-    { let foo = AtomicU64::new(0); };\n     // Min\n     { let foo = isize::min_value(); };\n     { let foo = i8::min_value(); };"}, {"sha": "3c7d8d07ed6f6dd7256fe9d4551bc5ead7929954", "filename": "tests/ui/replace_consts.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a2116b30591f06813396fb4b89fd8d23e913164/tests%2Fui%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2116b30591f06813396fb4b89fd8d23e913164/tests%2Fui%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.rs?ref=4a2116b30591f06813396fb4b89fd8d23e913164", "patch": "@@ -10,18 +10,6 @@ use std::sync::{Once, ONCE_INIT};\n fn bad() {\n     // Once\n     { let foo = ONCE_INIT; };\n-    // Atomic\n-    { let foo = ATOMIC_BOOL_INIT; };\n-    { let foo = ATOMIC_ISIZE_INIT; };\n-    { let foo = ATOMIC_I8_INIT; };\n-    { let foo = ATOMIC_I16_INIT; };\n-    { let foo = ATOMIC_I32_INIT; };\n-    { let foo = ATOMIC_I64_INIT; };\n-    { let foo = ATOMIC_USIZE_INIT; };\n-    { let foo = ATOMIC_U8_INIT; };\n-    { let foo = ATOMIC_U16_INIT; };\n-    { let foo = ATOMIC_U32_INIT; };\n-    { let foo = ATOMIC_U64_INIT; };\n     // Min\n     { let foo = std::isize::MIN; };\n     { let foo = std::i8::MIN; };"}, {"sha": "be0d00726237fb72f91bbdfafac9c391d618e089", "filename": "tests/ui/replace_consts.stderr", "status": "modified", "additions": 27, "deletions": 93, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/4a2116b30591f06813396fb4b89fd8d23e913164/tests%2Fui%2Freplace_consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a2116b30591f06813396fb4b89fd8d23e913164/tests%2Fui%2Freplace_consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.stderr?ref=4a2116b30591f06813396fb4b89fd8d23e913164", "patch": "@@ -1,218 +1,152 @@\n-error: using `ATOMIC_BOOL_INIT`\n+error: using `MIN`\n   --> $DIR/replace_consts.rs:14:17\n    |\n-LL |     { let foo = ATOMIC_BOOL_INIT; };\n-   |                 ^^^^^^^^^^^^^^^^ help: try this: `AtomicBool::new(false)`\n+LL |     { let foo = std::isize::MIN; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `isize::min_value()`\n    |\n note: lint level defined here\n   --> $DIR/replace_consts.rs:4:9\n    |\n LL | #![deny(clippy::replace_consts)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: using `ATOMIC_ISIZE_INIT`\n-  --> $DIR/replace_consts.rs:15:17\n-   |\n-LL |     { let foo = ATOMIC_ISIZE_INIT; };\n-   |                 ^^^^^^^^^^^^^^^^^ help: try this: `AtomicIsize::new(0)`\n-\n-error: using `ATOMIC_I8_INIT`\n-  --> $DIR/replace_consts.rs:16:17\n-   |\n-LL |     { let foo = ATOMIC_I8_INIT; };\n-   |                 ^^^^^^^^^^^^^^ help: try this: `AtomicI8::new(0)`\n-\n-error: using `ATOMIC_I16_INIT`\n-  --> $DIR/replace_consts.rs:17:17\n-   |\n-LL |     { let foo = ATOMIC_I16_INIT; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI16::new(0)`\n-\n-error: using `ATOMIC_I32_INIT`\n-  --> $DIR/replace_consts.rs:18:17\n-   |\n-LL |     { let foo = ATOMIC_I32_INIT; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI32::new(0)`\n-\n-error: using `ATOMIC_I64_INIT`\n-  --> $DIR/replace_consts.rs:19:17\n-   |\n-LL |     { let foo = ATOMIC_I64_INIT; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI64::new(0)`\n-\n-error: using `ATOMIC_USIZE_INIT`\n-  --> $DIR/replace_consts.rs:20:17\n-   |\n-LL |     { let foo = ATOMIC_USIZE_INIT; };\n-   |                 ^^^^^^^^^^^^^^^^^ help: try this: `AtomicUsize::new(0)`\n-\n-error: using `ATOMIC_U8_INIT`\n-  --> $DIR/replace_consts.rs:21:17\n-   |\n-LL |     { let foo = ATOMIC_U8_INIT; };\n-   |                 ^^^^^^^^^^^^^^ help: try this: `AtomicU8::new(0)`\n-\n-error: using `ATOMIC_U16_INIT`\n-  --> $DIR/replace_consts.rs:22:17\n-   |\n-LL |     { let foo = ATOMIC_U16_INIT; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU16::new(0)`\n-\n-error: using `ATOMIC_U32_INIT`\n-  --> $DIR/replace_consts.rs:23:17\n-   |\n-LL |     { let foo = ATOMIC_U32_INIT; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU32::new(0)`\n-\n-error: using `ATOMIC_U64_INIT`\n-  --> $DIR/replace_consts.rs:24:17\n-   |\n-LL |     { let foo = ATOMIC_U64_INIT; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU64::new(0)`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:26:17\n-   |\n-LL |     { let foo = std::isize::MIN; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `isize::min_value()`\n-\n error: using `MIN`\n-  --> $DIR/replace_consts.rs:27:17\n+  --> $DIR/replace_consts.rs:15:17\n    |\n LL |     { let foo = std::i8::MIN; };\n    |                 ^^^^^^^^^^^^ help: try this: `i8::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:28:17\n+  --> $DIR/replace_consts.rs:16:17\n    |\n LL |     { let foo = std::i16::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i16::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:29:17\n+  --> $DIR/replace_consts.rs:17:17\n    |\n LL |     { let foo = std::i32::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i32::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:30:17\n+  --> $DIR/replace_consts.rs:18:17\n    |\n LL |     { let foo = std::i64::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i64::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:31:17\n+  --> $DIR/replace_consts.rs:19:17\n    |\n LL |     { let foo = std::i128::MIN; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `i128::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:32:17\n+  --> $DIR/replace_consts.rs:20:17\n    |\n LL |     { let foo = std::usize::MIN; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `usize::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:33:17\n+  --> $DIR/replace_consts.rs:21:17\n    |\n LL |     { let foo = std::u8::MIN; };\n    |                 ^^^^^^^^^^^^ help: try this: `u8::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:34:17\n+  --> $DIR/replace_consts.rs:22:17\n    |\n LL |     { let foo = std::u16::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u16::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:35:17\n+  --> $DIR/replace_consts.rs:23:17\n    |\n LL |     { let foo = std::u32::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u32::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:36:17\n+  --> $DIR/replace_consts.rs:24:17\n    |\n LL |     { let foo = std::u64::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u64::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:37:17\n+  --> $DIR/replace_consts.rs:25:17\n    |\n LL |     { let foo = std::u128::MIN; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `u128::min_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:39:17\n+  --> $DIR/replace_consts.rs:27:17\n    |\n LL |     { let foo = std::isize::MAX; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `isize::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:40:17\n+  --> $DIR/replace_consts.rs:28:17\n    |\n LL |     { let foo = std::i8::MAX; };\n    |                 ^^^^^^^^^^^^ help: try this: `i8::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:41:17\n+  --> $DIR/replace_consts.rs:29:17\n    |\n LL |     { let foo = std::i16::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i16::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:42:17\n+  --> $DIR/replace_consts.rs:30:17\n    |\n LL |     { let foo = std::i32::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i32::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:43:17\n+  --> $DIR/replace_consts.rs:31:17\n    |\n LL |     { let foo = std::i64::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i64::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:44:17\n+  --> $DIR/replace_consts.rs:32:17\n    |\n LL |     { let foo = std::i128::MAX; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `i128::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:45:17\n+  --> $DIR/replace_consts.rs:33:17\n    |\n LL |     { let foo = std::usize::MAX; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `usize::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:46:17\n+  --> $DIR/replace_consts.rs:34:17\n    |\n LL |     { let foo = std::u8::MAX; };\n    |                 ^^^^^^^^^^^^ help: try this: `u8::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:47:17\n+  --> $DIR/replace_consts.rs:35:17\n    |\n LL |     { let foo = std::u16::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u16::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:48:17\n+  --> $DIR/replace_consts.rs:36:17\n    |\n LL |     { let foo = std::u32::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u32::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:49:17\n+  --> $DIR/replace_consts.rs:37:17\n    |\n LL |     { let foo = std::u64::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u64::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:50:17\n+  --> $DIR/replace_consts.rs:38:17\n    |\n LL |     { let foo = std::u128::MAX; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `u128::max_value()`\n \n-error: aborting due to 35 previous errors\n+error: aborting due to 24 previous errors\n "}]}