{"sha": "e704e95250ff4e949214f390a88f21d08052bea1", "node_id": "C_kwDOAAsO6NoAKGU3MDRlOTUyNTBmZjRlOTQ5MjE0ZjM5MGE4OGYyMWQwODA1MmJlYTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-25T13:01:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-25T13:01:45Z"}, "message": "Auto merge of #104877 - matthiaskrgr:rollup-s7taiq8, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #103648 (Don't set `is_preview` for clippy and rustfmt)\n - #104654 (Add `#![deny(unsafe_op_in_unsafe_fn)]` in liballoc tests)\n - #104793 (unstable-book: Add page for the `abi_efiapi` feature)\n - #104841 (Assert that we don't capture escaping bound vars in `Fn` trait selection)\n - #104849 (Migrate source code elements style to CSS variables)\n - #104873 (RefCell::get_mut: fix typo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "440735e2d840925ef5a52fd8a7d4d3c0984d5d48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/440735e2d840925ef5a52fd8a7d4d3c0984d5d48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e704e95250ff4e949214f390a88f21d08052bea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e704e95250ff4e949214f390a88f21d08052bea1", "html_url": "https://github.com/rust-lang/rust/commit/e704e95250ff4e949214f390a88f21d08052bea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e704e95250ff4e949214f390a88f21d08052bea1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a75c5a9b5d9c48aa576b08faf735b926d0d9a71", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a75c5a9b5d9c48aa576b08faf735b926d0d9a71", "html_url": "https://github.com/rust-lang/rust/commit/8a75c5a9b5d9c48aa576b08faf735b926d0d9a71"}, {"sha": "f360686ed671576573f39c21d48e64cad603dd85", "url": "https://api.github.com/repos/rust-lang/rust/commits/f360686ed671576573f39c21d48e64cad603dd85", "html_url": "https://github.com/rust-lang/rust/commit/f360686ed671576573f39c21d48e64cad603dd85"}], "stats": {"total": 213, "additions": 144, "deletions": 69}, "files": [{"sha": "e46441001b54d06edc556a4cd07e406e04d2f70b", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -605,8 +605,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     {\n         debug!(?obligation, \"confirm_fn_pointer_candidate\");\n \n-        // Okay to skip binder; it is reintroduced below.\n-        let self_ty = self.infcx.shallow_resolve(obligation.self_ty().skip_binder());\n+        let self_ty = self\n+            .infcx\n+            .shallow_resolve(obligation.self_ty().no_bound_vars())\n+            .expect(\"fn pointer should not capture bound vars from predicate\");\n         let sig = self_ty.fn_sig(self.tcx());\n         let trait_ref = closure_trait_ref_and_return_type(\n             self.tcx(),\n@@ -621,15 +623,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         // Confirm the `type Output: Sized;` bound that is present on `FnOnce`\n         let cause = obligation.derived_cause(BuiltinDerivedObligation);\n-        // The binder on the Fn obligation is \"less\" important than the one on\n-        // the signature, as evidenced by how we treat it during projection.\n-        // The safe thing to do here is to liberate it, though, which should\n-        // have no worse effect than skipping the binder here.\n-        let liberated_fn_ty =\n-            self.infcx.replace_bound_vars_with_placeholders(obligation.predicate.rebind(self_ty));\n-        let output_ty = self\n-            .infcx\n-            .replace_bound_vars_with_placeholders(liberated_fn_ty.fn_sig(self.tcx()).output());\n+        let output_ty = self.infcx.replace_bound_vars_with_placeholders(sig.output());\n         let output_ty = normalize_with_depth_to(\n             self,\n             obligation.param_env,\n@@ -693,16 +687,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let gen_sig = substs.as_generator().poly_sig();\n \n-        // (1) Feels icky to skip the binder here, but OTOH we know\n-        // that the self-type is an generator type and hence is\n+        // NOTE: The self-type is a generator type and hence is\n         // in fact unparameterized (or at least does not reference any\n-        // regions bound in the obligation). Still probably some\n-        // refactoring could make this nicer.\n+        // regions bound in the obligation).\n+        let self_ty = obligation\n+            .predicate\n+            .self_ty()\n+            .no_bound_vars()\n+            .expect(\"unboxed closure type should not capture bound vars from the predicate\");\n \n         let trait_ref = super::util::generator_trait_ref_and_outputs(\n             self.tcx(),\n             obligation.predicate.def_id(),\n-            obligation.predicate.skip_binder().self_ty(), // (1)\n+            self_ty,\n             gen_sig,\n         )\n         .map_bound(|(trait_ref, ..)| trait_ref);"}, {"sha": "2a1494e8952a1c1a2c8080da83ff4e34d1960d49", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -2271,15 +2271,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         debug!(?closure_sig);\n \n-        // (1) Feels icky to skip the binder here, but OTOH we know\n-        // that the self-type is an unboxed closure type and hence is\n+        // NOTE: The self-type is an unboxed closure type and hence is\n         // in fact unparameterized (or at least does not reference any\n-        // regions bound in the obligation). Still probably some\n-        // refactoring could make this nicer.\n+        // regions bound in the obligation).\n+        let self_ty = obligation\n+            .predicate\n+            .self_ty()\n+            .no_bound_vars()\n+            .expect(\"unboxed closure type should not capture bound vars from the predicate\");\n+\n         closure_trait_ref_and_return_type(\n             self.tcx(),\n             obligation.predicate.def_id(),\n-            obligation.predicate.skip_binder().self_ty(), // (1)\n+            self_ty,\n             closure_sig,\n             util::TupleArgumentsFlag::No,\n         )"}, {"sha": "a496cea0b005bfafbbb6b901f466fa6dcb22fd2e", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -298,11 +298,11 @@ pub fn closure_trait_ref_and_return_type<'tcx>(\n     sig: ty::PolyFnSig<'tcx>,\n     tuple_arguments: TupleArgumentsFlag,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>)> {\n+    assert!(!self_ty.has_escaping_bound_vars());\n     let arguments_tuple = match tuple_arguments {\n         TupleArgumentsFlag::No => sig.skip_binder().inputs()[0],\n         TupleArgumentsFlag::Yes => tcx.intern_tup(sig.skip_binder().inputs()),\n     };\n-    debug_assert!(!self_ty.has_escaping_bound_vars());\n     let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, arguments_tuple]);\n     sig.map_bound(|sig| (trait_ref, sig.output()))\n }\n@@ -313,7 +313,7 @@ pub fn generator_trait_ref_and_outputs<'tcx>(\n     self_ty: Ty<'tcx>,\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n-    debug_assert!(!self_ty.has_escaping_bound_vars());\n+    assert!(!self_ty.has_escaping_bound_vars());\n     let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, sig.skip_binder().resume_ty]);\n     sig.map_bound(|sig| (trait_ref, sig.yield_ty, sig.return_ty))\n }\n@@ -324,7 +324,7 @@ pub fn future_trait_ref_and_outputs<'tcx>(\n     self_ty: Ty<'tcx>,\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>)> {\n-    debug_assert!(!self_ty.has_escaping_bound_vars());\n+    assert!(!self_ty.has_escaping_bound_vars());\n     let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty]);\n     sig.map_bound(|sig| (trait_ref, sig.return_ty))\n }"}, {"sha": "af49826ff30a364f4a8d308a13521475e62ea5c5", "filename": "library/alloc/tests/boxed.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/library%2Falloc%2Ftests%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/library%2Falloc%2Ftests%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fboxed.rs?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -102,8 +102,18 @@ unsafe impl const Allocator for ConstAllocator {\n \n         let new_ptr = self.allocate(new_layout)?;\n         if new_layout.size() > 0 {\n-            new_ptr.as_mut_ptr().copy_from_nonoverlapping(ptr.as_ptr(), old_layout.size());\n-            self.deallocate(ptr, old_layout);\n+            // Safety: `new_ptr` is valid for writes and `ptr` for reads of\n+            // `old_layout.size()`, because `new_layout.size() >=\n+            // old_layout.size()` (which is an invariant that must be upheld by\n+            // callers).\n+            unsafe {\n+                new_ptr.as_mut_ptr().copy_from_nonoverlapping(ptr.as_ptr(), old_layout.size());\n+            }\n+            // Safety: `ptr` is never used again is also an invariant which must\n+            // be upheld by callers.\n+            unsafe {\n+                self.deallocate(ptr, old_layout);\n+            }\n         }\n         Ok(new_ptr)\n     }\n@@ -114,12 +124,21 @@ unsafe impl const Allocator for ConstAllocator {\n         old_layout: Layout,\n         new_layout: Layout,\n     ) -> Result<NonNull<[u8]>, AllocError> {\n-        let new_ptr = self.grow(ptr, old_layout, new_layout)?;\n+        // Safety: Invariants of `grow_zeroed` and `grow` are the same, and must\n+        // be enforced by callers.\n+        let new_ptr = unsafe { self.grow(ptr, old_layout, new_layout)? };\n         if new_layout.size() > 0 {\n             let old_size = old_layout.size();\n             let new_size = new_layout.size();\n             let raw_ptr = new_ptr.as_mut_ptr();\n-            raw_ptr.add(old_size).write_bytes(0, new_size - old_size);\n+            // Safety:\n+            // - `grow` returned Ok, so the returned pointer must be valid for\n+            //   `new_size` bytes\n+            // - `new_size` must be larger than `old_size`, which is an\n+            //   invariant which must be upheld by callers.\n+            unsafe {\n+                raw_ptr.add(old_size).write_bytes(0, new_size - old_size);\n+            }\n         }\n         Ok(new_ptr)\n     }\n@@ -137,8 +156,18 @@ unsafe impl const Allocator for ConstAllocator {\n \n         let new_ptr = self.allocate(new_layout)?;\n         if new_layout.size() > 0 {\n-            new_ptr.as_mut_ptr().copy_from_nonoverlapping(ptr.as_ptr(), new_layout.size());\n-            self.deallocate(ptr, old_layout);\n+            // Safety: `new_ptr` and `ptr` are valid for reads/writes of\n+            // `new_layout.size()` because of the invariants of shrink, which\n+            // include `new_layout.size()` being smaller than (or equal to)\n+            // `old_layout.size()`.\n+            unsafe {\n+                new_ptr.as_mut_ptr().copy_from_nonoverlapping(ptr.as_ptr(), new_layout.size());\n+            }\n+            // Safety: `ptr` is never used again is also an invariant which must\n+            // be upheld by callers.\n+            unsafe {\n+                self.deallocate(ptr, old_layout);\n+            }\n         }\n         Ok(new_ptr)\n     }"}, {"sha": "d6d2b055b2395e8563543ed0628189b5b975823c", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -48,6 +48,7 @@\n #![feature(once_cell)]\n #![feature(drain_keep_rest)]\n #![deny(fuzzy_provenance_casts)]\n+#![deny(unsafe_op_in_unsafe_fn)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "7ebed0d5ca6994085d63c3ce2631e9c6d3cbd85d", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -1089,7 +1089,8 @@ fn test_into_iter_drop_allocator() {\n         }\n \n         unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {\n-            System.deallocate(ptr, layout)\n+            // Safety: Invariants passed to caller.\n+            unsafe { System.deallocate(ptr, layout) }\n         }\n     }\n "}, {"sha": "47cce2aa39b0c5fb8d4fb5b23b10a5c9b7204088", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -1025,7 +1025,7 @@ impl<T: ?Sized> RefCell<T> {\n     ///\n     /// Since this method borrows `RefCell` mutably, it is statically guaranteed\n     /// that no borrows to the underlying data exist. The dynamic checks inherent\n-    /// in [`borrow_mut`] and most other methods of `RefCell` are therefor\n+    /// in [`borrow_mut`] and most other methods of `RefCell` are therefore\n     /// unnecessary.\n     ///\n     /// This method can only be called if `RefCell` can be mutably borrowed,"}, {"sha": "a274d7b9aa1d3df2793feafdde7f9f61dcc4c5f9", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -1191,7 +1191,6 @@ impl Step for Clippy {\n \n         let mut tarball = Tarball::new(builder, \"clippy\", &target.triple);\n         tarball.set_overlay(OverlayKind::Clippy);\n-        tarball.is_preview(true);\n         tarball.add_file(clippy, \"bin\", 0o755);\n         tarball.add_file(cargoclippy, \"bin\", 0o755);\n         tarball.add_legal_and_readme_to(\"share/doc/clippy\");\n@@ -1289,7 +1288,6 @@ impl Step for Rustfmt {\n             .expect(\"cargo fmt expected to build - essential tool\");\n         let mut tarball = Tarball::new(builder, \"rustfmt\", &target.triple);\n         tarball.set_overlay(OverlayKind::Rustfmt);\n-        tarball.is_preview(true);\n         tarball.add_file(rustfmt, \"bin\", 0o755);\n         tarball.add_file(cargofmt, \"bin\", 0o755);\n         tarball.add_legal_and_readme_to(\"share/doc/rustfmt\");\n@@ -1550,8 +1548,6 @@ impl Step for Extended {\n                     format!(\"{}-{}\", name, target.triple)\n                 } else if name == \"rust-analyzer\" {\n                     \"rust-analyzer-preview\".to_string()\n-                } else if name == \"clippy\" {\n-                    \"clippy-preview\".to_string()\n                 } else if name == \"rust-demangler\" {\n                     \"rust-demangler-preview\".to_string()\n                 } else if name == \"miri\" {"}, {"sha": "430b3496d007c7b0c0cffccacd4fbcfd1b7693a3", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -326,6 +326,8 @@ impl Config {\n         }\n \n         let filename = format!(\"rustfmt-{version}-{build}.tar.xz\", build = host.triple);\n+        // cfg(bootstrap): will need to be changed from `rustfmt-preview` to `rustfmt` the next time you run `bump-stage0`.\n+        // See <https://github.com/rust-lang/rust/pull/103648>\n         self.download_component(DownloadSource::Dist, filename, \"rustfmt-preview\", &date, \"stage0\");\n \n         self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustfmt\"));"}, {"sha": "11ef0cfdb142262385678aa0f093af66e2c375bb", "filename": "src/doc/unstable-book/src/language-features/abi-efiapi.md", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-efiapi.md", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-efiapi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-efiapi.md?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -0,0 +1,23 @@\n+# `abi_efiapi`\n+\n+The tracking issue for this feature is: [#65815]\n+\n+[#65815]: https://github.com/rust-lang/rust/issues/65815\n+\n+------------------------\n+\n+The `efiapi` calling convention can be used for defining a function with\n+an ABI compatible with the UEFI Interfaces as defined in the [UEFI\n+Specification].\n+\n+Example:\n+\n+```rust\n+#![feature(abi_efiapi)]\n+\n+extern \"efiapi\" { fn f1(); }\n+\n+extern \"efiapi\" fn f2() { todo!() }\n+```\n+\n+[UEFI Specification]: https://uefi.org/specs/UEFI/2.10/"}, {"sha": "c1f7a8338342d550fd9d7eb9e1f255d8a737099a", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -1343,6 +1343,13 @@ a.test-arrow:hover {\n \tborder-bottom: 1px solid var(--border-color);\n \tmargin-bottom: 6px;\n }\n+#source-sidebar div.files > a:hover, details.dir-entry summary:hover,\n+#source-sidebar div.files > a:focus, details.dir-entry summary:focus {\n+\tbackground-color: var(--source-sidebar-background-hover);\n+}\n+#source-sidebar div.files > a.selected {\n+\tbackground-color: var(--source-sidebar-background-selected);\n+}\n #sidebar-toggle > button {\n \tfont-size: inherit;\n \tfont-weight: bold;"}, {"sha": "de7db7d438c9f4baf2ee19965d6202b62c65f640", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -84,6 +84,8 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--crate-search-div-hover-filter: invert(98%) sepia(12%) saturate(81%) hue-rotate(343deg)\n \t\tbrightness(113%) contrast(76%);\n \t--crate-search-hover-border: #e0e0e0;\n+\t--source-sidebar-background-selected: #14191f;\n+\t--source-sidebar-background-hover: #14191f;\n }\n \n h1, h2, h3, h4 {\n@@ -208,12 +210,8 @@ pre.rust .kw-2, pre.rust .prelude-ty {}\n \tcolor: #fff;\n }\n #source-sidebar div.files > a:hover, details.dir-entry summary:hover,\n-#source-sidebar div.files > a:focus, details.dir-entry summary:focus {\n-\tbackground-color: #14191f;\n-\tcolor: #ffb44c;\n-}\n+#source-sidebar div.files > a:focus, details.dir-entry summary:focus,\n #source-sidebar div.files > a.selected {\n-\tbackground-color: #14191f;\n \tcolor: #ffb44c;\n }\n "}, {"sha": "d8929f32338643a1276b6bbf6994ca125a133afe", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -79,6 +79,8 @@\n \t--crate-search-div-hover-filter: invert(69%) sepia(60%) saturate(6613%) hue-rotate(184deg)\n \t\tbrightness(100%) contrast(91%);\n \t--crate-search-hover-border: #2196f3;\n+\t--source-sidebar-background-selected: #333;\n+\t--source-sidebar-background-hover: #444;\n }\n \n .content .item-info::before { color: #ccc; }\n@@ -105,14 +107,6 @@ details.rustdoc-toggle > summary::before {\n \tcolor: #888;\n }\n \n-#source-sidebar div.files > a:hover, details.dir-entry summary:hover,\n-#source-sidebar div.files > a:focus, details.dir-entry summary:focus {\n-\tbackground-color: #444;\n-}\n-#source-sidebar div.files > a.selected {\n-\tbackground-color: #333;\n-}\n-\n .scraped-example-list .scrape-help {\n \tborder-color: #aaa;\n \tcolor: #eee;"}, {"sha": "ff6c68635338c6c324994fc9111421e01f2dc8bf", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -76,6 +76,8 @@\n \t--crate-search-div-hover-filter: invert(44%) sepia(18%) saturate(23%) hue-rotate(317deg)\n \t\tbrightness(96%) contrast(93%);\n \t--crate-search-hover-border: #717171;\n+\t--source-sidebar-background-selected: #fff;\n+\t--source-sidebar-background-hover: #e0e0e0;\n }\n \n .content .item-info::before { color: #ccc; }\n@@ -98,13 +100,6 @@ body.source .example-wrap pre.rust a {\n \tcolor: #888;\n }\n \n-#source-sidebar div.files > a:hover, details.dir-entry summary:hover,\n-#source-sidebar div.files > a:focus, details.dir-entry summary:focus {\n-\tbackground-color: #E0E0E0;\n-}\n-#source-sidebar div.files > a.selected {\n-\tbackground-color: #fff;\n-}\n .scraped-example-list .scrape-help {\n \tborder-color: #555;\n \tcolor: #333;"}, {"sha": "40ae4af81be45329419f13e007cdf1559d39f178", "filename": "src/test/rustdoc-gui/sidebar-source-code-display.goml", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -43,49 +43,77 @@ define-function: (\n             \"#source-sidebar details[open] > .files a.selected\",\n             {\"color\": |color_hover|, \"background-color\": |background|},\n         )),\n+\n         // Without hover or focus.\n         (\"assert-css\", (\"#sidebar-toggle > button\", {\"background-color\": |background_toggle|})),\n         // With focus.\n         (\"focus\", \"#sidebar-toggle > button\"),\n-        (\"assert-css\", (\"#sidebar-toggle > button\", {\"background-color\": |background_toggle_hover|})),\n+        (\"assert-css\", (\n+            \"#sidebar-toggle > button:focus\",\n+            {\"background-color\": |background_toggle_hover|},\n+        )),\n         (\"focus\", \".search-input\"),\n         // With hover.\n         (\"move-cursor-to\", \"#sidebar-toggle > button\"),\n-        (\"assert-css\", (\"#sidebar-toggle > button\", {\"background-color\": |background_toggle_hover|})),\n-        // Without hover.\n+        (\"assert-css\", (\n+            \"#sidebar-toggle > button:hover\",\n+            {\"background-color\": |background_toggle_hover|},\n+        )),\n+\n+        // Without hover or focus.\n         (\"assert-css\", (\n             \"#source-sidebar details[open] > .files a:not(.selected)\",\n             {\"color\": |color|, \"background-color\": |background_toggle|},\n         )),\n         // With focus.\n         (\"focus\", \"#source-sidebar details[open] > .files a:not(.selected)\"),\n         (\"wait-for-css\", (\n-            \"#source-sidebar details[open] > .files a:not(.selected)\",\n+            \"#source-sidebar details[open] > .files a:not(.selected):focus\",\n             {\"color\": |color_hover|, \"background-color\": |background_hover|},\n         )),\n         (\"focus\", \".search-input\"),\n         // With hover.\n         (\"move-cursor-to\", \"#source-sidebar details[open] > .files a:not(.selected)\"),\n         (\"assert-css\", (\n-            \"#source-sidebar details[open] > .files a:not(.selected)\",\n+            \"#source-sidebar details[open] > .files a:not(.selected):hover\",\n             {\"color\": |color_hover|, \"background-color\": |background_hover|},\n         )),\n-        // Without hover.\n+\n+        // Without hover or focus.\n+        (\"assert-css\", (\n+            \"#source-sidebar .dir-entry summary\",\n+            {\"color\": |color|, \"background-color\": |background_toggle|},\n+        )),\n+        // With focus.\n+        (\"focus\", \"#source-sidebar .dir-entry summary\"),\n+        (\"wait-for-css\", (\n+            \"#source-sidebar .dir-entry summary:focus\",\n+            {\"color\": |color_hover|, \"background-color\": |background_hover|},\n+        )),\n+        (\"focus\", \".search-input\"),\n+        // With hover.\n+        (\"move-cursor-to\", \"#source-sidebar .dir-entry summary\"),\n+        (\"assert-css\", (\n+            \"#source-sidebar .dir-entry summary:hover\",\n+            {\"color\": |color_hover|, \"background-color\": |background_hover|},\n+        )),\n+\n+        // Without hover or focus.\n         (\"assert-css\", (\n             \"#source-sidebar details[open] > .folders > details > summary\",\n             {\"color\": |color|, \"background-color\": |background_toggle|},\n         )),\n         // With focus.\n         (\"focus\", \"#source-sidebar details[open] > .folders > details > summary\"),\n         (\"wait-for-css\", (\n-            \"#source-sidebar details[open] > .folders > details > summary\",\n+            \"#source-sidebar details[open] > .folders > details > summary:focus\",\n             {\"color\": |color_hover|, \"background-color\": |background_hover|},\n         )),\n         (\"focus\", \".search-input\"),\n         // With hover.\n         (\"move-cursor-to\", \"#source-sidebar details[open] > .folders > details > summary\"),\n         (\"assert-css\", (\n-            \"#source-sidebar details[open] > .folders > details > summary\",\n+            \"#source-sidebar details[open] > .folders > details > summary:hover\",\n             {\"color\": |color_hover|, \"background-color\": |background_hover|},\n         )),\n     ],"}, {"sha": "66e6982d6b4d3c9941aef8c6b766e7e4193fd777", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -49,10 +49,10 @@ pkg_type! {\n     Cargo = \"cargo\",\n     HtmlDocs = \"rust-docs\",\n     RustAnalysis = \"rust-analysis\",\n+    Clippy = \"clippy\",\n+    Rustfmt = \"rustfmt\",\n     Rls = \"rls\"; preview = true,\n     RustAnalyzer = \"rust-analyzer\"; preview = true,\n-    Clippy = \"clippy\"; preview = true,\n-    Rustfmt = \"rustfmt\"; preview = true,\n     LlvmTools = \"llvm-tools\"; preview = true,\n     Miri = \"miri\"; preview = true,\n     JsonDocs = \"rust-docs-json\"; preview = true,"}, {"sha": "388203ee4637fb7b36dc0d98630d04f85bc25ae0", "filename": "src/tools/bump-stage0/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -6,7 +6,7 @@ use std::convert::TryInto;\n \n const PATH: &str = \"src/stage0.json\";\n const COMPILER_COMPONENTS: &[&str] = &[\"rustc\", \"rust-std\", \"cargo\"];\n-const RUSTFMT_COMPONENTS: &[&str] = &[\"rustfmt-preview\"];\n+const RUSTFMT_COMPONENTS: &[&str] = &[\"rustfmt\"];\n \n struct Tool {\n     config: Config,"}, {"sha": "c7c53bc69d0b858982c6d2254e8ca0d01786446f", "filename": "src/tools/clippy/clippy_dev/src/setup/git_hook.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -6,7 +6,7 @@ use super::verify_inside_clippy_dir;\n /// Rusts setup uses `git rev-parse --git-common-dir` to get the root directory of the repo.\n /// I've decided against this for the sake of simplicity and to make sure that it doesn't install\n /// the hook if `clippy_dev` would be used in the rust tree. The hook also references this tool\n-/// for formatting and should therefor only be used in a normal clone of clippy\n+/// for formatting and should therefore only be used in a normal clone of clippy\n const REPO_GIT_DIR: &str = \".git\";\n const HOOK_SOURCE_FILE: &str = \"util/etc/pre-commit.sh\";\n const HOOK_TARGET_FILE: &str = \".git/hooks/pre-commit\";"}, {"sha": "c944fc51e8287da1716c47c5932a31d54da8fd1b", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e704e95250ff4e949214f390a88f21d08052bea1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e704e95250ff4e949214f390a88f21d08052bea1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=e704e95250ff4e949214f390a88f21d08052bea1", "patch": "@@ -113,7 +113,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n                     }\n                 }\n \n-                // eq_pat adds the HirIds to the locals map. We therefor call it last to make sure that\n+                // eq_pat adds the HirIds to the locals map. We therefore call it last to make sure that\n                 // these only get added if the init and type is equal.\n                 both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n                     && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r))"}]}