{"sha": "08dc72f5d54d3385d2a772b0ce2c92459ff25bfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZGM3MmY1ZDU0ZDMzODVkMmE3NzJiMGNlMmM5MjQ1OWZmMjViZmQ=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-06T03:42:45Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-06T03:42:45Z"}, "message": "deque: Implement FromIterator\n\nSo that deque can be used with IteratorUtil::collect()", "tree": {"sha": "28988177c94f4560b6efe4d06805ff5e6baf6dd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28988177c94f4560b6efe4d06805ff5e6baf6dd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08dc72f5d54d3385d2a772b0ce2c92459ff25bfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08dc72f5d54d3385d2a772b0ce2c92459ff25bfd", "html_url": "https://github.com/rust-lang/rust/commit/08dc72f5d54d3385d2a772b0ce2c92459ff25bfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08dc72f5d54d3385d2a772b0ce2c92459ff25bfd/comments", "author": null, "committer": null, "parents": [{"sha": "40ce0b7d76fe39c58e4bdf119af33c4d24950077", "url": "https://api.github.com/repos/rust-lang/rust/commits/40ce0b7d76fe39c58e4bdf119af33c4d24950077", "html_url": "https://github.com/rust-lang/rust/commit/40ce0b7d76fe39c58e4bdf119af33c4d24950077"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "3710f089e2f7389c08c555e1e1c2e7105663c23f", "filename": "src/libextra/deque.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/08dc72f5d54d3385d2a772b0ce2c92459ff25bfd/src%2Flibextra%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08dc72f5d54d3385d2a772b0ce2c92459ff25bfd/src%2Flibextra%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdeque.rs?ref=08dc72f5d54d3385d2a772b0ce2c92459ff25bfd", "patch": "@@ -13,6 +13,7 @@\n use std::uint;\n use std::vec;\n use std::cast::transmute;\n+use std::iterator::FromIterator;\n \n static INITIAL_CAPACITY: uint = 32u; // 2^5\n \n@@ -253,6 +254,16 @@ fn get<'r, T>(elts: &'r [Option<T>], i: uint) -> &'r T {\n     match elts[i] { Some(ref t) => t, _ => fail!() }\n }\n \n+impl<A, T: Iterator<A>> FromIterator<A, T> for Deque<A> {\n+    fn from_iterator(iterator: &mut T) -> Deque<A> {\n+        let mut deq = Deque::new();\n+        for iterator.advance |elt| {\n+            deq.add_back(elt);\n+        }\n+        deq\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -545,4 +556,20 @@ mod tests {\n         }\n         assert_eq!(d.rev_iter().collect::<~[&int]>(), ~[&4,&3,&2,&1,&0,&6,&7,&8]);\n     }\n+\n+    #[test]\n+    fn test_from_iterator() {\n+        use std::iterator;\n+        let v = ~[1,2,3,4,5,6,7];\n+        let deq: Deque<int> = v.iter().transform(|&x| x).collect();\n+        let u: ~[int] = deq.iter().transform(|&x| x).collect();\n+        assert_eq!(u, v);\n+\n+        let mut seq = iterator::Counter::new(0u, 2).take_(256);\n+        let deq: Deque<uint> = seq.collect();\n+        for deq.iter().enumerate().advance |(i, &x)| {\n+            assert_eq!(2*i, x);\n+        }\n+        assert_eq!(deq.len(), 256);\n+    }\n }"}]}