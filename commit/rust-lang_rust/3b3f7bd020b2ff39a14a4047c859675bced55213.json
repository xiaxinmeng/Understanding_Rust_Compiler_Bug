{"sha": "3b3f7bd020b2ff39a14a4047c859675bced55213", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiM2Y3YmQwMjBiMmZmMzlhMTRhNDA0N2M4NTk2NzViY2VkNTUyMTM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-26T11:42:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-26T11:42:31Z"}, "message": "Rollup merge of #71562 - matthiaskrgr:cl7ppy, r=Dylan-DPC\n\nfix more clippy warnings\n\nclippy::{redundant_pattern_matching, clone_on_copy, iter_cloned_collect, option_as_ref_deref, match_ref_pats}\n\nr? @Dylan-DPC", "tree": {"sha": "0c9ab9c61f38ecd2229b487d3cf6191ef1b1904f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c9ab9c61f38ecd2229b487d3cf6191ef1b1904f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b3f7bd020b2ff39a14a4047c859675bced55213", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepXOnCRBK7hj4Ov3rIwAAdHIIAKQofleV6d7ZrH+UKD+tKDoS\nlp/PGxP1nm/AECClqPUHZO93fYT1biiK0dZFHrMSVCA+2czbuOxlfUhCD8I8Q7gC\n24iyVSvDnFvMV7W5KeVxwwP2B1WfIxTPToU6d47BySVY2WhpELMywfBEc8alR5h8\nqqc7m5rD9FJCzpNebfq9m4YsqiSnTDffroxy3Bt1X0gYg/hFbuySqJbW3fzpoxOC\n5GrUUB3YOcU+LfR+NRKfaoP2ZdNyzjqoEZn0rIaJEJb2Ed5+Ohqraw6+1tl1kKJf\nHWJX54o/4z+So8lb30922uLPT4hUvLvxNdOFMdksstKgeoaCHhg5USg9Z59aGQw=\n=wpyK\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c9ab9c61f38ecd2229b487d3cf6191ef1b1904f\nparent 96c1bb571abd77fcb706d7cdb4a0823a471767c2\nparent 8862f829bbfbc25a2b4e02210a94907787d1cd8b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587901351 +0200\ncommitter GitHub <noreply@github.com> 1587901351 +0200\n\nRollup merge of #71562 - matthiaskrgr:cl7ppy, r=Dylan-DPC\n\nfix more clippy warnings\n\nclippy::{redundant_pattern_matching, clone_on_copy, iter_cloned_collect, option_as_ref_deref, match_ref_pats}\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b3f7bd020b2ff39a14a4047c859675bced55213", "html_url": "https://github.com/rust-lang/rust/commit/3b3f7bd020b2ff39a14a4047c859675bced55213", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b3f7bd020b2ff39a14a4047c859675bced55213/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c1bb571abd77fcb706d7cdb4a0823a471767c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c1bb571abd77fcb706d7cdb4a0823a471767c2", "html_url": "https://github.com/rust-lang/rust/commit/96c1bb571abd77fcb706d7cdb4a0823a471767c2"}, {"sha": "8862f829bbfbc25a2b4e02210a94907787d1cd8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8862f829bbfbc25a2b4e02210a94907787d1cd8b", "html_url": "https://github.com/rust-lang/rust/commit/8862f829bbfbc25a2b4e02210a94907787d1cd8b"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "a3ef9989184336fb20881b878e26aa5c2f2a8d8c", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=3b3f7bd020b2ff39a14a4047c859675bced55213", "patch": "@@ -1269,7 +1269,7 @@ impl<'a, T: Ord> Drop for DrainSorted<'a, T> {\n \n         impl<'r, 'a, T: Ord> Drop for DropGuard<'r, 'a, T> {\n             fn drop(&mut self) {\n-                while let Some(_) = self.0.inner.pop() {}\n+                while self.0.inner.pop().is_some() {}\n             }\n         }\n "}, {"sha": "bfa4045787f5b7141d98addc638f8a1392c0c9fb", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=3b3f7bd020b2ff39a14a4047c859675bced55213", "patch": "@@ -972,7 +972,7 @@ unsafe impl<#[may_dangle] T> Drop for LinkedList<T> {\n             fn drop(&mut self) {\n                 // Continue the same loop we do below. This only runs when a destructor has\n                 // panicked. If another one panics this will abort.\n-                while let Some(_) = self.0.pop_front_node() {}\n+                while self.0.pop_front_node().is_some() {}\n             }\n         }\n "}, {"sha": "913ccf8e68089ab6bab489539858986eba9ac2ab", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=3b3f7bd020b2ff39a14a4047c859675bced55213", "patch": "@@ -618,15 +618,15 @@ impl RustcDefaultCalls {\n     ) -> Compilation {\n         let r = matches.opt_strs(\"Z\");\n         if r.iter().any(|s| *s == \"ls\") {\n-            match input {\n-                &Input::File(ref ifile) => {\n+            match *input {\n+                Input::File(ref ifile) => {\n                     let path = &(*ifile);\n                     let mut v = Vec::new();\n                     locator::list_file_metadata(&sess.target.target, path, metadata_loader, &mut v)\n                         .unwrap();\n                     println!(\"{}\", String::from_utf8(v).unwrap());\n                 }\n-                &Input::Str { .. } => {\n+                Input::Str { .. } => {\n                     early_error(ErrorOutputType::default(), \"cannot list metadata for stdin\");\n                 }\n             }"}, {"sha": "367dc4dee7ee034800d4ecc95b6f4d87f6141560", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=3b3f7bd020b2ff39a14a4047c859675bced55213", "patch": "@@ -625,8 +625,8 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n                     | ast::TyKind::Rptr(_, ast::MutTy { ty: ref subty, .. })\n                     | ast::TyKind::Paren(ref subty) => involves_impl_trait(subty),\n                     ast::TyKind::Tup(ref tys) => any_involves_impl_trait(tys.iter()),\n-                    ast::TyKind::Path(_, ref path) => path.segments.iter().any(|seg| {\n-                        match seg.args.as_ref().map(|generic_arg| &**generic_arg) {\n+                    ast::TyKind::Path(_, ref path) => {\n+                        path.segments.iter().any(|seg| match seg.args.as_deref() {\n                             None => false,\n                             Some(&ast::GenericArgs::AngleBracketed(ref data)) => {\n                                 data.args.iter().any(|arg| match arg {\n@@ -647,8 +647,8 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n                                 any_involves_impl_trait(data.inputs.iter())\n                                     || ReplaceBodyWithLoop::should_ignore_fn(&data.output)\n                             }\n-                        }\n-                    }),\n+                        })\n+                    }\n                     _ => false,\n                 }\n             }"}, {"sha": "7d1639cbcf7a1791d2a03d43eee9f0572a1e16ce", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=3b3f7bd020b2ff39a14a4047c859675bced55213", "patch": "@@ -431,7 +431,7 @@ impl CStore {\n                 ident,\n                 id: ast::DUMMY_NODE_ID,\n                 span,\n-                attrs: attrs.iter().cloned().collect(),\n+                attrs: attrs.to_vec(),\n                 kind: ast::ItemKind::MacroDef(data.get_macro(id.index, sess)),\n                 vis: source_map::respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n                 tokens: None,"}, {"sha": "b9eb58f800e5c0d388af07cec6e054e0df8e3015", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=3b3f7bd020b2ff39a14a4047c859675bced55213", "patch": "@@ -246,7 +246,7 @@ impl<'tcx> Action<'tcx> {\n     }\n \n     fn constant(src_constant: &Constant<'tcx>) -> Option<Action<'tcx>> {\n-        Some(Action::PropagateConstant((*src_constant).clone()))\n+        Some(Action::PropagateConstant(*src_constant))\n     }\n \n     fn perform(\n@@ -371,7 +371,7 @@ impl<'tcx> MutVisitor<'tcx> for ConstantPropagationVisitor<'tcx> {\n             _ => return,\n         }\n \n-        *operand = Operand::Constant(box self.constant.clone());\n+        *operand = Operand::Constant(box self.constant);\n         self.uses_replaced += 1\n     }\n }"}, {"sha": "38f71135c7d928558df37a5e8d98ed0c4992d048", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=3b3f7bd020b2ff39a14a4047c859675bced55213", "patch": "@@ -292,7 +292,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let of_fld = Field::new(1);\n \n             let tcx = self.hir.tcx();\n-            let val = tcx.mk_place_field(result_value.clone(), val_fld, ty);\n+            let val = tcx.mk_place_field(result_value, val_fld, ty);\n             let of = tcx.mk_place_field(result_value, of_fld, bool_ty);\n \n             let err = AssertKind::Overflow(op);"}, {"sha": "9f7c1af8951991500723eafd6e6ed16b27d1134c", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b3f7bd020b2ff39a14a4047c859675bced55213/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=3b3f7bd020b2ff39a14a4047c859675bced55213", "patch": "@@ -329,7 +329,7 @@ impl<T> Packet<T> {\n             );\n             cnt != DISCONNECTED && cnt != steals\n         } {\n-            while let Some(_) = self.queue.pop() {\n+            while self.queue.pop().is_some() {\n                 steals += 1;\n             }\n         }"}]}