{"sha": "c491e195c467aa11e736457a6bc451e4fc214df6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0OTFlMTk1YzQ2N2FhMTFlNzM2NDU3YTZiYzQ1MWU0ZmMyMTRkZjY=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-08-21T18:43:45Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-09-05T18:50:37Z"}, "message": "new attribute #[doc(masked)] to hide internal crates from std docs", "tree": {"sha": "aac161964ef0adbe8c79d23215fac1eecbcf35d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aac161964ef0adbe8c79d23215fac1eecbcf35d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c491e195c467aa11e736457a6bc451e4fc214df6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c491e195c467aa11e736457a6bc451e4fc214df6", "html_url": "https://github.com/rust-lang/rust/commit/c491e195c467aa11e736457a6bc451e4fc214df6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c491e195c467aa11e736457a6bc451e4fc214df6/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f1ef9ef1181298d46e79d5dde6bafeb6483926f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f1ef9ef1181298d46e79d5dde6bafeb6483926f", "html_url": "https://github.com/rust-lang/rust/commit/2f1ef9ef1181298d46e79d5dde6bafeb6483926f"}], "stats": {"total": 94, "additions": 76, "deletions": 18}, "files": [{"sha": "c092c66ad165029d5523e746e55e523e1fd93e7c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c491e195c467aa11e736457a6bc451e4fc214df6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c491e195c467aa11e736457a6bc451e4fc214df6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c491e195c467aa11e736457a6bc451e4fc214df6", "patch": "@@ -117,6 +117,7 @@ pub struct Crate {\n     // These are later on moved into `CACHEKEY`, leaving the map empty.\n     // Only here so that they can be filtered through the rustdoc passes.\n     pub external_traits: FxHashMap<DefId, Trait>,\n+    pub masked_crates: FxHashSet<CrateNum>,\n }\n \n impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n@@ -141,6 +142,18 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n         // Clean the crate, translating the entire libsyntax AST to one that is\n         // understood by rustdoc.\n         let mut module = self.module.clean(cx);\n+        let mut masked_crates = FxHashSet();\n+\n+        match module.inner {\n+            ModuleItem(ref module) => {\n+                for it in &module.items {\n+                    if it.is_extern_crate() && it.attrs.has_doc_masked() {\n+                        masked_crates.insert(it.def_id.krate);\n+                    }\n+                }\n+            }\n+            _ => unreachable!(),\n+        }\n \n         let ExternalCrate { name, src, primitives, .. } = LOCAL_CRATE.clean(cx);\n         {\n@@ -173,6 +186,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n             primitives,\n             access_levels: Arc::new(mem::replace(&mut access_levels, Default::default())),\n             external_traits: mem::replace(&mut external_traits, Default::default()),\n+            masked_crates,\n         }\n     }\n }\n@@ -326,6 +340,9 @@ impl Item {\n     pub fn is_import(&self) -> bool {\n         self.type_() == ItemType::Import\n     }\n+    pub fn is_extern_crate(&self) -> bool {\n+        self.type_() == ItemType::ExternCrate\n+    }\n \n     pub fn is_stripped(&self) -> bool {\n         match self.inner { StrippedItem(..) => true, _ => false }\n@@ -571,6 +588,20 @@ impl Attributes {\n         None\n     }\n \n+    pub fn has_doc_masked(&self) -> bool {\n+        for attr in &self.other_attrs {\n+            if !attr.check_name(\"doc\") { continue; }\n+\n+            if let Some(items) = attr.meta_item_list() {\n+                if items.iter().filter_map(|i| i.meta_item()).any(|it| it.check_name(\"masked\")) {\n+                    return true;\n+                }\n+            }\n+        }\n+\n+        false\n+    }\n+\n     pub fn from_ast(diagnostic: &::errors::Handler, attrs: &[ast::Attribute]) -> Attributes {\n         let mut doc_strings = vec![];\n         let mut sp = None;\n@@ -1651,6 +1682,16 @@ impl GetDefId for Type {\n     fn def_id(&self) -> Option<DefId> {\n         match *self {\n             ResolvedPath { did, .. } => Some(did),\n+            Primitive(p) => ::html::render::cache().primitive_locations.get(&p).cloned(),\n+            BorrowedRef { type_: box Generic(..), .. } =>\n+                Primitive(PrimitiveType::Reference).def_id(),\n+            BorrowedRef { ref type_, .. } => type_.def_id(),\n+            Tuple(..) => Primitive(PrimitiveType::Tuple).def_id(),\n+            BareFunction(..) => Primitive(PrimitiveType::Fn).def_id(),\n+            Slice(..) => Primitive(PrimitiveType::Slice).def_id(),\n+            Array(..) => Primitive(PrimitiveType::Array).def_id(),\n+            RawPointer(..) => Primitive(PrimitiveType::RawPointer).def_id(),\n+            QPath { ref self_type, .. } => self_type.def_id(),\n             _ => None,\n         }\n     }"}, {"sha": "75e922d08c804e21125215f1dcaa674f3a9739de", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c491e195c467aa11e736457a6bc451e4fc214df6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c491e195c467aa11e736457a6bc451e4fc214df6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c491e195c467aa11e736457a6bc451e4fc214df6", "patch": "@@ -268,6 +268,7 @@ pub struct Cache {\n     deref_trait_did: Option<DefId>,\n     deref_mut_trait_did: Option<DefId>,\n     owned_box_did: Option<DefId>,\n+    masked_crates: FxHashSet<CrateNum>,\n \n     // In rare case where a structure is defined in one module but implemented\n     // in another, if the implementing module is parsed before defining module,\n@@ -540,6 +541,7 @@ pub fn run(mut krate: clean::Crate,\n         deref_trait_did,\n         deref_mut_trait_did,\n         owned_box_did,\n+        masked_crates: mem::replace(&mut krate.masked_crates, FxHashSet()),\n         typarams: external_typarams,\n     };\n \n@@ -1104,12 +1106,16 @@ impl DocFolder for Cache {\n \n         // Collect all the implementors of traits.\n         if let clean::ImplItem(ref i) = item.inner {\n-            if let Some(did) = i.trait_.def_id() {\n-                self.implementors.entry(did).or_insert(vec![]).push(Implementor {\n-                    def_id: item.def_id,\n-                    stability: item.stability.clone(),\n-                    impl_: i.clone(),\n-                });\n+            if !self.masked_crates.contains(&item.def_id.krate) {\n+                if let Some(did) = i.trait_.def_id() {\n+                    if i.for_.def_id().map_or(true, |d| !self.masked_crates.contains(&d.krate)) {\n+                        self.implementors.entry(did).or_insert(vec![]).push(Implementor {\n+                            def_id: item.def_id,\n+                            stability: item.stability.clone(),\n+                            impl_: i.clone(),\n+                        });\n+                    }\n+                }\n             }\n         }\n \n@@ -1271,18 +1277,24 @@ impl DocFolder for Cache {\n                 // primitive rather than always to a struct/enum.\n                 // Note: matching twice to restrict the lifetime of the `i` borrow.\n                 let did = if let clean::Item { inner: clean::ImplItem(ref i), .. } = item {\n-                    match i.for_ {\n-                        clean::ResolvedPath { did, .. } |\n-                        clean::BorrowedRef {\n-                            type_: box clean::ResolvedPath { did, .. }, ..\n-                        } => {\n-                            Some(did)\n-                        }\n-                        ref t => {\n-                            t.primitive_type().and_then(|t| {\n-                                self.primitive_locations.get(&t).cloned()\n-                            })\n+                    let masked_trait = i.trait_.def_id().map_or(false,\n+                        |d| self.masked_crates.contains(&d.krate));\n+                    if !masked_trait {\n+                        match i.for_ {\n+                            clean::ResolvedPath { did, .. } |\n+                            clean::BorrowedRef {\n+                                type_: box clean::ResolvedPath { did, .. }, ..\n+                            } => {\n+                                Some(did)\n+                            }\n+                            ref t => {\n+                                t.primitive_type().and_then(|t| {\n+                                    self.primitive_locations.get(&t).cloned()\n+                                })\n+                            }\n                         }\n+                    } else {\n+                        None\n                     }\n                 } else {\n                     unreachable!()"}, {"sha": "6fa4a8738ac7bd00d4dea5e4a66a2c9ec1d59b7c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c491e195c467aa11e736457a6bc451e4fc214df6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c491e195c467aa11e736457a6bc451e4fc214df6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c491e195c467aa11e736457a6bc451e4fc214df6", "patch": "@@ -347,19 +347,24 @@ use prelude::v1::*;\n                  debug_assert_ne, unreachable, unimplemented, write, writeln, try)]\n extern crate core as __core;\n \n-#[allow(deprecated)] extern crate rand as core_rand;\n+#[doc(masked)]\n+#[allow(deprecated)]\n+extern crate rand as core_rand;\n #[macro_use]\n #[macro_reexport(vec, format)]\n extern crate alloc;\n extern crate alloc_system;\n extern crate std_unicode;\n+#[doc(masked)]\n extern crate libc;\n \n // We always need an unwinder currently for backtraces\n+#[doc(masked)]\n #[allow(unused_extern_crates)]\n extern crate unwind;\n \n // compiler-rt intrinsics\n+#[doc(masked)]\n extern crate compiler_builtins;\n \n // During testing, this crate is not actually the \"real\" std library, but rather"}]}