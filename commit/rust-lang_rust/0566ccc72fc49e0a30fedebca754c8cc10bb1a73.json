{"sha": "0566ccc72fc49e0a30fedebca754c8cc10bb1a73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NjZjY2M3MmZjNDllMGEzMGZlZGViY2E3NTRjOGNjMTBiYjFhNzM=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2021-04-15T01:34:51Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2021-04-15T18:52:09Z"}, "message": "rename pat2015 to pat_param", "tree": {"sha": "08d06ef86b9bc74f0a1e5b2d21be6d004b899528", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08d06ef86b9bc74f0a1e5b2d21be6d004b899528"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0566ccc72fc49e0a30fedebca754c8cc10bb1a73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0566ccc72fc49e0a30fedebca754c8cc10bb1a73", "html_url": "https://github.com/rust-lang/rust/commit/0566ccc72fc49e0a30fedebca754c8cc10bb1a73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebc4acee91dc9871d1c90f0d7a38aff0580dd18a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc4acee91dc9871d1c90f0d7a38aff0580dd18a", "html_url": "https://github.com/rust-lang/rust/commit/ebc4acee91dc9871d1c90f0d7a38aff0580dd18a"}], "stats": {"total": 68, "additions": 35, "deletions": 33}, "files": [{"sha": "3bd2d0fa324a46b1930673095a4cb3c906b604a6", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=0566ccc72fc49e0a30fedebca754c8cc10bb1a73", "patch": "@@ -688,13 +688,13 @@ pub enum NonterminalKind {\n     Item,\n     Block,\n     Stmt,\n-    Pat2015 {\n-        /// Keep track of whether the user used `:pat2015` or `:pat` and we inferred it from the\n+    PatParam {\n+        /// Keep track of whether the user used `:pat_param` or `:pat` and we inferred it from the\n         /// edition of the span. This is used for diagnostics.\n         inferred: bool,\n     },\n     Pat2021 {\n-        /// Keep track of whether the user used `:pat2015` or `:pat` and we inferred it from the\n+        /// Keep track of whether the user used `:pat_param` or `:pat` and we inferred it from the\n         /// edition of the span. This is used for diagnostics.\n         inferred: bool,\n     },\n@@ -722,11 +722,11 @@ impl NonterminalKind {\n             sym::stmt => NonterminalKind::Stmt,\n             sym::pat => match edition() {\n                 Edition::Edition2015 | Edition::Edition2018 => {\n-                    NonterminalKind::Pat2015 { inferred: true }\n+                    NonterminalKind::PatParam { inferred: true }\n                 }\n                 Edition::Edition2021 => NonterminalKind::Pat2021 { inferred: true },\n             },\n-            sym::pat2015 => NonterminalKind::Pat2015 { inferred: false },\n+            sym::pat_param => NonterminalKind::PatParam { inferred: false },\n             sym::pat2021 => NonterminalKind::Pat2021 { inferred: false },\n             sym::expr => NonterminalKind::Expr,\n             sym::ty => NonterminalKind::Ty,\n@@ -745,9 +745,9 @@ impl NonterminalKind {\n             NonterminalKind::Item => sym::item,\n             NonterminalKind::Block => sym::block,\n             NonterminalKind::Stmt => sym::stmt,\n-            NonterminalKind::Pat2015 { inferred: false } => sym::pat2015,\n+            NonterminalKind::PatParam { inferred: false } => sym::pat_param,\n             NonterminalKind::Pat2021 { inferred: false } => sym::pat2021,\n-            NonterminalKind::Pat2015 { inferred: true }\n+            NonterminalKind::PatParam { inferred: true }\n             | NonterminalKind::Pat2021 { inferred: true } => sym::pat,\n             NonterminalKind::Expr => sym::expr,\n             NonterminalKind::Ty => sym::ty,"}, {"sha": "7a2fa3d2475123515418b3b6a7121fd763d65e14", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=0566ccc72fc49e0a30fedebca754c8cc10bb1a73", "patch": "@@ -955,15 +955,15 @@ fn check_matcher_core(\n             if let TokenTree::MetaVarDecl(span, name, Some(kind)) = *token {\n                 for next_token in &suffix_first.tokens {\n                     // Check if the old pat is used and the next token is `|`.\n-                    if let NonterminalKind::Pat2015 { inferred: true } = kind {\n+                    if let NonterminalKind::PatParam { inferred: true } = kind {\n                         if let TokenTree::Token(token) = next_token {\n                             if let BinOp(token) = token.kind {\n                                 if let token::BinOpToken::Or = token {\n-                                    // It is suggestion to use pat2015, for example: $x:pat -> $x:pat2015.\n+                                    // It is suggestion to use pat_param, for example: $x:pat -> $x:pat_param.\n                                     let suggestion = quoted_tt_to_string(&TokenTree::MetaVarDecl(\n                                         span,\n                                         name,\n-                                        Some(NonterminalKind::Pat2015 { inferred: false }),\n+                                        Some(NonterminalKind::PatParam { inferred: false }),\n                                     ));\n                                     sess.buffer_lint_with_diagnostic(\n                                         &OR_PATTERNS_BACK_COMPAT,\n@@ -1105,7 +1105,7 @@ fn is_in_follow(tok: &mbe::TokenTree, kind: NonterminalKind) -> IsInFollow {\n                     _ => IsInFollow::No(TOKENS),\n                 }\n             }\n-            NonterminalKind::Pat2015 { .. } => {\n+            NonterminalKind::PatParam { .. } => {\n                 const TOKENS: &[&str] = &[\"`=>`\", \"`,`\", \"`=`\", \"`|`\", \"`if`\", \"`in`\"];\n                 match tok {\n                     TokenTree::Token(token) => match token.kind {"}, {"sha": "c1d6a4f1de1ffa4789e366d57de329e711b81dde", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=0566ccc72fc49e0a30fedebca754c8cc10bb1a73", "patch": "@@ -710,7 +710,7 @@ pub trait LintContext: Sized {\n                     db.note(&note);\n                 }\n                 BuiltinLintDiagnostics::OrPatternsBackCompat(span,suggestion) => {\n-                    db.span_suggestion(span, \"use pat2015 to preserve semantics\", suggestion, Applicability::MachineApplicable);\n+                    db.span_suggestion(span, \"use pat_param to preserve semantics\", suggestion, Applicability::MachineApplicable);\n                 }\n             }\n             // Rewrap `db`, and pass control to the user."}, {"sha": "5635fbbb978ea00413b3ecc1e88ef73643956afe", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=0566ccc72fc49e0a30fedebca754c8cc10bb1a73", "patch": "@@ -61,7 +61,8 @@ impl<'a> Parser<'a> {\n                 },\n                 _ => false,\n             },\n-            NonterminalKind::Pat2015 { .. } | NonterminalKind::Pat2021 { .. } => match token.kind {\n+            NonterminalKind::PatParam { .. } | NonterminalKind::Pat2021 { .. } => {\n+                match token.kind {\n                 token::Ident(..) |                  // box, ref, mut, and other identifiers (can stricten)\n                 token::OpenDelim(token::Paren) |    // tuple pattern\n                 token::OpenDelim(token::Bracket) |  // slice pattern\n@@ -78,7 +79,8 @@ impl<'a> Parser<'a> {\n                 token::BinOp(token::Or) =>  matches!(kind, NonterminalKind::Pat2021 {..}),\n                 token::Interpolated(ref nt) => may_be_ident(nt),\n                 _ => false,\n-            },\n+            }\n+            }\n             NonterminalKind::Lifetime => match token.kind {\n                 token::Lifetime(_) => true,\n                 token::Interpolated(ref nt) => {\n@@ -118,9 +120,9 @@ impl<'a> Parser<'a> {\n                     return Err(self.struct_span_err(self.token.span, \"expected a statement\"));\n                 }\n             },\n-            NonterminalKind::Pat2015 { .. } | NonterminalKind::Pat2021 { .. } => {\n+            NonterminalKind::PatParam { .. } | NonterminalKind::Pat2021 { .. } => {\n                 token::NtPat(self.collect_tokens_no_attrs(|this| match kind {\n-                    NonterminalKind::Pat2015 { .. } => this.parse_pat_no_top_alt(None),\n+                    NonterminalKind::PatParam { .. } => this.parse_pat_no_top_alt(None),\n                     NonterminalKind::Pat2021 { .. } => {\n                         this.parse_pat_allow_top_alt(None, RecoverComma::No)\n                     }"}, {"sha": "db0d0b9966c949e12ac96597aadb3a8e7ddc04a5", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0566ccc72fc49e0a30fedebca754c8cc10bb1a73", "patch": "@@ -849,8 +849,8 @@ symbols! {\n         partial_ord,\n         passes,\n         pat,\n-        pat2015,\n         pat2021,\n+        pat_param,\n         path,\n         pattern_parentheses,\n         phantom_data,"}, {"sha": "fdd8626c760b135411e95a4b90fbc9a35519789f", "filename": "src/test/ui/feature-gates/feature-gate-edition_macro_pats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-edition_macro_pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-edition_macro_pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-edition_macro_pats.rs?ref=0566ccc72fc49e0a30fedebca754c8cc10bb1a73", "patch": "@@ -1,7 +1,7 @@\n // Feature gate test for `edition_macro_pats` feature.\n \n macro_rules! foo {\n-    ($x:pat2015) => {}; // ok\n+    ($x:pat_param) => {}; // ok\n     ($x:pat2021) => {}; //~ERROR `pat2021` is unstable\n }\n "}, {"sha": "963a9c01a3b69ff71664a067fe16a6a7d3fefe73", "filename": "src/test/ui/macros/edition-macro-pats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/src%2Ftest%2Fui%2Fmacros%2Fedition-macro-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/src%2Ftest%2Fui%2Fmacros%2Fedition-macro-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fedition-macro-pats.rs?ref=0566ccc72fc49e0a30fedebca754c8cc10bb1a73", "patch": "@@ -3,7 +3,7 @@\n #![feature(edition_macro_pats)]\n \n macro_rules! foo {\n-    (a $x:pat2015) => {};\n+    (a $x:pat_param) => {};\n     (b $x:pat2021) => {};\n }\n "}, {"sha": "e0bd4cdde24d1c5519b60101949983308c80638a", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.fixed", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed?ref=0566ccc72fc49e0a30fedebca754c8cc10bb1a73", "patch": "@@ -3,13 +3,13 @@\n #![feature(edition_macro_pats)]\n #![deny(or_patterns_back_compat)]\n #![allow(unused_macros)]\n-macro_rules! foo { ($x:pat2015 | $y:pat) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-macro_rules! bar { ($($x:pat2015)+ | $($y:pat)+) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-macro_rules! baz { ($x:pat2015 | $y:pat2015) => {} } // should be ok\n-macro_rules! qux { ($x:pat2015 | $y:pat) => {} } // should be ok\n-macro_rules! ogg { ($x:pat2015 | $y:pat2015) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+macro_rules! foo { ($x:pat_param | $y:pat) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+macro_rules! bar { ($($x:pat_param)+ | $($y:pat)+) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+macro_rules! baz { ($x:pat_param | $y:pat_param) => {} } // should be ok\n+macro_rules! qux { ($x:pat_param | $y:pat) => {} } // should be ok\n+macro_rules! ogg { ($x:pat_param | $y:pat_param) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n macro_rules! match_any {\n-    ( $expr:expr , $( $( $pat:pat2015 )|+ => $expr_arm:expr ),+ ) => { //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+    ( $expr:expr , $( $( $pat:pat_param )|+ => $expr_arm:expr ),+ ) => { //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n         match $expr {\n             $(\n                 $( $pat => $expr_arm, )+"}, {"sha": "9ff072dc3235f75b4110bae83361a22b7a0c4261", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs?ref=0566ccc72fc49e0a30fedebca754c8cc10bb1a73", "patch": "@@ -5,9 +5,9 @@\n #![allow(unused_macros)]\n macro_rules! foo { ($x:pat | $y:pat) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-macro_rules! baz { ($x:pat2015 | $y:pat2015) => {} } // should be ok\n-macro_rules! qux { ($x:pat2015 | $y:pat) => {} } // should be ok\n-macro_rules! ogg { ($x:pat | $y:pat2015) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+macro_rules! baz { ($x:pat_param | $y:pat_param) => {} } // should be ok\n+macro_rules! qux { ($x:pat_param | $y:pat) => {} } // should be ok\n+macro_rules! ogg { ($x:pat | $y:pat_param) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n macro_rules! match_any {\n     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => { //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n         match $expr {"}, {"sha": "970f62f6cff48442b064cef4258118ba73eb5234", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0566ccc72fc49e0a30fedebca754c8cc10bb1a73/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr?ref=0566ccc72fc49e0a30fedebca754c8cc10bb1a73", "patch": "@@ -2,7 +2,7 @@ error: the meaning of the `pat` fragment specifier is changing in Rust 2021, whi\n   --> $DIR/macro-or-patterns-back-compat.rs:6:21\n    |\n LL | macro_rules! foo { ($x:pat | $y:pat) => {} }\n-   |                     ^^^^^^ help: use pat2015 to preserve semantics: `$x:pat2015`\n+   |                     ^^^^^^ help: use pat_param to preserve semantics: `$x:pat_param`\n    |\n note: the lint level is defined here\n   --> $DIR/macro-or-patterns-back-compat.rs:4:9\n@@ -14,19 +14,19 @@ error: the meaning of the `pat` fragment specifier is changing in Rust 2021, whi\n   --> $DIR/macro-or-patterns-back-compat.rs:7:23\n    |\n LL | macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} }\n-   |                       ^^^^^^ help: use pat2015 to preserve semantics: `$x:pat2015`\n+   |                       ^^^^^^ help: use pat_param to preserve semantics: `$x:pat_param`\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n   --> $DIR/macro-or-patterns-back-compat.rs:10:21\n    |\n-LL | macro_rules! ogg { ($x:pat | $y:pat2015) => {} }\n-   |                     ^^^^^^ help: use pat2015 to preserve semantics: `$x:pat2015`\n+LL | macro_rules! ogg { ($x:pat | $y:pat_param) => {} }\n+   |                     ^^^^^^ help: use pat_param to preserve semantics: `$x:pat_param`\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n   --> $DIR/macro-or-patterns-back-compat.rs:12:26\n    |\n LL |     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n-   |                          ^^^^^^^^ help: use pat2015 to preserve semantics: `$pat:pat2015`\n+   |                          ^^^^^^^^ help: use pat_param to preserve semantics: `$pat:pat_param`\n \n error: aborting due to 4 previous errors\n "}]}