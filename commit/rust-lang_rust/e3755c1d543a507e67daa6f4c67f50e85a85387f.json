{"sha": "e3755c1d543a507e67daa6f4c67f50e85a85387f", "node_id": "C_kwDOAAsO6NoAKGUzNzU1YzFkNTQzYTUwN2U2N2RhYTZmNGM2N2Y1MGU4NWE4NTM4N2Y", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-24T02:59:06Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-24T05:06:50Z"}, "message": "Rename `thir::Adt` as `thir::AdtExpr`.\n\nThis matches the naming scheme used elsewhere, e.g. in the AST, and\navoids name clashes with the `ExprKind::Closure` variant.", "tree": {"sha": "ad69bae09e21a360140efbeee3a94151d3a92a8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad69bae09e21a360140efbeee3a94151d3a92a8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3755c1d543a507e67daa6f4c67f50e85a85387f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3755c1d543a507e67daa6f4c67f50e85a85387f", "html_url": "https://github.com/rust-lang/rust/commit/e3755c1d543a507e67daa6f4c67f50e85a85387f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3755c1d543a507e67daa6f4c67f50e85a85387f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e57ac764b80e1f0ddb06bb49cb1eb12c699022bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e57ac764b80e1f0ddb06bb49cb1eb12c699022bb", "html_url": "https://github.com/rust-lang/rust/commit/e57ac764b80e1f0ddb06bb49cb1eb12c699022bb"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "c5d0892dde910c0f24dfea0978db45586181610e", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3755c1d543a507e67daa6f4c67f50e85a85387f/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3755c1d543a507e67daa6f4c67f50e85a85387f/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=e3755c1d543a507e67daa6f4c67f50e85a85387f", "patch": "@@ -108,7 +108,7 @@ pub struct Block {\n type UserTy<'tcx> = Option<Box<CanonicalUserType<'tcx>>>;\n \n #[derive(Clone, Debug, HashStable)]\n-pub struct Adt<'tcx> {\n+pub struct AdtExpr<'tcx> {\n     /// The ADT we're constructing.\n     pub adt_def: AdtDef<'tcx>,\n     /// The variant of the ADT.\n@@ -390,7 +390,7 @@ pub enum ExprKind<'tcx> {\n         fields: Box<[ExprId]>,\n     },\n     /// An ADT constructor, e.g. `Foo {x: 1, y: 2}`.\n-    Adt(Box<Adt<'tcx>>),\n+    Adt(Box<AdtExpr<'tcx>>),\n     /// A type ascription on a place.\n     PlaceTypeAscription {\n         source: ExprId,"}, {"sha": "c5c48a6360925a151a3c50ca3ef457059c6bad8e", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3755c1d543a507e67daa6f4c67f50e85a85387f/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3755c1d543a507e67daa6f4c67f50e85a85387f/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=e3755c1d543a507e67daa6f4c67f50e85a85387f", "patch": "@@ -1,6 +1,6 @@\n use super::{\n-    Arm, Block, ClosureExpr, Expr, ExprKind, Guard, InlineAsmExpr, InlineAsmOperand, Pat, PatKind, Stmt, StmtKind,\n-    Thir,\n+    AdtExpr, Arm, Block, ClosureExpr, Expr, ExprKind, Guard, InlineAsmExpr, InlineAsmOperand, Pat,\n+    PatKind, Stmt, StmtKind, Thir,\n };\n \n pub trait Visitor<'a, 'tcx: 'a>: Sized {\n@@ -109,7 +109,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n                 visitor.visit_expr(&visitor.thir()[field]);\n             }\n         }\n-        Adt(box crate::thir::Adt {\n+        Adt(box AdtExpr {\n             ref fields,\n             ref base,\n             adt_def: _,"}, {"sha": "48ec7a06724a11d0c11081d2da602d590681fe4c", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3755c1d543a507e67daa6f4c67f50e85a85387f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3755c1d543a507e67daa6f4c67f50e85a85387f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=e3755c1d543a507e67daa6f4c67f50e85a85387f", "patch": "@@ -314,7 +314,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 this.cfg.push_assign(block, source_info, destination, address_of);\n                 block.unit()\n             }\n-            ExprKind::Adt(box Adt {\n+            ExprKind::Adt(box AdtExpr {\n                 adt_def,\n                 variant_index,\n                 substs,\n@@ -400,7 +400,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 );\n                 block.unit()\n             }\n-            ExprKind::InlineAsm(box InlineAsmExpr { template, ref operands, options, line_spans }) => {\n+            ExprKind::InlineAsm(box InlineAsmExpr {\n+                template,\n+                ref operands,\n+                options,\n+                line_spans,\n+            }) => {\n                 use rustc_middle::{mir, thir};\n                 let operands = operands\n                     .into_iter()"}, {"sha": "bf5a2e7c73fabf8a36ac3e9a01bd0fc8f83cdbdb", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3755c1d543a507e67daa6f4c67f50e85a85387f/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3755c1d543a507e67daa6f4c67f50e85a85387f/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=e3755c1d543a507e67daa6f4c67f50e85a85387f", "patch": "@@ -391,7 +391,7 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             ExprKind::InlineAsm { .. } => {\n                 self.requires_unsafe(expr.span, UseOfInlineAssembly);\n             }\n-            ExprKind::Adt(box Adt {\n+            ExprKind::Adt(box AdtExpr {\n                 adt_def,\n                 variant_index: _,\n                 substs: _,"}, {"sha": "0c2b117453fe9ed5785a444d4ee0deff4186f34b", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3755c1d543a507e67daa6f4c67f50e85a85387f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3755c1d543a507e67daa6f4c67f50e85a85387f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=e3755c1d543a507e67daa6f4c67f50e85a85387f", "patch": "@@ -341,7 +341,7 @@ impl<'tcx> Cx<'tcx> {\n                                 expr: self.mirror_expr(e),\n                             })\n                             .collect();\n-                        ExprKind::Adt(Box::new(Adt {\n+                        ExprKind::Adt(Box::new(AdtExpr {\n                             adt_def,\n                             substs,\n                             variant_index: index,\n@@ -466,7 +466,7 @@ impl<'tcx> Cx<'tcx> {\n                         let user_provided_types = self.typeck_results().user_provided_types();\n                         let user_ty = user_provided_types.get(expr.hir_id).copied().map(Box::new);\n                         debug!(\"make_mirror_unadjusted: (struct/union) user_ty={:?}\", user_ty);\n-                        ExprKind::Adt(Box::new(Adt {\n+                        ExprKind::Adt(Box::new(AdtExpr {\n                             adt_def: *adt,\n                             variant_index: VariantIdx::new(0),\n                             substs,\n@@ -493,7 +493,7 @@ impl<'tcx> Cx<'tcx> {\n                                 let user_ty =\n                                     user_provided_types.get(expr.hir_id).copied().map(Box::new);\n                                 debug!(\"make_mirror_unadjusted: (variant) user_ty={:?}\", user_ty);\n-                                ExprKind::Adt(Box::new(Adt {\n+                                ExprKind::Adt(Box::new(AdtExpr {\n                                     adt_def: *adt,\n                                     variant_index: index,\n                                     substs,\n@@ -867,7 +867,7 @@ impl<'tcx> Cx<'tcx> {\n                 match ty.kind() {\n                     // A unit struct/variant which is used as a value.\n                     // We return a completely different ExprKind here to account for this special case.\n-                    ty::Adt(adt_def, substs) => ExprKind::Adt(Box::new(Adt {\n+                    ty::Adt(adt_def, substs) => ExprKind::Adt(Box::new(AdtExpr {\n                         adt_def: *adt_def,\n                         variant_index: adt_def.variant_index_with_ctor_id(def_id),\n                         substs,"}]}