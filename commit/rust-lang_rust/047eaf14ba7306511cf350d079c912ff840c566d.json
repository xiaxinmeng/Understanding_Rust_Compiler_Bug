{"sha": "047eaf14ba7306511cf350d079c912ff840c566d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0N2VhZjE0YmE3MzA2NTExY2YzNTBkMDc5YzkxMmZmODQwYzU2NmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-24T11:27:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-24T11:27:11Z"}, "message": "Rustup to rustc 1.42.0-nightly (9ae6cedb8 2019-12-23)", "tree": {"sha": "00e94cc977afbb2514f16b55a10310b7dc32a592", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00e94cc977afbb2514f16b55a10310b7dc32a592"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/047eaf14ba7306511cf350d079c912ff840c566d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/047eaf14ba7306511cf350d079c912ff840c566d", "html_url": "https://github.com/rust-lang/rust/commit/047eaf14ba7306511cf350d079c912ff840c566d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/047eaf14ba7306511cf350d079c912ff840c566d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d89f307ea251d78df4457140cdc23f335940885c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d89f307ea251d78df4457140cdc23f335940885c", "html_url": "https://github.com/rust-lang/rust/commit/d89f307ea251d78df4457140cdc23f335940885c"}], "stats": {"total": 50, "additions": 22, "deletions": 28}, "files": [{"sha": "5592818474ebe9f8fc3cf68dfd7c6bcaf53ce2e1", "filename": "patches/0017-Fix-libtest-compilation.patch", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/047eaf14ba7306511cf350d079c912ff840c566d/patches%2F0017-Fix-libtest-compilation.patch", "raw_url": "https://github.com/rust-lang/rust/raw/047eaf14ba7306511cf350d079c912ff840c566d/patches%2F0017-Fix-libtest-compilation.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0017-Fix-libtest-compilation.patch?ref=047eaf14ba7306511cf350d079c912ff840c566d", "patch": "@@ -12,8 +12,8 @@ index 8b76080..9e65de2 100644\n --- a/src/libtest/lib.rs\n +++ b/src/libtest/lib.rs\n @@ -52,7 +52,7 @@ use std::fmt;\n-     env,\n-     io,\n+ use std::{\n+     env, io,\n      io::prelude::Write,\n -    panic::{self, catch_unwind, AssertUnwindSafe, PanicInfo},\n +    panic::{self, PanicInfo},\n@@ -79,15 +79,12 @@ index 8b76080..9e65de2 100644\n      let exec_time = start.map(|start| {\n          let duration = start.elapsed();\n          TestExecTime(duration)\n-@@ -1688,10 +1676,10 @@ fn spawn_test_subprocess(desc: TestDesc, report_time: bool, monitor_ch: Sender<M\n+@@ -1688,7 +1676,7 @@ fn spawn_test_subprocess(desc: TestDesc, report_time: bool, monitor_ch: Sender<M\n      monitor_ch.send(message).unwrap();\n  }\n  \n- fn run_test_in_spawned_subprocess(\n-     desc: TestDesc,\n--    testfn: Box<dyn FnOnce() + Send>,\n-+    testfn: Box<impl FnOnce() + Send + 'static>,\n- ) -> ! {\n+-fn run_test_in_spawned_subprocess(desc: TestDesc, testfn: Box<dyn FnOnce() + Send>) -> ! {\n++fn run_test_in_spawned_subprocess(desc: TestDesc, testfn: Box<impl FnOnce() + Send + 'static>) -> ! {\n      let builtin_panic_hook = panic::take_hook();\n      let record_result = Arc::new(move |panic_info: Option<&'_ PanicInfo<'_>>| {\n          let test_result = match panic_info {"}, {"sha": "f5473834f0b45f48a5df0e3436d903e67f1dfb8d", "filename": "patches/0023-core-Ignore-failing-tests.patch", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/047eaf14ba7306511cf350d079c912ff840c566d/patches%2F0023-core-Ignore-failing-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/047eaf14ba7306511cf350d079c912ff840c566d/patches%2F0023-core-Ignore-failing-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0023-core-Ignore-failing-tests.patch?ref=047eaf14ba7306511cf350d079c912ff840c566d", "patch": "@@ -137,7 +137,7 @@ index a17c094..5bb11d2 100644\n  #[test]\n +#[ignore]\n  fn from_str_issue7588() {\n-     let u : Option<u8> = u8::from_str_radix(\"1000\", 10).ok();\n+     let u: Option<u8> = u8::from_str_radix(\"1000\", 10).ok();\n      assert_eq!(u, None);\n @@ -613,11 +614,9 @@ test_impl_try_from_signed_to_unsigned_err! { test_try_i64u32, i64, u32 }\n  test_impl_try_from_signed_to_unsigned_err! { test_try_i128u8, i128, u8 }\n@@ -152,21 +152,21 @@ index a17c094..5bb11d2 100644\n      cfg_block! {\n          #[cfg(target_pointer_width = \"16\")] {\n @@ -640,6 +639,7 @@ macro_rules! test_float {\n-     ($modname: ident, $fty: ty, $inf: expr, $neginf: expr, $nan: expr) => { mod $modname {\n-         // FIXME(nagisa): these tests should test for sign of -0.0\n-         #[test]\n-+        #[ignore]\n-         fn min() {\n-             assert_eq!((0.0 as $fty).min(0.0), 0.0);\n-             assert_eq!((-0.0 as $fty).min(-0.0), -0.0);\n+         mod $modname {\n+             // FIXME(nagisa): these tests should test for sign of -0.0\n+             #[test]\n++            #[ignore]\n+             fn min() {\n+                 assert_eq!((0.0 as $fty).min(0.0), 0.0);\n+                 assert_eq!((-0.0 as $fty).min(-0.0), -0.0);\n @@ -662,6 +662,7 @@ macro_rules! test_float {\n-             assert!(($nan as $fty).min($nan).is_nan());\n-         }\n-         #[test]\n-+        #[ignore]\n-         fn max() {\n-             assert_eq!((0.0 as $fty).max(0.0), 0.0);\n-             assert_eq!((-0.0 as $fty).max(-0.0), -0.0);\n+                 assert!(($nan as $fty).min($nan).is_nan());\n+             }\n+             #[test]\n++            #[ignore]\n+             fn max() {\n+                 assert_eq!((0.0 as $fty).max(0.0), 0.0);\n+                 assert_eq!((-0.0 as $fty).max(-0.0), -0.0);\n diff --git a/src/libcore/tests/time.rs b/src/libcore/tests/time.rs\n index fac70c4..9107a02 100644\n --- a/src/libcore/tests/time.rs"}, {"sha": "599da32ee828890d9d10a68c0d6ba7a9b669fedb", "filename": "patches/0024-libstd-Revert-arg-initialization-on-linux-to-not-req.patch", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/047eaf14ba7306511cf350d079c912ff840c566d/patches%2F0024-libstd-Revert-arg-initialization-on-linux-to-not-req.patch", "raw_url": "https://github.com/rust-lang/rust/raw/047eaf14ba7306511cf350d079c912ff840c566d/patches%2F0024-libstd-Revert-arg-initialization-on-linux-to-not-req.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0024-libstd-Revert-arg-initialization-on-linux-to-not-req.patch?ref=047eaf14ba7306511cf350d079c912ff840c566d", "patch": "@@ -12,14 +12,11 @@ diff --git a/src/libstd/sys/unix/args.rs b/src/libstd/sys/unix/args.rs\n index 2ed1585..b4b021a 100644\n --- a/src/libstd/sys/unix/args.rs\n +++ b/src/libstd/sys/unix/args.rs\n-@@ -83,10 +83,7 @@ mod imp {\n+@@ -83,7 +83,7 @@ mod imp {\n          // On Linux-GNU, we rely on `ARGV_INIT_ARRAY` below to initialize\n          // `ARGC` and `ARGV`. But in Miri that does not actually happen so we\n          // still initialize here.\n--        #[cfg(any(\n--            miri,\n--            not(all(target_os = \"linux\", target_env = \"gnu\"))\n--        ))]\n+-        #[cfg(any(miri, not(all(target_os = \"linux\", target_env = \"gnu\"))))]\n +        // `#[link_section]` is not yet supported by cg_clif\n          really_init(_argc, _argv);\n      }"}]}