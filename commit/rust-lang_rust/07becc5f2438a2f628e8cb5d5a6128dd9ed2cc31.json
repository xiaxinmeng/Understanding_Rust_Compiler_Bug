{"sha": "07becc5f2438a2f628e8cb5d5a6128dd9ed2cc31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YmVjYzVmMjQzOGEyZjYyOGU4Y2I1ZDVhNjEyOGRkOWVkMmNjMzE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2017-09-09T00:22:50Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2017-09-09T00:22:50Z"}, "message": "Fix regression in promotion of rvalues referencing a static\n\nThis commit makes librustc_passes::consts::CheckCrateVisitor properly\nmark expressions as promotable if they reference a static, as it's\nperfectly fine for one static to reference another. It fixes a\nregression that prevented a temporary rvalue from referencing a static\nif it was itself declared within a static.\n\nPrior to commit https://github.com/rust-lang/rust/commit/b8c05fe90bc,\n`region::ScopeTree` would only register a 'terminating scope' for function\nbodies. Thus, while rvalues in a static that referenced a static would be marked\nunpromotable, the lack of enclosing scope would cause\nmem_categorization::MemCategorizationContext::cat_rvalue_node\nto compute a 'temporary scope' of `ReStatic`. Since this had the same\neffect as explicitly selecting a scope of `ReStatic`\ndue to the rvalue being marked by CheckCrateVisitor as promotable,\nno issue occurred.\n\nHowever, commit https://github.com/rust-lang/rust/commit/b8c05fe90bc\nmade ScopeTree unconditionally register a 'terminating scope'\nSince mem_categorization would now compute a non-static 'temporary scope', the\naforementioned rvalues would be erroneously marked as living for too\nshort a time.\n\nBy fixing the behavior of CheckCrateVisitor, this commit avoids changing\nmem_categorization's behavior, while ensuring that temporary values in\nstatics are still allowed to reference other statics.\n\nFixes issue #44373", "tree": {"sha": "9cdfcf01e197a5d611a7f4959be7e0ba6eec88de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cdfcf01e197a5d611a7f4959be7e0ba6eec88de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07becc5f2438a2f628e8cb5d5a6128dd9ed2cc31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlmzPYcACgkQtAh+UQ6Y\nsWTXuw/6AppWFXKyBl5k7k/QTwz7/bDD0sufed2yp7osCDUqL1Ik9KlmDttAdBcx\nWVJkj88dm/urgRIjkMxa0qKdAHuforQgqhKqOvinGGQ+p3fDgIRbLEwDP+v1Zf91\ngnnJd3i1mFe25Dmx/EDu6rzuP3nC6torGB3g8SbWbtMeSDMLyd3ItGcQNwfHOG/r\n3rOJv8B6SUdiLAowy/c/C8Bgti0zXJGt2d972oRPaGKM5N7ACmZivCaqTSpjphBW\n6YdPYan6q2aXJpilDiEPe/Eca2jB3g69iNNY5o5xNADT6XbeWnc4wBD4xVoORoYD\naEkCCQobj4sTJXmClHpkbo4Ptg9lYTgGqW9bZqdq/ZK8npIWDBw4vOkUjLDmJQAV\nGRgbTvUdAChTBiEWk5X11QwiOVuPS2utJvdAgvbFtpSJc63mZ/2Bdo7ObnJmW9lR\nFHx83KunMDosaZG+9p6Ba1UXtzzuXQh0b6A+DD8pBIA33CVX5Uwdw5k/VCqokYST\nAtEyDZIupoYf5csyQkPSeuse5roqaWoJKauEnsZsvo8qXcuSVi8Vf0iBSnRnR9+k\n6f3NZqrA7pMp54w4ZigaqUD4m9qtEeeGMCrMRTHIkGnCyGMyPq2bU85PHbh+Pn0k\ne7eREpdTV9gUNGjNHGg05VcRUxCcm46t7Xz1LSSueRo2Usy3848=\n=Q66Y\n-----END PGP SIGNATURE-----", "payload": "tree 9cdfcf01e197a5d611a7f4959be7e0ba6eec88de\nparent dead08cb331343b84564628b139b657f93548320\nauthor Aaron Hill <aa1ronham@gmail.com> 1504916570 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1504916570 -0400\n\nFix regression in promotion of rvalues referencing a static\n\nThis commit makes librustc_passes::consts::CheckCrateVisitor properly\nmark expressions as promotable if they reference a static, as it's\nperfectly fine for one static to reference another. It fixes a\nregression that prevented a temporary rvalue from referencing a static\nif it was itself declared within a static.\n\nPrior to commit https://github.com/rust-lang/rust/commit/b8c05fe90bc,\n`region::ScopeTree` would only register a 'terminating scope' for function\nbodies. Thus, while rvalues in a static that referenced a static would be marked\nunpromotable, the lack of enclosing scope would cause\nmem_categorization::MemCategorizationContext::cat_rvalue_node\nto compute a 'temporary scope' of `ReStatic`. Since this had the same\neffect as explicitly selecting a scope of `ReStatic`\ndue to the rvalue being marked by CheckCrateVisitor as promotable,\nno issue occurred.\n\nHowever, commit https://github.com/rust-lang/rust/commit/b8c05fe90bc\nmade ScopeTree unconditionally register a 'terminating scope'\nSince mem_categorization would now compute a non-static 'temporary scope', the\naforementioned rvalues would be erroneously marked as living for too\nshort a time.\n\nBy fixing the behavior of CheckCrateVisitor, this commit avoids changing\nmem_categorization's behavior, while ensuring that temporary values in\nstatics are still allowed to reference other statics.\n\nFixes issue #44373\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07becc5f2438a2f628e8cb5d5a6128dd9ed2cc31", "html_url": "https://github.com/rust-lang/rust/commit/07becc5f2438a2f628e8cb5d5a6128dd9ed2cc31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07becc5f2438a2f628e8cb5d5a6128dd9ed2cc31/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dead08cb331343b84564628b139b657f93548320", "url": "https://api.github.com/repos/rust-lang/rust/commits/dead08cb331343b84564628b139b657f93548320", "html_url": "https://github.com/rust-lang/rust/commit/dead08cb331343b84564628b139b657f93548320"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "f7581bb604fe2be295444e5a609c3b8b8054138e", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/07becc5f2438a2f628e8cb5d5a6128dd9ed2cc31/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07becc5f2438a2f628e8cb5d5a6128dd9ed2cc31/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=07becc5f2438a2f628e8cb5d5a6128dd9ed2cc31", "patch": "@@ -327,7 +327,28 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n             let def = v.tables.qpath_def(qpath, e.hir_id);\n             match def {\n                 Def::VariantCtor(..) | Def::StructCtor(..) |\n-                Def::Fn(..) | Def::Method(..) => {}\n+                Def::Fn(..) | Def::Method(..) =>  {}\n+\n+                // References to a static are inherently promotable,\n+                // with the exception of \"#[thread_loca]\" statics.\n+                // The latter may not outlive the current function\n+                Def::Static(did, _) => {\n+                    let mut thread_local = false;\n+\n+                    for attr in &v.tcx.get_attrs(did)[..] {\n+                        if attr.check_name(\"thread_local\") {\n+                            debug!(\"Static(id={:?}) is unpromotable \\\n+                                   due to a #[thread_local] attribute\", did);\n+                            v.promotable = false;\n+                            thread_local = true;\n+                            break;\n+                        }\n+                    }\n+\n+                    if !thread_local {\n+                        debug!(\"Allowing promotion of reference to Static(id={:?})\", did);\n+                    }\n+                }\n \n                 Def::Const(did) |\n                 Def::AssociatedConst(did) => {"}, {"sha": "06627e2ad9341509b72b1c7bf11dca343a3c1909", "filename": "src/test/run-pass/issue-44373.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/07becc5f2438a2f628e8cb5d5a6128dd9ed2cc31/src%2Ftest%2Frun-pass%2Fissue-44373.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07becc5f2438a2f628e8cb5d5a6128dd9ed2cc31/src%2Ftest%2Frun-pass%2Fissue-44373.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-44373.rs?ref=07becc5f2438a2f628e8cb5d5a6128dd9ed2cc31", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo(bool);\n+\n+struct Container(&'static [&'static Foo]);\n+\n+static FOO: Foo = Foo(true);\n+static CONTAINER: Container = Container(&[&FOO]);\n+\n+fn main() {}"}]}