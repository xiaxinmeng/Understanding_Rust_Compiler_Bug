{"sha": "586b619c76a3e5798283408954a0306d86ebc1ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NmI2MTljNzZhM2U1Nzk4MjgzNDA4OTU0YTAzMDZkODZlYmMxZWY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-03-07T15:50:40Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-03-12T07:05:20Z"}, "message": "Changed lists of lifetimes in ast and ty to use Vec instead of OptVec.\n\nThere is a broader revision (that does this across the board) pending\nin #12675, but that is awaiting the arrival of more data (to decide\nwhether to keep OptVec alive by using a non-Vec internally).\n\nFor this code, the representation of lifetime lists needs to be the\nsame in both ScopeChain and in the ast and ty structures.  So it\nseemed cleanest to just use `vec_ng::Vec`, now that it has a cheaper\nempty representation than the current `vec` code.", "tree": {"sha": "ae1f2910935851e30fbbef23b9d5465b1f117461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae1f2910935851e30fbbef23b9d5465b1f117461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/586b619c76a3e5798283408954a0306d86ebc1ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/586b619c76a3e5798283408954a0306d86ebc1ef", "html_url": "https://github.com/rust-lang/rust/commit/586b619c76a3e5798283408954a0306d86ebc1ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/586b619c76a3e5798283408954a0306d86ebc1ef/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28ebec516015eb0b9cef05e5da0685a18620b105", "url": "https://api.github.com/repos/rust-lang/rust/commits/28ebec516015eb0b9cef05e5da0685a18620b105", "html_url": "https://github.com/rust-lang/rust/commit/28ebec516015eb0b9cef05e5da0685a18620b105"}], "stats": {"total": 143, "additions": 72, "deletions": 71}, "files": [{"sha": "c1fd83cab54cc6ccd4f3cecd83359e694d430e9a", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -164,12 +164,12 @@ impl fold::Folder for PreludeInjector {\n             segments: vec!(\n                 ast::PathSegment {\n                     identifier: token::str_to_ident(\"std\"),\n-                    lifetimes: opt_vec::Empty,\n+                    lifetimes: Vec::new(),\n                     types: opt_vec::Empty,\n                 },\n                 ast::PathSegment {\n                     identifier: token::str_to_ident(\"prelude\"),\n-                    lifetimes: opt_vec::Empty,\n+                    lifetimes: Vec::new(),\n                     types: opt_vec::Empty,\n                 }),\n         };"}, {"sha": "d403efcf8cd2637efa6f38ac48601bfbe5e4e328", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -369,7 +369,7 @@ fn path_node(ids: Vec<ast::Ident> ) -> ast::Path {\n         global: false,\n         segments: ids.move_iter().map(|identifier| ast::PathSegment {\n             identifier: identifier,\n-            lifetimes: opt_vec::Empty,\n+            lifetimes: Vec::new(),\n             types: opt_vec::Empty,\n         }).collect()\n     }\n@@ -381,7 +381,7 @@ fn path_node_global(ids: Vec<ast::Ident> ) -> ast::Path {\n         global: true,\n         segments: ids.move_iter().map(|identifier| ast::PathSegment {\n             identifier: identifier,\n-            lifetimes: opt_vec::Empty,\n+            lifetimes: Vec::new(),\n             types: opt_vec::Empty,\n         }).collect()\n     }"}, {"sha": "5cee3e1a20dd9414f6a34e7f44720df479f0a9c9", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -13,6 +13,7 @@\n //! which are available for use externally when compiled as a library.\n \n use std::mem::replace;\n+use std::vec_ng::Vec;\n \n use metadata::csearch;\n use middle::lint;\n@@ -855,7 +856,7 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n                                 debug!(\"privacy - list {}\", pid.node.id);\n                                 let seg = ast::PathSegment {\n                                     identifier: pid.node.name,\n-                                    lifetimes: opt_vec::Empty,\n+                                    lifetimes: Vec::new(),\n                                     types: opt_vec::Empty,\n                                 };\n                                 let segs = vec!(seg);"}, {"sha": "6a55b05b77ec9f2a4dc84f43f0b217713827280e", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -19,10 +19,10 @@\n \n use driver::session;\n use std::cell::RefCell;\n+use std::vec_ng::Vec;\n use util::nodemap::NodeMap;\n use syntax::ast;\n use syntax::codemap::Span;\n-use syntax::opt_vec::OptVec;\n use syntax::parse::token::special_idents;\n use syntax::parse::token;\n use syntax::print::pprust::{lifetime_to_str};\n@@ -39,8 +39,8 @@ struct LifetimeContext {\n }\n \n enum ScopeChain<'a> {\n-    ItemScope(&'a OptVec<ast::Lifetime>),\n-    FnScope(ast::NodeId, &'a OptVec<ast::Lifetime>, Scope<'a>),\n+    ItemScope(&'a Vec<ast::Lifetime>),\n+    FnScope(ast::NodeId, &'a Vec<ast::Lifetime>, Scope<'a>),\n     BlockScope(ast::NodeId, Scope<'a>),\n     RootScope\n }\n@@ -267,7 +267,7 @@ impl LifetimeContext {\n                     token::get_name(lifetime_ref.name)));\n     }\n \n-    fn check_lifetime_names(&self, lifetimes: &OptVec<ast::Lifetime>) {\n+    fn check_lifetime_names(&self, lifetimes: &Vec<ast::Lifetime>) {\n         for i in range(0, lifetimes.len()) {\n             let lifetime_i = lifetimes.get(i);\n \n@@ -313,7 +313,7 @@ impl LifetimeContext {\n     }\n }\n \n-fn search_lifetimes(lifetimes: &OptVec<ast::Lifetime>,\n+fn search_lifetimes(lifetimes: &Vec<ast::Lifetime>,\n                     lifetime_ref: &ast::Lifetime)\n                     -> Option<(uint, ast::NodeId)> {\n     for (i, lifetime_decl) in lifetimes.iter().enumerate() {"}, {"sha": "6ade20d29136df4f40abbd5e7aea753644373c48", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -540,7 +540,7 @@ pub fn create_function_debug_context(cx: &CrateContext,\n         return FunctionWithoutDebugInfo;\n     }\n \n-    let empty_generics = ast::Generics { lifetimes: opt_vec::Empty, ty_params: opt_vec::Empty };\n+    let empty_generics = ast::Generics { lifetimes: Vec::new(), ty_params: opt_vec::Empty };\n \n     let fnitem = cx.tcx.map.get(fn_ast_id);\n "}, {"sha": "e8770f9d142cfe492d8714adfa95bf5df3615c85", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -186,9 +186,9 @@ fn ast_path_substs<AC:AstConv,RS:RegionScope>(\n         }\n \n         match anon_regions {\n-            Ok(v) => opt_vec::from(v.move_iter().collect()),\n-            Err(()) => opt_vec::from(Vec::from_fn(expected_num_region_params,\n-                                                  |_| ty::ReStatic)) // hokey\n+            Ok(v) => v.move_iter().collect(),\n+            Err(()) => Vec::from_fn(expected_num_region_params,\n+                                    |_| ty::ReStatic) // hokey\n         }\n     };\n \n@@ -231,7 +231,7 @@ fn ast_path_substs<AC:AstConv,RS:RegionScope>(\n                             .collect();\n \n     let mut substs = substs {\n-        regions: ty::NonerasedRegions(regions),\n+        regions: ty::NonerasedRegions(opt_vec::from(regions)),\n         self_ty: self_ty,\n         tps: tps\n     };"}, {"sha": "b10e1bcd5def2d11658cfc27e0b84621ce638bcf", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -1453,8 +1453,7 @@ pub fn impl_self_ty(vcx: &VtableContext,\n     let tps = vcx.infcx.next_ty_vars(n_tps);\n \n     let substs = substs {\n-        regions: ty::NonerasedRegions(opt_vec::from(rps.move_iter()\n-                                                       .collect())),\n+        regions: ty::NonerasedRegions(opt_vec::from(rps.move_iter().collect())),\n         self_ty: None,\n         tps: tps,\n     };\n@@ -3741,11 +3740,11 @@ pub fn instantiate_path(fcx: @FnCtxt,\n                         nsupplied = num_supplied_regions));\n         }\n \n-        opt_vec::from(fcx.infcx().next_region_vars(\n+        fcx.infcx().next_region_vars(\n                 infer::BoundRegionInTypeOrImpl(span),\n-                num_expected_regions).move_iter().collect())\n+                num_expected_regions).move_iter().collect()\n     };\n-    let regions = ty::NonerasedRegions(regions);\n+    let regions = ty::NonerasedRegions(opt_vec::from(regions));\n \n     // Special case: If there is a self parameter, omit it from the list of\n     // type parameters."}, {"sha": "b6b18f6671d311a1cb85655586ce97ca4e5e4416", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -142,7 +142,7 @@ pub struct PathSegment {\n     /// The identifier portion of this path segment.\n     identifier: Ident,\n     /// The lifetime parameters for this path segment.\n-    lifetimes: OptVec<Lifetime>,\n+    lifetimes: Vec<Lifetime>,\n     /// The type parameters for this path segment, if present.\n     types: OptVec<P<Ty>>,\n }\n@@ -187,7 +187,7 @@ pub struct TyParam {\n \n #[deriving(Clone, Eq, Encodable, Decodable, Hash)]\n pub struct Generics {\n-    lifetimes: OptVec<Lifetime>,\n+    lifetimes: Vec<Lifetime>,\n     ty_params: OptVec<TyParam>,\n }\n \n@@ -795,7 +795,7 @@ impl fmt::Show for Onceness {\n pub struct ClosureTy {\n     sigil: Sigil,\n     region: Option<Lifetime>,\n-    lifetimes: OptVec<Lifetime>,\n+    lifetimes: Vec<Lifetime>,\n     purity: Purity,\n     onceness: Onceness,\n     decl: P<FnDecl>,\n@@ -810,7 +810,7 @@ pub struct ClosureTy {\n pub struct BareFnTy {\n     purity: Purity,\n     abis: AbiSet,\n-    lifetimes: OptVec<Lifetime>,\n+    lifetimes: Vec<Lifetime>,\n     decl: P<FnDecl>\n }\n "}, {"sha": "d45ea2067924bb70a05ca6c3db85d98fe062fb1c", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -195,7 +195,7 @@ pub fn ident_to_path(s: Span, identifier: Ident) -> Path {\n         segments: vec!(\n             ast::PathSegment {\n                 identifier: identifier,\n-                lifetimes: opt_vec::Empty,\n+                lifetimes: Vec::new(),\n                 types: opt_vec::Empty,\n             }\n         ),\n@@ -311,7 +311,7 @@ pub fn operator_prec(op: ast::BinOp) -> uint {\n pub static as_prec: uint = 12u;\n \n pub fn empty_generics() -> Generics {\n-    Generics {lifetimes: opt_vec::Empty,\n+    Generics {lifetimes: Vec::new(),\n               ty_params: opt_vec::Empty}\n }\n \n@@ -690,10 +690,11 @@ mod test {\n     use ast::*;\n     use super::*;\n     use opt_vec;\n+    use std::vec_ng::Vec;\n \n     fn ident_to_segment(id : &Ident) -> PathSegment {\n         PathSegment {identifier:id.clone(),\n-                     lifetimes: opt_vec::Empty,\n+                     lifetimes: Vec::new(),\n                      types: opt_vec::Empty}\n     }\n "}, {"sha": "6aa90e5e8428adf6de25686075814c0c8cfd4f97", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -42,7 +42,7 @@ pub trait AstBuilder {\n     fn path_all(&self, sp: Span,\n                 global: bool,\n                 idents: Vec<ast::Ident> ,\n-                lifetimes: OptVec<ast::Lifetime>,\n+                lifetimes: Vec<ast::Lifetime>,\n                 types: Vec<P<ast::Ty>> )\n         -> ast::Path;\n \n@@ -255,27 +255,27 @@ pub trait AstBuilder {\n \n impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn path(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path {\n-        self.path_all(span, false, strs, opt_vec::Empty, Vec::new())\n+        self.path_all(span, false, strs, Vec::new(), Vec::new())\n     }\n     fn path_ident(&self, span: Span, id: ast::Ident) -> ast::Path {\n         self.path(span, vec!(id))\n     }\n     fn path_global(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path {\n-        self.path_all(span, true, strs, opt_vec::Empty, Vec::new())\n+        self.path_all(span, true, strs, Vec::new(), Vec::new())\n     }\n     fn path_all(&self,\n                 sp: Span,\n                 global: bool,\n                 mut idents: Vec<ast::Ident> ,\n-                lifetimes: OptVec<ast::Lifetime>,\n+                lifetimes: Vec<ast::Lifetime>,\n                 types: Vec<P<ast::Ty>> )\n                 -> ast::Path {\n         let last_identifier = idents.pop().unwrap();\n         let mut segments: Vec<ast::PathSegment> = idents.move_iter()\n                                                       .map(|ident| {\n             ast::PathSegment {\n                 identifier: ident,\n-                lifetimes: opt_vec::Empty,\n+                lifetimes: Vec::new(),\n                 types: opt_vec::Empty,\n             }\n         }).collect();\n@@ -342,7 +342,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                               self.ident_of(\"option\"),\n                               self.ident_of(\"Option\")\n                           ),\n-                          opt_vec::Empty,\n+                          Vec::new(),\n                           vec!( ty )), None)\n     }\n "}, {"sha": "ee3adb7aad89022dd1523b738329e1cd1b864b9f", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -15,6 +15,7 @@ use ext::base;\n use opt_vec;\n use parse::token;\n use parse::token::{str_to_ident};\n+use std::vec_ng::Vec;\n \n pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     -> base::MacResult {\n@@ -51,7 +52,7 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                  segments: vec!(\n                     ast::PathSegment {\n                         identifier: res,\n-                        lifetimes: opt_vec::Empty,\n+                        lifetimes: Vec::new(),\n                         types: opt_vec::Empty,\n                     }\n                 )"}, {"sha": "b8ef9d98b2935ba4dc6fe79f019390e951f901dc", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -14,7 +14,6 @@ use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::{AstBuilder};\n use ext::deriving::generic::*;\n-use opt_vec;\n \n use std::vec_ng::Vec;\n \n@@ -84,7 +83,7 @@ fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n             let rand_name = cx.path_all(trait_span,\n                                         true,\n                                         rand_ident.clone(),\n-                                        opt_vec::Empty,\n+                                        Vec::new(),\n                                         Vec::new());\n             let rand_name = cx.expr_path(rand_name);\n "}, {"sha": "60166f30f1ef9d634cd174780fc44131827bc89b", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -19,7 +19,6 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use codemap::{Span,respan};\n use opt_vec;\n-use opt_vec::OptVec;\n \n use std::vec_ng::Vec;\n \n@@ -118,11 +117,12 @@ fn mk_lifetime(cx: &ExtCtxt, span: Span, lt: &Option<&str>) -> Option<ast::Lifet\n     }\n }\n \n-fn mk_lifetimes(cx: &ExtCtxt, span: Span, lt: &Option<&str>) -> OptVec<ast::Lifetime> {\n-    match *lt {\n+fn mk_lifetimes(cx: &ExtCtxt, span: Span, lt: &Option<&str>) -> Vec<ast::Lifetime> {\n+    let lifetimes = match *lt {\n         Some(ref s) => opt_vec::with(cx.lifetime(span, cx.ident_of(*s).name)),\n         None => opt_vec::Empty\n-    }\n+    };\n+    opt_vec::take_vec(lifetimes)\n }\n \n impl<'a> Ty<'a> {\n@@ -199,7 +199,7 @@ fn mk_ty_param(cx: &ExtCtxt, span: Span, name: &str, bounds: &[Path],\n \n fn mk_generics(lifetimes: Vec<ast::Lifetime> ,  ty_params: Vec<ast::TyParam> ) -> Generics {\n     Generics {\n-        lifetimes: opt_vec::from(lifetimes),\n+        lifetimes: lifetimes,\n         ty_params: opt_vec::from(ty_params)\n     }\n }"}, {"sha": "0c7b92d0373cc2fd4004f7aea4dbf5bfb3b1640c", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -19,10 +19,10 @@ use codemap::Span;\n use ext::base::*;\n use ext::base;\n use ext::build::AstBuilder;\n-use opt_vec;\n use parse::token;\n \n use std::os;\n+use std::vec_ng::Vec;\n \n pub fn expand_option_env(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     -> base::MacResult {\n@@ -38,7 +38,7 @@ pub fn expand_option_env(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                                    vec!(cx.ident_of(\"std\"),\n                                         cx.ident_of(\"option\"),\n                                         cx.ident_of(\"None\")),\n-                                   opt_vec::Empty,\n+                                   Vec::new(),\n                                    vec!(cx.ty_rptr(sp,\n                                                    cx.ty_ident(sp,\n                                                         cx.ident_of(\"str\")),"}, {"sha": "0db948c30b7c4ad0fc60d5086a6c02f4f9d04762", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -14,7 +14,6 @@ use codemap::{Span, respan};\n use ext::base::*;\n use ext::base;\n use ext::build::AstBuilder;\n-use opt_vec;\n use parse::token::InternedString;\n use parse::token;\n use rsparse = parse;\n@@ -509,7 +508,7 @@ impl<'a> Context<'a> {\n                 sp,\n                 true,\n                 self.rtpath(\"Method\"),\n-                opt_vec::with(life),\n+                vec!(life),\n                 Vec::new()\n                     ), None);\n         let st = ast::ItemStatic(ty, ast::MutImmutable, method);\n@@ -632,8 +631,8 @@ impl<'a> Context<'a> {\n                     self.ecx.ident_of(\"fmt\"),\n                     self.ecx.ident_of(\"rt\"),\n                     self.ecx.ident_of(\"Piece\")),\n-                opt_vec::with(\n-                    self.ecx.lifetime(self.fmtsp, self.ecx.ident_of(\"static\").name)),\n+                vec!(self.ecx.lifetime(self.fmtsp,\n+                                       self.ecx.ident_of(\"static\").name)),\n                 Vec::new()\n             ), None);\n         let ty = ast::TyFixedLengthVec("}, {"sha": "0b56cd07c887ffdb17a3f6e5b2ea557d578a5ba7", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -439,8 +439,8 @@ pub fn fold_lifetime<T: Folder>(l: &Lifetime, fld: &mut T) -> Lifetime {\n     }\n }\n \n-pub fn fold_lifetimes<T: Folder>(lts: &OptVec<Lifetime>, fld: &mut T)\n-                                   -> OptVec<Lifetime> {\n+pub fn fold_lifetimes<T: Folder>(lts: &Vec<Lifetime>, fld: &mut T)\n+                                   -> Vec<Lifetime> {\n     lts.map(|l| fold_lifetime(l, fld))\n }\n "}, {"sha": "cb49ad0905cdaf96795aef68a2de76bb165d51ab", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -556,7 +556,7 @@ mod test {\n                             segments: vec!(\n                                 ast::PathSegment {\n                                     identifier: str_to_ident(\"d\"),\n-                                    lifetimes: opt_vec::Empty,\n+                                    lifetimes: Vec::new(),\n                                     types: opt_vec::Empty,\n                                 }\n                             ),\n@@ -578,7 +578,7 @@ mod test {\n                                segments: vec!(\n                                 ast::PathSegment {\n                                     identifier: str_to_ident(\"b\"),\n-                                    lifetimes: opt_vec::Empty,\n+                                    lifetimes: Vec::new(),\n                                     types: opt_vec::Empty,\n                                 }\n                                ),\n@@ -605,7 +605,7 @@ mod test {\n                                     segments: vec!(\n                                         ast::PathSegment {\n                                             identifier: str_to_ident(\"b\"),\n-                                            lifetimes: opt_vec::Empty,\n+                                            lifetimes: Vec::new(),\n                                             types: opt_vec::Empty,\n                                         }\n                                     ),\n@@ -633,7 +633,7 @@ mod test {\n                                             ast::PathSegment {\n                                                 identifier:\n                                                     str_to_ident(\"int\"),\n-                                                lifetimes: opt_vec::Empty,\n+                                                lifetimes: Vec::new(),\n                                                 types: opt_vec::Empty,\n                                             }\n                                         ),\n@@ -651,7 +651,7 @@ mod test {\n                                                     ast::PathSegment {\n                                                         identifier:\n                                                             str_to_ident(\"b\"),\n-                                                        lifetimes: opt_vec::Empty,\n+                                                        lifetimes: Vec::new(),\n                                                         types: opt_vec::Empty,\n                                                     }\n                                                 ),\n@@ -671,7 +671,7 @@ mod test {\n                                     ast::ImpureFn,\n                                     abi::AbiSet::Rust(),\n                                     ast::Generics{ // no idea on either of these:\n-                                        lifetimes: opt_vec::Empty,\n+                                        lifetimes: Vec::new(),\n                                         ty_params: opt_vec::Empty,\n                                     },\n                                     ast::P(ast::Block {\n@@ -689,7 +689,7 @@ mod test {\n                                                                 str_to_ident(\n                                                                     \"b\"),\n                                                                 lifetimes:\n-                                                                opt_vec::Empty,\n+                                                                Vec::new(),\n                                                                 types:\n                                                                 opt_vec::Empty\n                                                             }"}, {"sha": "7760ca89eb2711ce03697b78a766922fae1f9f5c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -958,7 +958,7 @@ impl Parser {\n \n                     lifetimes\n                 } else {\n-                    opt_vec::Empty\n+                    Vec::new()\n                 };\n \n                 let inputs = if self.eat(&token::OROR) {\n@@ -1015,7 +1015,7 @@ impl Parser {\n \n     // parse a function type (following the 'fn')\n     pub fn parse_ty_fn_decl(&mut self, allow_variadic: bool)\n-                            -> (P<FnDecl>, OptVec<ast::Lifetime>) {\n+                            -> (P<FnDecl>, Vec<ast::Lifetime>) {\n         /*\n \n         (fn) <'lt> (S) -> T\n@@ -1031,7 +1031,7 @@ impl Parser {\n             self.expect_gt();\n             lifetimes\n         } else {\n-            opt_vec::Empty\n+            Vec::new()\n         };\n \n         let (inputs, variadic) = self.parse_fn_args(false, allow_variadic);\n@@ -1510,7 +1510,7 @@ impl Parser {\n                 segments.push(PathSegmentAndBoundSet {\n                     segment: ast::PathSegment {\n                         identifier: identifier,\n-                        lifetimes: opt_vec::Empty,\n+                        lifetimes: Vec::new(),\n                         types: opt_vec::Empty,\n                     },\n                     bound_set: bound_set\n@@ -1525,7 +1525,7 @@ impl Parser {\n                         self.parse_generic_values_after_lt();\n                     (true, lifetimes, opt_vec::from(types))\n                 } else {\n-                    (false, opt_vec::Empty, opt_vec::Empty)\n+                    (false, Vec::new(), opt_vec::Empty)\n                 }\n             };\n \n@@ -1621,7 +1621,7 @@ impl Parser {\n     // matches lifetimes = ( lifetime ) | ( lifetime , lifetimes )\n     // actually, it matches the empty one too, but putting that in there\n     // messes up the grammar....\n-    pub fn parse_lifetimes(&mut self) -> OptVec<ast::Lifetime> {\n+    pub fn parse_lifetimes(&mut self) -> Vec<ast::Lifetime> {\n         /*!\n          *\n          * Parses zero or more comma separated lifetimes.\n@@ -1630,7 +1630,7 @@ impl Parser {\n          * lists, where we expect something like `<'a, 'b, T>`.\n          */\n \n-        let mut res = opt_vec::Empty;\n+        let mut res = Vec::new();\n         loop {\n             match self.token {\n                 token::LIFETIME(_) => {\n@@ -1995,7 +1995,7 @@ impl Parser {\n                         self.expect(&token::LT);\n                         self.parse_generic_values_after_lt()\n                     } else {\n-                        (opt_vec::Empty, Vec::new())\n+                        (Vec::new(), Vec::new())\n                     };\n \n                     // expr.f() method call\n@@ -3515,7 +3515,7 @@ impl Parser {\n         }\n     }\n \n-    fn parse_generic_values_after_lt(&mut self) -> (OptVec<ast::Lifetime>, Vec<P<Ty>> ) {\n+    fn parse_generic_values_after_lt(&mut self) -> (Vec<ast::Lifetime>, Vec<P<Ty>> ) {\n         let lifetimes = self.parse_lifetimes();\n         let result = self.parse_seq_to_gt(\n             Some(token::COMMA),\n@@ -4886,7 +4886,7 @@ impl Parser {\n                 segments: path.move_iter().map(|identifier| {\n                     ast::PathSegment {\n                         identifier: identifier,\n-                        lifetimes: opt_vec::Empty,\n+                        lifetimes: Vec::new(),\n                         types: opt_vec::Empty,\n                     }\n                 }).collect()\n@@ -4921,7 +4921,7 @@ impl Parser {\n                         segments: path.move_iter().map(|identifier| {\n                             ast::PathSegment {\n                                 identifier: identifier,\n-                                lifetimes: opt_vec::Empty,\n+                                lifetimes: Vec::new(),\n                                 types: opt_vec::Empty,\n                             }\n                         }).collect()\n@@ -4939,7 +4939,7 @@ impl Parser {\n                         segments: path.move_iter().map(|identifier| {\n                             ast::PathSegment {\n                                 identifier: identifier,\n-                                lifetimes: opt_vec::Empty,\n+                                lifetimes: Vec::new(),\n                                 types: opt_vec::Empty,\n                             }\n                         }).collect()\n@@ -4961,7 +4961,7 @@ impl Parser {\n             segments: path.move_iter().map(|identifier| {\n                 ast::PathSegment {\n                     identifier: identifier,\n-                    lifetimes: opt_vec::Empty,\n+                    lifetimes: Vec::new(),\n                     types: opt_vec::Empty,\n                 }\n             }).collect()"}, {"sha": "538528fb1484a79aa4f91447577cdf414bd22d91", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586b619c76a3e5798283408954a0306d86ebc1ef/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=586b619c76a3e5798283408954a0306d86ebc1ef", "patch": "@@ -15,6 +15,7 @@ use codemap::Span;\n use parse;\n use opt_vec;\n use opt_vec::OptVec;\n+use std::vec_ng::Vec;\n \n // Context-passing AST walker. Each overridden visit method has full control\n // over what happens with its node, it can do its own traversal of the node's\n@@ -55,7 +56,7 @@ pub fn generics_of_fn(fk: &FnKind) -> Generics {\n         }\n         FkFnBlock(..) => {\n             Generics {\n-                lifetimes: opt_vec::Empty,\n+                lifetimes: Vec::new(),\n                 ty_params: opt_vec::Empty,\n             }\n         }\n@@ -370,7 +371,7 @@ pub fn walk_ty<E: Clone, V: Visitor<E>>(visitor: &mut V, typ: &Ty, env: E) {\n }\n \n fn walk_lifetime_decls<E: Clone, V: Visitor<E>>(visitor: &mut V,\n-                                                lifetimes: &OptVec<Lifetime>,\n+                                                lifetimes: &Vec<Lifetime>,\n                                                 env: E) {\n     for l in lifetimes.iter() {\n         visitor.visit_lifetime_decl(l, env.clone());"}]}