{"sha": "f8e55da6defaba1dff4d1e11f76dda3b366819be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZTU1ZGE2ZGVmYWJhMWRmZjRkMWUxMWY3NmRkYTNiMzY2ODE5YmU=", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-04-20T00:11:12Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-05-05T14:31:02Z"}, "message": "Remove impl Display for FileName and add FileNameDisplay wrapper type", "tree": {"sha": "b5143e41676335e7acc00fee59a3e22faa8cd3f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5143e41676335e7acc00fee59a3e22faa8cd3f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8e55da6defaba1dff4d1e11f76dda3b366819be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmCSrCYACgkQGBtJ+fOP\nM3SGbgv/VdnXrhUpXFOZVORvGIMO/vMPcl4j5qtkfck8baMIVmXUaotORUZE+PVu\nzVxBtxRruAFrD8jUObZrr6M7Mvw5z2WSVn5SgrMed+L3h0aQ6FJ12QC3xzk26l+y\ndEFD5Vj28KHtYN+LMBlmjZX5ycX/Llxk9jY6IZeyNSbpsDwVvKJ15wz9sKSJl6Wu\nrdIWrLJmx/0i3s3Diz8/LqCZH+FX4hol6lP6qfsiQ1XltqpqCbiJ3OGyKd+FOr/g\nBaZ+RqOEao3wbOtZ9Ubtn4T0L6S0FlIklqoLIE+o9Pt356Y5NNJEacWMLaae1GGW\n80EJ9IJ7PS3kNzajrsCSE46H2P13ETeupFkoc/QVK4VtHdIEnMdCJ9Shf8giYTYr\nBCwuDl8hxhPANVnWsMftRAMHL581ms1H8THpC4bK6vKKDvXfPqjGntNSPNfjKtGD\ncPj/0mMyyS1aqnh/6c+aAn6LdSQbAxueKUARlvnFXIg9JD3Sy3U+sdGSyONKyd8w\nvGaxF7b8\n=1nyi\n-----END PGP SIGNATURE-----", "payload": "tree b5143e41676335e7acc00fee59a3e22faa8cd3f5\nparent ec34cd94dd88d0d564902b5c65d3a2d2e71636c8\nauthor Andy Wang <cbeuw.andy@gmail.com> 1618877472 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1620225062 +0100\n\nRemove impl Display for FileName and add FileNameDisplay wrapper type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e55da6defaba1dff4d1e11f76dda3b366819be", "html_url": "https://github.com/rust-lang/rust/commit/f8e55da6defaba1dff4d1e11f76dda3b366819be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8e55da6defaba1dff4d1e11f76dda3b366819be/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec34cd94dd88d0d564902b5c65d3a2d2e71636c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec34cd94dd88d0d564902b5c65d3a2d2e71636c8", "html_url": "https://github.com/rust-lang/rust/commit/ec34cd94dd88d0d564902b5c65d3a2d2e71636c8"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "141ecfd0bafa7ad29d754e916ff52a8937cf0d93", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f8e55da6defaba1dff4d1e11f76dda3b366819be/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e55da6defaba1dff4d1e11f76dda3b366819be/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=f8e55da6defaba1dff4d1e11f76dda3b366819be", "patch": "@@ -202,6 +202,23 @@ impl RealFileName {\n             | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,\n         }\n     }\n+\n+    fn to_string_lossy(&self, prefer_local: bool) -> Cow<'_, str> {\n+        use RealFileName::*;\n+        if prefer_local {\n+            match self {\n+                LocalPath(path)\n+                | Remapped { local_path: None, virtual_name: path }\n+                | Remapped { local_path: Some(path), virtual_name: _ } => path.to_string_lossy(),\n+            }\n+        } else {\n+            match self {\n+                LocalPath(path) | Remapped { local_path: _, virtual_name: path } => {\n+                    path.to_string_lossy()\n+                }\n+            }\n+        }\n+    }\n }\n \n /// Differentiates between real files and common virtual files.\n@@ -228,16 +245,24 @@ pub enum FileName {\n     InlineAsm(u64),\n }\n \n-impl std::fmt::Display for FileName {\n+impl From<PathBuf> for FileName {\n+    fn from(p: PathBuf) -> Self {\n+        assert!(!p.to_string_lossy().ends_with('>'));\n+        FileName::Real(RealFileName::LocalPath(p))\n+    }\n+}\n+\n+pub struct FileNameDisplay<'a> {\n+    inner: &'a FileName,\n+    prefer_local: bool,\n+}\n+\n+impl fmt::Display for FileNameDisplay<'_> {\n     fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         use FileName::*;\n-        match *self {\n-            Real(RealFileName::Named(ref path)) => write!(fmt, \"{}\", path.display()),\n-            // FIXME: might be nice to display both components of Devirtualized.\n-            // But for now (to backport fix for issue #70924), best to not\n-            // perturb diagnostics so its obvious test suite still works.\n-            Real(RealFileName::Devirtualized { ref local_path, virtual_name: _ }) => {\n-                write!(fmt, \"{}\", local_path.display())\n+        match *self.inner {\n+            Real(ref name) => {\n+                write!(fmt, \"{}\", name.to_string_lossy(self.prefer_local))\n             }\n             QuoteExpansion(_) => write!(fmt, \"<quote expansion>\"),\n             MacroExpansion(_) => write!(fmt, \"<macro expansion>\"),\n@@ -252,10 +277,12 @@ impl std::fmt::Display for FileName {\n     }\n }\n \n-impl From<PathBuf> for FileName {\n-    fn from(p: PathBuf) -> Self {\n-        assert!(!p.to_string_lossy().ends_with('>'));\n-        FileName::Real(RealFileName::LocalPath(p))\n+impl FileNameDisplay<'_> {\n+    pub fn to_string_lossy(&self) -> Cow<'_, str> {\n+        match self.inner {\n+            FileName::Real(ref inner) => inner.to_string_lossy(self.prefer_local),\n+            _ => Cow::from(format!(\"{}\", self)),\n+        }\n     }\n }\n "}, {"sha": "6c3881811b3d5a0c00f1b4922c5c6a8effa23cc2", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8e55da6defaba1dff4d1e11f76dda3b366819be/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e55da6defaba1dff4d1e11f76dda3b366819be/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=f8e55da6defaba1dff4d1e11f76dda3b366819be", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n                 // unless the user had an explicit `allow`\n                 let should_have_docs =\n                     level != lint::Level::Allow || matches!(source, LintLevelSource::Default);\n-                debug!(\"counting {:?} {:?} in {}\", i.type_(), i.name, filename);\n+                debug!(\"counting {:?} {:?} in {:?}\", i.type_(), i.name, filename);\n                 self.items.entry(filename).or_default().count_item(\n                     has_docs,\n                     has_doc_example,"}]}