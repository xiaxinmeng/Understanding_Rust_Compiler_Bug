{"sha": "3c31794d31840f4a695fde45c4797c833a78b278", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMzE3OTRkMzE4NDBmNGE2OTVmZGU0NWM0Nzk3YzgzM2E3OGIyNzg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-02-27T19:48:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-03-17T21:40:59Z"}, "message": "Avoid metadata bloat by using trait FixedSizeArray", "tree": {"sha": "f1984902c1fb8d5096278489fb6837c8527516c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1984902c1fb8d5096278489fb6837c8527516c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c31794d31840f4a695fde45c4797c833a78b278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c31794d31840f4a695fde45c4797c833a78b278", "html_url": "https://github.com/rust-lang/rust/commit/3c31794d31840f4a695fde45c4797c833a78b278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c31794d31840f4a695fde45c4797c833a78b278/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b98255cbd2354c708e3557f26e9cd8f5aec1ed6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b98255cbd2354c708e3557f26e9cd8f5aec1ed6b", "html_url": "https://github.com/rust-lang/rust/commit/b98255cbd2354c708e3557f26e9cd8f5aec1ed6b"}], "stats": {"total": 94, "additions": 40, "deletions": 54}, "files": [{"sha": "edb11df54894c8ec502755d6c9978e8483ce0e3a", "filename": "src/libcore/array.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3c31794d31840f4a695fde45c4797c833a78b278/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c31794d31840f4a695fde45c4797c833a78b278/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=3c31794d31840f4a695fde45c4797c833a78b278", "patch": "@@ -23,10 +23,34 @@ use marker::{Copy, Sized};\n use option::Option;\n use slice::{Iter, IterMut, SliceExt};\n \n+/// Utility trait implemented only on arrays of fixed size\n+///\n+/// This trait can be used to implement other traits on fixed-size arrays\n+/// without causing much metadata bloat.\n+#[unstable(feature = \"core\")]\n+pub trait FixedSizeArray<T> {\n+    /// Converts the array to immutable slice\n+    fn as_slice(&self) -> &[T];\n+    /// Converts the array to mutable slice\n+    fn as_mut_slice(&mut self) -> &mut [T];\n+}\n+\n // macro for implementing n-ary tuple functions and operations\n macro_rules! array_impls {\n     ($($N:expr)+) => {\n         $(\n+            #[unstable(feature = \"core\")]\n+            impl<T> FixedSizeArray<T> for [T; $N] {\n+                #[inline]\n+                fn as_slice(&self) -> &[T] {\n+                    &self[..]\n+                }\n+                #[inline]\n+                fn as_mut_slice(&mut self) -> &mut [T] {\n+                    &mut self[..]\n+                }\n+            }\n+\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<T:Copy> Clone for [T; $N] {\n                 fn clone(&self) -> [T; $N] {"}, {"sha": "29cc11d5a60a18e7ad7062c4c36c6aa8f33bca1e", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c31794d31840f4a695fde45c4797c833a78b278/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c31794d31840f4a695fde45c4797c833a78b278/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=3c31794d31840f4a695fde45c4797c833a78b278", "patch": "@@ -129,6 +129,7 @@ pub mod default;\n /* Core types and methods on primitives */\n \n pub mod any;\n+pub mod array;\n pub mod atomic;\n pub mod cell;\n pub mod char;\n@@ -151,7 +152,6 @@ mod bool {\n \n // note: does not need to be public\n mod tuple;\n-mod array;\n \n #[doc(hidden)]\n mod core {"}, {"sha": "7c685345aac237aa49bf5d341b8949d14d834778", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3c31794d31840f4a695fde45c4797c833a78b278/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c31794d31840f4a695fde45c4797c833a78b278/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=3c31794d31840f4a695fde45c4797c833a78b278", "patch": "@@ -11,6 +11,7 @@\n #![unstable(feature = \"std_misc\")]\n \n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n+use core::array::FixedSizeArray;\n use error::{Error, FromError};\n use fmt;\n use io;\n@@ -450,22 +451,8 @@ impl IntoBytes for String {\n impl IntoBytes for Vec<u8> {\n     fn into_bytes(self) -> Vec<u8> { self }\n }\n-\n-macro_rules! array_impls {\n-    ($($N: expr)+) => {\n-        $(\n-            impl<'a> IntoBytes for &'a [u8; $N] {\n-                fn into_bytes(self) -> Vec<u8> { self.to_vec() }\n-            }\n-        )+\n-    }\n-}\n-\n-array_impls! {\n-     0  1  2  3  4  5  6  7  8  9\n-    10 11 12 13 14 15 16 17 18 19\n-    20 21 22 23 24 25 26 27 28 29\n-    30 31 32\n+impl<'a, T: FixedSizeArray<u8>> IntoBytes for &'a T {\n+    fn into_bytes(self) -> Vec<u8> { self.as_slice().to_vec() }\n }\n \n #[cfg(test)]"}, {"sha": "882ddb1f78321314ae8dbb125a41f2af25947573", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3c31794d31840f4a695fde45c4797c833a78b278/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c31794d31840f4a695fde45c4797c833a78b278/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=3c31794d31840f4a695fde45c4797c833a78b278", "patch": "@@ -11,6 +11,7 @@\n use prelude::v1::*;\n use io::prelude::*;\n \n+use core::array::FixedSizeArray;\n use cmp;\n use io::{self, SeekFrom, Error, ErrorKind};\n use iter::repeat;\n@@ -72,7 +73,7 @@ macro_rules! seek {\n         fn seek(&mut self, style: SeekFrom) -> io::Result<u64> {\n             let pos = match style {\n                 SeekFrom::Start(n) => { self.pos = n; return Ok(n) }\n-                SeekFrom::End(n) => self.inner.len() as i64 + n,\n+                SeekFrom::End(n) => self.inner.as_slice().len() as i64 + n,\n                 SeekFrom::Current(n) => self.pos as i64 + n,\n             };\n \n@@ -94,6 +95,7 @@ impl<'a> io::Seek for Cursor<&'a [u8]> { seek!(); }\n impl<'a> io::Seek for Cursor<&'a mut [u8]> { seek!(); }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl io::Seek for Cursor<Vec<u8>> { seek!(); }\n+impl<'a, T: FixedSizeArray<u8>> io::Seek for Cursor<&'a T> { seek!(); }\n \n macro_rules! read {\n     () => {\n@@ -111,12 +113,13 @@ impl<'a> Read for Cursor<&'a [u8]> { read!(); }\n impl<'a> Read for Cursor<&'a mut [u8]> { read!(); }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for Cursor<Vec<u8>> { read!(); }\n+impl<'a, T: FixedSizeArray<u8>> Read for Cursor<&'a T> { read!(); }\n \n macro_rules! buffer {\n     () => {\n         fn fill_buf(&mut self) -> io::Result<&[u8]> {\n-            let amt = cmp::min(self.pos, self.inner.len() as u64);\n-            Ok(&self.inner[(amt as usize)..])\n+            let amt = cmp::min(self.pos, self.inner.as_slice().len() as u64);\n+            Ok(&self.inner.as_slice()[(amt as usize)..])\n         }\n         fn consume(&mut self, amt: usize) { self.pos += amt as u64; }\n     }\n@@ -128,23 +131,7 @@ impl<'a> BufRead for Cursor<&'a [u8]> { buffer!(); }\n impl<'a> BufRead for Cursor<&'a mut [u8]> { buffer!(); }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> BufRead for Cursor<Vec<u8>> { buffer!(); }\n-\n-macro_rules! array_impls {\n-    ($($N: expr)+) => {\n-        $(\n-            impl<'a> io::Seek for Cursor<&'a [u8; $N]> { seek!(); }\n-            impl<'a> Read for Cursor<&'a [u8; $N]> { read!(); }\n-            impl<'a> BufRead for Cursor<&'a [u8; $N]> { buffer!(); }\n-        )+\n-    }\n-}\n-\n-array_impls! {\n-     0  1  2  3  4  5  6  7  8  9\n-    10 11 12 13 14 15 16 17 18 19\n-    20 21 22 23 24 25 26 27 28 29\n-    30 31 32\n-}\n+impl<'a, T: FixedSizeArray<u8>> BufRead for Cursor<&'a T> { buffer!(); }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for Cursor<&'a mut [u8]> {"}, {"sha": "3ad35bdd5029ebd3554691642a9d4a0314fb6866", "filename": "src/libstd/old_path/mod.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3c31794d31840f4a695fde45c4797c833a78b278/src%2Flibstd%2Fold_path%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c31794d31840f4a695fde45c4797c833a78b278/src%2Flibstd%2Fold_path%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fmod.rs?ref=3c31794d31840f4a695fde45c4797c833a78b278", "patch": "@@ -64,6 +64,7 @@\n #![allow(deprecated)] // seriously this is all deprecated\n #![allow(unused_imports)]\n \n+use core::array::FixedSizeArray;\n use core::marker::Sized;\n use ffi::CString;\n use clone::Clone;\n@@ -895,26 +896,13 @@ impl BytesContainer for [u8] {\n     }\n }\n \n-macro_rules! array_impls {\n-    ($($N: expr)+) => {\n-        $(\n-            impl BytesContainer for [u8; $N] {\n-                #[inline]\n-                fn container_as_bytes(&self) -> &[u8] {\n-                    &self[..]\n-                }\n-            }\n-        )+\n+impl<T: FixedSizeArray<u8>> BytesContainer for T {\n+    #[inline]\n+    fn container_as_bytes(&self) -> &[u8] {\n+        self.as_slice()\n     }\n }\n \n-array_impls! {\n-     0  1  2  3  4  5  6  7  8  9\n-    10 11 12 13 14 15 16 17 18 19\n-    20 21 22 23 24 25 26 27 28 29\n-    30 31 32\n-}\n-\n impl BytesContainer for Vec<u8> {\n     #[inline]\n     fn container_as_bytes(&self) -> &[u8] {"}]}