{"sha": "baa0dad5822f4e7b2aa8b6cf8d349b065e9a1491", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYTBkYWQ1ODIyZjRlN2IyYWE4YjZjZjhkMzQ5YjA2NWU5YTE0OTE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-12-22T02:44:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-22T02:44:19Z"}, "message": "Merge pull request #2288 from davidalber/fix-2078\n\nReporting test parse errors as test failures", "tree": {"sha": "6827112ee49d0a8bb2e1b5ed5af5970c68333a20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6827112ee49d0a8bb2e1b5ed5af5970c68333a20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baa0dad5822f4e7b2aa8b6cf8d349b065e9a1491", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaPHGDCRBK7hj4Ov3rIwAAdHIIAIomiOhtggTGylZ/iMtQyL49\nDVDbp4k/JRpSPClKYQHeh9bOsz83CY4026+jaXXBVV5sZQqZ/0HlbtLQDccuAf0s\n28emCcB4XNBBTUURqBrvRadsqOOZjDp61xXShN515oySlGsRazWaBZFwnyPU9cCZ\nzgReA/xpt7MH7ZrGrcDCHBtg+n3CJcRUtuHF1tmD6awRZjt/IZXrGUqbv26RsoIK\nihtupSTeTFq2oU3DFY502FNoRtha4AbFXVXA2zcbYNq0T+UUdCHDtcKQMCMmbLfG\nCD8cYhNpeCF0jap/yDIqRa1uJV2eT0wu3dDIQRgwKIw44Enys4TV9QJdW5yoM48=\n=qTBh\n-----END PGP SIGNATURE-----\n", "payload": "tree 6827112ee49d0a8bb2e1b5ed5af5970c68333a20\nparent de5683cf11b90c706a18c1061632bb4c569dd7f4\nparent fa0a63989e4e4f014f1c1fcfecee74fd83417fd5\nauthor Nick Cameron <nrc@ncameron.org> 1513910659 +1300\ncommitter GitHub <noreply@github.com> 1513910659 +1300\n\nMerge pull request #2288 from davidalber/fix-2078\n\nReporting test parse errors as test failures"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baa0dad5822f4e7b2aa8b6cf8d349b065e9a1491", "html_url": "https://github.com/rust-lang/rust/commit/baa0dad5822f4e7b2aa8b6cf8d349b065e9a1491", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baa0dad5822f4e7b2aa8b6cf8d349b065e9a1491/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de5683cf11b90c706a18c1061632bb4c569dd7f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/de5683cf11b90c706a18c1061632bb4c569dd7f4", "html_url": "https://github.com/rust-lang/rust/commit/de5683cf11b90c706a18c1061632bb4c569dd7f4"}, {"sha": "fa0a63989e4e4f014f1c1fcfecee74fd83417fd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa0a63989e4e4f014f1c1fcfecee74fd83417fd5", "html_url": "https://github.com/rust-lang/rust/commit/fa0a63989e4e4f014f1c1fcfecee74fd83417fd5"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "c1d838169aeffbdfdaccf4f5bab8afc3ad86b130", "filename": "tests/system.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/baa0dad5822f4e7b2aa8b6cf8d349b065e9a1491/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa0dad5822f4e7b2aa8b6cf8d349b065e9a1491/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=baa0dad5822f4e7b2aa8b6cf8d349b065e9a1491", "patch": "@@ -75,7 +75,7 @@ fn checkstyle_test() {\n // to a known output file generated by one of the write modes.\n fn assert_output(source: &Path, expected_filename: &Path) {\n     let config = read_config(source);\n-    let (file_map, _report) = format_file(source, &config);\n+    let (_error_summary, file_map, _report) = format_file(source, &config);\n \n     // Populate output by writing to a vec.\n     let mut out = vec![];\n@@ -214,8 +214,10 @@ where\n                 fails += 1;\n             }\n             Ok(report) => reports.push(report),\n-            Err(msg) => {\n-                print_mismatches(msg);\n+            Err(err) => {\n+                if let IdempotentCheckError::Mismatch(msg) = err {\n+                    print_mismatches(msg);\n+                }\n                 fails += 1;\n             }\n         }\n@@ -263,20 +265,24 @@ fn read_config(filename: &Path) -> Config {\n     config\n }\n \n-fn format_file<P: Into<PathBuf>>(filepath: P, config: &Config) -> (FileMap, FormatReport) {\n+fn format_file<P: Into<PathBuf>>(filepath: P, config: &Config) -> (Summary, FileMap, FormatReport) {\n     let filepath = filepath.into();\n     let input = Input::File(filepath);\n-    let (_error_summary, file_map, report) =\n-        format_input::<io::Stdout>(input, config, None).unwrap();\n-    (file_map, report)\n+    format_input::<io::Stdout>(input, config, None).unwrap()\n+}\n+\n+pub enum IdempotentCheckError {\n+    Mismatch(HashMap<PathBuf, Vec<Mismatch>>),\n+    Parse,\n }\n \n-pub fn idempotent_check(\n-    filename: PathBuf,\n-) -> Result<FormatReport, HashMap<PathBuf, Vec<Mismatch>>> {\n+pub fn idempotent_check(filename: PathBuf) -> Result<FormatReport, IdempotentCheckError> {\n     let sig_comments = read_significant_comments(&filename);\n     let config = read_config(&filename);\n-    let (file_map, format_report) = format_file(filename, &config);\n+    let (error_summary, file_map, format_report) = format_file(filename, &config);\n+    if error_summary.has_parsing_errors() {\n+        return Err(IdempotentCheckError::Parse);\n+    }\n \n     let mut write_result = HashMap::new();\n     for &(ref filename, ref text) in &file_map {\n@@ -361,7 +367,7 @@ fn read_significant_comments(file_name: &Path) -> HashMap<String, String> {\n fn handle_result(\n     result: HashMap<PathBuf, String>,\n     target: Option<&str>,\n-) -> Result<(), HashMap<PathBuf, Vec<Mismatch>>> {\n+) -> Result<(), IdempotentCheckError> {\n     let mut failures = HashMap::new();\n \n     for (file_name, fmt_text) in result {\n@@ -388,7 +394,7 @@ fn handle_result(\n     if failures.is_empty() {\n         Ok(())\n     } else {\n-        Err(failures)\n+        Err(IdempotentCheckError::Mismatch(failures))\n     }\n }\n "}]}