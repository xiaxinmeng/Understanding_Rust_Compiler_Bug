{"sha": "6d05b07f7d64e2dd04bd8704b597d3aaf143964f", "node_id": "C_kwDOAAsO6NoAKDZkMDViMDdmN2Q2NGUyZGQwNGJkODcwNGI1OTdkM2FhZjE0Mzk2NGY", "commit": {"author": {"name": "Eric Sampson", "email": "esampson@eaze.com", "date": "2021-10-05T20:42:45Z"}, "committer": {"name": "Eric Sampson", "email": "esampson@eaze.com", "date": "2021-10-05T20:42:45Z"}, "message": "Refactor according to PR comments to remove allocations.", "tree": {"sha": "2fda8abc2e3b952d7754a867d7e82a0086c2b8ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fda8abc2e3b952d7754a867d7e82a0086c2b8ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d05b07f7d64e2dd04bd8704b597d3aaf143964f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d05b07f7d64e2dd04bd8704b597d3aaf143964f", "html_url": "https://github.com/rust-lang/rust/commit/6d05b07f7d64e2dd04bd8704b597d3aaf143964f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d05b07f7d64e2dd04bd8704b597d3aaf143964f/comments", "author": {"login": "ericsampson", "id": 1183853, "node_id": "MDQ6VXNlcjExODM4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1183853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericsampson", "html_url": "https://github.com/ericsampson", "followers_url": "https://api.github.com/users/ericsampson/followers", "following_url": "https://api.github.com/users/ericsampson/following{/other_user}", "gists_url": "https://api.github.com/users/ericsampson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericsampson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericsampson/subscriptions", "organizations_url": "https://api.github.com/users/ericsampson/orgs", "repos_url": "https://api.github.com/users/ericsampson/repos", "events_url": "https://api.github.com/users/ericsampson/events{/privacy}", "received_events_url": "https://api.github.com/users/ericsampson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ericsampson", "id": 1183853, "node_id": "MDQ6VXNlcjExODM4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1183853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericsampson", "html_url": "https://github.com/ericsampson", "followers_url": "https://api.github.com/users/ericsampson/followers", "following_url": "https://api.github.com/users/ericsampson/following{/other_user}", "gists_url": "https://api.github.com/users/ericsampson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericsampson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericsampson/subscriptions", "organizations_url": "https://api.github.com/users/ericsampson/orgs", "repos_url": "https://api.github.com/users/ericsampson/repos", "events_url": "https://api.github.com/users/ericsampson/events{/privacy}", "received_events_url": "https://api.github.com/users/ericsampson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "160a7b097a1bccba925afd4517ebfb10c3168931", "url": "https://api.github.com/repos/rust-lang/rust/commits/160a7b097a1bccba925afd4517ebfb10c3168931", "html_url": "https://github.com/rust-lang/rust/commit/160a7b097a1bccba925afd4517ebfb10c3168931"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "12c6852ea09ca7c1aae59b32dfeec5e96b648a7e", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6d05b07f7d64e2dd04bd8704b597d3aaf143964f/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d05b07f7d64e2dd04bd8704b597d3aaf143964f/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=6d05b07f7d64e2dd04bd8704b597d3aaf143964f", "patch": "@@ -5,7 +5,7 @@ use ide_db::{\n     helpers::visit_file_defs,\n     RootDatabase,\n };\n-use syntax::{ast::HasName, AstNode, TextRange, TextSize};\n+use syntax::{ast::HasName, AstNode, TextRange};\n \n use crate::{\n     fn_references::find_all_methods,\n@@ -66,10 +66,10 @@ pub(crate) fn annotations(\n         Either::Left(def) => {\n             let (range, ranges_enum_variants) = match def {\n                 hir::ModuleDef::Const(konst) => {\n-                    (konst.source(db).and_then(|node| name_range(&node, file_id)), vec![None])\n+                    (konst.source(db).and_then(|node| name_range(&node, file_id)), vec![])\n                 }\n                 hir::ModuleDef::Trait(trait_) => {\n-                    (trait_.source(db).and_then(|node| name_range(&node, file_id)), vec![None])\n+                    (trait_.source(db).and_then(|node| name_range(&node, file_id)), vec![])\n                 }\n                 hir::ModuleDef::Adt(adt) => match adt {\n                     hir::Adt::Enum(enum_) => (\n@@ -83,12 +83,12 @@ pub(crate) fn annotations(\n                                 })\n                                 .collect()\n                         } else {\n-                            vec![None]\n+                            vec![]\n                         },\n                     ),\n-                    _ => (adt.source(db).and_then(|node| name_range(&node, file_id)), vec![None]),\n+                    _ => (adt.source(db).and_then(|node| name_range(&node, file_id)), vec![]),\n                 },\n-                _ => (None, vec![None]),\n+                _ => (None, vec![]),\n             };\n \n             let (range, offset) = match range {\n@@ -116,19 +116,13 @@ pub(crate) fn annotations(\n             }\n \n             if config.annotate_enum_variant_references {\n-                let mut enum_variants_metadata: Vec<(TextRange, TextSize)> = Vec::with_capacity(ranges_enum_variants.len());\n-                for range_enum_variant in ranges_enum_variants.into_iter() {\n-                    let (range, offset) = match range_enum_variant {\n-                        Some(range) => (range, range.start()),\n-                        None => return,\n-                    };\n-                    enum_variants_metadata.push((range, offset))\n-                }\n-                for enum_variant_metadata in enum_variants_metadata.into_iter() {\n+                for range_enum_variant in\n+                    ranges_enum_variants.into_iter().filter_map(std::convert::identity)\n+                {\n                     annotations.push(Annotation {\n-                        range: enum_variant_metadata.0,\n+                        range: range_enum_variant,\n                         kind: AnnotationKind::HasReferences {\n-                            position: FilePosition { file_id, offset: enum_variant_metadata.1 },\n+                            position: FilePosition { file_id, offset: range_enum_variant.start() },\n                             data: None,\n                         },\n                     });"}]}