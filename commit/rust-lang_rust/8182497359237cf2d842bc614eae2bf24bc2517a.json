{"sha": "8182497359237cf2d842bc614eae2bf24bc2517a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxODI0OTczNTkyMzdjZjJkODQyYmM2MTRlYWUyYmYyNGJjMjUxN2E=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-04T21:37:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-04T21:37:47Z"}, "message": "std: Camel case sort", "tree": {"sha": "e257cc056401560d286e48feef6af1726d96d6a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e257cc056401560d286e48feef6af1726d96d6a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8182497359237cf2d842bc614eae2bf24bc2517a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8182497359237cf2d842bc614eae2bf24bc2517a", "html_url": "https://github.com/rust-lang/rust/commit/8182497359237cf2d842bc614eae2bf24bc2517a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8182497359237cf2d842bc614eae2bf24bc2517a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a04cb8ebb7e034e3ecc655cab9e3ec5f415f2cf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a04cb8ebb7e034e3ecc655cab9e3ec5f415f2cf6", "html_url": "https://github.com/rust-lang/rust/commit/a04cb8ebb7e034e3ecc655cab9e3ec5f415f2cf6"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "4c10e274d49a377aa9f98d45fa5d0a9b0ed7ecf0", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8182497359237cf2d842bc614eae2bf24bc2517a/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8182497359237cf2d842bc614eae2bf24bc2517a/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=8182497359237cf2d842bc614eae2bf24bc2517a", "patch": "@@ -11,20 +11,20 @@ export quick_sort;\n export quick_sort3;\n export Sort;\n \n-type le<T> = pure fn(v1: &T, v2: &T) -> bool;\n+type Le<T> = pure fn(v1: &T, v2: &T) -> bool;\n \n /**\n  * Merge sort. Returns a new vector containing the sorted list.\n  *\n  * Has worst case O(n log n) performance, best case O(n), but\n  * is not space efficient. This is a stable sort.\n  */\n-fn merge_sort<T: copy>(le: le<T>, v: &[const T]) -> ~[T] {\n-    type slice = (uint, uint);\n+fn merge_sort<T: copy>(le: Le<T>, v: &[const T]) -> ~[T] {\n+    type Slice = (uint, uint);\n \n     return merge_sort_(le, v, (0u, len(v)));\n \n-    fn merge_sort_<T: copy>(le: le<T>, v: &[const T], slice: slice)\n+    fn merge_sort_<T: copy>(le: Le<T>, v: &[const T], slice: Slice)\n         -> ~[T] {\n         let begin = slice.first();\n         let end = slice.second();\n@@ -39,7 +39,7 @@ fn merge_sort<T: copy>(le: le<T>, v: &[const T]) -> ~[T] {\n         return merge(le, merge_sort_(le, v, a), merge_sort_(le, v, b));\n     }\n \n-    fn merge<T: copy>(le: le<T>, a: &[T], b: &[T]) -> ~[T] {\n+    fn merge<T: copy>(le: Le<T>, a: &[T], b: &[T]) -> ~[T] {\n         let mut rs = ~[];\n         vec::reserve(rs, len(a) + len(b));\n         let a_len = len(a);\n@@ -58,7 +58,7 @@ fn merge_sort<T: copy>(le: le<T>, v: &[const T]) -> ~[T] {\n     }\n }\n \n-fn part<T: copy>(compare_func: le<T>, arr: &[mut T], left: uint,\n+fn part<T: copy>(compare_func: Le<T>, arr: &[mut T], left: uint,\n                 right: uint, pivot: uint) -> uint {\n     let pivot_value = arr[pivot];\n     arr[pivot] <-> arr[right];\n@@ -75,7 +75,7 @@ fn part<T: copy>(compare_func: le<T>, arr: &[mut T], left: uint,\n     return storage_index;\n }\n \n-fn qsort<T: copy>(compare_func: le<T>, arr: &[mut T], left: uint,\n+fn qsort<T: copy>(compare_func: Le<T>, arr: &[mut T], left: uint,\n              right: uint) {\n     if right > left {\n         let pivot = (left + right) / 2u;\n@@ -94,7 +94,7 @@ fn qsort<T: copy>(compare_func: le<T>, arr: &[mut T], left: uint,\n  * Has worst case O(n^2) performance, average case O(n log n).\n  * This is an unstable sort.\n  */\n-fn quick_sort<T: copy>(compare_func: le<T>, arr: &[mut T]) {\n+fn quick_sort<T: copy>(compare_func: Le<T>, arr: &[mut T]) {\n     if len::<T>(arr) == 0u { return; }\n     qsort::<T>(compare_func, arr, 0u, len::<T>(arr) - 1u);\n }"}, {"sha": "dbc56d3f5e3a542c865917068f1fb06ea4bcce5d", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8182497359237cf2d842bc614eae2bf24bc2517a/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/8182497359237cf2d842bc614eae2bf24bc2517a/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=8182497359237cf2d842bc614eae2bf24bc2517a", "patch": "@@ -67,7 +67,6 @@ mod map;\n mod rope;\n #[allow(non_camel_case_types)] // XXX\n mod smallintmap;\n-#[allow(non_camel_case_types)] // XXX\n mod sort;\n mod treemap;\n "}]}