{"sha": "81808b7bafb3bf8991046de2bc38d783d92116a8", "node_id": "C_kwDOAAsO6NoAKDgxODA4YjdiYWZiM2JmODk5MTA0NmRlMmJjMzhkNzgzZDkyMTE2YTg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-31T05:26:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-31T05:26:34Z"}, "message": "Rollup merge of #106286 - Nilstrieb:tidy-cowows, r=jyn514\n\nMake tidy errors red\n\nThis makes it easier to see them (and makes people go owo).\n\nI also changes the error codes check to not print too many things and use `tidy_error`.\n\nr? ```@jyn514```", "tree": {"sha": "ae32a57d802cfd6f0a275984196709e01119925b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae32a57d802cfd6f0a275984196709e01119925b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81808b7bafb3bf8991046de2bc38d783d92116a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjr8gKCRBK7hj4Ov3rIwAAmdoIAJwh2Vifgw+n7Z7iFyzFYkIj\nacxg4DWRB1wr+nhLUyKRMHsFvWzPwyrfcvSgGUnfAqV+e2kXp6eBiiRK6JYfOvRj\nF3BSyO9radKHu8fMQia29hUzFY3Zs8B15L6IkXFsY7Rn5MooQMmJlkzopxa7lcXz\nZALjx2cTrHcVbmnvUkjaLG2D6s4mci+Z5Jj7qdCRFrCBvPtE4bbEd1d70GzsgvdY\n7yfl4xvg891XvjGbeG7DX+ZsHFy/6aIlrG0WBUCIouVh+CRVSX6w9GdTA0kJQGTs\nEcnfE4YKzgNofW0sICHi5bwJBg18Q68xnU4qAU0L1wYap+9uzzC4U7SwyXtflTg=\n=m7KT\n-----END PGP SIGNATURE-----\n", "payload": "tree ae32a57d802cfd6f0a275984196709e01119925b\nparent 5b74a33b8d03da897553b42270cdab541d28b33f\nparent 75b3ee26cbeddcf2244e284d3c822d067cada2e2\nauthor Michael Goulet <michael@errs.io> 1672464394 -0800\ncommitter GitHub <noreply@github.com> 1672464394 -0800\n\nRollup merge of #106286 - Nilstrieb:tidy-cowows, r=jyn514\n\nMake tidy errors red\n\nThis makes it easier to see them (and makes people go owo).\n\nI also changes the error codes check to not print too many things and use `tidy_error`.\n\nr? ```@jyn514```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81808b7bafb3bf8991046de2bc38d783d92116a8", "html_url": "https://github.com/rust-lang/rust/commit/81808b7bafb3bf8991046de2bc38d783d92116a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81808b7bafb3bf8991046de2bc38d783d92116a8/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b74a33b8d03da897553b42270cdab541d28b33f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b74a33b8d03da897553b42270cdab541d28b33f", "html_url": "https://github.com/rust-lang/rust/commit/5b74a33b8d03da897553b42270cdab541d28b33f"}, {"sha": "75b3ee26cbeddcf2244e284d3c822d067cada2e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b3ee26cbeddcf2244e284d3c822d067cada2e2", "html_url": "https://github.com/rust-lang/rust/commit/75b3ee26cbeddcf2244e284d3c822d067cada2e2"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "f99e58e59b8e55d48bcb40f6153be3a1ed397531", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81808b7bafb3bf8991046de2bc38d783d92116a8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/81808b7bafb3bf8991046de2bc38d783d92116a8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=81808b7bafb3bf8991046de2bc38d783d92116a8", "patch": "@@ -2675,9 +2675,9 @@ dependencies = [\n \n [[package]]\n name = \"owo-colors\"\n-version = \"3.4.0\"\n+version = \"3.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"decf7381921fea4dcb2549c5667eda59b3ec297ab7e2b5fc33eac69d2e7da87b\"\n+checksum = \"c1b04fb49957986fdce4d6ee7a65027d55d4b6d2265e5848bbb507b58ccfdb6f\"\n \n [[package]]\n name = \"packed_simd_2\"\n@@ -5203,9 +5203,9 @@ dependencies = [\n \n [[package]]\n name = \"termcolor\"\n-version = \"1.1.2\"\n+version = \"1.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2dfed899f0eb03f32ee8c6a0aabdb8a7949659e3466561fc0adf54e26d88c5f4\"\n+checksum = \"bab24d30b911b2376f3a13cc2cd443142f0c81dda04c118693e35b3835757755\"\n dependencies = [\n  \"winapi-util\",\n ]\n@@ -5309,6 +5309,7 @@ dependencies = [\n  \"lazy_static\",\n  \"miropt-test-tools\",\n  \"regex\",\n+ \"termcolor\",\n  \"walkdir\",\n ]\n "}, {"sha": "fff83a1d097b3f6364c180781b8bfdb6ec886dc6", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81808b7bafb3bf8991046de2bc38d783d92116a8/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/81808b7bafb3bf8991046de2bc38d783d92116a8/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=81808b7bafb3bf8991046de2bc38d783d92116a8", "patch": "@@ -11,6 +11,7 @@ miropt-test-tools = { path = \"../miropt-test-tools\" }\n lazy_static = \"1\"\n walkdir = \"2\"\n ignore = \"0.4.18\"\n+termcolor = \"1.1.3\"\n \n [[bin]]\n name = \"rust-tidy\""}, {"sha": "40a46c630d70a2de59e468ae5ac75eab44ed717a", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/81808b7bafb3bf8991046de2bc38d783d92116a8/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81808b7bafb3bf8991046de2bc38d783d92116a8/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=81808b7bafb3bf8991046de2bc38d783d92116a8", "patch": "@@ -80,15 +80,6 @@ fn check_if_error_code_is_test_in_explanation(f: &str, err_code: &str) -> bool {\n     ignore_found\n }\n \n-macro_rules! some_or_continue {\n-    ($e:expr) => {\n-        match $e {\n-            Some(e) => e,\n-            None => continue,\n-        }\n-    };\n-}\n-\n fn extract_error_codes(\n     f: &str,\n     error_codes: &mut HashMap<String, ErrorCodeStatus>,\n@@ -122,10 +113,16 @@ fn extract_error_codes(\n                     Some((file_name, _)) => file_name,\n                 },\n             };\n-            let path = some_or_continue!(path.parent())\n+\n+            let Some(parent) = path.parent() else {\n+                continue;\n+            };\n+\n+            let path = parent\n                 .join(md_file_name)\n                 .canonicalize()\n                 .expect(\"failed to canonicalize error explanation file path\");\n+\n             match read_to_string(&path) {\n                 Ok(content) => {\n                     let has_test = check_if_error_code_is_test_in_explanation(&content, &err_code);\n@@ -215,8 +212,6 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n     // * #[error = \"E0111\"]\n     let regex = Regex::new(r#\"[(,\"\\s](E\\d{4})[,)\"]\"#).unwrap();\n \n-    println!(\"Checking which error codes lack tests...\");\n-\n     for path in paths {\n         walk(path, &mut filter_dirs, &mut |entry, contents| {\n             let file_name = entry.file_name();\n@@ -245,20 +240,15 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n         });\n     }\n     if found_explanations == 0 {\n-        eprintln!(\"No error code explanation was tested!\");\n-        *bad = true;\n+        tidy_error!(bad, \"No error code explanation was tested!\");\n     }\n     if found_tests == 0 {\n-        eprintln!(\"No error code was found in compilation errors!\");\n-        *bad = true;\n+        tidy_error!(bad, \"No error code was found in compilation errors!\");\n     }\n     if explanations.is_empty() {\n-        eprintln!(\"No error code explanation was found!\");\n-        *bad = true;\n+        tidy_error!(bad, \"No error code explanation was found!\");\n     }\n     if errors.is_empty() {\n-        println!(\"Found {} error codes\", error_codes.len());\n-\n         for (err_code, error_status) in &error_codes {\n             if !error_status.has_test && !EXEMPTED_FROM_TEST.contains(&err_code.as_str()) {\n                 errors.push(format!(\"Error code {err_code} needs to have at least one UI test!\"));\n@@ -310,11 +300,6 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n     }\n     errors.sort();\n     for err in &errors {\n-        eprintln!(\"{err}\");\n-    }\n-    println!(\"Found {} error(s) in error codes\", errors.len());\n-    if !errors.is_empty() {\n-        *bad = true;\n+        tidy_error!(bad, \"{err}\");\n     }\n-    println!(\"Done!\");\n }"}, {"sha": "ce7e7ac5cd4caad70a7754c6b02054352ee3eb06", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/81808b7bafb3bf8991046de2bc38d783d92116a8/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81808b7bafb3bf8991046de2bc38d783d92116a8/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=81808b7bafb3bf8991046de2bc38d783d92116a8", "patch": "@@ -3,6 +3,10 @@\n //! This library contains the tidy lints and exposes it\n //! to be used by tools.\n \n+use std::fmt::Display;\n+\n+use termcolor::WriteColor;\n+\n /// A helper macro to `unwrap` a result except also print out details like:\n ///\n /// * The expression that failed\n@@ -26,18 +30,27 @@ macro_rules! t {\n }\n \n macro_rules! tidy_error {\n-    ($bad:expr, $fmt:expr) => ({\n-        *$bad = true;\n-        eprint!(\"tidy error: \");\n-        eprintln!($fmt);\n-    });\n-    ($bad:expr, $fmt:expr, $($arg:tt)*) => ({\n-        *$bad = true;\n-        eprint!(\"tidy error: \");\n-        eprintln!($fmt, $($arg)*);\n+    ($bad:expr, $($fmt:tt)*) => ({\n+        $crate::tidy_error($bad, format_args!($($fmt)*)).expect(\"failed to output error\");\n     });\n }\n \n+fn tidy_error(bad: &mut bool, args: impl Display) -> std::io::Result<()> {\n+    use std::io::Write;\n+    use termcolor::{Color, ColorChoice, ColorSpec, StandardStream};\n+\n+    *bad = true;\n+\n+    let mut stderr = StandardStream::stdout(ColorChoice::Auto);\n+    stderr.set_color(ColorSpec::new().set_fg(Some(Color::Red)))?;\n+\n+    write!(&mut stderr, \"tidy error\")?;\n+    stderr.set_color(&ColorSpec::new())?;\n+\n+    writeln!(&mut stderr, \": {args}\")?;\n+    Ok(())\n+}\n+\n pub mod alphabetical;\n pub mod bins;\n pub mod debug_artifacts;"}]}