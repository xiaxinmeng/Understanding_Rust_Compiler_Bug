{"sha": "4c33ae33e96a0087f9f8451fc100b8681237d05f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMzNhZTMzZTk2YTAwODdmOWY4NDUxZmMxMDBiODY4MTIzN2QwNWY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-29T17:44:26Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-29T18:02:59Z"}, "message": "Reject more cases of invalid parameter to self renames", "tree": {"sha": "ffc3bbff43cb941700faca0e2b6d645eab36fdc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffc3bbff43cb941700faca0e2b6d645eab36fdc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c33ae33e96a0087f9f8451fc100b8681237d05f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c33ae33e96a0087f9f8451fc100b8681237d05f", "html_url": "https://github.com/rust-lang/rust/commit/4c33ae33e96a0087f9f8451fc100b8681237d05f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c33ae33e96a0087f9f8451fc100b8681237d05f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4a77f34da3d0d849c1e0b78b95df77485a57a3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a77f34da3d0d849c1e0b78b95df77485a57a3d", "html_url": "https://github.com/rust-lang/rust/commit/f4a77f34da3d0d849c1e0b78b95df77485a57a3d"}], "stats": {"total": 135, "additions": 122, "deletions": 13}, "files": [{"sha": "73145769679b07e38464020adf57c2412a7c76e1", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 122, "deletions": 13, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/4c33ae33e96a0087f9f8451fc100b8681237d05f/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c33ae33e96a0087f9f8451fc100b8681237d05f/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=4c33ae33e96a0087f9f8451fc100b8681237d05f", "patch": "@@ -221,24 +221,47 @@ fn rename_to_self(\n     let source_file = sema.parse(position.file_id);\n     let syn = source_file.syntax();\n \n-    let fn_def = find_node_at_offset::<ast::Fn>(syn, position.offset)\n+    let (fn_def, fn_ast) = find_node_at_offset::<ast::Fn>(syn, position.offset)\n+        .and_then(|fn_ast| sema.to_def(&fn_ast).zip(Some(fn_ast)))\n         .ok_or_else(|| RenameError(\"No surrounding method declaration found\".to_string()))?;\n-    let params =\n-        fn_def.param_list().ok_or_else(|| RenameError(\"Method has no parameters\".to_string()))?;\n-    if params.self_param().is_some() {\n+    let param_range = fn_ast\n+        .param_list()\n+        .and_then(|p| p.params().next())\n+        .ok_or_else(|| RenameError(\"Method has no parameters\".to_string()))?\n+        .syntax()\n+        .text_range();\n+    if !param_range.contains(position.offset) {\n+        return Err(RenameError(\"Only the first parameter can be self\".to_string()));\n+    }\n+\n+    let impl_block = find_node_at_offset::<ast::Impl>(syn, position.offset)\n+        .and_then(|def| sema.to_def(&def))\n+        .ok_or_else(|| RenameError(\"No impl block found for function\".to_string()))?;\n+    if fn_def.self_param(sema.db).is_some() {\n         return Err(RenameError(\"Method already has a self parameter\".to_string()));\n     }\n+\n+    let params = fn_def.params(sema.db);\n     let first_param =\n-        params.params().next().ok_or_else(|| RenameError(\"Method has no parameters\".into()))?;\n-    let mutable = match first_param.ty() {\n-        Some(ast::Type::RefType(rt)) => rt.mut_token().is_some(),\n-        _ => return Err(RenameError(\"Not renaming other types\".to_string())),\n+        params.first().ok_or_else(|| RenameError(\"Method has no parameters\".into()))?;\n+    let first_param_ty = first_param.ty();\n+    let impl_ty = impl_block.target_ty(sema.db);\n+    let (ty, self_param) = if impl_ty.remove_ref().is_some() {\n+        // if the impl is a ref to the type we can just match the `&T` with self directly\n+        (first_param_ty.clone(), \"self\")\n+    } else {\n+        first_param_ty.remove_ref().map_or((first_param_ty.clone(), \"self\"), |ty| {\n+            (ty, if first_param_ty.is_mutable_reference() { \"&mut self\" } else { \"&self\" })\n+        })\n     };\n \n+    if ty != impl_ty {\n+        return Err(RenameError(\"Parameter type differs from impl block type\".to_string()));\n+    }\n+\n     let RangeInfo { range, info: refs } = find_all_refs(sema, position, None)\n         .ok_or_else(|| RenameError(\"No reference found at position\".to_string()))?;\n \n-    let param_range = first_param.syntax().text_range();\n     let (param_ref, usages): (Vec<Reference>, Vec<Reference>) = refs\n         .into_iter()\n         .partition(|reference| param_range.intersect(reference.file_range.range).is_some());\n@@ -254,10 +277,7 @@ fn rename_to_self(\n \n     edits.push(SourceFileEdit {\n         file_id: position.file_id,\n-        edit: TextEdit::replace(\n-            param_range,\n-            String::from(if mutable { \"&mut self\" } else { \"&self\" }),\n-        ),\n+        edit: TextEdit::replace(param_range, String::from(self_param)),\n     });\n \n     Ok(RangeInfo::new(range, SourceChange::from(edits)))\n@@ -1084,6 +1104,95 @@ impl Foo {\n         self.i\n     }\n }\n+\"#,\n+        );\n+        check(\n+            \"self\",\n+            r#\"\n+struct Foo { i: i32 }\n+\n+impl Foo {\n+    fn f(foo<|>: Foo) -> i32 {\n+        foo.i\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Foo { i: i32 }\n+\n+impl Foo {\n+    fn f(self) -> i32 {\n+        self.i\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_parameter_to_self_error_no_impl() {\n+        check(\n+            \"self\",\n+            r#\"\n+struct Foo { i: i32 }\n+\n+fn f(foo<|>: &mut Foo) -> i32 {\n+    foo.i\n+}\n+\"#,\n+            \"error: No impl block found for function\",\n+        );\n+        check(\n+            \"self\",\n+            r#\"\n+struct Foo { i: i32 }\n+struct Bar;\n+\n+impl Bar {\n+    fn f(foo<|>: &mut Foo) -> i32 {\n+        foo.i\n+    }\n+}\n+\"#,\n+            \"error: Parameter type differs from impl block type\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_parameter_to_self_error_not_first() {\n+        check(\n+            \"self\",\n+            r#\"\n+struct Foo { i: i32 }\n+impl Foo {\n+    fn f(x: (), foo<|>: &mut Foo) -> i32 {\n+        foo.i\n+    }\n+}\n+\"#,\n+            \"error: Only the first parameter can be self\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_parameter_to_self_impl_ref() {\n+        check(\n+            \"self\",\n+            r#\"\n+struct Foo { i: i32 }\n+impl &Foo {\n+    fn f(foo<|>: &Foo) -> i32 {\n+        foo.i\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Foo { i: i32 }\n+impl &Foo {\n+    fn f(self) -> i32 {\n+        self.i\n+    }\n+}\n \"#,\n         );\n     }"}]}