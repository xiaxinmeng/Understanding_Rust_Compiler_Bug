{"sha": "aa5a5320466d4a6ac7125cb01956307e63d9918b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNWE1MzIwNDY2ZDRhNmFjNzEyNWNiMDE5NTYzMDdlNjNkOTkxOGI=", "commit": {"author": {"name": "achernyak", "email": "artemchernyak@gmail.com", "date": "2017-05-04T13:27:48Z"}, "committer": {"name": "achernyak", "email": "artemchernyak@gmail.com", "date": "2017-05-04T13:27:48Z"}, "message": "trait_of_item", "tree": {"sha": "3e587379e896a92b188a64602852aa802154d68c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e587379e896a92b188a64602852aa802154d68c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa5a5320466d4a6ac7125cb01956307e63d9918b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5a5320466d4a6ac7125cb01956307e63d9918b", "html_url": "https://github.com/rust-lang/rust/commit/aa5a5320466d4a6ac7125cb01956307e63d9918b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa5a5320466d4a6ac7125cb01956307e63d9918b/comments", "author": {"login": "hackeryarn", "id": 827709, "node_id": "MDQ6VXNlcjgyNzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/827709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackeryarn", "html_url": "https://github.com/hackeryarn", "followers_url": "https://api.github.com/users/hackeryarn/followers", "following_url": "https://api.github.com/users/hackeryarn/following{/other_user}", "gists_url": "https://api.github.com/users/hackeryarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackeryarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackeryarn/subscriptions", "organizations_url": "https://api.github.com/users/hackeryarn/orgs", "repos_url": "https://api.github.com/users/hackeryarn/repos", "events_url": "https://api.github.com/users/hackeryarn/events{/privacy}", "received_events_url": "https://api.github.com/users/hackeryarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hackeryarn", "id": 827709, "node_id": "MDQ6VXNlcjgyNzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/827709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackeryarn", "html_url": "https://github.com/hackeryarn", "followers_url": "https://api.github.com/users/hackeryarn/followers", "following_url": "https://api.github.com/users/hackeryarn/following{/other_user}", "gists_url": "https://api.github.com/users/hackeryarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackeryarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackeryarn/subscriptions", "organizations_url": "https://api.github.com/users/hackeryarn/orgs", "repos_url": "https://api.github.com/users/hackeryarn/repos", "events_url": "https://api.github.com/users/hackeryarn/events{/privacy}", "received_events_url": "https://api.github.com/users/hackeryarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c72a16b8e2e1febb300cab5b97fc3265a463e775", "url": "https://api.github.com/repos/rust-lang/rust/commits/c72a16b8e2e1febb300cab5b97fc3265a463e775", "html_url": "https://github.com/rust-lang/rust/commit/c72a16b8e2e1febb300cab5b97fc3265a463e775"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "0e462b95d820e392b1b779b466e2dcf47893b843", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5a5320466d4a6ac7125cb01956307e63d9918b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5a5320466d4a6ac7125cb01956307e63d9918b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=aa5a5320466d4a6ac7125cb01956307e63d9918b", "patch": "@@ -156,6 +156,7 @@ pub enum DepNode<D: Clone + Debug> {\n     Deprecation(D),\n     ItemBodyNestedBodies(D),\n     ConstIsRvaluePromotableToStatic(D),\n+    TraitOfItem(D),\n     IsMirAvailable(D),\n     ItemAttrs(D),\n     FnArgNames(D),\n@@ -271,6 +272,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             Deprecation(ref d) => op(d).map(Deprecation),\n             ItemAttrs(ref d) => op(d).map(ItemAttrs),\n             FnArgNames(ref d) => op(d).map(FnArgNames),\n+            TraitOfItem(ref d) => op(d).map(TraitOfItem),\n             ItemBodyNestedBodies(ref d) => op(d).map(ItemBodyNestedBodies),\n             ConstIsRvaluePromotableToStatic(ref d) => op(d).map(ConstIsRvaluePromotableToStatic),\n             IsMirAvailable(ref d) => op(d).map(IsMirAvailable),"}, {"sha": "11a2dfc6685a192068cb29e146ae206fcac3cefe", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5a5320466d4a6ac7125cb01956307e63d9918b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5a5320466d4a6ac7125cb01956307e63d9918b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=aa5a5320466d4a6ac7125cb01956307e63d9918b", "patch": "@@ -191,7 +191,6 @@ pub trait CrateStore {\n     fn impl_parent(&self, impl_def_id: DefId) -> Option<DefId>;\n \n     // trait/impl-item info\n-    fn trait_of_item(&self, def_id: DefId) -> Option<DefId>;\n     fn associated_item_cloned(&self, def: DefId) -> ty::AssociatedItem;\n \n     // flags\n@@ -316,7 +315,6 @@ impl CrateStore for DummyCrateStore {\n     fn impl_parent(&self, def: DefId) -> Option<DefId> { bug!(\"impl_parent\") }\n \n     // trait/impl-item info\n-    fn trait_of_item(&self, def_id: DefId) -> Option<DefId> { bug!(\"trait_of_item\") }\n     fn associated_item_cloned(&self, def: DefId) -> ty::AssociatedItem\n         { bug!(\"associated_item_cloned\") }\n "}, {"sha": "5d1b16c3d2e1c3c4207d0077b7c7cd5c5ced5279", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa5a5320466d4a6ac7125cb01956307e63d9918b/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5a5320466d4a6ac7125cb01956307e63d9918b/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=aa5a5320466d4a6ac7125cb01956307e63d9918b", "patch": "@@ -347,6 +347,12 @@ impl<'tcx> QueryDescription for queries::fn_arg_names<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::trait_of_item<'tcx> {\n+    fn describe(_: TyCtxt, _: DefId) -> String {\n+        bug!(\"trait_of_item\")\n+    }\n+}\n+\n impl<'tcx> QueryDescription for queries::item_body_nested_bodies<'tcx> {\n     fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         format!(\"nested item bodies of `{}`\", tcx.item_path_str(def_id))\n@@ -798,6 +804,7 @@ define_maps! { <'tcx>\n     [] deprecation: Deprecation(DefId) -> Option<attr::Deprecation>,\n     [] item_attrs: ItemAttrs(DefId) -> Rc<[ast::Attribute]>,\n     [] fn_arg_names: FnArgNames(DefId) -> Vec<ast::Name>,\n+    [] trait_of_item: TraitOfItem(DefId) -> Option<DefId>,\n     [] item_body_nested_bodies: ItemBodyNestedBodies(DefId) -> Rc<BTreeMap<hir::BodyId, hir::Body>>,\n     [] const_is_rvalue_promotable_to_static: ConstIsRvaluePromotableToStatic(DefId) -> bool,\n     [] is_mir_available: IsMirAvailable(DefId) -> bool,"}, {"sha": "00f81c9dcf7bc8c4296c9e330b5104025e0f85b0", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aa5a5320466d4a6ac7125cb01956307e63d9918b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5a5320466d4a6ac7125cb01956307e63d9918b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=aa5a5320466d4a6ac7125cb01956307e63d9918b", "patch": "@@ -2430,22 +2430,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// If the given def ID describes an item belonging to a trait,\n-    /// return the ID of the trait that the trait item belongs to.\n-    /// Otherwise, return `None`.\n-    pub fn trait_of_item(self, def_id: DefId) -> Option<DefId> {\n-        if def_id.krate != LOCAL_CRATE {\n-            return self.sess.cstore.trait_of_item(def_id);\n-        }\n-        self.opt_associated_item(def_id)\n-            .and_then(|associated_item| {\n-                match associated_item.container {\n-                    TraitContainer(def_id) => Some(def_id),\n-                    ImplContainer(_) => None\n-                }\n-            })\n-    }\n-\n     /// Construct a parameter environment suitable for static contexts or other contexts where there\n     /// are no free type/lifetime parameters in scope.\n     pub fn empty_parameter_environment(self) -> ParameterEnvironment<'tcx> {\n@@ -2693,13 +2677,31 @@ fn def_span<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Span {\n     tcx.hir.span_if_local(def_id).unwrap()\n }\n \n+/// If the given def ID describes an item belonging to a trait,\n+/// return the ID of the trait that the trait item belongs to.\n+/// Otherwise, return `None`.\n+fn trait_of_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Option<DefId> {\n+    if def_id.krate != LOCAL_CRATE {\n+        return None\n+    }\n+    tcx.opt_associated_item(def_id)\n+        .and_then(|associated_item| {\n+            match associated_item.container {\n+                TraitContainer(def_id) => Some(def_id),\n+                ImplContainer(_) => None\n+            }\n+        })\n+}\n+\n+\n pub fn provide(providers: &mut ty::maps::Providers) {\n     *providers = ty::maps::Providers {\n         associated_item,\n         associated_item_def_ids,\n         adt_sized_constraint,\n         adt_dtorck_constraint,\n         def_span,\n+        trait_of_item,\n         ..*providers\n     };\n }"}, {"sha": "e79f23aee11456e2fd3f3ce35f7e72a95f45d1ca", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5a5320466d4a6ac7125cb01956307e63d9918b/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5a5320466d4a6ac7125cb01956307e63d9918b/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=aa5a5320466d4a6ac7125cb01956307e63d9918b", "patch": "@@ -74,7 +74,7 @@ pub fn lookup_const_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 // constants, we only try to find the expression for a\n                 // trait-associated const if the caller gives us the\n                 // substitutions for the reference to it.\n-                if tcx.sess.cstore.trait_of_item(def_id).is_some() {\n+                if tcx.trait_of_item(def_id).is_some() {\n                     resolve_trait_associated_const(tcx, def_id, substs)\n                 } else {\n                     Some((def_id, substs))"}, {"sha": "b07dd1ec7b0b84e69451f41ceb480680b009df2e", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa5a5320466d4a6ac7125cb01956307e63d9918b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5a5320466d4a6ac7125cb01956307e63d9918b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=aa5a5320466d4a6ac7125cb01956307e63d9918b", "patch": "@@ -119,6 +119,7 @@ provide! { <'tcx> tcx, def_id, cdata\n     // This is only used by rustdoc anyway, which shouldn't have\n     // incremental recompilation ever enabled.\n     fn_arg_names => { cdata.get_fn_arg_names(def_id.index) }\n+    trait_of_item => { cdata.get_trait_of_item(def_id.index) }\n     item_body_nested_bodies => {\n         let map: BTreeMap<_, _> = cdata.entry(def_id.index).ast.into_iter().flat_map(|ast| {\n             ast.decode(cdata).nested_bodies.decode(cdata).map(|body| (body.id(), body))\n@@ -174,11 +175,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(impl_def.krate).get_parent_impl(impl_def.index)\n     }\n \n-    fn trait_of_item(&self, def_id: DefId) -> Option<DefId> {\n-        self.dep_graph.read(DepNode::MetaData(def_id));\n-        self.get_crate_data(def_id.krate).get_trait_of_item(def_id.index)\n-    }\n-\n     fn associated_item_cloned(&self, def: DefId) -> ty::AssociatedItem\n     {\n         self.dep_graph.read(DepNode::MetaData(def));"}]}