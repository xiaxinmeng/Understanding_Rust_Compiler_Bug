{"sha": "5b7ffd93330142d433ed3035ef838638dc6afa3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViN2ZmZDkzMzMwMTQyZDQzM2VkMzAzNWVmODM4NjM4ZGM2YWZhM2E=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-08T18:03:35Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-15T20:55:43Z"}, "message": "Handle more cases", "tree": {"sha": "3bb68f59db720eb49018674815ce64d06e1d002d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bb68f59db720eb49018674815ce64d06e1d002d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b7ffd93330142d433ed3035ef838638dc6afa3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7ffd93330142d433ed3035ef838638dc6afa3a", "html_url": "https://github.com/rust-lang/rust/commit/5b7ffd93330142d433ed3035ef838638dc6afa3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b7ffd93330142d433ed3035ef838638dc6afa3a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "190589f8a732393047bd0dc10b27a9aae4410944", "url": "https://api.github.com/repos/rust-lang/rust/commits/190589f8a732393047bd0dc10b27a9aae4410944", "html_url": "https://github.com/rust-lang/rust/commit/190589f8a732393047bd0dc10b27a9aae4410944"}], "stats": {"total": 225, "additions": 134, "deletions": 91}, "files": [{"sha": "a717fb7f7c0f88cae16c123703843d5d604f350b", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -969,7 +969,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         trait_ref: &ty::PolyTraitRef<'_>,\n         body_id: hir::HirId,\n     ) {\n-        let node = self.tcx.hir().find(self.tcx.hir().get_parent_item(body_id));\n+        let node = self.tcx.hir()\n+            .find(self.tcx.hir().get_parent_item(body_id))\n+            .or_else(|| self.tcx.hir().find(body_id));\n+        debug!(\n+            \"suggest_restricting_param_bound node={:?} - trait_ref={:?} ty={:?} ({:?})\",\n+            node,\n+            trait_ref,\n+            trait_ref.self_ty(),\n+            trait_ref.self_ty().kind,\n+        );\n         if let ty::Param(param_ty) = &trait_ref.self_ty().kind {\n             let restrict_msg = \"consider further restricting this bound\";\n             let param_name = param_ty.name.as_str();"}, {"sha": "5be6ab05d6607d014eadda611c8bc6f5494cd116", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -2,20 +2,22 @@ error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:6:24\n    |\n LL | impl <T: Sync+'static> Foo for (T,) { }\n-   |                        ^^^ `T` cannot be sent between threads safely\n+   |       --               ^^^ `T` cannot be sent between threads safely\n+   |       |\n+   |       help: consider further restricting this bound: `T: std::marker::Send +`\n    |\n    = help: within `(T,)`, the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n    = note: required because it appears within the type `(T,)`\n \n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:9:16\n    |\n LL | impl <T: Send> Foo for (T,T) { }\n-   |                ^^^ `T` cannot be shared between threads safely\n+   |       --       ^^^ `T` cannot be shared between threads safely\n+   |       |\n+   |       help: consider further restricting this bound: `T: std::marker::Sync +`\n    |\n    = help: within `(T, T)`, the trait `std::marker::Sync` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Sync` bound\n    = note: required because it appears within the type `(T, T)`\n \n error: aborting due to 2 previous errors"}, {"sha": "8cce9bfdf52a82915d1ff85c07e1f0eb9f557fb7", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -2,10 +2,11 @@ error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-in-metadata.rs:13:23\n    |\n LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely\n+   |       --              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely\n+   |       |\n+   |       help: consider further restricting this bound: `T: std::marker::Send +`\n    |\n    = help: within `X<T>`, the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n    = note: required because it appears within the type `X<T>`\n \n error: aborting due to previous error"}, {"sha": "4381a5b8682628a4274b9dd262db6326180e9ec2", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -2,10 +2,11 @@ error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-typaram-not-send.rs:5:24\n    |\n LL | impl <T: Sync+'static> Foo for T { }\n-   |                        ^^^ `T` cannot be sent between threads safely\n+   |       --               ^^^ `T` cannot be sent between threads safely\n+   |       |\n+   |       help: consider further restricting this bound: `T: std::marker::Send +`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n \n error: aborting due to previous error\n "}, {"sha": "3c8f637e13369722bcb1157496ac9e677851272c", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -4,14 +4,16 @@ error[E0277]: `F` cannot be sent between threads safely\n LL |   struct X<F> where F: FnOnce() + 'static + Send {\n    |   ---------------------------------------------- required by `X`\n ...\n-LL | / fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n+LL |   fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n+   |   ^                                                    - help: consider further restricting type parameter `F`: `, F: std::marker::Send`\n+   |  _|\n+   | |\n LL | |\n LL | |     return X { field: blk };\n LL | | }\n    | |_^ `F` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `F`\n-   = help: consider adding a `where F: std::marker::Send` bound\n \n error: aborting due to previous error\n "}, {"sha": "50fdf2d6185be93f30e276adb11f6f8ee27a01d6", "filename": "src/test/ui/issues/issue-21837.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -5,9 +5,9 @@ LL | pub struct Foo<T: Bound>(T);\n    | ---------------------------- required by `Foo`\n ...\n LL | impl<T> Trait2 for Foo<T> {}\n-   |         ^^^^^^ the trait `Bound` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: Bound` bound\n+   |      -  ^^^^^^ the trait `Bound` is not implemented for `T`\n+   |      |\n+   |      help: consider restricting this bound: `T: Bound`\n \n error: aborting due to previous error\n "}, {"sha": "553041c5106c56c3102398c83d54e46b7976376b", "filename": "src/test/ui/issues/issue-27060-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -1,12 +1,13 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/issue-27060-2.rs:3:5\n    |\n+LL | pub struct Bad<T: ?Sized> {\n+   |                -- help: consider further restricting this bound: `T: std::marker::Sized +`\n LL |     data: T,\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n    = note: the last field of a packed struct may only have a dynamically sized type if it does not need drop to be run\n \n error: aborting due to previous error"}, {"sha": "e91e53499ce6c1f83218c9a96e24deb4449c5a05", "filename": "src/test/ui/issues/issue-43784-associated-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/issue-43784-associated-type.rs:13:9\n    |\n LL | impl<T> Complete for T {\n-   |         ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n+   |      -  ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |      |\n+   |      help: consider restricting this bound: `T: std::marker::Copy`\n \n error: aborting due to previous error\n "}, {"sha": "5ac32041bce481291119238c5dc3e2c6421c4d26", "filename": "src/test/ui/issues/issue-43784-supertrait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/issue-43784-supertrait.rs:8:9\n    |\n LL | impl<T> Complete for T {}\n-   |         ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n+   |      -  ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |      |\n+   |      help: consider restricting this bound: `T: std::marker::Copy`\n \n error: aborting due to previous error\n "}, {"sha": "5275b7b1ddfa57e11fa37710d48c8ffc448a76b9", "filename": "src/test/ui/specialization/defaultimpl/specialization-wfcheck.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the trait bound `U: std::cmp::Eq` is not satisfied\n   --> $DIR/specialization-wfcheck.rs:7:17\n    |\n LL | default impl<U> Foo<'static, U> for () {}\n-   |                 ^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::cmp::Eq` bound\n+   |              -  ^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `U`\n+   |              |\n+   |              help: consider restricting this bound: `U: std::cmp::Eq`\n \n error: aborting due to previous error\n "}, {"sha": "96bbd1f3e4f1753add73e5010fcab1dd0c79b6cf", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -5,9 +5,9 @@ LL | struct Foo<T:Trait> {\n    | ------------------- required by `Foo`\n ...\n LL | impl<T> Foo<T> {\n-   |         ^^^^^^ the trait `Trait` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: Trait` bound\n+   |      -  ^^^^^^ the trait `Trait` is not implemented for `T`\n+   |      |\n+   |      help: consider restricting this bound: `T: Trait`\n \n error[E0277]: the trait bound `isize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:19:5\n@@ -33,21 +33,21 @@ error[E0277]: the trait bound `U: Trait` is not satisfied\n LL | struct Foo<T:Trait> {\n    | ------------------- required by `Foo`\n ...\n+LL | struct Badness<U> {\n+   |                - help: consider restricting this bound: `U: Trait`\n LL |     b: Foo<U>,\n    |     ^^^^^^^^^ the trait `Trait` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: Trait` bound\n \n error[E0277]: the trait bound `V: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:31:21\n    |\n LL | enum Bar<T:Trait> {\n    | ----------------- required by `Bar`\n ...\n+LL | enum MoreBadness<V> {\n+   |                  - help: consider restricting this bound: `V: Trait`\n LL |     EvenMoreBadness(Bar<V>),\n    |                     ^^^^^^ the trait `Trait` is not implemented for `V`\n-   |\n-   = help: consider adding a `where V: Trait` bound\n \n error[E0277]: the trait bound `i32: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:35:5"}, {"sha": "6802bc38b89c9fce2598826baec09d3d1edd6ab2", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -52,9 +52,10 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | trait Super<T: Copy> { }\n    | -------------------- required by `Super`\n LL | trait Base<T = String>: Super<T> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n+   | ^^^^^^^^^^^-^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |          |\n+   | |          help: consider restricting this bound: `T: std::marker::Copy`\n+   | the trait `std::marker::Copy` is not implemented for `T`\n \n error[E0277]: cannot add `u8` to `i32`\n   --> $DIR/type-check-defaults.rs:24:66"}, {"sha": "c9fec1d21d152026214290203c561e73e648843b", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -1,34 +1,37 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:4:5\n    |\n+LL | union Foo<T: ?Sized> {\n+   |           -- help: consider further restricting this bound: `T: std::marker::Sized +`\n LL |     value: T,\n    |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n    = note: no field of a union may have a dynamically sized type\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:9:5\n    |\n+LL | struct Foo2<T: ?Sized> {\n+   |             -- help: consider further restricting this bound: `T: std::marker::Sized +`\n LL |     value: T,\n    |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:15:11\n    |\n+LL | enum Foo3<T: ?Sized> {\n+   |           -- help: consider further restricting this bound: `T: std::marker::Sized +`\n LL |     Value(T),\n    |           ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n error: aborting due to 3 previous errors"}, {"sha": "e85b6d662f9d56b8e3c8cc5976b744818b2f928c", "filename": "src/test/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -1,45 +1,53 @@\n error[E0277]: the size for values of type `W` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:23:8\n    |\n+LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n+   |        -- help: consider further restricting this bound: `W: std::marker::Sized +`\n+LL |     // parameter\n LL |     VA(W),\n    |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `W`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where W: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:25:8\n    |\n+LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n+   |                   -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+...\n LL |     VB{x: X},\n    |        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:27:15\n    |\n+LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n+   |                              -- help: consider further restricting this bound: `Y: std::marker::Sized +`\n+...\n LL |     VC(isize, Y),\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `Z` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:29:18\n    |\n+LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n+   |                                         -- help: consider further restricting this bound: `Z: std::marker::Sized +`\n+...\n LL |     VD{u: isize, x: Z},\n    |                  ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Z`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where Z: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time"}, {"sha": "280b8fd43cab0ecc07fa18e55b8c44d3719fc6d1", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -5,11 +5,12 @@ LL | struct S5<Y>(Y);\n    | ---------------- required by `S5`\n LL | \n LL | impl<X: ?Sized> S5<X> {\n-   |                 ^^^^^ doesn't have a size known at compile-time\n+   |      --         ^^^^^ doesn't have a size known at compile-time\n+   |      |\n+   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n \n error: aborting due to previous error\n "}, {"sha": "ba1550439c0d9b51bae147932d593f65fbf956d4", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -5,11 +5,12 @@ LL | struct S5<Y>(Y);\n    | ---------------- required by `S5`\n LL | \n LL | impl<X: ?Sized> T3<X> for S5<X> {\n-   |                 ^^^^^ doesn't have a size known at compile-time\n+   |      --         ^^^^^ doesn't have a size known at compile-time\n+   |      |\n+   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n \n error: aborting due to previous error\n "}, {"sha": "41371d63f9e53eaa0215188b7094934d07c2ed97", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -2,11 +2,12 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized-trait-impl-trait-arg.rs:8:17\n    |\n LL | impl<X: ?Sized> T2<X> for S4<X> {\n-   |                 ^^^^^ doesn't have a size known at compile-time\n+   |      --         ^^^^^ doesn't have a size known at compile-time\n+   |      |\n+   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n \n error: aborting due to previous error\n "}, {"sha": "bfd3f4aa691eb7deae80216873bc2034816db17d", "filename": "src/test/ui/unsized5.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized5.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -1,23 +1,26 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized5.rs:4:5\n    |\n+LL | struct S1<X: ?Sized> {\n+   |           -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f1: X,\n    |     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized5.rs:10:5\n    |\n+LL | struct S2<X: ?Sized> {\n+   |           -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+LL |     f: isize,\n LL |     g: X,\n    |     ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -43,23 +46,25 @@ LL |     f: [u8],\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized5.rs:25:8\n    |\n+LL | enum E<X: ?Sized> {\n+   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     V1(X, isize),\n    |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized5.rs:29:8\n    |\n+LL | enum F<X: ?Sized> {\n+   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     V2{f1: X, f: isize},\n    |        ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n error: aborting due to 6 previous errors"}, {"sha": "c77503a6f87aa705a74d87c466bae6425d3fbba0", "filename": "src/test/ui/unsized7.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized7.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -2,11 +2,12 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized7.rs:12:21\n    |\n LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n-   |                     ^^^^^ doesn't have a size known at compile-time\n+   |      --             ^^^^^ doesn't have a size known at compile-time\n+   |      |\n+   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n \n error: aborting due to previous error\n "}, {"sha": "eaacd6b6881eff2831f1479c23aaaa5be4abe570", "filename": "src/test/ui/wf/wf-enum-bound.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -6,12 +6,11 @@ LL |   trait ExtraCopy<T:Copy> { }\n LL | \n LL | / enum SomeEnum<T,U>\n LL | |     where T: ExtraCopy<U>\n+   | |                          - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n LL | | {\n LL | |     SomeVariant(T,U)\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "52882c460d228ad7f707bd583dc1cdbdd2470c78", "filename": "src/test/ui/wf/wf-enum-fields-struct-variant.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -4,10 +4,11 @@ error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n LL | struct IsCopy<T:Copy> {\n    | --------------------- required by `IsCopy`\n ...\n+LL | enum AnotherEnum<A> {\n+   |                  - help: consider restricting this bound: `A: std::marker::Copy`\n+LL |     AnotherVariant {\n LL |         f: IsCopy<A>\n    |         ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n-   |\n-   = help: consider adding a `where A: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "0fea35d68ea6ff435e206ae6ca743aedaae9790a", "filename": "src/test/ui/wf/wf-enum-fields.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -4,10 +4,10 @@ error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n LL | struct IsCopy<T:Copy> {\n    | --------------------- required by `IsCopy`\n ...\n+LL | enum SomeEnum<A> {\n+   |               - help: consider restricting this bound: `A: std::marker::Copy`\n LL |     SomeVariant(IsCopy<A>)\n    |                 ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n-   |\n-   = help: consider adding a `where A: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "9b8b04a7b86a3153d6236de59c7e8037552d340a", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -4,12 +4,13 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n LL |   trait ExtraCopy<T:Copy> { }\n    |   ----------------------- required by `ExtraCopy`\n LL | \n-LL | / fn foo<T,U>() where T: ExtraCopy<U>\n+LL |   fn foo<T,U>() where T: ExtraCopy<U>\n+   |   ^                                  - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |  _|\n+   | |\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::marker::Copy` bound\n \n error[E0277]: the size for values of type `(dyn std::marker::Copy + 'static)` cannot be known at compilation time\n   --> $DIR/wf-fn-where-clause.rs:12:1"}, {"sha": "3798ba1ec6e75a095479ffca6a14ce081c5f9cec", "filename": "src/test/ui/wf/wf-in-fn-arg.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -4,12 +4,13 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL |   struct MustBeCopy<T:Copy> {\n    |   ------------------------- required by `MustBeCopy`\n ...\n-LL | / fn bar<T>(_: &MustBeCopy<T>)\n+LL |   fn bar<T>(_: &MustBeCopy<T>)\n+   |   ^      - help: consider restricting this bound: `T: std::marker::Copy`\n+   |  _|\n+   | |\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "2e46ce4900033f132b03ce3c392365f64424c9d5", "filename": "src/test/ui/wf/wf-in-fn-ret.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -4,12 +4,13 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL |   struct MustBeCopy<T:Copy> {\n    |   ------------------------- required by `MustBeCopy`\n ...\n-LL | / fn bar<T>() -> MustBeCopy<T>\n+LL |   fn bar<T>() -> MustBeCopy<T>\n+   |   ^      - help: consider restricting this bound: `T: std::marker::Copy`\n+   |  _|\n+   | |\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "db4fb9f97f52d6377753177f0d9c404a3184edd6", "filename": "src/test/ui/wf/wf-in-fn-type-arg.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -4,10 +4,11 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | struct MustBeCopy<T:Copy> {\n    | ------------------------- required by `MustBeCopy`\n ...\n+LL | struct Bar<T> {\n+   |            - help: consider restricting this bound: `T: std::marker::Copy`\n+LL |     // needs T: Copy\n LL |     x: fn(MustBeCopy<T>)\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "09f8aa2a2018202c8f3a90ef2e5028c083234fe3", "filename": "src/test/ui/wf/wf-in-fn-type-ret.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -4,10 +4,11 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | struct MustBeCopy<T:Copy> {\n    | ------------------------- required by `MustBeCopy`\n ...\n+LL | struct Foo<T> {\n+   |            - help: consider restricting this bound: `T: std::marker::Copy`\n+LL |     // needs T: 'static\n LL |     x: fn() -> MustBeCopy<T>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "979802dec49986d050d293ec70d790cfdbebf0ed", "filename": "src/test/ui/wf/wf-in-fn-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -6,11 +6,10 @@ LL |   trait MustBeCopy<T:Copy> {\n ...\n LL | / fn bar<T,U>()\n LL | |     where T: MustBeCopy<U>\n+   | |                           - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "2711820d82c651081bd2a150b9da056d7577249f", "filename": "src/test/ui/wf/wf-in-obj-type-trait.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -4,10 +4,11 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | struct MustBeCopy<T:Copy> {\n    | ------------------------- required by `MustBeCopy`\n ...\n+LL | struct Bar<T> {\n+   |            - help: consider restricting this bound: `T: std::marker::Copy`\n+LL |     // needs T: Copy\n LL |     x: dyn Object<MustBeCopy<T>>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "35b90933813299c85f42b27509d8556aebd88ca7", "filename": "src/test/ui/wf/wf-inherent-impl-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -4,12 +4,13 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n LL |   trait ExtraCopy<T:Copy> { }\n    |   ----------------------- required by `ExtraCopy`\n ...\n-LL | / impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n+LL |   impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n+   |   ^                                       - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |  _|\n+   | |\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "2155977349256cd9378a8583f0d5674b44c523b9", "filename": "src/test/ui/wf/wf-struct-bound.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -6,12 +6,11 @@ LL |   trait ExtraCopy<T:Copy> { }\n LL | \n LL | / struct SomeStruct<T,U>\n LL | |     where T: ExtraCopy<U>\n+   | |                          - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n LL | | {\n LL | |     data: (T,U)\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "6ac4f1e2da8d22a428a57a177ae0d66f2988e604", "filename": "src/test/ui/wf/wf-struct-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -4,10 +4,10 @@ error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n LL | struct IsCopy<T:Copy> {\n    | --------------------- required by `IsCopy`\n ...\n+LL | struct SomeStruct<A> {\n+   |                   - help: consider restricting this bound: `A: std::marker::Copy`\n LL |     data: IsCopy<A>\n    |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n-   |\n-   = help: consider adding a `where A: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "af0433fd22f6e30f4997eeb8c86b785f62954180", "filename": "src/test/ui/wf/wf-trait-associated-type-bound.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -4,12 +4,13 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL |   trait ExtraCopy<T:Copy> { }\n    |   ----------------------- required by `ExtraCopy`\n LL | \n-LL | / trait SomeTrait<T> {\n+LL |   trait SomeTrait<T> {\n+   |   ^               - help: consider restricting this bound: `T: std::marker::Copy`\n+   |  _|\n+   | |\n LL | |     type Type1: ExtraCopy<T>;\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "13e2f8f590149f0e17633d4c00fa5a84754d14d0", "filename": "src/test/ui/wf/wf-trait-bound.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -6,11 +6,10 @@ LL |   trait ExtraCopy<T:Copy> { }\n LL | \n LL | / trait SomeTrait<T,U>\n LL | |     where T: ExtraCopy<U>\n+   | |                          - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "a61b8dd3a3849ffff54cf1f48ee62ae6213582ab", "filename": "src/test/ui/wf/wf-trait-superbound.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7ffd93330142d433ed3035ef838638dc6afa3a/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr?ref=5b7ffd93330142d433ed3035ef838638dc6afa3a", "patch": "@@ -4,11 +4,12 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL |   trait ExtraCopy<T:Copy> { }\n    |   ----------------------- required by `ExtraCopy`\n LL | \n-LL | / trait SomeTrait<T>: ExtraCopy<T> {\n+LL |   trait SomeTrait<T>: ExtraCopy<T> {\n+   |   ^               - help: consider restricting this bound: `T: std::marker::Copy`\n+   |  _|\n+   | |\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}]}