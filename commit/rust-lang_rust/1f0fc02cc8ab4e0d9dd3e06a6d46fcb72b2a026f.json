{"sha": "1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMGZjMDJjYzhhYjRlMGQ5ZGQzZTA2YTZkNDZmY2I3MmIyYTAyNmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-17T17:52:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-17T17:52:01Z"}, "message": "Auto merge of #80524 - jyn514:unknown-tool-lints, r=flip1995,matthewjasper\n\nDon't make tools responsible for checking unknown and renamed lints\n\nPreviously, clippy (and any other tool emitting lints) had to have their\nown separate UNKNOWN_LINTS pass, because the compiler assumed any tool\nlint could be valid. Now, as long as any lint starting with the tool\nprefix exists, the compiler will warn when an unknown lint is present.\n\nThis may interact with the unstable `tool_lint` feature, which I don't entirely understand, but it will take the burden off those external tools to add their own lint pass, which seems like a step in the right direction to me.\n\n- Don't mark `ineffective_unstable_trait_impl` as an internal lint\n- Use clippy's more advanced lint suggestions\n- Deprecate the `UNKNOWN_CLIPPY_LINTS` pass (and make it a no-op)\n- Say 'unknown lint `clippy::x`' instead of 'unknown lint x'\n\nThis is tested by existing clippy tests. When https://github.com/rust-lang/rust/pull/80527 merges, it will also be tested in rustdoc tests. AFAIK there is no way to test this with rustc directly.", "tree": {"sha": "a90bba13f55c036cc2279b9beac6b30d27a87cfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a90bba13f55c036cc2279b9beac6b30d27a87cfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "html_url": "https://github.com/rust-lang/rust/commit/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edeb631ad0cd6fdf31e2e31ec90e105d1768be28", "url": "https://api.github.com/repos/rust-lang/rust/commits/edeb631ad0cd6fdf31e2e31ec90e105d1768be28", "html_url": "https://github.com/rust-lang/rust/commit/edeb631ad0cd6fdf31e2e31ec90e105d1768be28"}, {"sha": "13728b8975bf53171cdd94d5edfffb78a2a9179f", "url": "https://api.github.com/repos/rust-lang/rust/commits/13728b8975bf53171cdd94d5edfffb78a2a9179f", "html_url": "https://github.com/rust-lang/rust/commit/13728b8975bf53171cdd94d5edfffb78a2a9179f"}], "stats": {"total": 228, "additions": 116, "deletions": 112}, "files": [{"sha": "3971a3099823fa8f0f386b3f6c4031808ca1d426", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "patch": "@@ -354,10 +354,23 @@ impl LintStore {\n             lint_name.to_string()\n         };\n         // If the lint was scoped with `tool::` check if the tool lint exists\n-        if tool_name.is_some() {\n+        if let Some(tool_name) = tool_name {\n             match self.by_name.get(&complete_name) {\n                 None => match self.lint_groups.get(&*complete_name) {\n-                    None => return CheckLintNameResult::Tool(Err((None, String::new()))),\n+                    // If the lint isn't registered, there are two possibilities:\n+                    None => {\n+                        // 1. The tool is currently running, so this lint really doesn't exist.\n+                        // FIXME: should this handle tools that never register a lint, like rustfmt?\n+                        tracing::debug!(\"lints={:?}\", self.by_name.keys().collect::<Vec<_>>());\n+                        let tool_prefix = format!(\"{}::\", tool_name);\n+                        return if self.by_name.keys().any(|lint| lint.starts_with(&tool_prefix)) {\n+                            self.no_lint_suggestion(&complete_name)\n+                        } else {\n+                            // 2. The tool isn't currently running, so no lints will be registered.\n+                            // To avoid giving a false positive, ignore all unknown lints.\n+                            CheckLintNameResult::Tool(Err((None, String::new())))\n+                        };\n+                    }\n                     Some(LintGroup { lint_ids, .. }) => {\n                         return CheckLintNameResult::Tool(Ok(&lint_ids));\n                     }\n@@ -398,6 +411,21 @@ impl LintStore {\n         }\n     }\n \n+    fn no_lint_suggestion(&self, lint_name: &str) -> CheckLintNameResult<'_> {\n+        let name_lower = lint_name.to_lowercase();\n+        let symbols =\n+            self.get_lints().iter().map(|l| Symbol::intern(&l.name_lower())).collect::<Vec<_>>();\n+\n+        if lint_name.chars().any(char::is_uppercase) && self.find_lints(&name_lower).is_ok() {\n+            // First check if the lint name is (partly) in upper case instead of lower case...\n+            CheckLintNameResult::NoLint(Some(Symbol::intern(&name_lower)))\n+        } else {\n+            // ...if not, search for lints with a similar name\n+            let suggestion = find_best_match_for_name(&symbols, Symbol::intern(&name_lower), None);\n+            CheckLintNameResult::NoLint(suggestion)\n+        }\n+    }\n+\n     fn check_tool_name_for_backwards_compat(\n         &self,\n         lint_name: &str,\n@@ -407,18 +435,7 @@ impl LintStore {\n         match self.by_name.get(&complete_name) {\n             None => match self.lint_groups.get(&*complete_name) {\n                 // Now we are sure, that this lint exists nowhere\n-                None => {\n-                    let symbols =\n-                        self.by_name.keys().map(|name| Symbol::intern(&name)).collect::<Vec<_>>();\n-\n-                    let suggestion = find_best_match_for_name(\n-                        &symbols,\n-                        Symbol::intern(&lint_name.to_lowercase()),\n-                        None,\n-                    );\n-\n-                    CheckLintNameResult::NoLint(suggestion)\n-                }\n+                None => self.no_lint_suggestion(lint_name),\n                 Some(LintGroup { lint_ids, depr, .. }) => {\n                     // Reaching this would be weird, but let's cover this case anyway\n                     if let Some(LintAlias { name, silent }) = depr {"}, {"sha": "fc8f84461f9912dfd10483c439809dda9fb3f1a0", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "patch": "@@ -381,6 +381,11 @@ impl<'s> LintLevelsBuilder<'s> {\n                             src,\n                             Some(li.span().into()),\n                             |lint| {\n+                                let name = if let Some(tool_name) = tool_name {\n+                                    format!(\"{}::{}\", tool_name, name)\n+                                } else {\n+                                    name.to_string()\n+                                };\n                                 let mut db = lint.build(&format!(\"unknown lint: `{}`\", name));\n                                 if let Some(suggestion) = suggestion {\n                                     db.span_suggestion("}, {"sha": "20052ad9bfcbd60ec558becca24683dc8c49e7ab", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "patch": "@@ -4,7 +4,7 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use crate::{declare_lint, declare_lint_pass, declare_tool_lint};\n+use crate::{declare_lint, declare_lint_pass};\n use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n \n@@ -2825,8 +2825,29 @@ declare_lint! {\n     };\n }\n \n-declare_tool_lint! {\n-    pub rustc::INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n+declare_lint! {\n+    /// The `ineffective_unstable_trait_impl` lint detects `#[unstable]` attributes which are not used.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```compile_fail\n+    /// #![feature(staged_api)]\n+    ///\n+    /// #[derive(Clone)]\n+    /// #[stable(feature = \"x\", since = \"1\")]\n+    /// struct S {}\n+    ///\n+    /// #[unstable(feature = \"y\", issue = \"none\")]\n+    /// impl Copy for S {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// `staged_api` does not currently support using a stability attribute on `impl` blocks.\n+    /// `impl`s are always stable if both the type and trait are stable, and always unstable otherwise.\n+    pub INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n     Deny,\n     \"detects `#[unstable]` on stable trait implementations for stable types\"\n }"}, {"sha": "69690494196bfbc302ae03cbb70a3f8e9386c645", "filename": "library/alloc/src/task.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/library%2Falloc%2Fsrc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/library%2Falloc%2Fsrc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftask.rs?ref=1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "patch": "@@ -33,7 +33,8 @@ pub trait Wake {\n     }\n }\n \n-#[allow(rustc::ineffective_unstable_trait_impl)]\n+#[cfg_attr(bootstrap, allow(rustc::ineffective_unstable_trait_impl))]\n+#[cfg_attr(not(bootstrap), allow(ineffective_unstable_trait_impl))]\n #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n     fn from(waker: Arc<W>) -> Waker {\n@@ -43,7 +44,8 @@ impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n     }\n }\n \n-#[allow(rustc::ineffective_unstable_trait_impl)]\n+#[cfg_attr(bootstrap, allow(rustc::ineffective_unstable_trait_impl))]\n+#[cfg_attr(not(bootstrap), allow(ineffective_unstable_trait_impl))]\n #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n     fn from(waker: Arc<W>) -> RawWaker {"}, {"sha": "656564fc9e3f8240d66f64182bd4f4e955a47499", "filename": "src/test/ui/stability-attribute/stability-attribute-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.rs?ref=1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "patch": "@@ -22,7 +22,7 @@ impl StableTrait for UnstableType {}\n impl UnstableTrait for StableType {}\n \n #[unstable(feature = \"x\", issue = \"none\")]\n-//~^ ERROR an `#[unstable]` annotation here has no effect [rustc::ineffective_unstable_trait_impl]\n+//~^ ERROR an `#[unstable]` annotation here has no effect [ineffective_unstable_trait_impl]\n impl StableTrait for StableType {}\n \n fn main() {}"}, {"sha": "a11479cc8f45cdba0c33c82bbdb8c74776c8ed9d", "filename": "src/test/ui/stability-attribute/stability-attribute-trait-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.stderr?ref=1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "patch": "@@ -4,7 +4,7 @@ error: an `#[unstable]` annotation here has no effect\n LL | #[unstable(feature = \"x\", issue = \"none\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(rustc::ineffective_unstable_trait_impl)]` on by default\n+   = note: `#[deny(ineffective_unstable_trait_impl)]` on by default\n    = note: see issue #55436 <https://github.com/rust-lang/rust/issues/55436> for more information\n \n error: aborting due to previous error"}, {"sha": "7607394b2fe96c15146c3cbaa8fd86a9d511e3da", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 70, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "patch": "@@ -10,11 +10,10 @@ use rustc_errors::Applicability;\n use rustc_hir::{\n     Block, Expr, ExprKind, ImplItem, ImplItemKind, Item, ItemKind, StmtKind, TraitFn, TraitItem, TraitItemKind,\n };\n-use rustc_lint::{CheckLintNameResult, EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n use rustc_span::symbol::{Symbol, SymbolStr};\n@@ -156,33 +155,6 @@ declare_clippy_lint! {\n     \"empty line after outer attribute\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for `allow`/`warn`/`deny`/`forbid` attributes with scoped clippy\n-    /// lints and if those lints exist in clippy. If there is an uppercase letter in the lint name\n-    /// (not the tool name) and a lowercase version of this lint exists, it will suggest to lowercase\n-    /// the lint name.\n-    ///\n-    /// **Why is this bad?** A lint attribute with a mistyped lint name won't have an effect.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// Bad:\n-    /// ```rust\n-    /// #![warn(if_not_els)]\n-    /// #![deny(clippy::All)]\n-    /// ```\n-    ///\n-    /// Good:\n-    /// ```rust\n-    /// #![warn(if_not_else)]\n-    /// #![deny(clippy::all)]\n-    /// ```\n-    pub UNKNOWN_CLIPPY_LINTS,\n-    style,\n-    \"unknown_lints for scoped Clippy lints\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for `warn`/`deny`/`forbid` attributes targeting the whole clippy::restriction category.\n     ///\n@@ -272,7 +244,6 @@ declare_lint_pass!(Attributes => [\n     INLINE_ALWAYS,\n     DEPRECATED_SEMVER,\n     USELESS_ATTRIBUTE,\n-    UNKNOWN_CLIPPY_LINTS,\n     BLANKET_CLIPPY_RESTRICTION_LINTS,\n ]);\n \n@@ -409,48 +380,9 @@ fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<SymbolStr> {\n }\n \n fn check_clippy_lint_names(cx: &LateContext<'_>, ident: &str, items: &[NestedMetaItem]) {\n-    let lint_store = cx.lints();\n     for lint in items {\n         if let Some(lint_name) = extract_clippy_lint(lint) {\n-            if let CheckLintNameResult::Tool(Err((None, _))) = lint_store.check_lint_name(&lint_name, Some(sym::clippy))\n-            {\n-                span_lint_and_then(\n-                    cx,\n-                    UNKNOWN_CLIPPY_LINTS,\n-                    lint.span(),\n-                    &format!(\"unknown clippy lint: clippy::{}\", lint_name),\n-                    |diag| {\n-                        let name_lower = lint_name.to_lowercase();\n-                        let symbols = lint_store\n-                            .get_lints()\n-                            .iter()\n-                            .map(|l| Symbol::intern(&l.name_lower()))\n-                            .collect::<Vec<_>>();\n-                        let sugg = find_best_match_for_name(\n-                            &symbols,\n-                            Symbol::intern(&format!(\"clippy::{}\", name_lower)),\n-                            None,\n-                        );\n-                        if lint_name.chars().any(char::is_uppercase)\n-                            && lint_store.find_lints(&format!(\"clippy::{}\", name_lower)).is_ok()\n-                        {\n-                            diag.span_suggestion(\n-                                lint.span(),\n-                                \"lowercase the lint name\",\n-                                format!(\"clippy::{}\", name_lower),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        } else if let Some(sugg) = sugg {\n-                            diag.span_suggestion(\n-                                lint.span(),\n-                                \"did you mean\",\n-                                sugg.to_string(),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n-                    },\n-                );\n-            } else if lint_name == \"restriction\" && ident != \"allow\" {\n+            if lint_name == \"restriction\" && ident != \"allow\" {\n                 span_lint_and_help(\n                     cx,\n                     BLANKET_CLIPPY_RESTRICTION_LINTS,"}, {"sha": "47b3cc3ad3038b5d469ee24ff7d1024ad3921a2c", "filename": "src/tools/clippy/clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "patch": "@@ -163,6 +163,19 @@ declare_deprecated_lint! {\n }\n \n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been uplifted to rustc and is now called\n+    /// `panic_fmt`.\n     pub PANIC_PARAMS,\n     \"this lint has been uplifted to rustc and is now called `panic_fmt`\"\n }\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been integrated into the `unknown_lints`\n+    /// rustc lint.\n+    pub UNKNOWN_CLIPPY_LINTS,\n+    \"this lint has been integrated into the `unknown_lints` rustc lint\"\n+}"}, {"sha": "aaa17561f06d33b1c01d4264319930af032bf581", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "patch": "@@ -500,6 +500,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::panic_params\",\n         \"this lint has been uplifted to rustc and is now called `panic_fmt`\",\n     );\n+    store.register_removed(\n+        \"clippy::unknown_clippy_lints\",\n+        \"this lint has been integrated into the `unknown_lints` rustc lint\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -541,7 +545,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n         &attrs::INLINE_ALWAYS,\n         &attrs::MISMATCHED_TARGET_OS,\n-        &attrs::UNKNOWN_CLIPPY_LINTS,\n         &attrs::USELESS_ATTRIBUTE,\n         &await_holding_invalid::AWAIT_HOLDING_LOCK,\n         &await_holding_invalid::AWAIT_HOLDING_REFCELL_REF,\n@@ -1375,7 +1378,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&attrs::DEPRECATED_CFG_ATTR),\n         LintId::of(&attrs::DEPRECATED_SEMVER),\n         LintId::of(&attrs::MISMATCHED_TARGET_OS),\n-        LintId::of(&attrs::UNKNOWN_CLIPPY_LINTS),\n         LintId::of(&attrs::USELESS_ATTRIBUTE),\n         LintId::of(&bit_mask::BAD_BIT_MASK),\n         LintId::of(&bit_mask::INEFFECTIVE_BIT_MASK),\n@@ -1650,7 +1652,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n         LintId::of(&assign_ops::ASSIGN_OP_PATTERN),\n         LintId::of(&attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n-        LintId::of(&attrs::UNKNOWN_CLIPPY_LINTS),\n         LintId::of(&blacklisted_name::BLACKLISTED_NAME),\n         LintId::of(&blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n         LintId::of(&collapsible_if::COLLAPSIBLE_IF),"}, {"sha": "4a538021b98eaf1b6791f8401ee8333c95ac8825", "filename": "src/tools/clippy/tests/ui/deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.rs?ref=1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "patch": "@@ -9,5 +9,6 @@\n #[warn(clippy::drop_bounds)]\n #[warn(clippy::temporary_cstring_as_ptr)]\n #[warn(clippy::panic_params)]\n+#[warn(clippy::unknown_clippy_lints)]\n \n fn main() {}"}, {"sha": "3429317498ed6e4c35715aaa2e5c36ee23475423", "filename": "src/tools/clippy/tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr?ref=1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "patch": "@@ -66,11 +66,17 @@ error: lint `clippy::panic_params` has been removed: `this lint has been uplifte\n LL | #[warn(clippy::panic_params)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n+error: lint `clippy::unknown_clippy_lints` has been removed: `this lint has been integrated into the `unknown_lints` rustc lint`\n+  --> $DIR/deprecated.rs:12:8\n+   |\n+LL | #[warn(clippy::unknown_clippy_lints)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: lint `clippy::unstable_as_slice` has been removed: ``Vec::as_slice` has been stabilized in 1.7`\n   --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::unstable_as_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}, {"sha": "94a667e5898918d9362f7aa241ceb7f6fafd0471", "filename": "src/tools/clippy/tests/ui/unknown_clippy_lints.stderr", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.stderr?ref=1f0fc02cc8ab4e0d9dd3e06a6d46fcb72b2a026f", "patch": "@@ -1,52 +1,58 @@\n-error: unknown clippy lint: clippy::if_not_els\n+error: unknown lint: `clippy::All`\n+  --> $DIR/unknown_clippy_lints.rs:5:10\n+   |\n+LL | #![allow(clippy::All)]\n+   |          ^^^^^^^^^^^ help: did you mean: `clippy::all`\n+   |\n+   = note: `-D unknown-lints` implied by `-D warnings`\n+\n+error: unknown lint: `clippy::CMP_NAN`\n+  --> $DIR/unknown_clippy_lints.rs:6:9\n+   |\n+LL | #![warn(clippy::CMP_NAN)]\n+   |         ^^^^^^^^^^^^^^^ help: did you mean: `clippy::cmp_nan`\n+\n+error: unknown lint: `clippy::if_not_els`\n   --> $DIR/unknown_clippy_lints.rs:9:8\n    |\n LL | #[warn(clippy::if_not_els)]\n    |        ^^^^^^^^^^^^^^^^^^ help: did you mean: `clippy::if_not_else`\n-   |\n-   = note: `-D clippy::unknown-clippy-lints` implied by `-D warnings`\n \n-error: unknown clippy lint: clippy::UNNecsaRy_cAst\n+error: unknown lint: `clippy::UNNecsaRy_cAst`\n   --> $DIR/unknown_clippy_lints.rs:10:8\n    |\n LL | #[warn(clippy::UNNecsaRy_cAst)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: did you mean: `clippy::unnecessary_cast`\n \n-error: unknown clippy lint: clippy::useles_transute\n+error: unknown lint: `clippy::useles_transute`\n   --> $DIR/unknown_clippy_lints.rs:11:8\n    |\n LL | #[warn(clippy::useles_transute)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: did you mean: `clippy::useless_transmute`\n \n-error: unknown clippy lint: clippy::dead_cod\n+error: unknown lint: `clippy::dead_cod`\n   --> $DIR/unknown_clippy_lints.rs:13:8\n    |\n LL | #[warn(clippy::dead_cod)]\n    |        ^^^^^^^^^^^^^^^^ help: did you mean: `clippy::drop_copy`\n \n-error: unknown clippy lint: clippy::unused_colle\n+error: unknown lint: `clippy::unused_colle`\n   --> $DIR/unknown_clippy_lints.rs:15:8\n    |\n LL | #[warn(clippy::unused_colle)]\n    |        ^^^^^^^^^^^^^^^^^^^^ help: did you mean: `clippy::unused_self`\n \n-error: unknown clippy lint: clippy::const_static_lifetim\n+error: unknown lint: `clippy::const_static_lifetim`\n   --> $DIR/unknown_clippy_lints.rs:17:8\n    |\n LL | #[warn(clippy::const_static_lifetim)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: did you mean: `clippy::redundant_static_lifetimes`\n \n-error: unknown clippy lint: clippy::All\n+error: unknown lint: `clippy::All`\n   --> $DIR/unknown_clippy_lints.rs:5:10\n    |\n LL | #![allow(clippy::All)]\n-   |          ^^^^^^^^^^^ help: lowercase the lint name: `clippy::all`\n-\n-error: unknown clippy lint: clippy::CMP_NAN\n-  --> $DIR/unknown_clippy_lints.rs:6:9\n-   |\n-LL | #![warn(clippy::CMP_NAN)]\n-   |         ^^^^^^^^^^^^^^^ help: lowercase the lint name: `clippy::cmp_nan`\n+   |          ^^^^^^^^^^^ help: did you mean: `clippy::all`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}]}