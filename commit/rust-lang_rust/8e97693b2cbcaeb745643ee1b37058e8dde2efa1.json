{"sha": "8e97693b2cbcaeb745643ee1b37058e8dde2efa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOTc2OTNiMmNiY2FlYjc0NTY0M2VlMWIzNzA1OGU4ZGRlMmVmYTE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2017-04-25T17:43:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2017-04-27T16:18:26Z"}, "message": "Update release notes for 1.17", "tree": {"sha": "9ad9c28b58e06b74e7e2dcbb3523ed27c26ace3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ad9c28b58e06b74e7e2dcbb3523ed27c26ace3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e97693b2cbcaeb745643ee1b37058e8dde2efa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e97693b2cbcaeb745643ee1b37058e8dde2efa1", "html_url": "https://github.com/rust-lang/rust/commit/8e97693b2cbcaeb745643ee1b37058e8dde2efa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e97693b2cbcaeb745643ee1b37058e8dde2efa1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7e724a148fbc1ca46508d953302b697ff35af16", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e724a148fbc1ca46508d953302b697ff35af16", "html_url": "https://github.com/rust-lang/rust/commit/c7e724a148fbc1ca46508d953302b697ff35af16"}], "stats": {"total": 258, "additions": 258, "deletions": 0}, "files": [{"sha": "041eef4984f8eb75973b61d4a1bc5331ad172bfa", "filename": "RELEASES.md", "status": "modified", "additions": 258, "deletions": 0, "changes": 258, "blob_url": "https://github.com/rust-lang/rust/blob/8e97693b2cbcaeb745643ee1b37058e8dde2efa1/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/8e97693b2cbcaeb745643ee1b37058e8dde2efa1/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=8e97693b2cbcaeb745643ee1b37058e8dde2efa1", "patch": "@@ -1,3 +1,261 @@\n+Version 1.17.0 (2017-04-27)\n+===========================\n+\n+Language\n+--------\n+\n+* [The lifetime of statics and consts defaults to `'static`][39265]. [RFC 1623]\n+* [Fields of structs may be initialized without duplicating the field/variable\n+  names][39761]. [RFC 1682]\n+* [`Self` may be included in the `where` clause of `impls`][38864]. [RFC 1647]\n+* [When coercing to an unsized type lifetimes must be equal][40319]. That is,\n+  there is no subtyping between `T` and `U` when `T: Unsize<U>`. For example,\n+  coercing `&mut [&'a X; N]` to `&mut [&'b X]` requires `'a` be equal to\n+  `'b`. Soundness fix.\n+* [Values passed to the indexing operator, `[]`, automatically coerce][40166]\n+* [Static variables may contain references to other statics][40027]\n+\n+Compiler\n+--------\n+\n+* [Exit quickly on only `--emit dep-info`][40336]\n+* [Make `-C relocation-model` more correctly determine whether the linker\n+  creates a position-independent executable][40245]\n+* [Add `-C overflow-checks` to directly control whether integer overflow\n+  panics][40037]\n+* [The rustc type checker now checks items on demand instead of in a single\n+  in-order pass][40008]. This is mostly an internal refactoring in support of\n+  future work, including incremental type checking, but also resolves [RFC\n+  1647], allowing `Self` to appear in `impl` `where` clauses.\n+* [Optimize vtable loads][39995]\n+* [Turn off vectorization for Emscripten targets][39990]\n+* [Provide suggestions for unknown macros imported with `use`][39953]\n+* [Fix ICEs in path resolution][39939]\n+* [Strip exception handling code on Emscripten when `panic=abort`][39193]\n+* [Add clearer error message using `&str + &str`][39116]\n+\n+Stabilized APIs\n+---------------\n+\n+* [`Arc::into_raw`]\n+* [`Arc::from_raw`]\n+* [`Arc::ptr_eq`]\n+* [`Rc::into_raw`]\n+* [`Rc::from_raw`]\n+* [`Rc::ptr_eq`]\n+* [`Ordering::then`]\n+* [`Ordering::then_with`]\n+* [`BTreeMap::range`]\n+* [`BTreeMap::range_mut`]\n+* [`collections::Bound`]\n+* [`process::abort`]\n+* [`ptr::read_unaligned`]\n+* [`ptr::write_unaligned`]\n+* [`Result::expect_err`]\n+* [`Cell::swap`]\n+* [`Cell::replace`]\n+* [`Cell::into_inner`]\n+* [`Cell::take`]\n+\n+Libraries\n+---------\n+\n+* [`BTreeMap` and `BTreeSet` can iterate over ranges][27787]\n+* [`Cell` can store non-`Copy` types][39793]. [RFC 1651]\n+* [`String` implements `FromIterator<&char>`][40028]\n+* `Box` [implements][40009] a number of new conversions:\n+  `From<Box<str>> for String`,\n+  `From<Box<[T]>> for Vec<T>`,\n+  `From<Box<CStr>> for CString`,\n+  `From<Box<OsStr>> for OsString`,\n+  `From<Box<Path>> for PathBuf`,\n+  `Into<Box<str>> for String`,\n+  `Into<Box<[T]>> for Vec<T>`,\n+  `Into<Box<CStr>> for CString`,\n+  `Into<Box<OsStr>> for OsString`,\n+  `Into<Box<Path>> for PathBuf`,\n+  `Default for Box<str>`,\n+  `Default for Box<CStr>`,\n+  `Default for Box<OsStr>`,\n+  `From<&CStr> for Box<CStr>`,\n+  `From<&OsStr> for Box<OsStr>`,\n+  `From<&Path> for Box<Path>`\n+* [`ffi::FromBytesWithNulError` implements `Error` and `Display`][39960]\n+* [Specialize `PartialOrd<A> for [A] where A: Ord`][39642]\n+* [Slightly optimize `slice::sort`][39538]\n+* [Add `ToString` trait specialization for `Cow<'a, str>` and `String`][39440]\n+* [`Box<[T]>` implements `From<&[T]> where T: Copy`,\n+  `Box<str>` implements `From<&str>`][39438]\n+* [`IpAddr` implements `From` for various arrays. `SocketAddr` implements\n+  `From<(I, u16)> where I: Into<IpAddr>`][39372]\n+* [`format!` estimates the needed capacity before writing a string][39356]\n+* [Support unprivileged symlink creation in Windows][38921]\n+* [`PathBuf` implements `Default`][38764]\n+* [Implement `PartialEq<[A]>` for `VecDeque<A>`][38661]\n+* [`HashMap` resizes adaptively][38368] to guard against DOS attacks\n+  and poor hash functions.\n+\n+Cargo\n+-----\n+\n+* [Add `cargo check --all`][cargo/3731]\n+* [Add an option to ignore SSL revocation checking][cargo/3699]\n+* [Add `cargo run --package`][cargo/3691]\n+* [Add `required_features`][cargo/3667]\n+* [Assume `build.rs` is a build script][cargo/3664]\n+* [Find workspace via `workspace_root` link in containing member][cargo/3562]\n+\n+Misc\n+----\n+\n+* [Documentation is rendered with mdbook instead of the obsolete, in-tree\n+  `rustbook`][39633]\n+* [The \"Unstable Book\" documents nightly-only features][ubook]\n+* [Improve the style of the sidebar in rustdoc output][40265]\n+* [Configure build correctly on 64-bit CPU's with the armhf ABI][40261]\n+* [Fix MSP430 breakage due to `i128`][40257]\n+* [Preliminary Solaris/SPARCv9 support][39903]\n+* [`rustc` is linked statically on Windows MSVC targets][39837], allowing it to\n+  run without installing the MSVC runtime.\n+* [`rustdoc --test` includes file names in test names][39788]\n+* This release includes builds of `std` for `sparc64-unknown-linux-gnu`,\n+  `aarch64-unknown-linux-fuchsia`, and `x86_64-unknown-linux-fuchsia`.\n+* [Initial support for `aarch64-unknown-freebsd`][39491]\n+* [Initial support for `i686-unknown-netbsd`][39426]\n+* [This release no longer includes the old makefile build system][39431]. Rust\n+  is built with a custom build system, written in Rust, and with Cargo.\n+* [Add Debug implementations for libcollection structs][39002]\n+* [`TypeId` implements `PartialOrd` and `Ord`][38981]\n+* [`--test-threads=0` produces an error][38945]\n+* [`rustup` installs documentation by default][40526]\n+* [The Rust source includes NatVis visualizations][39843]. These can be used by\n+  WinDbg and Visual Studio to improve the debugging experience.\n+\n+Compatibility Notes\n+-------------------\n+\n+* [Rust 1.17 does not correctly detect the MSVC 2017 linker][38584]. As a\n+  workaround, either use MSVC 2015 or run vcvars.bat.\n+* [When coercing to an unsized type lifetimes must be equal][40319]. That is,\n+  disallow subtyping between `T` and `U` when `T: Unsize<U>`, e.g. coercing\n+  `&mut [&'a X; N]` to `&mut [&'b X]` requires `'a` be equal to `'b`. Soundness\n+  fix.\n+* [`format!` and `Display::to_string` panic if an underlying formatting\n+  implementation returns an error][40117]. Previously the error was silently\n+  ignored. It is incorrect for `write_fmt` to return an error when writing\n+  to a string.\n+* [In-tree crates are verified to be unstable][39851]. Previously, some minor\n+  crates were marked stable and could be accessed from the stable toolchain.\n+* [Rust git source no longer includes vendored crates][39728]. Those that need\n+  to build with vendored crates should build from release tarballs.\n+* [Fix inert attributes from `proc_macro_derives`][39572]\n+* [During crate resolution, rustc prefers a crate in the sysroot if two crates\n+  are otherwise identical][39518]. Unlikely to be encountered outside the Rust\n+  build system.\n+* [Fixed bugs around how type inference interacts with dead-code][39485]. The\n+  existing code generally ignores the type of dead-code unless a type-hint is\n+  provided; this can cause surprising inference interactions particularly around\n+  defaulting. The new code uniformly ignores the result type of dead-code.\n+* [Tuple-struct constructors with private fields are no longer visible][38932]\n+* [Lifetime parameters that do not appear in the arguments are now considered\n+  early-bound][38897], resolving a soundness bug (#[32330]). The\n+  `hr_lifetime_in_assoc_type` future-compatibility lint has been in effect since\n+  April of 2016.\n+* [rustdoc: fix doctests with non-feature crate attributes][38161]\n+* [Make transmuting from fn item types to pointer-sized types a hard\n+  error][34198]\n+\n+[27787]: https://github.com/rust-lang/rust/issues/27787\n+[32330]: https://github.com/rust-lang/rust/issues/32330\n+[34198]: https://github.com/rust-lang/rust/pull/34198\n+[38161]: https://github.com/rust-lang/rust/pull/38161\n+[38368]: https://github.com/rust-lang/rust/pull/38368\n+[38584]: https://github.com/rust-lang/rust/issues/38584\n+[38661]: https://github.com/rust-lang/rust/pull/38661\n+[38764]: https://github.com/rust-lang/rust/pull/38764\n+[38864]: https://github.com/rust-lang/rust/issues/38864\n+[38897]: https://github.com/rust-lang/rust/pull/38897\n+[38921]: https://github.com/rust-lang/rust/pull/38921\n+[38932]: https://github.com/rust-lang/rust/pull/38932\n+[38945]: https://github.com/rust-lang/rust/pull/38945\n+[38981]: https://github.com/rust-lang/rust/pull/38981\n+[39002]: https://github.com/rust-lang/rust/pull/39002\n+[39116]: https://github.com/rust-lang/rust/pull/39116\n+[39193]: https://github.com/rust-lang/rust/pull/39193\n+[39265]: https://github.com/rust-lang/rust/pull/39265\n+[39356]: https://github.com/rust-lang/rust/pull/39356\n+[39372]: https://github.com/rust-lang/rust/pull/39372\n+[39426]: https://github.com/rust-lang/rust/pull/39426\n+[39431]: https://github.com/rust-lang/rust/pull/39431\n+[39438]: https://github.com/rust-lang/rust/pull/39438\n+[39440]: https://github.com/rust-lang/rust/pull/39440\n+[39485]: https://github.com/rust-lang/rust/pull/39485\n+[39491]: https://github.com/rust-lang/rust/pull/39491\n+[39518]: https://github.com/rust-lang/rust/pull/39518\n+[39538]: https://github.com/rust-lang/rust/pull/39538\n+[39572]: https://github.com/rust-lang/rust/pull/39572\n+[39633]: https://github.com/rust-lang/rust/pull/39633\n+[39642]: https://github.com/rust-lang/rust/pull/39642\n+[39728]: https://github.com/rust-lang/rust/pull/39728\n+[39761]: https://github.com/rust-lang/rust/pull/39761\n+[39788]: https://github.com/rust-lang/rust/pull/39788\n+[39793]: https://github.com/rust-lang/rust/pull/39793\n+[39837]: https://github.com/rust-lang/rust/pull/39837\n+[39843]: https://github.com/rust-lang/rust/pull/39843\n+[39851]: https://github.com/rust-lang/rust/pull/39851\n+[39903]: https://github.com/rust-lang/rust/pull/39903\n+[39939]: https://github.com/rust-lang/rust/pull/39939\n+[39953]: https://github.com/rust-lang/rust/pull/39953\n+[39960]: https://github.com/rust-lang/rust/pull/39960\n+[39990]: https://github.com/rust-lang/rust/pull/39990\n+[39995]: https://github.com/rust-lang/rust/pull/39995\n+[40008]: https://github.com/rust-lang/rust/pull/40008\n+[40009]: https://github.com/rust-lang/rust/pull/40009\n+[40027]: https://github.com/rust-lang/rust/pull/40027\n+[40028]: https://github.com/rust-lang/rust/pull/40028\n+[40037]: https://github.com/rust-lang/rust/pull/40037\n+[40117]: https://github.com/rust-lang/rust/pull/40117\n+[40166]: https://github.com/rust-lang/rust/pull/40166\n+[40245]: https://github.com/rust-lang/rust/pull/40245\n+[40257]: https://github.com/rust-lang/rust/pull/40257\n+[40261]: https://github.com/rust-lang/rust/pull/40261\n+[40265]: https://github.com/rust-lang/rust/pull/40265\n+[40319]: https://github.com/rust-lang/rust/pull/40319\n+[40336]: https://github.com/rust-lang/rust/pull/40336\n+[40526]: https://github.com/rust-lang/rust/pull/40526\n+[RFC 1623]: https://github.com/rust-lang/rfcs/blob/master/text/1623-static.md\n+[RFC 1647]: https://github.com/rust-lang/rfcs/blob/master/text/1647-allow-self-in-where-clauses.md\n+[RFC 1651]: https://github.com/rust-lang/rfcs/blob/master/text/1651-movecell.md\n+[RFC 1682]: https://github.com/rust-lang/rfcs/blob/master/text/1682-field-init-shorthand.md\n+[`Arc::from_raw`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.from_raw\n+[`Arc::into_raw`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.into_raw\n+[`Arc::ptr_eq`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.ptr_eq\n+[`BTreeMap::range_mut`]: https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.range_mut\n+[`BTreeMap::range`]: https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.range\n+[`Cell::into_inner`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.into_inner\n+[`Cell::replace`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.replace\n+[`Cell::swap`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.swap\n+[`Cell::take`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.take\n+[`Ordering::then_with`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.then_with\n+[`Ordering::then`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.then\n+[`Rc::from_raw`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.from_raw\n+[`Rc::into_raw`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.into_raw\n+[`Rc::ptr_eq`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.ptr_eq\n+[`Result::expect_err`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.expect_err\n+[`collections::Bound`]: https://doc.rust-lang.org/std/collections/enum.Bound.html\n+[`process::abort`]: https://doc.rust-lang.org/std/process/fn.abort.html\n+[`ptr::read_unaligned`]: https://doc.rust-lang.org/std/ptr/fn.read_unaligned.html\n+[`ptr::write_unaligned`]: https://doc.rust-lang.org/std/ptr/fn.write_unaligned.html\n+[cargo/3562]: https://github.com/rust-lang/cargo/pull/3562\n+[cargo/3664]: https://github.com/rust-lang/cargo/pull/3664\n+[cargo/3667]: https://github.com/rust-lang/cargo/pull/3667\n+[cargo/3691]: https://github.com/rust-lang/cargo/pull/3691\n+[cargo/3699]: https://github.com/rust-lang/cargo/pull/3699\n+[cargo/3731]: https://github.com/rust-lang/cargo/pull/3731\n+[mdbook]: https://crates.io/crates/mdbook\n+[ubook]: https://doc.rust-lang.org/unstable-book/\n+\n+\n Version 1.16.0 (2017-03-16)\n ===========================\n "}]}