{"sha": "8a7dbde372388c0f4125f3aad0f697f8af138026", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhN2RiZGUzNzIzODhjMGY0MTI1ZjNhYWQwZjY5N2Y4YWYxMzgwMjY=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-20T23:49:27Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Check prctl argument types and fix the test.", "tree": {"sha": "4b7cb9385e62e66bbebeb8b3a2c05372562919ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b7cb9385e62e66bbebeb8b3a2c05372562919ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a7dbde372388c0f4125f3aad0f697f8af138026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7dbde372388c0f4125f3aad0f697f8af138026", "html_url": "https://github.com/rust-lang/rust/commit/8a7dbde372388c0f4125f3aad0f697f8af138026", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a7dbde372388c0f4125f3aad0f697f8af138026/comments", "author": null, "committer": null, "parents": [{"sha": "40e50bf58bd82482026bb1e1f0766bdf909fe9cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/40e50bf58bd82482026bb1e1f0766bdf909fe9cb", "html_url": "https://github.com/rust-lang/rust/commit/40e50bf58bd82482026bb1e1f0766bdf909fe9cb"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "65187326223cd4e474bc2cd960e7e67634887ad9", "filename": "src/shims/thread.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dbde372388c0f4125f3aad0f697f8af138026/src%2Fshims%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dbde372388c0f4125f3aad0f697f8af138026/src%2Fshims%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fthread.rs?ref=8a7dbde372388c0f4125f3aad0f697f8af138026", "patch": "@@ -92,12 +92,26 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         &mut self,\n         option: OpTy<'tcx, Tag>,\n         arg2: OpTy<'tcx, Tag>,\n-        _arg3: OpTy<'tcx, Tag>,\n-        _arg4: OpTy<'tcx, Tag>,\n-        _arg5: OpTy<'tcx, Tag>,\n+        arg3: OpTy<'tcx, Tag>,\n+        arg4: OpTy<'tcx, Tag>,\n+        arg5: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // prctl last 5 arguments are declared as variadic. Therefore, we need\n+        // to check their types manually.\n+        let c_long_size = this.libc_ty_layout(\"c_long\")?.size.bytes();\n+        let check_arg = |arg: OpTy<'tcx, Tag>| -> InterpResult<'tcx> {\n+            match this.read_scalar(arg)?.not_undef()? {\n+                Scalar::Raw { size, .. } if u64::from(size) == c_long_size => Ok(()),\n+                _ => throw_ub_format!(\"an argument of unsupported type was passed to prctl\"),\n+            }\n+        };\n+        check_arg(arg2)?;\n+        check_arg(arg3)?;\n+        check_arg(arg4)?;\n+        check_arg(arg5)?;\n+\n         let option = this.read_scalar(option)?.not_undef()?.to_i32()?;\n         if option == this.eval_libc_i32(\"PR_SET_NAME\")? {\n             let address = this.read_scalar(arg2)?.not_undef()?;"}, {"sha": "aa3f62f03d77a3819d5bf06f3907bc73bb7e26c1", "filename": "tests/run-pass/concurrency/libc_prctl_thread_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a7dbde372388c0f4125f3aad0f697f8af138026/tests%2Frun-pass%2Fconcurrency%2Flibc_prctl_thread_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7dbde372388c0f4125f3aad0f697f8af138026/tests%2Frun-pass%2Fconcurrency%2Flibc_prctl_thread_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Flibc_prctl_thread_name.rs?ref=8a7dbde372388c0f4125f3aad0f697f8af138026", "patch": "@@ -9,9 +9,9 @@ use std::ffi::CString;\n fn main() {\n     unsafe {\n         let thread_name = CString::new(\"hello\").expect(\"CString::new failed\");\n-        assert_eq!(libc::prctl(libc::PR_SET_NAME, thread_name.as_ptr() as u64, 0, 0, 0), 0);\n+        assert_eq!(libc::prctl(libc::PR_SET_NAME, thread_name.as_ptr() as libc::c_long, 0 as libc::c_long, 0 as libc::c_long, 0 as libc::c_long), 0);\n         let mut buf = [0; 6];\n-        assert_eq!(libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr() as u64, 0, 0, 0), 0);\n+        assert_eq!(libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr() as libc::c_long, 0 as libc::c_long, 0 as libc::c_long, 0 as libc::c_long), 0);\n         assert_eq!(thread_name.as_bytes_with_nul(), buf);\n     }\n }"}]}