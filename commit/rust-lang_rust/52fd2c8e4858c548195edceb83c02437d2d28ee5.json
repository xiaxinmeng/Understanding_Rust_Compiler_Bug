{"sha": "52fd2c8e4858c548195edceb83c02437d2d28ee5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZmQyYzhlNDg1OGM1NDgxOTVlZGNlYjgzYzAyNDM3ZDJkMjhlZTU=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-04-06T14:21:33Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-04-06T14:21:33Z"}, "message": "Fix unnecessary braces warnings", "tree": {"sha": "344f7bd6402f3bd846b437c1a8cfc6165881492d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/344f7bd6402f3bd846b437c1a8cfc6165881492d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52fd2c8e4858c548195edceb83c02437d2d28ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52fd2c8e4858c548195edceb83c02437d2d28ee5", "html_url": "https://github.com/rust-lang/rust/commit/52fd2c8e4858c548195edceb83c02437d2d28ee5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52fd2c8e4858c548195edceb83c02437d2d28ee5/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2603a9e628d304c8cb8fd08979e2f9c9afeac69e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2603a9e628d304c8cb8fd08979e2f9c9afeac69e", "html_url": "https://github.com/rust-lang/rust/commit/2603a9e628d304c8cb8fd08979e2f9c9afeac69e"}], "stats": {"total": 146, "additions": 73, "deletions": 73}, "files": [{"sha": "66724919b0ff18e4076966b748f48a2e99f59ac3", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=52fd2c8e4858c548195edceb83c02437d2d28ee5", "patch": "@@ -208,12 +208,12 @@ impl SourceToDefCtx<'_, '_> {\n         for container in src.cloned().ancestors_with_macros(self.db.upcast()).skip(1) {\n             let res: GenericDefId = match_ast! {\n                 match (container.value) {\n-                    ast::FnDef(it) => { self.fn_to_def(container.with_value(it))?.into() },\n-                    ast::StructDef(it) => { self.struct_to_def(container.with_value(it))?.into() },\n-                    ast::EnumDef(it) => { self.enum_to_def(container.with_value(it))?.into() },\n-                    ast::TraitDef(it) => { self.trait_to_def(container.with_value(it))?.into() },\n-                    ast::TypeAliasDef(it) => { self.type_alias_to_def(container.with_value(it))?.into() },\n-                    ast::ImplDef(it) => { self.impl_to_def(container.with_value(it))?.into() },\n+                    ast::FnDef(it) => self.fn_to_def(container.with_value(it))?.into(),\n+                    ast::StructDef(it) => self.struct_to_def(container.with_value(it))?.into(),\n+                    ast::EnumDef(it) => self.enum_to_def(container.with_value(it))?.into(),\n+                    ast::TraitDef(it) => self.trait_to_def(container.with_value(it))?.into(),\n+                    ast::TypeAliasDef(it) => self.type_alias_to_def(container.with_value(it))?.into(),\n+                    ast::ImplDef(it) => self.impl_to_def(container.with_value(it))?.into(),\n                     _ => continue,\n                 }\n             };\n@@ -226,9 +226,9 @@ impl SourceToDefCtx<'_, '_> {\n         for container in src.cloned().ancestors_with_macros(self.db.upcast()).skip(1) {\n             let res: DefWithBodyId = match_ast! {\n                 match (container.value) {\n-                    ast::ConstDef(it) => { self.const_to_def(container.with_value(it))?.into() },\n-                    ast::StaticDef(it) => { self.static_to_def(container.with_value(it))?.into() },\n-                    ast::FnDef(it) => { self.fn_to_def(container.with_value(it))?.into() },\n+                    ast::ConstDef(it) => self.const_to_def(container.with_value(it))?.into(),\n+                    ast::StaticDef(it) => self.static_to_def(container.with_value(it))?.into(),\n+                    ast::FnDef(it) => self.fn_to_def(container.with_value(it))?.into(),\n                     _ => continue,\n                 }\n             };"}, {"sha": "bb45b0f1da06388a543325d27202da2f368c6917", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=52fd2c8e4858c548195edceb83c02437d2d28ee5", "patch": "@@ -73,9 +73,9 @@ fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, mbe::ExpandError> {\n     let node = item.syntax();\n     let (name, params) = match_ast! {\n         match node {\n-            ast::StructDef(it) => { (it.name(), it.type_param_list()) },\n-            ast::EnumDef(it) => { (it.name(), it.type_param_list()) },\n-            ast::UnionDef(it) => { (it.name(), it.type_param_list()) },\n+            ast::StructDef(it) => (it.name(), it.type_param_list()),\n+            ast::EnumDef(it) => (it.name(), it.type_param_list()),\n+            ast::UnionDef(it) => (it.name(), it.type_param_list()),\n             _ => {\n                 debug!(\"unexpected node is {:?}\", node);\n                 return Err(mbe::ExpandError::ConversionError)"}, {"sha": "ca57eceff7889ab053f7d879e826c9b7d29c9b3f", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=52fd2c8e4858c548195edceb83c02437d2d28ee5", "patch": "@@ -109,16 +109,16 @@ impl FnCallNode {\n         syntax.ancestors().find_map(|node| {\n             match_ast! {\n                 match node {\n-                    ast::CallExpr(it) => { Some(FnCallNode::CallExpr(it)) },\n+                    ast::CallExpr(it) => Some(FnCallNode::CallExpr(it)),\n                     ast::MethodCallExpr(it) => {\n                         let arg_list = it.arg_list()?;\n                         if !syntax.text_range().is_subrange(&arg_list.syntax().text_range()) {\n                             return None;\n                         }\n                         Some(FnCallNode::MethodCallExpr(it))\n                     },\n-                    ast::MacroCall(it) => { Some(FnCallNode::MacroCallExpr(it)) },\n-                    _ => { None },\n+                    ast::MacroCall(it) => Some(FnCallNode::MacroCallExpr(it)),\n+                    _ => None,\n                 }\n             }\n         })\n@@ -127,10 +127,10 @@ impl FnCallNode {\n     pub(crate) fn with_node_exact(node: &SyntaxNode) -> Option<FnCallNode> {\n         match_ast! {\n             match node {\n-                ast::CallExpr(it) => { Some(FnCallNode::CallExpr(it)) },\n-                ast::MethodCallExpr(it) => { Some(FnCallNode::MethodCallExpr(it)) },\n-                ast::MacroCall(it) => { Some(FnCallNode::MacroCallExpr(it)) },\n-                _ => { None },\n+                ast::CallExpr(it) => Some(FnCallNode::CallExpr(it)),\n+                ast::MethodCallExpr(it) => Some(FnCallNode::MethodCallExpr(it)),\n+                ast::MacroCall(it) => Some(FnCallNode::MacroCallExpr(it)),\n+                _ => None,\n             }\n         }\n     }"}, {"sha": "62ae5ccb4673b5e5d092843d95d764ea05889ab7", "filename": "crates/ra_ide/src/completion/complete_fn_param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs?ref=52fd2c8e4858c548195edceb83c02437d2d28ee5", "patch": "@@ -18,8 +18,8 @@ pub(super) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n     for node in ctx.token.parent().ancestors() {\n         match_ast! {\n             match node {\n-                ast::SourceFile(it) => { process(it, &mut params) },\n-                ast::ItemList(it) => { process(it, &mut params) },\n+                ast::SourceFile(it) => process(it, &mut params),\n+                ast::ItemList(it) => process(it, &mut params),\n                 _ => (),\n             }\n         }"}, {"sha": "38f9c34e72b46cd95d87bd1254b1a45a565f5d1b", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=52fd2c8e4858c548195edceb83c02437d2d28ee5", "patch": "@@ -86,9 +86,9 @@ fn is_in_loop_body(leaf: &SyntaxToken) -> bool {\n         }\n         let loop_body = match_ast! {\n             match node {\n-                ast::ForExpr(it) => { it.loop_body() },\n-                ast::WhileExpr(it) => { it.loop_body() },\n-                ast::LoopExpr(it) => { it.loop_body() },\n+                ast::ForExpr(it) => it.loop_body(),\n+                ast::WhileExpr(it) => it.loop_body(),\n+                ast::LoopExpr(it) => it.loop_body(),\n                 _ => None,\n             }\n         };"}, {"sha": "e61846995a76961068c090247e57a0d22b6c15bb", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=52fd2c8e4858c548195edceb83c02437d2d28ee5", "patch": "@@ -399,17 +399,17 @@ pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option\n \n     match_ast! {\n         match node {\n-            ast::FnDef(it) => { it.doc_comment_text() },\n-            ast::StructDef(it) => { it.doc_comment_text() },\n-            ast::EnumDef(it) => { it.doc_comment_text() },\n-            ast::TraitDef(it) => { it.doc_comment_text() },\n-            ast::Module(it) => { it.doc_comment_text() },\n-            ast::TypeAliasDef(it) => { it.doc_comment_text() },\n-            ast::ConstDef(it) => { it.doc_comment_text() },\n-            ast::StaticDef(it) => { it.doc_comment_text() },\n-            ast::RecordFieldDef(it) => { it.doc_comment_text() },\n-            ast::EnumVariant(it) => { it.doc_comment_text() },\n-            ast::MacroCall(it) => { it.doc_comment_text() },\n+            ast::FnDef(it) => it.doc_comment_text(),\n+            ast::StructDef(it) => it.doc_comment_text(),\n+            ast::EnumDef(it) => it.doc_comment_text(),\n+            ast::TraitDef(it) => it.doc_comment_text(),\n+            ast::Module(it) => it.doc_comment_text(),\n+            ast::TypeAliasDef(it) => it.doc_comment_text(),\n+            ast::ConstDef(it) => it.doc_comment_text(),\n+            ast::StaticDef(it) => it.doc_comment_text(),\n+            ast::RecordFieldDef(it) => it.doc_comment_text(),\n+            ast::EnumVariant(it) => it.doc_comment_text(),\n+            ast::MacroCall(it) => it.doc_comment_text(),\n             _ => None,\n         }\n     }\n@@ -424,16 +424,16 @@ pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) ->\n \n     match_ast! {\n         match node {\n-            ast::FnDef(it) => { it.short_label() },\n-            ast::StructDef(it) => { it.short_label() },\n-            ast::EnumDef(it) => { it.short_label() },\n-            ast::TraitDef(it) => { it.short_label() },\n-            ast::Module(it) => { it.short_label() },\n-            ast::TypeAliasDef(it) => { it.short_label() },\n-            ast::ConstDef(it) => { it.short_label() },\n-            ast::StaticDef(it) => { it.short_label() },\n-            ast::RecordFieldDef(it) => { it.short_label() },\n-            ast::EnumVariant(it) => { it.short_label() },\n+            ast::FnDef(it) => it.short_label(),\n+            ast::StructDef(it) => it.short_label(),\n+            ast::EnumDef(it) => it.short_label(),\n+            ast::TraitDef(it) => it.short_label(),\n+            ast::Module(it) => it.short_label(),\n+            ast::TypeAliasDef(it) => it.short_label(),\n+            ast::ConstDef(it) => it.short_label(),\n+            ast::StaticDef(it) => it.short_label(),\n+            ast::RecordFieldDef(it) => it.short_label(),\n+            ast::EnumVariant(it) => it.short_label(),\n             _ => None,\n         }\n     }"}, {"sha": "7a774785c0f3ab5402aec7bfcf1a8eb275468b0e", "filename": "crates/ra_ide/src/display/structure.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs?ref=52fd2c8e4858c548195edceb83c02437d2d28ee5", "patch": "@@ -117,18 +117,18 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n \n                 decl_with_detail(it, Some(detail))\n             },\n-            ast::StructDef(it) => { decl(it) },\n-            ast::EnumDef(it) => { decl(it) },\n-            ast::EnumVariant(it) => { decl(it) },\n-            ast::TraitDef(it) => { decl(it) },\n-            ast::Module(it) => { decl(it) },\n+            ast::StructDef(it) => decl(it),\n+            ast::EnumDef(it) => decl(it),\n+            ast::EnumVariant(it) => decl(it),\n+            ast::TraitDef(it) => decl(it),\n+            ast::Module(it) => decl(it),\n             ast::TypeAliasDef(it) => {\n                 let ty = it.type_ref();\n                 decl_with_type_ref(it, ty)\n             },\n-            ast::RecordFieldDef(it) => { decl_with_ascription(it) },\n-            ast::ConstDef(it) => { decl_with_ascription(it) },\n-            ast::StaticDef(it) => { decl_with_ascription(it) },\n+            ast::RecordFieldDef(it) => decl_with_ascription(it),\n+            ast::ConstDef(it) => decl_with_ascription(it),\n+            ast::StaticDef(it) => decl_with_ascription(it),\n             ast::ImplDef(it) => {\n                 let target_type = it.target_type()?;\n                 let target_trait = it.target_trait();"}, {"sha": "bd2688df1b2d7df55a09a5940324d9c6d957f0ae", "filename": "crates/ra_ide/src/goto_type_definition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs?ref=52fd2c8e4858c548195edceb83c02437d2d28ee5", "patch": "@@ -18,9 +18,9 @@ pub(crate) fn goto_type_definition(\n     let (ty, node) = sema.ancestors_with_macros(token.parent()).find_map(|node| {\n         let ty = match_ast! {\n             match node {\n-                ast::Expr(expr) => { sema.type_of_expr(&expr)? },\n-                ast::Pat(pat) => { sema.type_of_pat(&pat)? },\n-                _ => { return None },\n+                ast::Expr(expr) => sema.type_of_expr(&expr)?,\n+                ast::Pat(pat) => sema.type_of_pat(&pat)?,\n+                _ => return None,\n             }\n         };\n "}, {"sha": "9433f3a2476212c48c9d4a77b688966df530192b", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=52fd2c8e4858c548195edceb83c02437d2d28ee5", "patch": "@@ -49,8 +49,8 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n fn runnable(sema: &Semantics<RootDatabase>, item: SyntaxNode) -> Option<Runnable> {\n     match_ast! {\n         match item {\n-            ast::FnDef(it) => { runnable_fn(sema, it) },\n-            ast::Module(it) => { runnable_mod(sema, it) },\n+            ast::FnDef(it) => runnable_fn(sema, it),\n+            ast::Module(it) => runnable_mod(sema, it),\n             _ => None,\n         }\n     }"}, {"sha": "1bf014149abb6458fc2144927601864329a7325b", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=52fd2c8e4858c548195edceb83c02437d2d28ee5", "patch": "@@ -286,7 +286,7 @@ fn reference_access(def: &Definition, name_ref: &ast::NameRef) -> Option<Referen\n                     }\n                     Some(ReferenceAccess::Read)\n                 },\n-                _ => {None}\n+                _ => None\n             }\n         }\n     });"}, {"sha": "d30458d8651ae1bb028cb1bba8d5625ff56cd61f", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=52fd2c8e4858c548195edceb83c02437d2d28ee5", "patch": "@@ -354,14 +354,14 @@ fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n     }\n     match_ast! {\n         match node {\n-            ast::FnDef(it) => { decl(it) },\n-            ast::StructDef(it) => { decl(it) },\n-            ast::EnumDef(it) => { decl(it) },\n-            ast::TraitDef(it) => { decl(it) },\n-            ast::Module(it) => { decl(it) },\n-            ast::TypeAliasDef(it) => { decl(it) },\n-            ast::ConstDef(it) => { decl(it) },\n-            ast::StaticDef(it) => { decl(it) },\n+            ast::FnDef(it) => decl(it),\n+            ast::StructDef(it) => decl(it),\n+            ast::EnumDef(it) => decl(it),\n+            ast::TraitDef(it) => decl(it),\n+            ast::Module(it) => decl(it),\n+            ast::TypeAliasDef(it) => decl(it),\n+            ast::ConstDef(it) => decl(it),\n+            ast::StaticDef(it) => decl(it),\n             ast::MacroCall(it) => {\n                 if it.is_macro_rules().is_some() {\n                     decl(it)"}, {"sha": "f85b3e61b475aaff54bbf4537571e3813031256d", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fd2c8e4858c548195edceb83c02437d2d28ee5/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=52fd2c8e4858c548195edceb83c02437d2d28ee5", "patch": "@@ -88,12 +88,12 @@ pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n     for node in root.descendants() {\n         match_ast! {\n             match node {\n-                ast::Literal(it) => { validate_literal(it, &mut errors) },\n-                ast::BlockExpr(it) => { block::validate_block_expr(it, &mut errors) },\n-                ast::FieldExpr(it) => { validate_numeric_name(it.name_ref(), &mut errors) },\n-                ast::RecordField(it) => { validate_numeric_name(it.name_ref(), &mut errors) },\n-                ast::Visibility(it) => { validate_visibility(it, &mut errors) },\n-                ast::RangeExpr(it) => { validate_range_expr(it, &mut errors) },\n+                ast::Literal(it) => validate_literal(it, &mut errors),\n+                ast::BlockExpr(it) => block::validate_block_expr(it, &mut errors),\n+                ast::FieldExpr(it) => validate_numeric_name(it.name_ref(), &mut errors),\n+                ast::RecordField(it) => validate_numeric_name(it.name_ref(), &mut errors),\n+                ast::Visibility(it) => validate_visibility(it, &mut errors),\n+                ast::RangeExpr(it) => validate_range_expr(it, &mut errors),\n                 _ => (),\n             }\n         }"}]}