{"sha": "43119d643857efc366bfca527ac2dadfc3f2e906", "node_id": "C_kwDOAAsO6NoAKDQzMTE5ZDY0Mzg1N2VmYzM2NmJmY2E1MjdhYzJkYWRmYzNmMmU5MDY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-25T02:08:38Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-22T02:17:39Z"}, "message": "Normalize opaques with escaping bound vars", "tree": {"sha": "1205b1b380dd1a9a0aa48ca782091773420b0f90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1205b1b380dd1a9a0aa48ca782091773420b0f90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43119d643857efc366bfca527ac2dadfc3f2e906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43119d643857efc366bfca527ac2dadfc3f2e906", "html_url": "https://github.com/rust-lang/rust/commit/43119d643857efc366bfca527ac2dadfc3f2e906", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43119d643857efc366bfca527ac2dadfc3f2e906/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a4fd12ebfd01d969a719e5c43c2e318441e827b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4fd12ebfd01d969a719e5c43c2e318441e827b", "html_url": "https://github.com/rust-lang/rust/commit/4a4fd12ebfd01d969a719e5c43c2e318441e827b"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "ed83847e880382961af541e1636219f91d4a2fd8", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43119d643857efc366bfca527ac2dadfc3f2e906/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43119d643857efc366bfca527ac2dadfc3f2e906/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=43119d643857efc366bfca527ac2dadfc3f2e906", "patch": "@@ -499,7 +499,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n+            ty::Opaque(def_id, substs) => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.super_fold_with(self),"}, {"sha": "77f83b3f542408809e05fda1847ea939f4d70706", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43119d643857efc366bfca527ac2dadfc3f2e906/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43119d643857efc366bfca527ac2dadfc3f2e906/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=43119d643857efc366bfca527ac2dadfc3f2e906", "patch": "@@ -198,7 +198,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n+            ty::Opaque(def_id, substs) => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.try_super_fold_with(self),"}]}