{"sha": "38197d8728622b19b6a00c00c8541d84ce87aab7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MTk3ZDg3Mjg2MjJiMTliNmEwMGMwMGM4NTQxZDg0Y2U4N2FhYjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-31T04:53:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-31T04:53:52Z"}, "message": "rustdoc: Write markdown for ifaces", "tree": {"sha": "159463cf5f2e16432dbe9f92a1d35776f37d1973", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/159463cf5f2e16432dbe9f92a1d35776f37d1973"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38197d8728622b19b6a00c00c8541d84ce87aab7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38197d8728622b19b6a00c00c8541d84ce87aab7", "html_url": "https://github.com/rust-lang/rust/commit/38197d8728622b19b6a00c00c8541d84ce87aab7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38197d8728622b19b6a00c00c8541d84ce87aab7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4aba18ae7490385a17adf6ad4d2240856bd895b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4aba18ae7490385a17adf6ad4d2240856bd895b", "html_url": "https://github.com/rust-lang/rust/commit/f4aba18ae7490385a17adf6ad4d2240856bd895b"}], "stats": {"total": 126, "additions": 120, "deletions": 6}, "files": [{"sha": "0833b5c7e74d3e9bef128deda7d2654247721bd3", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 120, "deletions": 6, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/38197d8728622b19b6a00c00c8541d84ce87aab7/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38197d8728622b19b6a00c00c8541d84ce87aab7/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=38197d8728622b19b6a00c00c8541d84ce87aab7", "patch": "@@ -137,6 +137,7 @@ fn write_mod_contents(\n           doc::consttag(constdoc) { write_const(ctxt, constdoc) }\n           doc::enumtag(enumdoc) { write_enum(ctxt, enumdoc) }\n           doc::restag(resdoc) { write_res(ctxt, resdoc) }\n+          doc::ifacetag(ifacedoc) { write_iface(ctxt, ifacedoc) }\n         }\n     }\n }\n@@ -158,12 +159,32 @@ fn write_fn(\n     doc: doc::fndoc\n ) {\n     write_header(ctxt, h2, #fmt(\"Function `%s`\", doc.name));\n-    write_sig(ctxt, doc.sig);\n-    write_brief(ctxt, doc.brief);\n-    write_desc(ctxt, doc.desc);\n-    write_args(ctxt, doc.args);\n-    write_return(ctxt, doc.return);\n-    write_failure(ctxt, doc.failure);\n+    write_fnlike(\n+        ctxt,\n+        doc.sig,\n+        doc.brief,\n+        doc.desc,\n+        doc.args,\n+        doc.return,\n+        doc.failure\n+    );\n+}\n+\n+fn write_fnlike(\n+    ctxt: ctxt,\n+    sig: option<str>,\n+    brief: option<str>,\n+    desc: option<str>,\n+    args: [doc::argdoc],\n+    return: doc::retdoc,\n+    failure: option<str>\n+) {\n+    write_sig(ctxt, sig);\n+    write_brief(ctxt, brief);\n+    write_desc(ctxt, desc);\n+    write_args(ctxt, args);\n+    write_return(ctxt, return);\n+    write_failure(ctxt, failure);\n }\n \n fn write_sig(ctxt: ctxt, sig: option<str>) {\n@@ -533,6 +554,99 @@ fn should_write_resource_args() {\n     assert str::contains(markdown, \"Arguments:\\n\\n* `a`: `bool` - b\");\n }\n \n+fn write_iface(ctxt: ctxt, doc: doc::ifacedoc) {\n+    write_header(ctxt, h2, #fmt(\"Interface `%s`\", doc.name));\n+    write_brief(ctxt, doc.brief);\n+    write_desc(ctxt, doc.desc);\n+    write_methods(ctxt, doc.methods);\n+}\n+\n+fn write_methods(ctxt: ctxt, docs: [doc::methoddoc]) {\n+    vec::iter(docs) {|doc| write_method(ctxt, doc) }\n+}\n+\n+fn write_method(ctxt: ctxt, doc: doc::methoddoc) {\n+    write_header(ctxt, h3, #fmt(\"Method `%s`\", doc.name));\n+    write_fnlike(\n+        ctxt,\n+        doc.sig,\n+        doc.brief,\n+        doc.desc,\n+        doc.args,\n+        doc.return,\n+        doc.failure\n+    );\n+}\n+\n+#[test]\n+fn should_write_iface_header() {\n+    let markdown = test::render(\"iface i { fn a(); }\");\n+    assert str::contains(markdown, \"## Interface `i`\");\n+}\n+\n+#[test]\n+fn should_write_iface_brief() {\n+    let markdown = test::render(\n+        \"#[doc(brief = \\\"brief\\\")] iface i { fn a(); }\");\n+    assert str::contains(markdown, \"brief\");\n+}\n+\n+#[test]\n+fn should_write_iface_desc() {\n+    let markdown = test::render(\n+        \"#[doc(desc = \\\"desc\\\")] iface i { fn a(); }\");\n+    assert str::contains(markdown, \"desc\");\n+}\n+\n+#[test]\n+fn should_write_iface_method_header() {\n+    let markdown = test::render(\n+        \"iface i { fn a(); }\");\n+    assert str::contains(markdown, \"### Method `a`\");\n+}\n+\n+#[test]\n+fn should_write_iface_method_signature() {\n+    let markdown = test::render(\n+        \"iface i { fn a(); }\");\n+    assert str::contains(markdown, \"\\n    fn a()\");\n+}\n+\n+#[test]\n+fn should_write_iface_method_argument_header() {\n+    let markdown = test::render(\n+        \"iface a { fn a(b: int); }\");\n+    assert str::contains(markdown, \"\\n\\nArguments:\\n\\n\");\n+}\n+\n+#[test]\n+fn should_write_iface_method_arguments() {\n+    let markdown = test::render(\n+        \"iface a { fn a(b: int); }\");\n+    assert str::contains(markdown, \"* `b`: `int`\\n\");\n+}\n+\n+#[test]\n+fn should_not_write_iface_method_arguments_if_none() {\n+    let markdown = test::render(\n+        \"iface a { fn a(); }\");\n+    assert !str::contains(markdown, \"Arguments\");\n+}\n+\n+#[test]\n+fn should_write_iface_method_return_info() {\n+    let markdown = test::render(\n+        \"iface a { fn a() -> int; }\");\n+    assert str::contains(markdown, \"Returns `int`\");\n+}\n+\n+#[test]\n+fn should_write_iface_method_failure_conditions() {\n+    let markdown = test::render(\n+        \"iface a { #[doc(failure = \\\"nuked\\\")] fn a(); }\");\n+    assert str::contains(markdown, \"Failure conditions: nuked\");\n+}\n+\n #[cfg(test)]\n mod test {\n     fn render(source: str) -> str {"}]}