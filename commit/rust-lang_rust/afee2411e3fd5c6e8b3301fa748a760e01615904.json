{"sha": "afee2411e3fd5c6e8b3301fa748a760e01615904", "node_id": "C_kwDOAAsO6NoAKGFmZWUyNDExZTNmZDVjNmU4YjMzMDFmYTc0OGE3NjBlMDE2MTU5MDQ", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-03-31T04:53:11Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-14T21:55:45Z"}, "message": "rustdoc-search: add support for nested generics", "tree": {"sha": "acfe106f4aa933d1a4a76f5e1b9104924cfcec25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acfe106f4aa933d1a4a76f5e1b9104924cfcec25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afee2411e3fd5c6e8b3301fa748a760e01615904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afee2411e3fd5c6e8b3301fa748a760e01615904", "html_url": "https://github.com/rust-lang/rust/commit/afee2411e3fd5c6e8b3301fa748a760e01615904", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afee2411e3fd5c6e8b3301fa748a760e01615904/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "276fa294809e914b1d04192392d256814aa5ce1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/276fa294809e914b1d04192392d256814aa5ce1a", "html_url": "https://github.com/rust-lang/rust/commit/276fa294809e914b1d04192392d256814aa5ce1a"}], "stats": {"total": 197, "additions": 184, "deletions": 13}, "files": [{"sha": "929dae81c8de4d3af9bfd7ce6c3eba6b46712567", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/afee2411e3fd5c6e8b3301fa748a760e01615904/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/afee2411e3fd5c6e8b3301fa748a760e01615904/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=afee2411e3fd5c6e8b3301fa748a760e01615904", "patch": "@@ -461,9 +461,7 @@ function initSearch(rawSearchIndex) {\n         if (parserState.pos < parserState.length &&\n             parserState.userQuery[parserState.pos] === \"<\"\n         ) {\n-            if (isInGenerics) {\n-                throw [\"Unexpected \", \"<\", \" after \", \"<\"];\n-            } else if (start >= end) {\n+            if (start >= end) {\n                 throw [\"Found generics without a path\"];\n             }\n             parserState.pos += 1;\n@@ -765,13 +763,10 @@ function initSearch(rawSearchIndex) {\n      * ident = *(ALPHA / DIGIT / \"_\")\n      * path = ident *(DOUBLE-COLON ident) [!]\n      * arg = [type-filter *WS COLON *WS] path [generics]\n-     * arg-without-generic = [type-filter *WS COLON *WS] path\n      * type-sep = COMMA/WS *(COMMA/WS)\n      * nonempty-arg-list = *(type-sep) arg *(type-sep arg) *(type-sep)\n-     * nonempty-arg-list-without-generics = *(type-sep) arg-without-generic\n-     *                                      *(type-sep arg-without-generic) *(type-sep)\n-     * generics = OPEN-ANGLE-BRACKET [ nonempty-arg-list-without-generics ] *(type-sep)\n-     *            CLOSE-ANGLE-BRACKET/EOF\n+     * generics = OPEN-ANGLE-BRACKET [ nonempty-arg-list ] *(type-sep)\n+     *            CLOSE-ANGLE-BRACKET\n      * return-args = RETURN-ARROW *(type-sep) nonempty-arg-list\n      *\n      * exact-search = [type-filter *WS COLON] [ RETURN-ARROW ] *WS QUOTE ident QUOTE [ generics ]\n@@ -1127,7 +1122,7 @@ function initSearch(rawSearchIndex) {\n                         currentEntryElems = [];\n                         elems.set(entry.name, currentEntryElems);\n                     }\n-                    currentEntryElems.push(entry.ty);\n+                    currentEntryElems.push(entry);\n                 }\n                 // We need to find the type that matches the most to remove it in order\n                 // to move forward.\n@@ -1136,8 +1131,12 @@ function initSearch(rawSearchIndex) {\n                         return false;\n                     }\n                     const matchElems = elems.get(generic.name);\n-                    const matchIdx = matchElems.findIndex(tmp_elem =>\n-                        typePassesFilter(generic.typeFilter, tmp_elem));\n+                    const matchIdx = matchElems.findIndex(tmp_elem => {\n+                        if (checkGenerics(tmp_elem, generic, 0, maxEditDistance) !== 0) {\n+                            return false;\n+                        }\n+                        return typePassesFilter(generic.typeFilter, tmp_elem.ty);\n+                    });\n                     if (matchIdx === -1) {\n                         return false;\n                     }"}, {"sha": "5a2266dbe3697293bba4c820ad47eeac5b5e81cb", "filename": "tests/rustdoc-js-std/parser-generics.js", "status": "modified", "additions": 122, "deletions": 2, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/afee2411e3fd5c6e8b3301fa748a760e01615904/tests%2Frustdoc-js-std%2Fparser-generics.js", "raw_url": "https://github.com/rust-lang/rust/raw/afee2411e3fd5c6e8b3301fa748a760e01615904/tests%2Frustdoc-js-std%2Fparser-generics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-generics.js?ref=afee2411e3fd5c6e8b3301fa748a760e01615904", "patch": "@@ -1,4 +1,11 @@\n-const QUERY = ['A<B<C<D>,  E>', 'p<> u8', '\"p\"<a>'];\n+const QUERY = [\n+    'A<B<C<D>,  E>',\n+    'p<> u8',\n+    '\"p\"<a>',\n+    'p<u<x>>',\n+    'p<u<x>, r>',\n+    'p<u<x, r>>',\n+];\n \n const PARSED = [\n     {\n@@ -7,7 +14,7 @@ const PARSED = [\n         original: 'A<B<C<D>,  E>',\n         returned: [],\n         userQuery: 'a<b<c<d>,  e>',\n-        error: 'Unexpected `<` after `<`',\n+        error: 'Unclosed `<`',\n     },\n     {\n         elems: [\n@@ -59,4 +66,117 @@ const PARSED = [\n         userQuery: '\"p\"<a>',\n         error: null,\n     },\n+    {\n+        elems: [\n+            {\n+                name: \"p\",\n+                fullPath: [\"p\"],\n+                pathWithoutLast: [],\n+                pathLast: \"p\",\n+                generics: [\n+                    {\n+                        name: \"u\",\n+                        fullPath: [\"u\"],\n+                        pathWithoutLast: [],\n+                        pathLast: \"u\",\n+                        generics: [\n+                            {\n+                                name: \"x\",\n+                                fullPath: [\"x\"],\n+                                pathWithoutLast: [],\n+                                pathLast: \"x\",\n+                                generics: [],\n+                            },\n+                        ],\n+                    },\n+                ],\n+                typeFilter: -1,\n+            },\n+        ],\n+        foundElems: 1,\n+        original: 'p<u<x>>',\n+        returned: [],\n+        userQuery: 'p<u<x>>',\n+        error: null,\n+    },\n+    {\n+        elems: [\n+            {\n+                name: \"p\",\n+                fullPath: [\"p\"],\n+                pathWithoutLast: [],\n+                pathLast: \"p\",\n+                generics: [\n+                    {\n+                        name: \"u\",\n+                        fullPath: [\"u\"],\n+                        pathWithoutLast: [],\n+                        pathLast: \"u\",\n+                        generics: [\n+                            {\n+                                name: \"x\",\n+                                fullPath: [\"x\"],\n+                                pathWithoutLast: [],\n+                                pathLast: \"x\",\n+                                generics: [],\n+                            },\n+                        ],\n+                    },\n+                    {\n+                        name: \"r\",\n+                        fullPath: [\"r\"],\n+                        pathWithoutLast: [],\n+                        pathLast: \"r\",\n+                        generics: [],\n+                    },\n+                ],\n+                typeFilter: -1,\n+            },\n+        ],\n+        foundElems: 1,\n+        original: 'p<u<x>, r>',\n+        returned: [],\n+        userQuery: 'p<u<x>, r>',\n+        error: null,\n+    },\n+    {\n+        elems: [\n+            {\n+                name: \"p\",\n+                fullPath: [\"p\"],\n+                pathWithoutLast: [],\n+                pathLast: \"p\",\n+                generics: [\n+                    {\n+                        name: \"u\",\n+                        fullPath: [\"u\"],\n+                        pathWithoutLast: [],\n+                        pathLast: \"u\",\n+                        generics: [\n+                            {\n+                                name: \"x\",\n+                                fullPath: [\"x\"],\n+                                pathWithoutLast: [],\n+                                pathLast: \"x\",\n+                                generics: [],\n+                            },\n+                            {\n+                                name: \"r\",\n+                                fullPath: [\"r\"],\n+                                pathWithoutLast: [],\n+                                pathLast: \"r\",\n+                                generics: [],\n+                            },\n+                        ],\n+                    },\n+                ],\n+                typeFilter: -1,\n+            },\n+        ],\n+        foundElems: 1,\n+        original: 'p<u<x, r>>',\n+        returned: [],\n+        userQuery: 'p<u<x, r>>',\n+        error: null,\n+    },\n ];"}, {"sha": "8701f2d49861a625f529b441eff4d24730f432c4", "filename": "tests/rustdoc-js/generics-nested.js", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/afee2411e3fd5c6e8b3301fa748a760e01615904/tests%2Frustdoc-js%2Fgenerics-nested.js", "raw_url": "https://github.com/rust-lang/rust/raw/afee2411e3fd5c6e8b3301fa748a760e01615904/tests%2Frustdoc-js%2Fgenerics-nested.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fgenerics-nested.js?ref=afee2411e3fd5c6e8b3301fa748a760e01615904", "patch": "@@ -0,0 +1,33 @@\n+// exact-check\n+\n+const QUERY = [\n+    '-> Out<First<Second>>',\n+    '-> Out<Second<First>>',\n+    '-> Out<First, Second>',\n+    '-> Out<Second, First>',\n+];\n+\n+const EXPECTED = [\n+    {\n+        // -> Out<First<Second>>\n+        'others': [\n+            { 'path': 'generics_nested', 'name': 'alef' },\n+        ],\n+    },\n+    {\n+        // -> Out<Second<First>>\n+        'others': [],\n+    },\n+    {\n+        // -> Out<First, Second>\n+        'others': [\n+            { 'path': 'generics_nested', 'name': 'bet' },\n+        ],\n+    },\n+    {\n+        // -> Out<Second, First>\n+        'others': [\n+            { 'path': 'generics_nested', 'name': 'bet' },\n+        ],\n+    },\n+];"}, {"sha": "5140422e38492ae06805e31f1b457f62ee16d581", "filename": "tests/rustdoc-js/generics-nested.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/afee2411e3fd5c6e8b3301fa748a760e01615904/tests%2Frustdoc-js%2Fgenerics-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afee2411e3fd5c6e8b3301fa748a760e01615904/tests%2Frustdoc-js%2Fgenerics-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fgenerics-nested.rs?ref=afee2411e3fd5c6e8b3301fa748a760e01615904", "patch": "@@ -0,0 +1,19 @@\n+pub struct Out<A, B = ()> {\n+    a: A,\n+    b: B,\n+}\n+\n+pub struct First<In = ()> {\n+    in_: In,\n+}\n+\n+pub struct Second;\n+\n+// Out<First<Second>>\n+pub fn alef() -> Out<First<Second>> {\n+    loop {}\n+}\n+\n+pub fn bet() -> Out<First, Second> {\n+    loop {}\n+}"}]}