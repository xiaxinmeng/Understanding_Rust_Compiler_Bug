{"sha": "f48dba142299733a3ea4a763d44c2028dc4de03a", "node_id": "C_kwDOAAsO6NoAKGY0OGRiYTE0MjI5OTczM2EzZWE0YTc2M2Q0NGMyMDI4ZGM0ZGUwM2E", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-11-12T16:25:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-12T16:25:03Z"}, "message": "Rollup merge of #104308 - scottmcm:no-more-validalign, r=thomcc\n\nRemove the old `ValidAlign` name\n\nSince it looks like there won't be any reverts needed in `Layout` for https://github.com/rust-lang/rust/issues/101899#issuecomment-1290805223, finish off this change that I'd left out of #102072.\n\nr? ``@thomcc``\ncc tracking issue #102070", "tree": {"sha": "2db7d5045f60cddab0a5cf5a8159a78696505cb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2db7d5045f60cddab0a5cf5a8159a78696505cb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f48dba142299733a3ea4a763d44c2028dc4de03a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjb8jfCRBK7hj4Ov3rIwAAc5MIAHkMWZ7bnY0bA4BOEVrf4VxF\nP110IotMi9LPoKybFOqGLGngSB4TNJAr9vaIxfzM3T0Dsv2V7fBesWW8Lu22zNOz\niia/8Pma6sqAFDVUineisZZYu2EhM2aKt76Dnm9qxDqZ0WLL2P3m103D5sTfgjFO\nLcwrf5dhZhh+10crm8ZxOsNdCB+gpk9i4a9AZqVZmu89xOsQC5KEPAoS6bSOS6cS\nXuKmCm/1csQgU6ojVgmSUtFyYHT7gdvefKENlQdmnC3m5pzLSTu0jc6m2OJL2zf7\nHvQY2MZ5RXIrXKxsG2m68HfaW/VHvg8wRxH0nXXcVIJfseekqJDIXQrhfoGxRMs=\n=jJOJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 2db7d5045f60cddab0a5cf5a8159a78696505cb0\nparent cd4b3ac379a862325d7eefeca6d7d460f344594e\nparent fed105381b7d9f6e8a3b7d55253f9f9a401e9643\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1668270303 +0100\ncommitter GitHub <noreply@github.com> 1668270303 +0100\n\nRollup merge of #104308 - scottmcm:no-more-validalign, r=thomcc\n\nRemove the old `ValidAlign` name\n\nSince it looks like there won't be any reverts needed in `Layout` for https://github.com/rust-lang/rust/issues/101899#issuecomment-1290805223, finish off this change that I'd left out of #102072.\n\nr? ``@thomcc``\ncc tracking issue #102070\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f48dba142299733a3ea4a763d44c2028dc4de03a", "html_url": "https://github.com/rust-lang/rust/commit/f48dba142299733a3ea4a763d44c2028dc4de03a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f48dba142299733a3ea4a763d44c2028dc4de03a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd4b3ac379a862325d7eefeca6d7d460f344594e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4b3ac379a862325d7eefeca6d7d460f344594e", "html_url": "https://github.com/rust-lang/rust/commit/cd4b3ac379a862325d7eefeca6d7d460f344594e"}, {"sha": "fed105381b7d9f6e8a3b7d55253f9f9a401e9643", "url": "https://api.github.com/repos/rust-lang/rust/commits/fed105381b7d9f6e8a3b7d55253f9f9a401e9643", "html_url": "https://github.com/rust-lang/rust/commit/fed105381b7d9f6e8a3b7d55253f9f9a401e9643"}], "stats": {"total": 33, "additions": 14, "deletions": 19}, "files": [{"sha": "f50d9a8e1bdf38cc94626ac35167613c0819dfe5", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f48dba142299733a3ea4a763d44c2028dc4de03a/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48dba142299733a3ea4a763d44c2028dc4de03a/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=f48dba142299733a3ea4a763d44c2028dc4de03a", "patch": "@@ -7,8 +7,8 @@\n use crate::cmp;\n use crate::error::Error;\n use crate::fmt;\n-use crate::mem::{self, ValidAlign};\n-use crate::ptr::NonNull;\n+use crate::mem;\n+use crate::ptr::{Alignment, NonNull};\n \n // While this function is used in one place and its implementation\n // could be inlined, the previous attempts to do so made rustc\n@@ -46,7 +46,7 @@ pub struct Layout {\n     //\n     // (However, we do not analogously require `align >= sizeof(void*)`,\n     //  even though that is *also* a requirement of `posix_memalign`.)\n-    align: ValidAlign,\n+    align: Alignment,\n }\n \n impl Layout {\n@@ -71,11 +71,11 @@ impl Layout {\n         }\n \n         // SAFETY: just checked that align is a power of two.\n-        Layout::from_size_valid_align(size, unsafe { ValidAlign::new_unchecked(align) })\n+        Layout::from_size_alignment(size, unsafe { Alignment::new_unchecked(align) })\n     }\n \n     #[inline(always)]\n-    const fn max_size_for_align(align: ValidAlign) -> usize {\n+    const fn max_size_for_align(align: Alignment) -> usize {\n         // (power-of-two implies align != 0.)\n \n         // Rounded up size is:\n@@ -95,7 +95,7 @@ impl Layout {\n \n     /// Internal helper constructor to skip revalidating alignment validity.\n     #[inline]\n-    const fn from_size_valid_align(size: usize, align: ValidAlign) -> Result<Self, LayoutError> {\n+    const fn from_size_alignment(size: usize, align: Alignment) -> Result<Self, LayoutError> {\n         if size > Self::max_size_for_align(align) {\n             return Err(LayoutError);\n         }\n@@ -117,7 +117,7 @@ impl Layout {\n     #[rustc_allow_const_fn_unstable(ptr_alignment_type)]\n     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n         // SAFETY: the caller is required to uphold the preconditions.\n-        unsafe { Layout { size, align: ValidAlign::new_unchecked(align) } }\n+        unsafe { Layout { size, align: Alignment::new_unchecked(align) } }\n     }\n \n     /// The minimum size in bytes for a memory block of this layout.\n@@ -321,7 +321,7 @@ impl Layout {\n         let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError)?;\n \n         // The safe constructor is called here to enforce the isize size limit.\n-        Layout::from_size_valid_align(alloc_size, self.align).map(|layout| (layout, padded_size))\n+        Layout::from_size_alignment(alloc_size, self.align).map(|layout| (layout, padded_size))\n     }\n \n     /// Creates a layout describing the record for `self` followed by\n@@ -379,7 +379,7 @@ impl Layout {\n         let new_size = offset.checked_add(next.size()).ok_or(LayoutError)?;\n \n         // The safe constructor is called here to enforce the isize size limit.\n-        let layout = Layout::from_size_valid_align(new_size, new_align)?;\n+        let layout = Layout::from_size_alignment(new_size, new_align)?;\n         Ok((layout, offset))\n     }\n \n@@ -400,7 +400,7 @@ impl Layout {\n     pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutError> {\n         let size = self.size().checked_mul(n).ok_or(LayoutError)?;\n         // The safe constructor is called here to enforce the isize size limit.\n-        Layout::from_size_valid_align(size, self.align)\n+        Layout::from_size_alignment(size, self.align)\n     }\n \n     /// Creates a layout describing the record for `self` followed by\n@@ -414,7 +414,7 @@ impl Layout {\n     pub fn extend_packed(&self, next: Self) -> Result<Self, LayoutError> {\n         let new_size = self.size().checked_add(next.size()).ok_or(LayoutError)?;\n         // The safe constructor is called here to enforce the isize size limit.\n-        Layout::from_size_valid_align(new_size, self.align)\n+        Layout::from_size_alignment(new_size, self.align)\n     }\n \n     /// Creates a layout describing the record for a `[T; n]`.\n@@ -425,10 +425,10 @@ impl Layout {\n     #[inline]\n     pub fn array<T>(n: usize) -> Result<Self, LayoutError> {\n         // Reduce the amount of code we need to monomorphize per `T`.\n-        return inner(mem::size_of::<T>(), ValidAlign::of::<T>(), n);\n+        return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);\n \n         #[inline]\n-        fn inner(element_size: usize, align: ValidAlign, n: usize) -> Result<Layout, LayoutError> {\n+        fn inner(element_size: usize, align: Alignment, n: usize) -> Result<Layout, LayoutError> {\n             // We need to check two things about the size:\n             //  - That the total size won't overflow a `usize`, and\n             //  - That the total size still fits in an `isize`.\n@@ -443,7 +443,7 @@ impl Layout {\n \n             // SAFETY: We just checked above that the `array_size` will not\n             // exceed `isize::MAX` even when rounded up to the alignment.\n-            // And `ValidAlign` guarantees it's a power of two.\n+            // And `Alignment` guarantees it's a power of two.\n             unsafe { Ok(Layout::from_size_align_unchecked(array_size, align.as_usize())) }\n         }\n     }"}, {"sha": "956a69eda8a57af9038d125b0ded989c79adb75b", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f48dba142299733a3ea4a763d44c2028dc4de03a/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48dba142299733a3ea4a763d44c2028dc4de03a/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=f48dba142299733a3ea4a763d44c2028dc4de03a", "patch": "@@ -21,11 +21,6 @@ mod maybe_uninit;\n #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n pub use maybe_uninit::MaybeUninit;\n \n-// FIXME: This is left here for now to avoid complications around pending reverts.\n-// Once <https://github.com/rust-lang/rust/issues/101899> is fully resolved,\n-// this should be removed and the references in `alloc::Layout` updated.\n-pub(crate) use ptr::Alignment as ValidAlign;\n-\n mod transmutability;\n #[unstable(feature = \"transmutability\", issue = \"99571\")]\n pub use transmutability::{Assume, BikeshedIntrinsicFrom};"}]}