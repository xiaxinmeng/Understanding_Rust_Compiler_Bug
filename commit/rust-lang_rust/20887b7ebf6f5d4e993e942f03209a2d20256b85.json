{"sha": "20887b7ebf6f5d4e993e942f03209a2d20256b85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwODg3YjdlYmY2ZjVkNGU5OTNlOTQyZjAzMjA5YTJkMjAyNTZiODU=", "commit": {"author": {"name": "Mara", "email": "m-ou.se@m-ou.se", "date": "2021-03-05T09:57:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-05T09:57:18Z"}, "message": "Rollup merge of #81939 - kper:fixing-81584-allocate-in-iter, r=davidtwco\n\nAdd suggestion `.collect()` for iterators in iterators\n\nCloses #81584\n\n```\nerror[E0515]: cannot return value referencing function parameter `y`\n --> main3.rs:4:38\n  |\n4 | ...                   .map(|y| y.iter().map(|x| x + 1))\n  |                                -^^^^^^^^^^^^^^^^^^^^^^\n  |                                |\n  |                                returns a value referencing data owned by the current function\n  |                                `y` is borrowed here\n  |                                help: Maybe use `.collect()` to allocate the iterator\n```\n\nAdded the suggestion: `help: Maybe use `.collect()` to allocate the iterator`", "tree": {"sha": "47c1c61b6c9866833741eb6f97bd9641b1a664c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47c1c61b6c9866833741eb6f97bd9641b1a664c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20887b7ebf6f5d4e993e942f03209a2d20256b85", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgQgB/CRBK7hj4Ov3rIwAAdHIIAFMIm6YGLiYYQMgbG4yLzROx\nvfxkpyKRFW83YTJGEByEcMKfUFlOG4p/WZn0lYhnMfiXJPxnWXaD4WAhHPOracwx\n9jkNftooh5ztCq5PYyXyeIT+sho+Mc42qiNZNzggXPVoTX1o+4VArf+Z5aFaqyzS\nXruH3ve9k78yv6ikAy6WS+PEcqhl6Jds6rsEq7k6iDq+WgMYhloK1cPcC2pofh8o\nqlay+IEBO8JiHZG+QkYwahgiURn+zghFWKV9wLg4pYeuM+swh08vJ1CWxG78D9W/\n4jNTjSSF4ZTEq9hElbUK9vAnQPnfUPxOu+rOcq7FN9wfoNwvy6eAkMd7hwElY0s=\n=K65V\n-----END PGP SIGNATURE-----\n", "payload": "tree 47c1c61b6c9866833741eb6f97bd9641b1a664c1\nparent 60138110d7b00c8c788526cad525942e732db6ca\nparent a3db47ab6c976137a26976d5c8060e7eadc05232\nauthor Mara <m-ou.se@m-ou.se> 1614938238 +0100\ncommitter GitHub <noreply@github.com> 1614938238 +0100\n\nRollup merge of #81939 - kper:fixing-81584-allocate-in-iter, r=davidtwco\n\nAdd suggestion `.collect()` for iterators in iterators\n\nCloses #81584\n\n```\nerror[E0515]: cannot return value referencing function parameter `y`\n --> main3.rs:4:38\n  |\n4 | ...                   .map(|y| y.iter().map(|x| x + 1))\n  |                                -^^^^^^^^^^^^^^^^^^^^^^\n  |                                |\n  |                                returns a value referencing data owned by the current function\n  |                                `y` is borrowed here\n  |                                help: Maybe use `.collect()` to allocate the iterator\n```\n\nAdded the suggestion: `help: Maybe use `.collect()` to allocate the iterator`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20887b7ebf6f5d4e993e942f03209a2d20256b85", "html_url": "https://github.com/rust-lang/rust/commit/20887b7ebf6f5d4e993e942f03209a2d20256b85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20887b7ebf6f5d4e993e942f03209a2d20256b85/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60138110d7b00c8c788526cad525942e732db6ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/60138110d7b00c8c788526cad525942e732db6ca", "html_url": "https://github.com/rust-lang/rust/commit/60138110d7b00c8c788526cad525942e732db6ca"}, {"sha": "a3db47ab6c976137a26976d5c8060e7eadc05232", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3db47ab6c976137a26976d5c8060e7eadc05232", "html_url": "https://github.com/rust-lang/rust/commit/a3db47ab6c976137a26976d5c8060e7eadc05232"}], "stats": {"total": 66, "additions": 62, "deletions": 4}, "files": [{"sha": "24b9408ffb657d758bcd1aec9157918818be1dcf", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/20887b7ebf6f5d4e993e942f03209a2d20256b85/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20887b7ebf6f5d4e993e942f03209a2d20256b85/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=20887b7ebf6f5d4e993e942f03209a2d20256b85", "patch": "@@ -10,16 +10,18 @@ use rustc_middle::mir::{\n     FakeReadCause, Local, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n     ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind, VarBindingForm,\n };\n-use rustc_middle::ty::{self, suggest_constraining_type_param, Instance, Ty};\n-use rustc_span::{source_map::DesugaringKind, symbol::sym, Span};\n+use rustc_middle::ty::{self, suggest_constraining_type_param, Ty, TypeFoldable};\n+use rustc_span::source_map::DesugaringKind;\n+use rustc_span::symbol::sym;\n+use rustc_span::Span;\n \n use crate::dataflow::drop_flag_effects;\n use crate::dataflow::indexes::{MoveOutIndex, MovePathIndex};\n use crate::util::borrowck_errors;\n \n use crate::borrow_check::{\n-    borrow_set::BorrowData, prefixes::IsPrefixOf, InitializationRequiringAction, MirBorrowckCtxt,\n-    PrefixSet, WriteKind,\n+    borrow_set::BorrowData, diagnostics::Instance, prefixes::IsPrefixOf,\n+    InitializationRequiringAction, MirBorrowckCtxt, PrefixSet, WriteKind,\n };\n \n use super::{\n@@ -1267,6 +1269,29 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         if return_span != borrow_span {\n             err.span_label(borrow_span, note);\n+\n+            let tcx = self.infcx.tcx;\n+            let ty_params = ty::List::empty();\n+\n+            let return_ty = self.regioncx.universal_regions().unnormalized_output_ty;\n+            let return_ty = tcx.erase_regions(return_ty);\n+\n+            // to avoid panics\n+            if !return_ty.has_infer_types() {\n+                if let Some(iter_trait) = tcx.get_diagnostic_item(sym::Iterator) {\n+                    if tcx.type_implements_trait((iter_trait, return_ty, ty_params, self.param_env))\n+                    {\n+                        if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(return_span) {\n+                            err.span_suggestion_hidden(\n+                                return_span,\n+                                \"use `.collect()` to allocate the iterator\",\n+                                format!(\"{}{}\", snippet, \".collect::<Vec<_>>()\"),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n         }\n \n         Some(err)"}, {"sha": "e179ce01c417a601f6c69814eeb7bc062609fd1b", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20887b7ebf6f5d4e993e942f03209a2d20256b85/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20887b7ebf6f5d4e993e942f03209a2d20256b85/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=20887b7ebf6f5d4e993e942f03209a2d20256b85", "patch": "@@ -93,6 +93,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n     message = \"`{Self}` is not an iterator\"\n )]\n #[doc(spotlight)]\n+#[rustc_diagnostic_item = \"Iterator\"]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub trait Iterator {\n     /// The type of the elements being iterated over."}, {"sha": "1cad59f1062c6cf8f01e6593bfebcd5b8d6c6a3b", "filename": "src/test/ui/issues/issue-81584.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20887b7ebf6f5d4e993e942f03209a2d20256b85/src%2Ftest%2Fui%2Fissues%2Fissue-81584.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/20887b7ebf6f5d4e993e942f03209a2d20256b85/src%2Ftest%2Fui%2Fissues%2Fissue-81584.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-81584.fixed?ref=20887b7ebf6f5d4e993e942f03209a2d20256b85", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+fn main() {\n+        let _ = vec![vec![0, 1], vec![2]]\n+            .into_iter()\n+            .map(|y| y.iter().map(|x| x + 1).collect::<Vec<_>>())\n+                  //~^ ERROR cannot return value referencing function parameter `y`\n+            .collect::<Vec<_>>();\n+}"}, {"sha": "452288db08bd8981f096c24e808184ff6b2a0173", "filename": "src/test/ui/issues/issue-81584.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20887b7ebf6f5d4e993e942f03209a2d20256b85/src%2Ftest%2Fui%2Fissues%2Fissue-81584.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20887b7ebf6f5d4e993e942f03209a2d20256b85/src%2Ftest%2Fui%2Fissues%2Fissue-81584.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-81584.rs?ref=20887b7ebf6f5d4e993e942f03209a2d20256b85", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+fn main() {\n+        let _ = vec![vec![0, 1], vec![2]]\n+            .into_iter()\n+            .map(|y| y.iter().map(|x| x + 1))\n+                  //~^ ERROR cannot return value referencing function parameter `y`\n+            .collect::<Vec<_>>();\n+}"}, {"sha": "d57f1b778df176db34d013dea24b35af61b12d18", "filename": "src/test/ui/issues/issue-81584.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20887b7ebf6f5d4e993e942f03209a2d20256b85/src%2Ftest%2Fui%2Fissues%2Fissue-81584.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20887b7ebf6f5d4e993e942f03209a2d20256b85/src%2Ftest%2Fui%2Fissues%2Fissue-81584.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-81584.stderr?ref=20887b7ebf6f5d4e993e942f03209a2d20256b85", "patch": "@@ -0,0 +1,14 @@\n+error[E0515]: cannot return value referencing function parameter `y`\n+  --> $DIR/issue-81584.rs:5:22\n+   |\n+LL |             .map(|y| y.iter().map(|x| x + 1))\n+   |                      -^^^^^^^^^^^^^^^^^^^^^^\n+   |                      |\n+   |                      returns a value referencing data owned by the current function\n+   |                      `y` is borrowed here\n+   |\n+   = help: use `.collect()` to allocate the iterator\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "ff15884bd445d1ca3ace54e8f2348db6f0d5314a", "filename": "src/test/ui/static/static-reference-to-fn-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20887b7ebf6f5d4e993e942f03209a2d20256b85/src%2Ftest%2Fui%2Fstatic%2Fstatic-reference-to-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20887b7ebf6f5d4e993e942f03209a2d20256b85/src%2Ftest%2Fui%2Fstatic%2Fstatic-reference-to-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-reference-to-fn-2.stderr?ref=20887b7ebf6f5d4e993e942f03209a2d20256b85", "patch": "@@ -40,6 +40,8 @@ LL | |         statefn: &id(state1 as StateMachineFunc)\n    | |                   ------------------------------ temporary value created here\n LL | |     }\n    | |_____^ returns a value referencing data owned by the current function\n+   |\n+   = help: use `.collect()` to allocate the iterator\n \n error: aborting due to 4 previous errors\n "}]}