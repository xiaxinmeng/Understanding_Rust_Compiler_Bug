{"sha": "6df89de68a21f538173fa833f5965ac4d5da7f23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZjg5ZGU2OGEyMWY1MzgxNzNmYTgzM2Y1OTY1YWM0ZDVkYTdmMjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-02T16:18:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-02T16:18:25Z"}, "message": "we don't need no whitelist", "tree": {"sha": "0df9a855529237eddee60e14d2ab16c9abd42b44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0df9a855529237eddee60e14d2ab16c9abd42b44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6df89de68a21f538173fa833f5965ac4d5da7f23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6df89de68a21f538173fa833f5965ac4d5da7f23", "html_url": "https://github.com/rust-lang/rust/commit/6df89de68a21f538173fa833f5965ac4d5da7f23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6df89de68a21f538173fa833f5965ac4d5da7f23/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9bb212caecf2a4070bb060d3d3546ea1b6dc02a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9bb212caecf2a4070bb060d3d3546ea1b6dc02a", "html_url": "https://github.com/rust-lang/rust/commit/c9bb212caecf2a4070bb060d3d3546ea1b6dc02a"}], "stats": {"total": 21, "additions": 2, "deletions": 19}, "files": [{"sha": "ec4e621a24a91b503f288cec09c734cba5ab12eb", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6df89de68a21f538173fa833f5965ac4d5da7f23/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df89de68a21f538173fa833f5965ac4d5da7f23/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6df89de68a21f538173fa833f5965ac4d5da7f23", "patch": "@@ -310,26 +310,9 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     const STATIC_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::MutStatic);\n \n+    #[inline(always)]\n     fn enforce_validity(ecx: &EvalContext<'a, 'mir, 'tcx, Self>) -> bool {\n-        if !ecx.machine.validate {\n-            return false;\n-        }\n-\n-        // Some functions are whitelisted until we figure out how to fix them.\n-        // We walk up the stack a few frames to also cover their callees.\n-        const WHITELIST: &[(&str, &str)] = &[\n-            // Uses mem::uninitialized\n-            (\"std::sys::windows::mutex::Mutex::\", \"\"),\n-        ];\n-        for frame in ecx.stack().iter()\n-            .rev().take(3)\n-        {\n-            let name = frame.instance.to_string();\n-            if WHITELIST.iter().any(|(prefix, suffix)| name.starts_with(prefix) && name.ends_with(suffix)) {\n-                return false;\n-            }\n-        }\n-        true\n+        ecx.machine.validate\n     }\n \n     /// Returns Ok() when the function was handled, fail otherwise"}]}