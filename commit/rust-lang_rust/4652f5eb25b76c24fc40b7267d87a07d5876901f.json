{"sha": "4652f5eb25b76c24fc40b7267d87a07d5876901f", "node_id": "C_kwDOAAsO6NoAKDQ2NTJmNWViMjViNzZjMjRmYzQwYjcyNjdkODdhMDdkNTg3NjkwMWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-25T12:00:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-25T12:00:37Z"}, "message": "Auto merge of #100865 - compiler-errors:parent-substs-still, r=cjgillot\n\nDon't drop parent substs when we have no generic parameters in `create_substs_for_ast_path`\n\nThis bug is being shadowed by an explicit check for `generics.params.is_empty()` in the only parent caller that could trigger it (`create_substs_for_associated_item`). I triggered it on another branch where I'm messing around with astconv stuff.\n\nAlso, the second commit simplifies `create_substs_for_associated_item`. Removing that explicit check I mentioned above^ and also the special case call to `Astconv::prohibit_generics` causes the UI test `src/test/ui/structs/struct-path-associated-type.stderr` to change, but I think that it's clearer now. The suggestion to remove the generics is actually useful.", "tree": {"sha": "0201d243a4e2fa272709a5183014de07ad5014e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0201d243a4e2fa272709a5183014de07ad5014e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4652f5eb25b76c24fc40b7267d87a07d5876901f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4652f5eb25b76c24fc40b7267d87a07d5876901f", "html_url": "https://github.com/rust-lang/rust/commit/4652f5eb25b76c24fc40b7267d87a07d5876901f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4652f5eb25b76c24fc40b7267d87a07d5876901f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f6010b08bd5e5dd0d03d4abf35a3acc4d2433a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6010b08bd5e5dd0d03d4abf35a3acc4d2433a2", "html_url": "https://github.com/rust-lang/rust/commit/6f6010b08bd5e5dd0d03d4abf35a3acc4d2433a2"}, {"sha": "102c61f11076d4cd71a117c358f4bdf93054d08e", "url": "https://api.github.com/repos/rust-lang/rust/commits/102c61f11076d4cd71a117c358f4bdf93054d08e", "html_url": "https://github.com/rust-lang/rust/commit/102c61f11076d4cd71a117c358f4bdf93054d08e"}], "stats": {"total": 67, "additions": 34, "deletions": 33}, "files": [{"sha": "b3cbb606c728d40c156fbaffc5d484d06b66bd11", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4652f5eb25b76c24fc40b7267d87a07d5876901f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4652f5eb25b76c24fc40b7267d87a07d5876901f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=4652f5eb25b76c24fc40b7267d87a07d5876901f", "patch": "@@ -365,7 +365,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // here and so associated type bindings will be handled regardless of whether there are any\n         // non-`Self` generic parameters.\n         if generics.params.is_empty() {\n-            return (tcx.intern_substs(&[]), arg_count);\n+            return (tcx.intern_substs(parent_substs), arg_count);\n         }\n \n         struct SubstsForAstPathCtxt<'a, 'tcx> {\n@@ -586,7 +586,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n     pub(crate) fn create_substs_for_associated_item(\n         &self,\n-        tcx: TyCtxt<'tcx>,\n         span: Span,\n         item_def_id: DefId,\n         item_segment: &hir::PathSegment<'_>,\n@@ -596,22 +595,16 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             \"create_substs_for_associated_item(span: {:?}, item_def_id: {:?}, item_segment: {:?}\",\n             span, item_def_id, item_segment\n         );\n-        if tcx.generics_of(item_def_id).params.is_empty() {\n-            self.prohibit_generics(slice::from_ref(item_segment).iter(), |_| {});\n-\n-            parent_substs\n-        } else {\n-            self.create_substs_for_ast_path(\n-                span,\n-                item_def_id,\n-                parent_substs,\n-                item_segment,\n-                item_segment.args(),\n-                item_segment.infer_args,\n-                None,\n-            )\n-            .0\n-        }\n+        self.create_substs_for_ast_path(\n+            span,\n+            item_def_id,\n+            parent_substs,\n+            item_segment,\n+            item_segment.args(),\n+            item_segment.infer_args,\n+            None,\n+        )\n+        .0\n     }\n \n     /// Instantiates the path for the given trait reference, assuming that it's\n@@ -1121,7 +1114,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             };\n \n             let substs_trait_ref_and_assoc_item = self.create_substs_for_associated_item(\n-                tcx,\n                 path_span,\n                 assoc_item.def_id,\n                 &item_segment,\n@@ -2100,7 +2092,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             self.ast_path_to_mono_trait_ref(span, trait_def_id, self_ty, trait_segment, false);\n \n         let item_substs = self.create_substs_for_associated_item(\n-            tcx,\n             span,\n             item_def_id,\n             item_segment,"}, {"sha": "d929a3e6548fbc89f47fcbc7d87c377f78740d68", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4652f5eb25b76c24fc40b7267d87a07d5876901f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4652f5eb25b76c24fc40b7267d87a07d5876901f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=4652f5eb25b76c24fc40b7267d87a07d5876901f", "patch": "@@ -276,7 +276,6 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n \n         let item_substs = <dyn AstConv<'tcx>>::create_substs_for_associated_item(\n             self,\n-            self.tcx,\n             span,\n             item_def_id,\n             item_segment,"}, {"sha": "e7deae2b557cddd29fdd58cef7ed5a4ac64feba7", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4652f5eb25b76c24fc40b7267d87a07d5876901f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4652f5eb25b76c24fc40b7267d87a07d5876901f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=4652f5eb25b76c24fc40b7267d87a07d5876901f", "patch": "@@ -430,7 +430,6 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n         if let Some(trait_ref) = poly_trait_ref.no_bound_vars() {\n             let item_substs = <dyn AstConv<'tcx>>::create_substs_for_associated_item(\n                 self,\n-                self.tcx,\n                 span,\n                 item_def_id,\n                 item_segment,"}, {"sha": "2dd7174a9bed8e93e6cd72ec52b592fdd62f944e", "filename": "src/test/ui/structs/struct-path-associated-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4652f5eb25b76c24fc40b7267d87a07d5876901f/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4652f5eb25b76c24fc40b7267d87a07d5876901f/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs?ref=4652f5eb25b76c24fc40b7267d87a07d5876901f", "patch": "@@ -13,7 +13,7 @@ fn f<T: Tr>() {\n     //~^ ERROR expected struct, variant or union type, found associated type\n     let z = T::A::<u8> {};\n     //~^ ERROR expected struct, variant or union type, found associated type\n-    //~| ERROR type arguments are not allowed on this type\n+    //~| ERROR this associated type takes 0 generic arguments but 1 generic argument was supplied\n     match S {\n         T::A {} => {}\n         //~^ ERROR expected struct, variant or union type, found associated type\n@@ -22,7 +22,7 @@ fn f<T: Tr>() {\n \n fn g<T: Tr<A = S>>() {\n     let s = T::A {}; // OK\n-    let z = T::A::<u8> {}; //~ ERROR type arguments are not allowed on this type\n+    let z = T::A::<u8> {}; //~ ERROR this associated type takes 0 generic arguments but 1 generic argument was supplied\n     match S {\n         T::A {} => {} // OK\n     }"}, {"sha": "abb445214f362f2d9515cc92195c0ed49870e472", "filename": "src/test/ui/structs/struct-path-associated-type.stderr", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4652f5eb25b76c24fc40b7267d87a07d5876901f/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4652f5eb25b76c24fc40b7267d87a07d5876901f/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr?ref=4652f5eb25b76c24fc40b7267d87a07d5876901f", "patch": "@@ -4,13 +4,19 @@ error[E0071]: expected struct, variant or union type, found associated type\n LL |     let s = T::A {};\n    |             ^^^^ not a struct\n \n-error[E0109]: type arguments are not allowed on this type\n-  --> $DIR/struct-path-associated-type.rs:14:20\n+error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/struct-path-associated-type.rs:14:16\n    |\n LL |     let z = T::A::<u8> {};\n-   |                -   ^^ type argument not allowed\n+   |                ^------ help: remove these generics\n    |                |\n-   |                not allowed on this type\n+   |                expected 0 generic arguments\n+   |\n+note: associated type defined here, with 0 generic parameters\n+  --> $DIR/struct-path-associated-type.rs:4:10\n+   |\n+LL |     type A;\n+   |          ^\n \n error[E0071]: expected struct, variant or union type, found associated type\n   --> $DIR/struct-path-associated-type.rs:14:13\n@@ -24,13 +30,19 @@ error[E0071]: expected struct, variant or union type, found associated type\n LL |         T::A {} => {}\n    |         ^^^^ not a struct\n \n-error[E0109]: type arguments are not allowed on this type\n-  --> $DIR/struct-path-associated-type.rs:25:20\n+error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/struct-path-associated-type.rs:25:16\n    |\n LL |     let z = T::A::<u8> {};\n-   |                -   ^^ type argument not allowed\n+   |                ^------ help: remove these generics\n    |                |\n-   |                not allowed on this type\n+   |                expected 0 generic arguments\n+   |\n+note: associated type defined here, with 0 generic parameters\n+  --> $DIR/struct-path-associated-type.rs:4:10\n+   |\n+LL |     type A;\n+   |          ^\n \n error[E0223]: ambiguous associated type\n   --> $DIR/struct-path-associated-type.rs:32:13\n@@ -52,5 +64,5 @@ LL |         S::A {} => {}\n \n error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0071, E0109, E0223.\n+Some errors have detailed explanations: E0071, E0107, E0223.\n For more information about an error, try `rustc --explain E0071`."}]}