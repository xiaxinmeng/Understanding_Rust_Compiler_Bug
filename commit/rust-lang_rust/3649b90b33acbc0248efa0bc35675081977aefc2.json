{"sha": "3649b90b33acbc0248efa0bc35675081977aefc2", "node_id": "C_kwDOAAsO6NoAKDM2NDliOTBiMzNhY2JjMDI0OGVmYTBiYzM1Njc1MDgxOTc3YWVmYzI", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-11-23T07:23:58Z"}, "committer": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-11-25T03:41:47Z"}, "message": "Simplify rendering of stylesheet links into HTML\n\nWe carry around a list of stylesheets that can carry two different types\nof thing:\n\n 1. Internal stylesheets specific to a page type (only for settings)\n 2. Themes\n\nIn this change I move the link generation for settings.css into\nsettings(), so Context.style_files is reserved just for themes.\n\nWe had two places where we extracted a base theme name from a list of\nStylePaths. I consolidated that code to be a method on StylePath.\n\nI moved generation of link tags for stylesheets into the page.html\ntemplate. With that change, I made the template responsible for special\nhandling of light.css (making it the default theme) and of the other\nthemes (marking them disabled). That allowed getting rid of the\n`disabled` field on StylePath.", "tree": {"sha": "a736d200ffcb68ae71bbb604e9edc38c3d4072f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a736d200ffcb68ae71bbb604e9edc38c3d4072f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3649b90b33acbc0248efa0bc35675081977aefc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3649b90b33acbc0248efa0bc35675081977aefc2", "html_url": "https://github.com/rust-lang/rust/commit/3649b90b33acbc0248efa0bc35675081977aefc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3649b90b33acbc0248efa0bc35675081977aefc2/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "html_url": "https://github.com/rust-lang/rust/commit/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2"}], "stats": {"total": 99, "additions": 49, "deletions": 50}, "files": [{"sha": "6523d0cf3fc8978e7aa8f4c1c45fcb4b9c91a0ef", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3649b90b33acbc0248efa0bc35675081977aefc2/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3649b90b33acbc0248efa0bc35675081977aefc2/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=3649b90b33acbc0248efa0bc35675081977aefc2", "patch": "@@ -556,7 +556,7 @@ impl Options {\n                     ))\n                     .emit();\n                 }\n-                themes.push(StylePath { path: theme_file, disabled: true });\n+                themes.push(StylePath { path: theme_file });\n             }\n         }\n "}, {"sha": "8eadbf63f33d91e02cf683b857676049a1e4b90c", "filename": "src/librustdoc/error.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3649b90b33acbc0248efa0bc35675081977aefc2/src%2Flibrustdoc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3649b90b33acbc0248efa0bc35675081977aefc2/src%2Flibrustdoc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ferror.rs?ref=3649b90b33acbc0248efa0bc35675081977aefc2", "patch": "@@ -39,7 +39,10 @@ macro_rules! try_none {\n         match $e {\n             Some(e) => e,\n             None => {\n-                return Err(Error::new(io::Error::new(io::ErrorKind::Other, \"not found\"), $file));\n+                return Err(<crate::error::Error as crate::docfs::PathError>::new(\n+                    io::Error::new(io::ErrorKind::Other, \"not found\"),\n+                    $file,\n+                ));\n             }\n         }\n     }};"}, {"sha": "03ad784ef77c5cdcfb3f0697348901dd71f49162", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3649b90b33acbc0248efa0bc35675081977aefc2/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3649b90b33acbc0248efa0bc35675081977aefc2/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=3649b90b33acbc0248efa0bc35675081977aefc2", "patch": "@@ -2,8 +2,8 @@ use std::path::PathBuf;\n \n use rustc_data_structures::fx::FxHashMap;\n \n+use crate::error::Error;\n use crate::externalfiles::ExternalHtml;\n-use crate::html::escape::Escape;\n use crate::html::format::{Buffer, Print};\n use crate::html::render::{ensure_trailing_slash, StylePath};\n \n@@ -50,7 +50,7 @@ struct PageLayout<'a> {\n     static_root_path: &'a str,\n     page: &'a Page<'a>,\n     layout: &'a Layout,\n-    style_files: String,\n+    themes: Vec<String>,\n     sidebar: String,\n     content: String,\n     krate_with_trailing_slash: String,\n@@ -66,26 +66,18 @@ crate fn render<T: Print, S: Print>(\n ) -> String {\n     let static_root_path = page.get_static_root_path();\n     let krate_with_trailing_slash = ensure_trailing_slash(&layout.krate).to_string();\n-    let style_files = style_files\n+    let themes = style_files\n         .iter()\n-        .filter_map(|t| t.path.file_stem().map(|stem| (stem, t.disabled)))\n-        .filter_map(|t| t.0.to_str().map(|path| (path, t.1)))\n-        .map(|t| {\n-            format!(\n-                r#\"<link rel=\"stylesheet\" type=\"text/css\" href=\"{}.css\" {} {}>\"#,\n-                Escape(&format!(\"{}{}{}\", static_root_path, t.0, page.resource_suffix)),\n-                if t.1 { \"disabled\" } else { \"\" },\n-                if t.0 == \"light\" { \"id=\\\"themeStyle\\\"\" } else { \"\" }\n-            )\n-        })\n-        .collect::<String>();\n+        .map(StylePath::basename)\n+        .collect::<Result<_, Error>>()\n+        .unwrap_or_default();\n     let content = Buffer::html().to_display(t); // Note: This must happen before making the sidebar.\n     let sidebar = Buffer::html().to_display(sidebar);\n     let teractx = tera::Context::from_serialize(PageLayout {\n         static_root_path,\n         page,\n         layout,\n-        style_files,\n+        themes,\n         sidebar,\n         content,\n         krate_with_trailing_slash,"}, {"sha": "365d959ad9f3b3dd962f4e962e1062f8a473559b", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3649b90b33acbc0248efa0bc35675081977aefc2/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3649b90b33acbc0248efa0bc35675081977aefc2/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=3649b90b33acbc0248efa0bc35675081977aefc2", "patch": "@@ -504,9 +504,9 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         // by the browser as the theme stylesheet. The theme system (hackily) works by\n         // changing the href to this stylesheet. All other themes are disabled to\n         // prevent rule conflicts\n-        scx.style_files.push(StylePath { path: PathBuf::from(\"light.css\"), disabled: false });\n-        scx.style_files.push(StylePath { path: PathBuf::from(\"dark.css\"), disabled: true });\n-        scx.style_files.push(StylePath { path: PathBuf::from(\"ayu.css\"), disabled: true });\n+        scx.style_files.push(StylePath { path: PathBuf::from(\"light.css\") });\n+        scx.style_files.push(StylePath { path: PathBuf::from(\"dark.css\") });\n+        scx.style_files.push(StylePath { path: PathBuf::from(\"ayu.css\") });\n \n         let dst = output;\n         scx.ensure_dir(&dst)?;\n@@ -596,9 +596,13 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         page.description = \"Settings of Rustdoc\";\n         page.root_path = \"./\";\n \n-        let mut style_files = self.shared.style_files.clone();\n         let sidebar = \"<h2 class=\\\"location\\\">Settings</h2><div class=\\\"sidebar-elems\\\"></div>\";\n-        style_files.push(StylePath { path: PathBuf::from(\"settings.css\"), disabled: false });\n+        let theme_names: Vec<String> = self\n+            .shared\n+            .style_files\n+            .iter()\n+            .map(StylePath::basename)\n+            .collect::<Result<_, Error>>()?;\n         let v = layout::render(\n             &self.shared.templates,\n             &self.shared.layout,\n@@ -607,9 +611,9 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             settings(\n                 self.shared.static_root_path.as_deref().unwrap_or(\"./\"),\n                 &self.shared.resource_suffix,\n-                &self.shared.style_files,\n+                theme_names,\n             )?,\n-            &style_files,\n+            &self.shared.style_files,\n         );\n         self.shared.fs.write(settings_file, v)?;\n         if let Some(ref redirections) = self.shared.redirections {"}, {"sha": "39061a119faecc9b7989b06a7686f1404b066ea7", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3649b90b33acbc0248efa0bc35675081977aefc2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3649b90b33acbc0248efa0bc35675081977aefc2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=3649b90b33acbc0248efa0bc35675081977aefc2", "patch": "@@ -64,7 +64,6 @@ use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n use crate::clean::{self, ItemId, RenderedLink, SelfTy};\n-use crate::docfs::PathError;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n@@ -173,8 +172,12 @@ impl Serialize for TypeWithKind {\n crate struct StylePath {\n     /// The path to the theme\n     crate path: PathBuf,\n-    /// What the `disabled` attribute should be set to in the HTML tag\n-    crate disabled: bool,\n+}\n+\n+impl StylePath {\n+    pub fn basename(&self) -> Result<String, Error> {\n+        Ok(try_none!(try_none!(self.path.file_stem(), &self.path).to_str(), &self.path).to_string())\n+    }\n }\n \n fn write_srclink(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer) {\n@@ -353,7 +356,7 @@ enum Setting {\n         js_data_name: &'static str,\n         description: &'static str,\n         default_value: &'static str,\n-        options: Vec<(String, String)>,\n+        options: Vec<String>,\n     },\n }\n \n@@ -393,10 +396,9 @@ impl Setting {\n                 options\n                     .iter()\n                     .map(|opt| format!(\n-                        \"<option value=\\\"{}\\\" {}>{}</option>\",\n-                        opt.0,\n-                        if opt.0 == default_value { \"selected\" } else { \"\" },\n-                        opt.1,\n+                        \"<option value=\\\"{name}\\\" {}>{name}</option>\",\n+                        if opt == default_value { \"selected\" } else { \"\" },\n+                        name = opt,\n                     ))\n                     .collect::<String>(),\n                 root_path,\n@@ -421,18 +423,7 @@ impl<T: Into<Setting>> From<(&'static str, Vec<T>)> for Setting {\n     }\n }\n \n-fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<String, Error> {\n-    let theme_names: Vec<(String, String)> = themes\n-        .iter()\n-        .map(|entry| {\n-            let theme =\n-                try_none!(try_none!(entry.path.file_stem(), &entry.path).to_str(), &entry.path)\n-                    .to_string();\n-\n-            Ok((theme.clone(), theme))\n-        })\n-        .collect::<Result<_, Error>>()?;\n-\n+fn settings(root_path: &str, suffix: &str, theme_names: Vec<String>) -> Result<String, Error> {\n     // (id, explanation, default value)\n     let settings: &[Setting] = &[\n         (\n@@ -469,10 +460,11 @@ fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<Strin\n             <span class=\\\"in-band\\\">Rustdoc settings</span>\\\n         </h1>\\\n         <div class=\\\"settings\\\">{}</div>\\\n-        <script src=\\\"{}settings{}.js\\\"></script>\",\n+        <link rel=\\\"stylesheet\\\" href=\\\"{root_path}settings{suffix}.css\\\">\\\n+        <script src=\\\"{root_path}settings{suffix}.js\\\"></script>\",\n         settings.iter().map(|s| s.display(root_path, suffix)).collect::<String>(),\n-        root_path,\n-        suffix\n+        root_path = root_path,\n+        suffix = suffix\n     ))\n }\n "}, {"sha": "6b0f8dad4c50196c4249bae168cb2fb990a034d8", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3649b90b33acbc0248efa0bc35675081977aefc2/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3649b90b33acbc0248efa0bc35675081977aefc2/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=3649b90b33acbc0248efa0bc35675081977aefc2", "patch": "@@ -228,12 +228,12 @@ pub(super) fn write_shared(\n     let mut themes: FxHashSet<String> = FxHashSet::default();\n \n     for entry in &cx.shared.style_files {\n-        let theme = try_none!(try_none!(entry.path.file_stem(), &entry.path).to_str(), &entry.path);\n+        let theme = entry.basename()?;\n         let extension =\n             try_none!(try_none!(entry.path.extension(), &entry.path).to_str(), &entry.path);\n \n         // Handle the official themes\n-        match theme {\n+        match theme.as_str() {\n             \"light\" => write_minify(\"light.css\", static_files::themes::LIGHT, cx, options)?,\n             \"dark\" => write_minify(\"dark.css\", static_files::themes::DARK, cx, options)?,\n             \"ayu\" => write_minify(\"ayu.css\", static_files::themes::AYU, cx, options)?,"}, {"sha": "863bf53eff3abe4b1caa8658cf7ca94bb2b53263", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3649b90b33acbc0248efa0bc35675081977aefc2/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/3649b90b33acbc0248efa0bc35675081977aefc2/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=3649b90b33acbc0248efa0bc35675081977aefc2", "patch": "@@ -12,7 +12,15 @@\n     <link rel=\"stylesheet\" type=\"text/css\" {# -#}\n           href=\"{{static_root_path | safe}}rustdoc{{page.resource_suffix}}.css\" {# -#}\n           id=\"mainThemeStyle\"> {#- -#}\n-    {{- style_files | safe -}}\n+    {%- for theme in themes -%}\n+        <link rel=\"stylesheet\" type=\"text/css\" {# -#}\n+        {%- if theme == \"light\" -%}\n+            id=\"themeStyle\"\n+        {%- else -%}\n+            disabled\n+        {%- endif -%}\n+            href=\"{{static_root_path | safe}}{{theme}}{{page.resource_suffix}}.css\"> {#- -#}\n+    {%- endfor -%}\n     <script id=\"default-settings\" {# -#}\n       {% for k, v in layout.default_settings %}\n         data-{{k}}=\"{{v}}\""}]}