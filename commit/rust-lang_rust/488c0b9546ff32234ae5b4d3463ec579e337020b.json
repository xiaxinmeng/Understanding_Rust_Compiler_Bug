{"sha": "488c0b9546ff32234ae5b4d3463ec579e337020b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4OGMwYjk1NDZmZjMyMjM0YWU1YjRkMzQ2M2VjNTc5ZTMzNzAyMGI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-21T20:05:50Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-21T20:25:26Z"}, "message": "Test and source fallout", "tree": {"sha": "879a0336a9b4d461ac13464fb3f7ea4fe4568f35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/879a0336a9b4d461ac13464fb3f7ea4fe4568f35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/488c0b9546ff32234ae5b4d3463ec579e337020b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/488c0b9546ff32234ae5b4d3463ec579e337020b", "html_url": "https://github.com/rust-lang/rust/commit/488c0b9546ff32234ae5b4d3463ec579e337020b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/488c0b9546ff32234ae5b4d3463ec579e337020b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb31a72315806e2a71dab0874132b988d303e60", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb31a72315806e2a71dab0874132b988d303e60", "html_url": "https://github.com/rust-lang/rust/commit/4bb31a72315806e2a71dab0874132b988d303e60"}], "stats": {"total": 224, "additions": 130, "deletions": 94}, "files": [{"sha": "e97d0219aad8db8464b0800ba785895b818d2d11", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/488c0b9546ff32234ae5b4d3463ec579e337020b/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488c0b9546ff32234ae5b4d3463ec579e337020b/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=488c0b9546ff32234ae5b4d3463ec579e337020b", "patch": "@@ -219,7 +219,10 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n \n             Ok(run(Input::Text(input), &config))\n         }\n-        Operation::Format { mut files, config_path } => {\n+        Operation::Format {\n+            mut files,\n+            config_path,\n+        } => {\n             let options = try!(CliOptions::from_matches(&matches));\n \n             // Add any additional files that were specified via `--file-lines`."}, {"sha": "4eda33d9647fcccb8ff2abd29465ce5fba462591", "filename": "src/chains.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/488c0b9546ff32234ae5b4d3463ec579e337020b/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488c0b9546ff32234ae5b4d3463ec579e337020b/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=488c0b9546ff32234ae5b4d3463ec579e337020b", "patch": "@@ -130,7 +130,10 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n                                  .checked_sub(nested_shape.indent.width() +\n                                               nested_shape.offset));\n \n-    let other_child_shape = Shape { width: max_width, ..nested_shape };\n+    let other_child_shape = Shape {\n+        width: max_width,\n+        ..nested_shape\n+    };\n     let first_child_shape = if extend {\n         let mut shape = try_opt!(parent_shape.shrink_left(last_line_width(&parent_rewrite)));\n         match context.config.chain_indent {"}, {"sha": "1df0f2a96d0c4f0be7d5b56a0e9ce5044e45ab98", "filename": "src/expr.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/488c0b9546ff32234ae5b4d3463ec579e337020b/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488c0b9546ff32234ae5b4d3463ec579e337020b/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=488c0b9546ff32234ae5b4d3463ec579e337020b", "patch": "@@ -19,8 +19,8 @@ use {Indent, Shape, Spanned};\n use codemap::SpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n-            DefinitiveListTactic, definitive_tactic, ListItem, format_item_list,\n-            struct_lit_shape, struct_lit_tactic, shape_for_tactic, struct_lit_formatting};\n+            DefinitiveListTactic, definitive_tactic, ListItem, format_item_list, struct_lit_shape,\n+            struct_lit_tactic, shape_for_tactic, struct_lit_formatting};\n use string::{StringFormat, rewrite_string};\n use utils::{extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n             semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr, stmt_expr};\n@@ -308,7 +308,11 @@ pub fn rewrite_pair<LHS, RHS>(lhs: &LHS,\n         .visual_indent(prefix.len());\n \n     let rhs_result = try_opt!(rhs.rewrite(context, rhs_shape));\n-    let lhs_result = try_opt!(lhs.rewrite(context, Shape { width: lhs_budget, ..shape }));\n+    let lhs_result = try_opt!(lhs.rewrite(context,\n+                                          Shape {\n+                                              width: lhs_budget,\n+                                              ..shape\n+                                          }));\n     Some(format!(\"{}{}{}\\n{}{}{}\",\n                  prefix,\n                  lhs_result,\n@@ -658,9 +662,7 @@ impl Rewrite for ast::Block {\n impl Rewrite for ast::Stmt {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         let result = match self.node {\n-            ast::StmtKind::Local(ref local) => {\n-                local.rewrite(context, shape)\n-            }\n+            ast::StmtKind::Local(ref local) => local.rewrite(context, shape),\n             ast::StmtKind::Expr(ref ex) |\n             ast::StmtKind::Semi(ref ex) => {\n                 let suffix = if semicolon_for_stmt(self) { \";\" } else { \"\" };\n@@ -893,7 +895,10 @@ impl<'a> Rewrite for ControlFlow<'a> {\n             block_width\n         };\n \n-        let block_shape = Shape { width: block_width, ..shape };\n+        let block_shape = Shape {\n+            width: block_width,\n+            ..shape\n+        };\n         let block_str = try_opt!(self.block.rewrite(context, block_shape));\n \n         let cond_span = if let Some(cond) = self.cond {\n@@ -975,7 +980,10 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                     last_in_chain = true;\n                     // When rewriting a block, the width is only used for single line\n                     // blocks, passing 1 lets us avoid that.\n-                    let else_shape = Shape { width: min(1, shape.width), ..shape };\n+                    let else_shape = Shape {\n+                        width: min(1, shape.width),\n+                        ..shape\n+                    };\n                     else_block.rewrite(context, else_shape)\n                 }\n             };\n@@ -1175,7 +1183,11 @@ fn rewrite_match(context: &RewriteContext,\n }\n \n fn arm_start_pos(arm: &ast::Arm) -> BytePos {\n-    let &ast::Arm { ref attrs, ref pats, .. } = arm;\n+    let &ast::Arm {\n+             ref attrs,\n+             ref pats,\n+             ..\n+         } = arm;\n     if !attrs.is_empty() {\n         return attrs[0].span.lo;\n     }\n@@ -1205,7 +1217,12 @@ fn arm_comma(config: &Config, body: &ast::Expr) -> &'static str {\n impl Rewrite for ast::Arm {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         debug!(\"Arm::rewrite {:?} {:?}\", self, shape);\n-        let &ast::Arm { ref attrs, ref pats, ref guard, ref body } = self;\n+        let &ast::Arm {\n+                 ref attrs,\n+                 ref pats,\n+                 ref guard,\n+                 ref body,\n+             } = self;\n \n         // FIXME this is all a bit grotty, would be nice to abstract out the\n         // treatment of attributes.\n@@ -1250,7 +1267,10 @@ impl Rewrite for ast::Arm {\n         let pats_str = try_opt!(write_list(items, &fmt));\n \n         let guard_shape = if pats_str.contains('\\n') {\n-            Shape { width: context.config.max_width - shape.indent.width(), ..shape }\n+            Shape {\n+                width: context.config.max_width - shape.indent.width(),\n+                ..shape\n+            }\n         } else {\n             shape\n         };\n@@ -1598,7 +1618,10 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n                              |item| item.span.hi,\n                              |item| {\n                                  item.rewrite(context,\n-                                              Shape { width: remaining_width, ..nested_shape })\n+                                              Shape {\n+                                                  width: remaining_width,\n+                                                  ..nested_shape\n+                                              })\n                              },\n                              span.lo,\n                              span.hi);"}, {"sha": "4b8f4e9762a4d14e4a46def3eeccb3945e75dcff", "filename": "src/imports.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/488c0b9546ff32234ae5b4d3463ec579e337020b/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488c0b9546ff32234ae5b4d3463ec579e337020b/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=488c0b9546ff32234ae5b4d3463ec579e337020b", "patch": "@@ -193,13 +193,13 @@ impl<'a> FmtVisitor<'a> {\n         // before the current `self.last_pos`\n         let pos_before_first_use_item = use_items.first()\n             .map(|p_i| {\n-                cmp::max(self.last_pos,\n-                         p_i.attrs\n-                             .iter()\n-                             .map(|attr| attr.span.lo)\n-                             .min()\n-                             .unwrap_or(p_i.span.lo))\n-            })\n+                     cmp::max(self.last_pos,\n+                              p_i.attrs\n+                                  .iter()\n+                                  .map(|attr| attr.span.lo)\n+                                  .min()\n+                                  .unwrap_or(p_i.span.lo))\n+                 })\n             .unwrap_or(self.last_pos);\n         // Construct a list of pairs, each containing a `use` item and the start of span before\n         // that `use` item."}, {"sha": "4819816c4ebee705fcee419d0a18888c85eb4748", "filename": "src/issues.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/488c0b9546ff32234ae5b4d3463ec579e337020b/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488c0b9546ff32234ae5b4d3463ec579e337020b/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=488c0b9546ff32234ae5b4d3463ec579e337020b", "patch": "@@ -98,7 +98,10 @@ impl BadIssueSeeker {\n     // unnumbered TO-DO or FIX-ME.\n     pub fn inspect(&mut self, c: char) -> Option<Issue> {\n         match self.state {\n-            Seeking::Issue { todo_idx, fixme_idx } => {\n+            Seeking::Issue {\n+                todo_idx,\n+                fixme_idx,\n+            } => {\n                 self.state = self.inspect_issue(c, todo_idx, fixme_idx);\n             }\n             Seeking::Number { issue, part } => {"}, {"sha": "f51186258220af5a29f507c0520e09409ab701d5", "filename": "src/items.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/488c0b9546ff32234ae5b4d3463ec579e337020b/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488c0b9546ff32234ae5b4d3463ec579e337020b/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=488c0b9546ff32234ae5b4d3463ec579e337020b", "patch": "@@ -73,10 +73,7 @@ impl Rewrite for ast::Local {\n             //let budget = try_opt!(shape.width.checked_sub(shape.indent.block_only().width() + 1));\n             let nested_shape = try_opt!(shape.sub_width(1));\n \n-            result = try_opt!(rewrite_assign_rhs(&context,\n-                                                 result,\n-                                                 ex,\n-                                                 nested_shape));\n+            result = try_opt!(rewrite_assign_rhs(&context, result, ex, nested_shape));\n         }\n \n         result.push(';');\n@@ -932,13 +929,13 @@ fn format_struct_struct(context: &RewriteContext,\n                      fields.iter(),\n                      \"}\",\n                      |field| {\n-            // Include attributes and doc comments, if present\n-            if !field.attrs.is_empty() {\n-                field.attrs[0].span.lo\n-            } else {\n-                field.span.lo\n-            }\n-        },\n+                         // Include attributes and doc comments, if present\n+                         if !field.attrs.is_empty() {\n+                             field.attrs[0].span.lo\n+                         } else {\n+                             field.span.lo\n+                         }\n+                     },\n                      |field| field.ty.span.hi,\n                      |field| field.rewrite(context, Shape::legacy(item_budget, item_indent)),\n                      context.codemap.span_after(span, \"{\"),\n@@ -1035,13 +1032,13 @@ fn format_tuple_struct(context: &RewriteContext,\n                      fields.iter(),\n                      \")\",\n                      |field| {\n-            // Include attributes and doc comments, if present\n-            if !field.attrs.is_empty() {\n-                field.attrs[0].span.lo\n-            } else {\n-                field.span.lo\n-            }\n-        },\n+                         // Include attributes and doc comments, if present\n+                         if !field.attrs.is_empty() {\n+                             field.attrs[0].span.lo\n+                         } else {\n+                             field.span.lo\n+                         }\n+                     },\n                      |field| field.ty.span.hi,\n                      |field| field.rewrite(context, Shape::legacy(item_budget, item_indent)),\n                      context.codemap.span_after(span, \"(\"),\n@@ -1920,13 +1917,13 @@ fn rewrite_generics(context: &RewriteContext,\n \n     // Extract comments between generics.\n     let lt_spans = lifetimes.iter().map(|l| {\n-        let hi = if l.bounds.is_empty() {\n-            l.lifetime.span.hi\n-        } else {\n-            l.bounds[l.bounds.len() - 1].span.hi\n-        };\n-        mk_sp(l.lifetime.span.lo, hi)\n-    });\n+                                            let hi = if l.bounds.is_empty() {\n+                                                l.lifetime.span.hi\n+                                            } else {\n+                                                l.bounds[l.bounds.len() - 1].span.hi\n+                                            };\n+                                            mk_sp(l.lifetime.span.lo, hi)\n+                                        });\n     let ty_spans = tys.iter().map(span_for_ty_param);\n \n     let items = itemize_list(context.codemap,"}, {"sha": "ba6852dbe848fe5cf3d07258ad36fe5a47fed5ef", "filename": "src/types.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/488c0b9546ff32234ae5b4d3463ec579e337020b/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488c0b9546ff32234ae5b4d3463ec579e337020b/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=488c0b9546ff32234ae5b4d3463ec579e337020b", "patch": "@@ -357,21 +357,21 @@ impl Rewrite for ast::WherePredicate {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         // TODO: dead spans?\n         let result = match *self {\n-            ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate { ref bound_lifetimes,\n-                                                                           ref bounded_ty,\n-                                                                           ref bounds,\n-                                                                           .. }) => {\n+            ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate {\n+                                                    ref bound_lifetimes,\n+                                                    ref bounded_ty,\n+                                                    ref bounds,\n+                                                    ..\n+                                                }) => {\n                 let type_str = try_opt!(bounded_ty.rewrite(context, shape));\n \n                 let colon = type_bound_colon(context);\n \n                 if !bound_lifetimes.is_empty() {\n                     let lifetime_str: String = try_opt!(bound_lifetimes.iter()\n-                                                               .map(|lt| {\n-                                                                   lt.rewrite(context, shape)\n-                                                               })\n-                                                               .intersperse(Some(\", \".to_string()))\n-                                                               .collect());\n+                                     .map(|lt| lt.rewrite(context, shape))\n+                                     .intersperse(Some(\", \".to_string()))\n+                                     .collect());\n \n                     // 6 = \"for<> \".len()\n                     let used_width = lifetime_str.len() + type_str.len() + colon.len() + 6;\n@@ -386,7 +386,11 @@ impl Rewrite for ast::WherePredicate {\n                                                     .collect());\n \n                     if context.config.spaces_within_angle_brackets && lifetime_str.len() > 0 {\n-                        format!(\"for< {} > {}{}{}\", lifetime_str, type_str, colon, bounds_str)\n+                        format!(\"for< {} > {}{}{}\",\n+                                lifetime_str,\n+                                type_str,\n+                                colon,\n+                                bounds_str)\n                     } else {\n                         format!(\"for<{}> {}{}{}\", lifetime_str, type_str, colon, bounds_str)\n                     }\n@@ -405,14 +409,18 @@ impl Rewrite for ast::WherePredicate {\n                     format!(\"{}{}{}\", type_str, colon, bounds_str)\n                 }\n             }\n-            ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate { ref lifetime,\n-                                                                             ref bounds,\n-                                                                             .. }) => {\n+            ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n+                                                     ref lifetime,\n+                                                     ref bounds,\n+                                                     ..\n+                                                 }) => {\n                 try_opt!(rewrite_bounded_lifetime(lifetime, bounds.iter(), context, shape))\n             }\n-            ast::WherePredicate::EqPredicate(ast::WhereEqPredicate { ref lhs_ty,\n-                                                                     ref rhs_ty,\n-                                                                     .. }) => {\n+            ast::WherePredicate::EqPredicate(ast::WhereEqPredicate {\n+                                                 ref lhs_ty,\n+                                                 ref rhs_ty,\n+                                                 ..\n+                                             }) => {\n                 let lhs_ty_str = try_opt!(lhs_ty.rewrite(context, shape));\n                 // 3 = \" = \".len()\n                 let used_width = 3 + lhs_ty_str.len();"}, {"sha": "11d3fa98f9d402dca2a6f837b94b6417a33a54c8", "filename": "tests/source/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/488c0b9546ff32234ae5b4d3463ec579e337020b/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488c0b9546ff32234ae5b4d3463ec579e337020b/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=488c0b9546ff32234ae5b4d3463ec579e337020b", "patch": "@@ -174,19 +174,19 @@ fn arrays() {\n     let xy =    [ strukt  { test123: value_one_two_three_four, turbo: coolio(), } , /* comment  */   1 ];\n \n         let a =WeightedChoice::new(&mut [Weighted {\n-            weight: x,\n+            weightweight: x,\n             item: 0,\n         },\n                                   Weighted {\n-            weight: 1,\n+            weightweight: 1,\n             item: 1,\n         },\n                                   Weighted {\n-            weight: x,\n+            weightweight: x,\n             item: 2,\n         },\n                                   Weighted {\n-            weight: 1,\n+            weightweight: 1,\n             item: 3,\n         }]);\n "}, {"sha": "6f0bbeb321234c0befff6afdd8b1ed00fd289e88", "filename": "tests/target/expr-block.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/488c0b9546ff32234ae5b4d3463ec579e337020b/tests%2Ftarget%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488c0b9546ff32234ae5b4d3463ec579e337020b/tests%2Ftarget%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-block.rs?ref=488c0b9546ff32234ae5b4d3463ec579e337020b", "patch": "@@ -95,22 +95,10 @@ fn arrays() {\n     ];\n \n     let a = WeightedChoice::new(&mut [\n-        Weighted {\n-            weight: x,\n-            item: 0,\n-        },\n-        Weighted {\n-            weight: 1,\n-            item: 1,\n-        },\n-        Weighted {\n-            weight: x,\n-            item: 2,\n-        },\n-        Weighted {\n-            weight: 1,\n-            item: 3,\n-        },\n+        Weighted { weight: x, item: 0 },\n+        Weighted { weight: 1, item: 1 },\n+        Weighted { weight: x, item: 2 },\n+        Weighted { weight: 1, item: 3 },\n     ]);\n \n     let z ="}, {"sha": "f0788628538431cb112dc756ff7999ff07a3e549", "filename": "tests/target/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/488c0b9546ff32234ae5b4d3463ec579e337020b/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488c0b9546ff32234ae5b4d3463ec579e337020b/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=488c0b9546ff32234ae5b4d3463ec579e337020b", "patch": "@@ -174,19 +174,19 @@ fn arrays() {\n               1];\n \n     let a = WeightedChoice::new(&mut [Weighted {\n-                                          weight: x,\n+                                          weightweight: x,\n                                           item: 0,\n                                       },\n                                       Weighted {\n-                                          weight: 1,\n+                                          weightweight: 1,\n                                           item: 1,\n                                       },\n                                       Weighted {\n-                                          weight: x,\n+                                          weightweight: x,\n                                           item: 2,\n                                       },\n                                       Weighted {\n-                                          weight: 1,\n+                                          weightweight: 1,\n                                           item: 3,\n                                       }]);\n "}, {"sha": "f0cc1c16e14789c272fed52fbc63cbe409109a3b", "filename": "tests/target/pattern.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/488c0b9546ff32234ae5b4d3463ec579e337020b/tests%2Ftarget%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488c0b9546ff32234ae5b4d3463ec579e337020b/tests%2Ftarget%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fpattern.rs?ref=488c0b9546ff32234ae5b4d3463ec579e337020b", "patch": "@@ -24,13 +24,24 @@ fn main() {\n     let foo {} = 42;\n     let foo { .. } = 42;\n     let foo { x, y: ref foo, .. } = 42;\n-    let foo { x, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: ref foo, .. } = 42;\n-    let foo { x, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: ref foo } = 42;\n-    let foo { x,\n-              yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: ref foo,\n-              .. };\n-    let foo { x,\n-              yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: ref foo };\n+    let foo {\n+        x,\n+        yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: ref foo,\n+        ..\n+    } = 42;\n+    let foo {\n+        x,\n+        yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: ref foo,\n+    } = 42;\n+    let foo {\n+        x,\n+        yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: ref foo,\n+        ..\n+    };\n+    let foo {\n+        x,\n+        yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: ref foo,\n+    };\n }\n \n impl<'a, 'b> ResolveGeneratedContentFragmentMutator<'a, 'b> {"}]}