{"sha": "a30c2c26c08642dfb6b2c56121bea5ca45465c1b", "node_id": "C_kwDOAAsO6NoAKGEzMGMyYzI2YzA4NjQyZGZiNmIyYzU2MTIxYmVhNWNhNDU0NjVjMWI", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-03-09T07:42:45Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-03-10T07:32:24Z"}, "message": "feat: implement better error for manual impl of `Fn*` traits", "tree": {"sha": "7982d4b5d28eedfff966d90ac435f3ef4616371a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7982d4b5d28eedfff966d90ac435f3ef4616371a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a30c2c26c08642dfb6b2c56121bea5ca45465c1b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEINUdoc4Vb1yVx04IZ6vxb7Ds2HAFAmQK3QgACgkQZ6vxb7Ds\n2HDzRQ//Wt5FrhZIXaZOyYfXROxtaOoimqkUOIOTPg9HISTgWM4NwDohu5xMYzjn\n41h5+fQ5bntWBZvd6CFrp5ATfpz4TFP0gRTmGXx7FkCF+w90zPXWL1K06vR4maQk\nnLU0DUhflOdDB3OJdve3jfkBbLMzllUOtM3GhdnMkEtQJ+aLbB97CBixvghGbU5p\nJbPnFfiQYV4LA9gh6TZJOqLUmGm3f0GDUHgZ74e4elai1x9wAqt7HV253QLf8OOu\nk5jt3BEQPSgcJojbsGFr0zveqgRXuHvrPkVDOi/5altUq67TknvfA+plA95jkkk1\ntdtDly4XNbLkqrkS+FaW0SmGbiQaDw2ypSK8+tH/GlGZA/n4KpFCgHquavUnZ/Wc\nuZAEKdY2CG9nqVremAZsgttHWMBRlkRLoJLMr9CPGf++fluZG2WdQOvmrGAXviWd\nm5CM8OH/+GDBhBu2/5+ieoWQLy8g0f/pZTwgtk5sIzugR6CtaOUvJTYhpvwSUcYL\nzHT5gxl7Ezdgg74JhxY9emqeRkg7Op+lKp5lxFA7tPUZSC/ENbT30QMAFPqz3BHT\nJeWnwz8t+h1W98ZUR9FoIi3Pz28DspFnyZoUp2Mtd6f8+i6hiZ4I3gQGw4rxZf+L\nUd8W42gAng5yDvKhVMeY66vwLY1njrbiSPFP0l0wV7GxeUKqit4=\n=3wjX\n-----END PGP SIGNATURE-----", "payload": "tree 7982d4b5d28eedfff966d90ac435f3ef4616371a\nparent 6a179026decb823e6ad8ba1c81729528bc5d695f\nauthor Ezra Shaw <ezrasure@outlook.com> 1678347765 +1300\ncommitter Ezra Shaw <ezrasure@outlook.com> 1678433544 +1300\n\nfeat: implement better error for manual impl of `Fn*` traits\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a30c2c26c08642dfb6b2c56121bea5ca45465c1b", "html_url": "https://github.com/rust-lang/rust/commit/a30c2c26c08642dfb6b2c56121bea5ca45465c1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a179026decb823e6ad8ba1c81729528bc5d695f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a179026decb823e6ad8ba1c81729528bc5d695f", "html_url": "https://github.com/rust-lang/rust/commit/6a179026decb823e6ad8ba1c81729528bc5d695f"}], "stats": {"total": 195, "additions": 143, "deletions": 52}, "files": [{"sha": "84a6629404b6c9b72ea49ebfb2ecc64aacad485b", "filename": "compiler/rustc_hir_analysis/locales/en-US.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl?ref=a30c2c26c08642dfb6b2c56121bea5ca45465c1b", "patch": "@@ -42,6 +42,9 @@ hir_analysis_assoc_type_binding_not_allowed =\n     associated type bindings are not allowed here\n     .label = associated type not allowed here\n \n+hir_analysis_parenthesized_fn_trait_expansion =\n+    parenthesized trait syntax expands to `{$expanded_type}`\n+\n hir_analysis_typeof_reserved_keyword_used =\n     `typeof` is a reserved keyword but unimplemented\n     .suggestion = consider replacing `typeof(...)` with an actual type"}, {"sha": "156334fe785b9aac901ce8b3487c0b9e22dd0781", "filename": "compiler/rustc_hir_analysis/src/astconv/errors.rs", "status": "modified", "additions": 72, "deletions": 35, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs?ref=a30c2c26c08642dfb6b2c56121bea5ca45465c1b", "patch": "@@ -1,10 +1,14 @@\n use crate::astconv::AstConv;\n-use crate::errors::{ManualImplementation, MissingTypeParams};\n+use crate::errors::{\n+    AssocTypeBindingNotAllowed, ManualImplementation, MissingTypeParams,\n+    ParenthesizedFnTraitExpansion,\n+};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::FulfillmentError;\n+use rustc_middle::ty::TyCtxt;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::parse::feature_err;\n use rustc_span::edit_distance::find_best_match_for_name;\n@@ -78,43 +82,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // Do not suggest the other syntax if we are in trait impl:\n             // the desugaring would contain an associated type constraint.\n             if !is_impl {\n-                let args = trait_segment\n-                    .args\n-                    .as_ref()\n-                    .and_then(|args| args.args.get(0))\n-                    .and_then(|arg| match arg {\n-                        hir::GenericArg::Type(ty) => match ty.kind {\n-                            hir::TyKind::Tup(t) => t\n-                                .iter()\n-                                .map(|e| sess.source_map().span_to_snippet(e.span))\n-                                .collect::<Result<Vec<_>, _>>()\n-                                .map(|a| a.join(\", \")),\n-                            _ => sess.source_map().span_to_snippet(ty.span),\n-                        }\n-                        .map(|s| format!(\"({})\", s))\n-                        .ok(),\n-                        _ => None,\n-                    })\n-                    .unwrap_or_else(|| \"()\".to_string());\n-                let ret = trait_segment\n-                    .args()\n-                    .bindings\n-                    .iter()\n-                    .find_map(|b| match (b.ident.name == sym::Output, &b.kind) {\n-                        (true, hir::TypeBindingKind::Equality { term }) => {\n-                            let span = match term {\n-                                hir::Term::Ty(ty) => ty.span,\n-                                hir::Term::Const(c) => self.tcx().hir().span(c.hir_id),\n-                            };\n-                            sess.source_map().span_to_snippet(span).ok()\n-                        }\n-                        _ => None,\n-                    })\n-                    .unwrap_or_else(|| \"()\".to_string());\n                 err.span_suggestion(\n                     span,\n                     \"use parenthetical notation instead\",\n-                    format!(\"{}{} -> {}\", trait_segment.ident, args, ret),\n+                    fn_trait_to_string(self.tcx(), trait_segment, true),\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n@@ -629,3 +600,69 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         err.emit();\n     }\n }\n+\n+/// Emits an error regarding forbidden type binding associations\n+pub fn prohibit_assoc_ty_binding(\n+    tcx: TyCtxt<'_>,\n+    span: Span,\n+    segment: Option<(&hir::PathSegment<'_>, Span)>,\n+) {\n+    tcx.sess.emit_err(AssocTypeBindingNotAllowed { span, fn_trait_expansion: if let Some((segment, span)) = segment && segment.args().parenthesized {\n+        Some(ParenthesizedFnTraitExpansion { span, expanded_type: fn_trait_to_string(tcx, segment, false) })\n+    } else {\n+        None\n+    }});\n+}\n+\n+pub(crate) fn fn_trait_to_string(\n+    tcx: TyCtxt<'_>,\n+    trait_segment: &hir::PathSegment<'_>,\n+    parenthesized: bool,\n+) -> String {\n+    let args = trait_segment\n+        .args\n+        .as_ref()\n+        .and_then(|args| args.args.get(0))\n+        .and_then(|arg| match arg {\n+            hir::GenericArg::Type(ty) => match ty.kind {\n+                hir::TyKind::Tup(t) => t\n+                    .iter()\n+                    .map(|e| tcx.sess.source_map().span_to_snippet(e.span))\n+                    .collect::<Result<Vec<_>, _>>()\n+                    .map(|a| a.join(\", \")),\n+                _ => tcx.sess.source_map().span_to_snippet(ty.span),\n+            }\n+            .map(|s| {\n+                // `s.empty()` checks to see if the type is the unit tuple, if so we don't want a comma\n+                if parenthesized || s.is_empty() { format!(\"({})\", s) } else { format!(\"({},)\", s) }\n+            })\n+            .ok(),\n+            _ => None,\n+        })\n+        .unwrap_or_else(|| \"()\".to_string());\n+\n+    let ret = trait_segment\n+        .args()\n+        .bindings\n+        .iter()\n+        .find_map(|b| match (b.ident.name == sym::Output, &b.kind) {\n+            (true, hir::TypeBindingKind::Equality { term }) => {\n+                let span = match term {\n+                    hir::Term::Ty(ty) => ty.span,\n+                    hir::Term::Const(c) => tcx.hir().span(c.hir_id),\n+                };\n+\n+                (span != tcx.hir().span(trait_segment.hir_id))\n+                    .then_some(tcx.sess.source_map().span_to_snippet(span).ok())\n+                    .flatten()\n+            }\n+            _ => None,\n+        })\n+        .unwrap_or_else(|| \"()\".to_string());\n+\n+    if parenthesized {\n+        format!(\"{}{} -> {}\", trait_segment.ident, args, ret)\n+    } else {\n+        format!(\"{}<{}, Output={}>\", trait_segment.ident, args, ret)\n+    }\n+}"}, {"sha": "2f4963f6bc311aaf3a3ea2b2bab66cd538b1fcdf", "filename": "compiler/rustc_hir_analysis/src/astconv/generics.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs?ref=a30c2c26c08642dfb6b2c56121bea5ca45465c1b", "patch": "@@ -1,9 +1,8 @@\n use super::IsMethodCall;\n use crate::astconv::{\n-    CreateSubstsForGenericArgsCtxt, ExplicitLateBound, GenericArgCountMismatch,\n-    GenericArgCountResult, GenericArgPosition,\n+    errors::prohibit_assoc_ty_binding, CreateSubstsForGenericArgsCtxt, ExplicitLateBound,\n+    GenericArgCountMismatch, GenericArgCountResult, GenericArgPosition,\n };\n-use crate::errors::AssocTypeBindingNotAllowed;\n use crate::structured_errors::{GenericArgsInfo, StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed, MultiSpan};\n@@ -433,7 +432,7 @@ pub(crate) fn check_generic_arg_count(\n         (gen_pos != GenericArgPosition::Type || infer_args) && !gen_args.has_lifetime_params();\n \n     if gen_pos != GenericArgPosition::Type && let Some(b) = gen_args.bindings.first() {\n-            prohibit_assoc_ty_binding(tcx, b.span);\n+             prohibit_assoc_ty_binding(tcx, b.span, None);\n         }\n \n     let explicit_late_bound =\n@@ -589,11 +588,6 @@ pub(crate) fn check_generic_arg_count(\n     }\n }\n \n-/// Emits an error regarding forbidden type binding associations\n-pub fn prohibit_assoc_ty_binding(tcx: TyCtxt<'_>, span: Span) {\n-    tcx.sess.emit_err(AssocTypeBindingNotAllowed { span });\n-}\n-\n /// Prohibits explicit lifetime arguments if late-bound lifetime parameters\n /// are present. This is used both for datatypes and function calls.\n pub(crate) fn prohibit_explicit_late_bound_lifetimes("}, {"sha": "5db404608b36f217fed7dc4f53520fb9237d5d3f", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=a30c2c26c08642dfb6b2c56121bea5ca45465c1b", "patch": "@@ -5,9 +5,8 @@\n mod errors;\n pub mod generics;\n \n-use crate::astconv::generics::{\n-    check_generic_arg_count, create_substs_for_generic_args, prohibit_assoc_ty_binding,\n-};\n+use crate::astconv::errors::prohibit_assoc_ty_binding;\n+use crate::astconv::generics::{check_generic_arg_count, create_substs_for_generic_args};\n use crate::bounds::Bounds;\n use crate::collect::HirPlaceholderCollector;\n use crate::errors::{\n@@ -295,7 +294,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             ty::BoundConstness::NotConst,\n         );\n         if let Some(b) = item_segment.args().bindings.first() {\n-            prohibit_assoc_ty_binding(self.tcx(), b.span);\n+            prohibit_assoc_ty_binding(self.tcx(), b.span, Some((item_segment, span)));\n         }\n \n         substs\n@@ -631,7 +630,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         );\n \n         if let Some(b) = item_segment.args().bindings.first() {\n-            prohibit_assoc_ty_binding(self.tcx(), b.span);\n+            prohibit_assoc_ty_binding(self.tcx(), b.span, Some((item_segment, span)));\n         }\n \n         args\n@@ -825,7 +824,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             constness,\n         );\n         if let Some(b) = trait_segment.args().bindings.first() {\n-            prohibit_assoc_ty_binding(self.tcx(), b.span);\n+            prohibit_assoc_ty_binding(self.tcx(), b.span, Some((trait_segment, span)));\n         }\n         self.tcx().mk_trait_ref(trait_def_id, substs)\n     }\n@@ -2596,7 +2595,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         for segment in segments {\n             // Only emit the first error to avoid overloading the user with error messages.\n             if let Some(b) = segment.args().bindings.first() {\n-                prohibit_assoc_ty_binding(self.tcx(), b.span);\n+                prohibit_assoc_ty_binding(self.tcx(), b.span, None);\n                 return true;\n             }\n         }"}, {"sha": "bf2cadddc0d84830557b5739acdc98f9c713d971", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=a30c2c26c08642dfb6b2c56121bea5ca45465c1b", "patch": "@@ -5,7 +5,7 @@ use rustc_errors::{\n     error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic,\n     MultiSpan,\n };\n-use rustc_macros::Diagnostic;\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n@@ -129,6 +129,18 @@ pub struct AssocTypeBindingNotAllowed {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n+\n+    #[subdiagnostic]\n+    pub fn_trait_expansion: Option<ParenthesizedFnTraitExpansion>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[help(hir_analysis_parenthesized_fn_trait_expansion)]\n+pub struct ParenthesizedFnTraitExpansion {\n+    #[primary_span]\n+    pub span: Span,\n+\n+    pub expanded_type: String,\n }\n \n #[derive(Diagnostic)]"}, {"sha": "b1613f638d301796f89f3b8faa7defbfb704660a", "filename": "tests/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/tests%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/tests%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=a30c2c26c08642dfb6b2c56121bea5ca45465c1b", "patch": "@@ -64,6 +64,12 @@ error[E0229]: associated type bindings are not allowed here\n    |\n LL | impl FnOnce() for Foo1 {\n    |      ^^^^^^^^ associated type not allowed here\n+   |\n+help: parenthesized trait syntax expands to `FnOnce<(), Output=()>`\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:16:6\n+   |\n+LL | impl FnOnce() for Foo1 {\n+   |      ^^^^^^^^\n \n error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:6"}, {"sha": "5872f1007b015374cfde0c3ec2cd04060ea1fe91", "filename": "tests/ui/fn/issue-39259.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/tests%2Fui%2Ffn%2Fissue-39259.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/tests%2Fui%2Ffn%2Fissue-39259.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Fissue-39259.rs?ref=a30c2c26c08642dfb6b2c56121bea5ca45465c1b", "patch": "@@ -0,0 +1,13 @@\n+#![feature(fn_traits)]\n+#![feature(unboxed_closures)]\n+\n+struct S;\n+\n+impl Fn(u32) -> u32 for S {\n+//~^ ERROR associated type bindings are not allowed here [E0229]\n+    fn call(&self) -> u32 {\n+        5\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "b656b76bfe4eb4725a5f2797e20ad0fea7b69d61", "filename": "tests/ui/fn/issue-39259.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/tests%2Fui%2Ffn%2Fissue-39259.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/tests%2Fui%2Ffn%2Fissue-39259.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Fissue-39259.stderr?ref=a30c2c26c08642dfb6b2c56121bea5ca45465c1b", "patch": "@@ -0,0 +1,15 @@\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/issue-39259.rs:6:17\n+   |\n+LL | impl Fn(u32) -> u32 for S {\n+   |                 ^^^ associated type not allowed here\n+   |\n+help: parenthesized trait syntax expands to `Fn<(u32,), Output=u32>`\n+  --> $DIR/issue-39259.rs:6:6\n+   |\n+LL | impl Fn(u32) -> u32 for S {\n+   |      ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0229`."}, {"sha": "5b93eff86142d7d2a6f9ab2d62536e1375177c3b", "filename": "tests/ui/lifetimes/issue-95023.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/tests%2Fui%2Flifetimes%2Fissue-95023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/tests%2Fui%2Flifetimes%2Fissue-95023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-95023.stderr?ref=a30c2c26c08642dfb6b2c56121bea5ca45465c1b", "patch": "@@ -25,6 +25,12 @@ error[E0229]: associated type bindings are not allowed here\n    |\n LL | impl Fn(&isize) for Error {\n    |      ^^^^^^^^^^ associated type not allowed here\n+   |\n+help: parenthesized trait syntax expands to `Fn<(&isize,), Output=()>`\n+  --> $DIR/issue-95023.rs:3:6\n+   |\n+LL | impl Fn(&isize) for Error {\n+   |      ^^^^^^^^^^\n \n error[E0220]: associated type `B` not found for `Self`\n   --> $DIR/issue-95023.rs:6:44"}, {"sha": "b647f9794bd9518158ce74072f4582df45b4f5c0", "filename": "tests/ui/traits/issue-87558.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/tests%2Fui%2Ftraits%2Fissue-87558.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a30c2c26c08642dfb6b2c56121bea5ca45465c1b/tests%2Fui%2Ftraits%2Fissue-87558.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-87558.stderr?ref=a30c2c26c08642dfb6b2c56121bea5ca45465c1b", "patch": "@@ -17,6 +17,12 @@ error[E0229]: associated type bindings are not allowed here\n    |\n LL | impl Fn(&isize) for Error {\n    |      ^^^^^^^^^^ associated type not allowed here\n+   |\n+help: parenthesized trait syntax expands to `Fn<(&isize,), Output=()>`\n+  --> $DIR/issue-87558.rs:3:6\n+   |\n+LL | impl Fn(&isize) for Error {\n+   |      ^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}]}