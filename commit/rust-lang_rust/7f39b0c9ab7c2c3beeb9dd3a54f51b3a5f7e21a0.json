{"sha": "7f39b0c9ab7c2c3beeb9dd3a54f51b3a5f7e21a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMzliMGM5YWI3YzJjM2JlZWI5ZGQzYTU0ZjUxYjNhNWY3ZTIxYTA=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-17T22:18:58Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:06:35Z"}, "message": "subst_supertrait", "tree": {"sha": "1b2a3382ebeb639bb01fb12b596cb82bb70af0c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b2a3382ebeb639bb01fb12b596cb82bb70af0c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f39b0c9ab7c2c3beeb9dd3a54f51b3a5f7e21a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f39b0c9ab7c2c3beeb9dd3a54f51b3a5f7e21a0", "html_url": "https://github.com/rust-lang/rust/commit/7f39b0c9ab7c2c3beeb9dd3a54f51b3a5f7e21a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f39b0c9ab7c2c3beeb9dd3a54f51b3a5f7e21a0/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fda8c207e083acabace5a66d16824a52b43061d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fda8c207e083acabace5a66d16824a52b43061d", "html_url": "https://github.com/rust-lang/rust/commit/1fda8c207e083acabace5a66d16824a52b43061d"}], "stats": {"total": 45, "additions": 14, "deletions": 31}, "files": [{"sha": "9dfe23b5aad8d7e40afe52a5a411c71897d36469", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f39b0c9ab7c2c3beeb9dd3a54f51b3a5f7e21a0/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f39b0c9ab7c2c3beeb9dd3a54f51b3a5f7e21a0/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=7f39b0c9ab7c2c3beeb9dd3a54f51b3a5f7e21a0", "patch": "@@ -156,10 +156,10 @@ impl Elaborator<'tcx> {\n                 // Get predicates declared on the trait.\n                 let predicates = tcx.super_predicates_of(data.def_id());\n \n-                let obligations = predicates.predicates.iter().map(|(pred, span)| {\n+                let obligations = predicates.predicates.iter().map(|&(pred, span)| {\n                     predicate_obligation(\n                         pred.subst_supertrait(tcx, &data.to_poly_trait_ref()),\n-                        Some(*span),\n+                        Some(span),\n                     )\n                 });\n                 debug!(\"super_predicates: data={:?}\", data);"}, {"sha": "ac1642ec86611bf0cbd5a0299bf63f53b25b00e5", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 29, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7f39b0c9ab7c2c3beeb9dd3a54f51b3a5f7e21a0/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f39b0c9ab7c2c3beeb9dd3a54f51b3a5f7e21a0/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=7f39b0c9ab7c2c3beeb9dd3a54f51b3a5f7e21a0", "patch": "@@ -1303,37 +1303,20 @@ impl<'tcx> Predicate<'tcx> {\n         // this trick achieves that).\n \n         let substs = trait_ref.skip_binder().substs;\n-        let kind = self.kind();\n-        let new = match kind {\n-            &PredicateKind::Trait(ref binder, constness) => {\n-                PredicateKind::Trait(binder.map_bound(|data| data.subst(tcx, substs)), constness)\n-            }\n-            PredicateKind::Subtype(binder) => {\n-                PredicateKind::Subtype(binder.map_bound(|data| data.subst(tcx, substs)))\n-            }\n-            PredicateKind::RegionOutlives(binder) => {\n-                PredicateKind::RegionOutlives(binder.map_bound(|data| data.subst(tcx, substs)))\n-            }\n-            PredicateKind::TypeOutlives(binder) => {\n-                PredicateKind::TypeOutlives(binder.map_bound(|data| data.subst(tcx, substs)))\n-            }\n-            PredicateKind::Projection(binder) => {\n-                PredicateKind::Projection(binder.map_bound(|data| data.subst(tcx, substs)))\n-            }\n-            &PredicateKind::WellFormed(data) => PredicateKind::WellFormed(data.subst(tcx, substs)),\n-            &PredicateKind::ObjectSafe(trait_def_id) => PredicateKind::ObjectSafe(trait_def_id),\n-            &PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n-                PredicateKind::ClosureKind(closure_def_id, closure_substs.subst(tcx, substs), kind)\n-            }\n-            &PredicateKind::ConstEvaluatable(def_id, const_substs) => {\n-                PredicateKind::ConstEvaluatable(def_id, const_substs.subst(tcx, substs))\n-            }\n-            PredicateKind::ConstEquate(c1, c2) => {\n-                PredicateKind::ConstEquate(c1.subst(tcx, substs), c2.subst(tcx, substs))\n-            }\n+        let kind = match self.kint(tcx) {\n+            PredicateKint::ForAll(binder) => *binder.skip_binder(),\n+            kind => kind,\n+        };\n+\n+        let new = kind.subst(tcx, substs);\n+\n+        let rebound = if new.has_escaping_bound_vars() {\n+            PredicateKint::ForAll(Binder::bind(tcx.intern_predicate_kint(new)))\n+        } else {\n+            new\n         };\n \n-        if new != *kind { new.to_predicate(tcx) } else { self }\n+        if rebound != *kind { rebound.to_predicate(tcx) } else { self }\n     }\n }\n "}]}