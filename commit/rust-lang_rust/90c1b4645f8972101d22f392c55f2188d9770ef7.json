{"sha": "90c1b4645f8972101d22f392c55f2188d9770ef7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYzFiNDY0NWY4OTcyMTAxZDIyZjM5MmM1NWYyMTg4ZDk3NzBlZjc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-26T00:18:34Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-26T00:19:36Z"}, "message": "Set no-unwind on glue functions that don't drop resources.", "tree": {"sha": "c1b314b4d37a0e35ded3fe0cac2b95d28d133524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1b314b4d37a0e35ded3fe0cac2b95d28d133524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90c1b4645f8972101d22f392c55f2188d9770ef7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90c1b4645f8972101d22f392c55f2188d9770ef7", "html_url": "https://github.com/rust-lang/rust/commit/90c1b4645f8972101d22f392c55f2188d9770ef7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90c1b4645f8972101d22f392c55f2188d9770ef7/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa6c68a025337072fd61fe3d5f71e7f079ce0652", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6c68a025337072fd61fe3d5f71e7f079ce0652", "html_url": "https://github.com/rust-lang/rust/commit/fa6c68a025337072fd61fe3d5f71e7f079ce0652"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "facaa07610912fe44d5353b325e4f5dd2fd5f694", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90c1b4645f8972101d22f392c55f2188d9770ef7/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90c1b4645f8972101d22f392c55f2188d9770ef7/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=90c1b4645f8972101d22f392c55f2188d9770ef7", "patch": "@@ -488,6 +488,9 @@ fn declare_generic_glue(ccx: @crate_ctxt, t: ty::t, llfnty: TypeRef,\n     note_unique_llvm_symbol(ccx, fn_nm);\n     let llfn = decl_cdecl_fn(ccx.llmod, fn_nm, llfnty);\n     set_glue_inlining(llfn, t);\n+    if name != \"drop\" || !ty::type_has_resources(t) {\n+        set_no_unwind(llfn);\n+    }\n     ret llfn;\n }\n "}, {"sha": "2f49958455f7c3d6db9dd02f73c99f3715977257", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/90c1b4645f8972101d22f392c55f2188d9770ef7/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90c1b4645f8972101d22f392c55f2188d9770ef7/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=90c1b4645f8972101d22f392c55f2188d9770ef7", "patch": "@@ -100,7 +100,8 @@ export ty_uniq, mk_uniq, mk_imm_uniq, type_is_unique_box;\n export ty_var, mk_var;\n export ty_self, mk_self;\n export region, bound_region;\n-export get, type_has_params, type_has_vars, type_has_regions, type_id;\n+export get, type_has_params, type_has_vars, type_has_regions;\n+export type_has_resources, type_id;\n export ty_var_id;\n export ty_to_def_id;\n export ty_fn_args;\n@@ -235,6 +236,7 @@ type t_box = @{struct: sty,\n                has_params: bool,\n                has_vars: bool,\n                has_regions: bool,\n+               has_resources: bool,\n                o_def_id: option<ast::def_id>};\n \n // To reduce refcounting cost, we're representing types as unsafe pointers\n@@ -255,6 +257,7 @@ pure fn get(t: t) -> t_box unsafe {\n fn type_has_params(t: t) -> bool { get(t).has_params }\n fn type_has_vars(t: t) -> bool { get(t).has_vars }\n fn type_has_regions(t: t) -> bool { get(t).has_regions }\n+fn type_has_resources(t: t) -> bool { get(t).has_resources }\n fn type_def_id(t: t) -> option<ast::def_id> { get(t).o_def_id }\n fn type_id(t: t) -> uint { get(t).id }\n \n@@ -478,13 +481,15 @@ fn mk_t_with_id(cx: ctxt, st: sty, o_def_id: option<ast::def_id>) -> t {\n       some(t) { unsafe { ret unsafe::reinterpret_cast(t); } }\n       _ {}\n     }\n-    let mut has_params = false, has_vars = false, has_regions = false;\n+    let mut has_params = false, has_vars = false, has_regions = false,\n+    has_resources = false;\n     fn derive_flags(&has_params: bool, &has_vars: bool, &has_regions: bool,\n-                    tt: t) {\n+                    &has_resources: bool, tt: t) {\n         let t = get(tt);\n         has_params |= t.has_params;\n         has_vars |= t.has_vars;\n         has_regions |= t.has_regions;\n+        has_resources |= t.has_resources;\n     }\n     fn derive_rflags(&has_vars: bool, &has_regions: bool, r: region) {\n         has_regions = true;\n@@ -494,9 +499,10 @@ fn mk_t_with_id(cx: ctxt, st: sty, o_def_id: option<ast::def_id>) -> t {\n         }\n     }\n     fn derive_sflags(&has_params: bool, &has_vars: bool, &has_regions: bool,\n-                     substs: substs) {\n+                     &has_resources: bool, substs: substs) {\n         for substs.tps.each {|tt|\n-            derive_flags(has_params, has_vars, has_regions, tt);\n+            derive_flags(has_params, has_vars, has_regions,\n+                         has_resources, tt);\n         }\n         substs.self_r.iter { |r| derive_rflags(has_vars, has_regions, r) }\n     }\n@@ -506,56 +512,69 @@ fn mk_t_with_id(cx: ctxt, st: sty, o_def_id: option<ast::def_id>) -> t {\n       }\n       ty_evec(mt, vstore_slice(r)) {\n         derive_rflags(has_vars, has_regions, r);\n-        derive_flags(has_params, has_vars, has_regions, mt.ty);\n+        derive_flags(has_params, has_vars, has_regions,\n+                     has_resources, mt.ty);\n       }\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_float(_) | ty_uint(_) |\n       ty_str | ty_estr(_) | ty_type | ty_opaque_closure_ptr(_) |\n       ty_opaque_box {}\n       ty_param(_, _) { has_params = true; }\n       ty_var(_) | ty_self(_) { has_vars = true; }\n       ty_enum(_, substs) | ty_class(_, substs) {\n-        derive_sflags(has_params, has_vars, has_regions, substs);\n+        derive_sflags(has_params, has_vars, has_regions,\n+                      has_resources, substs);\n       }\n       ty_iface(_, tys) {\n         for tys.each {|tt|\n-            derive_flags(has_params, has_vars, has_regions, tt);\n+            derive_flags(has_params, has_vars, has_regions,\n+                         has_resources, tt);\n         }\n       }\n       ty_box(m) | ty_uniq(m) | ty_vec(m) | ty_evec(m, _) | ty_ptr(m) {\n-        derive_flags(has_params, has_vars, has_regions, m.ty);\n+        derive_flags(has_params, has_vars, has_regions,\n+                     has_resources, m.ty);\n       }\n       ty_rptr(r, m) {\n         derive_rflags(has_vars, has_regions, r);\n-        derive_flags(has_params, has_vars, has_regions, m.ty);\n+        derive_flags(has_params, has_vars, has_regions,\n+                     has_resources, m.ty);\n       }\n       ty_rec(flds) {\n         for flds.each {|f|\n-          derive_flags(has_params, has_vars, has_regions, f.mt.ty);\n+          derive_flags(has_params, has_vars, has_regions,\n+                       has_resources, f.mt.ty);\n         }\n       }\n       ty_tup(ts) {\n         for ts.each {|tt| derive_flags(has_params, has_vars,\n-                                       has_regions, tt); }\n+                                       has_regions, has_resources, tt); }\n       }\n       ty_fn(f) {\n         for f.inputs.each {|a|\n-          derive_flags(has_params, has_vars, has_regions, a.ty);\n+          derive_flags(has_params, has_vars, has_regions,\n+                       has_resources, a.ty);\n         }\n-        derive_flags(has_params, has_vars, has_regions, f.output);\n+        derive_flags(has_params, has_vars, has_regions,\n+                     has_resources, f.output);\n       }\n       ty_res(_, tt, substs) {\n-        derive_flags(has_params, has_vars, has_regions, tt);\n-        derive_sflags(has_params, has_vars, has_regions, substs);\n+        has_resources = true;\n+        derive_flags(has_params, has_vars, has_regions,\n+                     has_resources, tt);\n+        derive_sflags(has_params, has_vars, has_regions,\n+                      has_resources, substs);\n       }\n       ty_constr(tt, _) {\n-        derive_flags(has_params, has_vars, has_regions, tt);\n+        derive_flags(has_params, has_vars, has_regions,\n+                     has_resources, tt);\n       }\n     }\n     let t = @{struct: st,\n               id: cx.next_id,\n               has_params: has_params,\n               has_vars: has_vars,\n               has_regions: has_regions,\n+              has_resources: has_resources,\n               o_def_id: o_def_id};\n     cx.interner.insert(key, t);\n     cx.next_id += 1u;"}]}