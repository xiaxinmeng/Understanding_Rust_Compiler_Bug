{"sha": "f225808f4919b7c475354fb165fe941dab91abb5", "node_id": "C_kwDOAAsO6NoAKGYyMjU4MDhmNDkxOWI3YzQ3NTM1NGZiMTY1ZmU5NDFkYWI5MWFiYjU", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-29T17:54:00Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-29T17:54:00Z"}, "message": "Add tracking issue for sync_unsafe_cell.", "tree": {"sha": "9c018d90a0f08affd970becc69ef74d9143ee03c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c018d90a0f08affd970becc69ef74d9143ee03c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f225808f4919b7c475354fb165fe941dab91abb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f225808f4919b7c475354fb165fe941dab91abb5", "html_url": "https://github.com/rust-lang/rust/commit/f225808f4919b7c475354fb165fe941dab91abb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f225808f4919b7c475354fb165fe941dab91abb5/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "750ab0370e4e52b6c22181e1187f463ffce0a230", "url": "https://api.github.com/repos/rust-lang/rust/commits/750ab0370e4e52b6c22181e1187f463ffce0a230", "html_url": "https://github.com/rust-lang/rust/commit/750ab0370e4e52b6c22181e1187f463ffce0a230"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "2a49017de3cc87d4ef64c138adc361df3981377b", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f225808f4919b7c475354fb165fe941dab91abb5/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f225808f4919b7c475354fb165fe941dab91abb5/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=f225808f4919b7c475354fb165fe941dab91abb5", "patch": "@@ -2002,16 +2002,16 @@ impl<T: CoerceUnsized<U>, U> CoerceUnsized<UnsafeCell<U>> for UnsafeCell<T> {}\n /// making this type just as unsafe to use.\n ///\n /// See [`UnsafeCell`] for details.\n-#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n #[repr(transparent)]\n pub struct SyncUnsafeCell<T: ?Sized> {\n     value: UnsafeCell<T>,\n }\n \n-#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n unsafe impl<T: ?Sized + Sync> Sync for SyncUnsafeCell<T> {}\n \n-#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n impl<T> SyncUnsafeCell<T> {\n     /// Constructs a new instance of `SyncUnsafeCell` which will wrap the specified value.\n     #[inline]\n@@ -2026,7 +2026,7 @@ impl<T> SyncUnsafeCell<T> {\n     }\n }\n \n-#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n impl<T: ?Sized> SyncUnsafeCell<T> {\n     /// Gets a mutable pointer to the wrapped value.\n     ///\n@@ -2060,15 +2060,15 @@ impl<T: ?Sized> SyncUnsafeCell<T> {\n     }\n }\n \n-#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n impl<T: Default> Default for SyncUnsafeCell<T> {\n     /// Creates an `SyncUnsafeCell`, with the `Default` value for T.\n     fn default() -> SyncUnsafeCell<T> {\n         SyncUnsafeCell::new(Default::default())\n     }\n }\n \n-#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for SyncUnsafeCell<T> {\n     /// Creates a new `SyncUnsafeCell<T>` containing the given value.\n@@ -2078,7 +2078,7 @@ impl<T> const From<T> for SyncUnsafeCell<T> {\n }\n \n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n-//#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+//#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<SyncUnsafeCell<U>> for SyncUnsafeCell<T> {}\n \n #[allow(unused)]"}, {"sha": "3e0aea4aca9a1b8eef00cec4a2b8675e68f2242b", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f225808f4919b7c475354fb165fe941dab91abb5/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f225808f4919b7c475354fb165fe941dab91abb5/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=f225808f4919b7c475354fb165fe941dab91abb5", "patch": "@@ -2396,7 +2396,7 @@ impl<T: ?Sized> Debug for UnsafeCell<T> {\n     }\n }\n \n-#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n impl<T: ?Sized> Debug for SyncUnsafeCell<T> {\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.debug_struct(\"SyncUnsafeCell\").finish_non_exhaustive()"}]}