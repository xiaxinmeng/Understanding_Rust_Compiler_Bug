{"sha": "c080c0bfec41e883e019e49de9b4b0cc35a4ff59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwODBjMGJmZWM0MWU4ODNlMDE5ZTQ5ZGU5YjRiMGNjMzVhNGZmNTk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-03T14:04:27Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-03T14:04:27Z"}, "message": "Misc changes", "tree": {"sha": "c234be129f138ccb0d529e6d01dc0ff4027d77a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c234be129f138ccb0d529e6d01dc0ff4027d77a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c080c0bfec41e883e019e49de9b4b0cc35a4ff59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c080c0bfec41e883e019e49de9b4b0cc35a4ff59", "html_url": "https://github.com/rust-lang/rust/commit/c080c0bfec41e883e019e49de9b4b0cc35a4ff59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c080c0bfec41e883e019e49de9b4b0cc35a4ff59/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc8a6c343a3982534ccb64cd93fb0bc4e1273bab", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab", "html_url": "https://github.com/rust-lang/rust/commit/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "6bbf024044b55169b74af7794adc5f51f7b81b6b", "filename": "build.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c080c0bfec41e883e019e49de9b4b0cc35a4ff59/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c080c0bfec41e883e019e49de9b4b0cc35a4ff59/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=c080c0bfec41e883e019e49de9b4b0cc35a4ff59", "patch": "@@ -30,6 +30,7 @@ else\n fi\n \n export RUSTFLAGS='-Zalways-encode-mir -Cpanic=abort -Zcodegen-backend='$(pwd)'/target/'$channel'/librustc_codegen_cranelift.'$dylib_ext\n+export XARGO_RUST_SRC=$(pwd)'/target/libcore/src'\n RUSTC=\"rustc $RUSTFLAGS -L crate=target/out --out-dir target/out\"\n \n rm -r target/out || true\n@@ -52,7 +53,7 @@ time $RUSTC target/libcore/src/libcore/lib.rs --crate-type lib --crate-name core\n \n pushd xargo\n rm -r ~/.xargo/HOST || true\n-export XARGO_RUST_SRC=$(pwd)'/../target/libcore/src'\n+rm -r target || true\n time xargo build --color always\n popd\n "}, {"sha": "0ce01e1f51ef0b08433a3abf745840fb49654a1e", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c080c0bfec41e883e019e49de9b4b0cc35a4ff59/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c080c0bfec41e883e019e49de9b4b0cc35a4ff59/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c080c0bfec41e883e019e49de9b4b0cc35a4ff59", "patch": "@@ -197,7 +197,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             let mut jit_module: Module<SimpleJITBackend> = Module::new(SimpleJITBuilder::new());\n             assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n \n-            codegen_mono_items(tcx, &mut jit_module, &mono_items);\n+            codegen_mono_items(tcx, &mut jit_module, mono_items);\n \n             tcx.sess.abort_if_errors();\n             println!(\"Compiled everything\");\n@@ -238,7 +238,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             );\n             assert_eq!(pointer_ty(tcx), faerie_module.target_config().pointer_type());\n \n-            codegen_mono_items(tcx, &mut faerie_module, &mono_items);\n+            codegen_mono_items(tcx, &mut faerie_module, mono_items);\n \n             tcx.sess.abort_if_errors();\n \n@@ -342,7 +342,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n fn codegen_mono_items<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     module: &mut Module<impl Backend + 'static>,\n-    mono_items: &FxHashSet<MonoItem<'tcx>>,\n+    mono_items: FxHashSet<MonoItem<'tcx>>,\n ) {\n     use std::io::Write;\n \n@@ -363,7 +363,7 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n \n     for mono_item in mono_items {\n         let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(|| {\n-            base::trans_mono_item(tcx, module, &mut caches, &mut ccx, *mono_item);\n+            base::trans_mono_item(tcx, module, &mut caches, &mut ccx, mono_item);\n         }));\n \n         if let Err(err) = res {"}]}