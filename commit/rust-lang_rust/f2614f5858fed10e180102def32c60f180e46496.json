{"sha": "f2614f5858fed10e180102def32c60f180e46496", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNjE0ZjU4NThmZWQxMGUxODAxMDJkZWYzMmM2MGYxODBlNDY0OTY=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2015-05-11T19:37:31Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2015-05-11T19:37:31Z"}, "message": "Avoid returning a slice with a null pointer from Iter.as_slice()\n\ncore::slice::Iter.ptr can be null when iterating a slice of zero-sized\nelements, but the pointer value used for the slice itself cannot. Handle\nthis case by always returning a dummy pointer for slices of zero-sized\nelements.", "tree": {"sha": "88bb940d491cdea2b0a2eb0bf27d2a334edd46f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88bb940d491cdea2b0a2eb0bf27d2a334edd46f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2614f5858fed10e180102def32c60f180e46496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2614f5858fed10e180102def32c60f180e46496", "html_url": "https://github.com/rust-lang/rust/commit/f2614f5858fed10e180102def32c60f180e46496", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2614f5858fed10e180102def32c60f180e46496/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1e34e9275918679336210874f8dd770323daa81", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e34e9275918679336210874f8dd770323daa81", "html_url": "https://github.com/rust-lang/rust/commit/e1e34e9275918679336210874f8dd770323daa81"}], "stats": {"total": 70, "additions": 48, "deletions": 22}, "files": [{"sha": "9db1ceddf0d752ae20df6770281667b841a63668", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f2614f5858fed10e180102def32c60f180e46496/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2614f5858fed10e180102def32c60f180e46496/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=f2614f5858fed10e180102def32c60f180e46496", "patch": "@@ -728,29 +728,29 @@ macro_rules! iterator {\n }\n \n macro_rules! make_slice {\n-    ($t: ty => $result: ty: $start: expr, $end: expr) => {{\n-        let diff = ($end as usize).wrapping_sub($start as usize);\n-        let len = if mem::size_of::<T>() == 0 {\n-            diff\n+    ($start: expr, $end: expr) => {{\n+        let start = $start;\n+        let diff = ($end as usize).wrapping_sub(start as usize);\n+        if size_from_ptr(start) == 0 {\n+            // use a non-null pointer value\n+            unsafe { from_raw_parts(1 as *const _, diff) }\n         } else {\n-            diff / mem::size_of::<$t>()\n-        };\n-        unsafe {\n-            from_raw_parts($start, len)\n+            let len = diff / size_from_ptr(start);\n+            unsafe { from_raw_parts(start, len) }\n         }\n     }}\n }\n \n macro_rules! make_mut_slice {\n-    ($t: ty => $result: ty: $start: expr, $end: expr) => {{\n-        let diff = ($end as usize).wrapping_sub($start as usize);\n-        let len = if mem::size_of::<T>() == 0 {\n-            diff\n+    ($start: expr, $end: expr) => {{\n+        let start = $start;\n+        let diff = ($end as usize).wrapping_sub(start as usize);\n+        if size_from_ptr(start) == 0 {\n+            // use a non-null pointer value\n+            unsafe { from_raw_parts_mut(1 as *mut _, diff) }\n         } else {\n-            diff / mem::size_of::<$t>()\n-        };\n-        unsafe {\n-            from_raw_parts_mut($start, len)\n+            let len = diff / size_from_ptr(start);\n+            unsafe { from_raw_parts_mut(start, len) }\n         }\n     }}\n }\n@@ -773,7 +773,7 @@ impl<'a, T> Iter<'a, T> {\n     /// iterator can continue to be used while this exists.\n     #[unstable(feature = \"core\")]\n     pub fn as_slice(&self) -> &'a [T] {\n-        make_slice!(T => &'a [T]: self.ptr, self.end)\n+        make_slice!(self.ptr, self.end)\n     }\n \n     // Helper function for Iter::nth\n@@ -841,12 +841,12 @@ impl<'a, T> IterMut<'a, T> {\n     /// restricted lifetimes that do not consume the iterator.\n     #[unstable(feature = \"core\")]\n     pub fn into_slice(self) -> &'a mut [T] {\n-        make_mut_slice!(T => &'a mut [T]: self.ptr, self.end)\n+        make_mut_slice!(self.ptr, self.end)\n     }\n \n     // Helper function for IterMut::nth\n     fn iter_nth(&mut self, n: usize) -> Option<&'a mut T> {\n-        match make_mut_slice!(T => &'a mut [T]: self.ptr, self.end).get_mut(n) {\n+        match make_mut_slice!(self.ptr, self.end).get_mut(n) {\n             Some(elem_ref) => unsafe {\n                 self.ptr = slice_offset!(self.ptr, (n as isize).wrapping_add(1));\n                 Some(slice_ref!(elem_ref))"}, {"sha": "6fe510586c74822223e2da6790a2323b76a7ab60", "filename": "src/test/run-pass/slice-of-zero-size-elements.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f2614f5858fed10e180102def32c60f180e46496/src%2Ftest%2Frun-pass%2Fslice-of-zero-size-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2614f5858fed10e180102def32c60f180e46496/src%2Ftest%2Frun-pass%2Fslice-of-zero-size-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice-of-zero-size-elements.rs?ref=f2614f5858fed10e180102def32c60f180e46496", "patch": "@@ -10,8 +10,26 @@\n \n // compile-flags: -C debug-assertions\n \n+#![feature(core)]\n+\n use std::slice;\n \n+fn foo<T>(v: &[T]) -> Option<&[T]> {\n+    let mut it = v.iter();\n+    for _ in 0..5 {\n+        let _ = it.next();\n+    }\n+    Some(it.as_slice())\n+}\n+\n+fn foo_mut<T>(v: &mut [T]) -> Option<&mut [T]> {\n+    let mut it = v.iter_mut();\n+    for _ in 0..5 {\n+        let _ = it.next();\n+    }\n+    Some(it.into_slice())\n+}\n+\n pub fn main() {\n     // In a slice of zero-size elements the pointer is meaningless.\n     // Ensure iteration still works even if the pointer is at the end of the address space.\n@@ -24,11 +42,19 @@ pub fn main() {\n     assert!(it.nth(5).is_some());\n     assert_eq!(it.count(), 4);\n \n+    // Converting Iter to a slice should never have a null pointer\n+    assert!(foo(slice).is_some());\n+\n+    // Test mutable iterators as well\n     let slice: &mut [()] = unsafe { slice::from_raw_parts_mut(-5isize as *mut (), 10) };\n     assert_eq!(slice.len(), 10);\n     assert_eq!(slice.iter_mut().count(), 10);\n \n-    let mut it = slice.iter_mut();\n-    assert!(it.nth(5).is_some());\n-    assert_eq!(it.count(), 4);\n+    {\n+        let mut it = slice.iter_mut();\n+        assert!(it.nth(5).is_some());\n+        assert_eq!(it.count(), 4);\n+    }\n+\n+    assert!(foo_mut(slice).is_some())\n }"}]}