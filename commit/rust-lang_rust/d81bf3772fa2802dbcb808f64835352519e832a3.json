{"sha": "d81bf3772fa2802dbcb808f64835352519e832a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MWJmMzc3MmZhMjgwMmRiY2I4MDhmNjQ4MzUzNTI1MTllODMyYTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-06T08:22:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-06T08:22:10Z"}, "message": "Merge #4337\n\n4337: Cleanup assists tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4797a973b944a831f5567953aa6c991f658d454b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4797a973b944a831f5567953aa6c991f658d454b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d81bf3772fa2802dbcb808f64835352519e832a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesnOyCRBK7hj4Ov3rIwAAdHIIADyLkLH83kebkC5dF4aetvYb\nEUASqGCVoCFgJUD5aRL+C6SvqRVazTDOdPGKZiNyGV3wiDv9HmLc93zQmI7LmoPh\nIhMV2DgSZsfJJIqENZoNHpJjk9yOxu7nM5JifCK/bNYmukzRVG1KOFrBG2Er9Ea1\nEc8X+r4EJvzkUBkMOSStVCz582ntMjMPUqBwA7fz7SPX313g1ttuveOi9kRkX3LW\nVfBbLIX/Fhf5gfeCdCKDG26VruPLI1opaL3ukoun5/6+4X9s3weooKeBm5jo+ZQe\nQqMESMkuRmcivt/S9cJyJ7J1DMLAo/ApQ8koq3wocUo46ZNg25O+CaKf1qWpuaM=\n=yQOk\n-----END PGP SIGNATURE-----\n", "payload": "tree 4797a973b944a831f5567953aa6c991f658d454b\nparent 30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b\nparent eea431180eb5267928c8e0d4b8099ab1042e01d1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588753330 +0000\ncommitter GitHub <noreply@github.com> 1588753330 +0000\n\nMerge #4337\n\n4337: Cleanup assists tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d81bf3772fa2802dbcb808f64835352519e832a3", "html_url": "https://github.com/rust-lang/rust/commit/d81bf3772fa2802dbcb808f64835352519e832a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d81bf3772fa2802dbcb808f64835352519e832a3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "url": "https://api.github.com/repos/rust-lang/rust/commits/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "html_url": "https://github.com/rust-lang/rust/commit/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b"}, {"sha": "eea431180eb5267928c8e0d4b8099ab1042e01d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/eea431180eb5267928c8e0d4b8099ab1042e01d1", "html_url": "https://github.com/rust-lang/rust/commit/eea431180eb5267928c8e0d4b8099ab1042e01d1"}], "stats": {"total": 503, "additions": 242, "deletions": 261}, "files": [{"sha": "f627f31dcd5290d1f87c7c28284e434517c8a087", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -1,39 +0,0 @@\n-//! Each assist definition has a special comment, which specifies docs and\n-//! example.\n-//!\n-//! We collect all the example and write the as tests in this module.\n-\n-mod generated;\n-\n-use ra_db::FileRange;\n-use test_utils::{assert_eq_text, extract_range_or_offset};\n-\n-use crate::resolved_assists;\n-\n-fn check(assist_id: &str, before: &str, after: &str) {\n-    let (selection, before) = extract_range_or_offset(before);\n-    let (db, file_id) = crate::helpers::with_single_file(&before);\n-    let frange = FileRange { file_id, range: selection.into() };\n-\n-    let assist = resolved_assists(&db, frange)\n-        .into_iter()\n-        .find(|assist| assist.label.id.0 == assist_id)\n-        .unwrap_or_else(|| {\n-            panic!(\n-                \"\\n\\nAssist is not applicable: {}\\nAvailable assists: {}\",\n-                assist_id,\n-                resolved_assists(&db, frange)\n-                    .into_iter()\n-                    .map(|assist| assist.label.id.0)\n-                    .collect::<Vec<_>>()\n-                    .join(\", \")\n-            )\n-        });\n-\n-    let actual = {\n-        let mut actual = before.clone();\n-        assist.action.edit.apply(&mut actual);\n-        actual\n-    };\n-    assert_eq_text!(after, &actual);\n-}"}, {"sha": "b72f7aeac8dacd1abb5118a2e55ceead80ba825a", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -95,7 +95,7 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "3629dac6bf848d2c0e2f5920b7c92179912b6728", "filename": "crates/ra_assists/src/handlers/add_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -58,7 +58,7 @@ fn derive_insertion_offset(nominal: &ast::NominalDef) -> Option<TextSize> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_target};\n \n     #[test]\n     fn add_derive_new() {"}, {"sha": "e39e1f4f3c0f1a54122fdfca5068f144ed5a6374", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -77,7 +77,7 @@ pub(crate) fn add_explicit_type(ctx: AssistCtx) -> Option<Assist> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn add_explicit_type_target() {"}, {"sha": "ee0d5ce986e385297f73dab0e54fa9998a73f4d1", "filename": "crates/ra_assists/src/handlers/add_from_impl_for_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -97,7 +97,7 @@ fn existing_from_impl(\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n     use test_utils::covers;\n \n     #[test]"}, {"sha": "cb2afc863d6fe5e3ce9801668caced67ab32394d", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -283,7 +283,7 @@ fn next_space_for_fn_in_module(\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "3d390c20bc8b138e1fa099d400c5f6e7716eec19", "filename": "crates/ra_assists/src/handlers/add_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -60,7 +60,7 @@ pub(crate) fn add_impl(ctx: AssistCtx) -> Option<Assist> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_target};\n \n     #[test]\n     fn test_add_impl() {"}, {"sha": "f7a101503369e0d093208dae1f524d35e3027892", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -181,7 +181,7 @@ fn add_body(fn_def: ast::FnDef) -> ast::FnDef {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "1b5d604d1868f66c4385253c997c315b5fd82bfe", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -178,7 +178,7 @@ fn has_new_fn(imp: &ast::ImplDef) -> bool {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     use super::*;\n "}, {"sha": "a0c48d87295755ab8672f9adb525e96d976a27ce", "filename": "crates/ra_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -60,7 +60,7 @@ fn opposite_logic_op(kind: ast::BinOp) -> Option<&'static str> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     #[test]\n     fn demorgan_turns_and_into_or() {"}, {"sha": "9e4171ccd82dfea6bc0dc2cce209af96e266b9d0", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -277,7 +277,7 @@ impl ImportCandidate {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn applicable_when_found_an_import() {"}, {"sha": "6ac1f8e69e4089bfb4a2820a3fc6a13bfe0a4674", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -110,7 +110,7 @@ fn change_vis(ctx: AssistCtx, vis: ast::Visibility) -> Option<Assist> {\n mod tests {\n     use test_utils::covers;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     use super::*;\n "}, {"sha": "55ccc37b00966762b42ab784a46e7290203d07b3", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -182,7 +182,7 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "1f9cd55852cf56c408ae3c7ac08d9431e1518d72", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -168,7 +168,7 @@ fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::EnumVariant) -> O\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     use super::fill_match_arms;\n "}, {"sha": "41db963dc6d22999e08c72a69611ab6038bd6973", "filename": "crates/ra_assists/src/handlers/flip_binexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -69,7 +69,7 @@ impl From<BinOp> for FlipAction {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn flip_binexpr_target_is_the_op() {"}, {"sha": "e65c9a41db7fd71ffbf49f6936a066a5e41b0e5f", "filename": "crates/ra_assists/src/handlers/flip_comma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn flip_comma(ctx: AssistCtx) -> Option<Assist> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_target};\n \n     #[test]\n     fn flip_comma_works_for_function_parameters() {"}, {"sha": "f186da58587e375319306fd4d37f6bf1af3a2068", "filename": "crates/ra_assists/src/handlers/flip_trait_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -43,7 +43,7 @@ pub(crate) fn flip_trait_bound(ctx: AssistCtx) -> Option<Assist> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn flip_trait_bound_assist_available() {"}, {"sha": "5f3b8dfd1166e4cb1425f5f01c3fae080e191430", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -125,7 +125,7 @@ pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n mod tests {\n     use test_utils::covers;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "9c2c20b22c761eca898cd6183968dab96f739f6e", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -136,7 +136,7 @@ fn anchor_stmt(expr: ast::Expr) -> Option<(SyntaxNode, bool)> {\n mod tests {\n     use test_utils::covers;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     use super::*;\n "}, {"sha": "303c1806d2ef73b61c61518484078603191df250", "filename": "crates/ra_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -62,7 +62,7 @@ pub(crate) fn invert_if(ctx: AssistCtx) -> Option<Assist> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     #[test]\n     fn invert_if_remove_inequality() {"}, {"sha": "9a2083609d442e462e62c3896e9bdf6f71a1774c", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -125,7 +125,7 @@ fn first_path(path: &ast::Path) -> ast::Path {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::check_assist;\n+    use crate::tests::check_assist;\n \n     use super::*;\n "}, {"sha": "9ae099b413aba75698df22a283bdfe2cb1d86577", "filename": "crates/ra_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -105,7 +105,7 @@ fn contains_placeholder(a: &ast::MatchArm) -> bool {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "89956aea958ea5f31e003f6ea436085cfe090b30", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -89,7 +89,7 @@ fn build_predicate(param: ast::TypeParam) -> Option<ast::WherePred> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::check_assist;\n+    use crate::tests::check_assist;\n \n     #[test]\n     fn move_bounds_to_where_clause_fn() {"}, {"sha": "f2aa7e5940be0f827f01d1397250e6d726ac797c", "filename": "crates/ra_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -132,7 +132,7 @@ pub(crate) fn move_arm_cond_to_match_guard(ctx: AssistCtx) -> Option<Assist> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn move_guard_to_arm_body_target() {"}, {"sha": "542f7a637915c0f3dc0fb47217ed0537053f76c0", "filename": "crates/ra_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -138,7 +138,7 @@ fn count_hashes(s: &str) -> usize {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn make_raw_string_target() {"}, {"sha": "ddfb21a7e3e7c3e1443164551de09e207542093d", "filename": "crates/ra_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -90,7 +90,7 @@ fn is_valid_macrocall(macro_call: &ast::MacroCall, macro_name: &str) -> Option<b\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn test_remove_dbg() {"}, {"sha": "a57e327b8fed3cbe2472befe321a9712b378788f", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -109,7 +109,7 @@ fn compute_fields_ranks(path: &Path, ctx: &AssistCtx) -> Option<HashMap<String,\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "d0df3b84e343e5ea6af1c02eaa532ba515e8b048", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -74,7 +74,7 @@ pub(crate) fn replace_if_let_with_match(ctx: AssistCtx) -> Option<Assist> {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_target};\n \n     #[test]\n     fn test_replace_if_let_with_match_unwraps_simple_expressions() {"}, {"sha": "dc4d16055b4c1e2c68c1a3e88cfc59a49051f5f6", "filename": "crates/ra_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -74,7 +74,7 @@ pub(crate) fn replace_let_with_if_let(ctx: AssistCtx) -> Option<Assist> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::check_assist;\n+    use crate::tests::check_assist;\n \n     use super::*;\n "}, {"sha": "62417892406090589c71857feda0be44278ffbdf", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -74,7 +74,7 @@ fn collect_hir_path_segments(path: &hir::Path) -> Option<Vec<SmolStr>> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "dcb471edb0c0bab0e61af68c5fa7f4f4afd2fa21", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -63,7 +63,7 @@ pub(crate) fn replace_unwrap_with_match(ctx: AssistCtx) -> Option<Assist> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_target};\n \n     #[test]\n     fn test_replace_result_unwrap_with_match() {"}, {"sha": "a59f2f76f60e11bb064a958ab9bb8e1c36e7dec2", "filename": "crates/ra_assists/src/handlers/split_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -37,7 +37,7 @@ pub(crate) fn split_import(ctx: AssistCtx) -> Option<Assist> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     use super::*;\n "}, {"sha": "89992117d81637e25f5c6e67dfe9cc98d68acf3a", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -89,7 +89,7 @@ fn extract_expr(cursor_range: TextRange, block: ast::BlockExpr) -> Option<ast::E\n \n #[cfg(test)]\n mod tests {\n-    use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "b794b021d79ad8c5077c9c29ba1fac87aa0447cc", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 148, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -13,7 +13,7 @@ macro_rules! eprintln {\n mod assist_ctx;\n mod marks;\n #[cfg(test)]\n-mod doc_tests;\n+mod tests;\n pub mod utils;\n pub mod ast_transform;\n \n@@ -194,150 +194,3 @@ mod handlers {\n         ]\n     }\n }\n-\n-#[cfg(test)]\n-mod helpers {\n-    use std::sync::Arc;\n-\n-    use hir::Semantics;\n-    use ra_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n-    use ra_ide_db::{symbol_index::SymbolsDatabase, RootDatabase};\n-    use test_utils::{add_cursor, assert_eq_text, extract_range_or_offset, RangeOrOffset};\n-\n-    use crate::{handlers::Handler, AssistCtx, AssistFile};\n-\n-    pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n-        let (mut db, file_id) = RootDatabase::with_single_file(text);\n-        // FIXME: ideally, this should be done by the above `RootDatabase::with_single_file`,\n-        // but it looks like this might need specialization? :(\n-        db.set_local_roots(Arc::new(vec![db.file_source_root(file_id)]));\n-        (db, file_id)\n-    }\n-\n-    pub(crate) fn check_assist(assist: Handler, ra_fixture_before: &str, ra_fixture_after: &str) {\n-        check(assist, ra_fixture_before, ExpectedResult::After(ra_fixture_after));\n-    }\n-\n-    // FIXME: instead of having a separate function here, maybe use\n-    // `extract_ranges` and mark the target as `<target> </target>` in the\n-    // fixuture?\n-    pub(crate) fn check_assist_target(assist: Handler, ra_fixture: &str, target: &str) {\n-        check(assist, ra_fixture, ExpectedResult::Target(target));\n-    }\n-\n-    pub(crate) fn check_assist_not_applicable(assist: Handler, ra_fixture: &str) {\n-        check(assist, ra_fixture, ExpectedResult::NotApplicable);\n-    }\n-\n-    enum ExpectedResult<'a> {\n-        NotApplicable,\n-        After(&'a str),\n-        Target(&'a str),\n-    }\n-\n-    fn check(assist: Handler, before: &str, expected: ExpectedResult) {\n-        let (text_without_caret, file_with_caret_id, range_or_offset, db) =\n-            if before.contains(\"//-\") {\n-                let (mut db, position) = RootDatabase::with_position(before);\n-                db.set_local_roots(Arc::new(vec![db.file_source_root(position.file_id)]));\n-                (\n-                    db.file_text(position.file_id).as_ref().to_owned(),\n-                    position.file_id,\n-                    RangeOrOffset::Offset(position.offset),\n-                    db,\n-                )\n-            } else {\n-                let (range_or_offset, text_without_caret) = extract_range_or_offset(before);\n-                let (db, file_id) = with_single_file(&text_without_caret);\n-                (text_without_caret, file_id, range_or_offset, db)\n-            };\n-\n-        let frange = FileRange { file_id: file_with_caret_id, range: range_or_offset.into() };\n-\n-        let sema = Semantics::new(&db);\n-        let assist_ctx = AssistCtx::new(&sema, frange, true);\n-\n-        match (assist(assist_ctx), expected) {\n-            (Some(assist), ExpectedResult::After(after)) => {\n-                let action = assist.0[0].action.clone().unwrap();\n-\n-                let mut actual = if let AssistFile::TargetFile(file_id) = action.file {\n-                    db.file_text(file_id).as_ref().to_owned()\n-                } else {\n-                    text_without_caret\n-                };\n-                action.edit.apply(&mut actual);\n-\n-                match action.cursor_position {\n-                    None => {\n-                        if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {\n-                            let off = action\n-                                .edit\n-                                .apply_to_offset(before_cursor_pos)\n-                                .expect(\"cursor position is affected by the edit\");\n-                            actual = add_cursor(&actual, off)\n-                        }\n-                    }\n-                    Some(off) => actual = add_cursor(&actual, off),\n-                };\n-\n-                assert_eq_text!(after, &actual);\n-            }\n-            (Some(assist), ExpectedResult::Target(target)) => {\n-                let action = assist.0[0].action.clone().unwrap();\n-                let range = action.target.expect(\"expected target on action\");\n-                assert_eq_text!(&text_without_caret[range], target);\n-            }\n-            (Some(_), ExpectedResult::NotApplicable) => panic!(\"assist should not be applicable!\"),\n-            (None, ExpectedResult::After(_)) | (None, ExpectedResult::Target(_)) => {\n-                panic!(\"code action is not applicable\")\n-            }\n-            (None, ExpectedResult::NotApplicable) => (),\n-        };\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use ra_db::FileRange;\n-    use ra_syntax::TextRange;\n-    use test_utils::{extract_offset, extract_range};\n-\n-    use crate::{helpers, resolved_assists};\n-\n-    #[test]\n-    fn assist_order_field_struct() {\n-        let before = \"struct Foo { <|>bar: u32 }\";\n-        let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = helpers::with_single_file(&before);\n-        let frange = FileRange { file_id, range: TextRange::empty(before_cursor_pos) };\n-        let assists = resolved_assists(&db, frange);\n-        let mut assists = assists.iter();\n-\n-        assert_eq!(\n-            assists.next().expect(\"expected assist\").label.label,\n-            \"Change visibility to pub(crate)\"\n-        );\n-        assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Add `#[derive]`\");\n-    }\n-\n-    #[test]\n-    fn assist_order_if_expr() {\n-        let before = \"\n-        pub fn test_some_range(a: int) -> bool {\n-            if let 2..6 = <|>5<|> {\n-                true\n-            } else {\n-                false\n-            }\n-        }\";\n-        let (range, before) = extract_range(before);\n-        let (db, file_id) = helpers::with_single_file(&before);\n-        let frange = FileRange { file_id, range };\n-        let assists = resolved_assists(&db, frange);\n-        let mut assists = assists.iter();\n-\n-        assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Extract into variable\");\n-        assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Replace with match\");\n-    }\n-}"}, {"sha": "483e11931915943b3cfa827b863cee9ce6cb6d0e", "filename": "crates/ra_assists/src/tests.rs", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -0,0 +1,167 @@\n+mod generated;\n+\n+use std::sync::Arc;\n+\n+use hir::Semantics;\n+use ra_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n+use ra_ide_db::{symbol_index::SymbolsDatabase, RootDatabase};\n+use ra_syntax::TextRange;\n+use test_utils::{\n+    add_cursor, assert_eq_text, extract_offset, extract_range, extract_range_or_offset,\n+    RangeOrOffset,\n+};\n+\n+use crate::{handlers::Handler, resolved_assists, AssistCtx, AssistFile};\n+\n+pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n+    let (mut db, file_id) = RootDatabase::with_single_file(text);\n+    // FIXME: ideally, this should be done by the above `RootDatabase::with_single_file`,\n+    // but it looks like this might need specialization? :(\n+    db.set_local_roots(Arc::new(vec![db.file_source_root(file_id)]));\n+    (db, file_id)\n+}\n+\n+pub(crate) fn check_assist(assist: Handler, ra_fixture_before: &str, ra_fixture_after: &str) {\n+    check(assist, ra_fixture_before, ExpectedResult::After(ra_fixture_after));\n+}\n+\n+// FIXME: instead of having a separate function here, maybe use\n+// `extract_ranges` and mark the target as `<target> </target>` in the\n+// fixuture?\n+pub(crate) fn check_assist_target(assist: Handler, ra_fixture: &str, target: &str) {\n+    check(assist, ra_fixture, ExpectedResult::Target(target));\n+}\n+\n+pub(crate) fn check_assist_not_applicable(assist: Handler, ra_fixture: &str) {\n+    check(assist, ra_fixture, ExpectedResult::NotApplicable);\n+}\n+\n+fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n+    let (selection, before) = extract_range_or_offset(before);\n+    let (db, file_id) = crate::tests::with_single_file(&before);\n+    let frange = FileRange { file_id, range: selection.into() };\n+\n+    let assist = resolved_assists(&db, frange)\n+        .into_iter()\n+        .find(|assist| assist.label.id.0 == assist_id)\n+        .unwrap_or_else(|| {\n+            panic!(\n+                \"\\n\\nAssist is not applicable: {}\\nAvailable assists: {}\",\n+                assist_id,\n+                resolved_assists(&db, frange)\n+                    .into_iter()\n+                    .map(|assist| assist.label.id.0)\n+                    .collect::<Vec<_>>()\n+                    .join(\", \")\n+            )\n+        });\n+\n+    let actual = {\n+        let mut actual = before.clone();\n+        assist.action.edit.apply(&mut actual);\n+        actual\n+    };\n+    assert_eq_text!(after, &actual);\n+}\n+\n+enum ExpectedResult<'a> {\n+    NotApplicable,\n+    After(&'a str),\n+    Target(&'a str),\n+}\n+\n+fn check(assist: Handler, before: &str, expected: ExpectedResult) {\n+    let (text_without_caret, file_with_caret_id, range_or_offset, db) = if before.contains(\"//-\") {\n+        let (mut db, position) = RootDatabase::with_position(before);\n+        db.set_local_roots(Arc::new(vec![db.file_source_root(position.file_id)]));\n+        (\n+            db.file_text(position.file_id).as_ref().to_owned(),\n+            position.file_id,\n+            RangeOrOffset::Offset(position.offset),\n+            db,\n+        )\n+    } else {\n+        let (range_or_offset, text_without_caret) = extract_range_or_offset(before);\n+        let (db, file_id) = with_single_file(&text_without_caret);\n+        (text_without_caret, file_id, range_or_offset, db)\n+    };\n+\n+    let frange = FileRange { file_id: file_with_caret_id, range: range_or_offset.into() };\n+\n+    let sema = Semantics::new(&db);\n+    let assist_ctx = AssistCtx::new(&sema, frange, true);\n+\n+    match (assist(assist_ctx), expected) {\n+        (Some(assist), ExpectedResult::After(after)) => {\n+            let action = assist.0[0].action.clone().unwrap();\n+\n+            let mut actual = if let AssistFile::TargetFile(file_id) = action.file {\n+                db.file_text(file_id).as_ref().to_owned()\n+            } else {\n+                text_without_caret\n+            };\n+            action.edit.apply(&mut actual);\n+\n+            match action.cursor_position {\n+                None => {\n+                    if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {\n+                        let off = action\n+                            .edit\n+                            .apply_to_offset(before_cursor_pos)\n+                            .expect(\"cursor position is affected by the edit\");\n+                        actual = add_cursor(&actual, off)\n+                    }\n+                }\n+                Some(off) => actual = add_cursor(&actual, off),\n+            };\n+\n+            assert_eq_text!(after, &actual);\n+        }\n+        (Some(assist), ExpectedResult::Target(target)) => {\n+            let action = assist.0[0].action.clone().unwrap();\n+            let range = action.target.expect(\"expected target on action\");\n+            assert_eq_text!(&text_without_caret[range], target);\n+        }\n+        (Some(_), ExpectedResult::NotApplicable) => panic!(\"assist should not be applicable!\"),\n+        (None, ExpectedResult::After(_)) | (None, ExpectedResult::Target(_)) => {\n+            panic!(\"code action is not applicable\")\n+        }\n+        (None, ExpectedResult::NotApplicable) => (),\n+    };\n+}\n+\n+#[test]\n+fn assist_order_field_struct() {\n+    let before = \"struct Foo { <|>bar: u32 }\";\n+    let (before_cursor_pos, before) = extract_offset(before);\n+    let (db, file_id) = with_single_file(&before);\n+    let frange = FileRange { file_id, range: TextRange::empty(before_cursor_pos) };\n+    let assists = resolved_assists(&db, frange);\n+    let mut assists = assists.iter();\n+\n+    assert_eq!(\n+        assists.next().expect(\"expected assist\").label.label,\n+        \"Change visibility to pub(crate)\"\n+    );\n+    assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Add `#[derive]`\");\n+}\n+\n+#[test]\n+fn assist_order_if_expr() {\n+    let before = \"\n+    pub fn test_some_range(a: int) -> bool {\n+        if let 2..6 = <|>5<|> {\n+            true\n+        } else {\n+            false\n+        }\n+    }\";\n+    let (range, before) = extract_range(before);\n+    let (db, file_id) = with_single_file(&before);\n+    let frange = FileRange { file_id, range };\n+    let assists = resolved_assists(&db, frange);\n+    let mut assists = assists.iter();\n+\n+    assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Extract into variable\");\n+    assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Replace with match\");\n+}"}, {"sha": "7d35fa2846d7988b539520255f417911c9845dc2", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "renamed", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -1,10 +1,10 @@\n //! Generated file, do not edit by hand, see `xtask/src/codegen`\n \n-use super::check;\n+use super::check_doc_test;\n \n #[test]\n fn doctest_add_custom_impl() {\n-    check(\n+    check_doc_test(\n         \"add_custom_impl\",\n         r#####\"\n #[derive(Deb<|>ug, Display)]\n@@ -23,7 +23,7 @@ impl Debug for S {\n \n #[test]\n fn doctest_add_derive() {\n-    check(\n+    check_doc_test(\n         \"add_derive\",\n         r#####\"\n struct Point {\n@@ -43,7 +43,7 @@ struct Point {\n \n #[test]\n fn doctest_add_explicit_type() {\n-    check(\n+    check_doc_test(\n         \"add_explicit_type\",\n         r#####\"\n fn main() {\n@@ -60,7 +60,7 @@ fn main() {\n \n #[test]\n fn doctest_add_function() {\n-    check(\n+    check_doc_test(\n         \"add_function\",\n         r#####\"\n struct Baz;\n@@ -87,7 +87,7 @@ fn bar(arg: &str, baz: Baz) {\n \n #[test]\n fn doctest_add_hash() {\n-    check(\n+    check_doc_test(\n         \"add_hash\",\n         r#####\"\n fn main() {\n@@ -104,7 +104,7 @@ fn main() {\n \n #[test]\n fn doctest_add_impl() {\n-    check(\n+    check_doc_test(\n         \"add_impl\",\n         r#####\"\n struct Ctx<T: Clone> {\n@@ -125,7 +125,7 @@ impl<T: Clone> Ctx<T> {\n \n #[test]\n fn doctest_add_impl_default_members() {\n-    check(\n+    check_doc_test(\n         \"add_impl_default_members\",\n         r#####\"\n trait Trait {\n@@ -159,7 +159,7 @@ impl Trait for () {\n \n #[test]\n fn doctest_add_impl_missing_members() {\n-    check(\n+    check_doc_test(\n         \"add_impl_missing_members\",\n         r#####\"\n trait Trait<T> {\n@@ -191,7 +191,7 @@ impl Trait<u32> for () {\n \n #[test]\n fn doctest_add_new() {\n-    check(\n+    check_doc_test(\n         \"add_new\",\n         r#####\"\n struct Ctx<T: Clone> {\n@@ -213,7 +213,7 @@ impl<T: Clone> Ctx<T> {\n \n #[test]\n fn doctest_apply_demorgan() {\n-    check(\n+    check_doc_test(\n         \"apply_demorgan\",\n         r#####\"\n fn main() {\n@@ -230,7 +230,7 @@ fn main() {\n \n #[test]\n fn doctest_auto_import() {\n-    check(\n+    check_doc_test(\n         \"auto_import\",\n         r#####\"\n fn main() {\n@@ -251,7 +251,7 @@ pub mod std { pub mod collections { pub struct HashMap { } } }\n \n #[test]\n fn doctest_change_visibility() {\n-    check(\n+    check_doc_test(\n         \"change_visibility\",\n         r#####\"\n <|>fn frobnicate() {}\n@@ -264,7 +264,7 @@ pub(crate) fn frobnicate() {}\n \n #[test]\n fn doctest_convert_to_guarded_return() {\n-    check(\n+    check_doc_test(\n         \"convert_to_guarded_return\",\n         r#####\"\n fn main() {\n@@ -288,7 +288,7 @@ fn main() {\n \n #[test]\n fn doctest_fill_match_arms() {\n-    check(\n+    check_doc_test(\n         \"fill_match_arms\",\n         r#####\"\n enum Action { Move { distance: u32 }, Stop }\n@@ -314,7 +314,7 @@ fn handle(action: Action) {\n \n #[test]\n fn doctest_flip_binexpr() {\n-    check(\n+    check_doc_test(\n         \"flip_binexpr\",\n         r#####\"\n fn main() {\n@@ -331,7 +331,7 @@ fn main() {\n \n #[test]\n fn doctest_flip_comma() {\n-    check(\n+    check_doc_test(\n         \"flip_comma\",\n         r#####\"\n fn main() {\n@@ -348,7 +348,7 @@ fn main() {\n \n #[test]\n fn doctest_flip_trait_bound() {\n-    check(\n+    check_doc_test(\n         \"flip_trait_bound\",\n         r#####\"\n fn foo<T: Clone +<|> Copy>() { }\n@@ -361,7 +361,7 @@ fn foo<T: Copy + Clone>() { }\n \n #[test]\n fn doctest_inline_local_variable() {\n-    check(\n+    check_doc_test(\n         \"inline_local_variable\",\n         r#####\"\n fn main() {\n@@ -379,7 +379,7 @@ fn main() {\n \n #[test]\n fn doctest_introduce_variable() {\n-    check(\n+    check_doc_test(\n         \"introduce_variable\",\n         r#####\"\n fn main() {\n@@ -397,7 +397,7 @@ fn main() {\n \n #[test]\n fn doctest_invert_if() {\n-    check(\n+    check_doc_test(\n         \"invert_if\",\n         r#####\"\n fn main() {\n@@ -414,7 +414,7 @@ fn main() {\n \n #[test]\n fn doctest_make_raw_string() {\n-    check(\n+    check_doc_test(\n         \"make_raw_string\",\n         r#####\"\n fn main() {\n@@ -431,7 +431,7 @@ fn main() {\n \n #[test]\n fn doctest_make_usual_string() {\n-    check(\n+    check_doc_test(\n         \"make_usual_string\",\n         r#####\"\n fn main() {\n@@ -448,7 +448,7 @@ fn main() {\n \n #[test]\n fn doctest_merge_imports() {\n-    check(\n+    check_doc_test(\n         \"merge_imports\",\n         r#####\"\n use std::<|>fmt::Formatter;\n@@ -462,7 +462,7 @@ use std::{fmt::Formatter, io};\n \n #[test]\n fn doctest_merge_match_arms() {\n-    check(\n+    check_doc_test(\n         \"merge_match_arms\",\n         r#####\"\n enum Action { Move { distance: u32 }, Stop }\n@@ -488,7 +488,7 @@ fn handle(action: Action) {\n \n #[test]\n fn doctest_move_arm_cond_to_match_guard() {\n-    check(\n+    check_doc_test(\n         \"move_arm_cond_to_match_guard\",\n         r#####\"\n enum Action { Move { distance: u32 }, Stop }\n@@ -515,7 +515,7 @@ fn handle(action: Action) {\n \n #[test]\n fn doctest_move_bounds_to_where_clause() {\n-    check(\n+    check_doc_test(\n         \"move_bounds_to_where_clause\",\n         r#####\"\n fn apply<T, U, <|>F: FnOnce(T) -> U>(f: F, x: T) -> U {\n@@ -532,7 +532,7 @@ fn apply<T, U, F>(f: F, x: T) -> U where F: FnOnce(T) -> U {\n \n #[test]\n fn doctest_move_guard_to_arm_body() {\n-    check(\n+    check_doc_test(\n         \"move_guard_to_arm_body\",\n         r#####\"\n enum Action { Move { distance: u32 }, Stop }\n@@ -559,7 +559,7 @@ fn handle(action: Action) {\n \n #[test]\n fn doctest_remove_dbg() {\n-    check(\n+    check_doc_test(\n         \"remove_dbg\",\n         r#####\"\n fn main() {\n@@ -576,7 +576,7 @@ fn main() {\n \n #[test]\n fn doctest_remove_hash() {\n-    check(\n+    check_doc_test(\n         \"remove_hash\",\n         r#####\"\n fn main() {\n@@ -593,7 +593,7 @@ fn main() {\n \n #[test]\n fn doctest_remove_mut() {\n-    check(\n+    check_doc_test(\n         \"remove_mut\",\n         r#####\"\n impl Walrus {\n@@ -610,7 +610,7 @@ impl Walrus {\n \n #[test]\n fn doctest_reorder_fields() {\n-    check(\n+    check_doc_test(\n         \"reorder_fields\",\n         r#####\"\n struct Foo {foo: i32, bar: i32};\n@@ -625,7 +625,7 @@ const test: Foo = Foo {foo: 1, bar: 0}\n \n #[test]\n fn doctest_replace_if_let_with_match() {\n-    check(\n+    check_doc_test(\n         \"replace_if_let_with_match\",\n         r#####\"\n enum Action { Move { distance: u32 }, Stop }\n@@ -653,7 +653,7 @@ fn handle(action: Action) {\n \n #[test]\n fn doctest_replace_let_with_if_let() {\n-    check(\n+    check_doc_test(\n         \"replace_let_with_if_let\",\n         r#####\"\n enum Option<T> { Some(T), None }\n@@ -679,7 +679,7 @@ fn compute() -> Option<i32> { None }\n \n #[test]\n fn doctest_replace_qualified_name_with_use() {\n-    check(\n+    check_doc_test(\n         \"replace_qualified_name_with_use\",\n         r#####\"\n fn process(map: std::collections::<|>HashMap<String, String>) {}\n@@ -694,7 +694,7 @@ fn process(map: HashMap<String, String>) {}\n \n #[test]\n fn doctest_replace_unwrap_with_match() {\n-    check(\n+    check_doc_test(\n         \"replace_unwrap_with_match\",\n         r#####\"\n enum Result<T, E> { Ok(T), Err(E) }\n@@ -718,7 +718,7 @@ fn main() {\n \n #[test]\n fn doctest_split_import() {\n-    check(\n+    check_doc_test(\n         \"split_import\",\n         r#####\"\n use std::<|>collections::HashMap;\n@@ -731,7 +731,7 @@ use std::{collections::HashMap};\n \n #[test]\n fn doctest_unwrap_block() {\n-    check(\n+    check_doc_test(\n         \"unwrap_block\",\n         r#####\"\n fn foo() {", "previous_filename": "crates/ra_assists/src/doc_tests/generated.rs"}, {"sha": "b4907f4b2b08b2237f587a79d962ef994a59387c", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -27,7 +27,7 @@ const AST_NODES: &str = \"crates/ra_syntax/src/ast/generated/nodes.rs\";\n const AST_TOKENS: &str = \"crates/ra_syntax/src/ast/generated/tokens.rs\";\n \n const ASSISTS_DIR: &str = \"crates/ra_assists/src/handlers\";\n-const ASSISTS_TESTS: &str = \"crates/ra_assists/src/doc_tests/generated.rs\";\n+const ASSISTS_TESTS: &str = \"crates/ra_assists/src/tests/generated.rs\";\n const ASSISTS_DOCS: &str = \"docs/user/assists.md\";\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]"}, {"sha": "4bd6b5f0ca8cb9feab62f278f33d7b694e693877", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -101,14 +101,14 @@ fn collect_assists() -> Result<Vec<Assist>> {\n }\n \n fn generate_tests(assists: &[Assist], mode: Mode) -> Result<()> {\n-    let mut buf = String::from(\"use super::check;\\n\");\n+    let mut buf = String::from(\"use super::check_doc_test;\\n\");\n \n     for assist in assists.iter() {\n         let test = format!(\n             r######\"\n #[test]\n fn doctest_{}() {{\n-    check(\n+    check_doc_test(\n         \"{}\",\n r#####\"\n {}\"#####, r#####\""}, {"sha": "a3c2e37d1d01fa83c41ffd9c2dfe401cb32389df", "filename": "xtask/tests/tidy-tests/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bf3772fa2802dbcb808f64835352519e832a3/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bf3772fa2802dbcb808f64835352519e832a3/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fmain.rs?ref=d81bf3772fa2802dbcb808f64835352519e832a3", "patch": "@@ -24,7 +24,7 @@ fn check_todo(path: &Path, text: &str) {\n         // This file itself is whitelisted since this test itself contains matches.\n         \"tests/cli.rs\",\n         // Some of our assists generate `todo!()` so those files are whitelisted.\n-        \"doc_tests/generated.rs\",\n+        \"tests/generated.rs\",\n         \"handlers/add_missing_impl_members.rs\",\n         \"handlers/add_function.rs\",\n         // To support generating `todo!()` in assists, we have `expr_todo()` in ast::make."}]}