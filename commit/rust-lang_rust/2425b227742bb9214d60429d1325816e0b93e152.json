{"sha": "2425b227742bb9214d60429d1325816e0b93e152", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MjViMjI3NzQyYmI5MjE0ZDYwNDI5ZDEzMjU4MTZlMGI5M2UxNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-10T21:11:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-10T21:11:29Z"}, "message": "Auto merge of #39438 - clarcharr:box_from, r=alexcrichton\n\nConversions between slices and boxes\n\nThis allows conversion for `Copy` slices, `str`, and `CStr` into their boxed counterparts.\n\nThis also adds the method `CString::into_boxed_c_str`.\n\nI would like to add similar implementations for `OsStr` as well, but I have not figured out how.", "tree": {"sha": "b6365fe75b64d733d15655f6663b31acdef18287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6365fe75b64d733d15655f6663b31acdef18287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2425b227742bb9214d60429d1325816e0b93e152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2425b227742bb9214d60429d1325816e0b93e152", "html_url": "https://github.com/rust-lang/rust/commit/2425b227742bb9214d60429d1325816e0b93e152", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2425b227742bb9214d60429d1325816e0b93e152/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc524d3d559e7b514edec6e99feb149995db7f1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc524d3d559e7b514edec6e99feb149995db7f1d", "html_url": "https://github.com/rust-lang/rust/commit/bc524d3d559e7b514edec6e99feb149995db7f1d"}, {"sha": "550373b1f9d59a4ce5cd61cb1bca2488c0ec6471", "url": "https://api.github.com/repos/rust-lang/rust/commits/550373b1f9d59a4ce5cd61cb1bca2488c0ec6471", "html_url": "https://github.com/rust-lang/rust/commit/550373b1f9d59a4ce5cd61cb1bca2488c0ec6471"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "ac9439974a491c9d634c9ff461355b8b4218c6e7", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2425b227742bb9214d60429d1325816e0b93e152/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2425b227742bb9214d60429d1325816e0b93e152/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=2425b227742bb9214d60429d1325816e0b93e152", "patch": "@@ -419,6 +419,23 @@ impl<T> From<T> for Box<T> {\n     }\n }\n \n+#[stable(feature = \"box_from_slice\", since = \"1.17.0\")]\n+impl<'a, T: Copy> From<&'a [T]> for Box<[T]> {\n+    fn from(slice: &'a [T]) -> Box<[T]> {\n+        let mut boxed = unsafe { RawVec::with_capacity(slice.len()).into_box() };\n+        boxed.copy_from_slice(slice);\n+        boxed\n+    }\n+}\n+\n+#[stable(feature = \"box_from_slice\", since = \"1.17.0\")]\n+impl<'a> From<&'a str> for Box<str> {\n+    fn from(s: &'a str) -> Box<str> {\n+        let boxed: Box<[u8]> = Box::from(s.as_bytes());\n+        unsafe { mem::transmute(boxed) }\n+    }\n+}\n+\n impl Box<Any> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "837f8dfaca13a52ecddab5f7dd9b6114a8a75ae5", "filename": "src/liballoc/boxed_test.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2425b227742bb9214d60429d1325816e0b93e152/src%2Fliballoc%2Fboxed_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2425b227742bb9214d60429d1325816e0b93e152/src%2Fliballoc%2Fboxed_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed_test.rs?ref=2425b227742bb9214d60429d1325816e0b93e152", "patch": "@@ -14,6 +14,8 @@ use core::any::Any;\n use core::ops::Deref;\n use core::result::Result::{Err, Ok};\n use core::clone::Clone;\n+use core::f64;\n+use core::i64;\n \n use std::boxed::Box;\n \n@@ -117,3 +119,24 @@ fn raw_trait() {\n         assert_eq!(19, y.get());\n     }\n }\n+\n+#[test]\n+fn f64_slice() {\n+    let slice: &[f64] = &[-1.0, 0.0, 1.0, f64::INFINITY];\n+    let boxed: Box<[f64]> = Box::from(slice);\n+    assert_eq!(&*boxed, slice)\n+}\n+\n+#[test]\n+fn i64_slice() {\n+    let slice: &[i64] = &[i64::MIN, -2, -1, 0, 1, 2, i64::MAX];\n+    let boxed: Box<[i64]> = Box::from(slice);\n+    assert_eq!(&*boxed, slice)\n+}\n+\n+#[test]\n+fn str_slice() {\n+    let s = \"Hello, world!\";\n+    let boxed: Box<str> = Box::from(s);\n+    assert_eq!(&*boxed, s)\n+}"}]}