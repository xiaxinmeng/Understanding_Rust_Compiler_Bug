{"sha": "ffcdf0881b37340c9c90bdfd8b96149090a62378", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmY2RmMDg4MWIzNzM0MGM5YzkwYmRmZDhiOTYxNDkwOTBhNjIzNzg=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-07-27T00:31:38Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-07-28T22:57:24Z"}, "message": "Improve typeck diagnostic messages\n\nMostly by splitting error messages into proper pairs of errors and helps", "tree": {"sha": "233b466abe4f5d977cfb02d71fa6b0f921288259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/233b466abe4f5d977cfb02d71fa6b0f921288259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffcdf0881b37340c9c90bdfd8b96149090a62378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffcdf0881b37340c9c90bdfd8b96149090a62378", "html_url": "https://github.com/rust-lang/rust/commit/ffcdf0881b37340c9c90bdfd8b96149090a62378", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffcdf0881b37340c9c90bdfd8b96149090a62378/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77e9228b4ad0a10f76921edf46dd8578f3d64630", "url": "https://api.github.com/repos/rust-lang/rust/commits/77e9228b4ad0a10f76921edf46dd8578f3d64630", "html_url": "https://github.com/rust-lang/rust/commit/77e9228b4ad0a10f76921edf46dd8578f3d64630"}], "stats": {"total": 159, "additions": 102, "deletions": 57}, "files": [{"sha": "883b972872f506d24b967f6fcb692edfc812d292", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=ffcdf0881b37340c9c90bdfd8b96149090a62378", "patch": "@@ -122,20 +122,21 @@ impl<'tcx> CastCheck<'tcx> {\n             CastError::NeedViaInt |\n             CastError::NeedViaUsize => {\n                 fcx.type_error_message(self.span, |actual| {\n-                    format!(\"illegal cast; cast through {} first: `{}` as `{}`\",\n-                            match e {\n-                                CastError::NeedViaPtr => \"a raw pointer\",\n-                                CastError::NeedViaInt => \"an integer\",\n-                                CastError::NeedViaUsize => \"a usize\",\n-                                _ => unreachable!()\n-                            },\n+                    format!(\"casting `{}` as `{}` is invalid\",\n                             actual,\n                             fcx.infcx().ty_to_string(self.cast_ty))\n-                }, self.expr_ty, None)\n+                }, self.expr_ty, None);\n+                fcx.ccx.tcx.sess.fileline_help(self.span,\n+                    &format!(\"cast through {} first\", match e {\n+                        CastError::NeedViaPtr => \"a raw pointer\",\n+                        CastError::NeedViaInt => \"an integer\",\n+                        CastError::NeedViaUsize => \"a usize\",\n+                        _ => unreachable!()\n+                }));\n             }\n             CastError::CastToBool => {\n-                span_err!(fcx.tcx().sess, self.span, E0054,\n-                          \"cannot cast as `bool`, compare with zero instead\");\n+                span_err!(fcx.tcx().sess, self.span, E0054, \"cannot cast as `bool`\");\n+                fcx.ccx.tcx.sess.fileline_help(self.span, \"compare with zero instead\");\n             }\n             CastError::CastToChar => {\n                 fcx.type_error_message(self.span, |actual| {\n@@ -151,17 +152,18 @@ impl<'tcx> CastCheck<'tcx> {\n             }\n             CastError::IllegalCast => {\n                 fcx.type_error_message(self.span, |actual| {\n-                    format!(\"illegal cast: `{}` as `{}`\",\n+                    format!(\"casting `{}` as `{}` is invalid\",\n                             actual,\n                             fcx.infcx().ty_to_string(self.cast_ty))\n                 }, self.expr_ty, None);\n             }\n             CastError::DifferingKinds => {\n                 fcx.type_error_message(self.span, |actual| {\n-                    format!(\"illegal cast: `{}` as `{}`; vtable kinds may not match\",\n+                    format!(\"casting `{}` as `{}` is invalid\",\n                             actual,\n                             fcx.infcx().ty_to_string(self.cast_ty))\n                 }, self.expr_ty, None);\n+                fcx.ccx.tcx.sess.fileline_note(self.span, \"vtable kinds may not match\");\n             }\n         }\n     }\n@@ -285,7 +287,7 @@ impl<'tcx> CastCheck<'tcx> {\n             return Ok(CastKind::PtrPtrCast);\n         }\n \n-        // sized -> unsized? report illegal cast (don't complain about vtable kinds)\n+        // sized -> unsized? report invalid cast (don't complain about vtable kinds)\n         if fcx.type_is_known_to_be_sized(m_expr.ty, self.span) {\n             return Err(CastError::IllegalCast);\n         }"}, {"sha": "92cbbaa1cb442136c89fc8c2fac1d1c378568294", "filename": "src/test/compile-fail/cast-as-bool.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs?ref=ffcdf0881b37340c9c90bdfd8b96149090a62378", "patch": "@@ -8,5 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: cannot cast as `bool`, compare with zero instead\n-fn main() { let u = (5 as bool); }\n+fn main() {\n+    let u = (5 as bool);\n+    //~^ ERROR cannot cast as `bool`\n+    //~^^ HELP compare with zero instead\n+}"}, {"sha": "7fca4aece69b80871067b279f74d400e71c6d22b", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 58, "deletions": 24, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=ffcdf0881b37340c9c90bdfd8b96149090a62378", "patch": "@@ -10,12 +10,16 @@\n \n fn illegal_cast<U:?Sized,V:?Sized>(u: *const U) -> *const V\n {\n-    u as *const V //~ ERROR vtable kinds\n+    u as *const V\n+    //~^ ERROR casting\n+    //~^^ NOTE vtable kinds\n }\n \n fn illegal_cast_2<U:?Sized>(u: *const U) -> *const str\n {\n-    u as *const str //~ ERROR vtable kinds\n+    u as *const str\n+    //~^ ERROR casting\n+    //~^^ NOTE vtable kinds\n }\n \n trait Foo { fn foo(&self) {} }\n@@ -41,32 +45,58 @@ fn main()\n     let _ = v as (u32,); //~ ERROR non-scalar\n     let _ = Some(&v) as *const u8; //~ ERROR non-scalar\n \n-    let _ = v as f32; //~ ERROR through a usize first\n-    let _ = main as f64; //~ ERROR through a usize first\n-    let _ = &v as usize; //~ ERROR through a raw pointer first\n-    let _ = f as *const u8; //~ ERROR through a usize first\n-    let _ = 3 as bool; //~ ERROR compare with zero\n-    let _ = E::A as bool; //~ ERROR compare with zero\n+    let _ = v as f32;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n+    let _ = main as f64;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n+    let _ = &v as usize;\n+    //~^ ERROR casting\n+    //~^^ HELP through a raw pointer first\n+    let _ = f as *const u8;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n+    let _ = 3 as bool;\n+    //~^ ERROR cannot cast as `bool`\n+    //~^^ HELP compare with zero\n+    let _ = E::A as bool;\n+    //~^ ERROR cannot cast as `bool`\n+    //~^^ HELP compare with zero\n     let _ = 0x61u32 as char; //~ ERROR only `u8` can be cast\n \n-    let _ = false as f32; //~ ERROR through an integer first\n-    let _ = E::A as f32; //~ ERROR through an integer first\n-    let _ = 'a' as f32; //~ ERROR through an integer first\n+    let _ = false as f32;\n+    //~^ ERROR casting\n+    //~^^ HELP through an integer first\n+    let _ = E::A as f32;\n+    //~^ ERROR casting\n+    //~^^ HELP through an integer first\n+    let _ = 'a' as f32;\n+    //~^ ERROR casting\n+    //~^^ HELP through an integer first\n \n-    let _ = false as *const u8; //~ ERROR through a usize first\n-    let _ = E::A as *const u8; //~ ERROR through a usize first\n-    let _ = 'a' as *const u8; //~ ERROR through a usize first\n+    let _ = false as *const u8;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n+    let _ = E::A as *const u8;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n+    let _ = 'a' as *const u8;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n \n-    let _ = 42usize as *const [u8]; //~ ERROR illegal cast\n-    let _ = v as *const [u8]; //~ ERROR illegal cast\n+    let _ = 42usize as *const [u8]; //~ ERROR casting\n+    let _ = v as *const [u8]; //~ ERROR casting\n     let _ = fat_v as *const Foo;\n     //~^ ERROR `core::marker::Sized` is not implemented for the type `[u8]`\n-    let _ = foo as *const str; //~ ERROR illegal cast\n-    let _ = foo as *mut str; //~ ERROR illegal cast\n-    let _ = main as *mut str; //~ ERROR illegal cast\n-    let _ = &f as *mut f32; //~ ERROR illegal cast\n-    let _ = &f as *const f64; //~ ERROR illegal cast\n-    let _ = fat_v as usize; //~ ERROR through a raw pointer first\n+    let _ = foo as *const str; //~ ERROR casting\n+    let _ = foo as *mut str; //~ ERROR casting\n+    let _ = main as *mut str; //~ ERROR casting\n+    let _ = &f as *mut f32; //~ ERROR casting\n+    let _ = &f as *const f64; //~ ERROR casting\n+    let _ = fat_v as usize;\n+    //~^ ERROR casting\n+    //~^^ HELP through a raw pointer first\n \n     let a : *const str = \"hello\";\n     let _ = a as *const Foo;\n@@ -76,6 +106,10 @@ fn main()\n     let _ = main.f as *const u32; //~ ERROR attempted access of field\n \n     let cf: *const Foo = &0;\n-    let _ = cf as *const [u8]; //~ ERROR vtable kinds\n-    let _ = cf as *const Bar; //~ ERROR vtable kinds\n+    let _ = cf as *const [u8];\n+    //~^ ERROR casting\n+    //~^^ NOTE vtable kinds\n+    let _ = cf as *const Bar;\n+    //~^ ERROR casting\n+    //~^^ NOTE vtable kinds\n }"}, {"sha": "397804566b4aeef51bba9c20eb739d729678fe8d", "filename": "src/test/compile-fail/const-cast-different-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs?ref=ffcdf0881b37340c9c90bdfd8b96149090a62378", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n static a: &'static str = \"foo\";\n-static b: *const u8 = a as *const u8; //~ ERROR illegal cast\n-static c: *const u8 = &a as *const u8; //~ ERROR illegal cast\n+static b: *const u8 = a as *const u8; //~ ERROR casting\n+static c: *const u8 = &a as *const u8; //~ ERROR casting\n \n fn main() {\n }"}, {"sha": "e6f473c8aacbb76e3965ca928de1f91f36e17f58", "filename": "src/test/compile-fail/enum-to-float-cast-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast-2.rs?ref=ffcdf0881b37340c9c90bdfd8b96149090a62378", "patch": "@@ -21,8 +21,8 @@ enum F {\n }\n \n pub fn main() {\n-    let a = E::L0 as f32;  //~ ERROR illegal cast\n-    let c = F::H1 as f32;  //~ ERROR illegal cast\n+    let a = E::L0 as f32;  //~ ERROR casting\n+    let c = F::H1 as f32;  //~ ERROR casting\n     assert_eq!(a, -1.0f32);\n     assert_eq!(c, -1.0f32);\n }"}, {"sha": "b562ba0e41afd36bb75b2b14794c926c0f423997", "filename": "src/test/compile-fail/enum-to-float-cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs?ref=ffcdf0881b37340c9c90bdfd8b96149090a62378", "patch": "@@ -20,8 +20,8 @@ enum F {\n     H1 = 0xFFFFFFFFFFFFFFFF\n }\n \n-static C0: f32 = E::L0 as f32; //~ ERROR illegal cast\n-static C1: f32 = F::H1 as f32; //~ ERROR illegal cast\n+static C0: f32 = E::L0 as f32; //~ ERROR casting\n+static C1: f32 = F::H1 as f32; //~ ERROR casting\n \n pub fn main() {\n     let b = C0;"}, {"sha": "3746f29ea55d62959acd6a3db5b88c9f4decf2df", "filename": "src/test/compile-fail/fat-ptr-cast.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs?ref=ffcdf0881b37340c9c90bdfd8b96149090a62378", "patch": "@@ -17,14 +17,16 @@ fn main() {\n     let p = a as *const [i32];\n     let q = a.as_ptr();\n \n-    a as usize; //~ ERROR illegal cast\n+    a as usize; //~ ERROR casting\n     b as usize; //~ ERROR non-scalar cast\n-    p as usize; //~ ERROR illegal cast; cast through a raw pointer\n+    p as usize;\n+    //~^ ERROR casting\n+    //~^^ HELP cast through a raw pointer\n \n     // #22955\n-    q as *const [i32]; //~ ERROR illegal cast\n+    q as *const [i32]; //~ ERROR casting\n \n     // #21397\n-    let t: *mut (Trait + 'static) = 0 as *mut _; //~ ERROR illegal cast\n-    let mut fail: *const str = 0 as *const str; //~ ERROR illegal cast\n+    let t: *mut (Trait + 'static) = 0 as *mut _; //~ ERROR casting\n+    let mut fail: *const str = 0 as *const str; //~ ERROR casting\n }"}, {"sha": "74f0833e8d11c8d4f3cf51584b3dcb7d7cde1b2a", "filename": "src/test/compile-fail/issue-14845.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs?ref=ffcdf0881b37340c9c90bdfd8b96149090a62378", "patch": "@@ -15,8 +15,8 @@ struct X {\n \n fn main() {\n     let x = X { a: [0] };\n-    let _f = &x.a as *mut u8; //~ ERROR illegal cast\n+    let _f = &x.a as *mut u8; //~ ERROR casting\n \n     let local: [u8; 1] = [0];\n-    let _v = &local as *mut u8; //~ ERROR illegal cast\n+    let _v = &local as *mut u8; //~ ERROR casting\n }"}, {"sha": "c1d5827eb90ce005269ca114376bd72e1c12752c", "filename": "src/test/compile-fail/issue-17444.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs?ref=ffcdf0881b37340c9c90bdfd8b96149090a62378", "patch": "@@ -14,5 +14,6 @@ enum Test {\n \n fn main() {\n     let _x = Test::Foo as *const isize;\n-    //~^ ERROR illegal cast; cast through a usize first: `Test` as `*const isize`\n+    //~^ ERROR casting `Test` as `*const isize` is invalid\n+    //~^^ HELP cast through a usize first\n }"}, {"sha": "741707a47b6078dccec75bd3a191480fa328d7e1", "filename": "src/test/compile-fail/issue-21554.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fissue-21554.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fissue-21554.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21554.rs?ref=ffcdf0881b37340c9c90bdfd8b96149090a62378", "patch": "@@ -11,5 +11,7 @@\n struct Inches(i32);\n \n fn main() {\n-    Inches as f32; //~ ERROR illegal cast; cast through a usize first\n+    Inches as f32;\n+    //~^ ERROR casting\n+    //~^^ cast through a usize first\n }"}, {"sha": "2277b1bad776dfb751a3e07fcda35059d452d01c", "filename": "src/test/compile-fail/typeck-cast-pointer-to-float.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Ftypeck-cast-pointer-to-float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Ftypeck-cast-pointer-to-float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-cast-pointer-to-float.rs?ref=ffcdf0881b37340c9c90bdfd8b96149090a62378", "patch": "@@ -11,5 +11,6 @@\n fn main() {\n     let x : i16 = 22;\n     ((&x) as *const i16) as f32;\n-    //~^ ERROR illegal cast; cast through a usize first: `*const i16` as `f32`\n+    //~^ ERROR casting `*const i16` as `f32` is invalid\n+    //~^^ HELP cast through a usize first\n }"}, {"sha": "8b63dd51729b882ddaacece7df5d08d1252e6c83", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=ffcdf0881b37340c9c90bdfd8b96149090a62378", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:illegal cast\n+// error-pattern:casting\n \n #![feature(libc)]\n "}, {"sha": "26c59c440d47bdd432662010912f401aeb4352e1", "filename": "src/test/compile-fail/vector-cast-weirdness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcdf0881b37340c9c90bdfd8b96149090a62378/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs?ref=ffcdf0881b37340c9c90bdfd8b96149090a62378", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     let mut x1 = X { y: [0, 0] };\n \n     // This is still an error since we don't allow casts from &mut [T; n] to *mut T.\n-    let p1: *mut u8 = &mut x1.y as *mut _;  //~ ERROR illegal cast\n+    let p1: *mut u8 = &mut x1.y as *mut _;  //~ ERROR casting\n     let t1: *mut [u8; 2] = &mut x1.y as *mut _;\n     let h1: *mut [u8; 2] = &mut x1.y as *mut [u8; 2];\n }"}]}