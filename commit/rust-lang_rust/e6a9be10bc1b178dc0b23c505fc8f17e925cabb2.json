{"sha": "e6a9be10bc1b178dc0b23c505fc8f17e925cabb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YTliZTEwYmMxYjE3OGRjMGIyM2M1MDVmYzhmMTdlOTI1Y2FiYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-07T21:28:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-07T21:28:54Z"}, "message": "Auto merge of #26861 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #26742, #26852, #26853, #26854, #26855, #26857\n- Failed merges: #26796", "tree": {"sha": "8eb185acde62bcf8ea7134e417855badd56b8857", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eb185acde62bcf8ea7134e417855badd56b8857"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6a9be10bc1b178dc0b23c505fc8f17e925cabb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a9be10bc1b178dc0b23c505fc8f17e925cabb2", "html_url": "https://github.com/rust-lang/rust/commit/e6a9be10bc1b178dc0b23c505fc8f17e925cabb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6a9be10bc1b178dc0b23c505fc8f17e925cabb2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d53921eff41f54586c370be1a72cb1b82d17e6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d53921eff41f54586c370be1a72cb1b82d17e6d", "html_url": "https://github.com/rust-lang/rust/commit/5d53921eff41f54586c370be1a72cb1b82d17e6d"}, {"sha": "bead66b0ef1755b51580fb19551fb967c6cc38ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/bead66b0ef1755b51580fb19551fb967c6cc38ca", "html_url": "https://github.com/rust-lang/rust/commit/bead66b0ef1755b51580fb19551fb967c6cc38ca"}], "stats": {"total": 167, "additions": 144, "deletions": 23}, "files": [{"sha": "15c19ece48a147755090e355f62f8fd50ed47838", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e6a9be10bc1b178dc0b23c505fc8f17e925cabb2/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/e6a9be10bc1b178dc0b23c505fc8f17e925cabb2/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=e6a9be10bc1b178dc0b23c505fc8f17e925cabb2", "patch": "@@ -10,11 +10,12 @@ system is up to the task, and gives you powerful ways to reason about\n concurrent code at compile time.\n \n Before we talk about the concurrency features that come with Rust, it's important\n-to understand something: Rust is low-level enough that all of this is provided\n-by the standard library, not by the language. This means that if you don't like\n-some aspect of the way Rust handles concurrency, you can implement an alternative\n-way of doing things. [mio](https://github.com/carllerche/mio) is a real-world\n-example of this principle in action.\n+to understand something: Rust is low-level enough that the vast majority of\n+this is provided by the standard library, not by the language. This means that\n+if you don't like some aspect of the way Rust handles concurrency, you can\n+implement an alternative way of doing things.\n+[mio](https://github.com/carllerche/mio) is a real-world example of this\n+principle in action.\n \n ## Background: `Send` and `Sync`\n "}, {"sha": "8e02367b921bc185eba4ff5fb12ca54fed57910c", "filename": "src/doc/trpl/lifetimes.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e6a9be10bc1b178dc0b23c505fc8f17e925cabb2/src%2Fdoc%2Ftrpl%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/e6a9be10bc1b178dc0b23c505fc8f17e925cabb2/src%2Fdoc%2Ftrpl%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Flifetimes.md?ref=e6a9be10bc1b178dc0b23c505fc8f17e925cabb2", "patch": "@@ -101,6 +101,8 @@ the lifetime `'a` has snuck in between the `&` and the `mut i32`. We read `&mut\n i32` as \u2018a mutable reference to an i32\u2019 and `&'a mut i32` as \u2018a mutable\n reference to an `i32` with the lifetime `'a`\u2019.\n \n+# In `struct`s\n+\n You\u2019ll also need explicit lifetimes when working with [`struct`][structs]s:\n \n ```rust\n@@ -137,6 +139,33 @@ x: &'a i32,\n uses it. So why do we need a lifetime here? We need to ensure that any reference\n to a `Foo` cannot outlive the reference to an `i32` it contains.\n \n+## `impl` blocks\n+\n+Let\u2019s implement a method on `Foo`:\n+\n+```rust\n+struct Foo<'a> {\n+    x: &'a i32,\n+}\n+\n+impl<'a> Foo<'a> {\n+    fn x(&self) -> &'a i32 { self.x }\n+}\n+\n+fn main() {\n+    let y = &5; // this is the same as `let _y = 5; let y = &_y;`\n+    let f = Foo { x: y };\n+\n+    println!(\"x is: {}\", f.x());\n+}\n+```\n+\n+As you can see, we need to declare a lifetime for `Foo` in the `impl` line. We repeat\n+`'a` twice, just like on functions: `impl<'a>` defines a lifetime `'a`, and `Foo<'a>`\n+uses it.\n+\n+## Multiple lifetimes\n+\n If you have multiple references, you can use the same lifetime multiple times:\n \n ```rust"}, {"sha": "80b0c87473fa2e23fbef395fa5aa502e442d5116", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e6a9be10bc1b178dc0b23c505fc8f17e925cabb2/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/e6a9be10bc1b178dc0b23c505fc8f17e925cabb2/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=e6a9be10bc1b178dc0b23c505fc8f17e925cabb2", "patch": "@@ -8,7 +8,7 @@ this, Rust has a keyword, `unsafe`. Code using `unsafe` has less restrictions\n than normal code does.\n \n Let\u2019s go over the syntax, and then we\u2019ll talk semantics. `unsafe` is used in\n-two contexts. The first one is to mark a function as unsafe:\n+four contexts. The first one is to mark a function as unsafe:\n \n ```rust\n unsafe fn danger_will_robinson() {\n@@ -27,15 +27,40 @@ unsafe {\n }\n ```\n \n+The third is for unsafe traits:\n+\n+```rust\n+unsafe trait Scary { }\n+```\n+\n+And the fourth is for `impl`ementing one of those traits:\n+\n+```rust\n+# unsafe trait Scary { }\n+unsafe impl Scary for i32 {}\n+```\n+\n It\u2019s important to be able to explicitly delineate code that may have bugs that\n cause big problems. If a Rust program segfaults, you can be sure it\u2019s somewhere\n in the sections marked `unsafe`.\n \n # What does \u2018safe\u2019 mean?\n \n-Safe, in the context of Rust, means \u201cdoesn\u2019t do anything unsafe.\u201d Easy!\n+Safe, in the context of Rust, means \u2018doesn\u2019t do anything unsafe\u2019. It\u2019s also\n+important to know that there are certain behaviors that are probably not\n+desirable in your code, but are expressly _not_ unsafe:\n \n-Okay, let\u2019s try again: what is not safe to do? Here\u2019s a list:\n+* Deadlocks\n+* Leaks of memory or other resources\n+* Exiting without calling destructors\n+* Integer overflow\n+\n+Rust cannot prevent all kinds of software problems. Buggy code can and will be\n+written in Rust. These things aren\u2019t great, but they don\u2019t qualify as `unsafe`\n+specifically.\n+\n+In addition, the following are all undefined behaviors in Rust, and must be\n+avoided, even when writing `unsafe` code:\n \n * Data races\n * Dereferencing a null/dangling raw pointer\n@@ -64,18 +89,6 @@ Okay, let\u2019s try again: what is not safe to do? Here\u2019s a list:\n [undef]: http://llvm.org/docs/LangRef.html#undefined-values\n [aliasing]: http://llvm.org/docs/LangRef.html#pointer-aliasing-rules\n \n-Whew! That\u2019s a bunch of stuff. It\u2019s also important to notice all kinds of\n-behaviors that are certainly bad, but are expressly _not_ unsafe:\n-\n-* Deadlocks\n-* Leaks of memory or other resources\n-* Exiting without calling destructors\n-* Integer overflow\n-\n-Rust cannot prevent all kinds of software problems. Buggy code can and will be\n-written in Rust. These things aren\u2019t great, but they don\u2019t qualify as `unsafe`\n-specifically.\n-\n # Unsafe Superpowers\n \n In both unsafe functions and unsafe blocks, Rust will let you do three things"}, {"sha": "e2f35983eb411987de88e1353ee302ee543eee78", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 81, "deletions": 3, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/e6a9be10bc1b178dc0b23c505fc8f17e925cabb2/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a9be10bc1b178dc0b23c505fc8f17e925cabb2/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=e6a9be10bc1b178dc0b23c505fc8f17e925cabb2", "patch": "@@ -1368,6 +1368,62 @@ struct Foo {\n ```\n \"##,\n \n+E0128: r##\"\n+Type parameter defaults can only use parameters that occur before them.\n+Erroneous code example:\n+\n+```\n+pub struct Foo<T=U, U=()> {\n+    field1: T,\n+    filed2: U,\n+}\n+// error: type parameters with a default cannot use forward declared\n+// identifiers\n+```\n+\n+Since type parameters are evaluated in-order, you may be able to fix this issue\n+by doing:\n+\n+```\n+pub struct Foo<U=(), T=U> {\n+    field1: T,\n+    filed2: U,\n+}\n+```\n+\n+Please also verify that this wasn't because of a name-clash and rename the type\n+parameter if so.\n+\"##,\n+\n+E0130: r##\"\n+You declared a pattern as an argument in a foreign function declaration.\n+Erroneous code example:\n+\n+```\n+extern {\n+    fn foo((a, b): (u32, u32)); // error: patterns aren't allowed in foreign\n+                                //        function declarations\n+}\n+```\n+\n+Please replace the pattern argument with a regular one. Example:\n+\n+```\n+struct SomeStruct {\n+    a: u32,\n+    b: u32,\n+}\n+\n+extern {\n+    fn foo(s: SomeStruct); // ok!\n+}\n+// or\n+extern {\n+    fn foo(a: (u32, u32)); // ok!\n+}\n+```\n+\"##,\n+\n E0131: r##\"\n It is not possible to define `main` with type parameters, or even with function\n parameters. When `main` is present, it must take no arguments and return `()`.\n@@ -1382,6 +1438,30 @@ fn(isize, *const *const u8) -> isize\n ```\n \"##,\n \n+E0159: r##\"\n+You tried to use a trait as a struct constructor. Erroneous code example:\n+\n+```\n+trait TraitNotAStruct {}\n+\n+TraitNotAStruct{ value: 0 }; // error: use of trait `TraitNotAStruct` as a\n+                             //        struct constructor\n+```\n+\n+Please verify you used the correct type name or please implement the trait\n+on a struct and use this struct constructor. Example:\n+\n+```\n+trait TraitNotAStruct {}\n+\n+struct Foo {\n+    value: i32\n+}\n+\n+Foo{ value: 0 }; // ok!\n+```\n+\"##,\n+\n E0166: r##\"\n This error means that the compiler found a return expression in a function\n marked as diverging. A function diverges if it has `!` in the place of the\n@@ -1467,6 +1547,7 @@ impl Foo for Bar {\n     // the impl\n     fn foo() {}\n }\n+```\n \"##,\n \n E0192: r##\"\n@@ -1978,11 +2059,8 @@ register_diagnostics! {\n     E0122,\n     E0123,\n     E0127,\n-    E0128,\n     E0129,\n-    E0130,\n     E0141,\n-    E0159,\n     E0163,\n     E0164,\n     E0167,"}]}