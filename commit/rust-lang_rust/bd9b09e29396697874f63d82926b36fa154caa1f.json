{"sha": "bd9b09e29396697874f63d82926b36fa154caa1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkOWIwOWUyOTM5NjY5Nzg3NGY2M2Q4MjkyNmIzNmZhMTU0Y2FhMWY=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-18T18:54:09Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-21T12:11:11Z"}, "message": "Adapt compile-test to run tests for cargo lints", "tree": {"sha": "e88e19dd246e6b6126a1f73b5aac0c1c1cc6313a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e88e19dd246e6b6126a1f73b5aac0c1c1cc6313a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd9b09e29396697874f63d82926b36fa154caa1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd9b09e29396697874f63d82926b36fa154caa1f", "html_url": "https://github.com/rust-lang/rust/commit/bd9b09e29396697874f63d82926b36fa154caa1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd9b09e29396697874f63d82926b36fa154caa1f/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1831385ff0fe329c143b59f09cb8b5f2a2568678", "url": "https://api.github.com/repos/rust-lang/rust/commits/1831385ff0fe329c143b59f09cb8b5f2a2568678", "html_url": "https://github.com/rust-lang/rust/commit/1831385ff0fe329c143b59f09cb8b5f2a2568678"}], "stats": {"total": 196, "additions": 164, "deletions": 32}, "files": [{"sha": "91b9c73c9d47a0e0ab2e45e7940b370590ba3228", "filename": "tests/compile-test.rs", "status": "modified", "additions": 108, "deletions": 32, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/bd9b09e29396697874f63d82926b36fa154caa1f/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd9b09e29396697874f63d82926b36fa154caa1f/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=bd9b09e29396697874f63d82926b36fa154caa1f", "patch": "@@ -101,49 +101,124 @@ fn run_mode(cfg: &mut compiletest::Config) {\n     compiletest::run_tests(&cfg);\n }\n \n-#[allow(clippy::identity_conversion)]\n-fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<tester::TestDescAndFn>) -> Result<bool, io::Error> {\n-    let mut result = true;\n-    let opts = compiletest::test_opts(config);\n-    for dir in fs::read_dir(&config.src_base)? {\n-        let dir = dir?;\n-        if !dir.file_type()?.is_dir() {\n-            continue;\n-        }\n-        let dir_path = dir.path();\n-        set_var(\"CARGO_MANIFEST_DIR\", &dir_path);\n-        for file in fs::read_dir(&dir_path)? {\n-            let file = file?;\n-            let file_path = file.path();\n-            if file.file_type()?.is_dir() {\n+fn run_ui_toml(config: &mut compiletest::Config) {\n+    fn run_tests(config: &compiletest::Config, mut tests: Vec<tester::TestDescAndFn>) -> Result<bool, io::Error> {\n+        let mut result = true;\n+        let opts = compiletest::test_opts(config);\n+        for dir in fs::read_dir(&config.src_base)? {\n+            let dir = dir?;\n+            if !dir.file_type()?.is_dir() {\n                 continue;\n             }\n-            if file_path.extension() != Some(OsStr::new(\"rs\")) {\n-                continue;\n+            let dir_path = dir.path();\n+            set_var(\"CARGO_MANIFEST_DIR\", &dir_path);\n+            for file in fs::read_dir(&dir_path)? {\n+                let file = file?;\n+                let file_path = file.path();\n+                if file.file_type()?.is_dir() {\n+                    continue;\n+                }\n+                if file_path.extension() != Some(OsStr::new(\"rs\")) {\n+                    continue;\n+                }\n+                let paths = compiletest::common::TestPaths {\n+                    file: file_path,\n+                    base: config.src_base.clone(),\n+                    relative_dir: dir_path.file_name().unwrap().into(),\n+                };\n+                let test_name = compiletest::make_test_name(&config, &paths);\n+                let index = tests\n+                    .iter()\n+                    .position(|test| test.desc.name == test_name)\n+                    .expect(\"The test should be in there\");\n+                result &= tester::run_tests_console(&opts, vec![tests.swap_remove(index)])?;\n             }\n-            let paths = compiletest::common::TestPaths {\n-                file: file_path,\n-                base: config.src_base.clone(),\n-                relative_dir: dir_path.file_name().unwrap().into(),\n-            };\n-            let test_name = compiletest::make_test_name(&config, &paths);\n-            let index = tests\n-                .iter()\n-                .position(|test| test.desc.name == test_name)\n-                .expect(\"The test should be in there\");\n-            result &= tester::run_tests_console(&opts, vec![tests.swap_remove(index)])?;\n         }\n+        Ok(result)\n     }\n-    Ok(result)\n-}\n \n-fn run_ui_toml(config: &mut compiletest::Config) {\n     config.mode = TestMode::Ui;\n     config.src_base = Path::new(\"tests\").join(\"ui-toml\").canonicalize().unwrap();\n \n     let tests = compiletest::make_tests(&config);\n \n-    let res = run_ui_toml_tests(&config, tests);\n+    let res = run_tests(&config, tests);\n+    match res {\n+        Ok(true) => {},\n+        Ok(false) => panic!(\"Some tests failed\"),\n+        Err(e) => {\n+            println!(\"I/O failure during tests: {:?}\", e);\n+        },\n+    }\n+}\n+\n+fn run_ui_cargo(config: &mut compiletest::Config) {\n+    fn run_tests(\n+        config: &compiletest::Config,\n+        filter: &Option<String>,\n+        mut tests: Vec<tester::TestDescAndFn>,\n+    ) -> Result<bool, io::Error> {\n+        let mut result = true;\n+        let opts = compiletest::test_opts(config);\n+\n+        for dir in fs::read_dir(&config.src_base)? {\n+            let dir = dir?;\n+            if !dir.file_type()?.is_dir() {\n+                continue;\n+            }\n+\n+            // Use the filter if provided\n+            let dir_path = dir.path();\n+            match &filter {\n+                Some(name) if !dir_path.ends_with(name) => continue,\n+                _ => {},\n+            }\n+\n+            for case in &[\"pass\", \"fail\"] {\n+                let tail: PathBuf = [case, \"src\"].iter().collect();\n+                let src_path = dir_path.join(tail);\n+                env::set_current_dir(&src_path)?;\n+\n+                for file in fs::read_dir(&src_path)? {\n+                    let file = file?;\n+                    if file.file_type()?.is_dir() {\n+                        continue;\n+                    }\n+\n+                    // Search for the main file to avoid running a test for each file in the project\n+                    let file_path = file.path();\n+                    match file_path.file_name().and_then(OsStr::to_str) {\n+                        Some(\"main.rs\") => {},\n+                        _ => continue,\n+                    }\n+\n+                    let paths = compiletest::common::TestPaths {\n+                        file: file_path,\n+                        base: config.src_base.clone(),\n+                        relative_dir: src_path.strip_prefix(&config.src_base).unwrap().into(),\n+                    };\n+                    let test_name = compiletest::make_test_name(&config, &paths);\n+                    let index = tests\n+                        .iter()\n+                        .position(|test| test.desc.name == test_name)\n+                        .expect(\"The test should be in there\");\n+                    result &= tester::run_tests_console(&opts, vec![tests.swap_remove(index)])?;\n+                }\n+            }\n+        }\n+        Ok(result)\n+    }\n+\n+    config.mode = TestMode::Ui;\n+    config.src_base = Path::new(\"tests\").join(\"ui-cargo\").canonicalize().unwrap();\n+\n+    let tests = compiletest::make_tests(&config);\n+\n+    let current_dir = env::current_dir().unwrap();\n+    let filter = env::var(\"TESTNAME\").ok();\n+    let res = run_tests(&config, &filter, tests);\n+    env::set_current_dir(current_dir).unwrap();\n+\n     match res {\n         Ok(true) => {},\n         Ok(false) => panic!(\"Some tests failed\"),\n@@ -165,4 +240,5 @@ fn compile_test() {\n     let mut config = default_config();\n     run_mode(&mut config);\n     run_ui_toml(&mut config);\n+    run_ui_cargo(&mut config);\n }"}, {"sha": "7028b251ea0307bb669524afb702a8d62a038924", "filename": "tests/ui-cargo/update-all-references.sh", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd9b09e29396697874f63d82926b36fa154caa1f/tests%2Fui-cargo%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bd9b09e29396697874f63d82926b36fa154caa1f/tests%2Fui-cargo%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fupdate-all-references.sh?ref=bd9b09e29396697874f63d82926b36fa154caa1f", "patch": "@@ -0,0 +1,18 @@\n+#!/bin/bash\n+#\n+# A script to update the references for all tests. The idea is that\n+# you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. You then\n+# run this script, which will copy those files over. If you find\n+# yourself manually editing a foo.stderr file, you're doing it wrong.\n+#\n+# See all `update-references.sh`, if you just want to update a single test.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" ]]; then\n+    echo \"usage: $0\"\n+fi\n+\n+BUILD_DIR=$PWD/target/debug/test_build_base\n+MY_DIR=$(dirname \"$0\")\n+cd \"$MY_DIR\" || exit\n+find . -name '*.rs' -exec ./update-references.sh \"$BUILD_DIR\" {} +"}, {"sha": "50d42678734e9caca32b8d6c806ed576f4b04a8e", "filename": "tests/ui-cargo/update-references.sh", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bd9b09e29396697874f63d82926b36fa154caa1f/tests%2Fui-cargo%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bd9b09e29396697874f63d82926b36fa154caa1f/tests%2Fui-cargo%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fupdate-references.sh?ref=bd9b09e29396697874f63d82926b36fa154caa1f", "patch": "@@ -0,0 +1,38 @@\n+#!/bin/bash\n+\n+# A script to update the references for particular tests. The idea is\n+# that you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. This\n+# script will then copy that output and replace the \"expected output\"\n+# files. You can then commit the changes.\n+#\n+# If you find yourself manually editing a foo.stderr file, you're\n+# doing it wrong.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" == \"\" ]]; then\n+    echo \"usage: $0 <build-directory> <relative-path-to-rs-files>\"\n+    echo \"\"\n+    echo \"For example:\"\n+    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui *.rs */*.rs\"\n+fi\n+\n+MYDIR=$(dirname \"$0\")\n+\n+BUILD_DIR=\"$1\"\n+shift\n+\n+while [[ \"$1\" != \"\" ]]; do\n+    STDERR_NAME=\"${1/%.rs/.stderr}\"\n+    STDOUT_NAME=\"${1/%.rs/.stdout}\"\n+    shift\n+    if [[ -f \"$BUILD_DIR\"/\"$STDOUT_NAME\" ]] && \\\n+           ! (cmp -s -- \"$BUILD_DIR\"/\"$STDOUT_NAME\" \"$MYDIR\"/\"$STDOUT_NAME\"); then\n+        echo updating \"$MYDIR\"/\"$STDOUT_NAME\"\n+        cp \"$BUILD_DIR\"/\"$STDOUT_NAME\" \"$MYDIR\"/\"$STDOUT_NAME\"\n+    fi\n+    if [[ -f \"$BUILD_DIR\"/\"$STDERR_NAME\" ]] && \\\n+           ! (cmp -s -- \"$BUILD_DIR\"/\"$STDERR_NAME\" \"$MYDIR\"/\"$STDERR_NAME\"); then\n+        echo updating \"$MYDIR\"/\"$STDERR_NAME\"\n+        cp \"$BUILD_DIR\"/\"$STDERR_NAME\" \"$MYDIR\"/\"$STDERR_NAME\"\n+    fi\n+done"}]}