{"sha": "0984639348c2fc98389746f6815e576cfcaacda8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ODQ2MzkzNDhjMmZjOTgzODk3NDZmNjgxNWU1NzZjZmNhYWNkYTg=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-13T21:57:01Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-13T22:15:09Z"}, "message": "Ignore mut borrow from drop terminator in const-eval", "tree": {"sha": "c6a8caf028d01c8c34df001210215366ee734d03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6a8caf028d01c8c34df001210215366ee734d03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0984639348c2fc98389746f6815e576cfcaacda8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0984639348c2fc98389746f6815e576cfcaacda8", "html_url": "https://github.com/rust-lang/rust/commit/0984639348c2fc98389746f6815e576cfcaacda8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0984639348c2fc98389746f6815e576cfcaacda8/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a5382ef1115ff11c1357fd21ab4aa12626efee", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a5382ef1115ff11c1357fd21ab4aa12626efee", "html_url": "https://github.com/rust-lang/rust/commit/15a5382ef1115ff11c1357fd21ab4aa12626efee"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "0ce37aea69df3fef60ac4c60154485fd9c7ea858", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0984639348c2fc98389746f6815e576cfcaacda8/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0984639348c2fc98389746f6815e576cfcaacda8/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=0984639348c2fc98389746f6815e576cfcaacda8", "patch": "@@ -22,13 +22,14 @@ pub type MaybeMutBorrowedLocals<'mir, 'tcx> = MaybeBorrowedLocals<MutBorrow<'mir\n /// function call or inline assembly.\n pub struct MaybeBorrowedLocals<K = AnyBorrow> {\n     kind: K,\n+    ignore_borrow_on_drop: bool,\n }\n \n impl MaybeBorrowedLocals {\n     /// A dataflow analysis that records whether a pointer or reference exists that may alias the\n     /// given local.\n     pub fn all_borrows() -> Self {\n-        MaybeBorrowedLocals { kind: AnyBorrow }\n+        MaybeBorrowedLocals { kind: AnyBorrow, ignore_borrow_on_drop: false }\n     }\n }\n \n@@ -43,13 +44,37 @@ impl MaybeMutBorrowedLocals<'mir, 'tcx> {\n         body: &'mir mir::Body<'tcx>,\n         param_env: ParamEnv<'tcx>,\n     ) -> Self {\n-        MaybeBorrowedLocals { kind: MutBorrow { body, tcx, param_env } }\n+        MaybeBorrowedLocals {\n+            kind: MutBorrow { body, tcx, param_env },\n+            ignore_borrow_on_drop: false,\n+        }\n     }\n }\n \n impl<K> MaybeBorrowedLocals<K> {\n+    /// During dataflow analysis, ignore the borrow that may occur when a place is dropped.\n+    ///\n+    /// Drop terminators may call custom drop glue (`Drop::drop`), which takes `&mut self` as a\n+    /// parameter. In the general case, a drop impl could launder that reference into the\n+    /// surrounding environment through a raw pointer, thus creating a valid `*mut` pointing to the\n+    /// dropped local. We are not yet willing to declare this particular case UB, so we must treat\n+    /// all dropped locals as mutably borrowed for now. See discussion on [#61069].\n+    ///\n+    /// In some contexts, we know that this borrow will never occur. For example, during\n+    /// const-eval, custom drop glue cannot be run. Code that calls this should document the\n+    /// assumptions that justify `Drop` terminators in this way.\n+    ///\n+    /// [#61069]: https://github.com/rust-lang/rust/pull/61069\n+    pub fn unsound_ignore_borrow_on_drop(self) -> Self {\n+        MaybeBorrowedLocals { ignore_borrow_on_drop: true, ..self }\n+    }\n+\n     fn transfer_function<'a, T>(&'a self, trans: &'a mut T) -> TransferFunction<'a, T, K> {\n-        TransferFunction { kind: &self.kind, trans }\n+        TransferFunction {\n+            kind: &self.kind,\n+            trans,\n+            ignore_borrow_on_drop: self.ignore_borrow_on_drop,\n+        }\n     }\n }\n \n@@ -112,6 +137,7 @@ impl<K> BottomValue for MaybeBorrowedLocals<K> {\n struct TransferFunction<'a, T, K> {\n     trans: &'a mut T,\n     kind: &'a K,\n+    ignore_borrow_on_drop: bool,\n }\n \n impl<T, K> Visitor<'tcx> for TransferFunction<'a, T, K>\n@@ -162,17 +188,12 @@ where\n         self.super_terminator(terminator, location);\n \n         match terminator.kind {\n-            // Drop terminators may call custom drop glue (`Drop::drop`), which takes `&mut self`\n-            // as a parameter. Hypothetically, a drop impl could launder that reference into the\n-            // surrounding environment through a raw pointer, thus creating a valid `*mut` pointing\n-            // to the dropped local. We are not yet willing to declare this particular case UB, so\n-            // we must treat all dropped locals as mutably borrowed for now. See discussion on\n-            // [#61069].\n-            //\n-            // [#61069]: https://github.com/rust-lang/rust/pull/61069\n             mir::TerminatorKind::Drop { location: dropped_place, .. }\n             | mir::TerminatorKind::DropAndReplace { location: dropped_place, .. } => {\n-                self.trans.gen(dropped_place.local);\n+                // See documentation for `unsound_ignore_borrow_on_drop` for an explanation.\n+                if !self.ignore_borrow_on_drop {\n+                    self.trans.gen(dropped_place.local);\n+                }\n             }\n \n             TerminatorKind::Abort"}, {"sha": "d4fa2b10152fee2fc5c47602d7c3bd1f1fa120b1", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0984639348c2fc98389746f6815e576cfcaacda8/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0984639348c2fc98389746f6815e576cfcaacda8/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=0984639348c2fc98389746f6815e576cfcaacda8", "patch": "@@ -141,7 +141,13 @@ impl Validator<'a, 'mir, 'tcx> {\n         let needs_drop = QualifCursor::new(NeedsDrop, item);\n         let has_mut_interior = QualifCursor::new(HasMutInterior, item);\n \n+        // We can use `unsound_ignore_borrow_on_drop` here because custom drop impls are not\n+        // allowed in a const.\n+        //\n+        // FIXME(ecstaticmorse): Someday we want to allow custom drop impls. How do we do this\n+        // without breaking stable code?\n         let indirectly_mutable = MaybeMutBorrowedLocals::mut_borrows_only(tcx, *body, param_env)\n+            .unsound_ignore_borrow_on_drop()\n             .into_engine(tcx, *body, def_id)\n             .iterate_to_fixpoint()\n             .into_results_cursor(*body);"}]}