{"sha": "362d71302615b07c96189e998a554e90d3f3506c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MmQ3MTMwMjYxNWIwN2M5NjE4OWU5OThhNTU0ZTkwZDNmMzUwNmM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T14:05:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T14:11:02Z"}, "message": "Fix remaining bench/debuginfo tests (and a few stragglers)", "tree": {"sha": "18b03d89af929b9d36823feb94a2320be7f5515f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18b03d89af929b9d36823feb94a2320be7f5515f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/362d71302615b07c96189e998a554e90d3f3506c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/362d71302615b07c96189e998a554e90d3f3506c", "html_url": "https://github.com/rust-lang/rust/commit/362d71302615b07c96189e998a554e90d3f3506c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/362d71302615b07c96189e998a554e90d3f3506c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "url": "https://api.github.com/repos/rust-lang/rust/commits/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "html_url": "https://github.com/rust-lang/rust/commit/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b"}], "stats": {"total": 168, "additions": 85, "deletions": 83}, "files": [{"sha": "4c3b3f42acaa9470b77c294bd9525e8adcf878ab", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -75,7 +75,7 @@ fn read_line() {\n     let mut path = Path::new(env!(\"CFG_SRC_DIR\"));\n     path.push(\"src/test/bench/shootout-k-nucleotide.data\");\n \n-    for _ in 0u..3 {\n+    for _ in 0..3 {\n         let mut reader = BufferedReader::new(File::open(&path).unwrap());\n         for _line in reader.lines() {\n         }\n@@ -88,7 +88,7 @@ fn vec_plus() {\n     let mut v = Vec::new();\n     let mut i = 0;\n     while i < 1500 {\n-        let rv = repeat(i).take(r.gen_range(0u, i + 1)).collect::<Vec<_>>();\n+        let rv = repeat(i).take(r.gen_range(0, i + 1)).collect::<Vec<_>>();\n         if r.gen() {\n             v.extend(rv.into_iter());\n         } else {\n@@ -106,7 +106,7 @@ fn vec_append() {\n     let mut v = Vec::new();\n     let mut i = 0;\n     while i < 1500 {\n-        let rv = repeat(i).take(r.gen_range(0u, i + 1)).collect::<Vec<_>>();\n+        let rv = repeat(i).take(r.gen_range(0, i + 1)).collect::<Vec<_>>();\n         if r.gen() {\n             let mut t = v.clone();\n             t.push_all(&rv);\n@@ -125,8 +125,8 @@ fn vec_push_all() {\n     let mut r = rand::thread_rng();\n \n     let mut v = Vec::new();\n-    for i in 0u..1500 {\n-        let mut rv = repeat(i).take(r.gen_range(0u, i + 1)).collect::<Vec<_>>();\n+    for i in 0..1500 {\n+        let mut rv = repeat(i).take(r.gen_range(0, i + 1)).collect::<Vec<_>>();\n         if r.gen() {\n             v.push_all(&rv);\n         }\n@@ -139,7 +139,7 @@ fn vec_push_all() {\n \n fn is_utf8_ascii() {\n     let mut v : Vec<u8> = Vec::new();\n-    for _ in 0u..20000 {\n+    for _ in 0..20000 {\n         v.push('b' as u8);\n         if str::from_utf8(&v).is_err() {\n             panic!(\"from_utf8 panicked\");\n@@ -150,7 +150,7 @@ fn is_utf8_ascii() {\n fn is_utf8_multibyte() {\n     let s = \"b\u00a2\u20ac\ud852\udf62\";\n     let mut v : Vec<u8> = Vec::new();\n-    for _ in 0u..5000 {\n+    for _ in 0..5000 {\n         v.push_all(s.as_bytes());\n         if str::from_utf8(&v).is_err() {\n             panic!(\"from_utf8 panicked\");"}, {"sha": "287958f43fb8deee3a67f735b7ce081313136ebd", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -14,15 +14,15 @@ fn main() {\n     let args = env::args();\n     let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"10000000\".to_string())\n-    } else if args.len() <= 1u {\n+    } else if args.len() <= 1 {\n         vec!(\"\".to_string(), \"100000\".to_string())\n     } else {\n         args.collect()\n     };\n \n     let n = args[1].parse().unwrap();\n \n-    for i in 0u..n {\n+    for i in 0..n {\n         let x = i.to_string();\n         println!(\"{}\", x);\n     }"}, {"sha": "b8d8f0cc9e6a9511acb6c5c86681c586174316d0", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -32,7 +32,7 @@ enum request {\n }\n \n fn server(requests: &Receiver<request>, responses: &Sender<uint>) {\n-    let mut count = 0u;\n+    let mut count = 0;\n     let mut done = false;\n     while !done {\n         match requests.recv() {\n@@ -61,10 +61,10 @@ fn run(args: &[String]) {\n     let dur = Duration::span(|| {\n         let (to_child, to_parent, from_parent) = p.take().unwrap();\n         let mut worker_results = Vec::new();\n-        for _ in 0u..workers {\n+        for _ in 0..workers {\n             let to_child = to_child.clone();\n             worker_results.push(thread::spawn(move|| {\n-                for _ in 0u..size / workers {\n+                for _ in 0..size / workers {\n                     //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n                     to_child.send(request::bytes(num_bytes)).unwrap();\n                 }"}, {"sha": "3642eb82fdb0517f4200f1b9c1676e7348380a91", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -57,7 +57,7 @@ fn run(args: &[String]) {\n         let from_parent = if workers == 1 {\n             let (to_child, from_parent) = channel();\n             worker_results.push(thread::spawn(move|| {\n-                for _ in 0u..size / workers {\n+                for _ in 0..size / workers {\n                     //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n                     to_child.send(request::bytes(num_bytes));\n                 }\n@@ -66,10 +66,10 @@ fn run(args: &[String]) {\n             from_parent\n         } else {\n             let (to_child, from_parent) = channel();\n-            for _ in 0u..workers {\n+            for _ in 0..workers {\n                 let to_child = to_child.clone();\n                 worker_results.push(thread::spawn(move|| {\n-                    for _ in 0u..size / workers {\n+                    for _ in 0..size / workers {\n                         //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n                         to_child.send(request::bytes(num_bytes));\n                     }"}, {"sha": "a980b7ed9e75d0d72446f04b633ccc8505a0bbfc", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -50,7 +50,7 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n     let mut num_chan = Some(num_chan);\n     let mut num_port = Some(num_port);\n     // Send/Receive lots of messages.\n-    for j in 0u..count {\n+    for j in 0..count {\n         //println!(\"task %?, iter %?\", i, j);\n         let num_chan2 = num_chan.take().unwrap();\n         let num_port2 = num_port.take().unwrap();\n@@ -84,7 +84,7 @@ fn main() {\n         // create the ring\n         let mut futures = Vec::new();\n \n-        for i in 1u..num_tasks {\n+        for i in 1..num_tasks {\n             //println!(\"spawning %?\", i);\n             let (new_chan, num_port) = init();\n             let num_chan_2 = num_chan.clone();"}, {"sha": "53c52ae3019f015a11204a29d1132b145fb0b4de", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -113,8 +113,8 @@ fn main() {\n         }\n     }\n \n-    for y in 0u..256 {\n-        for x in 0u..256 {\n+    for y in 0..256 {\n+        for x in 0..256 {\n             let idx = (pixels[y*256+x] / 0.2) as uint;\n             print!(\"{}\", symbols[idx]);\n         }"}, {"sha": "73e7c8eb073d1884d23be37a9c5de2fea9417489", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -233,7 +233,7 @@ fn main() {\n         std::env::args()\n                        .nth(1)\n                        .and_then(|arg| arg.parse().ok())\n-                       .unwrap_or(600us)\n+                       .unwrap_or(600)\n     };\n \n     print_complements();"}, {"sha": "3ea4a10ea8169f7d148f287b937d599616773f1a", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -77,7 +77,7 @@ fn sort_and_fmt(mm: &HashMap<Vec<u8> , uint>, total: uint) -> String {\n fn find(mm: &HashMap<Vec<u8> , uint>, key: String) -> uint {\n    let key = key.into_ascii_lowercase();\n    match mm.get(key.as_bytes()) {\n-      option::Option::None      => { return 0u; }\n+      option::Option::None      => { return 0; }\n       option::Option::Some(&num) => { return num; }\n    }\n }\n@@ -98,23 +98,23 @@ fn update_freq(mm: &mut HashMap<Vec<u8> , uint>, key: &[u8]) {\n fn windows_with_carry<F>(bb: &[u8], nn: uint, mut it: F) -> Vec<u8> where\n     F: FnMut(&[u8]),\n {\n-   let mut ii = 0u;\n+   let mut ii = 0;\n \n    let len = bb.len();\n-   while ii < len - (nn - 1u) {\n+   while ii < len - (nn - 1) {\n       it(&bb[ii..ii+nn]);\n-      ii += 1u;\n+      ii += 1;\n    }\n \n-   return bb[len - (nn - 1u)..len].to_vec();\n+   return bb[len - (nn - 1)..len].to_vec();\n }\n \n fn make_sequence_processor(sz: uint,\n                            from_parent: &Receiver<Vec<u8>>,\n                            to_parent: &Sender<String>) {\n    let mut freqs: HashMap<Vec<u8>, uint> = HashMap::new();\n    let mut carry = Vec::new();\n-   let mut total: uint = 0u;\n+   let mut total: uint = 0;\n \n    let mut line: Vec<u8>;\n \n@@ -126,20 +126,20 @@ fn make_sequence_processor(sz: uint,\n        carry.push_all(&line);\n        carry = windows_with_carry(&carry, sz, |window| {\n            update_freq(&mut freqs, window);\n-           total += 1u;\n+           total += 1;\n        });\n    }\n \n    let buffer = match sz {\n-       1u => { sort_and_fmt(&freqs, total) }\n-       2u => { sort_and_fmt(&freqs, total) }\n-       3u => { format!(\"{}\\t{}\", find(&freqs, \"GGT\".to_string()), \"GGT\") }\n-       4u => { format!(\"{}\\t{}\", find(&freqs, \"GGTA\".to_string()), \"GGTA\") }\n-       6u => { format!(\"{}\\t{}\", find(&freqs, \"GGTATT\".to_string()), \"GGTATT\") }\n-      12u => { format!(\"{}\\t{}\", find(&freqs, \"GGTATTTTAATT\".to_string()), \"GGTATTTTAATT\") }\n-      18u => { format!(\"{}\\t{}\", find(&freqs, \"GGTATTTTAATTTATAGT\".to_string()),\n+       1 => { sort_and_fmt(&freqs, total) }\n+       2 => { sort_and_fmt(&freqs, total) }\n+       3 => { format!(\"{}\\t{}\", find(&freqs, \"GGT\".to_string()), \"GGT\") }\n+       4 => { format!(\"{}\\t{}\", find(&freqs, \"GGTA\".to_string()), \"GGTA\") }\n+       6 => { format!(\"{}\\t{}\", find(&freqs, \"GGTATT\".to_string()), \"GGTATT\") }\n+      12 => { format!(\"{}\\t{}\", find(&freqs, \"GGTATTTTAATT\".to_string()), \"GGTATTTTAATT\") }\n+      18 => { format!(\"{}\\t{}\", find(&freqs, \"GGTATTTTAATTTATAGT\".to_string()),\n                        \"GGTATTTTAATTTATAGT\") }\n-        _ => { \"\".to_string() }\n+       _ => { \"\".to_string() }\n    };\n \n     to_parent.send(buffer).unwrap();\n@@ -158,7 +158,7 @@ fn main() {\n     let mut rdr = BufferedReader::new(rdr);\n \n     // initialize each sequence sorter\n-    let sizes = vec!(1u,2,3,4,6,12,18);\n+    let sizes: Vec<usize> = vec!(1,2,3,4,6,12,18);\n     let mut streams = (0..sizes.len()).map(|_| {\n         Some(channel::<String>())\n     }).collect::<Vec<_>>();\n@@ -177,7 +177,7 @@ fn main() {\n         });\n \n         to_child\n-    }).collect::<Vec<Sender<Vec<u8> >> >();\n+    }).collect::<Vec<Sender<Vec<u8>>>>();\n \n \n    // latch stores true after we've started\n@@ -187,7 +187,7 @@ fn main() {\n    for line in rdr.lines() {\n        let line = line.unwrap().trim().to_string();\n \n-       if line.len() == 0u { continue; }\n+       if line.len() == 0 { continue; }\n \n        match (line.as_bytes()[0] as char, proc_mode) {\n "}, {"sha": "fb75c67253c6d057d37e962e80d9e5fe7ad03910", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -301,7 +301,7 @@ fn main() {\n     };\n     let input = Arc::new(input);\n \n-    let nb_freqs: Vec<_> = (1u..3).map(|i| {\n+    let nb_freqs: Vec<_> = (1..3).map(|i| {\n         let input = input.clone();\n         (i, thread::scoped(move|| generate_frequencies(&input, i)))\n     }).collect();"}, {"sha": "73dce2910c9b4913260e26cb02ed235f19a04c50", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -222,7 +222,7 @@ fn to_vec(raw_sol: &List<u64>) -> Vec<u8> {\n     let mut sol = repeat('.' as u8).take(50).collect::<Vec<_>>();\n     for &m in raw_sol.iter() {\n         let id = '0' as u8 + get_id(m);\n-        for i in 0us..50 {\n+        for i in 0..50 {\n             if m & 1 << i != 0 {\n                 sol[i] = id;\n             }\n@@ -297,7 +297,7 @@ fn search(\n     let masks_at = &masks[i];\n \n     // for every unused piece\n-    for id in (0us..10).filter(|&id| board & (1 << (id + 50)) == 0) {\n+    for id in (0..10).filter(|&id| board & (1 << (id + 50)) == 0) {\n         // for each mask that fits on the board\n         for m in masks_at[id].iter().filter(|&m| board & *m == 0) {\n             // This check is too costly."}, {"sha": "f7514a3e8848d16788fc26152f6409f82010fc88", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -69,7 +69,7 @@ fn spectralnorm(n: uint) -> f64 {\n     let mut u = repeat(1.0).take(n).collect::<Vec<_>>();\n     let mut v = u.clone();\n     let mut tmp = v.clone();\n-    for _ in 0u..10 {\n+    for _ in 0..10 {\n         mult_AtAv(&u, &mut v, &mut tmp);\n         mult_AtAv(&v, &mut u, &mut tmp);\n     }"}, {"sha": "b45f241e8e5d4291a7d72df40faf1535ac2d3090", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -49,8 +49,8 @@ impl Sudoku {\n     }\n \n     pub fn from_vec(vec: &[[u8;9];9]) -> Sudoku {\n-        let g = (0..9u).map(|i| {\n-            (0..9u).map(|j| { vec[i][j] }).collect()\n+        let g = (0..9).map(|i| {\n+            (0..9).map(|j| { vec[i][j] }).collect()\n         }).collect();\n         return Sudoku::new(g)\n     }\n@@ -68,7 +68,7 @@ impl Sudoku {\n                                        .split(',')\n                                        .collect();\n \n-            if comps.len() == 3u {\n+            if comps.len() == 3 {\n                 let row = comps[0].parse::<u8>().unwrap();\n                 let col = comps[1].parse::<u8>().unwrap();\n                 g[row as uint][col as uint] = comps[2].parse().unwrap();\n@@ -102,7 +102,7 @@ impl Sudoku {\n             }\n         }\n \n-        let mut ptr = 0u;\n+        let mut ptr = 0;\n         let end = work.len();\n         while ptr < end {\n             let (row, col) = work[ptr];\n@@ -111,11 +111,11 @@ impl Sudoku {\n                                 (1 as u8);\n             if self.next_color(row, col, the_color) {\n                 //  yes: advance work list\n-                ptr = ptr + 1u;\n+                ptr = ptr + 1;\n             } else {\n                 // no: redo this field aft recoloring pred; unless there is none\n-                if ptr == 0u { panic!(\"No solution found for this sudoku\"); }\n-                ptr = ptr - 1u;\n+                if ptr == 0 { panic!(\"No solution found for this sudoku\"); }\n+                ptr = ptr - 1;\n             }\n         }\n     }"}, {"sha": "b5aa8e8d791d22003eb1bc1d695bf172e3e228c7", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -12,10 +12,10 @@ use std::env;\n use std::thread;\n \n fn f(n: usize) {\n-    let mut i = 0u;\n+    let mut i = 0;\n     while i < n {\n         let _ = thread::spawn(move|| g()).join();\n-        i += 1u;\n+        i += 1;\n     }\n }\n "}, {"sha": "d47dee14f55a3f331a1da3ddb56e0528393ef32c", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -139,7 +139,7 @@ fn main() {\n     let mixed_enum_tuple_var = MixedEnumTupleVar(106, 107, false);\n     let mixed_enum_struct_var = MixedEnumStructVar { field1: 108.5, field2: 109 };\n \n-    let some = Some(110u);\n+    let some = Some(110_usize);\n     let none: Option<int> = None;\n     let some_fat = Some(\"abc\");\n     let none_fat: Option<&'static str> = None;"}, {"sha": "e097ec2adb1a702134c6115b51ef558adbe813a3", "filename": "src/test/debuginfo/lexical-scope-in-parameterless-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -18,6 +18,6 @@\n // Nothing to do here really, just make sure it compiles. See issue #8513.\n fn main() {\n     let _ = ||();\n-    let _ = (1u..3).map(|_| 5);\n+    let _ = (1_usize..3).map(|_| 5);\n }\n "}, {"sha": "5b2045d59dc771d0c53ed5184194eaf156765070", "filename": "src/test/debuginfo/no-debug-attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -26,7 +26,7 @@\n #![omit_gdb_pretty_printer_section]\n \n fn function_with_debuginfo() {\n-    let abc = 10u;\n+    let abc = 10_usize;\n     return (); // #break\n }\n "}, {"sha": "03336c3586094f4fa861af14ca0595e26735e5a1", "filename": "src/test/debuginfo/option-like-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -129,18 +129,18 @@ fn main() {\n     let some_str: Option<&'static str> = Some(\"abc\");\n     let none_str: Option<&'static str> = None;\n \n-    let some: Option<&u32> = Some(unsafe { std::mem::transmute(0x12345678u) });\n+    let some: Option<&u32> = Some(unsafe { std::mem::transmute(0x12345678_usize) });\n     let none: Option<&u32> = None;\n \n-    let full = MoreFields::Full(454545, unsafe { std::mem::transmute(0x87654321u) }, 9988);\n+    let full = MoreFields::Full(454545, unsafe { std::mem::transmute(0x87654321_usize) }, 9988);\n \n     let empty = MoreFields::Empty;\n     let empty_gdb: &MoreFieldsRepr = unsafe { std::mem::transmute(&MoreFields::Empty) };\n \n     let droid = NamedFields::Droid {\n         id: 675675,\n         range: 10000001,\n-        internals: unsafe { std::mem::transmute(0x43218765u) }\n+        internals: unsafe { std::mem::transmute(0x43218765_usize) }\n     };\n \n     let void_droid = NamedFields::Void;"}, {"sha": "a592484f1a4c66510785d438b3eb17b1ad9a1aa8", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -280,9 +280,9 @@ fn main() {\n \n     // Vectors\n     let fixed_size_vec1 = ([Struct1, Struct1, Struct1], 0i16);\n-    let fixed_size_vec2 = ([0u, 1u, 2u], 0i16);\n+    let fixed_size_vec2 = ([0_usize, 1, 2], 0i16);\n \n-    let vec1 = vec![0u, 2u, 3u];\n+    let vec1 = vec![0_usize, 2, 3];\n     let slice1 = &*vec1;\n     let vec2 = vec![Mod1::Variant2_2(Struct1)];\n     let slice2 = &*vec2;\n@@ -301,29 +301,29 @@ fn main() {\n         &mut Trait2<Mod1::Mod2::Struct3, GenericStruct<usize, isize>>;\n \n     // Bare Functions\n-    let rust_fn = (rust_fn, 0u);\n-    let extern_c_fn = (extern_c_fn, 0u);\n-    let unsafe_fn = (unsafe_fn, 0u);\n-    let extern_stdcall_fn = (extern_stdcall_fn, 0u);\n+    let rust_fn = (rust_fn, 0_usize);\n+    let extern_c_fn = (extern_c_fn, 0_usize);\n+    let unsafe_fn = (unsafe_fn, 0_usize);\n+    let extern_stdcall_fn = (extern_stdcall_fn, 0_usize);\n \n-    let rust_fn_with_return_value = (rust_fn_with_return_value, 0u);\n-    let extern_c_fn_with_return_value = (extern_c_fn_with_return_value, 0u);\n-    let unsafe_fn_with_return_value = (unsafe_fn_with_return_value, 0u);\n-    let extern_stdcall_fn_with_return_value = (extern_stdcall_fn_with_return_value, 0u);\n+    let rust_fn_with_return_value = (rust_fn_with_return_value, 0_usize);\n+    let extern_c_fn_with_return_value = (extern_c_fn_with_return_value, 0_usize);\n+    let unsafe_fn_with_return_value = (unsafe_fn_with_return_value, 0_usize);\n+    let extern_stdcall_fn_with_return_value = (extern_stdcall_fn_with_return_value, 0_usize);\n \n-    let generic_function_int = (generic_function::<isize>, 0u);\n-    let generic_function_struct3 = (generic_function::<Mod1::Mod2::Struct3>, 0u);\n+    let generic_function_int = (generic_function::<isize>, 0_usize);\n+    let generic_function_struct3 = (generic_function::<Mod1::Mod2::Struct3>, 0_usize);\n \n-    let variadic_function = (printf, 0u);\n+    let variadic_function = (printf, 0_usize);\n \n     // Closures\n     // I (mw) am a bit unclear about the current state of closures, their\n     // various forms (boxed, unboxed, proc, capture-by-ref, by-val, once) and\n     // how that maps to rustc's internal representation of these forms.\n     // Once closures have reached their 1.0 form, the tests below should\n     // probably be expanded.\n-    let closure1 = (|x:isize| {}, 0u);\n-    let closure2 = (|x:i8, y: f32| { (x as f32) + y }, 0u);\n+    let closure1 = (|x:isize| {}, 0_usize);\n+    let closure2 = (|x:i8, y: f32| { (x as f32) + y }, 0_usize);\n \n     zzz(); // #break\n }"}, {"sha": "3c442c95e0f59aa0329cc2029ad13207ee0c7c54", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -67,7 +67,7 @@ fn main() {\n \n     closure();\n \n-    let constant2 = 6u;\n+    let constant2 = 6_usize;\n \n     // The `self` argument of the following closure should be passed by value\n     // to FnOnce::call_once(self, args), which gets translated a bit differently"}, {"sha": "58f6ae960b1895b2835da025c825d8bae1045872", "filename": "src/test/pretty/empty-lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fpretty%2Fempty-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fpretty%2Fempty-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fempty-lines.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -13,5 +13,5 @@\n \n fn a() -> uint {\n \n-    1u\n+    1usize\n }"}, {"sha": "83ee2bd08f4adbcad507ae75e4260aa0a359c6c8", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -23,15 +23,15 @@\n pub fn foo(_: [i32; (3 as usize)]) { }\n \n pub fn bar() {\n-    const FOO: usize = ((5usize as usize) - (4usize as usize) as usize);\n+    const FOO: usize = ((5 as usize) - (4 as usize) as usize);\n     let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);\n \n-    let _: [(); (1us as usize)] = ([(() as ())] as [(); 1]);\n+    let _: [(); (1usize as usize)] = ([(() as ())] as [(); 1]);\n \n     let _ =\n         (((&((([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])) as [i32; 3])\n               as &[i32; 3]) as *const _ as *const [i32; 3]) as\n-            *const [i32; (3us as usize)] as *const [i32; 3]);\n+            *const [i32; (3usize as usize)] as *const [i32; 3]);\n \n \n \n@@ -79,16 +79,16 @@\n                                                                                                      core::fmt::Arguments<'_>))\n         as collections::string::String);\n }\n-pub type Foo = [i32; (3us as usize)];\n+pub type Foo = [i32; (3 as usize)];\n pub struct Bar {\n-    pub x: [i32; (3us as usize)],\n+    pub x: [i32; (3 as usize)],\n }\n pub struct TupleBar([i32; (4 as usize)]);\n pub enum Baz { BazVariant([i32; (5 as usize)]), }\n pub fn id<T>(x: T) -> T { (x as T) }\n pub fn use_id() {\n     let _ =\n-        ((id::<[i32; (3us as usize)]> as\n+        ((id::<[i32; (3 as usize)]> as\n              fn([i32; 3]) -> [i32; 3] {id})(([(1 as i32), (2 as i32),\n                                               (3 as i32)] as [i32; 3])) as\n             [i32; 3]);"}, {"sha": "3aa2f4826b24cdaadd5ac816f3cad62793c3a13e", "filename": "src/test/pretty/issue-4264.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fpretty%2Fissue-4264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Fpretty%2Fissue-4264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -20,9 +20,9 @@ pub fn bar() {\n     const FOO: usize = 5 - 4;\n     let _: [(); FOO] = [()];\n \n-    let _ : [(); 1us] = [()];\n+    let _ : [(); 1usize] = [()];\n \n-    let _ = &([1,2,3]) as *const _ as *const [i32; 3us];\n+    let _ = &([1,2,3]) as *const _ as *const [i32; 3usize];\n \n     format!(\"test\");\n }"}, {"sha": "f94da9fc747e695fb850e7d2f8f5645df66617d5", "filename": "src/test/run-pass/drop-trait-enum.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362d71302615b07c96189e998a554e90d3f3506c/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs?ref=362d71302615b07c96189e998a554e90d3f3506c", "patch": "@@ -82,7 +82,9 @@ pub fn main() {\n             let mut v = Foo::NestedVariant(box 42usize, SendOnDrop {\n                 sender: sender.clone()\n             }, sender.clone());\n-            v = Foo::NestedVariant(box 42_usize, SendOnDrop { sender: sender.clone() }, sender.clone());\n+            v = Foo::NestedVariant(box 42_usize,\n+                                   SendOnDrop { sender: sender.clone() },\n+                                   sender.clone());\n             v = Foo::SimpleVariant(sender.clone());\n             v = Foo::FailingVariant { on_drop: SendOnDrop { sender: sender } };\n         })"}]}