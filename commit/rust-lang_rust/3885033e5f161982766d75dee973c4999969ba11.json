{"sha": "3885033e5f161982766d75dee973c4999969ba11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ODUwMzNlNWYxNjE5ODI3NjZkNzVkZWU5NzNjNDk5OTk2OWJhMTE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-13T22:41:11Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-13T23:32:33Z"}, "message": "Split up `booleans` ui test", "tree": {"sha": "ee80de641c8ba8606000581f69824dba9d90838e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee80de641c8ba8606000581f69824dba9d90838e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3885033e5f161982766d75dee973c4999969ba11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3885033e5f161982766d75dee973c4999969ba11", "html_url": "https://github.com/rust-lang/rust/commit/3885033e5f161982766d75dee973c4999969ba11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3885033e5f161982766d75dee973c4999969ba11/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73e525019db9c27a39134dc0cf965724ac6b6351", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e525019db9c27a39134dc0cf965724ac6b6351", "html_url": "https://github.com/rust-lang/rust/commit/73e525019db9c27a39134dc0cf965724ac6b6351"}], "stats": {"total": 642, "additions": 337, "deletions": 305}, "files": [{"sha": "05ec6c031479a2d9baabbb0ea1262f1af60ffdd4", "filename": "tests/ui/booleans.stderr", "status": "removed", "additions": 0, "deletions": 244, "changes": 244, "blob_url": "https://github.com/rust-lang/rust/blob/73e525019db9c27a39134dc0cf965724ac6b6351/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73e525019db9c27a39134dc0cf965724ac6b6351/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=73e525019db9c27a39134dc0cf965724ac6b6351", "patch": "@@ -1,244 +0,0 @@\n-error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:10:13\n-   |\n-LL |     let _ = a && b || a;\n-   |             ^^^^^^^^^^^ help: it would look like the following: `a`\n-   |\n-   = note: `-D clippy::logic-bug` implied by `-D warnings`\n-help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:10:18\n-   |\n-LL |     let _ = a && b || a;\n-   |                  ^\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:12:13\n-   |\n-LL |     let _ = !true;\n-   |             ^^^^^ help: try: `false`\n-   |\n-   = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:13:13\n-   |\n-LL |     let _ = !false;\n-   |             ^^^^^^ help: try: `true`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:14:13\n-   |\n-LL |     let _ = !!a;\n-   |             ^^^ help: try: `a`\n-\n-error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:15:13\n-   |\n-LL |     let _ = false && a;\n-   |             ^^^^^^^^^^ help: it would look like the following: `false`\n-   |\n-help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:15:22\n-   |\n-LL |     let _ = false && a;\n-   |                      ^\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:16:13\n-   |\n-LL |     let _ = false || a;\n-   |             ^^^^^^^^^^ help: try: `a`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:21:13\n-   |\n-LL |     let _ = !(!a && b);\n-   |             ^^^^^^^^^^ help: try: `a || !b`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:22:13\n-   |\n-LL |     let _ = !(!a || b);\n-   |             ^^^^^^^^^^ help: try: `a && !b`\n-\n-error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:32:13\n-   |\n-LL |     let _ = a == b && a != b;\n-   |             ^^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n-   |\n-help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:32:13\n-   |\n-LL |     let _ = a == b && a != b;\n-   |             ^^^^^^\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:33:13\n-   |\n-LL |     let _ = a == b && c == 5 && a == b;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try\n-   |\n-LL |     let _ = a == b && c == 5;\n-   |             ^^^^^^^^^^^^^^^^\n-LL |     let _ = !(a != b || c != 5);\n-   |             ^^^^^^^^^^^^^^^^^^^\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:34:13\n-   |\n-LL |     let _ = a == b || c == 5 || a == b;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try\n-   |\n-LL |     let _ = a == b || c == 5;\n-   |             ^^^^^^^^^^^^^^^^\n-LL |     let _ = !(a != b && c != 5);\n-   |             ^^^^^^^^^^^^^^^^^^^\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:35:13\n-   |\n-LL |     let _ = a == b && c == 5 && b == a;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try\n-   |\n-LL |     let _ = a == b && c == 5;\n-   |             ^^^^^^^^^^^^^^^^\n-LL |     let _ = !(a != b || c != 5);\n-   |             ^^^^^^^^^^^^^^^^^^^\n-\n-error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:36:13\n-   |\n-LL |     let _ = a < b && a >= b;\n-   |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n-   |\n-help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:36:13\n-   |\n-LL |     let _ = a < b && a >= b;\n-   |             ^^^^^\n-\n-error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:37:13\n-   |\n-LL |     let _ = a > b && a <= b;\n-   |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n-   |\n-help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:37:13\n-   |\n-LL |     let _ = a > b && a <= b;\n-   |             ^^^^^\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:39:13\n-   |\n-LL |     let _ = a != b || !(a != b || c == d);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try\n-   |\n-LL |     let _ = a != b || c != d;\n-   |             ^^^^^^^^^^^^^^^^\n-LL |     let _ = !(a == b && c == d);\n-   |             ^^^^^^^^^^^^^^^^^^^\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:40:13\n-   |\n-LL |     let _ = a != b && !(a != b && c == d);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try\n-   |\n-LL |     let _ = a != b && c != d;\n-   |             ^^^^^^^^^^^^^^^^\n-LL |     let _ = !(a == b || c == d);\n-   |             ^^^^^^^^^^^^^^^^^^^\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:48:13\n-   |\n-LL |     let _ = !a.is_some();\n-   |             ^^^^^^^^^^^^ help: try: `a.is_none()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:50:13\n-   |\n-LL |     let _ = !a.is_none();\n-   |             ^^^^^^^^^^^^ help: try: `a.is_some()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:52:13\n-   |\n-LL |     let _ = !b.is_err();\n-   |             ^^^^^^^^^^^ help: try: `b.is_ok()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:54:13\n-   |\n-LL |     let _ = !b.is_ok();\n-   |             ^^^^^^^^^^ help: try: `b.is_err()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:56:13\n-   |\n-LL |     let _ = !(a.is_some() && !c);\n-   |             ^^^^^^^^^^^^^^^^^^^^ help: try: `a.is_none() || c`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:57:13\n-   |\n-LL |     let _ = !(a.is_some() || !c);\n-   |             ^^^^^^^^^^^^^^^^^^^^ help: try: `a.is_none() && c`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:58:26\n-   |\n-LL |     let _ = !(!c ^ c) || !a.is_some();\n-   |                          ^^^^^^^^^^^^ help: try: `a.is_none()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:59:25\n-   |\n-LL |     let _ = (!c ^ c) || !a.is_some();\n-   |                         ^^^^^^^^^^^^ help: try: `a.is_none()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:60:23\n-   |\n-LL |     let _ = !c ^ c || !a.is_some();\n-   |                       ^^^^^^^^^^^^ help: try: `a.is_none()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:132:8\n-   |\n-LL |     if !res.is_ok() {}\n-   |        ^^^^^^^^^^^^ help: try: `res.is_err()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:133:8\n-   |\n-LL |     if !res.is_err() {}\n-   |        ^^^^^^^^^^^^^ help: try: `res.is_ok()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:136:8\n-   |\n-LL |     if !res.is_some() {}\n-   |        ^^^^^^^^^^^^^^ help: try: `res.is_none()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:137:8\n-   |\n-LL |     if !res.is_none() {}\n-   |        ^^^^^^^^^^^^^^ help: try: `res.is_some()`\n-\n-error: aborting due to 29 previous errors\n-"}, {"sha": "b4163d776e73abf4da6f4c565b50d4386052a1c5", "filename": "tests/ui/logic_bug.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3885033e5f161982766d75dee973c4999969ba11/tests%2Fui%2Flogic_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3885033e5f161982766d75dee973c4999969ba11/tests%2Fui%2Flogic_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flogic_bug.rs?ref=3885033e5f161982766d75dee973c4999969ba11", "patch": "@@ -0,0 +1,26 @@\n+#![allow(unused, clippy::many_single_char_names)]\n+#![warn(clippy::logic_bug)]\n+\n+fn main() {\n+    let a: bool = unimplemented!();\n+    let b: bool = unimplemented!();\n+    let c: bool = unimplemented!();\n+    let d: bool = unimplemented!();\n+    let e: bool = unimplemented!();\n+    let _ = a && b || a;\n+    let _ = !(a && b);\n+    let _ = false && a;\n+    // don't lint on cfgs\n+    let _ = cfg!(you_shall_not_not_pass) && a;\n+    let _ = a || !b || !c || !d || !e;\n+    let _ = !(a && b || c);\n+}\n+\n+fn equality_stuff() {\n+    let a: i32 = unimplemented!();\n+    let b: i32 = unimplemented!();\n+    let _ = a == b && a != b;\n+    let _ = a < b && a >= b;\n+    let _ = a > b && a <= b;\n+    let _ = a > b && a == b;\n+}"}, {"sha": "8f55e1c8ad859ee7f2ca6c12d52989717515de1f", "filename": "tests/ui/logic_bug.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3885033e5f161982766d75dee973c4999969ba11/tests%2Fui%2Flogic_bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3885033e5f161982766d75dee973c4999969ba11/tests%2Fui%2Flogic_bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flogic_bug.stderr?ref=3885033e5f161982766d75dee973c4999969ba11", "patch": "@@ -0,0 +1,63 @@\n+error: this boolean expression contains a logic bug\n+  --> $DIR/logic_bug.rs:10:13\n+   |\n+LL |     let _ = a && b || a;\n+   |             ^^^^^^^^^^^ help: it would look like the following: `a`\n+   |\n+   = note: `-D clippy::logic-bug` implied by `-D warnings`\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/logic_bug.rs:10:18\n+   |\n+LL |     let _ = a && b || a;\n+   |                  ^\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/logic_bug.rs:12:13\n+   |\n+LL |     let _ = false && a;\n+   |             ^^^^^^^^^^ help: it would look like the following: `false`\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/logic_bug.rs:12:22\n+   |\n+LL |     let _ = false && a;\n+   |                      ^\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/logic_bug.rs:22:13\n+   |\n+LL |     let _ = a == b && a != b;\n+   |             ^^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/logic_bug.rs:22:13\n+   |\n+LL |     let _ = a == b && a != b;\n+   |             ^^^^^^\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/logic_bug.rs:23:13\n+   |\n+LL |     let _ = a < b && a >= b;\n+   |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/logic_bug.rs:23:13\n+   |\n+LL |     let _ = a < b && a >= b;\n+   |             ^^^^^\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/logic_bug.rs:24:13\n+   |\n+LL |     let _ = a > b && a <= b;\n+   |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/logic_bug.rs:24:13\n+   |\n+LL |     let _ = a > b && a <= b;\n+   |             ^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "7ea154cb9b0187346be5e41da300559a6050866d", "filename": "tests/ui/nonminimal_bool.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3885033e5f161982766d75dee973c4999969ba11/tests%2Fui%2Fnonminimal_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3885033e5f161982766d75dee973c4999969ba11/tests%2Fui%2Fnonminimal_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool.rs?ref=3885033e5f161982766d75dee973c4999969ba11", "patch": "@@ -0,0 +1,52 @@\n+#![allow(unused, clippy::many_single_char_names)]\n+#![warn(clippy::nonminimal_bool)]\n+\n+fn main() {\n+    let a: bool = unimplemented!();\n+    let b: bool = unimplemented!();\n+    let c: bool = unimplemented!();\n+    let d: bool = unimplemented!();\n+    let e: bool = unimplemented!();\n+    let _ = !true;\n+    let _ = !false;\n+    let _ = !!a;\n+    let _ = false || a;\n+    // don't lint on cfgs\n+    let _ = cfg!(you_shall_not_not_pass) && a;\n+    let _ = a || !b || !c || !d || !e;\n+    let _ = !(!a && b);\n+    let _ = !(!a || b);\n+    let _ = !a && !(b && c);\n+}\n+\n+fn equality_stuff() {\n+    let a: i32 = unimplemented!();\n+    let b: i32 = unimplemented!();\n+    let c: i32 = unimplemented!();\n+    let d: i32 = unimplemented!();\n+    let _ = a == b && c == 5 && a == b;\n+    let _ = a == b || c == 5 || a == b;\n+    let _ = a == b && c == 5 && b == a;\n+    let _ = a != b || !(a != b || c == d);\n+    let _ = a != b && !(a != b && c == d);\n+}\n+\n+fn issue3847(a: u32, b: u32) -> bool {\n+    const THRESHOLD: u32 = 1_000;\n+\n+    if a < THRESHOLD && b >= THRESHOLD || a >= THRESHOLD && b < THRESHOLD {\n+        return false;\n+    }\n+    true\n+}\n+\n+fn issue4548() {\n+    fn f(_i: u32, _j: u32) -> u32 {\n+        unimplemented!();\n+    }\n+\n+    let i = 0;\n+    let j = 0;\n+\n+    if i != j && f(i, j) != 0 || i == j && f(i, j) != 1 {}\n+}"}, {"sha": "d34d106cb2fbb1a11d245224b2ad622a287c8f8b", "filename": "tests/ui/nonminimal_bool.stderr", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/3885033e5f161982766d75dee973c4999969ba11/tests%2Fui%2Fnonminimal_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3885033e5f161982766d75dee973c4999969ba11/tests%2Fui%2Fnonminimal_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool.stderr?ref=3885033e5f161982766d75dee973c4999969ba11", "patch": "@@ -0,0 +1,111 @@\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:10:13\n+   |\n+LL |     let _ = !true;\n+   |             ^^^^^ help: try: `false`\n+   |\n+   = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:11:13\n+   |\n+LL |     let _ = !false;\n+   |             ^^^^^^ help: try: `true`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:12:13\n+   |\n+LL |     let _ = !!a;\n+   |             ^^^ help: try: `a`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:13:13\n+   |\n+LL |     let _ = false || a;\n+   |             ^^^^^^^^^^ help: try: `a`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:17:13\n+   |\n+LL |     let _ = !(!a && b);\n+   |             ^^^^^^^^^^ help: try: `a || !b`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:18:13\n+   |\n+LL |     let _ = !(!a || b);\n+   |             ^^^^^^^^^^ help: try: `a && !b`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:19:13\n+   |\n+LL |     let _ = !a && !(b && c);\n+   |             ^^^^^^^^^^^^^^^ help: try: `!(a || b && c)`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:27:13\n+   |\n+LL |     let _ = a == b && c == 5 && a == b;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |\n+LL |     let _ = a == b && c == 5;\n+   |             ^^^^^^^^^^^^^^^^\n+LL |     let _ = !(a != b || c != 5);\n+   |             ^^^^^^^^^^^^^^^^^^^\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:28:13\n+   |\n+LL |     let _ = a == b || c == 5 || a == b;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |\n+LL |     let _ = a == b || c == 5;\n+   |             ^^^^^^^^^^^^^^^^\n+LL |     let _ = !(a != b && c != 5);\n+   |             ^^^^^^^^^^^^^^^^^^^\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:29:13\n+   |\n+LL |     let _ = a == b && c == 5 && b == a;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |\n+LL |     let _ = a == b && c == 5;\n+   |             ^^^^^^^^^^^^^^^^\n+LL |     let _ = !(a != b || c != 5);\n+   |             ^^^^^^^^^^^^^^^^^^^\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:30:13\n+   |\n+LL |     let _ = a != b || !(a != b || c == d);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |\n+LL |     let _ = a != b || c != d;\n+   |             ^^^^^^^^^^^^^^^^\n+LL |     let _ = !(a == b && c == d);\n+   |             ^^^^^^^^^^^^^^^^^^^\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:31:13\n+   |\n+LL |     let _ = a != b && !(a != b && c == d);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |\n+LL |     let _ = a != b && c != d;\n+   |             ^^^^^^^^^^^^^^^^\n+LL |     let _ = !(a == b || c == d);\n+   |             ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "4de48cd0879a1cda58502936a3533b149567d379", "filename": "tests/ui/nonminimal_bool_methods.rs", "status": "renamed", "additions": 3, "deletions": 61, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3885033e5f161982766d75dee973c4999969ba11/tests%2Fui%2Fnonminimal_bool_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3885033e5f161982766d75dee973c4999969ba11/tests%2Fui%2Fnonminimal_bool_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool_methods.rs?ref=3885033e5f161982766d75dee973c4999969ba11", "patch": "@@ -1,46 +1,6 @@\n-#![warn(clippy::nonminimal_bool, clippy::logic_bug)]\n+#![allow(unused, clippy::many_single_char_names)]\n+#![warn(clippy::nonminimal_bool)]\n \n-#[allow(unused, clippy::many_single_char_names)]\n-fn main() {\n-    let a: bool = unimplemented!();\n-    let b: bool = unimplemented!();\n-    let c: bool = unimplemented!();\n-    let d: bool = unimplemented!();\n-    let e: bool = unimplemented!();\n-    let _ = a && b || a;\n-    let _ = !(a && b);\n-    let _ = !true;\n-    let _ = !false;\n-    let _ = !!a;\n-    let _ = false && a;\n-    let _ = false || a;\n-    // don't lint on cfgs\n-    let _ = cfg!(you_shall_not_not_pass) && a;\n-    let _ = a || !b || !c || !d || !e;\n-    let _ = !(a && b || c);\n-    let _ = !(!a && b);\n-    let _ = !(!a || b);\n-}\n-\n-#[allow(unused, clippy::many_single_char_names)]\n-fn equality_stuff() {\n-    let a: i32 = unimplemented!();\n-    let b: i32 = unimplemented!();\n-    let c: i32 = unimplemented!();\n-    let d: i32 = unimplemented!();\n-    let e: i32 = unimplemented!();\n-    let _ = a == b && a != b;\n-    let _ = a == b && c == 5 && a == b;\n-    let _ = a == b || c == 5 || a == b;\n-    let _ = a == b && c == 5 && b == a;\n-    let _ = a < b && a >= b;\n-    let _ = a > b && a <= b;\n-    let _ = a > b && a == b;\n-    let _ = a != b || !(a != b || c == d);\n-    let _ = a != b && !(a != b && c == d);\n-}\n-\n-#[allow(unused, clippy::many_single_char_names)]\n fn methods_with_negation() {\n     let a: Option<i32> = unimplemented!();\n     let b: Result<i32, i32> = unimplemented!();\n@@ -147,22 +107,4 @@ fn dont_warn_for_negated_partial_ord_comparison() {\n     let _ = !(a >= b);\n }\n \n-fn issue3847(a: u32, b: u32) -> bool {\n-    const THRESHOLD: u32 = 1_000;\n-\n-    if a < THRESHOLD && b >= THRESHOLD || a >= THRESHOLD && b < THRESHOLD {\n-        return false;\n-    }\n-    true\n-}\n-\n-fn issue4548() {\n-    fn f(_i: u32, _j: u32) -> u32 {\n-        unimplemented!();\n-    }\n-\n-    let i = 0;\n-    let j = 0;\n-\n-    if i != j && f(i, j) != 0 || i == j && f(i, j) != 1 {}\n-}\n+fn main() {}", "previous_filename": "tests/ui/booleans.rs"}, {"sha": "a2df889d6230215dd44547e788991a47e61f6782", "filename": "tests/ui/nonminimal_bool_methods.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/3885033e5f161982766d75dee973c4999969ba11/tests%2Fui%2Fnonminimal_bool_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3885033e5f161982766d75dee973c4999969ba11/tests%2Fui%2Fnonminimal_bool_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool_methods.stderr?ref=3885033e5f161982766d75dee973c4999969ba11", "patch": "@@ -0,0 +1,82 @@\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:8:13\n+   |\n+LL |     let _ = !a.is_some();\n+   |             ^^^^^^^^^^^^ help: try: `a.is_none()`\n+   |\n+   = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:10:13\n+   |\n+LL |     let _ = !a.is_none();\n+   |             ^^^^^^^^^^^^ help: try: `a.is_some()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:12:13\n+   |\n+LL |     let _ = !b.is_err();\n+   |             ^^^^^^^^^^^ help: try: `b.is_ok()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:14:13\n+   |\n+LL |     let _ = !b.is_ok();\n+   |             ^^^^^^^^^^ help: try: `b.is_err()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:16:13\n+   |\n+LL |     let _ = !(a.is_some() && !c);\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: try: `a.is_none() || c`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:17:13\n+   |\n+LL |     let _ = !(a.is_some() || !c);\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: try: `a.is_none() && c`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:18:26\n+   |\n+LL |     let _ = !(!c ^ c) || !a.is_some();\n+   |                          ^^^^^^^^^^^^ help: try: `a.is_none()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:19:25\n+   |\n+LL |     let _ = (!c ^ c) || !a.is_some();\n+   |                         ^^^^^^^^^^^^ help: try: `a.is_none()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:20:23\n+   |\n+LL |     let _ = !c ^ c || !a.is_some();\n+   |                       ^^^^^^^^^^^^ help: try: `a.is_none()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:92:8\n+   |\n+LL |     if !res.is_ok() {}\n+   |        ^^^^^^^^^^^^ help: try: `res.is_err()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:93:8\n+   |\n+LL |     if !res.is_err() {}\n+   |        ^^^^^^^^^^^^^ help: try: `res.is_ok()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:96:8\n+   |\n+LL |     if !res.is_some() {}\n+   |        ^^^^^^^^^^^^^^ help: try: `res.is_none()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:97:8\n+   |\n+LL |     if !res.is_none() {}\n+   |        ^^^^^^^^^^^^^^ help: try: `res.is_some()`\n+\n+error: aborting due to 13 previous errors\n+"}]}