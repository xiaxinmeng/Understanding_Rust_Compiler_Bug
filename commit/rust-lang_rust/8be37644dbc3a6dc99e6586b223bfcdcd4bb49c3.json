{"sha": "8be37644dbc3a6dc99e6586b223bfcdcd4bb49c3", "node_id": "C_kwDOAAsO6NoAKDhiZTM3NjQ0ZGJjM2E2ZGM5OWU2NTg2YjIyM2JmY2RjZDRiYjQ5YzM", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-08-10T14:21:34Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-08-22T14:15:23Z"}, "message": "InferCtxt emit error when incorrectly tainted by errors", "tree": {"sha": "78d9175612b3e5d5c549b48d8559cbdfc89f0c4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78d9175612b3e5d5c549b48d8559cbdfc89f0c4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8be37644dbc3a6dc99e6586b223bfcdcd4bb49c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8be37644dbc3a6dc99e6586b223bfcdcd4bb49c3", "html_url": "https://github.com/rust-lang/rust/commit/8be37644dbc3a6dc99e6586b223bfcdcd4bb49c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8be37644dbc3a6dc99e6586b223bfcdcd4bb49c3/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9bb589cd678e034d194193fa892942315b10e2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9bb589cd678e034d194193fa892942315b10e2a", "html_url": "https://github.com/rust-lang/rust/commit/a9bb589cd678e034d194193fa892942315b10e2a"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "e37c0cf0fd0325706ae3a1910a1679b670ae03ba", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8be37644dbc3a6dc99e6586b223bfcdcd4bb49c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be37644dbc3a6dc99e6586b223bfcdcd4bb49c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=8be37644dbc3a6dc99e6586b223bfcdcd4bb49c3", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             evaluation_cache: self.evaluation_cache.clone(),\n             reported_trait_errors: self.reported_trait_errors.clone(),\n             reported_closure_mismatch: self.reported_closure_mismatch.clone(),\n-            tainted_by_errors_flag: self.tainted_by_errors_flag.clone(),\n+            tainted_by_errors: self.tainted_by_errors.clone(),\n             err_count_on_creation: self.err_count_on_creation,\n             in_snapshot: self.in_snapshot.clone(),\n             universe: self.universe.clone(),"}, {"sha": "c95738e0018c09d722a399a6cbc7fe41f0d85a01", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8be37644dbc3a6dc99e6586b223bfcdcd4bb49c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be37644dbc3a6dc99e6586b223bfcdcd4bb49c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=8be37644dbc3a6dc99e6586b223bfcdcd4bb49c3", "patch": "@@ -32,7 +32,7 @@ pub use rustc_middle::ty::IntVarValue;\n use rustc_middle::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n use rustc_middle::ty::{ConstVid, FloatVid, IntVid, TyVid};\n use rustc_span::symbol::Symbol;\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n \n use std::cell::{Cell, Ref, RefCell};\n use std::fmt;\n@@ -316,12 +316,12 @@ pub struct InferCtxt<'a, 'tcx> {\n     ///\n     /// Don't read this flag directly, call `is_tainted_by_errors()`\n     /// and `set_tainted_by_errors()`.\n-    tainted_by_errors_flag: Cell<bool>,\n+    tainted_by_errors: Cell<Option<ErrorGuaranteed>>,\n \n     /// Track how many errors were reported when this infcx is created.\n     /// If the number of errors increases, that's also a sign (line\n     /// `tainted_by_errors`) to avoid reporting certain kinds of errors.\n-    // FIXME(matthewjasper) Merge into `tainted_by_errors_flag`\n+    // FIXME(matthewjasper) Merge into `tainted_by_errors`\n     err_count_on_creation: usize,\n \n     /// This flag is true while there is an active snapshot.\n@@ -624,7 +624,7 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n             evaluation_cache: Default::default(),\n             reported_trait_errors: Default::default(),\n             reported_closure_mismatch: Default::default(),\n-            tainted_by_errors_flag: Cell::new(false),\n+            tainted_by_errors: Cell::new(None),\n             err_count_on_creation: tcx.sess.err_count(),\n             in_snapshot: Cell::new(false),\n             skip_leak_check: Cell::new(false),\n@@ -1227,23 +1227,25 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn is_tainted_by_errors(&self) -> bool {\n         debug!(\n             \"is_tainted_by_errors(err_count={}, err_count_on_creation={}, \\\n-             tainted_by_errors_flag={})\",\n+             tainted_by_errors={})\",\n             self.tcx.sess.err_count(),\n             self.err_count_on_creation,\n-            self.tainted_by_errors_flag.get()\n+            self.tainted_by_errors.get().is_some()\n         );\n \n         if self.tcx.sess.err_count() > self.err_count_on_creation {\n             return true; // errors reported since this infcx was made\n         }\n-        self.tainted_by_errors_flag.get()\n+        self.tainted_by_errors.get().is_some()\n     }\n \n     /// Set the \"tainted by errors\" flag to true. We call this when we\n     /// observe an error from a prior pass.\n     pub fn set_tainted_by_errors(&self) {\n         debug!(\"set_tainted_by_errors()\");\n-        self.tainted_by_errors_flag.set(true)\n+        self.tainted_by_errors.set(Some(\n+            self.tcx.sess.delay_span_bug(DUMMY_SP, \"`InferCtxt` incorrectly tainted by errors\"),\n+        ));\n     }\n \n     pub fn skip_region_resolution(&self) {"}]}