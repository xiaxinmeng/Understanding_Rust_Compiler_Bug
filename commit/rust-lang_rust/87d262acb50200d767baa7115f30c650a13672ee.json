{"sha": "87d262acb50200d767baa7115f30c650a13672ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZDI2MmFjYjUwMjAwZDc2N2JhYTcxMTVmMzBjNjUwYTEzNjcyZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-24T15:12:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-24T15:12:17Z"}, "message": "Auto merge of #77006 - oli-obk:\ud83d\udc0c_const_queries, r=Mark-Simulacrum\n\nCache `eval_to_allocation_raw` on disk\n\nhttps://github.com/rust-lang/rust/pull/74949#issuecomment-695833161 regressed the performance on these queries, this PR gets the perf back.", "tree": {"sha": "615d9c93370e70e5136bfb75b2641deecec18394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/615d9c93370e70e5136bfb75b2641deecec18394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87d262acb50200d767baa7115f30c650a13672ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87d262acb50200d767baa7115f30c650a13672ee", "html_url": "https://github.com/rust-lang/rust/commit/87d262acb50200d767baa7115f30c650a13672ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87d262acb50200d767baa7115f30c650a13672ee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "893fadd11a52aa26fc19c67ee1b79f03d6a1bed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/893fadd11a52aa26fc19c67ee1b79f03d6a1bed3", "html_url": "https://github.com/rust-lang/rust/commit/893fadd11a52aa26fc19c67ee1b79f03d6a1bed3"}, {"sha": "40629ef827220f4be8f043f6ff28118af22ea3dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/40629ef827220f4be8f043f6ff28118af22ea3dd", "html_url": "https://github.com/rust-lang/rust/commit/40629ef827220f4be8f043f6ff28118af22ea3dd"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "206f01c2498286dd1283d15af60aa365dd51a158", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87d262acb50200d767baa7115f30c650a13672ee/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d262acb50200d767baa7115f30c650a13672ee/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=87d262acb50200d767baa7115f30c650a13672ee", "patch": "@@ -13,7 +13,7 @@ use crate::ty::{ParamEnv, Ty, TyCtxt};\n use super::{sign_extend, truncate, AllocId, Allocation, InterpResult, Pointer, PointerArithmetic};\n \n /// Represents the result of const evaluation via the `eval_to_allocation` query.\n-#[derive(Clone, HashStable)]\n+#[derive(Clone, HashStable, TyEncodable, TyDecodable)]\n pub struct ConstAlloc<'tcx> {\n     // the value lives here, at offset 0, and that allocation definitely is a `AllocKind::Memory`\n     // (so you can use `AllocMap::unwrap_memory`)."}, {"sha": "9c047cbfaefdd2b274061bd5e88ce112c81d51f4", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87d262acb50200d767baa7115f30c650a13672ee/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d262acb50200d767baa7115f30c650a13672ee/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=87d262acb50200d767baa7115f30c650a13672ee", "patch": "@@ -716,6 +716,7 @@ rustc_queries! {\n                 \"const-evaluating + checking `{}`\",\n                 key.value.display(tcx)\n             }\n+            cache_on_disk_if { true }\n         }\n \n         /// Evaluates const items or anonymous constants\n@@ -730,10 +731,7 @@ rustc_queries! {\n                 \"simplifying constant for the type system `{}`\",\n                 key.value.display(tcx)\n             }\n-            cache_on_disk_if(_, opt_result) {\n-                // Only store results without errors\n-                opt_result.map_or(true, |r| r.is_ok())\n-            }\n+            cache_on_disk_if { true }\n         }\n \n         /// Destructure a constant ADT or array into its variant index and its"}]}