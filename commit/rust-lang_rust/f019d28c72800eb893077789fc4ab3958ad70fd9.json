{"sha": "f019d28c72800eb893077789fc4ab3958ad70fd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMTlkMjhjNzI4MDBlYjg5MzA3Nzc4OWZjNGFiMzk1OGFkNzBmZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-12T11:05:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-12T11:05:56Z"}, "message": "Auto merge of #83813 - cbeuw:remap-std, r=michaelwoerister\n\nFix `--remap-path-prefix` not correctly remapping `rust-src` component paths and unify handling of path mapping with virtualized paths\n\nThis PR fixes #73167 (\"Binaries end up containing path to the rust-src component despite `--remap-path-prefix`\") by preventing real local filesystem paths from reaching compilation output if the path is supposed to be remapped.\n\n`RealFileName::Named` introduced in #72767 is now renamed as `LocalPath`, because this variant wraps a (most likely) valid local filesystem path.\n\n`RealFileName::Devirtualized` is renamed as `Remapped` to be used for remapped path from a real path via `--remap-path-prefix` argument, as well as real path inferred from a virtualized (during compiler bootstrapping) `/rustc/...` path. The `local_path` field is now an `Option<PathBuf>`, as it will be set to `None` before serialisation, so it never reaches any build output. Attempting to serialise a non-`None` `local_path` will cause an assertion faliure.\n\nWhen a path is remapped, a `RealFileName::Remapped` variant is created. The original path is preserved in `local_path` field and the remapped path is saved in `virtual_name` field. Previously, the `local_path` is directly modified which goes against its purpose of \"suitable for reading from the file system on the local host\".\n\n`rustc_span::SourceFile`'s fields `unmapped_path` (introduced by #44940) and `name_was_remapped` (introduced by #41508 when `--remap-path-prefix` feature originally added) are removed, as these two pieces of information can be inferred from the `name` field: if it's anything other than a `FileName::Real(_)`, or if it is a `FileName::Real(RealFileName::LocalPath(_))`, then clearly `name_was_remapped` would've been false and `unmapped_path` would've been `None`. If it is a `FileName::Real(RealFileName::Remapped{local_path, virtual_name})`, then `name_was_remapped` would've been true and `unmapped_path` would've been `Some(local_path)`.\n\ncc `@eddyb` who implemented `/rustc/...` path devirtualisation", "tree": {"sha": "2eb0116e2f1d7463fc7889cdda38493746489426", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eb0116e2f1d7463fc7889cdda38493746489426"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f019d28c72800eb893077789fc4ab3958ad70fd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f019d28c72800eb893077789fc4ab3958ad70fd9", "html_url": "https://github.com/rust-lang/rust/commit/f019d28c72800eb893077789fc4ab3958ad70fd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f019d28c72800eb893077789fc4ab3958ad70fd9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab73020d400d4eaba228cdc5ec2f16338e755360", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab73020d400d4eaba228cdc5ec2f16338e755360", "html_url": "https://github.com/rust-lang/rust/commit/ab73020d400d4eaba228cdc5ec2f16338e755360"}, {"sha": "53ffe39b42af3f9a519866dc5428b552a1977e56", "url": "https://api.github.com/repos/rust-lang/rust/commits/53ffe39b42af3f9a519866dc5428b552a1977e56", "html_url": "https://github.com/rust-lang/rust/commit/53ffe39b42af3f9a519866dc5428b552a1977e56"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "314bf11e2d66616edc9f9636310fb5f483e221a8", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f019d28c72800eb893077789fc4ab3958ad70fd9/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f019d28c72800eb893077789fc4ab3958ad70fd9/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=f019d28c72800eb893077789fc4ab3958ad70fd9", "patch": "@@ -47,7 +47,7 @@ pub struct MacroRefData {\n \n impl MacroRefData {\n     pub fn new(name: String, callee: Span, cx: &LateContext<'_>) -> Self {\n-        let mut path = cx.sess().source_map().span_to_filename(callee).to_string();\n+        let mut path = cx.sess().source_map().span_to_filename(callee).prefer_local().to_string();\n \n         // std lib paths are <::std::module::file type>\n         // so remove brackets, space and type.\n@@ -96,8 +96,7 @@ impl MacroUseImports {\n         let name = snippet(cx, cx.sess().source_map().span_until_char(call_site, '!'), \"_\");\n         if let Some(callee) = span.source_callee() {\n             if !self.collected.contains(&call_site) {\n-                self.mac_refs\n-                    .push(MacroRefData::new(name.to_string(), callee.def_site, cx));\n+                self.mac_refs.push(MacroRefData::new(name.to_string(), callee.def_site, cx));\n                 self.collected.insert(call_site);\n             }\n         }\n@@ -175,7 +174,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n                                 .push((*item).to_string());\n                             check_dup.push((*item).to_string());\n                         }\n-                    },\n+                    }\n                     [root, rest @ ..] => {\n                         if rest.iter().all(|item| !check_dup.contains(&(*item).to_string())) {\n                             let filtered = rest\n@@ -199,7 +198,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n                                 .push(rest.join(\"::\"));\n                             check_dup.extend(rest.iter().map(ToString::to_string));\n                         }\n-                    },\n+                    }\n                 }\n             }\n         }"}]}