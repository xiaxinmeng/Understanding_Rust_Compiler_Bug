{"sha": "756e91732b7a92d9156f5c1d8ffcaf5155cf4680", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NmU5MTczMmI3YTkyZDkxNTZmNWMxZDhmZmNhZjUxNTVjZjQ2ODA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-05T15:06:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-05T15:06:41Z"}, "message": "Merge #4305\n\n4305: Favor types for record type struct in name resolution r=matklad a=edwin0cheng\n\nFixed #4235\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "97d06c84fb3ef9649f5ebda1c9198e78c6f5917b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97d06c84fb3ef9649f5ebda1c9198e78c6f5917b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/756e91732b7a92d9156f5c1d8ffcaf5155cf4680", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesYEBCRBK7hj4Ov3rIwAAdHIIAIqD6U6+ULYisrvWkQ9bczSO\nuBPvOptE8WkNcD3+02TfjN5lG6AJ3S6dw8soz/St3dMH8WoMo5Cs6U07I9UuVc2H\n0QWldTzl6ieMidpacxOjbXjj1MI4eouNptrN18WhuBZSUIBh1LSP+fWoTLq/aOFV\nu1y2NbnFLaDZyLk4n6HorVo2GSwND58sK6P6mayCB1U0RgXAsngqxjJOInfabDxQ\n8mUOjMBIyvDyvbOkZkbCYouUS20B486TM0qhr/91heFTzmFRGhEFpXcMwIOyjgv3\nKPwIjQ96xA3M+oS44+J88XjCWFM2lg7+EkNcvfpotJVGBnOmipYISHMV9gqH/Zw=\n=gISk\n-----END PGP SIGNATURE-----\n", "payload": "tree 97d06c84fb3ef9649f5ebda1c9198e78c6f5917b\nparent f68e099777b63d4a7b179d24c19bb28f22d15e2f\nparent 07de8ea165deb37ca9c42e66d2d3ecac57756ec6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588691201 +0000\ncommitter GitHub <noreply@github.com> 1588691201 +0000\n\nMerge #4305\n\n4305: Favor types for record type struct in name resolution r=matklad a=edwin0cheng\n\nFixed #4235\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/756e91732b7a92d9156f5c1d8ffcaf5155cf4680", "html_url": "https://github.com/rust-lang/rust/commit/756e91732b7a92d9156f5c1d8ffcaf5155cf4680", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/756e91732b7a92d9156f5c1d8ffcaf5155cf4680/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f68e099777b63d4a7b179d24c19bb28f22d15e2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f68e099777b63d4a7b179d24c19bb28f22d15e2f", "html_url": "https://github.com/rust-lang/rust/commit/f68e099777b63d4a7b179d24c19bb28f22d15e2f"}, {"sha": "07de8ea165deb37ca9c42e66d2d3ecac57756ec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/07de8ea165deb37ca9c42e66d2d3ecac57756ec6", "html_url": "https://github.com/rust-lang/rust/commit/07de8ea165deb37ca9c42e66d2d3ecac57756ec6"}], "stats": {"total": 118, "additions": 90, "deletions": 28}, "files": [{"sha": "443b057abeab78d61cfc1695bf7ba44dcef81a05", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/756e91732b7a92d9156f5c1d8ffcaf5155cf4680/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756e91732b7a92d9156f5c1d8ffcaf5155cf4680/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=756e91732b7a92d9156f5c1d8ffcaf5155cf4680", "patch": "@@ -573,9 +573,16 @@ impl ExprCollector<'_> {\n             self.body.item_scope.define_def(def);\n             if let Some(name) = name {\n                 let vis = crate::visibility::Visibility::Public; // FIXME determine correctly\n-                self.body\n-                    .item_scope\n-                    .push_res(name.as_name(), crate::per_ns::PerNs::from_def(def, vis));\n+                let has_constructor = match def {\n+                    ModuleDefId::AdtId(AdtId::StructId(s)) => {\n+                        self.db.struct_data(s).variant_data.kind() != StructKind::Record\n+                    }\n+                    _ => true,\n+                };\n+                self.body.item_scope.push_res(\n+                    name.as_name(),\n+                    crate::per_ns::PerNs::from_def(def, vis, has_constructor),\n+                );\n             }\n         }\n     }"}, {"sha": "fc15948adf4d0aa5d660b0f638dd58d87a6fbd27", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/756e91732b7a92d9156f5c1d8ffcaf5155cf4680/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756e91732b7a92d9156f5c1d8ffcaf5155cf4680/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=756e91732b7a92d9156f5c1d8ffcaf5155cf4680", "patch": "@@ -151,13 +151,20 @@ impl ItemScope {\n }\n \n impl PerNs {\n-    pub(crate) fn from_def(def: ModuleDefId, v: Visibility) -> PerNs {\n+    pub(crate) fn from_def(def: ModuleDefId, v: Visibility, has_constructor: bool) -> PerNs {\n         match def {\n             ModuleDefId::ModuleId(_) => PerNs::types(def, v),\n             ModuleDefId::FunctionId(_) => PerNs::values(def, v),\n             ModuleDefId::AdtId(adt) => match adt {\n-                AdtId::StructId(_) | AdtId::UnionId(_) => PerNs::both(def, def, v),\n+                AdtId::UnionId(_) => PerNs::types(def, v),\n                 AdtId::EnumId(_) => PerNs::types(def, v),\n+                AdtId::StructId(_) => {\n+                    if has_constructor {\n+                        PerNs::both(def, def, v)\n+                    } else {\n+                        PerNs::types(def, v)\n+                    }\n+                }\n             },\n             ModuleDefId::EnumVariantId(_) => PerNs::both(def, def, v),\n             ModuleDefId::ConstId(_) | ModuleDefId::StaticId(_) => PerNs::values(def, v),"}, {"sha": "db994122ae98bb6ce2d78dc28556990e08965d65", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/756e91732b7a92d9156f5c1d8ffcaf5155cf4680/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756e91732b7a92d9156f5c1d8ffcaf5155cf4680/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=756e91732b7a92d9156f5c1d8ffcaf5155cf4680", "patch": "@@ -830,7 +830,7 @@ impl ModCollector<'_, '_> {\n         let module = ModuleId { krate: self.def_collector.def_map.krate, local_id: res };\n         let def: ModuleDefId = module.into();\n         self.def_collector.def_map.modules[self.module_id].scope.define_def(def);\n-        self.def_collector.update(self.module_id, &[(name, PerNs::from_def(def, vis))], vis);\n+        self.def_collector.update(self.module_id, &[(name, PerNs::from_def(def, vis, false))], vis);\n         res\n     }\n \n@@ -844,14 +844,17 @@ impl ModCollector<'_, '_> {\n         let name = def.name.clone();\n         let container = ContainerId::ModuleId(module);\n         let vis = &def.visibility;\n+        let mut has_constructor = false;\n+\n         let def: ModuleDefId = match def.kind {\n             raw::DefKind::Function(ast_id) => FunctionLoc {\n                 container: container.into(),\n                 ast_id: AstId::new(self.file_id, ast_id),\n             }\n             .intern(self.def_collector.db)\n             .into(),\n-            raw::DefKind::Struct(ast_id) => {\n+            raw::DefKind::Struct(ast_id, mode) => {\n+                has_constructor = mode != raw::StructDefKind::Record;\n                 StructLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                     .intern(self.def_collector.db)\n                     .into()\n@@ -894,7 +897,11 @@ impl ModCollector<'_, '_> {\n             .def_map\n             .resolve_visibility(self.def_collector.db, self.module_id, vis)\n             .unwrap_or(Visibility::Public);\n-        self.def_collector.update(self.module_id, &[(name, PerNs::from_def(def, vis))], vis)\n+        self.def_collector.update(\n+            self.module_id,\n+            &[(name, PerNs::from_def(def, vis, has_constructor))],\n+            vis,\n+        )\n     }\n \n     fn collect_derives(&mut self, attrs: &Attrs, def: &raw::DefData) {"}, {"sha": "f2716a2950b1fbf2075189fc16134996eac0660f", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/756e91732b7a92d9156f5c1d8ffcaf5155cf4680/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756e91732b7a92d9156f5c1d8ffcaf5155cf4680/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=756e91732b7a92d9156f5c1d8ffcaf5155cf4680", "patch": "@@ -155,10 +155,17 @@ pub(super) struct DefData {\n     pub(super) visibility: RawVisibility,\n }\n \n+#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+pub(super) enum StructDefKind {\n+    Record,\n+    Tuple,\n+    Unit,\n+}\n+\n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub(super) enum DefKind {\n     Function(FileAstId<ast::FnDef>),\n-    Struct(FileAstId<ast::StructDef>),\n+    Struct(FileAstId<ast::StructDef>, StructDefKind),\n     Union(FileAstId<ast::UnionDef>),\n     Enum(FileAstId<ast::EnumDef>),\n     Const(FileAstId<ast::ConstDef>),\n@@ -171,7 +178,7 @@ impl DefKind {\n     pub fn ast_id(&self) -> FileAstId<ast::ModuleItem> {\n         match self {\n             DefKind::Function(it) => it.upcast(),\n-            DefKind::Struct(it) => it.upcast(),\n+            DefKind::Struct(it, _) => it.upcast(),\n             DefKind::Union(it) => it.upcast(),\n             DefKind::Enum(it) => it.upcast(),\n             DefKind::Const(it) => it.upcast(),\n@@ -236,9 +243,14 @@ impl RawItemsCollector {\n                 return;\n             }\n             ast::ModuleItem::StructDef(it) => {\n+                let kind = match it.kind() {\n+                    ast::StructKind::Record(_) => StructDefKind::Record,\n+                    ast::StructKind::Tuple(_) => StructDefKind::Tuple,\n+                    ast::StructKind::Unit => StructDefKind::Unit,\n+                };\n                 let id = self.source_ast_id_map.ast_id(&it);\n                 let name = it.name();\n-                (DefKind::Struct(id), name)\n+                (DefKind::Struct(id, kind), name)\n             }\n             ast::ModuleItem::UnionDef(it) => {\n                 let id = self.source_ast_id_map.ast_id(&it);"}, {"sha": "1b66c1aacfabfd1a837223ff665d191f81437f64", "filename": "crates/ra_hir_def/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756e91732b7a92d9156f5c1d8ffcaf5155cf4680/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756e91732b7a92d9156f5c1d8ffcaf5155cf4680/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=756e91732b7a92d9156f5c1d8ffcaf5155cf4680", "patch": "@@ -67,7 +67,7 @@ fn crate_def_map_smoke_test() {\n         \u22eeBaz: t v\n         \u22eeE: t\n         \u22eeEXT: v\n-        \u22eeU: t v\n+        \u22eeU: t\n         \u22eeext: v\n     \"###)\n }"}, {"sha": "40289e3ca529c035817c549b3c9bed5a09b3d5fe", "filename": "crates/ra_hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/756e91732b7a92d9156f5c1d8ffcaf5155cf4680/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756e91732b7a92d9156f5c1d8ffcaf5155cf4680/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=756e91732b7a92d9156f5c1d8ffcaf5155cf4680", "patch": "@@ -19,12 +19,12 @@ fn macro_rules_are_globally_visible() {\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n-   \u22eeFoo: t v\n+   \u22eeFoo: t\n    \u22eenested: t\n    \u22ee\n    \u22eecrate::nested\n-   \u22eeBar: t v\n-   \u22eeBaz: t v\n+   \u22eeBar: t\n+   \u22eeBaz: t\n     \"###);\n }\n \n@@ -91,13 +91,13 @@ fn macro_rules_from_other_crates_are_visible() {\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n-   \u22eeBar: t v\n-   \u22eeFoo: t v\n+   \u22eeBar: t\n+   \u22eeFoo: t\n    \u22eebar: t\n    \u22ee\n    \u22eecrate::bar\n-   \u22eeBar: t v\n-   \u22eeFoo: t v\n+   \u22eeBar: t\n+   \u22eeFoo: t\n    \u22eebar: t\n     \"###);\n }\n@@ -124,13 +124,13 @@ fn macro_rules_export_with_local_inner_macros_are_visible() {\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n-   \u22eeBar: t v\n-   \u22eeFoo: t v\n+   \u22eeBar: t\n+   \u22eeFoo: t\n    \u22eebar: t\n    \u22ee\n    \u22eecrate::bar\n-   \u22eeBar: t v\n-   \u22eeFoo: t v\n+   \u22eeBar: t\n+   \u22eeFoo: t\n    \u22eebar: t\n     \"###);\n }\n@@ -161,13 +161,13 @@ fn local_inner_macros_makes_local_macros_usable() {\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n-   \u22eeBar: t v\n-   \u22eeFoo: t v\n+   \u22eeBar: t\n+   \u22eeFoo: t\n    \u22eebar: t\n    \u22ee\n    \u22eecrate::bar\n-   \u22eeBar: t v\n-   \u22eeFoo: t v\n+   \u22eeBar: t\n+   \u22eeFoo: t\n    \u22eebar: t\n     \"###);\n }\n@@ -204,7 +204,7 @@ fn unexpanded_macro_should_expand_by_fixedpoint_loop() {\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n-   \u22eeFoo: t v\n+   \u22eeFoo: t\n    \u22eebar: m\n    \u22eefoo: m\n     \"###);"}, {"sha": "115ad83289156fd0d4cb990feccb64909e42dec9", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/756e91732b7a92d9156f5c1d8ffcaf5155cf4680/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756e91732b7a92d9156f5c1d8ffcaf5155cf4680/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=756e91732b7a92d9156f5c1d8ffcaf5155cf4680", "patch": "@@ -534,6 +534,35 @@ fn foo(b: Bar) {\n     );\n }\n \n+#[test]\n+fn issue_4235_name_conflicts() {\n+    assert_snapshot!(\n+        infer(r#\"\n+struct FOO {}\n+static FOO:FOO = FOO {};\n+\n+impl FOO {\n+    fn foo(&self) {}\n+}\n+\n+fn main() {\n+    let a = &FOO;\n+    a.foo();\n+}\n+\"#), @r###\"\n+    32..38 'FOO {}': FOO\n+    64..68 'self': &FOO\n+    70..72 '{}': ()\n+    86..120 '{     ...o(); }': ()\n+    96..97 'a': &FOO\n+    100..104 '&FOO': &FOO\n+    101..104 'FOO': FOO\n+    110..111 'a': &FOO\n+    110..117 'a.foo()': ()\n+\"###\n+    );\n+}\n+\n #[test]\n fn issue_4053_diesel_where_clauses() {\n     assert_snapshot!("}]}