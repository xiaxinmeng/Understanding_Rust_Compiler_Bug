{"sha": "2982fe39ad93e29709a2e1414a4228718c8de28a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ODJmZTM5YWQ5M2UyOTcwOWEyZTE0MTRhNDIyODcxOGM4ZGUyOGE=", "commit": {"author": {"name": "bcoopers", "email": "coopersmithbrian@gmail.com", "date": "2015-03-29T23:23:46Z"}, "committer": {"name": "bcoopers", "email": "coopersmithbrian@gmail.com", "date": "2015-03-29T23:23:46Z"}, "message": "80 character line limit", "tree": {"sha": "238dd9ba30b63f6202849ada042d4da3c118ea77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/238dd9ba30b63f6202849ada042d4da3c118ea77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2982fe39ad93e29709a2e1414a4228718c8de28a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2982fe39ad93e29709a2e1414a4228718c8de28a", "html_url": "https://github.com/rust-lang/rust/commit/2982fe39ad93e29709a2e1414a4228718c8de28a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2982fe39ad93e29709a2e1414a4228718c8de28a/comments", "author": null, "committer": null, "parents": [{"sha": "45c10db41f2af5919621ff69f5dc090cc917c1d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/45c10db41f2af5919621ff69f5dc090cc917c1d3", "html_url": "https://github.com/rust-lang/rust/commit/45c10db41f2af5919621ff69f5dc090cc917c1d3"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "bc3791b99d07a705bcbbe612090204b35d087942", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2982fe39ad93e29709a2e1414a4228718c8de28a/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2982fe39ad93e29709a2e1414a4228718c8de28a/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=2982fe39ad93e29709a2e1414a4228718c8de28a", "patch": "@@ -106,8 +106,9 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n     loop {\n         if len == buf.len() {\n             if buf.capacity() == buf.len() {\n-                // reserve() rounds up our request to the nearest power of two, so after the first\n-                // time the capacity is exceeded, we double our capacity at each call to reserve. \n+                // reserve() rounds up our request to the nearest power of two,\n+                // so after the first time the capacity is exceeded, we double\n+                // our capacity at each call to reserve. \n                 buf.reserve(min_cap_bump);\n             }\n             let new_area = buf.capacity() - buf.len();"}]}