{"sha": "8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNGMyMjZmYzViM2IwYzBkMTIwYmIzMTE3MDg5NTU3ZWYzNWFjYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-12T12:09:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-12T12:09:47Z"}, "message": "Auto merge of #58608 - pnkfelix:warning-period-for-detecting-nested-impl-trait, r=zoxc\n\nWarning period for detecting nested impl trait\n\nHere is some proposed code for making a warning period for the new checking of nested impl trait.\n\nIt undoes some of the corrective effects of PR #57730, by using boolean flags to track parts of the analysis that were previously skipped prior to PRs #57730 and #57981 landing.\n\nCc #57979", "tree": {"sha": "6412fa53102546accdc65e7b494cff693181a9ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6412fa53102546accdc65e7b494cff693181a9ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "html_url": "https://github.com/rust-lang/rust/commit/8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7486b9c208f7e1c4aa1e36961927327bd793e952", "url": "https://api.github.com/repos/rust-lang/rust/commits/7486b9c208f7e1c4aa1e36961927327bd793e952", "html_url": "https://github.com/rust-lang/rust/commit/7486b9c208f7e1c4aa1e36961927327bd793e952"}, {"sha": "0a03ca74935efab546298a8394a0ed0b31ccb646", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a03ca74935efab546298a8394a0ed0b31ccb646", "html_url": "https://github.com/rust-lang/rust/commit/0a03ca74935efab546298a8394a0ed0b31ccb646"}], "stats": {"total": 418, "additions": 345, "deletions": 73}, "files": [{"sha": "ad0ed39185c1c4b19c017de63080a870f566c308", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "patch": "@@ -386,6 +386,12 @@ declare_lint! {\n     \"ambiguous associated items\"\n }\n \n+declare_lint! {\n+    pub NESTED_IMPL_TRAIT,\n+    Warn,\n+    \"nested occurrence of `impl Trait` type\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// that are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -457,6 +463,7 @@ impl LintPass for HardwiredLints {\n             parser::ILL_FORMED_ATTRIBUTE_INPUT,\n             DEPRECATED_IN_FUTURE,\n             AMBIGUOUS_ASSOCIATED_ITEMS,\n+            NESTED_IMPL_TRAIT,\n         )\n     }\n }\n@@ -474,6 +481,7 @@ pub enum BuiltinLintDiagnostics {\n     ElidedLifetimesInPaths(usize, Span, bool, Span, String),\n     UnknownCrateTypes(Span, String, String),\n     UnusedImports(String, Vec<(Span, String)>),\n+    NestedImplTrait { outer_impl_trait_span: Span, inner_impl_trait_span: Span },\n }\n \n impl BuiltinLintDiagnostics {\n@@ -564,6 +572,12 @@ impl BuiltinLintDiagnostics {\n                     );\n                 }\n             }\n+            BuiltinLintDiagnostics::NestedImplTrait {\n+                outer_impl_trait_span, inner_impl_trait_span\n+            } => {\n+                db.span_label(outer_impl_trait_span, \"outer `impl Trait`\");\n+                db.span_label(inner_impl_trait_span, \"nested `impl Trait` here\");\n+            }\n         }\n     }\n }"}, {"sha": "73a32f6d2003a40f2ffadf2ab59436ff0dd5b168", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "patch": "@@ -353,6 +353,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #57593 <https://github.com/rust-lang/rust/issues/57593>\",\n             edition: None,\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(NESTED_IMPL_TRAIT),\n+            reference: \"issue #59014 <https://github.com/rust-lang/rust/issues/59014>\",\n+            edition: None,\n+        },\n         ]);\n \n     // Register renamed and removed lints."}, {"sha": "b85429cd3cfdc7963fcb17119ff9ff53dfe35229", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 114, "deletions": 14, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "patch": "@@ -9,6 +9,7 @@\n use std::mem;\n use syntax::print::pprust;\n use rustc::lint;\n+use rustc::lint::builtin::{BuiltinLintDiagnostics, NESTED_IMPL_TRAIT};\n use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::*;\n@@ -23,6 +24,31 @@ use syntax_pos::Span;\n use errors::Applicability;\n use log::debug;\n \n+#[derive(Copy, Clone, Debug)]\n+struct OuterImplTrait {\n+    span: Span,\n+\n+    /// rust-lang/rust#57979: a bug in original implementation caused\n+    /// us to fail sometimes to record an outer `impl Trait`.\n+    /// Therefore, in order to reliably issue a warning (rather than\n+    /// an error) in the *precise* places where we are newly injecting\n+    /// the diagnostic, we have to distinguish between the places\n+    /// where the outer `impl Trait` has always been recorded, versus\n+    /// the places where it has only recently started being recorded.\n+    only_recorded_since_pull_request_57730: bool,\n+}\n+\n+impl OuterImplTrait {\n+    /// This controls whether we should downgrade the nested impl\n+    /// trait diagnostic to a warning rather than an error, based on\n+    /// whether the outer impl trait had been improperly skipped in\n+    /// earlier implementations of the analysis on the stable\n+    /// compiler.\n+    fn should_warn_instead_of_error(&self) -> bool {\n+        self.only_recorded_since_pull_request_57730\n+    }\n+}\n+\n struct AstValidator<'a> {\n     session: &'a Session,\n     has_proc_macro_decls: bool,\n@@ -31,31 +57,83 @@ struct AstValidator<'a> {\n     // Used to ban nested `impl Trait`, e.g., `impl Into<impl Debug>`.\n     // Nested `impl Trait` _is_ allowed in associated type position,\n     // e.g `impl Iterator<Item=impl Debug>`\n-    outer_impl_trait: Option<Span>,\n+    outer_impl_trait: Option<OuterImplTrait>,\n \n     // Used to ban `impl Trait` in path projections like `<impl Iterator>::Item`\n     // or `Foo::Bar<impl Trait>`\n     is_impl_trait_banned: bool,\n+\n+    // rust-lang/rust#57979: the ban of nested `impl Trait` was buggy\n+    // until PRs #57730 and #57981 landed: it would jump directly to\n+    // walk_ty rather than visit_ty (or skip recurring entirely for\n+    // impl trait in projections), and thus miss some cases. We track\n+    // whether we should downgrade to a warning for short-term via\n+    // these booleans.\n+    warning_period_57979_didnt_record_next_impl_trait: bool,\n+    warning_period_57979_impl_trait_in_proj: bool,\n }\n \n impl<'a> AstValidator<'a> {\n+    fn with_impl_trait_in_proj_warning<T>(&mut self, v: bool, f: impl FnOnce(&mut Self) -> T) -> T {\n+        let old = mem::replace(&mut self.warning_period_57979_impl_trait_in_proj, v);\n+        let ret = f(self);\n+        self.warning_period_57979_impl_trait_in_proj = old;\n+        ret\n+    }\n+\n     fn with_banned_impl_trait(&mut self, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.is_impl_trait_banned, true);\n         f(self);\n         self.is_impl_trait_banned = old;\n     }\n \n-    fn with_impl_trait(&mut self, outer_impl_trait: Option<Span>, f: impl FnOnce(&mut Self)) {\n-        let old = mem::replace(&mut self.outer_impl_trait, outer_impl_trait);\n+    fn with_impl_trait(&mut self, outer: Option<OuterImplTrait>, f: impl FnOnce(&mut Self)) {\n+        let old = mem::replace(&mut self.outer_impl_trait, outer);\n         f(self);\n         self.outer_impl_trait = old;\n     }\n \n+    fn visit_assoc_type_binding_from_generic_args(&mut self, type_binding: &'a TypeBinding) {\n+        // rust-lang/rust#57979: bug in old visit_generic_args called\n+        // walk_ty rather than visit_ty, skipping outer `impl Trait`\n+        // if it happened to occur at `type_binding.ty`\n+        if let TyKind::ImplTrait(..) = type_binding.ty.node {\n+            self.warning_period_57979_didnt_record_next_impl_trait = true;\n+        }\n+        self.visit_assoc_type_binding(type_binding);\n+    }\n+\n+    fn visit_ty_from_generic_args(&mut self, ty: &'a Ty) {\n+        // rust-lang/rust#57979: bug in old visit_generic_args called\n+        // walk_ty rather than visit_ty, skippping outer `impl Trait`\n+        // if it happened to occur at `ty`\n+        if let TyKind::ImplTrait(..) = ty.node {\n+            self.warning_period_57979_didnt_record_next_impl_trait = true;\n+        }\n+        self.visit_ty(ty);\n+    }\n+\n+    fn outer_impl_trait(&mut self, span: Span) -> OuterImplTrait {\n+        let only_recorded_since_pull_request_57730 =\n+            self.warning_period_57979_didnt_record_next_impl_trait;\n+\n+        // (this flag is designed to be set to true and then only\n+        // reach the construction point for the outer impl trait once,\n+        // so its safe and easiest to unconditionally reset it to\n+        // false)\n+        self.warning_period_57979_didnt_record_next_impl_trait = false;\n+\n+        OuterImplTrait {\n+            span, only_recorded_since_pull_request_57730,\n+        }\n+    }\n+\n     // Mirrors visit::walk_ty, but tracks relevant state\n     fn walk_ty(&mut self, t: &'a Ty) {\n         match t.node {\n             TyKind::ImplTrait(..) => {\n-                self.with_impl_trait(Some(t.span), |this| visit::walk_ty(this, t))\n+                let outer_impl_trait = self.outer_impl_trait(t.span);\n+                self.with_impl_trait(Some(outer_impl_trait), |this| visit::walk_ty(this, t))\n             }\n             TyKind::Path(ref qself, ref path) => {\n                 // We allow these:\n@@ -406,22 +484,41 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             TyKind::ImplTrait(_, ref bounds) => {\n                 if self.is_impl_trait_banned {\n-                    struct_span_err!(self.session, ty.span, E0667,\n-                        \"`impl Trait` is not allowed in path parameters\").emit();\n+                    if self.warning_period_57979_impl_trait_in_proj {\n+                        self.session.buffer_lint(\n+                            NESTED_IMPL_TRAIT, ty.id, ty.span,\n+                            \"`impl Trait` is not allowed in path parameters\");\n+                    } else {\n+                        struct_span_err!(self.session, ty.span, E0667,\n+                            \"`impl Trait` is not allowed in path parameters\").emit();\n+                    }\n                 }\n \n                 if let Some(outer_impl_trait) = self.outer_impl_trait {\n-                    struct_span_err!(self.session, ty.span, E0666,\n-                                    \"nested `impl Trait` is not allowed\")\n-                        .span_label(outer_impl_trait, \"outer `impl Trait`\")\n-                        .span_label(ty.span, \"nested `impl Trait` here\")\n-                        .emit();\n-\n+                    if outer_impl_trait.should_warn_instead_of_error() {\n+                        self.session.buffer_lint_with_diagnostic(\n+                            NESTED_IMPL_TRAIT, ty.id, ty.span,\n+                            \"nested `impl Trait` is not allowed\",\n+                            BuiltinLintDiagnostics::NestedImplTrait {\n+                                outer_impl_trait_span: outer_impl_trait.span,\n+                                inner_impl_trait_span: ty.span,\n+                            });\n+                    } else {\n+                        struct_span_err!(self.session, ty.span, E0666,\n+                            \"nested `impl Trait` is not allowed\")\n+                            .span_label(outer_impl_trait.span, \"outer `impl Trait`\")\n+                            .span_label(ty.span, \"nested `impl Trait` here\")\n+                            .emit();\n+                    }\n                 }\n+\n                 if !bounds.iter()\n                           .any(|b| if let GenericBound::Trait(..) = *b { true } else { false }) {\n                     self.err_handler().span_err(ty.span, \"at least one trait must be specified\");\n                 }\n+\n+                self.with_impl_trait_in_proj_warning(true, |this| this.walk_ty(ty));\n+                return;\n             }\n             _ => {}\n         }\n@@ -606,18 +703,19 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         GenericArg::Const(..) => ParamKindOrd::Const,\n                     }, arg.span(), None)\n                 }), GenericPosition::Arg, generic_args.span());\n+\n                 // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n                 // are allowed to contain nested `impl Trait`.\n                 self.with_impl_trait(None, |this| {\n-                    walk_list!(this, visit_assoc_type_binding, &data.bindings);\n+                    walk_list!(this, visit_assoc_type_binding_from_generic_args, &data.bindings);\n                 });\n             }\n             GenericArgs::Parenthesized(ref data) => {\n                 walk_list!(self, visit_ty, &data.inputs);\n                 if let Some(ref type_) = data.output {\n                     // `-> Foo` syntax is essentially an associated type binding,\n                     // so it is also allowed to contain nested `impl Trait`.\n-                    self.with_impl_trait(None, |this| this.visit_ty(type_));\n+                    self.with_impl_trait(None, |this| this.visit_ty_from_generic_args(type_));\n                 }\n             }\n         }\n@@ -719,6 +817,8 @@ pub fn check_crate(session: &Session, krate: &Crate) -> (bool, bool) {\n         has_global_allocator: false,\n         outer_impl_trait: None,\n         is_impl_trait_banned: false,\n+        warning_period_57979_didnt_record_next_impl_trait: false,\n+        warning_period_57979_impl_trait_in_proj: false,\n     };\n     visit::walk_crate(&mut validator, krate);\n "}, {"sha": "5eef6a39325fee8e1466b0576548283cc6b82b58", "filename": "src/test/ui/impl-trait/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.rs?ref=8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "patch": "@@ -0,0 +1,42 @@\n+// rust-lang/rust#57979 : the initial support for `impl Trait` didn't\n+// properly check syntax hidden behind an associated type projection,\n+// but it did catch *some cases*. This is checking that we continue to\n+// properly emit errors for those, even with the new\n+// future-incompatibility warnings.\n+//\n+// issue-57979-nested-impl-trait-in-assoc-proj.rs shows the main case\n+// that we were previously failing to catch.\n+\n+struct Deeper<T>(T);\n+\n+mod allowed {\n+    #![allow(nested_impl_trait)]\n+\n+    pub trait Foo<T> { }\n+    pub trait Bar { }\n+    pub trait Quux { type Assoc; }\n+    pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n+    //~^ ERROR nested `impl Trait` is not allowed\n+}\n+\n+mod warned {\n+    #![warn(nested_impl_trait)]\n+\n+    pub trait Foo<T> { }\n+    pub trait Bar { }\n+    pub trait Quux { type Assoc; }\n+    pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n+    //~^ ERROR nested `impl Trait` is not allowed\n+}\n+\n+mod denied {\n+    #![deny(nested_impl_trait)]\n+\n+    pub trait Foo<T> { }\n+    pub trait Bar { }\n+    pub trait Quux { type Assoc; }\n+    pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n+    //~^ ERROR nested `impl Trait` is not allowed\n+}\n+\n+fn main() { }"}, {"sha": "2b6f15e6d3eb2b47ac10b846adf7f8b32f4c919b", "filename": "src/test/ui/impl-trait/issue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr?ref=8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "patch": "@@ -0,0 +1,30 @@\n+error[E0666]: nested `impl Trait` is not allowed\n+  --> $DIR/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs:18:59\n+   |\n+LL |     pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n+   |                                                  ---------^^^^^^^^-\n+   |                                                  |        |\n+   |                                                  |        nested `impl Trait` here\n+   |                                                  outer `impl Trait`\n+\n+error[E0666]: nested `impl Trait` is not allowed\n+  --> $DIR/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs:28:59\n+   |\n+LL |     pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n+   |                                                  ---------^^^^^^^^-\n+   |                                                  |        |\n+   |                                                  |        nested `impl Trait` here\n+   |                                                  outer `impl Trait`\n+\n+error[E0666]: nested `impl Trait` is not allowed\n+  --> $DIR/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs:38:59\n+   |\n+LL |     pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n+   |                                                  ---------^^^^^^^^-\n+   |                                                  |        |\n+   |                                                  |        nested `impl Trait` here\n+   |                                                  outer `impl Trait`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0666`."}, {"sha": "84fcb5e2880a79c017aac5e7bd209f5def992e42", "filename": "src/test/ui/impl-trait/issue-57979-impl-trait-in-path.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-impl-trait-in-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-impl-trait-in-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-impl-trait-in-path.rs?ref=8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "patch": "@@ -0,0 +1,37 @@\n+// rust-lang/rust#57979 : the initial support for `impl Trait` didn't\n+// properly check syntax hidden behind an associated type projection.\n+// Here we test behavior of occurrences of `impl Trait` within a path\n+// component in that context.\n+\n+mod allowed {\n+    #![allow(nested_impl_trait)]\n+\n+    pub trait Bar { }\n+    pub trait Quux<T> { type Assoc; }\n+    pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+    impl<T> Quux<T> for () { type Assoc = u32; }\n+}\n+\n+mod warned {\n+    #![warn(nested_impl_trait)]\n+\n+    pub trait Bar { }\n+    pub trait Quux<T> { type Assoc; }\n+    pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+    //~^ WARN `impl Trait` is not allowed in path parameters\n+    //~| WARN will become a hard error in a future release!\n+    impl<T> Quux<T> for () { type Assoc = u32; }\n+}\n+\n+mod denied {\n+    #![deny(nested_impl_trait)]\n+\n+    pub trait Bar { }\n+    pub trait Quux<T> { type Assoc; }\n+    pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+    //~^ ERROR `impl Trait` is not allowed in path parameters\n+    //~| WARN will become a hard error in a future release!\n+    impl<T> Quux<T> for () { type Assoc = u32; }\n+}\n+\n+fn main() { }"}, {"sha": "982ecba291f793f8576d876a698806f1e48f73cd", "filename": "src/test/ui/impl-trait/issue-57979-impl-trait-in-path.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-impl-trait-in-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-impl-trait-in-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-impl-trait-in-path.stderr?ref=8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "patch": "@@ -0,0 +1,30 @@\n+warning: `impl Trait` is not allowed in path parameters\n+  --> $DIR/issue-57979-impl-trait-in-path.rs:20:52\n+   |\n+LL |     pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+   |                                                    ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-57979-impl-trait-in-path.rs:16:13\n+   |\n+LL |     #![warn(nested_impl_trait)]\n+   |             ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n+\n+error: `impl Trait` is not allowed in path parameters\n+  --> $DIR/issue-57979-impl-trait-in-path.rs:31:52\n+   |\n+LL |     pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+   |                                                    ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-57979-impl-trait-in-path.rs:27:13\n+   |\n+LL |     #![deny(nested_impl_trait)]\n+   |             ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n+\n+error: aborting due to previous error\n+"}, {"sha": "5c20ffc7c6724d887b8d5cc630cfa2decdda3eab", "filename": "src/test/ui/impl-trait/issue-57979-nested-impl-trait-in-assoc-proj.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-nested-impl-trait-in-assoc-proj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-nested-impl-trait-in-assoc-proj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-nested-impl-trait-in-assoc-proj.rs?ref=8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "patch": "@@ -0,0 +1,37 @@\n+// rust-lang/rust#57979 : the initial support for `impl Trait` didn't\n+// properly check syntax hidden behind an associated type projection.\n+// Here we test behavior of occurrences of `impl Trait` within an\n+// `impl Trait` in that context.\n+\n+mod allowed {\n+    #![allow(nested_impl_trait)]\n+\n+    pub trait Foo<T> { }\n+    pub trait Bar { }\n+    pub trait Quux { type Assoc; }\n+    pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+}\n+\n+mod warned {\n+    #![warn(nested_impl_trait)]\n+\n+    pub trait Foo<T> { }\n+    pub trait Bar { }\n+    pub trait Quux { type Assoc; }\n+    pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+    //~^ WARN nested `impl Trait` is not allowed\n+    //~| WARN will become a hard error in a future release!\n+}\n+\n+mod denied {\n+    #![deny(nested_impl_trait)]\n+\n+    pub trait Foo<T> { }\n+    pub trait Bar { }\n+    pub trait Quux { type Assoc; }\n+    pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+    //~^ ERROR nested `impl Trait` is not allowed\n+    //~| WARN will become a hard error in a future release!\n+}\n+\n+fn main() { }"}, {"sha": "508aea243213275ab2fe3b81f8db5f2c5cc3521f", "filename": "src/test/ui/impl-trait/issue-57979-nested-impl-trait-in-assoc-proj.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-nested-impl-trait-in-assoc-proj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-nested-impl-trait-in-assoc-proj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-nested-impl-trait-in-assoc-proj.stderr?ref=8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "patch": "@@ -0,0 +1,36 @@\n+warning: nested `impl Trait` is not allowed\n+  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:21:45\n+   |\n+LL |     pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+   |                                    ---------^^^^^^^^-\n+   |                                    |        |\n+   |                                    |        nested `impl Trait` here\n+   |                                    outer `impl Trait`\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:16:13\n+   |\n+LL |     #![warn(nested_impl_trait)]\n+   |             ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n+\n+error: nested `impl Trait` is not allowed\n+  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:32:45\n+   |\n+LL |     pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+   |                                    ---------^^^^^^^^-\n+   |                                    |        |\n+   |                                    |        nested `impl Trait` here\n+   |                                    outer `impl Trait`\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:27:13\n+   |\n+LL |     #![deny(nested_impl_trait)]\n+   |             ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n+\n+error: aborting due to previous error\n+"}, {"sha": "abd46b60ab194498d83f429979c427695166735c", "filename": "src/test/ui/issues/issue-57979.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fissues%2Fissue-57979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fissues%2Fissue-57979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57979.rs?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,42 +0,0 @@\n-// Regression test for #57979. This situation is meant to be an error.\n-// As noted in the issue thread, we decided to forbid nested impl\n-// trait of this kind:\n-//\n-// ```rust\n-// fn foo() -> impl Foo<impl Bar> { .. }\n-// ```\n-//\n-// Basically there are two hidden variables here, let's call them `X`\n-// and `Y`, and we must prove that:\n-//\n-// ```\n-// X: Foo<Y>\n-// Y: Bar\n-// ```\n-//\n-// However, the user is only giving us the return type `X`. It's true\n-// that in some cases, we can infer `Y` from `X`, because `X` only\n-// implements `Foo` for one type (and indeed the compiler does\n-// inference of this kind), but I do recall that we intended to forbid\n-// this -- in part because such inference is fragile, and there is not\n-// necessarily a way for the user to be more explicit should the\n-// inference fail (so you could get stuck with no way to port your\n-// code forward if, for example, more impls are added to an existing\n-// type).\n-//\n-// The same seems to apply in this situation. Here there are three impl traits, so we have\n-//\n-// ```\n-// X: IntoIterator<Item = Y>\n-// Y: Borrow<Data<Z>>\n-// Z: AsRef<[u8]>\n-// ```\n-\n-use std::borrow::Borrow;\n-\n-pub struct Data<TBody>(TBody);\n-\n-pub fn collect(_: impl IntoIterator<Item = impl Borrow<Data<impl AsRef<[u8]>>>>) {\n-    //~^ ERROR\n-    unimplemented!()\n-}"}, {"sha": "488f30ab7c5a7d6f6eda064f831e80b6ae4ab614", "filename": "src/test/ui/issues/issue-57979.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fissues%2Fissue-57979.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7486b9c208f7e1c4aa1e36961927327bd793e952/src%2Ftest%2Fui%2Fissues%2Fissue-57979.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57979.stderr?ref=7486b9c208f7e1c4aa1e36961927327bd793e952", "patch": "@@ -1,17 +0,0 @@\n-error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979.rs:39:61\n-   |\n-LL | pub fn collect(_: impl IntoIterator<Item = impl Borrow<Data<impl AsRef<[u8]>>>>) {\n-   |                                            -----------------^^^^^^^^^^^^^^^^--\n-   |                                            |                |\n-   |                                            |                nested `impl Trait` here\n-   |                                            outer `impl Trait`\n-\n-error[E0601]: `main` function not found in crate `issue_57979`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-57979.rs`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors occurred: E0601, E0666.\n-For more information about an error, try `rustc --explain E0601`."}]}