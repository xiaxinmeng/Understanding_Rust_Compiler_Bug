{"sha": "a0b83f542f91699838c65d772b0eb6aeb276fb67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYjgzZjU0MmY5MTY5OTgzOGM2NWQ3NzJiMGViNmFlYjI3NmZiNjc=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-11T09:40:19Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-11T09:40:19Z"}, "message": "Fix duplicate bounds for const_trait_impl", "tree": {"sha": "7c79ca264fd6abaa98854268c3f9cb4f3822009b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c79ca264fd6abaa98854268c3f9cb4f3822009b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0b83f542f91699838c65d772b0eb6aeb276fb67", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmE8eYMACgkQAn35M4hi\nrd2LHBAAsJ8T4Cw7i3+yTkSkvfR7jzn/8n3D9wjp6IEq9f/TMtftMaQesnL7AAVd\nsc3VOZ2N8+zm17MziPe3tK2E/cYpeUDIxrDYNg9jhTxx2fKJn0B2E729ZDnEB0xh\nSBvIQuhauJIZdBE3RLHwvPvkKChcWfP+tDS02n72L1jtflVBITwqK5E+7z/W6c0l\nRn3Wrm5REiAdDRlnlBLdh3WhiGKuX/Ybt3OXr1HH2tM7Ag5We0oypQxyYnEEhuRV\nTVNmY3qGjAPQufW8+MHPcOGMrbc1NrJxK5P+jgymh0wExVkmMqLt1qo2wBkgw+rK\nwl4QRvuHaqa71hEsQ+gD6Fg1UVuDTYdgDheWTA6BQkf8MdDEW8uV1pREzltD8QQd\nto6bJ/cI4JzmUgILp8xsUHaxjjNJy8UQ4OQ4NLnRUoV/VyRGTpGWzrfi8x7Pzxee\nBB5bzLoGbTP45Vhk2CXhT1uVUlEb0+/a5nDksLwq3fZ8jZnRqG+7eztEoBsfkxhv\n8I1fIEB8gpiyjYcIyaMOJnK2h6RxCEb0UzAHiExHoEb1KKyBFgIVE+bsseCaSvpe\nNldJMr39H2xCIIolCWDgaGWFnM33TF5HLRiblBM7mdZGjn8rC65C3a0cvvLxNxUy\nkN33jByhCUZD0xvWatyg+XCod/HjFUAGJHhT78lOiXbyfgsSHvU=\n=YLEe\n-----END PGP SIGNATURE-----", "payload": "tree 7c79ca264fd6abaa98854268c3f9cb4f3822009b\nparent 497ee321af3b8496eaccd7af7b437f18bab81abf\nauthor Deadbeef <ent3rm4n@gmail.com> 1631353219 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1631353219 +0000\n\nFix duplicate bounds for const_trait_impl\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0b83f542f91699838c65d772b0eb6aeb276fb67", "html_url": "https://github.com/rust-lang/rust/commit/a0b83f542f91699838c65d772b0eb6aeb276fb67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0b83f542f91699838c65d772b0eb6aeb276fb67/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497ee321af3b8496eaccd7af7b437f18bab81abf", "url": "https://api.github.com/repos/rust-lang/rust/commits/497ee321af3b8496eaccd7af7b437f18bab81abf", "html_url": "https://github.com/rust-lang/rust/commit/497ee321af3b8496eaccd7af7b437f18bab81abf"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "3c83938ce43ee6b160bfae58e6fcd079851c1282", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0b83f542f91699838c65d772b0eb6aeb276fb67/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0b83f542f91699838c65d772b0eb6aeb276fb67/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=a0b83f542f91699838c65d772b0eb6aeb276fb67", "patch": "@@ -1487,10 +1487,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ) => false,\n \n             (ParamCandidate(other), ParamCandidate(victim)) => {\n-                let value_same_except_bound_vars = other.value.skip_binder()\n+                let same_except_bound_vars = other.value.skip_binder()\n                     == victim.value.skip_binder()\n+                    && other.constness == victim.constness\n                     && !other.value.skip_binder().has_escaping_bound_vars();\n-                if value_same_except_bound_vars {\n+                if same_except_bound_vars {\n                     // See issue #84398. In short, we can generate multiple ParamCandidates which are\n                     // the same except for unused bound vars. Just pick the one with the fewest bound vars\n                     // or the current one if tied (they should both evaluate to the same answer). This is"}, {"sha": "cc24dbd96d2532ebc82c59a2e9fc4a7514891d86", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-dup-bound.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a0b83f542f91699838c65d772b0eb6aeb276fb67/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0b83f542f91699838c65d772b0eb6aeb276fb67/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs?ref=a0b83f542f91699838c65d772b0eb6aeb276fb67", "patch": "@@ -16,12 +16,17 @@ impl const PartialEq for S {\n \n // This duplicate bound should not result in ambiguities. It should be equivalent to a single ~const\n // bound.\n-// const fn equals_self<T: PartialEq + ~const PartialEq>(t: &T) -> bool {\n-// FIXME(fee1-dead)^ why should the order matter here?\n-const fn equals_self<T: ~const PartialEq + PartialEq>(t: &T) -> bool {\n+const fn equals_self<T: PartialEq + ~const PartialEq>(t: &T) -> bool {\n     *t == *t\n }\n \n-pub const EQ: bool = equals_self(&S);\n+trait A: PartialEq {}\n+impl<T: PartialEq> A for T {}\n+\n+const fn equals_self2<T: A + ~const PartialEq>(t: &T) -> bool {\n+    *t == *t\n+}\n+\n+pub const EQ: bool = equals_self(&S) && equals_self2(&S);\n \n fn main() {}"}]}