{"sha": "ba7844a7fff0061e5b4528c2ecd5adf765145b70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNzg0NGE3ZmZmMDA2MWU1YjQ1MjhjMmVjZDVhZGY3NjUxNDViNzA=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-14T23:55:24Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-15T00:35:55Z"}, "message": "Change StrBuf::from_utf8() to return Result\n\nThis allows the original vector to be recovered in the event that it is\nnot UTF-8.\n\n[breaking-change]", "tree": {"sha": "bf1998a94512013b15d5216388b1d99db7b54935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf1998a94512013b15d5216388b1d99db7b54935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba7844a7fff0061e5b4528c2ecd5adf765145b70", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7844a7fff0061e5b4528c2ecd5adf765145b70", "html_url": "https://github.com/rust-lang/rust/commit/ba7844a7fff0061e5b4528c2ecd5adf765145b70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba7844a7fff0061e5b4528c2ecd5adf765145b70/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0f3cb05df41b14b58553fab6a533e0e4c947b06", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f3cb05df41b14b58553fab6a533e0e4c947b06", "html_url": "https://github.com/rust-lang/rust/commit/d0f3cb05df41b14b58553fab6a533e0e4c947b06"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "5702557526fa82f805328b79f9ea2f9a92992e0a", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba7844a7fff0061e5b4528c2ecd5adf765145b70/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7844a7fff0061e5b4528c2ecd5adf765145b70/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=ba7844a7fff0061e5b4528c2ecd5adf765145b70", "patch": "@@ -181,9 +181,8 @@ impl<'a> FromBase64 for &'a str {\n      * Convert any base64 encoded string (literal, `@`, `&`, or `~`)\n      * to the byte values it encodes.\n      *\n-     * You can use the `from_utf8_owned` function in `std::str`\n-     * to turn a `[u8]` into a string with characters corresponding to those\n-     * values.\n+     * You can use the `StrBuf::from_utf8` function in `std::strbuf` to turn a\n+     * `Vec<u8>` into a string with characters corresponding to those values.\n      *\n      * # Example\n      *\n@@ -199,7 +198,7 @@ impl<'a> FromBase64 for &'a str {\n      *     let res = hello_str.from_base64();\n      *     if res.is_ok() {\n      *       let opt_bytes = StrBuf::from_utf8(res.unwrap());\n-     *       if opt_bytes.is_some() {\n+     *       if opt_bytes.is_ok() {\n      *         println!(\"decoded from base64: {}\", opt_bytes.unwrap());\n      *       }\n      *     }"}, {"sha": "2b9ba763b2ebb45c2b29afecebfa32da2d359730", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba7844a7fff0061e5b4528c2ecd5adf765145b70/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7844a7fff0061e5b4528c2ecd5adf765145b70/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=ba7844a7fff0061e5b4528c2ecd5adf765145b70", "patch": "@@ -80,9 +80,8 @@ impl<'a> FromHex for &'a str {\n      * Convert any hexadecimal encoded string (literal, `@`, `&`, or `~`)\n      * to the byte values it encodes.\n      *\n-     * You can use the `from_utf8_owned` function in `std::str`\n-     * to turn a `[u8]` into a string with characters corresponding to those\n-     * values.\n+     * You can use the `StrBuf::from_utf8` function in `std::strbuf` to turn a\n+     * `Vec<u8>` into a string with characters corresponding to those values.\n      *\n      * # Example\n      *"}, {"sha": "63d6219ab8af5fce6bb44ad756fcc3bdbbe788d7", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7844a7fff0061e5b4528c2ecd5adf765145b70/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7844a7fff0061e5b4528c2ecd5adf765145b70/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=ba7844a7fff0061e5b4528c2ecd5adf765145b70", "patch": "@@ -19,6 +19,7 @@ use num::{Float, FPNaN, FPInfinite, ToPrimitive};\n use num;\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use option::{None, Option, Some};\n+use result::ResultUnwrap;\n use slice::{CloneableVector, ImmutableVector, MutableVector};\n use std::cmp::{Ord, Eq};\n use str::{StrAllocating, StrSlice};"}, {"sha": "de480ef1b7fb7ddb4a6d5923bd90c6af8a389aa0", "filename": "src/libstd/strbuf.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba7844a7fff0061e5b4528c2ecd5adf765145b70/src%2Flibstd%2Fstrbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7844a7fff0061e5b4528c2ecd5adf765145b70/src%2Flibstd%2Fstrbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstrbuf.rs?ref=ba7844a7fff0061e5b4528c2ecd5adf765145b70", "patch": "@@ -20,6 +20,7 @@ use mem;\n use option::{None, Option, Some};\n use ptr::RawPtr;\n use ptr;\n+use result::{Result, Ok, Err};\n use slice::{OwnedVector, Vector, CloneableVector};\n use str::{CharRange, OwnedStr, Str, StrSlice, StrAllocating};\n use str;\n@@ -72,14 +73,17 @@ impl StrBuf {\n         }\n     }\n \n-    /// Tries to create a new string buffer from the given byte\n-    /// vector, validating that the vector is UTF-8 encoded.\n+    /// Returns the vector as a string buffer, if possible, taking care not to\n+    /// copy it.\n+    ///\n+    /// Returns `Err` with the original vector if the vector contains invalid\n+    /// UTF-8.\n     #[inline]\n-    pub fn from_utf8(vec: Vec<u8>) -> Option<StrBuf> {\n+    pub fn from_utf8(vec: Vec<u8>) -> Result<StrBuf, Vec<u8>> {\n         if str::is_utf8(vec.as_slice()) {\n-            Some(StrBuf { vec: vec })\n+            Ok(StrBuf { vec: vec })\n         } else {\n-            None\n+            Err(vec)\n         }\n     }\n "}]}