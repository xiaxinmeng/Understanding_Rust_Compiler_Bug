{"sha": "a82f32b3ebe712f6e67e2c17cb5920bde83bdb6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MmYzMmIzZWJlNzEyZjZlNjdlMmMxN2NiNTkyMGJkZTgzYmRiNmY=", "commit": {"author": {"name": "Carl-Anton Ingmarsson", "email": "mail@carlanton.se", "date": "2014-01-02T23:28:17Z"}, "committer": {"name": "Carl-Anton Ingmarsson", "email": "mail@carlanton.se", "date": "2014-01-02T23:28:17Z"}, "message": "fixup! libstd: Always inline all byteswap functions", "tree": {"sha": "7fd9891261805e0b3c47a60d354b87f5f311e770", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fd9891261805e0b3c47a60d354b87f5f311e770"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a82f32b3ebe712f6e67e2c17cb5920bde83bdb6f", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a82f32b3ebe712f6e67e2c17cb5920bde83bdb6f", "html_url": "https://github.com/rust-lang/rust/commit/a82f32b3ebe712f6e67e2c17cb5920bde83bdb6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a82f32b3ebe712f6e67e2c17cb5920bde83bdb6f/comments", "author": {"login": "c-a", "id": 804040, "node_id": "MDQ6VXNlcjgwNDA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/804040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c-a", "html_url": "https://github.com/c-a", "followers_url": "https://api.github.com/users/c-a/followers", "following_url": "https://api.github.com/users/c-a/following{/other_user}", "gists_url": "https://api.github.com/users/c-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/c-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c-a/subscriptions", "organizations_url": "https://api.github.com/users/c-a/orgs", "repos_url": "https://api.github.com/users/c-a/repos", "events_url": "https://api.github.com/users/c-a/events{/privacy}", "received_events_url": "https://api.github.com/users/c-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c-a", "id": 804040, "node_id": "MDQ6VXNlcjgwNDA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/804040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c-a", "html_url": "https://github.com/c-a", "followers_url": "https://api.github.com/users/c-a/followers", "following_url": "https://api.github.com/users/c-a/following{/other_user}", "gists_url": "https://api.github.com/users/c-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/c-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c-a/subscriptions", "organizations_url": "https://api.github.com/users/c-a/orgs", "repos_url": "https://api.github.com/users/c-a/repos", "events_url": "https://api.github.com/users/c-a/events{/privacy}", "received_events_url": "https://api.github.com/users/c-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1749d611254a4ae8992daa591fc5e60e652028fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/1749d611254a4ae8992daa591fc5e60e652028fa", "html_url": "https://github.com/rust-lang/rust/commit/1749d611254a4ae8992daa591fc5e60e652028fa"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "9acc09dfcc68145fe6692ead092a4b6e5a990896", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a82f32b3ebe712f6e67e2c17cb5920bde83bdb6f/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a82f32b3ebe712f6e67e2c17cb5920bde83bdb6f/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=a82f32b3ebe712f6e67e2c17cb5920bde83bdb6f", "patch": "@@ -486,33 +486,33 @@ extern \"rust-intrinsic\" {\n     pub fn u64_mul_with_overflow(x: u64, y: u64) -> (u64, bool);\n }\n \n-#[cfg(target_endian = \"little\")] #[inline(always)] pub fn to_le16(x: i16) -> i16 { x }\n-#[cfg(target_endian = \"big\")]    #[inline(always)] pub fn to_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n-#[cfg(target_endian = \"little\")] #[inline(always)] pub fn to_le32(x: i32) -> i32 { x }\n-#[cfg(target_endian = \"big\")]    #[inline(always)] pub fn to_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n-#[cfg(target_endian = \"little\")] #[inline(always)] pub fn to_le64(x: i64) -> i64 { x }\n-#[cfg(target_endian = \"big\")]    #[inline(always)] pub fn to_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n-\n-#[cfg(target_endian = \"little\")] #[inline(always)] pub fn to_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n-#[cfg(target_endian = \"big\")]    #[inline(always)] pub fn to_be16(x: i16) -> i16 { x }\n-#[cfg(target_endian = \"little\")] #[inline(always)] pub fn to_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n-#[cfg(target_endian = \"big\")]    #[inline(always)] pub fn to_be32(x: i32) -> i32 { x }\n-#[cfg(target_endian = \"little\")] #[inline(always)] pub fn to_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n-#[cfg(target_endian = \"big\")]    #[inline(always)] pub fn to_be64(x: i64) -> i64 { x }\n-\n-#[cfg(target_endian = \"little\")] #[inline(always)] pub fn from_le16(x: i16) -> i16 { x }\n-#[cfg(target_endian = \"big\")]    #[inline(always)] pub fn from_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n-#[cfg(target_endian = \"little\")] #[inline(always)] pub fn from_le32(x: i32) -> i32 { x }\n-#[cfg(target_endian = \"big\")]    #[inline(always)] pub fn from_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n-#[cfg(target_endian = \"little\")] #[inline(always)] pub fn from_le64(x: i64) -> i64 { x }\n-#[cfg(target_endian = \"big\")]    #[inline(always)] pub fn from_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n-\n-#[cfg(target_endian = \"little\")] #[inline(always)] pub fn from_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n-#[cfg(target_endian = \"big\")]    #[inline(always)] pub fn from_be16(x: i16) -> i16 { x }\n-#[cfg(target_endian = \"little\")] #[inline(always)] pub fn from_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n-#[cfg(target_endian = \"big\")]    #[inline(always)] pub fn from_be32(x: i32) -> i32 { x }\n-#[cfg(target_endian = \"little\")] #[inline(always)] pub fn from_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n-#[cfg(target_endian = \"big\")]    #[inline(always)] pub fn from_be64(x: i64) -> i64 { x }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_le16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_le32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_le64(x: i64) -> i64 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_be16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_be32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_be64(x: i64) -> i64 { x }\n+\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_le16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_le32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_le64(x: i64) -> i64 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_be16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_be32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_be64(x: i64) -> i64 { x }\n \n /// `TypeId` represents a globally unique identifier for a type\n #[lang=\"type_id\"] // This needs to be kept in lockstep with the code in trans/intrinsic.rs and"}]}