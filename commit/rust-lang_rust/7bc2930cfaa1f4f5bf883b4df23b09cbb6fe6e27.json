{"sha": "7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYzI5MzBjZmFhMWY0ZjViZjg4M2I0ZGYyM2IwOWNiYjZmZTZlMjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-17T19:20:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-18T04:21:09Z"}, "message": "roll back commit 1c7a62", "tree": {"sha": "af4ad0b3269f24f54d5a320bfd8aa20a41ded3e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af4ad0b3269f24f54d5a320bfd8aa20a41ded3e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27", "html_url": "https://github.com/rust-lang/rust/commit/7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e27b27cf8a9ece270f2556c3362524854d06de4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e27b27cf8a9ece270f2556c3362524854d06de4", "html_url": "https://github.com/rust-lang/rust/commit/6e27b27cf8a9ece270f2556c3362524854d06de4"}], "stats": {"total": 44, "additions": 16, "deletions": 28}, "files": [{"sha": "a6bf286a2a83218d4abe5fe40d67c0c07b68c908", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27", "patch": "@@ -16,7 +16,6 @@ type upcalls =\n      free: ValueRef,\n      shared_malloc: ValueRef,\n      shared_free: ValueRef,\n-     memset: ValueRef,\n      mark: ValueRef,\n      create_shared_type_desc: ValueRef,\n      free_shared_type_desc: ValueRef,\n@@ -65,7 +64,6 @@ fn declare_upcalls(targ_cfg: @session::config,\n                 T_ptr(T_i8())),\n           shared_free:\n               dv(\"shared_free\", [T_ptr(T_i8())]),\n-          memset: dv(\"memset\", [T_ptr(T_i8()), T_i8(), T_i32(), T_i32()]),\n           mark:\n               d(\"mark\", [T_ptr(T_i8())], int_t),\n           create_shared_type_desc:"}, {"sha": "c9591340d9fcb9723482ae91e3f080c073704986", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27", "patch": "@@ -1945,21 +1945,21 @@ fn call_memmove(cx: @block_ctxt, dst: ValueRef, src: ValueRef,\n }\n \n fn call_bzero(cx: @block_ctxt, dst: ValueRef, n_bytes: ValueRef,\n-              align_bytes: ValueRef) -> @block_ctxt {\n+              align_bytes: ValueRef) -> result {\n     // FIXME: switch to the 64-bit variant when on such a platform.\n-    let ccx = bcx_ccx(cx), dst = dst;\n+    let ccx = bcx_ccx(cx);\n+    let i = ccx.intrinsics;\n+    assert (i.contains_key(\"llvm.memset.p0i8.i32\"));\n+    let memset = i.get(\"llvm.memset.p0i8.i32\");\n     let dst_ptr = PointerCast(cx, dst, T_ptr(T_i8()));\n     let size = IntCast(cx, n_bytes, T_i32());\n-    let align = IntCast(cx, align_bytes, T_i32());\n-    if lib::llvm::llvm::LLVMIsConstant(align_bytes) != True {\n-        // Use our own upcall (see issue 843), since the LLVM intrinsic can\n-        // only handle constant alignments.\n-        Call(cx, ccx.upcalls.memset, [dst_ptr, C_u8(0u), size, align]);\n-    } else {\n-        let memset = ccx.intrinsics.get(\"llvm.memset.p0i8.i32\");\n-        Call(cx, memset, [dst_ptr, C_u8(0u), size, align, C_bool(false)]);\n-    }\n-    cx\n+    let align =\n+        if lib::llvm::llvm::LLVMIsConstant(align_bytes) == True {\n+            IntCast(cx, align_bytes, T_i32())\n+        } else { IntCast(cx, C_int(ccx, 0), T_i32()) };\n+    let volatile = C_bool(false);\n+    ret rslt(cx,\n+             Call(cx, memset, [dst_ptr, C_u8(0u), size, align, volatile]));\n }\n \n fn memmove_ty(bcx: @block_ctxt, dst: ValueRef, src: ValueRef, t: ty::t) ->\n@@ -3984,13 +3984,13 @@ fn zero_alloca(cx: @block_ctxt, llptr: ValueRef, t: ty::t)\n         let sp = cx.sp;\n         let llty = type_of(ccx, sp, t);\n         Store(bcx, C_null(llty), llptr);\n-        bcx\n     } else {\n-        let {bcx, val: llsz} = size_of(bcx, t);\n+        let llsz = size_of(bcx, t);\n         // FIXME passing in the align here is correct, but causes issue #843\n-        let {bcx, val: align} = align_of(bcx, t);\n-        call_bzero(bcx, llptr, llsz, align)\n+        // let llalign = align_of(llsz.bcx, t);\n+        bcx = call_bzero(llsz.bcx, llptr, llsz.val, C_int(ccx, 0)).bcx;\n     }\n+    ret bcx;\n }\n \n fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> @block_ctxt {"}, {"sha": "65299a7d24453181b1df005047100232dcd21126", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27", "patch": "@@ -227,15 +227,6 @@ upcall_shared_free(void* ptr) {\n     UPCALL_SWITCH_STACK(&args, upcall_s_shared_free);\n }\n \n-/************************************************************************\n- * Memset that, contrary to the llvm intrinsic, handles dynamic alignment\n- */\n-\n-extern \"C\" CDECL void\n-upcall_memset(void* ptr, char val, unsigned size, unsigned align) {\n-    memset(ptr, val, align_to(size, align));\n-}\n-\n /**********************************************************************\n  * Called to deep copy a type descriptor onto the exchange heap.\n  * Used when sending closures.  It's possible that we should have"}, {"sha": "745e4c6e34b76873d6eb14b2a9bd44013b626626", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27", "patch": "@@ -74,7 +74,6 @@ upcall_rust_personality\n upcall_s_shared_malloc\n upcall_shared_malloc\n upcall_shared_free\n-upcall_memset\n upcall_vec_grow\n upcall_vec_push\n upcall_call_shim_on_c_stack"}]}