{"sha": "6c36a8c949a3e506b48481d746df85e6596d097d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMzZhOGM5NDlhM2U1MDZiNDg0ODFkNzQ2ZGY4NWU2NTk2ZDA5N2Q=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-02T13:50:32Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-02T14:12:03Z"}, "message": "Return earlier when reading/writing 0 bytes", "tree": {"sha": "2eb6ccb5d82fa875df79962501db281ddd890b02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eb6ccb5d82fa875df79962501db281ddd890b02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c36a8c949a3e506b48481d746df85e6596d097d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c36a8c949a3e506b48481d746df85e6596d097d", "html_url": "https://github.com/rust-lang/rust/commit/6c36a8c949a3e506b48481d746df85e6596d097d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c36a8c949a3e506b48481d746df85e6596d097d/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5022b19d38777c72a308028663c7b6994d04648", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5022b19d38777c72a308028663c7b6994d04648", "html_url": "https://github.com/rust-lang/rust/commit/f5022b19d38777c72a308028663c7b6994d04648"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "74b8dde5c7fcbfff9ccde03764ebea7247a19a42", "filename": "src/shims/io.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6c36a8c949a3e506b48481d746df85e6596d097d/src%2Fshims%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c36a8c949a3e506b48481d746df85e6596d097d/src%2Fshims%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fio.rs?ref=6c36a8c949a3e506b48481d746df85e6596d097d", "patch": "@@ -149,25 +149,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let tcx = &{ this.tcx.tcx };\n \n+        let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n+        // Reading zero bytes should not change `buf`\n+        if count == 0 {\n+            return Ok(0);\n+        }\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         let buf_scalar = this.read_scalar(buf_op)?.not_undef()?;\n-        let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n \n         // Remove the file handle to avoid borrowing issues\n         this.remove_handle_and(fd, |mut handle, this| {\n             // Don't use `?` to avoid returning before reinserting the handle\n-            let bytes =\n-            if count == 0 {\n-                Ok(handle.file.read(&mut []))\n-            } else {\n-                this.force_ptr(buf_scalar).and_then(|buf| this\n-                    .memory_mut()\n-                    .get_mut(buf.alloc_id).and_then(|alloc|\n-                        alloc.get_bytes_mut(tcx, buf, Size::from_bytes(count))\n-                        .map(|buffer| handle.file.read(buffer))\n-                    ))\n-\n-            };\n+            let bytes = this.force_ptr(buf_scalar).and_then(|buf| {\n+                this.memory_mut()\n+                    .get_mut(buf.alloc_id)?\n+                    .get_bytes_mut(tcx, buf, Size::from_bytes(count))\n+                    .map(|buffer| handle.file.read(buffer))\n+            });\n             // Reinsert the file handle\n             this.machine.file_handler.handles.insert(fd, handle);\n             this.consume_result(bytes?.map(|bytes| bytes as i64))\n@@ -188,9 +186,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let tcx = &{ this.tcx.tcx };\n \n+        let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n+        // Writing zero bytes should not change `buf`\n+        if count == 0 {\n+            return Ok(0);\n+        }\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n-        let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n \n         this.remove_handle_and(fd, |mut handle, this| {\n             let bytes = this.memory().get(buf.alloc_id).and_then(|alloc| {"}, {"sha": "666abd65c12e12cb0b079900413983e4a6974646", "filename": "tests/run-pass/file_read.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c36a8c949a3e506b48481d746df85e6596d097d/tests%2Frun-pass%2Ffile_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c36a8c949a3e506b48481d746df85e6596d097d/tests%2Frun-pass%2Ffile_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffile_read.rs?ref=6c36a8c949a3e506b48481d746df85e6596d097d", "patch": "@@ -2,21 +2,23 @@\n // compile-flags: -Zmiri-disable-isolation\n \n use std::fs::File;\n-use std::io::{ Read, Write };\n+use std::io::{Read, Write};\n \n fn main() {\n     // FIXME: remove the file and delete it when `rm` is implemented.\n     let path = \"./tests/hello.txt\";\n     let bytes = b\"Hello, World!\\n\";\n     // Test creating, writing and closing a file (closing is tested when `file` is dropped).\n     let mut file = File::create(path).unwrap();\n+    // Writing 0 bytes should not change the file contents.\n+    file.write(&mut []).unwrap();\n+\n     file.write(bytes).unwrap();\n     // Test opening, reading and closing a file.\n     let mut file = File::open(path).unwrap();\n     let mut contents = Vec::new();\n-    // Reading 0 bytes should not fill `contents`.\n-    file.read(&mut contents).unwrap();\n-    assert!(contents.is_empty());\n+    // Reading 0 bytes should not move the file pointer.\n+    file.read(&mut []).unwrap();\n     // Reading until EOF should get the whole text.\n     file.read_to_end(&mut contents).unwrap();\n     assert_eq!(bytes, contents.as_slice());"}]}