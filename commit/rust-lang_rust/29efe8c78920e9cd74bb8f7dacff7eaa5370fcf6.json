{"sha": "29efe8c78920e9cd74bb8f7dacff7eaa5370fcf6", "node_id": "C_kwDOAAsO6NoAKDI5ZWZlOGM3ODkyMGU5Y2Q3NGJiOGY3ZGFjZmY3ZWFhNTM3MGZjZjY", "commit": {"author": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-09-23T05:15:27Z"}, "committer": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-09-23T05:15:27Z"}, "message": "Add `#[inline]` to trivial functions on `core::sync::Exclusive`", "tree": {"sha": "b763847a2b6614a838bb8c00abdee1a54504f386", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b763847a2b6614a838bb8c00abdee1a54504f386"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29efe8c78920e9cd74bb8f7dacff7eaa5370fcf6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQQszICQ1r0Zqrp7OLPXcz0dendfCgUCYy1A7wAKCRDXcz0dendf\nCl6PAP9sZAC0xjjmjg7uK0f1JhfpTDQsgCgQOi+Tqpv9booxZQEAiAu0q2ERNE0p\nlyPWKlYDXoNA9OQ/VTt4a69xeOwWCwU=\n=rwi5\n-----END PGP SIGNATURE-----", "payload": "tree b763847a2b6614a838bb8c00abdee1a54504f386\nparent 9279c547c79ac840d4dd9cc40cc4e0219aabf2d4\nauthor Thom Chiovoloni <thom@shift.click> 1663910127 -0700\ncommitter Thom Chiovoloni <thom@shift.click> 1663910127 -0700\n\nAdd `#[inline]` to trivial functions on `core::sync::Exclusive`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29efe8c78920e9cd74bb8f7dacff7eaa5370fcf6", "html_url": "https://github.com/rust-lang/rust/commit/29efe8c78920e9cd74bb8f7dacff7eaa5370fcf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29efe8c78920e9cd74bb8f7dacff7eaa5370fcf6/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9279c547c79ac840d4dd9cc40cc4e0219aabf2d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9279c547c79ac840d4dd9cc40cc4e0219aabf2d4", "html_url": "https://github.com/rust-lang/rust/commit/9279c547c79ac840d4dd9cc40cc4e0219aabf2d4"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "c65c275000ce82bdf56d7e103a9b08aa0e9604d3", "filename": "library/core/src/sync/exclusive.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29efe8c78920e9cd74bb8f7dacff7eaa5370fcf6/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29efe8c78920e9cd74bb8f7dacff7eaa5370fcf6/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs?ref=29efe8c78920e9cd74bb8f7dacff7eaa5370fcf6", "patch": "@@ -100,13 +100,15 @@ impl<T: Sized> Exclusive<T> {\n     /// Wrap a value in an `Exclusive`\n     #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n     #[must_use]\n+    #[inline]\n     pub const fn new(t: T) -> Self {\n         Self { inner: t }\n     }\n \n     /// Unwrap the value contained in the `Exclusive`\n     #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n     #[must_use]\n+    #[inline]\n     pub const fn into_inner(self) -> T {\n         self.inner\n     }\n@@ -116,6 +118,7 @@ impl<T: ?Sized> Exclusive<T> {\n     /// Get exclusive access to the underlying value.\n     #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n     #[must_use]\n+    #[inline]\n     pub const fn get_mut(&mut self) -> &mut T {\n         &mut self.inner\n     }\n@@ -128,6 +131,7 @@ impl<T: ?Sized> Exclusive<T> {\n     /// produce _pinned_ access to the underlying value.\n     #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n     #[must_use]\n+    #[inline]\n     pub const fn get_pin_mut(self: Pin<&mut Self>) -> Pin<&mut T> {\n         // SAFETY: `Exclusive` can only produce `&mut T` if itself is unpinned\n         // `Pin::map_unchecked_mut` is not const, so we do this conversion manually\n@@ -139,6 +143,7 @@ impl<T: ?Sized> Exclusive<T> {\n     /// building an `Exclusive` with [`Exclusive::new`].\n     #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n     #[must_use]\n+    #[inline]\n     pub const fn from_mut(r: &'_ mut T) -> &'_ mut Exclusive<T> {\n         // SAFETY: repr is \u2265 C, so refs have the same layout; and `Exclusive` properties are `&mut`-agnostic\n         unsafe { &mut *(r as *mut T as *mut Exclusive<T>) }\n@@ -149,6 +154,7 @@ impl<T: ?Sized> Exclusive<T> {\n     /// building an `Exclusive` with [`Exclusive::new`].\n     #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n     #[must_use]\n+    #[inline]\n     pub const fn from_pin_mut(r: Pin<&'_ mut T>) -> Pin<&'_ mut Exclusive<T>> {\n         // SAFETY: `Exclusive` can only produce `&mut T` if itself is unpinned\n         // `Pin::map_unchecked_mut` is not const, so we do this conversion manually\n@@ -158,6 +164,7 @@ impl<T: ?Sized> Exclusive<T> {\n \n #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n impl<T> From<T> for Exclusive<T> {\n+    #[inline]\n     fn from(t: T) -> Self {\n         Self::new(t)\n     }\n@@ -166,7 +173,7 @@ impl<T> From<T> for Exclusive<T> {\n #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n impl<T: Future + ?Sized> Future for Exclusive<T> {\n     type Output = T::Output;\n-\n+    #[inline]\n     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n         self.get_pin_mut().poll(cx)\n     }"}]}