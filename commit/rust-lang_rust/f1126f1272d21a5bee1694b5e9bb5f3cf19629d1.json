{"sha": "f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "node_id": "C_kwDOAAsO6NoAKGYxMTI2ZjEyNzJkMjFhNWJlZTE2OTRiNWU5YmI1ZjNjZjE5NjI5ZDE", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-11-08T15:35:23Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-11-08T15:35:23Z"}, "message": "Make select_* methods return Vec for TraitEngine", "tree": {"sha": "7e7fe2d16b81bd7203300aa1744c7fb8ee8cc075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e7fe2d16b81bd7203300aa1744c7fb8ee8cc075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmGJQ7sACgkQAn35M4hi\nrd0Obw//ZONpgwKo5fia4cYDuzc/INUVzUTxRCi4tW1VmSVJNgQmlqnrEY8q+MNL\njMAJTNm0YftM4/6cltgdpsvG1s6RKi47urjgpiYtIO23kEekg2S4yWQ0N5o1Ep3j\nwNBScotnNIHSIc78v635yWd6Xyc1uWP/HQFvoOWyvGaALXGpjR29IvncsalhQq5T\nUek+apbNc8cA7JJU/7tRw05MfUYUPCnM8yN6ySv2PvERo+1wMuuFdMCIjmpbUMdB\n69uBgJGZQZimu/0Ppv3kSX81vbruxSgWiBM+YobEKGAtDi+RHZ0yL+sUEa+TIS8/\nlud5QK/3cNeUteituRVwWa1/L7CAL7nQJRUnD37QtHjZEEbv6+znCm/JuKjPi0Zv\nWVUTGjGx//fAYxQP6Y1b7mv8H3sRf5nXH2InFiEsm37Cw88To6vVSWFxo4gAdvWD\nOCo+ZgQ/X3KDkPGY4LUjnkCV1NANqUhODFTRpP/H6GyWTg/Tpaejm3t1YEwKpmX5\nM5piyhfBWzSNQO7cUC/S798TDk4h63Cqwxk+nK0N26vxJ5j8gAKDWXUXq8KL8uUD\nfEMni+y9sLZrZNiARHKB+jXg6TwkOoUMBNtLy5o2oaj9hTPchWCNGK+I+j0h01rc\nXi3ajIaHzixq9BaAlkOQ9dInolB7GxAtdKHPu5rwxc9oIVoANZw=\n=Izv4\n-----END PGP SIGNATURE-----", "payload": "tree 7e7fe2d16b81bd7203300aa1744c7fb8ee8cc075\nparent b3074819f615758da44a667bf3cb98c59227e2f9\nauthor Deadbeef <ent3rm4n@gmail.com> 1636385723 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1636385723 +0800\n\nMake select_* methods return Vec for TraitEngine\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "html_url": "https://github.com/rust-lang/rust/commit/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3074819f615758da44a667bf3cb98c59227e2f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3074819f615758da44a667bf3cb98c59227e2f9", "html_url": "https://github.com/rust-lang/rust/commit/b3074819f615758da44a667bf3cb98c59227e2f9"}], "stats": {"total": 266, "additions": 148, "deletions": 118}, "files": [{"sha": "1bc9f8cf3ccc8660d83d41b83cfdee1ec85e4e04", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -339,7 +339,7 @@ fn try_extract_error_from_fulfill_cx<'tcx>(\n     // We generally shouldn't have errors here because the query was\n     // already run, but there's no point using `delay_span_bug`\n     // when we're going to emit an error here anyway.\n-    let _errors = fulfill_cx.select_all_or_error(infcx).err().unwrap_or_else(Vec::new);\n+    let _errors = fulfill_cx.select_all_or_error(infcx);\n \n     let (sub_region, cause) = infcx.with_region_constraints(|region_constraints| {\n         debug!(\"{:#?}\", region_constraints);"}, {"sha": "61fd828a430020d9c096a7a559135de424924a77", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -1054,8 +1054,9 @@ fn check_return_ty_is_sync(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, hir_id: HirId)\n         let mut fulfillment_cx = traits::FulfillmentContext::new();\n         let sync_def_id = tcx.require_lang_item(LangItem::Sync, Some(body.span));\n         fulfillment_cx.register_bound(&infcx, ty::ParamEnv::empty(), ty, sync_def_id, cause);\n-        if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n-            infcx.report_fulfillment_errors(&err, None, false);\n+        let errors = fulfillment_cx.select_all_or_error(&infcx);\n+        if !errors.is_empty() {\n+            infcx.report_fulfillment_errors(&errors, None, false);\n         }\n     });\n }"}, {"sha": "5b4a9d9dfad456e43b201933ffe15107eb2f73d9", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -108,7 +108,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         let tcx = self.tcx;\n \n         // Select everything, returning errors.\n-        let true_errors = fulfill_cx.select_where_possible(self).err().unwrap_or_else(Vec::new);\n+        let true_errors = fulfill_cx.select_where_possible(self);\n         debug!(\"true_errors = {:#?}\", true_errors);\n \n         if !true_errors.is_empty() {\n@@ -118,7 +118,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         }\n \n         // Anything left unselected *now* must be an ambiguity.\n-        let ambig_errors = fulfill_cx.select_all_or_error(self).err().unwrap_or_else(Vec::new);\n+        let ambig_errors = fulfill_cx.select_all_or_error(self);\n         debug!(\"ambig_errors = {:#?}\", ambig_errors);\n \n         let region_obligations = self.take_registered_region_obligations();"}, {"sha": "06d38e79527a03c69128b66af9eb089406e970fb", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -49,27 +49,27 @@ pub trait TraitEngine<'tcx>: 'tcx {\n     fn select_all_or_error(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Result<(), Vec<FulfillmentError<'tcx>>>;\n+    ) -> Vec<FulfillmentError<'tcx>>;\n \n     fn select_all_with_constness_or_error(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n         _constness: hir::Constness,\n-    ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n+    ) -> Vec<FulfillmentError<'tcx>> {\n         self.select_all_or_error(infcx)\n     }\n \n     fn select_where_possible(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Result<(), Vec<FulfillmentError<'tcx>>>;\n+    ) -> Vec<FulfillmentError<'tcx>>;\n \n     // FIXME(fee1-dead) this should not provide a default body for chalk as chalk should be updated\n     fn select_with_constness_where_possible(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n         _constness: hir::Constness,\n-    ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n+    ) -> Vec<FulfillmentError<'tcx>> {\n         self.select_where_possible(infcx)\n     }\n "}, {"sha": "4c80483fc1f1e7750b5c3e68200c75ccb6a6ec23", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -152,11 +152,12 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n             },\n             cause,\n         );\n-        if let Err(e) = fulfillcx.select_where_possible(&self.infcx) {\n+        let errors = fulfillcx.select_where_possible(&self.infcx);\n+        if !errors.is_empty() {\n             // This shouldn't happen, except for evaluate/fulfill mismatches,\n             // but that's not a reason for an ICE (`predicate_may_hold` is conservative\n             // by design).\n-            debug!(\"overloaded_deref_ty: encountered errors {:?} while fulfilling\", e);\n+            debug!(\"overloaded_deref_ty: encountered errors {:?} while fulfilling\", errors);\n             return None;\n         }\n         let obligations = fulfillcx.pending_obligations();"}, {"sha": "4469b2e60559f34e966a6fb87bf49a1fe7d9bca3", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -187,9 +187,11 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             // an additional sanity check.\n             let mut fulfill = FulfillmentContext::new();\n             fulfill.register_bound(&infcx, full_env, ty, trait_did, ObligationCause::dummy());\n-            fulfill.select_all_or_error(&infcx).unwrap_or_else(|e| {\n-                panic!(\"Unable to fulfill trait {:?} for '{:?}': {:?}\", trait_did, ty, e)\n-            });\n+            let errors = fulfill.select_all_or_error(&infcx);\n+            \n+            if !errors.is_empty() {\n+                panic!(\"Unable to fulfill trait {:?} for '{:?}': {:?}\", trait_did, ty, errors);\n+            }\n \n             let body_id_map: FxHashMap<_, _> = infcx\n                 .inner"}, {"sha": "eed7280ceafcd4606a021a0f834cfd6f9a09251e", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -52,31 +52,33 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     fn select_all_or_error(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n-        self.select_where_possible(infcx)?;\n-\n-        if self.obligations.is_empty() {\n-            Ok(())\n-        } else {\n-            let errors = self\n-                .obligations\n-                .iter()\n-                .map(|obligation| FulfillmentError {\n-                    obligation: obligation.clone(),\n-                    code: FulfillmentErrorCode::CodeAmbiguity,\n-                    // FIXME - does Chalk have a notation of 'root obligation'?\n-                    // This is just for diagnostics, so it's okay if this is wrong\n-                    root_obligation: obligation.clone(),\n-                })\n-                .collect();\n-            Err(errors)\n+    ) -> Vec<FulfillmentError<'tcx>> {\n+        {\n+            let errors = self.select_where_possible(infcx);\n+\n+            if !errors.is_empty() {\n+                return errors;\n+            }\n         }\n+\n+        // any remaining obligations are errors\n+        self\n+            .obligations\n+            .iter()\n+            .map(|obligation| FulfillmentError {\n+                obligation: obligation.clone(),\n+                code: FulfillmentErrorCode::CodeAmbiguity,\n+                // FIXME - does Chalk have a notation of 'root obligation'?\n+                // This is just for diagnostics, so it's okay if this is wrong\n+                root_obligation: obligation.clone(),\n+            })\n+            .collect()\n     }\n \n     fn select_where_possible(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n+    ) -> Vec<FulfillmentError<'tcx>> {\n         assert!(!infcx.is_in_snapshot());\n \n         let mut errors = Vec::new();\n@@ -147,7 +149,7 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n             }\n         }\n \n-        if errors.is_empty() { Ok(()) } else { Err(errors) }\n+        errors\n     }\n \n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {"}, {"sha": "bdd4fdd40438c6fb5e4ce219847bd106146f559a", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -120,7 +120,8 @@ where\n     // In principle, we only need to do this so long as `result`\n     // contains unbound type parameters. It could be a slight\n     // optimization to stop iterating early.\n-    if let Err(errors) = fulfill_cx.select_all_or_error(infcx) {\n+    let errors = fulfill_cx.select_all_or_error(infcx);\n+    if !errors.is_empty() {\n         infcx.tcx.sess.delay_span_bug(\n             rustc_span::DUMMY_SP,\n             &format!(\"Encountered errors `{:?}` resolving bounds after type-checking\", errors),"}, {"sha": "ebac19b923dab87f81407a49222fa8ee2d45a2c0", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -129,7 +129,7 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     fn select(\n         &mut self,\n         selcx: &mut SelectionContext<'a, 'tcx>,\n-    ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n+    ) -> Vec<FulfillmentError<'tcx>> {\n         let span = debug_span!(\"select\", obligation_forest_size = ?self.predicates.len());\n         let _enter = span.enter();\n \n@@ -163,7 +163,7 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n             errors.len()\n         );\n \n-        if errors.is_empty() { Ok(()) } else { Err(errors) }\n+        errors\n     }\n }\n \n@@ -226,38 +226,46 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     fn select_all_or_error(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n-        self.select_where_possible(infcx)?;\n+    ) -> Vec<FulfillmentError<'tcx>> {\n+        {\n+            let errors = self.select_where_possible(infcx);\n+            if !errors.is_empty() {\n+                return errors;\n+            }\n+        }\n \n-        let errors: Vec<_> = self\n+        self\n             .predicates\n             .to_errors(CodeAmbiguity)\n             .into_iter()\n             .map(to_fulfillment_error)\n-            .collect();\n-        if errors.is_empty() { Ok(()) } else { Err(errors) }\n+            .collect()\n     }\n \n     fn select_all_with_constness_or_error(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n         constness: rustc_hir::Constness,\n-    ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n-        self.select_with_constness_where_possible(infcx, constness)?;\n+    ) -> Vec<FulfillmentError<'tcx>> {\n+        {\n+            let errors = self.select_with_constness_where_possible(infcx, constness);\n+            if !errors.is_empty() {\n+                return errors;\n+            }\n+        }\n \n-        let errors: Vec<_> = self\n+        self\n             .predicates\n             .to_errors(CodeAmbiguity)\n             .into_iter()\n             .map(to_fulfillment_error)\n-            .collect();\n-        if errors.is_empty() { Ok(()) } else { Err(errors) }\n+            .collect()\n     }\n \n     fn select_where_possible(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n+    ) -> Vec<FulfillmentError<'tcx>> {\n         let mut selcx = SelectionContext::new(infcx);\n         self.select(&mut selcx)\n     }\n@@ -266,7 +274,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n         constness: hir::Constness,\n-    ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n+    ) -> Vec<FulfillmentError<'tcx>> {\n         let mut selcx = SelectionContext::with_constness(infcx, constness);\n         self.select(&mut selcx)\n     }"}, {"sha": "d4a586b0124a20b1bd790bebc98f0ccc991f0611", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -180,21 +180,21 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n         // Note: we only assume something is `Copy` if we can\n         // *definitively* show that it implements `Copy`. Otherwise,\n         // assume it is move; linear is always ok.\n-        match fulfill_cx.select_all_or_error(infcx) {\n-            Ok(()) => {\n+        match fulfill_cx.select_all_or_error(infcx).as_slice() {\n+            [] => {\n                 debug!(\n                     \"type_known_to_meet_bound_modulo_regions: ty={:?} bound={} success\",\n                     ty,\n                     infcx.tcx.def_path_str(def_id)\n                 );\n                 true\n             }\n-            Err(e) => {\n+            errors => {\n                 debug!(\n-                    \"type_known_to_meet_bound_modulo_regions: ty={:?} bound={} errors={:?}\",\n-                    ty,\n-                    infcx.tcx.def_path_str(def_id),\n-                    e\n+                    ?ty,\n+                    bound = %infcx.tcx.def_path_str(def_id),\n+                    ?errors,\n+                    \"type_known_to_meet_bound_modulo_regions\"\n                 );\n                 false\n             }\n@@ -410,7 +410,10 @@ where\n     }\n \n     debug!(\"fully_normalize: select_all_or_error start\");\n-    fulfill_cx.select_all_or_error(infcx)?;\n+    let errors = fulfill_cx.select_all_or_error(infcx);\n+    if !errors.is_empty() {\n+        return Err(errors);\n+    }\n     debug!(\"fully_normalize: select_all_or_error complete\");\n     let resolved_value = infcx.resolve_vars_if_possible(normalized_value);\n     debug!(\"fully_normalize: resolved_value={:?}\", resolved_value);\n@@ -441,7 +444,9 @@ pub fn impossible_predicates<'tcx>(\n             fulfill_cx.register_predicate_obligation(&infcx, obligation);\n         }\n \n-        fulfill_cx.select_all_or_error(&infcx).is_err()\n+        let errors = fulfill_cx.select_all_or_error(&infcx);\n+\n+        !errors.is_empty()\n     });\n     debug!(\"impossible_predicates = {:?}\", result);\n     result"}, {"sha": "da891b355711d0c0a21bb9a71f83515d821d0798", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/custom.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -77,10 +77,11 @@ fn scrape_region_constraints<'tcx, Op: super::TypeOp<'tcx, Output = R>, R>(\n     let InferOk { value, obligations } = infcx.commit_if_ok(|_| op())?;\n     debug_assert!(obligations.iter().all(|o| o.cause.body_id == dummy_body_id));\n     fulfill_cx.register_predicate_obligations(infcx, obligations);\n-    if let Err(e) = fulfill_cx.select_all_or_error(infcx) {\n+    let errors = fulfill_cx.select_all_or_error(infcx);\n+    if !errors.is_empty()  {\n         infcx.tcx.sess.diagnostic().delay_span_bug(\n             DUMMY_SP,\n-            &format!(\"errors selecting obligation during MIR typeck: {:?}\", e),\n+            &format!(\"errors selecting obligation during MIR typeck: {:?}\", errors),\n         );\n     }\n "}, {"sha": "f81a74a67dce57626d4fbd66d8cd4365ff50bc02", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -225,8 +225,18 @@ fn fulfill_implication<'a, 'tcx>(\n         for oblig in obligations.chain(more_obligations) {\n             fulfill_cx.register_predicate_obligation(&infcx, oblig);\n         }\n-        match fulfill_cx.select_all_or_error(infcx) {\n-            Err(errors) => {\n+        match fulfill_cx.select_all_or_error(infcx).as_slice() {\n+            [] => {\n+                debug!(\n+                    \"fulfill_implication: an impl for {:?} specializes {:?}\",\n+                    source_trait_ref, target_trait_ref\n+                );\n+\n+                // Now resolve the *substitution* we built for the target earlier, replacing\n+                // the inference variables inside with whatever we got from fulfillment.\n+                Ok(infcx.resolve_vars_if_possible(target_substs))\n+            }\n+            errors => {\n                 // no dice!\n                 debug!(\n                     \"fulfill_implication: for impls on {:?} and {:?}, \\\n@@ -238,17 +248,6 @@ fn fulfill_implication<'a, 'tcx>(\n                 );\n                 Err(())\n             }\n-\n-            Ok(()) => {\n-                debug!(\n-                    \"fulfill_implication: an impl for {:?} specializes {:?}\",\n-                    source_trait_ref, target_trait_ref\n-                );\n-\n-                // Now resolve the *substitution* we built for the target earlier, replacing\n-                // the inference variables inside with whatever we got from fulfillment.\n-                Ok(infcx.resolve_vars_if_possible(target_substs))\n-            }\n         }\n     })\n }"}, {"sha": "3d71382227868df2c1ccd43ddb0cbafa19ece152", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -103,7 +103,7 @@ fn type_marked_structural(\n     //\n     // 2. We are sometimes doing future-incompatibility lints for\n     //    now, so we do not want unconditional errors here.\n-    fulfillment_cx.select_all_or_error(infcx).is_ok()\n+    fulfillment_cx.select_all_or_error(infcx).is_empty()\n }\n \n /// This implements the traversal over the structure of a given type to try to"}, {"sha": "92f2760e62c7e86ef62e460bc320126f73cb996d", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -128,9 +128,9 @@ fn compute_implied_outlives_bounds<'tcx>(\n \n     // Ensure that those obligations that we had to solve\n     // get solved *here*.\n-    match fulfill_cx.select_all_or_error(infcx) {\n-        Ok(()) => Ok(implied_bounds),\n-        Err(_) => Err(NoSolution),\n+    match fulfill_cx.select_all_or_error(infcx).as_slice() {\n+        [] => Ok(implied_bounds),\n+        _ => Err(NoSolution),\n     }\n }\n "}, {"sha": "909fdf63f3ec0839364ee07837358d223c3417ae", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -663,8 +663,9 @@ fn check_opaque_meets_bounds<'tcx>(\n \n         // Check that all obligations are satisfied by the implementation's\n         // version.\n-        if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n-            infcx.report_fulfillment_errors(errors, None, false);\n+        let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n+        if !errors.is_empty()  {\n+            infcx.report_fulfillment_errors(&errors, None, false);\n         }\n \n         // Finally, resolve all regions. This catches wily misuses of"}, {"sha": "28712e0658269d5338fdd39ace5c3a713cc6838e", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -950,7 +950,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n             let mut fcx = traits::FulfillmentContext::new_in_snapshot();\n             fcx.register_predicate_obligations(self, ok.obligations);\n-            fcx.select_where_possible(&self).is_ok()\n+            fcx.select_where_possible(&self).is_empty()\n         })\n     }\n "}, {"sha": "b965b3cb56d527a3624fb7251255fd617d35ad28", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -391,8 +391,9 @@ fn compare_predicate_entailment<'tcx>(\n \n         // Check that all obligations are satisfied by the implementation's\n         // version.\n-        if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n-            infcx.report_fulfillment_errors(errors, None, false);\n+        let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n+        if !errors.is_empty() {\n+            infcx.report_fulfillment_errors(&errors, None, false);\n             return Err(ErrorReported);\n         }\n \n@@ -1094,8 +1095,9 @@ crate fn compare_const_impl<'tcx>(\n \n         // Check that all obligations are satisfied by the implementation's\n         // version.\n-        if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n-            infcx.report_fulfillment_errors(errors, None, false);\n+        let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n+        if !errors.is_empty()  {\n+            infcx.report_fulfillment_errors(&errors, None, false);\n             return;\n         }\n \n@@ -1210,8 +1212,9 @@ fn compare_type_predicate_entailment<'tcx>(\n \n         // Check that all obligations are satisfied by the implementation's\n         // version.\n-        if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n-            infcx.report_fulfillment_errors(errors, None, false);\n+        let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n+        if !errors.is_empty()  {\n+            infcx.report_fulfillment_errors(&errors, None, false);\n             return Err(ErrorReported);\n         }\n \n@@ -1427,10 +1430,9 @@ pub fn check_type_bounds<'tcx>(\n \n         // Check that all obligations are satisfied by the implementation's\n         // version.\n-        if let Err(ref errors) =\n-            inh.fulfillment_cx.borrow_mut().select_all_with_constness_or_error(&infcx, constness)\n-        {\n-            infcx.report_fulfillment_errors(errors, None, false);\n+        let errors = inh.fulfillment_cx.borrow_mut().select_all_with_constness_or_error(&infcx, constness);\n+        if !errors.is_empty() {\n+            infcx.report_fulfillment_errors(&errors, None, false);\n             return Err(ErrorReported);\n         }\n "}, {"sha": "bfa0d92ab47ab9546bfde2ee8b4a42f886675343", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -113,9 +113,10 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n             }\n         }\n \n-        if let Err(ref errors) = fulfillment_cx.select_all_or_error(&infcx) {\n+        let errors = fulfillment_cx.select_all_or_error(&infcx);\n+        if !errors.is_empty() {\n             // this could be reached when we get lazy normalization\n-            infcx.report_fulfillment_errors(errors, None, false);\n+            infcx.report_fulfillment_errors(&errors, None, false);\n             return Err(ErrorReported);\n         }\n "}, {"sha": "a86c16ef6df4f13ff1cd9802afd5edd508b1ac6f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -642,11 +642,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     pub(in super::super) fn select_all_obligations_or_error(&self) {\n-        if let Err(errors) = self\n+        let errors =self\n             .fulfillment_cx\n             .borrow_mut()\n-            .select_all_with_constness_or_error(&self, self.inh.constness)\n-        {\n+            .select_all_with_constness_or_error(&self, self.inh.constness);\n+\n+        if !errors.is_empty() {\n             self.report_fulfillment_errors(&errors, self.inh.body_id, false);\n         }\n     }\n@@ -657,13 +658,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         fallback_has_occurred: bool,\n         mutate_fulfillment_errors: impl Fn(&mut Vec<traits::FulfillmentError<'tcx>>),\n     ) {\n-        let result = self\n+        let mut result = self\n             .fulfillment_cx\n             .borrow_mut()\n             .select_with_constness_where_possible(self, self.inh.constness);\n-        if let Err(mut errors) = result {\n-            mutate_fulfillment_errors(&mut errors);\n-            self.report_fulfillment_errors(&errors, self.inh.body_id, fallback_has_occurred);\n+        if !result.is_empty()  {\n+            mutate_fulfillment_errors(&mut result);\n+            self.report_fulfillment_errors(&result, self.inh.body_id, fallback_has_occurred);\n         }\n     }\n \n@@ -793,14 +794,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // we can.  We don't care if some things turn\n                         // out unconstrained or ambiguous, as we're\n                         // just trying to get hints here.\n-                        self.save_and_restore_in_snapshot_flag(|_| {\n+                        let errors = self.save_and_restore_in_snapshot_flag(|_| {\n                             let mut fulfill = <dyn TraitEngine<'_>>::new(self.tcx);\n                             for obligation in ok.obligations {\n                                 fulfill.register_predicate_obligation(self, obligation);\n                             }\n                             fulfill.select_where_possible(self)\n-                        })\n-                        .map_err(|_| ())?;\n+                        });\n+\n+                        if !errors.is_empty() {\n+                            return Err(());\n+                        }\n                     }\n                     Err(_) => return Err(()),\n                 }"}, {"sha": "9c53a1d4eb68dacc98fba193e2e9efb3963d9f88", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -826,10 +826,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.obligation_for_method(span, trait_did, lhs_ty, Some(other_tys));\n                 let mut fulfill = <dyn TraitEngine<'_>>::new(self.tcx);\n                 fulfill.register_predicate_obligation(self, obligation);\n-                Err(match fulfill.select_where_possible(&self.infcx) {\n-                    Err(errors) => errors,\n-                    _ => vec![],\n-                })\n+                Err(fulfill.select_where_possible(&self.infcx))\n             }\n         }\n     }"}, {"sha": "289985a47178fd15c199873ed02cb73e20c19a4e", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -263,7 +263,8 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n                     }\n \n                     // Check that all transitive obligations are satisfied.\n-                    if let Err(errors) = fulfill_cx.select_all_or_error(&infcx) {\n+                    let errors = fulfill_cx.select_all_or_error(&infcx);\n+                    if !errors.is_empty() {\n                         infcx.report_fulfillment_errors(&errors, None, false);\n                     }\n \n@@ -522,7 +523,8 @@ pub fn coerce_unsized_info(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedI\n         fulfill_cx.register_predicate_obligation(&infcx, predicate);\n \n         // Check that all transitive obligations are satisfied.\n-        if let Err(errors) = fulfill_cx.select_all_or_error(&infcx) {\n+        let errors = fulfill_cx.select_all_or_error(&infcx);\n+        if !errors.is_empty() {\n             infcx.report_fulfillment_errors(&errors, None, false);\n         }\n "}, {"sha": "a49eda6572de2cb3cf3248d6a5e317a3ab8ee893", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -88,7 +88,8 @@ fn diagnostic_hir_wf_check<'tcx>(\n                     ),\n                 );\n \n-                if let Err(errors) = fulfill.select_all_or_error(&infcx) {\n+                let errors = fulfill.select_all_or_error(&infcx);\n+                if !errors.is_empty() {\n                     tracing::debug!(\"Wf-check got errors for {:?}: {:?}\", ty, errors);\n                     for error in errors {\n                         if error.obligation.predicate == self.predicate {"}, {"sha": "ba0fd12a2755f480568093ea79f6ee7acde5c994", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -157,10 +157,10 @@ fn require_same_types<'tcx>(\n             }\n         }\n \n-        match fulfill_cx.select_all_or_error(infcx) {\n-            Ok(()) => true,\n-            Err(errors) => {\n-                infcx.report_fulfillment_errors(&errors, None, false);\n+        match fulfill_cx.select_all_or_error(infcx).as_slice() {\n+            [] => true,\n+            errors => {\n+                infcx.report_fulfillment_errors(errors, None, false);\n                 false\n             }\n         }\n@@ -352,8 +352,9 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n                 term_id,\n                 cause,\n             );\n-            if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n-                infcx.report_fulfillment_errors(&err, None, false);\n+            let errors = fulfillment_cx.select_all_or_error(&infcx);\n+            if !errors.is_empty() {\n+                infcx.report_fulfillment_errors(&errors, None, false);\n                 error = true;\n             }\n         });"}, {"sha": "91727d57ddf4e498364f9c317b42c8b9f3c614b4", "filename": "compiler/rustc_typeck/src/outlives/outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -83,7 +83,8 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         // variables. Process these constraints.\n         let mut fulfill_cx = FulfillmentContext::new();\n         fulfill_cx.register_predicate_obligations(self, result.obligations);\n-        if fulfill_cx.select_all_or_error(self).is_err() {\n+        let errors = fulfill_cx.select_all_or_error(self);\n+        if !errors.is_empty() {\n             self.tcx.sess.delay_span_bug(\n                 span,\n                 \"implied_outlives_bounds failed to solve obligations from instantiation\","}, {"sha": "6b2ac985555dc59fc7014b3c0afeb4267ffd9420", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "patch": "@@ -77,13 +77,13 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             if is_future {\n                 let send_trait = cx.tcx.get_diagnostic_item(sym::Send).unwrap();\n                 let span = decl.output.span();\n-                let send_result = cx.tcx.infer_ctxt().enter(|infcx| {\n+                let send_errors = cx.tcx.infer_ctxt().enter(|infcx| {\n                     let cause = traits::ObligationCause::misc(span, hir_id);\n                     let mut fulfillment_cx = traits::FulfillmentContext::new();\n                     fulfillment_cx.register_bound(&infcx, cx.param_env, ret_ty, send_trait, cause);\n                     fulfillment_cx.select_all_or_error(&infcx)\n                 });\n-                if let Err(send_errors) = send_result {\n+                if !send_errors.is_empty() {\n                     span_lint_and_then(\n                         cx,\n                         FUTURE_NOT_SEND,"}]}