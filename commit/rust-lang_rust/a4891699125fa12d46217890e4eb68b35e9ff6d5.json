{"sha": "a4891699125fa12d46217890e4eb68b35e9ff6d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ODkxNjk5MTI1ZmExMmQ0NjIxNzg5MGU0ZWI2OGIzNWU5ZmY2ZDU=", "commit": {"author": {"name": "F001", "email": "changchun.fan@qq.com", "date": "2018-08-28T04:51:43Z"}, "committer": {"name": "F001", "email": "changchun.fan@qq.com", "date": "2018-09-13T02:57:28Z"}, "message": "implement feature tuple_struct_self_ctor", "tree": {"sha": "be5ca3676bccdcaeeb465f862d0e0195bb3f0c11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be5ca3676bccdcaeeb465f862d0e0195bb3f0c11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4891699125fa12d46217890e4eb68b35e9ff6d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4891699125fa12d46217890e4eb68b35e9ff6d5", "html_url": "https://github.com/rust-lang/rust/commit/a4891699125fa12d46217890e4eb68b35e9ff6d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4891699125fa12d46217890e4eb68b35e9ff6d5/comments", "author": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "committer": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2302daef3608c09e2b50193a64611b18ced86f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2302daef3608c09e2b50193a64611b18ced86f3", "html_url": "https://github.com/rust-lang/rust/commit/f2302daef3608c09e2b50193a64611b18ced86f3"}], "stats": {"total": 295, "additions": 254, "deletions": 41}, "files": [{"sha": "7ea52ebe2431cf430cc5aea8aff463a1567e8bd1", "filename": "src/doc/unstable-book/src/language-features/tuple-struct-self-ctor.md", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftuple-struct-self-ctor.md", "raw_url": "https://github.com/rust-lang/rust/raw/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftuple-struct-self-ctor.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftuple-struct-self-ctor.md?ref=a4891699125fa12d46217890e4eb68b35e9ff6d5", "patch": "@@ -0,0 +1,33 @@\n+# `tuple_struct_self_ctor`\n+\n+The tracking issue for this feature is: [#51994]\n+[#51994]: https://github.com/rust-lang/rust/issues/51994\n+\n+------------------------\n+\n+The `tuple_struct_self_ctor` feature gate lets you use the special `Self`\n+identifier as a constructor and a pattern.\n+\n+A simple example is:\n+\n+```rust\n+#![feature(tuple_struct_self_ctor)]\n+\n+struct ST(i32, i32);\n+\n+impl ST {\n+    fn new() -> Self {\n+        ST(0, 1)\n+    }\n+\n+    fn ctor() -> Self {\n+        Self(1,2)           // constructed by `Self`, it is the same as `ST(1, 2)`\n+    }\n+\n+    fn pattern(self) {\n+        match self {\n+            Self(x, y) => println!(\"{} {}\", x, y), // used as a pattern\n+        }\n+    }\n+}\n+```"}, {"sha": "c7aea641e35d42e0eb0b9dcd92fc80c828d269cb", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=a4891699125fa12d46217890e4eb68b35e9ff6d5", "patch": "@@ -585,6 +585,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                                                    CtorKind::from_ast(struct_def));\n                     self.define(parent, ident, ValueNS, (ctor_def, ctor_vis, sp, expansion));\n                     self.struct_constructors.insert(def.def_id(), (ctor_def, ctor_vis));\n+                    self.tuple_structs.insert(def.def_id(), ctor_def);\n                 }\n             }\n \n@@ -703,6 +704,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                         self.cstore.def_key(def_id).parent\n                             .map(|index| DefId { krate: def_id.krate, index: index }) {\n                     self.struct_constructors.insert(struct_def_id, (def, vis));\n+                    self.tuple_structs.insert(struct_def_id, def);\n                 }\n             }\n             Def::Trait(..) => {"}, {"sha": "f2d46c0510c756801481e79d612145ac44d5c80a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 63, "deletions": 13, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a4891699125fa12d46217890e4eb68b35e9ff6d5", "patch": "@@ -1463,6 +1463,9 @@ pub struct Resolver<'a, 'b: 'a> {\n     /// it's not used during normal resolution, only for better error reporting.\n     struct_constructors: DefIdMap<(Def, ty::Visibility)>,\n \n+    /// Map from tuple struct's DefId to VariantData's Def\n+    tuple_structs: DefIdMap<Def>,\n+\n     /// Only used for better errors on `fn(): fn()`\n     current_type_ascription: Vec<Span>,\n \n@@ -1764,6 +1767,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             warned_proc_macros: FxHashSet(),\n             potentially_unused_imports: Vec::new(),\n             struct_constructors: DefIdMap(),\n+            tuple_structs: DefIdMap(),\n             found_unresolved_macro: false,\n             unused_macros: FxHashSet(),\n             current_type_ascription: Vec::new(),\n@@ -2204,6 +2208,19 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         None\n     }\n \n+    fn resolve_adt(&mut self, item: &Item, generics: &Generics) {\n+        self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n+            let item_def_id = this.definitions.local_def_id(item.id);\n+            if this.session.features_untracked().self_in_typedefs {\n+                this.with_self_rib(Def::SelfTy(None, Some(item_def_id)), |this| {\n+                    visit::walk_item(this, item);\n+                });\n+            } else {\n+                visit::walk_item(this, item);\n+            }\n+        });\n+    }\n+\n     fn resolve_item(&mut self, item: &Item) {\n         let name = item.ident.name;\n         debug!(\"(resolving item) resolving {}\", name);\n@@ -2216,19 +2233,25 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                              |this| visit::walk_item(this, item));\n             }\n \n+            ItemKind::Struct(ref variant, ref generics) => {\n+                if variant.is_tuple() || variant.is_unit() {\n+                    if let Some(def_id) = self.definitions.opt_local_def_id(item.id) {\n+                        if let Some(variant_id) = self.definitions.opt_local_def_id(variant.id()) {\n+                            let variant_def = if variant.is_tuple() {\n+                                Def::StructCtor(variant_id, CtorKind::Fn)\n+                            } else {\n+                                Def::StructCtor(variant_id, CtorKind::Const)\n+                            };\n+                            self.tuple_structs.insert(def_id, variant_def);\n+                        }\n+                    }\n+                }\n+                self.resolve_adt(item, generics);\n+            }\n+\n             ItemKind::Enum(_, ref generics) |\n-            ItemKind::Struct(_, ref generics) |\n             ItemKind::Union(_, ref generics) => {\n-                self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n-                    let item_def_id = this.definitions.local_def_id(item.id);\n-                    if this.session.features_untracked().self_in_typedefs {\n-                        this.with_self_rib(Def::SelfTy(None, Some(item_def_id)), |this| {\n-                            visit::walk_item(this, item);\n-                        });\n-                    } else {\n-                        visit::walk_item(this, item);\n-                    }\n-                });\n+                self.resolve_adt(item, generics);\n             }\n \n             ItemKind::Impl(.., ref generics, ref opt_trait_ref, ref self_type, ref impl_items) =>\n@@ -2503,6 +2526,32 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         self.ribs[TypeNS].pop();\n     }\n \n+    fn with_tuple_struct_self_ctor_rib<F>(&mut self, self_ty: &Ty, f: F)\n+        where F: FnOnce(&mut Resolver)\n+    {\n+        let variant_def = if self.session.features_untracked().tuple_struct_self_ctor {\n+            let base_def = self.def_map.get(&self_ty.id).map(|r| r.base_def());\n+            if let Some(Def::Struct(ref def_id)) = base_def {\n+                self.tuple_structs.get(def_id).cloned()\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        };\n+\n+        // when feature gate is enabled and `Self` is a tuple struct\n+        if let Some(variant_def) = variant_def {\n+            let mut self_type_rib = Rib::new(NormalRibKind);\n+            self_type_rib.bindings.insert(keywords::SelfType.ident(), variant_def);\n+            self.ribs[ValueNS].push(self_type_rib);\n+            f(self);\n+            self.ribs[ValueNS].pop();\n+        } else {\n+            f(self);\n+        }\n+    }\n+\n     fn resolve_implementation(&mut self,\n                               generics: &Generics,\n                               opt_trait_reference: &Option<TraitRef>,\n@@ -2554,8 +2603,9 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                                                   ValueNS,\n                                                                   impl_item.span,\n                                                 |n, s| MethodNotMemberOfTrait(n, s));\n-\n-                                            visit::walk_impl_item(this, impl_item);\n+                                            this.with_tuple_struct_self_ctor_rib(self_type, |this| {\n+                                                visit::walk_impl_item(this, impl_item);\n+                                            });\n                                         }\n                                         ImplItemKind::Type(ref ty) => {\n                                             // If this is a trait impl, ensure the type"}, {"sha": "4d24abcf90eb33b3c3bb72d4ad9da8f1fee5be79", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a4891699125fa12d46217890e4eb68b35e9ff6d5", "patch": "@@ -512,6 +512,9 @@ declare_features! (\n \n     // Non-builtin attributes in inner attribute position\n     (active, custom_inner_attributes, \"1.30.0\", Some(38356), None),\n+\n+    // tuple struct self constructor (RFC 2302)\n+    (active, tuple_struct_self_ctor, \"1.31.0\", Some(51994), None),\n );\n \n declare_features! (\n@@ -1736,6 +1739,15 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ExprKind::Async(..) => {\n                 gate_feature_post!(&self, async_await, e.span, \"async blocks are unstable\");\n             }\n+            ast::ExprKind::Call(ref callee, _) => {\n+                if let ast::ExprKind::Path(_, ref p) = callee.node {\n+                    if p.segments.len() == 1 &&\n+                       p.segments[0].ident.name == keywords::SelfType.name() {\n+                        gate_feature_post!(&self, tuple_struct_self_ctor, e.span,\n+                            \"tuple struct Self constructors are unstable\");\n+                    }\n+                }\n+            }\n             _ => {}\n         }\n         visit::walk_expr(self, e);"}, {"sha": "7392003bb2300da7e8c79972bc921a576b349a83", "filename": "src/test/run-pass/tuple-struct-self-ctor.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Ftest%2Frun-pass%2Ftuple-struct-self-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Ftest%2Frun-pass%2Ftuple-struct-self-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-self-ctor.rs?ref=a4891699125fa12d46217890e4eb68b35e9ff6d5", "patch": "@@ -0,0 +1,102 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(tuple_struct_self_ctor)]\n+\n+#![allow(dead_code)]\n+\n+use std::fmt::Display;\n+\n+struct ST1(i32, i32);\n+\n+impl ST1 {\n+    fn new() -> Self {\n+        ST1(0, 1)\n+    }\n+\n+    fn ctor() -> Self {\n+        Self(1,2)         // Self as a constructor\n+    }\n+\n+    fn pattern(self) {\n+        match self {\n+            Self(x, y) => println!(\"{} {}\", x, y), // Self as a pattern\n+        }\n+    }\n+}\n+\n+struct ST2<T>(T); // With type parameter\n+\n+impl<T> ST2<T> where T: Display {\n+\n+    fn ctor(v: T) -> Self {\n+        Self(v)\n+    }\n+\n+    fn pattern(&self) {\n+        match self {\n+            Self(ref v) => println!(\"{}\", v),\n+        }\n+    }\n+}\n+\n+struct ST3<'a>(&'a i32); // With lifetime parameter\n+\n+impl<'a> ST3<'a> {\n+\n+    fn ctor(v: &'a i32) -> Self {\n+        Self(v)\n+    }\n+\n+    fn pattern(self) {\n+        let Self(ref v) = self;\n+        println!(\"{}\", v);\n+    }\n+}\n+\n+struct ST4(usize);\n+\n+impl ST4 {\n+    fn map(opt: Option<usize>) -> Option<Self> {\n+        opt.map(Self)     // use `Self` as a function passed somewhere\n+    }\n+}\n+\n+struct ST5;               // unit struct\n+\n+impl ST5 {\n+    fn ctor() -> Self {\n+        Self               // `Self` as a unit struct value\n+    }\n+\n+    fn pattern(self) -> Self {\n+        match self {\n+            Self => Self,   // `Self` as a unit struct value for matching\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let v1 = ST1::ctor();\n+    v1.pattern();\n+\n+    let v2 = ST2::ctor(10);\n+    v2.pattern();\n+\n+    let local = 42;\n+    let v3 = ST3::ctor(&local);\n+    v3.pattern();\n+\n+    let v4 = Some(1usize);\n+    let _ = ST4::map(v4);\n+\n+    let v5 = ST5::ctor();\n+    v5.pattern();\n+}"}, {"sha": "aa907e813ed5a7234f75411866395ede87a7b74a", "filename": "src/test/ui/feature-gates/feature-gate-tuple-struct-self-ctor.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tuple-struct-self-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tuple-struct-self-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tuple-struct-self-ctor.rs?ref=a4891699125fa12d46217890e4eb68b35e9ff6d5", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct ST(i32, i32);\n+\n+impl ST {\n+    fn ctor() -> Self {\n+        Self(1,2)\n+        //~^ ERROR: expected function, found self type `Self` [E0423]\n+        //~^^ ERROR: tuple struct Self constructors are unstable (see issue #51994) [E0658]\n+    }\n+}"}, {"sha": "e92924e960278045a3ea626661cd407ff05ce9c7", "filename": "src/test/ui/feature-gates/feature-gate-tuple-struct-self-ctor.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tuple-struct-self-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tuple-struct-self-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tuple-struct-self-ctor.stderr?ref=a4891699125fa12d46217890e4eb68b35e9ff6d5", "patch": "@@ -0,0 +1,20 @@\n+error[E0423]: expected function, found self type `Self`\n+  --> $DIR/feature-gate-tuple-struct-self-ctor.rs:15:9\n+   |\n+LL |         Self(1,2)\n+   |         ^^^^ not a function\n+   |\n+   = note: can't use `Self` as a constructor, you must use the implemented struct\n+\n+error[E0658]: tuple struct Self constructors are unstable (see issue #51994)\n+  --> $DIR/feature-gate-tuple-struct-self-ctor.rs:15:9\n+   |\n+LL |         Self(1,2)\n+   |         ^^^^^^^^^\n+   |\n+   = help: add #![feature(tuple_struct_self_ctor)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0423, E0658.\n+For more information about an error, try `rustc --explain E0423`."}, {"sha": "1f3588dd3ca4ece95b999e942258fdedd44368e6", "filename": "src/test/ui/resolve/tuple-struct-alias.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.rs?ref=a4891699125fa12d46217890e4eb68b35e9ff6d5", "patch": "@@ -11,15 +11,6 @@\n struct S(u8, u16);\n type A = S;\n \n-impl S {\n-    fn f() {\n-        let s = Self(0, 1); //~ ERROR expected function\n-        match s {\n-            Self(..) => {} //~ ERROR expected tuple struct/variant\n-        }\n-    }\n-}\n-\n fn main() {\n     let s = A(0, 1); //~ ERROR expected function\n     match s {"}, {"sha": "ad2ae4acb8b0e387cf4bab04f5cef24a79ddaf8f", "filename": "src/test/ui/resolve/tuple-struct-alias.stderr", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr?ref=a4891699125fa12d46217890e4eb68b35e9ff6d5", "patch": "@@ -1,36 +1,20 @@\n-error[E0423]: expected function, found self type `Self`\n-  --> $DIR/tuple-struct-alias.rs:16:17\n-   |\n-LL |         let s = Self(0, 1); //~ ERROR expected function\n-   |                 ^^^^ not a function\n-   |\n-   = note: can't use `Self` as a constructor, you must use the implemented struct\n-\n-error[E0532]: expected tuple struct/variant, found self type `Self`\n-  --> $DIR/tuple-struct-alias.rs:18:13\n-   |\n-LL |             Self(..) => {} //~ ERROR expected tuple struct/variant\n-   |             ^^^^ not a tuple struct/variant\n-   |\n-   = note: can't use `Self` as a constructor, you must use the implemented struct\n-\n error[E0423]: expected function, found type alias `A`\n-  --> $DIR/tuple-struct-alias.rs:24:13\n+  --> $DIR/tuple-struct-alias.rs:15:13\n    |\n LL |     let s = A(0, 1); //~ ERROR expected function\n    |             ^ did you mean `S`?\n    |\n    = note: can't use a type alias as a constructor\n \n error[E0532]: expected tuple struct/variant, found type alias `A`\n-  --> $DIR/tuple-struct-alias.rs:26:9\n+  --> $DIR/tuple-struct-alias.rs:17:9\n    |\n LL |         A(..) => {} //~ ERROR expected tuple struct/variant\n    |         ^ did you mean `S`?\n    |\n    = note: can't use a type alias as a constructor\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors occurred: E0423, E0532.\n For more information about an error, try `rustc --explain E0423`."}]}