{"sha": "a6269dad38e6ede0013ba3688099544833933c63", "node_id": "C_kwDOAAsO6NoAKGE2MjY5ZGFkMzhlNmVkZTAwMTNiYTM2ODgwOTk1NDQ4MzM5MzNjNjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-20T15:28:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-20T15:28:40Z"}, "message": "Auto merge of #107106 - matthiaskrgr:rollup-g7r1ep0, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #106699 ([drop tracking] Visit break expressions )\n - #106738 (Fix known-bug annotations)\n - #106891 (Tweak \"borrow closure argument\" suggestion)\n - #106928 (add raw identifier for keyword in suggestion)\n - #107065 (Clippy: Make sure to include in beta: Move `unchecked_duration_subtraction` to pedantic)\n - #107068 (autoderive Subdiagnostic for AddtoExternBlockSuggestion)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "806d53ebb4dc6b25ebf0068e807c92a07dcefde5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/806d53ebb4dc6b25ebf0068e807c92a07dcefde5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6269dad38e6ede0013ba3688099544833933c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6269dad38e6ede0013ba3688099544833933c63", "html_url": "https://github.com/rust-lang/rust/commit/a6269dad38e6ede0013ba3688099544833933c63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6269dad38e6ede0013ba3688099544833933c63/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04a41f889f563b2384c63c990b5423d201d62ebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a41f889f563b2384c63c990b5423d201d62ebd", "html_url": "https://github.com/rust-lang/rust/commit/04a41f889f563b2384c63c990b5423d201d62ebd"}, {"sha": "c44c60cabac817b18bff07baf0f01169b326d06c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c44c60cabac817b18bff07baf0f01169b326d06c", "html_url": "https://github.com/rust-lang/rust/commit/c44c60cabac817b18bff07baf0f01169b326d06c"}], "stats": {"total": 410, "additions": 278, "deletions": 132}, "files": [{"sha": "902b4b1a1ecfefb5fa53fbbfd499f2a2b0329dfb", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -1100,16 +1100,17 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         replace_span: self.ending_semi_or_hi(item.span),\n                         extern_block_suggestion: match sig.header.ext {\n                             Extern::None => None,\n-                            Extern::Implicit(start_span) => Some(ExternBlockSuggestion {\n+                            Extern::Implicit(start_span) => Some(ExternBlockSuggestion::Implicit {\n                                 start_span,\n                                 end_span: item.span.shrink_to_hi(),\n-                                abi: None,\n-                            }),\n-                            Extern::Explicit(abi, start_span) => Some(ExternBlockSuggestion {\n-                                start_span,\n-                                end_span: item.span.shrink_to_hi(),\n-                                abi: Some(abi.symbol_unescaped),\n                             }),\n+                            Extern::Explicit(abi, start_span) => {\n+                                Some(ExternBlockSuggestion::Explicit {\n+                                    start_span,\n+                                    end_span: item.span.shrink_to_hi(),\n+                                    abi: abi.symbol_unescaped,\n+                                })\n+                            }\n                         },\n                     });\n                 }"}, {"sha": "09e262452b11d5819d0f743fa53b0ca1f264f2cd", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -1,6 +1,5 @@\n //! Errors emitted by ast_passes.\n \n-use rustc_errors::{fluent, AddToDiagnostic, Applicability, Diagnostic, SubdiagnosticMessage};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::{Span, Symbol};\n \n@@ -207,28 +206,21 @@ pub struct FnWithoutBody {\n     pub extern_block_suggestion: Option<ExternBlockSuggestion>,\n }\n \n-pub struct ExternBlockSuggestion {\n-    pub start_span: Span,\n-    pub end_span: Span,\n-    pub abi: Option<Symbol>,\n-}\n-\n-impl AddToDiagnostic for ExternBlockSuggestion {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        let start_suggestion = if let Some(abi) = self.abi {\n-            format!(\"extern \\\"{}\\\" {{\", abi)\n-        } else {\n-            \"extern {\".to_owned()\n-        };\n-        let end_suggestion = \" }\".to_owned();\n-\n-        diag.multipart_suggestion(\n-            fluent::extern_block_suggestion,\n-            vec![(self.start_span, start_suggestion), (self.end_span, end_suggestion)],\n-            Applicability::MaybeIncorrect,\n-        );\n-    }\n+#[derive(Subdiagnostic)]\n+pub enum ExternBlockSuggestion {\n+    #[multipart_suggestion(ast_passes_extern_block_suggestion, applicability = \"maybe-incorrect\")]\n+    Implicit {\n+        #[suggestion_part(code = \"extern {{\")]\n+        start_span: Span,\n+        #[suggestion_part(code = \" }}\")]\n+        end_span: Span,\n+    },\n+    #[multipart_suggestion(ast_passes_extern_block_suggestion, applicability = \"maybe-incorrect\")]\n+    Explicit {\n+        #[suggestion_part(code = \"extern \\\"{abi}\\\" {{\")]\n+        start_span: Span,\n+        #[suggestion_part(code = \" }}\")]\n+        end_span: Span,\n+        abi: Symbol,\n+    },\n }"}, {"sha": "5f28839f136d6276fd3fb465dd749b8edb7d5ad2", "filename": "compiler/rustc_error_messages/locales/en-US/ast_passes.ftl", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -88,4 +88,5 @@ ast_passes_ty_alias_without_body =\n ast_passes_fn_without_body =\n     free function without a body\n     .suggestion = provide a definition for the function\n-    .extern_block_suggestion = if you meant to declare an externally defined function, use an `extern` block\n+\n+ast_passes_extern_block_suggestion = if you meant to declare an externally defined function, use an `extern` block"}, {"sha": "b3dd3031db2a98d75780d00288364133be6041f4", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -304,8 +304,8 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n         let mut reinit = None;\n         match expr.kind {\n             ExprKind::Assign(lhs, rhs, _) => {\n-                self.visit_expr(lhs);\n                 self.visit_expr(rhs);\n+                self.visit_expr(lhs);\n \n                 reinit = Some(lhs);\n             }\n@@ -433,7 +433,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n                     self.drop_ranges.add_control_edge(self.expr_index, *target)\n                 }),\n \n-            ExprKind::Break(destination, ..) => {\n+            ExprKind::Break(destination, value) => {\n                 // destination either points to an expression or to a block. We use\n                 // find_target_expression_from_destination to use the last expression of the block\n                 // if destination points to a block.\n@@ -443,7 +443,11 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n                 // will refer to the end of the block due to the post order traversal.\n                 self.find_target_expression_from_destination(destination).map_or((), |target| {\n                     self.drop_ranges.add_control_edge_hir_id(self.expr_index, target)\n-                })\n+                });\n+\n+                if let Some(value) = value {\n+                    self.visit_expr(value);\n+                }\n             }\n \n             ExprKind::Call(f, args) => {\n@@ -465,6 +469,12 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n \n             ExprKind::AddrOf(..)\n             | ExprKind::Array(..)\n+            // FIXME(eholk): We probably need special handling for AssignOps. The ScopeTree builder\n+            // in region.rs runs both lhs then rhs and rhs then lhs and then sets all yields to be\n+            // the latest they show up in either traversal. With the older scope-based\n+            // approximation, this was fine, but it's probably not right now. What we probably want\n+            // to do instead is still run both orders, but consider anything that showed up as a\n+            // yield in either order.\n             | ExprKind::AssignOp(..)\n             | ExprKind::Binary(..)\n             | ExprKind::Block(..)\n@@ -502,6 +512,9 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n \n         // Increment expr_count here to match what InteriorVisitor expects.\n         self.expr_index = self.expr_index + 1;\n+\n+        // Save a node mapping to get better CFG visualization\n+        self.drop_ranges.add_node_mapping(pat.hir_id, self.expr_index);\n     }\n }\n \n@@ -521,7 +534,7 @@ impl DropRangesBuilder {\n                 }\n             });\n         }\n-        debug!(\"hir_id_map: {:?}\", tracked_value_map);\n+        debug!(\"hir_id_map: {:#?}\", tracked_value_map);\n         let num_values = tracked_value_map.len();\n         Self {\n             tracked_value_map,"}, {"sha": "e8d31be79d9c9fccff6d6722db6cadf044cbb7a8", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_visualize.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -2,6 +2,7 @@\n //! flow graph when needed for debugging.\n \n use rustc_graphviz as dot;\n+use rustc_hir::{Expr, ExprKind, Node};\n use rustc_middle::ty::TyCtxt;\n \n use super::{DropRangesBuilder, PostOrderId};\n@@ -80,10 +81,14 @@ impl<'a> dot::Labeller<'a> for DropRangesGraph<'_, '_> {\n                     .post_order_map\n                     .iter()\n                     .find(|(_hir_id, &post_order_id)| post_order_id == *n)\n-                    .map_or(\"<unknown>\".into(), |(hir_id, _)| self\n-                        .tcx\n-                        .hir()\n-                        .node_to_string(*hir_id))\n+                    .map_or(\"<unknown>\".into(), |(hir_id, _)| format!(\n+                        \"{}{}\",\n+                        self.tcx.hir().node_to_string(*hir_id),\n+                        match self.tcx.hir().find(*hir_id) {\n+                            Some(Node::Expr(Expr { kind: ExprKind::Yield(..), .. })) => \" (yield)\",\n+                            _ => \"\",\n+                        }\n+                    ))\n             )\n             .into(),\n         )"}, {"sha": "7af5260538568c0d873ad2767cdbb903e5a6517e", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -71,10 +71,8 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                                 yield_data.expr_and_pat_count, self.expr_count, source_span\n                             );\n \n-                            if self.fcx.sess().opts.unstable_opts.drop_tracking\n-                                && self\n-                                    .drop_ranges\n-                                    .is_dropped_at(hir_id, yield_data.expr_and_pat_count)\n+                            if self\n+                                .is_dropped_at_yield_location(hir_id, yield_data.expr_and_pat_count)\n                             {\n                                 debug!(\"value is dropped at yield point; not recording\");\n                                 return false;\n@@ -173,6 +171,18 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    /// If drop tracking is enabled, consult drop_ranges to see if a value is\n+    /// known to be dropped at a yield point and therefore can be omitted from\n+    /// the generator witness.\n+    fn is_dropped_at_yield_location(&self, value_hir_id: HirId, yield_location: usize) -> bool {\n+        // short-circuit if drop tracking is not enabled.\n+        if !self.fcx.sess().opts.unstable_opts.drop_tracking {\n+            return false;\n+        }\n+\n+        self.drop_ranges.is_dropped_at(value_hir_id, yield_location)\n+    }\n }\n \n pub fn resolve_interior<'a, 'tcx>("}, {"sha": "ae7c20fff0c341d0e8f8e737c75d5dce4cdb9d84", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -393,7 +393,7 @@ pub trait PrettyPrinter<'tcx>:\n         match self.tcx().trimmed_def_paths(()).get(&def_id) {\n             None => Ok((self, false)),\n             Some(symbol) => {\n-                self.write_str(symbol.as_str())?;\n+                write!(self, \"{}\", Ident::with_dummy_span(*symbol))?;\n                 Ok((self, true))\n             }\n         }"}, {"sha": "52971486c553e361fe1d91cf55947ca15de59b45", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -1350,6 +1350,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         expected_trait_ref,\n                         obligation.cause.code(),\n                         found_node,\n+                        obligation.param_env,\n                     )\n                 } else {\n                     let (closure_span, closure_arg_span, found) = found_did"}, {"sha": "39e50b2accf17af05b1f4acb4f0c8d2451267e81", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -283,6 +283,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n         expected: ty::PolyTraitRef<'tcx>,\n         cause: &ObligationCauseCode<'tcx>,\n         found_node: Option<Node<'_>>,\n+        param_env: ty::ParamEnv<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n \n     fn note_conflicting_closure_bounds(\n@@ -1978,6 +1979,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         expected: ty::PolyTraitRef<'tcx>,\n         cause: &ObligationCauseCode<'tcx>,\n         found_node: Option<Node<'_>>,\n+        param_env: ty::ParamEnv<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         pub(crate) fn build_fn_sig_ty<'tcx>(\n             infcx: &InferCtxt<'tcx>,\n@@ -2040,7 +2042,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         self.note_conflicting_closure_bounds(cause, &mut err);\n \n         if let Some(found_node) = found_node {\n-            hint_missing_borrow(span, found, expected, found_node, &mut err);\n+            hint_missing_borrow(self, param_env, span, found, expected, found_node, &mut err);\n         }\n \n         err\n@@ -3747,6 +3749,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n /// Add a hint to add a missing borrow or remove an unnecessary one.\n fn hint_missing_borrow<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     span: Span,\n     found: Ty<'tcx>,\n     expected: Ty<'tcx>,\n@@ -3769,7 +3773,7 @@ fn hint_missing_borrow<'tcx>(\n     // This could be a variant constructor, for example.\n     let Some(fn_decl) = found_node.fn_decl() else { return; };\n \n-    let arg_spans = fn_decl.inputs.iter().map(|ty| ty.span);\n+    let args = fn_decl.inputs.iter().map(|ty| ty);\n \n     fn get_deref_type_and_refs(mut ty: Ty<'_>) -> (Ty<'_>, usize) {\n         let mut refs = 0;\n@@ -3785,29 +3789,42 @@ fn hint_missing_borrow<'tcx>(\n     let mut to_borrow = Vec::new();\n     let mut remove_borrow = Vec::new();\n \n-    for ((found_arg, expected_arg), arg_span) in found_args.zip(expected_args).zip(arg_spans) {\n+    for ((found_arg, expected_arg), arg) in found_args.zip(expected_args).zip(args) {\n         let (found_ty, found_refs) = get_deref_type_and_refs(*found_arg);\n         let (expected_ty, expected_refs) = get_deref_type_and_refs(*expected_arg);\n \n-        if found_ty == expected_ty {\n+        if infcx.can_eq(param_env, found_ty, expected_ty).is_ok() {\n             if found_refs < expected_refs {\n-                to_borrow.push((arg_span, expected_arg.to_string()));\n+                to_borrow.push((arg.span.shrink_to_lo(), \"&\".repeat(expected_refs - found_refs)));\n             } else if found_refs > expected_refs {\n-                remove_borrow.push((arg_span, expected_arg.to_string()));\n+                let mut span = arg.span.shrink_to_lo();\n+                let mut left = found_refs - expected_refs;\n+                let mut ty = arg;\n+                while let hir::TyKind::Ref(_, mut_ty) = &ty.kind && left > 0 {\n+                    span = span.with_hi(mut_ty.ty.span.lo());\n+                    ty = mut_ty.ty;\n+                    left -= 1;\n+                }\n+                let sugg = if left == 0 {\n+                    (span, String::new())\n+                } else {\n+                    (arg.span, expected_arg.to_string())\n+                };\n+                remove_borrow.push(sugg);\n             }\n         }\n     }\n \n     if !to_borrow.is_empty() {\n-        err.multipart_suggestion(\n+        err.multipart_suggestion_verbose(\n             \"consider borrowing the argument\",\n             to_borrow,\n             Applicability::MaybeIncorrect,\n         );\n     }\n \n     if !remove_borrow.is_empty() {\n-        err.multipart_suggestion(\n+        err.multipart_suggestion_verbose(\n             \"do not borrow the argument\",\n             remove_borrow,\n             Applicability::MaybeIncorrect,"}, {"sha": "9f6e89405713c0d5825e979d1c5a91d15c8666a5", "filename": "src/tools/clippy/clippy_lints/src/instant_subtraction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finstant_subtraction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finstant_subtraction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finstant_subtraction.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -61,7 +61,7 @@ declare_clippy_lint! {\n     /// [`Instant::now()`]: std::time::Instant::now;\n     #[clippy::version = \"1.65.0\"]\n     pub UNCHECKED_DURATION_SUBTRACTION,\n-    suspicious,\n+    pedantic,\n     \"finds unchecked subtraction of a 'Duration' from an 'Instant'\"\n }\n "}, {"sha": "c49ecb104a74a383c304ab3ee568a4345eaac230", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -426,10 +426,15 @@ impl TestProps {\n                         self.known_bug = true;\n                     } else {\n                         panic!(\n-                            \"Invalid known-bug value: {known_bug}\\nIt requires comma-separated issue references (`#000` or `chalk#000`) or `unknown`.\"\n+                            \"Invalid known-bug value: {known_bug}\\nIt requires comma-separated issue references (`#000` or `chalk#000`) or `known-bug: unknown`.\"\n                         );\n                     }\n+                } else if config.parse_name_directive(ln, KNOWN_BUG) {\n+                    panic!(\n+                        \"Invalid known-bug attribute, requires comma-separated issue references (`#000` or `chalk#000`) or `known-bug: unknown`.\"\n+                    );\n                 }\n+\n                 config.set_name_value_directive(ln, MIR_UNIT_TEST, &mut self.mir_unit_test, |s| {\n                     s.trim().to_string()\n                 });"}, {"sha": "c023d1b1590565bd5fd61d7286780fa0a4f734db", "filename": "tests/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -16,7 +16,7 @@ LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n help: consider borrowing the argument\n    |\n LL |     f1(|_: &(), _: &()| {});\n-   |            ~~~     ~~~\n+   |            +       +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:3:5\n@@ -35,8 +35,8 @@ LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f2`\n help: consider borrowing the argument\n    |\n-LL |     f2(|_: &'a (), _: &()| {});\n-   |            ~~~~~~     ~~~\n+LL |     f2(|_: &(), _: &()| {});\n+   |            +       +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n@@ -56,7 +56,7 @@ LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n help: consider borrowing the argument\n    |\n LL |     f3(|_: &(), _: &()| {});\n-   |            ~~~     ~~~\n+   |            +       +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:5:5\n@@ -75,8 +75,8 @@ LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f4`\n help: consider borrowing the argument\n    |\n-LL |     f4(|_: &(), _: &'r ()| {});\n-   |            ~~~     ~~~~~~\n+LL |     f4(|_: &(), _: &()| {});\n+   |            +       +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n@@ -95,17 +95,15 @@ LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f5`\n help: consider borrowing the argument\n    |\n-LL |     f5(|_: &'r (), _: &'r ()| {});\n-   |            ~~~~~~     ~~~~~~\n+LL |     f5(|_: &(), _: &()| {});\n+   |            +       +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:7:5\n    |\n LL |     g1(|_: (), _: ()| {});\n-   |     ^^ --------------\n-   |     |  |   |\n-   |     |  |   help: consider borrowing the argument: `&()`\n-   |     |  found signature defined here\n+   |     ^^ -------------- found signature defined here\n+   |     |\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a (), Box<(dyn for<'a> Fn(&'a ()) + 'static)>) -> _`\n@@ -115,15 +113,17 @@ note: required by a bound in `g1`\n    |\n LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g1`\n+help: consider borrowing the argument\n+   |\n+LL |     g1(|_: &(), _: ()| {});\n+   |            +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n    |\n LL |     g2(|_: (), _: ()| {});\n-   |     ^^ --------------\n-   |     |  |   |\n-   |     |  |   help: consider borrowing the argument: `&()`\n-   |     |  found signature defined here\n+   |     ^^ -------------- found signature defined here\n+   |     |\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a (), for<'a> fn(&'a ())) -> _`\n@@ -133,15 +133,17 @@ note: required by a bound in `g2`\n    |\n LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n    |                         ^^^^^^^^^^^^^^^^ required by this bound in `g2`\n+help: consider borrowing the argument\n+   |\n+LL |     g2(|_: &(), _: ()| {});\n+   |            +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:9:5\n    |\n LL |     g3(|_: (), _: ()| {});\n-   |     ^^ --------------\n-   |     |  |   |\n-   |     |  |   help: consider borrowing the argument: `&'s ()`\n-   |     |  found signature defined here\n+   |     ^^ -------------- found signature defined here\n+   |     |\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'s> fn(&'s (), Box<(dyn for<'a> Fn(&'a ()) + 'static)>) -> _`\n@@ -151,15 +153,17 @@ note: required by a bound in `g3`\n    |\n LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g3`\n+help: consider borrowing the argument\n+   |\n+LL |     g3(|_: &(), _: ()| {});\n+   |            +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n    |\n LL |     g4(|_: (), _: ()| {});\n-   |     ^^ --------------\n-   |     |  |   |\n-   |     |  |   help: consider borrowing the argument: `&()`\n-   |     |  found signature defined here\n+   |     ^^ -------------- found signature defined here\n+   |     |\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a (), for<'r> fn(&'r ())) -> _`\n@@ -169,6 +173,10 @@ note: required by a bound in `g4`\n    |\n LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g4`\n+help: consider borrowing the argument\n+   |\n+LL |     g4(|_: &(), _: ()| {});\n+   |            +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:11:5\n@@ -188,7 +196,7 @@ LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n help: consider borrowing the argument\n    |\n LL |     h1(|_: &(), _: (), _: &(), _: ()| {});\n-   |            ~~~            ~~~\n+   |            +              +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n@@ -207,8 +215,8 @@ LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(),\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `h2`\n help: consider borrowing the argument\n    |\n-LL |     h2(|_: &(), _: (), _: &'t0 (), _: ()| {});\n-   |            ~~~            ~~~~~~~\n+LL |     h2(|_: &(), _: (), _: &(), _: ()| {});\n+   |            +              +\n \n error: aborting due to 11 previous errors\n "}, {"sha": "726c4284ec15e2d0f2c6133ef8d869a703d2129e", "filename": "tests/ui/async-await/await-sequence.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fasync-await%2Fawait-sequence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fasync-await%2Fawait-sequence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fawait-sequence.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -0,0 +1,21 @@\n+// edition:2021\n+// compile-flags: -Z drop-tracking\n+// build-pass\n+\n+use std::collections::HashMap;\n+\n+fn main() {\n+    let _ = real_main();\n+}\n+\n+async fn nop() {}\n+\n+async fn real_main() {\n+    nop().await;\n+    nop().await;\n+    nop().await;\n+    nop().await;\n+\n+    let mut map: HashMap<(), ()> = HashMap::new();\n+    map.insert((), nop().await);\n+}"}, {"sha": "3169e4781ee2e0c18ca968683971ef3b68e0b834", "filename": "tests/ui/chalkify/bugs/async.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -1,7 +1,7 @@\n-// check-fail\n-// known-bug\n+// edition:2021\n+// known-bug: unknown\n // unset-rustc-env:RUST_BACKTRACE\n-// compile-flags:-Z trait-solver=chalk --edition=2021\n+// compile-flags:-Z trait-solver=chalk\n // error-pattern:internal compiler error\n // failure-status:101\n // normalize-stderr-test \"DefId([^)]*)\" -> \"...\""}, {"sha": "32a1edb0024c0da0e3bafa83f17d5f022d3432fc", "filename": "tests/ui/closures/multiple-fn-bounds.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -2,10 +2,8 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/multiple-fn-bounds.rs:10:5\n    |\n LL |     foo(move |x| v);\n-   |     ^^^ --------\n-   |     |   |     |\n-   |     |   |     help: do not borrow the argument: `char`\n-   |     |   found signature defined here\n+   |     ^^^ -------- found signature defined here\n+   |     |\n    |     expected due to this\n    |\n    = note: expected closure signature `fn(char) -> _`\n@@ -20,6 +18,10 @@ note: required by a bound in `foo`\n    |\n LL | fn foo<F: Fn(&char) -> bool + Fn(char) -> bool>(f: F) {\n    |                               ^^^^^^^^^^^^^^^^ required by this bound in `foo`\n+help: do not borrow the argument\n+   |\n+LL |     foo(move |char| v);\n+   |               ~~~~\n \n error: aborting due to previous error\n "}, {"sha": "50dd66da6dbb4505ef24919e204ad8ff24330980", "filename": "tests/ui/const-generics/issues/issue-85031-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-85031-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-85031-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-85031-2.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// known-bug\n+// known-bug: unknown\n \n // This should not compile, as the compiler should not know\n // `A - 0` is satisfied `?x - 0` if `?x` is inferred to `A`.\n@@ -10,7 +10,6 @@ pub struct Ref<'a>(&'a i32);\n \n impl<'a> Ref<'a> {\n     pub fn foo<const A: usize>() -> [(); A - 0] {\n-        //~^ WARN function cannot\n         Self::foo()\n     }\n }"}, {"sha": "896e1c7ea8dd663be2e440170f875f751e6bf677", "filename": "tests/ui/const-generics/issues/issue-85031-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-85031-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-85031-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-85031-2.stderr?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -3,7 +3,6 @@ warning: function cannot return without recursing\n    |\n LL |     pub fn foo<const A: usize>() -> [(); A - 0] {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n-LL |\n LL |         Self::foo()\n    |         ----------- recursive call site\n    |"}, {"sha": "5101de19d3cb6ea9ad3df085b6e27b5dc480f84b", "filename": "tests/ui/generic-associated-types/bugs/hrtb-implied-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: unknown\n \n // This gives us problems because `for<'a> I::Item<'a>: Debug` should mean \"for\n // all 'a where I::Item<'a> is WF\", but really means \"for all 'a possible\"\n@@ -29,7 +29,6 @@ where\n \n fn main() {\n     let slice = &mut ();\n-    //~^ temporary value dropped while borrowed\n     let windows = WindowsMut { slice };\n     print_items::<WindowsMut<'_>>(windows);\n }"}, {"sha": "362aeae23614fcf972a6887d860c037f38064ff8", "filename": "tests/ui/generic-associated-types/bugs/hrtb-implied-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.stderr?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -3,7 +3,7 @@ error[E0716]: temporary value dropped while borrowed\n    |\n LL |     let slice = &mut ();\n    |                      ^^ creates a temporary value which is freed while still in use\n-...\n+LL |     let windows = WindowsMut { slice };\n LL |     print_items::<WindowsMut<'_>>(windows);\n    |     -------------------------------------- argument requires that borrow lasts for `'static`\n LL | }"}, {"sha": "3174227a7a1e199a24fb633f6f14f417169a44c6", "filename": "tests/ui/generic-associated-types/bugs/hrtb-implied-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-2.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: unknown\n \n // This gives us problems because `for<'a> I::Item<'a>: Debug` should mean \"for\n // all 'a where I::Item<'a> is WF\", but really means \"for all 'a possible\"\n@@ -16,7 +16,6 @@ where\n {\n     let mut iter2 = Eat(iter, f);\n     let _next = iter2.next();\n-    //~^ borrowed data escapes\n     true\n }\n impl<I: LendingIterator> LendingIterator for &mut I {"}, {"sha": "973c548d785edd8bf867d6f23620a594b79f5114", "filename": "tests/ui/generic-associated-types/bugs/issue-100013.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: unknown\n // edition: 2021\n \n // We really should accept this, but we need implied bounds between the regions\n@@ -13,24 +13,20 @@ pub trait FutureIterator {\n \n fn call<I: FutureIterator>() -> impl Send {\n     async { // a generator checked for autotrait impl `Send`\n-        //~^ lifetime bound not satisfied\n         let x = None::<I::Future<'_, '_>>; // a type referencing GAT\n         async {}.await; // a yield point\n     }\n }\n \n fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n     async { // a generator checked for autotrait impl `Send`\n-        //~^ lifetime bound not satisfied\n         let x = None::<I::Future<'a, 'b>>; // a type referencing GAT\n-        //~^ lifetime may not live long enough\n         async {}.await; // a yield point\n     }\n }\n \n fn call3<'a: 'b, 'b, I: FutureIterator>() -> impl Send {\n     async { // a generator checked for autotrait impl `Send`\n-        //~^ lifetime bound not satisfied\n         let x = None::<I::Future<'a, 'b>>; // a type referencing GAT\n         async {}.await; // a yield point\n     }"}, {"sha": "9db124a81e487185972de56ae66977fe0b203336", "filename": "tests/ui/generic-associated-types/bugs/issue-100013.stderr", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -2,77 +2,73 @@ error: lifetime bound not satisfied\n   --> $DIR/issue-100013.rs:15:5\n    |\n LL | /     async { // a generator checked for autotrait impl `Send`\n-LL | |\n LL | |         let x = None::<I::Future<'_, '_>>; // a type referencing GAT\n LL | |         async {}.await; // a yield point\n LL | |     }\n    | |_____^\n    |\n note: the lifetime defined here...\n-  --> $DIR/issue-100013.rs:17:38\n+  --> $DIR/issue-100013.rs:16:38\n    |\n LL |         let x = None::<I::Future<'_, '_>>; // a type referencing GAT\n    |                                      ^^\n note: ...must outlive the lifetime defined here\n-  --> $DIR/issue-100013.rs:17:34\n+  --> $DIR/issue-100013.rs:16:34\n    |\n LL |         let x = None::<I::Future<'_, '_>>; // a type referencing GAT\n    |                                  ^^\n    = note: this is a known limitation that will be removed in the future (see issue #100013 <https://github.com/rust-lang/rust/issues/100013> for more information)\n \n error: lifetime bound not satisfied\n-  --> $DIR/issue-100013.rs:23:5\n+  --> $DIR/issue-100013.rs:22:5\n    |\n LL | /     async { // a generator checked for autotrait impl `Send`\n-LL | |\n LL | |         let x = None::<I::Future<'a, 'b>>; // a type referencing GAT\n-LL | |\n LL | |         async {}.await; // a yield point\n LL | |     }\n    | |_____^\n    |\n note: the lifetime defined here...\n-  --> $DIR/issue-100013.rs:22:14\n+  --> $DIR/issue-100013.rs:21:14\n    |\n LL | fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n    |              ^^\n note: ...must outlive the lifetime defined here\n-  --> $DIR/issue-100013.rs:22:10\n+  --> $DIR/issue-100013.rs:21:10\n    |\n LL | fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n    |          ^^\n    = note: this is a known limitation that will be removed in the future (see issue #100013 <https://github.com/rust-lang/rust/issues/100013> for more information)\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-100013.rs:25:17\n+  --> $DIR/issue-100013.rs:23:17\n    |\n LL | fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n    |          --  -- lifetime `'b` defined here\n    |          |\n    |          lifetime `'a` defined here\n-...\n+LL |     async { // a generator checked for autotrait impl `Send`\n LL |         let x = None::<I::Future<'a, 'b>>; // a type referencing GAT\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'b`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime bound not satisfied\n-  --> $DIR/issue-100013.rs:32:5\n+  --> $DIR/issue-100013.rs:29:5\n    |\n LL | /     async { // a generator checked for autotrait impl `Send`\n-LL | |\n LL | |         let x = None::<I::Future<'a, 'b>>; // a type referencing GAT\n LL | |         async {}.await; // a yield point\n LL | |     }\n    | |_____^\n    |\n note: the lifetime defined here...\n-  --> $DIR/issue-100013.rs:31:18\n+  --> $DIR/issue-100013.rs:28:18\n    |\n LL | fn call3<'a: 'b, 'b, I: FutureIterator>() -> impl Send {\n    |                  ^^\n note: ...must outlive the lifetime defined here\n-  --> $DIR/issue-100013.rs:31:10\n+  --> $DIR/issue-100013.rs:28:10\n    |\n LL | fn call3<'a: 'b, 'b, I: FutureIterator>() -> impl Send {\n    |          ^^"}, {"sha": "8f2cc45509ffcbd4bd1cfd4bf639d34ef33f7ca7", "filename": "tests/ui/generic-associated-types/bugs/issue-91762.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: unknown\n \n // We almost certainly want this to pass, but\n // it's particularly difficult currently, because we need a way of specifying\n@@ -22,7 +22,6 @@ pub trait FunctorExt<T>: Sized {\n \n         arg = self;\n         ret = <Self::Base as Functor>::fmap(arg);\n-        //~^ type annotations needed\n     }\n }\n "}, {"sha": "d0cb16995af68af0e57571a7916bb783ce2c80d8", "filename": "tests/ui/issues/issue-65634-raw-ident-suggestion.edition2015.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.edition2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.edition2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.edition2015.stderr?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -1,16 +1,16 @@\n error[E0034]: multiple applicable items in scope\n-  --> $DIR/issue-65634-raw-ident-suggestion.rs:21:13\n+  --> $DIR/issue-65634-raw-ident-suggestion.rs:24:13\n    |\n LL |     r#fn {}.r#struct();\n    |             ^^^^^^^^ multiple `r#struct` found\n    |\n-note: candidate #1 is defined in an impl of the trait `async` for the type `fn`\n-  --> $DIR/issue-65634-raw-ident-suggestion.rs:4:5\n+note: candidate #1 is defined in an impl of the trait `async` for the type `r#fn`\n+  --> $DIR/issue-65634-raw-ident-suggestion.rs:7:5\n    |\n LL |     fn r#struct(&self) {\n    |     ^^^^^^^^^^^^^^^^^^\n-note: candidate #2 is defined in an impl of the trait `await` for the type `fn`\n-  --> $DIR/issue-65634-raw-ident-suggestion.rs:10:5\n+note: candidate #2 is defined in an impl of the trait `await` for the type `r#fn`\n+  --> $DIR/issue-65634-raw-ident-suggestion.rs:13:5\n    |\n LL |     fn r#struct(&self) {\n    |     ^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/issues/issue-65634-raw-ident-suggestion.stderr"}, {"sha": "a75c1c413636e78897d35b8644674bcadc9590b6", "filename": "tests/ui/issues/issue-65634-raw-ident-suggestion.edition2018.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.edition2018.stderr?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -0,0 +1,28 @@\n+error[E0034]: multiple applicable items in scope\n+  --> $DIR/issue-65634-raw-ident-suggestion.rs:24:13\n+   |\n+LL |     r#fn {}.r#struct();\n+   |             ^^^^^^^^ multiple `r#struct` found\n+   |\n+note: candidate #1 is defined in an impl of the trait `r#async` for the type `r#fn`\n+  --> $DIR/issue-65634-raw-ident-suggestion.rs:7:5\n+   |\n+LL |     fn r#struct(&self) {\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: candidate #2 is defined in an impl of the trait `r#await` for the type `r#fn`\n+  --> $DIR/issue-65634-raw-ident-suggestion.rs:13:5\n+   |\n+LL |     fn r#struct(&self) {\n+   |     ^^^^^^^^^^^^^^^^^^\n+help: disambiguate the associated function for candidate #1\n+   |\n+LL |     r#async::r#struct(&r#fn {});\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+help: disambiguate the associated function for candidate #2\n+   |\n+LL |     r#await::r#struct(&r#fn {});\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0034`."}, {"sha": "03dd0340c9d69711f844224ff8ef523d847ef003", "filename": "tests/ui/issues/issue-65634-raw-ident-suggestion.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -1,3 +1,6 @@\n+// revisions: edition2015 edition2018\n+//[edition2018]edition:2018\n+\n #![allow(non_camel_case_types)]\n \n trait r#async {"}, {"sha": "6315fcca2b8b0c52df796a182707c9191197b04f", "filename": "tests/ui/mismatched_types/closure-arg-type-mismatch-issue-45727.fixed", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.fixed?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+fn main() {\n+    let _ = (-10..=10).find(|x: &i32| x.signum() == 0); //~ ERROR type mismatch in closure arguments\n+    let _ = (-10..=10).find(|x: &i32| x.signum() == 0); //~ ERROR type mismatch in closure arguments\n+}"}, {"sha": "c12c5362efcfe66215f93243cf740c4f14741940", "filename": "tests/ui/mismatched_types/closure-arg-type-mismatch-issue-45727.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.rs?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+fn main() {\n+    let _ = (-10..=10).find(|x: i32| x.signum() == 0); //~ ERROR type mismatch in closure arguments\n+    let _ = (-10..=10).find(|x: &&&i32| x.signum() == 0); //~ ERROR type mismatch in closure arguments\n+}"}, {"sha": "fb8af4bb7dd29e3e3a084b33e3bbe7e9ff33bd4d", "filename": "tests/ui/mismatched_types/closure-arg-type-mismatch-issue-45727.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.stderr?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -0,0 +1,38 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/closure-arg-type-mismatch-issue-45727.rs:3:24\n+   |\n+LL |     let _ = (-10..=10).find(|x: i32| x.signum() == 0);\n+   |                        ^^^^ -------- found signature defined here\n+   |                        |\n+   |                        expected due to this\n+   |\n+   = note: expected closure signature `for<'a> fn(&'a {integer}) -> _`\n+              found closure signature `fn(i32) -> _`\n+note: required by a bound in `find`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+help: consider borrowing the argument\n+   |\n+LL |     let _ = (-10..=10).find(|x: &i32| x.signum() == 0);\n+   |                                 +\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/closure-arg-type-mismatch-issue-45727.rs:4:24\n+   |\n+LL |     let _ = (-10..=10).find(|x: &&&i32| x.signum() == 0);\n+   |                        ^^^^ ----------- found signature defined here\n+   |                        |\n+   |                        expected due to this\n+   |\n+   = note: expected closure signature `for<'a> fn(&'a {integer}) -> _`\n+              found closure signature `for<'a, 'b, 'c> fn(&'a &'b &'c i32) -> _`\n+note: required by a bound in `find`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+help: do not borrow the argument\n+   |\n+LL -     let _ = (-10..=10).find(|x: &&&i32| x.signum() == 0);\n+LL +     let _ = (-10..=10).find(|x: &i32| x.signum() == 0);\n+   |\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "811ff0533f0124ff219f580a458a4d1d830af712", "filename": "tests/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -2,16 +2,18 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:3:14\n    |\n LL |     a.iter().map(|_: (u32, u32)| 45);\n-   |              ^^^ ---------------\n-   |              |   |   |\n-   |              |   |   help: consider borrowing the argument: `&(u32, u32)`\n-   |              |   found signature defined here\n+   |              ^^^ --------------- found signature defined here\n+   |              |\n    |              expected due to this\n    |\n    = note: expected closure signature `fn(&(u32, u32)) -> _`\n               found closure signature `fn((u32, u32)) -> _`\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+help: consider borrowing the argument\n+   |\n+LL |     a.iter().map(|_: &(u32, u32)| 45);\n+   |                      +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:4:14"}, {"sha": "a6764a1dc6d31675bdc009c343bf93dabda2af0f", "filename": "tests/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6269dad38e6ede0013ba3688099544833933c63/tests%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=a6269dad38e6ede0013ba3688099544833933c63", "patch": "@@ -2,16 +2,18 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/issue-36053-2.rs:7:32\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                ^^^^^^ ---------\n-   |                                |      |   |\n-   |                                |      |   help: consider borrowing the argument: `&&str`\n-   |                                |      found signature defined here\n+   |                                ^^^^^^ --------- found signature defined here\n+   |                                |\n    |                                expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a &str) -> _`\n               found closure signature `for<'a> fn(&'a str) -> _`\n note: required by a bound in `filter`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+help: consider borrowing the argument\n+   |\n+LL |     once::<&str>(\"str\").fuse().filter(|a: &&str| true).count();\n+   |                                           +\n \n error[E0599]: the method `count` exists for struct `Filter<Fuse<Once<&str>>, [closure@issue-36053-2.rs:7:39]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-36053-2.rs:7:55"}]}