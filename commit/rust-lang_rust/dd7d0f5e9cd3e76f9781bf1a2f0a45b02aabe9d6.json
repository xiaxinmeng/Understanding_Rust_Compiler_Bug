{"sha": "dd7d0f5e9cd3e76f9781bf1a2f0a45b02aabe9d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkN2QwZjVlOWNkM2U3NmY5NzgxYmYxYTJmMGE0NWIwMmFhYmU5ZDY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-10T22:11:51Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-11T16:49:17Z"}, "message": "Fix links in the referece\n\nand remove references to the unit type, which no longer exists\n\nFixes #24999", "tree": {"sha": "672408eab08e897461bac572f1d8f129b4eb8412", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/672408eab08e897461bac572f1d8f129b4eb8412"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd7d0f5e9cd3e76f9781bf1a2f0a45b02aabe9d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7d0f5e9cd3e76f9781bf1a2f0a45b02aabe9d6", "html_url": "https://github.com/rust-lang/rust/commit/dd7d0f5e9cd3e76f9781bf1a2f0a45b02aabe9d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd7d0f5e9cd3e76f9781bf1a2f0a45b02aabe9d6/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f697041b37e8c9c86dfe463262501ad61dd2d4a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f697041b37e8c9c86dfe463262501ad61dd2d4a3", "html_url": "https://github.com/rust-lang/rust/commit/f697041b37e8c9c86dfe463262501ad61dd2d4a3"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "10469bae8aa1eea796f86cc482b91e0211f44705", "filename": "src/doc/reference.md", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/dd7d0f5e9cd3e76f9781bf1a2f0a45b02aabe9d6/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/dd7d0f5e9cd3e76f9781bf1a2f0a45b02aabe9d6/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=dd7d0f5e9cd3e76f9781bf1a2f0a45b02aabe9d6", "patch": "@@ -31,23 +31,27 @@ You may also be interested in the [grammar].\n \n ## Unicode productions\n \n-A few productions in Rust's grammar permit Unicode code points outside the ASCII\n-range. We define these productions in terms of character properties specified\n-in the Unicode standard, rather than in terms of ASCII-range code points. The\n-section [Special Unicode Productions](#special-unicode-productions) lists these\n-productions.\n+A few productions in Rust's grammar permit Unicode code points outside the\n+ASCII range. We define these productions in terms of character properties\n+specified in the Unicode standard, rather than in terms of ASCII-range code\n+points. The grammar has a [Special Unicode Productions][unicodeproductions]\n+section that lists these productions.\n+\n+[unicodeproductions]: grammar.html#special-unicode-productions\n \n ## String table productions\n \n Some rules in the grammar &mdash; notably [unary\n operators](#unary-operator-expressions), [binary\n-operators](#binary-operator-expressions), and [keywords](#keywords) &mdash; are\n+operators](#binary-operator-expressions), and [keywords][keywords] &mdash; are\n given in a simplified form: as a listing of a table of unquoted, printable\n whitespace-separated strings. These cases form a subset of the rules regarding\n the [token](#tokens) rule, and are assumed to be the result of a\n lexical-analysis phase feeding the parser, driven by a DFA, operating over the\n disjunction of all such string table entries.\n \n+[keywords]: grammar.html#keywords\n+\n When such a string enclosed in double-quotes (`\"`) occurs inside the grammar,\n it is an implicit reference to a single member of such a string table\n production. See [tokens](#tokens) for more information.\n@@ -75,7 +79,7 @@ An identifier is any nonempty Unicode[^non_ascii_idents] string of the following\n - The first character has property `XID_start`\n - The remaining characters have property `XID_continue`\n \n-that does _not_ occur in the set of [keywords](#keywords).\n+that does _not_ occur in the set of [keywords][keywords].\n \n > **Note**: `XID_start` and `XID_continue` as character properties cover the\n > character ranges used to form the more familiar C and Java language-family\n@@ -401,7 +405,7 @@ Symbols are a general class of printable [token](#tokens) that play structural\n roles in a variety of grammar productions. They are catalogued here for\n completeness as the set of remaining miscellaneous printable tokens that do not\n otherwise appear as [unary operators](#unary-operator-expressions), [binary\n-operators](#binary-operator-expressions), or [keywords](#keywords).\n+operators](#binary-operator-expressions), or [keywords][keywords].\n \n \n ## Paths\n@@ -611,7 +615,7 @@ module needs its own source file: [module definitions](#modules) can be nested\n within one file.\n \n Each source file contains a sequence of zero or more `item` definitions, and\n-may optionally begin with any number of [attributes](#Items and attributes)\n+may optionally begin with any number of [attributes](#items-and-attributes)\n that apply to the containing module, most of which influence the behavior of\n the compiler. The anonymous crate module can have additional attributes that\n apply to the crate as a whole.\n@@ -653,7 +657,7 @@ There are several kinds of item:\n * [`use` declarations](#use-declarations)\n * [modules](#modules)\n * [functions](#functions)\n-* [type aliases](#type-aliases)\n+* [type definitions](grammar.html#type-definitions)\n * [structures](#structures)\n * [enumerations](#enumerations)\n * [constant items](#constant-items)\n@@ -773,7 +777,7 @@ extern crate std as ruststd; // linking to 'std' under another name\n A _use declaration_ creates one or more local name bindings synonymous with\n some other [path](#paths). Usually a `use` declaration is used to shorten the\n path required to refer to a module item. These declarations may appear at the\n-top of [modules](#modules) and [blocks](#blocks).\n+top of [modules](#modules) and [blocks](grammar.html#block-expressions).\n \n > **Note**: Unlike in many languages,\n > `use` declarations in Rust do *not* declare linkage dependency with external crates.\n@@ -1144,9 +1148,7 @@ let px: i32 = match p { Point(x, _) => x };\n ```\n \n A _unit-like struct_ is a structure without any fields, defined by leaving off\n-the list of fields entirely. Such types will have a single value, just like\n-the [unit value `()`](#unit-and-boolean-literals) of the unit type. For\n-example:\n+the list of fields entirely. Such types will have a single value. For example:\n \n ```\n struct Cookie;\n@@ -2436,11 +2438,6 @@ comma:\n (0); // zero in parentheses\n ```\n \n-### Unit expressions\n-\n-The expression `()` denotes the _unit value_, the only value of the type with\n-the same name.\n-\n ### Structure expressions\n \n There are several forms of structure expressions. A _structure expression_\n@@ -3281,7 +3278,7 @@ constructor or `struct` field may refer, directly or indirectly, to the\n enclosing `enum` or `struct` type itself. Such recursion has restrictions:\n \n * Recursive types must include a nominal type in the recursion\n-  (not mere [type definitions](#type-definitions),\n+  (not mere [type definitions](grammar.html#type-definitions),\n    or other structural types such as [arrays](#array,-and-slice-types) or [tuples](#tuple-types)).\n * A recursive `enum` item must have at least one non-recursive constructor\n   (in order to give the recursion a basis case)."}]}