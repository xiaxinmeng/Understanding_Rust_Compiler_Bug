{"sha": "fa70709e07983fb62d1fddadac0987c79e836d23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNzA3MDllMDc5ODNmYjYyZDFmZGRhZGFjMDk4N2M3OWU4MzZkMjM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T19:56:10Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-23T05:24:33Z"}, "message": "libsyntax: Stop parsing `pure` and `static`", "tree": {"sha": "53e4f95639a3696f9cc1fac44ea3cc42eddfe842", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53e4f95639a3696f9cc1fac44ea3cc42eddfe842"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa70709e07983fb62d1fddadac0987c79e836d23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa70709e07983fb62d1fddadac0987c79e836d23", "html_url": "https://github.com/rust-lang/rust/commit/fa70709e07983fb62d1fddadac0987c79e836d23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa70709e07983fb62d1fddadac0987c79e836d23/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d60a7259f9f7855aefac17596f66bc4c863dfe7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d60a7259f9f7855aefac17596f66bc4c863dfe7a", "html_url": "https://github.com/rust-lang/rust/commit/d60a7259f9f7855aefac17596f66bc4c863dfe7a"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "c2c4bedee81edf10cf6ebf3f541977e57f2ad7ec", "filename": "src/libcore/rt/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa70709e07983fb62d1fddadac0987c79e836d23/src%2Flibcore%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa70709e07983fb62d1fddadac0987c79e836d23/src%2Flibcore%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched.rs?ref=fa70709e07983fb62d1fddadac0987c79e836d23", "patch": "@@ -311,7 +311,7 @@ impl Task {\n         };\n     }\n \n-    static priv fn build_start_wrapper(start: ~fn()) -> ~fn() {\n+    priv fn build_start_wrapper(start: ~fn()) -> ~fn() {\n         // XXX: The old code didn't have this extra allocation\n         let wrapper: ~fn() = || {\n             start();"}, {"sha": "90d6fcbb8a533b2e5416e133d2120954dde3a1bf", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa70709e07983fb62d1fddadac0987c79e836d23/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fa70709e07983fb62d1fddadac0987c79e836d23/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=fa70709e07983fb62d1fddadac0987c79e836d23", "patch": "@@ -57,7 +57,7 @@ struct PackageScript {\n }\n \n impl PackageScript {\n-    static fn parse(parent: &Path) -> Result<PackageScript, ~str> {\n+    fn parse(parent: &Path) -> Result<PackageScript, ~str> {\n         let script = parent.push(~\"pkg.rs\");\n \n         if !os::path_exists(&script) {"}, {"sha": "173ae31f94830342e244b7e13b64ba44e9b1d467", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa70709e07983fb62d1fddadac0987c79e836d23/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa70709e07983fb62d1fddadac0987c79e836d23/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=fa70709e07983fb62d1fddadac0987c79e836d23", "patch": "@@ -59,6 +59,8 @@ pub enum ObsoleteSyntax {\n     ObsoleteImplicitSelf,\n     ObsoleteLifetimeNotation,\n     ObsoleteConstManagedPointer,\n+    ObsoletePurity,\n+    ObsoleteStaticMethod,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -198,6 +200,14 @@ pub impl Parser {\n                 \"const `@` pointer\",\n                 \"instead of `@const Foo`, write `@Foo`\"\n             ),\n+            ObsoletePurity => (\n+                \"pure function\",\n+                \"remove `pure`\"\n+            ),\n+            ObsoleteStaticMethod => (\n+                \"`static` notation\",\n+                \"`static` is superfluous; remove it\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "4b79e4f20f3bb7e49eff10730b5a361735f89627", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa70709e07983fb62d1fddadac0987c79e836d23/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa70709e07983fb62d1fddadac0987c79e836d23/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fa70709e07983fb62d1fddadac0987c79e836d23", "patch": "@@ -80,6 +80,7 @@ use parse::obsolete::{ObsoleteAssertion, ObsoletePostFnTySigil};\n use parse::obsolete::{ObsoleteBareFnType, ObsoleteNewtypeEnum};\n use parse::obsolete::{ObsoleteMode, ObsoleteImplicitSelf};\n use parse::obsolete::{ObsoleteLifetimeNotation, ObsoleteConstManagedPointer};\n+use parse::obsolete::{ObsoletePurity, ObsoleteStaticMethod};\n use parse::prec::{as_prec, token_to_binop};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n@@ -413,7 +414,7 @@ pub impl Parser {\n \n     fn parse_purity(&self) -> purity {\n         if self.eat_keyword(&~\"pure\") {\n-            // NB: We parse this as impure for bootstrapping purposes.\n+            self.obsolete(*self.last_span, ObsoletePurity);\n             return impure_fn;\n         } else if self.eat_keyword(&~\"unsafe\") {\n             return unsafe_fn;\n@@ -2684,7 +2685,7 @@ pub impl Parser {\n \n     fn parse_optional_purity(&self) -> ast::purity {\n         if self.eat_keyword(&~\"pure\") {\n-            // NB: We parse this as impure for bootstrapping purposes.\n+            self.obsolete(*self.last_span, ObsoletePurity);\n             ast::impure_fn\n         } else if self.eat_keyword(&~\"unsafe\") {\n             ast::unsafe_fn\n@@ -3341,8 +3342,14 @@ pub impl Parser {\n         else if self.eat_keyword(&~\"priv\") { private }\n         else { inherited }\n     }\n+\n     fn parse_staticness(&self) -> bool {\n-        self.eat_keyword(&~\"static\")\n+        if self.eat_keyword(&~\"static\") {\n+            self.obsolete(*self.last_span, ObsoleteStaticMethod);\n+            true\n+        } else {\n+            false\n+        }\n     }\n \n     // given a termination token and a vector of already-parsed\n@@ -3580,6 +3587,7 @@ pub impl Parser {\n     fn parse_fn_purity(&self) -> purity {\n         if self.eat_keyword(&~\"fn\") { impure_fn }\n         else if self.eat_keyword(&~\"pure\") {\n+            self.obsolete(*self.last_span, ObsoletePurity);\n             self.expect_keyword(&~\"fn\");\n             // NB: We parse this as impure for bootstrapping purposes.\n             impure_fn\n@@ -3979,7 +3987,7 @@ pub impl Parser {\n         }\n         if items_allowed && self.eat_keyword(&~\"pure\") {\n             // PURE FUNCTION ITEM\n-            // NB: We parse this as impure for bootstrapping purposes.\n+            self.obsolete(*self.last_span, ObsoletePurity);\n             self.expect_keyword(&~\"fn\");\n             let (ident, item_, extra_attrs) = self.parse_item_fn(impure_fn);\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident, item_,"}, {"sha": "5fc6621f186580c9f6718db02865ece48039cb8b", "filename": "src/test/auxiliary/static_fn_inline_xc_aux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa70709e07983fb62d1fddadac0987c79e836d23/src%2Ftest%2Fauxiliary%2Fstatic_fn_inline_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa70709e07983fb62d1fddadac0987c79e836d23/src%2Ftest%2Fauxiliary%2Fstatic_fn_inline_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic_fn_inline_xc_aux.rs?ref=fa70709e07983fb62d1fddadac0987c79e836d23", "patch": "@@ -11,14 +11,14 @@\n \n pub mod num {\n     pub trait Num2 {\n-        static fn from_int2(n: int) -> Self;\n+        fn from_int2(n: int) -> Self;\n     }\n }\n \n pub mod float {\n     impl ::num::Num2 for float {\n         #[inline]\n-        static fn from_int2(n: int) -> float { return n as float;  }\n+        fn from_int2(n: int) -> float { return n as float;  }\n     }\n }\n "}]}