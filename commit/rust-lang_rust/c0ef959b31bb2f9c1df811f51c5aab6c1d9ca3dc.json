{"sha": "c0ef959b31bb2f9c1df811f51c5aab6c1d9ca3dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZWY5NTliMzFiYjJmOWMxZGY4MTFmNTFjNWFhYjZjMWQ5Y2EzZGM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-27T18:19:57Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-07T00:05:58Z"}, "message": "libgraphviz: remove unnecessary `as_slice()` calls", "tree": {"sha": "4498db7af770bbd1b3ed8f8595af5b873d89fff7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4498db7af770bbd1b3ed8f8595af5b873d89fff7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0ef959b31bb2f9c1df811f51c5aab6c1d9ca3dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ef959b31bb2f9c1df811f51c5aab6c1d9ca3dc", "html_url": "https://github.com/rust-lang/rust/commit/c0ef959b31bb2f9c1df811f51c5aab6c1d9ca3dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0ef959b31bb2f9c1df811f51c5aab6c1d9ca3dc/comments", "author": null, "committer": null, "parents": [{"sha": "6efc87945bf76332bbcee4f60188a505f6dc869d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6efc87945bf76332bbcee4f60188a505f6dc869d", "html_url": "https://github.com/rust-lang/rust/commit/6efc87945bf76332bbcee4f60188a505f6dc869d"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "c1c397db213f64807c88464c4c405e4933540e20", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c0ef959b31bb2f9c1df811f51c5aab6c1d9ca3dc/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ef959b31bb2f9c1df811f51c5aab6c1d9ca3dc/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=c0ef959b31bb2f9c1df811f51c5aab6c1d9ca3dc", "patch": "@@ -439,7 +439,7 @@ impl<'a> LabelText<'a> {\n     /// Renders text as string suitable for a label in a .dot file.\n     pub fn escape(&self) -> String {\n         match self {\n-            &LabelStr(ref s) => s.as_slice().escape_default(),\n+            &LabelStr(ref s) => s.escape_default(),\n             &EscStr(ref s) => LabelText::escape_str(s.as_slice()),\n         }\n     }\n@@ -709,7 +709,7 @@ mod tests {\n     fn empty_graph() {\n         let labels : Trivial = UnlabelledNodes(0);\n         let r = test_input(LabelledGraph::new(\"empty_graph\", labels, vec!()));\n-        assert_eq!(r.unwrap().as_slice(),\n+        assert_eq!(r.unwrap(),\n r#\"digraph empty_graph {\n }\n \"#);\n@@ -719,7 +719,7 @@ r#\"digraph empty_graph {\n     fn single_node() {\n         let labels : Trivial = UnlabelledNodes(1);\n         let r = test_input(LabelledGraph::new(\"single_node\", labels, vec!()));\n-        assert_eq!(r.unwrap().as_slice(),\n+        assert_eq!(r.unwrap(),\n r#\"digraph single_node {\n     N0[label=\"N0\"];\n }\n@@ -731,7 +731,7 @@ r#\"digraph single_node {\n         let labels : Trivial = UnlabelledNodes(2);\n         let result = test_input(LabelledGraph::new(\"single_edge\", labels,\n                                                    vec!(edge(0, 1, \"E\"))));\n-        assert_eq!(result.unwrap().as_slice(),\n+        assert_eq!(result.unwrap(),\n r#\"digraph single_edge {\n     N0[label=\"N0\"];\n     N1[label=\"N1\"];\n@@ -745,7 +745,7 @@ r#\"digraph single_edge {\n         let labels : Trivial = SomeNodesLabelled(vec![Some(\"A\"), None]);\n         let result = test_input(LabelledGraph::new(\"test_some_labelled\", labels,\n                                                    vec![edge(0, 1, \"A-1\")]));\n-        assert_eq!(result.unwrap().as_slice(),\n+        assert_eq!(result.unwrap(),\n r#\"digraph test_some_labelled {\n     N0[label=\"A\"];\n     N1[label=\"N1\"];\n@@ -759,7 +759,7 @@ r#\"digraph test_some_labelled {\n         let labels : Trivial = UnlabelledNodes(1);\n         let r = test_input(LabelledGraph::new(\"single_cyclic_node\", labels,\n                                               vec!(edge(0, 0, \"E\"))));\n-        assert_eq!(r.unwrap().as_slice(),\n+        assert_eq!(r.unwrap(),\n r#\"digraph single_cyclic_node {\n     N0[label=\"N0\"];\n     N0 -> N0[label=\"E\"];\n@@ -774,7 +774,7 @@ r#\"digraph single_cyclic_node {\n             \"hasse_diagram\", labels,\n             vec!(edge(0, 1, \"\"), edge(0, 2, \"\"),\n                  edge(1, 3, \"\"), edge(2, 3, \"\"))));\n-        assert_eq!(r.unwrap().as_slice(),\n+        assert_eq!(r.unwrap(),\n r#\"digraph hasse_diagram {\n     N0[label=\"{x,y}\"];\n     N1[label=\"{x}\"];\n@@ -812,7 +812,7 @@ r#\"digraph hasse_diagram {\n         render(&g, &mut writer).unwrap();\n         let r = (&mut writer.as_slice()).read_to_string();\n \n-        assert_eq!(r.unwrap().as_slice(),\n+        assert_eq!(r.unwrap(),\n r#\"digraph syntax_tree {\n     N0[label=\"if test {\\l    branch1\\l} else {\\l    branch2\\l}\\lafterward\\l\"];\n     N1[label=\"branch1\"];"}]}