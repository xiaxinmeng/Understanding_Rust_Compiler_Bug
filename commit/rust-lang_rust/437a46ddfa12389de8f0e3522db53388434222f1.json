{"sha": "437a46ddfa12389de8f0e3522db53388434222f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzN2E0NmRkZmExMjM4OWRlOGYwZTM1MjJkYjUzMzg4NDM0MjIyZjE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T11:50:41Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T11:58:45Z"}, "message": "Use () for lang items.", "tree": {"sha": "869f94d956a650d488816eb49d69ae34c7041787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/869f94d956a650d488816eb49d69ae34c7041787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/437a46ddfa12389de8f0e3522db53388434222f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/437a46ddfa12389de8f0e3522db53388434222f1", "html_url": "https://github.com/rust-lang/rust/commit/437a46ddfa12389de8f0e3522db53388434222f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/437a46ddfa12389de8f0e3522db53388434222f1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9849327384fca36d539b87bbd641da3e0ef8a729", "url": "https://api.github.com/repos/rust-lang/rust/commits/9849327384fca36d539b87bbd641da3e0ef8a729", "html_url": "https://github.com/rust-lang/rust/commit/9849327384fca36d539b87bbd641da3e0ef8a729"}], "stats": {"total": 83, "additions": 30, "deletions": 53}, "files": [{"sha": "b1aa9c665f2e0f6290b4a5d73db99c3933b8f5b7", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=437a46ddfa12389de8f0e3522db53388434222f1", "patch": "@@ -279,7 +279,7 @@ fn upstream_monomorphizations_provider(\n ) -> DefIdMap<FxHashMap<SubstsRef<'_>, CrateNum>> {\n     debug_assert!(cnum == LOCAL_CRATE);\n \n-    let cnums = tcx.all_crate_nums(LOCAL_CRATE);\n+    let cnums = tcx.all_crate_nums(());\n \n     let mut instances: DefIdMap<FxHashMap<_, _>> = Default::default();\n "}, {"sha": "30406c450c6af22de16946494971d874869a7f87", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=437a46ddfa12389de8f0e3522db53388434222f1", "patch": "@@ -1330,7 +1330,7 @@ rustc_queries! {\n         desc { |tcx| \"computing crate imported by `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n \n-    query get_lib_features(_: CrateNum) -> LibFeatures {\n+    query get_lib_features(_: ()) -> LibFeatures {\n         storage(ArenaCacheSelector<'tcx>)\n         eval_always\n         desc { \"calculating the lib features map\" }\n@@ -1340,16 +1340,14 @@ rustc_queries! {\n         desc { \"calculating the lib features defined in a crate\" }\n     }\n     /// Returns the lang items defined in another crate by loading it from metadata.\n-    // FIXME: It is illegal to pass a `CrateNum` other than `LOCAL_CRATE` here, just get rid\n-    // of that argument?\n-    query get_lang_items(_: CrateNum) -> LanguageItems {\n+    query get_lang_items(_: ()) -> LanguageItems {\n         storage(ArenaCacheSelector<'tcx>)\n         eval_always\n         desc { \"calculating the lang items map\" }\n     }\n \n     /// Returns all diagnostic items defined in all crates.\n-    query all_diagnostic_items(_: CrateNum) -> FxHashMap<Symbol, DefId> {\n+    query all_diagnostic_items(_: ()) -> FxHashMap<Symbol, DefId> {\n         storage(ArenaCacheSelector<'tcx>)\n         eval_always\n         desc { \"calculating the diagnostic items map\" }\n@@ -1411,12 +1409,12 @@ rustc_queries! {\n         desc { |tcx| \"names_imported_by_glob_use for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n \n-    query stability_index(_: CrateNum) -> stability::Index<'tcx> {\n+    query stability_index(_: ()) -> stability::Index<'tcx> {\n         storage(ArenaCacheSelector<'tcx>)\n         eval_always\n         desc { \"calculating the stability index for the local crate\" }\n     }\n-    query all_crate_nums(_: CrateNum) -> &'tcx [CrateNum] {\n+    query all_crate_nums(_: ()) -> &'tcx [CrateNum] {\n         eval_always\n         desc { \"fetching all foreign CrateNum instances\" }\n     }\n@@ -1644,7 +1642,7 @@ rustc_queries! {\n         desc { |tcx| \"estimating size for `{}`\", tcx.def_path_str(def.def_id()) }\n     }\n \n-    query features_query(_: CrateNum) -> &'tcx rustc_feature::Features {\n+    query features_query(_: ()) -> &'tcx rustc_feature::Features {\n         eval_always\n         desc { \"looking up enabled feature gates\" }\n     }"}, {"sha": "69e0d222c88ce3900cdf33577296ede8a4dfcc37", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=437a46ddfa12389de8f0e3522db53388434222f1", "patch": "@@ -1218,18 +1218,18 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn lib_features(self) -> &'tcx middle::lib_features::LibFeatures {\n-        self.get_lib_features(LOCAL_CRATE)\n+        self.get_lib_features(())\n     }\n \n     /// Obtain all lang items of this crate and all dependencies (recursively)\n     pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {\n-        self.get_lang_items(LOCAL_CRATE)\n+        self.get_lang_items(())\n     }\n \n     /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to\n     /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.\n     pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {\n-        self.all_diagnostic_items(LOCAL_CRATE).get(&name).copied()\n+        self.all_diagnostic_items(()).get(&name).copied()\n     }\n \n     /// Check whether the diagnostic item with the given `name` has the given `DefId`.\n@@ -1238,19 +1238,19 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn stability(self) -> &'tcx stability::Index<'tcx> {\n-        self.stability_index(LOCAL_CRATE)\n+        self.stability_index(())\n     }\n \n     pub fn crates(self) -> &'tcx [CrateNum] {\n-        self.all_crate_nums(LOCAL_CRATE)\n+        self.all_crate_nums(())\n     }\n \n     pub fn allocator_kind(self) -> Option<AllocatorKind> {\n         self.cstore.allocator_kind()\n     }\n \n     pub fn features(self) -> &'tcx rustc_feature::Features {\n-        self.features_query(LOCAL_CRATE)\n+        self.features_query(())\n     }\n \n     pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {\n@@ -2815,18 +2815,12 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         tcx.stability().local_deprecation_entry(id)\n     };\n     providers.extern_mod_stmt_cnum = |tcx, id| tcx.extern_crate_map.get(&id).cloned();\n-    providers.all_crate_nums = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        tcx.arena.alloc_slice(&tcx.cstore.crates_untracked())\n-    };\n+    providers.all_crate_nums = |tcx, ()| tcx.arena.alloc_slice(&tcx.cstore.crates_untracked());\n     providers.output_filenames = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         tcx.output_filenames.clone()\n     };\n-    providers.features_query = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        tcx.sess.features_untracked()\n-    };\n+    providers.features_query = |tcx, ()| tcx.sess.features_untracked();\n     providers.is_panic_runtime = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)"}, {"sha": "a688b816e9af9b95a60b7218746727f2af35c7bc", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=437a46ddfa12389de8f0e3522db53388434222f1", "patch": "@@ -579,7 +579,7 @@ impl<'sess> OnDiskCache<'sess> {\n     ) -> IndexVec<CrateNum, Option<CrateNum>> {\n         tcx.dep_graph.with_ignore(|| {\n             let current_cnums = tcx\n-                .all_crate_nums(LOCAL_CRATE)\n+                .all_crate_nums(())\n                 .iter()\n                 .map(|&cnum| {\n                     let crate_name = tcx.original_crate_name(cnum).to_string();"}, {"sha": "f345d45d17808b93c49e1f4b76a8942257a1c4e7", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=437a46ddfa12389de8f0e3522db53388434222f1", "patch": "@@ -16,7 +16,7 @@ use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n-use rustc_span::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_span::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_span::symbol::{sym, Symbol};\n \n struct DiagnosticItemCollector<'tcx> {\n@@ -99,7 +99,9 @@ fn extract(sess: &Session, attrs: &[ast::Attribute]) -> Option<Symbol> {\n }\n \n /// Traverse and collect the diagnostic items in the current\n-fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n+fn diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> FxHashMap<Symbol, DefId> {\n+    assert_eq!(cnum, LOCAL_CRATE);\n+\n     // Initialize the collector.\n     let mut collector = DiagnosticItemCollector::new(tcx);\n \n@@ -114,7 +116,7 @@ fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n }\n \n /// Traverse and collect all the diagnostic items in all crates.\n-fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n+fn all_diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> FxHashMap<Symbol, DefId> {\n     // Initialize the collector.\n     let mut collector = FxHashMap::default();\n \n@@ -129,12 +131,6 @@ fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n }\n \n pub fn provide(providers: &mut Providers) {\n-    providers.diagnostic_items = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        collect(tcx)\n-    };\n-    providers.all_diagnostic_items = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        collect_all(tcx)\n-    };\n+    providers.diagnostic_items = diagnostic_items;\n+    providers.all_diagnostic_items = all_diagnostic_items;\n }"}, {"sha": "cfc18062d53a303ab528ba2e49a332e688ce79b9", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=437a46ddfa12389de8f0e3522db53388434222f1", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::TyCtxt;\n \n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items::{extract, ITEM_REFS};\n use rustc_hir::{HirId, LangItem, LanguageItems, Target};\n@@ -183,7 +183,7 @@ impl LanguageItemCollector<'tcx> {\n }\n \n /// Traverses and collects all the lang items in all crates.\n-fn collect(tcx: TyCtxt<'_>) -> LanguageItems {\n+fn get_lang_items(tcx: TyCtxt<'_>, (): ()) -> LanguageItems {\n     // Initialize the collector.\n     let mut collector = LanguageItemCollector::new(tcx);\n \n@@ -207,8 +207,5 @@ fn collect(tcx: TyCtxt<'_>) -> LanguageItems {\n }\n \n pub fn provide(providers: &mut Providers) {\n-    providers.get_lang_items = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        collect(tcx)\n-    };\n+    providers.get_lang_items = get_lang_items;\n }"}, {"sha": "363a6417f99d3407b69bf2e965801e13bda35894", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=437a46ddfa12389de8f0e3522db53388434222f1", "patch": "@@ -6,7 +6,6 @@\n \n use rustc_ast::{Attribute, MetaItem, MetaItemKind};\n use rustc_errors::struct_span_err;\n-use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::lib_features::LibFeatures;\n@@ -127,7 +126,7 @@ impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n     }\n }\n \n-fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n+fn get_lib_features(tcx: TyCtxt<'_>, (): ()) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n     let krate = tcx.hir().krate();\n     for attr in krate.non_exported_macro_attrs {\n@@ -138,8 +137,5 @@ fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n }\n \n pub fn provide(providers: &mut Providers) {\n-    providers.get_lib_features = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        collect(tcx)\n-    };\n+    providers.get_lib_features = get_lib_features;\n }"}, {"sha": "f41e0e0370680f4b3cafb8eb8c0c5ef2acadd2ee", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437a46ddfa12389de8f0e3522db53388434222f1/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=437a46ddfa12389de8f0e3522db53388434222f1", "patch": "@@ -629,7 +629,7 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     // stable (assuming they have not inherited instability from their parent).\n }\n \n-fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n+fn stability_index(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n     let is_staged_api =\n         tcx.sess.opts.debugging_opts.force_unstable_if_unmarked || tcx.features().staged_api;\n     let mut staged_api = FxHashMap::default();\n@@ -704,11 +704,7 @@ fn check_mod_unstable_api_usage(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n }\n \n pub(crate) fn provide(providers: &mut Providers) {\n-    *providers = Providers { check_mod_unstable_api_usage, ..*providers };\n-    providers.stability_index = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        new_index(tcx)\n-    };\n+    *providers = Providers { check_mod_unstable_api_usage, stability_index, ..*providers };\n }\n \n struct Checker<'tcx> {"}]}