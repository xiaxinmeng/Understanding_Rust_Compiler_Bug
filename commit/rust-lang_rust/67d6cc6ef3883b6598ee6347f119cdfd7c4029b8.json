{"sha": "67d6cc6ef3883b6598ee6347f119cdfd7c4029b8", "node_id": "C_kwDOAAsO6NoAKDY3ZDZjYzZlZjM4ODNiNjU5OGVlNjM0N2YxMTljZGZkN2M0MDI5Yjg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-23T02:05:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-23T02:05:28Z"}, "message": "Rollup merge of #91608 - workingjubilee:fold-neon-fp, r=nagisa,Amanieu\n\nFold aarch64 feature +fp into +neon\n\nArm's FEAT_FP and Feat_AdvSIMD describe the same thing on AArch64:\nThe Neon unit, which handles both floating point and SIMD instructions.\nMoreover, a configuration for AArch64 must include both or neither.\nArm says \"entirely proprietary\" toolchains may omit floating point:\nhttps://developer.arm.com/documentation/102374/0101/Data-processing---floating-point\nIn the Programmer's Guide for Armv8-A, Arm says AArch64 can have\nboth FP and Neon or neither in custom implementations:\nhttps://developer.arm.com/documentation/den0024/a/AArch64-Floating-point-and-NEON\n\nIn \"Bare metal boot code for Armv8-A\", enabling Neon and FP\nis just disabling the same trap flag:\nhttps://developer.arm.com/documentation/dai0527/a\n\nIn an unlikely future where \"Neon and FP\" become unrelated,\nwe can add \"[+-]fp\" as its own feature flag.\nUntil then, we can simplify programming with Rust on AArch64 by\nfolding both into \"[+-]neon\", which is valid as it supersets both.\n\n\"[+-]neon\" is retained for niche uses such as firmware, kernels,\n\"I just hate floats\", and so on.\n\nI am... pretty sure no one is relying on this.\n\nAn argument could be made that, as we are not an \"entirely proprietary\" toolchain, we should not support AArch64 without floats at all. I think that's a bit excessive. However, I want to recognize the intent: programming for AArch64 should be simplified where possible. For x86-64, programmers regularly set up illegal feature configurations because it's hard to understand them, see https://github.com/rust-lang/rust/issues/89586. And per the above notes, plus the discussion in https://github.com/rust-lang/rust/issues/86941, there should be no real use cases for leaving these features split: the two should in fact always go together.\n\n- Fixes rust-lang/rust#95002.\n- Fixes rust-lang/rust#95064.\n- Fixes rust-lang/rust#95122.", "tree": {"sha": "cd7c42898e6b8471c2732159900687c3637978da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd7c42898e6b8471c2732159900687c3637978da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiOoBoCRBK7hj4Ov3rIwAAaXUIAAaSQVmtEfgJl/x6XeJ1lJ4J\nNffdUR2F7eBYxpVoWI7vGDQ8Rb4yCsdcm4jNbuSWMxrTD5T20A4b6Om0NMmle0Cn\n5vY9UCAwM0YFwTDIjYMSKEVVnxSI4lWOMLwDw7nWoGP/cA6nA+xrEzWa3bi74Wt9\nq3iwVcONXmUubgkGlDnMqJnFll1nPgDnJ83y3PUfUzlYD5bL9jSDSqMbbD/4/tV4\nbTaB0v/evr2eVFYsGTbjhbOyho2afUMbU+vvlh2TeXleC9y2qeVtFzyGGIs73sCe\nkrwAEDNSiJkmZ3h2N6B3nxYHA82J1t8Z2qyiSHm8qf7BYwqQ40QW3+RCdRpOTRM=\n=ghNQ\n-----END PGP SIGNATURE-----\n", "payload": "tree cd7c42898e6b8471c2732159900687c3637978da\nparent a4a5e79814fb4d1568fb0ea5ca50f810b071ae12\nparent 6c19dc9a8662999e28b2084f072532630a4c2fc9\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648001128 +0100\ncommitter GitHub <noreply@github.com> 1648001128 +0100\n\nRollup merge of #91608 - workingjubilee:fold-neon-fp, r=nagisa,Amanieu\n\nFold aarch64 feature +fp into +neon\n\nArm's FEAT_FP and Feat_AdvSIMD describe the same thing on AArch64:\nThe Neon unit, which handles both floating point and SIMD instructions.\nMoreover, a configuration for AArch64 must include both or neither.\nArm says \"entirely proprietary\" toolchains may omit floating point:\nhttps://developer.arm.com/documentation/102374/0101/Data-processing---floating-point\nIn the Programmer's Guide for Armv8-A, Arm says AArch64 can have\nboth FP and Neon or neither in custom implementations:\nhttps://developer.arm.com/documentation/den0024/a/AArch64-Floating-point-and-NEON\n\nIn \"Bare metal boot code for Armv8-A\", enabling Neon and FP\nis just disabling the same trap flag:\nhttps://developer.arm.com/documentation/dai0527/a\n\nIn an unlikely future where \"Neon and FP\" become unrelated,\nwe can add \"[+-]fp\" as its own feature flag.\nUntil then, we can simplify programming with Rust on AArch64 by\nfolding both into \"[+-]neon\", which is valid as it supersets both.\n\n\"[+-]neon\" is retained for niche uses such as firmware, kernels,\n\"I just hate floats\", and so on.\n\nI am... pretty sure no one is relying on this.\n\nAn argument could be made that, as we are not an \"entirely proprietary\" toolchain, we should not support AArch64 without floats at all. I think that's a bit excessive. However, I want to recognize the intent: programming for AArch64 should be simplified where possible. For x86-64, programmers regularly set up illegal feature configurations because it's hard to understand them, see https://github.com/rust-lang/rust/issues/89586. And per the above notes, plus the discussion in https://github.com/rust-lang/rust/issues/86941, there should be no real use cases for leaving these features split: the two should in fact always go together.\n\n- Fixes rust-lang/rust#95002.\n- Fixes rust-lang/rust#95064.\n- Fixes rust-lang/rust#95122.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8", "html_url": "https://github.com/rust-lang/rust/commit/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4a5e79814fb4d1568fb0ea5ca50f810b071ae12", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4a5e79814fb4d1568fb0ea5ca50f810b071ae12", "html_url": "https://github.com/rust-lang/rust/commit/a4a5e79814fb4d1568fb0ea5ca50f810b071ae12"}, {"sha": "6c19dc9a8662999e28b2084f072532630a4c2fc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c19dc9a8662999e28b2084f072532630a4c2fc9", "html_url": "https://github.com/rust-lang/rust/commit/6c19dc9a8662999e28b2084f072532630a4c2fc9"}], "stats": {"total": 167, "additions": 155, "deletions": 12}, "files": [{"sha": "abcdb81c0e2e6cf454363ee84bc42e2d21320c5c", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=67d6cc6ef3883b6598ee6347f119cdfd7c4029b8", "patch": "@@ -187,7 +187,6 @@ pub fn to_llvm_features<'a>(sess: &Session, s: &'a str) -> SmallVec<[&'a str; 2]\n         (\"x86\", \"avx512vaes\") => smallvec![\"vaes\"],\n         (\"x86\", \"avx512gfni\") => smallvec![\"gfni\"],\n         (\"x86\", \"avx512vpclmulqdq\") => smallvec![\"vpclmulqdq\"],\n-        (\"aarch64\", \"fp\") => smallvec![\"fp-armv8\"],\n         (\"aarch64\", \"rcpc2\") => smallvec![\"rcpc-immo\"],\n         (\"aarch64\", \"dpb\") => smallvec![\"ccpp\"],\n         (\"aarch64\", \"dpb2\") => smallvec![\"ccdp\"],\n@@ -230,6 +229,8 @@ pub fn check_tied_features(\n     None\n }\n \n+// Used to generate cfg variables and apply features\n+// Must express features in the way Rust understands them\n pub fn target_features(sess: &Session) -> Vec<Symbol> {\n     let target_machine = create_informational_target_machine(sess);\n     let mut features: Vec<Symbol> =\n@@ -239,13 +240,14 @@ pub fn target_features(sess: &Session) -> Vec<Symbol> {\n                 if sess.is_nightly_build() || gate.is_none() { Some(feature) } else { None }\n             })\n             .filter(|feature| {\n+                // check that all features in a given smallvec are enabled\n                 for llvm_feature in to_llvm_features(sess, feature) {\n                     let cstr = SmallCStr::new(llvm_feature);\n-                    if unsafe { llvm::LLVMRustHasFeature(target_machine, cstr.as_ptr()) } {\n-                        return true;\n+                    if !unsafe { llvm::LLVMRustHasFeature(target_machine, cstr.as_ptr()) } {\n+                        return false;\n                     }\n                 }\n-                false\n+                true\n             })\n             .map(|feature| Symbol::intern(feature))\n             .collect();"}, {"sha": "ba1e1862227a81a5b3e41af686a7a668d8ef30af", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=67d6cc6ef3883b6598ee6347f119cdfd7c4029b8", "patch": "@@ -43,10 +43,8 @@ const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n ];\n \n const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    // FEAT_AdvSimd\n+    // FEAT_AdvSimd & FEAT_FP\n     (\"neon\", None),\n-    // FEAT_FP\n-    (\"fp\", None),\n     // FEAT_FP16\n     (\"fp16\", None),\n     // FEAT_SVE\n@@ -143,7 +141,6 @@ const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n ];\n \n const AARCH64_TIED_FEATURES: &[&[&str]] = &[\n-    &[\"fp\", \"neon\"],   // Silicon always has both, so avoid needless complications\n     &[\"paca\", \"pacg\"], // Together these represent `pauth` in LLVM\n ];\n "}, {"sha": "fba8cc6ef8b4aa4d516ee91ea556457996846742", "filename": "compiler/rustc_target/src/asm/aarch64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs?ref=67d6cc6ef3883b6598ee6347f119cdfd7c4029b8", "patch": "@@ -64,7 +64,7 @@ impl AArch64InlineAsmRegClass {\n         match self {\n             Self::reg => types! { _: I8, I16, I32, I64, F32, F64; },\n             Self::vreg | Self::vreg_low16 => types! {\n-                fp: I8, I16, I32, I64, F32, F64,\n+                neon: I8, I16, I32, I64, F32, F64,\n                     VecI8(8), VecI16(4), VecI32(2), VecI64(1), VecF32(2), VecF64(1),\n                     VecI8(16), VecI16(8), VecI32(4), VecI64(2), VecF32(4), VecF64(2);\n             },"}, {"sha": "a57a52d9bb04ef37507ea360c11ee46da4068871", "filename": "library/std/tests/run-time-detect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/library%2Fstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/library%2Fstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Frun-time-detect.rs?ref=67d6cc6ef3883b6598ee6347f119cdfd7c4029b8", "patch": "@@ -29,7 +29,6 @@ fn aarch64_linux() {\n     println!(\"neon: {}\", is_aarch64_feature_detected!(\"neon\"));\n     println!(\"asimd: {}\", is_aarch64_feature_detected!(\"asimd\"));\n     println!(\"pmull: {}\", is_aarch64_feature_detected!(\"pmull\"));\n-    println!(\"fp: {}\", is_aarch64_feature_detected!(\"fp\"));\n     println!(\"fp16: {}\", is_aarch64_feature_detected!(\"fp16\"));\n     println!(\"sve: {}\", is_aarch64_feature_detected!(\"sve\"));\n     println!(\"crc: {}\", is_aarch64_feature_detected!(\"crc\"));"}, {"sha": "e9c974a01373282bd3aacf99d0a1f2cca5717d66", "filename": "src/test/run-make-fulldeps/simd-ffi/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2FMakefile?ref=67d6cc6ef3883b6598ee6347f119cdfd7c4029b8", "patch": "@@ -41,7 +41,7 @@ define MK_TARGETS\n # now.\n $(1): simd.rs\n \t$$(RUSTC) --target=$(1) --emit=llvm-ir,asm simd.rs \\\n-                -C target-feature='+fp,+neon,+sse2' -C extra-filename=-$(1)\n+                -C target-feature='+neon,+sse2' -C extra-filename=-$(1)\n endef\n \n $(foreach targetxxx,$(TARGETS),$(eval $(call MK_TARGETS,$(targetxxx))))"}, {"sha": "1a3141019161d38291079031f1f7a3b001d3ec58", "filename": "src/test/ui/asm/aarch64/bad-reg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs?ref=67d6cc6ef3883b6598ee6347f119cdfd7c4029b8", "patch": "@@ -1,5 +1,5 @@\n // only-aarch64\n-// compile-flags: -C target-feature=+fp\n+// compile-flags: -C target-feature=+neon\n \n #![feature(asm_const, asm_sym)]\n "}, {"sha": "3878806fd0270a5a13600e9ceb6d1988bfc98083", "filename": "src/test/ui/target-feature/aarch64-neon-works.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/src%2Ftest%2Fui%2Ftarget-feature%2Faarch64-neon-works.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/src%2Ftest%2Fui%2Ftarget-feature%2Faarch64-neon-works.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Faarch64-neon-works.rs?ref=67d6cc6ef3883b6598ee6347f119cdfd7c4029b8", "patch": "@@ -0,0 +1,23 @@\n+// only-aarch64\n+// run-pass\n+#![allow(dead_code)]\n+use std::arch::*;\n+use std::arch::aarch64::*;\n+\n+// Smoke test to verify aarch64 code that enables NEON compiles.\n+fn main() {\n+    let _zero = if is_aarch64_feature_detected!(\"neon\") {\n+        unsafe {\n+            let zeros = zero_vector();\n+            vgetq_lane_u8::<1>(zeros)\n+        }\n+    } else {\n+        0\n+    };\n+}\n+\n+\n+#[target_feature(enable = \"neon\")]\n+unsafe fn zero_vector() -> uint8x16_t {\n+    vmovq_n_u8(0)\n+}"}, {"sha": "5fbd5e8a28d94efc9c2c60aba55b5e0be657769c", "filename": "src/test/ui/target-feature/feature-hierarchy.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/src%2Ftest%2Fui%2Ftarget-feature%2Ffeature-hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/src%2Ftest%2Fui%2Ftarget-feature%2Ffeature-hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ffeature-hierarchy.rs?ref=67d6cc6ef3883b6598ee6347f119cdfd7c4029b8", "patch": "@@ -0,0 +1,58 @@\n+// revisions: aarch64-neon aarch64-sve2\n+// [aarch64-neon] compile-flags: -Ctarget-feature=+neon --target=aarch64-unknown-linux-gnu\n+// [aarch64-neon] needs-llvm-components: aarch64\n+// [aarch64-sve2] compile-flags: -Ctarget-feature=-neon,+sve2 --target=aarch64-unknown-linux-gnu\n+// [aarch64-sve2] needs-llvm-components: aarch64\n+// build-pass\n+#![no_core]\n+#![crate_type = \"rlib\"]\n+#![feature(intrinsics, rustc_attrs, no_core, lang_items, staged_api)]\n+#![stable(feature = \"test\", since = \"1.0.0\")]\n+\n+// Tests vetting \"feature hierarchies\" in the cases where we impose them.\n+\n+// Supporting minimal rust core code\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+impl Copy for bool {}\n+\n+extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"test\", since = \"1.0.0\")]\n+    fn unreachable() -> !;\n+}\n+\n+#[rustc_builtin_macro]\n+macro_rules! cfg {\n+    ($($cfg:tt)*) => {};\n+}\n+\n+// Test code\n+const fn do_or_die(cond: bool) {\n+    if cond {\n+    } else {\n+        unsafe { unreachable() }\n+    }\n+}\n+\n+macro_rules! assert {\n+    ($x:expr $(,)?) => {\n+        const _: () = do_or_die($x);\n+    };\n+}\n+\n+\n+#[cfg(aarch64_neon)]\n+fn check_neon_not_sve2() {\n+    // This checks that a normal aarch64 target doesn't suddenly jump up the feature hierarchy.\n+    assert!(cfg!(target_feature = \"neon\"));\n+    assert!(cfg!(not(target_feature = \"sve2\")));\n+}\n+\n+#[cfg(aarch64_sve2)]\n+fn check_sve2_includes_neon() {\n+    // This checks that aarch64's sve2 includes neon\n+    assert!(cfg!(target_feature = \"neon\"));\n+    assert!(cfg!(target_feature = \"sve2\"));\n+}"}, {"sha": "5a71b2166c3ae2fa44fa243391dc334dd69b64c9", "filename": "src/test/ui/target-feature/no-llvm-leaks.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/src%2Ftest%2Fui%2Ftarget-feature%2Fno-llvm-leaks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8/src%2Ftest%2Fui%2Ftarget-feature%2Fno-llvm-leaks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fno-llvm-leaks.rs?ref=67d6cc6ef3883b6598ee6347f119cdfd7c4029b8", "patch": "@@ -0,0 +1,64 @@\n+// revisions: aarch64 x86-64\n+// [aarch64] compile-flags: -Ctarget-feature=+neon,+fp16,+fhm --target=aarch64-unknown-linux-gnu\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86-64] compile-flags: -Ctarget-feature=+sse4.2,+rdrand --target=x86_64-unknown-linux-gnu\n+// [x86-64] needs-llvm-components: x86\n+// build-pass\n+#![no_core]\n+#![crate_type = \"rlib\"]\n+#![feature(intrinsics, rustc_attrs, no_core, lang_items, staged_api)]\n+#![stable(feature = \"test\", since = \"1.0.0\")]\n+\n+// Supporting minimal rust core code\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+impl Copy for bool {}\n+\n+extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"test\", since = \"1.0.0\")]\n+    fn unreachable() -> !;\n+}\n+\n+#[rustc_builtin_macro]\n+macro_rules! cfg {\n+    ($($cfg:tt)*) => {};\n+}\n+\n+// Test code\n+const fn do_or_die(cond: bool) {\n+    if cond {\n+    } else {\n+        unsafe { unreachable() }\n+    }\n+}\n+\n+macro_rules! assert {\n+    ($x:expr $(,)?) => {\n+        const _: () = do_or_die($x);\n+    };\n+}\n+\n+\n+#[cfg(target_arch = \"aarch64\")]\n+fn check_aarch64() {\n+    // This checks that the rustc feature name is used, not the LLVM feature.\n+    assert!(cfg!(target_feature = \"neon\"));\n+    assert!(cfg!(not(target_feature = \"fp-armv8\")));\n+    assert!(cfg!(target_feature = \"fhm\"));\n+    assert!(cfg!(not(target_feature = \"fp16fml\")));\n+    assert!(cfg!(target_feature = \"fp16\"));\n+    assert!(cfg!(not(target_feature = \"fullfp16\")));\n+}\n+\n+#[cfg(target_arch = \"x86_64\")]\n+fn check_x86_64() {\n+    // This checks that the rustc feature name is used, not the LLVM feature.\n+    assert!(cfg!(target_feature = \"rdrand\"));\n+    assert!(cfg!(not(target_feature = \"rdrnd\")));\n+\n+    // Likewise: We enable LLVM's crc32 feature with SSE4.2, but Rust says it's just SSE4.2\n+    assert!(cfg!(target_feature = \"sse4.2\"));\n+    assert!(cfg!(not(target_feature = \"crc32\")));\n+}"}]}