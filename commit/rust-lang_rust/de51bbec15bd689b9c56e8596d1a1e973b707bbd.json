{"sha": "de51bbec15bd689b9c56e8596d1a1e973b707bbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNTFiYmVjMTViZDY4OWI5YzU2ZTg1OTZkMWExZTk3M2I3MDdiYmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-07T07:41:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-07T07:41:32Z"}, "message": "Auto merge of #24116 - zaeleus:rustdoc-codespan, r=alexcrichton\n\nBecause the current style for `code` in rustdoc is to prewrap whitespace, code spans that are hard wrapped in the source documentation are prematurely wrapped when rendered in HTML. [For example][2],\r\n\r\n```\r\n/// ...\r\n/// type can be borrowed as multiple different types. In particular, `Vec<T>:\r\n/// Borrow<Vec<T>>` and `Vec<T>: Borrow<[T]>`.\r\n```\r\n\r\nrenders as\r\n\r\n![screen shot 2015-04-06 at 12 11 21](https://cloud.githubusercontent.com/assets/191331/7008216/2706b3b0-dc56-11e4-941e-1b0154fcbc5c.png)\r\n\r\nbecause \"`Vec<T>: Borrow<Vec<T>>`\" wraps to the next line in the source.\r\n\r\nCommonMark 0.18 [[1]] specifies \"interior spaces and line endings are collapsed into single spaces\" for code spans, which would actually prevent this issue, but hoedown does not currently conform to the\r\nCommonMark spec.\r\n\r\nThe added span-level callback attempts to adhere to how whitespace is handled as described by CommonMark, fixing the issue of early, unintentional wrapping of code spans in rendered HTML.\r\n\r\n[1]: http://spec.commonmark.org/0.18/\r\n[2]: https://doc.rust-lang.org/std/borrow/trait.Borrow.html", "tree": {"sha": "5119d965ea7c9b4252ea62705b4e8577dc3d9675", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5119d965ea7c9b4252ea62705b4e8577dc3d9675"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de51bbec15bd689b9c56e8596d1a1e973b707bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de51bbec15bd689b9c56e8596d1a1e973b707bbd", "html_url": "https://github.com/rust-lang/rust/commit/de51bbec15bd689b9c56e8596d1a1e973b707bbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de51bbec15bd689b9c56e8596d1a1e973b707bbd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c52d46e778f48f12452b65455614a249e4365066", "url": "https://api.github.com/repos/rust-lang/rust/commits/c52d46e778f48f12452b65455614a249e4365066", "html_url": "https://github.com/rust-lang/rust/commit/c52d46e778f48f12452b65455614a249e4365066"}, {"sha": "46cc6e5fc31377c001a5a12c5079388253eecfbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/46cc6e5fc31377c001a5a12c5079388253eecfbc", "html_url": "https://github.com/rust-lang/rust/commit/46cc6e5fc31377c001a5a12c5079388253eecfbc"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "49f6107869e27f60c94a2574b956ec4278effcbd", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/de51bbec15bd689b9c56e8596d1a1e973b707bbd/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de51bbec15bd689b9c56e8596d1a1e973b707bbd/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=de51bbec15bd689b9c56e8596d1a1e973b707bbd", "patch": "@@ -72,6 +72,9 @@ type blockcodefn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n type headerfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n                               libc::c_int, *mut libc::c_void);\n \n+type codespanfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n+                                *mut libc::c_void);\n+\n type linkfn = extern \"C\" fn (*mut hoedown_buffer, *const hoedown_buffer,\n                              *const hoedown_buffer, *const hoedown_buffer,\n                              *mut libc::c_void) -> libc::c_int;\n@@ -89,11 +92,12 @@ struct hoedown_renderer {\n     blockhtml: Option<extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n                                     *mut libc::c_void)>,\n     header: Option<headerfn>,\n-\n     other_block_level_callbacks: [libc::size_t; 9],\n \n     /* span level callbacks - NULL or return 0 prints the span verbatim */\n-    other_span_level_callbacks_1: [libc::size_t; 9],\n+    autolink: libc::size_t, // unused\n+    codespan: Option<codespanfn>,\n+    other_span_level_callbacks_1: [libc::size_t; 7],\n     link: Option<linkfn>,\n     other_span_level_callbacks_2: [libc::size_t; 5],\n     // hoedown will add `math` callback here, but we use an old version of it.\n@@ -185,6 +189,16 @@ fn stripped_filtered_line<'a>(s: &'a str) -> Option<&'a str> {\n     }\n }\n \n+/// Returns a new string with all consecutive whitespace collapsed into\n+/// single spaces.\n+///\n+/// Any leading or trailing whitespace will be trimmed.\n+fn collapse_whitespace(s: &str) -> String {\n+    s.split(|c: char| c.is_whitespace()).filter(|s| {\n+        !s.is_empty()\n+    }).collect::<Vec<_>>().connect(\" \")\n+}\n+\n thread_local!(static USED_HEADER_MAP: RefCell<HashMap<String, usize>> = {\n     RefCell::new(HashMap::new())\n });\n@@ -299,6 +313,20 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n \n     reset_headers();\n \n+    extern fn codespan(ob: *mut hoedown_buffer, text: *const hoedown_buffer, _: *mut libc::c_void) {\n+        let content = if text.is_null() {\n+            \"\".to_string()\n+        } else {\n+            let bytes = unsafe { (*text).as_bytes() };\n+            let s = str::from_utf8(bytes).unwrap();\n+            collapse_whitespace(s)\n+        };\n+\n+        let content = format!(\"<code>{}</code>\", Escape(&content));\n+        let element = CString::new(content).unwrap();\n+        unsafe { hoedown_buffer_puts(ob, element.as_ptr()); }\n+    }\n+\n     unsafe {\n         let ob = hoedown_buffer_new(DEF_OUNIT);\n         let renderer = hoedown_html_renderer_new(0, 0);\n@@ -310,6 +338,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                 = &mut opaque as *mut _ as *mut libc::c_void;\n         (*renderer).blockcode = Some(block);\n         (*renderer).header = Some(header);\n+        (*renderer).codespan = Some(codespan);\n \n         let document = hoedown_document_new(renderer, HOEDOWN_EXTENSIONS, 16);\n         hoedown_document_render(document, ob, s.as_ptr(),\n@@ -523,7 +552,7 @@ pub fn plain_summary_line(md: &str) -> String {\n #[cfg(test)]\n mod tests {\n     use super::{LangString, Markdown};\n-    use super::plain_summary_line;\n+    use super::{collapse_whitespace, plain_summary_line};\n \n     #[test]\n     fn test_lang_string_parse() {\n@@ -571,4 +600,18 @@ mod tests {\n         t(\"# top header\", \"top header\");\n         t(\"## header\", \"header\");\n     }\n+\n+    #[test]\n+    fn test_collapse_whitespace() {\n+        fn t(input: &str, expected: &str) {\n+            let actual = collapse_whitespace(input);\n+            assert_eq!(actual, expected);\n+        }\n+\n+        t(\"foo\", \"foo\");\n+        t(\"foo bar baz\", \"foo bar baz\");\n+        t(\" foo   bar\", \"foo bar\");\n+        t(\"\\tfoo   bar\\nbaz\", \"foo bar baz\");\n+        t(\"foo   bar \\n   baz\\t\\tqux\\n\", \"foo bar baz qux\");\n+    }\n }"}]}