{"sha": "c34aac7b1703edc9ef4ebaa17c16b96a18ca1443", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNGFhYzdiMTcwM2VkYzllZjRlYmFhMTdjMTZiOTZhMThjYTE0NDM=", "commit": {"author": {"name": "Patrick McCarter", "email": "p.mccarter@gmail.com", "date": "2019-02-17T00:56:30Z"}, "committer": {"name": "Patrick McCarter", "email": "p.mccarter@gmail.com", "date": "2019-02-17T00:56:30Z"}, "message": "help suggestion when trying to delimit string literals with directed unicode quotes #58436", "tree": {"sha": "f346a3ef97e724a87f8def9bc26594788d037280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f346a3ef97e724a87f8def9bc26594788d037280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c34aac7b1703edc9ef4ebaa17c16b96a18ca1443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c34aac7b1703edc9ef4ebaa17c16b96a18ca1443", "html_url": "https://github.com/rust-lang/rust/commit/c34aac7b1703edc9ef4ebaa17c16b96a18ca1443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c34aac7b1703edc9ef4ebaa17c16b96a18ca1443/comments", "author": {"login": "pmccarter", "id": 1185163, "node_id": "MDQ6VXNlcjExODUxNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1185163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmccarter", "html_url": "https://github.com/pmccarter", "followers_url": "https://api.github.com/users/pmccarter/followers", "following_url": "https://api.github.com/users/pmccarter/following{/other_user}", "gists_url": "https://api.github.com/users/pmccarter/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmccarter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmccarter/subscriptions", "organizations_url": "https://api.github.com/users/pmccarter/orgs", "repos_url": "https://api.github.com/users/pmccarter/repos", "events_url": "https://api.github.com/users/pmccarter/events{/privacy}", "received_events_url": "https://api.github.com/users/pmccarter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmccarter", "id": 1185163, "node_id": "MDQ6VXNlcjExODUxNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1185163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmccarter", "html_url": "https://github.com/pmccarter", "followers_url": "https://api.github.com/users/pmccarter/followers", "following_url": "https://api.github.com/users/pmccarter/following{/other_user}", "gists_url": "https://api.github.com/users/pmccarter/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmccarter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmccarter/subscriptions", "organizations_url": "https://api.github.com/users/pmccarter/orgs", "repos_url": "https://api.github.com/users/pmccarter/repos", "events_url": "https://api.github.com/users/pmccarter/events{/privacy}", "received_events_url": "https://api.github.com/users/pmccarter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eac09088e1a8fc8a293028764e4e84da29469205", "url": "https://api.github.com/repos/rust-lang/rust/commits/eac09088e1a8fc8a293028764e4e84da29469205", "html_url": "https://github.com/rust-lang/rust/commit/eac09088e1a8fc8a293028764e4e84da29469205"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "a7cde5fbb92cd27a83a1e78da595016fadb886cf", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c34aac7b1703edc9ef4ebaa17c16b96a18ca1443/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34aac7b1703edc9ef4ebaa17c16b96a18ca1443/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=c34aac7b1703edc9ef4ebaa17c16b96a18ca1443", "patch": "@@ -125,6 +125,28 @@ impl<'a> StringReader<'a> {\n         Ok(ret_val)\n     }\n \n+    /// Immutably extract string if found at current position with given delimiters\n+    pub fn peek_delimited(&self, from_ch: char, to_ch: char) -> Option<String> {\n+        let mut pos = self.pos;\n+        let mut idx = self.src_index(pos);\n+        let mut ch = char_at(&self.src, idx);\n+        if ch != from_ch {\n+            return None;\n+        }\n+        pos = pos + Pos::from_usize(ch.len_utf8());\n+        let start_pos = pos;\n+        idx = self.src_index(pos);\n+        while idx < self.end_src_index {\n+            ch = char_at(&self.src, idx);\n+            if ch == to_ch {\n+                return Some(self.src[self.src_index(start_pos)..self.src_index(pos)].to_string());\n+            }\n+            pos = pos + Pos::from_usize(ch.len_utf8());\n+            idx = self.src_index(pos);\n+        }\n+        return None;\n+    }\n+\n     fn try_real_token(&mut self) -> Result<TokenAndSpan, ()> {\n         let mut t = self.try_next_token()?;\n         loop {"}, {"sha": "94ce6297fbefbfcfb9d13d09b8c05af344e56e60", "filename": "src/libsyntax/parse/lexer/unicode_chars.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c34aac7b1703edc9ef4ebaa17c16b96a18ca1443/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34aac7b1703edc9ef4ebaa17c16b96a18ca1443/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs?ref=c34aac7b1703edc9ef4ebaa17c16b96a18ca1443", "patch": "@@ -1,7 +1,7 @@\n // Characters and their corresponding confusables were collected from\n // http://www.unicode.org/Public/security/10.0.0/confusables.txt\n \n-use syntax_pos::{Span, NO_EXPANSION};\n+use syntax_pos::{Span, Pos, NO_EXPANSION};\n use errors::{Applicability, DiagnosticBuilder};\n use super::StringReader;\n \n@@ -333,14 +333,27 @@ crate fn check_for_substitution<'a>(reader: &StringReader<'a>,\n         let span = Span::new(reader.pos, reader.next_pos, NO_EXPANSION);\n         match ASCII_ARRAY.iter().find(|&&(c, _)| c == ascii_char) {\n             Some(&(ascii_char, ascii_name)) => {\n-                let msg =\n-                    format!(\"Unicode character '{}' ({}) looks like '{}' ({}), but it is not\",\n-                            ch, u_name, ascii_char, ascii_name);\n-                err.span_suggestion(\n-                    span,\n-                    &msg,\n-                    ascii_char.to_string(),\n-                    Applicability::MaybeIncorrect);\n+                // special help suggestion for \"directed\" double quotes\n+                if let Some(s) = reader.peek_delimited('\u201c', '\u201d') {\n+                    let msg = format!(\"Unicode characters '\u201c' (Left Double Quotation Mark) and \\\n+                        '\u201d' (Right Double Quotation Mark) look like '{}' ({}), but are not\",\n+                                ascii_char, ascii_name);\n+                    err.span_suggestion(\n+                        Span::new(reader.pos, reader.next_pos + Pos::from_usize(s.len()) +\n+                            Pos::from_usize('\u201d'.len_utf8()), NO_EXPANSION),\n+                        &msg,\n+                        format!(\"\\\"{}\\\"\", s),\n+                        Applicability::MaybeIncorrect);\n+                } else {\n+                    let msg =\n+                        format!(\"Unicode character '{}' ({}) looks like '{}' ({}), but it is not\",\n+                                ch, u_name, ascii_char, ascii_name);\n+                    err.span_suggestion(\n+                        span,\n+                        &msg,\n+                        ascii_char.to_string(),\n+                        Applicability::MaybeIncorrect);\n+                }\n                 true\n             },\n             None => {"}]}