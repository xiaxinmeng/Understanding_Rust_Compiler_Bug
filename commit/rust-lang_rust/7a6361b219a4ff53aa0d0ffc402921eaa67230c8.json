{"sha": "7a6361b219a4ff53aa0d0ffc402921eaa67230c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNjM2MWIyMTlhNGZmNTNhYTBkMGZmYzQwMjkyMWVhYTY3MjMwYzg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-22T14:34:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-22T14:38:00Z"}, "message": "Hash out ast structure", "tree": {"sha": "a9cadbb7818eb0815f9d1c4a65e45d97dc3289ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9cadbb7818eb0815f9d1c4a65e45d97dc3289ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a6361b219a4ff53aa0d0ffc402921eaa67230c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6361b219a4ff53aa0d0ffc402921eaa67230c8", "html_url": "https://github.com/rust-lang/rust/commit/7a6361b219a4ff53aa0d0ffc402921eaa67230c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a6361b219a4ff53aa0d0ffc402921eaa67230c8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9726ecdc99a35467af4aa9f375821805d55e4869", "url": "https://api.github.com/repos/rust-lang/rust/commits/9726ecdc99a35467af4aa9f375821805d55e4869", "html_url": "https://github.com/rust-lang/rust/commit/9726ecdc99a35467af4aa9f375821805d55e4869"}], "stats": {"total": 77, "additions": 72, "deletions": 5}, "files": [{"sha": "9baa96039de76125773d39aa8e5f08698ccb1f23", "filename": "minirust.rs", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7a6361b219a4ff53aa0d0ffc402921eaa67230c8/minirust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6361b219a4ff53aa0d0ffc402921eaa67230c8/minirust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/minirust.rs?ref=7a6361b219a4ff53aa0d0ffc402921eaa67230c8", "patch": "@@ -1,3 +1,4 @@\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n pub struct NodeKind(u16);\n \n pub struct File {\n@@ -67,8 +68,6 @@ impl<'f> Iterator for Children<'f> {\n     }\n }\n \n-\n-\n pub const ERROR: NodeKind = NodeKind(0);\n pub const WHITESPACE: NodeKind = NodeKind(1);\n pub const STRUCT_KW: NodeKind = NodeKind(2);\n@@ -82,4 +81,72 @@ pub const LINE_COMMENT: NodeKind = NodeKind(9);\n pub const FILE: NodeKind = NodeKind(10);\n pub const STRUCT_DEF: NodeKind = NodeKind(11);\n pub const FIELD_DEF: NodeKind = NodeKind(12);\n-pub const TYPE: NodeKind = NodeKind(13);\n+pub const TYPE_REF: NodeKind = NodeKind(13);\n+\n+\n+pub trait AstNode<'f>: Copy + 'f {\n+    fn new(node: Node<'f>) -> Option<Self>;\n+    fn node(&self) -> Node<'f>;\n+}\n+\n+pub fn child_of_kind<'f>(node: Node<'f>, kind: NodeKind) -> Option<Node<'f>> {\n+    node.children().find(|child| child.kind() == kind)\n+}\n+\n+pub fn ast_children<'f, A: AstNode<'f>>(node: Node<'f>) -> Box<Iterator<Item=A> + 'f> {\n+    Box::new(node.children().filter_map(A::new))\n+}\n+\n+#[derive(Clone, Copy)]\n+pub struct StructDef<'f>(Node<'f>);\n+\n+#[derive(Clone, Copy)]\n+pub struct FieldDef<'f>(Node<'f>);\n+\n+#[derive(Clone, Copy)]\n+pub struct TypeRef<'f>(Node<'f>);\n+\n+pub trait NameOwner<'f>: AstNode<'f> {\n+    fn name_ident(&self) -> Node<'f> {\n+        child_of_kind(self.node(), IDENT).unwrap()\n+    }\n+\n+    fn name(&self) -> &'f str { self.name_ident().text() }\n+}\n+\n+\n+impl<'f> AstNode<'f> for StructDef<'f> {\n+    fn new(node: Node<'f>) -> Option<Self> {\n+        if node.kind() == STRUCT_DEF { Some(StructDef(node)) } else { None }\n+    }\n+    fn node(&self) -> Node<'f> { self.0 }\n+}\n+\n+impl<'f> AstNode<'f> for FieldDef<'f> {\n+    fn new(node: Node<'f>) -> Option<Self> {\n+        if node.kind() == FIELD_DEF { Some(FieldDef(node)) } else { None }\n+    }\n+    fn node(&self) -> Node<'f> { self.0 }\n+}\n+\n+impl<'f> AstNode<'f> for TypeRef<'f> {\n+    fn new(node: Node<'f>) -> Option<Self> {\n+        if node.kind() == TYPE_REF { Some(TypeRef(node)) } else { None }\n+    }\n+    fn node(&self) -> Node<'f> { self.0 }\n+}\n+\n+impl<'f> NameOwner<'f> for StructDef<'f> {}\n+impl<'f> NameOwner<'f> for FieldDef<'f> {}\n+\n+impl<'f> StructDef<'f> {\n+    pub fn fields(&self) -> Box<Iterator<Item=FieldDef<'f>> + 'f> {\n+        ast_children(self.node())\n+    }\n+}\n+\n+impl<'f> FieldDef<'f> {\n+    pub fn type_ref(&self) -> Option<TypeRef<'f>> {\n+        ast_children(self.node()).next()\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "6cc3e1a7917a7d0ac880334c3d87183102c82c8e", "filename": "rfc.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6361b219a4ff53aa0d0ffc402921eaa67230c8/rfc.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a6361b219a4ff53aa0d0ffc402921eaa67230c8/rfc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rfc.md?ref=7a6361b219a4ff53aa0d0ffc402921eaa67230c8", "patch": "@@ -150,7 +150,7 @@ FILE\n \t  IDENT\n \t  COLON\n \t  WHITESPACE\n-\t  TYPE\n+\t  TYPE_REF\n \t    IDENT\n \tCOMMA\n \tWHITESPACE\n@@ -180,7 +180,7 @@ Note several features of the tree:\n   \n * The non-documenting comment is correctly attached to the following\n   field.\n-\n+  \n \n \n # Drawbacks"}]}