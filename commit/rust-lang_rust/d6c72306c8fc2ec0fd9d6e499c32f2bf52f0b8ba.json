{"sha": "d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YzcyMzA2YzhmYzJlYzBmZDlkNmU0OTljMzJmMmJmNTJmMGI4YmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-03T22:30:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-10T00:07:02Z"}, "message": "std: Set CLOEXEC for all fds opened on unix\n\nThis commit starts to set the CLOEXEC flag for all files and sockets opened by\nthe standard library by default on all unix platforms. There are a few points of\nnote in this commit:\n\n* The implementation is not 100% satisfactory in the face of threads. File\n  descriptors only have the `F_CLOEXEC` flag set *after* they are opened,\n  allowing for a fork/exec to happen in the middle and leak the descriptor.\n  Some platforms do support atomically opening a descriptor while setting the\n  `CLOEXEC` flag, and it is left as a future extension to bind these apis as it\n  is unclear how to do so nicely at this time.\n\n* The implementation does not offer a method of opting into the old behavior of\n  not setting `CLOEXEC`. This will possibly be added in the future through\n  extensions on `OpenOptions`, for example.\n\n* This change does not yet audit any Windows APIs to see if the handles are\n  inherited by default by accident.\n\nThis is a breaking change for users who call `fork` or `exec` outside of the\nstandard library itself and expect file descriptors to be inherted. All file\ndescriptors created by the standard library will no longer be inherited.\n\n[breaking-change]", "tree": {"sha": "049c8e404c1f5a73b1a418ea9c69acb0224dab50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/049c8e404c1f5a73b1a418ea9c69acb0224dab50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba", "html_url": "https://github.com/rust-lang/rust/commit/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "url": "https://api.github.com/repos/rust-lang/rust/commits/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "html_url": "https://github.com/rust-lang/rust/commit/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66"}], "stats": {"total": 155, "additions": 125, "deletions": 30}, "files": [{"sha": "282e5668e6e763213a03a5032b1b3393de496060", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba", "patch": "@@ -26,39 +26,35 @@ use libc;\n           target_os = \"dragonfly\",\n           target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n-pub const FIONBIO: libc::c_ulong = 0x8004667e;\n-#[cfg(any(all(target_os = \"linux\",\n-              any(target_arch = \"x86\",\n-                  target_arch = \"x86_64\",\n-                  target_arch = \"arm\",\n-                  target_arch = \"aarch64\")),\n-          target_os = \"android\"))]\n-pub const FIONBIO: libc::c_ulong = 0x5421;\n-#[cfg(all(target_os = \"linux\",\n-          any(target_arch = \"mips\",\n-              target_arch = \"mipsel\",\n-              target_arch = \"powerpc\")))]\n-pub const FIONBIO: libc::c_ulong = 0x667e;\n-\n-#[cfg(any(target_os = \"macos\",\n-          target_os = \"ios\",\n-          target_os = \"freebsd\",\n-          target_os = \"dragonfly\",\n-          target_os = \"bitrig\",\n-          target_os = \"openbsd\"))]\n-pub const FIOCLEX: libc::c_ulong = 0x20006601;\n+mod consts {\n+    use libc;\n+    pub const FIONBIO: libc::c_ulong = 0x8004667e;\n+    pub const FIOCLEX: libc::c_ulong = 0x20006601;\n+    pub const FIONCLEX: libc::c_ulong = 0x20006602;\n+}\n #[cfg(any(all(target_os = \"linux\",\n               any(target_arch = \"x86\",\n                   target_arch = \"x86_64\",\n                   target_arch = \"arm\",\n                   target_arch = \"aarch64\")),\n           target_os = \"android\"))]\n-pub const FIOCLEX: libc::c_ulong = 0x5451;\n+mod consts {\n+    use libc;\n+    pub const FIONBIO: libc::c_ulong = 0x5421;\n+    pub const FIOCLEX: libc::c_ulong = 0x5451;\n+    pub const FIONCLEX: libc::c_ulong = 0x5450;\n+}\n #[cfg(all(target_os = \"linux\",\n           any(target_arch = \"mips\",\n               target_arch = \"mipsel\",\n               target_arch = \"powerpc\")))]\n-pub const FIOCLEX: libc::c_ulong = 0x6601;\n+mod consts {\n+    use libc;\n+    pub const FIONBIO: libc::c_ulong = 0x667e;\n+    pub const FIOCLEX: libc::c_ulong = 0x6601;\n+    pub const FIONCLEX: libc::c_ulong = 0x6600;\n+}\n+pub use self::consts::*;\n \n #[cfg(any(target_os = \"macos\",\n           target_os = \"ios\","}, {"sha": "4ef09b91c254667b36443ef0f98721b605ffb7d2", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba", "patch": "@@ -13,6 +13,7 @@ use core::prelude::*;\n use io;\n use libc::{self, c_int, size_t, c_void};\n use mem;\n+use sys::c;\n use sys::cvt;\n use sys_common::AsInner;\n \n@@ -51,6 +52,20 @@ impl FileDesc {\n         }));\n         Ok(ret as usize)\n     }\n+\n+    pub fn set_cloexec(&self) {\n+        unsafe {\n+            let ret = c::ioctl(self.fd, c::FIOCLEX);\n+            debug_assert_eq!(ret, 0);\n+        }\n+    }\n+\n+    pub fn unset_cloexec(&self) {\n+        unsafe {\n+            let ret = c::ioctl(self.fd, c::FIONCLEX);\n+            debug_assert_eq!(ret, 0);\n+        }\n+    }\n }\n \n impl AsInner<c_int> for FileDesc {"}, {"sha": "20b1aac8f456c322eec39ca95779b0f0da8040ba", "filename": "src/libstd/sys/unix/fs2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs?ref=d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba", "patch": "@@ -215,7 +215,9 @@ impl File {\n         let fd = try!(cvt_r(|| unsafe {\n             libc::open(path.as_ptr(), flags, opts.mode)\n         }));\n-        Ok(File(FileDesc::new(fd)))\n+        let fd = FileDesc::new(fd);\n+        fd.set_cloexec();\n+        Ok(File(fd))\n     }\n \n     pub fn file_attr(&self) -> io::Result<FileAttr> {"}, {"sha": "2e1cbb2a1e127094269b6dee8d70fe60eab33685", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba", "patch": "@@ -47,7 +47,9 @@ impl Socket {\n         };\n         unsafe {\n             let fd = try!(cvt(libc::socket(fam, ty, 0)));\n-            Ok(Socket(FileDesc::new(fd)))\n+            let fd = FileDesc::new(fd);\n+            fd.set_cloexec();\n+            Ok(Socket(fd))\n         }\n     }\n \n@@ -56,13 +58,16 @@ impl Socket {\n         let fd = try!(cvt_r(|| unsafe {\n             libc::accept(self.0.raw(), storage, len)\n         }));\n-        Ok(Socket(FileDesc::new(fd)))\n+        let fd = FileDesc::new(fd);\n+        fd.set_cloexec();\n+        Ok(Socket(fd))\n     }\n \n     pub fn duplicate(&self) -> io::Result<Socket> {\n-        cvt(unsafe { libc::dup(self.0.raw()) }).map(|fd| {\n-            Socket(FileDesc::new(fd))\n-        })\n+        let fd = try!(cvt(unsafe { libc::dup(self.0.raw()) }));\n+        let fd = FileDesc::new(fd);\n+        fd.set_cloexec();\n+        Ok(Socket(fd))\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {"}, {"sha": "2fd4d6dd311d8342af95ce031826604daae366c9", "filename": "src/libstd/sys/unix/pipe2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba/src%2Flibstd%2Fsys%2Funix%2Fpipe2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba/src%2Flibstd%2Fsys%2Funix%2Fpipe2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe2.rs?ref=d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba", "patch": "@@ -32,7 +32,9 @@ pub unsafe fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n \n impl AnonPipe {\n     pub fn from_fd(fd: libc::c_int) -> AnonPipe {\n-        AnonPipe(FileDesc::new(fd))\n+        let fd = FileDesc::new(fd);\n+        fd.set_cloexec();\n+        AnonPipe(fd)\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {"}, {"sha": "ec59b4dc03dea59a71193e294343dd6ef279d9f5", "filename": "src/test/run-pass/fds-are-cloexec.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs?ref=d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-windows\n+\n+#![feature(libc)]\n+\n+extern crate libc;\n+\n+use std::env;\n+use std::fs::{self, File};\n+use std::io;\n+use std::net::{TcpListener, TcpStream, UdpSocket};\n+use std::os::unix::prelude::*;\n+use std::process::Command;\n+use std::thread;\n+\n+fn main() {\n+    let args = env::args().collect::<Vec<_>>();\n+    if args.len() == 1 {\n+        parent()\n+    } else {\n+        child(&args)\n+    }\n+}\n+\n+fn parent() {\n+    let file = File::open(\"Makefile\").unwrap();\n+    let _dir = fs::read_dir(\"/\").unwrap();\n+    let tcp1 = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n+    assert_eq!(tcp1.as_raw_fd(), file.as_raw_fd() + 2);\n+    let tcp2 = tcp1.try_clone().unwrap();\n+    let addr = tcp1.local_addr().unwrap();\n+    let t = thread::scoped(|| TcpStream::connect(addr).unwrap());\n+    let tcp3 = tcp1.accept().unwrap().0;\n+    let tcp4 = t.join();\n+    let tcp5 = tcp3.try_clone().unwrap();\n+    let tcp6 = tcp4.try_clone().unwrap();\n+    let udp1 = UdpSocket::bind(\"127.0.0.1:0\").unwrap();\n+    let udp2 = udp1.try_clone().unwrap();\n+\n+    let status = Command::new(env::args().next().unwrap())\n+                        .arg(file.as_raw_fd().to_string())\n+                        .arg((file.as_raw_fd() + 1).to_string())\n+                        .arg(tcp1.as_raw_fd().to_string())\n+                        .arg(tcp2.as_raw_fd().to_string())\n+                        .arg(tcp3.as_raw_fd().to_string())\n+                        .arg(tcp4.as_raw_fd().to_string())\n+                        .arg(tcp5.as_raw_fd().to_string())\n+                        .arg(tcp6.as_raw_fd().to_string())\n+                        .arg(udp1.as_raw_fd().to_string())\n+                        .arg(udp2.as_raw_fd().to_string())\n+                        .status()\n+                        .unwrap();\n+    assert!(status.success());\n+}\n+\n+fn child(args: &[String]) {\n+    let mut b = [0u8; 2];\n+    for arg in &args[1..] {\n+        let fd: libc::c_int = arg.parse().unwrap();\n+        unsafe {\n+            assert_eq!(libc::read(fd, b.as_mut_ptr() as *mut _, 2), -1);\n+            assert_eq!(io::Error::last_os_error().raw_os_error(),\n+                       Some(libc::EBADF));\n+        }\n+    }\n+}"}]}