{"sha": "9446be29992fe14ec529874622311c3ae7a49b0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NDZiZTI5OTkyZmUxNGVjNTI5ODc0NjIyMzExYzNhZTdhNDliMGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T15:43:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T15:43:25Z"}, "message": "remove Cancelable from adt API", "tree": {"sha": "28ed14b3de7239994ba19b304e72c86f8d37de23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28ed14b3de7239994ba19b304e72c86f8d37de23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9446be29992fe14ec529874622311c3ae7a49b0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9446be29992fe14ec529874622311c3ae7a49b0e", "html_url": "https://github.com/rust-lang/rust/commit/9446be29992fe14ec529874622311c3ae7a49b0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9446be29992fe14ec529874622311c3ae7a49b0e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05149d353299b54476410daeda6551e1261128ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/05149d353299b54476410daeda6551e1261128ef", "html_url": "https://github.com/rust-lang/rust/commit/05149d353299b54476410daeda6551e1261128ef"}], "stats": {"total": 99, "additions": 41, "deletions": 58}, "files": [{"sha": "57d112f7468ceb1379cc2fd8ddc9a1c32c14e29f", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=9446be29992fe14ec529874622311c3ae7a49b0e", "patch": "@@ -19,7 +19,7 @@ impl Struct {\n     }\n \n     pub(crate) fn variant_data(&self, db: &impl HirDatabase) -> Cancelable<Arc<VariantData>> {\n-        Ok(db.struct_data(self.def_id)?.variant_data.clone())\n+        Ok(db.struct_data(self.def_id).variant_data.clone())\n     }\n }\n \n@@ -37,16 +37,13 @@ impl StructData {\n         StructData { name, variant_data }\n     }\n \n-    pub(crate) fn struct_data_query(\n-        db: &impl HirDatabase,\n-        def_id: DefId,\n-    ) -> Cancelable<Arc<StructData>> {\n+    pub(crate) fn struct_data_query(db: &impl HirDatabase, def_id: DefId) -> Arc<StructData> {\n         let def_loc = def_id.loc(db);\n         assert!(def_loc.kind == DefKind::Struct);\n         let syntax = db.file_item(def_loc.source_item_id);\n         let struct_def =\n             ast::StructDef::cast(&syntax).expect(\"struct def should point to StructDef node\");\n-        Ok(Arc::new(StructData::new(struct_def)))\n+        Arc::new(StructData::new(struct_def))\n     }\n }\n \n@@ -84,10 +81,7 @@ impl EnumData {\n         EnumData { name, variants }\n     }\n \n-    pub(crate) fn enum_data_query(\n-        db: &impl HirDatabase,\n-        def_id: DefId,\n-    ) -> Cancelable<Arc<EnumData>> {\n+    pub(crate) fn enum_data_query(db: &impl HirDatabase, def_id: DefId) -> Arc<EnumData> {\n         let def_loc = def_id.loc(db);\n         assert!(def_loc.kind == DefKind::Enum);\n         let syntax = db.file_item(def_loc.source_item_id);\n@@ -107,7 +101,7 @@ impl EnumData {\n         } else {\n             Vec::new()\n         };\n-        Ok(Arc::new(EnumData::new(enum_def, variants)))\n+        Arc::new(EnumData::new(enum_def, variants))\n     }\n }\n \n@@ -133,7 +127,7 @@ impl EnumVariantData {\n     pub(crate) fn enum_variant_data_query(\n         db: &impl HirDatabase,\n         def_id: DefId,\n-    ) -> Cancelable<Arc<EnumVariantData>> {\n+    ) -> Arc<EnumVariantData> {\n         let def_loc = def_id.loc(db);\n         assert!(def_loc.kind == DefKind::EnumVariant);\n         let syntax = db.file_item(def_loc.source_item_id);\n@@ -146,10 +140,7 @@ impl EnumVariantData {\n             .expect(\"enum variant list should have enum ancestor\");\n         let enum_def_id = get_def_id(db, &def_loc, enum_node, DefKind::Enum);\n \n-        Ok(Arc::new(EnumVariantData::new(\n-            variant_def,\n-            Enum::new(enum_def_id),\n-        )))\n+        Arc::new(EnumVariantData::new(variant_def, Enum::new(enum_def_id)))\n     }\n }\n "}, {"sha": "cd61d922bcf4eaa35c96efabac780a1ab4eeee3e", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=9446be29992fe14ec529874622311c3ae7a49b0e", "patch": "@@ -175,29 +175,24 @@ impl Struct {\n         self.def_id\n     }\n \n-    pub fn name(&self, db: &impl HirDatabase) -> Cancelable<Option<Name>> {\n-        Ok(db.struct_data(self.def_id)?.name.clone())\n+    pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {\n+        db.struct_data(self.def_id).name.clone()\n     }\n \n-    pub fn fields(&self, db: &impl HirDatabase) -> Cancelable<Vec<StructField>> {\n-        let res = db\n-            .struct_data(self.def_id)?\n+    pub fn fields(&self, db: &impl HirDatabase) -> Vec<StructField> {\n+        db.struct_data(self.def_id)\n             .variant_data\n             .fields()\n             .iter()\n             .map(|it| StructField {\n                 struct_: self.clone(),\n                 name: it.name.clone(),\n             })\n-            .collect();\n-        Ok(res)\n+            .collect()\n     }\n \n-    pub fn source(\n-        &self,\n-        db: &impl HirDatabase,\n-    ) -> Cancelable<(HirFileId, TreeArc<ast::StructDef>)> {\n-        Ok(def_id_to_ast(db, self.def_id))\n+    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::StructDef>) {\n+        def_id_to_ast(db, self.def_id)\n     }\n }\n \n@@ -215,16 +210,16 @@ impl Enum {\n         self.def_id\n     }\n \n-    pub fn name(&self, db: &impl HirDatabase) -> Cancelable<Option<Name>> {\n-        Ok(db.enum_data(self.def_id)?.name.clone())\n+    pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {\n+        db.enum_data(self.def_id).name.clone()\n     }\n \n-    pub fn variants(&self, db: &impl HirDatabase) -> Cancelable<Vec<(Name, EnumVariant)>> {\n-        Ok(db.enum_data(self.def_id)?.variants.clone())\n+    pub fn variants(&self, db: &impl HirDatabase) -> Vec<(Name, EnumVariant)> {\n+        db.enum_data(self.def_id).variants.clone()\n     }\n \n-    pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreeArc<ast::EnumDef>)> {\n-        Ok(def_id_to_ast(db, self.def_id))\n+    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::EnumDef>) {\n+        def_id_to_ast(db, self.def_id)\n     }\n }\n \n@@ -242,23 +237,20 @@ impl EnumVariant {\n         self.def_id\n     }\n \n-    pub fn parent_enum(&self, db: &impl HirDatabase) -> Cancelable<Enum> {\n-        Ok(db.enum_variant_data(self.def_id)?.parent_enum.clone())\n+    pub fn parent_enum(&self, db: &impl HirDatabase) -> Enum {\n+        db.enum_variant_data(self.def_id).parent_enum.clone()\n     }\n \n-    pub fn name(&self, db: &impl HirDatabase) -> Cancelable<Option<Name>> {\n-        Ok(db.enum_variant_data(self.def_id)?.name.clone())\n+    pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {\n+        db.enum_variant_data(self.def_id).name.clone()\n     }\n \n-    pub fn variant_data(&self, db: &impl HirDatabase) -> Cancelable<Arc<VariantData>> {\n-        Ok(db.enum_variant_data(self.def_id)?.variant_data.clone())\n+    pub fn variant_data(&self, db: &impl HirDatabase) -> Arc<VariantData> {\n+        db.enum_variant_data(self.def_id).variant_data.clone()\n     }\n \n-    pub fn source(\n-        &self,\n-        db: &impl HirDatabase,\n-    ) -> Cancelable<(HirFileId, TreeArc<ast::EnumVariant>)> {\n-        Ok(def_id_to_ast(db, self.def_id))\n+    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n+        def_id_to_ast(db, self.def_id)\n     }\n }\n "}, {"sha": "f275237531550606e119ac731c19c7b62b57455e", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=9446be29992fe14ec529874622311c3ae7a49b0e", "patch": "@@ -154,7 +154,7 @@ impl Module {\n                     if segments.len() == idx + 1 {\n                         // enum variant\n                         let matching_variant =\n-                            e.variants(db)?.into_iter().find(|(n, _variant)| n == name);\n+                            e.variants(db).into_iter().find(|(n, _variant)| n == name);\n \n                         if let Some((_n, variant)) = matching_variant {\n                             return Ok(PerNs::both(variant.def_id(), e.def_id()));"}, {"sha": "6229f977880a4151d6e8ca3b90bb44a564748991", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=9446be29992fe14ec529874622311c3ae7a49b0e", "patch": "@@ -37,17 +37,17 @@ pub trait HirDatabase: SyntaxDatabase\n         use fn query_definitions::fn_scopes;\n     }\n \n-    fn struct_data(def_id: DefId) -> Cancelable<Arc<StructData>> {\n+    fn struct_data(def_id: DefId) -> Arc<StructData> {\n         type StructDataQuery;\n         use fn crate::adt::StructData::struct_data_query;\n     }\n \n-    fn enum_data(def_id: DefId) -> Cancelable<Arc<EnumData>> {\n+    fn enum_data(def_id: DefId) -> Arc<EnumData> {\n         type EnumDataQuery;\n         use fn crate::adt::EnumData::enum_data_query;\n     }\n \n-    fn enum_variant_data(def_id: DefId) -> Cancelable<Arc<EnumVariantData>> {\n+    fn enum_variant_data(def_id: DefId) -> Arc<EnumVariantData> {\n         type EnumVariantDataQuery;\n         use fn crate::adt::EnumVariantData::enum_variant_data_query;\n     }"}, {"sha": "b0642d905f5c4733a4d3156acc447368f90d9c09", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=9446be29992fe14ec529874622311c3ae7a49b0e", "patch": "@@ -463,19 +463,19 @@ fn type_for_fn(db: &impl HirDatabase, f: Function) -> Cancelable<Ty> {\n fn type_for_struct(db: &impl HirDatabase, s: Struct) -> Cancelable<Ty> {\n     Ok(Ty::Adt {\n         def_id: s.def_id(),\n-        name: s.name(db)?.unwrap_or_else(Name::missing),\n+        name: s.name(db).unwrap_or_else(Name::missing),\n     })\n }\n \n pub(crate) fn type_for_enum(db: &impl HirDatabase, s: Enum) -> Cancelable<Ty> {\n     Ok(Ty::Adt {\n         def_id: s.def_id(),\n-        name: s.name(db)?.unwrap_or_else(Name::missing),\n+        name: s.name(db).unwrap_or_else(Name::missing),\n     })\n }\n \n pub(crate) fn type_for_enum_variant(db: &impl HirDatabase, ev: EnumVariant) -> Cancelable<Ty> {\n-    let enum_parent = ev.parent_enum(db)?;\n+    let enum_parent = ev.parent_enum(db);\n \n     type_for_enum(db, enum_parent)\n }\n@@ -510,7 +510,7 @@ pub(super) fn type_for_field(\n     let def = def_id.resolve(db)?;\n     let variant_data = match def {\n         Def::Struct(s) => s.variant_data(db)?,\n-        Def::EnumVariant(ev) => ev.variant_data(db)?,\n+        Def::EnumVariant(ev) => ev.variant_data(db),\n         // TODO: unions\n         _ => panic!(\n             \"trying to get type for field in non-struct/variant {:?}\","}, {"sha": "bf6d91a09554c783247c6bcf30f30e446f316bc5", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=9446be29992fe14ec529874622311c3ae7a49b0e", "patch": "@@ -29,7 +29,7 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n             Ty::Adt { def_id, .. } => {\n                 match def_id.resolve(ctx.db)? {\n                     Def::Struct(s) => {\n-                        for field in s.fields(ctx.db)? {\n+                        for field in s.fields(ctx.db) {\n                             CompletionItem::new(\n                                 CompletionKind::Reference,\n                                 field.name().to_string(),"}, {"sha": "6388197be8cf673f2564e0c292ed9a2affc97da8", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=9446be29992fe14ec529874622311c3ae7a49b0e", "patch": "@@ -22,7 +22,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) -> C\n             }\n         }\n         hir::Def::Enum(e) => {\n-            e.variants(ctx.db)?\n+            e.variants(ctx.db)\n                 .into_iter()\n                 .for_each(|(variant_name, _variant)| {\n                     CompletionItem::new(CompletionKind::Reference, variant_name.to_string())"}, {"sha": "306dbfd92c280a3439500b0a9de283b1ca83f60e", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9446be29992fe14ec529874622311c3ae7a49b0e/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=9446be29992fe14ec529874622311c3ae7a49b0e", "patch": "@@ -112,15 +112,15 @@ impl NavigationTarget {\n     pub(crate) fn from_def(db: &RootDatabase, def: Def) -> Cancelable<Option<NavigationTarget>> {\n         let res = match def {\n             Def::Struct(s) => {\n-                let (file_id, node) = s.source(db)?;\n+                let (file_id, node) = s.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n             Def::Enum(e) => {\n-                let (file_id, node) = e.source(db)?;\n+                let (file_id, node) = e.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n             Def::EnumVariant(ev) => {\n-                let (file_id, node) = ev.source(db)?;\n+                let (file_id, node) = ev.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n             Def::Function(f) => {"}]}