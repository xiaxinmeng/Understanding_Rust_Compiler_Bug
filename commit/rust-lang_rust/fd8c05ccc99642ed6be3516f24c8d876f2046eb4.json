{"sha": "fd8c05ccc99642ed6be3516f24c8d876f2046eb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkOGMwNWNjYzk5NjQyZWQ2YmUzNTE2ZjI0YzhkODc2ZjIwNDZlYjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-13T03:08:50Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-15T08:09:00Z"}, "message": "Document all of the format! related macros", "tree": {"sha": "7442eca2486c92565fe3b34a45ee524aa515e2c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7442eca2486c92565fe3b34a45ee524aa515e2c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd8c05ccc99642ed6be3516f24c8d876f2046eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8c05ccc99642ed6be3516f24c8d876f2046eb4", "html_url": "https://github.com/rust-lang/rust/commit/fd8c05ccc99642ed6be3516f24c8d876f2046eb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd8c05ccc99642ed6be3516f24c8d876f2046eb4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfe3db810b7991ef1144afaed4156ddc2586efef", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfe3db810b7991ef1144afaed4156ddc2586efef", "html_url": "https://github.com/rust-lang/rust/commit/cfe3db810b7991ef1144afaed4156ddc2586efef"}], "stats": {"total": 83, "additions": 77, "deletions": 6}, "files": [{"sha": "cad9f14bda734bd9164ecd23b5b431544e61bf3c", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 74, "deletions": 2, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fd8c05ccc99642ed6be3516f24c8d876f2046eb4/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8c05ccc99642ed6be3516f24c8d876f2046eb4/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=fd8c05ccc99642ed6be3516f24c8d876f2046eb4", "patch": "@@ -133,7 +133,7 @@ is `?` which is defined for all types by default.\n When implementing a format trait for your own time, you will have to implement a\n method of the signature:\n \n-~~~\n+~~~{.rust}\n fn fmt(value: &T, f: &mut std::fmt::Formatter);\n ~~~\n \n@@ -144,6 +144,78 @@ values of these parameters will be listed in the fields of the `Formatter`\n struct. In order to help with this, the `Formatter` struct also provides some\n helper methods.\n \n+### Related macros\n+\n+There are a number of related macros in the `format!` family. The ones that are\n+currently implemented are:\n+\n+~~~{.rust}\n+format!      // described above\n+write!       // first argument is a &mut rt::io::Writer, the destination\n+writeln!     // same as write but appends a newline\n+print!       // the format string is printed to the standard output\n+println!     // same as print but appends a newline\n+format_args! // described below.\n+~~~\n+\n+\n+#### `write!`\n+\n+This and `writeln` are two macros which are used to emit the format string to a\n+specified stream. This is used to prevent intermediate allocations of format\n+strings and instead directly write the output. Under the hood, this function is\n+actually invoking the `write` function defined in this module. Example usage is:\n+\n+~~~{.rust}\n+use std::rt::io;\n+\n+let mut w = io::mem::MemWriter::new();\n+write!(&mut w as &mut io::Writer, \"Hello {}!\", \"world\");\n+~~~\n+\n+#### `print!`\n+\n+This and `println` emit their output to stdout. Similarly to the `write!` macro,\n+the goal of these macros is to avoid intermediate allocations when printing\n+output. Example usage is:\n+\n+~~~{.rust}\n+print!(\"Hello {}!\", \"world\");\n+println!(\"I have a newline {}\", \"character at the end\");\n+~~~\n+\n+#### `format_args!`\n+This is a curious macro which is used to safely pass around\n+an opaque object describing the format string. This object\n+does not require any heap allocations to create, and it only\n+references information on the stack. Under the hood, all of\n+the related macros are implemented in terms of this. First\n+off, some example usage is:\n+\n+~~~{.rust}\n+use std::fmt;\n+\n+format_args!(fmt::format, \"this returns {}\", \"~str\");\n+format_args!(|args| { fmt::write(my_writer, args) }, \"some {}\", \"args\");\n+format_args!(my_fn, \"format {}\", \"string\");\n+~~~\n+\n+The first argument of the `format_args!` macro is a function (or closure) which\n+takes one argument of type `&fmt::Arguments`. This structure can then be\n+passed to the `write` and `format` functions inside this module in order to\n+process the format string. The goal of this macro is to even further prevent\n+intermediate allocations when dealing formatting strings.\n+\n+For example, a logging library could use the standard formatting syntax, but it\n+would internally pass around this structure until it has been determined where\n+output should go to.\n+\n+It is unsafe to programmatically create an instance of `fmt::Arguments` because\n+the operations performed when executing a format string require the compile-time\n+checks provided by the compiler. The `format_args!` macro is the only method of\n+safely creating these structures, but they can be unsafely created with the\n+constructor provided.\n+\n ## Internationalization\n \n The formatting syntax supported by the `format!` extension supports\n@@ -163,7 +235,7 @@ Furthermore, whenever a case is running, the special character `#` can be used\n to reference the string value of the argument which was selected upon. As an\n example:\n \n-~~~\n+~~~{.rust}\n format!(\"{0, select, other{#}}\", \"hello\") // => ~\"hello\"\n ~~~\n "}, {"sha": "f9552725af345f4f9e45f8c909ded2503ab1f7a2", "filename": "src/test/compile-fail/ifmt-bad-arg.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd8c05ccc99642ed6be3516f24c8d876f2046eb4/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8c05ccc99642ed6be3516f24c8d876f2046eb4/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs?ref=fd8c05ccc99642ed6be3516f24c8d876f2046eb4", "patch": "@@ -72,8 +72,7 @@ fn main() {\n     format!(\"foo } bar\"); //~ ERROR: unmatched `}` found\n     format!(\"foo }\"); //~ ERROR: unmatched `}` found\n \n-    // FIXME(#5794) the spans on these errors are pretty terrible\n-    //format!();\n-    //format!(\"\" 1);\n-    //format!(\"\", 1 1);\n+    format!();          //~ ERROR: requires at least a format string argument\n+    format!(\"\" 1);      //~ ERROR: expected token: `,`\n+    format!(\"\", 1 1);   //~ ERROR: expected token: `,`\n }"}]}