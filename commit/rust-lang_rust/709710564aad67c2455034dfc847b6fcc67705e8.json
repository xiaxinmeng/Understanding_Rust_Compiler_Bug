{"sha": "709710564aad67c2455034dfc847b6fcc67705e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOTcxMDU2NGFhZDY3YzI0NTUwMzRkZmM4NDdiNmZjYzY3NzA1ZTg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-31T00:47:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-31T00:47:46Z"}, "message": "Rollup merge of #81562 - the8472:improve-inplaceiterable-docs, r=sfackler\n\nClarify that InPlaceIterable guarantees extend to all advancing iterator methods.\n\nA documentation update that should answer a question that came up in [this zulip discussion](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Safety.20guarantees.20of.20InPlaceIterable/near/223743336)\n\nCC `@SkiFire13`", "tree": {"sha": "0d3650bd3c4b65d43590ae34a029fdfe85e559b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d3650bd3c4b65d43590ae34a029fdfe85e559b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/709710564aad67c2455034dfc847b6fcc67705e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgFf4yCRBK7hj4Ov3rIwAAdHIIAK7+kzH4x/KqXnOhLm0b0U7d\nV+Dy7z6sOTgIGPyFhHIZtdBus+oVXdnTVjNSQTkPywRf4q0vdckXSV8++UJW4IKT\nTRriCa/ECgTkSnLjNGA8tQ/hPrWufwyaCUoJAHUv/bwDoo/YjLX1kk1v5KayWdNI\nFgVocXraK1/fIFUHdsxkvLHIQVab8nWge79NmZEBrhUbFAfJIzG6rPNwHB3KVtiZ\na5UBSxUHfsJSTMVpYfWFY5MEejcFrGijY2MqFZxGnKZleKw3WQ+qm2Oznh8zp1UM\nijGT1BxhyBVo2PIhiIuMq81DHXzR1CBQVdbaba01I4TTcsgFOUrNRjh7qh1i+ko=\n=3J+w\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d3650bd3c4b65d43590ae34a029fdfe85e559b9\nparent 45d24c729c41a8ec737dbfe0b79c67e943d37e7f\nparent 55d6247f52051e897938e8f65a34c3cc661f5e24\nauthor Jonas Schievink <jonasschievink@gmail.com> 1612054066 +0100\ncommitter GitHub <noreply@github.com> 1612054066 +0100\n\nRollup merge of #81562 - the8472:improve-inplaceiterable-docs, r=sfackler\n\nClarify that InPlaceIterable guarantees extend to all advancing iterator methods.\n\nA documentation update that should answer a question that came up in [this zulip discussion](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Safety.20guarantees.20of.20InPlaceIterable/near/223743336)\n\nCC `@SkiFire13`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/709710564aad67c2455034dfc847b6fcc67705e8", "html_url": "https://github.com/rust-lang/rust/commit/709710564aad67c2455034dfc847b6fcc67705e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/709710564aad67c2455034dfc847b6fcc67705e8/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45d24c729c41a8ec737dbfe0b79c67e943d37e7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/45d24c729c41a8ec737dbfe0b79c67e943d37e7f", "html_url": "https://github.com/rust-lang/rust/commit/45d24c729c41a8ec737dbfe0b79c67e943d37e7f"}, {"sha": "55d6247f52051e897938e8f65a34c3cc661f5e24", "url": "https://api.github.com/repos/rust-lang/rust/commits/55d6247f52051e897938e8f65a34c3cc661f5e24", "html_url": "https://github.com/rust-lang/rust/commit/55d6247f52051e897938e8f65a34c3cc661f5e24"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "c4e21b84863df911e928571c69cd13b0d65e2bf5", "filename": "library/core/src/iter/traits/marker.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/709710564aad67c2455034dfc847b6fcc67705e8/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709710564aad67c2455034dfc847b6fcc67705e8/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs?ref=709710564aad67c2455034dfc847b6fcc67705e8", "patch": "@@ -43,12 +43,14 @@ unsafe impl<I: TrustedLen + ?Sized> TrustedLen for &mut I {}\n /// An iterator that when yielding an item will have taken at least one element\n /// from its underlying [`SourceIter`].\n ///\n-/// Calling [`next()`] guarantees that at least one value of the iterator's underlying source\n-/// has been moved out and the result of the iterator chain could be inserted in its place,\n-/// assuming structural constraints of the source allow such an insertion.\n+/// Calling any method that advances the iterator, e.g.  [`next()`] or [`try_fold()`],\n+/// guarantees that for each step at least one value of the iterator's underlying source\n+/// has been moved out and the result of the iterator chain could be inserted\n+/// in its place, assuming structural constraints of the source allow such an insertion.\n /// In other words this trait indicates that an iterator pipeline can be collected in place.\n ///\n /// [`SourceIter`]: crate::iter::SourceIter\n /// [`next()`]: Iterator::next\n+/// [`try_fold()`]: Iterator::try_fold\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n pub unsafe trait InPlaceIterable: Iterator {}"}]}