{"sha": "0bb1f1bc90ee0f0f92f55823fc2e0c12c6acb680", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYjFmMWJjOTBlZTBmMGY5MmY1NTgyM2ZjMmUwYzEyYzZhY2I2ODA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-15T18:45:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-15T18:45:25Z"}, "message": "internal: add ranges to minicore", "tree": {"sha": "f1aca0344f6da61352d822bba49b92202919abec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1aca0344f6da61352d822bba49b92202919abec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bb1f1bc90ee0f0f92f55823fc2e0c12c6acb680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb1f1bc90ee0f0f92f55823fc2e0c12c6acb680", "html_url": "https://github.com/rust-lang/rust/commit/0bb1f1bc90ee0f0f92f55823fc2e0c12c6acb680", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bb1f1bc90ee0f0f92f55823fc2e0c12c6acb680/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4b52682dad6dbf31fb17beb645e362e359ee119", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b52682dad6dbf31fb17beb645e362e359ee119", "html_url": "https://github.com/rust-lang/rust/commit/f4b52682dad6dbf31fb17beb645e362e359ee119"}], "stats": {"total": 70, "additions": 42, "deletions": 28}, "files": [{"sha": "b63cda9124feb0983bd0b046c78f169751911313", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0bb1f1bc90ee0f0f92f55823fc2e0c12c6acb680/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb1f1bc90ee0f0f92f55823fc2e0c12c6acb680/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=0bb1f1bc90ee0f0f92f55823fc2e0c12c6acb680", "patch": "@@ -113,7 +113,7 @@ fn type_alias_in_struct_lit() {\n fn infer_ranges() {\n     check_types(\n         r#\"\n-//- /main.rs crate:main deps:core\n+//- minicore: range\n fn test() {\n     let a = ..;\n     let b = 1..;\n@@ -125,32 +125,6 @@ fn test() {\n     let t = (a, b, c, d, e, f);\n     t;\n } //^ (RangeFull, RangeFrom<i32>, RangeTo<u32>, Range<usize>, RangeToInclusive<i32>, RangeInclusive<char>)\n-\n-//- /core.rs crate:core\n-#[prelude_import] use prelude::*;\n-mod prelude {}\n-\n-pub mod ops {\n-    pub struct Range<Idx> {\n-        pub start: Idx,\n-        pub end: Idx,\n-    }\n-    pub struct RangeFrom<Idx> {\n-        pub start: Idx,\n-    }\n-    struct RangeFull;\n-    pub struct RangeInclusive<Idx> {\n-        start: Idx,\n-        end: Idx,\n-        is_empty: u8,\n-    }\n-    pub struct RangeTo<Idx> {\n-        pub end: Idx,\n-    }\n-    pub struct RangeToInclusive<Idx> {\n-        pub end: Idx,\n-    }\n-}\n \"#,\n     );\n }"}, {"sha": "f9f14b7dfa879e8b8fba0f42999b2751539d4f45", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0bb1f1bc90ee0f0f92f55823fc2e0c12c6acb680/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb1f1bc90ee0f0f92f55823fc2e0c12c6acb680/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=0bb1f1bc90ee0f0f92f55823fc2e0c12c6acb680", "patch": "@@ -10,6 +10,7 @@\n //! Available flags:\n //!     sized:\n //!     slice:\n+//!     range:\n //!     unsize: sized\n //!     deref: sized\n //!     coerce_unsized: unsize\n@@ -62,13 +63,52 @@ pub mod ops {\n     }\n     pub use self::deref::Deref;\n     // endregion:deref\n+\n+    //region:range\n+    mod range {\n+        #[lang = \"RangeFull\"]\n+        pub struct RangeFull;\n+\n+        #[lang = \"Range\"]\n+        pub struct Range<Idx> {\n+            pub start: Idx,\n+            pub end: Idx,\n+        }\n+\n+        #[lang = \"RangeFrom\"]\n+        pub struct RangeFrom<Idx> {\n+            pub start: Idx,\n+        }\n+\n+        #[lang = \"RangeTo\"]\n+        pub struct RangeTo<Idx> {\n+            pub end: Idx,\n+        }\n+\n+        #[lang = \"RangeInclusive\"]\n+        pub struct RangeInclusive<Idx> {\n+            pub(crate) start: Idx,\n+            pub(crate) end: Idx,\n+            pub(crate) exhausted: bool,\n+        }\n+\n+        #[lang = \"RangeToInclusive\"]\n+        pub struct RangeToInclusive<Idx> {\n+            pub end: Idx,\n+        }\n+    }\n+    pub use self::range::{Range, RangeFrom, RangeFull, RangeTo};\n+    pub use self::range::{RangeInclusive, RangeToInclusive};\n+    //endregion:range\n }\n \n // region:slice\n pub mod slice {\n     #[lang = \"slice\"]\n     impl<T> [T] {\n-        pub fn len(&self) -> usize { loop {} }\n+        pub fn len(&self) -> usize {\n+            loop {}\n+        }\n     }\n }\n // endregion:slice"}]}