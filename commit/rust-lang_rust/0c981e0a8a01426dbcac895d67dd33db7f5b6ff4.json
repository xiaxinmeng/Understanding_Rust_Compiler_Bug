{"sha": "0c981e0a8a01426dbcac895d67dd33db7f5b6ff4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOTgxZTBhOGEwMTQyNmRiY2FjODk1ZDY3ZGQzM2RiN2Y1YjZmZjQ=", "commit": {"author": {"name": "Andrei Homescu", "email": "ah@immunant.com", "date": "2019-07-12T22:32:46Z"}, "committer": {"name": "Andrei Homescu", "email": "ah@immunant.com", "date": "2019-07-15T01:14:15Z"}, "message": "Make VaListImpl<'f> invariant over the 'f lifetime", "tree": {"sha": "54b0be1d57de26d32e273350f8f4c8710c13d864", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54b0be1d57de26d32e273350f8f4c8710c13d864"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c981e0a8a01426dbcac895d67dd33db7f5b6ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c981e0a8a01426dbcac895d67dd33db7f5b6ff4", "html_url": "https://github.com/rust-lang/rust/commit/0c981e0a8a01426dbcac895d67dd33db7f5b6ff4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c981e0a8a01426dbcac895d67dd33db7f5b6ff4/comments", "author": {"login": "ahomescu", "id": 443157, "node_id": "MDQ6VXNlcjQ0MzE1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/443157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahomescu", "html_url": "https://github.com/ahomescu", "followers_url": "https://api.github.com/users/ahomescu/followers", "following_url": "https://api.github.com/users/ahomescu/following{/other_user}", "gists_url": "https://api.github.com/users/ahomescu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahomescu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahomescu/subscriptions", "organizations_url": "https://api.github.com/users/ahomescu/orgs", "repos_url": "https://api.github.com/users/ahomescu/repos", "events_url": "https://api.github.com/users/ahomescu/events{/privacy}", "received_events_url": "https://api.github.com/users/ahomescu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahomescu", "id": 443157, "node_id": "MDQ6VXNlcjQ0MzE1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/443157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahomescu", "html_url": "https://github.com/ahomescu", "followers_url": "https://api.github.com/users/ahomescu/followers", "following_url": "https://api.github.com/users/ahomescu/following{/other_user}", "gists_url": "https://api.github.com/users/ahomescu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahomescu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahomescu/subscriptions", "organizations_url": "https://api.github.com/users/ahomescu/orgs", "repos_url": "https://api.github.com/users/ahomescu/repos", "events_url": "https://api.github.com/users/ahomescu/events{/privacy}", "received_events_url": "https://api.github.com/users/ahomescu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71f9384e3bec467158a628e2d11e77ffada16a90", "url": "https://api.github.com/repos/rust-lang/rust/commits/71f9384e3bec467158a628e2d11e77ffada16a90", "html_url": "https://github.com/rust-lang/rust/commit/71f9384e3bec467158a628e2d11e77ffada16a90"}], "stats": {"total": 173, "additions": 124, "deletions": 49}, "files": [{"sha": "eda0e7c518c58290b6f212c2319dae92ee038948", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c981e0a8a01426dbcac895d67dd33db7f5b6ff4/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c981e0a8a01426dbcac895d67dd33db7f5b6ff4/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=0c981e0a8a01426dbcac895d67dd33db7f5b6ff4", "patch": "@@ -60,7 +60,10 @@ impl fmt::Debug for c_void {\n #[lang = \"va_list\"]\n pub struct VaListImpl<'f> {\n     ptr: *mut c_void,\n-    _marker: PhantomData<&'f c_void>,\n+\n+    // Invariant over `'f`, so each `VaListImpl<'f>` object is tied to\n+    // the region of the function it's defined in\n+    _marker: PhantomData<&'f mut &'f c_void>,\n }\n \n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n@@ -96,7 +99,7 @@ pub struct VaListImpl<'f> {\n     vr_top: *mut c_void,\n     gr_offs: i32,\n     vr_offs: i32,\n-    _marker: PhantomData<&'f c_void>,\n+    _marker: PhantomData<&'f mut &'f c_void>,\n }\n \n /// PowerPC ABI implementation of a `va_list`.\n@@ -114,7 +117,7 @@ pub struct VaListImpl<'f> {\n     reserved: u16,\n     overflow_arg_area: *mut c_void,\n     reg_save_area: *mut c_void,\n-    _marker: PhantomData<&'f c_void>,\n+    _marker: PhantomData<&'f mut &'f c_void>,\n }\n \n /// x86_64 ABI implementation of a `va_list`.\n@@ -131,7 +134,7 @@ pub struct VaListImpl<'f> {\n     fp_offset: i32,\n     overflow_arg_area: *mut c_void,\n     reg_save_area: *mut c_void,\n-    _marker: PhantomData<&'f c_void>,\n+    _marker: PhantomData<&'f mut &'f c_void>,\n }\n \n /// asm.js ABI implementation of a `va_list`.\n@@ -148,7 +151,7 @@ pub struct VaListImpl<'f> {\n #[lang = \"va_list\"]\n pub struct VaListImpl<'f> {\n     inner: [crate::mem::MaybeUninit<i32>; 4],\n-    _marker: PhantomData<&'f c_void>,\n+    _marker: PhantomData<&'f mut &'f c_void>,\n }\n \n #[cfg(all(target_arch = \"asmjs\", not(windows)))]"}, {"sha": "4947d6e529108f82320bd0747f619bbcb5faecf7", "filename": "src/test/ui/c-variadic/variadic-ffi-4.nll.stderr", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0c981e0a8a01426dbcac895d67dd33db7f5b6ff4/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c981e0a8a01426dbcac895d67dd33db7f5b6ff4/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr?ref=0c981e0a8a01426dbcac895d67dd33db7f5b6ff4", "patch": "@@ -23,6 +23,16 @@ LL |     let _ = ap.with_copy(|ap| { ap });\n    |                           | return type of closure is core::ffi::VaList<'2, '_>\n    |                           has type `core::ffi::VaList<'1, '_>`\n \n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:20:5\n+   |\n+LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               |\n+   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n+LL |     *ap0 = ap1;\n+   |     ^^^^ assignment requires that `'1` must outlive `'2`\n+\n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:20:5\n    |\n@@ -34,7 +44,7 @@ LL |     *ap0 = ap1;\n    |     ^^^^ assignment requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:24:5\n+  --> $DIR/variadic-ffi-4.rs:25:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                               ---                   ------- has type `core::ffi::VaListImpl<'2>`\n@@ -44,7 +54,7 @@ LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:24:5\n+  --> $DIR/variadic-ffi-4.rs:25:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                               ---                   ------- has type `core::ffi::VaListImpl<'1>`\n@@ -54,15 +64,15 @@ LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error[E0384]: cannot assign to immutable argument `ap0`\n-  --> $DIR/variadic-ffi-4.rs:24:5\n+  --> $DIR/variadic-ffi-4.rs:25:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                               --- help: make this binding mutable: `mut ap0`\n LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ cannot assign to immutable argument\n \n error[E0597]: `ap1` does not live long enough\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+  --> $DIR/variadic-ffi-4.rs:25:11\n    |\n LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                                    - let's call the lifetime of this reference `'1`\n@@ -76,16 +86,26 @@ LL | }\n    | - `ap1` dropped here while still borrowed\n \n error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:32:5\n+  --> $DIR/variadic-ffi-4.rs:33:12\n+   |\n+LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               |\n+   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n+LL |     *ap0 = ap1.clone();\n+   |            ^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:33:12\n    |\n LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                               -------                   ------- has type `core::ffi::VaListImpl<'1>`\n    |                                               |\n    |                                               has type `&mut core::ffi::VaListImpl<'2>`\n LL |     *ap0 = ap1.clone();\n-   |     ^^^^ assignment requires that `'1` must outlive `'2`\n+   |            ^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 11 previous errors\n \n Some errors have detailed explanations: E0384, E0597, E0621.\n For more information about an error, try `rustc --explain E0384`."}, {"sha": "4a50d352a5b20aca025ecdc48788802fa74d32d6", "filename": "src/test/ui/c-variadic/variadic-ffi-4.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c981e0a8a01426dbcac895d67dd33db7f5b6ff4/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c981e0a8a01426dbcac895d67dd33db7f5b6ff4/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs?ref=0c981e0a8a01426dbcac895d67dd33db7f5b6ff4", "patch": "@@ -18,6 +18,7 @@ pub unsafe extern \"C\" fn no_escape2(_: usize, ap: ...) {\n \n pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n     *ap0 = ap1; //~ ERROR: mismatched types\n+    //~^ ERROR: mismatched types\n }\n \n pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n@@ -29,5 +30,6 @@ pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...\n }\n \n pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-    *ap0 = ap1.clone(); //~ ERROR: cannot infer an appropriate lifetime\n+    *ap0 = ap1.clone(); //~ ERROR: mismatched types\n+    //~^ ERROR: mismatched types\n }"}, {"sha": "7aa510e61130428e9903f669dff0f9da8f31adf0", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 86, "deletions": 36, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/0c981e0a8a01426dbcac895d67dd33db7f5b6ff4/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c981e0a8a01426dbcac895d67dd33db7f5b6ff4/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=0c981e0a8a01426dbcac895d67dd33db7f5b6ff4", "patch": "@@ -52,24 +52,51 @@ note: the anonymous lifetime #3 defined on the function body at 19:1...\n    |\n LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     *ap0 = ap1;\n+LL | |\n LL | | }\n    | |_^\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 19:1\n   --> $DIR/variadic-ffi-4.rs:19:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     *ap0 = ap1;\n+LL | |\n+LL | | }\n+   | |_^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/variadic-ffi-4.rs:20:12\n+   |\n+LL |     *ap0 = ap1;\n+   |            ^^^ lifetime mismatch\n+   |\n+   = note: expected type `core::ffi::VaListImpl<'_>`\n+              found type `core::ffi::VaListImpl<'_>`\n+note: the anonymous lifetime #2 defined on the function body at 19:1...\n+  --> $DIR/variadic-ffi-4.rs:19:1\n+   |\n+LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+LL | |     *ap0 = ap1;\n+LL | |\n+LL | | }\n+   | |_^\n+note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 19:1\n+  --> $DIR/variadic-ffi-4.rs:19:1\n+   |\n+LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+LL | |     *ap0 = ap1;\n+LL | |\n LL | | }\n    | |_^\n \n error[E0490]: a value of type `core::ffi::VaListImpl<'_>` is borrowed for too long\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+  --> $DIR/variadic-ffi-4.rs:25:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^\n    |\n-note: the type is valid for the anonymous lifetime #1 defined on the function body at 23:1\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: the type is valid for the anonymous lifetime #1 defined on the function body at 24:1\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -79,8 +106,8 @@ LL | |\n LL | |\n LL | | }\n    | |_^\n-note: but the borrow lasts for the anonymous lifetime #3 defined on the function body at 23:1\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: but the borrow lasts for the anonymous lifetime #3 defined on the function body at 24:1\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -92,15 +119,15 @@ LL | | }\n    | |_^\n \n error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+  --> $DIR/variadic-ffi-4.rs:25:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `&mut core::ffi::VaListImpl<'_>`\n               found type `&mut core::ffi::VaListImpl<'_>`\n-note: the anonymous lifetime #3 defined on the function body at 23:1...\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: the anonymous lifetime #3 defined on the function body at 24:1...\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -110,8 +137,8 @@ LL | |\n LL | |\n LL | | }\n    | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 23:1\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 24:1\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -123,15 +150,15 @@ LL | | }\n    | |_^\n \n error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+  --> $DIR/variadic-ffi-4.rs:25:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `&mut core::ffi::VaListImpl<'_>`\n               found type `&mut core::ffi::VaListImpl<'_>`\n-note: the anonymous lifetime #2 defined on the function body at 23:1...\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: the anonymous lifetime #2 defined on the function body at 24:1...\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -141,8 +168,8 @@ LL | |\n LL | |\n LL | | }\n    | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 23:1\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 24:1\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -154,13 +181,13 @@ LL | | }\n    | |_^\n \n error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+  --> $DIR/variadic-ffi-4.rs:25:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #3 defined on the function body at 23:1...\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: first, the lifetime cannot outlive the anonymous lifetime #3 defined on the function body at 24:1...\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -171,12 +198,12 @@ LL | |\n LL | | }\n    | |_^\n note: ...so that the type `core::ffi::VaListImpl<'_>` is not borrowed for too long\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+  --> $DIR/variadic-ffi-4.rs:25:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^\n-note: but, the lifetime must be valid for the anonymous lifetime #1 defined on the function body at 23:1...\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: but, the lifetime must be valid for the anonymous lifetime #1 defined on the function body at 24:1...\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -187,39 +214,62 @@ LL | |\n LL | | }\n    | |_^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+  --> $DIR/variadic-ffi-4.rs:25:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^\n \n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/variadic-ffi-4.rs:32:16\n+error[E0308]: mismatched types\n+  --> $DIR/variadic-ffi-4.rs:33:12\n    |\n LL |     *ap0 = ap1.clone();\n-   |                ^^^^^\n+   |            ^^^^^^^^^^^ lifetime mismatch\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #3 defined on the function body at 31:1...\n-  --> $DIR/variadic-ffi-4.rs:31:1\n+   = note: expected type `core::ffi::VaListImpl<'_>`\n+              found type `core::ffi::VaListImpl<'_>`\n+note: the anonymous lifetime #3 defined on the function body at 32:1...\n+  --> $DIR/variadic-ffi-4.rs:32:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     *ap0 = ap1.clone();\n+LL | |\n LL | | }\n    | |_^\n-   = note: ...so that the types are compatible:\n-           expected &core::ffi::VaListImpl<'_>\n-              found &core::ffi::VaListImpl<'_>\n-note: but, the lifetime must be valid for the anonymous lifetime #2 defined on the function body at 31:1...\n-  --> $DIR/variadic-ffi-4.rs:31:1\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 32:1\n+  --> $DIR/variadic-ffi-4.rs:32:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     *ap0 = ap1.clone();\n+LL | |\n+LL | | }\n+   | |_^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/variadic-ffi-4.rs:33:12\n+   |\n+LL |     *ap0 = ap1.clone();\n+   |            ^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `core::ffi::VaListImpl<'_>`\n+              found type `core::ffi::VaListImpl<'_>`\n+note: the anonymous lifetime #2 defined on the function body at 32:1...\n+  --> $DIR/variadic-ffi-4.rs:32:1\n+   |\n+LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+LL | |     *ap0 = ap1.clone();\n+LL | |\n+LL | | }\n+   | |_^\n+note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 32:1\n+  --> $DIR/variadic-ffi-4.rs:32:1\n+   |\n+LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+LL | |     *ap0 = ap1.clone();\n+LL | |\n LL | | }\n    | |_^\n-   = note: ...so that the expression is assignable:\n-           expected core::ffi::VaListImpl<'_>\n-              found core::ffi::VaListImpl<'_>\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 11 previous errors\n \n Some errors have detailed explanations: E0308, E0621.\n For more information about an error, try `rustc --explain E0308`."}]}