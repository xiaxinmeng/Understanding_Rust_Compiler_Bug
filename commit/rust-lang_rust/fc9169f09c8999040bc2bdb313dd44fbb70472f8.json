{"sha": "fc9169f09c8999040bc2bdb313dd44fbb70472f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOTE2OWYwOWM4OTk5MDQwYmMyYmRiMzEzZGQ0NGZiYjcwNDcyZjg=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-01T12:30:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-02T05:56:53Z"}, "message": "Make the tests work, too", "tree": {"sha": "0670644f872b4df144e5da82c716d266eb7fe95d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0670644f872b4df144e5da82c716d266eb7fe95d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc9169f09c8999040bc2bdb313dd44fbb70472f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9169f09c8999040bc2bdb313dd44fbb70472f8", "html_url": "https://github.com/rust-lang/rust/commit/fc9169f09c8999040bc2bdb313dd44fbb70472f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc9169f09c8999040bc2bdb313dd44fbb70472f8/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "html_url": "https://github.com/rust-lang/rust/commit/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "c5e037b276d7770d10d2cce43070ad97fdc946e4", "filename": "src/libcore/str.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc9169f09c8999040bc2bdb313dd44fbb70472f8/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9169f09c8999040bc2bdb313dd44fbb70472f8/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=fc9169f09c8999040bc2bdb313dd44fbb70472f8", "patch": "@@ -841,6 +841,8 @@ Function: index\n \n Returns the index of the first matching byte. Returns -1 if\n no match is found.\n+\n+FIXME: UTF-8\n */\n fn index(s: str, c: u8) -> int {\n     let i: int = 0;\n@@ -853,6 +855,8 @@ Function: rindex\n \n Returns the index of the last matching byte. Returns -1\n if no match is found.\n+\n+FIXME: UTF-8\n */\n fn rindex(s: str, c: u8) -> int {\n     let n: int = byte_len(s) as int;\n@@ -874,6 +878,8 @@ needle - The string to look for\n Returns:\n \n The index of the first occurance of `needle`, or -1 if not found.\n+\n+FIXME: UTF-8?\n */\n fn find(haystack: str, needle: str) -> int {\n     let haystack_len: int = byte_len(haystack) as int;\n@@ -1589,9 +1595,9 @@ mod tests {\n \n     #[test]\n     fn test_unsafe_slice() unsafe {\n-        assert (eq(\"ab\", slice(\"abc\", 0u, 2u)));\n-        assert (eq(\"bc\", slice(\"abc\", 1u, 3u)));\n-        assert (eq(\"\", slice(\"abc\", 1u, 1u)));\n+        assert (eq(\"ab\", unsafe::slice_bytes(\"abc\", 0u, 2u)));\n+        assert (eq(\"bc\", unsafe::slice_bytes(\"abc\", 1u, 3u)));\n+        assert (eq(\"\", unsafe::slice_bytes(\"abc\", 1u, 1u)));\n         fn a_million_letter_a() -> str {\n             let i = 0;\n             let rs = \"\";"}]}