{"sha": "8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYjFhOWU0ZTczMzdkZDE3ODI3ZTAwZjBlMWQyZTEwZjExZGUzMGM=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-18T00:40:22Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-26T21:54:18Z"}, "message": "Added regression test for using generic parameters on modules.", "tree": {"sha": "f8f952c5bf48af13c7613aa3db015f9bc5670f8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8f952c5bf48af13c7613aa3db015f9bc5670f8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "html_url": "https://github.com/rust-lang/rust/commit/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a36f9e6e1eaf0330e499d15ab428350be837657", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a36f9e6e1eaf0330e499d15ab428350be837657", "html_url": "https://github.com/rust-lang/rust/commit/5a36f9e6e1eaf0330e499d15ab428350be837657"}], "stats": {"total": 585, "additions": 306, "deletions": 279}, "files": [{"sha": "f0fbf5b9e3e305b2508175aff83ab96e38755c02", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -420,7 +420,7 @@ pub struct GenericArgs {\n     /// The generic arguments for this path segment.\n     pub args: HirVec<GenericArg>,\n     /// Bindings (equality constraints) on associated types, if present.\n-    /// E.g., `Foo<A=Bar>`.\n+    /// E.g., `Foo<A = Bar>`.\n     pub bindings: HirVec<TypeBinding>,\n     /// Were arguments written in parenthesized form `Fn(T) -> U`?\n     /// This is required mostly for pretty-printing and diagnostics,"}, {"sha": "2679f033772062b4a1dcb2edef7e973e2c555dfb", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -1437,20 +1437,20 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                             if err_for_lt { continue }\n                             err_for_lt = true;\n                             (struct_span_err!(self.tcx().sess, lt.span, E0110,\n-                                              \"lifetime parameters are not allowed on this type\"),\n+                                              \"lifetime arguments are not allowed on this entity\"),\n                              lt.span,\n                              \"lifetime\")\n                         }\n                         hir::GenericArg::Type(ty) => {\n                             if err_for_ty { continue }\n                             err_for_ty = true;\n                             (struct_span_err!(self.tcx().sess, ty.span, E0109,\n-                                              \"type parameters are not allowed on this type\"),\n+                                              \"type arguments are not allowed on this entity\"),\n                              ty.span,\n                              \"type\")\n                         }\n                     };\n-                    span_err.span_label(span, format!(\"{} parameter not allowed\", kind))\n+                    span_err.span_label(span, format!(\"{} argument not allowed\", kind))\n                             .emit();\n                     if err_for_lt && err_for_ty {\n                         break;"}, {"sha": "5910a8b3110d0f3b787c504e6e6e54aa06da83ff", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -1291,7 +1291,7 @@ You tried to give a type parameter to a type which doesn't need it. Erroneous\n code example:\n \n ```compile_fail,E0109\n-type X = u32<i32>; // error: type parameters are not allowed on this type\n+type X = u32<i32>; // error: type arguments are not allowed on this entity\n ```\n \n Please check that you used the correct type and recheck its definition. Perhaps"}, {"sha": "2ae4b756b7c05d70094f6262380107ad6bbe048c", "filename": "src/test/ui/enum-variant-generic-args.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -7,59 +7,59 @@ type AliasFixed = Enum<()>;\n impl<T> Enum<T> {\n     fn ts_variant() {\n         Self::TSVariant::<()>(());\n-        //~^ ERROR type parameters are not allowed on this type [E0109]\n+        //~^ ERROR type arguments are not allowed on this entity [E0109]\n         Self::<()>::TSVariant(());\n-        //~^ ERROR type parameters are not allowed on this type [E0109]\n+        //~^ ERROR type arguments are not allowed on this entity [E0109]\n         Self::<()>::TSVariant::<()>(());\n-        //~^ ERROR type parameters are not allowed on this type [E0109]\n-        //~^^ ERROR type parameters are not allowed on this type [E0109]\n+        //~^ ERROR type arguments are not allowed on this entity [E0109]\n+        //~^^ ERROR type arguments are not allowed on this entity [E0109]\n     }\n \n     fn s_variant() {\n         Self::SVariant::<()>(());\n-        //~^ ERROR type parameters are not allowed on this type [E0109]\n+        //~^ ERROR type arguments are not allowed on this entity [E0109]\n         Self::<()>::SVariant(());\n-        //~^ ERROR type parameters are not allowed on this type [E0109]\n+        //~^ ERROR type arguments are not allowed on this entity [E0109]\n         Self::<()>::SVariant::<()>(());\n-        //~^ ERROR type parameters are not allowed on this type [E0109]\n-        //~^^ ERROR type parameters are not allowed on this type [E0109]\n+        //~^ ERROR type arguments are not allowed on this entity [E0109]\n+        //~^^ ERROR type arguments are not allowed on this entity [E0109]\n     }\n }\n \n fn main() {\n     // Tuple struct variant\n \n     Enum::<()>::TSVariant::<()>(());\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n \n     Alias::TSVariant::<()>(());\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n     Alias::<()>::TSVariant::<()>(());\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n \n     AliasFixed::TSVariant::<()>(());\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n     AliasFixed::<()>::TSVariant(());\n     //~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n     AliasFixed::<()>::TSVariant::<()>(());\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n     //~^^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n \n     // Struct variant\n \n     Enum::<()>::SVariant::<()>(());\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n \n     Alias::SVariant::<()>(());\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n     Alias::<()>::SVariant::<()>(());\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n \n     AliasFixed::SVariant::<()>(());\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n     AliasFixed::<()>::SVariant(());\n     //~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n     AliasFixed::<()>::SVariant::<()>(());\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n     //~^^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n }"}, {"sha": "2d622a49e20aff2461f4c77b811dd5a7d07af904", "filename": "src/test/ui/enum-variant-generic-args.stderr", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-variant-generic-args.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -7,35 +7,35 @@ LL |     Enum::<()>::SVariant::<()>(());\n    |     |           did you mean `TSVariant`?\n    |     did you mean `Enum::SVariant { /* fields */ }`?\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:9:27\n    |\n LL |         Self::TSVariant::<()>(());\n-   |                           ^^ type parameter not allowed\n+   |                           ^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:11:16\n    |\n LL |         Self::<()>::TSVariant(());\n-   |                ^^ type parameter not allowed\n+   |                ^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:13:16\n    |\n LL |         Self::<()>::TSVariant::<()>(());\n-   |                ^^ type parameter not allowed\n+   |                ^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:13:33\n    |\n LL |         Self::<()>::TSVariant::<()>(());\n-   |                                 ^^ type parameter not allowed\n+   |                                 ^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:19:26\n    |\n LL |         Self::SVariant::<()>(());\n-   |                          ^^ type parameter not allowed\n+   |                          ^^ type argument not allowed\n \n error[E0618]: expected function, found enum variant `<Self>::SVariant::<()>`\n   --> $DIR/enum-variant-generic-args.rs:19:9\n@@ -52,11 +52,11 @@ help: `<Self>::SVariant::<()>` is a unit variant, you need to write it without t\n LL |         <Self>::SVariant::<()>;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:21:16\n    |\n LL |         Self::<()>::SVariant(());\n-   |                ^^ type parameter not allowed\n+   |                ^^ type argument not allowed\n \n error[E0618]: expected function, found enum variant `<Self<()>>::SVariant`\n   --> $DIR/enum-variant-generic-args.rs:21:9\n@@ -73,17 +73,17 @@ help: `<Self<()>>::SVariant` is a unit variant, you need to write it without the\n LL |         <Self<()>>::SVariant;\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:23:16\n    |\n LL |         Self::<()>::SVariant::<()>(());\n-   |                ^^ type parameter not allowed\n+   |                ^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:23:32\n    |\n LL |         Self::<()>::SVariant::<()>(());\n-   |                                ^^ type parameter not allowed\n+   |                                ^^ type argument not allowed\n \n error[E0618]: expected function, found enum variant `<Self<()>>::SVariant::<()>`\n   --> $DIR/enum-variant-generic-args.rs:23:9\n@@ -100,29 +100,29 @@ help: `<Self<()>>::SVariant::<()>` is a unit variant, you need to write it witho\n LL |         <Self<()>>::SVariant::<()>;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:32:29\n    |\n LL |     Enum::<()>::TSVariant::<()>(());\n-   |                             ^^ type parameter not allowed\n+   |                             ^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:35:24\n    |\n LL |     Alias::TSVariant::<()>(());\n-   |                        ^^ type parameter not allowed\n+   |                        ^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:37:30\n    |\n LL |     Alias::<()>::TSVariant::<()>(());\n-   |                              ^^ type parameter not allowed\n+   |                              ^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:40:29\n    |\n LL |     AliasFixed::TSVariant::<()>(());\n-   |                             ^^ type parameter not allowed\n+   |                             ^^ type argument not allowed\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/enum-variant-generic-args.rs:42:18\n@@ -136,17 +136,17 @@ error[E0107]: wrong number of type arguments: expected 0, found 1\n LL |     AliasFixed::<()>::TSVariant::<()>(());\n    |                  ^^ unexpected type argument\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:44:35\n    |\n LL |     AliasFixed::<()>::TSVariant::<()>(());\n-   |                                   ^^ type parameter not allowed\n+   |                                   ^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:53:23\n    |\n LL |     Alias::SVariant::<()>(());\n-   |                       ^^ type parameter not allowed\n+   |                       ^^ type argument not allowed\n \n error[E0618]: expected function, found enum variant `<Alias>::SVariant::<()>`\n   --> $DIR/enum-variant-generic-args.rs:53:5\n@@ -163,11 +163,11 @@ help: `<Alias>::SVariant::<()>` is a unit variant, you need to write it without\n LL |     <Alias>::SVariant::<()>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:55:29\n    |\n LL |     Alias::<()>::SVariant::<()>(());\n-   |                             ^^ type parameter not allowed\n+   |                             ^^ type argument not allowed\n \n error[E0618]: expected function, found enum variant `<Alias<()>>::SVariant::<()>`\n   --> $DIR/enum-variant-generic-args.rs:55:5\n@@ -184,11 +184,11 @@ help: `<Alias<()>>::SVariant::<()>` is a unit variant, you need to write it with\n LL |     <Alias<()>>::SVariant::<()>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:58:28\n    |\n LL |     AliasFixed::SVariant::<()>(());\n-   |                            ^^ type parameter not allowed\n+   |                            ^^ type argument not allowed\n \n error[E0618]: expected function, found enum variant `<AliasFixed>::SVariant::<()>`\n   --> $DIR/enum-variant-generic-args.rs:58:5\n@@ -232,11 +232,11 @@ error[E0107]: wrong number of type arguments: expected 0, found 1\n LL |     AliasFixed::<()>::SVariant::<()>(());\n    |                  ^^ unexpected type argument\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/enum-variant-generic-args.rs:62:34\n    |\n LL |     AliasFixed::<()>::SVariant::<()>(());\n-   |                                  ^^ type parameter not allowed\n+   |                                  ^^ type argument not allowed\n \n error[E0618]: expected function, found enum variant `<AliasFixed<()>>::SVariant::<()>`\n   --> $DIR/enum-variant-generic-args.rs:62:5"}, {"sha": "a5508f98085762aceb71e897bebf3b73a5eff537", "filename": "src/test/ui/error-codes/E0109.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -1,8 +1,8 @@\n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/E0109.rs:1:14\n    |\n LL | type X = u32<i32>; //~ ERROR E0109\n-   |              ^^^ type parameter not allowed\n+   |              ^^^ type argument not allowed\n \n error: aborting due to previous error\n "}, {"sha": "be9b4229aeb6018879704a763744e46eec5158d0", "filename": "src/test/ui/error-codes/E0110.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -1,8 +1,16 @@\n-error[E0110]: lifetime parameters are not allowed on this type\n+<<<<<<< HEAD\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/E0110.rs:1:14\n+||||||| merged common ancestors\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/E0110.rs:11:14\n+=======\n+error[E0110]: lifetime arguments are not allowed on this entity\n+  --> $DIR/E0110.rs:11:14\n+>>>>>>> Added regression test for using generic parameters on modules.\n    |\n LL | type X = u32<'static>; //~ ERROR E0110\n-   |              ^^^^^^^ lifetime parameter not allowed\n+   |              ^^^^^^^ lifetime argument not allowed\n \n error: aborting due to previous error\n "}, {"sha": "413a0d9a4943a168e9897a3d887bbd1cc3e9b56e", "filename": "src/test/ui/issues/issue-22706.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fissues%2Fissue-22706.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fissues%2Fissue-22706.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22706.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -1,3 +1,3 @@\n fn is_copy<T: ::std::marker<i32>::Copy>() {}\n-//~^ ERROR type parameters are not allowed on this type [E0109]\n+//~^ ERROR type arguments are not allowed on this entity [E0109]\n fn main() {}"}, {"sha": "a3cf716903d20bb6148d3e6bd46dc6661963dd41", "filename": "src/test/ui/issues/issue-22706.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fissues%2Fissue-22706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fissues%2Fissue-22706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22706.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -1,8 +1,8 @@\n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/issue-22706.rs:1:29\n    |\n LL | fn is_copy<T: ::std::marker<i32>::Copy>() {}\n-   |                             ^^^ type parameter not allowed\n+   |                             ^^^ type argument not allowed\n \n error: aborting due to previous error\n "}, {"sha": "ec809d44e942a82ca57e33a03c12cac7eef928c3", "filename": "src/test/ui/mod-subitem-as-enum-variant.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -0,0 +1,10 @@\n+\n+mod Mod {\n+    pub struct FakeVariant<T>(pub T);\n+}\n+\n+fn main() {\n+    Mod::FakeVariant::<i32>(0);\n+    Mod::<i32>::FakeVariant(0);\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+}"}, {"sha": "d62bad81c3d8dd61b4010ab93e2316376b79d85e", "filename": "src/test/ui/mod-subitem-as-enum-variant.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -0,0 +1,9 @@\n+error[E0109]: type arguments are not allowed on this entity\n+  --> $DIR/mod-subitem-as-enum-variant.rs:8:11\n+   |\n+LL |     Mod::<i32>::FakeVariant(0);\n+   |           ^^^ type argument not allowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "b5df0fb76ca6a8db8e6a03221a34d224c43f9698", "filename": "src/test/ui/prim-with-args.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fprim-with-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fprim-with-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprim-with-args.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -1,27 +1,27 @@\n fn main() {\n \n-let x: isize<isize>; //~ ERROR type parameters are not allowed on this type\n-let x: i8<isize>; //~ ERROR type parameters are not allowed on this type\n-let x: i16<isize>; //~ ERROR type parameters are not allowed on this type\n-let x: i32<isize>; //~ ERROR type parameters are not allowed on this type\n-let x: i64<isize>; //~ ERROR type parameters are not allowed on this type\n-let x: usize<isize>; //~ ERROR type parameters are not allowed on this type\n-let x: u8<isize>; //~ ERROR type parameters are not allowed on this type\n-let x: u16<isize>; //~ ERROR type parameters are not allowed on this type\n-let x: u32<isize>; //~ ERROR type parameters are not allowed on this type\n-let x: u64<isize>; //~ ERROR type parameters are not allowed on this type\n-let x: char<isize>; //~ ERROR type parameters are not allowed on this type\n+let x: isize<isize>; //~ ERROR type arguments are not allowed on this entity\n+let x: i8<isize>; //~ ERROR type arguments are not allowed on this entity\n+let x: i16<isize>; //~ ERROR type arguments are not allowed on this entity\n+let x: i32<isize>; //~ ERROR type arguments are not allowed on this entity\n+let x: i64<isize>; //~ ERROR type arguments are not allowed on this entity\n+let x: usize<isize>; //~ ERROR type arguments are not allowed on this entity\n+let x: u8<isize>; //~ ERROR type arguments are not allowed on this entity\n+let x: u16<isize>; //~ ERROR type arguments are not allowed on this entity\n+let x: u32<isize>; //~ ERROR type arguments are not allowed on this entity\n+let x: u64<isize>; //~ ERROR type arguments are not allowed on this entity\n+let x: char<isize>; //~ ERROR type arguments are not allowed on this entity\n \n-let x: isize<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-let x: i8<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-let x: i16<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-let x: i32<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-let x: i64<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-let x: usize<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-let x: u8<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-let x: u16<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-let x: u32<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-let x: u64<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-let x: char<'static>; //~ ERROR lifetime parameters are not allowed on this type\n+let x: isize<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+let x: i8<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+let x: i16<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+let x: i32<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+let x: i64<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+let x: usize<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+let x: u8<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+let x: u16<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+let x: u32<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+let x: u64<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+let x: char<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n \n }"}, {"sha": "91259e87efc0228a90ed8e2a00cf0f6de77add8c", "filename": "src/test/ui/prim-with-args.stderr", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fprim-with-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fprim-with-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprim-with-args.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -1,134 +1,134 @@\n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:3:14\n    |\n-LL | let x: isize<isize>; //~ ERROR type parameters are not allowed on this type\n-   |              ^^^^^ type parameter not allowed\n+LL | let x: isize<isize>; //~ ERROR type arguments are not allowed on this entity\n+   |              ^^^^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:4:11\n    |\n-LL | let x: i8<isize>; //~ ERROR type parameters are not allowed on this type\n-   |           ^^^^^ type parameter not allowed\n+LL | let x: i8<isize>; //~ ERROR type arguments are not allowed on this entity\n+   |           ^^^^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:5:12\n    |\n-LL | let x: i16<isize>; //~ ERROR type parameters are not allowed on this type\n-   |            ^^^^^ type parameter not allowed\n+LL | let x: i16<isize>; //~ ERROR type arguments are not allowed on this entity\n+   |            ^^^^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:6:12\n    |\n-LL | let x: i32<isize>; //~ ERROR type parameters are not allowed on this type\n-   |            ^^^^^ type parameter not allowed\n+LL | let x: i32<isize>; //~ ERROR type arguments are not allowed on this entity\n+   |            ^^^^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:7:12\n    |\n-LL | let x: i64<isize>; //~ ERROR type parameters are not allowed on this type\n-   |            ^^^^^ type parameter not allowed\n+LL | let x: i64<isize>; //~ ERROR type arguments are not allowed on this entity\n+   |            ^^^^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:8:14\n    |\n-LL | let x: usize<isize>; //~ ERROR type parameters are not allowed on this type\n-   |              ^^^^^ type parameter not allowed\n+LL | let x: usize<isize>; //~ ERROR type arguments are not allowed on this entity\n+   |              ^^^^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:9:11\n    |\n-LL | let x: u8<isize>; //~ ERROR type parameters are not allowed on this type\n-   |           ^^^^^ type parameter not allowed\n+LL | let x: u8<isize>; //~ ERROR type arguments are not allowed on this entity\n+   |           ^^^^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:10:12\n    |\n-LL | let x: u16<isize>; //~ ERROR type parameters are not allowed on this type\n-   |            ^^^^^ type parameter not allowed\n+LL | let x: u16<isize>; //~ ERROR type arguments are not allowed on this entity\n+   |            ^^^^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:11:12\n    |\n-LL | let x: u32<isize>; //~ ERROR type parameters are not allowed on this type\n-   |            ^^^^^ type parameter not allowed\n+LL | let x: u32<isize>; //~ ERROR type arguments are not allowed on this entity\n+   |            ^^^^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:12:12\n    |\n-LL | let x: u64<isize>; //~ ERROR type parameters are not allowed on this type\n-   |            ^^^^^ type parameter not allowed\n+LL | let x: u64<isize>; //~ ERROR type arguments are not allowed on this entity\n+   |            ^^^^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:13:13\n    |\n-LL | let x: char<isize>; //~ ERROR type parameters are not allowed on this type\n-   |             ^^^^^ type parameter not allowed\n+LL | let x: char<isize>; //~ ERROR type arguments are not allowed on this entity\n+   |             ^^^^^ type argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:15:14\n    |\n-LL | let x: isize<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-   |              ^^^^^^^ lifetime parameter not allowed\n+LL | let x: isize<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+   |              ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:16:11\n    |\n-LL | let x: i8<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-   |           ^^^^^^^ lifetime parameter not allowed\n+LL | let x: i8<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+   |           ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:17:12\n    |\n-LL | let x: i16<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-   |            ^^^^^^^ lifetime parameter not allowed\n+LL | let x: i16<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+   |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:18:12\n    |\n-LL | let x: i32<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-   |            ^^^^^^^ lifetime parameter not allowed\n+LL | let x: i32<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+   |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:19:12\n    |\n-LL | let x: i64<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-   |            ^^^^^^^ lifetime parameter not allowed\n+LL | let x: i64<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+   |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:20:14\n    |\n-LL | let x: usize<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-   |              ^^^^^^^ lifetime parameter not allowed\n+LL | let x: usize<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+   |              ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:21:11\n    |\n-LL | let x: u8<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-   |           ^^^^^^^ lifetime parameter not allowed\n+LL | let x: u8<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+   |           ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:22:12\n    |\n-LL | let x: u16<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-   |            ^^^^^^^ lifetime parameter not allowed\n+LL | let x: u16<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+   |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:23:12\n    |\n-LL | let x: u32<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-   |            ^^^^^^^ lifetime parameter not allowed\n+LL | let x: u32<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+   |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:24:12\n    |\n-LL | let x: u64<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-   |            ^^^^^^^ lifetime parameter not allowed\n+LL | let x: u64<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+   |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/prim-with-args.rs:25:13\n    |\n-LL | let x: char<'static>; //~ ERROR lifetime parameters are not allowed on this type\n-   |             ^^^^^^^ lifetime parameter not allowed\n+LL | let x: char<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+   |             ^^^^^^^ lifetime argument not allowed\n \n error: aborting due to 22 previous errors\n "}, {"sha": "8412983fda54901b3b429fd440634d464f12c9c9", "filename": "src/test/ui/qualified/qualified-path-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -16,7 +16,7 @@ impl S {\n }\n \n type A = <S as Tr>::A::f<u8>;\n-//~^ ERROR type parameters are not allowed on this type\n+//~^ ERROR type arguments are not allowed on this entity\n //~| ERROR ambiguous associated type\n \n fn main() {}"}, {"sha": "4e073841b9740cf32cc5962ed0bfe248b92f1451", "filename": "src/test/ui/qualified/qualified-path-params-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -1,8 +1,8 @@\n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/qualified-path-params-2.rs:18:26\n    |\n LL | type A = <S as Tr>::A::f<u8>;\n-   |                          ^^ type parameter not allowed\n+   |                          ^^ type argument not allowed\n \n error[E0223]: ambiguous associated type\n   --> $DIR/qualified-path-params-2.rs:18:10"}, {"sha": "5414bb4a6d20efc91092a132076649d05d8839b6", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -2,7 +2,7 @@\n //~^ WARNING the feature `generic_associated_types` is incomplete\n #![feature(associated_type_defaults)]\n \n-// FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime arguments are not allowed on this entity\" errors will be addressed in a\n // follow-up PR.\n \n // A Collection trait and collection families. Based on\n@@ -15,14 +15,14 @@ trait Collection<T> {\n     // Test associated type defaults with parameters\n     type Sibling<U>: Collection<U> =\n         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n \n     fn empty() -> Self;\n \n     fn add(&mut self, value: T);\n \n     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n }\n \n trait CollectionFamily {\n@@ -48,13 +48,13 @@ impl<T> Collection<T> for Vec<T> {\n     }\n \n     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n         self.iter()\n     }\n }\n \n fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n-//~^ ERROR type parameters are not allowed on this type [E0109]\n+//~^ ERROR type arguments are not allowed on this entity [E0109]\n where\n     C: Collection<i32>,\n {\n@@ -66,7 +66,7 @@ where\n }\n \n fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n-//~^ ERROR type parameters are not allowed on this type [E0109]\n+//~^ ERROR type arguments are not allowed on this entity [E0109]\n where\n     C: Collection<i32>,\n {"}, {"sha": "b3fb81b418e8cca80cadaf25783311ad94737bcd", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -4,35 +4,35 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/collections.rs:56:90\n    |\n LL | fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n-   |                                                                                          ^^^ type parameter not allowed\n+   |                                                                                          ^^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/collections.rs:68:69\n    |\n LL | fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n-   |                                                                     ^^^ type parameter not allowed\n+   |                                                                     ^^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/collections.rs:17:71\n    |\n LL |         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n-   |                                                                       ^ type parameter not allowed\n+   |                                                                       ^ type argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/collections.rs:24:50\n    |\n LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n-   |                                                  ^^^^^ lifetime parameter not allowed\n+   |                                                  ^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/collections.rs:50:50\n    |\n LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n-   |                                                  ^^^^^ lifetime parameter not allowed\n+   |                                                  ^^^^^ lifetime argument not allowed\n \n error: aborting due to 5 previous errors\n "}, {"sha": "d9c482e23e47c24d16d07c1c801c79eed61ffafd", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -3,7 +3,7 @@\n \n use std::ops::Deref;\n \n-// FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime arguments are not allowed on this entity\" errors will be addressed in a\n // follow-up PR.\n \n trait Foo {\n@@ -15,15 +15,15 @@ trait Baz {\n \n     // This weird type tests that we can use universal function call syntax to access the Item on\n     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n-    //~| ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~| ERROR lifetime arguments are not allowed on this entity [E0110]\n }\n \n impl<T> Baz for T where T: Foo {\n     type Quux<'a> = T;\n \n     type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n }\n \n fn main() {}"}, {"sha": "fd6116d2da23a249cefe7079afc69af3569b181b", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -4,23 +4,23 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/construct_with_other_type.rs:17:46\n    |\n LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n-   |                                              ^^ lifetime parameter not allowed\n+   |                                              ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/construct_with_other_type.rs:17:63\n    |\n LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n-   |                                                               ^^ lifetime parameter not allowed\n+   |                                                               ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/construct_with_other_type.rs:25:40\n    |\n LL |     type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n-   |                                        ^^ lifetime parameter not allowed\n+   |                                        ^^ lifetime argument not allowed\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2e6d7470b49a2be64907b75a69a43718835b273f", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -3,20 +3,20 @@\n \n use std::ops::Deref;\n \n-// FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime arguments are not allowed on this entity\" errors will be addressed in a\n // follow-up PR.\n \n trait Iterable {\n     type Item<'a>;\n     type Iter<'a>: Iterator<Item = Self::Item<'a>>\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n         + Deref<Target = Self::Item<'b>>;\n     //~^ ERROR undeclared lifetime\n-    //~| ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~| ERROR lifetime arguments are not allowed on this entity [E0110]\n \n     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n     //~^ ERROR undeclared lifetime\n-    //~| ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~| ERROR lifetime arguments are not allowed on this entity [E0110]\n }\n \n fn main() {}"}, {"sha": "3cebab6389557db0e6828df279995fd2a89485e3", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -16,23 +16,23 @@ error[E0261]: use of undeclared lifetime name `'undeclared`\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n    |                                         ^^^^^^^^^^^ undeclared lifetime\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:11:47\n    |\n LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>\n-   |                                               ^^ lifetime parameter not allowed\n+   |                                               ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:13:37\n    |\n LL |         + Deref<Target = Self::Item<'b>>;\n-   |                                     ^^ lifetime parameter not allowed\n+   |                                     ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:17:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n-   |                                         ^^^^^^^^^^^ lifetime parameter not allowed\n+   |                                         ^^^^^^^^^^^ lifetime argument not allowed\n \n error: aborting due to 5 previous errors\n "}, {"sha": "69258506651c4fb29d3354e82153cfe1e62419dc", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -3,16 +3,16 @@\n \n use std::ops::Deref;\n \n-// FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime arguments are not allowed on this entity\" errors will be addressed in a\n // follow-up PR.\n \n trait Iterable {\n     type Item<'a>;\n     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n }\n \n // Impl for struct type\n@@ -21,7 +21,7 @@ impl<T> Iterable for Vec<T> {\n     type Iter<'a> = std::slice::Iter<'a, T>;\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n         self.iter()\n     }\n }\n@@ -32,18 +32,18 @@ impl<T> Iterable for [T] {\n     type Iter<'a> = std::slice::Iter<'a, T>;\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n         self.iter()\n     }\n }\n \n fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n     it.iter()\n }\n \n fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n     it.iter().next()\n }\n "}, {"sha": "cc3ade6f39d906f1713925427fd77baf4ea590fe", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -4,41 +4,41 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/iterable.rs:11:47\n    |\n LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n-   |                                               ^^ lifetime parameter not allowed\n+   |                                               ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/iterable.rs:40:53\n    |\n LL | fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n-   |                                                     ^^ lifetime parameter not allowed\n+   |                                                     ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/iterable.rs:45:60\n    |\n LL | fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n-   |                                                            ^^ lifetime parameter not allowed\n+   |                                                            ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/iterable.rs:14:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n-   |                                         ^^ lifetime parameter not allowed\n+   |                                         ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/iterable.rs:23:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-   |                                         ^^ lifetime parameter not allowed\n+   |                                         ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/iterable.rs:34:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-   |                                         ^^ lifetime parameter not allowed\n+   |                                         ^^ lifetime argument not allowed\n \n error: aborting due to 6 previous errors\n "}, {"sha": "851e331a0e965a953f8680dbe479c7307d07d3a9", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -2,7 +2,7 @@\n //~^ WARNING the feature `generic_associated_types` is incomplete\n #![feature(associated_type_defaults)]\n \n-// FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime arguments are not allowed on this entity\" errors will be addressed in a\n // follow-up PR.\n \n // FIXME(#44265): Update expected errors once E110 is resolved, now does not get past `trait Foo`.\n@@ -15,13 +15,13 @@ trait Foo {\n     type E<'a, T>;\n     // Test parameters in default values\n     type FOk<T> = Self::E<'static, T>;\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n-    //~| ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~| ERROR lifetime arguments are not allowed on this entity [E0110]\n     type FErr1 = Self::E<'static, 'static>; // Error\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n     type FErr2<T> = Self::E<'static, T, u32>; // Error\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n-    //~| ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~| ERROR lifetime arguments are not allowed on this entity [E0110]\n }\n \n struct Fooy;"}, {"sha": "265b0fab77061f3cf6d28635cc79e5befc1083b9", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -4,35 +4,35 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/parameter_number_and_kind.rs:17:27\n    |\n LL |     type FOk<T> = Self::E<'static, T>;\n-   |                           ^^^^^^^ lifetime parameter not allowed\n+   |                           ^^^^^^^ lifetime argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/parameter_number_and_kind.rs:17:36\n    |\n LL |     type FOk<T> = Self::E<'static, T>;\n-   |                                    ^ type parameter not allowed\n+   |                                    ^ type argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/parameter_number_and_kind.rs:20:26\n    |\n LL |     type FErr1 = Self::E<'static, 'static>; // Error\n-   |                          ^^^^^^^ lifetime parameter not allowed\n+   |                          ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/parameter_number_and_kind.rs:22:29\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n-   |                             ^^^^^^^ lifetime parameter not allowed\n+   |                             ^^^^^^^ lifetime argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/parameter_number_and_kind.rs:22:38\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n-   |                                      ^ type parameter not allowed\n+   |                                      ^ type argument not allowed\n \n error: aborting due to 5 previous errors\n "}, {"sha": "2d188aed427788dc0810f32b4bf217bc4e98abdc", "filename": "src/test/ui/rfc1598-generic-associated-types/pointer_family.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -1,7 +1,7 @@\n #![feature(generic_associated_types)]\n //~^ WARNING the feature `generic_associated_types` is incomplete\n \n-// FIXME(#44265): \"type parameter not allowed\" errors will be addressed in a follow-up PR.\n+// FIXME(#44265): \"type argument not allowed\" errors will be addressed in a follow-up PR.\n \n use std::rc::Rc;\n use std::sync::Arc;\n@@ -10,15 +10,15 @@ use std::ops::Deref;\n trait PointerFamily {\n     type Pointer<T>: Deref<Target = T>;\n     fn new<T>(value: T) -> Self::Pointer<T>;\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n }\n \n struct ArcFamily;\n \n impl PointerFamily for ArcFamily {\n     type Pointer<T> = Arc<T>;\n     fn new<T>(value: T) -> Self::Pointer<T> {\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n         Arc::new(value)\n     }\n }\n@@ -28,14 +28,14 @@ struct RcFamily;\n impl PointerFamily for RcFamily {\n     type Pointer<T> = Rc<T>;\n     fn new<T>(value: T) -> Self::Pointer<T> {\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n         Rc::new(value)\n     }\n }\n \n struct Foo<P: PointerFamily> {\n     bar: P::Pointer<String>,\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on this entity [E0109]\n }\n \n fn main() {}"}, {"sha": "2b9eed2a688a2b1ecfecaa3f2bedf9cadf11be0e", "filename": "src/test/ui/rfc1598-generic-associated-types/pointer_family.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -4,29 +4,29 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/pointer_family.rs:37:21\n    |\n LL |     bar: P::Pointer<String>,\n-   |                     ^^^^^^ type parameter not allowed\n+   |                     ^^^^^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/pointer_family.rs:12:42\n    |\n LL |     fn new<T>(value: T) -> Self::Pointer<T>;\n-   |                                          ^ type parameter not allowed\n+   |                                          ^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/pointer_family.rs:20:42\n    |\n LL |     fn new<T>(value: T) -> Self::Pointer<T> {\n-   |                                          ^ type parameter not allowed\n+   |                                          ^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/pointer_family.rs:30:42\n    |\n LL |     fn new<T>(value: T) -> Self::Pointer<T> {\n-   |                                          ^ type parameter not allowed\n+   |                                          ^ type argument not allowed\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1ef154447903b2472d37e4f8fca335ed3c2e2ab3", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -1,7 +1,7 @@\n #![feature(generic_associated_types)]\n //~^ WARNING the feature `generic_associated_types` is incomplete\n \n-// FIXME(#44265): \"lifetime parameter not allowed on this type\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime argument not allowed on this type\" errors will be addressed in a\n // follow-up PR\n \n use std::fmt::Display;\n@@ -10,21 +10,21 @@ trait StreamingIterator {\n     type Item<'a>;\n     // Applying the lifetime parameter `'a` to `Self::Item` inside the trait.\n     fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n }\n \n struct Foo<T: StreamingIterator> {\n     // Applying a concrete lifetime to the constructor outside the trait.\n     bar: <T as StreamingIterator>::Item<'static>,\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n }\n \n // Users can bound parameters by the type constructed by that trait's associated type constructor\n // of a trait using HRTB. Both type equality bounds and trait bounds of this kind are valid:\n //FIXME(sunjay): This next line should parse and be valid\n //fn foo<T: for<'a> StreamingIterator<Item<'a>=&'a [i32]>>(iter: T) { /* ... */ }\n fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n-//~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+//~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n \n // Full example of enumerate iterator\n \n@@ -36,9 +36,9 @@ struct StreamEnumerate<I> {\n \n impl<I: StreamingIterator> StreamingIterator for StreamEnumerate<I> {\n     type Item<'a> = (usize, I::Item<'a>);\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n     fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n-        //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+        //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n         match self.iter.next() {\n             None => None,\n             Some(val) => {"}, {"sha": "5afbba5d2d7446d663824ce2f076fc5d2a726068", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -4,35 +4,35 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/streaming_iterator.rs:18:41\n    |\n LL |     bar: <T as StreamingIterator>::Item<'static>,\n-   |                                         ^^^^^^^ lifetime parameter not allowed\n+   |                                         ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/streaming_iterator.rs:26:64\n    |\n LL | fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n-   |                                                                ^^ lifetime parameter not allowed\n+   |                                                                ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/streaming_iterator.rs:12:48\n    |\n LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n-   |                                                ^^ lifetime parameter not allowed\n+   |                                                ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/streaming_iterator.rs:38:37\n    |\n LL |     type Item<'a> = (usize, I::Item<'a>);\n-   |                                     ^^ lifetime parameter not allowed\n+   |                                     ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n+error[E0110]: lifetime arguments are not allowed on this entity\n   --> $DIR/streaming_iterator.rs:40:48\n    |\n LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n-   |                                                ^^ lifetime parameter not allowed\n+   |                                                ^^ lifetime argument not allowed\n \n error: aborting due to 5 previous errors\n "}, {"sha": "7c770852d22d25fcc472fa3ff22b4e475997599e", "filename": "src/test/ui/structs/struct-path-associated-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -13,7 +13,7 @@ fn f<T: Tr>() {\n     //~^ ERROR expected struct, variant or union type, found associated type\n     let z = T::A::<u8> {};\n     //~^ ERROR expected struct, variant or union type, found associated type\n-    //~| ERROR type parameters are not allowed on this type\n+    //~| ERROR type arguments are not allowed on this entity\n     match S {\n         T::A {} => {}\n         //~^ ERROR expected struct, variant or union type, found associated type\n@@ -22,7 +22,7 @@ fn f<T: Tr>() {\n \n fn g<T: Tr<A = S>>() {\n     let s = T::A {}; // OK\n-    let z = T::A::<u8> {}; //~ ERROR type parameters are not allowed on this type\n+    let z = T::A::<u8> {}; //~ ERROR type arguments are not allowed on this entity\n     match S {\n         T::A {} => {} // OK\n     }\n@@ -31,7 +31,7 @@ fn g<T: Tr<A = S>>() {\n fn main() {\n     let s = S::A {}; //~ ERROR ambiguous associated type\n     let z = S::A::<u8> {}; //~ ERROR ambiguous associated type\n-    //~^ ERROR type parameters are not allowed on this type\n+    //~^ ERROR type arguments are not allowed on this entity\n     match S {\n         S::A {} => {} //~ ERROR ambiguous associated type\n     }"}, {"sha": "80824d98478386b333c39ce1c6c29b41d1e0faa6", "filename": "src/test/ui/structs/struct-path-associated-type.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -4,11 +4,11 @@ error[E0071]: expected struct, variant or union type, found associated type\n LL |     let s = T::A {};\n    |             ^^^^ not a struct\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/struct-path-associated-type.rs:14:20\n    |\n LL |     let z = T::A::<u8> {};\n-   |                    ^^ type parameter not allowed\n+   |                    ^^ type argument not allowed\n \n error[E0071]: expected struct, variant or union type, found associated type\n   --> $DIR/struct-path-associated-type.rs:14:13\n@@ -22,23 +22,23 @@ error[E0071]: expected struct, variant or union type, found associated type\n LL |         T::A {} => {}\n    |         ^^^^ not a struct\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/struct-path-associated-type.rs:25:20\n    |\n-LL |     let z = T::A::<u8> {}; //~ ERROR type parameters are not allowed on this type\n-   |                    ^^ type parameter not allowed\n+LL |     let z = T::A::<u8> {}; //~ ERROR type arguments are not allowed on this entity\n+   |                    ^^ type argument not allowed\n \n error[E0223]: ambiguous associated type\n   --> $DIR/struct-path-associated-type.rs:32:13\n    |\n LL |     let s = S::A {}; //~ ERROR ambiguous associated type\n    |             ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/struct-path-associated-type.rs:33:20\n    |\n LL |     let z = S::A::<u8> {}; //~ ERROR ambiguous associated type\n-   |                    ^^ type parameter not allowed\n+   |                    ^^ type argument not allowed\n \n error[E0223]: ambiguous associated type\n   --> $DIR/struct-path-associated-type.rs:33:13"}, {"sha": "51ed9e5457eb763cd3e4e22ddd62eba3408cfaa7", "filename": "src/test/ui/structs/struct-path-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -6,7 +6,7 @@ trait Tr {\n         //~^ ERROR expected struct, variant or union type, found Self\n         let z = Self::<u8> {};\n         //~^ ERROR expected struct, variant or union type, found Self\n-        //~| ERROR type parameters are not allowed on this type\n+        //~| ERROR type arguments are not allowed on this entity\n         match s {\n             Self { .. } => {}\n             //~^ ERROR expected struct, variant or union type, found Self\n@@ -17,7 +17,7 @@ trait Tr {\n impl Tr for S {\n     fn f() {\n         let s = Self {}; // OK\n-        let z = Self::<u8> {}; //~ ERROR type parameters are not allowed on this type\n+        let z = Self::<u8> {}; //~ ERROR type arguments are not allowed on this entity\n         match s {\n             Self { .. } => {} // OK\n         }\n@@ -27,7 +27,7 @@ impl Tr for S {\n impl S {\n     fn g() {\n         let s = Self {}; // OK\n-        let z = Self::<u8> {}; //~ ERROR type parameters are not allowed on this type\n+        let z = Self::<u8> {}; //~ ERROR type arguments are not allowed on this entity\n         match s {\n             Self { .. } => {} // OK\n         }"}, {"sha": "cda6b7a533f65e2ad204cb81587f48c9107b6bbd", "filename": "src/test/ui/structs/struct-path-self.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -4,11 +4,11 @@ error[E0071]: expected struct, variant or union type, found Self\n LL |         let s = Self {};\n    |                 ^^^^ not a struct\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/struct-path-self.rs:7:24\n    |\n LL |         let z = Self::<u8> {};\n-   |                        ^^ type parameter not allowed\n+   |                        ^^ type argument not allowed\n \n error[E0071]: expected struct, variant or union type, found Self\n   --> $DIR/struct-path-self.rs:7:17\n@@ -22,17 +22,17 @@ error[E0071]: expected struct, variant or union type, found Self\n LL |             Self { .. } => {}\n    |             ^^^^ not a struct\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/struct-path-self.rs:20:24\n    |\n-LL |         let z = Self::<u8> {}; //~ ERROR type parameters are not allowed on this type\n-   |                        ^^ type parameter not allowed\n+LL |         let z = Self::<u8> {}; //~ ERROR type arguments are not allowed on this entity\n+   |                        ^^ type argument not allowed\n \n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/struct-path-self.rs:30:24\n    |\n-LL |         let z = Self::<u8> {}; //~ ERROR type parameters are not allowed on this type\n-   |                        ^^ type parameter not allowed\n+LL |         let z = Self::<u8> {}; //~ ERROR type arguments are not allowed on this entity\n+   |                        ^^ type argument not allowed\n \n error: aborting due to 6 previous errors\n "}, {"sha": "3ec200d57c55dc4766968af9b75226006736fe9b", "filename": "src/test/ui/type-alias-enum-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Ftype-alias-enum-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Ftype-alias-enum-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants.rs?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let _ = Option::None::<u8>; // OK (Lint in future!)\n     let _ = Alias::<u8>::None; // OK\n     let _ = Alias::None::<u8>; // Error\n-    //~^ type parameters are not allowed on this type\n+    //~^ type arguments are not allowed on this entity\n }"}, {"sha": "cf81f5b27ac6b3d89d0eebf075f3533579a3cff7", "filename": "src/test/ui/type-alias-enum-variants.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Ftype-alias-enum-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c/src%2Ftest%2Fui%2Ftype-alias-enum-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants.stderr?ref=8eb1a9e4e7337dd17827e00f0e1d2e10f11de30c", "patch": "@@ -1,8 +1,8 @@\n-error[E0109]: type parameters are not allowed on this type\n+error[E0109]: type arguments are not allowed on this entity\n   --> $DIR/type-alias-enum-variants.rs:9:27\n    |\n LL |     let _ = Alias::None::<u8>; // Error\n-   |                           ^^ type parameter not allowed\n+   |                           ^^ type argument not allowed\n \n error: aborting due to previous error\n "}]}