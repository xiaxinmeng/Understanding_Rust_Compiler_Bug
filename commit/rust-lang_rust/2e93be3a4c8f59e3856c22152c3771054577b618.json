{"sha": "2e93be3a4c8f59e3856c22152c3771054577b618", "node_id": "C_kwDOAAsO6NoAKDJlOTNiZTNhNGM4ZjU5ZTM4NTZjMjIxNTJjMzc3MTA1NDU3N2I2MTg", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-05T17:24:02Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-05T17:24:02Z"}, "message": "Add create_wrapper_function helper", "tree": {"sha": "551919fac5d5708c40a2c8aac9a1be82fe4118a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/551919fac5d5708c40a2c8aac9a1be82fe4118a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e93be3a4c8f59e3856c22152c3771054577b618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e93be3a4c8f59e3856c22152c3771054577b618", "html_url": "https://github.com/rust-lang/rust/commit/2e93be3a4c8f59e3856c22152c3771054577b618", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e93be3a4c8f59e3856c22152c3771054577b618/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "044a3a65a00e568b66e4bcdf7ee7393105aff6dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/044a3a65a00e568b66e4bcdf7ee7393105aff6dd", "html_url": "https://github.com/rust-lang/rust/commit/044a3a65a00e568b66e4bcdf7ee7393105aff6dd"}], "stats": {"total": 113, "additions": 52, "deletions": 61}, "files": [{"sha": "1c73957ca571c0af73a40ddc6ff7bf17c63ebb37", "filename": "src/allocator.rs", "status": "modified", "additions": 14, "deletions": 61, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/2e93be3a4c8f59e3856c22152c3771054577b618/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e93be3a4c8f59e3856c22152c3771054577b618/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=2e93be3a4c8f59e3856c22152c3771054577b618", "patch": "@@ -70,74 +70,27 @@ fn codegen_inner(\n             params: arg_tys.iter().cloned().map(AbiParam::new).collect(),\n             returns: output.into_iter().map(AbiParam::new).collect(),\n         };\n-\n-        let caller_name = format!(\"__rust_{}\", method.name);\n-        let callee_name = kind.fn_name(method.name);\n-\n-        let func_id = module.declare_function(&caller_name, Linkage::Export, &sig).unwrap();\n-\n-        let callee_func_id = module.declare_function(&callee_name, Linkage::Import, &sig).unwrap();\n-\n-        let mut ctx = Context::new();\n-        ctx.func.signature = sig.clone();\n-        {\n-            let mut func_ctx = FunctionBuilderContext::new();\n-            let mut bcx = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n-\n-            let block = bcx.create_block();\n-            bcx.switch_to_block(block);\n-            let args = arg_tys\n-                .into_iter()\n-                .map(|ty| bcx.append_block_param(block, ty))\n-                .collect::<Vec<Value>>();\n-\n-            let callee_func_ref = module.declare_func_in_func(callee_func_id, &mut bcx.func);\n-            let call_inst = bcx.ins().call(callee_func_ref, &args);\n-            let results = bcx.inst_results(call_inst).to_vec(); // Clone to prevent borrow error\n-\n-            bcx.ins().return_(&results);\n-            bcx.seal_all_blocks();\n-            bcx.finalize();\n-        }\n-        module.define_function(func_id, &mut ctx).unwrap();\n-        unwind_context.add_function(func_id, &ctx, module.isa());\n+        crate::common::create_wrapper_function(\n+            module,\n+            unwind_context,\n+            sig,\n+            &format!(\"__rust_{}\", method.name),\n+            &kind.fn_name(method.name),\n+        );\n     }\n \n     let sig = Signature {\n         call_conv: module.target_config().default_call_conv,\n         params: vec![AbiParam::new(usize_ty), AbiParam::new(usize_ty)],\n         returns: vec![],\n     };\n-\n-    let callee_name = alloc_error_handler_kind.fn_name(sym::oom);\n-\n-    let func_id =\n-        module.declare_function(\"__rust_alloc_error_handler\", Linkage::Export, &sig).unwrap();\n-\n-    let callee_func_id = module.declare_function(&callee_name, Linkage::Import, &sig).unwrap();\n-\n-    let mut ctx = Context::new();\n-    ctx.func.signature = sig;\n-    {\n-        let mut func_ctx = FunctionBuilderContext::new();\n-        let mut bcx = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n-\n-        let block = bcx.create_block();\n-        bcx.switch_to_block(block);\n-        let args = (&[usize_ty, usize_ty])\n-            .iter()\n-            .map(|&ty| bcx.append_block_param(block, ty))\n-            .collect::<Vec<Value>>();\n-\n-        let callee_func_ref = module.declare_func_in_func(callee_func_id, &mut bcx.func);\n-        bcx.ins().call(callee_func_ref, &args);\n-\n-        bcx.ins().trap(TrapCode::UnreachableCodeReached);\n-        bcx.seal_all_blocks();\n-        bcx.finalize();\n-    }\n-    module.define_function(func_id, &mut ctx).unwrap();\n-    unwind_context.add_function(func_id, &ctx, module.isa());\n+    crate::common::create_wrapper_function(\n+        module,\n+        unwind_context,\n+        sig,\n+        \"__rust_alloc_error_handler\",\n+        &alloc_error_handler_kind.fn_name(sym::oom),\n+    );\n \n     let data_id = module.declare_data(OomStrategy::SYMBOL, Linkage::Export, false, false).unwrap();\n     let mut data_ctx = DataContext::new();"}, {"sha": "16ae526090b7ed294725be4b38ff5a836ddbd094", "filename": "src/common.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2e93be3a4c8f59e3856c22152c3771054577b618/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e93be3a4c8f59e3856c22152c3771054577b618/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=2e93be3a4c8f59e3856c22152c3771054577b618", "patch": "@@ -254,6 +254,44 @@ pub(crate) fn type_sign(ty: Ty<'_>) -> bool {\n     }\n }\n \n+pub(crate) fn create_wrapper_function(\n+    module: &mut impl Module,\n+    unwind_context: &mut UnwindContext,\n+    sig: Signature,\n+    wrapper_name: &str,\n+    callee_name: &str,\n+) {\n+    let wrapper_func_id = module.declare_function(wrapper_name, Linkage::Export, &sig).unwrap();\n+    let callee_func_id = module.declare_function(callee_name, Linkage::Import, &sig).unwrap();\n+\n+    let mut ctx = Context::new();\n+    ctx.func.signature = sig;\n+    {\n+        let mut func_ctx = FunctionBuilderContext::new();\n+        let mut bcx = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n+\n+        let block = bcx.create_block();\n+        bcx.switch_to_block(block);\n+        let func = &mut bcx.func.stencil;\n+        let args = func\n+            .signature\n+            .params\n+            .iter()\n+            .map(|param| func.dfg.append_block_param(block, param.value_type))\n+            .collect::<Vec<Value>>();\n+\n+        let callee_func_ref = module.declare_func_in_func(callee_func_id, &mut bcx.func);\n+        let call_inst = bcx.ins().call(callee_func_ref, &args);\n+        let results = bcx.inst_results(call_inst).to_vec(); // Clone to prevent borrow error\n+\n+        bcx.ins().return_(&results);\n+        bcx.seal_all_blocks();\n+        bcx.finalize();\n+    }\n+    module.define_function(wrapper_func_id, &mut ctx).unwrap();\n+    unwind_context.add_function(wrapper_func_id, &ctx, module.isa());\n+}\n+\n pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n     pub(crate) cx: &'clif mut crate::CodegenCx,\n     pub(crate) module: &'m mut dyn Module,"}]}