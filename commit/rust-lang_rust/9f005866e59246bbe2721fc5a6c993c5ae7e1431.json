{"sha": "9f005866e59246bbe2721fc5a6c993c5ae7e1431", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMDA1ODY2ZTU5MjQ2YmJlMjcyMWZjNWE2Yzk5M2M1YWU3ZTE0MzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-16T08:44:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-25T03:59:54Z"}, "message": "rustuv: Fix a memory leak (documented inside)\n\nThis happened because the environment of a procedure was never deallocated.", "tree": {"sha": "ee752059606222ffe9d171887dde644679d05495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee752059606222ffe9d171887dde644679d05495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f005866e59246bbe2721fc5a6c993c5ae7e1431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f005866e59246bbe2721fc5a6c993c5ae7e1431", "html_url": "https://github.com/rust-lang/rust/commit/9f005866e59246bbe2721fc5a6c993c5ae7e1431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f005866e59246bbe2721fc5a6c993c5ae7e1431/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f25c81a51a752786ce8936b503c16912478a89fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f25c81a51a752786ce8936b503c16912478a89fd", "html_url": "https://github.com/rust-lang/rust/commit/f25c81a51a752786ce8936b503c16912478a89fd"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "8530e3e837ea811c4857aa87a2486be16b619871", "filename": "src/libgreen/context.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9f005866e59246bbe2721fc5a6c993c5ae7e1431/src%2Flibgreen%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f005866e59246bbe2721fc5a6c993c5ae7e1431/src%2Flibgreen%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcontext.rs?ref=9f005866e59246bbe2721fc5a6c993c5ae7e1431", "patch": "@@ -24,7 +24,7 @@ use stack::StackSegment;\n // then misalign the regs again.\n pub struct Context {\n     /// The context entry point, saved here for later destruction\n-    priv start: ~Option<proc()>,\n+    priv start: Option<~proc()>,\n     /// Hold the registers while the task or scheduler is suspended\n     priv regs: ~Registers,\n     /// Lower bound and upper bound for the stack\n@@ -34,7 +34,7 @@ pub struct Context {\n impl Context {\n     pub fn empty() -> Context {\n         Context {\n-            start: ~None,\n+            start: None,\n             regs: new_regs(),\n             stack_bounds: None,\n         }\n@@ -43,8 +43,26 @@ impl Context {\n     /// Create a new context that will resume execution by running proc()\n     pub fn new(start: proc(), stack: &mut StackSegment) -> Context {\n         // The C-ABI function that is the task entry point\n-        extern fn task_start_wrapper(f: &mut Option<proc()>) {\n-            f.take_unwrap()()\n+        //\n+        // Note that this function is a little sketchy. We're taking a\n+        // procedure, transmuting it to a stack-closure, and then calling to\n+        // closure. This leverages the fact that the representation of these two\n+        // types is the same.\n+        //\n+        // The reason that we're doing this is that this procedure is expected\n+        // to never return. The codegen which frees the environment of the\n+        // procedure occurs *after* the procedure has completed, and this means\n+        // that we'll never actually free the procedure.\n+        //\n+        // To solve this, we use this transmute (to not trigger the procedure\n+        // deallocation here), and then store a copy of the procedure in the\n+        // `Context` structure returned. When the `Context` is deallocated, then\n+        // the entire procedure box will be deallocated as well.\n+        extern fn task_start_wrapper(f: &proc()) {\n+            unsafe {\n+                let f: &|| = transmute(f);\n+                (*f)()\n+            }\n         }\n \n         let sp: *uint = stack.end();\n@@ -60,10 +78,10 @@ impl Context {\n         // FIXME #7767: Putting main into a ~ so it's a thin pointer and can\n         // be passed to the spawn function.  Another unfortunate\n         // allocation\n-        let box = ~Some(start);\n+        let start = ~start;\n         initialize_call_frame(&mut *regs,\n                               task_start_wrapper as *c_void,\n-                              unsafe { transmute(&*box) },\n+                              unsafe { transmute(&*start) },\n                               sp);\n \n         // Scheduler tasks don't have a stack in the \"we allocated it\" sense,\n@@ -78,7 +96,7 @@ impl Context {\n             Some((stack_base as uint, sp as uint))\n         };\n         return Context {\n-            start: box,\n+            start: Some(start),\n             regs: regs,\n             stack_bounds: bounds,\n         }"}]}