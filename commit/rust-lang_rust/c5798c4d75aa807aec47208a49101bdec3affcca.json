{"sha": "c5798c4d75aa807aec47208a49101bdec3affcca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1Nzk4YzRkNzVhYTgwN2FlYzQ3MjA4YTQ5MTAxYmRlYzNhZmZjY2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T16:28:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T16:28:28Z"}, "message": "Finalize impl Grammar", "tree": {"sha": "1af0efdcee857e1ba91e76f4cc7fd7c043916ebb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1af0efdcee857e1ba91e76f4cc7fd7c043916ebb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5798c4d75aa807aec47208a49101bdec3affcca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5798c4d75aa807aec47208a49101bdec3affcca", "html_url": "https://github.com/rust-lang/rust/commit/c5798c4d75aa807aec47208a49101bdec3affcca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5798c4d75aa807aec47208a49101bdec3affcca/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c83467796b6c7365ea4f41900d74444384a9e618", "url": "https://api.github.com/repos/rust-lang/rust/commits/c83467796b6c7365ea4f41900d74444384a9e618", "html_url": "https://github.com/rust-lang/rust/commit/c83467796b6c7365ea4f41900d74444384a9e618"}], "stats": {"total": 203, "additions": 103, "deletions": 100}, "files": [{"sha": "5ea4f9f5ba0a3defb7501e954195d36745361449", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -41,7 +41,7 @@ impl<'a> SubstituteTypeParams<'a> {\n         source_scope: &'a SemanticsScope<'a>,\n         // FIXME: there's implicit invariant that `trait_` and  `source_scope` match...\n         trait_: hir::Trait,\n-        impl_def: ast::ImplDef,\n+        impl_def: ast::Impl,\n     ) -> SubstituteTypeParams<'a> {\n         let substs = get_syntactic_substs(impl_def).unwrap_or_default();\n         let generic_def: hir::GenericDef = trait_.into();\n@@ -80,7 +80,7 @@ impl<'a> SubstituteTypeParams<'a> {\n \n         // FIXME: It would probably be nicer if we could get this via HIR (i.e. get the\n         // trait ref, and then go from the types in the substs back to the syntax)\n-        fn get_syntactic_substs(impl_def: ast::ImplDef) -> Option<Vec<ast::TypeRef>> {\n+        fn get_syntactic_substs(impl_def: ast::Impl) -> Option<Vec<ast::TypeRef>> {\n             let target_trait = impl_def.target_trait()?;\n             let path_type = match target_trait {\n                 ast::TypeRef::PathType(path) => path,"}, {"sha": "95a750aeec2fbf3feeb5c3eb6b6c4250baed19a6", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -111,7 +111,7 @@ fn add_missing_impl_members_inner(\n     label: &'static str,\n ) -> Option<()> {\n     let _p = ra_prof::profile(\"add_missing_impl_members_inner\");\n-    let impl_def = ctx.find_node_at_offset::<ast::ImplDef>()?;\n+    let impl_def = ctx.find_node_at_offset::<ast::Impl>()?;\n     let impl_item_list = impl_def.assoc_item_list()?;\n \n     let trait_ = resolve_target_trait(&ctx.sema, &impl_def)?;"}, {"sha": "3c67749eec59d2b63765fa289ec662af1a1d0187", "filename": "crates/ra_assists/src/handlers/generate_new.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -122,15 +122,15 @@ fn generate_impl_text(strukt: &ast::Struct, code: &str) -> String {\n //\n // FIXME: change the new fn checking to a more semantic approach when that's more\n // viable (e.g. we process proc macros, etc)\n-fn find_struct_impl(ctx: &AssistContext, strukt: &ast::Struct) -> Option<Option<ast::ImplDef>> {\n+fn find_struct_impl(ctx: &AssistContext, strukt: &ast::Struct) -> Option<Option<ast::Impl>> {\n     let db = ctx.db();\n     let module = strukt.syntax().ancestors().find(|node| {\n         ast::Module::can_cast(node.kind()) || ast::SourceFile::can_cast(node.kind())\n     })?;\n \n     let struct_def = ctx.sema.to_def(strukt)?;\n \n-    let block = module.descendants().filter_map(ast::ImplDef::cast).find_map(|impl_blk| {\n+    let block = module.descendants().filter_map(ast::Impl::cast).find_map(|impl_blk| {\n         let blk = ctx.sema.to_def(&impl_blk)?;\n \n         // FIXME: handle e.g. `struct S<T>; impl<U> S<U> {}`\n@@ -158,7 +158,7 @@ fn find_struct_impl(ctx: &AssistContext, strukt: &ast::Struct) -> Option<Option<\n     Some(block)\n }\n \n-fn has_new_fn(imp: &ast::ImplDef) -> bool {\n+fn has_new_fn(imp: &ast::Impl) -> bool {\n     if let Some(il) = imp.assoc_item_list() {\n         for item in il.assoc_items() {\n             if let ast::AssocItem::Fn(f) = item {"}, {"sha": "92a1a5925c70ee9d28efae6758aa62359b3eb1df", "filename": "crates/ra_assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn introduce_named_lifetime(acc: &mut Assists, ctx: &AssistContext) -\n         .filter(|lifetime| lifetime.text() == \"'_\")?;\n     if let Some(fn_def) = lifetime_token.ancestors().find_map(ast::Fn::cast) {\n         generate_fn_def_assist(acc, &fn_def, lifetime_token.text_range())\n-    } else if let Some(impl_def) = lifetime_token.ancestors().find_map(ast::ImplDef::cast) {\n+    } else if let Some(impl_def) = lifetime_token.ancestors().find_map(ast::Impl::cast) {\n         generate_impl_def_assist(acc, &impl_def, lifetime_token.text_range())\n     } else {\n         None\n@@ -93,7 +93,7 @@ fn generate_fn_def_assist(\n /// Generate the assist for the impl def case\n fn generate_impl_def_assist(\n     acc: &mut Assists,\n-    impl_def: &ast::ImplDef,\n+    impl_def: &ast::Impl,\n     lifetime_loc: TextRange,\n ) -> Option<()> {\n     let new_lifetime_param = generate_unique_lifetime_param_name(&impl_def.generic_param_list())?;"}, {"sha": "6d394443ebf4d51d0319feb55f8135fddcc18731", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext\n         match parent {\n             ast::Fn(it) => it.body()?.syntax().clone().into(),\n             ast::Trait(it) => it.assoc_item_list()?.syntax().clone().into(),\n-            ast::ImplDef(it) => it.assoc_item_list()?.syntax().clone().into(),\n+            ast::Impl(it) => it.assoc_item_list()?.syntax().clone().into(),\n             ast::Enum(it) => it.variant_list()?.syntax().clone().into(),\n             ast::Struct(it) => {\n                 it.syntax().children_with_tokens()"}, {"sha": "bb16ebd4e8fbe14c3baea454aad97935801bcdbc", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -56,7 +56,7 @@ pub(crate) fn render_snippet(_cap: SnippetCap, node: &SyntaxNode, cursor: Cursor\n \n pub fn get_missing_assoc_items(\n     sema: &Semantics<RootDatabase>,\n-    impl_def: &ast::ImplDef,\n+    impl_def: &ast::Impl,\n ) -> Vec<hir::AssocItem> {\n     // Names must be unique between constants and functions. However, type aliases\n     // may share the same name as a function or constant.\n@@ -109,7 +109,7 @@ pub fn get_missing_assoc_items(\n \n pub(crate) fn resolve_target_trait(\n     sema: &Semantics<RootDatabase>,\n-    impl_def: &ast::ImplDef,\n+    impl_def: &ast::Impl,\n ) -> Option<hir::Trait> {\n     let ast_path = impl_def\n         .target_trait()"}, {"sha": "1c691d961967a08b0bc9012d3f46dff22ecc66b5", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -120,8 +120,8 @@ impl HasSource for MacroDef {\n     }\n }\n impl HasSource for ImplDef {\n-    type Ast = ast::ImplDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::ImplDef> {\n+    type Ast = ast::Impl;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Impl> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }"}, {"sha": "6f3b3dc9ad7c6b45147ce6c16eca5949a9471235", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -584,7 +584,7 @@ to_def_impls![\n     (crate::Enum, ast::Enum, enum_to_def),\n     (crate::Union, ast::Union, union_to_def),\n     (crate::Trait, ast::Trait, trait_to_def),\n-    (crate::ImplDef, ast::ImplDef, impl_to_def),\n+    (crate::ImplDef, ast::Impl, impl_to_def),\n     (crate::TypeAlias, ast::TypeAlias, type_alias_to_def),\n     (crate::Const, ast::Const, const_to_def),\n     (crate::Static, ast::Static, static_to_def),"}, {"sha": "d1994e2e7804ec0d987f3ea7a806c01760fdd563", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -68,7 +68,7 @@ impl SourceToDefCtx<'_, '_> {\n     pub(super) fn trait_to_def(&mut self, src: InFile<ast::Trait>) -> Option<TraitId> {\n         self.to_def(src, keys::TRAIT)\n     }\n-    pub(super) fn impl_to_def(&mut self, src: InFile<ast::ImplDef>) -> Option<ImplId> {\n+    pub(super) fn impl_to_def(&mut self, src: InFile<ast::Impl>) -> Option<ImplId> {\n         self.to_def(src, keys::IMPL)\n     }\n     pub(super) fn fn_to_def(&mut self, src: InFile<ast::Fn>) -> Option<FunctionId> {\n@@ -158,7 +158,7 @@ impl SourceToDefCtx<'_, '_> {\n                         let def = self.trait_to_def(container.with_value(it))?;\n                         def.into()\n                     },\n-                    ast::ImplDef(it) => {\n+                    ast::Impl(it) => {\n                         let def = self.impl_to_def(container.with_value(it))?;\n                         def.into()\n                     },\n@@ -209,7 +209,7 @@ impl SourceToDefCtx<'_, '_> {\n                     ast::Enum(it) => self.enum_to_def(container.with_value(it))?.into(),\n                     ast::Trait(it) => self.trait_to_def(container.with_value(it))?.into(),\n                     ast::TypeAlias(it) => self.type_alias_to_def(container.with_value(it))?.into(),\n-                    ast::ImplDef(it) => self.impl_to_def(container.with_value(it))?.into(),\n+                    ast::Impl(it) => self.impl_to_def(container.with_value(it))?.into(),\n                     _ => continue,\n                 }\n             };"}, {"sha": "78f6da5b8b1883bf89b12c6daeb78caed09bdb8f", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -669,7 +669,7 @@ impl ExprCollector<'_> {\n                         (TraitLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::Item::ExternBlock(_) => return None, // FIXME: collect from extern blocks\n-                    ast::Item::ImplDef(_)\n+                    ast::Item::Impl(_)\n                     | ast::Item::Use(_)\n                     | ast::Item::ExternCrate(_)\n                     | ast::Item::Module(_)"}, {"sha": "63b56405c52a19e2ab5c87813357cd38390a4990", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -420,7 +420,7 @@ mod_items! {\n     Const in consts -> ast::Const,\n     Static in statics -> ast::Static,\n     Trait in traits -> ast::Trait,\n-    Impl in impls -> ast::ImplDef,\n+    Impl in impls -> ast::Impl,\n     TypeAlias in type_aliases -> ast::TypeAlias,\n     Mod in mods -> ast::Module,\n     MacroCall in macro_calls -> ast::MacroCall,\n@@ -581,7 +581,7 @@ pub struct Impl {\n     pub target_type: TypeRef,\n     pub is_negative: bool,\n     pub items: Box<[AssocItem]>,\n-    pub ast_id: FileAstId<ast::ImplDef>,\n+    pub ast_id: FileAstId<ast::Impl>,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "b0cf94956e71a42426e1806a5946bd88e39577a6", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -95,7 +95,7 @@ impl Ctx {\n \n             // These are handled in their respective `lower_X` method (since we can't just blindly\n             // walk them).\n-            ast::Item::Trait(_) | ast::Item::ImplDef(_) | ast::Item::ExternBlock(_) => {}\n+            ast::Item::Trait(_) | ast::Item::Impl(_) | ast::Item::ExternBlock(_) => {}\n \n             // These don't have inner items.\n             ast::Item::Module(_) | ast::Item::ExternCrate(_) | ast::Item::Use(_) => {}\n@@ -112,7 +112,7 @@ impl Ctx {\n             ast::Item::Const(ast) => Some(self.lower_const(ast).into()),\n             ast::Item::Module(ast) => self.lower_module(ast).map(Into::into),\n             ast::Item::Trait(ast) => self.lower_trait(ast).map(Into::into),\n-            ast::Item::ImplDef(ast) => self.lower_impl(ast).map(Into::into),\n+            ast::Item::Impl(ast) => self.lower_impl(ast).map(Into::into),\n             ast::Item::Use(ast) => Some(ModItems(\n                 self.lower_use(ast).into_iter().map(Into::into).collect::<SmallVec<_>>(),\n             )),\n@@ -445,7 +445,7 @@ impl Ctx {\n         Some(id(self.data().traits.alloc(res)))\n     }\n \n-    fn lower_impl(&mut self, impl_def: &ast::ImplDef) -> Option<FileItemTreeId<Impl>> {\n+    fn lower_impl(&mut self, impl_def: &ast::Impl) -> Option<FileItemTreeId<Impl>> {\n         let generic_params =\n             self.lower_generic_params_and_inner_items(GenericsOwner::Impl, impl_def);\n         let target_trait = impl_def.target_trait().map(|tr| self.lower_type_ref(&tr));"}, {"sha": "a81497fa8a9e56f9c760a7a0e6b07d43856bdf3b", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -274,7 +274,7 @@ fn simple_inner_items() {\n             inner attrs: Attrs { entries: None }\n \n             top-level items:\n-            Impl { generic_params: GenericParamsId(0), target_trait: Some(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"D\"))] }, generic_args: [None] })), target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Response\"))] }, generic_args: [Some(GenericArgs { args: [Type(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] }))], has_self_type: false, bindings: [] })] }), is_negative: false, items: [Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n+            Impl { generic_params: GenericParamsId(0), target_trait: Some(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"D\"))] }, generic_args: [None] })), target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Response\"))] }, generic_args: [Some(GenericArgs { args: [Type(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] }))], has_self_type: false, bindings: [] })] }), is_negative: false, items: [Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Impl>(0) }\n             > Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(1) }\n \n             inner items:\n@@ -353,7 +353,7 @@ fn impl_attrs() {\n \n             top-level items:\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"impl_attr\"))] }, input: None }]) }]\n-            Impl { generic_params: GenericParamsId(4294967295), target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Ty\"))] }, generic_args: [None] }), is_negative: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n+            Impl { generic_params: GenericParamsId(4294967295), target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Ty\"))] }, generic_args: [None] }), is_negative: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Impl>(0) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }]) }]\n             > Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(1) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }]) }]\n@@ -432,7 +432,7 @@ fn assoc_item_macros() {\n             inner attrs: Attrs { entries: None }\n \n             top-level items:\n-            Impl { generic_params: GenericParamsId(4294967295), target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"S\"))] }, generic_args: [None] }), is_negative: false, items: [MacroCall(Idx::<MacroCall>(0))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n+            Impl { generic_params: GenericParamsId(4294967295), target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"S\"))] }, generic_args: [None] }), is_negative: false, items: [MacroCall(Idx::<MacroCall>(0))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Impl>(0) }\n             > MacroCall { name: None, path: ModPath { kind: Plain, segments: [Name(Text(\"items\"))] }, is_export: false, is_local_inner: false, is_builtin: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::MacroCall>(1) }\n         \"#]],\n     );"}, {"sha": "441bdbead88542a2a424b31e9e5a2df6039d4604", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -18,7 +18,7 @@ pub const FUNCTION: Key<ast::Fn, FunctionId> = Key::new();\n pub const CONST: Key<ast::Const, ConstId> = Key::new();\n pub const STATIC: Key<ast::Static, StaticId> = Key::new();\n pub const TYPE_ALIAS: Key<ast::TypeAlias, TypeAliasId> = Key::new();\n-pub const IMPL: Key<ast::ImplDef, ImplId> = Key::new();\n+pub const IMPL: Key<ast::Impl, ImplId> = Key::new();\n pub const TRAIT: Key<ast::Trait, TraitId> = Key::new();\n pub const STRUCT: Key<ast::Struct, StructId> = Key::new();\n pub const UNION: Key<ast::Union, UnionId> = Key::new();"}, {"sha": "d9a0ef167dbdc7cb2cc3e9ba614e6afa896fd08e", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -3,7 +3,7 @@\n //! This module adds the completion items related to implementing associated\n //! items within a `impl Trait for Struct` block. The current context node\n //! must be within either a `FN`, `TYPE_ALIAS`, or `CONST` node\n-//! and an direct child of an `IMPL_DEF`.\n+//! and an direct child of an `IMPL`.\n //!\n //! # Examples\n //!\n@@ -34,7 +34,7 @@\n use hir::{self, Docs, HasSource};\n use ra_assists::utils::get_missing_assoc_items;\n use ra_syntax::{\n-    ast::{self, edit, ImplDef},\n+    ast::{self, edit, Impl},\n     AstNode, SyntaxKind, SyntaxNode, TextRange, T,\n };\n use ra_text_edit::TextEdit;\n@@ -104,7 +104,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n     }\n }\n \n-fn completion_match(ctx: &CompletionContext) -> Option<(SyntaxNode, ImplDef)> {\n+fn completion_match(ctx: &CompletionContext) -> Option<(SyntaxNode, Impl)> {\n     let (trigger, impl_def_offset) = ctx.token.ancestors().find_map(|p| match p.kind() {\n         SyntaxKind::FN | SyntaxKind::TYPE_ALIAS | SyntaxKind::CONST | SyntaxKind::BLOCK_EXPR => {\n             Some((p, 2))\n@@ -114,7 +114,7 @@ fn completion_match(ctx: &CompletionContext) -> Option<(SyntaxNode, ImplDef)> {\n     })?;\n     let impl_def = (0..impl_def_offset - 1)\n         .try_fold(trigger.parent()?, |t, _| t.parent())\n-        .and_then(ast::ImplDef::cast)?;\n+        .and_then(ast::Impl::cast)?;\n     Some((trigger, impl_def))\n }\n "}, {"sha": "2113abbb224934a1e1c9eb10050185bf9b853ac2", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -40,7 +40,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) record_lit_syntax: Option<ast::RecordExpr>,\n     pub(super) record_pat_syntax: Option<ast::RecordPat>,\n     pub(super) record_field_syntax: Option<ast::RecordExprField>,\n-    pub(super) impl_def: Option<ast::ImplDef>,\n+    pub(super) impl_def: Option<ast::Impl>,\n     /// FIXME: `ActiveParameter` is string-based, which is very very wrong\n     pub(super) active_parameter: Option<ActiveParameter>,\n     pub(super) is_param: bool,\n@@ -325,7 +325,7 @@ impl<'a> CompletionContext<'a> {\n             .sema\n             .ancestors_with_macros(self.token.parent())\n             .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n-            .find_map(ast::ImplDef::cast);\n+            .find_map(ast::Impl::cast);\n \n         let top_node = name_ref\n             .syntax()"}, {"sha": "a68861e1c9c4155df7811a7efb45a5fbeda4eae8", "filename": "crates/ra_ide/src/completion/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -27,7 +27,7 @@ pub(crate) fn has_impl_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element)\n         .filter(|it| it.kind() == ASSOC_ITEM_LIST)\n         .and_then(|it| it.parent())\n-        .filter(|it| it.kind() == IMPL_DEF)\n+        .filter(|it| it.kind() == IMPL)\n         .is_some()\n }\n #[test]\n@@ -121,7 +121,7 @@ fn test_has_trait_as_prev_sibling() {\n }\n \n pub(crate) fn has_impl_as_prev_sibling(element: SyntaxElement) -> bool {\n-    previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == IMPL_DEF).is_some()\n+    previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == IMPL).is_some()\n }\n #[test]\n fn test_has_impl_as_prev_sibling() {"}, {"sha": "7d378f2d0a5ebc434605c3240e3a4628b393079e", "filename": "crates/ra_ide/src/file_structure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -139,7 +139,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n             ast::RecordField(it) => decl_with_ascription(it),\n             ast::Const(it) => decl_with_ascription(it),\n             ast::Static(it) => decl_with_ascription(it),\n-            ast::ImplDef(it) => {\n+            ast::Impl(it) => {\n                 let target_type = it.target_type()?;\n                 let target_trait = it.target_trait();\n                 let label = match target_trait {\n@@ -372,7 +372,7 @@ fn very_obsolete() {}\n                         label: \"impl E\",\n                         navigation_range: 239..240,\n                         node_range: 234..243,\n-                        kind: IMPL_DEF,\n+                        kind: IMPL,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -381,7 +381,7 @@ fn very_obsolete() {}\n                         label: \"impl fmt::Debug for E\",\n                         navigation_range: 265..266,\n                         node_range: 245..269,\n-                        kind: IMPL_DEF,\n+                        kind: IMPL,\n                         detail: None,\n                         deprecated: false,\n                     },"}, {"sha": "d330109f1c5f602355c1fbe360f8a1afc6f03002", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -192,15 +192,14 @@ fn text_edit_from_self_param(\n     self_param: &ast::SelfParam,\n     new_name: &str,\n ) -> Option<TextEdit> {\n-    fn target_type_name(impl_def: &ast::ImplDef) -> Option<String> {\n+    fn target_type_name(impl_def: &ast::Impl) -> Option<String> {\n         if let Some(ast::TypeRef::PathType(p)) = impl_def.target_type() {\n             return Some(p.path()?.segment()?.name_ref()?.text().to_string());\n         }\n         None\n     }\n \n-    let impl_def =\n-        find_node_at_offset::<ast::ImplDef>(syn, self_param.syntax().text_range().start())?;\n+    let impl_def = find_node_at_offset::<ast::Impl>(syn, self_param.syntax().text_range().start())?;\n     let type_name = target_type_name(&impl_def)?;\n \n     let mut replacement_text = String::from(new_name);"}, {"sha": "e3a96f9d5c603851644b70aaa25e560fa520d9e7", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -647,7 +647,7 @@ fn highlight_element(\n \n fn is_child_of_impl(element: &SyntaxElement) -> bool {\n     match element.parent() {\n-        Some(e) => e.kind() == IMPL_DEF,\n+        Some(e) => e.kind() == IMPL,\n         _ => false,\n     }\n }"}, {"sha": "c2e1d701e2247e2ccee1422e9a5de6f574951619", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -150,7 +150,7 @@ pub(crate) fn reparser(\n         EXTERN_ITEM_LIST => items::extern_item_list,\n         TOKEN_TREE if first_child? == T!['{'] => items::token_tree,\n         ASSOC_ITEM_LIST => match parent? {\n-            IMPL_DEF => items::impl_item_list,\n+            IMPL => items::impl_item_list,\n             TRAIT => items::trait_item_list,\n             _ => return None,\n         },"}, {"sha": "cca524ceaa036be80ed1f4f2fa8634f79241e1a2", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -221,7 +221,7 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Resul\n         // unsafe default impl Foo {}\n         T![impl] => {\n             traits::impl_def(p);\n-            m.complete(p, IMPL_DEF);\n+            m.complete(p, IMPL);\n         }\n \n         // test existential_type"}, {"sha": "d1b22f08a9c7ca6ba869d42acbc20073dace2432", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -134,7 +134,7 @@ pub enum SyntaxKind {\n     STATIC,\n     CONST,\n     TRAIT,\n-    IMPL_DEF,\n+    IMPL,\n     TYPE_ALIAS,\n     MACRO_CALL,\n     TOKEN_TREE,"}, {"sha": "ba00742f0c07b128c51759b5e63beb9b263f05a1", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -100,17 +100,18 @@ impl Fn {\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ImplDef {\n+pub struct Impl {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for ImplDef {}\n-impl ast::VisibilityOwner for ImplDef {}\n-impl ast::GenericParamsOwner for ImplDef {}\n-impl ImplDef {\n-    pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n+impl ast::AttrsOwner for Impl {}\n+impl ast::VisibilityOwner for Impl {}\n+impl ast::GenericParamsOwner for Impl {}\n+impl Impl {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n     pub fn impl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![impl]) }\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n+    pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n     pub fn excl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![!]) }\n     pub fn for_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![for]) }\n     pub fn assoc_item_list(&self) -> Option<AssocItemList> { support::child(&self.syntax) }\n@@ -1278,7 +1279,7 @@ pub enum Item {\n     ExternBlock(ExternBlock),\n     ExternCrate(ExternCrate),\n     Fn(Fn),\n-    ImplDef(ImplDef),\n+    Impl(Impl),\n     MacroCall(MacroCall),\n     Module(Module),\n     Static(Static),\n@@ -1477,8 +1478,8 @@ impl AstNode for Fn {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for ImplDef {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == IMPL_DEF }\n+impl AstNode for Impl {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == IMPL }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2790,8 +2791,8 @@ impl From<ExternCrate> for Item {\n impl From<Fn> for Item {\n     fn from(node: Fn) -> Item { Item::Fn(node) }\n }\n-impl From<ImplDef> for Item {\n-    fn from(node: ImplDef) -> Item { Item::ImplDef(node) }\n+impl From<Impl> for Item {\n+    fn from(node: Impl) -> Item { Item::Impl(node) }\n }\n impl From<MacroCall> for Item {\n     fn from(node: MacroCall) -> Item { Item::MacroCall(node) }\n@@ -2820,7 +2821,7 @@ impl From<Use> for Item {\n impl AstNode for Item {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            CONST | ENUM | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL_DEF | MACRO_CALL | MODULE\n+            CONST | ENUM | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL | MACRO_CALL | MODULE\n             | STATIC | STRUCT | TRAIT | TYPE_ALIAS | UNION | USE => true,\n             _ => false,\n         }\n@@ -2832,7 +2833,7 @@ impl AstNode for Item {\n             EXTERN_BLOCK => Item::ExternBlock(ExternBlock { syntax }),\n             EXTERN_CRATE => Item::ExternCrate(ExternCrate { syntax }),\n             FN => Item::Fn(Fn { syntax }),\n-            IMPL_DEF => Item::ImplDef(ImplDef { syntax }),\n+            IMPL => Item::Impl(Impl { syntax }),\n             MACRO_CALL => Item::MacroCall(MacroCall { syntax }),\n             MODULE => Item::Module(Module { syntax }),\n             STATIC => Item::Static(Static { syntax }),\n@@ -2852,7 +2853,7 @@ impl AstNode for Item {\n             Item::ExternBlock(it) => &it.syntax,\n             Item::ExternCrate(it) => &it.syntax,\n             Item::Fn(it) => &it.syntax,\n-            Item::ImplDef(it) => &it.syntax,\n+            Item::Impl(it) => &it.syntax,\n             Item::MacroCall(it) => &it.syntax,\n             Item::Module(it) => &it.syntax,\n             Item::Static(it) => &it.syntax,\n@@ -3491,7 +3492,7 @@ impl std::fmt::Display for Fn {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for ImplDef {\n+impl std::fmt::Display for Impl {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "313f5222610518414fe8095fa2f1bc56233fbcdc", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -141,7 +141,7 @@ impl ast::UseTreeList {\n     }\n }\n \n-impl ast::ImplDef {\n+impl ast::Impl {\n     pub fn target_type(&self) -> Option<ast::TypeRef> {\n         match self.target() {\n             (Some(t), None) | (_, Some(t)) => Some(t),\n@@ -486,5 +486,5 @@ impl ast::DocCommentsOwner for ast::Module {}\n impl ast::DocCommentsOwner for ast::Static {}\n impl ast::DocCommentsOwner for ast::Const {}\n impl ast::DocCommentsOwner for ast::TypeAlias {}\n-impl ast::DocCommentsOwner for ast::ImplDef {}\n+impl ast::DocCommentsOwner for ast::Impl {}\n impl ast::DocCommentsOwner for ast::MacroCall {}"}, {"sha": "0325ab0b4209a7d1b5ddc2ee0e25df4f0ea40795", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -204,7 +204,7 @@ fn validate_visibility(vis: ast::Visibility, errors: &mut Vec<SyntaxError>) {\n         _ => return,\n     }\n \n-    let impl_def = match parent.parent().and_then(|it| it.parent()).and_then(ast::ImplDef::cast) {\n+    let impl_def = match parent.parent().and_then(|it| it.parent()).and_then(ast::Impl::cast) {\n         Some(it) => it,\n         None => return,\n     };"}, {"sha": "bc95b851288d97df4d989e273ce002b533b306c4", "filename": "crates/ra_syntax/test_data/parser/err/0018_incomplete_fn.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..183\n-  IMPL_DEF@0..182\n+  IMPL@0..182\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..13"}, {"sha": "71fb19783ad155005f3f666be64b4124998a1e1c", "filename": "crates/ra_syntax/test_data/parser/err/0022_bad_exprs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -75,7 +75,7 @@ SOURCE_FILE@0..112\n         ERROR@54..55\n           COMMA@54..55 \",\"\n       WHITESPACE@55..56 \" \"\n-      IMPL_DEF@56..60\n+      IMPL@56..60\n         IMPL_KW@56..60 \"impl\"\n       EXPR_STMT@60..61\n         ERROR@60..61"}, {"sha": "7e4b11c2720e306aabeceeb64bdd7447845465db", "filename": "crates/ra_syntax/test_data/parser/err/0026_imp_recovery.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..38\n-  IMPL_DEF@0..14\n+  IMPL@0..14\n     IMPL_KW@0..4 \"impl\"\n     GENERIC_PARAM_LIST@4..14\n       L_ANGLE@4..5 \"<\"\n@@ -17,7 +17,7 @@ SOURCE_FILE@0..38\n                     IDENT@8..13 \"Clone\"\n       R_ANGLE@13..14 \">\"\n   WHITESPACE@14..15 \"\\n\"\n-  IMPL_DEF@15..37\n+  IMPL@15..37\n     IMPL_KW@15..19 \"impl\"\n     GENERIC_PARAM_LIST@19..22\n       L_ANGLE@19..20 \"<\""}, {"sha": "faf87d6e5cc78e4109362fe6182bcf4c9c5bf2fa", "filename": "crates/ra_syntax/test_data/parser/err/0037_visibility_in_traits.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..118\n-  IMPL_DEF@0..117\n+  IMPL@0..117\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..6"}, {"sha": "a4271fc87ab216f695f7f1bece8458b8de1181b8", "filename": "crates/ra_syntax/test_data/parser/inline/err/0002_misplaced_label_err.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -17,7 +17,7 @@ SOURCE_FILE@0..30\n             LIFETIME@16..21 \"\\'loop\"\n             COLON@21..22 \":\"\n       WHITESPACE@22..23 \" \"\n-      IMPL_DEF@23..27\n+      IMPL@23..27\n         IMPL_KW@23..27 \"impl\"\n       WHITESPACE@27..28 \"\\n\"\n       R_CURLY@28..29 \"}\""}, {"sha": "29d6b3974021da4741b72f53fce77c173acbac75", "filename": "crates/ra_syntax/test_data/parser/inline/err/0004_impl_type.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0004_impl_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0004_impl_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0004_impl_type.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..87\n-  IMPL_DEF@0..12\n+  IMPL@0..12\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..9\n@@ -12,7 +12,7 @@ SOURCE_FILE@0..87\n       L_CURLY@10..11 \"{\"\n       R_CURLY@11..12 \"}\"\n   WHITESPACE@12..13 \"\\n\"\n-  IMPL_DEF@13..33\n+  IMPL@13..33\n     IMPL_KW@13..17 \"impl\"\n     WHITESPACE@17..18 \" \"\n     PATH_TYPE@18..24\n@@ -33,10 +33,10 @@ SOURCE_FILE@0..87\n       L_CURLY@31..32 \"{\"\n       R_CURLY@32..33 \"}\"\n   WHITESPACE@33..34 \"\\n\"\n-  IMPL_DEF@34..38\n+  IMPL@34..38\n     IMPL_KW@34..38 \"impl\"\n   WHITESPACE@38..39 \" \"\n-  IMPL_DEF@39..54\n+  IMPL@39..54\n     IMPL_KW@39..43 \"impl\"\n     WHITESPACE@43..44 \" \"\n     PATH_TYPE@44..51\n@@ -49,7 +49,7 @@ SOURCE_FILE@0..87\n       L_CURLY@52..53 \"{\"\n       R_CURLY@53..54 \"}\"\n   WHITESPACE@54..55 \"\\n\"\n-  IMPL_DEF@55..70\n+  IMPL@55..70\n     IMPL_KW@55..59 \"impl\"\n     WHITESPACE@59..60 \" \"\n     PATH_TYPE@60..66\n@@ -60,7 +60,7 @@ SOURCE_FILE@0..87\n     WHITESPACE@66..67 \" \"\n     FOR_KW@67..70 \"for\"\n   WHITESPACE@70..71 \" \"\n-  IMPL_DEF@71..86\n+  IMPL@71..86\n     IMPL_KW@71..75 \"impl\"\n     WHITESPACE@75..76 \" \"\n     PATH_TYPE@76..83"}, {"sha": "c7289e4008adf9a2431729e56fe5fe55d682751d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0001_trait_item_list.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..83\n-  IMPL_DEF@0..82\n+  IMPL@0..82\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..6"}, {"sha": "ae61cbad82562a8b45bc392fe8ddb0c6ac7980f1", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0006_self_param.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..128\n-  IMPL_DEF@0..127\n+  IMPL@0..127\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..6"}, {"sha": "20b2b6c193efa5c02b08d5f177945fa95f6244fd", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0018_arb_self_types.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..69\n-  IMPL_DEF@0..68\n+  IMPL@0..68\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..6"}, {"sha": "ca0702aba599bc446ca02910ec9ad5004e5963c7", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0021_impl_item_list.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..89\n-  IMPL_DEF@0..88\n+  IMPL@0..88\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..6"}, {"sha": "d6dfa83b709bfc5e1d605cf845b11a6b3bb33212", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0047_unsafe_default_impl.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0047_unsafe_default_impl.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0047_unsafe_default_impl.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0047_unsafe_default_impl.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..27\n-  IMPL_DEF@0..26\n+  IMPL@0..26\n     UNSAFE_KW@0..6 \"unsafe\"\n     WHITESPACE@6..7 \" \"\n     DEFAULT_KW@7..14 \"default\""}, {"sha": "4368930cc9130f3861624e1b3a03fa4d0641d44b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0063_impl_def_neg.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0063_impl_def_neg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0063_impl_def_neg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0063_impl_def_neg.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..20\n-  IMPL_DEF@0..19\n+  IMPL@0..19\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     BANG@5..6 \"!\""}, {"sha": "209711fc49637711f6895a09babdfeb1e4648f04", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0079_impl_def.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0079_impl_def.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0079_impl_def.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0079_impl_def.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..12\n-  IMPL_DEF@0..11\n+  IMPL@0..11\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..8"}, {"sha": "43c09affedf2f73d0caa7c595fb8cc6874c41020", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0087_unsafe_impl.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0087_unsafe_impl.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0087_unsafe_impl.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0087_unsafe_impl.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..19\n-  IMPL_DEF@0..18\n+  IMPL@0..18\n     UNSAFE_KW@0..6 \"unsafe\"\n     WHITESPACE@6..7 \" \"\n     IMPL_KW@7..11 \"impl\""}, {"sha": "0a1b21d6e6865d30c38d6f5c5c960dbd5228981b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0097_default_impl.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0097_default_impl.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0097_default_impl.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0097_default_impl.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..20\n-  IMPL_DEF@0..19\n+  IMPL@0..19\n     DEFAULT_KW@0..7 \"default\"\n     WHITESPACE@7..8 \" \"\n     IMPL_KW@8..12 \"impl\""}, {"sha": "141a7b2035f2824decb0e0db1658cae464a67358", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0118_impl_inner_attributes.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_impl_inner_attributes.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_impl_inner_attributes.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_impl_inner_attributes.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -8,7 +8,7 @@ SOURCE_FILE@0..94\n       L_CURLY@6..7 \"{\"\n       R_CURLY@7..8 \"}\"\n   WHITESPACE@8..9 \"\\n\"\n-  IMPL_DEF@9..93\n+  IMPL@9..93\n     IMPL_KW@9..13 \"impl\"\n     WHITESPACE@13..14 \" \"\n     PATH_TYPE@14..15"}, {"sha": "b8d26a53a5d24b34d47dc3b866e002b256f88edf", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0132_default_fn_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..69\n-  IMPL_DEF@0..68\n+  IMPL@0..68\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..6"}, {"sha": "8f197a19d5f6cd94f5190f6c6b9c7a59c7c7fb0d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0150_impl_type_params.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_impl_type_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_impl_type_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_impl_type_params.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..29\n-  IMPL_DEF@0..28\n+  IMPL@0..28\n     IMPL_KW@0..4 \"impl\"\n     GENERIC_PARAM_LIST@4..18\n       L_ANGLE@4..5 \"<\""}, {"sha": "1269621dc2da6f0af8302485d70337de7bbaf510", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0163_default_unsafe_fn.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_fn.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..50\n-  IMPL_DEF@0..49\n+  IMPL@0..49\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..6"}, {"sha": "6bfe925af256ce68c45edbc9213be5967ade7f64", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0163_default_unsafe_impl.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_impl.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_impl.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_impl.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..27\n-  IMPL_DEF@0..26\n+  IMPL@0..26\n     DEFAULT_KW@0..7 \"default\"\n     WHITESPACE@7..8 \" \"\n     UNSAFE_KW@8..14 \"unsafe\""}, {"sha": "ed29b0812c98b6bf232fa8dca8878b57124e9e99", "filename": "crates/ra_syntax/test_data/parser/ok/0042_ufcs_call_list.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -8,7 +8,7 @@ SOURCE_FILE@0..199\n       IDENT@69..72 \"Foo\"\n     SEMICOLON@72..73 \";\"\n   WHITESPACE@73..75 \"\\n\\n\"\n-  IMPL_DEF@75..141\n+  IMPL@75..141\n     IMPL_KW@75..79 \"impl\"\n     WHITESPACE@79..80 \" \"\n     PATH_TYPE@80..83"}, {"sha": "139ce90469a0afc645c5ef96e90b1fe1fa1b797d", "filename": "crates/ra_syntax/test_data/parser/ok/0045_block_inner_attrs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -89,7 +89,7 @@ SOURCE_FILE@0..686\n   WHITESPACE@461..463 \"\\n\\n\"\n   COMMENT@463..523 \"// https://github.com ...\"\n   WHITESPACE@523..524 \"\\n\"\n-  IMPL_DEF@524..685\n+  IMPL@524..685\n     IMPL_KW@524..528 \"impl\"\n     WHITESPACE@528..529 \" \"\n     PATH_TYPE@529..537"}, {"sha": "2cc84978443f65502759e5ede4afbfb44a69718c", "filename": "crates/ra_syntax/test_data/parser/ok/0051_parameter_attrs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -251,7 +251,7 @@ SOURCE_FILE@0..519\n       WHITESPACE@234..235 \"\\n\"\n       R_CURLY@235..236 \"}\"\n   WHITESPACE@236..238 \"\\n\\n\"\n-  IMPL_DEF@238..519\n+  IMPL@238..519\n     IMPL_KW@238..242 \"impl\"\n     WHITESPACE@242..243 \" \"\n     PATH_TYPE@243..244"}, {"sha": "453757c3cd487648b5bd1da27e7a1e7d740019f7", "filename": "crates/ra_syntax/test_data/parser/ok/0064_impl_fn_params.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0064_impl_fn_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0064_impl_fn_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0064_impl_fn_params.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..137\n-  IMPL_DEF@0..136\n+  IMPL@0..136\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..6"}, {"sha": "6246a31a664d5fee2efaf1a2ebdd0e898a4098db", "filename": "crates/ra_syntax/test_data/parser/ok/0066_default_const.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_const.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_const.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_const.rast?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..46\n-  IMPL_DEF@0..45\n+  IMPL@0..45\n     IMPL_KW@0..4 \"impl\"\n     WHITESPACE@4..5 \" \"\n     PATH_TYPE@5..6"}, {"sha": "fadcc5853bbba39448ea029e17585d76928c1423", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -42,7 +42,7 @@ pub(crate) fn symbol_kind(syntax_kind: SyntaxKind) -> lsp_types::SymbolKind {\n         SyntaxKind::RECORD_FIELD => lsp_types::SymbolKind::Field,\n         SyntaxKind::STATIC => lsp_types::SymbolKind::Constant,\n         SyntaxKind::CONST => lsp_types::SymbolKind::Constant,\n-        SyntaxKind::IMPL_DEF => lsp_types::SymbolKind::Object,\n+        SyntaxKind::IMPL => lsp_types::SymbolKind::Object,\n         _ => lsp_types::SymbolKind::Variable,\n     }\n }"}, {"sha": "c7087a14ec40787efe49b58e961b614605273f22", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -104,7 +104,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"STATIC\",\n         \"CONST\",\n         \"TRAIT\",\n-        \"IMPL_DEF\",\n+        \"IMPL\",\n         \"TYPE_ALIAS\",\n         \"MACRO_CALL\",\n         \"TOKEN_TREE\","}, {"sha": "cda0e8fbb5f1d512c5c320ede033e840f953e719", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5798c4d75aa807aec47208a49101bdec3affcca/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/c5798c4d75aa807aec47208a49101bdec3affcca/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=c5798c4d75aa807aec47208a49101bdec3affcca", "patch": "@@ -9,7 +9,7 @@ Item =\n | ExternBlock\n | ExternCrate\n | Fn\n-| ImplDef\n+| Impl\n | MacroCall\n | Module\n | Static\n@@ -131,9 +131,12 @@ Trait =\n AssocItemList =\n   '{' AssocItem* '}'\n \n-ImplDef =\n- Attr* Visibility? 'const'? 'default'? 'unsafe'? 'impl' GenericParamList? '!'? 'for'\n- WhereClause?\n+Impl =\n+ Attr* Visibility?\n+ 'default'? 'unsafe'? 'impl' 'const'? GenericParamList? (\n+   TypeRef\n+ | '!'? TypeRef 'for' TypeRef\n+ ) WhereClause?\n  AssocItemList\n \n ParenType ="}]}