{"sha": "2cf3d8adf2cbdf760063a247162a558e68fe35fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZjNkOGFkZjJjYmRmNzYwMDYzYTI0NzE2MmE1NThlNjhmZTM1ZmQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-11-06T06:17:04Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-11-26T19:49:14Z"}, "message": "port the runtime to `#[thread_local]`", "tree": {"sha": "c27a0ee3f736976bb1bb4074cb28ebafad708b1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c27a0ee3f736976bb1bb4074cb28ebafad708b1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cf3d8adf2cbdf760063a247162a558e68fe35fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cf3d8adf2cbdf760063a247162a558e68fe35fd", "html_url": "https://github.com/rust-lang/rust/commit/2cf3d8adf2cbdf760063a247162a558e68fe35fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cf3d8adf2cbdf760063a247162a558e68fe35fd/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1795ae4e8a472ce500660fa59abf61114f5ef8c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1795ae4e8a472ce500660fa59abf61114f5ef8c9", "html_url": "https://github.com/rust-lang/rust/commit/1795ae4e8a472ce500660fa59abf61114f5ef8c9"}], "stats": {"total": 110, "additions": 105, "deletions": 5}, "files": [{"sha": "d840a6b2ff345aa39d379992ab1dd0ab01513103", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 101, "deletions": 5, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/2cf3d8adf2cbdf760063a247162a558e68fe35fd/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf3d8adf2cbdf760063a247162a558e68fe35fd/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=2cf3d8adf2cbdf760063a247162a558e68fe35fd", "patch": "@@ -17,16 +17,35 @@\n \n use libc::c_void;\n use cast;\n+#[cfg(stage0)]\n+#[cfg(windows)]\n use ptr;\n use cell::Cell;\n use option::{Option, Some, None};\n use unstable::finally::Finally;\n+#[cfg(stage0)]\n+#[cfg(windows)]\n use unstable::mutex::{Mutex, MUTEX_INIT};\n+#[cfg(stage0)]\n+#[cfg(windows)]\n use tls = rt::thread_local_storage;\n \n+#[cfg(not(stage0), not(windows), test)]\n+#[thread_local]\n+pub use realstd::rt::shouldnt_be_public::RT_TLS_PTR;\n+\n+#[cfg(not(stage0), not(windows), not(test))]\n+#[thread_local]\n+pub static mut RT_TLS_PTR: *mut c_void = 0 as *mut c_void;\n+\n+#[cfg(stage0)]\n+#[cfg(windows)]\n static mut RT_TLS_KEY: tls::Key = -1;\n \n /// Initialize the TLS key. Other ops will fail if this isn't executed first.\n+#[inline(never)]\n+#[cfg(stage0)]\n+#[cfg(windows)]\n pub fn init_tls_key() {\n     static mut lock: Mutex = MUTEX_INIT;\n     static mut initialized: bool = false;\n@@ -41,24 +60,42 @@ pub fn init_tls_key() {\n     }\n }\n \n+#[cfg(not(stage0), not(windows))]\n+pub fn init_tls_key() {}\n+\n /// Give a pointer to thread-local storage.\n ///\n /// # Safety note\n ///\n /// Does not validate the pointer type.\n #[inline]\n+#[cfg(stage0)]\n+#[cfg(windows)]\n pub unsafe fn put<T>(sched: ~T) {\n     let key = tls_key();\n     let void_ptr: *mut c_void = cast::transmute(sched);\n     tls::set(key, void_ptr);\n }\n \n+/// Give a pointer to thread-local storage.\n+///\n+/// # Safety note\n+///\n+/// Does not validate the pointer type.\n+#[inline]\n+#[cfg(not(stage0), not(windows))]\n+pub unsafe fn put<T>(sched: ~T) {\n+    RT_TLS_PTR = cast::transmute(sched)\n+}\n+\n /// Take ownership of a pointer from thread-local storage.\n ///\n /// # Safety note\n ///\n /// Does not validate the pointer type.\n #[inline]\n+#[cfg(stage0)]\n+#[cfg(windows)]\n pub unsafe fn take<T>() -> ~T {\n     let key = tls_key();\n     let void_ptr: *mut c_void = tls::get(key);\n@@ -70,13 +107,28 @@ pub unsafe fn take<T>() -> ~T {\n     return ptr;\n }\n \n+/// Take ownership of a pointer from thread-local storage.\n+///\n+/// # Safety note\n+///\n+/// Does not validate the pointer type.\n+#[inline]\n+#[cfg(not(stage0), not(windows))]\n+pub unsafe fn take<T>() -> ~T {\n+    let ptr: ~T = cast::transmute(RT_TLS_PTR);\n+    RT_TLS_PTR = cast::transmute(0); // can't use `as`, due to type not matching with `cfg(test)`\n+    ptr\n+}\n+\n /// Take ownership of a pointer from thread-local storage.\n ///\n /// # Safety note\n ///\n /// Does not validate the pointer type.\n /// Leaves the old pointer in TLS for speed.\n #[inline]\n+#[cfg(stage0)]\n+#[cfg(windows)]\n pub unsafe fn unsafe_take<T>() -> ~T {\n     let key = tls_key();\n     let void_ptr: *mut c_void = tls::get(key);\n@@ -87,7 +139,21 @@ pub unsafe fn unsafe_take<T>() -> ~T {\n     return ptr;\n }\n \n+/// Take ownership of a pointer from thread-local storage.\n+///\n+/// # Safety note\n+///\n+/// Does not validate the pointer type.\n+/// Leaves the old pointer in TLS for speed.\n+#[inline]\n+#[cfg(not(stage0), not(windows))]\n+pub unsafe fn unsafe_take<T>() -> ~T {\n+    cast::transmute(RT_TLS_PTR)\n+}\n+\n /// Check whether there is a thread-local pointer installed.\n+#[cfg(stage0)]\n+#[cfg(windows)]\n pub fn exists() -> bool {\n     unsafe {\n         match maybe_tls_key() {\n@@ -97,6 +163,14 @@ pub fn exists() -> bool {\n     }\n }\n \n+/// Check whether there is a thread-local pointer installed.\n+#[cfg(not(stage0), not(windows))]\n+pub fn exists() -> bool {\n+    unsafe {\n+        RT_TLS_PTR.is_not_null()\n+    }\n+}\n+\n /// Borrow the thread-local value from thread-local storage.\n /// While the value is borrowed it is not available in TLS.\n ///\n@@ -123,6 +197,8 @@ pub unsafe fn borrow<T>(f: |&mut T|) {\n ///\n /// Because this leaves the value in thread-local storage it is possible\n /// For the Scheduler pointer to be aliased\n+#[cfg(stage0)]\n+#[cfg(windows)]\n pub unsafe fn unsafe_borrow<T>() -> *mut T {\n     let key = tls_key();\n     let void_ptr = tls::get(key);\n@@ -132,6 +208,16 @@ pub unsafe fn unsafe_borrow<T>() -> *mut T {\n     void_ptr as *mut T\n }\n \n+#[cfg(not(stage0), not(windows))]\n+pub unsafe fn unsafe_borrow<T>() -> *mut T {\n+    if RT_TLS_PTR.is_null() {\n+        rtabort!(\"thread-local pointer is null. bogus!\");\n+    }\n+    RT_TLS_PTR as *mut T\n+}\n+\n+#[cfg(stage0)]\n+#[cfg(windows)]\n pub unsafe fn try_unsafe_borrow<T>() -> Option<*mut T> {\n     match maybe_tls_key() {\n         Some(key) => {\n@@ -146,7 +232,18 @@ pub unsafe fn try_unsafe_borrow<T>() -> Option<*mut T> {\n     }\n }\n \n+#[cfg(not(stage0), not(windows))]\n+pub unsafe fn try_unsafe_borrow<T>() -> Option<*mut T> {\n+    if RT_TLS_PTR.is_null() {\n+        None\n+    } else {\n+        Some(RT_TLS_PTR as *mut T)\n+    }\n+}\n+\n #[inline]\n+#[cfg(stage0)]\n+#[cfg(windows)]\n fn tls_key() -> tls::Key {\n     match maybe_tls_key() {\n         Some(key) => key,\n@@ -155,7 +252,8 @@ fn tls_key() -> tls::Key {\n }\n \n #[inline]\n-#[cfg(not(test))]\n+#[cfg(not(test), stage0)]\n+#[cfg(not(test), windows)]\n pub fn maybe_tls_key() -> Option<tls::Key> {\n     unsafe {\n         // NB: This is a little racy because, while the key is\n@@ -176,11 +274,9 @@ pub fn maybe_tls_key() -> Option<tls::Key> {\n     }\n }\n \n-// XXX: The boundary between the running runtime and the testing runtime\n-// seems to be fuzzy at the moment, and trying to use two different keys\n-// results in disaster. This should not be necessary.\n #[inline]\n-#[cfg(test)]\n+#[cfg(test, stage0)]\n+#[cfg(test, windows)]\n pub fn maybe_tls_key() -> Option<tls::Key> {\n     unsafe { ::cast::transmute(::realstd::rt::shouldnt_be_public::maybe_tls_key()) }\n }"}, {"sha": "1d2742fd0294cdbfb582990d5e92f714f4183cf6", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cf3d8adf2cbdf760063a247162a558e68fe35fd/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf3d8adf2cbdf760063a247162a558e68fe35fd/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=2cf3d8adf2cbdf760063a247162a558e68fe35fd", "patch": "@@ -95,7 +95,11 @@ pub use self::kill::BlockedTask;\n pub mod shouldnt_be_public {\n     pub use super::select::SelectInner;\n     pub use super::select::{SelectInner, SelectPortInner};\n+    #[cfg(stage0)]\n+    #[cfg(windows)]\n     pub use super::local_ptr::maybe_tls_key;\n+    #[cfg(not(stage0), not(windows))]\n+    pub use super::local_ptr::RT_TLS_PTR;\n }\n \n // Internal macros used by the runtime."}]}