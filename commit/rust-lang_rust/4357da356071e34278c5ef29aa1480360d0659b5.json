{"sha": "4357da356071e34278c5ef29aa1480360d0659b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNTdkYTM1NjA3MWUzNDI3OGM1ZWYyOWFhMTQ4MDM2MGQwNjU5YjU=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-22T09:07:49Z"}, "committer": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-22T09:07:49Z"}, "message": "doc: Fill vec documentation with examples.\n\nAdd more useful functions to main example.", "tree": {"sha": "1c22ce98813b90f928400e82ec183787270a956e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c22ce98813b90f928400e82ec183787270a956e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4357da356071e34278c5ef29aa1480360d0659b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4357da356071e34278c5ef29aa1480360d0659b5", "html_url": "https://github.com/rust-lang/rust/commit/4357da356071e34278c5ef29aa1480360d0659b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4357da356071e34278c5ef29aa1480360d0659b5/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c004bebc9ef12b5d6c24d0d482344ad485f2050b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c004bebc9ef12b5d6c24d0d482344ad485f2050b", "html_url": "https://github.com/rust-lang/rust/commit/c004bebc9ef12b5d6c24d0d482344ad485f2050b"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "707732557f48a1687c6fa0ad0ab7f2d52189a4a9", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/4357da356071e34278c5ef29aa1480360d0659b5/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4357da356071e34278c5ef29aa1480360d0659b5/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=4357da356071e34278c5ef29aa1480360d0659b5", "patch": "@@ -46,6 +46,16 @@ pub static PTR_MARKER: u8 = 0;\n ///\n /// assert_eq!(vec.pop(), Some(2));\n /// assert_eq!(vec.len(), 1);\n+///\n+/// *vec.get_mut(0) = 7i;\n+/// assert_eq!(vec[0], 7);\n+///\n+/// vec.push_all([1, 2, 3]);\n+///\n+/// for x in vec.iter() {\n+///     println!(\"{}\", x);\n+/// }\n+/// assert_eq!(vec, vec![7i, 1, 2, 3]);\n /// ```\n ///\n /// The `vec!` macro is provided to make initialization more convenient:\n@@ -56,6 +66,25 @@ pub static PTR_MARKER: u8 = 0;\n /// assert_eq!(vec, vec![1, 2, 3, 4]);\n /// ```\n ///\n+/// Use a `Vec` as an efficient stack:\n+///\n+/// ```\n+/// let mut stack = Vec::new();\n+///\n+/// stack.push(1i);\n+/// stack.push(2i);\n+/// stack.push(3i);\n+///\n+/// loop {\n+///     let top = match stack.pop() {\n+///         None => break, // empty\n+///         Some(x) => x,\n+///     };\n+///     // Prints 3, 2, 1\n+///     println!(\"{}\", top);\n+/// }\n+/// ```\n+///\n /// # Capacity and reallocation\n ///\n /// The capacity of a vector is the amount of space allocated for any future\n@@ -766,6 +795,15 @@ impl<T> Vec<T> {\n     /// This will explicitly set the size of the vector, without actually\n     /// modifying its buffers, so it is up to the caller to ensure that the\n     /// vector is actually the specified size.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut v = vec![1u, 2, 3, 4];\n+    /// unsafe {\n+    ///     v.set_len(1);\n+    /// }\n+    /// ```\n     #[inline]\n     pub unsafe fn set_len(&mut self, len: uint) {\n         self.len = len;\n@@ -1237,7 +1275,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let vec = vec![1i, 2, 3];\n+    /// let vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.slice_to(2) == [1, 2]);\n     /// ```\n     #[inline]\n@@ -1250,6 +1288,13 @@ impl<T> Vec<T> {\n     /// # Failure\n     ///\n     /// Fails if the vector is empty\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let vec = vec![1i, 2, 3];\n+    /// assert!(vec.init() == [1, 2]);\n+    /// ```\n     #[inline]\n     pub fn init<'a>(&'a self) -> &'a [T] {\n         self.slice(0, self.len() - 1)\n@@ -1263,6 +1308,19 @@ impl<T> Vec<T> {\n     ///\n     /// Modifying the vector may cause its buffer to be reallocated, which\n     /// would also make any pointers to it invalid.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::vec::raw;\n+    ///\n+    /// let v = vec![1i, 2, 3];\n+    /// let p = v.as_ptr();\n+    /// unsafe {\n+    ///     let b = raw::from_buf(p, 3u);\n+    ///     assert_eq!(b, vec![1i, 2, 3]);\n+    /// }\n+    /// ```\n     #[inline]\n     pub fn as_ptr(&self) -> *const T {\n         self.ptr as *const T\n@@ -1275,6 +1333,19 @@ impl<T> Vec<T> {\n     ///\n     /// Modifying the vector may cause its buffer to be reallocated, which\n     /// would also make any pointers to it invalid.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::ptr;\n+    ///\n+    /// let mut v = vec![1i, 2, 3];\n+    /// let p = v.as_mut_ptr();\n+    /// unsafe {\n+    ///     ptr::write(p, 9i);\n+    /// }\n+    /// assert_eq!(v, vec![9i, 2, 3]);\n+    /// ```\n     #[inline]\n     pub fn as_mut_ptr(&mut self) -> *mut T {\n         self.ptr"}]}