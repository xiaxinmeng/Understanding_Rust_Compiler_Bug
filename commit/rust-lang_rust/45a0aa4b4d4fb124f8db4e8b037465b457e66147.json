{"sha": "45a0aa4b4d4fb124f8db4e8b037465b457e66147", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YTBhYTRiNGQ0ZmIxMjRmOGRiNGU4YjAzNzQ2NWI0NTdlNjYxNDc=", "commit": {"author": {"name": "Alec Theriault", "email": "alec.theriault@gmail.com", "date": "2017-11-05T17:28:00Z"}, "committer": {"name": "Alec Theriault", "email": "alec.theriault@gmail.com", "date": "2017-11-05T17:45:06Z"}, "message": "Pretty print parens around casts on the LHS of '<'\n\nWhen pretty printing a cast expression occuring on the LHS of a '<'\nor '<<' expression, we should add parens around the cast. Otherwise,\nthe '<'/'<<' gets interpreted as the beginning of the generics for\nthe type on the RHS of the cast.", "tree": {"sha": "8b55f099cedf2a099f0d129102e4cabb0da4377a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b55f099cedf2a099f0d129102e4cabb0da4377a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45a0aa4b4d4fb124f8db4e8b037465b457e66147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45a0aa4b4d4fb124f8db4e8b037465b457e66147", "html_url": "https://github.com/rust-lang/rust/commit/45a0aa4b4d4fb124f8db4e8b037465b457e66147", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45a0aa4b4d4fb124f8db4e8b037465b457e66147/comments", "author": {"login": "harpocrates", "id": 10766081, "node_id": "MDQ6VXNlcjEwNzY2MDgx", "avatar_url": "https://avatars.githubusercontent.com/u/10766081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harpocrates", "html_url": "https://github.com/harpocrates", "followers_url": "https://api.github.com/users/harpocrates/followers", "following_url": "https://api.github.com/users/harpocrates/following{/other_user}", "gists_url": "https://api.github.com/users/harpocrates/gists{/gist_id}", "starred_url": "https://api.github.com/users/harpocrates/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harpocrates/subscriptions", "organizations_url": "https://api.github.com/users/harpocrates/orgs", "repos_url": "https://api.github.com/users/harpocrates/repos", "events_url": "https://api.github.com/users/harpocrates/events{/privacy}", "received_events_url": "https://api.github.com/users/harpocrates/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harpocrates", "id": 10766081, "node_id": "MDQ6VXNlcjEwNzY2MDgx", "avatar_url": "https://avatars.githubusercontent.com/u/10766081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harpocrates", "html_url": "https://github.com/harpocrates", "followers_url": "https://api.github.com/users/harpocrates/followers", "following_url": "https://api.github.com/users/harpocrates/following{/other_user}", "gists_url": "https://api.github.com/users/harpocrates/gists{/gist_id}", "starred_url": "https://api.github.com/users/harpocrates/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harpocrates/subscriptions", "organizations_url": "https://api.github.com/users/harpocrates/orgs", "repos_url": "https://api.github.com/users/harpocrates/repos", "events_url": "https://api.github.com/users/harpocrates/events{/privacy}", "received_events_url": "https://api.github.com/users/harpocrates/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59d484575a714291481563d13ad058b9a3d31fa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/59d484575a714291481563d13ad058b9a3d31fa8", "html_url": "https://github.com/rust-lang/rust/commit/59d484575a714291481563d13ad058b9a3d31fa8"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "54f66453db87d22571733d73d1b2df0767c69746", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45a0aa4b4d4fb124f8db4e8b037465b457e66147/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a0aa4b4d4fb124f8db4e8b037465b457e66147/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=45a0aa4b4d4fb124f8db4e8b037465b457e66147", "patch": "@@ -1253,6 +1253,15 @@ impl<'a> State<'a> {\n             Fixity::None => (prec + 1, prec + 1),\n         };\n \n+        let left_prec = match (&lhs.node, op.node) {\n+            // These cases need parens: `x as i32 < y` has the parser thinking that `i32 < y` is\n+            // the beginning of a path type. It starts trying to parse `x as (i32 < y ...` instead\n+            // of `(x as i32) < ...`. We need to convince it _not_ to do that.\n+            (&hir::ExprCast { .. }, hir::BinOp_::BiLt) |\n+            (&hir::ExprCast { .. }, hir::BinOp_::BiShl) => parser::PREC_FORCE_PAREN,\n+            _ => left_prec,\n+        };\n+\n         self.print_expr_maybe_paren(lhs, left_prec)?;\n         self.s.space()?;\n         self.word_space(op.node.as_str())?;"}, {"sha": "e6ffbb2cce9f3d0a322f0124578df53fbafd029a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45a0aa4b4d4fb124f8db4e8b037465b457e66147/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a0aa4b4d4fb124f8db4e8b037465b457e66147/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=45a0aa4b4d4fb124f8db4e8b037465b457e66147", "patch": "@@ -1986,6 +1986,15 @@ impl<'a> State<'a> {\n             Fixity::None => (prec + 1, prec + 1),\n         };\n \n+        let left_prec = match (&lhs.node, op.node) {\n+            // These cases need parens: `x as i32 < y` has the parser thinking that `i32 < y` is\n+            // the beginning of a path type. It starts trying to parse `x as (i32 < y ...` instead\n+            // of `(x as i32) < ...`. We need to convince it _not_ to do that.\n+            (&ast::ExprKind::Cast { .. }, ast::BinOpKind::Lt) |\n+            (&ast::ExprKind::Cast { .. }, ast::BinOpKind::Shl) => parser::PREC_FORCE_PAREN,\n+            _ => left_prec,\n+        };\n+\n         self.print_expr_maybe_paren(lhs, left_prec)?;\n         self.s.space()?;\n         self.word_space(op.node.to_string())?;"}]}