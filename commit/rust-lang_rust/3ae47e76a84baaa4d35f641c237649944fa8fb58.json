{"sha": "3ae47e76a84baaa4d35f641c237649944fa8fb58", "node_id": "C_kwDOAAsO6NoAKDNhZTQ3ZTc2YTg0YmFhYTRkMzVmNjQxYzIzNzY0OTk0NGZhOGZiNTg", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-07-06T15:38:35Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-07-06T16:06:33Z"}, "message": "Windows: Fallback for overlapped I/O\n\nTry waiting on the file handle once. If that fails then give up.", "tree": {"sha": "2545be0feb0db5f73d17d9a153bd33865b00574c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2545be0feb0db5f73d17d9a153bd33865b00574c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ae47e76a84baaa4d35f641c237649944fa8fb58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmLFswkACgkQcTRy8vRW\nJ968OA/9HJ4XW8XGqdQUv6dhpVg9N1ERTr+uyhTUmzwORFGs4AYeOtmF7fjnBRiK\nRr4abRI1VPVnbQejYUefYWhd0CHCRlJvXPJx4iPAJw/C4VGba+3un4SnuzdUp8V7\nqBfeoM1tBy9mcRtDlQZJ96TZFNXZ8hTlqasIKf28O9zgQBFmpuJQj7eQlFocmgCW\n8Wf03OIFm8ltztITjgLFBBAk+mNUF8jJzbhxJHce/u6fXAJ2LlE3QOyEY+5VoN2m\n/dmvXf2fHkaYzGvJCGIClLY3hlMcS1FDyV30GGQzI9Sqrn80C11AqfBjcSpZE4fA\nyIEJzk8t0ljF3CVMcwWI9Lm7ONVT9hsxpJvGMGmg+q/DZeDjXVNUmiUnXbHWHf8u\ncoC8IF2zBiTE3pADx4pAhK2nZyen/mDu2DWRE94l9SRFEvxRdcx6GxkNE8RKIa5H\n3oWbUJiEnLDGZBxn68soc66Cry6zIFko+TRL5/9Qg5HoBqU5sIjehWbfE+atRzun\nvMvaqMWitIwsOuOs69HkoHhPocZh+t+ewbJWcQ+9E22AvUKpZGm45fuh5PJlzteq\nv9tgCgg3C+1GqnAi70mwdojC3Gnrpoo9mBe3oXQ6NSMMWNnRQtxtKNN4EZe7lTOy\nDLKxkkX7pnkgsYGmGQq0UHXdl+YkGHAOkiZFdx1/Dtsis1M3x1s=\n=l2Bs\n-----END PGP SIGNATURE-----", "payload": "tree 2545be0feb0db5f73d17d9a153bd33865b00574c\nparent ae60dbdcac2c4c94293980cdb6872228fc4d8aa9\nauthor Chris Denton <christophersdenton@gmail.com> 1657121915 +0100\ncommitter Chris Denton <christophersdenton@gmail.com> 1657123593 +0100\n\nWindows: Fallback for overlapped I/O\n\nTry waiting on the file handle once. If that fails then give up.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae47e76a84baaa4d35f641c237649944fa8fb58", "html_url": "https://github.com/rust-lang/rust/commit/3ae47e76a84baaa4d35f641c237649944fa8fb58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ae47e76a84baaa4d35f641c237649944fa8fb58/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae60dbdcac2c4c94293980cdb6872228fc4d8aa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae60dbdcac2c4c94293980cdb6872228fc4d8aa9", "html_url": "https://github.com/rust-lang/rust/commit/ae60dbdcac2c4c94293980cdb6872228fc4d8aa9"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "c7a42ef9a93823a86815c0da7e04cd0575b9e2ba", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3ae47e76a84baaa4d35f641c237649944fa8fb58/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae47e76a84baaa4d35f641c237649944fa8fb58/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=3ae47e76a84baaa4d35f641c237649944fa8fb58", "patch": "@@ -326,7 +326,9 @@ union IO_STATUS_BLOCK_union {\n }\n impl Default for IO_STATUS_BLOCK_union {\n     fn default() -> Self {\n-        Self { Pointer: ptr::null_mut() }\n+        let mut this = Self { Pointer: ptr::null_mut() };\n+        this.Status = STATUS_PENDING;\n+        this\n     }\n }\n #[repr(C)]\n@@ -335,6 +337,16 @@ pub struct IO_STATUS_BLOCK {\n     u: IO_STATUS_BLOCK_union,\n     pub Information: usize,\n }\n+impl IO_STATUS_BLOCK {\n+    pub fn status(&self) -> NTSTATUS {\n+        // SAFETY: If `self.u.Status` was set then this is obviously safe.\n+        // If `self.u.Pointer` was set then this is the equivalent to converting\n+        // the pointer to an integer, which is also safe.\n+        // Currently the only safe way to construct `IO_STATUS_BLOCK` outside of\n+        // this module is to call the `default` method, which sets the `Status`.\n+        unsafe { self.u.Status }\n+    }\n+}\n \n pub type LPOVERLAPPED_COMPLETION_ROUTINE = unsafe extern \"system\" fn(\n     dwErrorCode: DWORD,"}, {"sha": "6dd022b0806ba8ad016084209dbd2868966ca81c", "filename": "library/std/src/sys/windows/handle.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3ae47e76a84baaa4d35f641c237649944fa8fb58/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae47e76a84baaa4d35f641c237649944fa8fb58/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs?ref=3ae47e76a84baaa4d35f641c237649944fa8fb58", "patch": "@@ -248,6 +248,13 @@ impl Handle {\n             offset.map(|n| n as _).as_ref(),\n             None,\n         );\n+\n+        let status = if status == c::STATUS_PENDING {\n+            c::WaitForSingleObject(self.as_raw_handle(), c::INFINITE);\n+            io_status.status()\n+        } else {\n+            status\n+        };\n         match status {\n             // If the operation has not completed then abort the process.\n             // Doing otherwise means that the buffer and stack may be written to\n@@ -291,6 +298,12 @@ impl Handle {\n                 None,\n             )\n         };\n+        let status = if status == c::STATUS_PENDING {\n+            unsafe { c::WaitForSingleObject(self.as_raw_handle(), c::INFINITE) };\n+            io_status.status()\n+        } else {\n+            status\n+        };\n         match status {\n             // If the operation has not completed then abort the process.\n             // Doing otherwise means that the buffer may be read and the stack"}]}