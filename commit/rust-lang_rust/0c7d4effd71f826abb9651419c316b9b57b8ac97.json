{"sha": "0c7d4effd71f826abb9651419c316b9b57b8ac97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjN2Q0ZWZmZDcxZjgyNmFiYjk2NTE0MTljMzE2YjliNTdiOGFjOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-06T02:09:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-06T02:09:01Z"}, "message": "Auto merge of #83592 - nagisa:nagisa/dso_local, r=davidtwco\n\nSet dso_local for hidden, private and local items\n\nThis should probably have no real effect in most cases, as e.g. `hidden`\nvisibility already implies `dso_local` (or at least LLVM IR does not\npreserve the `dso_local` setting if the item is already `hidden`), but\nit should fix `-Crelocation-model=static` and improve codegen in\nexecutables.\n\nNote that this PR does not exhaustively port the logic in [clang], only the\nportion that is necessary to fix a regression from LLVM 12 that relates to\n`-Crelocation_model=static`.\n\nFixes #83335\n\n[clang]: https://github.com/llvm/llvm-project/blob/3001d080c813da20b329303bf8f45451480e5905/clang/lib/CodeGen/CodeGenModule.cpp#L945-L1039", "tree": {"sha": "f8eadbfde709194baee1cbb5979f21a166568cce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8eadbfde709194baee1cbb5979f21a166568cce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c7d4effd71f826abb9651419c316b9b57b8ac97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c7d4effd71f826abb9651419c316b9b57b8ac97", "html_url": "https://github.com/rust-lang/rust/commit/0c7d4effd71f826abb9651419c316b9b57b8ac97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c7d4effd71f826abb9651419c316b9b57b8ac97/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e6b478a5a146ad77ae4340ce379e1674c35ad69", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e6b478a5a146ad77ae4340ce379e1674c35ad69", "html_url": "https://github.com/rust-lang/rust/commit/8e6b478a5a146ad77ae4340ce379e1674c35ad69"}, {"sha": "2f000a78bf615b35c4837f920fb6adcad4848351", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f000a78bf615b35c4837f920fb6adcad4848351", "html_url": "https://github.com/rust-lang/rust/commit/2f000a78bf615b35c4837f920fb6adcad4848351"}], "stats": {"total": 343, "additions": 221, "deletions": 122}, "files": [{"sha": "af895ccc0369de781011138359f7bff6a734d954", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -254,6 +254,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n         attributes::emit_uwtable(llfn, true);\n     }\n \n+    // FIXME: none of these three functions interact with source level attributes.\n     set_frame_pointer_elimination(cx, llfn);\n     set_instrument_function(cx, llfn);\n     set_probestack(cx, llfn);"}, {"sha": "b26969a50120f1de8369b073739933d77ffafbfa", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -14,6 +14,7 @@ use tracing::debug;\n \n use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt};\n use rustc_middle::ty::{self, Instance, TypeFoldable};\n+use rustc_target::spec::RelocModel;\n \n /// Codegens a reference to a fn/method item, monomorphizing and\n /// inlining as it goes.\n@@ -170,17 +171,19 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n                     }\n                 }\n             }\n-        }\n \n-        // MinGW: For backward compatibility we rely on the linker to decide whether it\n-        // should use dllimport for functions.\n-        if cx.use_dll_storage_attrs\n-            && tcx.is_dllimport_foreign_item(instance_def_id)\n-            && tcx.sess.target.env != \"gnu\"\n-        {\n-            unsafe {\n+            // MinGW: For backward compatibility we rely on the linker to decide whether it\n+            // should use dllimport for functions.\n+            if cx.use_dll_storage_attrs\n+                && tcx.is_dllimport_foreign_item(instance_def_id)\n+                && tcx.sess.target.env != \"gnu\"\n+            {\n                 llvm::LLVMSetDLLStorageClass(llfn, llvm::DLLStorageClass::DllImport);\n             }\n+\n+            if cx.tcx.sess.relocation_model() == RelocModel::Static {\n+                llvm::LLVMRustSetDSOLocal(llfn, true);\n+            }\n         }\n \n         llfn"}, {"sha": "70f78c07c65ddcdfcd325ff264bc80f42a7314ac", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -1013,6 +1013,7 @@ extern \"C\" {\n     pub fn LLVMSetSection(Global: &Value, Section: *const c_char);\n     pub fn LLVMRustGetVisibility(Global: &Value) -> Visibility;\n     pub fn LLVMRustSetVisibility(Global: &Value, Viz: Visibility);\n+    pub fn LLVMRustSetDSOLocal(Global: &Value, is_dso_local: bool);\n     pub fn LLVMGetAlignment(Global: &Value) -> c_uint;\n     pub fn LLVMSetAlignment(Global: &Value, Bytes: c_uint);\n     pub fn LLVMSetDLLStorageClass(V: &Value, C: DLLStorageClass);"}, {"sha": "fc1f364e9c6bc9baee49a661c6b8a4a4dd31774c", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -10,7 +10,9 @@ pub use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n use rustc_middle::ty::layout::FnAbiExt;\n use rustc_middle::ty::{self, Instance, TypeFoldable};\n+use rustc_session::config::CrateType;\n use rustc_target::abi::LayoutOf;\n+use rustc_target::spec::RelocModel;\n use tracing::debug;\n \n impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n@@ -35,6 +37,9 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         unsafe {\n             llvm::LLVMRustSetLinkage(g, base::linkage_to_llvm(linkage));\n             llvm::LLVMRustSetVisibility(g, base::visibility_to_llvm(visibility));\n+            if self.should_assume_dso_local(linkage, visibility) {\n+                llvm::LLVMRustSetDSOLocal(g, true);\n+            }\n         }\n \n         self.instances.borrow_mut().insert(instance, g);\n@@ -79,6 +84,42 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         attributes::from_fn_attrs(self, lldecl, instance);\n \n+        unsafe {\n+            if self.should_assume_dso_local(linkage, visibility) {\n+                llvm::LLVMRustSetDSOLocal(lldecl, true);\n+            }\n+        }\n+\n         self.instances.borrow_mut().insert(instance, lldecl);\n     }\n }\n+\n+impl CodegenCx<'ll, 'tcx> {\n+    /// Whether a definition (NB: not declaration!) can be assumed to be local to a group of\n+    /// libraries that form a single DSO or executable.\n+    pub(crate) unsafe fn should_assume_dso_local(\n+        &self,\n+        linkage: Linkage,\n+        visibility: Visibility,\n+    ) -> bool {\n+        if matches!(linkage, Linkage::Internal | Linkage::Private) {\n+            return true;\n+        }\n+\n+        if visibility != Visibility::Default && linkage != Linkage::ExternalWeak {\n+            return true;\n+        }\n+\n+        // Static relocation model should force copy relocations everywhere.\n+        if self.tcx.sess.relocation_model() == RelocModel::Static {\n+            return true;\n+        }\n+\n+        // Symbols from executables can't really be imported any further.\n+        if self.tcx.sess.crate_types().iter().all(|ty| *ty == CrateType::Executable) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+}"}, {"sha": "d6db69c748fb568aaa339ae8e01046920d3156b0", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -1636,6 +1636,10 @@ extern \"C\" void LLVMRustSetVisibility(LLVMValueRef V,\n   LLVMSetVisibility(V, fromRust(RustVisibility));\n }\n \n+extern \"C\" void LLVMRustSetDSOLocal(LLVMValueRef Global, bool is_dso_local) {\n+  unwrap<GlobalValue>(Global)->setDSOLocal(is_dso_local);\n+}\n+\n struct LLVMRustModuleBuffer {\n   std::string data;\n };"}, {"sha": "0463045c15686de516718cf1b2304bbee9bcbe8e", "filename": "src/test/assembly/static-relocation-model.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fassembly%2Fstatic-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fassembly%2Fstatic-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fstatic-relocation-model.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -0,0 +1,44 @@\n+// min-llvm-version: 12.0.0\n+// needs-llvm-components: aarch64 x86\n+// revisions:X64 A64\n+// assembly-output: emit-asm\n+// [X64] compile-flags: --target x86_64-unknown-linux-gnu -Crelocation-model=static\n+// [A64] compile-flags: --target aarch64-unknown-linux-gnu -Crelocation-model=static\n+\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+#![crate_type=\"rlib\"]\n+\n+#[lang=\"sized\"]\n+trait Sized {}\n+\n+#[lang=\"copy\"]\n+trait Copy {}\n+\n+impl Copy for u8 {}\n+\n+extern \"C\" {\n+    fn chaenomeles();\n+}\n+\n+// CHECK-LABEL: banana:\n+// x64: movb    chaenomeles, %{{[a,z]+}}\n+// A64:      adrp    [[REG:[a-z0-9]+]], chaenomeles\n+// A64-NEXT: ldrb    {{[a-z0-9]+}}, {{\\[}}[[REG]], :lo12:chaenomeles]\n+#[no_mangle]\n+pub fn banana() -> u8 {\n+    unsafe {\n+        *(chaenomeles as *mut u8)\n+    }\n+}\n+\n+// CHECK-LABEL: peach:\n+// x64: movb    banana, %{{[a,z]+}}\n+// A64:      adrp    [[REG2:[a-z0-9]+]], banana\n+// A64-NEXT: ldrb    {{[a-z0-9]+}}, {{\\[}}[[REG2]], :lo12:banana]\n+#[no_mangle]\n+pub fn peach() -> u8 {\n+    unsafe {\n+        *(banana as *mut u8)\n+    }\n+}"}, {"sha": "613b0bf50e5343806089dc2485a64b5f285b9149", "filename": "src/test/codegen/abi-efiapi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -23,8 +23,8 @@ trait Copy { }\n \n //x86_64: define win64cc void @has_efiapi\n //i686: define void @has_efiapi\n-//aarch64: define void @has_efiapi\n-//arm: define void @has_efiapi\n-//riscv: define void @has_efiapi\n+//aarch64: define dso_local void @has_efiapi\n+//arm: define dso_local void @has_efiapi\n+//riscv: define dso_local void @has_efiapi\n #[no_mangle]\n pub extern \"efiapi\" fn has_efiapi() {}"}, {"sha": "9dba1718acd8b2f03c9e82022c1f96f961dc39a2", "filename": "src/test/codegen/abi-repr-ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fabi-repr-ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fabi-repr-ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-repr-ext.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -6,7 +6,7 @@ pub enum Type {\n     Type2 = 1\n }\n \n-// CHECK: define signext i8 @test()\n+// CHECK: define{{( dso_local)?}} signext i8 @test()\n #[no_mangle]\n pub extern \"C\" fn test() -> Type {\n     Type::Type1"}, {"sha": "bb910d573b33818e78a40f35b65cffccb33e27f0", "filename": "src/test/codegen/abi-sysv64.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fabi-sysv64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fabi-sysv64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-sysv64.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -1,17 +1,21 @@\n // Checks if the correct annotation for the sysv64 ABI is passed to\n // llvm. Also checks that the abi-sysv64 feature gate allows usage\n // of the sysv64 abi.\n-\n-// ignore-arm\n-// ignore-aarch64\n-// ignore-riscv64 sysv64 not supported\n-\n-// compile-flags: -C no-prepopulate-passes\n+//\n+// needs-llvm-components: x86\n+// compile-flags: -C no-prepopulate-passes --target=x86_64-unknown-linux-gnu\n \n #![crate_type = \"lib\"]\n+#![no_core]\n+#![feature(abi_x86_interrupt, no_core, lang_items)]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n \n // CHECK: define x86_64_sysvcc i64 @has_sysv64_abi\n #[no_mangle]\n pub extern \"sysv64\" fn has_sysv64_abi(a: i64) -> i64 {\n-    a * 2\n+    a\n }"}, {"sha": "119004d261d60ed07d4e522cf833844b094248ab", "filename": "src/test/codegen/abi-x86-interrupt.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fabi-x86-interrupt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fabi-x86-interrupt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-x86-interrupt.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -2,17 +2,20 @@\n // llvm. Also checks that the abi_x86_interrupt feature gate allows usage\n // of the x86-interrupt abi.\n \n-// ignore-arm\n-// ignore-aarch64\n-// ignore-riscv64 x86-interrupt is not supported\n-\n-// compile-flags: -C no-prepopulate-passes\n+// needs-llvm-components: x86\n+// compile-flags: -C no-prepopulate-passes --target=x86_64-unknown-linux-gnu\n \n #![crate_type = \"lib\"]\n-#![feature(abi_x86_interrupt)]\n+#![no_core]\n+#![feature(abi_x86_interrupt, no_core, lang_items)]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n \n // CHECK: define x86_intrcc i64 @has_x86_interrupt_abi\n #[no_mangle]\n pub extern \"x86-interrupt\" fn has_x86_interrupt_abi(a: i64) -> i64 {\n-    a * 2\n+    a\n }"}, {"sha": "9118afd43d88b3ee09098def716a4dd55353f8ac", "filename": "src/test/codegen/cdylib-external-inline-fns.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fcdylib-external-inline-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fcdylib-external-inline-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcdylib-external-inline-fns.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -2,42 +2,42 @@\n \n #![crate_type = \"cdylib\"]\n \n-// CHECK: define void @a()\n+// CHECK: define{{( dso_local)?}} void @a()\n #[no_mangle]\n #[inline]\n pub extern \"C\" fn a() {}\n \n-// CHECK: define void @b()\n+// CHECK: define{{( dso_local)?}} void @b()\n #[export_name = \"b\"]\n #[inline]\n pub extern \"C\" fn b() {}\n \n-// CHECK: define void @c()\n+// CHECK: define{{( dso_local)?}} void @c()\n #[no_mangle]\n #[inline]\n extern \"C\" fn c() {}\n \n-// CHECK: define void @d()\n+// CHECK: define{{( dso_local)?}} void @d()\n #[export_name = \"d\"]\n #[inline]\n extern \"C\" fn d() {}\n \n-// CHECK: define void @e()\n+// CHECK: define{{( dso_local)?}} void @e()\n #[no_mangle]\n #[inline(always)]\n pub extern \"C\" fn e() {}\n \n-// CHECK: define void @f()\n+// CHECK: define{{( dso_local)?}} void @f()\n #[export_name = \"f\"]\n #[inline(always)]\n pub extern \"C\" fn f() {}\n \n-// CHECK: define void @g()\n+// CHECK: define{{( dso_local)?}} void @g()\n #[no_mangle]\n #[inline(always)]\n extern \"C\" fn g() {}\n \n-// CHECK: define void @h()\n+// CHECK: define{{( dso_local)?}} void @h()\n #[export_name = \"h\"]\n #[inline(always)]\n extern \"C\" fn h() {}"}, {"sha": "3812ef44ff2ac3e1f5c606d59b07a7dcd0a27314", "filename": "src/test/codegen/dealloc-no-unwind.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fdealloc-no-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fdealloc-no-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdealloc-no-unwind.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -1,4 +1,3 @@\n-//\n // no-system-llvm\n // compile-flags: -O\n \n@@ -15,7 +14,7 @@ impl Drop for A {\n \n #[no_mangle]\n pub fn a(a: Box<i32>) {\n-    // CHECK-LABEL: define void @a\n+    // CHECK-LABEL: define{{.*}}void @a\n     // CHECK: call void @__rust_dealloc\n     // CHECK-NEXT: call void @foo\n     let _a = A;"}, {"sha": "70349b2ec4f6b6cd4d7550b38fa0b9df7d88f104", "filename": "src/test/codegen/external-no-mangle-fns.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -4,30 +4,30 @@\n #![crate_type = \"lib\"]\n #![no_std]\n \n-// CHECK: define void @a()\n+// CHECK: define{{( dso_local)?}} void @a()\n #[no_mangle]\n fn a() {}\n \n-// CHECK: define void @b()\n+// CHECK: define{{( dso_local)?}} void @b()\n #[no_mangle]\n pub fn b() {}\n \n mod private {\n-    // CHECK: define void @c()\n+    // CHECK: define{{( dso_local)?}} void @c()\n     #[no_mangle]\n     fn c() {}\n \n-    // CHECK: define void @d()\n+    // CHECK: define{{( dso_local)?}} void @d()\n     #[no_mangle]\n     pub fn d() {}\n }\n \n const HIDDEN: () = {\n-    // CHECK: define void @e()\n+    // CHECK: define{{( dso_local)?}} void @e()\n     #[no_mangle]\n     fn e() {}\n \n-    // CHECK: define void @f()\n+    // CHECK: define{{( dso_local)?}} void @f()\n     #[no_mangle]\n     pub fn f() {}\n };\n@@ -38,13 +38,13 @@ const HIDDEN: () = {\n // CHECK-NEXT: define internal\n #[inline(never)]\n fn x() {\n-    // CHECK: define void @g()\n+    // CHECK: define{{( dso_local)?}} void @g()\n     #[no_mangle]\n     fn g() {\n         x();\n     }\n \n-    // CHECK: define void @h()\n+    // CHECK: define{{( dso_local)?}} void @h()\n     #[no_mangle]\n     pub fn h() {}\n \n@@ -54,22 +54,22 @@ fn x() {\n     }\n }\n \n-// CHECK: define void @i()\n+// CHECK: define{{( dso_local)?}} void @i()\n #[no_mangle]\n #[inline]\n fn i() {}\n \n-// CHECK: define void @j()\n+// CHECK: define{{( dso_local)?}} void @j()\n #[no_mangle]\n #[inline]\n pub fn j() {}\n \n-// CHECK: define void @k()\n+// CHECK: define{{( dso_local)?}} void @k()\n #[no_mangle]\n #[inline(always)]\n fn k() {}\n \n-// CHECK: define void @l()\n+// CHECK: define{{( dso_local)?}} void @l()\n #[no_mangle]\n #[inline(always)]\n pub fn l() {}"}, {"sha": "7307e0379dfa042eb02b7484b556f2393b61c590", "filename": "src/test/codegen/fewer-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Ffewer-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Ffewer-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffewer-names.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -7,11 +7,11 @@\n \n #[no_mangle]\n pub fn sum(x: u32, y: u32) -> u32 {\n-// YES-LABEL: define i32 @sum(i32 %0, i32 %1)\n+// YES-LABEL: define{{.*}}i32 @sum(i32 %0, i32 %1)\n // YES-NEXT:    %3 = add i32 %1, %0\n // YES-NEXT:    ret i32 %3\n \n-// NO-LABEL: define i32 @sum(i32 %x, i32 %y)\n+// NO-LABEL: define{{.*}}i32 @sum(i32 %x, i32 %y)\n // NO-NEXT:  start:\n // NO-NEXT:    %z = add i32 %y, %x\n // NO-NEXT:    ret i32 %z"}, {"sha": "d9cfa5429b5bb72031bfe75ef70bc601f3452e83", "filename": "src/test/codegen/ffi-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fffi-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fffi-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fffi-const.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -5,7 +5,7 @@\n pub fn bar() { unsafe { foo() } }\n \n extern \"C\" {\n-    // CHECK-LABEL: declare void @foo()\n+    // CHECK-LABEL: declare{{.*}}void @foo()\n     // CHECK-SAME: [[ATTRS:#[0-9]+]]\n     // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}readnone{{.*}} }\n     #[ffi_const] pub fn foo();"}, {"sha": "5bdb2ee912a1787cff744480e72c21d81aad5d01", "filename": "src/test/codegen/ffi-pure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fffi-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fffi-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fffi-pure.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -5,7 +5,7 @@\n pub fn bar() { unsafe { foo() } }\n \n extern \"C\" {\n-    // CHECK-LABEL: declare void @foo()\n+    // CHECK-LABEL: declare{{.*}}void @foo()\n     // CHECK-SAME: [[ATTRS:#[0-9]+]]\n     // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}readonly{{.*}} }\n     #[ffi_pure] pub fn foo();"}, {"sha": "0fbe03f0bb6f1338226552b57b4c58630bead0c1", "filename": "src/test/codegen/ffi-returns-twice.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fffi-returns-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fffi-returns-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fffi-returns-twice.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -5,8 +5,7 @@\n pub fn bar() { unsafe { foo() } }\n \n extern \"C\" {\n-    // CHECK-LABEL: declare void @foo()\n-    // CHECK-SAME: [[ATTRS:#[0-9]+]]\n-    // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}returns_twice{{.*}} }\n+    // CHECK: declare{{( dso_local)?}} void @foo(){{.*}}[[ATTRS:#[0-9]+]]\n+    // CHECK: attributes [[ATTRS]] = { {{.*}}returns_twice{{.*}} }\n     #[ffi_returns_twice] pub fn foo();\n }"}, {"sha": "d13f3e51ba4c7b77b790e874e31e7a9dff33fb37", "filename": "src/test/codegen/intrinsics/nontemporal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fintrinsics%2Fnontemporal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fintrinsics%2Fnontemporal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fintrinsics%2Fnontemporal.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -5,7 +5,7 @@\n \n #[no_mangle]\n pub fn a(a: &mut u32, b: u32) {\n-    // CHECK-LABEL: define void @a\n+    // CHECK-LABEL: define{{.*}}void @a\n     // CHECK: store i32 %b, i32* %a, align 4, !nontemporal\n     unsafe {\n         std::intrinsics::nontemporal_store(a, b);"}, {"sha": "82ba325572ab45ddfb5da2c1ef516860c1641f91", "filename": "src/test/codegen/issue-32031.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fissue-32031.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fissue-32031.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-32031.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -5,7 +5,7 @@\n #[no_mangle]\n pub struct F32(f32);\n \n-// CHECK: define float @add_newtype_f32(float %a, float %b)\n+// CHECK: define{{.*}}float @add_newtype_f32(float %a, float %b)\n #[inline(never)]\n #[no_mangle]\n pub fn add_newtype_f32(a: F32, b: F32) -> F32 {\n@@ -15,7 +15,7 @@ pub fn add_newtype_f32(a: F32, b: F32) -> F32 {\n #[no_mangle]\n pub struct F64(f64);\n \n-// CHECK: define double @add_newtype_f64(double %a, double %b)\n+// CHECK: define{{.*}}double @add_newtype_f64(double %a, double %b)\n #[inline(never)]\n #[no_mangle]\n pub fn add_newtype_f64(a: F64, b: F64) -> F64 {"}, {"sha": "3979a97dc01ba8c44b38567baf90cc240269d1f7", "filename": "src/test/codegen/lto-removes-invokes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Flto-removes-invokes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Flto-removes-invokes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flto-removes-invokes.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -10,7 +10,7 @@ fn main() {\n fn foo() {\n     let _a = Box::new(3);\n     bar();\n-// CHECK-LABEL: define void @foo\n+// CHECK-LABEL: define dso_local void @foo\n // CHECK: call void @bar\n }\n "}, {"sha": "c8cd69232821e12a61d34cddefece4a322670aac", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -4,7 +4,7 @@\n #![feature(naked_functions)]\n \n // CHECK: Function Attrs: naked\n-// CHECK-NEXT: define void @naked_empty()\n+// CHECK-NEXT: define{{.*}}void @naked_empty()\n #[no_mangle]\n #[naked]\n pub fn naked_empty() {\n@@ -15,14 +15,14 @@ pub fn naked_empty() {\n // CHECK: Function Attrs: naked\n #[no_mangle]\n #[naked]\n-// CHECK-NEXT: define void @naked_with_args(i{{[0-9]+( %a)?}})\n+// CHECK-NEXT: define{{.*}}void @naked_with_args(i{{[0-9]+( %a)?}})\n pub fn naked_with_args(a: isize) {\n     // CHECK-NEXT: {{.+}}:\n     // CHECK: ret void\n }\n \n // CHECK: Function Attrs: naked\n-// CHECK-NEXT: define i{{[0-9]+}} @naked_with_return()\n+// CHECK-NEXT: define{{.*}}i{{[0-9]+}} @naked_with_return()\n #[no_mangle]\n #[naked]\n pub fn naked_with_return() -> isize {\n@@ -32,7 +32,7 @@ pub fn naked_with_return() -> isize {\n }\n \n // CHECK: Function Attrs: naked\n-// CHECK-NEXT: define i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+( %a)?}})\n+// CHECK-NEXT: define{{.*}}i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+( %a)?}})\n #[no_mangle]\n #[naked]\n pub fn naked_with_args_and_return(a: isize) -> isize {"}, {"sha": "22abe06e7a9e4da1333d5dd43fc029c1c1e571dc", "filename": "src/test/codegen/optimize-attr-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Foptimize-attr-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Foptimize-attr-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Foptimize-attr-1.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -6,7 +6,7 @@\n #![feature(optimize_attribute)]\n #![crate_type=\"rlib\"]\n \n-// CHECK-LABEL: define i32 @nothing\n+// CHECK-LABEL: define{{.*}}i32 @nothing\n // CHECK-SAME: [[NOTHING_ATTRS:#[0-9]+]]\n // NO-OPT: ret i32 4\n // SIZE-OPT: ret i32 4\n@@ -16,7 +16,7 @@ pub fn nothing() -> i32 {\n     2 + 2\n }\n \n-// CHECK-LABEL: define i32 @size\n+// CHECK-LABEL: define{{.*}}i32 @size\n // CHECK-SAME: [[SIZE_ATTRS:#[0-9]+]]\n // NO-OPT: ret i32 6\n // SIZE-OPT: ret i32 6\n@@ -27,7 +27,7 @@ pub fn size() -> i32 {\n     3 + 3\n }\n \n-// CHECK-LABEL: define i32 @speed\n+// CHECK-LABEL: define{{.*}}i32 @speed\n // NO-OPT-SAME: [[NOTHING_ATTRS]]\n // SPEED-OPT-SAME: [[NOTHING_ATTRS]]\n // SIZE-OPT-SAME: [[SPEED_ATTRS:#[0-9]+]]"}, {"sha": "3017adb443252606c31bffc4b209ba76a42dd9d6", "filename": "src/test/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -34,19 +34,19 @@ pub enum TeBigS {\n     Variant(BigS),\n }\n \n-// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS1:.*]] sret(%BigS) [[BIGS_RET_ATTRS2:.*]], %BigS* [[BIGS_ARG_ATTRS1:.*]] byval(%BigS) [[BIGS_ARG_ATTRS2:.*]])\n+// CHECK: define{{.*}}void @test_BigS(%BigS* [[BIGS_RET_ATTRS1:.*]] sret(%BigS) [[BIGS_RET_ATTRS2:.*]], %BigS* [[BIGS_ARG_ATTRS1:.*]] byval(%BigS) [[BIGS_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern \"C\" fn test_BigS(_: BigS) -> BigS { loop {} }\n \n-// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS1]] sret(%TsBigS) [[BIGS_RET_ATTRS2]], %TsBigS* [[BIGS_ARG_ATTRS1]] byval(%TsBigS) [[BIGS_ARG_ATTRS2:.*]])\n+// CHECK: define{{.*}}void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS1]] sret(%TsBigS) [[BIGS_RET_ATTRS2]], %TsBigS* [[BIGS_ARG_ATTRS1]] byval(%TsBigS) [[BIGS_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern \"C\" fn test_TsBigS(_: TsBigS) -> TsBigS { loop {} }\n \n-// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS1]] sret(%TuBigS) [[BIGS_RET_ATTRS2]], %TuBigS* [[BIGS_ARG_ATTRS1]] byval(%TuBigS) [[BIGS_ARG_ATTRS2:.*]])\n+// CHECK: define{{.*}}void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS1]] sret(%TuBigS) [[BIGS_RET_ATTRS2]], %TuBigS* [[BIGS_ARG_ATTRS1]] byval(%TuBigS) [[BIGS_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern \"C\" fn test_TuBigS(_: TuBigS) -> TuBigS { loop {} }\n \n-// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS1]] sret(%\"TeBigS::Variant\") [[BIGS_RET_ATTRS2]], %\"TeBigS::Variant\"* [[BIGS_ARG_ATTRS1]] byval(%\"TeBigS::Variant\") [[BIGS_ARG_ATTRS2]])\n+// CHECK: define{{.*}}void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS1]] sret(%\"TeBigS::Variant\") [[BIGS_RET_ATTRS2]], %\"TeBigS::Variant\"* [[BIGS_ARG_ATTRS1]] byval(%\"TeBigS::Variant\") [[BIGS_ARG_ATTRS2]])\n #[no_mangle]\n pub extern \"C\" fn test_TeBigS(_: TeBigS) -> TeBigS { loop {} }\n \n@@ -70,18 +70,18 @@ pub enum TeBigU {\n     Variant(BigU),\n }\n \n-// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS1:.*]] sret(%BigU) [[BIGU_RET_ATTRS2:.*]], %BigU* [[BIGU_ARG_ATTRS1:.*]] byval(%BigU) [[BIGU_ARG_ATTRS2:.*]])\n+// CHECK: define{{.*}}void @test_BigU(%BigU* [[BIGU_RET_ATTRS1:.*]] sret(%BigU) [[BIGU_RET_ATTRS2:.*]], %BigU* [[BIGU_ARG_ATTRS1:.*]] byval(%BigU) [[BIGU_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern \"C\" fn test_BigU(_: BigU) -> BigU { loop {} }\n \n-// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS1:.*]] sret(%TsBigU) [[BIGU_RET_ATTRS2:.*]], %TsBigU* [[BIGU_ARG_ATTRS1]] byval(%TsBigU) [[BIGU_ARG_ATTRS2]])\n+// CHECK: define{{.*}}void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS1:.*]] sret(%TsBigU) [[BIGU_RET_ATTRS2:.*]], %TsBigU* [[BIGU_ARG_ATTRS1]] byval(%TsBigU) [[BIGU_ARG_ATTRS2]])\n #[no_mangle]\n pub extern \"C\" fn test_TsBigU(_: TsBigU) -> TsBigU { loop {} }\n \n-// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS1]] sret(%TuBigU) [[BIGU_RET_ATTRS2:.*]], %TuBigU* [[BIGU_ARG_ATTRS1]] byval(%TuBigU) [[BIGU_ARG_ATTRS2]])\n+// CHECK: define{{.*}}void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS1]] sret(%TuBigU) [[BIGU_RET_ATTRS2:.*]], %TuBigU* [[BIGU_ARG_ATTRS1]] byval(%TuBigU) [[BIGU_ARG_ATTRS2]])\n #[no_mangle]\n pub extern \"C\" fn test_TuBigU(_: TuBigU) -> TuBigU { loop {} }\n \n-// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS1]] sret(%\"TeBigU::Variant\") [[BIGU_RET_ATTRS2:.*]], %\"TeBigU::Variant\"* [[BIGU_ARG_ATTRS1]] byval(%\"TeBigU::Variant\") [[BIGU_ARG_ATTRS2]])\n+// CHECK: define{{.*}}void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS1]] sret(%\"TeBigU::Variant\") [[BIGU_RET_ATTRS2:.*]], %\"TeBigU::Variant\"* [[BIGU_ARG_ATTRS1]] byval(%\"TeBigU::Variant\") [[BIGU_ARG_ATTRS2]])\n #[no_mangle]\n pub extern \"C\" fn test_TeBigU(_: TeBigU) -> TeBigU { loop {} }"}, {"sha": "7add522c1589327de68b08ed4ffcc64bb72a9d28", "filename": "src/test/codegen/repr-transparent.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -17,36 +17,36 @@ pub struct Zst2(());\n #[repr(transparent)]\n pub struct F32(f32);\n \n-// CHECK: define float @test_F32(float %_1)\n+// CHECK: define{{.*}}float @test_F32(float %_1)\n #[no_mangle]\n pub extern \"C\" fn test_F32(_: F32) -> F32 { loop {} }\n \n #[repr(transparent)]\n pub struct Ptr(*mut u8);\n \n-// CHECK: define i8* @test_Ptr(i8* %_1)\n+// CHECK: define{{.*}}i8* @test_Ptr(i8* %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Ptr(_: Ptr) -> Ptr { loop {} }\n \n #[repr(transparent)]\n pub struct WithZst(u64, Zst1);\n \n-// CHECK: define i64 @test_WithZst(i64 %_1)\n+// CHECK: define{{.*}}i64 @test_WithZst(i64 %_1)\n #[no_mangle]\n pub extern \"C\" fn test_WithZst(_: WithZst) -> WithZst { loop {} }\n \n #[repr(transparent)]\n pub struct WithZeroSizedArray(*const f32, [i8; 0]);\n \n // Apparently we use i32* when newtype-unwrapping f32 pointers. Whatever.\n-// CHECK: define i32* @test_WithZeroSizedArray(i32* %_1)\n+// CHECK: define{{.*}}i32* @test_WithZeroSizedArray(i32* %_1)\n #[no_mangle]\n pub extern \"C\" fn test_WithZeroSizedArray(_: WithZeroSizedArray) -> WithZeroSizedArray { loop {} }\n \n #[repr(transparent)]\n pub struct Generic<T>(T);\n \n-// CHECK: define double @test_Generic(double %_1)\n+// CHECK: define{{.*}}double @test_Generic(double %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Generic(_: Generic<f64>) -> Generic<f64> { loop {} }\n \n@@ -56,14 +56,14 @@ pub struct GenericPlusZst<T>(T, Zst2);\n #[repr(u8)]\n pub enum Bool { True, False, FileNotFound }\n \n-// CHECK: define{{( zeroext)?}} i8 @test_Gpz(i8{{( zeroext)?}} %_1)\n+// CHECK: define{{( dso_local)?}}{{( zeroext)?}} i8 @test_Gpz(i8{{( zeroext)?}} %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Gpz(_: GenericPlusZst<Bool>) -> GenericPlusZst<Bool> { loop {} }\n \n #[repr(transparent)]\n pub struct LifetimePhantom<'a, T: 'a>(*const T, PhantomData<&'a T>);\n \n-// CHECK: define i16* @test_LifetimePhantom(i16* %_1)\n+// CHECK: define{{.*}}i16* @test_LifetimePhantom(i16* %_1)\n #[no_mangle]\n pub extern \"C\" fn test_LifetimePhantom(_: LifetimePhantom<i16>) -> LifetimePhantom<i16> { loop {} }\n \n@@ -73,28 +73,28 @@ pub struct UnitPhantom<T, U> { val: T, unit: PhantomData<U> }\n \n pub struct Px;\n \n-// CHECK: define float @test_UnitPhantom(float %_1)\n+// CHECK: define{{.*}}float @test_UnitPhantom(float %_1)\n #[no_mangle]\n pub extern \"C\" fn test_UnitPhantom(_: UnitPhantom<f32, Px>) -> UnitPhantom<f32, Px> { loop {} }\n \n #[repr(transparent)]\n pub struct TwoZsts(Zst1, i8, Zst2);\n \n-// CHECK: define{{( signext)?}} i8 @test_TwoZsts(i8{{( signext)?}} %_1)\n+// CHECK: define{{( dso_local)?}}{{( signext)?}} i8 @test_TwoZsts(i8{{( signext)?}} %_1)\n #[no_mangle]\n pub extern \"C\" fn test_TwoZsts(_: TwoZsts) -> TwoZsts { loop {} }\n \n #[repr(transparent)]\n pub struct Nested1(Zst2, Generic<f64>);\n \n-// CHECK: define double @test_Nested1(double %_1)\n+// CHECK: define{{.*}}double @test_Nested1(double %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Nested1(_: Nested1) -> Nested1 { loop {} }\n \n #[repr(transparent)]\n pub struct Nested2(Nested1, Zst1);\n \n-// CHECK: define double @test_Nested2(double %_1)\n+// CHECK: define{{.*}}double @test_Nested2(double %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Nested2(_: Nested2) -> Nested2 { loop {} }\n \n@@ -104,7 +104,7 @@ struct f32x4(f32, f32, f32, f32);\n #[repr(transparent)]\n pub struct Vector(f32x4);\n \n-// CHECK: define <4 x float> @test_Vector(<4 x float> %_1)\n+// CHECK: define{{.*}}<4 x float> @test_Vector(<4 x float> %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Vector(_: Vector) -> Vector { loop {} }\n \n@@ -114,7 +114,7 @@ impl<T: ?Sized> Mirror for T { type It = Self; }\n #[repr(transparent)]\n pub struct StructWithProjection(<f32 as Mirror>::It);\n \n-// CHECK: define float @test_Projection(float %_1)\n+// CHECK: define{{.*}}float @test_Projection(float %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Projection(_: StructWithProjection) -> StructWithProjection { loop {} }\n \n@@ -123,7 +123,7 @@ pub enum EnumF32 {\n     Variant(F32)\n }\n \n-// CHECK: define float @test_EnumF32(float %_1)\n+// CHECK: define{{.*}}float @test_EnumF32(float %_1)\n #[no_mangle]\n pub extern \"C\" fn test_EnumF32(_: EnumF32) -> EnumF32 { loop {} }\n \n@@ -132,7 +132,7 @@ pub enum EnumF32WithZsts {\n     Variant(Zst1, F32, Zst2)\n }\n \n-// CHECK: define float @test_EnumF32WithZsts(float %_1)\n+// CHECK: define{{.*}}float @test_EnumF32WithZsts(float %_1)\n #[no_mangle]\n pub extern \"C\" fn test_EnumF32WithZsts(_: EnumF32WithZsts) -> EnumF32WithZsts { loop {} }\n \n@@ -141,7 +141,7 @@ pub union UnionF32 {\n     field: F32,\n }\n \n-// CHECK: define float @test_UnionF32(float %_1)\n+// CHECK: define{{.*}}float @test_UnionF32(float %_1)\n #[no_mangle]\n pub extern \"C\" fn test_UnionF32(_: UnionF32) -> UnionF32 { loop {} }\n \n@@ -152,7 +152,7 @@ pub union UnionF32WithZsts {\n     zst2: Zst2,\n }\n \n-// CHECK: define float @test_UnionF32WithZsts(float %_1)\n+// CHECK: define{{.*}}float @test_UnionF32WithZsts(float %_1)\n #[no_mangle]\n pub extern \"C\" fn test_UnionF32WithZsts(_: UnionF32WithZsts) -> UnionF32WithZsts { loop {} }\n "}, {"sha": "7ce0fa0a20fc2ecad15669c069be8eedf0eadbdd", "filename": "src/test/codegen/sanitizer-recover.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -16,27 +16,27 @@\n // MSAN-RECOVER:     @__msan_keep_going = weak_odr {{.*}}constant i32 1\n // MSAN-RECOVER-LTO: @__msan_keep_going = weak_odr {{.*}}constant i32 1\n \n-// ASAN-LABEL: define i32 @penguin(\n+// ASAN-LABEL: define dso_local i32 @penguin(\n // ASAN:         call void @__asan_report_load4(i64 %0)\n // ASAN:         unreachable\n // ASAN:       }\n //\n-// ASAN-RECOVER-LABEL: define i32 @penguin(\n+// ASAN-RECOVER-LABEL: define dso_local i32 @penguin(\n // ASAN-RECOVER:         call void @__asan_report_load4_noabort(\n // ASAN-RECOVER-NOT:     unreachable\n // ASAN:               }\n //\n-// MSAN-LABEL: define i32 @penguin(\n+// MSAN-LABEL: define dso_local i32 @penguin(\n // MSAN:         call void @__msan_warning{{(_with_origin_noreturn\\(i32 0\\)|_noreturn\\(\\))}}\n // MSAN:         unreachable\n // MSAN:       }\n //\n-// MSAN-RECOVER-LABEL: define i32 @penguin(\n+// MSAN-RECOVER-LABEL: define dso_local i32 @penguin(\n // MSAN-RECOVER:         call void @__msan_warning{{(_with_origin\\(i32 0\\)|\\(\\))}}\n // MSAN-RECOVER-NOT:     unreachable\n // MSAN-RECOVER:       }\n //\n-// MSAN-RECOVER-LTO-LABEL: define i32 @penguin(\n+// MSAN-RECOVER-LTO-LABEL: define dso_local i32 @penguin(\n // MSAN-RECOVER-LTO:          call void @__msan_warning{{(_with_origin\\(i32 0\\)|\\(\\))}}\n // MSAN-RECOVER-LTO-NOT:      unreachable\n // MSAN-RECOVER-LTO:       }"}, {"sha": "473272158d099914f373e27f2757652e8f35add9", "filename": "src/test/codegen/scalar-pair-bool.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fscalar-pair-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fscalar-pair-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fscalar-pair-bool.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -2,25 +2,25 @@\n \n #![crate_type = \"lib\"]\n \n-// CHECK: define { i8, i8 } @pair_bool_bool(i1 zeroext %pair.0, i1 zeroext %pair.1)\n+// CHECK: define{{.*}}{ i8, i8 } @pair_bool_bool(i1 zeroext %pair.0, i1 zeroext %pair.1)\n #[no_mangle]\n pub fn pair_bool_bool(pair: (bool, bool)) -> (bool, bool) {\n     pair\n }\n \n-// CHECK: define { i8, i32 } @pair_bool_i32(i1 zeroext %pair.0, i32 %pair.1)\n+// CHECK: define{{.*}}{ i8, i32 } @pair_bool_i32(i1 zeroext %pair.0, i32 %pair.1)\n #[no_mangle]\n pub fn pair_bool_i32(pair: (bool, i32)) -> (bool, i32) {\n     pair\n }\n \n-// CHECK: define { i32, i8 } @pair_i32_bool(i32 %pair.0, i1 zeroext %pair.1)\n+// CHECK: define{{.*}}{ i32, i8 } @pair_i32_bool(i32 %pair.0, i1 zeroext %pair.1)\n #[no_mangle]\n pub fn pair_i32_bool(pair: (i32, bool)) -> (i32, bool) {\n     pair\n }\n \n-// CHECK: define { i8, i8 } @pair_and_or(i1 zeroext %_1.0, i1 zeroext %_1.1)\n+// CHECK: define{{.*}}{ i8, i8 } @pair_and_or(i1 zeroext %_1.0, i1 zeroext %_1.1)\n #[no_mangle]\n pub fn pair_and_or((a, b): (bool, bool)) -> (bool, bool) {\n     // Make sure it can operate directly on the unpacked args\n@@ -30,7 +30,7 @@ pub fn pair_and_or((a, b): (bool, bool)) -> (bool, bool) {\n     (a && b, a || b)\n }\n \n-// CHECK: define void @pair_branches(i1 zeroext %_1.0, i1 zeroext %_1.1)\n+// CHECK: define{{.*}}void @pair_branches(i1 zeroext %_1.0, i1 zeroext %_1.1)\n #[no_mangle]\n pub fn pair_branches((a, b): (bool, bool)) {\n     // Make sure it can branch directly on the unpacked bool args"}, {"sha": "432c063e826e05dc0f8e82627125d4d406638aee", "filename": "src/test/codegen/staticlib-external-inline-fns.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fstaticlib-external-inline-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fstaticlib-external-inline-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstaticlib-external-inline-fns.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -2,42 +2,42 @@\n \n #![crate_type = \"staticlib\"]\n \n-// CHECK: define void @a()\n+// CHECK: define{{.*}}void @a()\n #[no_mangle]\n #[inline]\n pub extern \"C\" fn a() {}\n \n-// CHECK: define void @b()\n+// CHECK: define{{.*}}void @b()\n #[export_name = \"b\"]\n #[inline]\n pub extern \"C\" fn b() {}\n \n-// CHECK: define void @c()\n+// CHECK: define{{.*}}void @c()\n #[no_mangle]\n #[inline]\n extern \"C\" fn c() {}\n \n-// CHECK: define void @d()\n+// CHECK: define{{.*}}void @d()\n #[export_name = \"d\"]\n #[inline]\n extern \"C\" fn d() {}\n \n-// CHECK: define void @e()\n+// CHECK: define{{.*}}void @e()\n #[no_mangle]\n #[inline(always)]\n pub extern \"C\" fn e() {}\n \n-// CHECK: define void @f()\n+// CHECK: define{{.*}}void @f()\n #[export_name = \"f\"]\n #[inline(always)]\n pub extern \"C\" fn f() {}\n \n-// CHECK: define void @g()\n+// CHECK: define{{.*}}void @g()\n #[no_mangle]\n #[inline(always)]\n extern \"C\" fn g() {}\n \n-// CHECK: define void @h()\n+// CHECK: define{{.*}}void @h()\n #[export_name = \"h\"]\n #[inline(always)]\n extern \"C\" fn h() {}"}, {"sha": "e9584929f3a9eccfac69d12f45b59e16a6d5e8fd", "filename": "src/test/codegen/transmute-scalar.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Ftransmute-scalar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Ftransmute-scalar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftransmute-scalar.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -5,7 +5,7 @@\n // FIXME(eddyb) all of these tests show memory stores and loads, even after a\n // scalar `bitcast`, more special-casing is required to remove `alloca` usage.\n \n-// CHECK: define i32 @f32_to_bits(float %x)\n+// CHECK-LABEL: define{{.*}}i32 @f32_to_bits(float %x)\n // CHECK: %2 = bitcast float %x to i32\n // CHECK-NEXT: store i32 %2, i32* %0\n // CHECK-NEXT: %3 = load i32, i32* %0\n@@ -15,7 +15,7 @@ pub fn f32_to_bits(x: f32) -> u32 {\n     unsafe { std::mem::transmute(x) }\n }\n \n-// CHECK: define i8 @bool_to_byte(i1 zeroext %b)\n+// CHECK-LABEL: define{{.*}}i8 @bool_to_byte(i1 zeroext %b)\n // CHECK: %1 = zext i1 %b to i8\n // CHECK-NEXT: store i8 %1, i8* %0\n // CHECK-NEXT: %2 = load i8, i8* %0\n@@ -25,7 +25,7 @@ pub fn bool_to_byte(b: bool) -> u8 {\n     unsafe { std::mem::transmute(b) }\n }\n \n-// CHECK: define zeroext i1 @byte_to_bool(i8 %byte)\n+// CHECK-LABEL: define{{.*}}zeroext i1 @byte_to_bool(i8 %byte)\n // CHECK: %1 = trunc i8 %byte to i1\n // CHECK-NEXT: %2 = zext i1 %1 to i8\n // CHECK-NEXT: store i8 %2, i8* %0\n@@ -37,7 +37,7 @@ pub unsafe fn byte_to_bool(byte: u8) -> bool {\n     std::mem::transmute(byte)\n }\n \n-// CHECK: define i8* @ptr_to_ptr(i16* %p)\n+// CHECK-LABEL: define{{.*}}i8* @ptr_to_ptr(i16* %p)\n // CHECK: %2 = bitcast i16* %p to i8*\n // CHECK-NEXT: store i8* %2, i8** %0\n // CHECK-NEXT: %3 = load i8*, i8** %0\n@@ -54,7 +54,7 @@ pub fn ptr_to_ptr(p: *mut u16) -> *mut u8 {\n // Tests below show the non-special-cased behavior (with the possible\n // future special-cased instructions in the \"NOTE(eddyb)\" comments).\n \n-// CHECK: define [[USIZE:i[0-9]+]] @ptr_to_int(i16* %p)\n+// CHECK: define{{.*}}[[USIZE:i[0-9]+]] @ptr_to_int(i16* %p)\n \n // NOTE(eddyb) see above, the following two CHECK lines should ideally be this:\n //        %2 = ptrtoint i16* %p to [[USIZE]]\n@@ -69,7 +69,7 @@ pub fn ptr_to_int(p: *mut u16) -> usize {\n     unsafe { std::mem::transmute(p) }\n }\n \n-// CHECK: define i16* @int_to_ptr([[USIZE]] %i)\n+// CHECK: define{{.*}}i16* @int_to_ptr([[USIZE]] %i)\n \n // NOTE(eddyb) see above, the following two CHECK lines should ideally be this:\n //        %2 = inttoptr [[USIZE]] %i to i16*"}, {"sha": "e28397eb1392d02c39fca5e539f51961573169ed", "filename": "src/test/codegen/unwind-extern-imports.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Funwind-extern-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Funwind-extern-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-extern-imports.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -6,28 +6,28 @@\n \n extern \"C\" {\n // CHECK: Function Attrs:{{.*}}nounwind\n-// CHECK-NEXT: declare void @extern_fn\n+// CHECK-NEXT: declare{{.*}}void @extern_fn\n     fn extern_fn();\n // CHECK-NOT: Function Attrs:{{.*}}nounwind\n-// CHECK: declare void @unwinding_extern_fn\n+// CHECK: declare{{.*}}void @unwinding_extern_fn\n     #[unwind(allowed)]\n     fn unwinding_extern_fn();\n // CHECK-NOT: nounwind\n-// CHECK: declare void @aborting_extern_fn\n+// CHECK: declare{{.*}}void @aborting_extern_fn\n     #[unwind(aborts)]\n     fn aborting_extern_fn(); // FIXME: we want to have the attribute here\n }\n \n extern \"Rust\" {\n // CHECK-NOT: nounwind\n-// CHECK: declare void @rust_extern_fn\n+// CHECK: declare{{.*}}void @rust_extern_fn\n     fn rust_extern_fn();\n // CHECK-NOT: nounwind\n-// CHECK: declare void @rust_unwinding_extern_fn\n+// CHECK: declare{{.*}}void @rust_unwinding_extern_fn\n     #[unwind(allowed)]\n     fn rust_unwinding_extern_fn();\n // CHECK-NOT: nounwind\n-// CHECK: declare void @rust_aborting_extern_fn\n+// CHECK: declare{{.*}}void @rust_aborting_extern_fn\n     #[unwind(aborts)]\n     fn rust_aborting_extern_fn(); // FIXME: we want to have the attribute here\n }"}, {"sha": "8f1b038708e667b9cfccd9b8ec4b7124aa314c3e", "filename": "src/test/codegen/var-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fvar-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7d4effd71f826abb9651419c316b9b57b8ac97/src%2Ftest%2Fcodegen%2Fvar-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvar-names.rs?ref=0c7d4effd71f826abb9651419c316b9b57b8ac97", "patch": "@@ -2,7 +2,7 @@\n \n #![crate_type = \"lib\"]\n \n-// CHECK-LABEL: define i32 @test(i32 %a, i32 %b)\n+// CHECK-LABEL: define{{.*}}i32 @test(i32 %a, i32 %b)\n #[no_mangle]\n pub fn test(a: u32, b: u32) -> u32 {\n     let c = a + b;"}]}