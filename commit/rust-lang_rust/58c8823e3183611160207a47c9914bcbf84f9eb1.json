{"sha": "58c8823e3183611160207a47c9914bcbf84f9eb1", "node_id": "C_kwDOAAsO6NoAKDU4Yzg4MjNlMzE4MzYxMTE2MDIwN2E0N2M5OTE0YmNiZjg0ZjllYjE", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-08-31T13:28:55Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-04T12:35:23Z"}, "message": "remap mir before running optimization passes", "tree": {"sha": "c74776b1fd73735121dac3019eccb6eef5e5142d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c74776b1fd73735121dac3019eccb6eef5e5142d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58c8823e3183611160207a47c9914bcbf84f9eb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58c8823e3183611160207a47c9914bcbf84f9eb1", "html_url": "https://github.com/rust-lang/rust/commit/58c8823e3183611160207a47c9914bcbf84f9eb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58c8823e3183611160207a47c9914bcbf84f9eb1/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd61b8fb3ff04de61f40ea62043b17dc1e418c4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd61b8fb3ff04de61f40ea62043b17dc1e418c4c", "html_url": "https://github.com/rust-lang/rust/commit/bd61b8fb3ff04de61f40ea62043b17dc1e418c4c"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "162f7d969b181d8e01eeb22a9690f1e299c5f83e", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58c8823e3183611160207a47c9914bcbf84f9eb1/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c8823e3183611160207a47c9914bcbf84f9eb1/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=58c8823e3183611160207a47c9914bcbf84f9eb1", "patch": "@@ -387,7 +387,9 @@ fn inner_mir_for_ctfe(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -\n         .body_const_context(def.did)\n         .expect(\"mir_for_ctfe should not be used for runtime functions\");\n \n-    let mut body = tcx.mir_drops_elaborated_and_const_checked(def).borrow().clone();\n+    let body = tcx.mir_drops_elaborated_and_const_checked(def).borrow().clone();\n+\n+    let mut body = remap_mir_for_const_eval_select(tcx, body, hir::Constness::Const);\n \n     match context {\n         // Do not const prop functions, either they get executed at runtime or exported to metadata,\n@@ -416,7 +418,7 @@ fn inner_mir_for_ctfe(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -\n \n     debug_assert!(!body.has_free_regions(), \"Free regions in MIR for CTFE\");\n \n-    remap_mir_for_const_eval_select(tcx, body, hir::Constness::Const)\n+    body\n }\n \n /// Obtain just the main MIR (no promoteds) and run some cleanups on it. This also runs\n@@ -620,14 +622,15 @@ fn inner_optimized_mir(tcx: TyCtxt<'_>, did: LocalDefId) -> Body<'_> {\n         Some(other) => panic!(\"do not use `optimized_mir` for constants: {:?}\", other),\n     }\n     debug!(\"about to call mir_drops_elaborated...\");\n-    let mut body =\n+    let body =\n         tcx.mir_drops_elaborated_and_const_checked(ty::WithOptConstParam::unknown(did)).steal();\n+    let mut body = remap_mir_for_const_eval_select(tcx, body, hir::Constness::NotConst);\n     debug!(\"body: {:#?}\", body);\n     run_optimization_passes(tcx, &mut body);\n \n     debug_assert!(!body.has_free_regions(), \"Free regions in optimized MIR\");\n \n-    remap_mir_for_const_eval_select(tcx, body, hir::Constness::NotConst)\n+    body\n }\n \n /// Fetch all the promoteds of an item and prepare their MIR bodies to be ready for"}]}