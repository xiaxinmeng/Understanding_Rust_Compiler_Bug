{"sha": "3a95864df544b2fe00c0dffc07bd953c802ba95a", "node_id": "C_kwDOAAsO6NoAKDNhOTU4NjRkZjU0NGIyZmUwMGMwZGZmYzA3YmQ5NTNjODAyYmE5NWE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-16T15:04:38Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-16T15:04:38Z"}, "message": "Unconditionally enable location links in inlay hints again", "tree": {"sha": "a0ea38e45828868a029edf4a870e80b4a07b1659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0ea38e45828868a029edf4a870e80b4a07b1659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a95864df544b2fe00c0dffc07bd953c802ba95a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a95864df544b2fe00c0dffc07bd953c802ba95a", "html_url": "https://github.com/rust-lang/rust/commit/3a95864df544b2fe00c0dffc07bd953c802ba95a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a95864df544b2fe00c0dffc07bd953c802ba95a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5306eb06cc2de0566ca789ee3863b78059ee2376", "url": "https://api.github.com/repos/rust-lang/rust/commits/5306eb06cc2de0566ca789ee3863b78059ee2376", "html_url": "https://github.com/rust-lang/rust/commit/5306eb06cc2de0566ca789ee3863b78059ee2376"}], "stats": {"total": 92, "additions": 38, "deletions": 54}, "files": [{"sha": "3d4a3466e2d196829813b9ca593567d543dae93b", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a95864df544b2fe00c0dffc07bd953c802ba95a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a95864df544b2fe00c0dffc07bd953c802ba95a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=3a95864df544b2fe00c0dffc07bd953c802ba95a", "patch": "@@ -31,7 +31,6 @@ mod discriminant;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct InlayHintsConfig {\n-    pub location_links: bool,\n     pub render_colons: bool,\n     pub type_hints: bool,\n     pub discriminant_hints: DiscriminantHints,\n@@ -240,7 +239,6 @@ struct InlayHintLabelBuilder<'a> {\n     db: &'a RootDatabase,\n     result: InlayHintLabel,\n     last_part: String,\n-    location_link_enabled: bool,\n     location: Option<FileRange>,\n }\n \n@@ -252,9 +250,6 @@ impl fmt::Write for InlayHintLabelBuilder<'_> {\n \n impl HirWrite for InlayHintLabelBuilder<'_> {\n     fn start_location_link(&mut self, def: ModuleDefId) {\n-        if !self.location_link_enabled {\n-            return;\n-        }\n         if self.location.is_some() {\n             never!(\"location link is already started\");\n         }\n@@ -266,9 +261,6 @@ impl HirWrite for InlayHintLabelBuilder<'_> {\n     }\n \n     fn end_location_link(&mut self) {\n-        if !self.location_link_enabled {\n-            return;\n-        }\n         self.make_new_part();\n     }\n }\n@@ -334,7 +326,6 @@ fn label_of_ty(\n         db: sema.db,\n         last_part: String::new(),\n         location: None,\n-        location_link_enabled: config.location_links,\n         result: InlayHintLabel::default(),\n     };\n     let _ = rec(sema, famous_defs, config.max_length, ty, &mut label_builder);\n@@ -495,7 +486,6 @@ mod tests {\n     use super::ClosureReturnTypeHints;\n \n     pub(super) const DISABLED_CONFIG: InlayHintsConfig = InlayHintsConfig {\n-        location_links: false,\n         discriminant_hints: DiscriminantHints::Never,\n         render_colons: false,\n         type_hints: false,\n@@ -513,16 +503,14 @@ mod tests {\n         max_length: None,\n         closing_brace_hints_min_lines: None,\n     };\n-    pub(super) const DISABLED_CONFIG_WITH_LINKS: InlayHintsConfig =\n-        InlayHintsConfig { location_links: true, ..DISABLED_CONFIG };\n     pub(super) const TEST_CONFIG: InlayHintsConfig = InlayHintsConfig {\n         type_hints: true,\n         parameter_hints: true,\n         chaining_hints: true,\n         closure_return_type_hints: ClosureReturnTypeHints::WithBlock,\n         binding_mode_hints: true,\n         lifetime_elision_hints: LifetimeElisionHints::Always,\n-        ..DISABLED_CONFIG_WITH_LINKS\n+        ..DISABLED_CONFIG\n     };\n \n     #[track_caller]"}, {"sha": "971168aa28f6dd12011c0c04ecb672ba89b330d7", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a95864df544b2fe00c0dffc07bd953c802ba95a/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a95864df544b2fe00c0dffc07bd953c802ba95a/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=3a95864df544b2fe00c0dffc07bd953c802ba95a", "patch": "@@ -188,8 +188,7 @@ mod tests {\n     use crate::{fixture, inlay_hints::InlayHintsConfig};\n \n     use crate::inlay_hints::tests::{\n-        check, check_expect, check_with_config, DISABLED_CONFIG, DISABLED_CONFIG_WITH_LINKS,\n-        TEST_CONFIG,\n+        check, check_expect, check_with_config, DISABLED_CONFIG, TEST_CONFIG,\n     };\n     use crate::ClosureReturnTypeHints;\n \n@@ -285,7 +284,7 @@ fn main() {\n     fn iterator_hint_regression_issue_12674() {\n         // Ensure we don't crash while solving the projection type of iterators.\n         check_expect(\n-            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG_WITH_LINKS },\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n             r#\"\n //- minicore: iterators\n struct S<T>(T);"}, {"sha": "b522450310674a4723464c9716d1cd5a01fba559", "filename": "crates/ide/src/inlay_hints/chaining.rs", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3a95864df544b2fe00c0dffc07bd953c802ba95a/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a95864df544b2fe00c0dffc07bd953c802ba95a/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs?ref=3a95864df544b2fe00c0dffc07bd953c802ba95a", "patch": "@@ -72,10 +72,7 @@ mod tests {\n     use expect_test::expect;\n \n     use crate::{\n-        inlay_hints::tests::{\n-            check_expect, check_with_config, DISABLED_CONFIG, DISABLED_CONFIG_WITH_LINKS,\n-            TEST_CONFIG,\n-        },\n+        inlay_hints::tests::{check_expect, check_with_config, DISABLED_CONFIG, TEST_CONFIG},\n         InlayHintsConfig,\n     };\n \n@@ -87,11 +84,7 @@ mod tests {\n     #[test]\n     fn chaining_hints_ignore_comments() {\n         check_expect(\n-            InlayHintsConfig {\n-                type_hints: false,\n-                chaining_hints: true,\n-                ..DISABLED_CONFIG_WITH_LINKS\n-            },\n+            InlayHintsConfig { type_hints: false, chaining_hints: true, ..DISABLED_CONFIG },\n             r#\"\n struct A(B);\n impl A { fn into_b(self) -> B { self.0 } }\n@@ -197,14 +190,40 @@ fn main() {\n                         range: 143..190,\n                         kind: Chaining,\n                         label: [\n-                            \"C\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"C\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 51..52,\n+                                    },\n+                                ),\n+                                tooltip: \"\",\n+                            },\n+                            \"\",\n                         ],\n                     },\n                     InlayHint {\n                         range: 143..179,\n                         kind: Chaining,\n                         label: [\n-                            \"B\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"B\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 29..30,\n+                                    },\n+                                ),\n+                                tooltip: \"\",\n+                            },\n+                            \"\",\n                         ],\n                     },\n                 ]\n@@ -215,7 +234,7 @@ fn main() {\n     #[test]\n     fn struct_access_chaining_hints() {\n         check_expect(\n-            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG_WITH_LINKS },\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n             r#\"\n struct A { pub b: B }\n struct B { pub c: C }\n@@ -284,7 +303,7 @@ fn main() {\n     #[test]\n     fn generic_chaining_hints() {\n         check_expect(\n-            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG_WITH_LINKS },\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n             r#\"\n struct A<T>(T);\n struct B<T>(T);\n@@ -380,7 +399,7 @@ fn main() {\n     #[test]\n     fn shorten_iterator_chaining_hints() {\n         check_expect(\n-            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG_WITH_LINKS },\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n             r#\"\n //- minicore: iterators\n use core::iter;"}, {"sha": "14c11be54ef54b19829905c9a9ed0765e52ef8ff", "filename": "crates/ide/src/inlay_hints/closing_brace.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a95864df544b2fe00c0dffc07bd953c802ba95a/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a95864df544b2fe00c0dffc07bd953c802ba95a/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs?ref=3a95864df544b2fe00c0dffc07bd953c802ba95a", "patch": "@@ -107,10 +107,7 @@ pub(super) fn hints(\n         return None;\n     }\n \n-    let linked_location = config\n-        .location_links\n-        .then(|| name_range.map(|range| FileRange { file_id, range }))\n-        .flatten();\n+    let linked_location = name_range.map(|range| FileRange { file_id, range });\n     acc.push(InlayHint {\n         range: closing_token.text_range(),\n         kind: InlayKind::ClosingBrace,"}, {"sha": "7ada4f1be07f3d7860622b043a62c3ad7a129e39", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a95864df544b2fe00c0dffc07bd953c802ba95a/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a95864df544b2fe00c0dffc07bd953c802ba95a/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=3a95864df544b2fe00c0dffc07bd953c802ba95a", "patch": "@@ -107,7 +107,6 @@ impl StaticIndex<'_> {\n             .analysis\n             .inlay_hints(\n                 &InlayHintsConfig {\n-                    location_links: true,\n                     render_colons: true,\n                     discriminant_hints: crate::DiscriminantHints::Fieldless,\n                     type_hints: true,"}, {"sha": "a4902d63c683221af672b140f741d579b175143d", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a95864df544b2fe00c0dffc07bd953c802ba95a/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a95864df544b2fe00c0dffc07bd953c802ba95a/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=3a95864df544b2fe00c0dffc07bd953c802ba95a", "patch": "@@ -183,8 +183,6 @@ fn run_server() -> Result<()> {\n         }\n     }\n \n-    config.client_specific_adjustments(&initialize_params.client_info);\n-\n     let server_capabilities = rust_analyzer::server_capabilities(&config);\n \n     let initialize_result = lsp_types::InitializeResult {"}, {"sha": "9ea042b423519bc8ad1d401c14b3cc5ccf78dc27", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a95864df544b2fe00c0dffc07bd953c802ba95a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a95864df544b2fe00c0dffc07bd953c802ba95a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=3a95864df544b2fe00c0dffc07bd953c802ba95a", "patch": "@@ -20,7 +20,7 @@ use ide_db::{\n     SnippetCap,\n };\n use itertools::Itertools;\n-use lsp_types::{ClientCapabilities, ClientInfo, MarkupKind};\n+use lsp_types::{ClientCapabilities, MarkupKind};\n use project_model::{\n     CargoConfig, CargoFeatures, ProjectJson, ProjectJsonData, ProjectManifest, RustcSource,\n     UnsetTestCrates,\n@@ -342,8 +342,6 @@ config_data! {\n         inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n         inlayHints_lifetimeElisionHints_useParameterNames: bool    = \"false\",\n-        /// Whether to use location links for parts of type mentioned in inlay hints.\n-        inlayHints_locationLinks: bool                             = \"true\",\n         /// Maximum length for inlay hints. Set to null to have an unlimited length.\n         inlayHints_maxLength: Option<usize>                        = \"25\",\n         /// Whether to show function parameter name inlay hints at the call\n@@ -728,19 +726,6 @@ impl Config {\n         }\n     }\n \n-    pub fn client_specific_adjustments(&mut self, client_info: &Option<ClientInfo>) {\n-        // FIXME: remove this when we drop support for vscode 1.65 and below\n-        if let Some(client) = client_info {\n-            if client.name.contains(\"Code\") || client.name.contains(\"Codium\") {\n-                if let Some(version) = &client.version {\n-                    if version.as_str() < \"1.76\" {\n-                        self.data.inlayHints_locationLinks = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n     pub fn update(&mut self, mut json: serde_json::Value) -> Result<(), ConfigUpdateError> {\n         tracing::info!(\"updating config from JSON: {:#}\", json);\n         if json.is_null() || json.as_object().map_or(false, |it| it.is_empty()) {\n@@ -1229,7 +1214,6 @@ impl Config {\n \n     pub fn inlay_hints(&self) -> InlayHintsConfig {\n         InlayHintsConfig {\n-            location_links: self.data.inlayHints_locationLinks,\n             render_colons: self.data.inlayHints_renderColons,\n             type_hints: self.data.inlayHints_typeHints_enable,\n             parameter_hints: self.data.inlayHints_parameterHints_enable,"}]}