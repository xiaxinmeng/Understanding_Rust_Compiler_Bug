{"sha": "eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "node_id": "C_kwDOAAsO6NoAKGVlYzg1NmJmYmNkNzlkMTIzNTJmODFiNDRhOWYwNGU1YmIwNmJkYTU", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-02T23:51:01Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-03T00:38:19Z"}, "message": "Make diangostic item names consistent", "tree": {"sha": "de49e7a7c12ca371082c5ff3356eb271853cc5bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de49e7a7c12ca371082c5ff3356eb271853cc5bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "html_url": "https://github.com/rust-lang/rust/commit/eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03eb6bef8ced8a243858b819e013b9caf83d757", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03eb6bef8ced8a243858b819e013b9caf83d757", "html_url": "https://github.com/rust-lang/rust/commit/f03eb6bef8ced8a243858b819e013b9caf83d757"}], "stats": {"total": 492, "additions": 244, "deletions": 248}, "files": [{"sha": "a4df277a7b0844ad4e7fd3dda5505889fa9ce7d4", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -966,8 +966,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         _ => None,\n                     });\n                 let is_option_or_result = parent_self_ty.map_or(false, |def_id| {\n-                    tcx.is_diagnostic_item(sym::option_type, def_id)\n-                        || tcx.is_diagnostic_item(sym::result_type, def_id)\n+                    tcx.is_diagnostic_item(sym::Option, def_id)\n+                        || tcx.is_diagnostic_item(sym::Result, def_id)\n                 });\n                 FnSelfUseKind::Normal { self_arg, implicit_into_iter, is_option_or_result }\n             });"}, {"sha": "855e6850b2efa8d1a3345b39aff153ab571c93ab", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -400,8 +400,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             | ty::Opaque(def_id, _) => def_id,\n             _ => return err,\n         };\n-        let is_option = self.infcx.tcx.is_diagnostic_item(sym::option_type, def_id);\n-        let is_result = self.infcx.tcx.is_diagnostic_item(sym::result_type, def_id);\n+        let is_option = self.infcx.tcx.is_diagnostic_item(sym::Option, def_id);\n+        let is_result = self.infcx.tcx.is_diagnostic_item(sym::Result, def_id);\n         if (is_option || is_result) && use_spans.map_or(true, |v| !v.for_closure()) {\n             err.span_suggestion_verbose(\n                 span.shrink_to_hi(),"}, {"sha": "c44d4361f037a1007a6869d713ae3ee1b2ec3d6b", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -2533,7 +2533,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// within `?` desugaring.\n     pub fn is_try_conversion(&self, span: Span, trait_def_id: DefId) -> bool {\n         span.is_desugaring(DesugaringKind::QuestionMark)\n-            && self.tcx.is_diagnostic_item(sym::from_trait, trait_def_id)\n+            && self.tcx.is_diagnostic_item(sym::From, trait_def_id)\n     }\n }\n "}, {"sha": "9b6493222e6758802c9888aa95a01aa673fcdf43", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -812,7 +812,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDebugImplementations {\n             _ => return,\n         }\n \n-        let debug = match cx.tcx.get_diagnostic_item(sym::debug_trait) {\n+        let debug = match cx.tcx.get_diagnostic_item(sym::Debug) {\n             Some(debug) => debug,\n             None => return,\n         };"}, {"sha": "a4940e5aae7a7c15b4c429008002544aa622bc92", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -33,9 +33,9 @@ impl LateLintPass<'_> for DefaultHashTypes {\n             // don't lint imports, only actual usages\n             return;\n         }\n-        let replace = if cx.tcx.is_diagnostic_item(sym::hashmap_type, def_id) {\n+        let replace = if cx.tcx.is_diagnostic_item(sym::HashMap, def_id) {\n             \"FxHashMap\"\n-        } else if cx.tcx.is_diagnostic_item(sym::hashset_type, def_id) {\n+        } else if cx.tcx.is_diagnostic_item(sym::HashSet, def_id) {\n             \"FxHashSet\"\n         } else {\n             return;"}, {"sha": "5558947de0cb78d3f01349bba064cfd16bc9a7a5", "filename": "compiler/rustc_lint/src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -84,7 +84,7 @@ fn lint_cstring_as_ptr(\n ) {\n     let source_type = cx.typeck_results().expr_ty(source);\n     if let ty::Adt(def, substs) = source_type.kind() {\n-        if cx.tcx.is_diagnostic_item(sym::result_type, def.did) {\n+        if cx.tcx.is_diagnostic_item(sym::Result, def.did) {\n             if let ty::Adt(adt, _) = substs.type_at(0).kind() {\n                 if cx.tcx.is_diagnostic_item(sym::cstring_type, adt.did) {\n                     cx.struct_span_lint(TEMPORARY_CSTRING_AS_PTR, as_ptr_span, |diag| {"}, {"sha": "b945c764320e3b01f9264a533a0ad5284e1a946b", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -130,14 +130,14 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                 ty::Ref(_, r, _) if *r.kind() == ty::Str,\n             ) || matches!(\n                 ty.ty_adt_def(),\n-                Some(ty_def) if cx.tcx.is_diagnostic_item(sym::string_type, ty_def.did),\n+                Some(ty_def) if cx.tcx.is_diagnostic_item(sym::String, ty_def.did),\n             );\n \n             let (suggest_display, suggest_debug) = cx.tcx.infer_ctxt().enter(|infcx| {\n-                let display = is_str || cx.tcx.get_diagnostic_item(sym::display_trait).map(|t| {\n+                let display = is_str || cx.tcx.get_diagnostic_item(sym::Display).map(|t| {\n                     infcx.type_implements_trait(t, ty, InternalSubsts::empty(), cx.param_env).may_apply()\n                 }) == Some(true);\n-                let debug = !display && cx.tcx.get_diagnostic_item(sym::debug_trait).map(|t| {\n+                let debug = !display && cx.tcx.get_diagnostic_item(sym::Debug).map(|t| {\n                     infcx.type_implements_trait(t, ty, InternalSubsts::empty(), cx.param_env).may_apply()\n                 }) == Some(true);\n                 (display, debug)"}, {"sha": "996c158c062fb89918dc8c0cebd0f2074e106b19", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -133,7 +133,7 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n     /// If the given predicate is the trait `fmt::Pointer`, returns the bound parameter type.\n     fn is_pointer_trait(&self, bound: &PredicateKind<'tcx>) -> Option<Ty<'tcx>> {\n         if let ty::PredicateKind::Trait(predicate) = bound {\n-            if self.tcx.is_diagnostic_item(sym::pointer_trait, predicate.def_id()) {\n+            if self.tcx.is_diagnostic_item(sym::Pointer, predicate.def_id()) {\n                 Some(predicate.trait_ref.self_ty())\n             } else {\n                 None"}, {"sha": "77baf7d73810ee9655406004bbb35bfd8c884c0d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -169,6 +169,7 @@ symbols! {\n         Default,\n         Deref,\n         DirBuilder,\n+        Display,\n         DoubleEndedIterator,\n         Duration,\n         Encodable,\n@@ -194,6 +195,7 @@ symbols! {\n         Hasher,\n         Implied,\n         Input,\n+        Into,\n         IntoIterator,\n         IoRead,\n         IoWrite,\n@@ -204,6 +206,7 @@ symbols! {\n         Left,\n         LinkedList,\n         LintPass,\n+        Mutex,\n         None,\n         Ok,\n         Option,\n@@ -219,6 +222,7 @@ symbols! {\n         PathBuf,\n         Pending,\n         Pin,\n+        Pointer,\n         Poll,\n         ProcMacro,\n         ProcMacroHack,\n@@ -242,19 +246,23 @@ symbols! {\n         Send,\n         SeqCst,\n         Some,\n+        String,\n         StructuralEq,\n         StructuralPartialEq,\n         Sync,\n         Target,\n         ToOwned,\n         ToString,\n         Try,\n+        TryFrom,\n+        TryInto,\n         Ty,\n         TyCtxt,\n         TyKind,\n         Unknown,\n         UnsafeArg,\n         Vec,\n+        VecDeque,\n         Yield,\n         _DECLS,\n         _Self,\n@@ -507,7 +515,6 @@ symbols! {\n         debug_assert_macro,\n         debug_assertions,\n         debug_struct,\n-        debug_trait,\n         debug_trait_builder,\n         debug_tuple,\n         decl_macro,\n@@ -653,7 +660,6 @@ symbols! {\n         from_output,\n         from_residual,\n         from_size_align_unchecked,\n-        from_trait,\n         from_usize,\n         fsub_fast,\n         fundamental,\n@@ -676,8 +682,6 @@ symbols! {\n         gt,\n         half_open_range_patterns,\n         hash,\n-        hashmap_type,\n-        hashset_type,\n         hexagon_target_feature,\n         hidden,\n         homogeneous_aggregate,\n@@ -722,7 +726,6 @@ symbols! {\n         instruction_set,\n         intel,\n         into_iter,\n-        into_trait,\n         intra_doc_pointers,\n         intrinsics,\n         irrefutable_let_patterns,\n@@ -913,7 +916,6 @@ symbols! {\n         optin_builtin_traits,\n         option,\n         option_env,\n-        option_type,\n         options,\n         or,\n         or_patterns,\n@@ -955,7 +957,6 @@ symbols! {\n         plugins,\n         pointee_trait,\n         pointer,\n-        pointer_trait,\n         pointer_trait_fmt,\n         poll,\n         position,\n@@ -1051,7 +1052,6 @@ symbols! {\n         repr_transparent,\n         residual,\n         result,\n-        result_type,\n         rhs,\n         rintf32,\n         rintf64,\n@@ -1152,7 +1152,6 @@ symbols! {\n         self_in_typedefs,\n         self_struct_ctor,\n         semitransparent,\n-        send_trait,\n         shl,\n         shl_assign,\n         should_panic,\n@@ -1262,7 +1261,6 @@ symbols! {\n         store,\n         str,\n         str_alloc,\n-        string_type,\n         stringify,\n         struct_field_attributes,\n         struct_inherit,\n@@ -1277,7 +1275,6 @@ symbols! {\n         suggestion,\n         sym,\n         sync,\n-        sync_trait,\n         t32,\n         target_abi,\n         target_arch,\n@@ -1323,9 +1320,7 @@ symbols! {\n         truncf64,\n         try_blocks,\n         try_from,\n-        try_from_trait,\n         try_into,\n-        try_into_trait,\n         try_trait_v2,\n         tt,\n         tuple,\n@@ -1397,8 +1392,6 @@ symbols! {\n         var,\n         variant_count,\n         vec,\n-        vec_type,\n-        vecdeque_type,\n         version,\n         vis,\n         visible_private_types,"}, {"sha": "93ddec61dc4a1855f875ac5faea3f1d3747b8ad0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -533,9 +533,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         // example).\n \n                         let trait_is_debug =\n-                            self.tcx.is_diagnostic_item(sym::debug_trait, trait_ref.def_id());\n+                            self.tcx.is_diagnostic_item(sym::Debug, trait_ref.def_id());\n                         let trait_is_display =\n-                            self.tcx.is_diagnostic_item(sym::display_trait, trait_ref.def_id());\n+                            self.tcx.is_diagnostic_item(sym::Display, trait_ref.def_id());\n \n                         let in_std_macro =\n                             match obligation.cause.span.ctxt().outer_expn_data().macro_def_id {"}, {"sha": "61f5856334d569d6988dd14d960d57555d503e35", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -702,7 +702,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 .filter_map(|lang_item| self.tcx.lang_items().require(*lang_item).ok())\n                 .collect();\n \n-        never_suggest_borrow.push(self.tcx.get_diagnostic_item(sym::send_trait).unwrap());\n+        never_suggest_borrow.push(self.tcx.get_diagnostic_item(sym::Send).unwrap());\n \n         let param_env = obligation.param_env;\n         let trait_ref = trait_ref.skip_binder();\n@@ -1634,8 +1634,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         // Special case the primary error message when send or sync is the trait that was\n         // not implemented.\n-        let is_send = self.tcx.is_diagnostic_item(sym::send_trait, trait_ref.def_id);\n-        let is_sync = self.tcx.is_diagnostic_item(sym::sync_trait, trait_ref.def_id);\n+        let is_send = self.tcx.is_diagnostic_item(sym::Send, trait_ref.def_id);\n+        let is_sync = self.tcx.is_diagnostic_item(sym::Sync, trait_ref.def_id);\n         let hir = self.tcx.hir();\n         let trait_explanation = if is_send || is_sync {\n             let (trait_name, trait_verb) ="}, {"sha": "9736a7b2e28e32fa2f81a110858e6dc208c0557c", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -438,7 +438,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     let mut label = true;\n                     // Check `impl From<self.expr_ty> for self.cast_ty {}` for accurate suggestion:\n                     if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr.span) {\n-                        if let Some(from_trait) = fcx.tcx.get_diagnostic_item(sym::from_trait) {\n+                        if let Some(from_trait) = fcx.tcx.get_diagnostic_item(sym::From) {\n                             let ty = fcx.resolve_vars_if_possible(self.cast_ty);\n                             // Erase regions to avoid panic in `prove_value` when calling\n                             // `type_implements_trait`."}, {"sha": "d849e1d5d28286c8965e7d76e1035f517c60f9e9", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -983,7 +983,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             sym::Copy,\n             sym::Hash,\n             sym::Default,\n-            sym::debug_trait,\n+            sym::Debug,\n         ];\n         let mut derives = unsatisfied_predicates\n             .iter()"}, {"sha": "d0a32420df3985e355f8f7e5d79d44ec0949c11c", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -572,7 +572,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                    on the left and may require reallocation. This \\\n                    requires ownership of the string on the left\";\n \n-        let string_type = self.tcx.get_diagnostic_item(sym::string_type);\n+        let string_type = self.tcx.get_diagnostic_item(sym::String);\n         let is_std_string = |ty: Ty<'tcx>| match ty.ty_adt_def() {\n             Some(ty_def) => Some(ty_def.did) == string_type,\n             None => false,"}, {"sha": "849bf1e455cbf3153ac2a9f5085b57c52de45c3a", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             match adjusted_ty.kind() {\n                 ty::Adt(ty::AdtDef { did, .. }, _)\n-                    if self.tcx.is_diagnostic_item(sym::vec_type, *did) =>\n+                    if self.tcx.is_diagnostic_item(sym::Vec, *did) =>\n                 {\n                     return self.negative_index(adjusted_ty, index_expr.span, base_expr);\n                 }"}, {"sha": "b7c042a08cf1ca8e8e75cc19418366b5117d6b94", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -877,7 +877,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let auto_traits_def_id = vec![\n             self.tcx.lang_items().clone_trait(),\n             self.tcx.lang_items().sync_trait(),\n-            self.tcx.get_diagnostic_item(sym::send_trait),\n+            self.tcx.get_diagnostic_item(sym::Send),\n             self.tcx.lang_items().unpin_trait(),\n             self.tcx.get_diagnostic_item(sym::unwind_safe_trait),\n             self.tcx.get_diagnostic_item(sym::ref_unwind_safe_trait),"}, {"sha": "4a2b0b33bf2b2b1c3074c798fbbaafdfa8fcaa3d", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -88,7 +88,7 @@ const MAXIMUM_ZST_CAPACITY: usize = 1 << (usize::BITS - 1); // Largest possible\n /// [`extend`]: VecDeque::extend\n /// [`append`]: VecDeque::append\n /// [`make_contiguous`]: VecDeque::make_contiguous\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"vecdeque_type\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"VecDeque\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_insignificant_dtor]\n pub struct VecDeque<"}, {"sha": "92a17cc75ef8b2a1e7f41f7c69c2fb1d6c09fa73", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -289,7 +289,7 @@ use crate::vec::Vec;\n /// [`Deref`]: core::ops::Deref \"ops::Deref\"\n /// [`as_str()`]: String::as_str\n #[derive(PartialOrd, Eq, Ord)]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"string_type\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"String\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct String {\n     vec: Vec<u8>,"}, {"sha": "bdfd40a952ded16db0529114a2b9b34cc346f5e6", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -395,7 +395,7 @@ mod spec_extend;\n /// [`MaybeUninit`]: core::mem::MaybeUninit\n /// [owned slice]: Box\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"vec_type\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Vec\")]\n #[rustc_insignificant_dtor]\n pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n     buf: RawVec<T, A>,"}, {"sha": "abeeef1a17ee0483b426931035a6750a2b6bd221", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -269,7 +269,7 @@ pub trait AsMut<T: ?Sized> {\n ///\n /// [`String`]: ../../std/string/struct.String.html\n /// [`Vec`]: ../../std/vec/struct.Vec.html\n-#[rustc_diagnostic_item = \"into_trait\"]\n+#[rustc_diagnostic_item = \"Into\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n     /// Performs the conversion.\n@@ -358,7 +358,7 @@ pub trait Into<T>: Sized {\n /// [`String`]: ../../std/string/struct.String.html\n /// [`from`]: From::from\n /// [book]: ../../book/ch09-00-error-handling.html\n-#[rustc_diagnostic_item = \"from_trait\"]\n+#[rustc_diagnostic_item = \"From\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(on(\n     all(_Self = \"&str\", T = \"std::string::String\"),\n@@ -385,7 +385,7 @@ pub trait From<T>: Sized {\n ///\n /// This suffers the same restrictions and reasoning as implementing\n /// [`Into`], see there for details.\n-#[rustc_diagnostic_item = \"try_into_trait\"]\n+#[rustc_diagnostic_item = \"TryInto\"]\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error.\n@@ -465,7 +465,7 @@ pub trait TryInto<T>: Sized {\n /// ```\n ///\n /// [`try_from`]: TryFrom::try_from\n-#[rustc_diagnostic_item = \"try_from_trait\"]\n+#[rustc_diagnostic_item = \"TryFrom\"]\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error."}, {"sha": "d10563a40976dfb29b1f4e158740bbe005606a60", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -617,7 +617,7 @@ impl Display for Arguments<'_> {\n     label = \"`{Self}` cannot be formatted using `{{:?}}` because it doesn't implement `{Debug}`\"\n )]\n #[doc(alias = \"{:?}\")]\n-#[rustc_diagnostic_item = \"debug_trait\"]\n+#[rustc_diagnostic_item = \"Debug\"]\n #[cfg_attr(not(bootstrap), rustc_trivial_field_reads)]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n@@ -710,7 +710,7 @@ pub use macros::Debug;\n     note = \"in format strings you may be able to use `{{:?}}` (or {{:#?}} for pretty-print) instead\"\n )]\n #[doc(alias = \"{}\")]\n-#[rustc_diagnostic_item = \"display_trait\"]\n+#[rustc_diagnostic_item = \"Display\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Display {\n     /// Formats the value using the given formatter.\n@@ -1003,7 +1003,7 @@ pub trait UpperHex {\n /// assert_eq!(&l_ptr[..2], \"0x\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"pointer_trait\"]\n+#[rustc_diagnostic_item = \"Pointer\"]\n pub trait Pointer {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "37446bafacb240740873234b3f51dce261457b67", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -30,7 +30,7 @@ use crate::hash::Hasher;\n /// [arc]: ../../std/sync/struct.Arc.html\n /// [ub]: ../../reference/behavior-considered-undefined.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"send_trait\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Send\")]\n #[rustc_on_unimplemented(\n     message = \"`{Self}` cannot be sent between threads safely\",\n     label = \"`{Self}` cannot be sent between threads safely\"\n@@ -459,7 +459,7 @@ pub macro Copy($item:item) {\n /// [transmute]: crate::mem::transmute\n /// [nomicon-send-and-sync]: ../../nomicon/send-and-sync.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"sync_trait\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Sync\")]\n #[lang = \"sync\"]\n #[rustc_on_unimplemented(\n     message = \"`{Self}` cannot be shared between threads safely\","}, {"sha": "b2cc7145702a1e1b61f13688478a2e82a961c5f5", "filename": "library/core/src/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -509,7 +509,7 @@ use crate::{\n \n /// The `Option` type. See [the module level documentation](self) for more.\n #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n-#[rustc_diagnostic_item = \"option_type\"]\n+#[rustc_diagnostic_item = \"Option\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Option<T> {\n     /// No value"}, {"sha": "a34964b531dfc96206ab81e607eb3c8e32be2f18", "filename": "library/core/src/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -498,7 +498,7 @@ use crate::{convert, fmt, hint};\n /// See the [module documentation](self) for details.\n #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[must_use = \"this `Result` may be an `Err` variant, which should be handled\"]\n-#[rustc_diagnostic_item = \"result_type\"]\n+#[rustc_diagnostic_item = \"Result\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Result<T, E> {\n     /// Contains the success value"}, {"sha": "2de16ce3f86c798c75e0b0030c7952438fc4495c", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -203,7 +203,7 @@ use crate::sys;\n /// }\n /// ```\n \n-#[cfg_attr(not(test), rustc_diagnostic_item = \"hashmap_type\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"HashMap\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_insignificant_dtor]\n pub struct HashMap<K, V, S = RandomState> {"}, {"sha": "2613fbce15687ac4067d74a22608889211393a7a", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -107,7 +107,7 @@ use super::map::{map_try_reserve_error, RandomState};\n /// [`HashMap`]: crate::collections::HashMap\n /// [`RefCell`]: crate::cell::RefCell\n /// [`Cell`]: crate::cell::Cell\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"hashset_type\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"HashSet\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct HashSet<T, S = RandomState> {\n     base: base::HashSet<T, S>,"}, {"sha": "0d844547376b21c6e6fb35f8b515a2d843dd04ed", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -162,7 +162,7 @@ use crate::sys_common::mutex as sys;\n /// assert_eq!(*res_mutex.lock().unwrap(), 800);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"mutex_type\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Mutex\")]\n pub struct Mutex<T: ?Sized> {\n     inner: sys::MovableMutex,\n     poison: poison::Flag,"}, {"sha": "8282800c81904fa93f2bd49a934d6deecd866b73", "filename": "src/tools/clippy/clippy_lints/src/booleans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -260,8 +260,8 @@ fn simplify_not(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n         },\n         ExprKind::MethodCall(path, _, args, _) if args.len() == 1 => {\n             let type_of_receiver = cx.typeck_results().expr_ty(&args[0]);\n-            if !is_type_diagnostic_item(cx, type_of_receiver, sym::option_type)\n-                && !is_type_diagnostic_item(cx, type_of_receiver, sym::result_type)\n+            if !is_type_diagnostic_item(cx, type_of_receiver, sym::Option)\n+                && !is_type_diagnostic_item(cx, type_of_receiver, sym::Result)\n             {\n                 return None;\n             }"}, {"sha": "c876553c165beb916409a9bb3a159a9d79974192", "filename": "src/tools/clippy/clippy_lints/src/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -55,7 +55,7 @@ fn check_case_sensitive_file_extension_comparison(ctx: &LateContext<'_>, expr: &\n                     return Some(span);\n                 },\n                 ty::Adt(&ty::AdtDef { did, .. }, _) => {\n-                    if ctx.tcx.is_diagnostic_item(sym::string_type, did) {\n+                    if ctx.tcx.is_diagnostic_item(sym::String, did) {\n                         return Some(span);\n                     }\n                 },"}, {"sha": "1ccb8c5d880f441388349d77e7475006182f117a", "filename": "src/tools/clippy/clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -67,7 +67,7 @@ impl CognitiveComplexity {\n         helper.visit_expr(expr);\n         let CcHelper { cc, returns } = helper;\n         let ret_ty = cx.typeck_results().node_type(expr.hir_id);\n-        let ret_adjust = if is_type_diagnostic_item(cx, ret_ty, sym::result_type) {\n+        let ret_adjust = if is_type_diagnostic_item(cx, ret_ty, sym::Result) {\n             returns\n         } else {\n             #[allow(clippy::integer_division)]"}, {"sha": "33ed6273ad2c5aa731b2f4e277ba33415c47f6a1", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -307,7 +307,7 @@ fn lint_for_missing_headers<'tcx>(\n     }\n     if !headers.errors {\n         let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n-        if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type) {\n+        if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::Result) {\n             span_lint(\n                 cx,\n                 MISSING_ERRORS_DOC,\n@@ -325,7 +325,7 @@ fn lint_for_missing_headers<'tcx>(\n                 if let ty::Opaque(_, subs) = ret_ty.kind();\n                 if let Some(gen) = subs.types().next();\n                 if let ty::Generator(_, subs, _) = gen.kind();\n-                if is_type_diagnostic_item(cx, subs.as_generator().return_ty(), sym::result_type);\n+                if is_type_diagnostic_item(cx, subs.as_generator().return_ty(), sym::Result);\n                 then {\n                     span_lint(\n                         cx,\n@@ -760,8 +760,8 @@ impl<'a, 'tcx> Visitor<'tcx> for FindPanicUnwrap<'a, 'tcx> {\n         // check for `unwrap`\n         if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n             let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n-            if is_type_diagnostic_item(self.cx, reciever_ty, sym::option_type)\n-                || is_type_diagnostic_item(self.cx, reciever_ty, sym::result_type)\n+            if is_type_diagnostic_item(self.cx, reciever_ty, sym::Option)\n+                || is_type_diagnostic_item(self.cx, reciever_ty, sym::Result)\n             {\n                 self.panic_span = Some(expr.span);\n             }"}, {"sha": "70337f5bbeb04039250630821b04d7e1a2b1bfd0", "filename": "src/tools/clippy/clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n         if_chain! {\n             if let hir::ItemKind::Impl(impl_) = &item.kind;\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(item.def_id);\n-            if cx.tcx.is_diagnostic_item(sym::from_trait, impl_trait_ref.def_id);\n+            if cx.tcx.is_diagnostic_item(sym::From, impl_trait_ref.def_id);\n             then {\n                 lint_impl_body(cx, item.span, impl_.items);\n             }\n@@ -94,8 +94,8 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n             // check for `unwrap`\n             if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n                 let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n-                if is_type_diagnostic_item(self.lcx, reciever_ty, sym::option_type)\n-                    || is_type_diagnostic_item(self.lcx, reciever_ty, sym::result_type)\n+                if is_type_diagnostic_item(self.lcx, reciever_ty, sym::Option)\n+                    || is_type_diagnostic_item(self.lcx, reciever_ty, sym::Result)\n                 {\n                     self.result.push(expr.span);\n                 }"}, {"sha": "129a8475e1c2321dabfb547b91fe9a1151eb34bd", "filename": "src/tools/clippy/clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -65,7 +65,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n             if_chain! {\n                 if format_args.format_string_symbols == [kw::Empty];\n                 if match cx.typeck_results().expr_ty(value).peel_refs().kind() {\n-                    ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(sym::string_type, adt.did),\n+                    ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(sym::String, adt.did),\n                     ty::Str => true,\n                     _ => false,\n                 };"}, {"sha": "347c6eb12cbcecb1715760ac65f77f7c7adff93f", "filename": "src/tools/clippy/clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -61,7 +61,7 @@ impl LateLintPass<'_> for FromOverInto {\n         if_chain! {\n             if let hir::ItemKind::Impl{ .. } = &item.kind;\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(item.def_id);\n-            if cx.tcx.is_diagnostic_item(sym::into_trait, impl_trait_ref.def_id);\n+            if cx.tcx.is_diagnostic_item(sym::Into, impl_trait_ref.def_id);\n \n             then {\n                 span_lint_and_help("}, {"sha": "98ce3db025caa015b4b42e1f7556d3570b0348d6", "filename": "src/tools/clippy/clippy_lints/src/from_str_radix_10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -98,5 +98,5 @@ impl LateLintPass<'tcx> for FromStrRadix10 {\n \n /// Checks if a Ty is `String` or `&str`\n fn is_ty_stringish(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n-    is_type_diagnostic_item(cx, ty, sym::string_type) || is_type_diagnostic_item(cx, ty, sym::str)\n+    is_type_diagnostic_item(cx, ty, sym::String) || is_type_diagnostic_item(cx, ty, sym::str)\n }"}, {"sha": "71f6f87ae602beb7d2009eb5642d1e85417c063a", "filename": "src/tools/clippy/clippy_lints/src/functions/result_unit_err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -48,7 +48,7 @@ fn check_result_unit_err(cx: &LateContext<'_>, decl: &hir::FnDecl<'_>, item_span\n         if !in_external_macro(cx.sess(), item_span);\n         if let hir::FnRetTy::Return(ty) = decl.output;\n         let ty = hir_ty_to_ty(cx.tcx, ty);\n-        if is_type_diagnostic_item(cx, ty, sym::result_type);\n+        if is_type_diagnostic_item(cx, ty, sym::Result);\n         if let ty::Adt(_, substs) = ty.kind();\n         let err_ty = substs.type_at(1);\n         if err_ty.is_unit();"}, {"sha": "e18442515b8fc4ffaf10e5a2c6534e387fbc7551", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -75,7 +75,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                 }\n             }\n             if is_future {\n-                let send_trait = cx.tcx.get_diagnostic_item(sym::send_trait).unwrap();\n+                let send_trait = cx.tcx.get_diagnostic_item(sym::Send).unwrap();\n                 let span = decl.output.span();\n                 let send_result = cx.tcx.infer_ctxt().enter(|infcx| {\n                     let cause = traits::ObligationCause::misc(span, hir_id);"}, {"sha": "f3929b0f1e617fd0ad2740c889d81afc817d8da7", "filename": "src/tools/clippy/clippy_lints/src/get_last_with_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fget_last_with_len.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> LateLintPass<'tcx> for GetLastWithLen {\n             // Argument 0 (the struct we're calling the method on) is a vector\n             if let Some(struct_calling_on) = args.get(0);\n             let struct_ty = cx.typeck_results().expr_ty(struct_calling_on);\n-            if is_type_diagnostic_item(cx, struct_ty, sym::vec_type);\n+            if is_type_diagnostic_item(cx, struct_ty, sym::Vec);\n \n             // Argument to \"get\" is a subtraction\n             if let Some(get_index_arg) = args.get(1);"}, {"sha": "a4118bf54b68313617425862dbe87ed5aae80826", "filename": "src/tools/clippy/clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -8,6 +8,7 @@ use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -141,7 +142,7 @@ fn is_mutex_lock_call<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Opt\n         if let ExprKind::MethodCall(path, _span, [self_arg, ..], _) = &expr.kind;\n         if path.ident.as_str() == \"lock\";\n         let ty = cx.typeck_results().expr_ty(self_arg);\n-        if is_type_diagnostic_item(cx, ty, sym!(mutex_type));\n+        if is_type_diagnostic_item(cx, ty, sym::Mutex);\n         then {\n             Some(self_arg)\n         } else {"}, {"sha": "9da06d1418e2deafe82aa7d7ccb72bd9118b3788", "filename": "src/tools/clippy/clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -225,14 +225,14 @@ impl<'tcx> ImplicitHasherType<'tcx> {\n \n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n \n-            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) && params_len == 2 {\n+            if is_type_diagnostic_item(cx, ty, sym::HashMap) && params_len == 2 {\n                 Some(ImplicitHasherType::HashMap(\n                     hir_ty.span,\n                     ty,\n                     snippet(cx, params[0].span, \"K\"),\n                     snippet(cx, params[1].span, \"V\"),\n                 ))\n-            } else if is_type_diagnostic_item(cx, ty, sym::hashset_type) && params_len == 1 {\n+            } else if is_type_diagnostic_item(cx, ty, sym::HashSet) && params_len == 1 {\n                 Some(ImplicitHasherType::HashSet(\n                     hir_ty.span,\n                     ty,\n@@ -347,7 +347,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n                     return;\n                 }\n \n-                if self.cx.tcx.is_diagnostic_item(sym::hashmap_type, ty_did) {\n+                if self.cx.tcx.is_diagnostic_item(sym::HashMap, ty_did) {\n                     if method.ident.name == sym::new {\n                         self.suggestions\n                             .insert(e.span, \"HashMap::default()\".to_string());\n@@ -360,7 +360,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n                             ),\n                         );\n                     }\n-                } else if self.cx.tcx.is_diagnostic_item(sym::hashset_type, ty_did) {\n+                } else if self.cx.tcx.is_diagnostic_item(sym::HashSet, ty_did) {\n                     if method.ident.name == sym::new {\n                         self.suggestions\n                             .insert(e.span, \"HashSet::default()\".to_string());"}, {"sha": "68c1fa35fcc4eb919de7512f654cede557cd0877", "filename": "src/tools/clippy/clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -210,11 +210,11 @@ const INFINITE_COLLECTORS: &[Symbol] = &[\n     sym::BinaryHeap,\n     sym::BTreeMap,\n     sym::BTreeSet,\n-    sym::hashmap_type,\n-    sym::hashset_type,\n+    sym::HashMap,\n+    sym::HashSet,\n     sym::LinkedList,\n-    sym::vec_type,\n-    sym::vecdeque_type,\n+    sym::Vec,\n+    sym::VecDeque,\n ];\n \n fn complete_infinite_iter(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {"}, {"sha": "3c40ca50a0981aa04c42d6357362fc4aef139311", "filename": "src/tools/clippy/clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -111,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             if impl_item.generics.params.is_empty();\n \n             // Check if return type is String\n-            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::string_type);\n+            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::String);\n \n             // Filters instances of to_string which are required by a trait\n             if trait_ref_of_method(cx, impl_item.hir_id()).is_none();"}, {"sha": "de46e50a68a137c950a11a3d77b04e898ddd94a0", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -245,10 +245,10 @@ enum LenOutput<'tcx> {\n fn parse_len_output(cx: &LateContext<'_>, sig: FnSig<'tcx>) -> Option<LenOutput<'tcx>> {\n     match *sig.output().kind() {\n         ty::Int(_) | ty::Uint(_) => Some(LenOutput::Integral),\n-        ty::Adt(adt, subs) if cx.tcx.is_diagnostic_item(sym::option_type, adt.did) => {\n+        ty::Adt(adt, subs) if cx.tcx.is_diagnostic_item(sym::Option, adt.did) => {\n             subs.type_at(0).is_integral().then(|| LenOutput::Option(adt.did))\n         },\n-        ty::Adt(adt, subs) if cx.tcx.is_diagnostic_item(sym::result_type, adt.did) => subs\n+        ty::Adt(adt, subs) if cx.tcx.is_diagnostic_item(sym::Result, adt.did) => subs\n             .type_at(0)\n             .is_integral()\n             .then(|| LenOutput::Result(adt.did, subs.type_at(1))),"}, {"sha": "5ac69d106ceb4aad5c4f968b8e0efb115566c9f9", "filename": "src/tools/clippy/clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -54,11 +54,11 @@ fn is_ref_iterable_type(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     // will allow further borrows afterwards\n     let ty = cx.typeck_results().expr_ty(e);\n     is_iterable_array(ty, cx) ||\n-    is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n+    is_type_diagnostic_item(cx, ty, sym::Vec) ||\n     is_type_diagnostic_item(cx, ty, sym::LinkedList) ||\n-    is_type_diagnostic_item(cx, ty, sym::hashmap_type) ||\n-    is_type_diagnostic_item(cx, ty, sym::hashset_type) ||\n-    is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n+    is_type_diagnostic_item(cx, ty, sym::HashMap) ||\n+    is_type_diagnostic_item(cx, ty, sym::HashSet) ||\n+    is_type_diagnostic_item(cx, ty, sym::VecDeque) ||\n     is_type_diagnostic_item(cx, ty, sym::BinaryHeap) ||\n     is_type_diagnostic_item(cx, ty, sym::BTreeMap) ||\n     is_type_diagnostic_item(cx, ty, sym::BTreeSet)"}, {"sha": "bee0e1d76831a2eac9586b41ea91325ed7f9eed1", "filename": "src/tools/clippy/clippy_lints/src/loops/for_kv_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -33,7 +33,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>, arg: &'tcx\n                 _ => arg,\n             };\n \n-            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || is_type_diagnostic_item(cx, ty, sym::BTreeMap) {\n+            if is_type_diagnostic_item(cx, ty, sym::HashMap) || is_type_diagnostic_item(cx, ty, sym::BTreeMap) {\n                 span_lint_and_then(\n                     cx,\n                     FOR_KV_MAP,"}, {"sha": "90530ebf0031f845ed3392fc6f4c9f6587a8e193", "filename": "src/tools/clippy/clippy_lints/src/loops/for_loops_over_fallibles.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -9,7 +9,7 @@ use rustc_span::symbol::sym;\n /// Checks for `for` loops over `Option`s and `Result`s.\n pub(super) fn check(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     let ty = cx.typeck_results().expr_ty(arg);\n-    if is_type_diagnostic_item(cx, ty, sym::option_type) {\n+    if is_type_diagnostic_item(cx, ty, sym::Option) {\n         span_lint_and_help(\n             cx,\n             FOR_LOOPS_OVER_FALLIBLES,\n@@ -26,7 +26,7 @@ pub(super) fn check(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n                 snippet(cx, arg.span, \"_\")\n             ),\n         );\n-    } else if is_type_diagnostic_item(cx, ty, sym::result_type) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::Result) {\n         span_lint_and_help(\n             cx,\n             FOR_LOOPS_OVER_FALLIBLES,"}, {"sha": "72027a163af821f3b46111992a2d70cf083e1562", "filename": "src/tools/clippy/clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -332,7 +332,7 @@ fn is_slice_like<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'_>) -> bool {\n         _ => false,\n     };\n \n-    is_slice || is_type_diagnostic_item(cx, ty, sym::vec_type) || is_type_diagnostic_item(cx, ty, sym::vecdeque_type)\n+    is_slice || is_type_diagnostic_item(cx, ty, sym::Vec) || is_type_diagnostic_item(cx, ty, sym::VecDeque)\n }\n \n fn fetch_cloned_expr<'tcx>(expr: &'tcx Expr<'tcx>) -> &'tcx Expr<'tcx> {"}, {"sha": "e87f4b669124f6e6c8fe2e3515e2fa1622972da2", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -29,8 +29,8 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n             let mut applicability = Applicability::MaybeIncorrect;\n             let is_empty_sugg = \"next().is_none()\".to_string();\n             let method_name = &*method.ident.name.as_str();\n-            let sugg = if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n-                        is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n+            let sugg = if is_type_diagnostic_item(cx, ty, sym::Vec) ||\n+                        is_type_diagnostic_item(cx, ty, sym::VecDeque) ||\n                         is_type_diagnostic_item(cx, ty, sym::LinkedList) ||\n                         is_type_diagnostic_item(cx, ty, sym::BinaryHeap) {\n                 match method_name {\n@@ -47,7 +47,7 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n                 }\n             }\n             else if is_type_diagnostic_item(cx, ty, sym::BTreeMap) ||\n-                is_type_diagnostic_item(cx, ty, sym::hashmap_type) {\n+                is_type_diagnostic_item(cx, ty, sym::HashMap) {\n                 match method_name {\n                     \"is_empty\" => is_empty_sugg,\n                     _ => return,\n@@ -79,8 +79,8 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                 if let ExprKind::MethodCall(method_name, collect_span, &[ref iter_source], ..) = init_expr.kind;\n                 if method_name.ident.name == sym!(collect) && is_trait_method(cx, init_expr, sym::Iterator);\n                 let ty = cx.typeck_results().expr_ty(init_expr);\n-                if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n-                    is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n+                if is_type_diagnostic_item(cx, ty, sym::Vec) ||\n+                    is_type_diagnostic_item(cx, ty, sym::VecDeque) ||\n                     is_type_diagnostic_item(cx, ty, sym::BinaryHeap) ||\n                     is_type_diagnostic_item(cx, ty, sym::LinkedList);\n                 if let Some(iter_calls) = detect_iter_and_into_iters(block, id);"}, {"sha": "2eb247de9f42b79a789e8695fb05edaaada931c5", "filename": "src/tools/clippy/clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -192,7 +192,7 @@ fn get_vec_push<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) -> Option<(&\n             if let Some(self_expr) = args.get(0);\n             if let Some(pushed_item) = args.get(1);\n             // Check that the method being called is push() on a Vec\n-            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(self_expr), sym::vec_type);\n+            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(self_expr), sym::Vec);\n             if path.ident.name.as_str() == \"push\";\n             then {\n                 return Some((self_expr, pushed_item))"}, {"sha": "96df3d0a490fa9ce44f7b58199e77f259d2ed8f2", "filename": "src/tools/clippy/clippy_lints/src/manual_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_map.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -61,8 +61,8 @@ impl LateLintPass<'_> for ManualMap {\n \n         let (scrutinee_ty, ty_ref_count, ty_mutability) =\n             peel_mid_ty_refs_is_mutable(cx.typeck_results().expr_ty(scrutinee));\n-        if !(is_type_diagnostic_item(cx, scrutinee_ty, sym::option_type)\n-            && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::option_type))\n+        if !(is_type_diagnostic_item(cx, scrutinee_ty, sym::Option)\n+            && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::Option))\n         {\n             return;\n         }"}, {"sha": "cf641d0ce8625765eb398467fa148fddf524a83a", "filename": "src/tools/clippy/clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -51,7 +51,7 @@ impl LateLintPass<'_> for ManualOkOr {\n             if args.len() == 3;\n             let method_receiver = &args[0];\n             let ty = cx.typeck_results().expr_ty(method_receiver);\n-            if is_type_diagnostic_item(cx, ty, sym::option_type);\n+            if is_type_diagnostic_item(cx, ty, sym::Option);\n             let or_expr = &args[1];\n             if is_ok_wrapping(cx, &args[2]);\n             if let ExprKind::Call(Expr { kind: ExprKind::Path(err_path), .. }, &[ref err_arg]) = or_expr.kind;"}, {"sha": "2ae9cb4f9c132b16d4189c1f5b7821de51d56c5a", "filename": "src/tools/clippy/clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -82,9 +82,9 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n     if_chain! {\n         if let ExprKind::Match(scrutinee, match_arms, _) = expr.kind;\n         let ty = cx.typeck_results().expr_ty(scrutinee);\n-        if let Some(ty_name) = if is_type_diagnostic_item(cx, ty, sym::option_type) {\n+        if let Some(ty_name) = if is_type_diagnostic_item(cx, ty, sym::Option) {\n             Some(\"Option\")\n-        } else if is_type_diagnostic_item(cx, ty, sym::result_type) {\n+        } else if is_type_diagnostic_item(cx, ty, sym::Result) {\n             Some(\"Result\")\n         } else {\n             None"}, {"sha": "7db5c7e52ea4565def25026273b4d7e1283b3777", "filename": "src/tools/clippy/clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -55,7 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n             if args.len() == 2;\n             if method.ident.name == sym::map;\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n-            if is_type_diagnostic_item(cx, ty, sym::option_type) || is_trait_method(cx, e, sym::Iterator);\n+            if is_type_diagnostic_item(cx, ty, sym::Option) || is_trait_method(cx, e, sym::Iterator);\n             if let hir::ExprKind::Closure(_, _, body_id, _, _) = args[1].kind;\n             then {\n                 let closure_body = cx.tcx.hir().body(body_id);"}, {"sha": "952e250bb9e6c4564f4148b8abc0aa763b6aebb7", "filename": "src/tools/clippy/clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -206,9 +206,9 @@ fn lint_map_unit_fn(cx: &LateContext<'_>, stmt: &hir::Stmt<'_>, expr: &hir::Expr\n     let var_arg = &map_args[0];\n \n     let (map_type, variant, lint) =\n-        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(var_arg), sym::option_type) {\n+        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(var_arg), sym::Option) {\n             (\"Option\", \"Some\", OPTION_MAP_UNIT_FN)\n-        } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(var_arg), sym::result_type) {\n+        } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(var_arg), sym::Result) {\n             (\"Result\", \"Ok\", RESULT_MAP_UNIT_FN)\n         } else {\n             return;"}, {"sha": "552c9a588977fc564d0a409a568839d50d299a56", "filename": "src/tools/clippy/clippy_lints/src/match_on_vec_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_on_vec_items.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -93,7 +93,7 @@ fn is_vec_indexing<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Opti\n fn is_vector(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(expr);\n     let ty = ty.peel_refs();\n-    is_type_diagnostic_item(cx, ty, sym::vec_type)\n+    is_type_diagnostic_item(cx, ty, sym::Vec)\n }\n \n fn is_full_range(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {"}, {"sha": "3db1f0421ea70efb35940ed2c9ab96fbcbc935ad", "filename": "src/tools/clippy/clippy_lints/src/match_result_ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_result_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_result_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_result_ok.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -60,7 +60,7 @@ impl<'tcx> LateLintPass<'tcx> for MatchResultOk {\n             if let ExprKind::MethodCall(_, ok_span, [ref result_types_0, ..], _) = let_expr.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n             if let PatKind::TupleStruct(QPath::Resolved(_, x), y, _)  = let_pat.kind; //get operation\n             if method_chain_args(let_expr, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n-            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(result_types_0), sym::result_type);\n+            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(result_types_0), sym::Result);\n             if rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(x, false)) == \"Some\";\n \n             then {"}, {"sha": "a685c1eaa2cd5e91a73248397af3a5125c8e8cf2", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -948,7 +948,7 @@ fn check_overlapping_arms<'tcx>(cx: &LateContext<'tcx>, ex: &'tcx Expr<'_>, arms\n \n fn check_wild_err_arm<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm<'tcx>]) {\n     let ex_ty = cx.typeck_results().expr_ty(ex).peel_refs();\n-    if is_type_diagnostic_item(cx, ex_ty, sym::result_type) {\n+    if is_type_diagnostic_item(cx, ex_ty, sym::Result) {\n         for arm in arms {\n             if let PatKind::TupleStruct(ref path, inner, _) = arm.pat.kind {\n                 let path_str = rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_qpath(path, false));\n@@ -1025,8 +1025,8 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n     let adt_def = match ty.kind() {\n         ty::Adt(adt_def, _)\n             if adt_def.is_enum()\n-                && !(is_type_diagnostic_item(cx, ty, sym::option_type)\n-                    || is_type_diagnostic_item(cx, ty, sym::result_type)) =>\n+                && !(is_type_diagnostic_item(cx, ty, sym::Option)\n+                    || is_type_diagnostic_item(cx, ty, sym::Result)) =>\n         {\n             adt_def\n         },\n@@ -1869,7 +1869,7 @@ mod redundant_pattern_match {\n             }\n         }\n         // Check for std types which implement drop, but only for memory allocation.\n-        else if is_type_diagnostic_item(cx, ty, sym::vec_type)\n+        else if is_type_diagnostic_item(cx, ty, sym::Vec)\n             || is_type_lang_item(cx, ty, LangItem::OwnedBox)\n             || is_type_diagnostic_item(cx, ty, sym::Rc)\n             || is_type_diagnostic_item(cx, ty, sym::Arc)"}, {"sha": "76eaedea8a0d229b1d5ff32282db7eb52ddfc1f0", "filename": "src/tools/clippy/clippy_lints/src/methods/bytes_nth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -12,7 +12,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, recv: &'tcx E\n     let ty = cx.typeck_results().expr_ty(recv).peel_refs();\n     let caller_type = if ty.is_str() {\n         \"str\"\n-    } else if is_type_diagnostic_item(cx, ty, sym::string_type) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::String) {\n         \"String\"\n     } else {\n         return;"}, {"sha": "6fe69b8f01f9be2670e8bb70b3d10a2a91c523eb", "filename": "src/tools/clippy/clippy_lints/src/methods/cloned_instead_of_copied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -15,7 +15,7 @@ pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span,\n     let inner_ty = match recv_ty.kind() {\n         // `Option<T>` -> `T`\n         ty::Adt(adt, subst)\n-            if cx.tcx.is_diagnostic_item(sym::option_type, adt.did) && meets_msrv(msrv, &msrvs::OPTION_COPIED) =>\n+            if cx.tcx.is_diagnostic_item(sym::Option, adt.did) && meets_msrv(msrv, &msrvs::OPTION_COPIED) =>\n         {\n             subst.type_at(0)\n         },"}, {"sha": "0ec9387f9c460f1426db4b319e59fe9d349ec2c1", "filename": "src/tools/clippy/clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -28,7 +28,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, method_span: Spa\n                         && {\n                             let arg_type = cx.typeck_results().expr_ty(&call_args[0]);\n                             let base_type = arg_type.peel_refs();\n-                            *base_type.kind() == ty::Str || is_type_diagnostic_item(cx, base_type, sym::string_type)\n+                            *base_type.kind() == ty::Str || is_type_diagnostic_item(cx, base_type, sym::String)\n                         }\n                     {\n                         &call_args[0]\n@@ -46,7 +46,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, method_span: Spa\n     // converted to string.\n     fn requires_to_string(cx: &LateContext<'_>, arg: &hir::Expr<'_>) -> bool {\n         let arg_ty = cx.typeck_results().expr_ty(arg);\n-        if is_type_diagnostic_item(cx, arg_ty, sym::string_type) {\n+        if is_type_diagnostic_item(cx, arg_ty, sym::String) {\n             return false;\n         }\n         if let ty::Ref(_, ty, ..) = arg_ty.kind() {\n@@ -113,9 +113,9 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, method_span: Spa\n     }\n \n     let receiver_type = cx.typeck_results().expr_ty_adjusted(&args[0]);\n-    let closure_args = if is_type_diagnostic_item(cx, receiver_type, sym::option_type) {\n+    let closure_args = if is_type_diagnostic_item(cx, receiver_type, sym::Option) {\n         \"||\"\n-    } else if is_type_diagnostic_item(cx, receiver_type, sym::result_type) {\n+    } else if is_type_diagnostic_item(cx, receiver_type, sym::Result) {\n         \"|_|\"\n     } else {\n         return;"}, {"sha": "55be513c5bb1f22a207f2b30ec961e8db40cbeaf", "filename": "src/tools/clippy/clippy_lints/src/methods/expect_used.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -10,9 +10,9 @@ use super::EXPECT_USED;\n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>) {\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n \n-    let mess = if is_type_diagnostic_item(cx, obj_ty, sym::option_type) {\n+    let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) {\n         Some((EXPECT_USED, \"an Option\", \"None\"))\n-    } else if is_type_diagnostic_item(cx, obj_ty, sym::result_type) {\n+    } else if is_type_diagnostic_item(cx, obj_ty, sym::Result) {\n         Some((EXPECT_USED, \"a Result\", \"Err\"))\n     } else {\n         None"}, {"sha": "687636f8237fb64fb87399d80bfe96ff5d957cbc", "filename": "src/tools/clippy/clippy_lints/src/methods/extend_with_drain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fextend_with_drain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fextend_with_drain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fextend_with_drain.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -12,15 +12,15 @@ use super::EXTEND_WITH_DRAIN;\n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, arg: &Expr<'_>) {\n     let ty = cx.typeck_results().expr_ty(recv).peel_refs();\n     if_chain! {\n-        if is_type_diagnostic_item(cx, ty, sym::vec_type);\n+        if is_type_diagnostic_item(cx, ty, sym::Vec);\n         //check source object\n         if let ExprKind::MethodCall(src_method, _, [drain_vec, drain_arg], _) = &arg.kind;\n         if src_method.ident.as_str() == \"drain\";\n         let src_ty = cx.typeck_results().expr_ty(drain_vec);\n         //check if actual src type is mutable for code suggestion\n         let immutable = src_ty.is_mutable_ptr();\n         let src_ty = src_ty.peel_refs();\n-        if is_type_diagnostic_item(cx, src_ty, sym::vec_type);\n+        if is_type_diagnostic_item(cx, src_ty, sym::Vec);\n         //check drain range\n         if let src_ty_range = cx.typeck_results().expr_ty(drain_arg).peel_refs();\n         if is_type_lang_item(cx, src_ty_range, LangItem::RangeFull);"}, {"sha": "c96c817bb8bdeb30806747c56ffcf5287de7e5d5", "filename": "src/tools/clippy/clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -61,7 +61,7 @@ fn lint_filter_some_map_unwrap(\n     methods_span: Span,\n ) {\n     let iterator = is_trait_method(cx, expr, sym::Iterator);\n-    let option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(filter_recv), sym::option_type);\n+    let option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(filter_recv), sym::Option);\n     if (iterator || option) && is_option_filter_map(cx, filter_arg, map_arg) {\n         let msg = \"`filter` for `Some` followed by `unwrap`\";\n         let help = \"consider using `flatten` instead\";\n@@ -120,9 +120,9 @@ pub(super) fn check<'tcx>(\n             if let PatKind::Binding(_, filter_param_id, _, None) = filter_pat.kind;\n             if let ExprKind::MethodCall(path, _, [filter_arg], _) = filter_body.value.kind;\n             if let Some(opt_ty) = cx.typeck_results().expr_ty(filter_arg).ty_adt_def();\n-            if let Some(is_result) = if cx.tcx.is_diagnostic_item(sym::option_type, opt_ty.did) {\n+            if let Some(is_result) = if cx.tcx.is_diagnostic_item(sym::Option, opt_ty.did) {\n                 Some(false)\n-            } else if cx.tcx.is_diagnostic_item(sym::result_type, opt_ty.did) {\n+            } else if cx.tcx.is_diagnostic_item(sym::Result, opt_ty.did) {\n                 Some(true)\n             } else {\n                 None"}, {"sha": "615bde9413349933a0ef4269eba975105e4cbbdf", "filename": "src/tools/clippy/clippy_lints/src/methods/flat_map_option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fflat_map_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fflat_map_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fflat_map_option.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -19,7 +19,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, arg\n         _ if arg_ty.is_fn() => arg_ty.fn_sig(cx.tcx),\n         _ => return,\n     };\n-    if !is_type_diagnostic_item(cx, sig.output().skip_binder(), sym::option_type) {\n+    if !is_type_diagnostic_item(cx, sig.output().skip_binder(), sym::Option) {\n         return;\n     }\n     span_lint_and_sugg("}, {"sha": "18e08d6ee23206b3e905bacb685d15aa48d91f19", "filename": "src/tools/clippy/clippy_lints/src/methods/get_unwrap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -27,13 +27,13 @@ pub(super) fn check<'tcx>(\n     let caller_type = if derefs_to_slice(cx, recv, expr_ty).is_some() {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"slice\"\n-    } else if is_type_diagnostic_item(cx, expr_ty, sym::vec_type) {\n+    } else if is_type_diagnostic_item(cx, expr_ty, sym::Vec) {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"Vec\"\n-    } else if is_type_diagnostic_item(cx, expr_ty, sym::vecdeque_type) {\n+    } else if is_type_diagnostic_item(cx, expr_ty, sym::VecDeque) {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"VecDeque\"\n-    } else if !is_mut && is_type_diagnostic_item(cx, expr_ty, sym::hashmap_type) {\n+    } else if !is_mut && is_type_diagnostic_item(cx, expr_ty, sym::HashMap) {\n         needs_ref = true;\n         \"HashMap\"\n     } else if !is_mut && is_type_diagnostic_item(cx, expr_ty, sym::BTreeMap) {"}, {"sha": "c0f66feb48ae8c067ef1b006fb1e075cfda25bc4", "filename": "src/tools/clippy/clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -55,7 +55,7 @@ fn specializes_tostring(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n         return true;\n     }\n \n-    if is_type_diagnostic_item(cx, ty, sym::string_type) {\n+    if is_type_diagnostic_item(cx, ty, sym::String) {\n         return true;\n     }\n "}, {"sha": "dd4ef6e4b58ee72ede7975985c9c76bfa0cb1cec", "filename": "src/tools/clippy/clippy_lints/src/methods/iter_cloned_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -11,7 +11,7 @@ use super::ITER_CLONED_COLLECT;\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, recv: &'tcx hir::Expr<'_>) {\n     if_chain! {\n-        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::vec_type);\n+        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::Vec);\n         if let Some(slice) = derefs_to_slice(cx, recv, cx.typeck_results().expr_ty(recv));\n         if let Some(to_replace) = expr.span.trim_start(slice.span.source_callsite());\n "}, {"sha": "052be3d8ee7cac1854f2c9188beb53b3fbd851f6", "filename": "src/tools/clippy/clippy_lints/src/methods/iter_count.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -13,13 +13,13 @@ pub(crate) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, recv: &'tcx E\n     let ty = cx.typeck_results().expr_ty(recv);\n     let caller_type = if derefs_to_slice(cx, recv, ty).is_some() {\n         \"slice\"\n-    } else if is_type_diagnostic_item(cx, ty, sym::vec_type) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::Vec) {\n         \"Vec\"\n-    } else if is_type_diagnostic_item(cx, ty, sym::vecdeque_type) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::VecDeque) {\n         \"VecDeque\"\n-    } else if is_type_diagnostic_item(cx, ty, sym::hashset_type) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::HashSet) {\n         \"HashSet\"\n-    } else if is_type_diagnostic_item(cx, ty, sym::hashmap_type) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::HashMap) {\n         \"HashMap\"\n     } else if is_type_diagnostic_item(cx, ty, sym::BTreeMap) {\n         \"BTreeMap\""}, {"sha": "d053ff567565c39686da673061745860d2d0eaba", "filename": "src/tools/clippy/clippy_lints/src/methods/iter_next_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -64,6 +64,6 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, cal\n }\n \n fn is_vec_or_array<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) -> bool {\n-    is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::vec_type)\n+    is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::Vec)\n         || matches!(&cx.typeck_results().expr_ty(expr).peel_refs().kind(), ty::Array(_, _))\n }"}, {"sha": "80ca4c94219f8548ab7303072f408047d4da5476", "filename": "src/tools/clippy/clippy_lints/src/methods/iter_nth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -19,9 +19,9 @@ pub(super) fn check<'tcx>(\n     let mut_str = if is_mut { \"_mut\" } else { \"\" };\n     let caller_type = if derefs_to_slice(cx, iter_recv, cx.typeck_results().expr_ty(iter_recv)).is_some() {\n         \"slice\"\n-    } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(iter_recv), sym::vec_type) {\n+    } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(iter_recv), sym::Vec) {\n         \"Vec\"\n-    } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(iter_recv), sym::vecdeque_type) {\n+    } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(iter_recv), sym::VecDeque) {\n         \"VecDeque\"\n     } else {\n         iter_nth_zero::check(cx, expr, nth_recv, nth_arg);"}, {"sha": "13eb72251bb14cf5083ec17a251feb06b194bccf", "filename": "src/tools/clippy/clippy_lints/src/methods/manual_split_once.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_split_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_split_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_split_once.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -123,7 +123,7 @@ fn parse_iter_usage(\n                     return if_chain! {\n                         if match_def_path(cx, did, &paths::ITERTOOLS_NEXT_TUPLE);\n                         if let ty::Adt(adt_def, subs) = cx.typeck_results().expr_ty(e).kind();\n-                        if cx.tcx.is_diagnostic_item(sym::option_type, adt_def.did);\n+                        if cx.tcx.is_diagnostic_item(sym::Option, adt_def.did);\n                         if let ty::Tuple(subs) = subs.type_at(0).kind();\n                         if subs.len() == 2;\n                         then {\n@@ -193,7 +193,7 @@ fn parse_iter_usage(\n                     && cx\n                         .typeck_results()\n                         .type_dependent_def_id(e.hir_id)\n-                        .map_or(false, |id| is_diag_item_method(cx, id, sym::option_type)) =>\n+                        .map_or(false, |id| is_diag_item_method(cx, id, sym::Option)) =>\n             {\n                 (Some(UnwrapKind::Unwrap), e.span)\n             },"}, {"sha": "d74c910b676717a244a43f1e4255fa0b1d8eadde", "filename": "src/tools/clippy/clippy_lints/src/methods/manual_str_repeat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -36,14 +36,14 @@ fn parse_repeat_arg(cx: &LateContext<'_>, e: &Expr<'_>) -> Option<RepeatKind> {\n         }\n     } else {\n         let ty = cx.typeck_results().expr_ty(e);\n-        if is_type_diagnostic_item(cx, ty, sym::string_type)\n+        if is_type_diagnostic_item(cx, ty, sym::String)\n             || (is_type_lang_item(cx, ty, LangItem::OwnedBox) && get_ty_param(ty).map_or(false, TyS::is_str))\n             || (match_type(cx, ty, &paths::COW) && get_ty_param(ty).map_or(false, TyS::is_str))\n         {\n             Some(RepeatKind::String)\n         } else {\n             let ty = ty.peel_refs();\n-            (ty.is_str() || is_type_diagnostic_item(cx, ty, sym::string_type)).then(|| RepeatKind::String)\n+            (ty.is_str() || is_type_diagnostic_item(cx, ty, sym::String)).then(|| RepeatKind::String)\n         }\n     }\n }\n@@ -58,7 +58,7 @@ pub(super) fn check(\n     if_chain! {\n         if let ExprKind::Call(repeat_fn, [repeat_arg]) = take_self_arg.kind;\n         if is_expr_path_def_path(cx, repeat_fn, &paths::ITER_REPEAT);\n-        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(collect_expr), sym::string_type);\n+        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(collect_expr), sym::String);\n         if let Some(collect_id) = cx.typeck_results().type_dependent_def_id(collect_expr.hir_id);\n         if let Some(take_id) = cx.typeck_results().type_dependent_def_id(take_expr.hir_id);\n         if let Some(iter_trait_id) = cx.tcx.get_diagnostic_item(sym::Iterator);"}, {"sha": "d420f144eea1ff197dfe7439719a9c6a934e83fd", "filename": "src/tools/clippy/clippy_lints/src/methods/map_collect_result_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -23,7 +23,7 @@ pub(super) fn check(\n         if is_trait_method(cx, collect_recv, sym::Iterator);\n         // return of collect `Result<(),_>`\n         let collect_ret_ty = cx.typeck_results().expr_ty(expr);\n-        if is_type_diagnostic_item(cx, collect_ret_ty, sym::result_type);\n+        if is_type_diagnostic_item(cx, collect_ret_ty, sym::Result);\n         if let ty::Adt(_, substs) = collect_ret_ty.kind();\n         if let Some(result_t) = substs.types().next();\n         if result_t.is_unit();"}, {"sha": "6782f64f2ca41f78a2128587741524dbd8cb2caa", "filename": "src/tools/clippy/clippy_lints/src/methods/map_flatten.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -27,7 +27,7 @@ pub(super) fn check<'tcx>(\n                     _ => map_closure_ty.fn_sig(cx.tcx),\n                 };\n                 let map_closure_return_ty = cx.tcx.erase_late_bound_regions(map_closure_sig.output());\n-                is_type_diagnostic_item(cx, map_closure_return_ty, sym::option_type)\n+                is_type_diagnostic_item(cx, map_closure_return_ty, sym::Option)\n             },\n             _ => false,\n         };\n@@ -55,9 +55,9 @@ pub(super) fn check<'tcx>(\n     // lint if caller of `.map().flatten()` is an Option or Result\n     let caller_type = match cx.typeck_results().expr_ty(recv).kind() {\n         ty::Adt(adt, _) => {\n-            if cx.tcx.is_diagnostic_item(sym::option_type, adt.did) {\n+            if cx.tcx.is_diagnostic_item(sym::Option, adt.did) {\n                 \"Option\"\n-            } else if cx.tcx.is_diagnostic_item(sym::result_type, adt.did) {\n+            } else if cx.tcx.is_diagnostic_item(sym::Result, adt.did) {\n                 \"Result\"\n             } else {\n                 return;"}, {"sha": "f112b500d3d296051a3c43033383e45bd92a1458", "filename": "src/tools/clippy/clippy_lints/src/methods/map_identity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -19,8 +19,8 @@ pub(super) fn check(\n \n     if_chain! {\n         if is_trait_method(cx, expr, sym::Iterator)\n-            || is_type_diagnostic_item(cx, caller_ty, sym::result_type)\n-            || is_type_diagnostic_item(cx, caller_ty, sym::option_type);\n+            || is_type_diagnostic_item(cx, caller_ty, sym::Result)\n+            || is_type_diagnostic_item(cx, caller_ty, sym::Option);\n         if is_expr_identity_function(cx, map_arg);\n         if let Some(sugg_span) = expr.span.trim_start(caller.span);\n         then {"}, {"sha": "9ec84e76519accbcfa1e8115522472e36b2facc1", "filename": "src/tools/clippy/clippy_lints/src/methods/map_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -22,8 +22,8 @@ pub(super) fn check<'tcx>(\n     msrv: Option<&RustcVersion>,\n ) -> bool {\n     // lint if the caller of `map()` is an `Option`\n-    let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::option_type);\n-    let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::result_type);\n+    let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Option);\n+    let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n \n     if is_result && !meets_msrv(msrv, &msrvs::RESULT_MAP_OR_ELSE) {\n         return false;"}, {"sha": "d64a9f320d90e175230009b348f76152e9d9462c", "filename": "src/tools/clippy/clippy_lints/src/methods/ok_expect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fok_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fok_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fok_expect.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -12,7 +12,7 @@ use super::OK_EXPECT;\n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>) {\n     if_chain! {\n         // lint if the caller of `ok()` is a `Result`\n-        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::result_type);\n+        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n         let result_type = cx.typeck_results().expr_ty(recv);\n         if let Some(error_type) = get_error_type(cx, result_type);\n         if has_debug_impl(error_type, cx);\n@@ -33,14 +33,14 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n /// Given a `Result<T, E>` type, return its error type (`E`).\n fn get_error_type<'a>(cx: &LateContext<'_>, ty: Ty<'a>) -> Option<Ty<'a>> {\n     match ty.kind() {\n-        ty::Adt(_, substs) if is_type_diagnostic_item(cx, ty, sym::result_type) => substs.types().nth(1),\n+        ty::Adt(_, substs) if is_type_diagnostic_item(cx, ty, sym::Result) => substs.types().nth(1),\n         _ => None,\n     }\n }\n \n /// This checks whether a given type is known to implement Debug.\n fn has_debug_impl<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {\n     cx.tcx\n-        .get_diagnostic_item(sym::debug_trait)\n+        .get_diagnostic_item(sym::Debug)\n         .map_or(false, |debug| implements_trait(cx, ty, debug, &[]))\n }"}, {"sha": "d3f40d2620805bde24f1ba3d39865a7d826ccb28", "filename": "src/tools/clippy/clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -28,7 +28,7 @@ pub(super) fn check<'tcx>(\n     let same_mutability = |m| (is_mut && m == &hir::Mutability::Mut) || (!is_mut && m == &hir::Mutability::Not);\n \n     let option_ty = cx.typeck_results().expr_ty(as_ref_recv);\n-    if !is_type_diagnostic_item(cx, option_ty, sym::option_type) {\n+    if !is_type_diagnostic_item(cx, option_ty, sym::Option) {\n         return;\n     }\n "}, {"sha": "e99b6b07d1569e88166ba30d44f881071a4984dc", "filename": "src/tools/clippy/clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -19,8 +19,8 @@ pub(super) fn check<'tcx>(\n     def_arg: &'tcx hir::Expr<'_>,\n     map_arg: &'tcx hir::Expr<'_>,\n ) {\n-    let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::option_type);\n-    let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::result_type);\n+    let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Option);\n+    let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n \n     // There are two variants of this `map_or` lint:\n     // (1) using `map_or` as an adapter from `Result<T,E>` to `Option<T>`"}, {"sha": "2faa6a69f81dc136bb45e56b11f779149015ecc3", "filename": "src/tools/clippy/clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -25,7 +25,7 @@ pub(super) fn check<'tcx>(\n     map_span: Span,\n ) {\n     // lint if the caller of `map()` is an `Option`\n-    if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::option_type) {\n+    if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Option) {\n         if !is_copy(cx, cx.typeck_results().expr_ty(unwrap_arg)) {\n             // Do not lint if the `map` argument uses identifiers in the `map`\n             // argument that are also used in the `unwrap_or` argument"}, {"sha": "cabbb8400767d104a08da17d0141668017c4eb13", "filename": "src/tools/clippy/clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -105,7 +105,7 @@ pub(super) fn check<'tcx>(\n                     _ => (),\n                 }\n \n-                if is_type_diagnostic_item(cx, ty, sym::vec_type) {\n+                if is_type_diagnostic_item(cx, ty, sym::Vec) {\n                     return;\n                 }\n             }"}, {"sha": "0f2e58d8983faf7188b261d9109cf0a245f4da6a", "filename": "src/tools/clippy/clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -101,7 +101,7 @@ pub(super) fn check<'tcx>(\n     else if search_method == \"find\" {\n         let is_string_or_str_slice = |e| {\n             let self_ty = cx.typeck_results().expr_ty(e).peel_refs();\n-            if is_type_diagnostic_item(cx, self_ty, sym::string_type) {\n+            if is_type_diagnostic_item(cx, self_ty, sym::String) {\n                 true\n             } else {\n                 *self_ty.kind() == ty::Str"}, {"sha": "d06658f2a5e6e8241e9878ea3684e8d0776760a5", "filename": "src/tools/clippy/clippy_lints/src/methods/string_extend_chars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -12,15 +12,15 @@ use super::STRING_EXTEND_CHARS;\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n-    if !is_type_diagnostic_item(cx, obj_ty, sym::string_type) {\n+    if !is_type_diagnostic_item(cx, obj_ty, sym::String) {\n         return;\n     }\n     if let Some(arglists) = method_chain_args(arg, &[\"chars\"]) {\n         let target = &arglists[0][0];\n         let self_ty = cx.typeck_results().expr_ty(target).peel_refs();\n         let ref_str = if *self_ty.kind() == ty::Str {\n             \"\"\n-        } else if is_type_diagnostic_item(cx, self_ty, sym::string_type) {\n+        } else if is_type_diagnostic_item(cx, self_ty, sym::String) {\n             \"&\"\n         } else {\n             return;"}, {"sha": "a9d3764d92d443d7ea52bb4e2702804cc940579f", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -35,7 +35,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<\n             let in_ty = cx.typeck_results().node_type(body.params[0].hir_id);\n             match cx.typeck_results().expr_ty(&body.value).kind() {\n                 ty::Adt(adt, subst)\n-                    if cx.tcx.is_diagnostic_item(sym::option_type, adt.did)\n+                    if cx.tcx.is_diagnostic_item(sym::Option, adt.did)\n                         && TyS::same_type(in_ty, subst.type_at(0)) =>\n                 {\n                     \"filter\""}, {"sha": "740af750b48a7bdaf9fc1a50d47cd1392e21fb1e", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -18,8 +18,8 @@ pub(super) fn check<'tcx>(\n     arg: &'tcx hir::Expr<'_>,\n     simplify_using: &str,\n ) {\n-    let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::option_type);\n-    let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::result_type);\n+    let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Option);\n+    let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n \n     if is_option || is_result {\n         if let hir::ExprKind::Closure(_, _, eid, _, _) = arg.kind {"}, {"sha": "276467b1dfdbff4a4a4e997651b3e3187ee44e6e", "filename": "src/tools/clippy/clippy_lints/src/methods/unwrap_or_else_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -19,8 +19,8 @@ pub(super) fn check<'tcx>(\n     // ^^^^^^^^^- recv          ^^^^^^^^^^^^^^^^- u_arg\n     // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- expr\n     let recv_ty = cx.typeck_results().expr_ty(recv);\n-    let is_option = is_type_diagnostic_item(cx, recv_ty, sym::option_type);\n-    let is_result = is_type_diagnostic_item(cx, recv_ty, sym::result_type);\n+    let is_option = is_type_diagnostic_item(cx, recv_ty, sym::Option);\n+    let is_result = is_type_diagnostic_item(cx, recv_ty, sym::Result);\n \n     if_chain! {\n         if is_option || is_result;"}, {"sha": "44676d78c60762f179dc088790c8a60ec0bfe011", "filename": "src/tools/clippy/clippy_lints/src/methods/unwrap_used.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -10,9 +10,9 @@ use super::UNWRAP_USED;\n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>) {\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n \n-    let mess = if is_type_diagnostic_item(cx, obj_ty, sym::option_type) {\n+    let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) {\n         Some((UNWRAP_USED, \"an Option\", \"None\"))\n-    } else if is_type_diagnostic_item(cx, obj_ty, sym::result_type) {\n+    } else if is_type_diagnostic_item(cx, obj_ty, sym::Result) {\n         Some((UNWRAP_USED, \"a Result\", \"Err\"))\n     } else {\n         None"}, {"sha": "ba2ce73a1165eeb1ef3707d91b1d373ce78b3fe5", "filename": "src/tools/clippy/clippy_lints/src/methods/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Futils.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -17,7 +17,7 @@ pub(super) fn derefs_to_slice<'tcx>(\n         match ty.kind() {\n             ty::Slice(_) => true,\n             ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n-            ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym::vec_type),\n+            ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym::Vec),\n             ty::Array(_, size) => size.try_eval_usize(cx.tcx, cx.param_env).is_some(),\n             ty::Ref(_, inner, _) => may_slice(cx, inner),\n             _ => false,"}, {"sha": "8476257f086fb9455c52c08aa62f5be009e00c8e", "filename": "src/tools/clippy/clippy_lints/src/mut_key.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -122,7 +122,7 @@ fn check_sig<'tcx>(cx: &LateContext<'tcx>, item_hir_id: hir::HirId, decl: &hir::\n fn check_ty<'tcx>(cx: &LateContext<'tcx>, span: Span, ty: Ty<'tcx>) {\n     let ty = ty.peel_refs();\n     if let Adt(def, substs) = ty.kind() {\n-        let is_keyed_type = [sym::hashmap_type, sym::BTreeMap, sym::hashset_type, sym::BTreeSet]\n+        let is_keyed_type = [sym::HashMap, sym::BTreeMap, sym::HashSet, sym::BTreeSet]\n             .iter()\n             .any(|diag_item| cx.tcx.is_diagnostic_item(*diag_item, def.did));\n         if is_keyed_type && is_interior_mutable_type(cx, substs.type_at(0), span) {\n@@ -147,11 +147,11 @@ fn is_interior_mutable_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, span: Sp\n             // that of their type parameters.  Note: we don't include `HashSet` and `HashMap`\n             // because they have no impl for `Hash` or `Ord`.\n             let is_std_collection = [\n-                sym::option_type,\n-                sym::result_type,\n+                sym::Option,\n+                sym::Result,\n                 sym::LinkedList,\n-                sym::vec_type,\n-                sym::vecdeque_type,\n+                sym::Vec,\n+                sym::VecDeque,\n                 sym::BTreeMap,\n                 sym::BTreeSet,\n                 sym::Rc,"}, {"sha": "b96fa4774cbb3633cdcae5b5a74f487ee1b66676", "filename": "src/tools/clippy/clippy_lints/src/mut_mutex_lock.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_mutex_lock.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -6,6 +6,7 @@ use rustc_hir::{Expr, ExprKind, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -51,7 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for MutMutexLock {\n             if path.ident.name == sym!(lock);\n             let ty = cx.typeck_results().expr_ty(self_arg);\n             if let ty::Ref(_, inner_ty, Mutability::Mut) = ty.kind();\n-            if is_type_diagnostic_item(cx, inner_ty, sym!(mutex_type));\n+            if is_type_diagnostic_item(cx, inner_ty, sym::Mutex);\n             then {\n                 span_lint_and_sugg(\n                     cx,"}, {"sha": "5feddcbfc61042c6eeecd73900de7354a172519c", "filename": "src/tools/clippy/clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -8,6 +8,7 @@ use rustc_hir::Expr;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -74,7 +75,7 @@ impl<'tcx> LateLintPass<'tcx> for Mutex {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         let ty = cx.typeck_results().expr_ty(expr);\n         if let ty::Adt(_, subst) = ty.kind() {\n-            if is_type_diagnostic_item(cx, ty, sym!(mutex_type)) {\n+            if is_type_diagnostic_item(cx, ty, sym::Mutex) {\n                 let mutex_param = subst.type_at(0);\n                 if let Some(atomic_name) = get_atomic_name(mutex_param) {\n                     let msg = format!("}, {"sha": "fbdaaf51f7484668306874e2f91f15d4087a7981", "filename": "src/tools/clippy/clippy_lints/src/needless_option_as_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -45,7 +45,7 @@ impl<'tcx> LateLintPass<'tcx> for OptionNeedlessDeref {\n         let outer_ty = typeck.expr_ty(expr);\n \n         if_chain! {\n-            if is_type_diagnostic_item(cx,outer_ty,sym::option_type);\n+            if is_type_diagnostic_item(cx,outer_ty,sym::Option);\n             if let ExprKind::MethodCall(path, _, [sub_expr], _) = expr.kind;\n             let symbol = path.ident.as_str();\n             if symbol==\"as_deref\" || symbol==\"as_deref_mut\";"}, {"sha": "352dc6f8bec3dd7d07c621d211837dc870ae46d1", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -206,7 +206,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n \n                         let deref_span = spans_need_deref.get(&canonical_id);\n                         if_chain! {\n-                            if is_type_diagnostic_item(cx, ty, sym::vec_type);\n+                            if is_type_diagnostic_item(cx, ty, sym::Vec);\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_owned()\")]);\n                             if let TyKind::Path(QPath::Resolved(_, path)) = input.kind;\n@@ -245,7 +245,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                             }\n                         }\n \n-                        if is_type_diagnostic_item(cx, ty, sym::string_type) {\n+                        if is_type_diagnostic_item(cx, ty, sym::String) {\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n                                 diag.span_suggestion("}, {"sha": "a62eb0699891bf583fc94e13a6e38629b533f877", "filename": "src/tools/clippy/clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -70,7 +70,7 @@ declare_lint_pass!(OptionIfLetElse => [OPTION_IF_LET_ELSE]);\n fn is_result_ok(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n     if let ExprKind::MethodCall(path, _, &[ref receiver], _) = &expr.kind {\n         path.ident.name.as_str() == \"ok\"\n-            && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(receiver), sym::result_type)\n+            && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(receiver), sym::Result)\n     } else {\n         false\n     }"}, {"sha": "583c42b65631395a3acfec3a5748b917ff91e90f", "filename": "src/tools/clippy/clippy_lints/src/panic_in_result_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -47,7 +47,7 @@ impl<'tcx> LateLintPass<'tcx> for PanicInResultFn {\n         span: Span,\n         hir_id: hir::HirId,\n     ) {\n-        if !matches!(fn_kind, FnKind::Closure) && is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type) {\n+        if !matches!(fn_kind, FnKind::Closure) && is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::Result) {\n             lint_impl_body(cx, span, body);\n         }\n     }"}, {"sha": "d180d6f922710ddc01f1e822184a4630c0e08048", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -258,7 +258,7 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n         }\n \n         if let ty::Ref(_, ty, Mutability::Not) = ty.kind() {\n-            if is_type_diagnostic_item(cx, ty, sym::vec_type) {\n+            if is_type_diagnostic_item(cx, ty, sym::Vec) {\n                 if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_owned()\")]) {\n                     span_lint_and_then(\n                         cx,\n@@ -288,7 +288,7 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         },\n                     );\n                 }\n-            } else if is_type_diagnostic_item(cx, ty, sym::string_type) {\n+            } else if is_type_diagnostic_item(cx, ty, sym::String) {\n                 if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n                     span_lint_and_then(\n                         cx,"}, {"sha": "aa6d254e7a54476acc0c109a431ae6b33d01f388", "filename": "src/tools/clippy/clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -143,7 +143,7 @@ impl QuestionMark {\n     fn is_option(cx: &LateContext<'_>, expression: &Expr<'_>) -> bool {\n         let expr_ty = cx.typeck_results().expr_ty(expression);\n \n-        is_type_diagnostic_item(cx, expr_ty, sym::option_type)\n+        is_type_diagnostic_item(cx, expr_ty, sym::Option)\n     }\n \n     fn expression_returns_none(cx: &LateContext<'_>, expression: &Expr<'_>) -> bool {"}, {"sha": "f7711b6fe947654b6de39254a0f3cc87f3f80717", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -123,7 +123,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n             let from_borrow = match_def_path(cx, fn_def_id, &paths::CLONE_TRAIT_METHOD)\n                 || match_def_path(cx, fn_def_id, &paths::TO_OWNED_METHOD)\n                 || (match_def_path(cx, fn_def_id, &paths::TO_STRING_METHOD)\n-                    && is_type_diagnostic_item(cx, arg_ty, sym::string_type));\n+                    && is_type_diagnostic_item(cx, arg_ty, sym::String));\n \n             let from_deref = !from_borrow\n                 && (match_def_path(cx, fn_def_id, &paths::PATH_TO_PATH_BUF)"}, {"sha": "d543832e314e97a197a38f6846d873513bf117f8", "filename": "src/tools/clippy/clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -45,7 +45,7 @@ impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n             if let Some(res) = last.res;\n             if let Some(def_id) = res.opt_def_id();\n \n-            if cx.tcx.is_diagnostic_item(sym::option_type, def_id);\n+            if cx.tcx.is_diagnostic_item(sym::Option, def_id);\n             if let Some(params) = last_path_segment(qpath).args ;\n             if !params.parenthesized;\n             if let Some(inner_ty) = params.args.iter().find_map(|arg| match arg {"}, {"sha": "5fd0d1527639e8698fa8760cfaa4385ede1a9d46", "filename": "src/tools/clippy/clippy_lints/src/repeat_once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frepeat_once.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -72,7 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for RepeatOnce {\n                         format!(\"{}.to_vec()\", snippet(cx, receiver.span, r#\"\"...\"\"#)),\n                         Applicability::MachineApplicable,\n                     );\n-                } else if is_type_diagnostic_item(cx, ty, sym::string_type) {\n+                } else if is_type_diagnostic_item(cx, ty, sym::String) {\n                     span_lint_and_sugg(\n                         cx,\n                         REPEAT_ONCE,"}, {"sha": "3608fe1472dda5b53eb07a454bd6246b9d47db58", "filename": "src/tools/clippy/clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -120,7 +120,7 @@ impl SlowVectorInit {\n             if let ExprKind::Call(func, [arg]) = expr.kind;\n             if let ExprKind::Path(QPath::TypeRelative(ty, name)) = func.kind;\n             if name.ident.as_str() == \"with_capacity\";\n-            if is_type_diagnostic_item(cx, cx.typeck_results().node_type(ty.hir_id), sym::vec_type);\n+            if is_type_diagnostic_item(cx, cx.typeck_results().node_type(ty.hir_id), sym::Vec);\n             then {\n                 Some(arg)\n             } else {"}, {"sha": "35b6bde56964c17f64c1f711dae4ed77fe9839d0", "filename": "src/tools/clippy/clippy_lints/src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -157,7 +157,7 @@ impl<'tcx> LateLintPass<'tcx> for StringAdd {\n }\n \n fn is_string(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n-    is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(e).peel_refs(), sym::string_type)\n+    is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(e).peel_refs(), sym::String)\n }\n \n fn is_add(cx: &LateContext<'_>, src: &Expr<'_>, target: &Expr<'_>) -> bool {\n@@ -397,7 +397,7 @@ impl LateLintPass<'_> for StringToString {\n             if let ExprKind::MethodCall(path, _, [self_arg, ..], _) = &expr.kind;\n             if path.ident.name == sym!(to_string);\n             let ty = cx.typeck_results().expr_ty(self_arg);\n-            if is_type_diagnostic_item(cx, ty, sym::string_type);\n+            if is_type_diagnostic_item(cx, ty, sym::String);\n             then {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "ef26de5b6b933dd810b9a0c845e2269efab2fb3b", "filename": "src/tools/clippy/clippy_lints/src/swap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fswap.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -86,8 +86,8 @@ fn generate_swap_warning(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>, spa\n \n                     if matches!(ty.kind(), ty::Slice(_))\n                         || matches!(ty.kind(), ty::Array(_, _))\n-                        || is_type_diagnostic_item(cx, ty, sym::vec_type)\n-                        || is_type_diagnostic_item(cx, ty, sym::vecdeque_type)\n+                        || is_type_diagnostic_item(cx, ty, sym::Vec)\n+                        || is_type_diagnostic_item(cx, ty, sym::VecDeque)\n                     {\n                         let slice = Sugg::hir_with_applicability(cx, lhs1, \"<slice>\", &mut applicability);\n                         span_lint_and_sugg(\n@@ -231,7 +231,7 @@ fn check_xor_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n     }\n }\n \n-/// Returns the lhs and rhs of an xor assignment statement.  \n+/// Returns the lhs and rhs of an xor assignment statement.\n fn extract_sides_of_xor_assign<'a, 'hir>(stmt: &'a Stmt<'hir>) -> Option<(&'a Expr<'hir>, &'a Expr<'hir>)> {\n     if let StmtKind::Semi(expr) = stmt.kind {\n         if let ExprKind::AssignOp("}, {"sha": "2ce8d4031d77cb7c721bf207404c8e5bc6d68875", "filename": "src/tools/clippy/clippy_lints/src/transmute/unsound_collection_transmute.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -9,13 +9,13 @@ use rustc_span::symbol::{sym, Symbol};\n \n // used to check for UNSOUND_COLLECTION_TRANSMUTE\n static COLLECTIONS: &[Symbol] = &[\n-    sym::vec_type,\n-    sym::vecdeque_type,\n+    sym::Vec,\n+    sym::VecDeque,\n     sym::BinaryHeap,\n     sym::BTreeSet,\n     sym::BTreeMap,\n-    sym::hashset_type,\n-    sym::hashmap_type,\n+    sym::HashSet,\n+    sym::HashMap,\n ];\n \n /// Checks for `unsound_collection_transmute` lint."}, {"sha": "e9ec120a7f958d78eb8e96441c57277515cfe2c3", "filename": "src/tools/clippy/clippy_lints/src/try_err.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftry_err.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -143,7 +143,7 @@ fn find_return_type<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx ExprKind<'_>) -> O\n fn result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n     if_chain! {\n         if let ty::Adt(_, subst) = ty.kind();\n-        if is_type_diagnostic_item(cx, ty, sym::result_type);\n+        if is_type_diagnostic_item(cx, ty, sym::Result);\n         then {\n             Some(subst.type_at(1))\n         } else {\n@@ -160,7 +160,7 @@ fn poll_result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<\n         let ready_ty = subst.type_at(0);\n \n         if let ty::Adt(ready_def, ready_subst) = ready_ty.kind();\n-        if cx.tcx.is_diagnostic_item(sym::result_type, ready_def.did);\n+        if cx.tcx.is_diagnostic_item(sym::Result, ready_def.did);\n         then {\n             Some(ready_subst.type_at(1))\n         } else {\n@@ -177,11 +177,11 @@ fn poll_option_result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) ->\n         let ready_ty = subst.type_at(0);\n \n         if let ty::Adt(ready_def, ready_subst) = ready_ty.kind();\n-        if cx.tcx.is_diagnostic_item(sym::option_type, ready_def.did);\n+        if cx.tcx.is_diagnostic_item(sym::Option, ready_def.did);\n         let some_ty = ready_subst.type_at(0);\n \n         if let ty::Adt(some_def, some_subst) = some_ty.kind();\n-        if cx.tcx.is_diagnostic_item(sym::result_type, some_def.did);\n+        if cx.tcx.is_diagnostic_item(sym::Result, some_def.did);\n         then {\n             Some(some_subst.type_at(1))\n         } else {"}, {"sha": "538c10a5b2045403640a0cae49cb1ce8ba9db760", "filename": "src/tools/clippy/clippy_lints/src/types/box_collection.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -38,11 +38,11 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n }\n \n fn get_std_collection(cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<&'static str> {\n-    if is_ty_param_diagnostic_item(cx, qpath, sym::vec_type).is_some() {\n+    if is_ty_param_diagnostic_item(cx, qpath, sym::Vec).is_some() {\n         Some(\"Vec\")\n-    } else if is_ty_param_diagnostic_item(cx, qpath, sym::string_type).is_some() {\n+    } else if is_ty_param_diagnostic_item(cx, qpath, sym::String).is_some() {\n         Some(\"String\")\n-    } else if is_ty_param_diagnostic_item(cx, qpath, sym::hashmap_type).is_some() {\n+    } else if is_ty_param_diagnostic_item(cx, qpath, sym::HashMap).is_some() {\n         Some(\"HashMap\")\n     } else {\n         None"}, {"sha": "4f50284e941abd1dcaab283b77c0bf24b4acee29", "filename": "src/tools/clippy/clippy_lints/src/types/option_option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Foption_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Foption_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Foption_option.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -7,8 +7,8 @@ use rustc_span::symbol::sym;\n use super::OPTION_OPTION;\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n-    if cx.tcx.is_diagnostic_item(sym::option_type, def_id)\n-        && is_ty_param_diagnostic_item(cx, qpath, sym::option_type).is_some()\n+    if cx.tcx.is_diagnostic_item(sym::Option, def_id)\n+        && is_ty_param_diagnostic_item(cx, qpath, sym::Option).is_some()\n     {\n         span_lint(\n             cx,"}, {"sha": "31c4abdfc95ea59d4f953926d80af3e14f9c9f1a", "filename": "src/tools/clippy/clippy_lints/src/types/rc_buffer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -20,7 +20,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 format!(\"Rc<{}>\", alternate),\n                 Applicability::MachineApplicable,\n             );\n-        } else if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym::vec_type) {\n+        } else if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym::Vec) {\n             let qpath = match &ty.kind {\n                 TyKind::Path(qpath) => qpath,\n                 _ => return false,\n@@ -55,7 +55,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 format!(\"Arc<{}>\", alternate),\n                 Applicability::MachineApplicable,\n             );\n-        } else if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym::vec_type) {\n+        } else if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym::Vec) {\n             let qpath = match &ty.kind {\n                 TyKind::Path(qpath) => qpath,\n                 _ => return false,\n@@ -85,7 +85,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n }\n \n fn match_buffer_type(cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<&'static str> {\n-    if is_ty_param_diagnostic_item(cx, qpath, sym::string_type).is_some() {\n+    if is_ty_param_diagnostic_item(cx, qpath, sym::String).is_some() {\n         Some(\"str\")\n     } else if is_ty_param_diagnostic_item(cx, qpath, sym::OsString).is_some() {\n         Some(\"std::ffi::OsStr\")"}, {"sha": "d54608a07bb27e70a5432be150f6fcd137b9653e", "filename": "src/tools/clippy/clippy_lints/src/types/rc_mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -10,7 +10,7 @@ use super::RC_MUTEX;\n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n     if_chain! {\n         if cx.tcx.is_diagnostic_item(sym::Rc, def_id) ;\n-        if let Some(_) = is_ty_param_diagnostic_item(cx, qpath, sym!(mutex_type)) ;\n+        if let Some(_) = is_ty_param_diagnostic_item(cx, qpath, sym::Mutex) ;\n         then {\n             span_lint_and_help(\n                 cx,"}, {"sha": "c632f822544a7297c851e9c2ac7710eb6c694530", "filename": "src/tools/clippy/clippy_lints/src/types/vec_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -19,7 +19,7 @@ pub(super) fn check(\n     def_id: DefId,\n     box_size_threshold: u64,\n ) -> bool {\n-    if cx.tcx.is_diagnostic_item(sym::vec_type, def_id) {\n+    if cx.tcx.is_diagnostic_item(sym::Vec, def_id) {\n         if_chain! {\n             // Get the _ part of Vec<_>\n             if let Some(last) = last_path_segment(qpath).args;"}, {"sha": "dd74bf367f3a58c810d484fe927561d27fb3cf9f", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -168,7 +168,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n         if let name = name_ident.ident.name.to_ident_string();\n         if name == \"sort_by\" || name == \"sort_unstable_by\";\n         if let [vec, Expr { kind: ExprKind::Closure(_, _, closure_body_id, _, _), .. }] = args;\n-        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(vec), sym::vec_type);\n+        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(vec), sym::Vec);\n         if let closure_body = cx.tcx.hir().body(*closure_body_id);\n         if let &[\n             Param { pat: Pat { kind: PatKind::Binding(_, _, left_ident, _), .. }, ..},"}, {"sha": "c940cf077d11c291ec7ac24e09725856fa30c861", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -101,9 +101,9 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n \n         // Get the wrapper and inner types, if can't, abort.\n         let (return_type_label, lang_item, inner_type) = if let ty::Adt(adt_def, subst) = return_ty(cx, hir_id).kind() {\n-            if cx.tcx.is_diagnostic_item(sym::option_type, adt_def.did) {\n+            if cx.tcx.is_diagnostic_item(sym::Option, adt_def.did) {\n                 (\"Option\", OptionSome, subst.type_at(0))\n-            } else if cx.tcx.is_diagnostic_item(sym::result_type, adt_def.did) {\n+            } else if cx.tcx.is_diagnostic_item(sym::Result, adt_def.did) {\n                 (\"Result\", ResultOk, subst.type_at(0))\n             } else {\n                 return;"}, {"sha": "ebaa9dcbbf85818cbcf8c36e399b0a44074df5cf", "filename": "src/tools/clippy/clippy_lints/src/unwrap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -132,11 +132,11 @@ fn collect_unwrap_info<'tcx>(\n     is_entire_condition: bool,\n ) -> Vec<UnwrapInfo<'tcx>> {\n     fn is_relevant_option_call(cx: &LateContext<'_>, ty: Ty<'_>, method_name: &str) -> bool {\n-        is_type_diagnostic_item(cx, ty, sym::option_type) && [\"is_some\", \"is_none\"].contains(&method_name)\n+        is_type_diagnostic_item(cx, ty, sym::Option) && [\"is_some\", \"is_none\"].contains(&method_name)\n     }\n \n     fn is_relevant_result_call(cx: &LateContext<'_>, ty: Ty<'_>, method_name: &str) -> bool {\n-        is_type_diagnostic_item(cx, ty, sym::result_type) && [\"is_ok\", \"is_err\"].contains(&method_name)\n+        is_type_diagnostic_item(cx, ty, sym::Result) && [\"is_ok\", \"is_err\"].contains(&method_name)\n     }\n \n     if let ExprKind::Binary(op, left, right) = &expr.kind {\n@@ -165,7 +165,7 @@ fn collect_unwrap_info<'tcx>(\n                     _ => unreachable!(),\n                 };\n                 let safe_to_unwrap = unwrappable != invert;\n-                let kind = if is_type_diagnostic_item(cx, ty, sym::option_type) {\n+                let kind = if is_type_diagnostic_item(cx, ty, sym::Option) {\n                     UnwrappableKind::Option\n                 } else {\n                     UnwrappableKind::Result"}, {"sha": "a4680ae137b3254e13f3c318448194a10211c8f9", "filename": "src/tools/clippy/clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -64,8 +64,8 @@ impl<'tcx> LateLintPass<'tcx> for UnwrapInResult {\n             // first check if it's a method or function\n             if let hir::ImplItemKind::Fn(ref _signature, _) = impl_item.kind;\n             // checking if its return type is `result` or `option`\n-            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::result_type)\n-                || is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::option_type);\n+            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::Result)\n+                || is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::Option);\n             then {\n                 lint_impl_body(cx, impl_item.span, impl_item);\n             }\n@@ -86,8 +86,8 @@ impl<'a, 'tcx> Visitor<'tcx> for FindExpectUnwrap<'a, 'tcx> {\n         // check for `expect`\n         if let Some(arglists) = method_chain_args(expr, &[\"expect\"]) {\n             let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n-            if is_type_diagnostic_item(self.lcx, reciever_ty, sym::option_type)\n-                || is_type_diagnostic_item(self.lcx, reciever_ty, sym::result_type)\n+            if is_type_diagnostic_item(self.lcx, reciever_ty, sym::Option)\n+                || is_type_diagnostic_item(self.lcx, reciever_ty, sym::Result)\n             {\n                 self.result.push(expr.span);\n             }\n@@ -96,8 +96,8 @@ impl<'a, 'tcx> Visitor<'tcx> for FindExpectUnwrap<'a, 'tcx> {\n         // check for `unwrap`\n         if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n             let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n-            if is_type_diagnostic_item(self.lcx, reciever_ty, sym::option_type)\n-                || is_type_diagnostic_item(self.lcx, reciever_ty, sym::result_type)\n+            if is_type_diagnostic_item(self.lcx, reciever_ty, sym::Option)\n+                || is_type_diagnostic_item(self.lcx, reciever_ty, sym::Result)\n             {\n                 self.result.push(expr.span);\n             }"}, {"sha": "88f11542072b849e7920c3893fb0bf0ce713ac49", "filename": "src/tools/clippy/clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -63,7 +63,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n             },\n \n             ExprKind::MethodCall(name, .., args, _) => {\n-                if is_trait_method(cx, e, sym::into_trait) && &*name.ident.as_str() == \"into\" {\n+                if is_trait_method(cx, e, sym::Into) && &*name.ident.as_str() == \"into\" {\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(&args[0]);\n                     if same_type_and_consts(a, b) {\n@@ -103,10 +103,10 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                     }\n                 }\n                 if_chain! {\n-                    if is_trait_method(cx, e, sym::try_into_trait) && name.ident.name == sym::try_into;\n+                    if is_trait_method(cx, e, sym::TryInto) && name.ident.name == sym::try_into;\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(&args[0]);\n-                    if is_type_diagnostic_item(cx, a, sym::result_type);\n+                    if is_type_diagnostic_item(cx, a, sym::Result);\n                     if let ty::Adt(_, substs) = a.kind();\n                     if let Some(a_type) = substs.types().next();\n                     if same_type_and_consts(a_type, b);\n@@ -134,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                         let b = cx.typeck_results().expr_ty(&args[0]);\n                         if_chain! {\n                             if match_def_path(cx, def_id, &paths::TRY_FROM);\n-                            if is_type_diagnostic_item(cx, a, sym::result_type);\n+                            if is_type_diagnostic_item(cx, a, sym::Result);\n                             if let ty::Adt(_, substs) = a.kind();\n                             if let Some(a_type) = substs.types().next();\n                             if same_type_and_consts(a_type, b);"}, {"sha": "59c40050522b2182f91c0dc40f9cc054997c3615", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -242,7 +242,7 @@ declare_clippy_lint! {\n     ///\n     /// Good:\n     /// ```rust,ignore\n-    /// utils::is_type_diagnostic_item(cx, ty, sym::vec_type)\n+    /// utils::is_type_diagnostic_item(cx, ty, sym::Vec)\n     /// ```\n     pub MATCH_TYPE_ON_DIAGNOSTIC_ITEM,\n     internal,"}, {"sha": "d8e241d72af48fa51222e9a3e86fbd01c0eb347b", "filename": "src/tools/clippy/clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -157,7 +157,7 @@ fn get_vec_init_kind<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Op\n     if let ExprKind::Call(func, args) = expr.kind {\n         match func.kind {\n             ExprKind::Path(QPath::TypeRelative(ty, name))\n-                if is_type_diagnostic_item(cx, cx.typeck_results().node_type(ty.hir_id), sym::vec_type) =>\n+                if is_type_diagnostic_item(cx, cx.typeck_results().node_type(ty.hir_id), sym::Vec) =>\n             {\n                 if name.ident.name == sym::new {\n                     return Some(VecInitKind::New);\n@@ -177,7 +177,7 @@ fn get_vec_init_kind<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Op\n             }\n             ExprKind::Path(QPath::Resolved(_, path))\n                 if match_def_path(cx, path.res.opt_def_id()?, &paths::DEFAULT_TRAIT_METHOD)\n-                    && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::vec_type) =>\n+                    && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::Vec) =>\n             {\n                 return Some(VecInitKind::New);\n             }"}, {"sha": "aa6b2614bbc908ca6e5f7757acfcc30f22348d15", "filename": "src/tools/clippy/clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -49,7 +49,7 @@ impl LateLintPass<'_> for ZeroSizedMapValues {\n             if !hir_ty.span.from_expansion();\n             if !in_trait_impl(cx, hir_ty.hir_id);\n             let ty = ty_from_hir_ty(cx, hir_ty);\n-            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || is_type_diagnostic_item(cx, ty, sym::BTreeMap);\n+            if is_type_diagnostic_item(cx, ty, sym::HashMap) || is_type_diagnostic_item(cx, ty, sym::BTreeMap);\n             if let Adt(_, substs) = ty.kind();\n             let ty = substs.type_at(1);\n             // Fixes https://github.com/rust-lang/rust-clippy/issues/7447 because of"}, {"sha": "1ea7ccfb75212bb5e9a12b3c04fe514dde7343db", "filename": "src/tools/clippy/clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -101,7 +101,7 @@ fn identify_some_potentially_expensive_patterns<'tcx>(cx: &LateContext<'tcx>, ex\n                 ExprKind::Call(..) => !is_ctor_or_promotable_const_function(self.cx, expr),\n                 ExprKind::Index(obj, _) => {\n                     let ty = self.cx.typeck_results().expr_ty(obj);\n-                    is_type_diagnostic_item(self.cx, ty, sym::hashmap_type)\n+                    is_type_diagnostic_item(self.cx, ty, sym::HashMap)\n                         || is_type_diagnostic_item(self.cx, ty, sym::BTreeMap)\n                 },\n                 ExprKind::MethodCall(..) => true,"}, {"sha": "00123fdba24903e54f089b9043114155b54ac0f4", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -647,13 +647,13 @@ pub fn can_mut_borrow_both(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>) -\n /// constructor from the std library\n fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<'_>) -> bool {\n     let std_types_symbols = &[\n-        sym::string_type,\n-        sym::vec_type,\n-        sym::vecdeque_type,\n+        sym::String,\n+        sym::Vec,\n+        sym::VecDeque,\n         sym::LinkedList,\n-        sym::hashmap_type,\n+        sym::HashMap,\n         sym::BTreeMap,\n-        sym::hashset_type,\n+        sym::HashSet,\n         sym::BTreeSet,\n         sym::BinaryHeap,\n     ];"}, {"sha": "5e0182ec1b8ead12d356448c3675a8fa190fb8b4", "filename": "src/tools/clippy/clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -88,7 +88,7 @@ pub const MEM_SIZE_OF_VAL: [&str; 3] = [\"core\", \"mem\", \"size_of_val\"];\n pub const MUTEX_GUARD: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"MutexGuard\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPS_MODULE: [&str; 2] = [\"core\", \"ops\"];\n-/// Preferably use the diagnostic item `sym::option_type` where possible\n+/// Preferably use the diagnostic item `sym::Option` where possible\n pub const OPTION: [&str; 3] = [\"core\", \"option\", \"Option\"];\n pub const OPTION_NONE: [&str; 4] = [\"core\", \"option\", \"Option\", \"None\"];\n pub const OPTION_SOME: [&str; 4] = [\"core\", \"option\", \"Option\", \"Some\"];\n@@ -135,7 +135,7 @@ pub const REGEX_BYTES_NEW: [&str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"new\"];\n pub const REGEX_BYTES_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"bytes\", \"RegexSet\", \"new\"];\n pub const REGEX_NEW: [&str; 4] = [\"regex\", \"re_unicode\", \"Regex\", \"new\"];\n pub const REGEX_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"unicode\", \"RegexSet\", \"new\"];\n-/// Preferably use the diagnostic item `sym::result_type` where possible\n+/// Preferably use the diagnostic item `sym::Result` where possible\n pub const RESULT: [&str; 3] = [\"core\", \"result\", \"Result\"];\n pub const RESULT_ERR: [&str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];\n pub const RESULT_OK: [&str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];"}, {"sha": "96cb8a4dae43ead3fe5cd9f54756e4ba7df04da0", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -77,16 +77,16 @@ pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<\n     // exists and has the desired signature. Unfortunately FnCtxt is not exported\n     // so we can't use its `lookup_method` method.\n     let into_iter_collections: &[Symbol] = &[\n-        sym::vec_type,\n-        sym::option_type,\n-        sym::result_type,\n+        sym::Vec,\n+        sym::Option,\n+        sym::Result,\n         sym::BTreeMap,\n         sym::BTreeSet,\n-        sym::vecdeque_type,\n+        sym::VecDeque,\n         sym::LinkedList,\n         sym::BinaryHeap,\n-        sym::hashset_type,\n-        sym::hashmap_type,\n+        sym::HashSet,\n+        sym::HashMap,\n         sym::PathBuf,\n         sym::Path,\n         sym::Receiver,"}, {"sha": "bf1d67e6054a28c743603257388312221882c7f7", "filename": "src/tools/clippy/tests/ui-internal/match_type_on_diag_item.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fmatch_type_on_diag_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eec856bfbcd79d12352f81b44a9f04e5bb06bda5/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fmatch_type_on_diag_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fmatch_type_on_diag_item.stderr?ref=eec856bfbcd79d12352f81b44a9f04e5bb06bda5", "patch": "@@ -2,7 +2,7 @@ error: usage of `clippy_utils::ty::match_type()` on a type diagnostic item\n   --> $DIR/match_type_on_diag_item.rs:30:17\n    |\n LL |         let _ = match_type(cx, ty, &OPTION);\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `clippy_utils::ty::is_type_diagnostic_item(cx, ty, sym::option_type)`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `clippy_utils::ty::is_type_diagnostic_item(cx, ty, sym::Option)`\n    |\n note: the lint level is defined here\n   --> $DIR/match_type_on_diag_item.rs:1:9\n@@ -15,7 +15,7 @@ error: usage of `clippy_utils::ty::match_type()` on a type diagnostic item\n   --> $DIR/match_type_on_diag_item.rs:31:17\n    |\n LL |         let _ = match_type(cx, ty, &[\"core\", \"result\", \"Result\"]);\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `clippy_utils::ty::is_type_diagnostic_item(cx, ty, sym::result_type)`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `clippy_utils::ty::is_type_diagnostic_item(cx, ty, sym::Result)`\n \n error: usage of `clippy_utils::ty::match_type()` on a type diagnostic item\n   --> $DIR/match_type_on_diag_item.rs:34:17"}]}