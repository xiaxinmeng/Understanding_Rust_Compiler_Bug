{"sha": "f508ddc5470e65243c4f6c79fc72e8b8534e71a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MDhkZGM1NDcwZTY1MjQzYzRmNmM3OWZjNzJlOGI4NTM0ZTcxYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-10T04:35:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-10T04:35:30Z"}, "message": "Auto merge of #36332 - llogiq:static_consts_feature, r=nikomatsakis\n\nadd static_in_const feature gate\n\nalso updates tests and deletes the spurious .bk files I inadvertently added last time.\n\nr? @nikomatsakis", "tree": {"sha": "f35ca3c07625b270560b34acaf04d94f1e8b63aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f35ca3c07625b270560b34acaf04d94f1e8b63aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f508ddc5470e65243c4f6c79fc72e8b8534e71a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f508ddc5470e65243c4f6c79fc72e8b8534e71a6", "html_url": "https://github.com/rust-lang/rust/commit/f508ddc5470e65243c4f6c79fc72e8b8534e71a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1284081d33d0e7856c6d242b3e311876c4eec048", "url": "https://api.github.com/repos/rust-lang/rust/commits/1284081d33d0e7856c6d242b3e311876c4eec048", "html_url": "https://github.com/rust-lang/rust/commit/1284081d33d0e7856c6d242b3e311876c4eec048"}, {"sha": "76a2f9f4542ccb15d6eb2426b162ce91094f04e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/76a2f9f4542ccb15d6eb2426b162ce91094f04e2", "html_url": "https://github.com/rust-lang/rust/commit/76a2f9f4542ccb15d6eb2426b162ce91094f04e2"}], "stats": {"total": 244, "additions": 62, "deletions": 182}, "files": [{"sha": "b72c3743a69ce1f34d447d7976f94b83ba62a66e", "filename": "src/doc/reference.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=f508ddc5470e65243c4f6c79fc72e8b8534e71a6", "patch": "@@ -2441,6 +2441,9 @@ The currently implemented features of the reference compiler are:\n             into a Rust program. This capability, especially the signature for the\n             annotated function, is subject to change.\n \n+* `static_in_const` - Enables lifetime elision with a `'static` default for\n+                      `const` and `static` item declarations.\n+\n * `thread_local` - The usage of the `#[thread_local]` attribute is experimental\n                    and should be seen as unstable. This attribute is used to\n                    declare a `static` as being unique per-thread leveraging"}, {"sha": "7d111cdc4156f66d5f88960edcf4cdafdfb0b980", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f508ddc5470e65243c4f6c79fc72e8b8534e71a6", "patch": "@@ -1567,7 +1567,7 @@ fn type_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             NodeItem(item) => {\n                 match item.node {\n                     ItemStatic(ref t, ..) | ItemConst(ref t, _) => {\n-                        ccx.icx(&()).to_ty(&ElidableRscope::new(ty::ReStatic), &t)\n+                        ccx.icx(&()).to_ty(&StaticRscope::new(&ccx.tcx), &t)\n                     }\n                     ItemFn(ref decl, unsafety, _, abi, ref generics, _) => {\n                         let tofd = AstConv::ty_of_bare_fn(&ccx.icx(generics), unsafety, abi, &decl,"}, {"sha": "131ecfc6e0c78339d9ddb0e4972e70a33b081690", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=f508ddc5470e65243c4f6c79fc72e8b8534e71a6", "patch": "@@ -213,6 +213,45 @@ impl RegionScope for ElidableRscope {\n     }\n }\n \n+/// A scope that behaves as an ElidabeRscope with a `'static` default region\n+/// that should also warn if the `static_in_const` feature is unset.\n+#[derive(Copy, Clone)]\n+pub struct StaticRscope<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n+    tcx: &'a ty::TyCtxt<'a, 'gcx, 'tcx>,\n+}\n+\n+impl<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> StaticRscope<'a, 'gcx, 'tcx> {\n+    /// create a new StaticRscope from a reference to the `TyCtxt`\n+    pub fn new(tcx: &'a ty::TyCtxt<'a, 'gcx, 'tcx>) -> Self {\n+        StaticRscope { tcx: tcx }\n+    }\n+}\n+\n+impl<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> RegionScope for StaticRscope<'a, 'gcx, 'tcx> {\n+    fn anon_regions(&self,\n+                    span: Span,\n+                    count: usize)\n+                    -> Result<Vec<ty::Region>, Option<Vec<ElisionFailureInfo>>> {\n+        if !self.tcx.sess.features.borrow().static_in_const {\n+            self.tcx\n+                .sess\n+                .struct_span_err(span,\n+                                 \"this needs a `'static` lifetime or the \\\n+                                 `static_in_const` feature, see #35897\")\n+                .emit();\n+        }\n+        Ok(vec![ty::ReStatic; count])\n+    }\n+\n+    fn object_lifetime_default(&self, span: Span) -> Option<ty::Region> {\n+        Some(self.base_object_lifetime_default(span))\n+    }\n+\n+    fn base_object_lifetime_default(&self, _span: Span) -> ty::Region {\n+        ty::ReStatic\n+    }\n+}\n+\n /// A scope in which we generate anonymous, late-bound regions for\n /// omitted regions. This occurs in function signatures.\n pub struct BindingRscope {"}, {"sha": "8b8a41fc204881d66fc61fe364314c2d1d1f23c2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f508ddc5470e65243c4f6c79fc72e8b8534e71a6", "patch": "@@ -295,6 +295,9 @@ declare_features! (\n \n     // Allows untagged unions `union U { ... }`\n     (active, untagged_unions, \"1.13.0\", Some(32836)),\n+\n+    // elide `'static` lifetimes in `static`s and `const`s\n+    (active, static_in_const, \"1.13.0\", Some(35897)),\n );\n \n declare_features! ("}, {"sha": "c1fc7cdd06cd0f6f9eace1a4d40f5d55181d547c", "filename": "src/test/compile-fail/feature-gate-static-in-const.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Ftest%2Fcompile-fail%2Ffeature-gate-static-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Ftest%2Fcompile-fail%2Ffeature-gate-static-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-static-in-const.rs?ref=f508ddc5470e65243c4f6c79fc72e8b8534e71a6", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static FOO: &str = \"this will work once static_in_const is stable\";\n+//~^ ERROR: this needs a `'static` lifetime or the `static_in_const` feature\n+\n+fn main() {}"}, {"sha": "acd50bcf9e112fa0d608ba26e8f97f1c61b8f49b", "filename": "src/test/compile-fail/issue-24446.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs?ref=f508ddc5470e65243c4f6c79fc72e8b8534e71a6", "patch": "@@ -12,7 +12,6 @@ fn main() {\n     static foo: Fn() -> u32 = || -> u32 {\n         //~^ ERROR: mismatched types\n         //~| ERROR: `std::ops::Fn() -> u32 + 'static: std::marker::Sized` is not satisfied\n-\n         0\n     };\n }"}, {"sha": "083cc218eecf33bd7bf3c0583ce3ecc0d6212d2d", "filename": "src/test/compile-fail/rfc1623.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Ftest%2Fcompile-fail%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Ftest%2Fcompile-fail%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1623.rs?ref=f508ddc5470e65243c4f6c79fc72e8b8534e71a6", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(static_in_const)]\n #![allow(dead_code)]\n \n fn non_elidable<'a, 'b>(a: &'a u8, b: &'b u8) -> &'a u8 {"}, {"sha": "abdcc02de767f6d0bfbcd6274a75562edf11c174", "filename": "src/test/compile-fail/rfc1623.rs.bk", "status": "removed", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/1284081d33d0e7856c6d242b3e311876c4eec048/src%2Ftest%2Fcompile-fail%2Frfc1623.rs.bk", "raw_url": "https://github.com/rust-lang/rust/raw/1284081d33d0e7856c6d242b3e311876c4eec048/src%2Ftest%2Fcompile-fail%2Frfc1623.rs.bk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1623.rs.bk?ref=1284081d33d0e7856c6d242b3e311876c4eec048", "patch": "@@ -1,98 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(dead_code)]\n-\n-fn non_elidable<'a, 'b>(a: &'a u8, b: &'b u8) -> &'a u8 { a }\n-\n-// the boundaries of elision\n-static NON_ELIDABLE_FN : &fn(&u8, &u8) -> &u8 =\n-//~^ ERROR: missing lifetime specifier\n-        &(non_elidable as fn(&u8, &u8) -> &u8);\n-\n-struct SomeStruct<'x, 'y, 'z: 'x> {\n-    foo: &'x Foo<'z>,\n-    bar: &'x Bar<'z>,\n-    f: &'y for<'a, 'b: 'a> Fn(&'a Foo<'b>) -> &'a Bar<'b>,\n-}\n-\n-fn id<T>(t: T) -> T { t }\n-\n-static SOME_STRUCT : &SomeStruct = SomeStruct {\n-    foo: &Foo { bools: &[false, true] },\n-    bar: &Bar { bools: &[true, true] },\n-    f: &id,\n-};\n-\n-// very simple test for a 'static static with default lifetime\n-static STATIC_STR : &'static str = \"&'static str\";\n-const CONST_STR : &'static str = \"&'static str\";\n-\n-// this should be the same as without default:\n-static EXPLICIT_STATIC_STR : &'static str = \"&'static str\";\n-const EXPLICIT_CONST_STR : &'static str = \"&'static str\";\n-\n-// a function that elides to an unbound lifetime for both in- and output\n-fn id_u8_slice(arg: &[u8]) -> &[u8] { arg }\n-\n-// one with a function, argument elided\n-static STATIC_SIMPLE_FN : &'static fn(&[u8]) -> &[u8] =\n-        &(id_u8_slice as fn(&[u8]) -> &[u8]);\n-const CONST_SIMPLE_FN : &'static fn(&[u8]) -> &[u8] =\n-        &(id_u8_slice as fn(&[u8]) -> &[u8]);\n-\n-// this should be the same as without elision\n-static STATIC_NON_ELIDED_fN : &'static for<'a> fn(&'a [u8]) -> &'a [u8] =\n-        &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n-const CONST_NON_ELIDED_fN : &'static for<'a> fn(&'a [u8]) -> &'a [u8] =\n-        &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n-\n-// another function that elides, each to a different unbound lifetime\n-fn multi_args(a: &u8, b: &u8, c: &u8) { }\n-\n-static STATIC_MULTI_FN : &'static fn(&u8, &u8, &u8) =\n-        &(multi_args as fn(&u8, &u8, &u8));\n-const CONST_MULTI_FN : &'static fn(&u8, &u8, &u8) =\n-        &(multi_args as fn(&u8, &u8, &u8));\n-\n-struct Foo<'a> {\n-    bools: &'a [bool]\n-}\n-\n-static STATIC_FOO : Foo<'static> = Foo { bools: &[true, false] };\n-const CONST_FOO : Foo<'static> = Foo { bools: &[true, false] };\n-\n-type Bar<'a> = Foo<'a>;\n-\n-static STATIC_BAR : Bar<'static> = Bar { bools: &[true, false] };\n-const CONST_BAR : Bar<'static> = Bar { bools: &[true, false] };\n-\n-type Baz<'a> = fn(&'a [u8]) -> Option<u8>;\n-\n-fn baz(e: &[u8]) -> Option<u8> { e.first().map(|x| *x) }\n-\n-static STATIC_BAZ : &'static Baz<'static> = &(baz as Baz);\n-const CONST_BAZ : &'static Baz<'static> = &(baz as Baz);\n-\n-static BYTES : &'static [u8] = &[1, 2, 3];\n-\n-fn main() {\n-    let x = &[1u8, 2, 3];\n-    let y = x;\n-\n-    //this works, so lifetime < `'static` is valid\n-    assert_eq!(Some(1), STATIC_BAZ(y));\n-    assert_eq!(Some(1), CONST_BAZ(y));\n-\n-    let y = &[1u8, 2, 3];\n-    //^~ ERROR: borrowed values does not live long enough\n-    STATIC_BAZ(BYTES); // BYTES has static lifetime\n-    CONST_BAZ(y); // This forces static lifetime, which y has not\n-}"}, {"sha": "fc9143dc450b76469a2a692c143b958ea7f09b50", "filename": "src/test/run-pass/rfc1623.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Ftest%2Frun-pass%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f508ddc5470e65243c4f6c79fc72e8b8534e71a6/src%2Ftest%2Frun-pass%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1623.rs?ref=f508ddc5470e65243c4f6c79fc72e8b8534e71a6", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(static_in_const)]\n #![allow(dead_code)]\n \n // very simple test for a 'static static with default lifetime"}, {"sha": "0915118ca27c077513280ee32f601ce5c27936e6", "filename": "src/test/run-pass/rfc1623.rs.bk", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/1284081d33d0e7856c6d242b3e311876c4eec048/src%2Ftest%2Frun-pass%2Frfc1623.rs.bk", "raw_url": "https://github.com/rust-lang/rust/raw/1284081d33d0e7856c6d242b3e311876c4eec048/src%2Ftest%2Frun-pass%2Frfc1623.rs.bk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1623.rs.bk?ref=1284081d33d0e7856c6d242b3e311876c4eec048", "patch": "@@ -1,81 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(dead_code)]\n-\n-// very simple test for a 'static static with default lifetime\n-static STATIC_STR : &str = \"&'static str\";\n-const CONST_STR : &str = \"&'static str\";\n-\n-// this should be the same as without default:\n-static EXPLICIT_STATIC_STR : &'static str = \"&'static str\";\n-const EXPLICIT_CONST_STR : &'static str = \"&'static str\";\n-\n-// a function that elides to an unbound lifetime for both in- and output\n-fn id_u8_slice(arg: &[u8]) -> &[u8] { arg }\n-\n-// one with a function, argument elided\n-static STATIC_SIMPLE_FN : &fn(&[u8]) -> &[u8] =\n-        &(id_u8_slice as fn(&[u8]) -> &[u8]);\n-const CONST_SIMPLE_FN : &fn(&[u8]) -> &[u8] =\n-        &(id_u8_slice as fn(&[u8]) -> &[u8]);\n-\n-// this should be the same as without elision\n-static STATIC_NON_ELIDED_fN : &for<'a> fn(&'a [u8]) -> &'a [u8] =\n-        &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n-const CONST_NON_ELIDED_fN : &for<'a> fn(&'a [u8]) -> &'a [u8] =\n-        &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n-\n-// another function that elides, each to a different unbound lifetime\n-fn multi_args(a: &u8, b: &u8, c: &u8) { }\n-\n-static STATIC_MULTI_FN : &fn(&u8, &u8, &u8) =\n-        &(multi_args as fn(&u8, &u8, &u8));\n-const CONST_MULTI_FN : &fn(&u8, &u8, &u8) =\n-        &(multi_args as fn(&u8, &u8, &u8));\n-\n-struct Foo<'a> {\n-    bools: &'a [bool]\n-}\n-\n-static STATIC_FOO : Foo = Foo { bools: &[true, false] };\n-const CONST_FOO : Foo = Foo { bools: &[true, false] };\n-\n-type Bar<'a> = Foo<'a>;\n-\n-static STATIC_BAR : Bar = Bar { bools: &[true, false] };\n-const CONST_BAR : Bar = Bar { bools: &[true, false] };\n-\n-type Baz<'a> = fn(&'a [u8]) -> Option<u8>;\n-\n-fn baz(e: &[u8]) -> Option<u8> { e.first().map(|x| *x) }\n-\n-static STATIC_BAZ : &Baz = &(baz as Baz);\n-const CONST_BAZ : &Baz = &(baz as Baz);\n-\n-static BYTES : &[u8] = &[1, 2, 3];\n-\n-fn main() {\n-    // make sure that the lifetime is actually elided (and not defaulted)\n-    let x = &[1u8, 2, 3];\n-    STATIC_SIMPLE_FN(x);\n-    CONST_SIMPLE_FN(x);\n-\n-    STATIC_BAZ(BYTES); // neees static lifetime\n-    CONST_BAZ(BYTES);\n-\n-    // make sure this works with different lifetimes\n-    let a = &1;\n-    {\n-        let b = &2;\n-        let c = &3;\n-        CONST_MULTI_FN(a, b, c);\n-    }\n-}"}]}