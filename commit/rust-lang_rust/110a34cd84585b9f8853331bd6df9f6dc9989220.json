{"sha": "110a34cd84585b9f8853331bd6df9f6dc9989220", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMGEzNGNkODQ1ODViOWY4ODUzMzMxYmQ2ZGY5ZjZkYzk5ODkyMjA=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-24T20:05:20Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-24T21:39:56Z"}, "message": "Use get_dataptr() and get_meta() where appropriate", "tree": {"sha": "2b8480eacf4082d05240ae639a57e6475c084800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b8480eacf4082d05240ae639a57e6475c084800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/110a34cd84585b9f8853331bd6df9f6dc9989220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/110a34cd84585b9f8853331bd6df9f6dc9989220", "html_url": "https://github.com/rust-lang/rust/commit/110a34cd84585b9f8853331bd6df9f6dc9989220", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/110a34cd84585b9f8853331bd6df9f6dc9989220/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d80ff126bf4597fa44612abdb21d7d3ff6ecbce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4", "html_url": "https://github.com/rust-lang/rust/commit/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "dc96aa40f47bd098bc6b184e835777f71dca64ef", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/110a34cd84585b9f8853331bd6df9f6dc9989220/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110a34cd84585b9f8853331bd6df9f6dc9989220/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=110a34cd84585b9f8853331bd6df9f6dc9989220", "patch": "@@ -188,7 +188,6 @@ pub use self::TransBindingMode::*;\n use self::Opt::*;\n use self::FailureHandler::*;\n \n-use back::abi;\n use llvm::{ValueRef, BasicBlockRef};\n use middle::check_match::StaticInliner;\n use middle::check_match;\n@@ -730,9 +729,8 @@ fn bind_subslice_pat(bcx: Block,\n     let slice_ty = bcx.tcx().mk_imm_ref(bcx.tcx().mk_region(ty::ReStatic),\n                                          bcx.tcx().mk_slice(unit_ty));\n     let scratch = rvalue_scratch_datum(bcx, slice_ty, \"\");\n-    Store(bcx, slice_begin,\n-          GEPi(bcx, scratch.val, &[0, abi::FAT_PTR_ADDR]));\n-    Store(bcx, slice_len, GEPi(bcx, scratch.val, &[0, abi::FAT_PTR_EXTRA]));\n+    Store(bcx, slice_begin, expr::get_dataptr(bcx, scratch.val));\n+    Store(bcx, slice_len, expr::get_meta(bcx, scratch.val));\n     scratch.val\n }\n \n@@ -909,14 +907,14 @@ fn compare_values<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                     let ty_str_slice = cx.tcx().mk_static_str();\n \n                     let rhs_str = alloc_ty(cx, ty_str_slice, \"rhs_str\");\n-                    Store(cx, GEPi(cx, rhs, &[0, 0]), expr::get_dataptr(cx, rhs_str));\n+                    Store(cx, expr::get_dataptr(cx, rhs), expr::get_dataptr(cx, rhs_str));\n                     Store(cx, C_uint(cx.ccx(), pat_len), expr::get_meta(cx, rhs_str));\n \n                     let lhs_str;\n                     if val_ty(lhs) == val_ty(rhs) {\n                         // Both the discriminant and the pattern are thin pointers\n                         lhs_str = alloc_ty(cx, ty_str_slice, \"lhs_str\");\n-                        Store(cx, GEPi(cx, lhs, &[0, 0]), expr::get_dataptr(cx, lhs_str));\n+                        Store(cx, expr::get_dataptr(cx, lhs), expr::get_dataptr(cx, lhs_str));\n                         Store(cx, C_uint(cx.ccx(), pat_len), expr::get_meta(cx, lhs_str));\n                     }\n                     else {"}, {"sha": "955a777bbbe70800cf52f172098a5ea39437b9ed", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/110a34cd84585b9f8853331bd6df9f6dc9989220/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110a34cd84585b9f8853331bd6df9f6dc9989220/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=110a34cd84585b9f8853331bd6df9f6dc9989220", "patch": "@@ -403,8 +403,8 @@ pub fn iter_structural_ty<'blk, 'tcx, F>(cx: Block<'blk, 'tcx>,\n     let (data_ptr, info) = if common::type_is_sized(cx.tcx(), t) {\n         (av, None)\n     } else {\n-        let data = GEPi(cx, av, &[0, abi::FAT_PTR_ADDR]);\n-        let info = GEPi(cx, av, &[0, abi::FAT_PTR_EXTRA]);\n+        let data = expr::get_dataptr(cx, av);\n+        let info = expr::get_meta(cx, av);\n         (Load(cx, data), Some(Load(cx, info)))\n     };\n \n@@ -420,8 +420,8 @@ pub fn iter_structural_ty<'blk, 'tcx, F>(cx: Block<'blk, 'tcx>,\n                   llfld_a\n               } else {\n                   let scratch = datum::rvalue_scratch_datum(cx, field_ty, \"__fat_ptr_iter\");\n-                  Store(cx, llfld_a, GEPi(cx, scratch.val, &[0, abi::FAT_PTR_ADDR]));\n-                  Store(cx, info.unwrap(), GEPi(cx, scratch.val, &[0, abi::FAT_PTR_EXTRA]));\n+                  Store(cx, llfld_a, expr::get_dataptr(cx, scratch.val));\n+                  Store(cx, info.unwrap(), expr::get_meta(cx, scratch.val));\n                   scratch.val\n               };\n               cx = f(cx, val, field_ty);"}, {"sha": "5083829005b07fb4b97b5e92d3de8830c651fc26", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/110a34cd84585b9f8853331bd6df9f6dc9989220/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110a34cd84585b9f8853331bd6df9f6dc9989220/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=110a34cd84585b9f8853331bd6df9f6dc9989220", "patch": "@@ -13,7 +13,6 @@\n // Code relating to drop glue.\n \n \n-use back::abi;\n use back::link::*;\n use llvm;\n use llvm::{ValueRef, get_param};\n@@ -524,14 +523,14 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n             // a safe-guard, assert TyBox not used with TyContents.\n             assert!(!skip_dtor);\n             if !type_is_sized(bcx.tcx(), content_ty) {\n-                let llval = GEPi(bcx, v0, &[0, abi::FAT_PTR_ADDR]);\n+                let llval = expr::get_dataptr(bcx, v0);\n                 let llbox = Load(bcx, llval);\n                 let llbox_as_usize = PtrToInt(bcx, llbox, Type::int(bcx.ccx()));\n                 let drop_flag_not_dropped_already =\n                     ICmp(bcx, llvm::IntNE, llbox_as_usize, dropped_pattern, DebugLoc::None);\n                 with_cond(bcx, drop_flag_not_dropped_already, |bcx| {\n                     let bcx = drop_ty(bcx, v0, content_ty, DebugLoc::None);\n-                    let info = GEPi(bcx, v0, &[0, abi::FAT_PTR_EXTRA]);\n+                    let info = expr::get_meta(bcx, v0);\n                     let info = Load(bcx, info);\n                     let (llsize, llalign) = size_and_align_of_dst(bcx, content_ty, info);\n \n@@ -590,8 +589,8 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n             // versus without calling Drop::drop. Assert caller is\n             // okay with always calling the Drop impl, if any.\n             assert!(!skip_dtor);\n-            let data_ptr = GEPi(bcx, v0, &[0, abi::FAT_PTR_ADDR]);\n-            let vtable_ptr = Load(bcx, GEPi(bcx, v0, &[0, abi::FAT_PTR_EXTRA]));\n+            let data_ptr = expr::get_dataptr(bcx, v0);\n+            let vtable_ptr = Load(bcx, expr::get_meta(bcx, v0));\n             let dtor = Load(bcx, vtable_ptr);\n             Call(bcx,\n                  dtor,"}, {"sha": "a86ef17a166bf87be7a48bb8d7ca120ff3bf996e", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/110a34cd84585b9f8853331bd6df9f6dc9989220/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110a34cd84585b9f8853331bd6df9f6dc9989220/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=110a34cd84585b9f8853331bd6df9f6dc9989220", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use arena::TypedArena;\n-use back::abi;\n use back::link;\n use llvm::{ValueRef, get_params};\n use middle::subst::{Subst, Substs};\n@@ -445,8 +444,8 @@ fn trans_trait_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         self_datum.val\n     };\n \n-    let llself = Load(bcx, GEPi(bcx, llval, &[0, abi::FAT_PTR_ADDR]));\n-    let llvtable = Load(bcx, GEPi(bcx, llval, &[0, abi::FAT_PTR_EXTRA]));\n+    let llself = Load(bcx, expr::get_dataptr(bcx, llval));\n+    let llvtable = Load(bcx, expr::get_meta(bcx, llval));\n     trans_trait_callee_from_llval(bcx, opaque_fn_ty, vtable_index, llself, llvtable)\n }\n "}, {"sha": "57e7cc4b02e17a7d5e4bda2ca99db47b90bd7ae1", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/110a34cd84585b9f8853331bd6df9f6dc9989220/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110a34cd84585b9f8853331bd6df9f6dc9989220/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=110a34cd84585b9f8853331bd6df9f6dc9989220", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(non_camel_case_types)]\n \n-use back::abi;\n use llvm;\n use llvm::ValueRef;\n use trans::base::*;\n@@ -147,8 +146,8 @@ pub fn trans_lit_str<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let llbytes = C_uint(bcx.ccx(), bytes);\n             let llcstr = C_cstr(bcx.ccx(), str_lit, false);\n             let llcstr = consts::ptrcast(llcstr, Type::i8p(bcx.ccx()));\n-            Store(bcx, llcstr, GEPi(bcx, lldest, &[0, abi::FAT_PTR_ADDR]));\n-            Store(bcx, llbytes, GEPi(bcx, lldest, &[0, abi::FAT_PTR_EXTRA]));\n+            Store(bcx, llcstr, expr::get_dataptr(bcx, lldest));\n+            Store(bcx, llbytes, expr::get_meta(bcx, lldest));\n             bcx\n         }\n     }"}]}