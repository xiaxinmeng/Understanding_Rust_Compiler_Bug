{"sha": "c5d5c576667ae592e4ab43390a733197a0b52c01", "node_id": "C_kwDOAAsO6NoAKGM1ZDVjNTc2NjY3YWU1OTJlNGFiNDMzOTBhNzMzMTk3YTBiNTJjMDE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-19T07:33:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-19T07:33:42Z"}, "message": "Rollup merge of #108189 - compiler-errors:non_lifetime_binders-bound-stuff, r=jackh726\n\nFix some more `non_lifetime_binders` stuff with higher-ranked trait bounds\n\n1. When assembling candidates for `for<T> T: Sized`, we can't ICE because the self-type is a bound type.\n2. Fix an issue where, when canonicalizing in non-universe preserving mode, we don't actually set the universe for placeholders to the root even though we do the same for region vars.\n3. Make `Placeholder(\"T\")` format like `T` in error messages.\n\nFixes #108180\nFixes #108182\n\nr? types", "tree": {"sha": "c083ca01fbc399de02c7b1ba98ae787888539859", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c083ca01fbc399de02c7b1ba98ae787888539859"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5d5c576667ae592e4ab43390a733197a0b52c01", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj8dDWCRBK7hj4Ov3rIwAAW2oIADO/IdPmILauFJOlOv+/AkdM\nT/G8WoXTj2WltETfCO2+o6tKPI4Edk5TZmgMPDgkaF/0wtvNcl93LRRkteW3cOLE\n66d30UTDXwhZdO3m1fKK6Afaquk9yGbIJwTtlCmqVk4THlDxCz/mKVJlo+THFY+1\nuMYhy8ex+1u1t67sXNPwUc4szPnCs/8tBfe/r7vlS7LDZhi33MSViRj5kD+NaKQg\nCXAyq6Wa9QtIxaNGykwbWwJ9YyV8DOB9w4tswlqtNP6jRgJKKzYyN0a64ZK9vLk/\nN6YFFBBehygSXeK9yOO4v9ngcn5/rQ+cWYU85XXpoXr+7klrsxpiOzzvlznCSNY=\n=9I/d\n-----END PGP SIGNATURE-----\n", "payload": "tree c083ca01fbc399de02c7b1ba98ae787888539859\nparent 636679ecd63a083cd2e3931a77f8a469a8c57c85\nparent 6f3706ea71a89a431acf7f84573b87c2ac98b0c7\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1676792022 +0530\ncommitter GitHub <noreply@github.com> 1676792022 +0530\n\nRollup merge of #108189 - compiler-errors:non_lifetime_binders-bound-stuff, r=jackh726\n\nFix some more `non_lifetime_binders` stuff with higher-ranked trait bounds\n\n1. When assembling candidates for `for<T> T: Sized`, we can't ICE because the self-type is a bound type.\n2. Fix an issue where, when canonicalizing in non-universe preserving mode, we don't actually set the universe for placeholders to the root even though we do the same for region vars.\n3. Make `Placeholder(\"T\")` format like `T` in error messages.\n\nFixes #108180\nFixes #108182\n\nr? types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d5c576667ae592e4ab43390a733197a0b52c01", "html_url": "https://github.com/rust-lang/rust/commit/c5d5c576667ae592e4ab43390a733197a0b52c01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5d5c576667ae592e4ab43390a733197a0b52c01/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "636679ecd63a083cd2e3931a77f8a469a8c57c85", "url": "https://api.github.com/repos/rust-lang/rust/commits/636679ecd63a083cd2e3931a77f8a469a8c57c85", "html_url": "https://github.com/rust-lang/rust/commit/636679ecd63a083cd2e3931a77f8a469a8c57c85"}, {"sha": "6f3706ea71a89a431acf7f84573b87c2ac98b0c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f3706ea71a89a431acf7f84573b87c2ac98b0c7", "html_url": "https://github.com/rust-lang/rust/commit/6f3706ea71a89a431acf7f84573b87c2ac98b0c7"}], "stats": {"total": 112, "additions": 103, "deletions": 9}, "files": [{"sha": "b736a416e4a108922e3103ca7aa84c26ae71b83e", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5d5c576667ae592e4ab43390a733197a0b52c01/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d5c576667ae592e4ab43390a733197a0b52c01/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=c5d5c576667ae592e4ab43390a733197a0b52c01", "patch": "@@ -418,10 +418,15 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'cx, 'tcx> {\n                 bug!(\"encountered a fresh type during canonicalization\")\n             }\n \n-            ty::Placeholder(placeholder) => self.canonicalize_ty_var(\n-                CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderTy(placeholder) },\n-                t,\n-            ),\n+            ty::Placeholder(mut placeholder) => {\n+                if !self.canonicalize_mode.preserve_universes() {\n+                    placeholder.universe = ty::UniverseIndex::ROOT;\n+                }\n+                self.canonicalize_ty_var(\n+                    CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderTy(placeholder) },\n+                    t,\n+                )\n+            }\n \n             ty::Bound(debruijn, _) => {\n                 if debruijn >= self.binder_index {"}, {"sha": "a101127104de812d83cff116dbfce975e9d9bd8a", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5d5c576667ae592e4ab43390a733197a0b52c01/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d5c576667ae592e4ab43390a733197a0b52c01/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=c5d5c576667ae592e4ab43390a733197a0b52c01", "patch": "@@ -735,7 +735,10 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(print(data))\n                 }\n             }\n-            ty::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n+            ty::Placeholder(placeholder) => match placeholder.name {\n+                ty::BoundTyKind::Anon(_) => p!(write(\"Placeholder({:?})\", placeholder)),\n+                ty::BoundTyKind::Param(_, name) => p!(write(\"{}\", name)),\n+            },\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                 // We use verbose printing in 'NO_QUERIES' mode, to\n                 // avoid needing to call `predicates_of`. This should"}, {"sha": "4b15dd408b3708bdd324b32b70b815f433d830f1", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5d5c576667ae592e4ab43390a733197a0b52c01/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d5c576667ae592e4ab43390a733197a0b52c01/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c5d5c576667ae592e4ab43390a733197a0b52c01", "patch": "@@ -2148,12 +2148,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }))\n             }\n \n-            ty::Alias(..) | ty::Param(_) => None,\n+            ty::Alias(..) | ty::Param(_) | ty::Placeholder(..) => None,\n             ty::Infer(ty::TyVar(_)) => Ambiguous,\n \n-            ty::Placeholder(..)\n-            | ty::Bound(..)\n-            | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+            // We can make this an ICE if/once we actually instantiate the trait obligation.\n+            ty::Bound(..) => None,\n+\n+            ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"asked to assemble builtin bounds of unexpected type: {:?}\", self_ty);\n             }\n         }"}, {"sha": "dfc800c8e7e1213811489a12af5ddde1463b342e", "filename": "tests/ui/traits/non_lifetime_binders/bad-sized-cond.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c5d5c576667ae592e4ab43390a733197a0b52c01/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-sized-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d5c576667ae592e4ab43390a733197a0b52c01/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-sized-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-sized-cond.rs?ref=c5d5c576667ae592e4ab43390a733197a0b52c01", "patch": "@@ -0,0 +1,23 @@\n+#![feature(non_lifetime_binders)]\n+//~^ WARN is incomplete and may not be safe\n+\n+pub fn foo()\n+where\n+    for<V> V: Sized,\n+{\n+}\n+\n+pub fn bar()\n+where\n+    for<V> V: IntoIterator,\n+{\n+}\n+\n+fn main() {\n+    foo();\n+    //~^ ERROR the size for values of type `V` cannot be known at compilation time\n+\n+    bar();\n+    //~^ ERROR the size for values of type `V` cannot be known at compilation time\n+    //~| ERROR `V` is not an iterator\n+}"}, {"sha": "6480e490e8b307fffdd62f6e13c001782ad429f5", "filename": "tests/ui/traits/non_lifetime_binders/bad-sized-cond.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c5d5c576667ae592e4ab43390a733197a0b52c01/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-sized-cond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5d5c576667ae592e4ab43390a733197a0b52c01/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-sized-cond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-sized-cond.stderr?ref=c5d5c576667ae592e4ab43390a733197a0b52c01", "patch": "@@ -0,0 +1,62 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bad-sized-cond.rs:1:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0277]: the size for values of type `V` cannot be known at compilation time\n+  --> $DIR/bad-sized-cond.rs:17:5\n+   |\n+LL |     foo();\n+   |     ^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `V`\n+note: required by a bound in `foo`\n+  --> $DIR/bad-sized-cond.rs:6:15\n+   |\n+LL | pub fn foo()\n+   |        --- required by a bound in this\n+LL | where\n+LL |     for<V> V: Sized,\n+   |               ^^^^^ required by this bound in `foo`\n+\n+error[E0277]: the size for values of type `V` cannot be known at compilation time\n+  --> $DIR/bad-sized-cond.rs:20:5\n+   |\n+LL |     bar();\n+   |     ^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `V`\n+   = note: required for `V` to implement `IntoIterator`\n+note: required by a bound in `bar`\n+  --> $DIR/bad-sized-cond.rs:12:15\n+   |\n+LL | pub fn bar()\n+   |        --- required by a bound in this\n+LL | where\n+LL |     for<V> V: IntoIterator,\n+   |               ^^^^^^^^^^^^ required by this bound in `bar`\n+\n+error[E0277]: `V` is not an iterator\n+  --> $DIR/bad-sized-cond.rs:20:5\n+   |\n+LL |     bar();\n+   |     ^^^ `V` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `V`\n+   = note: required for `V` to implement `IntoIterator`\n+note: required by a bound in `bar`\n+  --> $DIR/bad-sized-cond.rs:12:15\n+   |\n+LL | pub fn bar()\n+   |        --- required by a bound in this\n+LL | where\n+LL |     for<V> V: IntoIterator,\n+   |               ^^^^^^^^^^^^ required by this bound in `bar`\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}]}