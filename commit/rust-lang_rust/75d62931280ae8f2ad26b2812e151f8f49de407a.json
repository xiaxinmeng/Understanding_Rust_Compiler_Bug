{"sha": "75d62931280ae8f2ad26b2812e151f8f49de407a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZDYyOTMxMjgwYWU4ZjJhZDI2YjI4MTJlMTUxZjhmNDlkZTQwN2E=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-05-11T19:18:09Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-05-11T19:18:09Z"}, "message": "Re-add support for parsing (and pretty-printing) inner-attributes within body of a `match`.\n\nIn other words, we can do `match EXPR { #![inner_attr] ARM_1 ARM_2 ... }` again.\n\nI believe this unbreaks the only four crates that crater flagged as broken by PR 83312.\n\n(I am putting this up so that the lang-team can check it out and decide whether\nit changes their mind about what to do regarding PR 83312.)", "tree": {"sha": "8e274f053fee5e7cb64cdfab45f6b444c8b79d2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e274f053fee5e7cb64cdfab45f6b444c8b79d2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75d62931280ae8f2ad26b2812e151f8f49de407a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75d62931280ae8f2ad26b2812e151f8f49de407a", "html_url": "https://github.com/rust-lang/rust/commit/75d62931280ae8f2ad26b2812e151f8f49de407a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75d62931280ae8f2ad26b2812e151f8f49de407a/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bafe96272bf22cd191c6a01741184b60063292d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bafe96272bf22cd191c6a01741184b60063292d", "html_url": "https://github.com/rust-lang/rust/commit/2bafe96272bf22cd191c6a01741184b60063292d"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "bcb595f3a0481376e9dba9ee1745f8206c65cd0b", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75d62931280ae8f2ad26b2812e151f8f49de407a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d62931280ae8f2ad26b2812e151f8f49de407a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=75d62931280ae8f2ad26b2812e151f8f49de407a", "patch": "@@ -366,6 +366,10 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         self.print_either_attributes(attrs, ast::AttrStyle::Inner, false, true)\n     }\n \n+    fn print_inner_attributes_no_trailing_hardbreak(&mut self, attrs: &[ast::Attribute]) {\n+        self.print_either_attributes(attrs, ast::AttrStyle::Inner, false, false)\n+    }\n+\n     fn print_outer_attributes(&mut self, attrs: &[ast::Attribute]) {\n         self.print_either_attributes(attrs, ast::AttrStyle::Outer, false, true)\n     }\n@@ -1940,6 +1944,7 @@ impl<'a> State<'a> {\n                 self.print_expr_as_cond(expr);\n                 self.s.space();\n                 self.bopen();\n+                self.print_inner_attributes_no_trailing_hardbreak(attrs);\n                 for arm in arms {\n                     self.print_arm(arm);\n                 }"}, {"sha": "2e16d850b53361560c46d7ae2440a200a09fd09a", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75d62931280ae8f2ad26b2812e151f8f49de407a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d62931280ae8f2ad26b2812e151f8f49de407a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=75d62931280ae8f2ad26b2812e151f8f49de407a", "patch": "@@ -1947,7 +1947,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a `match ... { ... }` expression (`match` token already eaten).\n-    fn parse_match_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n+    fn parse_match_expr(&mut self, mut attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let match_span = self.prev_token.span;\n         let lo = self.prev_token.span;\n         let scrutinee = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n@@ -1962,6 +1962,7 @@ impl<'a> Parser<'a> {\n             }\n             return Err(e);\n         }\n+        attrs.extend(self.parse_inner_attributes()?);\n \n         let mut arms: Vec<Arm> = Vec::new();\n         while self.token != token::CloseDelim(token::Brace) {"}]}