{"sha": "72c1993b8e9ec095bab299b4cc298be7eb9bf1ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYzE5OTNiOGU5ZWMwOTViYWIyOTliNGNjMjk4YmU3ZWI5YmYxZWU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-20T11:42:07Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-31T13:22:52Z"}, "message": "Make codegen not be a query (since it's not a real query anyway).", "tree": {"sha": "37b136e2c22071f5be5fcd7e081a8f4e2d6d231e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37b136e2c22071f5be5fcd7e081a8f4e2d6d231e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72c1993b8e9ec095bab299b4cc298be7eb9bf1ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72c1993b8e9ec095bab299b4cc298be7eb9bf1ee", "html_url": "https://github.com/rust-lang/rust/commit/72c1993b8e9ec095bab299b4cc298be7eb9bf1ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72c1993b8e9ec095bab299b4cc298be7eb9bf1ee/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d97d1e192b37557f760f41cbc9826bb431b14d1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d97d1e192b37557f760f41cbc9826bb431b14d1a", "html_url": "https://github.com/rust-lang/rust/commit/d97d1e192b37557f760f41cbc9826bb431b14d1a"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "07b1863e32c6c8a3d7085fb3cf01867642bb9484", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72c1993b8e9ec095bab299b4cc298be7eb9bf1ee/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c1993b8e9ec095bab299b4cc298be7eb9bf1ee/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=72c1993b8e9ec095bab299b4cc298be7eb9bf1ee", "patch": "@@ -722,12 +722,6 @@ impl<'tcx> QueryDescription<'tcx> for queries::codegen_unit<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::compile_codegen_unit<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: InternedString) -> String {\n-        \"compile_codegen_unit\".to_string()\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::output_filenames<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         \"output_filenames\".to_string()"}, {"sha": "9485f62c61ca050e4140b1364dc1adfdef9c5a34", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72c1993b8e9ec095bab299b4cc298be7eb9bf1ee/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c1993b8e9ec095bab299b4cc298be7eb9bf1ee/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=72c1993b8e9ec095bab299b4cc298be7eb9bf1ee", "patch": "@@ -28,7 +28,7 @@ use middle::lib_features::LibFeatures;\n use middle::lang_items::{LanguageItems, LangItem};\n use middle::exported_symbols::{SymbolExportLevel, ExportedSymbol};\n use mir::interpret::ConstEvalResult;\n-use mir::mono::{CodegenUnit, Stats};\n+use mir::mono::CodegenUnit;\n use mir;\n use mir::interpret::{GlobalId, Allocation};\n use session::{CompileResult, CrateDisambiguator};\n@@ -530,7 +530,6 @@ define_queries! { <'tcx>\n             -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>),\n         [] fn is_codegened_item: IsCodegenedItem(DefId) -> bool,\n         [] fn codegen_unit: CodegenUnit(InternedString) -> Arc<CodegenUnit<'tcx>>,\n-        [] fn compile_codegen_unit: CompileCodegenUnit(InternedString) -> Stats,\n     },\n \n     Other {"}, {"sha": "59058579f643eb5ab1dcc81f1b1be96cf89951a5", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/72c1993b8e9ec095bab299b4cc298be7eb9bf1ee/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c1993b8e9ec095bab299b4cc298be7eb9bf1ee/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=72c1993b8e9ec095bab299b4cc298be7eb9bf1ee", "patch": "@@ -891,7 +891,7 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              &format!(\"codegen {}\", cgu.name()))\n         });\n         let start_time = Instant::now();\n-        all_stats.extend(tcx.compile_codegen_unit(*cgu.name()));\n+        all_stats.extend(compile_codegen_unit(tcx, *cgu.name()));\n         total_codegen_time += start_time.elapsed();\n         ongoing_codegen.check_for_errors(tcx.sess);\n     }\n@@ -1157,11 +1157,15 @@ fn is_codegened_item(tcx: TyCtxt, id: DefId) -> bool {\n }\n \n fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                  cgu: InternedString) -> Stats {\n-    let cgu = tcx.codegen_unit(cgu);\n-\n+                                  cgu_name: InternedString)\n+                                  -> Stats {\n     let start_time = Instant::now();\n-    let (stats, module) = module_codegen(tcx, cgu);\n+\n+    let dep_node = tcx.codegen_unit(cgu_name).codegen_dep_node(tcx);\n+    let ((stats, module), _) = tcx.dep_graph.with_task(dep_node,\n+                                                       tcx,\n+                                                       cgu_name,\n+                                                       module_codegen);\n     let time_to_codegen = start_time.elapsed();\n \n     // We assume that the cost to run LLVM on a CGU is proportional to\n@@ -1170,23 +1174,29 @@ fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                time_to_codegen.subsec_nanos() as u64;\n \n     write::submit_codegened_module_to_llvm(tcx,\n-                                            module,\n-                                            cost);\n+                                           module,\n+                                           cost);\n+\n+    if tcx.dep_graph.is_fully_enabled() {\n+        let dep_node_index = tcx.dep_graph.dep_node_index_of(&dep_node);\n+        tcx.dep_graph.mark_loaded_from_cache(dep_node_index, false);\n+    }\n+\n     return stats;\n \n     fn module_codegen<'a, 'tcx>(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        cgu: Arc<CodegenUnit<'tcx>>)\n+        cgu_name: InternedString)\n         -> (Stats, ModuleCodegen)\n     {\n-        let cgu_name = cgu.name().to_string();\n+        let cgu = tcx.codegen_unit(cgu_name);\n \n         // Instantiate monomorphizations without filling out definitions yet...\n-        let llvm_module = ModuleLlvm::new(tcx.sess, &cgu_name);\n+        let llvm_module = ModuleLlvm::new(tcx.sess, &cgu_name.as_str());\n         let stats = {\n             let cx = CodegenCx::new(tcx, cgu, &llvm_module);\n             let mono_items = cx.codegen_unit\n-                                 .items_in_deterministic_order(cx.tcx);\n+                               .items_in_deterministic_order(cx.tcx);\n             for &(mono_item, (linkage, visibility)) in &mono_items {\n                 mono_item.predefine(&cx, linkage, visibility);\n             }\n@@ -1235,7 +1245,7 @@ fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         };\n \n         (stats, ModuleCodegen {\n-            name: cgu_name,\n+            name: cgu_name.to_string(),\n             source: ModuleSource::Codegened(llvm_module),\n             kind: ModuleKind::Regular,\n         })\n@@ -1255,7 +1265,6 @@ pub fn provide(providers: &mut Providers) {\n             .cloned()\n             .unwrap_or_else(|| panic!(\"failed to find cgu with name {:?}\", name))\n     };\n-    providers.compile_codegen_unit = compile_codegen_unit;\n \n     provide_extern(providers);\n }"}, {"sha": "a8c27c037513f770f596c832a0e1847a3a8ccb9a", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72c1993b8e9ec095bab299b4cc298be7eb9bf1ee/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c1993b8e9ec095bab299b4cc298be7eb9bf1ee/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=72c1993b8e9ec095bab299b4cc298be7eb9bf1ee", "patch": "@@ -103,7 +103,7 @@\n //! inlining, even when they are not marked #[inline].\n \n use monomorphize::collector::InliningMap;\n-use rustc::dep_graph::WorkProductId;\n+use rustc::dep_graph::{WorkProductId, DepNode, DepConstructor};\n use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE, CRATE_DEF_INDEX};\n use rustc::hir::map::DefPathData;\n@@ -194,6 +194,10 @@ pub trait CodegenUnitExt<'tcx> {\n         items.sort_by_cached_key(|&(i, _)| item_sort_key(tcx, i));\n         items\n     }\n+\n+    fn codegen_dep_node(&self, tcx: TyCtxt<'_, 'tcx, 'tcx>) -> DepNode {\n+        DepNode::new(tcx, DepConstructor::CompileCodegenUnit(self.name().clone()))\n+    }\n }\n \n impl<'tcx> CodegenUnitExt<'tcx> for CodegenUnit<'tcx> {"}]}