{"sha": "5351c21b7e57b556c88fb825da14d57522e80a26", "node_id": "C_kwDOAAsO6NoAKDUzNTFjMjFiN2U1N2I1NTZjODhmYjgyNWRhMTRkNTc1MjJlODBhMjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-29T17:36:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-29T17:36:33Z"}, "message": "Auto merge of #14435 - Veykril:index-adjustments, r=Veykril\n\nfix: Add missing autoborrow adjustment for index expressions", "tree": {"sha": "3c6b810df11b53636f46a31651086d660bab65ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c6b810df11b53636f46a31651086d660bab65ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5351c21b7e57b556c88fb825da14d57522e80a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5351c21b7e57b556c88fb825da14d57522e80a26", "html_url": "https://github.com/rust-lang/rust/commit/5351c21b7e57b556c88fb825da14d57522e80a26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5351c21b7e57b556c88fb825da14d57522e80a26/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a486f3404884a664b71dfdf01fd6208fe56902b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a486f3404884a664b71dfdf01fd6208fe56902b7", "html_url": "https://github.com/rust-lang/rust/commit/a486f3404884a664b71dfdf01fd6208fe56902b7"}, {"sha": "f1f64e92d72d4db0e63024b62bcc9da9daadb83e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f64e92d72d4db0e63024b62bcc9da9daadb83e", "html_url": "https://github.com/rust-lang/rust/commit/f1f64e92d72d4db0e63024b62bcc9da9daadb83e"}], "stats": {"total": 145, "additions": 108, "deletions": 37}, "files": [{"sha": "322ef51167a3836a5733ee1a1c230179a3c7b11d", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5351c21b7e57b556c88fb825da14d57522e80a26/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5351c21b7e57b556c88fb825da14d57522e80a26/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=5351c21b7e57b556c88fb825da14d57522e80a26", "patch": "@@ -793,10 +793,12 @@ impl<'a> InferenceContext<'a> {\n                         canonicalized.value,\n                         index_trait,\n                     );\n-                    let (self_ty, adj) = receiver_adjustments\n+                    let (self_ty, mut adj) = receiver_adjustments\n                         .map_or((self.err_ty(), Vec::new()), |adj| {\n                             adj.apply(&mut self.table, base_ty)\n                         });\n+                    // mutability will be fixed up in `InferenceContext::infer_mut`;\n+                    adj.push(Adjustment::borrow(Mutability::Not, self_ty.clone()));\n                     self.write_expr_adj(*base, adj);\n                     if let Some(func) =\n                         self.db.trait_data(index_trait).method_by_name(&name!(index))"}, {"sha": "6f5ca2cf95de5a3ddc19cafbd514259cde6b5f48", "filename": "crates/hir-ty/src/infer/mutability.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5351c21b7e57b556c88fb825da14d57522e80a26/crates%2Fhir-ty%2Fsrc%2Finfer%2Fmutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5351c21b7e57b556c88fb825da14d57522e80a26/crates%2Fhir-ty%2Fsrc%2Finfer%2Fmutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fmutability.rs?ref=5351c21b7e57b556c88fb825da14d57522e80a26", "patch": "@@ -8,7 +8,7 @@ use hir_def::{\n };\n use hir_expand::name;\n \n-use crate::{lower::lower_to_chalk_mutability, Adjust, AutoBorrow, OverloadedDeref};\n+use crate::{lower::lower_to_chalk_mutability, Adjust, Adjustment, AutoBorrow, OverloadedDeref};\n \n use super::InferenceContext;\n \n@@ -18,15 +18,15 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn infer_mut_expr(&mut self, tgt_expr: ExprId, mut mutability: Mutability) {\n-        let mut v = vec![];\n-        let adjustments = self.result.expr_adjustments.get_mut(&tgt_expr).unwrap_or(&mut v);\n-        for adj in adjustments.iter_mut().rev() {\n-            match &mut adj.kind {\n-                Adjust::NeverToAny | Adjust::Deref(None) | Adjust::Pointer(_) => (),\n-                Adjust::Deref(Some(d)) => *d = OverloadedDeref(Some(mutability)),\n-                Adjust::Borrow(b) => match b {\n-                    AutoBorrow::Ref(m) | AutoBorrow::RawPtr(m) => mutability = *m,\n-                },\n+        if let Some(adjustments) = self.result.expr_adjustments.get_mut(&tgt_expr) {\n+            for adj in adjustments.iter_mut().rev() {\n+                match &mut adj.kind {\n+                    Adjust::NeverToAny | Adjust::Deref(None) | Adjust::Pointer(_) => (),\n+                    Adjust::Deref(Some(d)) => *d = OverloadedDeref(Some(mutability)),\n+                    Adjust::Borrow(b) => match b {\n+                        AutoBorrow::Ref(m) | AutoBorrow::RawPtr(m) => mutability = *m,\n+                    },\n+                }\n             }\n         }\n         self.infer_mut_expr_without_adjust(tgt_expr, mutability);\n@@ -94,8 +94,8 @@ impl<'a> InferenceContext<'a> {\n                 self.infer_mut_not_expr_iter(fields.iter().map(|x| x.expr).chain(*spread))\n             }\n             &Expr::Index { base, index } => {\n-                if let Some((f, _)) = self.result.method_resolutions.get_mut(&tgt_expr) {\n-                    if mutability == Mutability::Mut {\n+                if mutability == Mutability::Mut {\n+                    if let Some((f, _)) = self.result.method_resolutions.get_mut(&tgt_expr) {\n                         if let Some(index_trait) = self\n                             .db\n                             .lang_item(self.table.trait_env.krate, LangItem::IndexMut)\n@@ -105,6 +105,18 @@ impl<'a> InferenceContext<'a> {\n                                 self.db.trait_data(index_trait).method_by_name(&name![index_mut])\n                             {\n                                 *f = index_fn;\n+                                let base_adjustments = self\n+                                    .result\n+                                    .expr_adjustments\n+                                    .get_mut(&base)\n+                                    .and_then(|it| it.last_mut());\n+                                if let Some(Adjustment {\n+                                    kind: Adjust::Borrow(AutoBorrow::Ref(mutability)),\n+                                    ..\n+                                }) = base_adjustments\n+                                {\n+                                    *mutability = Mutability::Mut;\n+                                }\n                             }\n                         }\n                     }"}, {"sha": "86fee99b78713222c82b0f55fd6de20ee952230a", "filename": "crates/hir-ty/src/mir/lower/as_place.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5351c21b7e57b556c88fb825da14d57522e80a26/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5351c21b7e57b556c88fb825da14d57522e80a26/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fas_place.rs?ref=5351c21b7e57b556c88fb825da14d57522e80a26", "patch": "@@ -192,7 +192,10 @@ impl MirLowerCtx<'_> {\n                 let base_ty = self.expr_ty_after_adjustments(*base);\n                 let index_ty = self.expr_ty_after_adjustments(*index);\n                 if index_ty != TyBuilder::usize()\n-                    || !matches!(base_ty.kind(Interner), TyKind::Array(..) | TyKind::Slice(..))\n+                    || !matches!(\n+                        base_ty.strip_reference().kind(Interner),\n+                        TyKind::Array(..) | TyKind::Slice(..)\n+                    )\n                 {\n                     let Some(index_fn) = self.infer.method_resolution(expr_id) else {\n                         return Err(MirLowerError::UnresolvedMethod);\n@@ -206,15 +209,16 @@ impl MirLowerCtx<'_> {\n                     return self.lower_overloaded_index(\n                         current,\n                         base_place,\n-                        self.expr_ty_after_adjustments(*base),\n+                        base_ty,\n                         self.expr_ty(expr_id),\n                         index_operand,\n                         expr_id.into(),\n                         index_fn,\n                     );\n                 }\n                 let Some((mut p_base, current)) =\n-                    self.lower_expr_as_place(current, *base, true)? else {\n+                    self.lower_expr_as_place_without_adjust(current, *base, true)?\n+                else {\n                     return Ok(None);\n                 };\n                 let l_index = self.temp(self.expr_ty_after_adjustments(*index))?;\n@@ -238,23 +242,14 @@ impl MirLowerCtx<'_> {\n         span: MirSpan,\n         index_fn: (FunctionId, Substitution),\n     ) -> Result<Option<(Place, BasicBlockId)>> {\n-        let is_mutable = 'b: {\n-            if let Some(index_mut_trait) = self.resolve_lang_item(LangItem::IndexMut)?.as_trait() {\n-                if let Some(index_mut_fn) =\n-                    self.db.trait_data(index_mut_trait).method_by_name(&name![index_mut])\n-                {\n-                    break 'b index_mut_fn == index_fn.0;\n-                }\n+        let (mutability, borrow_kind) = match base_ty.as_reference() {\n+            Some((_, _, mutability)) => {\n+                (mutability, BorrowKind::Mut { allow_two_phase_borrow: false })\n             }\n-            false\n-        };\n-        let (mutability, borrow_kind) = match is_mutable {\n-            true => (Mutability::Mut, BorrowKind::Mut { allow_two_phase_borrow: false }),\n-            false => (Mutability::Not, BorrowKind::Shared),\n+            None => (Mutability::Not, BorrowKind::Shared),\n         };\n-        let base_ref = TyKind::Ref(mutability, static_lifetime(), base_ty).intern(Interner);\n         let result_ref = TyKind::Ref(mutability, static_lifetime(), result_ty).intern(Interner);\n-        let ref_place: Place = self.temp(base_ref)?.into();\n+        let ref_place: Place = self.temp(base_ty)?.into();\n         self.push_assignment(current, ref_place.clone(), Rvalue::Ref(borrow_kind, place), span);\n         let mut result: Place = self.temp(result_ref)?.into();\n         let index_fn_op = Operand::const_zst("}, {"sha": "e63a674a3fdd2d4505289103fd9170f0cb163a2f", "filename": "crates/hir-ty/src/tests/coercion.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5351c21b7e57b556c88fb825da14d57522e80a26/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5351c21b7e57b556c88fb825da14d57522e80a26/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=5351c21b7e57b556c88fb825da14d57522e80a26", "patch": "@@ -870,3 +870,35 @@ fn test() {\n }\",\n     );\n }\n+\n+#[test]\n+fn adjust_index() {\n+    check_no_mismatches(\n+        r\"\n+//- minicore: index\n+struct Struct;\n+impl core::ops::Index<usize> for Struct {\n+    type Output = ();\n+\n+    fn index(&self, index: usize) -> &Self::Output { &() }\n+}\n+struct StructMut;\n+\n+impl core::ops::Index<usize> for StructMut {\n+    type Output = ();\n+\n+    fn index(&self, index: usize) -> &Self::Output { &() }\n+}\n+impl core::ops::IndexMut for StructMut {\n+    fn index_mut(&mut self, index: usize) -> &mut Self::Output { &mut () }\n+}\n+fn test() {\n+    Struct[0];\n+ // ^^^^^^ adjustments: Borrow(Ref(Not))\n+    StructMut[0];\n+ // ^^^^^^^^^ adjustments: Borrow(Ref(Not))\n+    &mut StructMut[0];\n+      // ^^^^^^^^^ adjustments: Borrow(Ref(Mut))\n+}\",\n+    );\n+}"}, {"sha": "ecd1db7ea87cfcd54d6b128314e62af59dddcc53", "filename": "crates/ide-diagnostics/src/handlers/mutability_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5351c21b7e57b556c88fb825da14d57522e80a26/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5351c21b7e57b556c88fb825da14d57522e80a26/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs?ref=5351c21b7e57b556c88fb825da14d57522e80a26", "patch": "@@ -589,17 +589,17 @@ fn f() {\n     let y = &x[2];\n     let x = Foo;\n     let y = &mut x[2];\n-               //^^^^ \ud83d\udca1 error: cannot mutate immutable variable `x`\n+               //^\ud83d\udca1 error: cannot mutate immutable variable `x`\n     let mut x = &mut Foo;\n       //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n     let y: &mut (i32, u8) = &mut x[2];\n     let x = Foo;\n     let ref mut y = x[7];\n-                  //^^^^ \ud83d\udca1 error: cannot mutate immutable variable `x`\n+                  //^ \ud83d\udca1 error: cannot mutate immutable variable `x`\n     let (ref mut y, _) = x[3];\n-                       //^^^^ \ud83d\udca1 error: cannot mutate immutable variable `x`\n+                       //^ \ud83d\udca1 error: cannot mutate immutable variable `x`\n     match x[10] {\n-        //^^^^^ \ud83d\udca1 error: cannot mutate immutable variable `x`\n+        //^ \ud83d\udca1 error: cannot mutate immutable variable `x`\n         (ref y, _) => (),\n         (_, ref mut y) => (),\n     }"}, {"sha": "f279c91a9e917c65a1adb0fbb9e22f60dae01902", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5351c21b7e57b556c88fb825da14d57522e80a26/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5351c21b7e57b556c88fb825da14d57522e80a26/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=5351c21b7e57b556c88fb825da14d57522e80a26", "patch": "@@ -264,7 +264,7 @@ mod tests {\n         check_with_config(\n             InlayHintsConfig { adjustment_hints: AdjustmentHints::Always, ..DISABLED_CONFIG },\n             r#\"\n-//- minicore: coerce_unsized, fn, eq\n+//- minicore: coerce_unsized, fn, eq, index\n fn main() {\n     let _: u32         = loop {};\n                        //^^^^^^^<never-to-any>\n@@ -360,6 +360,19 @@ fn main() {\n     (()) == {()};\n   // ^^&\n          // ^^^^&\n+    let closure: dyn Fn = || ();\n+    closure();\n+  //^^^^^^^(\n+  //^^^^^^^&\n+  //^^^^^^^)\n+    Struct[0];\n+  //^^^^^^(\n+  //^^^^^^&\n+  //^^^^^^)\n+    &mut Struct[0];\n+       //^^^^^^(\n+       //^^^^^^&mut $\n+       //^^^^^^)\n }\n \n #[derive(Copy, Clone)]\n@@ -369,8 +382,13 @@ impl Struct {\n     fn by_ref(&self) {}\n     fn by_ref_mut(&mut self) {}\n }\n+struct StructMut;\n+impl core::ops::Index<usize> for Struct {\n+    type Output = ();\n+}\n+impl core::ops::IndexMut for Struct {}\n \"#,\n-        )\n+        );\n     }\n \n     #[test]\n@@ -382,7 +400,7 @@ impl Struct {\n                 ..DISABLED_CONFIG\n             },\n             r#\"\n-//- minicore: coerce_unsized, fn, eq\n+//- minicore: coerce_unsized, fn, eq, index\n fn main() {\n \n     Struct.consume();\n@@ -457,6 +475,13 @@ fn main() {\n     (()) == {()};\n   // ^^.&\n          // ^^^^.&\n+    let closure: dyn Fn = || ();\n+    closure();\n+  //^^^^^^^.&\n+    Struct[0];\n+  //^^^^^^.&\n+    &mut Struct[0];\n+       //^^^^^^.&mut\n }\n \n #[derive(Copy, Clone)]\n@@ -466,6 +491,11 @@ impl Struct {\n     fn by_ref(&self) {}\n     fn by_ref_mut(&mut self) {}\n }\n+struct StructMut;\n+impl core::ops::Index<usize> for Struct {\n+    type Output = ();\n+}\n+impl core::ops::IndexMut for Struct {}\n \"#,\n         );\n     }"}]}