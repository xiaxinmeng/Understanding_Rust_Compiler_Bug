{"sha": "29272fc514ab8a05b1c228dd5800102f58999dfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MjcyZmM1MTRhYjhhMDViMWMyMjhkZDU4MDAxMDJmNTg5OTlkZmI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-30T16:03:32Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-20T11:13:20Z"}, "message": "Correctly handle binders inside trait predicates", "tree": {"sha": "4bdae9ee4e62017bbda90a43b412bf49092ce70f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bdae9ee4e62017bbda90a43b412bf49092ce70f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29272fc514ab8a05b1c228dd5800102f58999dfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29272fc514ab8a05b1c228dd5800102f58999dfb", "html_url": "https://github.com/rust-lang/rust/commit/29272fc514ab8a05b1c228dd5800102f58999dfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29272fc514ab8a05b1c228dd5800102f58999dfb/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033013cab3a861224fd55f494c8be1cb0349eb49", "url": "https://api.github.com/repos/rust-lang/rust/commits/033013cab3a861224fd55f494c8be1cb0349eb49", "html_url": "https://github.com/rust-lang/rust/commit/033013cab3a861224fd55f494c8be1cb0349eb49"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "903eee672cf1fbbc2cfe9760a7a16303249081a9", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/29272fc514ab8a05b1c228dd5800102f58999dfb/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29272fc514ab8a05b1c228dd5800102f58999dfb/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=29272fc514ab8a05b1c228dd5800102f58999dfb", "patch": "@@ -883,7 +883,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         })\n                         .collect();\n                     if !lifetimes.is_empty() {\n-                        self.trait_ref_hack = true;\n                         let next_early_index = self.next_early_index();\n                         let scope = Scope::Binder {\n                             lifetimes,\n@@ -895,9 +894,10 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         let result = self.with(scope, |old_scope, this| {\n                             this.check_lifetime_params(old_scope, &bound_generic_params);\n                             this.visit_ty(&bounded_ty);\n+                            this.trait_ref_hack = true;\n                             walk_list!(this, visit_param_bound, bounds);\n+                            this.trait_ref_hack = false;\n                         });\n-                        self.trait_ref_hack = false;\n                         result\n                     } else {\n                         self.visit_ty(&bounded_ty);\n@@ -932,13 +932,15 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         debug!(\"visit_poly_trait_ref(trait_ref={:?})\", trait_ref);\n \n         let should_pop_missing_lt = self.is_trait_ref_fn_scope(trait_ref);\n-        if !self.trait_ref_hack\n+\n+        let trait_ref_hack = take(&mut self.trait_ref_hack);\n+        if !trait_ref_hack\n             || trait_ref.bound_generic_params.iter().any(|param| match param.kind {\n                 GenericParamKind::Lifetime { .. } => true,\n                 _ => false,\n             })\n         {\n-            if self.trait_ref_hack {\n+            if trait_ref_hack {\n                 struct_span_err!(\n                     self.tcx.sess,\n                     trait_ref.span,\n@@ -968,10 +970,11 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 this.check_lifetime_params(old_scope, &trait_ref.bound_generic_params);\n                 walk_list!(this, visit_generic_param, trait_ref.bound_generic_params);\n                 this.visit_trait_ref(&trait_ref.trait_ref);\n-            })\n+            });\n         } else {\n             self.visit_trait_ref(&trait_ref.trait_ref);\n         }\n+        self.trait_ref_hack = trait_ref_hack;\n         if should_pop_missing_lt {\n             self.missing_named_lifetime_spots.pop();\n         }"}, {"sha": "d8677ee959abded82e73e4449e49f72be5dab3de", "filename": "src/test/ui/where-clauses/where-lifetime-resolution.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29272fc514ab8a05b1c228dd5800102f58999dfb/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29272fc514ab8a05b1c228dd5800102f58999dfb/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.rs?ref=29272fc514ab8a05b1c228dd5800102f58999dfb", "patch": "@@ -7,7 +7,6 @@ fn f() where\n     //~^ ERROR use of undeclared lifetime name `'a`\n     for<'a> dyn for<'b> Trait2<'a, 'b>: Trait2<'a, 'b>,\n     //~^ ERROR use of undeclared lifetime name `'b`\n-    //~| ERROR nested quantification of lifetimes\n {}\n \n fn main() {}"}, {"sha": "6c52664154bbf333667287e087c21af0396527b6", "filename": "src/test/ui/where-clauses/where-lifetime-resolution.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29272fc514ab8a05b1c228dd5800102f58999dfb/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29272fc514ab8a05b1c228dd5800102f58999dfb/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr?ref=29272fc514ab8a05b1c228dd5800102f58999dfb", "patch": "@@ -7,12 +7,6 @@ LL |     for<'a> dyn Trait1<'a>: Trait1<'a>, // OK\n LL |     (dyn for<'a> Trait1<'a>): Trait1<'a>,\n    |                                      ^^ undeclared lifetime\n \n-error[E0316]: nested quantification of lifetimes\n-  --> $DIR/where-lifetime-resolution.rs:8:17\n-   |\n-LL |     for<'a> dyn for<'b> Trait2<'a, 'b>: Trait2<'a, 'b>,\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/where-lifetime-resolution.rs:8:52\n    |\n@@ -22,6 +16,6 @@ LL | fn f() where\n LL |     for<'a> dyn for<'b> Trait2<'a, 'b>: Trait2<'a, 'b>,\n    |                                                    ^^ undeclared lifetime\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0261`."}]}