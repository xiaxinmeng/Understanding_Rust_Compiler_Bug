{"sha": "03f19f7ff128a3b01eeab3f87f04cce22883f006", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZjE5ZjdmZjEyOGEzYjAxZWVhYjNmODdmMDRjY2UyMjg4M2YwMDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-24T15:59:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-24T15:59:00Z"}, "message": "Auto merge of #62935 - Centril:rollup-hzj9att, r=Centril\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #62641 (Regenerate character tables for Unicode 12.1)\n - #62716 (state also in the intro that UnsafeCell has no effect on &mut)\n - #62738 (Remove uses of mem::uninitialized from std::sys::cloudabi)\n - #62772 (Suggest trait bound on type parameter when it is unconstrained)\n - #62890 (Normalize use of backticks in compiler messages for libsyntax/*)\n - #62905 (Normalize use of backticks in compiler messages for doc)\n - #62916 (Add test `self-in-enum-definition`)\n - #62917 (Always emit trailing slash error)\n - #62926 (Fix typo in mem::uninitialized doc)\n - #62927 (use PanicMessage in MIR, kill InterpError::description)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "5a84f2e53c728cc5aa241b4c01ef5bdf2aee08f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a84f2e53c728cc5aa241b4c01ef5bdf2aee08f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03f19f7ff128a3b01eeab3f87f04cce22883f006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03f19f7ff128a3b01eeab3f87f04cce22883f006", "html_url": "https://github.com/rust-lang/rust/commit/03f19f7ff128a3b01eeab3f87f04cce22883f006", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03f19f7ff128a3b01eeab3f87f04cce22883f006/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a6a304e2baaabca88059753f020377f2476978", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a6a304e2baaabca88059753f020377f2476978", "html_url": "https://github.com/rust-lang/rust/commit/27a6a304e2baaabca88059753f020377f2476978"}, {"sha": "e27927d2fff6d8147da7e622f84101cb03521cec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e27927d2fff6d8147da7e622f84101cb03521cec", "html_url": "https://github.com/rust-lang/rust/commit/e27927d2fff6d8147da7e622f84101cb03521cec"}], "stats": {"total": 2395, "additions": 1308, "deletions": 1087}, "files": [{"sha": "9010d436eb5cfa6eac08b2915252459e8d26d78b", "filename": "src/doc/rustc/src/lints/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -19,7 +19,7 @@ warning: unused variable: `x`\n 2 |     let x = 5;\n   |         ^\n   |\n-  = note: #[warn(unused_variables)] on by default\n+  = note: `#[warn(unused_variables)]` on by default\n   = note: to avoid this warning, consider using `_x` instead\n ```\n "}, {"sha": "834a4a79727ab9a84346c9e88c1c7f0799042280", "filename": "src/doc/rustc/src/lints/levels.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -53,7 +53,7 @@ warning: unused variable: `x`\n 2 |     let x = 5;\n   |         ^\n   |\n-  = note: #[warn(unused_variables)] on by default\n+  = note: `#[warn(unused_variables)]` on by default\n   = note: to avoid this warning, consider using `_x` instead\n ```\n \n@@ -76,7 +76,7 @@ error: bitshift exceeds the type's number of bits\n 2 |     100u8 << 10;\n   |     ^^^^^^^^^^^\n   |\n-  = note: #[deny(exceeding_bitshifts)] on by default\n+  = note: `#[deny(exceeding_bitshifts)]` on by default\n ```\n \n What's the difference between an error from a lint and a regular old error?\n@@ -236,7 +236,7 @@ warning: bitshift exceeds the type's number of bits\n 2 |     100u8 << 10;\n   |     ^^^^^^^^^^^\n   |\n-  = note: #[warn(exceeding_bitshifts)] on by default\n+  = note: `#[warn(exceeding_bitshifts)]` on by default\n \n warning: this expression will panic at run-time\n  --> lib.rs:2:5"}, {"sha": "a6e4e166d7bc685971ab5b5a9e4010358a155dcf", "filename": "src/doc/rustc/src/lints/listing/allowed-by-default.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -165,7 +165,7 @@ pub struct Foo;\n When set to 'deny', this will produce:\n \n ```text\n-error: type does not implement `fmt::Debug`; consider adding #[derive(Debug)] or a manual implementation\n+error: type does not implement `fmt::Debug`; consider adding `#[derive(Debug)]` or a manual implementation\n  --> src/main.rs:3:1\n   |\n 3 | pub struct Foo;"}, {"sha": "6574267f185113f13da7fa7b93b0f05898255694", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -40,7 +40,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n 4 | fn foo<T=i32>(t: T) {}\n   |        ^\n   |\n-  = note: #[deny(invalid_type_param_default)] on by default\n+  = note: `#[deny(invalid_type_param_default)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n ```\n@@ -74,7 +74,7 @@ error: private struct constructors are not usable through re-exports in outer mo\n 5 |         ::S;\n   |         ^^^\n   |\n-  = note: #[deny(legacy_constructor_visibility)] on by default\n+  = note: `#[deny(legacy_constructor_visibility)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #39207 <https://github.com/rust-lang/rust/issues/39207>\n ```\n@@ -84,9 +84,9 @@ error: private struct constructors are not usable through re-exports in outer mo\n \n The legacy_directory_ownership warning is issued when\n \n-* There is a non-inline module with a #[path] attribute (e.g. #[path = \"foo.rs\"] mod bar;),\n+* There is a non-inline module with a `#[path]` attribute (e.g. `#[path = \"foo.rs\"] mod bar;`),\n * The module's file (\"foo.rs\" in the above example) is not named \"mod.rs\", and\n-* The module's file contains a non-inline child module without a #[path] attribute.\n+* The module's file contains a non-inline child module without a `#[path]` attribute.\n \n The warning can be fixed by renaming the parent module to \"mod.rs\" and moving\n it into its own directory if appropriate.\n@@ -139,7 +139,7 @@ const FOO: i32 = 5;\n This will produce:\n \n ```text\n-error: const items should never be #[no_mangle]\n+error: const items should never be `#[no_mangle]`\n  --> src/main.rs:3:1\n   |\n 3 | const FOO: i32 = 5;\n@@ -187,7 +187,7 @@ error: parenthesized parameters may only be used with a trait\n 2 |   let x = 5 as usize();\n   |                     ^^\n   |\n-  = note: #[deny(parenthesized_params_in_types_and_modules)] on by default\n+  = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n ```"}, {"sha": "e486240fda896f164267093ecb8023483a0ea457", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -90,7 +90,7 @@ warning: floating-point literals cannot be used in patterns\n 4 |         5.0 => {},\n   |         ^^^\n   |\n-  = note: #[warn(illegal_floating_point_literal_pattern)] on by default\n+  = note: `#[warn(illegal_floating_point_literal_pattern)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n ```\n@@ -109,7 +109,7 @@ extern \"C\" {\n This will produce:\n \n ```text\n-warning: found struct without foreign-function-safe representation annotation in foreign module, consider adding a #[repr(C)] attribute to the type\n+warning: found struct without foreign-function-safe representation annotation in foreign module, consider adding a `#[repr(C)]` attribute to the type\n  --> src/main.rs:2:20\n   |\n 2 |     static STATIC: String;\n@@ -146,7 +146,7 @@ warning: cannot specify lifetime arguments explicitly if late bound lifetime par\n 8 |     S.late::<'static>(&0, &0);\n   |              ^^^^^^^\n   |\n-  = note: #[warn(late_bound_lifetime_arguments)] on by default\n+  = note: `#[warn(late_bound_lifetime_arguments)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n ```\n@@ -327,7 +327,7 @@ warning: patterns aren't allowed in methods without bodies\n 2 |     fn foo(mut arg: u8);\n   |            ^^^^^^^\n   |\n-  = note: #[warn(patterns_in_fns_without_body)] on by default\n+  = note: `#[warn(patterns_in_fns_without_body)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #35203 <https://github.com/rust-lang/rust/issues/35203>\n ```\n@@ -406,7 +406,7 @@ fn foo() {}\n This will produce:\n \n ```text\n-warning: function is marked #[no_mangle], but not exported\n+warning: function is marked `#[no_mangle]`, but not exported\n  --> src/main.rs:2:1\n   |\n 2 | fn foo() {}\n@@ -433,7 +433,7 @@ static X: i32 = 4;\n This will produce:\n \n ```text\n-warning: static is marked #[no_mangle], but not exported\n+warning: static is marked `#[no_mangle]`, but not exported\n  --> src/main.rs:2:1\n   |\n 2 | static X: i32 = 4;\n@@ -496,7 +496,7 @@ warning: borrow of packed field requires unsafe function or block (error E0133)\n 11 |     let y = &x.data.0;\n    |             ^^^^^^^^^\n    |\n-   = note: #[warn(safe_packed_borrows)] on by default\n+   = note: `#[warn(safe_packed_borrows)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n ```\n@@ -542,7 +542,7 @@ warning: bounds on generic parameters are not enforced in type aliases\n 2 | type SendVec<T: Send> = Vec<T>;\n   |                 ^^^^\n   |\n-  = note: #[warn(type_alias_bounds)] on by default\n+  = note: `#[warn(type_alias_bounds)]` on by default\n   = help: the bound will not be checked when the type alias is used, and should be removed\n ```\n \n@@ -567,7 +567,7 @@ warning: type annotations needed\n 4 |     if data.is_null() {}\n   |             ^^^^^^^\n   |\n-  = note: #[warn(tyvar_behind_raw_pointer)] on by default\n+  = note: `#[warn(tyvar_behind_raw_pointer)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n ```\n@@ -787,7 +787,7 @@ warning: doc comment not used by rustdoc\n \n ## unused-features\n \n-This lint detects unused or unknown features found in crate-level #[feature] directives.\n+This lint detects unused or unknown features found in crate-level `#[feature]` directives.\n To fix this, simply remove the feature flag.\n \n ## unused-imports\n@@ -839,7 +839,7 @@ warning: unused macro definition\n \n ## unused-must-use\n \n-This lint detects unused result of a type flagged as #[must_use]. Some\n+This lint detects unused result of a type flagged as `#[must_use]`. Some\n example code that triggers this lint:\n \n ```rust"}, {"sha": "0aaf5269a3d47c81e52fad46b7bb3640689fffc2", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -1412,8 +1412,9 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n /// If you have a reference `&SomeStruct`, then normally in Rust all fields of `SomeStruct` are\n /// immutable. The compiler makes optimizations based on the knowledge that `&T` is not mutably\n /// aliased or mutated, and that `&mut T` is unique. `UnsafeCell<T>` is the only core language\n-/// feature to work around this restriction. All other types that allow internal mutability, such as\n-/// `Cell<T>` and `RefCell<T>`, use `UnsafeCell` to wrap their internal data.\n+/// feature to work around the restriction that `&T` may not be mutated. All other types that\n+/// allow internal mutability, such as `Cell<T>` and `RefCell<T>`, use `UnsafeCell` to wrap their\n+/// internal data. There is *no* legal way to obtain aliasing `&mut`, not even with `UnsafeCell<T>`.\n ///\n /// The `UnsafeCell` API itself is technically very simple: it gives you a raw pointer `*mut T` to\n /// its contents. It is up to _you_ as the abstraction designer to use that raw pointer correctly."}, {"sha": "bb81d7b794bea767f692e0dbbbc9e5aad4a79fcb", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -456,7 +456,7 @@ pub unsafe fn zeroed<T>() -> T {\n /// Bypasses Rust's normal memory-initialization checks by pretending to\n /// produce a value of type `T`, while doing nothing at all.\n ///\n-/// **This functon is deprecated.** Use [`MaybeUninit<T>`] instead.\n+/// **This function is deprecated.** Use [`MaybeUninit<T>`] instead.\n ///\n /// The reason for deprecation is that the function basically cannot be used\n /// correctly: [the Rust compiler assumes][inv] that values are properly initialized."}, {"sha": "748917f1d342087493ef73e2aea00fddc2b0ede4", "filename": "src/libcore/unicode/printable.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibcore%2Funicode%2Fprintable.py", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibcore%2Funicode%2Fprintable.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fprintable.py?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -111,17 +111,17 @@ def compress_normal(normal):\n     return compressed\n \n def print_singletons(uppers, lowers, uppersname, lowersname):\n-    print(\"const {}: &'static [(u8, u8)] = &[\".format(uppersname))\n+    print(\"const {}: &[(u8, u8)] = &[\".format(uppersname))\n     for u, c in uppers:\n         print(\"    ({:#04x}, {}),\".format(u, c))\n     print(\"];\")\n-    print(\"const {}: &'static [u8] = &[\".format(lowersname))\n+    print(\"const {}: &[u8] = &[\".format(lowersname))\n     for i in range(0, len(lowers), 8):\n         print(\"    {}\".format(\" \".join(\"{:#04x},\".format(l) for l in lowers[i:i+8])))\n     print(\"];\")\n \n def print_normal(normal, normalname):\n-    print(\"const {}: &'static [u8] = &[\".format(normalname))\n+    print(\"const {}: &[u8] = &[\".format(normalname))\n     for v in normal:\n         print(\"    {}\".format(\" \".join(\"{:#04x},\".format(i) for i in v)))\n     print(\"];\")"}, {"sha": "d411dda7dc18fc68247bee349acf18af03d5039b", "filename": "src/libcore/unicode/printable.rs", "status": "modified", "additions": 85, "deletions": 71, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibcore%2Funicode%2Fprintable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibcore%2Funicode%2Fprintable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fprintable.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -82,7 +82,7 @@ const SINGLETONS0U: &[(u8, u8)] = &[\n     (0x0b, 25),\n     (0x0c, 20),\n     (0x0d, 18),\n-    (0x0e, 22),\n+    (0x0e, 13),\n     (0x0f, 4),\n     (0x10, 3),\n     (0x12, 18),\n@@ -96,13 +96,14 @@ const SINGLETONS0U: &[(u8, u8)] = &[\n     (0x1d, 1),\n     (0x1f, 22),\n     (0x20, 3),\n-    (0x2b, 6),\n+    (0x2b, 4),\n     (0x2c, 2),\n     (0x2d, 11),\n     (0x2e, 1),\n     (0x30, 3),\n     (0x31, 2),\n-    (0x32, 2),\n+    (0x32, 1),\n+    (0xa7, 2),\n     (0xa9, 2),\n     (0xaa, 4),\n     (0xab, 8),\n@@ -130,27 +131,26 @@ const SINGLETONS0L: &[u8] = &[\n     0xbb, 0xc5, 0xc9, 0xdf, 0xe4, 0xe5, 0xf0, 0x04,\n     0x0d, 0x11, 0x45, 0x49, 0x64, 0x65, 0x80, 0x81,\n     0x84, 0xb2, 0xbc, 0xbe, 0xbf, 0xd5, 0xd7, 0xf0,\n-    0xf1, 0x83, 0x85, 0x86, 0x89, 0x8b, 0x8c, 0x98,\n-    0xa0, 0xa4, 0xa6, 0xa8, 0xa9, 0xac, 0xba, 0xbe,\n-    0xbf, 0xc5, 0xc7, 0xce, 0xcf, 0xda, 0xdb, 0x48,\n-    0x98, 0xbd, 0xcd, 0xc6, 0xce, 0xcf, 0x49, 0x4e,\n-    0x4f, 0x57, 0x59, 0x5e, 0x5f, 0x89, 0x8e, 0x8f,\n-    0xb1, 0xb6, 0xb7, 0xbf, 0xc1, 0xc6, 0xc7, 0xd7,\n-    0x11, 0x16, 0x17, 0x5b, 0x5c, 0xf6, 0xf7, 0xfe,\n-    0xff, 0x80, 0x0d, 0x6d, 0x71, 0xde, 0xdf, 0x0e,\n-    0x0f, 0x1f, 0x6e, 0x6f, 0x1c, 0x1d, 0x5f, 0x7d,\n-    0x7e, 0xae, 0xaf, 0xbb, 0xbc, 0xfa, 0x16, 0x17,\n-    0x1e, 0x1f, 0x46, 0x47, 0x4e, 0x4f, 0x58, 0x5a,\n-    0x5c, 0x5e, 0x7e, 0x7f, 0xb5, 0xc5, 0xd4, 0xd5,\n-    0xdc, 0xf0, 0xf1, 0xf5, 0x72, 0x73, 0x8f, 0x74,\n-    0x75, 0x96, 0x97, 0xc9, 0xff, 0x2f, 0x5f, 0x26,\n-    0x2e, 0x2f, 0xa7, 0xaf, 0xb7, 0xbf, 0xc7, 0xcf,\n-    0xd7, 0xdf, 0x9a, 0x40, 0x97, 0x98, 0x30, 0x8f,\n-    0x1f, 0xff, 0xce, 0xff, 0x4e, 0x4f, 0x5a, 0x5b,\n-    0x07, 0x08, 0x0f, 0x10, 0x27, 0x2f, 0xee, 0xef,\n-    0x6e, 0x6f, 0x37, 0x3d, 0x3f, 0x42, 0x45, 0x90,\n-    0x91, 0xfe, 0xff, 0x53, 0x67, 0x75, 0xc8, 0xc9,\n-    0xd0, 0xd1, 0xd8, 0xd9, 0xe7, 0xfe, 0xff,\n+    0xf1, 0x83, 0x85, 0x8b, 0xa4, 0xa6, 0xbe, 0xbf,\n+    0xc5, 0xc7, 0xce, 0xcf, 0xda, 0xdb, 0x48, 0x98,\n+    0xbd, 0xcd, 0xc6, 0xce, 0xcf, 0x49, 0x4e, 0x4f,\n+    0x57, 0x59, 0x5e, 0x5f, 0x89, 0x8e, 0x8f, 0xb1,\n+    0xb6, 0xb7, 0xbf, 0xc1, 0xc6, 0xc7, 0xd7, 0x11,\n+    0x16, 0x17, 0x5b, 0x5c, 0xf6, 0xf7, 0xfe, 0xff,\n+    0x80, 0x0d, 0x6d, 0x71, 0xde, 0xdf, 0x0e, 0x0f,\n+    0x1f, 0x6e, 0x6f, 0x1c, 0x1d, 0x5f, 0x7d, 0x7e,\n+    0xae, 0xaf, 0xbb, 0xbc, 0xfa, 0x16, 0x17, 0x1e,\n+    0x1f, 0x46, 0x47, 0x4e, 0x4f, 0x58, 0x5a, 0x5c,\n+    0x5e, 0x7e, 0x7f, 0xb5, 0xc5, 0xd4, 0xd5, 0xdc,\n+    0xf0, 0xf1, 0xf5, 0x72, 0x73, 0x8f, 0x74, 0x75,\n+    0x96, 0x97, 0x2f, 0x5f, 0x26, 0x2e, 0x2f, 0xa7,\n+    0xaf, 0xb7, 0xbf, 0xc7, 0xcf, 0xd7, 0xdf, 0x9a,\n+    0x40, 0x97, 0x98, 0x30, 0x8f, 0x1f, 0xc0, 0xc1,\n+    0xce, 0xff, 0x4e, 0x4f, 0x5a, 0x5b, 0x07, 0x08,\n+    0x0f, 0x10, 0x27, 0x2f, 0xee, 0xef, 0x6e, 0x6f,\n+    0x37, 0x3d, 0x3f, 0x42, 0x45, 0x90, 0x91, 0xfe,\n+    0xff, 0x53, 0x67, 0x75, 0xc8, 0xc9, 0xd0, 0xd1,\n+    0xd8, 0xd9, 0xe7, 0xfe, 0xff,\n ];\n const SINGLETONS1U: &[(u8, u8)] = &[\n     (0x00, 6),\n@@ -168,7 +168,7 @@ const SINGLETONS1U: &[(u8, u8)] = &[\n     (0x14, 2),\n     (0x15, 2),\n     (0x17, 2),\n-    (0x1a, 2),\n+    (0x19, 4),\n     (0x1c, 5),\n     (0x1d, 8),\n     (0x24, 1),\n@@ -182,10 +182,12 @@ const SINGLETONS1U: &[(u8, u8)] = &[\n     (0xd7, 2),\n     (0xda, 1),\n     (0xe0, 5),\n+    (0xe1, 2),\n     (0xe8, 2),\n     (0xee, 32),\n     (0xf0, 4),\n-    (0xf9, 4),\n+    (0xf9, 6),\n+    (0xfa, 2),\n ];\n const SINGLETONS1L: &[u8] = &[\n     0x0c, 0x27, 0x3b, 0x3e, 0x4e, 0x4f, 0x8f, 0x9e,\n@@ -195,19 +197,20 @@ const SINGLETONS1L: &[u8] = &[\n     0x12, 0x87, 0x89, 0x8e, 0x9e, 0x04, 0x0d, 0x0e,\n     0x11, 0x12, 0x29, 0x31, 0x34, 0x3a, 0x45, 0x46,\n     0x49, 0x4a, 0x4e, 0x4f, 0x64, 0x65, 0x5a, 0x5c,\n-    0xb6, 0xb7, 0x1b, 0x1c, 0x84, 0x85, 0x09, 0x37,\n-    0x90, 0x91, 0xa8, 0x07, 0x0a, 0x3b, 0x3e, 0x66,\n-    0x69, 0x8f, 0x92, 0x6f, 0x5f, 0xee, 0xef, 0x5a,\n-    0x62, 0x9a, 0x9b, 0x27, 0x28, 0x55, 0x9d, 0xa0,\n-    0xa1, 0xa3, 0xa4, 0xa7, 0xa8, 0xad, 0xba, 0xbc,\n-    0xc4, 0x06, 0x0b, 0x0c, 0x15, 0x1d, 0x3a, 0x3f,\n-    0x45, 0x51, 0xa6, 0xa7, 0xcc, 0xcd, 0xa0, 0x07,\n-    0x19, 0x1a, 0x22, 0x25, 0xc5, 0xc6, 0x04, 0x20,\n-    0x23, 0x25, 0x26, 0x28, 0x33, 0x38, 0x3a, 0x48,\n-    0x4a, 0x4c, 0x50, 0x53, 0x55, 0x56, 0x58, 0x5a,\n-    0x5c, 0x5e, 0x60, 0x63, 0x65, 0x66, 0x6b, 0x73,\n-    0x78, 0x7d, 0x7f, 0x8a, 0xa4, 0xaa, 0xaf, 0xb0,\n-    0xc0, 0xd0, 0x3f, 0x71, 0x72, 0x7b,\n+    0xb6, 0xb7, 0x1b, 0x1c, 0xa8, 0xa9, 0xd8, 0xd9,\n+    0x09, 0x37, 0x90, 0x91, 0xa8, 0x07, 0x0a, 0x3b,\n+    0x3e, 0x66, 0x69, 0x8f, 0x92, 0x6f, 0x5f, 0xee,\n+    0xef, 0x5a, 0x62, 0x9a, 0x9b, 0x27, 0x28, 0x55,\n+    0x9d, 0xa0, 0xa1, 0xa3, 0xa4, 0xa7, 0xa8, 0xad,\n+    0xba, 0xbc, 0xc4, 0x06, 0x0b, 0x0c, 0x15, 0x1d,\n+    0x3a, 0x3f, 0x45, 0x51, 0xa6, 0xa7, 0xcc, 0xcd,\n+    0xa0, 0x07, 0x19, 0x1a, 0x22, 0x25, 0x3e, 0x3f,\n+    0xc5, 0xc6, 0x04, 0x20, 0x23, 0x25, 0x26, 0x28,\n+    0x33, 0x38, 0x3a, 0x48, 0x4a, 0x4c, 0x50, 0x53,\n+    0x55, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x63,\n+    0x65, 0x66, 0x6b, 0x73, 0x78, 0x7d, 0x7f, 0x8a,\n+    0xa4, 0xaa, 0xaf, 0xb0, 0xc0, 0xd0, 0x0c, 0x72,\n+    0xa3, 0xa4, 0xcb, 0xcc, 0x6e, 0x6f,\n ];\n const NORMAL0: &[u8] = &[\n     0x00, 0x20,\n@@ -246,8 +249,8 @@ const NORMAL0: &[u8] = &[\n     0x3a, 0x03,\n     0x11, 0x07,\n     0x06, 0x05,\n-    0x10, 0x08,\n-    0x56, 0x07,\n+    0x10, 0x07,\n+    0x57, 0x07,\n     0x02, 0x07,\n     0x15, 0x0d,\n     0x50, 0x04,\n@@ -258,8 +261,7 @@ const NORMAL0: &[u8] = &[\n     0x0f, 0x0c,\n     0x3a, 0x04,\n     0x1d, 0x25,\n-    0x0d, 0x06,\n-    0x4c, 0x20,\n+    0x5f, 0x20,\n     0x6d, 0x04,\n     0x6a, 0x25,\n     0x80, 0xc8, 0x05,\n@@ -294,7 +296,7 @@ const NORMAL0: &[u8] = &[\n     0x0f, 0x03,\n     0x3c, 0x07,\n     0x38, 0x08,\n-    0x2a, 0x06,\n+    0x2b, 0x05,\n     0x82, 0xff, 0x11,\n     0x18, 0x08,\n     0x2f, 0x11,\n@@ -309,7 +311,7 @@ const NORMAL0: &[u8] = &[\n     0x3b, 0x07,\n     0x02, 0x0e,\n     0x18, 0x09,\n-    0x80, 0xaf, 0x31,\n+    0x80, 0xb0, 0x30,\n     0x74, 0x0c,\n     0x80, 0xd6, 0x1a,\n     0x0c, 0x05,\n@@ -322,7 +324,7 @@ const NORMAL0: &[u8] = &[\n     0x37, 0x09,\n     0x81, 0x5c, 0x14,\n     0x80, 0xb8, 0x08,\n-    0x80, 0xba, 0x3d,\n+    0x80, 0xc7, 0x30,\n     0x35, 0x04,\n     0x0a, 0x06,\n     0x38, 0x08,\n@@ -335,7 +337,7 @@ const NORMAL0: &[u8] = &[\n     0x80, 0x83, 0x18,\n     0x1c, 0x0a,\n     0x16, 0x09,\n-    0x46, 0x0a,\n+    0x48, 0x08,\n     0x80, 0x8a, 0x06,\n     0xab, 0xa4, 0x0c,\n     0x17, 0x04,\n@@ -405,7 +407,8 @@ const NORMAL1: &[u8] = &[\n     0x0a, 0x81, 0x26,\n     0x1f, 0x80, 0x81,\n     0x28, 0x08,\n-    0x2a, 0x80, 0xa6,\n+    0x2a, 0x80, 0x86,\n+    0x17, 0x09,\n     0x4e, 0x04,\n     0x1e, 0x0f,\n     0x43, 0x0e,\n@@ -422,20 +425,21 @@ const NORMAL1: &[u8] = &[\n     0x01, 0x05,\n     0x10, 0x03,\n     0x05, 0x80, 0x8b,\n-    0x5f, 0x21,\n+    0x60, 0x20,\n     0x48, 0x08,\n     0x0a, 0x80, 0xa6,\n     0x5e, 0x22,\n     0x45, 0x0b,\n     0x0a, 0x06,\n     0x0d, 0x13,\n-    0x38, 0x08,\n+    0x39, 0x07,\n     0x0a, 0x36,\n     0x2c, 0x04,\n     0x10, 0x80, 0xc0,\n     0x3c, 0x64,\n     0x53, 0x0c,\n-    0x01, 0x81, 0x00,\n+    0x01, 0x80, 0xa0,\n+    0x45, 0x1b,\n     0x48, 0x08,\n     0x53, 0x1d,\n     0x39, 0x81, 0x07,\n@@ -447,8 +451,9 @@ const NORMAL1: &[u8] = &[\n     0x0a, 0x06,\n     0x39, 0x07,\n     0x0a, 0x81, 0x36,\n-    0x19, 0x81, 0x07,\n-    0x83, 0x9a, 0x66,\n+    0x19, 0x80, 0xc7,\n+    0x32, 0x0d,\n+    0x83, 0x9b, 0x66,\n     0x75, 0x0b,\n     0x80, 0xc4, 0x8a, 0xbc,\n     0x84, 0x2f, 0x8f, 0xd1,\n@@ -461,13 +466,15 @@ const NORMAL1: &[u8] = &[\n     0x28, 0x05,\n     0x13, 0x82, 0xb0,\n     0x5b, 0x65,\n-    0x45, 0x0b,\n-    0x2f, 0x10,\n+    0x4b, 0x04,\n+    0x39, 0x07,\n     0x11, 0x40,\n-    0x02, 0x1e,\n-    0x97, 0xf2, 0x0e,\n+    0x04, 0x1c,\n+    0x97, 0xf8, 0x08,\n     0x82, 0xf3, 0xa5, 0x0d,\n-    0x81, 0x1f, 0x51,\n+    0x81, 0x1f, 0x31,\n+    0x03, 0x11,\n+    0x04, 0x08,\n     0x81, 0x8c, 0x89, 0x04,\n     0x6b, 0x05,\n     0x0d, 0x03,\n@@ -483,12 +490,18 @@ const NORMAL1: &[u8] = &[\n     0x81, 0x47, 0x03,\n     0x85, 0x42, 0x0f,\n     0x15, 0x85, 0x50,\n-    0x2b, 0x87, 0xd5,\n+    0x2b, 0x80, 0xd5,\n+    0x2d, 0x03,\n+    0x1a, 0x04,\n+    0x02, 0x81, 0x70,\n+    0x3a, 0x05,\n+    0x01, 0x85, 0x00,\n     0x80, 0xd7, 0x29,\n-    0x4b, 0x05,\n+    0x4c, 0x04,\n     0x0a, 0x04,\n     0x02, 0x83, 0x11,\n-    0x44, 0x81, 0x4b,\n+    0x44, 0x4c,\n+    0x3d, 0x80, 0xc2,\n     0x3c, 0x06,\n     0x01, 0x04,\n     0x55, 0x05,\n@@ -498,28 +511,29 @@ const NORMAL1: &[u8] = &[\n     0x64, 0x0c,\n     0x56, 0x0a,\n     0x0d, 0x03,\n-    0x5c, 0x04,\n+    0x5d, 0x03,\n     0x3d, 0x39,\n     0x1d, 0x0d,\n     0x2c, 0x04,\n     0x09, 0x07,\n     0x02, 0x0e,\n     0x06, 0x80, 0x9a,\n-    0x83, 0xd5, 0x0b,\n+    0x83, 0xd6, 0x0a,\n     0x0d, 0x03,\n-    0x0a, 0x06,\n+    0x0b, 0x05,\n     0x74, 0x0c,\n-    0x59, 0x27,\n+    0x59, 0x07,\n+    0x0c, 0x14,\n     0x0c, 0x04,\n     0x38, 0x08,\n     0x0a, 0x06,\n     0x28, 0x08,\n     0x1e, 0x52,\n-    0x0c, 0x04,\n-    0x67, 0x03,\n-    0x29, 0x0d,\n-    0x0a, 0x06,\n+    0x77, 0x03,\n+    0x31, 0x03,\n+    0x80, 0xa6, 0x0c,\n+    0x14, 0x04,\n+    0x03, 0x05,\n     0x03, 0x0d,\n-    0x30, 0x60,\n-    0x0e, 0x85, 0x92,\n+    0x06, 0x85, 0x6a,\n ];"}, {"sha": "a793ac3eb74b0d1b11f86db098794a8022afde78", "filename": "src/libcore/unicode/tables.rs", "status": "modified", "additions": 680, "deletions": 663, "changes": 1343, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibcore%2Funicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibcore%2Funicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Ftables.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006"}, {"sha": "3a20d0548c15fc090032241501d66e0c3ece1e2c", "filename": "src/libcore/unicode/unicode.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibcore%2Funicode%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibcore%2Funicode%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode.py?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -81,8 +81,8 @@ class UnicodeFiles(object):\n \n #![allow(missing_docs, non_upper_case_globals, non_snake_case)]\n \n-use unicode::version::UnicodeVersion;\n-use unicode::bool_trie::{{BoolTrie, SmallBoolTrie}};\n+use crate::unicode::version::UnicodeVersion;\n+use crate::unicode::bool_trie::{{BoolTrie, SmallBoolTrie}};\n \"\"\".format(year=datetime.datetime.now().year)\n \n # Mapping taken from Table 12 from:"}, {"sha": "5309d5b039e9ebb05f03cfe4ea5742091b7cf65d", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 163, "deletions": 174, "changes": 337, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -47,7 +47,7 @@ pub type ConstEvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ErrorHandled>;\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n-    pub error: crate::mir::interpret::InterpError<'tcx, u64>,\n+    pub error: crate::mir::interpret::InterpError<'tcx>,\n     pub stacktrace: Vec<FrameInfo<'tcx>>,\n }\n \n@@ -185,11 +185,18 @@ pub fn struct_error<'tcx>(tcx: TyCtxtAt<'tcx>, msg: &str) -> DiagnosticBuilder<'\n /// macro for this.\n #[derive(Debug, Clone)]\n pub struct InterpErrorInfo<'tcx> {\n-    pub kind: InterpError<'tcx, u64>,\n+    pub kind: InterpError<'tcx>,\n     backtrace: Option<Box<Backtrace>>,\n }\n \n-impl<'tcx> InterpErrorInfo<'tcx> {\n+\n+impl fmt::Display for InterpErrorInfo<'_> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.kind)\n+    }\n+}\n+\n+impl InterpErrorInfo<'_> {\n     pub fn print_backtrace(&mut self) {\n         if let Some(ref mut backtrace) = self.backtrace {\n             print_backtrace(&mut *backtrace);\n@@ -202,8 +209,8 @@ fn print_backtrace(backtrace: &mut Backtrace) {\n     eprintln!(\"\\n\\nAn error occurred in miri:\\n{:?}\", backtrace);\n }\n \n-impl<'tcx> From<InterpError<'tcx, u64>> for InterpErrorInfo<'tcx> {\n-    fn from(kind: InterpError<'tcx, u64>) -> Self {\n+impl<'tcx> From<InterpError<'tcx>> for InterpErrorInfo<'tcx> {\n+    fn from(kind: InterpError<'tcx>) -> Self {\n         let backtrace = match env::var(\"RUST_CTFE_BACKTRACE\") {\n             // Matching `RUST_BACKTRACE` -- we treat \"0\" the same as \"not present\".\n             Ok(ref val) if val != \"0\" => {\n@@ -226,8 +233,6 @@ impl<'tcx> From<InterpError<'tcx, u64>> for InterpErrorInfo<'tcx> {\n     }\n }\n \n-pub type AssertMessage<'tcx> = InterpError<'tcx, mir::Operand<'tcx>>;\n-\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum PanicMessage<O> {\n     Panic {\n@@ -244,10 +249,68 @@ pub enum PanicMessage<O> {\n     OverflowNeg,\n     DivisionByZero,\n     RemainderByZero,\n+    GeneratorResumedAfterReturn,\n+    GeneratorResumedAfterPanic,\n+}\n+\n+/// Type for MIR `Assert` terminator error messages.\n+pub type AssertMessage<'tcx> = PanicMessage<mir::Operand<'tcx>>;\n+\n+impl<O> PanicMessage<O> {\n+    /// Getting a description does not require `O` to be printable, and does not\n+    /// require allocation.\n+    /// The caller is expected to handle `Panic` and `BoundsCheck` separately.\n+    pub fn description(&self) -> &'static str {\n+        use PanicMessage::*;\n+        match self {\n+            Overflow(mir::BinOp::Add) =>\n+                \"attempt to add with overflow\",\n+            Overflow(mir::BinOp::Sub) =>\n+                \"attempt to subtract with overflow\",\n+            Overflow(mir::BinOp::Mul) =>\n+                \"attempt to multiply with overflow\",\n+            Overflow(mir::BinOp::Div) =>\n+                \"attempt to divide with overflow\",\n+            Overflow(mir::BinOp::Rem) =>\n+                \"attempt to calculate the remainder with overflow\",\n+            OverflowNeg =>\n+                \"attempt to negate with overflow\",\n+            Overflow(mir::BinOp::Shr) =>\n+                \"attempt to shift right with overflow\",\n+            Overflow(mir::BinOp::Shl) =>\n+                \"attempt to shift left with overflow\",\n+            Overflow(op) =>\n+                bug!(\"{:?} cannot overflow\", op),\n+            DivisionByZero =>\n+                \"attempt to divide by zero\",\n+            RemainderByZero =>\n+                \"attempt to calculate the remainder with a divisor of zero\",\n+            GeneratorResumedAfterReturn =>\n+                \"generator resumed after completion\",\n+            GeneratorResumedAfterPanic =>\n+                \"generator resumed after panicking\",\n+            Panic { .. } | BoundsCheck { .. } =>\n+                bug!(\"Unexpected PanicMessage\"),\n+        }\n+    }\n+}\n+\n+impl<O: fmt::Debug> fmt::Debug for PanicMessage<O> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        use PanicMessage::*;\n+        match self {\n+            Panic { ref msg, line, col, ref file } =>\n+                write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col),\n+            BoundsCheck { ref len, ref index } =>\n+                write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index),\n+            _ =>\n+                write!(f, \"{}\", self.description()),\n+        }\n+    }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum InterpError<'tcx, O> {\n+pub enum InterpError<'tcx> {\n     /// This variant is used by machines to signal their own errors that do not\n     /// match an existing variant.\n     MachineError(String),\n@@ -311,7 +374,7 @@ pub enum InterpError<'tcx, O> {\n     HeapAllocZeroBytes,\n     HeapAllocNonPowerOfTwoAlignment(u64),\n     Unreachable,\n-    Panic(PanicMessage<O>),\n+    Panic(PanicMessage<u64>),\n     ReadFromReturnPointer,\n     PathNotFound(Vec<String>),\n     UnimplementedTraitSelection,\n@@ -322,173 +385,21 @@ pub enum InterpError<'tcx, O> {\n     /// Cannot compute this constant because it depends on another one\n     /// which already produced an error\n     ReferencedConstant,\n-    GeneratorResumedAfterReturn,\n-    GeneratorResumedAfterPanic,\n     InfiniteLoop,\n }\n \n pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;\n \n-impl<'tcx, O> InterpError<'tcx, O> {\n-    pub fn description(&self) -> &str {\n-        use self::InterpError::*;\n-        match *self {\n-            MachineError(ref inner) => inner,\n-            Exit(..) =>\n-                \"exited\",\n-            FunctionAbiMismatch(..) | FunctionArgMismatch(..) | FunctionRetMismatch(..)\n-            | FunctionArgCountMismatch =>\n-                \"tried to call a function through a function pointer of incompatible type\",\n-            InvalidMemoryAccess =>\n-                \"tried to access memory through an invalid pointer\",\n-            DanglingPointerDeref =>\n-                \"dangling pointer was dereferenced\",\n-            DoubleFree =>\n-                \"tried to deallocate dangling pointer\",\n-            InvalidFunctionPointer =>\n-                \"tried to use a function pointer after offsetting it\",\n-            InvalidBool =>\n-                \"invalid boolean value read\",\n-            InvalidDiscriminant(..) =>\n-                \"invalid enum discriminant value read\",\n-            PointerOutOfBounds { .. } =>\n-                \"pointer offset outside bounds of allocation\",\n-            InvalidNullPointerUsage =>\n-                \"invalid use of NULL pointer\",\n-            ValidationFailure(..) =>\n-                \"type validation failed\",\n-            ReadPointerAsBytes =>\n-                \"a raw memory access tried to access part of a pointer value as raw bytes\",\n-            ReadBytesAsPointer =>\n-                \"a memory access tried to interpret some bytes as a pointer\",\n-            ReadForeignStatic =>\n-                \"tried to read from foreign (extern) static\",\n-            InvalidPointerMath =>\n-                \"attempted to do invalid arithmetic on pointers that would leak base addresses, \\\n-                e.g., comparing pointers into different allocations\",\n-            ReadUndefBytes(_) =>\n-                \"attempted to read undefined bytes\",\n-            DeadLocal =>\n-                \"tried to access a dead local variable\",\n-            InvalidBoolOp(_) =>\n-                \"invalid boolean operation\",\n-            Unimplemented(ref msg) => msg,\n-            DerefFunctionPointer =>\n-                \"tried to dereference a function pointer\",\n-            ExecuteMemory =>\n-                \"tried to treat a memory pointer as a function pointer\",\n-            Intrinsic(..) =>\n-                \"intrinsic failed\",\n-            NoMirFor(..) =>\n-                \"mir not found\",\n-            InvalidChar(..) =>\n-                \"tried to interpret an invalid 32-bit value as a char\",\n-            StackFrameLimitReached =>\n-                \"reached the configured maximum number of stack frames\",\n-            OutOfTls =>\n-                \"reached the maximum number of representable TLS keys\",\n-            TlsOutOfBounds =>\n-                \"accessed an invalid (unallocated) TLS key\",\n-            AbiViolation(ref msg) => msg,\n-            AlignmentCheckFailed{..} =>\n-                \"tried to execute a misaligned read or write\",\n-            CalledClosureAsFunction =>\n-                \"tried to call a closure through a function pointer\",\n-            VtableForArgumentlessMethod =>\n-                \"tried to call a vtable function without arguments\",\n-            ModifiedConstantMemory =>\n-                \"tried to modify constant memory\",\n-            ModifiedStatic =>\n-                \"tried to modify a static's initial value from another static's initializer\",\n-            AssumptionNotHeld =>\n-                \"`assume` argument was false\",\n-            InlineAsm =>\n-                \"miri does not support inline assembly\",\n-            TypeNotPrimitive(_) =>\n-                \"expected primitive type, got nonprimitive\",\n-            ReallocatedWrongMemoryKind(_, _) =>\n-                \"tried to reallocate memory from one kind to another\",\n-            DeallocatedWrongMemoryKind(_, _) =>\n-                \"tried to deallocate memory of the wrong kind\",\n-            ReallocateNonBasePtr =>\n-                \"tried to reallocate with a pointer not to the beginning of an existing object\",\n-            DeallocateNonBasePtr =>\n-                \"tried to deallocate with a pointer not to the beginning of an existing object\",\n-            IncorrectAllocationInformation(..) =>\n-                \"tried to deallocate or reallocate using incorrect alignment or size\",\n-            Layout(_) =>\n-                \"rustc layout computation failed\",\n-            UnterminatedCString(_) =>\n-                \"attempted to get length of a null terminated string, but no null found before end \\\n-                of allocation\",\n-            HeapAllocZeroBytes =>\n-                \"tried to re-, de- or allocate zero bytes on the heap\",\n-            HeapAllocNonPowerOfTwoAlignment(_) =>\n-                \"tried to re-, de-, or allocate heap memory with alignment that is not a power of \\\n-                two\",\n-            Unreachable =>\n-                \"entered unreachable code\",\n-            Panic(PanicMessage::Panic{..}) =>\n-                \"the evaluated program panicked\",\n-            Panic(PanicMessage::BoundsCheck{..}) =>\n-                \"array index out of bounds\",\n-            Panic(PanicMessage::Overflow(mir::BinOp::Add)) =>\n-                \"attempt to add with overflow\",\n-            Panic(PanicMessage::Overflow(mir::BinOp::Sub)) =>\n-                \"attempt to subtract with overflow\",\n-            Panic(PanicMessage::Overflow(mir::BinOp::Mul)) =>\n-                \"attempt to multiply with overflow\",\n-            Panic(PanicMessage::Overflow(mir::BinOp::Div)) =>\n-                \"attempt to divide with overflow\",\n-            Panic(PanicMessage::Overflow(mir::BinOp::Rem)) =>\n-                \"attempt to calculate the remainder with overflow\",\n-            Panic(PanicMessage::OverflowNeg) =>\n-                \"attempt to negate with overflow\",\n-            Panic(PanicMessage::Overflow(mir::BinOp::Shr)) =>\n-                \"attempt to shift right with overflow\",\n-            Panic(PanicMessage::Overflow(mir::BinOp::Shl)) =>\n-                \"attempt to shift left with overflow\",\n-            Panic(PanicMessage::Overflow(op)) =>\n-                bug!(\"{:?} cannot overflow\", op),\n-            Panic(PanicMessage::DivisionByZero) =>\n-                \"attempt to divide by zero\",\n-            Panic(PanicMessage::RemainderByZero) =>\n-                \"attempt to calculate the remainder with a divisor of zero\",\n-            ReadFromReturnPointer =>\n-                \"tried to read from the return pointer\",\n-            PathNotFound(_) =>\n-                \"a path could not be resolved, maybe the crate is not loaded\",\n-            UnimplementedTraitSelection =>\n-                \"there were unresolved type arguments during trait selection\",\n-            TypeckError =>\n-                \"encountered constants with type errors, stopping evaluation\",\n-            TooGeneric =>\n-                \"encountered overly generic constant\",\n-            ReferencedConstant =>\n-                \"referenced constant has errors\",\n-            GeneratorResumedAfterReturn => \"generator resumed after completion\",\n-            GeneratorResumedAfterPanic => \"generator resumed after panicking\",\n-            InfiniteLoop =>\n-                \"duplicate interpreter state observed here, const evaluation will never terminate\",\n-        }\n-    }\n-}\n-\n-impl<'tcx> fmt::Display for InterpErrorInfo<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.kind)\n-    }\n-}\n-\n-impl<'tcx> fmt::Display for InterpError<'tcx, u64> {\n+impl fmt::Display for InterpError<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // Forward `Display` to `Debug`\n         write!(f, \"{:?}\", self)\n     }\n }\n \n-impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n+impl fmt::Debug for InterpError<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use self::InterpError::*;\n+        use InterpError::*;\n         match *self {\n             PointerOutOfBounds { ptr, msg, allocation_size } => {\n                 write!(f, \"{} failed: pointer must be in-bounds at offset {}, \\\n@@ -516,8 +427,6 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n                 write!(f, \"tried to reallocate memory from {} to {}\", old, new),\n             DeallocatedWrongMemoryKind(ref old, ref new) =>\n                 write!(f, \"tried to deallocate {} memory but gave {} as the kind\", old, new),\n-            Intrinsic(ref err) =>\n-                write!(f, \"{}\", err),\n             InvalidChar(c) =>\n                 write!(f, \"tried to interpret an invalid 32-bit value as a char: {}\", c),\n             AlignmentCheckFailed { required, has } =>\n@@ -529,21 +438,101 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n                 write!(f, \"rustc layout computation failed: {:?}\", err),\n             PathNotFound(ref path) =>\n                 write!(f, \"Cannot find path {:?}\", path),\n-            MachineError(ref inner) =>\n-                write!(f, \"{}\", inner),\n             IncorrectAllocationInformation(size, size2, align, align2) =>\n                 write!(f, \"incorrect alloc info: expected size {} and align {}, \\\n                            got size {} and align {}\",\n                     size.bytes(), align.bytes(), size2.bytes(), align2.bytes()),\n-            Panic(PanicMessage::Panic { ref msg, line, col, ref file }) =>\n-                write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col),\n-            Panic(PanicMessage::BoundsCheck { ref len, ref index }) =>\n-                write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index),\n             InvalidDiscriminant(val) =>\n                 write!(f, \"encountered invalid enum discriminant {}\", val),\n             Exit(code) =>\n                 write!(f, \"exited with status code {}\", code),\n-            _ => write!(f, \"{}\", self.description()),\n+            InvalidMemoryAccess =>\n+                write!(f, \"tried to access memory through an invalid pointer\"),\n+            DanglingPointerDeref =>\n+                write!(f, \"dangling pointer was dereferenced\"),\n+            DoubleFree =>\n+                write!(f, \"tried to deallocate dangling pointer\"),\n+            InvalidFunctionPointer =>\n+                write!(f, \"tried to use a function pointer after offsetting it\"),\n+            InvalidBool =>\n+                write!(f, \"invalid boolean value read\"),\n+            InvalidNullPointerUsage =>\n+                write!(f, \"invalid use of NULL pointer\"),\n+            ReadPointerAsBytes =>\n+                write!(f, \"a raw memory access tried to access part of a pointer value as raw \\\n+                    bytes\"),\n+            ReadBytesAsPointer =>\n+                write!(f, \"a memory access tried to interpret some bytes as a pointer\"),\n+            ReadForeignStatic =>\n+                write!(f, \"tried to read from foreign (extern) static\"),\n+            InvalidPointerMath =>\n+                write!(f, \"attempted to do invalid arithmetic on pointers that would leak base \\\n+                    addresses, e.g., comparing pointers into different allocations\"),\n+            DeadLocal =>\n+                write!(f, \"tried to access a dead local variable\"),\n+            DerefFunctionPointer =>\n+                write!(f, \"tried to dereference a function pointer\"),\n+            ExecuteMemory =>\n+                write!(f, \"tried to treat a memory pointer as a function pointer\"),\n+            StackFrameLimitReached =>\n+                write!(f, \"reached the configured maximum number of stack frames\"),\n+            OutOfTls =>\n+                write!(f, \"reached the maximum number of representable TLS keys\"),\n+            TlsOutOfBounds =>\n+                write!(f, \"accessed an invalid (unallocated) TLS key\"),\n+            CalledClosureAsFunction =>\n+                write!(f, \"tried to call a closure through a function pointer\"),\n+            VtableForArgumentlessMethod =>\n+                write!(f, \"tried to call a vtable function without arguments\"),\n+            ModifiedConstantMemory =>\n+                write!(f, \"tried to modify constant memory\"),\n+            ModifiedStatic =>\n+                write!(f, \"tried to modify a static's initial value from another static's \\\n+                    initializer\"),\n+            AssumptionNotHeld =>\n+                write!(f, \"`assume` argument was false\"),\n+            InlineAsm =>\n+                write!(f, \"miri does not support inline assembly\"),\n+            ReallocateNonBasePtr =>\n+                write!(f, \"tried to reallocate with a pointer not to the beginning of an \\\n+                    existing object\"),\n+            DeallocateNonBasePtr =>\n+                write!(f, \"tried to deallocate with a pointer not to the beginning of an \\\n+                    existing object\"),\n+            HeapAllocZeroBytes =>\n+                write!(f, \"tried to re-, de- or allocate zero bytes on the heap\"),\n+            Unreachable =>\n+                write!(f, \"entered unreachable code\"),\n+            ReadFromReturnPointer =>\n+                write!(f, \"tried to read from the return pointer\"),\n+            UnimplementedTraitSelection =>\n+                write!(f, \"there were unresolved type arguments during trait selection\"),\n+            TypeckError =>\n+                write!(f, \"encountered constants with type errors, stopping evaluation\"),\n+            TooGeneric =>\n+                write!(f, \"encountered overly generic constant\"),\n+            ReferencedConstant =>\n+                write!(f, \"referenced constant has errors\"),\n+            InfiniteLoop =>\n+                write!(f, \"duplicate interpreter state observed here, const evaluation will never \\\n+                    terminate\"),\n+            InvalidBoolOp(_) =>\n+                write!(f, \"invalid boolean operation\"),\n+            UnterminatedCString(_) =>\n+                write!(f, \"attempted to get length of a null terminated string, but no null \\\n+                    found before end of allocation\"),\n+            ReadUndefBytes(_) =>\n+                write!(f, \"attempted to read undefined bytes\"),\n+            HeapAllocNonPowerOfTwoAlignment(_) =>\n+                write!(f, \"tried to re-, de-, or allocate heap memory with alignment that is \\\n+                    not a power of two\"),\n+            MachineError(ref msg) |\n+            Unimplemented(ref msg) |\n+            AbiViolation(ref msg) |\n+            Intrinsic(ref msg) =>\n+                write!(f, \"{}\", msg),\n+            Panic(ref msg) =>\n+                write!(f, \"{:?}\", msg),\n         }\n     }\n }"}, {"sha": "b3d92e8a604d1e1fff12eae4af3eceae8fe4475e", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -7,7 +7,7 @@\n use crate::hir::def::{CtorKind, Namespace};\n use crate::hir::def_id::DefId;\n use crate::hir::{self, InlineAsm as HirInlineAsm};\n-use crate::mir::interpret::{ConstValue, PanicMessage, InterpError::Panic, Scalar};\n+use crate::mir::interpret::{ConstValue, PanicMessage, Scalar};\n use crate::mir::visit::MirVisitable;\n use crate::rustc_serialize as serialize;\n use crate::ty::adjustment::PointerCast;\n@@ -3152,13 +3152,16 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 }\n             }\n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n-                let msg = if let Panic(PanicMessage::BoundsCheck { ref len, ref index }) = *msg {\n-                    Panic(PanicMessage::BoundsCheck {\n-                        len: len.fold_with(folder),\n-                        index: index.fold_with(folder),\n-                    })\n-                } else {\n-                    msg.clone()\n+                use PanicMessage::*;\n+                let msg = match msg {\n+                    BoundsCheck { ref len, ref index } =>\n+                        BoundsCheck {\n+                            len: len.fold_with(folder),\n+                            index: index.fold_with(folder),\n+                        },\n+                    Panic { .. } | Overflow(_) | OverflowNeg | DivisionByZero | RemainderByZero |\n+                    GeneratorResumedAfterReturn | GeneratorResumedAfterPanic =>\n+                        msg.clone(),\n                 };\n                 Assert { cond: cond.fold_with(folder), expected, msg, target, cleanup }\n             }\n@@ -3197,10 +3200,14 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             }\n             Assert { ref cond, ref msg, .. } => {\n                 if cond.visit_with(visitor) {\n-                    if let Panic(PanicMessage::BoundsCheck { ref len, ref index }) = *msg {\n-                        len.visit_with(visitor) || index.visit_with(visitor)\n-                    } else {\n-                        false\n+                    use PanicMessage::*;\n+                    match msg {\n+                        BoundsCheck { ref len, ref index } =>\n+                            len.visit_with(visitor) || index.visit_with(visitor),\n+                        Panic { .. } | Overflow(_) | OverflowNeg |\n+                        DivisionByZero | RemainderByZero |\n+                        GeneratorResumedAfterReturn | GeneratorResumedAfterPanic =>\n+                            false\n                     }\n                 } else {\n                     false"}, {"sha": "7562981f94f61aab897ad68a74b17c7b37c09669", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -514,11 +514,16 @@ macro_rules! make_mir_visitor {\n             fn super_assert_message(&mut self,\n                                     msg: & $($mutability)? AssertMessage<'tcx>,\n                                     location: Location) {\n-                use crate::mir::interpret::InterpError::*;\n-                use crate::mir::interpret::PanicMessage::BoundsCheck;\n-                if let Panic(BoundsCheck { len, index }) = msg {\n-                    self.visit_operand(len, location);\n-                    self.visit_operand(index, location);\n+                use crate::mir::interpret::PanicMessage::*;\n+                match msg {\n+                    BoundsCheck { len, index } => {\n+                        self.visit_operand(len, location);\n+                        self.visit_operand(index, location);\n+                    }\n+                    Panic { .. } | Overflow(_) | OverflowNeg | DivisionByZero | RemainderByZero |\n+                    GeneratorResumedAfterReturn | GeneratorResumedAfterPanic => {\n+                        // Nothing to visit\n+                    }\n                 }\n             }\n "}, {"sha": "18611c3e167d22893eaeed234cf7f847eb6cd602", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -2,7 +2,7 @@ use rustc::middle::lang_items;\n use rustc::ty::{self, Ty, TypeFoldable, Instance};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, FnTypeExt};\n use rustc::mir::{self, Place, PlaceBase, Static, StaticKind};\n-use rustc::mir::interpret::{InterpError, PanicMessage};\n+use rustc::mir::interpret::PanicMessage;\n use rustc_target::abi::call::{ArgType, FnType, PassMode, IgnoreMode};\n use rustc_target::spec::abi::Abi;\n use crate::base;\n@@ -368,7 +368,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // checked operation, just a comparison with the minimum\n         // value, so we have to check for the assert message.\n         if !bx.check_overflow() {\n-            if let InterpError::Panic(PanicMessage::OverflowNeg) = *msg {\n+            if let PanicMessage::OverflowNeg = *msg {\n                 const_cond = Some(expected);\n             }\n         }\n@@ -402,8 +402,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n \n         // Put together the arguments to the panic entry point.\n-        let (lang_item, args) = match *msg {\n-            InterpError::Panic(PanicMessage::BoundsCheck { ref len, ref index }) => {\n+        let (lang_item, args) = match msg {\n+            PanicMessage::BoundsCheck { ref len, ref index } => {\n                 let len = self.codegen_operand(&mut bx, len).immediate();\n                 let index = self.codegen_operand(&mut bx, index).immediate();\n "}, {"sha": "92285c47db481460ee183db79922bf349cc85e2a", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -733,8 +733,8 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                 cleanup: _,\n             } => {\n                 self.consume_operand(loc, (cond, span), flow_state);\n-                use rustc::mir::interpret::{InterpError::Panic, PanicMessage};\n-                if let Panic(PanicMessage::BoundsCheck { ref len, ref index }) = *msg {\n+                use rustc::mir::interpret::PanicMessage;\n+                if let PanicMessage::BoundsCheck { ref len, ref index } = *msg {\n                     self.consume_operand(loc, (len, span), flow_state);\n                     self.consume_operand(loc, (index, span), flow_state);\n                 }"}, {"sha": "aa9e68bd7de4412bf91e7e5cb0b2a291bbf40f35", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -207,8 +207,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 cleanup: _,\n             } => {\n                 self.consume_operand(location, cond);\n-                use rustc::mir::interpret::{InterpError::Panic, PanicMessage::BoundsCheck};\n-                if let Panic(BoundsCheck { ref len, ref index }) = *msg {\n+                use rustc::mir::interpret::PanicMessage;\n+                if let PanicMessage::BoundsCheck { ref len, ref index } = *msg {\n                     self.consume_operand(location, len);\n                     self.consume_operand(location, index);\n                 }"}, {"sha": "59a8c8d34d2a1cf26a81e44e793040015b8114a3", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -28,7 +28,7 @@ use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc::mir::interpret::{InterpError::Panic, ConstValue, PanicMessage};\n+use rustc::mir::interpret::{ConstValue, PanicMessage};\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor, NonMutatingUseContext};\n use rustc::mir::*;\n@@ -1606,7 +1606,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     span_mirbug!(self, term, \"bad Assert ({:?}, not bool\", cond_ty);\n                 }\n \n-                if let Panic(PanicMessage::BoundsCheck { ref len, ref index }) = *msg {\n+                if let PanicMessage::BoundsCheck { ref len, ref index } = *msg {\n                     if len.ty(body, tcx) != tcx.types.usize {\n                         span_mirbug!(self, len, \"bounds-check length non-usize {:?}\", len)\n                     }"}, {"sha": "7a428a2ec9f3626d149714db264af8bf077c7e0b", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -4,7 +4,7 @@ use crate::build::expr::category::Category;\n use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n-use rustc::mir::interpret::{InterpError::Panic, PanicMessage::BoundsCheck};\n+use rustc::mir::interpret::{PanicMessage::BoundsCheck};\n use rustc::mir::*;\n use rustc::ty::{CanonicalUserTypeAnnotation, Variance};\n \n@@ -105,10 +105,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     ),\n                 );\n \n-                let msg = Panic(BoundsCheck {\n+                let msg = BoundsCheck {\n                     len: Operand::Move(len),\n                     index: Operand::Copy(Place::from(idx)),\n-                });\n+                };\n                 let success = this.assert(block, Operand::Move(lt), true, msg, expr_span);\n                 success.and(slice.index(idx))\n             }"}, {"sha": "92daf06e6f8fefea4dbf21dba879996b2d431c74", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -7,7 +7,7 @@ use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n use rustc::middle::region;\n-use rustc::mir::interpret::{InterpError::Panic, PanicMessage};\n+use rustc::mir::interpret::PanicMessage;\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty, UpvarSubsts};\n use syntax_pos::Span;\n@@ -101,7 +101,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         Operand::Move(is_min),\n                         false,\n-                        Panic(PanicMessage::OverflowNeg),\n+                        PanicMessage::OverflowNeg,\n                         expr_span,\n                     );\n                 }\n@@ -401,7 +401,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let val = result_value.clone().field(val_fld, ty);\n             let of = result_value.field(of_fld, bool_ty);\n \n-            let err = Panic(PanicMessage::Overflow(op));\n+            let err = PanicMessage::Overflow(op);\n \n             block = self.assert(block, Operand::Move(of), false, err, span);\n \n@@ -411,11 +411,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // Checking division and remainder is more complex, since we 1. always check\n                 // and 2. there are two possible failure cases, divide-by-zero and overflow.\n \n-                let (zero_err, overflow_err) = if op == BinOp::Div {\n-                    (Panic(PanicMessage::DivisionByZero), Panic(PanicMessage::Overflow(op)))\n+                let zero_err = if op == BinOp::Div {\n+                    PanicMessage::DivisionByZero\n                 } else {\n-                    (Panic(PanicMessage::RemainderByZero), Panic(PanicMessage::Overflow(op)))\n+                    PanicMessage::RemainderByZero\n                 };\n+                let overflow_err = PanicMessage::Overflow(op);\n \n                 // Check for / 0\n                 let is_zero = self.temp(bool_ty, span);"}, {"sha": "27bd0f88896340d1a8df827de43555e1334f5c3c", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -7,7 +7,7 @@ use syntax::source_map::Span;\n use rustc_target::spec::abi::Abi;\n \n use super::{\n-    InterpResult, PointerArithmetic, InterpError, Scalar, PanicMessage,\n+    InterpResult, PointerArithmetic, InterpError, Scalar,\n     InterpCx, Machine, Immediate, OpTy, ImmTy, PlaceTy, MPlaceTy, StackPopCleanup, FnVal,\n };\n \n@@ -135,28 +135,31 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     self.goto_block(Some(target))?;\n                 } else {\n                     // Compute error message\n-                    use rustc::mir::interpret::InterpError::*;\n-                    return match *msg {\n-                        Panic(PanicMessage::BoundsCheck { ref len, ref index }) => {\n+                    use rustc::mir::interpret::PanicMessage::*;\n+                    return match msg {\n+                        BoundsCheck { ref len, ref index } => {\n                             let len = self.read_immediate(self.eval_operand(len, None)?)\n                                 .expect(\"can't eval len\").to_scalar()?\n                                 .to_bits(self.memory().pointer_size())? as u64;\n                             let index = self.read_immediate(self.eval_operand(index, None)?)\n                                 .expect(\"can't eval index\").to_scalar()?\n                                 .to_bits(self.memory().pointer_size())? as u64;\n-                            err!(Panic(PanicMessage::BoundsCheck { len, index }))\n+                            err!(Panic(BoundsCheck { len, index }))\n                         }\n-                        Panic(PanicMessage::Overflow(op)) =>\n-                            Err(Panic(PanicMessage::Overflow(op)).into()),\n-                        Panic(PanicMessage::OverflowNeg) =>\n-                            Err(Panic(PanicMessage::OverflowNeg).into()),\n-                        Panic(PanicMessage::DivisionByZero) =>\n-                            Err(Panic(PanicMessage::DivisionByZero).into()),\n-                        Panic(PanicMessage::RemainderByZero) =>\n-                            Err(Panic(PanicMessage::RemainderByZero).into()),\n-                        GeneratorResumedAfterReturn |\n-                        GeneratorResumedAfterPanic => unimplemented!(),\n-                        _ => bug!(),\n+                        Overflow(op) =>\n+                            err!(Panic(Overflow(*op))),\n+                        OverflowNeg =>\n+                            err!(Panic(OverflowNeg)),\n+                        DivisionByZero =>\n+                            err!(Panic(DivisionByZero)),\n+                        RemainderByZero =>\n+                            err!(Panic(RemainderByZero)),\n+                        GeneratorResumedAfterReturn =>\n+                            err!(Panic(GeneratorResumedAfterReturn)),\n+                        GeneratorResumedAfterPanic =>\n+                            err!(Panic(GeneratorResumedAfterPanic)),\n+                        Panic { .. } =>\n+                            bug!(\"`Panic` variant cannot occur in MIR\"),\n                     };\n                 }\n             }"}, {"sha": "7a2d78b2e986b670626c7c878ef93ddefc402104", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -13,7 +13,7 @@ use rustc::mir::{\n use rustc::mir::visit::{\n     Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n };\n-use rustc::mir::interpret::{InterpError::Panic, Scalar, GlobalId, InterpResult, PanicMessage};\n+use rustc::mir::interpret::{Scalar, GlobalId, InterpResult, InterpError, PanicMessage};\n use rustc::ty::{self, Instance, ParamEnv, Ty, TyCtxt};\n use syntax_pos::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n@@ -314,8 +314,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     | HeapAllocNonPowerOfTwoAlignment(_)\n                     | Unreachable\n                     | ReadFromReturnPointer\n-                    | GeneratorResumedAfterReturn\n-                    | GeneratorResumedAfterPanic\n                     | ReferencedConstant\n                     | InfiniteLoop\n                     => {\n@@ -595,7 +593,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     )\n                 } else {\n                     if overflow {\n-                        let err = Panic(PanicMessage::Overflow(op)).into();\n+                        let err = InterpError::Panic(PanicMessage::Overflow(op)).into();\n                         let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n                         return None;\n                     }\n@@ -809,7 +807,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n         self.super_terminator(terminator, location);\n         let source_info = terminator.source_info;\n         match &mut terminator.kind {\n-            TerminatorKind::Assert { expected, msg, ref mut cond, .. } => {\n+            TerminatorKind::Assert { expected, ref msg, ref mut cond, .. } => {\n                 if let Some(value) = self.eval_operand(&cond, source_info) {\n                     trace!(\"assertion on {:?} should be {:?}\", value, expected);\n                     let expected = ScalarMaybeUndef::from(Scalar::from_bool(*expected));\n@@ -831,13 +829,13 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                             .hir()\n                             .as_local_hir_id(self.source.def_id())\n                             .expect(\"some part of a failing const eval must be local\");\n-                        use rustc::mir::interpret::InterpError::*;\n                         let msg = match msg {\n-                            Panic(PanicMessage::Overflow(_)) |\n-                            Panic(PanicMessage::OverflowNeg) |\n-                            Panic(PanicMessage::DivisionByZero) |\n-                            Panic(PanicMessage::RemainderByZero) => msg.description().to_owned(),\n-                            Panic(PanicMessage::BoundsCheck { ref len, ref index }) => {\n+                            PanicMessage::Overflow(_) |\n+                            PanicMessage::OverflowNeg |\n+                            PanicMessage::DivisionByZero |\n+                            PanicMessage::RemainderByZero =>\n+                                msg.description().to_owned(),\n+                            PanicMessage::BoundsCheck { ref len, ref index } => {\n                                 let len = self\n                                     .eval_operand(len, source_info)\n                                     .expect(\"len must be const\");"}, {"sha": "5461a2e470c7e62a7e2ebb5d4ee23fb5e83586c5", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -1016,7 +1016,7 @@ fn create_generator_resume_function<'tcx>(\n \n     let mut cases = create_cases(body, &transform, |point| Some(point.resume));\n \n-    use rustc::mir::interpret::InterpError::{\n+    use rustc::mir::interpret::PanicMessage::{\n         GeneratorResumedAfterPanic,\n         GeneratorResumedAfterReturn,\n     };"}, {"sha": "cb83630100a2d97aab65e30b4ec3e2d3c1284750", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 98, "deletions": 30, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -643,13 +643,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn suggest_traits_to_import<'b>(&self,\n-                                    err: &mut DiagnosticBuilder<'_>,\n-                                    span: Span,\n-                                    rcvr_ty: Ty<'tcx>,\n-                                    item_name: ast::Ident,\n-                                    source: SelfSource<'b>,\n-                                    valid_out_of_scope_traits: Vec<DefId>) {\n+    fn suggest_traits_to_import<'b>(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        span: Span,\n+        rcvr_ty: Ty<'tcx>,\n+        item_name: ast::Ident,\n+        source: SelfSource<'b>,\n+        valid_out_of_scope_traits: Vec<DefId>,\n+    ) {\n         if self.suggest_valid_traits(err, valid_out_of_scope_traits) {\n             return;\n         }\n@@ -683,30 +685,96 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             candidates.sort_by(|a, b| a.cmp(b).reverse());\n             candidates.dedup();\n \n-            // FIXME #21673: this help message could be tuned to the case\n-            // of a type parameter: suggest adding a trait bound rather\n-            // than implementing.\n-            err.help(\"items from traits can only be used if the trait is implemented and in scope\");\n-            let mut msg = format!(\"the following {traits_define} an item `{name}`, \\\n-                                   perhaps you need to implement {one_of_them}:\",\n-                                  traits_define = if candidates.len() == 1 {\n-                                      \"trait defines\"\n-                                  } else {\n-                                      \"traits define\"\n-                                  },\n-                                  one_of_them = if candidates.len() == 1 {\n-                                      \"it\"\n-                                  } else {\n-                                      \"one of them\"\n-                                  },\n-                                  name = item_name);\n-\n-            for (i, trait_info) in candidates.iter().enumerate() {\n-                msg.push_str(&format!(\"\\ncandidate #{}: `{}`\",\n-                                      i + 1,\n-                                      self.tcx.def_path_str(trait_info.def_id)));\n+            let param_type = match rcvr_ty.sty {\n+                ty::Param(param) => Some(param),\n+                ty::Ref(_, ty, _) => match ty.sty {\n+                    ty::Param(param) => Some(param),\n+                    _ => None,\n+                }\n+                _ => None,\n+            };\n+            err.help(if param_type.is_some() {\n+                \"items from traits can only be used if the type parameter is bounded by the trait\"\n+            } else {\n+                \"items from traits can only be used if the trait is implemented and in scope\"\n+            });\n+            let mut msg = format!(\n+                \"the following {traits_define} an item `{name}`, perhaps you need to {action} \\\n+                 {one_of_them}:\",\n+                traits_define = if candidates.len() == 1 {\n+                    \"trait defines\"\n+                } else {\n+                    \"traits define\"\n+                },\n+                action = if let Some(param) = param_type {\n+                    format!(\"restrict type parameter `{}` with\", param)\n+                } else {\n+                    \"implement\".to_string()\n+                },\n+                one_of_them = if candidates.len() == 1 {\n+                    \"it\"\n+                } else {\n+                    \"one of them\"\n+                },\n+                name = item_name,\n+            );\n+            // Obtain the span for `param` and use it for a structured suggestion.\n+            let mut suggested = false;\n+            if let (Some(ref param), Some(ref table)) = (param_type, self.in_progress_tables) {\n+                let table = table.borrow();\n+                if let Some(did) = table.local_id_root {\n+                    let generics = self.tcx.generics_of(did);\n+                    let type_param = generics.type_param(param, self.tcx);\n+                    let hir = &self.tcx.hir();\n+                    if let Some(id) = hir.as_local_hir_id(type_param.def_id) {\n+                        // Get the `hir::Param` to verify whether it already has any bounds.\n+                        // We do this to avoid suggesting code that ends up as `T: FooBar`,\n+                        // instead we suggest `T: Foo + Bar` in that case.\n+                        let mut has_bounds = false;\n+                        if let Node::GenericParam(ref param) = hir.get(id) {\n+                            has_bounds = !param.bounds.is_empty();\n+                        }\n+                        let sp = hir.span(id);\n+                        // `sp` only covers `T`, change it so that it covers\n+                        // `T:` when appropriate\n+                        let sp = if has_bounds {\n+                            sp.to(self.tcx\n+                                .sess\n+                                .source_map()\n+                                .next_point(self.tcx.sess.source_map().next_point(sp)))\n+                        } else {\n+                            sp\n+                        };\n+\n+                        // FIXME: contrast `t.def_id` against `param.bounds` to not suggest traits\n+                        // already there. That can happen when the cause is that we're in a const\n+                        // scope or associated function used as a method.\n+                        err.span_suggestions(\n+                            sp,\n+                            &msg[..],\n+                            candidates.iter().map(|t| format!(\n+                                \"{}: {}{}\",\n+                                param,\n+                                self.tcx.def_path_str(t.def_id),\n+                                if has_bounds { \" +\"} else { \"\" },\n+                            )),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        suggested = true;\n+                    }\n+                };\n+            }\n+\n+            if !suggested {\n+                for (i, trait_info) in candidates.iter().enumerate() {\n+                    msg.push_str(&format!(\n+                        \"\\ncandidate #{}: `{}`\",\n+                        i + 1,\n+                        self.tcx.def_path_str(trait_info.def_id),\n+                    ));\n+                }\n+                err.note(&msg[..]);\n             }\n-            err.note(&msg[..]);\n         }\n     }\n "}, {"sha": "30419d3d3c6500ed48811b435e16cde515a4e91b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -1319,7 +1319,7 @@ impl Clean<Option<Lifetime>> for ty::RegionKind {\n             ty::ReEmpty |\n             ty::ReClosureBound(_) |\n             ty::ReErased => {\n-                debug!(\"Cannot clean region {:?}\", self);\n+                debug!(\"cannot clean region {:?}\", self);\n                 None\n             }\n         }\n@@ -4082,7 +4082,7 @@ impl ToSource for syntax_pos::Span {\n \n fn name_from_pat(p: &hir::Pat) -> String {\n     use rustc::hir::*;\n-    debug!(\"Trying to get a name from pattern: {:?}\", p);\n+    debug!(\"trying to get a name from pattern: {:?}\", p);\n \n     match p.node {\n         PatKind::Wild => \"_\".to_string(),"}, {"sha": "ab7b5b2a8537011d9ffe9e4137efce235fa8d86c", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -250,7 +250,7 @@ impl Options {\n             None => ColorConfig::Auto,\n             Some(arg) => {\n                 early_error(ErrorOutputType::default(),\n-                            &format!(\"argument for --color must be `auto`, `always` or `never` \\\n+                            &format!(\"argument for `--color` must be `auto`, `always` or `never` \\\n                                       (instead was `{}`)\", arg));\n             }\n         };\n@@ -269,7 +269,7 @@ impl Options {\n             Some(\"short\") => ErrorOutputType::HumanReadable(HumanReadableErrorType::Short(color)),\n             Some(arg) => {\n                 early_error(ErrorOutputType::default(),\n-                            &format!(\"argument for --error-format must be `human`, `json` or \\\n+                            &format!(\"argument for `--error-format` must be `human`, `json` or \\\n                                       `short` (instead was `{}`)\", arg));\n             }\n         };"}, {"sha": "cc79f4ab09a51ae97ab1784dadf4aaa71ac15765", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -432,7 +432,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                         },\n                         sym::plugins => {\n                             report_deprecated_attr(\"plugins = \\\"...\\\"\", diag);\n-                            eprintln!(\"WARNING: #![doc(plugins = \\\"...\\\")] no longer functions; \\\n+                            eprintln!(\"WARNING: `#![doc(plugins = \\\"...\\\")]` no longer functions; \\\n                                       see CVE-2018-1000622\");\n                             continue\n                         },"}, {"sha": "462e21b8f6b55d7e6da36b69f4d09922d8222ef6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -730,7 +730,7 @@ impl Tester for Collector {\n         let edition = config.edition.unwrap_or(self.edition);\n         let persist_doctests = self.persist_doctests.clone();\n \n-        debug!(\"Creating test {}: {}\", name, test);\n+        debug!(\"creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n                 name: testing::DynTestName(name),"}, {"sha": "4a3743bdf7c281ad3944966dbca35a5dbae110a8", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -96,7 +96,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     pub fn visit_variant_data(&mut self, item: &'tcx hir::Item,\n                               name: ast::Name, sd: &'tcx hir::VariantData,\n                               generics: &'tcx hir::Generics) -> Struct<'tcx> {\n-        debug!(\"Visiting struct\");\n+        debug!(\"visiting struct\");\n         let struct_type = struct_type_from_def(&*sd);\n         Struct {\n             id: item.hir_id,\n@@ -115,7 +115,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     pub fn visit_union_data(&mut self, item: &'tcx hir::Item,\n                             name: ast::Name, sd: &'tcx hir::VariantData,\n                             generics: &'tcx hir::Generics) -> Union<'tcx> {\n-        debug!(\"Visiting union\");\n+        debug!(\"visiting union\");\n         let struct_type = struct_type_from_def(&*sd);\n         Union {\n             id: item.hir_id,\n@@ -134,7 +134,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     pub fn visit_enum_def(&mut self, it: &'tcx hir::Item,\n                           name: ast::Name, def: &'tcx hir::EnumDef,\n                           generics: &'tcx hir::Generics) -> Enum<'tcx> {\n-        debug!(\"Visiting enum\");\n+        debug!(\"visiting enum\");\n         Enum {\n             name,\n             variants: def.variants.iter().map(|v| Variant {\n@@ -161,7 +161,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     header: hir::FnHeader,\n                     generics: &'tcx hir::Generics,\n                     body: hir::BodyId) {\n-        debug!(\"Visiting fn\");\n+        debug!(\"visiting fn\");\n         let macro_kind = item.attrs.iter().filter_map(|a| {\n             if a.check_name(sym::proc_macro) {\n                 Some(MacroKind::Bang)\n@@ -371,7 +371,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     pub fn visit_item(&mut self, item: &'tcx hir::Item,\n                       renamed: Option<ast::Ident>, om: &mut Module<'tcx>) {\n-        debug!(\"Visiting item {:?}\", item);\n+        debug!(\"visiting item {:?}\", item);\n         let ident = renamed.unwrap_or(item.ident);\n \n         if item.vis.node.is_pub() {"}, {"sha": "fbc68c610ee39beb023b1b8129855364c88865ce", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -273,6 +273,7 @@\n #![feature(link_args)]\n #![feature(linkage)]\n #![feature(maybe_uninit_ref)]\n+#![feature(maybe_uninit_slice)]\n #![feature(mem_take)]\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]"}, {"sha": "9addba8b6118e3d8d28541813190bd61f7668ad5", "filename": "src/libstd/sys/cloudabi/abi/cloudabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -1884,7 +1884,7 @@ pub unsafe fn clock_res_get(clock_id_: clockid, resolution_: &mut timestamp) ->\n /// **time**:\n /// The time value of the clock.\n #[inline]\n-pub unsafe fn clock_time_get(clock_id_: clockid, precision_: timestamp, time_: &mut timestamp) -> errno {\n+pub unsafe fn clock_time_get(clock_id_: clockid, precision_: timestamp, time_: *mut timestamp) -> errno {\n   cloudabi_sys_clock_time_get(clock_id_, precision_, time_)\n }\n \n@@ -2643,7 +2643,7 @@ pub unsafe fn mem_unmap(mapping_: &mut [u8]) -> errno {\n /// **nevents**:\n /// The number of events stored.\n #[inline]\n-pub unsafe fn poll(in_: *const subscription, out_: *mut event, nsubscriptions_: usize, nevents_: &mut usize) -> errno {\n+pub unsafe fn poll(in_: *const subscription, out_: *mut event, nsubscriptions_: usize, nevents_: *mut usize) -> errno {\n   cloudabi_sys_poll(in_, out_, nsubscriptions_, nevents_)\n }\n "}, {"sha": "ec1fca7805a17a73cea46af41862a26dec227dbb", "filename": "src/libstd/sys/cloudabi/condvar.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -79,16 +79,21 @@ impl Condvar {\n             },\n             ..mem::zeroed()\n         };\n-        let mut event: abi::event = mem::uninitialized();\n-        let mut nevents: usize = mem::uninitialized();\n-        let ret = abi::poll(&subscription, &mut event, 1, &mut nevents);\n+        let mut event: mem::MaybeUninit<abi::event> = mem::MaybeUninit::uninit();\n+        let mut nevents: mem::MaybeUninit<usize> = mem::MaybeUninit::uninit();\n+        let ret = abi::poll(\n+            &subscription,\n+            event.as_mut_ptr(),\n+            1,\n+            nevents.as_mut_ptr()\n+        );\n         assert_eq!(\n             ret,\n             abi::errno::SUCCESS,\n             \"Failed to wait on condition variable\"\n         );\n         assert_eq!(\n-            event.error,\n+            event.assume_init().error,\n             abi::errno::SUCCESS,\n             \"Failed to wait on condition variable\"\n         );\n@@ -131,21 +136,27 @@ impl Condvar {\n                 ..mem::zeroed()\n             },\n         ];\n-        let mut events: [abi::event; 2] = mem::uninitialized();\n-        let mut nevents: usize = mem::uninitialized();\n-        let ret = abi::poll(subscriptions.as_ptr(), events.as_mut_ptr(), 2, &mut nevents);\n+        let mut events: [mem::MaybeUninit<abi::event>; 2] = [mem::MaybeUninit::uninit(); 2];\n+        let mut nevents: mem::MaybeUninit<usize> = mem::MaybeUninit::uninit();\n+        let ret = abi::poll(\n+            subscriptions.as_ptr(),\n+            mem::MaybeUninit::first_ptr_mut(&mut events),\n+            2,\n+            nevents.as_mut_ptr()\n+        );\n         assert_eq!(\n             ret,\n             abi::errno::SUCCESS,\n             \"Failed to wait on condition variable\"\n         );\n+        let nevents = nevents.assume_init();\n         for i in 0..nevents {\n             assert_eq!(\n-                events[i].error,\n+                events[i].assume_init().error,\n                 abi::errno::SUCCESS,\n                 \"Failed to wait on condition variable\"\n             );\n-            if events[i].type_ == abi::eventtype::CONDVAR {\n+            if events[i].assume_init().type_ == abi::eventtype::CONDVAR {\n                 return true;\n             }\n         }"}, {"sha": "6e147612eb4b7b41a44501987019c8566235bbd3", "filename": "src/libstd/sys/cloudabi/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -61,8 +61,11 @@ pub use libc::strlen;\n \n pub fn hashmap_random_keys() -> (u64, u64) {\n     unsafe {\n-        let mut v = mem::uninitialized();\n-        libc::arc4random_buf(&mut v as *mut _ as *mut libc::c_void, mem::size_of_val(&v));\n-        v\n+        let mut v: mem::MaybeUninit<(u64, u64)> = mem::MaybeUninit::uninit();\n+        libc::arc4random_buf(\n+            v.as_mut_ptr() as *mut libc::c_void,\n+            mem::size_of_val(&v)\n+        );\n+        v.assume_init()\n     }\n }"}, {"sha": "d3ff0077b20e53ea6af8a5f1535090edcd3f17e6", "filename": "src/libstd/sys/cloudabi/mutex.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibstd%2Fsys%2Fcloudabi%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibstd%2Fsys%2Fcloudabi%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmutex.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -1,5 +1,6 @@\n use crate::cell::UnsafeCell;\n use crate::mem;\n+use crate::mem::MaybeUninit;\n use crate::sync::atomic::{AtomicU32, Ordering};\n use crate::sys::cloudabi::abi;\n use crate::sys::rwlock::{self, RWLock};\n@@ -47,24 +48,27 @@ impl Mutex {\n }\n \n pub struct ReentrantMutex {\n-    lock: UnsafeCell<AtomicU32>,\n-    recursion: UnsafeCell<u32>,\n+    lock: UnsafeCell<MaybeUninit<AtomicU32>>,\n+    recursion: UnsafeCell<MaybeUninit<u32>>,\n }\n \n impl ReentrantMutex {\n     pub unsafe fn uninitialized() -> ReentrantMutex {\n-        mem::uninitialized()\n+        ReentrantMutex {\n+            lock: UnsafeCell::new(MaybeUninit::uninit()),\n+            recursion: UnsafeCell::new(MaybeUninit::uninit())\n+        }\n     }\n \n     pub unsafe fn init(&mut self) {\n-        self.lock = UnsafeCell::new(AtomicU32::new(abi::LOCK_UNLOCKED.0));\n-        self.recursion = UnsafeCell::new(0);\n+        self.lock = UnsafeCell::new(MaybeUninit::new(AtomicU32::new(abi::LOCK_UNLOCKED.0)));\n+        self.recursion = UnsafeCell::new(MaybeUninit::new(0));\n     }\n \n     pub unsafe fn try_lock(&self) -> bool {\n         // Attempt to acquire the lock.\n-        let lock = self.lock.get();\n-        let recursion = self.recursion.get();\n+        let lock = (*self.lock.get()).as_mut_ptr();\n+        let recursion = (*self.recursion.get()).as_mut_ptr();\n         if let Err(old) = (*lock).compare_exchange(\n             abi::LOCK_UNLOCKED.0,\n             __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n@@ -109,8 +113,8 @@ impl ReentrantMutex {\n     }\n \n     pub unsafe fn unlock(&self) {\n-        let lock = self.lock.get();\n-        let recursion = self.recursion.get();\n+        let lock = (*self.lock.get()).as_mut_ptr();\n+        let recursion = (*self.recursion.get()).as_mut_ptr();\n         assert_eq!(\n             (*lock).load(Ordering::Relaxed) & !abi::LOCK_KERNEL_MANAGED.0,\n             __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n@@ -136,8 +140,8 @@ impl ReentrantMutex {\n     }\n \n     pub unsafe fn destroy(&self) {\n-        let lock = self.lock.get();\n-        let recursion = self.recursion.get();\n+        let lock = (*self.lock.get()).as_mut_ptr();\n+        let recursion = (*self.recursion.get()).as_mut_ptr();\n         assert_eq!(\n             (*lock).load(Ordering::Relaxed),\n             abi::LOCK_UNLOCKED.0,"}, {"sha": "5e502dcb2ba5092fa65517fa8ef6047f334b4fe1", "filename": "src/libstd/sys/cloudabi/time.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -18,10 +18,10 @@ pub fn checked_dur2intervals(dur: &Duration) -> Option<abi::timestamp> {\n impl Instant {\n     pub fn now() -> Instant {\n         unsafe {\n-            let mut t = mem::uninitialized();\n-            let ret = abi::clock_time_get(abi::clockid::MONOTONIC, 0, &mut t);\n+            let mut t: mem::MaybeUninit<abi::timestamp> = mem::MaybeUninit::uninit();\n+            let ret = abi::clock_time_get(abi::clockid::MONOTONIC, 0, t.as_mut_ptr());\n             assert_eq!(ret, abi::errno::SUCCESS);\n-            Instant { t }\n+            Instant { t: t.assume_init() }\n         }\n     }\n \n@@ -59,10 +59,10 @@ pub struct SystemTime {\n impl SystemTime {\n     pub fn now() -> SystemTime {\n         unsafe {\n-            let mut t = mem::uninitialized();\n-            let ret = abi::clock_time_get(abi::clockid::REALTIME, 0, &mut t);\n+            let mut t: mem::MaybeUninit<abi::timestamp> = mem::MaybeUninit::uninit();\n+            let ret = abi::clock_time_get(abi::clockid::REALTIME, 0, t.as_mut_ptr());\n             assert_eq!(ret, abi::errno::SUCCESS);\n-            SystemTime { t }\n+            SystemTime { t: t.assume_init() }\n         }\n     }\n "}, {"sha": "7be21ff9029a541c8bb9d68654657a1912db702f", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -30,7 +30,7 @@ use std::iter;\n use std::ops::DerefMut;\n \n pub fn mark_used(attr: &Attribute) {\n-    debug!(\"Marking {:?} as used.\", attr);\n+    debug!(\"marking {:?} as used\", attr);\n     GLOBALS.with(|globals| {\n         globals.used_attrs.lock().insert(attr.id);\n     });\n@@ -43,7 +43,7 @@ pub fn is_used(attr: &Attribute) -> bool {\n }\n \n pub fn mark_known(attr: &Attribute) {\n-    debug!(\"Marking {:?} as known.\", attr);\n+    debug!(\"marking {:?} as known\", attr);\n     GLOBALS.with(|globals| {\n         globals.known_attrs.lock().insert(attr.id);\n     });"}, {"sha": "029ce73498c68881d71a87aa8f59e8e3b14156eb", "filename": "src/libsyntax/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibsyntax%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibsyntax%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferror_codes.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -182,7 +182,7 @@ beta compilers will not comply.\n Example of erroneous code (on a stable compiler):\n \n ```ignore (depends on release channel)\n-#![feature(non_ascii_idents)] // error: #![feature] may not be used on the\n+#![feature(non_ascii_idents)] // error: `#![feature]` may not be used on the\n                               //        stable release channel\n ```\n "}, {"sha": "14d573d07d0af8848b2a730ff28c0e4556328c04", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -602,7 +602,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             None => return TokenStream::empty(),\n         }\n         self.cx.span_err(span, \"custom attribute invocations must be \\\n-            of the form #[foo] or #[foo(..)], the macro name must only be \\\n+            of the form `#[foo]` or `#[foo(..)]`, the macro name must only be \\\n             followed by a delimiter token\");\n         TokenStream::empty()\n     }"}, {"sha": "7eee07e61a95df234151ad5ac728e388be5f328b", "filename": "src/libsyntax/parse/unescape_error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibsyntax%2Fparse%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibsyntax%2Fparse%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Funescape_error_reporting.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -190,7 +190,7 @@ pub(crate) fn emit_unescape_error(\n             handler.span_err(span, \"empty character literal\")\n         }\n         EscapeError::LoneSlash => {\n-            panic!(\"lexer accepted unterminated literal with trailing slash\")\n+            handler.span_err(span, \"invalid trailing slash in literal\")\n         }\n     }\n }"}, {"sha": "2ada710484347b021967f973e868851658eb1cb9", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -414,7 +414,7 @@ fn get_test_runner(sd: &errors::Handler, krate: &ast::Crate) -> Option<ast::Path\n     test_attr.meta_item_list().map(|meta_list| {\n         if meta_list.len() != 1 {\n             sd.span_fatal(test_attr.span,\n-                \"#![test_runner(..)] accepts exactly 1 argument\").raise()\n+                \"`#![test_runner(..)]` accepts exactly 1 argument\").raise()\n         }\n         match meta_list[0].meta_item() {\n             Some(meta_item) if meta_item.is_word() => meta_item.path.clone(),"}, {"sha": "b945b5e665459fd626e4d8fe6a9230a27c756a4e", "filename": "src/test/ui/issues/issue-39559.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -4,9 +4,11 @@ error[E0599]: no function or associated item named `dim` found for type `D` in t\n LL |     entries: [T; D::dim()],\n    |                     ^^^ function or associated item not found in `D`\n    |\n-   = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `dim`, perhaps you need to implement it:\n-           candidate #1: `Dim`\n+   = help: items from traits can only be used if the type parameter is bounded by the trait\n+help: the following trait defines an item `dim`, perhaps you need to restrict type parameter `D` with it:\n+   |\n+LL | pub struct Vector<T, D: Dim + Dim> {\n+   |                      ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "cfa19a2a310a279b3712c8baf6643d7107a5ac9f", "filename": "src/test/ui/parser/issue-62913.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Fparser%2Fissue-62913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Fparser%2Fissue-62913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62913.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -0,0 +1,3 @@\n+\"\\u\\\\\"\n+//~^ ERROR incorrect unicode escape sequence\n+//~| ERROR invalid trailing slash in literal"}, {"sha": "05c5c4d000a864f31b14af4c515aa6de859d6a72", "filename": "src/test/ui/parser/issue-62913.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Fparser%2Fissue-62913.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Fparser%2Fissue-62913.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62913.stderr?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -0,0 +1,16 @@\n+error: incorrect unicode escape sequence\n+  --> $DIR/issue-62913.rs:1:2\n+   |\n+LL | \"\\u\\\"\n+   |  ^^^ incorrect unicode escape sequence\n+   |\n+   = help: format of unicode escape sequences is `\\u{...}`\n+\n+error: invalid trailing slash in literal\n+  --> $DIR/issue-62913.rs:1:5\n+   |\n+LL | \"\\u\\\"\n+   |     ^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "8462b564ec1d7b2588458fb52bf209608757fa78", "filename": "src/test/ui/proc-macro/proc-macro-gates.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -34,7 +34,7 @@ LL |     #![empty_attr]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n-error: custom attribute invocations must be of the form #[foo] or #[foo(..)], the macro name must only be followed by a delimiter token\n+error: custom attribute invocations must be of the form `#[foo]` or `#[foo(..)]`, the macro name must only be followed by a delimiter token\n   --> $DIR/proc-macro-gates.rs:21:1\n    |\n LL | #[empty_attr = \"y\"]"}, {"sha": "36db5bea8629489ffd456e22c947a2ef0a4e6a44", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -61,9 +61,11 @@ note: the candidate is defined in the trait `ManyImplTrait`\n LL |     fn is_str() -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `ManyImplTrait::is_str(t)` instead\n-   = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following trait defines an item `is_str`, perhaps you need to implement it:\n-           candidate #1: `ManyImplTrait`\n+   = help: items from traits can only be used if the type parameter is bounded by the trait\n+help: the following trait defines an item `is_str`, perhaps you need to restrict type parameter `T` with it:\n+   |\n+LL | fn param_bound<T: ManyImplTrait + ManyImplTrait>(t: T) -> bool {\n+   |                ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9d66cae056a81187de56596e02eb115cf2c0549c", "filename": "src/test/ui/suggestions/issue-21673.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Fsuggestions%2Fissue-21673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Fsuggestions%2Fissue-21673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-21673.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -0,0 +1,13 @@\n+trait Foo {\n+    fn method(&self) {}\n+}\n+\n+fn call_method<T: std::fmt::Debug>(x: &T) {\n+    x.method() //~ ERROR E0599\n+}\n+\n+fn call_method_2<T>(x: T) {\n+    x.method() //~ ERROR E0599\n+}\n+\n+fn main() {}"}, {"sha": "6cf71c8b7c53b7e13af1ae8eb07de5d32991ceac", "filename": "src/test/ui/suggestions/issue-21673.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Fsuggestions%2Fissue-21673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Fsuggestions%2Fissue-21673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-21673.stderr?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -0,0 +1,27 @@\n+error[E0599]: no method named `method` found for type `&T` in the current scope\n+  --> $DIR/issue-21673.rs:6:7\n+   |\n+LL |     x.method()\n+   |       ^^^^^^\n+   |\n+   = help: items from traits can only be used if the type parameter is bounded by the trait\n+help: the following trait defines an item `method`, perhaps you need to restrict type parameter `T` with it:\n+   |\n+LL | fn call_method<T: Foo + std::fmt::Debug>(x: &T) {\n+   |                ^^^^^^^^\n+\n+error[E0599]: no method named `method` found for type `T` in the current scope\n+  --> $DIR/issue-21673.rs:10:7\n+   |\n+LL |     x.method()\n+   |       ^^^^^^\n+   |\n+   = help: items from traits can only be used if the type parameter is bounded by the trait\n+help: the following trait defines an item `method`, perhaps you need to restrict type parameter `T` with it:\n+   |\n+LL | fn call_method_2<T: Foo>(x: T) {\n+   |                  ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "63b21faa62bd2ce0486cad546d4299ec5a6f6a88", "filename": "src/test/ui/type-alias-enum-variants/self-in-enum-definition.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.rs?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -0,0 +1,8 @@\n+#[repr(u8)]\n+enum Alpha {\n+    V1 = 41,\n+    V2 = Self::V1 as u8 + 1, // OK; See #50072.\n+    V3 = Self::V1 {} as u8 + 2, //~ ERROR cycle detected when const-evaluating\n+}\n+\n+fn main() {}"}, {"sha": "dc4050e44abb1d5b297fde2568f62146b88c5e70", "filename": "src/test/ui/type-alias-enum-variants/self-in-enum-definition.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03f19f7ff128a3b01eeab3f87f04cce22883f006/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr?ref=03f19f7ff128a3b01eeab3f87f04cce22883f006", "patch": "@@ -0,0 +1,28 @@\n+error[E0391]: cycle detected when const-evaluating + checking `Alpha::V3::{{constant}}#0`\n+  --> $DIR/self-in-enum-definition.rs:5:10\n+   |\n+LL |     V3 = Self::V1 {} as u8 + 2,\n+   |          ^^^^^^^^\n+   |\n+note: ...which requires const-evaluating `Alpha::V3::{{constant}}#0`...\n+  --> $DIR/self-in-enum-definition.rs:5:10\n+   |\n+LL |     V3 = Self::V1 {} as u8 + 2,\n+   |          ^^^^^^^^\n+   = note: ...which requires computing layout of `Alpha`...\n+   = note: ...which again requires const-evaluating + checking `Alpha::V3::{{constant}}#0`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/self-in-enum-definition.rs:1:1\n+   |\n+LL | / #[repr(u8)]\n+LL | | enum Alpha {\n+LL | |     V1 = 41,\n+LL | |     V2 = Self::V1 as u8 + 1, // OK; See #50072.\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}]}