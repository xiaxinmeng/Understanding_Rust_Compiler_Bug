{"sha": "7f522155ddab6437ff472f3563cb42376df056ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNTIyMTU1ZGRhYjY0MzdmZjQ3MmYzNTYzY2I0MjM3NmRmMDU2Y2U=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T15:48:09Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T18:24:43Z"}, "message": "lowering: move {lower_arm,arm}  -> expr.rs", "tree": {"sha": "31f8fc344d38155cee758c7f7d15fd93b55eca4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31f8fc344d38155cee758c7f7d15fd93b55eca4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f522155ddab6437ff472f3563cb42376df056ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f522155ddab6437ff472f3563cb42376df056ce", "html_url": "https://github.com/rust-lang/rust/commit/7f522155ddab6437ff472f3563cb42376df056ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f522155ddab6437ff472f3563cb42376df056ce/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93570b02bdf0f4f21ed07865a6acce333134ef5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/93570b02bdf0f4f21ed07865a6acce333134ef5b", "html_url": "https://github.com/rust-lang/rust/commit/93570b02bdf0f4f21ed07865a6acce333134ef5b"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "bf3a24de81b358e9ed946715e4cf39d1094ea86f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7f522155ddab6437ff472f3563cb42376df056ce/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f522155ddab6437ff472f3563cb42376df056ce/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7f522155ddab6437ff472f3563cb42376df056ce", "patch": "@@ -1316,20 +1316,6 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_arm(&mut self, arm: &Arm) -> hir::Arm {\n-        hir::Arm {\n-            hir_id: self.next_id(),\n-            attrs: self.lower_attrs(&arm.attrs),\n-            pats: arm.pats.iter().map(|x| self.lower_pat(x)).collect(),\n-            guard: match arm.guard {\n-                Some(ref x) => Some(hir::Guard::If(P(self.lower_expr(x)))),\n-                _ => None,\n-            },\n-            body: P(self.lower_expr(&arm.body)),\n-            span: arm.span,\n-        }\n-    }\n-\n     /// Given an associated type constraint like one of these:\n     ///\n     /// ```\n@@ -4472,17 +4458,6 @@ impl<'a> LoweringContext<'a> {\n \n     // Helper methods for building HIR.\n \n-    fn arm(&mut self, pats: hir::HirVec<P<hir::Pat>>, expr: P<hir::Expr>) -> hir::Arm {\n-        hir::Arm {\n-            hir_id: self.next_id(),\n-            attrs: hir_vec![],\n-            pats,\n-            guard: None,\n-            span: expr.span,\n-            body: expr,\n-        }\n-    }\n-\n     fn stmt(&mut self, span: Span, node: hir::StmtKind) -> hir::Stmt {\n         hir::Stmt { span, node, hir_id: self.next_id() }\n     }"}, {"sha": "c76d714ffb4c9eeb43847df463fdc80f6d4ed024", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7f522155ddab6437ff472f3563cb42376df056ce/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f522155ddab6437ff472f3563cb42376df056ce/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=7f522155ddab6437ff472f3563cb42376df056ce", "patch": "@@ -436,6 +436,20 @@ impl LoweringContext<'_> {\n         P(self.expr_call(e.span, from_err, hir_vec![e]))\n     }\n \n+    fn lower_arm(&mut self, arm: &Arm) -> hir::Arm {\n+        hir::Arm {\n+            hir_id: self.next_id(),\n+            attrs: self.lower_attrs(&arm.attrs),\n+            pats: arm.pats.iter().map(|x| self.lower_pat(x)).collect(),\n+            guard: match arm.guard {\n+                Some(ref x) => Some(hir::Guard::If(P(self.lower_expr(x)))),\n+                _ => None,\n+            },\n+            body: P(self.lower_expr(&arm.body)),\n+            span: arm.span,\n+        }\n+    }\n+\n     pub(super) fn make_async_expr(\n         &mut self,\n         capture_clause: CaptureBy,\n@@ -1180,6 +1194,10 @@ impl LoweringContext<'_> {\n         )\n     }\n \n+    // =========================================================================\n+    // Helper methods for building HIR.\n+    // =========================================================================\n+\n     /// Constructs a `true` or `false` literal expression.\n     pub(super) fn expr_bool(&mut self, span: Span, val: bool) -> hir::Expr {\n         let lit = Spanned { span, node: LitKind::Bool(val) };\n@@ -1360,4 +1378,15 @@ impl LoweringContext<'_> {\n             is_shorthand: false,\n         }\n     }\n+\n+    fn arm(&mut self, pats: hir::HirVec<P<hir::Pat>>, expr: P<hir::Expr>) -> hir::Arm {\n+        hir::Arm {\n+            hir_id: self.next_id(),\n+            attrs: hir_vec![],\n+            pats,\n+            guard: None,\n+            span: expr.span,\n+            body: expr,\n+        }\n+    }\n }"}]}