{"sha": "5ba236f3039241077302fddd7acb671e62195af6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYTIzNmYzMDM5MjQxMDc3MzAyZmRkZDdhY2I2NzFlNjIxOTVhZjY=", "commit": {"author": {"name": "Arya Kumar", "email": "arkumar@umich.edu", "date": "2021-05-11T19:34:14Z"}, "committer": {"name": "Arya Kumar", "email": "arkumar@umich.edu", "date": "2021-05-11T19:34:14Z"}, "message": "added `needless_bitwise_bool` lint", "tree": {"sha": "b62aa9e910bb7b5fbaf6f4083072c41ab0011e45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b62aa9e910bb7b5fbaf6f4083072c41ab0011e45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ba236f3039241077302fddd7acb671e62195af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba236f3039241077302fddd7acb671e62195af6", "html_url": "https://github.com/rust-lang/rust/commit/5ba236f3039241077302fddd7acb671e62195af6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ba236f3039241077302fddd7acb671e62195af6/comments", "author": {"login": "arya-k", "id": 42588178, "node_id": "MDQ6VXNlcjQyNTg4MTc4", "avatar_url": "https://avatars.githubusercontent.com/u/42588178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arya-k", "html_url": "https://github.com/arya-k", "followers_url": "https://api.github.com/users/arya-k/followers", "following_url": "https://api.github.com/users/arya-k/following{/other_user}", "gists_url": "https://api.github.com/users/arya-k/gists{/gist_id}", "starred_url": "https://api.github.com/users/arya-k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arya-k/subscriptions", "organizations_url": "https://api.github.com/users/arya-k/orgs", "repos_url": "https://api.github.com/users/arya-k/repos", "events_url": "https://api.github.com/users/arya-k/events{/privacy}", "received_events_url": "https://api.github.com/users/arya-k/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arya-k", "id": 42588178, "node_id": "MDQ6VXNlcjQyNTg4MTc4", "avatar_url": "https://avatars.githubusercontent.com/u/42588178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arya-k", "html_url": "https://github.com/arya-k", "followers_url": "https://api.github.com/users/arya-k/followers", "following_url": "https://api.github.com/users/arya-k/following{/other_user}", "gists_url": "https://api.github.com/users/arya-k/gists{/gist_id}", "starred_url": "https://api.github.com/users/arya-k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arya-k/subscriptions", "organizations_url": "https://api.github.com/users/arya-k/orgs", "repos_url": "https://api.github.com/users/arya-k/repos", "events_url": "https://api.github.com/users/arya-k/events{/privacy}", "received_events_url": "https://api.github.com/users/arya-k/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d4e24e73b28b33504df8daf1717e495f84fac40", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d4e24e73b28b33504df8daf1717e495f84fac40", "html_url": "https://github.com/rust-lang/rust/commit/0d4e24e73b28b33504df8daf1717e495f84fac40"}], "stats": {"total": 179, "additions": 179, "deletions": 0}, "files": [{"sha": "3645f27427d06180a4117c74782be000f45fa62a", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ba236f3039241077302fddd7acb671e62195af6/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5ba236f3039241077302fddd7acb671e62195af6/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5ba236f3039241077302fddd7acb671e62195af6", "patch": "@@ -2549,6 +2549,7 @@ Released 2018-09-13\n [`mutex_integer`]: https://rust-lang.github.io/rust-clippy/master/index.html#mutex_integer\n [`naive_bytecount`]: https://rust-lang.github.io/rust-clippy/master/index.html#naive_bytecount\n [`needless_arbitrary_self_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_arbitrary_self_type\n+[`needless_bitwise_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_bitwise_bool\n [`needless_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool\n [`needless_borrow`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n [`needless_borrowed_reference`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference"}, {"sha": "5b5fc45277102739e1063de853b44d5d9f19833c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ba236f3039241077302fddd7acb671e62195af6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba236f3039241077302fddd7acb671e62195af6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5ba236f3039241077302fddd7acb671e62195af6", "patch": "@@ -288,6 +288,7 @@ mod mut_reference;\n mod mutable_debug_assertion;\n mod mutex_atomic;\n mod needless_arbitrary_self_type;\n+mod needless_bitwise_bool;\n mod needless_bool;\n mod needless_borrow;\n mod needless_borrowed_ref;\n@@ -833,6 +834,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         mutex_atomic::MUTEX_ATOMIC,\n         mutex_atomic::MUTEX_INTEGER,\n         needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE,\n+        needless_bitwise_bool::NEEDLESS_BITWISE_BOOL,\n         needless_bool::BOOL_COMPARISON,\n         needless_bool::NEEDLESS_BOOL,\n         needless_borrow::NEEDLESS_BORROW,\n@@ -1018,6 +1020,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let type_complexity_threshold = conf.type_complexity_threshold;\n     store.register_late_pass(move || box types::Types::new(vec_box_size_threshold, type_complexity_threshold));\n     store.register_late_pass(|| box booleans::NonminimalBool);\n+    store.register_late_pass(|| box needless_bitwise_bool::NeedlessBitwiseBool);\n     store.register_late_pass(|| box eq_op::EqOp);\n     store.register_late_pass(|| box enum_clike::UnportableVariant);\n     store.register_late_pass(|| box float_literal::FloatLiteral);\n@@ -1392,6 +1395,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(misc::USED_UNDERSCORE_BINDING),\n         LintId::of(misc_early::UNSEPARATED_LITERAL_SUFFIX),\n         LintId::of(mut_mut::MUT_MUT),\n+        LintId::of(needless_bitwise_bool::NEEDLESS_BITWISE_BOOL),\n         LintId::of(needless_continue::NEEDLESS_CONTINUE),\n         LintId::of(needless_for_each::NEEDLESS_FOR_EACH),\n         LintId::of(needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),"}, {"sha": "95febf4a2ad20e099ca7263c6c31cc29fba2ea38", "filename": "clippy_lints/src/needless_bitwise_bool.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/5ba236f3039241077302fddd7acb671e62195af6/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba236f3039241077302fddd7acb671e62195af6/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs?ref=5ba236f3039241077302fddd7acb671e62195af6", "patch": "@@ -0,0 +1,84 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::in_macro;\n+use clippy_utils::source::snippet_opt;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:**\n+    /// Checks for uses of bitwise and/or operators between booleans, where performance may be improved by using\n+    /// a lazy and.\n+    ///\n+    /// **Why is this bad?**\n+    /// The bitwise operators do not support short-circuiting, so it may hinder code performance.\n+    /// Additionally, boolean logic \"masked\" as bitwise logic is not caught by lints like `unnecessary_fold`\n+    ///\n+    /// **Known problems:**\n+    /// This lint evaluates only when the right side is determined to have no side effects. At this time, that\n+    /// determination is quite conservative.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// if x & !y {} // where both x and y are booleans\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// if x && !y {}\n+    /// ```\n+    pub NEEDLESS_BITWISE_BOOL,\n+    pedantic,\n+    \"Boolean expressions that use bitwise rather than lazy operators\"\n+}\n+\n+declare_lint_pass!(NeedlessBitwiseBool => [NEEDLESS_BITWISE_BOOL]);\n+\n+fn is_bitwise_operation(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    let ty = cx.typeck_results().expr_ty(expr);\n+    if_chain! {\n+        if !in_macro(expr.span);\n+        if let (&ExprKind::Binary(ref op, _, right), &ty::Bool) = (&expr.kind, &ty.kind());\n+        if op.node == BinOpKind::BitAnd || op.node == BinOpKind::BitOr;\n+        if let ExprKind::Call(..) | ExprKind::MethodCall(..) | ExprKind::Binary(..) | ExprKind::Unary(..) = right.kind;\n+        if !right.can_have_side_effects();\n+        then {\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n+fn suggession_snippet(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n+    if let ExprKind::Binary(ref op, left, right) = expr.kind {\n+        if let (Some(l_snippet), Some(r_snippet)) = (snippet_opt(cx, left.span), snippet_opt(cx, right.span)) {\n+            let op_snippet = match op.node {\n+                BinOpKind::BitAnd => \"&&\",\n+                _ => \"||\",\n+            };\n+            return Some(format!(\"{} {} {}\", l_snippet, op_snippet, r_snippet));\n+        }\n+    }\n+    None\n+}\n+\n+impl LateLintPass<'_> for NeedlessBitwiseBool {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if is_bitwise_operation(cx, expr) {\n+            span_lint_and_then(\n+                cx,\n+                NEEDLESS_BITWISE_BOOL,\n+                expr.span,\n+                \"use of bitwise operator instead of lazy operator between booleans\",\n+                |diag| {\n+                    if let Some(sugg) = suggession_snippet(cx, expr) {\n+                        diag.span_suggestion(expr.span, \"try\", sugg, Applicability::MachineApplicable);\n+                    }\n+                },\n+            );\n+        }\n+    }\n+}"}, {"sha": "5e1ea663a1077b8a5a69e4b5d1281dc5c6bac500", "filename": "tests/ui/needless_bitwise_bool.fixed", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5ba236f3039241077302fddd7acb671e62195af6/tests%2Fui%2Fneedless_bitwise_bool.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5ba236f3039241077302fddd7acb671e62195af6/tests%2Fui%2Fneedless_bitwise_bool.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bitwise_bool.fixed?ref=5ba236f3039241077302fddd7acb671e62195af6", "patch": "@@ -0,0 +1,40 @@\n+// run-rustfix\n+\n+#![warn(clippy::needless_bitwise_bool)]\n+\n+fn returns_bool() -> bool {\n+    true\n+}\n+\n+const fn const_returns_bool() -> bool {\n+    false\n+}\n+\n+fn main() {\n+    let (x, y) = (false, true);\n+    if x & y {\n+        println!(\"true\")\n+    }\n+    if returns_bool() & x {\n+        println!(\"true\")\n+    }\n+    if !returns_bool() & returns_bool() {\n+        println!(\"true\")\n+    }\n+    if y && !x {\n+        println!(\"true\")\n+    }\n+\n+    // BELOW: lints we hope to catch as `Expr::can_have_side_effects` improves.\n+    if y & !const_returns_bool() {\n+        println!(\"true\") // This is a const function, in an UnOp\n+    }\n+\n+    if y & \"abcD\".is_empty() {\n+        println!(\"true\") // This is a const method call\n+    }\n+\n+    if y & (0 < 1) {\n+        println!(\"true\") // This is a BinOp with no side effects\n+    }\n+}"}, {"sha": "f3075fba0a2d6b1468bd08ce13dac922e0390d34", "filename": "tests/ui/needless_bitwise_bool.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5ba236f3039241077302fddd7acb671e62195af6/tests%2Fui%2Fneedless_bitwise_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba236f3039241077302fddd7acb671e62195af6/tests%2Fui%2Fneedless_bitwise_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bitwise_bool.rs?ref=5ba236f3039241077302fddd7acb671e62195af6", "patch": "@@ -0,0 +1,40 @@\n+// run-rustfix\n+\n+#![warn(clippy::needless_bitwise_bool)]\n+\n+fn returns_bool() -> bool {\n+    true\n+}\n+\n+const fn const_returns_bool() -> bool {\n+    false\n+}\n+\n+fn main() {\n+    let (x, y) = (false, true);\n+    if x & y {\n+        println!(\"true\")\n+    }\n+    if returns_bool() & x {\n+        println!(\"true\")\n+    }\n+    if !returns_bool() & returns_bool() {\n+        println!(\"true\")\n+    }\n+    if y & !x {\n+        println!(\"true\")\n+    }\n+\n+    // BELOW: lints we hope to catch as `Expr::can_have_side_effects` improves.\n+    if y & !const_returns_bool() {\n+        println!(\"true\") // This is a const function, in an UnOp\n+    }\n+\n+    if y & \"abcD\".is_empty() {\n+        println!(\"true\") // This is a const method call\n+    }\n+\n+    if y & (0 < 1) {\n+        println!(\"true\") // This is a BinOp with no side effects\n+    }\n+}"}, {"sha": "63c88ef63f52fc7ce871cd284e12245889492540", "filename": "tests/ui/needless_bitwise_bool.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ba236f3039241077302fddd7acb671e62195af6/tests%2Fui%2Fneedless_bitwise_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba236f3039241077302fddd7acb671e62195af6/tests%2Fui%2Fneedless_bitwise_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bitwise_bool.stderr?ref=5ba236f3039241077302fddd7acb671e62195af6", "patch": "@@ -0,0 +1,10 @@\n+error: use of bitwise operator instead of lazy operator between booleans\n+  --> $DIR/needless_bitwise_bool.rs:24:8\n+   |\n+LL |     if y & !x {\n+   |        ^^^^^^ help: try: `y && !x`\n+   |\n+   = note: `-D clippy::needless-bitwise-bool` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}