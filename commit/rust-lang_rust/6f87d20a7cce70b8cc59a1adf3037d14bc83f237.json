{"sha": "6f87d20a7cce70b8cc59a1adf3037d14bc83f237", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmODdkMjBhN2NjZTcwYjhjYzU5YTFhZGYzMDM3ZDE0YmM4M2YyMzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-29T20:09:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-29T20:09:35Z"}, "message": "Auto merge of #42526 - huntiep:try_opt, r=nikomatsakis\n\nImpl Try for Option\n\nThis is part of #31436.", "tree": {"sha": "76a82730a114bfbb9f6ee6b30e267a3b2c20b714", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76a82730a114bfbb9f6ee6b30e267a3b2c20b714"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f87d20a7cce70b8cc59a1adf3037d14bc83f237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f87d20a7cce70b8cc59a1adf3037d14bc83f237", "html_url": "https://github.com/rust-lang/rust/commit/6f87d20a7cce70b8cc59a1adf3037d14bc83f237", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f87d20a7cce70b8cc59a1adf3037d14bc83f237/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51cd06170eccf91a2d93018e939473a8db18da92", "url": "https://api.github.com/repos/rust-lang/rust/commits/51cd06170eccf91a2d93018e939473a8db18da92", "html_url": "https://github.com/rust-lang/rust/commit/51cd06170eccf91a2d93018e939473a8db18da92"}, {"sha": "e30d92bb2d885629b51a5511b58109c94a1c56da", "url": "https://api.github.com/repos/rust-lang/rust/commits/e30d92bb2d885629b51a5511b58109c94a1c56da", "html_url": "https://github.com/rust-lang/rust/commit/e30d92bb2d885629b51a5511b58109c94a1c56da"}], "stats": {"total": 132, "additions": 131, "deletions": 1}, "files": [{"sha": "980ea551f0806a888ce834bcbfbf3b196fffffd6", "filename": "src/libcore/option.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6f87d20a7cce70b8cc59a1adf3037d14bc83f237/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f87d20a7cce70b8cc59a1adf3037d14bc83f237/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=6f87d20a7cce70b8cc59a1adf3037d14bc83f237", "patch": "@@ -146,7 +146,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use iter::{FromIterator, FusedIterator, TrustedLen};\n-use mem;\n+use {mem, ops};\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n // `Iterator`, which is one. The compiler assumes that the `next` method of\n@@ -1123,3 +1123,29 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n         }\n     }\n }\n+\n+/// The error type that results from applying the try operator (`?`) to a `None` value. If you wish\n+/// to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can\n+/// implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that\n+/// returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.\n+#[unstable(feature = \"try_trait\", issue = \"42327\")]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n+pub struct NoneError;\n+\n+#[unstable(feature = \"try_trait\", issue = \"42327\")]\n+impl<T> ops::Try for Option<T> {\n+    type Ok = T;\n+    type Error = NoneError;\n+\n+    fn into_result(self) -> Result<T, NoneError> {\n+        self.ok_or(NoneError)\n+    }\n+\n+    fn from_ok(v: T) -> Self {\n+        Some(v)\n+    }\n+\n+    fn from_error(_: NoneError) -> Self {\n+        None\n+    }\n+}"}, {"sha": "afc5de7b0ee358068c6d789c7de885304e710f01", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f87d20a7cce70b8cc59a1adf3037d14bc83f237/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f87d20a7cce70b8cc59a1adf3037d14bc83f237/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=6f87d20a7cce70b8cc59a1adf3037d14bc83f237", "patch": "@@ -39,6 +39,7 @@\n #![feature(test)]\n #![feature(trusted_len)]\n #![feature(try_from)]\n+#![feature(try_trait)]\n #![feature(unique)]\n \n #![feature(const_atomic_bool_new)]"}, {"sha": "22109e28edd9b810534dffb3cbf371b77945b5f6", "filename": "src/libcore/tests/option.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6f87d20a7cce70b8cc59a1adf3037d14bc83f237/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f87d20a7cce70b8cc59a1adf3037d14bc83f237/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=6f87d20a7cce70b8cc59a1adf3037d14bc83f237", "patch": "@@ -270,3 +270,30 @@ fn test_cloned() {\n     assert_eq!(opt_ref_ref.clone().cloned(), Some(&val));\n     assert_eq!(opt_ref_ref.cloned().cloned(), Some(1));\n }\n+\n+#[test]\n+fn test_try() {\n+    fn try_option_some() -> Option<u8> {\n+        let val = Some(1)?;\n+        Some(val)\n+    }\n+    assert_eq!(try_option_some(), Some(1));\n+\n+    fn try_option_none() -> Option<u8> {\n+        let val = None?;\n+        Some(val)\n+    }\n+    assert_eq!(try_option_none(), None);\n+\n+    fn try_option_ok() -> Result<u8, NoneError> {\n+        let val = Some(1)?;\n+        Ok(val)\n+    }\n+    assert_eq!(try_option_ok(), Ok(1));\n+\n+    fn try_option_err() -> Result<u8, NoneError> {\n+        let val = None?;\n+        Ok(val)\n+    }\n+    assert_eq!(try_option_err(), Err(NoneError));\n+}"}, {"sha": "ce41bde8342edbbe2784cc4dc6a695d77a0a6d6f", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6f87d20a7cce70b8cc59a1adf3037d14bc83f237/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f87d20a7cce70b8cc59a1adf3037d14bc83f237/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=6f87d20a7cce70b8cc59a1adf3037d14bc83f237", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::option::*;\n+\n fn op1() -> Result<isize, &'static str> { Ok(666) }\n fn op2() -> Result<isize, &'static str> { Err(\"sadface\") }\n \n@@ -202,3 +204,30 @@ pub fn test_unwrap_or_default() {\n     assert_eq!(op1().unwrap_or_default(), 666);\n     assert_eq!(op2().unwrap_or_default(), 0);\n }\n+\n+#[test]\n+fn test_try() {\n+    fn try_result_some() -> Option<u8> {\n+        let val = Ok(1)?;\n+        Some(val)\n+    }\n+    assert_eq!(try_result_some(), Some(1));\n+\n+    fn try_result_none() -> Option<u8> {\n+        let val = Err(NoneError)?;\n+        Some(val)\n+    }\n+    assert_eq!(try_result_none(), None);\n+\n+    fn try_result_ok() -> Result<u8, u8> {\n+        let val = Ok(1)?;\n+        Ok(val)\n+    }\n+    assert_eq!(try_result_ok(), Ok(1));\n+\n+    fn try_result_err() -> Result<u8, u8> {\n+        let val = Err(1)?;\n+        Ok(val)\n+    }\n+    assert_eq!(try_result_err(), Err(1));\n+}"}, {"sha": "4cd8cd81151cc623a532a4c770a542f135471027", "filename": "src/test/ui/suggestions/try-on-option.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6f87d20a7cce70b8cc59a1adf3037d14bc83f237/src%2Ftest%2Fui%2Fsuggestions%2Ftry-on-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f87d20a7cce70b8cc59a1adf3037d14bc83f237/src%2Ftest%2Fui%2Fsuggestions%2Ftry-on-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-on-option.rs?ref=6f87d20a7cce70b8cc59a1adf3037d14bc83f237", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(try_trait)]\n+\n+fn main() {}\n+\n+fn foo() -> Result<u32, ()> {\n+    let x: Option<u32> = None;\n+    x?;\n+    Ok(22)\n+}\n+\n+fn bar() -> u32 {\n+    let x: Option<u32> = None;\n+    x?;\n+    22\n+}"}, {"sha": "86d4510cad3c2a70fbb32e2d3597654962eac60b", "filename": "src/test/ui/suggestions/try-on-option.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f87d20a7cce70b8cc59a1adf3037d14bc83f237/src%2Ftest%2Fui%2Fsuggestions%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f87d20a7cce70b8cc59a1adf3037d14bc83f237/src%2Ftest%2Fui%2Fsuggestions%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-on-option.stderr?ref=6f87d20a7cce70b8cc59a1adf3037d14bc83f237", "patch": "@@ -0,0 +1,22 @@\n+error[E0277]: the trait bound `(): std::convert::From<std::option::NoneError>` is not satisfied\n+  --> $DIR/try-on-option.rs:17:5\n+   |\n+17 |     x?;\n+   |     ^^ the trait `std::convert::From<std::option::NoneError>` is not implemented for `()`\n+   |\n+   = note: required by `std::convert::From::from`\n+\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\n+  --> $DIR/try-on-option.rs:23:5\n+   |\n+23 |     x?;\n+   |     --\n+   |     |\n+   |     cannot use the `?` operator in a function that returns `u32`\n+   |     in this macro invocation\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `u32`\n+   = note: required by `std::ops::Try::from_error`\n+\n+error: aborting due to 2 previous errors\n+"}]}