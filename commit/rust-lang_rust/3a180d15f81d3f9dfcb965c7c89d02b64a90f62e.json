{"sha": "3a180d15f81d3f9dfcb965c7c89d02b64a90f62e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMTgwZDE1ZjgxZDNmOWRmY2I5NjVjN2M4OWQwMmI2NGE5MGY2MmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-07-14T00:56:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-07-14T01:38:00Z"}, "message": "Address feedback", "tree": {"sha": "83547809febf5e584583d28c889101383c7bff25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83547809febf5e584583d28c889101383c7bff25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a180d15f81d3f9dfcb965c7c89d02b64a90f62e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a180d15f81d3f9dfcb965c7c89d02b64a90f62e", "html_url": "https://github.com/rust-lang/rust/commit/3a180d15f81d3f9dfcb965c7c89d02b64a90f62e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a180d15f81d3f9dfcb965c7c89d02b64a90f62e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4089ba873e7e64540764b8aa7438d02b36206d51", "url": "https://api.github.com/repos/rust-lang/rust/commits/4089ba873e7e64540764b8aa7438d02b36206d51", "html_url": "https://github.com/rust-lang/rust/commit/4089ba873e7e64540764b8aa7438d02b36206d51"}], "stats": {"total": 75, "additions": 42, "deletions": 33}, "files": [{"sha": "f77e639f83319d0583cf69093004d5ce8d1475cb", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a180d15f81d3f9dfcb965c7c89d02b64a90f62e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/3a180d15f81d3f9dfcb965c7c89d02b64a90f62e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=3a180d15f81d3f9dfcb965c7c89d02b64a90f62e", "patch": "@@ -951,3 +951,8 @@\n     }());\n \n }());\n+\n+// Sets the focus on the search bar at the top of the page\n+function focusSearchBar() {\n+    document.getElementsByName('search')[0].focus();\n+}"}, {"sha": "004bdf8666188c326817e49332604277a646438e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3a180d15f81d3f9dfcb965c7c89d02b64a90f62e/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a180d15f81d3f9dfcb965c7c89d02b64a90f62e/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=3a180d15f81d3f9dfcb965c7c89d02b64a90f62e", "patch": "@@ -14,7 +14,7 @@\n //! software, a set of minimal and battle-tested shared abstractions\n //! for the [broader Rust ecosystem](https://crates.io). It offers\n //! core types (e.g. [`Vec`](vec/index.html)\n-//! and[`Option`](option/index.html)), library-defined [operations on\n+//! and [`Option`](option/index.html)), library-defined [operations on\n //! language primitives](#primitive) (e.g. [`u32`](u32/index.html) and\n //! [`str`](str/index.html)), [standard macros](#macros),\n //! [I/O](io/index.html) and [multithreading](thread/index.html), among\n@@ -32,17 +32,11 @@\n //! [book-crate-root]: ../book/crates-and-modules.html#basic-terminology:-crates-and-modules\n //! [book-use]: ../book/crates-and-modules.html#importing-modules-with-use\n //!\n-//! Furthermore, the standard library defines [The Rust\n-//! Prelude](prelude/index.html), a small collection of items, mostly\n-//! traits, that are imported into every module and through trait\n-//! resolution provide Rust with much of its *standard flavor*.\n-//!\n //! # How to read this documentation\n //!\n //! If you already know the name of what you are looking for the\n //! fastest way to find it is to use the <a href=\"#\"\n-//! onclick=\"document.getElementsByName('search')[0].focus();\">search\n-//! bar</a> at the top of the page.\n+//! onclick=\"focusSearchBar();\">search bar</a> at the top of the page.\n //!\n //! Otherwise, you may want to jump to one of these useful sections:\n //!\n@@ -52,10 +46,10 @@\n //! * [The Rust Prelude](prelude/index.html)\n //!\n //! If this is your first time, the documentation for the standard\n-//! library is written to be casually perused and clicking on\n-//! interesting things should generally lead you to interesting\n-//! places. Still, there are important bits you don't want to miss, so\n-//! read on for a tour of the standard library and its documentation.\n+//! library is written to be casually perused. Clicking on interesting\n+//! things should generally lead you to interesting places. Still,\n+//! there are important bits you don't want to miss, so read on for a\n+//! tour of the standard library and its documentation!\n //!\n //! Once you are familiar with the contents of the standard library\n //! you may begin to find the verbosity of the prose distracting. At\n@@ -81,7 +75,7 @@\n //! includes an overview of the module along with examples, and are\n //! a smart place to start familiarizing yourself with the library.\n //!\n-//! Secondly, implicit methods on [primitive\n+//! Second, implicit methods on [primitive\n //! types](../book/primitive-types.html) are documented here. This can\n //! be a source of confusion for two reasons:\n //!\n@@ -109,17 +103,17 @@\n //! primitive types are documented on their own pages will bring you a\n //! deep inner wisdom. Embrace it now before proceeding.*\n //!\n-//! Thirdly, the standard library defines [The Rust\n+//! Third, the standard library defines [The Rust\n //! Prelude](prelude/index.html), a small collection of items - mostly\n-//! traits - that are imported into every module. The traits in the\n-//! prelude are pervasive, making the prelude documentation a good\n-//! entry point to learning about the library.\n+//! traits - that are imported into every module of every crate. The\n+//! traits in the prelude are pervasive, making the prelude\n+//! documentation a good entry point to learning about the library.\n //!\n-//! And lastly, the standard library exports a number of standard\n+//! And finally, the standard library exports a number of standard\n //! macros, and [lists them on this page](#macros) (technically, not\n //! all of the standard macros are defined by the standard library -\n //! some are defined by the compiler - but they are documented here\n-//! the same).  Like the prelude, the standard macros are imported by\n+//! the same). Like the prelude, the standard macros are imported by\n //! default into all crates.\n //!\n //! # A Tour of The Rust Standard Library\n@@ -136,18 +130,28 @@\n //! [`Iterator`](iter/trait.Iterator.html), which works with the `for`\n //! loop to access collections.\n //!\n-//! The common container type, `Vec`, a growable vector backed by an\n-//! array, lives in the [`vec`](vec/index.html) module. Contiguous,\n-//! unsized regions of memory, `[T]`, commonly called \"slices\", and\n-//! their borrowed versions, `&[T]`, commonly called \"borrowed\n-//! slices\", are primitive types [with many implicit\n-//! methods](primitive.slice.html) defined by the standard library.\n-//!\n-//! `str`, a UTF-8 string, is a primitive type, and the standard\n-//! library defines [many methods for it](primitive.str.html).\n-//! Rust `str`s are immutable; use the owned `String` type\n-//! defined in [`string`](string/index.html) for building and mutating\n-//! strings.\n+//! The standard library exposes 3 common ways to deal with contiguous\n+//! regions of memory:\n+//! \n+//! * [`Vec<T>`](vec/index.html) - A heap-allocated *vector* that is\n+//! resizable at runtime.\n+//! * [`[T; n]`](primitive.array.html) - An inline *array* with a\n+//! fixed size at compile time.\n+//! * [`[T]`](primitive.slice.html) - A dynamically sized *slice* into\n+//! any other kind of contiguous storage, whether heap-allocated or\n+//! not.\n+//!\n+//! Slices can only be handled through some kind of *pointer*, and as\n+//! such come in many flavours such as:\n+//!\n+//! * `&[T]` - *shared slice*\n+//! * `&mut [T]` - *mutable slice*\n+//! * [`Box<[T]>`](boxed/index.html) - *owned slice*\n+//!    \n+//! `str`, a UTF-8 string slice, is a primitive type, and the standard\n+//! library defines [many methods for it](primitive.str.html).  Rust\n+//! `str`s are immutable; use the owned `String` type defined in\n+//! [`string`](string/index.html) for building and mutating strings.\n //!\n //! For converting to strings use the [`format!`](fmt/index.html)\n //! macro, and for converting from strings use the"}, {"sha": "275f415c6fc800faafce6e502c2f9a219125d4e0", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a180d15f81d3f9dfcb965c7c89d02b64a90f62e/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a180d15f81d3f9dfcb965c7c89d02b64a90f62e/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=3a180d15f81d3f9dfcb965c7c89d02b64a90f62e", "patch": "@@ -34,9 +34,9 @@\n //! ```\n //!\n //! The prelude is primarily concerned with exporting *traits* that\n-//! are so pervasive that it would be onerous to import for every use,\n+//! are so pervasive that they would be onerous to import for every use,\n //! particularly those that are commonly mentioned in [generic type\n-//! bounds][book-traits], and that are often used\n+//! bounds][book-traits].\n //!\n //! The current version of the prelude (version 1) lives in\n //! [`std::prelude::v1`](v1/index.html), and reexports the following."}]}