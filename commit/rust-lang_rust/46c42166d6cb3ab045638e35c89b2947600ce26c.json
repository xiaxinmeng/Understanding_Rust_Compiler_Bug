{"sha": "46c42166d6cb3ab045638e35c89b2947600ce26c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YzQyMTY2ZDZjYjNhYjA0NTYzOGUzNWM4OWIyOTQ3NjAwY2UyNmM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-05T13:47:55Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-05T13:47:55Z"}, "message": "Yeet `replace_unwrap_with_match` in favor of `inline_call`", "tree": {"sha": "eed45f3dcadaf0522dcdbc4e8767f88c813dece8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eed45f3dcadaf0522dcdbc4e8767f88c813dece8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46c42166d6cb3ab045638e35c89b2947600ce26c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46c42166d6cb3ab045638e35c89b2947600ce26c", "html_url": "https://github.com/rust-lang/rust/commit/46c42166d6cb3ab045638e35c89b2947600ce26c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46c42166d6cb3ab045638e35c89b2947600ce26c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dafbe6940e6cbcd4a98e31c5e851c314e3640888", "url": "https://api.github.com/repos/rust-lang/rust/commits/dafbe6940e6cbcd4a98e31c5e851c314e3640888", "html_url": "https://github.com/rust-lang/rust/commit/dafbe6940e6cbcd4a98e31c5e851c314e3640888"}], "stats": {"total": 211, "additions": 0, "deletions": 211}, "files": [{"sha": "ccc8449775adfa5e8138e31a1dfd1713c6343b6b", "filename": "crates/ide_assists/src/handlers/replace_unwrap_with_match.rs", "status": "removed", "additions": 0, "deletions": 186, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/dafbe6940e6cbcd4a98e31c5e851c314e3640888/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dafbe6940e6cbcd4a98e31c5e851c314e3640888/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=dafbe6940e6cbcd4a98e31c5e851c314e3640888", "patch": "@@ -1,186 +0,0 @@\n-use std::iter;\n-\n-use syntax::{\n-    ast::{\n-        self,\n-        edit::{AstNodeEdit, IndentLevel},\n-        make,\n-    },\n-    AstNode,\n-};\n-\n-use crate::{\n-    utils::{render_snippet, Cursor},\n-    AssistContext, AssistId, AssistKind, Assists,\n-};\n-use ide_db::ty_filter::TryEnum;\n-\n-// Assist: replace_unwrap_with_match\n-//\n-// Replaces `unwrap` with a `match` expression. Works for Result and Option.\n-//\n-// ```\n-// # //- minicore: result\n-// fn main() {\n-//     let x: Result<i32, i32> = Ok(92);\n-//     let y = x.$0unwrap();\n-// }\n-// ```\n-// ->\n-// ```\n-// fn main() {\n-//     let x: Result<i32, i32> = Ok(92);\n-//     let y = match x {\n-//         Ok(it) => it,\n-//         $0_ => unreachable!(),\n-//     };\n-// }\n-// ```\n-pub(crate) fn replace_unwrap_with_match(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let method_call: ast::MethodCallExpr = ctx.find_node_at_offset()?;\n-    let name = method_call.name_ref()?;\n-    if name.text() != \"unwrap\" {\n-        return None;\n-    }\n-    let caller = method_call.receiver()?;\n-    let ty = ctx.sema.type_of_expr(&caller)?;\n-    let happy_variant = TryEnum::from_ty(&ctx.sema, &ty)?.happy_case();\n-    let target = method_call.syntax().text_range();\n-    acc.add(\n-        AssistId(\"replace_unwrap_with_match\", AssistKind::RefactorRewrite),\n-        \"Replace unwrap with match\",\n-        target,\n-        |builder| {\n-            let ok_path = make::ext::ident_path(happy_variant);\n-            let it = make::ext::simple_ident_pat(make::name(\"it\")).into();\n-            let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n-\n-            let bind_path = make::ext::ident_path(\"it\");\n-            let ok_arm = make::match_arm(iter::once(ok_tuple), None, make::expr_path(bind_path));\n-\n-            let err_arm = make::match_arm(\n-                iter::once(make::wildcard_pat().into()),\n-                None,\n-                make::ext::expr_unreachable(),\n-            );\n-\n-            let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);\n-            let match_expr = make::expr_match(caller.clone(), match_arm_list)\n-                .indent(IndentLevel::from_node(method_call.syntax()));\n-\n-            let range = method_call.syntax().text_range();\n-            match ctx.config.snippet_cap {\n-                Some(cap) => {\n-                    let err_arm = match_expr\n-                        .syntax()\n-                        .descendants()\n-                        .filter_map(ast::MatchArm::cast)\n-                        .last()\n-                        .unwrap();\n-                    let snippet =\n-                        render_snippet(cap, match_expr.syntax(), Cursor::Before(err_arm.syntax()));\n-                    builder.replace_snippet(cap, range, snippet)\n-                }\n-                None => builder.replace(range, match_expr.to_string()),\n-            }\n-        },\n-    )\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::tests::{check_assist, check_assist_target};\n-\n-    use super::*;\n-\n-    #[test]\n-    fn test_replace_result_unwrap_with_match() {\n-        check_assist(\n-            replace_unwrap_with_match,\n-            r#\"\n-//- minicore: result\n-fn i<T>(a: T) -> T { a }\n-fn main() {\n-    let x: Result<i32, i32> = Ok(92);\n-    let y = i(x).$0unwrap();\n-}\n-\"#,\n-            r#\"\n-fn i<T>(a: T) -> T { a }\n-fn main() {\n-    let x: Result<i32, i32> = Ok(92);\n-    let y = match i(x) {\n-        Ok(it) => it,\n-        $0_ => unreachable!(),\n-    };\n-}\n-\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn test_replace_option_unwrap_with_match() {\n-        check_assist(\n-            replace_unwrap_with_match,\n-            r#\"\n-//- minicore: option\n-fn i<T>(a: T) -> T { a }\n-fn main() {\n-    let x = Some(92);\n-    let y = i(x).$0unwrap();\n-}\n-\"#,\n-            r#\"\n-fn i<T>(a: T) -> T { a }\n-fn main() {\n-    let x = Some(92);\n-    let y = match i(x) {\n-        Some(it) => it,\n-        $0_ => unreachable!(),\n-    };\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_replace_result_unwrap_with_match_chaining() {\n-        check_assist(\n-            replace_unwrap_with_match,\n-            r#\"\n-//- minicore: result\n-fn i<T>(a: T) -> T { a }\n-fn main() {\n-    let x: Result<i32, i32> = Ok(92);\n-    let y = i(x).$0unwrap().count_zeroes();\n-}\n-\"#,\n-            r#\"\n-fn i<T>(a: T) -> T { a }\n-fn main() {\n-    let x: Result<i32, i32> = Ok(92);\n-    let y = match i(x) {\n-        Ok(it) => it,\n-        $0_ => unreachable!(),\n-    }.count_zeroes();\n-}\n-\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn replace_unwrap_with_match_target() {\n-        check_assist_target(\n-            replace_unwrap_with_match,\n-            r#\"\n-//- minicore: option\n-fn i<T>(a: T) -> T { a }\n-fn main() {\n-    let x = Some(92);\n-    let y = i(x).$0unwrap();\n-}\n-\"#,\n-            r\"i(x).unwrap()\",\n-        );\n-    }\n-}"}, {"sha": "3c052a7de02fca0a2b70a1270778caa098abc053", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46c42166d6cb3ab045638e35c89b2947600ce26c/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c42166d6cb3ab045638e35c89b2947600ce26c/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=46c42166d6cb3ab045638e35c89b2947600ce26c", "patch": "@@ -109,7 +109,6 @@ mod handlers {\n     mod replace_let_with_if_let;\n     mod replace_qualified_name_with_use;\n     mod replace_string_with_char;\n-    mod replace_unwrap_with_match;\n     mod split_import;\n     mod toggle_ignore;\n     mod unmerge_use;\n@@ -182,7 +181,6 @@ mod handlers {\n             replace_impl_trait_with_generic::replace_impl_trait_with_generic,\n             replace_let_with_if_let::replace_let_with_if_let,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n-            replace_unwrap_with_match::replace_unwrap_with_match,\n             split_import::split_import,\n             toggle_ignore::toggle_ignore,\n             unmerge_use::unmerge_use,"}, {"sha": "36ca7acfce9806bbca6f28478d9cfe2ce195b9b6", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/46c42166d6cb3ab045638e35c89b2947600ce26c/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c42166d6cb3ab045638e35c89b2947600ce26c/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=46c42166d6cb3ab045638e35c89b2947600ce26c", "patch": "@@ -1506,29 +1506,6 @@ fn main() {\n     )\n }\n \n-#[test]\n-fn doctest_replace_unwrap_with_match() {\n-    check_doc_test(\n-        \"replace_unwrap_with_match\",\n-        r#####\"\n-//- minicore: result\n-fn main() {\n-    let x: Result<i32, i32> = Ok(92);\n-    let y = x.$0unwrap();\n-}\n-\"#####,\n-        r#####\"\n-fn main() {\n-    let x: Result<i32, i32> = Ok(92);\n-    let y = match x {\n-        Ok(it) => it,\n-        $0_ => unreachable!(),\n-    };\n-}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_split_import() {\n     check_doc_test("}]}