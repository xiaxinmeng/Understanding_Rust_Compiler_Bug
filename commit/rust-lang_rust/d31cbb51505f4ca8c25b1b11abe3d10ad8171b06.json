{"sha": "d31cbb51505f4ca8c25b1b11abe3d10ad8171b06", "node_id": "C_kwDOAAsO6NoAKGQzMWNiYjUxNTA1ZjRjYThjMjViMWIxMWFiZTNkMTBhZDgxNzFiMDY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-02T15:00:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-02T15:41:16Z"}, "message": "make AllocRef APIs more consistent", "tree": {"sha": "6bf60625204e5f60596812aa6af097a4621bea4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bf60625204e5f60596812aa6af097a4621bea4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d31cbb51505f4ca8c25b1b11abe3d10ad8171b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d31cbb51505f4ca8c25b1b11abe3d10ad8171b06", "html_url": "https://github.com/rust-lang/rust/commit/d31cbb51505f4ca8c25b1b11abe3d10ad8171b06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d31cbb51505f4ca8c25b1b11abe3d10ad8171b06/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c36572c11e0cd179d80b4540890bc046b78a0cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c36572c11e0cd179d80b4540890bc046b78a0cb7", "html_url": "https://github.com/rust-lang/rust/commit/c36572c11e0cd179d80b4540890bc046b78a0cb7"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "de6200ef01252f11d5fc64c2dcb96afa0ca33d7d", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d31cbb51505f4ca8c25b1b11abe3d10ad8171b06/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31cbb51505f4ca8c25b1b11abe3d10ad8171b06/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=d31cbb51505f4ca8c25b1b11abe3d10ad8171b06", "patch": "@@ -857,6 +857,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> std::fmt::Debug for DumpAllocs<'a,\n \n /// Reading and writing.\n impl<'tcx, 'a, Tag: Provenance, Extra> AllocRefMut<'a, 'tcx, Tag, Extra> {\n+    /// `range` is relative to this allocation reference, not the base of the allocation.\n     pub fn write_scalar(\n         &mut self,\n         range: AllocRange,\n@@ -870,6 +871,7 @@ impl<'tcx, 'a, Tag: Provenance, Extra> AllocRefMut<'a, 'tcx, Tag, Extra> {\n             .map_err(|e| e.to_interp_error(self.alloc_id))?)\n     }\n \n+    /// `offset` is relative to this allocation reference, not the base of the allocation.\n     pub fn write_ptr_sized(\n         &mut self,\n         offset: Size,\n@@ -888,6 +890,7 @@ impl<'tcx, 'a, Tag: Provenance, Extra> AllocRefMut<'a, 'tcx, Tag, Extra> {\n }\n \n impl<'tcx, 'a, Tag: Provenance, Extra> AllocRef<'a, 'tcx, Tag, Extra> {\n+    /// `range` is relative to this allocation reference, not the base of the allocation.\n     pub fn read_scalar(\n         &self,\n         range: AllocRange,\n@@ -902,21 +905,20 @@ impl<'tcx, 'a, Tag: Provenance, Extra> AllocRef<'a, 'tcx, Tag, Extra> {\n         Ok(res)\n     }\n \n-    pub fn read_integer(\n-        &self,\n-        offset: Size,\n-        size: Size,\n-    ) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n-        self.read_scalar(alloc_range(offset, size), /*read_provenance*/ false)\n+    /// `range` is relative to this allocation reference, not the base of the allocation.\n+    pub fn read_integer(&self, range: AllocRange) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n+        self.read_scalar(range, /*read_provenance*/ false)\n     }\n \n+    /// `offset` is relative to this allocation reference, not the base of the allocation.\n     pub fn read_pointer(&self, offset: Size) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n         self.read_scalar(\n             alloc_range(offset, self.tcx.data_layout().pointer_size),\n             /*read_provenance*/ true,\n         )\n     }\n \n+    /// `range` is relative to this allocation reference, not the base of the allocation.\n     pub fn check_bytes(\n         &self,\n         range: AllocRange,"}, {"sha": "22c23df7b1ab34185c1a5ba01604e76faad1f180", "filename": "compiler/rustc_const_eval/src/interpret/traits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d31cbb51505f4ca8c25b1b11abe3d10ad8171b06/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31cbb51505f4ca8c25b1b11abe3d10ad8171b06/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs?ref=d31cbb51505f4ca8c25b1b11abe3d10ad8171b06", "patch": "@@ -1,6 +1,6 @@\n use std::convert::TryFrom;\n \n-use rustc_middle::mir::interpret::{InterpResult, Pointer, PointerArithmetic};\n+use rustc_middle::mir::interpret::{alloc_range, InterpResult, Pointer, PointerArithmetic};\n use rustc_middle::ty::{\n     self, Ty, TyCtxt, COMMON_VTABLE_ENTRIES_ALIGN, COMMON_VTABLE_ENTRIES_DROPINPLACE,\n     COMMON_VTABLE_ENTRIES_SIZE,\n@@ -102,18 +102,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             )?\n             .expect(\"cannot be a ZST\");\n         let size = vtable\n-            .read_integer(\n+            .read_integer(alloc_range(\n                 pointer_size * u64::try_from(COMMON_VTABLE_ENTRIES_SIZE).unwrap(),\n                 pointer_size,\n-            )?\n+            ))?\n             .check_init()?;\n         let size = size.to_machine_usize(self)?;\n         let size = Size::from_bytes(size);\n         let align = vtable\n-            .read_integer(\n+            .read_integer(alloc_range(\n                 pointer_size * u64::try_from(COMMON_VTABLE_ENTRIES_ALIGN).unwrap(),\n                 pointer_size,\n-            )?\n+            ))?\n             .check_init()?;\n         let align = align.to_machine_usize(self)?;\n         let align = Align::from_bytes(align).map_err(|e| err_ub!(InvalidVtableAlignment(e)))?;"}]}