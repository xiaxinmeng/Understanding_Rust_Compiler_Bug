{"sha": "b3f9795cbb498ad75bcfa0c287774a936c09dd8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZjk3OTVjYmI0OThhZDc1YmNmYTBjMjg3Nzc0YTkzNmMwOWRkOGQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-17T03:53:10Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-17T03:53:10Z"}, "message": "Get rid of clean::TyMethod\n\nIt's the same as clean::Function.", "tree": {"sha": "353c39f254a02d1cd5207c0d52590315c811efe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/353c39f254a02d1cd5207c0d52590315c811efe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3f9795cbb498ad75bcfa0c287774a936c09dd8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f9795cbb498ad75bcfa0c287774a936c09dd8d", "html_url": "https://github.com/rust-lang/rust/commit/b3f9795cbb498ad75bcfa0c287774a936c09dd8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3f9795cbb498ad75bcfa0c287774a936c09dd8d/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b2b02a840f358bcadef5c3ae861d2852da20b3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2b02a840f358bcadef5c3ae861d2852da20b3d", "html_url": "https://github.com/rust-lang/rust/commit/9b2b02a840f358bcadef5c3ae861d2852da20b3d"}], "stats": {"total": 18, "additions": 4, "deletions": 14}, "files": [{"sha": "17dd88392feb8ff7c3195603958c12139b3070d4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3f9795cbb498ad75bcfa0c287774a936c09dd8d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f9795cbb498ad75bcfa0c287774a936c09dd8d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b3f9795cbb498ad75bcfa0c287774a936c09dd8d", "patch": "@@ -1120,7 +1120,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                     (self.generics.clean(cx), (&*sig.decl, &names[..]).clean(cx))\n                 });\n                 let (all_types, ret_types) = get_all_types(&generics, &decl, cx);\n-                let mut t = TyMethod { header: sig.header, decl, generics, all_types, ret_types };\n+                let mut t = Function { header: sig.header, decl, generics, all_types, ret_types };\n                 if t.header.constness == hir::Constness::Const\n                     && is_unstable_const_fn(cx.tcx, local_did.to_def_id()).is_some()\n                 {\n@@ -1249,7 +1249,7 @@ impl Clean<Item> for ty::AssocItem {\n                         ret_types,\n                     })\n                 } else {\n-                    TyMethodItem(TyMethod {\n+                    TyMethodItem(Function {\n                         generics,\n                         decl,\n                         header: hir::FnHeader {"}, {"sha": "032a8b937cb9fff335f89003be13277bf351fd46", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b3f9795cbb498ad75bcfa0c287774a936c09dd8d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f9795cbb498ad75bcfa0c287774a936c09dd8d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=b3f9795cbb498ad75bcfa0c287774a936c09dd8d", "patch": "@@ -264,7 +264,7 @@ crate enum ItemKind {\n     ImplItem(Impl),\n     /// A method signature only. Used for required methods in traits (ie,\n     /// non-default-methods).\n-    TyMethodItem(TyMethod),\n+    TyMethodItem(Function),\n     /// A method with a body.\n     MethodItem(Method),\n     StructFieldItem(Type),\n@@ -920,15 +920,6 @@ crate struct Method {\n     crate ret_types: Vec<(Type, TypeKind)>,\n }\n \n-#[derive(Clone, Debug)]\n-crate struct TyMethod {\n-    crate header: hir::FnHeader,\n-    crate decl: FnDecl,\n-    crate generics: Generics,\n-    crate all_types: Vec<(Type, TypeKind)>,\n-    crate ret_types: Vec<(Type, TypeKind)>,\n-}\n-\n #[derive(Clone, Debug)]\n crate struct Function {\n     crate decl: FnDecl,"}, {"sha": "4c71906f586f9e937178b4b5818e3831ea71b461", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3f9795cbb498ad75bcfa0c287774a936c09dd8d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f9795cbb498ad75bcfa0c287774a936c09dd8d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=b3f9795cbb498ad75bcfa0c287774a936c09dd8d", "patch": "@@ -3752,8 +3752,7 @@ fn render_impl(\n                 (true, \" hidden\")\n             };\n         match item.kind {\n-            clean::MethodItem(clean::Method { .. })\n-            | clean::TyMethodItem(clean::TyMethod { .. }) => {\n+            clean::MethodItem(_) | clean::TyMethodItem(_) => {\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = cx.derive_id(format!(\"{}.{}\", item_type, name));"}]}