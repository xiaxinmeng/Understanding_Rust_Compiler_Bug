{"sha": "fddec2d88a1b44c6eb8922127b8683e1c6778052", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZGVjMmQ4OGExYjQ0YzZlYjg5MjIxMjdiODY4M2UxYzY3NzgwNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-10T09:56:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-10T09:56:14Z"}, "message": "auto merge of #19638 : barosl/rust/typeck-tupled-arguments-ice, r=jakub\n\nWhen a type error occurs, `check_method_argument_types()` tries to provide arguments filled with `ty::mk_err()`. However, if a function takes the parameters as a tuple, the arguments should be converted to a tuple before passing it to `check_argument_types()`.\r\n\r\nFixes #19521.", "tree": {"sha": "98f2674a8e9ac57a122d766404f3da0662670ca2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98f2674a8e9ac57a122d766404f3da0662670ca2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fddec2d88a1b44c6eb8922127b8683e1c6778052", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fddec2d88a1b44c6eb8922127b8683e1c6778052", "html_url": "https://github.com/rust-lang/rust/commit/fddec2d88a1b44c6eb8922127b8683e1c6778052", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fddec2d88a1b44c6eb8922127b8683e1c6778052/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "444a759b84573a5a4cbf3f852b22148e68306ce3", "url": "https://api.github.com/repos/rust-lang/rust/commits/444a759b84573a5a4cbf3f852b22148e68306ce3", "html_url": "https://github.com/rust-lang/rust/commit/444a759b84573a5a4cbf3f852b22148e68306ce3"}, {"sha": "21d12c029700adc158c5fb466384ccd8562a6915", "url": "https://api.github.com/repos/rust-lang/rust/commits/21d12c029700adc158c5fb466384ccd8562a6915", "html_url": "https://github.com/rust-lang/rust/commit/21d12c029700adc158c5fb466384ccd8562a6915"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "1a8b06ec12def077c28f31fc7cdcaa652a38f8b4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fddec2d88a1b44c6eb8922127b8683e1c6778052/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fddec2d88a1b44c6eb8922127b8683e1c6778052/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fddec2d88a1b44c6eb8922127b8683e1c6778052", "patch": "@@ -2623,7 +2623,13 @@ fn check_method_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                          tuple_arguments: TupleArgumentsFlag)\n                                          -> ty::FnOutput<'tcx> {\n     if ty::type_is_error(method_fn_ty) {\n-       let err_inputs = err_args(args_no_rcvr.len());\n+        let err_inputs = err_args(args_no_rcvr.len());\n+\n+        let err_inputs = match tuple_arguments {\n+            DontTupleArguments => err_inputs,\n+            TupleArguments => vec![ty::mk_tup(fcx.tcx(), err_inputs)],\n+        };\n+\n         check_argument_types(fcx,\n                              sp,\n                              err_inputs.as_slice(),"}, {"sha": "61cff598b2aee74a745c12b22b0876d928d57cf6", "filename": "src/test/compile-fail/issue-19521.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fddec2d88a1b44c6eb8922127b8683e1c6778052/src%2Ftest%2Fcompile-fail%2Fissue-19521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fddec2d88a1b44c6eb8922127b8683e1c6778052/src%2Ftest%2Fcompile-fail%2Fissue-19521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19521.rs?ref=fddec2d88a1b44c6eb8922127b8683e1c6778052", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closures)]\n+\n+fn main() {\n+    \"\".homura()(); //~ ERROR does not implement any method\n+}"}]}