{"sha": "92a119bc83507b728f7c44f357d99ccbef26bdfb", "node_id": "C_kwDOAAsO6NoAKDkyYTExOWJjODM1MDdiNzI4ZjdjNDRmMzU3ZDk5Y2NiZWYyNmJkZmI", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-10-27T17:50:42Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-10-27T17:50:42Z"}, "message": "Add unit tests for issue 7344", "tree": {"sha": "a83e9c925e22844a09bff05965d0b1f62f20ef84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a83e9c925e22844a09bff05965d0b1f62f20ef84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92a119bc83507b728f7c44f357d99ccbef26bdfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92a119bc83507b728f7c44f357d99ccbef26bdfb", "html_url": "https://github.com/rust-lang/rust/commit/92a119bc83507b728f7c44f357d99ccbef26bdfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92a119bc83507b728f7c44f357d99ccbef26bdfb/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e27e13c9ad8ff278c0cc3d1e75a6389a2235d5d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e27e13c9ad8ff278c0cc3d1e75a6389a2235d5d9", "html_url": "https://github.com/rust-lang/rust/commit/e27e13c9ad8ff278c0cc3d1e75a6389a2235d5d9"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "f69982d63a898d17ba3b9f6ff417c42ea8442bd8", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/92a119bc83507b728f7c44f357d99ccbef26bdfb/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a119bc83507b728f7c44f357d99ccbef26bdfb/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=92a119bc83507b728f7c44f357d99ccbef26bdfb", "patch": "@@ -350,3 +350,53 @@ impl RetOtherSelf<T> {\n         RetOtherSelf(RetOtherSelfWrapper(t))\n     }\n }\n+\n+mod issue7344 {\n+    struct RetImplTraitSelf<T>(T);\n+\n+    impl<T> RetImplTraitSelf<T> {\n+        // should not trigger lint\n+        fn new(t: T) -> impl Into<Self> {\n+            Self(t)\n+        }\n+    }\n+\n+    struct RetImplTraitNoSelf<T>(T);\n+\n+    impl<T> RetImplTraitNoSelf<T> {\n+        // should trigger lint\n+        fn new(t: T) -> impl Into<i32> {\n+            1\n+        }\n+    }\n+\n+    trait Trait2<T, U> {}\n+    impl<T, U> Trait2<T, U> for () {}\n+\n+    struct RetImplTraitSelf2<T>(T);\n+\n+    impl<T> RetImplTraitSelf2<T> {\n+        // should not trigger lint\n+        fn new(t: T) -> impl Trait2<(), Self> {\n+            unimplemented!()\n+        }\n+    }\n+\n+    struct RetImplTraitNoSelf2<T>(T);\n+\n+    impl<T> RetImplTraitNoSelf2<T> {\n+        // should trigger lint\n+        fn new(t: T) -> impl Trait2<(), i32> {\n+            unimplemented!()\n+        }\n+    }\n+\n+    struct RetImplTraitSelfAdt<'a>(&'a str);\n+\n+    impl<'a> RetImplTraitSelfAdt<'a> {\n+        // should not trigger lint\n+        fn new<'b: 'a>(s: &'b str) -> impl Into<RetImplTraitSelfAdt<'b>> {\n+            RetImplTraitSelfAdt(s)\n+        }\n+    }\n+}"}, {"sha": "bc13be47927b1c3fa37a75795a316f5c521319ac", "filename": "tests/ui/new_ret_no_self.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/92a119bc83507b728f7c44f357d99ccbef26bdfb/tests%2Fui%2Fnew_ret_no_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92a119bc83507b728f7c44f357d99ccbef26bdfb/tests%2Fui%2Fnew_ret_no_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.stderr?ref=92a119bc83507b728f7c44f357d99ccbef26bdfb", "patch": "@@ -76,5 +76,21 @@ LL | |             unimplemented!();\n LL | |         }\n    | |_________^\n \n-error: aborting due to 10 previous errors\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:368:9\n+   |\n+LL | /         fn new(t: T) -> impl Into<i32> {\n+LL | |             1\n+LL | |         }\n+   | |_________^\n+\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:389:9\n+   |\n+LL | /         fn new(t: T) -> impl Trait2<(), i32> {\n+LL | |             unimplemented!()\n+LL | |         }\n+   | |_________^\n+\n+error: aborting due to 12 previous errors\n "}]}