{"sha": "ac60077ee5d9aa94b60587029322d35d9f218374", "node_id": "C_kwDOAAsO6NoAKGFjNjAwNzdlZTVkOWFhOTRiNjA1ODcwMjkzMjJkMzVkOWYyMTgzNzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-19T09:33:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-19T09:33:10Z"}, "message": "Auto merge of #13639 - Veykril:macro-diags, r=Veykril\n\nfix: Fix proc-macro-srv search paths for Arch Linux\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/13616", "tree": {"sha": "d172173afef325d8891e02677ef7528d7566200f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d172173afef325d8891e02677ef7528d7566200f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac60077ee5d9aa94b60587029322d35d9f218374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac60077ee5d9aa94b60587029322d35d9f218374", "html_url": "https://github.com/rust-lang/rust/commit/ac60077ee5d9aa94b60587029322d35d9f218374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac60077ee5d9aa94b60587029322d35d9f218374/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "url": "https://api.github.com/repos/rust-lang/rust/commits/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "html_url": "https://github.com/rust-lang/rust/commit/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3"}, {"sha": "dc8254c6abdfcd273cb49475e798048558dcf4db", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc8254c6abdfcd273cb49475e798048558dcf4db", "html_url": "https://github.com/rust-lang/rust/commit/dc8254c6abdfcd273cb49475e798048558dcf4db"}], "stats": {"total": 117, "additions": 50, "deletions": 67}, "files": [{"sha": "870c78d1f1eb729277df8d71da89ecab3e675f48", "filename": "crates/ide-diagnostics/src/handlers/macro_error.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac60077ee5d9aa94b60587029322d35d9f218374/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60077ee5d9aa94b60587029322d35d9f218374/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs?ref=ac60077ee5d9aa94b60587029322d35d9f218374", "patch": "@@ -5,10 +5,7 @@ use crate::{Diagnostic, DiagnosticsContext};\n // This diagnostic is shown for macro expansion errors.\n pub(crate) fn macro_error(ctx: &DiagnosticsContext<'_>, d: &hir::MacroError) -> Diagnostic {\n     // Use more accurate position if available.\n-    let display_range = d\n-        .precise_location\n-        .unwrap_or_else(|| ctx.sema.diagnostics_display_range(d.node.clone()).range);\n-\n+    let display_range = ctx.resolve_precise_location(&d.node, d.precise_location);\n     Diagnostic::new(\"macro-error\", d.message.clone(), display_range).experimental()\n }\n "}, {"sha": "87531f4acfb753b0feb68c58caf76b3518bc6c5d", "filename": "crates/ide-diagnostics/src/handlers/unresolved_macro_call.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac60077ee5d9aa94b60587029322d35d9f218374/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60077ee5d9aa94b60587029322d35d9f218374/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs?ref=ac60077ee5d9aa94b60587029322d35d9f218374", "patch": "@@ -9,10 +9,7 @@ pub(crate) fn unresolved_macro_call(\n     d: &hir::UnresolvedMacroCall,\n ) -> Diagnostic {\n     // Use more accurate position if available.\n-    let display_range = d\n-        .precise_location\n-        .unwrap_or_else(|| ctx.sema.diagnostics_display_range(d.macro_call.clone()).range);\n-\n+    let display_range = ctx.resolve_precise_location(&d.macro_call, d.precise_location);\n     let bang = if d.is_bang { \"!\" } else { \"\" };\n     Diagnostic::new(\n         \"unresolved-macro-call\","}, {"sha": "23818d883f73181d7c684523d21637cda93b1085", "filename": "crates/ide-diagnostics/src/handlers/unresolved_proc_macro.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac60077ee5d9aa94b60587029322d35d9f218374/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60077ee5d9aa94b60587029322d35d9f218374/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs?ref=ac60077ee5d9aa94b60587029322d35d9f218374", "patch": "@@ -1,5 +1,4 @@\n use hir::db::DefDatabase;\n-use syntax::NodeOrToken;\n \n use crate::{Diagnostic, DiagnosticsContext, Severity};\n \n@@ -19,16 +18,7 @@ pub(crate) fn unresolved_proc_macro(\n     proc_attr_macros_enabled: bool,\n ) -> Diagnostic {\n     // Use more accurate position if available.\n-    let display_range = (|| {\n-        let precise_location = d.precise_location?;\n-        let root = ctx.sema.parse_or_expand(d.node.file_id)?;\n-        match root.covering_element(precise_location) {\n-            NodeOrToken::Node(it) => Some(ctx.sema.original_range(&it)),\n-            NodeOrToken::Token(it) => d.node.with_value(it).original_file_range_opt(ctx.sema.db),\n-        }\n-    })()\n-    .unwrap_or_else(|| ctx.sema.diagnostics_display_range(d.node.clone()))\n-    .range;\n+    let display_range = ctx.resolve_precise_location(&d.node, d.precise_location);\n \n     let config_enabled = match d.kind {\n         hir::MacroKind::Attr => proc_macros_enabled && proc_attr_macros_enabled,"}, {"sha": "d81e36a1f86321428d55f3f99fbb229e7dc0d0a2", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ac60077ee5d9aa94b60587029322d35d9f218374/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60077ee5d9aa94b60587029322d35d9f218374/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=ac60077ee5d9aa94b60587029322d35d9f218374", "patch": "@@ -182,6 +182,28 @@ struct DiagnosticsContext<'a> {\n     resolve: &'a AssistResolveStrategy,\n }\n \n+impl<'a> DiagnosticsContext<'a> {\n+    fn resolve_precise_location(\n+        &self,\n+        node: &InFile<SyntaxNodePtr>,\n+        precise_location: Option<TextRange>,\n+    ) -> TextRange {\n+        let sema = &self.sema;\n+        (|| {\n+            let precise_location = precise_location?;\n+            let root = sema.parse_or_expand(node.file_id)?;\n+            match root.covering_element(precise_location) {\n+                syntax::NodeOrToken::Node(it) => Some(sema.original_range(&it)),\n+                syntax::NodeOrToken::Token(it) => {\n+                    node.with_value(it).original_file_range_opt(sema.db)\n+                }\n+            }\n+        })()\n+        .unwrap_or_else(|| sema.diagnostics_display_range(node.clone()))\n+        .range\n+    }\n+}\n+\n pub fn diagnostics(\n     db: &RootDatabase,\n     config: &DiagnosticsConfig,"}, {"sha": "3d199ed24afe79342c97ef43951cb7bc709c7486", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ac60077ee5d9aa94b60587029322d35d9f218374/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60077ee5d9aa94b60587029322d35d9f218374/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=ac60077ee5d9aa94b60587029322d35d9f218374", "patch": "@@ -377,6 +377,21 @@ impl ProjectWorkspace {\n         }\n     }\n \n+    pub fn find_sysroot_proc_macro_srv(&self) -> Option<AbsPathBuf> {\n+        match self {\n+            ProjectWorkspace::Cargo { sysroot: Some(sysroot), .. }\n+            | ProjectWorkspace::Json { sysroot: Some(sysroot), .. } => {\n+                let standalone_server_name =\n+                    format!(\"rust-analyzer-proc-macro-srv{}\", std::env::consts::EXE_SUFFIX);\n+                [\"libexec\", \"lib\"]\n+                    .into_iter()\n+                    .map(|segment| sysroot.root().join(segment).join(&standalone_server_name))\n+                    .find(|server_path| std::fs::metadata(&server_path).is_ok())\n+            }\n+            _ => None,\n+        }\n+    }\n+\n     /// Returns the roots for the current `ProjectWorkspace`\n     /// The return type contains the path and whether or not\n     /// the root is a member of the current workspace"}, {"sha": "762d7d3a18e8b51ef7c03ce80a73ff9d289db4f9", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ac60077ee5d9aa94b60587029322d35d9f218374/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60077ee5d9aa94b60587029322d35d9f218374/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=ac60077ee5d9aa94b60587029322d35d9f218374", "patch": "@@ -60,24 +60,12 @@ pub fn load_workspace(\n     };\n \n     let proc_macro_client = if load_config.with_proc_macro {\n-        let mut path = AbsPathBuf::assert(std::env::current_exe()?);\n-        let mut args = vec![\"proc-macro\"];\n-\n-        if let ProjectWorkspace::Cargo { sysroot, .. } | ProjectWorkspace::Json { sysroot, .. } =\n-            &ws\n-        {\n-            if let Some(sysroot) = sysroot.as_ref() {\n-                let standalone_server_name =\n-                    format!(\"rust-analyzer-proc-macro-srv{}\", std::env::consts::EXE_SUFFIX);\n-                let server_path = sysroot.root().join(\"libexec\").join(&standalone_server_name);\n-                if std::fs::metadata(&server_path).is_ok() {\n-                    path = server_path;\n-                    args = vec![];\n-                }\n-            }\n-        }\n+        let (server_path, args): (_, &[_]) = match ws.find_sysroot_proc_macro_srv() {\n+            Some(server_path) => (server_path, &[]),\n+            None => (AbsPathBuf::assert(std::env::current_exe()?), &[\"proc-macro\"]),\n+        };\n \n-        ProcMacroServer::spawn(path.clone(), args.clone()).map_err(|e| e.to_string())\n+        ProcMacroServer::spawn(server_path, args).map_err(|e| e.to_string())\n     } else {\n         Err(\"proc macro server disabled\".to_owned())\n     };"}, {"sha": "fcfe4be0b8cec9aa5578286e8e34e483e6341bb8", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ac60077ee5d9aa94b60587029322d35d9f218374/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60077ee5d9aa94b60587029322d35d9f218374/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=ac60077ee5d9aa94b60587029322d35d9f218374", "patch": "@@ -305,50 +305,24 @@ impl GlobalState {\n         let files_config = self.config.files();\n         let project_folders = ProjectFolders::new(&self.workspaces, &files_config.exclude);\n \n-        let standalone_server_name =\n-            format!(\"rust-analyzer-proc-macro-srv{}\", std::env::consts::EXE_SUFFIX);\n-\n         if self.proc_macro_clients.is_empty() {\n             if let Some((path, path_manually_set)) = self.config.proc_macro_srv() {\n                 tracing::info!(\"Spawning proc-macro servers\");\n                 self.proc_macro_clients = self\n                     .workspaces\n                     .iter()\n                     .map(|ws| {\n-                        let (path, args) = if path_manually_set {\n+                        let (path, args): (_, &[_]) = if path_manually_set {\n                             tracing::debug!(\n                                 \"Pro-macro server path explicitly set: {}\",\n                                 path.display()\n                             );\n-                            (path.clone(), vec![])\n+                            (path.clone(), &[])\n                         } else {\n-                            let mut sysroot_server = None;\n-                            if let ProjectWorkspace::Cargo { sysroot, .. }\n-                            | ProjectWorkspace::Json { sysroot, .. } = ws\n-                            {\n-                                if let Some(sysroot) = sysroot.as_ref() {\n-                                    let server_path = sysroot\n-                                        .root()\n-                                        .join(\"libexec\")\n-                                        .join(&standalone_server_name);\n-                                    if std::fs::metadata(&server_path).is_ok() {\n-                                        tracing::debug!(\n-                                            \"Sysroot proc-macro server exists at {}\",\n-                                            server_path.display()\n-                                        );\n-                                        sysroot_server = Some(server_path);\n-                                    } else {\n-                                        tracing::debug!(\n-                                            \"Sysroot proc-macro server does not exist at {}\",\n-                                            server_path.display()\n-                                        );\n-                                    }\n-                                }\n+                            match ws.find_sysroot_proc_macro_srv() {\n+                                Some(server_path) => (server_path, &[]),\n+                                None => (path.clone(), &[\"proc-macro\"]),\n                             }\n-                            sysroot_server.map_or_else(\n-                                || (path.clone(), vec![\"proc-macro\".to_owned()]),\n-                                |path| (path, vec![]),\n-                            )\n                         };\n \n                         tracing::info!(?args, \"Using proc-macro server at {}\", path.display(),);"}]}