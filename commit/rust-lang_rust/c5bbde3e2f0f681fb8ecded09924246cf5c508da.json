{"sha": "c5bbde3e2f0f681fb8ecded09924246cf5c508da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1YmJkZTNlMmYwZjY4MWZiOGVjZGVkMDk5MjQyNDZjZjVjNTA4ZGE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-10-04T16:53:52Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-10-25T14:03:07Z"}, "message": "ci: extract installing clang into a script", "tree": {"sha": "07a826a5fa8eab6c6b723876be0d69293d8721bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07a826a5fa8eab6c6b723876be0d69293d8721bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5bbde3e2f0f681fb8ecded09924246cf5c508da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl2zAJsACgkQPgar6Auq\n8ZzVBg/+PJm1W1kemCAZG5DZZiz8OduPfiHSNGO8M4MRrIFgN7Z5RN30tQWMenvr\nLTPhB9RoIgyoOV/hk357eqKySHKjeQaL1xZ5LtX+Ttiwbo+JJ1oIVpZd0a5f+gIf\n5x8dlvf5Z+WmwBSsFN5P2fruIEed8o0YlySh2xeaAvKwn0hF780kfLD/wGPtv6v3\n9jO+YHOzAXJwQqLqH9v4w5a8vUcMX8MTQgMS0ezlngF46DtFmDUboIcdgT2IsU8r\nyY11zO8qMLGBqDoPSf1RGPkpWLLdaOr6rQqaWWP9YWVvSe2X2QmJz9ZM0+T2QxQ3\nSBll1RDOyxaiPZKK4P3FNDahoimGvrj2HTtkEPKCSMuKT+7B66PYoxrpaRsYjTlP\nzpkqTL0O0OCo6XFG7W5RDa7kIUI1FuNv2i0U9WKyslkDZlrqc35wjd0EMUI5bAxt\nIJCPIfrVhV3kNaPXKAo8iYeV+xzGJ0jIc+ntKEoZL5iHccCsdbjQPw3ujljwhOUU\nufnZ8WsSMRv8p61hxRSFKNDI3YEEVw8ZqAmbeUj7+nnP1oLJ0suHLVhuKVEK64ep\n21qE3wZL1l9Ysj2WGpAeY9mxpRz0hD4D4JBdGciSw9ASCGXTptHc0OWTjIeQ5cB9\nZirSRifAyKr4u+tXPkrwiHlXzm6LpHvznRWaSzHEDVdMDFqnFnw=\n=TF6E\n-----END PGP SIGNATURE-----", "payload": "tree 07a826a5fa8eab6c6b723876be0d69293d8721bd\nparent a36077235e800cd2d46aa70151de8c7eac0ced5b\nauthor Pietro Albini <pietro@pietroalbini.org> 1570208032 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1572012187 +0200\n\nci: extract installing clang into a script\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5bbde3e2f0f681fb8ecded09924246cf5c508da", "html_url": "https://github.com/rust-lang/rust/commit/c5bbde3e2f0f681fb8ecded09924246cf5c508da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5bbde3e2f0f681fb8ecded09924246cf5c508da/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a36077235e800cd2d46aa70151de8c7eac0ced5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a36077235e800cd2d46aa70151de8c7eac0ced5b", "html_url": "https://github.com/rust-lang/rust/commit/a36077235e800cd2d46aa70151de8c7eac0ced5b"}], "stats": {"total": 105, "additions": 58, "deletions": 47}, "files": [{"sha": "14daf81b430755cda020c104ec9da8a8cc138f2c", "filename": "src/ci/azure-pipelines/steps/install-clang.yml", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a36077235e800cd2d46aa70151de8c7eac0ced5b/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-clang.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a36077235e800cd2d46aa70151de8c7eac0ced5b/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-clang.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-clang.yml?ref=a36077235e800cd2d46aa70151de8c7eac0ced5b", "patch": "@@ -1,46 +0,0 @@\n-steps:\n-\n-- bash: |\n-    set -e\n-    curl -f http://releases.llvm.org/7.0.0/clang+llvm-7.0.0-x86_64-apple-darwin.tar.xz | tar xJf -\n-\n-    export CC=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang\n-    echo \"##vso[task.setvariable variable=CC]$CC\"\n-\n-    export CXX=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang++\n-    echo \"##vso[task.setvariable variable=CXX]$CXX\"\n-\n-    # Configure `AR` specifically so rustbuild doesn't try to infer it as\n-    # `clang-ar` by accident.\n-    echo \"##vso[task.setvariable variable=AR]ar\"\n-  displayName: Install clang (OSX)\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))\n-\n-# If we're compiling for MSVC then we, like most other distribution builders,\n-# switch to clang as the compiler. This'll allow us eventually to enable LTO\n-# amongst LLVM and rustc. Note that we only do this on MSVC as I don't think\n-# clang has an output mode compatible with MinGW that we need. If it does we\n-# should switch to clang for MinGW as well!\n-#\n-# Note that the LLVM installer is an NSIS installer\n-#\n-# Original downloaded here came from\n-# http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe\n-# That installer was run through `wine` on Linux and then the resulting\n-# installation directory (found in `$HOME/.wine/drive_c/Program Files/LLVM`) was\n-# packaged up into a tarball. We've had issues otherwise that the installer will\n-# randomly hang, provide not a lot of useful information, pollute global state,\n-# etc. In general the tarball is just more confined and easier to deal with when\n-# working with various CI environments.\n-- bash: |\n-    set -e\n-    mkdir -p citools\n-    cd citools\n-    curl -f https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/LLVM-7.0.0-win64.tar.gz | tar xzf -\n-    echo \"##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]$RUST_CONFIGURE_ARGS --set llvm.clang-cl=`pwd`/clang-rust/bin/clang-cl.exe\"\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['MINGW_URL'],''))\n-  displayName: Install clang (Windows)\n-\n-# Note that we don't install clang on Linux since its compiler story is just so\n-# different. Each container has its own toolchain configured appropriately\n-# already."}, {"sha": "abf6164b8b797c9f8dd7269b4a77176bc20775cc", "filename": "src/ci/azure-pipelines/steps/run.yml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5bbde3e2f0f681fb8ecded09924246cf5c508da/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c5bbde3e2f0f681fb8ecded09924246cf5c508da/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml?ref=c5bbde3e2f0f681fb8ecded09924246cf5c508da", "patch": "@@ -57,7 +57,11 @@ steps:\n   displayName: Install sccache\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n-- template: install-clang.yml\n+- bash: src/ci/scripts/install-clang.sh\n+  env:\n+    AGENT_OS: $(Agent.OS)\n+  displayName: Install clang\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n \n # Switch to XCode 9.3 on OSX since it seems to be the last version that supports\n # i686-apple-darwin. We'll eventually want to upgrade this and it will probably"}, {"sha": "79cbc73a61a7164bc3c2fea0f0450de453ec308a", "filename": "src/ci/scripts/install-clang.sh", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c5bbde3e2f0f681fb8ecded09924246cf5c508da/src%2Fci%2Fscripts%2Finstall-clang.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c5bbde3e2f0f681fb8ecded09924246cf5c508da/src%2Fci%2Fscripts%2Finstall-clang.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-clang.sh?ref=c5bbde3e2f0f681fb8ecded09924246cf5c508da", "patch": "@@ -0,0 +1,42 @@\n+#!/bin/bash\n+# This script installs clang on the local machine. Note that we don't install\n+# clang on Linux since its compiler story is just so different. Each container\n+# has its own toolchain configured appropriately already.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if isMacOS; then\n+    curl -f https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/clang%2Bllvm-7.0.0-x86_64-apple-darwin.tar.xz | tar xJf -\n+\n+    ciCommandSetEnv CC \"$(pwd)/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang\"\n+    ciCommandSetEnv CXX \"$(pwd)/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang++\"\n+\n+    # Configure `AR` specifically so rustbuild doesn't try to infer it as\n+    # `clang-ar` by accident.\n+    ciCommandSetEnv AR \"ar\"\n+elif isWindows; then\n+    # If we're compiling for MSVC then we, like most other distribution builders,\n+    # switch to clang as the compiler. This'll allow us eventually to enable LTO\n+    # amongst LLVM and rustc. Note that we only do this on MSVC as I don't think\n+    # clang has an output mode compatible with MinGW that we need. If it does we\n+    # should switch to clang for MinGW as well!\n+    #\n+    # Note that the LLVM installer is an NSIS installer\n+    #\n+    # Original downloaded here came from\n+    # http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe\n+    # That installer was run through `wine` on Linux and then the resulting\n+    # installation directory (found in `$HOME/.wine/drive_c/Program Files/LLVM`) was\n+    # packaged up into a tarball. We've had issues otherwise that the installer will\n+    # randomly hang, provide not a lot of useful information, pollute global state,\n+    # etc. In general the tarball is just more confined and easier to deal with when\n+    # working with various CI environments.\n+\n+    mkdir -p citools\n+    cd citools\n+    curl -f \"${MIRRORS_BASE}/LLVM-7.0.0-win64.tar.gz\" | tar xzf -\n+    ciCommandSetEnv RUST_CONFIGURE_ARGS \"${RUST_CONFIGURE_ARGS} --set llvm.clang-cl=$(pwd)/clang-rust/bin/clang-cl.exe\"\n+fi"}, {"sha": "3d54c94de38f584ac7dbdad008e4c54f0832773e", "filename": "src/ci/shared.sh", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5bbde3e2f0f681fb8ecded09924246cf5c508da/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c5bbde3e2f0f681fb8ecded09924246cf5c508da/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=c5bbde3e2f0f681fb8ecded09924246cf5c508da", "patch": "@@ -55,3 +55,14 @@ function ciCommandAddPath {\n \n     echo \"##vso[task.prependpath]${path}\"\n }\n+\n+function ciCommandSetEnv {\n+    if [[ $# -ne 2 ]]; then\n+        echo \"usage: $0 <name> <value>\"\n+        exit 1\n+    fi\n+    name=\"$1\"\n+    value=\"$2\"\n+\n+    echo \"##vso[task.setvariable variable=${name}]${value}\"\n+}"}]}