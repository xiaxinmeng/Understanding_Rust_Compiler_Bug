{"sha": "6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MjJlYzNlYjRjYjM5YTNhMDc1YjgzNzNmY2M5NzQ0MjRlZjYzZTg=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-14T20:55:41Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-14T21:30:48Z"}, "message": "Treat bare vector and string literals as fixed length vecs. Closes #2922.", "tree": {"sha": "44f2e14581a43c52e77f45f9101f39e999537b88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44f2e14581a43c52e77f45f9101f39e999537b88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "html_url": "https://github.com/rust-lang/rust/commit/6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b2f4755f3de2af6a8038ca960801853b86eb7ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b2f4755f3de2af6a8038ca960801853b86eb7ad", "html_url": "https://github.com/rust-lang/rust/commit/7b2f4755f3de2af6a8038ca960801853b86eb7ad"}], "stats": {"total": 126, "additions": 26, "deletions": 100}, "files": [{"sha": "2ae17721e991974914b6a3d7c19a1bc372b100aa", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -38,14 +38,13 @@ fn check_item(sess: session, ast_map: ast_map::map, def_map: resolve::def_map,\n fn check_pat(p: @pat, &&_is_const: bool, v: visit::vt<bool>) {\n     fn is_str(e: @expr) -> bool {\n         alt e.node {\n-          expr_lit(@{node: lit_str(_), _}) |\n           expr_vstore(@{node: expr_lit(@{node: lit_str(_), _}), _},\n                       vstore_uniq) { true }\n           _ { false }\n         }\n     }\n     alt p.node {\n-      // Let through plain string literals here\n+      // Let through plain ~-string literals here\n       pat_lit(a) { if !is_str(a) { v.visit_expr(a, true, v); } }\n       pat_range(a, b) {\n         if !is_str(a) { v.visit_expr(a, true, v); }"}, {"sha": "08eabe493c7ccc9a353d4eab63bb8fc0494ce3b9", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 74, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -43,12 +43,10 @@ enum lint {\n     unused_imports,\n     while_true,\n     path_statement,\n-    old_vecs,\n+    implicit_copies,\n     unrecognized_warning,\n     non_implicitly_copyable_typarams,\n     vecs_not_implicitly_copyable,\n-    implicit_copies,\n-    old_strs,\n }\n \n // This is pretty unfortunate. We really want some sort of \"deriving Enum\"\n@@ -59,12 +57,10 @@ fn int_to_lint(i: int) -> lint {\n       1 { unused_imports }\n       2 { while_true }\n       3 { path_statement }\n-      4 { old_vecs }\n+      4 { implicit_copies }\n       5 { unrecognized_warning }\n       6 { non_implicitly_copyable_typarams }\n       7 { vecs_not_implicitly_copyable }\n-      8 { implicit_copies }\n-      9 { old_strs }\n     }\n }\n \n@@ -104,16 +100,6 @@ fn get_lint_dict() -> lint_dict {\n            desc: ~\"path statements with no effect\",\n            default: warn}),\n \n-        (~\"old_vecs\",\n-         @{lint: old_vecs,\n-           desc: ~\"old (deprecated) vectors\",\n-           default: error}),\n-\n-        (~\"old_strs\",\n-         @{lint: old_strs,\n-           desc: ~\"old (deprecated) strings\",\n-           default: error}),\n-\n         (~\"unrecognized_warning\",\n          @{lint: unrecognized_warning,\n            desc: ~\"unrecognized warning attribute\",\n@@ -321,7 +307,6 @@ fn check_item(i: @ast::item, cx: ty::ctxt) {\n     check_item_ctypes(cx, i);\n     check_item_while_true(cx, i);\n     check_item_path_statement(cx, i);\n-    check_item_old_vecs(cx, i);\n }\n \n // Take a visitor, and modify it so that it will not proceed past subitems.\n@@ -422,63 +407,6 @@ fn check_item_path_statement(cx: ty::ctxt, it: @ast::item) {\n     visit::visit_item(it, (), visit);\n }\n \n-fn check_item_old_vecs(cx: ty::ctxt, it: @ast::item) {\n-    let uses_vstore = int_hash();\n-\n-    let visit = item_stopping_visitor(visit::mk_simple_visitor(@{\n-\n-        visit_expr:fn@(e: @ast::expr) {\n-            alt e.node {\n-              ast::expr_vec(_, _)\n-              if ! uses_vstore.contains_key(e.id) {\n-                cx.sess.span_lint(\n-                    old_vecs, e.id, it.id,\n-                    e.span, ~\"deprecated vec expr\");\n-              }\n-              ast::expr_lit(@{node: ast::lit_str(_), span:_})\n-              if ! uses_vstore.contains_key(e.id) {\n-                cx.sess.span_lint(\n-                    old_strs, e.id, it.id,\n-                    e.span, ~\"deprecated str expr\");\n-              }\n-\n-              ast::expr_vstore(@inner, _) {\n-                uses_vstore.insert(inner.id, true);\n-              }\n-              _ { }\n-            }\n-        },\n-\n-        visit_ty: fn@(t: @ast::ty) {\n-            alt t.node {\n-              ast::ty_vec(_)\n-              if ! uses_vstore.contains_key(t.id) {\n-                cx.sess.span_lint(\n-                    old_vecs, t.id, it.id,\n-                    t.span, ~\"deprecated vec type\");\n-              }\n-              ast::ty_path(@{span: _, global: _, idents: ids,\n-                             rp: none, types: _}, _)\n-              if ids == ~[@~\"str\"] && (! uses_vstore.contains_key(t.id)) {\n-                cx.sess.span_lint(\n-                    old_strs, t.id, it.id,\n-                    t.span, ~\"deprecated str type\");\n-              }\n-              ast::ty_fixed_length(inner, _) |\n-              ast::ty_box({ty: inner, _}) |\n-              ast::ty_uniq({ty: inner, _}) |\n-              ast::ty_rptr(_, {ty: inner, _}) {\n-                uses_vstore.insert(inner.id, true);\n-              }\n-              _ { }\n-            }\n-        }\n-\n-        with *visit::default_simple_visitor()\n-    }));\n-    visit::visit_item(it, (), visit);\n-}\n-\n fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n \n     let v = visit::mk_simple_visitor(@{"}, {"sha": "55715433d5ce29adbbbccc5d06508cf97f32ecc0", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -47,7 +47,6 @@ fn trans_opt(bcx: block, o: opt) -> opt_result {\n     alt o {\n       lit(l) {\n         alt l.node {\n-          ast::expr_lit(@{node: ast::lit_str(s), _}) |\n           ast::expr_vstore(@{node: ast::expr_lit(\n               @{node: ast::lit_str(s), _}), _},\n                            ast::vstore_uniq) {"}, {"sha": "02b3733eaf76a7167af7b453a115657cef5da5a6", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -1447,7 +1447,8 @@ fn trans_lit(cx: block, e: @ast::expr, lit: ast::lit, dest: dest) -> block {\n     let _icx = cx.insn_ctxt(~\"trans_lit\");\n     if dest == ignore { ret cx; }\n     alt lit.node {\n-      ast::lit_str(s) { tvec::trans_estr(cx, s, ast::vstore_uniq, dest) }\n+      ast::lit_str(s) { tvec::trans_estr(cx, s,\n+                                         ast::vstore_fixed(none), dest) }\n       _ {\n         store_in_dest(cx, trans_crate_lit(cx.ccx(), e, lit), dest)\n       }\n@@ -3542,7 +3543,8 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n           ast::expr_vstore(e, v) { ret tvec::trans_vstore(bcx, e, v, dest); }\n           ast::expr_lit(lit) { ret trans_lit(bcx, e, *lit, dest); }\n           ast::expr_vec(args, _) {\n-            ret tvec::trans_evec(bcx, args, ast::vstore_uniq, e.id, dest);\n+            ret tvec::trans_evec(bcx, args, ast::vstore_fixed(none),\n+                                 e.id, dest);\n           }\n           ast::expr_binary(op, lhs, rhs) {\n             ret trans_binary(bcx, op, lhs, rhs, dest, e);"}, {"sha": "c09616c264a2c489c8811d3c0a783d58755a34b7", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -611,7 +611,7 @@ fn check_lit(fcx: @fn_ctxt, lit: @ast::lit) -> ty::t {\n     let tcx = fcx.ccx.tcx;\n \n     alt lit.node {\n-      ast::lit_str(_) { ty::mk_estr(tcx, ty::vstore_uniq) }\n+      ast::lit_str(s) { ty::mk_estr(tcx, ty::vstore_fixed(s.len())) }\n       ast::lit_int(_, t) { ty::mk_mach_int(tcx, t) }\n       ast::lit_uint(_, t) { ty::mk_mach_uint(tcx, t) }\n       ast::lit_int_unsuffixed(_) {\n@@ -1524,7 +1524,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         let t: ty::t = fcx.infcx.next_ty_var();\n         for args.each |e| { bot |= check_expr_with(fcx, e, t); }\n         let typ = ty::mk_evec(tcx, {ty: t, mutbl: mutbl},\n-                              ty::vstore_uniq);\n+                              ty::vstore_fixed(args.len()));\n         fcx.write_ty(id, typ);\n       }\n       ast::expr_tup(elts) {"}, {"sha": "b9c1c6f0a1e8bcbcdbb02aaa45d68d039fa2f0be", "filename": "src/test/compile-fail/alt-range-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Falt-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Falt-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-range-fail.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -9,11 +9,11 @@ fn main() {\n     };\n \n     alt \"wow\" {\n-      \"wow\" to \"woow\" { }\n+      \"bar\" to \"foo\" { }\n     };\n \n     alt 5u {\n       'c' to 100u { }\n       _ { }\n     };\n-}\n\\ No newline at end of file\n+}"}, {"sha": "29dd7dd0a219ee6948ae1aded1b6494515667d50", "filename": "src/test/compile-fail/binop-bitxor-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -1,3 +1,3 @@\n // error-pattern:^ cannot be applied to type `~str`\n \n-fn main() { let x = \"a\" ^ \"b\"; }\n+fn main() { let x = ~\"a\" ^ ~\"b\"; }"}, {"sha": "13f857a5a13aa3fac95799bb764e3fe267fe7f0f", "filename": "src/test/compile-fail/issue-2063.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -7,7 +7,7 @@ enum t = @t; //~ ERROR this type cannot be instantiated\n // the compiler to attempt autoderef and then\n // try to resolve the method.\n impl methods for t {\n-    fn to_str() -> ~str { \"t\" }\n+    fn to_str() -> ~str { ~\"t\" }\n }\n \n fn new_t(x: t) {"}, {"sha": "eea621c5189c44fcda8e9f712580236aaebe059a", "filename": "src/test/compile-fail/minus-string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fminus-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fminus-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fminus-string.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -1,3 +1,3 @@\n // error-pattern:cannot apply unary operator `-` to type `~str`\n \n-fn main() { -\"foo\"; }\n+fn main() { -~\"foo\"; }"}, {"sha": "9ea339641b3f24be9fc8a121ea189e02ad69db27", "filename": "src/test/compile-fail/missing-do.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -3,7 +3,7 @@\n fn foo(f: fn()) { f() }\n \n fn main() {\n-    \"\" || 42; //~ ERROR binary operation || cannot be applied to type `~str`\n+    ~\"\" || 42; //~ ERROR binary operation || cannot be applied to type `~str`\n     foo || {}; //~ ERROR binary operation || cannot be applied to type `extern fn(fn())`\n     //~^ NOTE did you forget the 'do' keyword for the call?\n }"}, {"sha": "02fcc3bf8c549a90aca38bf70638a7438ce1aeb3", "filename": "src/test/compile-fail/mutable-huh-variance-vec1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     let v: ~[mut ~[int]] = ~[mut ~[0]];\n \n     fn f(&&v: ~[mut ~[const int]]) {\n-        v[0] = [mut 3]\n+        v[0] = ~[mut 3]\n     }\n \n     f(v); //~ ERROR (values differ in mutability)"}, {"sha": "74b9b5daf3e2e15814fc89f573084511f15675bb", "filename": "src/test/compile-fail/mutable-huh-variance-vec2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     let v: ~[mut ~[mut int]] = ~[mut ~[mut 0]];\n \n     fn f(&&v: ~[mut ~[const int]]) {\n-        v[0] = [3]\n+        v[0] = ~[3]\n     }\n \n     f(v); //~ ERROR (values differ in mutability)"}, {"sha": "b7bf33570baf4374bdaa5b933ee880699b47dcc7", "filename": "src/test/compile-fail/mutable-huh-variance-vec4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -8,18 +8,18 @@ fn main() {\n     let x = ~[mut ~[mut 0]];\n \n     fn f(&&v: ~[mut ~[int]]) {\n-        v[0] = [3]\n+        v[0] = ~[3]\n     }\n \n     fn g(&&v: ~[const ~[const int]]) {\n     }\n \n     fn h(&&v: ~[mut ~[mut int]]) {\n-        v[0] = [mut 3]\n+        v[0] = ~[mut 3]\n     }\n \n     fn i(&&v: ~[mut ~[const int]]) {\n-        v[0] = [mut 3]\n+        v[0] = ~[mut 3]\n     }\n \n     fn j(&&v: ~[~[const int]]) {"}, {"sha": "37490724a23f1be052b7c5ea3520d153f864013b", "filename": "src/test/compile-fail/non-exhaustive-match-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -6,8 +6,8 @@ enum u { c, d }\n fn main() {\n   let x = a(c);\n   alt x {\n-      a(d) { fail \"hello\"; }\n-      b { fail \"goodbye\"; }\n+      a(d) { fail ~\"hello\"; }\n+      b { fail ~\"goodbye\"; }\n     }\n }\n "}, {"sha": "bd291b3fdedcef678d66cf9dc8d87569f2e85145", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -8,8 +8,8 @@ class foo {\n }\n \n fn main() {\n-  let cat = \"kitty\";\n+  let cat = ~\"kitty\";\n   let po = comm::port();         //~ ERROR missing `send`\n   let ch = comm::chan(po);       //~ ERROR missing `send`\n   comm::send(ch, foo(42, @cat)); //~ ERROR missing `send`\n-}\n\\ No newline at end of file\n+}"}, {"sha": "8f39817d0c38b509c66068e840fda4671e52d02b", "filename": "src/test/run-pass/macro-by-example-2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Frun-pass%2Fmacro-by-example-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6822ec3eb4cb39a3a075b8373fcc974424ef63e8/src%2Ftest%2Frun-pass%2Fmacro-by-example-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-by-example-2.rs?ref=6822ec3eb4cb39a3a075b8373fcc974424ef63e8", "patch": "@@ -1,8 +1,6 @@\n+// xfail-test\n // I can't for the life of me manage to untangle all of the brackets\n-// in this test. I am just suppessing the old_vec diagnostic. This\n-// doesn't actually care what sort of vector it uses, so if we change\n-// what vectors mean, it shouldn't mind...\n-#[warn(no_old_vecs)];\n+// in this test, so I am xfailing it...\n \n fn main() {\n     #macro[[#zip_or_unzip[[x, ...], [y, ...]], [[x, y], ...]],"}]}