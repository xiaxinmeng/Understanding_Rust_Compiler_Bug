{"sha": "313dd37acb78b9fba701e9aebb0a01cb70b98db1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxM2RkMzdhY2I3OGI5ZmJhNzAxZTlhZWJiMGEwMWNiNzBiOThkYjE=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-01T19:38:57Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-01T19:48:49Z"}, "message": "Better error messages in report_use_of_moved_value; close #7286", "tree": {"sha": "03aa8c0a4fb2ba99fd90362df80839df5550e194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03aa8c0a4fb2ba99fd90362df80839df5550e194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/313dd37acb78b9fba701e9aebb0a01cb70b98db1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/313dd37acb78b9fba701e9aebb0a01cb70b98db1", "html_url": "https://github.com/rust-lang/rust/commit/313dd37acb78b9fba701e9aebb0a01cb70b98db1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/313dd37acb78b9fba701e9aebb0a01cb70b98db1/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b44953b8a3dcf97120e0cc4ed12ce115ce90e83e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b44953b8a3dcf97120e0cc4ed12ce115ce90e83e", "html_url": "https://github.com/rust-lang/rust/commit/b44953b8a3dcf97120e0cc4ed12ce115ce90e83e"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "2e3813f57e081ad315378a0821a8a3407ada64fc", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/313dd37acb78b9fba701e9aebb0a01cb70b98db1/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313dd37acb78b9fba701e9aebb0a01cb70b98db1/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=313dd37acb78b9fba701e9aebb0a01cb70b98db1", "patch": "@@ -538,12 +538,13 @@ impl BorrowckCtxt {\n \n             move_data::MoveExpr(expr) => {\n                 let expr_ty = ty::expr_ty_adjusted(self.tcx, expr);\n+                let suggestion = move_suggestion(self.tcx, expr_ty,\n+                        \"moved by default (use `copy` to override)\");\n                 self.tcx.sess.span_note(\n                     expr.span,\n-                    fmt!(\"`%s` moved here because it has type `%s`, \\\n-                          which is moved by default (use `copy` to override)\",\n+                    fmt!(\"`%s` moved here because it has type `%s`, which is %s\",\n                          self.loan_path_to_str(moved_lp),\n-                         expr_ty.user_string(self.tcx)));\n+                         expr_ty.user_string(self.tcx), suggestion));\n             }\n \n             move_data::MovePat(pat) => {\n@@ -557,12 +558,28 @@ impl BorrowckCtxt {\n             }\n \n             move_data::Captured(expr) => {\n+                let expr_ty = ty::expr_ty_adjusted(self.tcx, expr);\n+                let suggestion = move_suggestion(self.tcx, expr_ty,\n+                        \"moved by default (make a copy and \\\n+                         capture that instead to override)\");\n                 self.tcx.sess.span_note(\n                     expr.span,\n-                    fmt!(\"`%s` moved into closure environment here \\\n-                          because its type is moved by default \\\n-                          (make a copy and capture that instead to override)\",\n-                         self.loan_path_to_str(moved_lp)));\n+                    fmt!(\"`%s` moved into closure environment here because it \\\n+                          has type `%s`, which is %s\",\n+                         self.loan_path_to_str(moved_lp),\n+                         expr_ty.user_string(self.tcx), suggestion));\n+            }\n+        }\n+\n+        fn move_suggestion(tcx: ty::ctxt, ty: ty::t, default_msg: &'static str)\n+                          -> &'static str {\n+            match ty::get(ty).sty {\n+                ty::ty_closure(ref cty) if cty.sigil == ast::BorrowedSigil =>\n+                    \"a non-copyable stack closure (capture it in a new closure, \\\n+                     e.g. `|x| f(x)`, to override)\",\n+                _ if !ty::type_is_copyable(tcx, ty) =>\n+                    \"non-copyable (perhaps you meant to use clone()?)\",\n+                _ => default_msg,\n             }\n         }\n     }"}]}