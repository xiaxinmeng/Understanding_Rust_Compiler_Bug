{"sha": "3a515aec6734a13344bfc100a453f6de3c4ed2d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNTE1YWVjNjczNGExMzM0NGJmYzEwMGE0NTNmNmRlM2M0ZWQyZDY=", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-06T15:46:20Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-12T10:02:36Z"}, "message": "Use a more accurate span on assoc types WF checks", "tree": {"sha": "0c5bdcd7a416f3091c7b6f1464f9cf71d44fcd62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c5bdcd7a416f3091c7b6f1464f9cf71d44fcd62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a515aec6734a13344bfc100a453f6de3c4ed2d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a515aec6734a13344bfc100a453f6de3c4ed2d6", "html_url": "https://github.com/rust-lang/rust/commit/3a515aec6734a13344bfc100a453f6de3c4ed2d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a515aec6734a13344bfc100a453f6de3c4ed2d6/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb2226b1f174f3cc644275ef8663be6295a7f704", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb2226b1f174f3cc644275ef8663be6295a7f704", "html_url": "https://github.com/rust-lang/rust/commit/eb2226b1f174f3cc644275ef8663be6295a7f704"}], "stats": {"total": 106, "additions": 54, "deletions": 52}, "files": [{"sha": "b82437096592807b823b2f966ca3cf1bf80cb7da", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -194,12 +194,13 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let trait_item = tcx.hir().expect_trait_item(hir_id);\n \n-    let method_sig = match trait_item.kind {\n-        hir::TraitItemKind::Fn(ref sig, _) => Some(sig),\n-        _ => None,\n+    let (method_sig, span) = match trait_item.kind {\n+        hir::TraitItemKind::Fn(ref sig, _) => (Some(sig), trait_item.span),\n+        hir::TraitItemKind::Type(_bounds, Some(ty)) => (None, ty.span),\n+        _ => (None, trait_item.span),\n     };\n     check_object_unsafe_self_trait_by_name(tcx, &trait_item);\n-    check_associated_item(tcx, trait_item.hir_id(), trait_item.span, method_sig);\n+    check_associated_item(tcx, trait_item.hir_id(), span, method_sig);\n }\n \n fn could_be_self(trait_def_id: LocalDefId, ty: &hir::Ty<'_>) -> bool {\n@@ -268,12 +269,13 @@ pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let impl_item = tcx.hir().expect_impl_item(hir_id);\n \n-    let method_sig = match impl_item.kind {\n-        hir::ImplItemKind::Fn(ref sig, _) => Some(sig),\n-        _ => None,\n+    let (method_sig, span) = match impl_item.kind {\n+        hir::ImplItemKind::Fn(ref sig, _) => (Some(sig), impl_item.span),\n+        hir::ImplItemKind::TyAlias(ty) => (None, ty.span),\n+        _ => (None, impl_item.span),\n     };\n \n-    check_associated_item(tcx, impl_item.hir_id(), impl_item.span, method_sig);\n+    check_associated_item(tcx, impl_item.hir_id(), span, method_sig);\n }\n \n fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {"}, {"sha": "008eddcb29dbcc121770f7fa6681913bea60960d", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,14 +1,14 @@\n error[E0275]: overflow evaluating the requirement `<bool as Tr>::B == _`\n-  --> $DIR/defaults-cyclic-fail-1.rs:26:5\n+  --> $DIR/defaults-cyclic-fail-1.rs:26:14\n    |\n LL |     type A = Box<Self::B>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^\n \n error[E0275]: overflow evaluating the requirement `<usize as Tr>::A == _`\n-  --> $DIR/defaults-cyclic-fail-1.rs:32:5\n+  --> $DIR/defaults-cyclic-fail-1.rs:32:14\n    |\n LL |     type B = &'static Self::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d0fbab077153f4bbf974ed21d3dc48722df8038b", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,14 +1,14 @@\n error[E0275]: overflow evaluating the requirement `<bool as Tr>::B == _`\n-  --> $DIR/defaults-cyclic-fail-2.rs:27:5\n+  --> $DIR/defaults-cyclic-fail-2.rs:27:14\n    |\n LL |     type A = Box<Self::B>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^\n \n error[E0275]: overflow evaluating the requirement `<usize as Tr>::A == _`\n-  --> $DIR/defaults-cyclic-fail-2.rs:33:5\n+  --> $DIR/defaults-cyclic-fail-2.rs:33:14\n    |\n LL |     type B = &'static Self::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "345e2b3fcb12ca1fcf8d61b2d920b455462874dc", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,11 +1,11 @@\n error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n-  --> $DIR/projection-bound-cycle-generic.rs:44:5\n+  --> $DIR/projection-bound-cycle-generic.rs:44:18\n    |\n LL | struct OnlySized<T> where T: Sized { f: T }\n    |                  - required by this bound in `OnlySized`\n ...\n LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "eefc09fa78863bfcfbd1427e4f5f306562d35081", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,11 +1,11 @@\n error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n-  --> $DIR/projection-bound-cycle.rs:46:5\n+  --> $DIR/projection-bound-cycle.rs:46:18\n    |\n LL | struct OnlySized<T> where T: Sized { f: T }\n    |                  - required by this bound in `OnlySized`\n ...\n LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "67f6b3081bb3042603362155ebce71f855f7bace", "filename": "src/test/ui/issues/issue-21946.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fissues%2Fissue-21946.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fissues%2Fissue-21946.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21946.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,8 +1,8 @@\n error[E0275]: overflow evaluating the requirement `<FooStruct as Foo>::A == _`\n-  --> $DIR/issue-21946.rs:8:5\n+  --> $DIR/issue-21946.rs:8:14\n    |\n LL |     type A = <FooStruct as Foo>::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0b568b30e08d8dab9e7e3c6e25dc835746f4c4f0", "filename": "src/test/ui/issues/issue-23122-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,8 +1,8 @@\n error[E0275]: overflow evaluating the requirement `<GetNext<T> as Next>::Next == _`\n-  --> $DIR/issue-23122-1.rs:10:5\n+  --> $DIR/issue-23122-1.rs:10:17\n    |\n LL |     type Next = <GetNext<T> as Next>::Next;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "68a95dc265e821bc155fd880e1d0405336f16f89", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,8 +1,8 @@\n error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Sized`\n-  --> $DIR/issue-23122-2.rs:9:5\n+  --> $DIR/issue-23122-2.rs:9:17\n    |\n LL |     type Next = <GetNext<T::Next> as Next>::Next;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_23122_2`)\n note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`"}, {"sha": "09b51fe0568707684e4c7d9cd0edf748da12ad8d", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region-rev.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,8 +1,8 @@\n error[E0491]: in type `&'a Foo<'b>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-region-rev.rs:17:9\n+  --> $DIR/regions-outlives-nominal-type-region-rev.rs:17:20\n    |\n LL |         type Out = &'a Foo<'b>;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n   --> $DIR/regions-outlives-nominal-type-region-rev.rs:16:10"}, {"sha": "957a9d6dd3c1243876fc9547da9b2a09d6656fef", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,8 +1,8 @@\n error[E0491]: in type `&'a Foo<'b>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-region.rs:17:9\n+  --> $DIR/regions-outlives-nominal-type-region.rs:17:20\n    |\n LL |         type Out = &'a Foo<'b>;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n   --> $DIR/regions-outlives-nominal-type-region.rs:16:10"}, {"sha": "1589f93d90c8ea184b08b1bb5287292da796c0ad", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type-rev.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,8 +1,8 @@\n error[E0491]: in type `&'a Foo<&'b i32>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-type-rev.rs:17:9\n+  --> $DIR/regions-outlives-nominal-type-type-rev.rs:17:20\n    |\n LL |         type Out = &'a Foo<&'b i32>;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n   --> $DIR/regions-outlives-nominal-type-type-rev.rs:16:10"}, {"sha": "4bfaa1aac782aaa51dd9452cf3fca5e849e3419e", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,8 +1,8 @@\n error[E0491]: in type `&'a Foo<&'b i32>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-type.rs:17:9\n+  --> $DIR/regions-outlives-nominal-type-type.rs:17:20\n    |\n LL |         type Out = &'a Foo<&'b i32>;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n   --> $DIR/regions-outlives-nominal-type-type.rs:16:10"}, {"sha": "1b1a2f7b043b76ea150d981b883303598e6d81ad", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-struct-not-wf.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,18 +1,18 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-struct-not-wf.rs:13:5\n+  --> $DIR/regions-struct-not-wf.rs:13:16\n    |\n LL | impl<'a, T> Trait<'a, T> for usize {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a T;\n-   |     ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'a T` does not outlive the data it points at\n+   |                ^^^^^ ...so that the reference type `&'a T` does not outlive the data it points at\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-struct-not-wf.rs:21:5\n+  --> $DIR/regions-struct-not-wf.rs:21:16\n    |\n LL | impl<'a, T> Trait<'a, T> for u32 {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = RefOk<'a, T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n+   |                ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n   --> $DIR/regions-struct-not-wf.rs:16:20\n@@ -21,10 +21,10 @@ LL | struct RefOk<'a, T:'a> {\n    |                    ^^\n \n error[E0491]: in type `&'a &'b T`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-struct-not-wf.rs:25:5\n+  --> $DIR/regions-struct-not-wf.rs:25:16\n    |\n LL |     type Out = &'a &'b T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined on the impl at 24:6\n   --> $DIR/regions-struct-not-wf.rs:24:6"}, {"sha": "10a39a4914770d1d7890b2589adaf81cb694716f", "filename": "src/test/ui/specialization/issue-51892.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,8 +1,8 @@\n error: unconstrained generic constant\n-  --> $DIR/issue-51892.rs:15:5\n+  --> $DIR/issue-51892.rs:15:17\n    |\n LL |     type Type = [u8; std::mem::size_of::<<T as Trait>::Type>()];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<<T as Trait>::Type>()]:`\n "}, {"sha": "272a87535d2508126688c102df0b8cc8c10f0197", "filename": "src/test/ui/wf/hir-wf-check-erase-regions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `&T` is not an iterator\n-  --> $DIR/hir-wf-check-erase-regions.rs:7:5\n+  --> $DIR/hir-wf-check-erase-regions.rs:7:21\n    |\n LL |     type IntoIter = std::iter::Flatten<std::slice::Iter<'a, T>>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `&T` is not an iterator\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `&T` is not an iterator\n    |\n   ::: $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL\n    |"}, {"sha": "3f324190b7b6bcd1fff6b40646c5feb5c361342f", "filename": "src/test/ui/wf/wf-impl-associated-type-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,10 +1,10 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/wf-impl-associated-type-region.rs:10:5\n+  --> $DIR/wf-impl-associated-type-region.rs:10:16\n    |\n LL | impl<'a, T> Foo<'a> for T {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Bar = &'a T;\n-   |     ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'a T` does not outlive the data it points at\n+   |                ^^^^^ ...so that the reference type `&'a T` does not outlive the data it points at\n \n error: aborting due to previous error\n "}, {"sha": "68c1e9091d753d653d07e8c165a4be0ab1b125ec", "filename": "src/test/ui/wf/wf-outlives-ty-in-fn-or-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,18 +1,18 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:9:5\n+  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:9:16\n    |\n LL | impl<'a, T> Trait<'a, T> for usize {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a fn(T);\n-   |     ^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'a fn(T)` does not outlive the data it points at\n+   |                ^^^^^^^^^ ...so that the reference type `&'a fn(T)` does not outlive the data it points at\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:19:5\n+  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:19:16\n    |\n LL | impl<'a, T> Trait<'a, T> for u32 {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a dyn Baz<T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'a (dyn Baz<T> + 'a)` does not outlive the data it points at\n+   |                ^^^^^^^^^^^^^^ ...so that the reference type `&'a (dyn Baz<T> + 'a)` does not outlive the data it points at\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6e2cc8aba4b72d104a97dc891cc3438978223a02", "filename": "src/test/ui/wf/wf-trait-associated-type-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a515aec6734a13344bfc100a453f6de3c4ed2d6/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-region.stderr?ref=3a515aec6734a13344bfc100a453f6de3c4ed2d6", "patch": "@@ -1,8 +1,8 @@\n error[E0309]: the associated type `<Self as SomeTrait<'a>>::Type1` may not live long enough\n-  --> $DIR/wf-trait-associated-type-region.rs:9:5\n+  --> $DIR/wf-trait-associated-type-region.rs:9:18\n    |\n LL |     type Type2 = &'a Self::Type1;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<Self as SomeTrait<'a>>::Type1: 'a`...\n    = note: ...so that the reference type `&'a <Self as SomeTrait<'a>>::Type1` does not outlive the data it points at"}]}