{"sha": "301fc070ff4506df463332b45066fa5e2ad45803", "node_id": "C_kwDOAAsO6NoAKDMwMWZjMDcwZmY0NTA2ZGY0NjMzMzJiNDUwNjZmYTVlMmFkNDU4MDM", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-03-14T18:46:12Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-03-27T17:01:29Z"}, "message": "diagnostics: suggest missing comma in bad FRU syntax\n\nFixes #51103", "tree": {"sha": "215c956894bd35dde5eabf54c55fb20272985418", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/215c956894bd35dde5eabf54c55fb20272985418"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/301fc070ff4506df463332b45066fa5e2ad45803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/301fc070ff4506df463332b45066fa5e2ad45803", "html_url": "https://github.com/rust-lang/rust/commit/301fc070ff4506df463332b45066fa5e2ad45803", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/301fc070ff4506df463332b45066fa5e2ad45803/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "100f12d17026fccfc5d80527b5976dd66b228b13", "url": "https://api.github.com/repos/rust-lang/rust/commits/100f12d17026fccfc5d80527b5976dd66b228b13", "html_url": "https://github.com/rust-lang/rust/commit/100f12d17026fccfc5d80527b5976dd66b228b13"}], "stats": {"total": 116, "additions": 111, "deletions": 5}, "files": [{"sha": "e5784259ce8750357d224648966a19bd7c4c6bf2", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 55, "deletions": 5, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/301fc070ff4506df463332b45066fa5e2ad45803/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/301fc070ff4506df463332b45066fa5e2ad45803/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=301fc070ff4506df463332b45066fa5e2ad45803", "patch": "@@ -32,6 +32,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, HirId, QPath};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -1556,7 +1557,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if inaccessible_remaining_fields {\n                 self.report_inaccessible_fields(adt_ty, span);\n             } else {\n-                self.report_missing_fields(adt_ty, span, remaining_fields);\n+                self.report_missing_fields(\n+                    adt_ty,\n+                    span,\n+                    remaining_fields,\n+                    variant,\n+                    ast_fields,\n+                    substs,\n+                );\n             }\n         }\n     }\n@@ -1590,6 +1598,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         adt_ty: Ty<'tcx>,\n         span: Span,\n         remaining_fields: FxHashMap<Ident, (usize, &ty::FieldDef)>,\n+        variant: &'tcx ty::VariantDef,\n+        ast_fields: &'tcx [hir::ExprField<'tcx>],\n+        substs: SubstsRef<'tcx>,\n     ) {\n         let len = remaining_fields.len();\n \n@@ -1615,7 +1626,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n \n-        struct_span_err!(\n+        let mut err = struct_span_err!(\n             self.tcx.sess,\n             span,\n             E0063,\n@@ -1624,9 +1635,48 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             remaining_fields_names,\n             truncated_fields_error,\n             adt_ty\n-        )\n-        .span_label(span, format!(\"missing {}{}\", remaining_fields_names, truncated_fields_error))\n-        .emit();\n+        );\n+        err.span_label(\n+            span,\n+            format!(\"missing {}{}\", remaining_fields_names, truncated_fields_error),\n+        );\n+\n+        // If the last field is a range literal, but it isn't supposed to be, then they probably\n+        // meant to use functional update syntax.\n+        //\n+        // I don't use 'is_range_literal' because only double-sided, half-open ranges count.\n+        if let Some((\n+            last,\n+            ExprKind::Struct(\n+                QPath::LangItem(LangItem::Range, ..),\n+                &[ref range_start, ref range_end],\n+                _,\n+            ),\n+        )) = ast_fields.last().map(|last| (last, &last.expr.kind)) &&\n+        let variant_field =\n+            variant.fields.iter().find(|field| field.ident(self.tcx) == last.ident) &&\n+        let range_def_id = self.tcx.lang_items().range_struct() &&\n+        variant_field\n+            .and_then(|field| field.ty(self.tcx, substs).ty_adt_def())\n+            .map(|adt| adt.did())\n+            != range_def_id\n+        {\n+            let instead = self\n+                .tcx\n+                .sess\n+                .source_map()\n+                .span_to_snippet(range_end.expr.span)\n+                .map(|s| format!(\" from `{s}`\"))\n+                .unwrap_or(String::new());\n+            err.span_suggestion(\n+                range_start.span.shrink_to_hi(),\n+                &format!(\"to set the remaining fields{instead}, separate the last named field with a comma\"),\n+                \",\".to_string(),\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+\n+        err.emit();\n     }\n \n     /// Report an error for a struct field expression when there are invisible fields."}, {"sha": "48144cd1ce2d1c97f06a261b9a7315e4b0d92d92", "filename": "src/test/ui/structs/struct-record-suggestion.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/301fc070ff4506df463332b45066fa5e2ad45803/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/301fc070ff4506df463332b45066fa5e2ad45803/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.fixed?ref=301fc070ff4506df463332b45066fa5e2ad45803", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#[derive(Debug, Default, Eq, PartialEq)]\n+struct A {\n+    b: u32,\n+    c: u64,\n+    d: usize,\n+}\n+\n+fn main() {\n+    let q = A { c: 5, .. Default::default() };\n+    //~^ ERROR mismatched types\n+    //~| ERROR missing fields\n+    //~| HELP separate the last named field with a comma\n+    let r = A { c: 5, .. Default::default() };\n+    assert_eq!(q, r);\n+}"}, {"sha": "6d169d5c6dbfd08c1e1a9e9725fb0c761a1f2ca6", "filename": "src/test/ui/structs/struct-record-suggestion.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/301fc070ff4506df463332b45066fa5e2ad45803/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/301fc070ff4506df463332b45066fa5e2ad45803/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.rs?ref=301fc070ff4506df463332b45066fa5e2ad45803", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#[derive(Debug, Default, Eq, PartialEq)]\n+struct A {\n+    b: u32,\n+    c: u64,\n+    d: usize,\n+}\n+\n+fn main() {\n+    let q = A { c: 5 .. Default::default() };\n+    //~^ ERROR mismatched types\n+    //~| ERROR missing fields\n+    //~| HELP separate the last named field with a comma\n+    let r = A { c: 5, .. Default::default() };\n+    assert_eq!(q, r);\n+}"}, {"sha": "e5bd03117b9feabca58119c0ef34beef3c3f23ff", "filename": "src/test/ui/structs/struct-record-suggestion.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/301fc070ff4506df463332b45066fa5e2ad45803/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/301fc070ff4506df463332b45066fa5e2ad45803/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr?ref=301fc070ff4506df463332b45066fa5e2ad45803", "patch": "@@ -0,0 +1,24 @@\n+error[E0308]: mismatched types\n+  --> $DIR/struct-record-suggestion.rs:10:20\n+   |\n+LL |     let q = A { c: 5 .. Default::default() };\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found struct `std::ops::Range`\n+   |\n+   = note: expected type `u64`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error[E0063]: missing fields `b` and `d` in initializer of `A`\n+  --> $DIR/struct-record-suggestion.rs:10:13\n+   |\n+LL |     let q = A { c: 5 .. Default::default() };\n+   |             ^ missing `b` and `d`\n+   |\n+help: to set the remaining fields from `Default::default()`, separate the last named field with a comma\n+   |\n+LL |     let q = A { c: 5, .. Default::default() };\n+   |                     +\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0063, E0308.\n+For more information about an error, try `rustc --explain E0063`."}]}