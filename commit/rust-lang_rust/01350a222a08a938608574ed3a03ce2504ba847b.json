{"sha": "01350a222a08a938608574ed3a03ce2504ba847b", "node_id": "C_kwDOAAsO6NoAKDAxMzUwYTIyMmEwOGE5Mzg2MDg1NzRlZDNhMDNjZTI1MDRiYTg0N2I", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2022-02-02T07:17:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-02T07:17:17Z"}, "message": "Merge portable-simd#203 - deantvv/add-spectral-norm\n\nAdd spectral_norm example from packed_simd", "tree": {"sha": "c779bdbdb7c84953ce09a12b2ccfc069ca8b6927", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c779bdbdb7c84953ce09a12b2ccfc069ca8b6927"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01350a222a08a938608574ed3a03ce2504ba847b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+i/9CRBK7hj4Ov3rIwAAtY8IAIol0Rxt1xGzVJbMwLA3gh9V\n00HjVY1VUmbHOE5DvUbCQ5prDPk4KTD3JMsEZCqnyOGPkqrVAOH0O+ThiPJcPwPi\nkplj0fKRGzPPTnhR8HfhusB6mJA1pGOPtYbM2zs/1GOaJIhM4P6997JOti257p9Z\nVueLpouKGvd0RoBZtcPEZER4pNzMZKgNIPiZ3OMpSK2YJXQudbU/404WhvE2cull\nVrYUvzOirIi3xGzUqelsYJmRKFk11OkL8E+2vurmGbv6mh4lAk/ztghbIAgH1tBu\n7Xt8CFXjEuKsdzoU2tvqlrDmppSfAm7wGcMeif12WImIN7WEjkxt8ruECmpBvfQ=\n=d5r5\n-----END PGP SIGNATURE-----\n", "payload": "tree c779bdbdb7c84953ce09a12b2ccfc069ca8b6927\nparent 03f6fbb21e6050da2a05b3ce8f480c020b384916\nparent 861a6e85e106850583a98f2254def0c9510de091\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1643786237 -0800\ncommitter GitHub <noreply@github.com> 1643786237 -0800\n\nMerge portable-simd#203 - deantvv/add-spectral-norm\n\nAdd spectral_norm example from packed_simd"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01350a222a08a938608574ed3a03ce2504ba847b", "html_url": "https://github.com/rust-lang/rust/commit/01350a222a08a938608574ed3a03ce2504ba847b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01350a222a08a938608574ed3a03ce2504ba847b/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03f6fbb21e6050da2a05b3ce8f480c020b384916", "url": "https://api.github.com/repos/rust-lang/rust/commits/03f6fbb21e6050da2a05b3ce8f480c020b384916", "html_url": "https://github.com/rust-lang/rust/commit/03f6fbb21e6050da2a05b3ce8f480c020b384916"}, {"sha": "861a6e85e106850583a98f2254def0c9510de091", "url": "https://api.github.com/repos/rust-lang/rust/commits/861a6e85e106850583a98f2254def0c9510de091", "html_url": "https://github.com/rust-lang/rust/commit/861a6e85e106850583a98f2254def0c9510de091"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "c515dad4deabd455396d7d17ed4a30859ce1252b", "filename": "crates/core_simd/examples/spectral_norm.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/01350a222a08a938608574ed3a03ce2504ba847b/crates%2Fcore_simd%2Fexamples%2Fspectral_norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01350a222a08a938608574ed3a03ce2504ba847b/crates%2Fcore_simd%2Fexamples%2Fspectral_norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fexamples%2Fspectral_norm.rs?ref=01350a222a08a938608574ed3a03ce2504ba847b", "patch": "@@ -0,0 +1,77 @@\n+#![feature(portable_simd)]\n+\n+use core_simd::simd::*;\n+\n+fn a(i: usize, j: usize) -> f64 {\n+    ((i + j) * (i + j + 1) / 2 + i + 1) as f64\n+}\n+\n+fn mult_av(v: &[f64], out: &mut [f64]) {\n+    assert!(v.len() == out.len());\n+    assert!(v.len() % 2 == 0);\n+\n+    for (i, out) in out.iter_mut().enumerate() {\n+        let mut sum = f64x2::splat(0.0);\n+\n+        let mut j = 0;\n+        while j < v.len() {\n+            let b = f64x2::from_slice(&v[j..]);\n+            let a = f64x2::from_array([a(i, j), a(i, j + 1)]);\n+            sum += b / a;\n+            j += 2\n+        }\n+        *out = sum.horizontal_sum();\n+    }\n+}\n+\n+fn mult_atv(v: &[f64], out: &mut [f64]) {\n+    assert!(v.len() == out.len());\n+    assert!(v.len() % 2 == 0);\n+\n+    for (i, out) in out.iter_mut().enumerate() {\n+        let mut sum = f64x2::splat(0.0);\n+\n+        let mut j = 0;\n+        while j < v.len() {\n+            let b = f64x2::from_slice(&v[j..]);\n+            let a = f64x2::from_array([a(j, i), a(j + 1, i)]);\n+            sum += b / a;\n+            j += 2\n+        }\n+        *out = sum.horizontal_sum();\n+    }\n+}\n+\n+fn mult_atav(v: &[f64], out: &mut [f64], tmp: &mut [f64]) {\n+    mult_av(v, tmp);\n+    mult_atv(tmp, out);\n+}\n+\n+pub fn spectral_norm(n: usize) -> f64 {\n+    assert!(n % 2 == 0, \"only even lengths are accepted\");\n+\n+    let mut u = vec![1.0; n];\n+    let mut v = u.clone();\n+    let mut tmp = u.clone();\n+\n+    for _ in 0..10 {\n+        mult_atav(&u, &mut v, &mut tmp);\n+        mult_atav(&v, &mut u, &mut tmp);\n+    }\n+    (dot(&u, &v) / dot(&v, &v)).sqrt()\n+}\n+\n+fn dot(x: &[f64], y: &[f64]) -> f64 {\n+    // This is auto-vectorized:\n+    x.iter().zip(y).map(|(&x, &y)| x * y).sum()\n+}\n+\n+#[cfg(test)]\n+#[test]\n+fn test() {\n+    assert_eq!(&format!(\"{:.9}\", spectral_norm(100)), \"1.274219991\");\n+}\n+\n+fn main() {\n+    // Empty main to make cargo happy\n+}"}]}