{"sha": "49ee9f3f08ba4583bc722a663e43551067ace271", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZWU5ZjNmMDhiYTQ1ODNiYzcyMmE2NjNlNDM1NTEwNjdhY2UyNzE=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-08-24T15:33:36Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-08-24T16:42:53Z"}, "message": "Fix inconsistent doc headings\n\nThis fixes headings reading \"Unsafety\" and \"Example\", they should be\n\"Safety\" and \"Examples\" according to RFC 1574.", "tree": {"sha": "a2f7e28e28b97db9bbd084e6644135b6c2790a2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2f7e28e28b97db9bbd084e6644135b6c2790a2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49ee9f3f08ba4583bc722a663e43551067ace271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49ee9f3f08ba4583bc722a663e43551067ace271", "html_url": "https://github.com/rust-lang/rust/commit/49ee9f3f08ba4583bc722a663e43551067ace271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49ee9f3f08ba4583bc722a663e43551067ace271/comments", "author": null, "committer": null, "parents": [{"sha": "af6298d590785088aad92f817ce07dfd6cdebdd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/af6298d590785088aad92f817ce07dfd6cdebdd0", "html_url": "https://github.com/rust-lang/rust/commit/af6298d590785088aad92f817ce07dfd6cdebdd0"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "f14f27023249e3423cbba1cdab383d6b65a7a71c", "filename": "src/liballoc/allocator.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Fliballoc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Fliballoc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fallocator.rs?ref=49ee9f3f08ba4583bc722a663e43551067ace271", "patch": "@@ -110,7 +110,7 @@ impl Layout {\n \n     /// Creates a layout, bypassing all checks.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe as it does not verify that `align` is\n     /// a power-of-two that is also less than or equal to 2^31, nor\n@@ -485,7 +485,7 @@ pub unsafe trait Alloc {\n     /// behavior, e.g. to ensure initialization to particular sets of\n     /// bit patterns.)\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure that `layout` has non-zero size.\n@@ -513,7 +513,7 @@ pub unsafe trait Alloc {\n \n     /// Deallocate the memory referenced by `ptr`.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure all of the following:\n@@ -617,7 +617,7 @@ pub unsafe trait Alloc {\n     /// behavior is well-defined (though underspecified) when this\n     /// constraint is violated; further discussion below.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure all of the following:\n@@ -688,7 +688,7 @@ pub unsafe trait Alloc {\n     /// Behaves like `alloc`, but also ensures that the contents\n     /// are set to zero before being returned.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe for the same reasons that `alloc` is.\n     ///\n@@ -714,7 +714,7 @@ pub unsafe trait Alloc {\n     /// the returned block. For some `layout` inputs, like arrays, this\n     /// may include extra storage usable for additional data.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe for the same reasons that `alloc` is.\n     ///\n@@ -736,7 +736,7 @@ pub unsafe trait Alloc {\n     /// the returned block. For some `layout` inputs, like arrays, this\n     /// may include extra storage usable for additional data.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe for the same reasons that `realloc` is.\n     ///\n@@ -770,7 +770,7 @@ pub unsafe trait Alloc {\n     /// memory block referenced by `ptr` has not been transferred, and\n     /// the contents of the memory block are unaltered.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure all of the following:\n@@ -827,7 +827,7 @@ pub unsafe trait Alloc {\n     /// the memory block has not been transferred, and the contents of\n     /// the memory block are unaltered.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure all of the following:\n@@ -920,7 +920,7 @@ pub unsafe trait Alloc {\n     ///\n     /// Captures a common usage pattern for allocators.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure both:\n@@ -993,7 +993,7 @@ pub unsafe trait Alloc {\n     /// The returned block is suitable for passing to the\n     /// `alloc`/`realloc` methods of this allocator.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure all of the following:\n@@ -1037,7 +1037,7 @@ pub unsafe trait Alloc {\n     ///\n     /// Captures a common usage pattern for allocators.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure both:"}, {"sha": "82aac4dbf63346fa2897e215df8b329faf34a7ee", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=49ee9f3f08ba4583bc722a663e43551067ace271", "patch": "@@ -633,7 +633,7 @@ impl<I: FusedIterator + ?Sized> FusedIterator for Box<I> {}\n /// that `FnBox` may be deprecated in the future if `Box<FnOnce()>`\n /// closures become directly usable.)\n ///\n-/// ### Example\n+/// # Examples\n ///\n /// Here is a snippet of code which creates a hashmap full of boxed\n /// once closures and then removes them one by one, calling each"}, {"sha": "fd60e8aaded48aa2a2697d07bfc3ae900dda10d3", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=49ee9f3f08ba4583bc722a663e43551067ace271", "patch": "@@ -171,7 +171,7 @@ mod hack {\n impl<T> [T] {\n     /// Returns the number of elements in the slice.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let a = [1, 2, 3];\n@@ -185,7 +185,7 @@ impl<T> [T] {\n \n     /// Returns `true` if the slice has a length of 0.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let a = [1, 2, 3];\n@@ -523,7 +523,7 @@ impl<T> [T] {\n \n     /// Reverses the order of elements in the slice, in place.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut v = [1, 2, 3];\n@@ -580,7 +580,7 @@ impl<T> [T] {\n     ///\n     /// Panics if `size` is 0.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let slice = ['r', 'u', 's', 't'];\n@@ -613,7 +613,7 @@ impl<T> [T] {\n     ///\n     /// Panics if `size` is 0.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let slice = ['l', 'o', 'r', 'e', 'm'];\n@@ -1040,7 +1040,7 @@ impl<T> [T] {\n     /// `Err` is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Looks up a series of four elements. The first is found, with a\n     /// uniquely determined position; the second and third are not\n@@ -1074,7 +1074,7 @@ impl<T> [T] {\n     /// `Err` is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Looks up a series of four elements. The first is found, with a\n     /// uniquely determined position; the second and third are not\n@@ -1419,7 +1419,7 @@ impl<T> [T] {\n     ///\n     /// This function will panic if the two slices have different lengths.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut dst = [0, 0, 0];\n@@ -1445,7 +1445,7 @@ impl<T> [T] {\n     ///\n     /// This function will panic if the two slices have different lengths.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut dst = [0, 0, 0];"}, {"sha": "79b2bbce2af7cf13e59ad095572ce3a4e6b2d54a", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=49ee9f3f08ba4583bc722a663e43551067ace271", "patch": "@@ -1714,7 +1714,7 @@ impl str {\n     ///\n     /// [`Err`]: str/trait.FromStr.html#associatedtype.Err\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Basic usage\n     ///"}, {"sha": "e0a3b8d52f40efb5df9180a1b741928196675fed", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=49ee9f3f08ba4583bc722a663e43551067ace271", "patch": "@@ -998,7 +998,7 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// A method would interfere with methods of the same name on the contents\n     /// of a `RefCell` used through `Deref`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::cell::{RefCell, Ref};\n@@ -1040,7 +1040,7 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// `RefMut::map(...)`.  A method would interfere with methods of the same\n     /// name on the contents of a `RefCell` used through `Deref`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::cell::{RefCell, RefMut};"}, {"sha": "b594c886b64f5d35a80a9ccd79b3836954d0f63e", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=49ee9f3f08ba4583bc722a663e43551067ace271", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'b: 'a> fmt::Write for PadAdapter<'a, 'b> {\n /// [`Formatter::debug_struct`](struct.Formatter.html#method.debug_struct)\n /// method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt;\n@@ -153,7 +153,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n /// [`Formatter::debug_tuple`](struct.Formatter.html#method.debug_tuple)\n /// method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt;\n@@ -290,7 +290,7 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n /// [`Formatter::debug_set`](struct.Formatter.html#method.debug_set)\n /// method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt;\n@@ -361,7 +361,7 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n /// [`Formatter::debug_list`](struct.Formatter.html#method.debug_list)\n /// method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt;\n@@ -432,7 +432,7 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n /// [`Formatter::debug_map`](struct.Formatter.html#method.debug_map)\n /// method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt;"}, {"sha": "4b866cab1eae2f00b97e5d0af34240ec4fb21904", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=49ee9f3f08ba4583bc722a663e43551067ace271", "patch": "@@ -901,7 +901,7 @@ impl<T> ManuallyDrop<T> {\n \n     /// Manually drops the contained value.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function runs the destructor of the contained value and thus the wrapped value\n     /// now represents uninitialized data. It is up to the user of this method to ensure the"}, {"sha": "074ab3ebd8fdca9b045f86672f04f093abf2704b", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=49ee9f3f08ba4583bc722a663e43551067ace271", "patch": "@@ -522,7 +522,7 @@ pub trait Read {\n     /// `Read`er - the method only takes `&self` so that it can be used through\n     /// trait objects.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This method is unsafe because a `Read`er could otherwise return a\n     /// non-zeroing `Initializer` from another `Read` type without an `unsafe`\n@@ -903,7 +903,7 @@ impl Initializer {\n \n     /// Returns a new `Initializer` which will not zero out buffers.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This may only be called by `Read`ers which guarantee that they will not\n     /// read from buffers passed to `Read` methods, and that the return value of"}, {"sha": "240e82069ff4d64fbb0c72a33eb7a2fdd49d7672", "filename": "src/libstd/memchr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibstd%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibstd%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmemchr.rs?ref=49ee9f3f08ba4583bc722a663e43551067ace271", "patch": "@@ -20,7 +20,7 @@\n /// magnitude faster than `haystack.iter().position(|&b| b == needle)`.\n /// (See benchmarks.)\n ///\n-/// # Example\n+/// # Examples\n ///\n /// This shows how to find the first position of a byte in a byte string.\n ///\n@@ -40,7 +40,7 @@ pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n /// Returns the index corresponding to the last occurrence of `needle` in\n /// `haystack`, or `None` if one is not found.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// This shows how to find the last position of a byte in a byte string.\n ///"}, {"sha": "9fd8d6c91869c07422eedf0c7f10deb008ed985c", "filename": "src/libstd/sys/redox/ext/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fmod.rs?ref=49ee9f3f08ba4583bc722a663e43551067ace271", "patch": "@@ -13,7 +13,7 @@\n //! For now, this module is limited to extracting file descriptors,\n //! but its functionality will grow over time.\n //!\n-//! # Example\n+//! # Examples\n //!\n //! ```no_run\n //! use std::fs::File;"}, {"sha": "98bc90dd4e13246694c14531affe2fd53cd47012", "filename": "src/libstd/sys/unix/ext/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs?ref=49ee9f3f08ba4583bc722a663e43551067ace271", "patch": "@@ -13,7 +13,7 @@\n //! For now, this module is limited to extracting file descriptors,\n //! but its functionality will grow over time.\n //!\n-//! # Example\n+//! # Examples\n //!\n //! ```no_run\n //! use std::fs::File;"}, {"sha": "6354e746af26a35f46f8752145c377e4ff9da262", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee9f3f08ba4583bc722a663e43551067ace271/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=49ee9f3f08ba4583bc722a663e43551067ace271", "patch": "@@ -807,7 +807,7 @@ pub fn park_timeout_ms(ms: u32) {\n /// Platforms which do not support nanosecond precision for sleeping will have\n /// `dur` rounded up to the nearest granularity of time they can sleep for.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// Waiting for the complete expiration of the timeout:\n ///"}]}