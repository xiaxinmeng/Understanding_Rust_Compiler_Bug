{"sha": "5dc3283e49cc739425a314c1b0837c72f0d6909d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYzMyODNlNDljYzczOTQyNWEzMTRjMWIwODM3YzcyZjBkNjkwOWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-11T22:30:57Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-11T22:30:57Z"}, "message": "Reviewer comments - mostly fix rewrite_guard", "tree": {"sha": "bd77f5254294fb17ebe7ec658a9b8e9dd011b78a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd77f5254294fb17ebe7ec658a9b8e9dd011b78a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dc3283e49cc739425a314c1b0837c72f0d6909d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc3283e49cc739425a314c1b0837c72f0d6909d", "html_url": "https://github.com/rust-lang/rust/commit/5dc3283e49cc739425a314c1b0837c72f0d6909d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dc3283e49cc739425a314c1b0837c72f0d6909d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afc8be1d798ad44a201a23df8135be4ce9c29612", "url": "https://api.github.com/repos/rust-lang/rust/commits/afc8be1d798ad44a201a23df8135be4ce9c29612", "html_url": "https://github.com/rust-lang/rust/commit/afc8be1d798ad44a201a23df8135be4ce9c29612"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "7ee69885a429da8f58ab2b037e10b7e13821871b", "filename": "src/expr.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5dc3283e49cc739425a314c1b0837c72f0d6909d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc3283e49cc739425a314c1b0837c72f0d6909d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=5dc3283e49cc739425a314c1b0837c72f0d6909d", "patch": "@@ -21,7 +21,7 @@ use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTacti\n             DefinitiveListTactic, definitive_tactic, ListItem, format_item_list};\n use string::{StringFormat, rewrite_string};\n use utils::{CodeMapSpanUtils, extra_offset, last_line_width, wrap_str, binary_search,\n-            first_line_width, semicolon_for_stmt};\n+            first_line_width, semicolon_for_stmt, trimmed_last_line_width};\n use visitor::FmtVisitor;\n use config::{Config, StructLitStyle, MultilineStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n@@ -998,7 +998,7 @@ impl Rewrite for ast::Arm {\n         let pats_str = try_opt!(write_list(items, &fmt));\n \n         let budget = if pats_str.contains('\\n') {\n-            context.config.max_width\n+            context.config.max_width - offset.width()\n         } else {\n             width\n         };\n@@ -1007,7 +1007,7 @@ impl Rewrite for ast::Arm {\n                                                guard,\n                                                budget,\n                                                offset,\n-                                               last_line_width(&pats_str)));\n+                                               trimmed_last_line_width(&pats_str)));\n \n         let pats_str = format!(\"{}{}\", pats_str, guard_str);\n         // Where the next text can start.\n@@ -1019,7 +1019,7 @@ impl Rewrite for ast::Arm {\n         let body = match **body {\n             ast::Expr { node: ast::ExprKind::Block(ref block), .. }\n                 if !is_unsafe_block(block) && is_simple_block(block, context.codemap) &&\n-                context.config.wrap_match_arms => block.expr.as_ref().map(|e| &**e).unwrap(),\n+                   context.config.wrap_match_arms => block.expr.as_ref().map(|e| &**e).unwrap(),\n             ref x => x,\n         };\n \n@@ -1081,6 +1081,8 @@ impl Rewrite for ast::Arm {\n     }\n }\n \n+// A pattern is simple if it is very short or it is short-ish and just a path.\n+// E.g. `Foo::Bar` is simple, but `Foo(..)` is not.\n fn pat_is_simple(pat_str: &str) -> bool {\n     pat_str.len() <= 16 ||\n     (pat_str.len() <= 24 && pat_str.chars().all(|c| c.is_alphabetic() || c == ':'))\n@@ -1107,11 +1109,12 @@ fn rewrite_guard(context: &RewriteContext,\n         }\n \n         // Not enough space to put the guard after the pattern, try a newline.\n-        let overhead = context.config.tab_spaces + 4 + 5;\n+        let overhead = offset.block_indent(context.config).width() + 4 + 5;\n         if overhead < width {\n             let cond_str = guard.rewrite(context,\n                                          width - overhead,\n-                                         offset.block_indent(context.config));\n+                                         // 3 == `if `\n+                                         offset.block_indent(context.config) + 3);\n             if let Some(cond_str) = cond_str {\n                 return Some(format!(\"\\n{}if {}\",\n                                     offset.block_indent(context.config).to_string(context.config),"}, {"sha": "862ceb1e13eb0974c4497e3a576f7f24060b08d3", "filename": "src/utils.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5dc3283e49cc739425a314c1b0837c72f0d6909d/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc3283e49cc739425a314c1b0837c72f0d6909d/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=5dc3283e49cc739425a314c1b0837c72f0d6909d", "patch": "@@ -113,6 +113,13 @@ pub fn last_line_width(s: &str) -> usize {\n         None => s.len(),\n     }\n }\n+#[inline]\n+pub fn trimmed_last_line_width(s: &str) -> usize {\n+    match s.rfind('\\n') {\n+        Some(n) => s[(n + 1)..].trim().len(),\n+        None => s.trim().len(),\n+    }\n+}\n \n #[inline]\n fn is_skip(meta_item: &MetaItem) -> bool {"}, {"sha": "a9fb540404729e6b001f7f6722a7514400a971ef", "filename": "tests/source/match.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5dc3283e49cc739425a314c1b0837c72f0d6909d/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc3283e49cc739425a314c1b0837c72f0d6909d/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=5dc3283e49cc739425a314c1b0837c72f0d6909d", "patch": "@@ -284,3 +284,13 @@ fn issue386() {\n             false,\n     }\n }\n+\n+fn guards() {\n+    match foo {\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa if foooooooooooooo && barrrrrrrrrrrr => {}\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa if foooooooooooooo && barrrrrrrrrrrr => {}\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+            if fooooooooooooooooooooo &&\n+               (bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb || cccccccccccccccccccccccccccccccccccccccc) => {}\n+    }\n+}"}, {"sha": "bc5556283c37f778f68fd9bbfccc4d3899305786", "filename": "tests/target/match.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5dc3283e49cc739425a314c1b0837c72f0d6909d/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc3283e49cc739425a314c1b0837c72f0d6909d/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=5dc3283e49cc739425a314c1b0837c72f0d6909d", "patch": "@@ -295,3 +295,17 @@ fn issue386() {\n         BiShl | BiShr => false,\n     }\n }\n+\n+fn guards() {\n+    match foo {\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa if foooooooooooooo &&\n+                                                                      barrrrrrrrrrrr => {}\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa |\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa if foooooooooooooo &&\n+                                                                      barrrrrrrrrrrr => {}\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+            if fooooooooooooooooooooo &&\n+               (bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb ||\n+                cccccccccccccccccccccccccccccccccccccccc) => {}\n+    }\n+}"}]}