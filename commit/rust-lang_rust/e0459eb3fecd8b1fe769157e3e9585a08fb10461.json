{"sha": "e0459eb3fecd8b1fe769157e3e9585a08fb10461", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNDU5ZWIzZmVjZDhiMWZlNzY5MTU3ZTNlOTU4NWEwOGZiMTA0NjE=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2019-06-04T15:14:12Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-06-04T15:14:12Z"}, "message": "inline the attribute with its item even with the macro_use attribute or when reorder_imports is disabled (#3598)", "tree": {"sha": "9e14c93ff4c4f08b53d34d9203be6b20e1d540db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e14c93ff4c4f08b53d34d9203be6b20e1d540db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0459eb3fecd8b1fe769157e3e9585a08fb10461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0459eb3fecd8b1fe769157e3e9585a08fb10461", "html_url": "https://github.com/rust-lang/rust/commit/e0459eb3fecd8b1fe769157e3e9585a08fb10461", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0459eb3fecd8b1fe769157e3e9585a08fb10461/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2244f326e65a21b7025691478a3218d588d74f7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2244f326e65a21b7025691478a3218d588d74f7e", "html_url": "https://github.com/rust-lang/rust/commit/2244f326e65a21b7025691478a3218d588d74f7e"}], "stats": {"total": 179, "additions": 137, "deletions": 42}, "files": [{"sha": "4ae3f383e7413bc2f6b8a4f8335e0e63b248ff2b", "filename": "src/items.rs", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e0459eb3fecd8b1fe769157e3e9585a08fb10461/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0459eb3fecd8b1fe769157e3e9585a08fb10461/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=e0459eb3fecd8b1fe769157e3e9585a08fb10461", "patch": "@@ -9,6 +9,7 @@ use syntax::source_map::{self, BytePos, Span};\n use syntax::visit;\n use syntax::{ast, ptr, symbol};\n \n+use crate::attr::filter_inline_attrs;\n use crate::comment::{\n     combine_strs_with_missing_comments, contains_comment, is_last_comment_block,\n     recover_comment_removed, recover_missing_comment_in_span, rewrite_missing_comment,\n@@ -2977,29 +2978,71 @@ impl Rewrite for ast::ForeignItem {\n     }\n }\n \n+/// Rewrite the attributes of an item.\n+fn rewrite_attrs(\n+    context: &RewriteContext<'_>,\n+    item: &ast::Item,\n+    item_str: &str,\n+    shape: Shape,\n+) -> Option<String> {\n+    let attrs = filter_inline_attrs(&item.attrs, item.span());\n+    let attrs_str = attrs.rewrite(context, shape)?;\n+\n+    let missed_span = if attrs.is_empty() {\n+        mk_sp(item.span.lo(), item.span.lo())\n+    } else {\n+        mk_sp(attrs[attrs.len() - 1].span.hi(), item.span.lo())\n+    };\n+\n+    let allow_extend = if attrs.len() == 1 {\n+        let line_len = attrs_str.len() + 1 + item_str.len();\n+        !attrs.first().unwrap().is_sugared_doc\n+            && context.config.inline_attribute_width() >= line_len\n+    } else {\n+        false\n+    };\n+\n+    combine_strs_with_missing_comments(\n+        context,\n+        &attrs_str,\n+        &item_str,\n+        missed_span,\n+        shape,\n+        allow_extend,\n+    )\n+}\n+\n /// Rewrite an inline mod.\n-pub(crate) fn rewrite_mod(context: &RewriteContext<'_>, item: &ast::Item) -> String {\n+/// The given shape is used to format the mod's attributes.\n+pub(crate) fn rewrite_mod(\n+    context: &RewriteContext<'_>,\n+    item: &ast::Item,\n+    attrs_shape: Shape,\n+) -> Option<String> {\n     let mut result = String::with_capacity(32);\n     result.push_str(&*format_visibility(context, &item.vis));\n     result.push_str(\"mod \");\n     result.push_str(rewrite_ident(context, item.ident));\n     result.push(';');\n-    result\n+    rewrite_attrs(context, item, &result, attrs_shape)\n }\n \n-/// Rewrite `extern crate foo;` WITHOUT attributes.\n+/// Rewrite `extern crate foo;`.\n+/// The given shape is used to format the extern crate's attributes.\n pub(crate) fn rewrite_extern_crate(\n     context: &RewriteContext<'_>,\n     item: &ast::Item,\n+    attrs_shape: Shape,\n ) -> Option<String> {\n     assert!(is_extern_crate(item));\n     let new_str = context.snippet(item.span);\n-    Some(if contains_comment(new_str) {\n+    let item_str = if contains_comment(new_str) {\n         new_str.to_owned()\n     } else {\n         let no_whitespace = &new_str.split_whitespace().collect::<Vec<&str>>().join(\" \");\n         String::from(&*Regex::new(r\"\\s;\").unwrap().replace(no_whitespace, \";\"))\n-    })\n+    };\n+    rewrite_attrs(context, item, &item_str, attrs_shape)\n }\n \n /// Returns `true` for `mod foo;`, false for `mod foo { .. }`."}, {"sha": "a246772f648e8bbf2608c6181b24254476c53d72", "filename": "src/reorder.rs", "status": "modified", "additions": 6, "deletions": 33, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e0459eb3fecd8b1fe769157e3e9585a08fb10461/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0459eb3fecd8b1fe769157e3e9585a08fb10461/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=e0459eb3fecd8b1fe769157e3e9585a08fb10461", "patch": "@@ -11,12 +11,11 @@ use std::cmp::{Ord, Ordering};\n use syntax::{ast, attr, source_map::Span, symbol::sym};\n \n use crate::attr::filter_inline_attrs;\n-use crate::comment::combine_strs_with_missing_comments;\n use crate::config::Config;\n use crate::imports::{merge_use_trees, UseTree};\n use crate::items::{is_mod_decl, rewrite_extern_crate, rewrite_mod};\n use crate::lists::{itemize_list, write_list, ListFormatting, ListItem};\n-use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::rewrite::RewriteContext;\n use crate::shape::Shape;\n use crate::source_map::LineRangeUtils;\n use crate::spanned::Spanned;\n@@ -70,37 +69,11 @@ fn rewrite_reorderable_item(\n     item: &ast::Item,\n     shape: Shape,\n ) -> Option<String> {\n-    let attrs = filter_inline_attrs(&item.attrs, item.span());\n-    let attrs_str = attrs.rewrite(context, shape)?;\n-\n-    let missed_span = if attrs.is_empty() {\n-        mk_sp(item.span.lo(), item.span.lo())\n-    } else {\n-        mk_sp(attrs.last().unwrap().span.hi(), item.span.lo())\n-    };\n-\n-    let item_str = match item.node {\n-        ast::ItemKind::ExternCrate(..) => rewrite_extern_crate(context, item)?,\n-        ast::ItemKind::Mod(..) => rewrite_mod(context, item),\n-        _ => return None,\n-    };\n-\n-    let allow_extend = if attrs.len() == 1 {\n-        let line_len = attrs_str.len() + 1 + item_str.len();\n-        !attrs.first().unwrap().is_sugared_doc\n-            && context.config.inline_attribute_width() >= line_len\n-    } else {\n-        false\n-    };\n-\n-    combine_strs_with_missing_comments(\n-        context,\n-        &attrs_str,\n-        &item_str,\n-        missed_span,\n-        shape,\n-        allow_extend,\n-    )\n+    match item.node {\n+        ast::ItemKind::ExternCrate(..) => rewrite_extern_crate(context, item, shape),\n+        ast::ItemKind::Mod(..) => rewrite_mod(context, item, shape),\n+        _ => None,\n+    }\n }\n \n /// Rewrite a list of items with reordering. Every item in `items` must have"}, {"sha": "0560cd2ff09ab8ee1087f1b7203e06162ced92c4", "filename": "src/visitor.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e0459eb3fecd8b1fe769157e3e9585a08fb10461/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0459eb3fecd8b1fe769157e3e9585a08fb10461/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=e0459eb3fecd8b1fe769157e3e9585a08fb10461", "patch": "@@ -315,8 +315,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             .append(&mut get_skip_macro_names(&attrs));\n \n         let should_visit_node_again = match item.node {\n-            // For use items, skip rewriting attributes. Just check for a skip attribute.\n-            ast::ItemKind::Use(..) => {\n+            // For use/extern crate items, skip rewriting attributes but check for a skip attribute.\n+            ast::ItemKind::Use(..) | ast::ItemKind::ExternCrate(_) => {\n                 if contains_skip(attrs) {\n                     self.push_skipped_with_span(attrs.as_slice(), item.span(), item.span());\n                     false\n@@ -381,8 +381,13 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     self.push_rewrite(item.span, rw);\n                 }\n                 ast::ItemKind::ExternCrate(_) => {\n-                    let rw = rewrite_extern_crate(&self.get_context(), item);\n-                    self.push_rewrite(item.span, rw);\n+                    let rw = rewrite_extern_crate(&self.get_context(), item, self.shape());\n+                    let span = if attrs.is_empty() {\n+                        item.span\n+                    } else {\n+                        mk_sp(attrs[0].span.lo(), item.span.hi())\n+                    };\n+                    self.push_rewrite(span, rw);\n                 }\n                 ast::ItemKind::Struct(..) | ast::ItemKind::Union(..) => {\n                     self.visit_struct(&StructParts::from_item(item));"}, {"sha": "6716983ba0f390f56f2e479c0a48dfc0867983ba", "filename": "tests/source/issue-3585/extern_crate.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Fsource%2Fissue-3585%2Fextern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Fsource%2Fissue-3585%2Fextern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3585%2Fextern_crate.rs?ref=e0459eb3fecd8b1fe769157e3e9585a08fb10461", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-inline_attribute_width: 100\n+\n+#[macro_use]\n+extern crate static_assertions;\n+\n+#[cfg(unix)]\n+extern crate static_assertions;\n+\n+// a comment before the attribute\n+#[macro_use]\n+// some comment after\n+extern crate static_assertions;"}, {"sha": "45b1bb9fdd9d0b2d357e30a36c226937db58666b", "filename": "tests/source/issue-3585/reorder_imports_disabled.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Fsource%2Fissue-3585%2Freorder_imports_disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Fsource%2Fissue-3585%2Freorder_imports_disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3585%2Freorder_imports_disabled.rs?ref=e0459eb3fecd8b1fe769157e3e9585a08fb10461", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-inline_attribute_width: 100\n+// rustfmt-reorder_imports: false\n+\n+#[cfg(unix)]\n+extern crate crateb;\n+#[cfg(unix)]\n+extern crate cratea;\n+\n+#[cfg(unix)]\n+use crateb;\n+#[cfg(unix)]\n+use cratea;"}, {"sha": "9f433e5ca21b3a3f76413d71a1e2cfdbe647b3f7", "filename": "tests/source/issue-3585/reorder_imports_enabled.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Fsource%2Fissue-3585%2Freorder_imports_enabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Fsource%2Fissue-3585%2Freorder_imports_enabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3585%2Freorder_imports_enabled.rs?ref=e0459eb3fecd8b1fe769157e3e9585a08fb10461", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-inline_attribute_width: 100\n+// rustfmt-reorder_imports: true\n+\n+#[cfg(unix)]\n+extern crate crateb;\n+#[cfg(unix)]\n+extern crate cratea;\n+\n+#[cfg(unix)]\n+use crateb;\n+#[cfg(unix)]\n+use cratea;"}, {"sha": "e71ba9008ce448c20e36fa5e29e1eabb7815f910", "filename": "tests/source/issue-3585/use.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Fsource%2Fissue-3585%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Fsource%2Fissue-3585%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3585%2Fuse.rs?ref=e0459eb3fecd8b1fe769157e3e9585a08fb10461", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-inline_attribute_width: 100\n+\n+#[macro_use]\n+use static_assertions;\n+\n+#[cfg(unix)]\n+use static_assertions;"}, {"sha": "dc7c9e0246b206bebcd410158ab8d497f341abbc", "filename": "tests/target/issue-3585/extern_crate.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Ftarget%2Fissue-3585%2Fextern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Ftarget%2Fissue-3585%2Fextern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3585%2Fextern_crate.rs?ref=e0459eb3fecd8b1fe769157e3e9585a08fb10461", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-inline_attribute_width: 100\n+\n+#[macro_use] extern crate static_assertions;\n+\n+#[cfg(unix)] extern crate static_assertions;\n+\n+// a comment before the attribute\n+#[macro_use]\n+// some comment after\n+extern crate static_assertions;"}, {"sha": "f9637729b7eb31ceb0a88bc34546068b42c64298", "filename": "tests/target/issue-3585/reorder_imports_disabled.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Ftarget%2Fissue-3585%2Freorder_imports_disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Ftarget%2Fissue-3585%2Freorder_imports_disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3585%2Freorder_imports_disabled.rs?ref=e0459eb3fecd8b1fe769157e3e9585a08fb10461", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-inline_attribute_width: 100\n+// rustfmt-reorder_imports: false\n+\n+#[cfg(unix)] extern crate crateb;\n+#[cfg(unix)] extern crate cratea;\n+\n+#[cfg(unix)] use crateb;\n+#[cfg(unix)] use cratea;"}, {"sha": "d040d0ed34148852cd2690c9e17d27b6d2cdce2c", "filename": "tests/target/issue-3585/reorder_imports_enabled.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Ftarget%2Fissue-3585%2Freorder_imports_enabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Ftarget%2Fissue-3585%2Freorder_imports_enabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3585%2Freorder_imports_enabled.rs?ref=e0459eb3fecd8b1fe769157e3e9585a08fb10461", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-inline_attribute_width: 100\n+// rustfmt-reorder_imports: true\n+\n+#[cfg(unix)] extern crate cratea;\n+#[cfg(unix)] extern crate crateb;\n+\n+#[cfg(unix)] use cratea;\n+#[cfg(unix)] use crateb;"}, {"sha": "c76a9eaacc828d530d11dff663c856608143b316", "filename": "tests/target/issue-3585/use.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Ftarget%2Fissue-3585%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0459eb3fecd8b1fe769157e3e9585a08fb10461/tests%2Ftarget%2Fissue-3585%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3585%2Fuse.rs?ref=e0459eb3fecd8b1fe769157e3e9585a08fb10461", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-inline_attribute_width: 100\n+\n+#[macro_use] use static_assertions;\n+\n+#[cfg(unix)] use static_assertions;"}]}