{"sha": "e6255356d2e4da2072f587b4fda559f775ad13d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MjU1MzU2ZDJlNGRhMjA3MmY1ODdiNGZkYTU1OWY3NzVhZDEzZDI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-08-30T20:26:35Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-08-30T20:26:35Z"}, "message": "Fix DNF construction, add proptest", "tree": {"sha": "a7d96a06caebbbc1311d061ca6dba03ce5958ff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7d96a06caebbbc1311d061ca6dba03ce5958ff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6255356d2e4da2072f587b4fda559f775ad13d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6255356d2e4da2072f587b4fda559f775ad13d2", "html_url": "https://github.com/rust-lang/rust/commit/e6255356d2e4da2072f587b4fda559f775ad13d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6255356d2e4da2072f587b4fda559f775ad13d2/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20f3792d10bd92605b7e9c2677c87868eb8089d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/20f3792d10bd92605b7e9c2677c87868eb8089d9", "html_url": "https://github.com/rust-lang/rust/commit/20f3792d10bd92605b7e9c2677c87868eb8089d9"}], "stats": {"total": 103, "additions": 99, "deletions": 4}, "files": [{"sha": "057d23cd282e2e1f30ebd789e0a561fdbb2d314f", "filename": "Cargo.lock", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e6255356d2e4da2072f587b4fda559f775ad13d2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e6255356d2e4da2072f587b4fda559f775ad13d2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e6255356d2e4da2072f587b4fda559f775ad13d2", "patch": "@@ -47,6 +47,15 @@ version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"33954243bd79057c2de7338850b85983a44588021f8a5fee574a8888c6de4344\"\n \n+[[package]]\n+name = \"arbitrary\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"577b08a4acd7b99869f863c50011b01eb73424ccc798ecd996f2e24817adfca7\"\n+dependencies = [\n+ \"derive_arbitrary\",\n+]\n+\n [[package]]\n name = \"arrayvec\"\n version = \"0.7.1\"\n@@ -147,8 +156,10 @@ checksum = \"e70cc2f62c6ce1868963827bd677764c62d07c3d9a3e1fb1177ee1a9ab199eb2\"\n name = \"cfg\"\n version = \"0.0.0\"\n dependencies = [\n+ \"arbitrary\",\n  \"expect-test\",\n  \"mbe\",\n+ \"oorandom\",\n  \"rustc-hash\",\n  \"syntax\",\n  \"tt\",\n@@ -291,6 +302,17 @@ dependencies = [\n  \"num_cpus\",\n ]\n \n+[[package]]\n+name = \"derive_arbitrary\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b24629208e87a2d8b396ff43b15c4afb0a69cea3fbbaa9ed9b92b7c02f0aed73\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n [[package]]\n name = \"dissimilar\"\n version = \"1.0.2\""}, {"sha": "4a0fdd30e00163231e7aca52e066efa3c59336fa", "filename": "crates/cfg/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6255356d2e4da2072f587b4fda559f775ad13d2/crates%2Fcfg%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e6255356d2e4da2072f587b4fda559f775ad13d2/crates%2Fcfg%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2FCargo.toml?ref=e6255356d2e4da2072f587b4fda559f775ad13d2", "patch": "@@ -17,3 +17,5 @@ tt = { path = \"../tt\", version = \"0.0.0\" }\n mbe = { path = \"../mbe\" }\n syntax = { path = \"../syntax\" }\n expect-test = \"1.1\"\n+arbitrary = { version = \"1\", features = [\"derive\"] }\n+oorandom = \"11\""}, {"sha": "a06f0f4480c471bfcd2b3072c2acf5f05484e76d", "filename": "crates/cfg/src/cfg_expr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e6255356d2e4da2072f587b4fda559f775ad13d2/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6255356d2e4da2072f587b4fda559f775ad13d2/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs?ref=e6255356d2e4da2072f587b4fda559f775ad13d2", "patch": "@@ -50,6 +50,7 @@ impl fmt::Display for CfgAtom {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+#[cfg_attr(test, derive(arbitrary::Arbitrary))]\n pub enum CfgExpr {\n     Invalid,\n     Atom(CfgAtom),\n@@ -128,3 +129,17 @@ fn next_cfg_expr(it: &mut SliceIter<tt::TokenTree>) -> Option<CfgExpr> {\n     }\n     Some(ret)\n }\n+\n+#[cfg(test)]\n+impl arbitrary::Arbitrary<'_> for CfgAtom {\n+    fn arbitrary(u: &mut arbitrary::Unstructured<'_>) -> arbitrary::Result<Self> {\n+        match u.int_in_range(0..=1)? {\n+            0 => Ok(CfgAtom::Flag(String::arbitrary(u)?.into())),\n+            1 => Ok(CfgAtom::KeyValue {\n+                key: String::arbitrary(u)?.into(),\n+                value: String::arbitrary(u)?.into(),\n+            }),\n+            _ => unreachable!(),\n+        }\n+    }\n+}"}, {"sha": "0ae685a7d0de6ee88c80036f7da37ebd00c5d7b2", "filename": "crates/cfg/src/dnf.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e6255356d2e4da2072f587b4fda559f775ad13d2/crates%2Fcfg%2Fsrc%2Fdnf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6255356d2e4da2072f587b4fda559f775ad13d2/crates%2Fcfg%2Fsrc%2Fdnf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Fdnf.rs?ref=e6255356d2e4da2072f587b4fda559f775ad13d2", "patch": "@@ -255,11 +255,11 @@ impl Builder {\n fn make_dnf(expr: CfgExpr) -> CfgExpr {\n     match expr {\n         CfgExpr::Invalid | CfgExpr::Atom(_) | CfgExpr::Not(_) => expr,\n-        CfgExpr::Any(e) => CfgExpr::Any(e.into_iter().map(make_dnf).collect()),\n+        CfgExpr::Any(e) => flatten(CfgExpr::Any(e.into_iter().map(make_dnf).collect())),\n         CfgExpr::All(e) => {\n-            let e = e.into_iter().map(make_nnf).collect::<Vec<_>>();\n+            let e = e.into_iter().map(make_dnf).collect::<Vec<_>>();\n \n-            CfgExpr::Any(distribute_conj(&e))\n+            flatten(CfgExpr::Any(distribute_conj(&e)))\n         }\n     }\n }\n@@ -289,7 +289,7 @@ fn distribute_conj(conj: &[CfgExpr]) -> Vec<CfgExpr> {\n         }\n     }\n \n-    let mut out = Vec::new();\n+    let mut out = Vec::new(); // contains only `all()`\n     let mut with = Vec::new();\n \n     go(&mut out, &mut with, conj);\n@@ -318,3 +318,28 @@ fn make_nnf(expr: CfgExpr) -> CfgExpr {\n         },\n     }\n }\n+\n+/// Collapses nested `any()` and `all()` predicates.\n+fn flatten(expr: CfgExpr) -> CfgExpr {\n+    match expr {\n+        CfgExpr::All(inner) => CfgExpr::All(\n+            inner\n+                .into_iter()\n+                .flat_map(|e| match e {\n+                    CfgExpr::All(inner) => inner,\n+                    _ => vec![e],\n+                })\n+                .collect(),\n+        ),\n+        CfgExpr::Any(inner) => CfgExpr::Any(\n+            inner\n+                .into_iter()\n+                .flat_map(|e| match e {\n+                    CfgExpr::Any(inner) => inner,\n+                    _ => vec![e],\n+                })\n+                .collect(),\n+        ),\n+        _ => expr,\n+    }\n+}"}, {"sha": "bdc3f854e08661cd6cd9e377813ae6e8530a1fc3", "filename": "crates/cfg/src/tests.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e6255356d2e4da2072f587b4fda559f775ad13d2/crates%2Fcfg%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6255356d2e4da2072f587b4fda559f775ad13d2/crates%2Fcfg%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Ftests.rs?ref=e6255356d2e4da2072f587b4fda559f775ad13d2", "patch": "@@ -1,3 +1,4 @@\n+use arbitrary::{Arbitrary, Unstructured};\n use expect_test::{expect, Expect};\n use mbe::syntax_node_to_token_tree;\n use syntax::{ast, AstNode};\n@@ -130,6 +131,18 @@ fn nested() {\n     check_dnf(\"#![cfg(not(all(all(a, b))))]\", expect![[r#\"#![cfg(any(not(a), not(b)))]\"#]]);\n }\n \n+#[test]\n+fn regression() {\n+    check_dnf(\"#![cfg(all(not(not(any(any(any()))))))]\", expect![[r##\"#![cfg(any())]\"##]]);\n+    check_dnf(\"#![cfg(all(any(all(any()))))]\", expect![[r##\"#![cfg(any())]\"##]]);\n+    check_dnf(\"#![cfg(all(all(any())))]\", expect![[r##\"#![cfg(any())]\"##]]);\n+\n+    check_dnf(\"#![cfg(all(all(any(), x)))]\", expect![[r##\"#![cfg(any())]\"##]]);\n+    check_dnf(\"#![cfg(all(all(any()), x))]\", expect![[r##\"#![cfg(any())]\"##]]);\n+    check_dnf(\"#![cfg(all(all(any(x))))]\", expect![[r##\"#![cfg(x)]\"##]]);\n+    check_dnf(\"#![cfg(all(all(any(x), x)))]\", expect![[r##\"#![cfg(all(x, x))]\"##]]);\n+}\n+\n #[test]\n fn hints() {\n     let mut opts = CfgOptions::default();\n@@ -191,3 +204,21 @@ fn why_inactive() {\n         expect![[\"test and test2 are enabled and a is disabled\"]],\n     );\n }\n+\n+#[test]\n+fn proptest() {\n+    const REPEATS: usize = 512;\n+\n+    let mut rng = oorandom::Rand32::new(123456789);\n+    let mut buf = Vec::new();\n+    for _ in 0..REPEATS {\n+        buf.clear();\n+        while buf.len() < 512 {\n+            buf.extend(rng.rand_u32().to_ne_bytes());\n+        }\n+\n+        let mut u = Unstructured::new(&buf);\n+        let cfg = CfgExpr::arbitrary(&mut u).unwrap();\n+        DnfExpr::new(cfg);\n+    }\n+}"}]}