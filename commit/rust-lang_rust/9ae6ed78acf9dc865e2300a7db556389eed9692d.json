{"sha": "9ae6ed78acf9dc865e2300a7db556389eed9692d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZTZlZDc4YWNmOWRjODY1ZTIzMDBhN2RiNTU2Mzg5ZWVkOTY5MmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-02T07:03:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-02T07:03:26Z"}, "message": "Auto merge of #44942 - zackmdavis:lint_suggestions, r=estebank\n\ncode suggestions for unused-mut, while-true, deprecated-attribute, and unused-parens lints\n\n![lint_suggestions](https://user-images.githubusercontent.com/1076988/31044068-b2074de8-a57c-11e7-9319-6668508b6d1f.png)\n\nr? @estebank", "tree": {"sha": "a88473a1d7bb97b8a08866c02e68f965cad25362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a88473a1d7bb97b8a08866c02e68f965cad25362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ae6ed78acf9dc865e2300a7db556389eed9692d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae6ed78acf9dc865e2300a7db556389eed9692d", "html_url": "https://github.com/rust-lang/rust/commit/9ae6ed78acf9dc865e2300a7db556389eed9692d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ae6ed78acf9dc865e2300a7db556389eed9692d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2146c613d12de8dc44bc26e50af55251fc7e4f9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2146c613d12de8dc44bc26e50af55251fc7e4f9c", "html_url": "https://github.com/rust-lang/rust/commit/2146c613d12de8dc44bc26e50af55251fc7e4f9c"}, {"sha": "8a14022c5d31e1648bd1212a52a9f1a9ddbf3fa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a14022c5d31e1648bd1212a52a9f1a9ddbf3fa1", "html_url": "https://github.com/rust-lang/rust/commit/8a14022c5d31e1648bd1212a52a9f1a9ddbf3fa1"}], "stats": {"total": 173, "additions": 153, "deletions": 20}, "files": [{"sha": "02c0307e98cc8c0a8a0728212221a09bae710c12", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=9ae6ed78acf9dc865e2300a7db556389eed9692d", "patch": "@@ -208,7 +208,7 @@ impl Diagnostic {\n     /// Prints out a message with a suggested edit of the code. If the suggestion is presented\n     /// inline it will only show the text message and not the text.\n     ///\n-    /// See `diagnostic::CodeSuggestion` for more information.\n+    /// See `CodeSuggestion` for more information.\n     pub fn span_suggestion_short(&mut self, sp: Span, msg: &str, suggestion: String) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitution_parts: vec![Substitution {\n@@ -235,7 +235,7 @@ impl Diagnostic {\n     /// * may look like \"to do xyz, use\" or \"to do xyz, use abc\"\n     /// * may contain a name of a function, variable or type, but not whole expressions\n     ///\n-    /// See `diagnostic::CodeSuggestion` for more information.\n+    /// See `CodeSuggestion` for more information.\n     pub fn span_suggestion(&mut self, sp: Span, msg: &str, suggestion: String) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitution_parts: vec![Substitution {"}, {"sha": "2f994de396c6f10d3f5205e8c1e15a158b5c4024", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=9ae6ed78acf9dc865e2300a7db556389eed9692d", "patch": "@@ -48,7 +48,7 @@ impl Emitter for EmitterWriter {\n                sugg.substitution_parts[0].substitutions[0].find('\\n').is_none() {\n                 let substitution = &sugg.substitution_parts[0].substitutions[0];\n                 let msg = if substitution.len() == 0 || !sugg.show_code_when_inline {\n-                    // This substitution is only removal or we explicitely don't want to show the\n+                    // This substitution is only removal or we explicitly don't want to show the\n                     // code inline, don't show it\n                     format!(\"help: {}\", sugg.msg)\n                 } else {"}, {"sha": "7f331418d4242193bf597e6063fe5ef2551df518", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=9ae6ed78acf9dc865e2300a7db556389eed9692d", "patch": "@@ -76,9 +76,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for WhileTrue {\n             if let hir::ExprLit(ref lit) = cond.node {\n                 if let ast::LitKind::Bool(true) = lit.node {\n                     if lit.span.ctxt() == SyntaxContext::empty() {\n-                        cx.span_lint(WHILE_TRUE,\n-                                    e.span,\n-                                    \"denote infinite loops with loop { ... }\");\n+                        let msg = \"denote infinite loops with `loop { ... }`\";\n+                        let mut err = cx.struct_span_lint(WHILE_TRUE, e.span, msg);\n+                        let condition_span = cx.tcx.sess.codemap().def_span(e.span);\n+                        err.span_suggestion_short(condition_span,\n+                                                  \"use `loop`\",\n+                                                  \"loop\".to_owned());\n+                        err.emit();\n                     }\n                 }\n             }\n@@ -650,10 +654,11 @@ impl EarlyLintPass for DeprecatedAttr {\n                                              ref name,\n                                              ref reason,\n                                              _) = g {\n-                    cx.span_lint(DEPRECATED,\n-                                 attr.span,\n-                                 &format!(\"use of deprecated attribute `{}`: {}. See {}\",\n-                                          name, reason, link));\n+                    let msg = format!(\"use of deprecated attribute `{}`: {}. See {}\",\n+                                      name, reason, link);\n+                    let mut err = cx.struct_span_lint(DEPRECATED, attr.span, &msg);\n+                    err.span_suggestion_short(attr.span, \"remove this attribute\", \"\".to_owned());\n+                    err.emit();\n                 }\n                 return;\n             }"}, {"sha": "e2ade19b6e2856a4f9a6361ad168ff412ea5578e", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=9ae6ed78acf9dc865e2300a7db556389eed9692d", "patch": "@@ -22,6 +22,7 @@ use syntax::attr;\n use syntax::feature_gate::{BUILTIN_ATTRIBUTES, AttributeType};\n use syntax::symbol::keywords;\n use syntax::ptr::P;\n+use syntax::print::pprust;\n use syntax::util::parser;\n use syntax_pos::Span;\n \n@@ -70,9 +71,13 @@ impl UnusedMut {\n         let used_mutables = cx.tcx.used_mut_nodes.borrow();\n         for (_, v) in &mutables {\n             if !v.iter().any(|e| used_mutables.contains(e)) {\n-                cx.span_lint(UNUSED_MUT,\n-                             cx.tcx.hir.span(v[0]),\n-                             \"variable does not need to be mutable\");\n+                let binding_span = cx.tcx.hir.span(v[0]);\n+                let mut_span = cx.tcx.sess.codemap().span_until_char(binding_span, ' ');\n+                let mut err = cx.struct_span_lint(UNUSED_MUT,\n+                                                  binding_span,\n+                                                  \"variable does not need to be mutable\");\n+                err.span_suggestion_short(mut_span, \"remove this `mut`\", \"\".to_owned());\n+                err.emit();\n             }\n         }\n     }\n@@ -325,9 +330,40 @@ impl UnusedParens {\n             let necessary = struct_lit_needs_parens &&\n                             parser::contains_exterior_struct_lit(&inner);\n             if !necessary {\n-                cx.span_lint(UNUSED_PARENS,\n-                             value.span,\n-                             &format!(\"unnecessary parentheses around {}\", msg))\n+                let span_msg = format!(\"unnecessary parentheses around {}\", msg);\n+                let mut err = cx.struct_span_lint(UNUSED_PARENS,\n+                                                  value.span,\n+                                                  &span_msg);\n+                // Remove exactly one pair of parentheses (rather than na\u00efvely\n+                // stripping all paren characters)\n+                let mut ate_left_paren = false;\n+                let mut ate_right_paren = false;\n+                let parens_removed = pprust::expr_to_string(value)\n+                    .trim_matches(|c| {\n+                        match c {\n+                            '(' => {\n+                                if ate_left_paren {\n+                                    false\n+                                } else {\n+                                    ate_left_paren = true;\n+                                    true\n+                                }\n+                            },\n+                            ')' => {\n+                                if ate_right_paren {\n+                                    false\n+                                } else {\n+                                    ate_right_paren = true;\n+                                    true\n+                                }\n+                            },\n+                            _ => false,\n+                        }\n+                    }).to_owned();\n+                err.span_suggestion_short(value.span,\n+                                          \"remove these parentheses\",\n+                                          parens_removed);\n+                err.emit();\n             }\n         }\n     }"}, {"sha": "f6e85ed6725ceafbd6bbe3d40d2e44aab63bec2f", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9ae6ed78acf9dc865e2300a7db556389eed9692d", "patch": "@@ -824,7 +824,8 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n     (\"no_debug\", Whitelisted, Gated(\n         Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/29721\"),\n         \"no_debug\",\n-        \"the `#[no_debug]` attribute is an experimental feature\",\n+        \"the `#[no_debug]` attribute was an experimental feature that has been \\\n+         deprecated due to lack of demand\",\n         cfg_fn!(no_debug))),\n     (\"omit_gdb_pretty_printer_section\", Whitelisted, Gated(Stability::Unstable,\n                                                        \"omit_gdb_pretty_printer_section\","}, {"sha": "d21493de50a7fed484baf5aff3f234cf3df31b3a", "filename": "src/test/compile-fail/feature-gate-no-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Ftest%2Fcompile-fail%2Ffeature-gate-no-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Ftest%2Fcompile-fail%2Ffeature-gate-no-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-no-debug.rs?ref=9ae6ed78acf9dc865e2300a7db556389eed9692d", "patch": "@@ -10,5 +10,5 @@\n \n #![allow(deprecated)]\n \n-#[no_debug] //~ ERROR the `#[no_debug]` attribute is\n+#[no_debug] //~ ERROR the `#[no_debug]` attribute was\n fn main() {}"}, {"sha": "9de3040bb616c0c4707312271581b123da881ac7", "filename": "src/test/compile-fail/issue-1962.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs?ref=9ae6ed78acf9dc865e2300a7db556389eed9692d", "patch": "@@ -11,7 +11,7 @@\n // compile-flags: -D while-true\n fn main() {\n   let mut i = 0;\n-  while true  { //~ ERROR denote infinite loops with loop\n+  while true  { //~ ERROR denote infinite loops with `loop\n     i += 1;\n     if i == 5 { break; }\n   }"}, {"sha": "874124a7d36583227207344ac93128198b1e15c0", "filename": "src/test/ui/lint/suggestions.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs?ref=9ae6ed78acf9dc865e2300a7db556389eed9692d", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![warn(unused_mut)] // UI tests pass `-A unused`\u2014see Issue #43896\n+#![feature(no_debug)]\n+\n+#[no_debug] // should suggest removal of deprecated attribute\n+fn main() {\n+    while true { // should suggest `loop`\n+        let mut a = (1); // should suggest no `mut`, no parens\n+        println!(\"{}\", a);\n+    }\n+}"}, {"sha": "5b2a4f589f7381c0b15cff47ca8c785ec3aed91e", "filename": "src/test/ui/lint/suggestions.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=9ae6ed78acf9dc865e2300a7db556389eed9692d", "patch": "@@ -0,0 +1,45 @@\n+warning: unnecessary parentheses around assigned value\n+  --> $DIR/suggestions.rs:17:21\n+   |\n+17 |         let mut a = (1); // should suggest no `mut`, no parens\n+   |                     ^^^ help: remove these parentheses\n+   |\n+   = note: #[warn(unused_parens)] on by default\n+\n+warning: use of deprecated attribute `no_debug`: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand. See https://github.com/rust-lang/rust/issues/29721\n+  --> $DIR/suggestions.rs:14:1\n+   |\n+14 | #[no_debug] // should suggest removal of deprecated attribute\n+   | ^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: #[warn(deprecated)] on by default\n+\n+warning: denote infinite loops with `loop { ... }`\n+  --> $DIR/suggestions.rs:16:5\n+   |\n+16 |       while true { // should suggest `loop`\n+   |       ^---------\n+   |       |\n+   |  _____help: use `loop`\n+   | |\n+17 | |         let mut a = (1); // should suggest no `mut`, no parens\n+18 | |         println!(\"{}\", a);\n+19 | |     }\n+   | |_____^\n+   |\n+   = note: #[warn(while_true)] on by default\n+\n+warning: variable does not need to be mutable\n+  --> $DIR/suggestions.rs:17:13\n+   |\n+17 |         let mut a = (1); // should suggest no `mut`, no parens\n+   |             ---^^\n+   |             |\n+   |             help: remove this `mut`\n+   |\n+note: lint level defined here\n+  --> $DIR/suggestions.rs:11:9\n+   |\n+11 | #![warn(unused_mut)] // UI tests pass `-A unused`\u2014see Issue #43896\n+   |         ^^^^^^^^^^\n+"}, {"sha": "d7cbd11472a64d0faac959760827b929a1ad4061", "filename": "src/test/ui/lint/unused_parens_json_suggestion.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs?ref=9ae6ed78acf9dc865e2300a7db556389eed9692d", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --error-format json\n+\n+// ignore-windows (see Issue #44968)\n+\n+// The output for humans should just highlight the whole span without showing\n+// the suggested replacement, but we also want to test that suggested\n+// replacement only removes one set of parentheses, rather than na\u00efvely\n+// stripping away any starting or ending parenthesis characters\u2014hence this\n+// test of the JSON error format.\n+\n+fn main() {\n+    // We want to suggest the properly-balanced expression `1 / (2 + 3)`, not\n+    // the malformed `1 / (2 + 3`\n+    let _a = (1 / (2 + 3));\n+}"}, {"sha": "140224e081489c9b38edd19b5ab73c8dd53e0f76", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=9ae6ed78acf9dc865e2300a7db556389eed9692d", "patch": "@@ -0,0 +1 @@\n+{\"message\":\"unnecessary parentheses around assigned value\",\"code\":null,\"level\":\"warning\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_json_suggestion.rs\",\"byte_start\":1014,\"byte_end\":1027,\"line_start\":24,\"line_end\":24,\"column_start\":14,\"column_end\":27,\"is_primary\":true,\"text\":[{\"text\":\"    let _a = (1 / (2 + 3));\",\"highlight_start\":14,\"highlight_end\":27}],\"label\":null,\"suggested_replacement\":null,\"expansion\":null}],\"children\":[{\"message\":\"#[warn(unused_parens)] on by default\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"remove these parentheses\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_json_suggestion.rs\",\"byte_start\":1014,\"byte_end\":1027,\"line_start\":24,\"line_end\":24,\"column_start\":14,\"column_end\":27,\"is_primary\":true,\"text\":[{\"text\":\"    let _a = (1 / (2 + 3));\",\"highlight_start\":14,\"highlight_end\":27}],\"label\":null,\"suggested_replacement\":\"1 / (2 + 3)\",\"expansion\":null}],\"children\":[],\"rendered\":\"    let _a = 1 / (2 + 3);\"}],\"rendered\":null}"}, {"sha": "19e22b3f6f94fc8c10aa82f013f0b1ced61ca61e", "filename": "src/test/ui/path-lookahead.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae6ed78acf9dc865e2300a7db556389eed9692d/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpath-lookahead.stderr?ref=9ae6ed78acf9dc865e2300a7db556389eed9692d", "patch": "@@ -2,7 +2,7 @@ warning: unnecessary parentheses around `return` value\n   --> $DIR/path-lookahead.rs:18:10\n    |\n 18 |   return (<T as ToString>::to_string(&arg)); //~WARN unnecessary parentheses around `return` value\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove these parentheses\n    |\n    = note: #[warn(unused_parens)] on by default\n "}]}