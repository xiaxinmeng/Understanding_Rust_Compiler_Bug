{"sha": "722d67d5e7d55f7135984fe359892476564429d4", "node_id": "C_kwDOAAsO6NoAKDcyMmQ2N2Q1ZTdkNTVmNzEzNTk4NGZlMzU5ODkyNDc2NTY0NDI5ZDQ", "commit": {"author": {"name": "Daniel Paoliello", "email": "danpao@microsoft.com", "date": "2022-07-19T17:40:26Z"}, "committer": {"name": "Daniel Paoliello", "email": "danpao@microsoft.com", "date": "2022-07-26T21:11:37Z"}, "message": "Fix vectorcall", "tree": {"sha": "7b08a1740fb3aac34aeca9f807709c968bf668de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b08a1740fb3aac34aeca9f807709c968bf668de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/722d67d5e7d55f7135984fe359892476564429d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/722d67d5e7d55f7135984fe359892476564429d4", "html_url": "https://github.com/rust-lang/rust/commit/722d67d5e7d55f7135984fe359892476564429d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/722d67d5e7d55f7135984fe359892476564429d4/comments", "author": {"login": "dpaoliello", "id": 10580822, "node_id": "MDQ6VXNlcjEwNTgwODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10580822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpaoliello", "html_url": "https://github.com/dpaoliello", "followers_url": "https://api.github.com/users/dpaoliello/followers", "following_url": "https://api.github.com/users/dpaoliello/following{/other_user}", "gists_url": "https://api.github.com/users/dpaoliello/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpaoliello/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpaoliello/subscriptions", "organizations_url": "https://api.github.com/users/dpaoliello/orgs", "repos_url": "https://api.github.com/users/dpaoliello/repos", "events_url": "https://api.github.com/users/dpaoliello/events{/privacy}", "received_events_url": "https://api.github.com/users/dpaoliello/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dpaoliello", "id": 10580822, "node_id": "MDQ6VXNlcjEwNTgwODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10580822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpaoliello", "html_url": "https://github.com/dpaoliello", "followers_url": "https://api.github.com/users/dpaoliello/followers", "following_url": "https://api.github.com/users/dpaoliello/following{/other_user}", "gists_url": "https://api.github.com/users/dpaoliello/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpaoliello/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpaoliello/subscriptions", "organizations_url": "https://api.github.com/users/dpaoliello/orgs", "repos_url": "https://api.github.com/users/dpaoliello/repos", "events_url": "https://api.github.com/users/dpaoliello/events{/privacy}", "received_events_url": "https://api.github.com/users/dpaoliello/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9b31839b624345d59fda6e595b9abae71fcea13", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b31839b624345d59fda6e595b9abae71fcea13", "html_url": "https://github.com/rust-lang/rust/commit/c9b31839b624345d59fda6e595b9abae71fcea13"}], "stats": {"total": 174, "additions": 144, "deletions": 30}, "files": [{"sha": "9f6079ecba4d6364c6f22301416e7b317cd3e34b", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/722d67d5e7d55f7135984fe359892476564429d4/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722d67d5e7d55f7135984fe359892476564429d4/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=722d67d5e7d55f7135984fe359892476564429d4", "patch": "@@ -472,7 +472,9 @@ impl<'tcx> Collector<'tcx> {\n                 Abi::Fastcall { .. } => {\n                     DllCallingConvention::Fastcall(self.i686_arg_list_size(item))\n                 }\n-                // Vectorcall is intentionally not supported at this time.\n+                Abi::Vectorcall { .. } => {\n+                    DllCallingConvention::Vectorcall(self.i686_arg_list_size(item))\n+                }\n                 _ => {\n                     self.tcx.sess.span_fatal(\n                         item.span,"}, {"sha": "577126a95cc8c81bc43f9cd5e2779d49f66e55f9", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/722d67d5e7d55f7135984fe359892476564429d4/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722d67d5e7d55f7135984fe359892476564429d4/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=722d67d5e7d55f7135984fe359892476564429d4", "patch": "@@ -669,8 +669,10 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n \n         match &cx.target_spec().arch[..] {\n             \"x86\" => {\n-                let flavor = if let spec::abi::Abi::Fastcall { .. } = abi {\n-                    x86::Flavor::Fastcall\n+                let flavor = if let spec::abi::Abi::Fastcall { .. }\n+                | spec::abi::Abi::Vectorcall { .. } = abi\n+                {\n+                    x86::Flavor::FastcallOrVectorcall\n                 } else {\n                     x86::Flavor::General\n                 };"}, {"sha": "c7d59baf9191f0667b4650d2ee77b099c4934ccd", "filename": "compiler/rustc_target/src/abi/call/x86.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/722d67d5e7d55f7135984fe359892476564429d4/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722d67d5e7d55f7135984fe359892476564429d4/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs?ref=722d67d5e7d55f7135984fe359892476564429d4", "patch": "@@ -5,7 +5,7 @@ use crate::spec::HasTargetSpec;\n #[derive(PartialEq)]\n pub enum Flavor {\n     General,\n-    Fastcall,\n+    FastcallOrVectorcall,\n }\n \n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>, flavor: Flavor)\n@@ -60,9 +60,9 @@ where\n         }\n     }\n \n-    if flavor == Flavor::Fastcall {\n+    if flavor == Flavor::FastcallOrVectorcall {\n         // Mark arguments as InReg like clang does it,\n-        // so our fastcall is compatible with C/C++ fastcall.\n+        // so our fastcall/vectorcall is compatible with C/C++ fastcall/vectorcall.\n \n         // Clang reference: lib/CodeGen/TargetInfo.cpp\n         // See X86_32ABIInfo::shouldPrimitiveUseInReg(), X86_32ABIInfo::updateFreeRegs()"}, {"sha": "a254285ab76ce7709fdb8e7a423aa1893e174735", "filename": "src/test/run-make/raw-dylib-alt-calling-convention/Makefile", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/722d67d5e7d55f7135984fe359892476564429d4/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/722d67d5e7d55f7135984fe359892476564429d4/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2FMakefile?ref=722d67d5e7d55f7135984fe359892476564429d4", "patch": "@@ -14,10 +14,19 @@ ifdef IS_MSVC\n else\n \t$(CC) \"$(TMPDIR)\"/extern.obj -shared -o \"$(TMPDIR)\"/extern.dll\n endif\n-\t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/output.txt\n \n+\t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/output.txt\n ifdef RUSTC_BLESS_TEST\n \tcp \"$(TMPDIR)\"/output.txt output.txt\n else\n \t$(DIFF) output.txt \"$(TMPDIR)\"/output.txt\n endif\n+\n+ifdef IS_MSVC\n+\t\"$(TMPDIR)\"/driver true > \"$(TMPDIR)\"/output.msvc.txt\n+ifdef RUSTC_BLESS_TEST\n+\tcp \"$(TMPDIR)\"/output.msvc.txt output.msvc.txt\n+else\n+\t$(DIFF) output.msvc.txt \"$(TMPDIR)\"/output.msvc.txt\n+endif\n+endif"}, {"sha": "b7f372c6b2b2b500f7684c5e38b9a62f57bc7444", "filename": "src/test/run-make/raw-dylib-alt-calling-convention/driver.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/722d67d5e7d55f7135984fe359892476564429d4/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722d67d5e7d55f7135984fe359892476564429d4/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Fdriver.rs?ref=722d67d5e7d55f7135984fe359892476564429d4", "patch": "@@ -1,5 +1,8 @@\n extern crate raw_dylib_alt_calling_convention_test;\n \n fn main() {\n-    raw_dylib_alt_calling_convention_test::library_function();\n+    raw_dylib_alt_calling_convention_test::library_function(\n+        std::env::args().skip(1).next().map_or(\n+            false,\n+            |s| std::str::FromStr::from_str(&s).unwrap()));\n }"}, {"sha": "0c4d12af9b2ca62a3fa10d407408211a2c9a7c0a", "filename": "src/test/run-make/raw-dylib-alt-calling-convention/extern.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/722d67d5e7d55f7135984fe359892476564429d4/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Fextern.c", "raw_url": "https://github.com/rust-lang/rust/raw/722d67d5e7d55f7135984fe359892476564429d4/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Fextern.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Fextern.c?ref=722d67d5e7d55f7135984fe359892476564429d4", "patch": "@@ -121,3 +121,58 @@ __declspec(dllexport) void __fastcall fastcall_fn_9(uint8_t x, double y) {\n     printf(\"fastcall_fn_9(%d, %.1f)\\n\", x, y);\n     fflush(stdout);\n }\n+\n+// GCC doesn't support vectorcall: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89485\n+#ifdef _MSC_VER\n+__declspec(dllexport) void __vectorcall vectorcall_fn_1(int i) {\n+    printf(\"vectorcall_fn_1(%d)\\n\", i);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __vectorcall vectorcall_fn_2(uint8_t i, float f) {\n+    printf(\"vectorcall_fn_2(%d, %.1f)\\n\", i, f);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __vectorcall vectorcall_fn_3(double d) {\n+    printf(\"vectorcall_fn_3(%.1f)\\n\", d);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __vectorcall vectorcall_fn_4(uint8_t i, uint8_t j, float f) {\n+    printf(\"vectorcall_fn_4(%d, %d, %.1f)\\n\", i, j, f);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __vectorcall vectorcall_fn_5(struct S s, int i) {\n+    printf(\"vectorcall_fn_5(S { x: %d, y: %d }, %d)\\n\", s.x, s.y, i);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __vectorcall vectorcall_fn_6(struct S* s) {\n+    if (s) {\n+        printf(\"vectorcall_fn_6(S { x: %d, y: %d })\\n\", s->x, s->y);\n+    } else {\n+        printf(\"vectorcall_fn_6(null)\\n\");\n+    }\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __vectorcall vectorcall_fn_7(struct S2 s, int i) {\n+    printf(\"vectorcall_fn_7(S2 { x: %d, y: %d }, %d)\\n\", s.x, s.y, i);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __vectorcall vectorcall_fn_8(struct S3 s, struct S3 t) {\n+    printf(\"vectorcall_fn_8(S3 { x: [%d, %d, %d, %d, %d] }, S3 { x: [%d, %d, %d, %d, %d] })\\n\",\n+           s.x[0], s.x[1], s.x[2], s.x[3], s.x[4],\n+           t.x[0], t.x[1], t.x[2], t.x[3], t.x[4]\n+        );\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __vectorcall vectorcall_fn_9(uint8_t x, double y) {\n+    printf(\"vectorcall_fn_9(%d, %.1f)\\n\", x, y);\n+    fflush(stdout);\n+}\n+#endif"}, {"sha": "b5e9415b2bec312ba2b31effabdbea0bf3ce1e98", "filename": "src/test/run-make/raw-dylib-alt-calling-convention/lib.rs", "status": "modified", "additions": 54, "deletions": 22, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/722d67d5e7d55f7135984fe359892476564429d4/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722d67d5e7d55f7135984fe359892476564429d4/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Flib.rs?ref=722d67d5e7d55f7135984fe359892476564429d4", "patch": "@@ -1,4 +1,5 @@\n #![feature(raw_dylib)]\n+#![feature(abi_vectorcall)]\n \n #[repr(C)]\n #[derive(Clone)]\n@@ -46,29 +47,60 @@ extern \"fastcall\" {\n     fn fastcall_fn_9(x: u8, y: f64);\n }\n \n-pub fn library_function() {\n+#[cfg(target_env = \"msvc\")]\n+#[link(name = \"extern\", kind = \"raw-dylib\")]\n+extern \"vectorcall\" {\n+    fn vectorcall_fn_1(i: i32);\n+    fn vectorcall_fn_2(c: u8, f: f32);\n+    fn vectorcall_fn_3(d: f64);\n+    fn vectorcall_fn_4(i: u8, j: u8, f: f32);\n+    fn vectorcall_fn_5(a: S, b: i32);\n+    fn vectorcall_fn_6(a: Option<&S>);\n+    fn vectorcall_fn_7(a: S2, b: i32);\n+    fn vectorcall_fn_8(a: S3, b: S3);\n+    fn vectorcall_fn_9(x: u8, y: f64);\n+}\n+\n+pub fn library_function(run_msvc_only: bool) {\n     unsafe {\n-        stdcall_fn_1(14);\n-        stdcall_fn_2(16, 3.5);\n-        stdcall_fn_3(3.5);\n-        stdcall_fn_4(1, 2, 3.0);\n-        stdcall_fn_5(S { x: 1, y: 2 }, 16);\n-        stdcall_fn_6(Some(&S { x: 10, y: 12 }));\n-        stdcall_fn_7(S2 { x: 15, y: 16 }, 3);\n-        stdcall_fn_8(S3 { x: [1, 2, 3, 4, 5] }, S3 { x: [6, 7, 8, 9, 10] });\n-        stdcall_fn_9(1, 3.0);\n+        if !run_msvc_only {\n+            stdcall_fn_1(14);\n+            stdcall_fn_2(16, 3.5);\n+            stdcall_fn_3(3.5);\n+            stdcall_fn_4(1, 2, 3.0);\n+            stdcall_fn_5(S { x: 1, y: 2 }, 16);\n+            stdcall_fn_6(Some(&S { x: 10, y: 12 }));\n+            stdcall_fn_7(S2 { x: 15, y: 16 }, 3);\n+            stdcall_fn_8(S3 { x: [1, 2, 3, 4, 5] }, S3 { x: [6, 7, 8, 9, 10] });\n+            stdcall_fn_9(1, 3.0);\n+\n+            fastcall_fn_1(14);\n+            fastcall_fn_2(16, 3.5);\n+            fastcall_fn_3(3.5);\n+            fastcall_fn_4(1, 2, 3.0);\n+            fastcall_fn_6(Some(&S { x: 10, y: 12 }));\n+            fastcall_fn_8(S3 { x: [1, 2, 3, 4, 5] }, S3 { x: [6, 7, 8, 9, 10] });\n+            fastcall_fn_9(1, 3.0);\n+        } else {\n+            // FIXME: 91167\n+            // rustc generates incorrect code for the calls to fastcall_fn_5 and fastcall_fn_7\n+            // on i686-pc-windows-gnu; disabling these until the indicated issue is fixed.\n+            fastcall_fn_5(S { x: 1, y: 2 }, 16);\n+            fastcall_fn_7(S2 { x: 15, y: 16 }, 3);\n \n-        fastcall_fn_1(14);\n-        fastcall_fn_2(16, 3.5);\n-        fastcall_fn_3(3.5);\n-        fastcall_fn_4(1, 2, 3.0);\n-        // FIXME: 91167\n-        // rustc generates incorrect code for the calls to fastcall_fn_5 and fastcall_fn_7\n-        // on i686-pc-windows-gnu; commenting these out until the indicated issue is fixed.\n-        //fastcall_fn_5(S { x: 1, y: 2 }, 16);\n-        fastcall_fn_6(Some(&S { x: 10, y: 12 }));\n-        //fastcall_fn_7(S2 { x: 15, y: 16 }, 3);\n-        fastcall_fn_8(S3 { x: [1, 2, 3, 4, 5] }, S3 { x: [6, 7, 8, 9, 10] });\n-        fastcall_fn_9(1, 3.0);\n+            // GCC doesn't support vectorcall: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89485\n+            #[cfg(target_env = \"msvc\")]\n+            {\n+                vectorcall_fn_1(14);\n+                vectorcall_fn_2(16, 3.5);\n+                vectorcall_fn_3(3.5);\n+                vectorcall_fn_4(1, 2, 3.0);\n+                vectorcall_fn_5(S { x: 1, y: 2 }, 16);\n+                vectorcall_fn_6(Some(&S { x: 10, y: 12 }));\n+                vectorcall_fn_7(S2 { x: 15, y: 16 }, 3);\n+                vectorcall_fn_8(S3 { x: [1, 2, 3, 4, 5] }, S3 { x: [6, 7, 8, 9, 10] });\n+                vectorcall_fn_9(1, 3.0);\n+            }\n+        }\n     }\n }"}, {"sha": "9ddd1b11016253569c6f170fde51613a814852aa", "filename": "src/test/run-make/raw-dylib-alt-calling-convention/output.msvc.txt", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/722d67d5e7d55f7135984fe359892476564429d4/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Foutput.msvc.txt", "raw_url": "https://github.com/rust-lang/rust/raw/722d67d5e7d55f7135984fe359892476564429d4/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Foutput.msvc.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Foutput.msvc.txt?ref=722d67d5e7d55f7135984fe359892476564429d4", "patch": "@@ -0,0 +1,11 @@\n+fastcall_fn_5(S { x: 1, y: 2 }, 16)\n+fastcall_fn_7(S2 { x: 15, y: 16 }, 3)\n+vectorcall_fn_1(14)\n+vectorcall_fn_2(16, 3.5)\n+vectorcall_fn_3(3.5)\n+vectorcall_fn_4(1, 2, 3.0)\n+vectorcall_fn_5(S { x: 1, y: 2 }, 16)\n+vectorcall_fn_6(S { x: 10, y: 12 })\n+vectorcall_fn_7(S2 { x: 15, y: 16 }, 3)\n+vectorcall_fn_8(S3 { x: [1, 2, 3, 4, 5] }, S3 { x: [6, 7, 8, 9, 10] })\n+vectorcall_fn_9(1, 3.0)"}]}