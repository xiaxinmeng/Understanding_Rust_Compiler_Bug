{"sha": "74f8201586435a7a2e7f8fd49c7eb0750a089180", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZjgyMDE1ODY0MzVhN2EyZTdmOGZkNDljN2ViMDc1MGEwODkxODA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-20T11:47:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-20T11:49:29Z"}, "message": "Avoid intermediate collections", "tree": {"sha": "ed1e997cb8dc1537d4d2a64b3a73d4b2f78b9d3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed1e997cb8dc1537d4d2a64b3a73d4b2f78b9d3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74f8201586435a7a2e7f8fd49c7eb0750a089180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74f8201586435a7a2e7f8fd49c7eb0750a089180", "html_url": "https://github.com/rust-lang/rust/commit/74f8201586435a7a2e7f8fd49c7eb0750a089180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74f8201586435a7a2e7f8fd49c7eb0750a089180/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "724059569b4c775ee4723640e0eaabe0da7cdeaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/724059569b4c775ee4723640e0eaabe0da7cdeaf", "html_url": "https://github.com/rust-lang/rust/commit/724059569b4c775ee4723640e0eaabe0da7cdeaf"}], "stats": {"total": 80, "additions": 53, "deletions": 27}, "files": [{"sha": "47a85dc4568f54f3713d5bf70adf42e553b2f2db", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/74f8201586435a7a2e7f8fd49c7eb0750a089180/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74f8201586435a7a2e7f8fd49c7eb0750a089180/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=74f8201586435a7a2e7f8fd49c7eb0750a089180", "patch": "@@ -101,24 +101,22 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n         Some(it) => it,\n     };\n \n-    runnables_mod(&sema, module)\n+    let mut res = Vec::new();\n+    runnables_mod(&sema, &mut res, module);\n+    res\n }\n \n-fn runnables_mod(sema: &Semantics<RootDatabase>, module: hir::Module) -> Vec<Runnable> {\n-    let mut res: Vec<Runnable> = module\n-        .declarations(sema.db)\n-        .into_iter()\n-        .filter_map(|def| {\n-            let runnable = match def {\n-                hir::ModuleDef::Module(it) => runnable_mod(&sema, it),\n-                hir::ModuleDef::Function(it) => runnable_fn(&sema, it),\n-                _ => None,\n-            };\n-            runnable.or_else(|| module_def_doctest(&sema, def))\n-        })\n-        .collect();\n+fn runnables_mod(sema: &Semantics<RootDatabase>, acc: &mut Vec<Runnable>, module: hir::Module) {\n+    acc.extend(module.declarations(sema.db).into_iter().filter_map(|def| {\n+        let runnable = match def {\n+            hir::ModuleDef::Module(it) => runnable_mod(&sema, it),\n+            hir::ModuleDef::Function(it) => runnable_fn(&sema, it),\n+            _ => None,\n+        };\n+        runnable.or_else(|| module_def_doctest(&sema, def))\n+    }));\n \n-    res.extend(module.impl_defs(sema.db).into_iter().flat_map(|it| it.items(sema.db)).filter_map(\n+    acc.extend(module.impl_defs(sema.db).into_iter().flat_map(|it| it.items(sema.db)).filter_map(\n         |def| match def {\n             hir::AssocItem::Function(it) => {\n                 runnable_fn(&sema, it).or_else(|| module_def_doctest(&sema, it.into()))\n@@ -128,18 +126,14 @@ fn runnables_mod(sema: &Semantics<RootDatabase>, module: hir::Module) -> Vec<Run\n         },\n     ));\n \n-    res.extend(module.declarations(sema.db).into_iter().flat_map(|def| match def {\n-        hir::ModuleDef::Module(submodule) => match submodule.definition_source(sema.db).value {\n-            hir::ModuleSource::SourceFile(_) => {\n-                mark::hit!(dont_recurse_in_outline_submodules);\n-                Vec::new()\n+    for def in module.declarations(sema.db) {\n+        if let hir::ModuleDef::Module(submodule) = def {\n+            match submodule.definition_source(sema.db).value {\n+                hir::ModuleSource::Module(_) => runnables_mod(sema, acc, submodule),\n+                hir::ModuleSource::SourceFile(_) => mark::hit!(dont_recurse_in_outline_submodules),\n             }\n-            hir::ModuleSource::Module(_) => runnables_mod(sema, submodule),\n-        },\n-        _ => Vec::new(),\n-    }));\n-\n-    res\n+        }\n+    }\n }\n \n pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) -> Option<Runnable> {"}, {"sha": "3896493980b116f5eddb38723b947e423ceaef24", "filename": "docs/dev/style.md", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/74f8201586435a7a2e7f8fd49c7eb0750a089180/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/74f8201586435a7a2e7f8fd49c7eb0750a089180/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=74f8201586435a7a2e7f8fd49c7eb0750a089180", "patch": "@@ -421,12 +421,44 @@ fn frobnicate(s: &str) {\n **Rationale:** reveals the costs.\n It is also more efficient when the caller already owns the allocation.\n \n-## Collection types\n+## Collection Types\n \n Prefer `rustc_hash::FxHashMap` and `rustc_hash::FxHashSet` instead of the ones in `std::collections`.\n \n **Rationale:** they use a hasher that's significantly faster and using them consistently will reduce code size by some small amount.\n \n+## Avoid Intermediate Collections\n+\n+When writing a recursive function to compute a sets of things, use an accumulator parameter instead of returning a fresh collection.\n+Accumulator goes first in the list of arguments.\n+\n+```rust\n+// GOOD\n+pub fn reachable_nodes(node: Node) -> FxHashSet<Node> {\n+    let mut res = FxHashSet::default();\n+    go(&mut res, node);\n+    res\n+}\n+fn go(acc: &mut FxHashSet<Node>, node: Node) {\n+    acc.insert(node);\n+    for n in node.neighbors() {\n+        go(acc, n);\n+    }\n+}\n+\n+// BAD\n+pub fn reachable_nodes(node: Node) -> FxHashSet<Node> {\n+    let mut res = FxHashSet::default();\n+    res.insert(node);\n+    for n in node.neighbors() {\n+        res.extend(reachable_nodes(n));\n+    }\n+    res\n+}\n+```\n+\n+**Rational:** re-use allocations, accumulator style is more concise for complex cases.\n+\n # Style\n \n ## Order of Imports"}]}