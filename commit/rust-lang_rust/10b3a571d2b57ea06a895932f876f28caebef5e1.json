{"sha": "10b3a571d2b57ea06a895932f876f28caebef5e1", "node_id": "C_kwDOAAsO6NoAKDEwYjNhNTcxZDJiNTdlYTA2YTg5NTkzMmY4NzZmMjhjYWViZWY1ZTE", "commit": {"author": {"name": "Michael", "email": "michael.prantl@hotmail.de", "date": "2021-11-26T19:18:51Z"}, "committer": {"name": "Michael", "email": "michael.prantl@hotmail.de", "date": "2021-12-01T21:04:12Z"}, "message": "Factor out build reduced graph for extern crate", "tree": {"sha": "99f5eb1ea09844197a12a00e8e19741214508149", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99f5eb1ea09844197a12a00e8e19741214508149"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10b3a571d2b57ea06a895932f876f28caebef5e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10b3a571d2b57ea06a895932f876f28caebef5e1", "html_url": "https://github.com/rust-lang/rust/commit/10b3a571d2b57ea06a895932f876f28caebef5e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10b3a571d2b57ea06a895932f876f28caebef5e1/comments", "author": {"login": "mjptree", "id": 18014796, "node_id": "MDQ6VXNlcjE4MDE0Nzk2", "avatar_url": "https://avatars.githubusercontent.com/u/18014796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjptree", "html_url": "https://github.com/mjptree", "followers_url": "https://api.github.com/users/mjptree/followers", "following_url": "https://api.github.com/users/mjptree/following{/other_user}", "gists_url": "https://api.github.com/users/mjptree/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjptree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjptree/subscriptions", "organizations_url": "https://api.github.com/users/mjptree/orgs", "repos_url": "https://api.github.com/users/mjptree/repos", "events_url": "https://api.github.com/users/mjptree/events{/privacy}", "received_events_url": "https://api.github.com/users/mjptree/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjptree", "id": 18014796, "node_id": "MDQ6VXNlcjE4MDE0Nzk2", "avatar_url": "https://avatars.githubusercontent.com/u/18014796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjptree", "html_url": "https://github.com/mjptree", "followers_url": "https://api.github.com/users/mjptree/followers", "following_url": "https://api.github.com/users/mjptree/following{/other_user}", "gists_url": "https://api.github.com/users/mjptree/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjptree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjptree/subscriptions", "organizations_url": "https://api.github.com/users/mjptree/orgs", "repos_url": "https://api.github.com/users/mjptree/repos", "events_url": "https://api.github.com/users/mjptree/events{/privacy}", "received_events_url": "https://api.github.com/users/mjptree/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c51718ae7ae3160058e220b879d2a69533973a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c51718ae7ae3160058e220b879d2a69533973a7", "html_url": "https://github.com/rust-lang/rust/commit/3c51718ae7ae3160058e220b879d2a69533973a7"}], "stats": {"total": 152, "additions": 83, "deletions": 69}, "files": [{"sha": "02e540e2091f5434b5f4b57cd442d7ef885d7ea8", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 83, "deletions": 69, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/10b3a571d2b57ea06a895932f876f28caebef5e1/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b3a571d2b57ea06a895932f876f28caebef5e1/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=10b3a571d2b57ea06a895932f876f28caebef5e1", "patch": "@@ -683,75 +683,16 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             ItemKind::ExternCrate(orig_name) => {\n-                let module = if orig_name.is_none() && ident.name == kw::SelfLower {\n-                    self.r\n-                        .session\n-                        .struct_span_err(item.span, \"`extern crate self;` requires renaming\")\n-                        .span_suggestion(\n-                            item.span,\n-                            \"try\",\n-                            \"extern crate self as name;\".into(),\n-                            Applicability::HasPlaceholders,\n-                        )\n-                        .emit();\n-                    return;\n-                } else if orig_name == Some(kw::SelfLower) {\n-                    self.r.graph_root\n-                } else {\n-                    let crate_id = self.r.crate_loader.process_extern_crate(\n-                        item,\n-                        &self.r.definitions,\n-                        local_def_id,\n-                    );\n-                    self.r.extern_crate_map.insert(local_def_id, crate_id);\n-                    self.r.expect_module(crate_id.as_def_id())\n-                };\n-\n-                let used = self.process_macro_use_imports(item, module);\n-                let binding =\n-                    (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.r.arenas);\n-                let import = self.r.arenas.alloc_import(Import {\n-                    kind: ImportKind::ExternCrate { source: orig_name, target: ident },\n-                    root_id: item.id,\n-                    id: item.id,\n-                    parent_scope: self.parent_scope,\n-                    imported_module: Cell::new(Some(ModuleOrUniformRoot::Module(module))),\n-                    has_attributes: !item.attrs.is_empty(),\n-                    use_span_with_attributes: item.span_with_attributes(),\n-                    use_span: item.span,\n-                    root_span: item.span,\n-                    span: item.span,\n-                    module_path: Vec::new(),\n-                    vis: Cell::new(vis),\n-                    used: Cell::new(used),\n-                });\n-                self.r.potentially_unused_imports.push(import);\n-                let imported_binding = self.r.import(binding, import);\n-                if ptr::eq(parent, self.r.graph_root) {\n-                    if let Some(entry) = self.r.extern_prelude.get(&ident.normalize_to_macros_2_0())\n-                    {\n-                        if expansion != LocalExpnId::ROOT\n-                            && orig_name.is_some()\n-                            && entry.extern_crate_item.is_none()\n-                        {\n-                            let msg = \"macro-expanded `extern crate` items cannot \\\n-                                       shadow names passed with `--extern`\";\n-                            self.r.session.span_err(item.span, msg);\n-                        }\n-                    }\n-                    let entry =\n-                        self.r.extern_prelude.entry(ident.normalize_to_macros_2_0()).or_insert(\n-                            ExternPreludeEntry {\n-                                extern_crate_item: None,\n-                                introduced_by_item: true,\n-                            },\n-                        );\n-                    entry.extern_crate_item = Some(imported_binding);\n-                    if orig_name.is_some() {\n-                        entry.introduced_by_item = true;\n-                    }\n-                }\n-                self.r.define(parent, ident, TypeNS, imported_binding);\n+                self.build_reduced_graph_for_extern_crate(\n+                    orig_name,\n+                    ident,\n+                    item,\n+                    local_def_id,\n+                    sp,\n+                    expansion,\n+                    vis,\n+                    parent,\n+                );\n             }\n \n             ItemKind::Mod(..) => {\n@@ -889,6 +830,79 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         }\n     }\n \n+    fn build_reduced_graph_for_extern_crate(\n+        &mut self,\n+        orig_name: Option<Symbol>,\n+        ident: Ident,\n+        item: &Item,\n+        local_def_id: LocalDefId,\n+        sp: Span,\n+        expansion: LocalExpnId,\n+        vis: ty::Visibility,\n+        parent: Module<'a>,\n+    ) {\n+        let module = if orig_name.is_none() && ident.name == kw::SelfLower {\n+            self.r\n+                .session\n+                .struct_span_err(item.span, \"`extern crate self;` requires renaming\")\n+                .span_suggestion(\n+                    item.span,\n+                    \"try\",\n+                    \"extern crate self as name;\".into(),\n+                    Applicability::HasPlaceholders,\n+                )\n+                .emit();\n+            return;\n+        } else if orig_name == Some(kw::SelfLower) {\n+            self.r.graph_root\n+        } else {\n+            let crate_id =\n+                self.r.crate_loader.process_extern_crate(item, &self.r.definitions, local_def_id);\n+            self.r.extern_crate_map.insert(local_def_id, crate_id);\n+            self.r.expect_module(crate_id.as_def_id())\n+        };\n+        let used = self.process_macro_use_imports(item, module);\n+        let binding =\n+            (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.r.arenas);\n+        let import = self.r.arenas.alloc_import(Import {\n+            kind: ImportKind::ExternCrate { source: orig_name, target: ident },\n+            root_id: item.id,\n+            id: item.id,\n+            parent_scope: self.parent_scope,\n+            imported_module: Cell::new(Some(ModuleOrUniformRoot::Module(module))),\n+            has_attributes: !item.attrs.is_empty(),\n+            use_span_with_attributes: item.span_with_attributes(),\n+            use_span: item.span,\n+            root_span: item.span,\n+            span: item.span,\n+            module_path: Vec::new(),\n+            vis: Cell::new(vis),\n+            used: Cell::new(used),\n+        });\n+        self.r.potentially_unused_imports.push(import);\n+        let imported_binding = self.r.import(binding, import);\n+        if ptr::eq(parent, self.r.graph_root) {\n+            if let Some(entry) = self.r.extern_prelude.get(&ident.normalize_to_macros_2_0()) {\n+                if expansion != LocalExpnId::ROOT\n+                    && orig_name.is_some()\n+                    && entry.extern_crate_item.is_none()\n+                {\n+                    let msg = \"macro-expanded `extern crate` items cannot \\\n+                                       shadow names passed with `--extern`\";\n+                    self.r.session.span_err(item.span, msg);\n+                }\n+            }\n+            let entry = self.r.extern_prelude.entry(ident.normalize_to_macros_2_0()).or_insert(\n+                ExternPreludeEntry { extern_crate_item: None, introduced_by_item: true },\n+            );\n+            entry.extern_crate_item = Some(imported_binding);\n+            if orig_name.is_some() {\n+                entry.introduced_by_item = true;\n+            }\n+        }\n+        self.r.define(parent, ident, TypeNS, imported_binding);\n+    }\n+\n     /// Constructs the reduced graph for one foreign item.\n     fn build_reduced_graph_for_foreign_item(&mut self, item: &ForeignItem) {\n         let local_def_id = self.r.local_def_id(item.id);"}]}