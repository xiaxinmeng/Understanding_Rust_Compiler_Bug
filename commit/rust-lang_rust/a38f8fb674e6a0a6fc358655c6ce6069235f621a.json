{"sha": "a38f8fb674e6a0a6fc358655c6ce6069235f621a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOGY4ZmI2NzRlNmEwYTZmYzM1ODY1NWM2Y2U2MDY5MjM1ZjYyMWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-13T05:40:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-13T05:40:37Z"}, "message": "Auto merge of #78826 - petrochenkov:mrscopes2, r=eddyb\n\nresolve: Collapse `macro_rules` scope chains on the fly\n\nOtherwise they grow too long and you have to endlessly walk through them when resolving macros or imports.\nAddresses https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler.2Fperformance/topic/Slow.20Builtin.20Derives/near/215750815", "tree": {"sha": "a68497c3161cbbc55c6e3b1c980589d6c00d90cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a68497c3161cbbc55c6e3b1c980589d6c00d90cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a38f8fb674e6a0a6fc358655c6ce6069235f621a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a38f8fb674e6a0a6fc358655c6ce6069235f621a", "html_url": "https://github.com/rust-lang/rust/commit/a38f8fb674e6a0a6fc358655c6ce6069235f621a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a38f8fb674e6a0a6fc358655c6ce6069235f621a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f036a8f3bee55ea7566ac7a631ad3193696204b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f036a8f3bee55ea7566ac7a631ad3193696204b4", "html_url": "https://github.com/rust-lang/rust/commit/f036a8f3bee55ea7566ac7a631ad3193696204b4"}, {"sha": "922107919dfcd455f8957aef16a1b3e30db8fc44", "url": "https://api.github.com/repos/rust-lang/rust/commits/922107919dfcd455f8957aef16a1b3e30db8fc44", "html_url": "https://github.com/rust-lang/rust/commit/922107919dfcd455f8957aef16a1b3e30db8fc44"}], "stats": {"total": 100, "additions": 70, "deletions": 30}, "files": [{"sha": "34145c3c138a1c938cb8525ab88c9c89a72248f9", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a38f8fb674e6a0a6fc358655c6ce6069235f621a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f8fb674e6a0a6fc358655c6ce6069235f621a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=a38f8fb674e6a0a6fc358655c6ce6069235f621a", "patch": "@@ -7,7 +7,7 @@\n \n use crate::def_collector::collect_definitions;\n use crate::imports::{Import, ImportKind};\n-use crate::macros::{MacroRulesBinding, MacroRulesScope};\n+use crate::macros::{MacroRulesBinding, MacroRulesScope, MacroRulesScopeRef};\n use crate::Namespace::{self, MacroNS, TypeNS, ValueNS};\n use crate::{CrateLint, Determinacy, PathResult, ResolutionError, VisResolutionError};\n use crate::{\n@@ -209,7 +209,7 @@ impl<'a> Resolver<'a> {\n         &mut self,\n         fragment: &AstFragment,\n         parent_scope: ParentScope<'a>,\n-    ) -> MacroRulesScope<'a> {\n+    ) -> MacroRulesScopeRef<'a> {\n         collect_definitions(self, fragment, parent_scope.expansion);\n         let mut visitor = BuildReducedGraphVisitor { r: self, parent_scope };\n         fragment.visit_with(&mut visitor);\n@@ -220,7 +220,8 @@ impl<'a> Resolver<'a> {\n         let def_id = module.def_id().expect(\"unpopulated module without a def-id\");\n         for child in self.cstore().item_children_untracked(def_id, self.session) {\n             let child = child.map_id(|_| panic!(\"unexpected id\"));\n-            BuildReducedGraphVisitor { r: self, parent_scope: ParentScope::module(module) }\n+            let parent_scope = ParentScope::module(module, self);\n+            BuildReducedGraphVisitor { r: self, parent_scope }\n                 .build_reduced_graph_for_external_crate_res(child);\n         }\n     }\n@@ -1154,15 +1155,17 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         false\n     }\n \n-    fn visit_invoc(&mut self, id: NodeId) -> MacroRulesScope<'a> {\n+    fn visit_invoc(&mut self, id: NodeId) -> MacroRulesScopeRef<'a> {\n         let invoc_id = id.placeholder_to_expn_id();\n \n         self.parent_scope.module.unexpanded_invocations.borrow_mut().insert(invoc_id);\n \n         let old_parent_scope = self.r.invocation_parent_scopes.insert(invoc_id, self.parent_scope);\n         assert!(old_parent_scope.is_none(), \"invocation data is reset for an invocation\");\n \n-        MacroRulesScope::Invocation(invoc_id)\n+        let scope = self.r.arenas.alloc_macro_rules_scope(MacroRulesScope::Invocation(invoc_id));\n+        self.r.invocation_macro_rules_scopes.entry(invoc_id).or_default().insert(scope);\n+        scope\n     }\n \n     fn proc_macro_stub(&self, item: &ast::Item) -> Option<(MacroKind, Ident, Span)> {\n@@ -1196,7 +1199,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         }\n     }\n \n-    fn define_macro(&mut self, item: &ast::Item) -> MacroRulesScope<'a> {\n+    fn define_macro(&mut self, item: &ast::Item) -> MacroRulesScopeRef<'a> {\n         let parent_scope = self.parent_scope;\n         let expansion = parent_scope.expansion;\n         let def_id = self.r.local_def_id(item.id);\n@@ -1239,11 +1242,13 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 self.insert_unused_macro(ident, def_id, item.id, span);\n             }\n             self.r.visibilities.insert(def_id, vis);\n-            MacroRulesScope::Binding(self.r.arenas.alloc_macro_rules_binding(MacroRulesBinding {\n-                parent_macro_rules_scope: parent_scope.macro_rules,\n-                binding,\n-                ident,\n-            }))\n+            self.r.arenas.alloc_macro_rules_scope(MacroRulesScope::Binding(\n+                self.r.arenas.alloc_macro_rules_binding(MacroRulesBinding {\n+                    parent_macro_rules_scope: parent_scope.macro_rules,\n+                    binding,\n+                    ident,\n+                }),\n+            ))\n         } else {\n             let module = parent_scope.module;\n             let vis = match item.kind {"}, {"sha": "acd88af1806ca696c4219537263ad64832cfa14e", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a38f8fb674e6a0a6fc358655c6ce6069235f621a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f8fb674e6a0a6fc358655c6ce6069235f621a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=a38f8fb674e6a0a6fc358655c6ce6069235f621a", "patch": "@@ -630,7 +630,7 @@ impl<'a> Resolver<'a> {\n                     }\n                 }\n                 Scope::MacroRules(macro_rules_scope) => {\n-                    if let MacroRulesScope::Binding(macro_rules_binding) = macro_rules_scope {\n+                    if let MacroRulesScope::Binding(macro_rules_binding) = macro_rules_scope.get() {\n                         let res = macro_rules_binding.binding.res();\n                         if filter_fn(res) {\n                             suggestions"}, {"sha": "f156caf23ba9dc470467fd1d15be5b4aa312c5c7", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a38f8fb674e6a0a6fc358655c6ce6069235f621a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f8fb674e6a0a6fc358655c6ce6069235f621a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=a38f8fb674e6a0a6fc358655c6ce6069235f621a", "patch": "@@ -675,7 +675,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         // During late resolution we only track the module component of the parent scope,\n         // although it may be useful to track other components as well for diagnostics.\n         let graph_root = resolver.graph_root;\n-        let parent_scope = ParentScope::module(graph_root);\n+        let parent_scope = ParentScope::module(graph_root, resolver);\n         let start_rib_kind = ModuleRibKind(graph_root);\n         LateResolutionVisitor {\n             r: resolver,"}, {"sha": "4e85c88c0e50407a226fb254a32f67da3154adc8", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a38f8fb674e6a0a6fc358655c6ce6069235f621a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f8fb674e6a0a6fc358655c6ce6069235f621a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=a38f8fb674e6a0a6fc358655c6ce6069235f621a", "patch": "@@ -65,7 +65,7 @@ use diagnostics::{extend_span_to_previous_binding, find_span_of_binding_until_ne\n use diagnostics::{ImportSuggestion, LabelSuggestion, Suggestion};\n use imports::{Import, ImportKind, ImportResolver, NameResolution};\n use late::{HasGenericParams, PathSource, Rib, RibKind::*};\n-use macros::{MacroRulesBinding, MacroRulesScope};\n+use macros::{MacroRulesBinding, MacroRulesScope, MacroRulesScopeRef};\n \n type Res = def::Res<NodeId>;\n \n@@ -101,7 +101,7 @@ impl Determinacy {\n enum Scope<'a> {\n     DeriveHelpers(ExpnId),\n     DeriveHelpersCompat,\n-    MacroRules(MacroRulesScope<'a>),\n+    MacroRules(MacroRulesScopeRef<'a>),\n     CrateRoot,\n     Module(Module<'a>),\n     RegisteredAttrs,\n@@ -134,18 +134,18 @@ enum ScopeSet {\n pub struct ParentScope<'a> {\n     module: Module<'a>,\n     expansion: ExpnId,\n-    macro_rules: MacroRulesScope<'a>,\n+    macro_rules: MacroRulesScopeRef<'a>,\n     derives: &'a [ast::Path],\n }\n \n impl<'a> ParentScope<'a> {\n     /// Creates a parent scope with the passed argument used as the module scope component,\n     /// and other scope components set to default empty values.\n-    pub fn module(module: Module<'a>) -> ParentScope<'a> {\n+    pub fn module(module: Module<'a>, resolver: &Resolver<'a>) -> ParentScope<'a> {\n         ParentScope {\n             module,\n             expansion: ExpnId::root(),\n-            macro_rules: MacroRulesScope::Empty,\n+            macro_rules: resolver.arenas.alloc_macro_rules_scope(MacroRulesScope::Empty),\n             derives: &[],\n         }\n     }\n@@ -975,7 +975,10 @@ pub struct Resolver<'a> {\n     invocation_parent_scopes: FxHashMap<ExpnId, ParentScope<'a>>,\n     /// `macro_rules` scopes *produced* by expanding the macro invocations,\n     /// include all the `macro_rules` items and other invocations generated by them.\n-    output_macro_rules_scopes: FxHashMap<ExpnId, MacroRulesScope<'a>>,\n+    output_macro_rules_scopes: FxHashMap<ExpnId, MacroRulesScopeRef<'a>>,\n+    /// References to all `MacroRulesScope::Invocation(invoc_id)`s, used to update such scopes\n+    /// when their corresponding `invoc_id`s get expanded.\n+    invocation_macro_rules_scopes: FxHashMap<ExpnId, FxHashSet<MacroRulesScopeRef<'a>>>,\n     /// Helper attributes that are in scope for the given expansion.\n     helper_attrs: FxHashMap<ExpnId, Vec<Ident>>,\n \n@@ -1044,6 +1047,9 @@ impl<'a> ResolverArenas<'a> {\n     fn alloc_name_resolution(&'a self) -> &'a RefCell<NameResolution<'a>> {\n         self.name_resolutions.alloc(Default::default())\n     }\n+    fn alloc_macro_rules_scope(&'a self, scope: MacroRulesScope<'a>) -> MacroRulesScopeRef<'a> {\n+        PtrKey(self.dropless.alloc(Cell::new(scope)))\n+    }\n     fn alloc_macro_rules_binding(\n         &'a self,\n         binding: MacroRulesBinding<'a>,\n@@ -1231,14 +1237,11 @@ impl<'a> Resolver<'a> {\n         let (registered_attrs, registered_tools) =\n             macros::registered_attrs_and_tools(session, &krate.attrs);\n \n-        let mut invocation_parent_scopes = FxHashMap::default();\n-        invocation_parent_scopes.insert(ExpnId::root(), ParentScope::module(graph_root));\n-\n         let features = session.features_untracked();\n         let non_macro_attr =\n             |mark_used| Lrc::new(SyntaxExtension::non_macro_attr(mark_used, session.edition()));\n \n-        Resolver {\n+        let mut resolver = Resolver {\n             session,\n \n             definitions,\n@@ -1305,8 +1308,9 @@ impl<'a> Resolver<'a> {\n             dummy_ext_bang: Lrc::new(SyntaxExtension::dummy_bang(session.edition())),\n             dummy_ext_derive: Lrc::new(SyntaxExtension::dummy_derive(session.edition())),\n             non_macro_attrs: [non_macro_attr(false), non_macro_attr(true)],\n-            invocation_parent_scopes,\n+            invocation_parent_scopes: Default::default(),\n             output_macro_rules_scopes: Default::default(),\n+            invocation_macro_rules_scopes: Default::default(),\n             helper_attrs: Default::default(),\n             local_macro_def_scopes: FxHashMap::default(),\n             name_already_seen: FxHashMap::default(),\n@@ -1333,7 +1337,12 @@ impl<'a> Resolver<'a> {\n             invocation_parents,\n             next_disambiguator: Default::default(),\n             trait_impl_items: Default::default(),\n-        }\n+        };\n+\n+        let root_parent_scope = ParentScope::module(graph_root, &resolver);\n+        resolver.invocation_parent_scopes.insert(ExpnId::root(), root_parent_scope);\n+\n+        resolver\n     }\n \n     pub fn next_node_id(&mut self) -> NodeId {\n@@ -1703,7 +1712,7 @@ impl<'a> Resolver<'a> {\n                 }\n                 Scope::DeriveHelpers(..) => Scope::DeriveHelpersCompat,\n                 Scope::DeriveHelpersCompat => Scope::MacroRules(parent_scope.macro_rules),\n-                Scope::MacroRules(macro_rules_scope) => match macro_rules_scope {\n+                Scope::MacroRules(macro_rules_scope) => match macro_rules_scope.get() {\n                     MacroRulesScope::Binding(binding) => {\n                         Scope::MacroRules(binding.parent_macro_rules_scope)\n                     }\n@@ -3200,7 +3209,7 @@ impl<'a> Resolver<'a> {\n             }\n         };\n         let module = self.get_module(module_id);\n-        let parent_scope = &ParentScope::module(module);\n+        let parent_scope = &ParentScope::module(module, self);\n         let res = self.resolve_ast_path(&path, ns, parent_scope).map_err(|_| ())?;\n         Ok((path, res))\n     }"}, {"sha": "6bc9419ea84110ac697ca82503c54346479cc010", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a38f8fb674e6a0a6fc358655c6ce6069235f621a/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f8fb674e6a0a6fc358655c6ce6069235f621a/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=a38f8fb674e6a0a6fc358655c6ce6069235f621a", "patch": "@@ -11,6 +11,7 @@ use rustc_ast_lowering::ResolverAstLowering;\n use rustc_ast_pretty::pprust;\n use rustc_attr::StabilityLevel;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::ptr_key::PtrKey;\n use rustc_errors::struct_span_err;\n use rustc_expand::base::{Indeterminate, InvocationRes, ResolverExpand, SyntaxExtension};\n use rustc_expand::compile_declarative_macro;\n@@ -29,6 +30,7 @@ use rustc_span::{Span, DUMMY_SP};\n \n use rustc_data_structures::sync::Lrc;\n use rustc_span::hygiene::{AstPass, MacroKind};\n+use std::cell::Cell;\n use std::{mem, ptr};\n \n type Res = def::Res<NodeId>;\n@@ -39,7 +41,7 @@ type Res = def::Res<NodeId>;\n pub struct MacroRulesBinding<'a> {\n     crate binding: &'a NameBinding<'a>,\n     /// `macro_rules` scope into which the `macro_rules` item was planted.\n-    crate parent_macro_rules_scope: MacroRulesScope<'a>,\n+    crate parent_macro_rules_scope: MacroRulesScopeRef<'a>,\n     crate ident: Ident,\n }\n \n@@ -59,6 +61,14 @@ pub enum MacroRulesScope<'a> {\n     Invocation(ExpnId),\n }\n \n+/// `macro_rules!` scopes are always kept by reference and inside a cell.\n+/// The reason is that we update all scopes with value `MacroRulesScope::Invocation(invoc_id)`\n+/// in-place immediately after `invoc_id` gets expanded.\n+/// This helps to avoid uncontrollable growth of `macro_rules!` scope chains,\n+/// which usually grow lineraly with the number of macro invocations\n+/// in a module (including derives) and hurt performance.\n+pub(crate) type MacroRulesScopeRef<'a> = PtrKey<'a, Cell<MacroRulesScope<'a>>>;\n+\n // Macro namespace is separated into two sub-namespaces, one for bang macros and\n // one for attribute-like macros (attributes, derives).\n // We ignore resolutions from one sub-namespace when searching names in scope for another.\n@@ -163,6 +173,22 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         let output_macro_rules_scope = self.build_reduced_graph(fragment, parent_scope);\n         self.output_macro_rules_scopes.insert(expansion, output_macro_rules_scope);\n \n+        // Update all `macro_rules` scopes referring to this invocation. This is an optimization\n+        // used to avoid long scope chains, see the comments on `MacroRulesScopeRef`.\n+        if let Some(invocation_scopes) = self.invocation_macro_rules_scopes.remove(&expansion) {\n+            for invocation_scope in &invocation_scopes {\n+                invocation_scope.set(output_macro_rules_scope.get());\n+            }\n+            // All `macro_rules` scopes that previously referred to `expansion`\n+            // are now rerouted to its output scope, if it's also an invocation.\n+            if let MacroRulesScope::Invocation(invoc_id) = output_macro_rules_scope.get() {\n+                self.invocation_macro_rules_scopes\n+                    .entry(invoc_id)\n+                    .or_default()\n+                    .extend(invocation_scopes);\n+            }\n+        }\n+\n         parent_scope.module.unexpanded_invocations.borrow_mut().remove(&expansion);\n     }\n \n@@ -655,7 +681,7 @@ impl<'a> Resolver<'a> {\n                         }\n                         result\n                     }\n-                    Scope::MacroRules(macro_rules_scope) => match macro_rules_scope {\n+                    Scope::MacroRules(macro_rules_scope) => match macro_rules_scope.get() {\n                         MacroRulesScope::Binding(macro_rules_binding)\n                             if ident == macro_rules_binding.ident =>\n                         {"}, {"sha": "e0cb5bf1a4ee614481a962bbdfff514011f09b6c", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a38f8fb674e6a0a6fc358655c6ce6069235f621a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f8fb674e6a0a6fc358655c6ce6069235f621a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=a38f8fb674e6a0a6fc358655c6ce6069235f621a", "patch": "@@ -352,7 +352,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             if let Ok((Some(ext), res)) = resolver.resolve_macro_path(\n                 &path,\n                 None,\n-                &ParentScope::module(resolver.graph_root()),\n+                &ParentScope::module(resolver.graph_root(), resolver),\n                 false,\n                 false,\n             ) {"}]}