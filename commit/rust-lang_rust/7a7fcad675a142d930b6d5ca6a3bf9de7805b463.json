{"sha": "7a7fcad675a142d930b6d5ca6a3bf9de7805b463", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhN2ZjYWQ2NzVhMTQyZDkzMGI2ZDVjYTZhM2JmOWRlNzgwNWI0NjM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-08-01T14:00:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-01T14:00:29Z"}, "message": "Rollup merge of #63170 - matklad:cleanup-fields, r=petrochenkov\n\ncleanup StringReader fields\n\nreduce visibility and replace `Lrc<SourceFile>` with `start_pos`: the single bit we actually *need* from the file.\n\nr? @petrochenkov", "tree": {"sha": "872db6a8bba253f3ae66581ccf20da188cc5da42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/872db6a8bba253f3ae66581ccf20da188cc5da42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a7fcad675a142d930b6d5ca6a3bf9de7805b463", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdQvB9CRBK7hj4Ov3rIwAAdHIIADafTGo7KNL1/7Ulydp+7D3U\nwQN4b/UWzYwBN4l689y2fFofiPiZ+AvUDH3B1T8n8goob0mFyakfd6coUoTUtpum\nTwdm2VnFqxPNZc+Tbxx1wV56n2NAeatidytt6BCWYqPRvMTBYH3Vh3u3prIL5dZY\nUE6LDVy7bOcCaDKi0SyWBNXneQy4GVUVQskqAzYS0NmeHOziPwTFRRPX9Efc4pyi\ngaa5df5gmYxJIpI+/S6Ap+GBm+crKZ1Rxq+nG4Y+Mos1egbmTdl6dqtLYNUuiaCU\nowp7uCimc+tCmEEXgajMqRk+XYM0/QI0cU6m56LUBNzmvIUGhmsBV3SMK3saXGE=\n=cRTq\n-----END PGP SIGNATURE-----\n", "payload": "tree 872db6a8bba253f3ae66581ccf20da188cc5da42\nparent aaec6dfa4788df60e337bc3b4de5f31566c74066\nparent 3f461f5ec674ba42c12cb000f307c98464ed5ee7\nauthor Pietro Albini <pietro@pietroalbini.org> 1564668029 +0200\ncommitter GitHub <noreply@github.com> 1564668029 +0200\n\nRollup merge of #63170 - matklad:cleanup-fields, r=petrochenkov\n\ncleanup StringReader fields\n\nreduce visibility and replace `Lrc<SourceFile>` with `start_pos`: the single bit we actually *need* from the file.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7fcad675a142d930b6d5ca6a3bf9de7805b463", "html_url": "https://github.com/rust-lang/rust/commit/7a7fcad675a142d930b6d5ca6a3bf9de7805b463", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a7fcad675a142d930b6d5ca6a3bf9de7805b463/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaec6dfa4788df60e337bc3b4de5f31566c74066", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaec6dfa4788df60e337bc3b4de5f31566c74066", "html_url": "https://github.com/rust-lang/rust/commit/aaec6dfa4788df60e337bc3b4de5f31566c74066"}, {"sha": "3f461f5ec674ba42c12cb000f307c98464ed5ee7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f461f5ec674ba42c12cb000f307c98464ed5ee7", "html_url": "https://github.com/rust-lang/rust/commit/3f461f5ec674ba42c12cb000f307c98464ed5ee7"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "263eb1ac7a48016c86f8a05795042545df6a4bda", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7a7fcad675a142d930b6d5ca6a3bf9de7805b463/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7fcad675a142d930b6d5ca6a3bf9de7805b463/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=7a7fcad675a142d930b6d5ca6a3bf9de7805b463", "patch": "@@ -29,16 +29,15 @@ pub struct UnmatchedBrace {\n }\n \n pub struct StringReader<'a> {\n-    crate sess: &'a ParseSess,\n-    /// The absolute offset within the source_map of the current character\n-    crate pos: BytePos,\n-    /// The current character (which has been read from self.pos)\n-    crate source_file: Lrc<syntax_pos::SourceFile>,\n+    sess: &'a ParseSess,\n+    /// Initial position, read-only.\n+    start_pos: BytePos,\n+    /// The absolute offset within the source_map of the current character.\n+    pos: BytePos,\n     /// Stop reading src at this index.\n-    crate end_src_index: usize,\n+    end_src_index: usize,\n     fatal_errs: Vec<DiagnosticBuilder<'a>>,\n-    // cache a direct reference to the source text, so that we don't have to\n-    // retrieve it via `self.source_file.src.as_ref().unwrap()` all the time.\n+    /// Source text to tokenize.\n     src: Lrc<String>,\n     override_span: Option<Span>,\n }\n@@ -56,8 +55,8 @@ impl<'a> StringReader<'a> {\n \n         StringReader {\n             sess,\n+            start_pos: source_file.start_pos,\n             pos: source_file.start_pos,\n-            source_file,\n             end_src_index: src.len(),\n             src,\n             fatal_errs: Vec::new(),\n@@ -108,12 +107,12 @@ impl<'a> StringReader<'a> {\n         let text: &str = &self.src[start_src_index..self.end_src_index];\n \n         if text.is_empty() {\n-            let span = self.mk_sp(self.source_file.end_pos, self.source_file.end_pos);\n+            let span = self.mk_sp(self.pos, self.pos);\n             return Ok(Token::new(token::Eof, span));\n         }\n \n         {\n-            let is_beginning_of_file = self.pos == self.source_file.start_pos;\n+            let is_beginning_of_file = self.pos == self.start_pos;\n             if is_beginning_of_file {\n                 if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {\n                     let start = self.pos;\n@@ -533,7 +532,7 @@ impl<'a> StringReader<'a> {\n \n     #[inline]\n     fn src_index(&self, pos: BytePos) -> usize {\n-        (pos - self.source_file.start_pos).to_usize()\n+        (pos - self.start_pos).to_usize()\n     }\n \n     /// Slice of the source text from `start` up to but excluding `self.pos`,"}]}