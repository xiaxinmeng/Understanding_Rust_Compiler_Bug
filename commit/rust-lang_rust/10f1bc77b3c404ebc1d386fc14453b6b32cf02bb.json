{"sha": "10f1bc77b3c404ebc1d386fc14453b6b32cf02bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZjFiYzc3YjNjNDA0ZWJjMWQzODZmYzE0NDUzYjZiMzJjZjAyYmI=", "commit": {"author": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2019-10-22T18:43:45Z"}, "committer": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2019-10-22T18:43:45Z"}, "message": "Some tweaks", "tree": {"sha": "2891ce79bc1be691a802f5155dbd88cba073538c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2891ce79bc1be691a802f5155dbd88cba073538c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10f1bc77b3c404ebc1d386fc14453b6b32cf02bb", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl2vThQACgkQztOS3gxI\nPQCRVQ//cVnmyPA27ebwXKOpaWBWh4ljgPae39DtCO1QPEOpLB5+XBk4qfCmuEJg\n8DUVvb4BLeHIyNDF8NyHsFTWdZJ5VM/cw3kac/dqLM0ZHbaHjUCtee6jSG+zLtDf\nONPAQooVFi1hB6jD2zXEweA815K2YUmodaaFGUDnlavPmfkJgLUHrXfelVmi6VYY\nzCGZNiJc26RVXWwBedsb1p5/a2ARDXlI1HiA2WhvPrFUMqN2e9yZD5EiwN6nMpEv\n3xksmmGBKH5gQA7k02eFq21jslAuLTBD5eIAlr80h7Dk89AJSc+8mmMOuvt7yM1r\nxq9deZqOslykS8yMTGoUyxT9suhY9J0zj0OKhIhQuILsz/PioZbajm7uZNaR2dva\naJD/rMDgmsJJ0YphDeAv0VVx12Ti5UcXDGlKvjx7vCDy87c1NpQ1cpJerqSSQmq4\nX1CtBw9bwo1wHvdfoyvaDtmEBajXzdx/okj/q3b8+n64Somsvz89cMY7AClRVZgO\nYZ19I/NSP/s0eh3dimMheLOiWF8EPPK38nsqsxTnVhmxfsKJjyjh42DmC3xJQim2\n6IqLW77d1lhRMMthNxCPNpJnFBQCI0QjVNR41ot2NQSluYRETRT2y3/tCGgJEqbC\nu7Zt4+2nN+Ryj7xTN/GuO1eQ6Wulj0XVQ6eimnmmvUjB9lm6Qr4=\n=HjvX\n-----END PGP SIGNATURE-----", "payload": "tree 2891ce79bc1be691a802f5155dbd88cba073538c\nparent c787fe3c70bdb84d0c82d6c592080ca2f1d7902f\nauthor oxalica <oxalicc@pm.me> 1571769825 +0800\ncommitter oxalica <oxalicc@pm.me> 1571769825 +0800\n\nSome tweaks\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10f1bc77b3c404ebc1d386fc14453b6b32cf02bb", "html_url": "https://github.com/rust-lang/rust/commit/10f1bc77b3c404ebc1d386fc14453b6b32cf02bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10f1bc77b3c404ebc1d386fc14453b6b32cf02bb/comments", "author": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c787fe3c70bdb84d0c82d6c592080ca2f1d7902f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c787fe3c70bdb84d0c82d6c592080ca2f1d7902f", "html_url": "https://github.com/rust-lang/rust/commit/c787fe3c70bdb84d0c82d6c592080ca2f1d7902f"}], "stats": {"total": 93, "additions": 44, "deletions": 49}, "files": [{"sha": "5e1f10c03ceda583b9145dee6101376d14f6cbfa", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 44, "deletions": 49, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/10f1bc77b3c404ebc1d386fc14453b6b32cf02bb/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f1bc77b3c404ebc1d386fc14453b6b32cf02bb/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=10f1bc77b3c404ebc1d386fc14453b6b32cf02bb", "patch": "@@ -124,64 +124,59 @@ cfg_has_statx! {{\n         }\n \n         match STATX_STATE.load(Ordering::Relaxed) {\n-            // For the first time, we try to call on current working directory\n-            // to check if it is available.\n             0 => {\n-                let mut buf: libc::statx = mem::zeroed();\n-                let err = cvt(statx(\n-                    libc::AT_FDCWD,\n-                    b\".\\0\".as_ptr().cast(),\n-                    0,\n-                    libc::STATX_ALL,\n-                    &mut buf,\n-                ))\n+                // It is a trick to call `statx` with NULL pointers to check if the syscall\n+                // is available. According to the manual, it is expected to fail with EFAULT.\n+                // We do this mainly for performance, since it is nearly hundreds times\n+                // faster than a normal successfull call.\n+                let err = cvt(statx(0, ptr::null(), 0, libc::STATX_ALL, ptr::null_mut()))\n                     .err()\n                     .and_then(|e| e.raw_os_error());\n-                // `seccomp` will emit `EPERM` on denied syscall.\n+                // We don't check `err == Some(libc::ENOSYS)` because the syscall may be limited\n+                // and returns `EPERM`. Listing all possible errors seems not a good idea.\n                 // See: https://github.com/rust-lang/rust/issues/65662\n-                if err == Some(libc::ENOSYS) || err == Some(libc::EPERM) {\n+                if err != Some(libc::EFAULT) {\n                     STATX_STATE.store(1, Ordering::Relaxed);\n-                } else {\n-                    STATX_STATE.store(2, Ordering::Relaxed);\n+                    return None;\n                 }\n-                try_statx(fd, path, flags, mask)\n+                STATX_STATE.store(2, Ordering::Relaxed);\n             }\n-            1 => None,\n-            _ => {\n-                let mut buf: libc::statx = mem::zeroed();\n-                if let Err(err) = cvt(statx(fd, path, flags, mask, &mut buf)) {\n-                    return Some(Err(err));\n-                }\n-\n-                // We cannot fill `stat64` exhaustively because of private padding fields.\n-                let mut stat: stat64 = mem::zeroed();\n-                // `c_ulong` on gnu-mips, `dev_t` otherwise\n-                stat.st_dev = libc::makedev(buf.stx_dev_major, buf.stx_dev_minor) as _;\n-                stat.st_ino = buf.stx_ino as libc::ino64_t;\n-                stat.st_nlink = buf.stx_nlink as libc::nlink_t;\n-                stat.st_mode = buf.stx_mode as libc::mode_t;\n-                stat.st_uid = buf.stx_uid as libc::uid_t;\n-                stat.st_gid = buf.stx_gid as libc::gid_t;\n-                stat.st_rdev = libc::makedev(buf.stx_rdev_major, buf.stx_rdev_minor) as _;\n-                stat.st_size = buf.stx_size as off64_t;\n-                stat.st_blksize = buf.stx_blksize as libc::blksize_t;\n-                stat.st_blocks = buf.stx_blocks as libc::blkcnt64_t;\n-                stat.st_atime = buf.stx_atime.tv_sec as libc::time_t;\n-                // `i64` on gnu-x86_64-x32, `c_ulong` otherwise.\n-                stat.st_atime_nsec = buf.stx_atime.tv_nsec as _;\n-                stat.st_mtime = buf.stx_mtime.tv_sec as libc::time_t;\n-                stat.st_mtime_nsec = buf.stx_mtime.tv_nsec as _;\n-                stat.st_ctime = buf.stx_ctime.tv_sec as libc::time_t;\n-                stat.st_ctime_nsec = buf.stx_ctime.tv_nsec as _;\n-\n-                let extra = StatxExtraFields {\n-                    stx_mask: buf.stx_mask,\n-                    stx_btime: buf.stx_btime,\n-                };\n+            1 => return None,\n+            _ => {}\n+        }\n \n-                Some(Ok(FileAttr { stat, statx_extra_fields: Some(extra) }))\n-            }\n+        let mut buf: libc::statx = mem::zeroed();\n+        if let Err(err) = cvt(statx(fd, path, flags, mask, &mut buf)) {\n+            return Some(Err(err));\n         }\n+\n+        // We cannot fill `stat64` exhaustively because of private padding fields.\n+        let mut stat: stat64 = mem::zeroed();\n+        // `c_ulong` on gnu-mips, `dev_t` otherwise\n+        stat.st_dev = libc::makedev(buf.stx_dev_major, buf.stx_dev_minor) as _;\n+        stat.st_ino = buf.stx_ino as libc::ino64_t;\n+        stat.st_nlink = buf.stx_nlink as libc::nlink_t;\n+        stat.st_mode = buf.stx_mode as libc::mode_t;\n+        stat.st_uid = buf.stx_uid as libc::uid_t;\n+        stat.st_gid = buf.stx_gid as libc::gid_t;\n+        stat.st_rdev = libc::makedev(buf.stx_rdev_major, buf.stx_rdev_minor) as _;\n+        stat.st_size = buf.stx_size as off64_t;\n+        stat.st_blksize = buf.stx_blksize as libc::blksize_t;\n+        stat.st_blocks = buf.stx_blocks as libc::blkcnt64_t;\n+        stat.st_atime = buf.stx_atime.tv_sec as libc::time_t;\n+        // `i64` on gnu-x86_64-x32, `c_ulong` otherwise.\n+        stat.st_atime_nsec = buf.stx_atime.tv_nsec as _;\n+        stat.st_mtime = buf.stx_mtime.tv_sec as libc::time_t;\n+        stat.st_mtime_nsec = buf.stx_mtime.tv_nsec as _;\n+        stat.st_ctime = buf.stx_ctime.tv_sec as libc::time_t;\n+        stat.st_ctime_nsec = buf.stx_ctime.tv_nsec as _;\n+\n+        let extra = StatxExtraFields {\n+            stx_mask: buf.stx_mask,\n+            stx_btime: buf.stx_btime,\n+        };\n+\n+        Some(Ok(FileAttr { stat, statx_extra_fields: Some(extra) }))\n     }\n \n } else {"}]}