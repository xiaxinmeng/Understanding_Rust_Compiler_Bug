{"sha": "57b229086e274c21e5544e6719271ae79a952194", "node_id": "C_kwDOAAsO6NoAKDU3YjIyOTA4NmUyNzRjMjFlNTU0NGU2NzE5MjcxYWU3OWE5NTIxOTQ", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-11-04T05:02:39Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-11-04T05:02:39Z"}, "message": "Remove reference from the intra-doc link checker.", "tree": {"sha": "9d6c0918259f35cf05c063ee08b276231b9c9bb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d6c0918259f35cf05c063ee08b276231b9c9bb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57b229086e274c21e5544e6719271ae79a952194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57b229086e274c21e5544e6719271ae79a952194", "html_url": "https://github.com/rust-lang/rust/commit/57b229086e274c21e5544e6719271ae79a952194", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57b229086e274c21e5544e6719271ae79a952194/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8e2cef5faa7ff77e91ea2d0416006f0b7aa52bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e2cef5faa7ff77e91ea2d0416006f0b7aa52bf", "html_url": "https://github.com/rust-lang/rust/commit/f8e2cef5faa7ff77e91ea2d0416006f0b7aa52bf"}], "stats": {"total": 34, "additions": 10, "deletions": 24}, "files": [{"sha": "4170c32f1fe253350e5bed1e1881f0dfb0131f64", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/57b229086e274c21e5544e6719271ae79a952194/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57b229086e274c21e5544e6719271ae79a952194/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=57b229086e274c21e5544e6719271ae79a952194", "patch": "@@ -55,30 +55,6 @@ const LINKCHECK_EXCEPTIONS: &[(&str, &[&str])] = &[\n \n #[rustfmt::skip]\n const INTRA_DOC_LINK_EXCEPTIONS: &[(&str, &[&str])] = &[\n-    // This will never have links that are not in other pages.\n-    // To avoid repeating the exceptions twice, an empty list means all broken links are allowed.\n-    (\"reference/print.html\", &[]),\n-    // All the reference 'links' are actually ENBF highlighted as code\n-    (\"reference/comments.html\", &[\n-         \"/</code> <code>!\",\n-         \"*</code> <code>!\",\n-    ]),\n-    (\"reference/identifiers.html\", &[\n-         \"a</code>-<code>z</code> <code>A</code>-<code>Z\",\n-         \"a</code>-<code>z</code> <code>A</code>-<code>Z</code> <code>0</code>-<code>9</code> <code>_\",\n-         \"a</code>-<code>z</code> <code>A</code>-<code>Z</code>]\u00a0[<code>a</code>-<code>z</code> <code>A</code>-<code>Z</code> <code>0</code>-<code>9</code> <code>_\",\n-    ]),\n-    (\"reference/tokens.html\", &[\n-         \"0</code>-<code>1\",\n-         \"0</code>-<code>7\",\n-         \"0</code>-<code>9\",\n-         \"0</code>-<code>9\",\n-         \"0</code>-<code>9</code> <code>a</code>-<code>f</code> <code>A</code>-<code>F\",\n-    ]),\n-    (\"reference/notation.html\", &[\n-         \"b</code> <code>B\",\n-         \"a</code>-<code>z\",\n-    ]),\n     // This is being used in the sense of 'inclusive range', not a markdown link\n     (\"core/ops/struct.RangeInclusive.html\", &[\"begin</code>, <code>end\"]),\n     (\"std/ops/struct.RangeInclusive.html\", &[\"begin</code>, <code>end\"]),\n@@ -382,6 +358,16 @@ impl Checker {\n         source: &str,\n         report: &mut Report,\n     ) {\n+        let relative = file.strip_prefix(&self.root).expect(\"should always be relative to root\");\n+        // Don't check the reference. It has several legitimate things that\n+        // look like [<code>\u2026</code>]. The reference has its own broken link\n+        // checker in its CI which handles this using pulldown_cmark.\n+        //\n+        // This checks both the end of the root (when checking just the\n+        // reference directory) or the beginning (when checking all docs).\n+        if self.root.ends_with(\"reference\") || relative.starts_with(\"reference\") {\n+            return;\n+        }\n         // Search for intra-doc links that rustdoc didn't warn about\n         // FIXME(#77199, 77200) Rustdoc should just warn about these directly.\n         // NOTE: only looks at one line at a time; in practice this should find most links"}]}