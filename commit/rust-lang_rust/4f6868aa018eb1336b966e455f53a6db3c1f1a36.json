{"sha": "4f6868aa018eb1336b966e455f53a6db3c1f1a36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNjg2OGFhMDE4ZWIxMzM2Yjk2NmU0NTVmNTNhNmRiM2MxZjFhMzY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-09T04:55:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-09T04:55:44Z"}, "message": "Rollup merge of #39589 - ollie27:rustdoc_impl_disambiguation, r=alexcrichton\n\nrustdoc: Improve impl disambiguation\n\n* Don't disambiguate if there are multiple impls for the same type.\n* Disambiguate for impls of &Foo and &mut Foo.\n* Don't try to disambiguate generic types.\n\n[before](https://doc.rust-lang.org/nightly/std/ops/trait.Rem.html#implementors) [after](https://ollie27.github.io/rust_doc_test/std/ops/trait.Rem.html#implementors)", "tree": {"sha": "7891b483885ab531ed81a808eabbd7fb84aa7e8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7891b483885ab531ed81a808eabbd7fb84aa7e8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f6868aa018eb1336b966e455f53a6db3c1f1a36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f6868aa018eb1336b966e455f53a6db3c1f1a36", "html_url": "https://github.com/rust-lang/rust/commit/4f6868aa018eb1336b966e455f53a6db3c1f1a36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f6868aa018eb1336b966e455f53a6db3c1f1a36/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3053494a9ae79beffc8c3f3c4c1fdd3fd388be6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3053494a9ae79beffc8c3f3c4c1fdd3fd388be6a", "html_url": "https://github.com/rust-lang/rust/commit/3053494a9ae79beffc8c3f3c4c1fdd3fd388be6a"}, {"sha": "05eef36fa5ff9235ea8124a6396c7973015b4b8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/05eef36fa5ff9235ea8124a6396c7973015b4b8b", "html_url": "https://github.com/rust-lang/rust/commit/05eef36fa5ff9235ea8124a6396c7973015b4b8b"}], "stats": {"total": 78, "additions": 67, "deletions": 11}, "files": [{"sha": "c591c09bf20e2701b221f806ad659249bf899d3b", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f6868aa018eb1336b966e455f53a6db3c1f1a36/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6868aa018eb1336b966e455f53a6db3c1f1a36/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=4f6868aa018eb1336b966e455f53a6db3c1f1a36", "patch": "@@ -671,9 +671,11 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n                 }\n                 _ => {\n                     if f.alternate() {\n-                        write!(f, \"&{}{}{:#}\", lt, m, **ty)\n+                        write!(f, \"&{}{}\", lt, m)?;\n+                        fmt_type(&ty, f, use_absolute)\n                     } else {\n-                        write!(f, \"&amp;{}{}{}\", lt, m, **ty)\n+                        write!(f, \"&amp;{}{}\", lt, m)?;\n+                        fmt_type(&ty, f, use_absolute)\n                     }\n                 }\n             }"}, {"sha": "6234d89024441b946e3d3aba0ba0503b6d9d2385", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4f6868aa018eb1336b966e455f53a6db3c1f1a36/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6868aa018eb1336b966e455f53a6db3c1f1a36/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4f6868aa018eb1336b966e455f53a6db3c1f1a36", "patch": "@@ -2132,23 +2132,37 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         <ul class='item-list' id='implementors-list'>\n     \")?;\n     if let Some(implementors) = cache.implementors.get(&it.def_id) {\n-        let mut implementor_count: FxHashMap<&str, usize> = FxHashMap();\n+        // The DefId is for the first Type found with that name. The bool is\n+        // if any Types with the same name but different DefId have been found.\n+        let mut implementor_dups: FxHashMap<&str, (DefId, bool)> = FxHashMap();\n         for implementor in implementors {\n-            if let clean::Type::ResolvedPath {ref path, ..} = implementor.impl_.for_ {\n-                *implementor_count.entry(path.last_name()).or_insert(0) += 1;\n+            match implementor.impl_.for_ {\n+                clean::ResolvedPath { ref path, did, is_generic: false, .. } |\n+                clean::BorrowedRef {\n+                    type_: box clean::ResolvedPath { ref path, did, is_generic: false, .. },\n+                    ..\n+                } => {\n+                    let &mut (prev_did, ref mut has_duplicates) =\n+                        implementor_dups.entry(path.last_name()).or_insert((did, false));\n+                    if prev_did != did {\n+                        *has_duplicates = true;\n+                    }\n+                }\n+                _ => {}\n             }\n         }\n \n         for implementor in implementors {\n             write!(w, \"<li><code>\")?;\n             // If there's already another implementor that has the same abbridged name, use the\n             // full path, for example in `std::iter::ExactSizeIterator`\n-            let use_absolute = if let clean::Type::ResolvedPath {\n-                ref path, ..\n-            } = implementor.impl_.for_ {\n-                implementor_count[path.last_name()] > 1\n-            } else {\n-                false\n+            let use_absolute = match implementor.impl_.for_ {\n+                clean::ResolvedPath { ref path, is_generic: false, .. } |\n+                clean::BorrowedRef {\n+                    type_: box clean::ResolvedPath { ref path, is_generic: false, .. },\n+                    ..\n+                } => implementor_dups[path.last_name()].1,\n+                _ => false,\n             };\n             fmt_impl_for_trait_page(&implementor.impl_, w, use_absolute)?;\n             writeln!(w, \"</code></li>\")?;"}, {"sha": "afe1daf5983a29f3fbf2f21651d289de918ae99a", "filename": "src/test/rustdoc/impl-disambiguation.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4f6868aa018eb1336b966e455f53a6db3c1f1a36/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6868aa018eb1336b966e455f53a6db3c1f1a36/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs?ref=4f6868aa018eb1336b966e455f53a6db3c1f1a36", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+pub trait Foo {}\n+\n+pub struct Bar<T> { field: T }\n+\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl Foo for Bar<u8>\"\n+impl Foo for Bar<u8> {}\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl Foo for Bar<u16>\"\n+impl Foo for Bar<u16> {}\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl<'a> Foo for &'a Bar<u8>\"\n+impl<'a> Foo for &'a Bar<u8> {}\n+\n+pub mod mod1 {\n+    pub struct Baz {}\n+}\n+\n+pub mod mod2 {\n+    pub enum Baz {}\n+}\n+\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl Foo for foo::mod1::Baz\"\n+impl Foo for mod1::Baz {}\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl<'a> Foo for &'a foo::mod2::Baz\"\n+impl<'a> Foo for &'a mod2::Baz {}"}]}