{"sha": "dec8ed438c530a3b722a5ee881c9fef180cc97b1", "node_id": "C_kwDOAAsO6NoAKGRlYzhlZDQzOGM1MzBhM2I3MjJhNWVlODgxYzlmZWYxODBjYzk3YjE", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-01-12T23:29:10Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-01-15T01:16:55Z"}, "message": "attempt to re-add `ty::Unevaluated` visitor and friends", "tree": {"sha": "5f5257bfa426a4f266de1db6b6e513f531d0f4c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f5257bfa426a4f266de1db6b6e513f531d0f4c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dec8ed438c530a3b722a5ee881c9fef180cc97b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dec8ed438c530a3b722a5ee881c9fef180cc97b1", "html_url": "https://github.com/rust-lang/rust/commit/dec8ed438c530a3b722a5ee881c9fef180cc97b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dec8ed438c530a3b722a5ee881c9fef180cc97b1/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71bbb603f4108bc1f0bc8c8395ec725bb66e7802", "url": "https://api.github.com/repos/rust-lang/rust/commits/71bbb603f4108bc1f0bc8c8395ec725bb66e7802", "html_url": "https://github.com/rust-lang/rust/commit/71bbb603f4108bc1f0bc8c8395ec725bb66e7802"}], "stats": {"total": 297, "additions": 175, "deletions": 122}, "files": [{"sha": "266eec08cebf57ec7fed15994cbf0998db03b961", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -668,13 +668,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// canonicalizing the consts.\n     pub fn try_unify_abstract_consts(\n         &self,\n-        a: ty::Unevaluated<'tcx>,\n-        b: ty::Unevaluated<'tcx>,\n+        a: ty::Unevaluated<'tcx, ()>,\n+        b: ty::Unevaluated<'tcx, ()>,\n     ) -> bool {\n-        let canonical = self.canonicalize_query(\n-            ((a.def, a.substs), (b.def, b.substs)),\n-            &mut OriginalQueryValues::default(),\n-        );\n+        let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());\n         debug!(\"canonical consts: {:?}\", &canonical.value);\n \n         self.tcx.try_unify_abstract_consts(canonical.value)"}, {"sha": "5dc7b21964266f3b67269fbf3076ea67ce2f76f3", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -314,12 +314,11 @@ rustc_queries! {\n     }\n \n     query try_unify_abstract_consts(key: (\n-        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n-        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>)\n+        ty::Unevaluated<'tcx, ()>, ty::Unevaluated<'tcx, ()>\n     )) -> bool {\n         desc {\n             |tcx| \"trying to unify the generic constants {} and {}\",\n-            tcx.def_path_str(key.0.0.did), tcx.def_path_str(key.1.0.did)\n+            tcx.def_path_str(key.0.def.did), tcx.def_path_str(key.1.def.did)\n         }\n     }\n "}, {"sha": "8dbd2596ad8952cc6dedc67bf67600b21c70e92e", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -12,12 +12,31 @@ use rustc_target::abi::Size;\n \n use super::ScalarInt;\n /// An unevaluated, potentially generic, constant.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Lift)]\n #[derive(Hash, HashStable)]\n-pub struct Unevaluated<'tcx> {\n+pub struct Unevaluated<'tcx, P = Option<Promoted>> {\n     pub def: ty::WithOptConstParam<DefId>,\n     pub substs: SubstsRef<'tcx>,\n-    pub promoted: Option<Promoted>,\n+    pub promoted: P,\n+}\n+\n+impl<'tcx> Unevaluated<'tcx> {\n+    pub fn shrink(self) -> Unevaluated<'tcx, ()> {\n+        debug_assert_eq!(self.promoted, None);\n+        Unevaluated { def: self.def, substs: self.substs, promoted: () }\n+    }\n+}\n+\n+impl<'tcx> Unevaluated<'tcx, ()> {\n+    pub fn expand(self) -> Unevaluated<'tcx> {\n+        Unevaluated { def: self.def, substs: self.substs, promoted: None }\n+    }\n+}\n+\n+impl<'tcx, P: Default> Unevaluated<'tcx, P> {\n+    pub fn new(def: ty::WithOptConstParam<DefId>, substs: SubstsRef<'tcx>) -> Unevaluated<'tcx, P> {\n+        Unevaluated { def, substs, promoted: Default::default() }\n+    }\n }\n \n /// Represents a constant in Rust.\n@@ -109,7 +128,7 @@ impl<'tcx> ConstKind<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         param_env: ParamEnv<'tcx>,\n     ) -> Option<Result<ConstValue<'tcx>, ErrorReported>> {\n-        if let ConstKind::Unevaluated(Unevaluated { def, substs, promoted }) = self {\n+        if let ConstKind::Unevaluated(unevaluated) = self {\n             use crate::mir::interpret::ErrorHandled;\n \n             // HACK(eddyb) this erases lifetimes even though `const_eval_resolve`\n@@ -118,29 +137,32 @@ impl<'tcx> ConstKind<'tcx> {\n             // Note that we erase regions *before* calling `with_reveal_all_normalized`,\n             // so that we don't try to invoke this query with\n             // any region variables.\n-            let param_env_and_substs = tcx\n+            let param_env_and = tcx\n                 .erase_regions(param_env)\n                 .with_reveal_all_normalized(tcx)\n-                .and(tcx.erase_regions(substs));\n+                .and(tcx.erase_regions(unevaluated));\n \n             // HACK(eddyb) when the query key would contain inference variables,\n             // attempt using identity substs and `ParamEnv` instead, that will succeed\n             // when the expression doesn't depend on any parameters.\n             // FIXME(eddyb, skinny121) pass `InferCtxt` into here when it's available, so that\n             // we can call `infcx.const_eval_resolve` which handles inference variables.\n-            let param_env_and_substs = if param_env_and_substs.needs_infer() {\n-                tcx.param_env(def.did).and(InternalSubsts::identity_for_item(tcx, def.did))\n+            let param_env_and = if param_env_and.needs_infer() {\n+                tcx.param_env(unevaluated.def.did).and(ty::Unevaluated {\n+                    def: unevaluated.def,\n+                    substs: InternalSubsts::identity_for_item(tcx, unevaluated.def.did),\n+                    promoted: unevaluated.promoted,\n+                })\n             } else {\n-                param_env_and_substs\n+                param_env_and\n             };\n \n             // FIXME(eddyb) maybe the `const_eval_*` methods should take\n-            // `ty::ParamEnvAnd<SubstsRef>` instead of having them separate.\n-            let (param_env, substs) = param_env_and_substs.into_parts();\n+            // `ty::ParamEnvAnd` instead of having them separate.\n+            let (param_env, unevaluated) = param_env_and.into_parts();\n             // try to resolve e.g. associated constants to their definition on an impl, and then\n             // evaluate the const.\n-            match tcx.const_eval_resolve(param_env, ty::Unevaluated { def, substs, promoted }, None)\n-            {\n+            match tcx.const_eval_resolve(param_env, unevaluated, None) {\n                 // NOTE(eddyb) `val` contains no lifetimes/types/consts,\n                 // and we use the original type, so nothing from `substs`\n                 // (which may be identity substs, see above),"}, {"sha": "b6e673983fd4ed32d6bb7896c38d8f8ce7e78114", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -34,6 +34,12 @@ impl FlagComputation {\n         result.flags\n     }\n \n+    pub fn for_unevaluated_const(uv: ty::Unevaluated<'_>) -> TypeFlags {\n+        let mut result = FlagComputation::new();\n+        result.add_unevaluated_const(uv);\n+        result.flags\n+    }\n+\n     fn add_flags(&mut self, flags: TypeFlags) {\n         self.flags = self.flags | flags;\n     }\n@@ -246,8 +252,8 @@ impl FlagComputation {\n             ty::PredicateKind::ClosureKind(_def_id, substs, _kind) => {\n                 self.add_substs(substs);\n             }\n-            ty::PredicateKind::ConstEvaluatable(_def_id, substs) => {\n-                self.add_substs(substs);\n+            ty::PredicateKind::ConstEvaluatable(uv) => {\n+                self.add_unevaluated_const(uv);\n             }\n             ty::PredicateKind::ConstEquate(expected, found) => {\n                 self.add_const(expected);\n@@ -304,7 +310,7 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_unevaluated_const(&mut self, ct: ty::Unevaluated<'_>) {\n+    fn add_unevaluated_const<P>(&mut self, ct: ty::Unevaluated<'_, P>) {\n         self.add_substs(ct.substs);\n         self.add_flags(TypeFlags::HAS_CT_PROJECTION);\n     }"}, {"sha": "3133cdfdd7a7211222a0e9336aa4240a798e0121", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -350,6 +350,10 @@ pub trait TypeVisitor<'tcx>: Sized {\n         c.super_visit_with(self)\n     }\n \n+    fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        uv.super_visit_with(self)\n+    }\n+\n     fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         p.super_visit_with(self)\n     }\n@@ -1242,6 +1246,18 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         }\n     }\n \n+    #[inline]\n+    #[instrument(level = \"trace\")]\n+    fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        let flags = FlagComputation::for_unevaluated_const(uv);\n+        trace!(r.flags=?flags);\n+        if flags.intersects(self.flags) {\n+            ControlFlow::Break(FoundFlags)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n+    }\n+\n     #[inline]\n     #[instrument(level = \"trace\")]\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "82700537d3a839e213c3477393d97045af1a79e4", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -598,7 +598,7 @@ pub enum PredicateKind<'tcx> {\n     Coerce(CoercePredicate<'tcx>),\n \n     /// Constant initializer must evaluate successfully.\n-    ConstEvaluatable(ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n+    ConstEvaluatable(ty::Unevaluated<'tcx, ()>),\n \n     /// Constants must be equal. The first component is the const that is expected.\n     ConstEquate(&'tcx Const<'tcx>, &'tcx Const<'tcx>),"}, {"sha": "d9167e1980f62907fd435f7a6515b9e041e42125", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -2539,8 +2539,8 @@ define_print_and_forward_display! {\n                 print_value_path(closure_def_id, &[]),\n                 write(\"` implements the trait `{}`\", kind))\n             }\n-            ty::PredicateKind::ConstEvaluatable(def, substs) => {\n-                p!(\"the constant `\", print_value_path(def.did, substs), \"` can be evaluated\")\n+            ty::PredicateKind::ConstEvaluatable(uv) => {\n+                p!(\"the constant `\", print_value_path(uv.def.did, uv.substs), \"` can be evaluated\")\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => {\n                 p!(\"the constant `\", print(c1), \"` equals `\", print(c2), \"`\")"}, {"sha": "9e381cabdfe8482995ecdf1ed05dc4238b02f85f", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -587,7 +587,7 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n             if tcx.features().generic_const_exprs =>\n         {\n-            tcx.try_unify_abstract_consts(((au.def, au.substs), (bu.def, bu.substs)))\n+            tcx.try_unify_abstract_consts((au.shrink(), bu.shrink()))\n         }\n \n         // While this is slightly incorrect, it shouldn't matter for `min_const_generics`"}, {"sha": "63ebbcbc5bb67f01d21635544fb7fc6aca32b0b1", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -184,8 +184,8 @@ impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n             ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n                 write!(f, \"ClosureKind({:?}, {:?}, {:?})\", closure_def_id, closure_substs, kind)\n             }\n-            ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n-                write!(f, \"ConstEvaluatable({:?}, {:?})\", def_id, substs)\n+            ty::PredicateKind::ConstEvaluatable(uv) => {\n+                write!(f, \"ConstEvaluatable({:?}, {:?})\", uv.def, uv.substs)\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => write!(f, \"ConstEquate({:?}, {:?})\", c1, c2),\n             ty::PredicateKind::TypeWellFormedFromEnv(ty) => {\n@@ -445,8 +445,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::PredicateKind<'a> {\n             ty::PredicateKind::ObjectSafe(trait_def_id) => {\n                 Some(ty::PredicateKind::ObjectSafe(trait_def_id))\n             }\n-            ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n-                tcx.lift(substs).map(|substs| ty::PredicateKind::ConstEvaluatable(def_id, substs))\n+            ty::PredicateKind::ConstEvaluatable(uv) => {\n+                tcx.lift(uv).map(|uv| ty::PredicateKind::ConstEvaluatable(uv))\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => {\n                 tcx.lift((c1, c2)).map(|(c1, c2)| ty::PredicateKind::ConstEquate(c1, c2))\n@@ -1185,13 +1185,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n         Ok(match self {\n             ty::ConstKind::Infer(ic) => ty::ConstKind::Infer(ic.try_fold_with(folder)?),\n             ty::ConstKind::Param(p) => ty::ConstKind::Param(p.try_fold_with(folder)?),\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n-                ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                    def,\n-                    substs: substs.try_fold_with(folder)?,\n-                    promoted,\n-                })\n-            }\n+            ty::ConstKind::Unevaluated(uv) => ty::ConstKind::Unevaluated(uv.try_fold_with(folder)?),\n             ty::ConstKind::Value(_)\n             | ty::ConstKind::Bound(..)\n             | ty::ConstKind::Placeholder(..)\n@@ -1203,7 +1197,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n         match *self {\n             ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n             ty::ConstKind::Param(p) => p.visit_with(visitor),\n-            ty::ConstKind::Unevaluated(ct) => ct.substs.visit_with(visitor),\n+            ty::ConstKind::Unevaluated(uv) => uv.visit_with(visitor),\n             ty::ConstKind::Value(_)\n             | ty::ConstKind::Bound(..)\n             | ty::ConstKind::Placeholder(_)\n@@ -1224,3 +1218,45 @@ impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n         ControlFlow::CONTINUE\n     }\n }\n+\n+impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n+        Ok(ty::Unevaluated {\n+            def: self.def,\n+            substs: self.substs.try_fold_with(folder)?,\n+            promoted: self.promoted,\n+        })\n+    }\n+\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        visitor.visit_unevaluated_const(*self)\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.substs.visit_with(visitor)\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx, ()> {\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n+        Ok(ty::Unevaluated {\n+            def: self.def,\n+            substs: self.substs.try_fold_with(folder)?,\n+            promoted: self.promoted,\n+        })\n+    }\n+\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        visitor.visit_unevaluated_const(self.expand())\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.substs.visit_with(visitor)\n+    }\n+}"}, {"sha": "c62de1543883eb60e95be6852f5078b17669da24", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -716,11 +716,10 @@ impl<'tcx> Cx<'tcx> {\n                                 // and not the beginning of discriminants (which is always `0`)\n                                 let substs = InternalSubsts::identity_for_item(self.tcx(), did);\n                                 let lhs = ty::Const {\n-                                    val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                                        def: ty::WithOptConstParam::unknown(did),\n+                                    val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(\n+                                        ty::WithOptConstParam::unknown(did),\n                                         substs,\n-                                        promoted: None,\n-                                    }),\n+                                    )),\n                                     ty: var_ty,\n                                 };\n                                 let lhs = self.thir.exprs.push(mk_const(self.tcx().mk_const(lhs)));\n@@ -912,11 +911,10 @@ impl<'tcx> Cx<'tcx> {\n                 debug!(\"convert_path_expr: (const) user_ty={:?}\", user_ty);\n                 ExprKind::Literal {\n                     literal: self.tcx.mk_const(ty::Const {\n-                        val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                            def: ty::WithOptConstParam::unknown(def_id),\n+                        val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(\n+                            ty::WithOptConstParam::unknown(def_id),\n                             substs,\n-                            promoted: None,\n-                        }),\n+                        )),\n                         ty: self.typeck_results().node_type(expr.hir_id),\n                     }),\n                     user_ty,"}, {"sha": "217d767e4ab8e9ca9c0e7422dee27e17baf388b8", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -135,11 +135,11 @@ where\n                 ty.visit_with(self)\n             }\n             ty::PredicateKind::RegionOutlives(..) => ControlFlow::CONTINUE,\n-            ty::PredicateKind::ConstEvaluatable(defs, substs)\n+            ty::PredicateKind::ConstEvaluatable(uv)\n                 if self.def_id_visitor.tcx().features().generic_const_exprs =>\n             {\n                 let tcx = self.def_id_visitor.tcx();\n-                if let Ok(Some(ct)) = AbstractConst::new(tcx, defs, substs) {\n+                if let Ok(Some(ct)) = AbstractConst::new(tcx, uv) {\n                     self.visit_abstract_const_expr(tcx, ct)?;\n                 }\n                 ControlFlow::CONTINUE"}, {"sha": "581a2bce2e50e5cd81b8835aecfd117b2ba0bf68", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -245,18 +245,13 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     }\n }\n \n-impl<'tcx> Key\n-    for (\n-        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n-        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n-    )\n-{\n+impl<'tcx> Key for (ty::Unevaluated<'tcx, ()>, ty::Unevaluated<'tcx, ()>) {\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n-        (self.0).0.did.krate == LOCAL_CRATE\n+        (self.0).def.did.krate == LOCAL_CRATE\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n-        (self.0).0.did.default_span(tcx)\n+        (self.0).def.did.default_span(tcx)\n     }\n }\n "}, {"sha": "5a69c5d50ff762dc26dae8bf6e08720d23ac7393", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 21, "deletions": 37, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -19,7 +19,7 @@ use rustc_middle::thir::abstract_const::{self, Node, NodeId, NotConstEvaluatable\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n-use rustc_span::def_id::{DefId, LocalDefId};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::Span;\n \n use std::cmp;\n@@ -29,26 +29,20 @@ use std::ops::ControlFlow;\n /// Check if a given constant can be evaluated.\n pub fn is_const_evaluatable<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n-    def: ty::WithOptConstParam<DefId>,\n-    substs: SubstsRef<'tcx>,\n+    uv: ty::Unevaluated<'tcx, ()>,\n     param_env: ty::ParamEnv<'tcx>,\n     span: Span,\n ) -> Result<(), NotConstEvaluatable> {\n-    debug!(\"is_const_evaluatable({:?}, {:?})\", def, substs);\n+    debug!(\"is_const_evaluatable({:?})\", uv);\n     if infcx.tcx.features().generic_const_exprs {\n         let tcx = infcx.tcx;\n-        match AbstractConst::new(tcx, def, substs)? {\n+        match AbstractConst::new(tcx, uv)? {\n             // We are looking at a generic abstract constant.\n             Some(ct) => {\n                 for pred in param_env.caller_bounds() {\n                     match pred.kind().skip_binder() {\n-                        ty::PredicateKind::ConstEvaluatable(b_def, b_substs) => {\n-                            if b_def == def && b_substs == substs {\n-                                debug!(\"is_const_evaluatable: caller_bound ~~> ok\");\n-                                return Ok(());\n-                            }\n-\n-                            if let Some(b_ct) = AbstractConst::new(tcx, b_def, b_substs)? {\n+                        ty::PredicateKind::ConstEvaluatable(uv) => {\n+                            if let Some(b_ct) = AbstractConst::new(tcx, uv)? {\n                                 // Try to unify with each subtree in the AbstractConst to allow for\n                                 // `N + 1` being const evaluatable even if theres only a `ConstEvaluatable`\n                                 // predicate for `(N + 1) * 2`\n@@ -132,7 +126,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     }\n \n     let future_compat_lint = || {\n-        if let Some(local_def_id) = def.did.as_local() {\n+        if let Some(local_def_id) = uv.def.did.as_local() {\n             infcx.tcx.struct_span_lint_hir(\n                 lint::builtin::CONST_EVALUATABLE_UNCHECKED,\n                 infcx.tcx.hir().local_def_id_to_hir_id(local_def_id),\n@@ -153,16 +147,12 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     // and hopefully soon change this to an error.\n     //\n     // See #74595 for more details about this.\n-    let concrete = infcx.const_eval_resolve(\n-        param_env,\n-        ty::Unevaluated { def, substs, promoted: None },\n-        Some(span),\n-    );\n-\n-    if concrete.is_ok() && substs.has_param_types_or_consts() {\n-        match infcx.tcx.def_kind(def.did) {\n+    let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n+\n+    if concrete.is_ok() && uv.substs.has_param_types_or_consts() {\n+        match infcx.tcx.def_kind(uv.def.did) {\n             DefKind::AnonConst | DefKind::InlineConst => {\n-                let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(def);\n+                let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(uv.def);\n \n                 if mir_body.is_polymorphic {\n                     future_compat_lint();\n@@ -174,7 +164,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n \n     debug!(?concrete, \"is_const_evaluatable\");\n     match concrete {\n-        Err(ErrorHandled::TooGeneric) => Err(match substs.has_infer_types_or_consts() {\n+        Err(ErrorHandled::TooGeneric) => Err(match uv.has_infer_types_or_consts() {\n             true => NotConstEvaluatable::MentionsInfer,\n             false => NotConstEvaluatable::MentionsParam,\n         }),\n@@ -202,22 +192,19 @@ pub struct AbstractConst<'tcx> {\n impl<'tcx> AbstractConst<'tcx> {\n     pub fn new(\n         tcx: TyCtxt<'tcx>,\n-        def: ty::WithOptConstParam<DefId>,\n-        substs: SubstsRef<'tcx>,\n+        uv: ty::Unevaluated<'tcx, ()>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n-        let inner = tcx.thir_abstract_const_opt_const_arg(def)?;\n-        debug!(\"AbstractConst::new({:?}, {:?}) = {:?}\", def, substs, inner);\n-        Ok(inner.map(|inner| AbstractConst { inner, substs }))\n+        let inner = tcx.thir_abstract_const_opt_const_arg(uv.def)?;\n+        debug!(\"AbstractConst::new({:?}) = {:?}\", uv, inner);\n+        Ok(inner.map(|inner| AbstractConst { inner, substs: uv.substs }))\n     }\n \n     pub fn from_const(\n         tcx: TyCtxt<'tcx>,\n         ct: &ty::Const<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n         match ct.val {\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted: _ }) => {\n-                AbstractConst::new(tcx, def, substs)\n-            }\n+            ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv.shrink()),\n             ty::ConstKind::Error(_) => Err(ErrorReported),\n             _ => Ok(None),\n         }\n@@ -539,14 +526,11 @@ pub(super) fn thir_abstract_const<'tcx>(\n \n pub(super) fn try_unify_abstract_consts<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    ((a, a_substs), (b, b_substs)): (\n-        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n-        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n-    ),\n+    (a, b): (ty::Unevaluated<'tcx, ()>, ty::Unevaluated<'tcx, ()>),\n ) -> bool {\n     (|| {\n-        if let Some(a) = AbstractConst::new(tcx, a, a_substs)? {\n-            if let Some(b) = AbstractConst::new(tcx, b, b_substs)? {\n+        if let Some(a) = AbstractConst::new(tcx, a)? {\n+            if let Some(b) = AbstractConst::new(tcx, b)? {\n                 return Ok(try_unify(tcx, a, b));\n             }\n         }"}, {"sha": "72878b6cb38585dbd14e982f756e435f4b5069f7", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -819,10 +819,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n \n                 match obligation.predicate.kind().skip_binder() {\n-                    ty::PredicateKind::ConstEvaluatable(def, _) => {\n+                    ty::PredicateKind::ConstEvaluatable(uv) => {\n                         let mut err =\n                             self.tcx.sess.struct_span_err(span, \"unconstrained generic constant\");\n-                        let const_span = self.tcx.def_span(def.did);\n+                        let const_span = self.tcx.def_span(uv.def.did);\n                         match self.tcx.sess.source_map().span_to_snippet(const_span) {\n                             Ok(snippet) => err.help(&format!(\n                                 \"try adding a `where` bound using this expression: `where [(); {}]:`\","}, {"sha": "346590a2de26ff9118a55f6280153246e66afe85", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -527,19 +527,20 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                     }\n                 }\n \n-                ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n+                ty::PredicateKind::ConstEvaluatable(uv) => {\n                     match const_evaluatable::is_const_evaluatable(\n                         self.selcx.infcx(),\n-                        def_id,\n-                        substs,\n+                        uv,\n                         obligation.param_env,\n                         obligation.cause.span,\n                     ) {\n                         Ok(()) => ProcessResult::Changed(vec![]),\n                         Err(NotConstEvaluatable::MentionsInfer) => {\n                             pending_obligation.stalled_on.clear();\n                             pending_obligation.stalled_on.extend(\n-                                substs.iter().filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n+                                uv.substs\n+                                    .iter()\n+                                    .filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n                             );\n                             ProcessResult::Unchanged\n                         }\n@@ -563,7 +564,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n                             (c1.val, c2.val)\n                         {\n-                            if infcx.try_unify_abstract_consts(a, b) {\n+                            if infcx.try_unify_abstract_consts(a.shrink(), b.shrink()) {\n                                 return ProcessResult::Changed(vec![]);\n                             }\n                         }"}, {"sha": "8a1864278de3e047f27101a71fb56a040128ca30", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -845,12 +845,12 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n         }\n \n         fn visit_predicate(&mut self, pred: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            if let ty::PredicateKind::ConstEvaluatable(def, substs) = pred.kind().skip_binder() {\n+            if let ty::PredicateKind::ConstEvaluatable(uv) = pred.kind().skip_binder() {\n                 // FIXME(generic_const_exprs): We should probably deduplicate the logic for\n                 // `AbstractConst`s here, it might make sense to change `ConstEvaluatable` to\n                 // take a `ty::Const` instead.\n                 use rustc_middle::thir::abstract_const::Node;\n-                if let Ok(Some(ct)) = AbstractConst::new(self.tcx, def, substs) {\n+                if let Ok(Some(ct)) = AbstractConst::new(self.tcx, uv) {\n                     const_evaluatable::walk_abstract_const(self.tcx, ct, |node| {\n                         match node.root(self.tcx) {\n                             Node::Leaf(leaf) => self.visit_const(leaf),"}, {"sha": "20e2fc24df18a50184a24edf7f443090ab152293", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -619,11 +619,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }\n                 }\n \n-                ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n+                ty::PredicateKind::ConstEvaluatable(uv) => {\n                     match const_evaluatable::is_const_evaluatable(\n                         self.infcx,\n-                        def_id,\n-                        substs,\n+                        uv,\n                         obligation.param_env,\n                         obligation.cause.span,\n                     ) {\n@@ -645,7 +644,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n                             (c1.val, c2.val)\n                         {\n-                            if self.infcx.try_unify_abstract_consts(a, b) {\n+                            if self.infcx.try_unify_abstract_consts(a.shrink(), b.shrink()) {\n                                 return Ok(EvaluatedToOk);\n                             }\n                         }"}, {"sha": "dcf9bdc1e1bbe3a735bdd2830c314781a2f8ba35", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -131,11 +131,11 @@ pub fn predicate_obligations<'a, 'tcx>(\n             wf.compute(a.into());\n             wf.compute(b.into());\n         }\n-        ty::PredicateKind::ConstEvaluatable(def, substs) => {\n-            let obligations = wf.nominal_obligations(def.did, substs);\n+        ty::PredicateKind::ConstEvaluatable(uv) => {\n+            let obligations = wf.nominal_obligations(uv.def.did, uv.substs);\n             wf.out.extend(obligations);\n \n-            for arg in substs.iter() {\n+            for arg in uv.substs.iter() {\n                 wf.compute(arg);\n             }\n         }\n@@ -441,14 +441,14 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n                 GenericArgKind::Const(constant) => {\n                     match constant.val {\n-                        ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n-                            assert!(promoted.is_none());\n+                        ty::ConstKind::Unevaluated(uv) => {\n+                            assert!(uv.promoted.is_none());\n \n-                            let obligations = self.nominal_obligations(def.did, substs);\n+                            let obligations = self.nominal_obligations(uv.def.did, uv.substs);\n                             self.out.extend(obligations);\n \n                             let predicate =\n-                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(def, substs))\n+                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv.shrink()))\n                                     .to_predicate(self.tcx());\n                             let cause = self.cause(traits::MiscObligation);\n                             self.out.push(traits::Obligation::with_depth("}, {"sha": "3cc66aaf0d79c3ec8675a7f8c924f6caada1af9c", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -237,9 +237,9 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n                     relator.relate(predicate.rebind(a), p.rebind(b)).is_ok()\n                 }\n                 (\n-                    ty::PredicateKind::ConstEvaluatable(a_def, a_substs),\n-                    ty::PredicateKind::ConstEvaluatable(b_def, b_substs),\n-                ) => tcx.try_unify_abstract_consts(((a_def, a_substs), (b_def, b_substs))),\n+                    ty::PredicateKind::ConstEvaluatable(a),\n+                    ty::PredicateKind::ConstEvaluatable(b),\n+                ) => tcx.try_unify_abstract_consts((a, b)),\n                 (\n                     ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty_a, lt_a)),\n                     ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty_b, lt_b)),"}, {"sha": "abd237f4a757b526765658ed214cc28595db1808", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -972,10 +972,10 @@ fn check_type_defn<'tcx, F>(\n                 fcx.register_predicate(traits::Obligation::new(\n                     cause,\n                     fcx.param_env,\n-                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(\n+                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ty::Unevaluated::new(\n                         ty::WithOptConstParam::unknown(discr_def_id.to_def_id()),\n                         discr_substs,\n-                    ))\n+                    )))\n                     .to_predicate(tcx),\n                 ));\n             }"}, {"sha": "cdd6ddaa9b8a6c81bf61cfd28c2d96956a5c7b8e", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec8ed438c530a3b722a5ee881c9fef180cc97b1/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=dec8ed438c530a3b722a5ee881c9fef180cc97b1", "patch": "@@ -2313,7 +2313,7 @@ fn const_evaluatable_predicates_of<'tcx>(\n                 assert_eq!(uv.promoted, None);\n                 let span = self.tcx.hir().span(c.hir_id);\n                 self.preds.insert((\n-                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv.def, uv.substs))\n+                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv.shrink()))\n                         .to_predicate(self.tcx),\n                     span,\n                 ));"}]}