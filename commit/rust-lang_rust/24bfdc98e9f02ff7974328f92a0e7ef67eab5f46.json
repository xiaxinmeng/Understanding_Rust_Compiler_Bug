{"sha": "24bfdc98e9f02ff7974328f92a0e7ef67eab5f46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YmZkYzk4ZTlmMDJmZjc5NzQzMjhmOTJhMGU3ZWY2N2VhYjVmNDY=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-06-21T23:34:54Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-07-03T01:11:14Z"}, "message": "Fix debuginfo so that it points to the correct local", "tree": {"sha": "466fc98593d5ea234310aa078c3d1f0fd96ef394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/466fc98593d5ea234310aa078c3d1f0fd96ef394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46", "html_url": "https://github.com/rust-lang/rust/commit/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9248d90d20601e9d489a4a1c21df9de686b9fd82", "url": "https://api.github.com/repos/rust-lang/rust/commits/9248d90d20601e9d489a4a1c21df9de686b9fd82", "html_url": "https://github.com/rust-lang/rust/commit/9248d90d20601e9d489a4a1c21df9de686b9fd82"}], "stats": {"total": 237, "additions": 126, "deletions": 111}, "files": [{"sha": "a10d6c86ad537a42566b40f51af2d384f645ec36", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=24bfdc98e9f02ff7974328f92a0e7ef67eab5f46", "patch": "@@ -256,6 +256,18 @@ impl<'tcx> Body<'tcx> {\n         (&mut self.basic_blocks, &mut self.local_decls)\n     }\n \n+    #[inline]\n+    pub fn basic_blocks_local_decls_mut_and_var_debug_info(\n+        &mut self,\n+    ) -> (\n+        &mut IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n+        &mut LocalDecls<'tcx>,\n+        &mut Vec<VarDebugInfo<'tcx>>,\n+    ) {\n+        self.predecessor_cache.invalidate();\n+        (&mut self.basic_blocks, &mut self.local_decls, &mut self.var_debug_info)\n+    }\n+\n     /// Returns `true` if a cycle exists in the control-flow graph that is reachable from the\n     /// `START_BLOCK`.\n     pub fn is_cfg_cyclic(&self) -> bool {"}, {"sha": "778d19a3da44f533fafcf70cf18888c75affc884", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 59, "deletions": 10, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=24bfdc98e9f02ff7974328f92a0e7ef67eab5f46", "patch": "@@ -11,10 +11,10 @@\n \n use crate::transform::{simplify, MirPass, MirSource};\n use itertools::Itertools as _;\n-use rustc_index::vec::IndexVec;\n-use rustc_middle::mir::visit::{PlaceContext, Visitor};\n+use rustc_index::{bit_set::BitSet, vec::IndexVec};\n+use rustc_middle::mir::visit::{NonUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_middle::ty::{List, Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n use std::iter::{Enumerate, Peekable};\n use std::slice::Iter;\n@@ -74,10 +74,19 @@ struct ArmIdentityInfo<'tcx> {\n \n     /// The statements that should be removed (turned into nops)\n     stmts_to_remove: Vec<usize>,\n+\n+    /// Indices of debug variables that need to be adjusted to point to\n+    // `{local_0}.{dbg_projection}`.\n+    dbg_info_to_adjust: Vec<usize>,\n+\n+    /// The projection used to rewrite debug info.\n+    dbg_projection: &'tcx List<PlaceElem<'tcx>>,\n }\n \n fn get_arm_identity_info<'a, 'tcx>(\n     stmts: &'a [Statement<'tcx>],\n+    locals_count: usize,\n+    debug_info: &'a [VarDebugInfo<'tcx>],\n ) -> Option<ArmIdentityInfo<'tcx>> {\n     // This can't possibly match unless there are at least 3 statements in the block\n     // so fail fast on tiny blocks.\n@@ -190,7 +199,7 @@ fn get_arm_identity_info<'a, 'tcx>(\n     try_eat_storage_stmts(&mut stmt_iter, &mut storage_live_stmts, &mut storage_dead_stmts);\n \n     let (get_variant_field_stmt, stmt) = stmt_iter.next()?;\n-    let (local_tmp_s0, local_1, vf_s0) = match_get_variant_field(stmt)?;\n+    let (local_tmp_s0, local_1, vf_s0, dbg_projection) = match_get_variant_field(stmt)?;\n \n     try_eat_storage_stmts(&mut stmt_iter, &mut storage_live_stmts, &mut storage_dead_stmts);\n \n@@ -231,6 +240,19 @@ fn get_arm_identity_info<'a, 'tcx>(\n     let stmt_to_overwrite =\n         nop_stmts.iter().find(|stmt_idx| live_idx < **stmt_idx && **stmt_idx < dead_idx);\n \n+    let mut tmp_assigned_vars = BitSet::new_empty(locals_count);\n+    for (l, r) in &tmp_assigns {\n+        tmp_assigned_vars.insert(*l);\n+        tmp_assigned_vars.insert(*r);\n+    }\n+\n+    let mut dbg_info_to_adjust = Vec::new();\n+    for (i, var_info) in debug_info.iter().enumerate() {\n+        if tmp_assigned_vars.contains(var_info.place.local) {\n+            dbg_info_to_adjust.push(i);\n+        }\n+    }\n+\n     Some(ArmIdentityInfo {\n         local_temp_0: local_tmp_s0,\n         local_1,\n@@ -246,13 +268,16 @@ fn get_arm_identity_info<'a, 'tcx>(\n         source_info: discr_stmt_source_info,\n         storage_stmts,\n         stmts_to_remove: nop_stmts,\n+        dbg_info_to_adjust,\n+        dbg_projection,\n     })\n }\n \n fn optimization_applies<'tcx>(\n     opt_info: &ArmIdentityInfo<'tcx>,\n     local_decls: &IndexVec<Local, LocalDecl<'tcx>>,\n     local_uses: &IndexVec<Local, usize>,\n+    var_debug_info: &[VarDebugInfo<'tcx>],\n ) -> bool {\n     trace!(\"testing if optimization applies...\");\n \n@@ -309,6 +334,15 @@ fn optimization_applies<'tcx>(\n         }\n     }\n \n+    // Check that debug info only points to full Locals and not projections.\n+    for dbg_idx in &opt_info.dbg_info_to_adjust {\n+        let dbg_info = &var_debug_info[*dbg_idx];\n+        if !dbg_info.place.projection.is_empty() {\n+            trace!(\"NO: debug info for {:?} had a projection {:?}\", dbg_info.name, dbg_info.place);\n+            return false;\n+        }\n+    }\n+\n     if source_local != opt_info.local_temp_0 {\n         trace!(\n             \"NO: start of assignment chain does not match enum variant temp: {:?} != {:?}\",\n@@ -337,11 +371,14 @@ impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n \n         trace!(\"running SimplifyArmIdentity on {:?}\", source);\n         let local_uses = LocalUseCounter::get_local_uses(body);\n-        let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n+        let (basic_blocks, local_decls, debug_info) =\n+            body.basic_blocks_local_decls_mut_and_var_debug_info();\n         for bb in basic_blocks {\n-            if let Some(opt_info) = get_arm_identity_info(&bb.statements) {\n+            if let Some(opt_info) =\n+                get_arm_identity_info(&bb.statements, local_decls.len(), debug_info)\n+            {\n                 trace!(\"got opt_info = {:#?}\", opt_info);\n-                if !optimization_applies(&opt_info, local_decls, &local_uses) {\n+                if !optimization_applies(&opt_info, local_decls, &local_uses, &debug_info) {\n                     debug!(\"optimization skipped for {:?}\", source);\n                     continue;\n                 }\n@@ -377,6 +414,14 @@ impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n \n                 bb.statements.retain(|stmt| stmt.kind != StatementKind::Nop);\n \n+                // Fix the debug info to point to the right local\n+                for dbg_index in opt_info.dbg_info_to_adjust {\n+                    let dbg_info = &mut debug_info[dbg_index];\n+                    assert!(dbg_info.place.projection.is_empty());\n+                    dbg_info.place.local = opt_info.local_0;\n+                    dbg_info.place.projection = opt_info.dbg_projection;\n+                }\n+\n                 trace!(\"block is now {:?}\", bb.statements);\n             }\n         }\n@@ -397,7 +442,9 @@ impl LocalUseCounter {\n \n impl<'tcx> Visitor<'tcx> for LocalUseCounter {\n     fn visit_local(&mut self, local: &Local, context: PlaceContext, _location: Location) {\n-        if context.is_storage_marker() {\n+        if context.is_storage_marker()\n+            || context == PlaceContext::NonUse(NonUseContext::VarDebugInfo)\n+        {\n             return;\n         }\n \n@@ -409,13 +456,15 @@ impl<'tcx> Visitor<'tcx> for LocalUseCounter {\n /// ```rust\n /// _LOCAL_INTO = ((_LOCAL_FROM as Variant).FIELD: TY);\n /// ```\n-fn match_get_variant_field<'tcx>(stmt: &Statement<'tcx>) -> Option<(Local, Local, VarField<'tcx>)> {\n+fn match_get_variant_field<'tcx>(\n+    stmt: &Statement<'tcx>,\n+) -> Option<(Local, Local, VarField<'tcx>, &'tcx List<PlaceElem<'tcx>>)> {\n     match &stmt.kind {\n         StatementKind::Assign(box (place_into, rvalue_from)) => match rvalue_from {\n             Rvalue::Use(Operand::Copy(pf) | Operand::Move(pf)) => {\n                 let local_into = place_into.as_local()?;\n                 let (local_from, vf) = match_variant_field_place(*pf)?;\n-                Some((local_into, local_from, vf))\n+                Some((local_into, local_from, vf, pf.projection))\n             }\n             _ => None,\n         },"}, {"sha": "551f6db08a599e9aaecf2c3d70878f4c8565de29", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/32bit/rustc.map.SimplifyLocals.diff", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff?ref=24bfdc98e9f02ff7974328f92a0e7ef67eab5f46", "patch": "@@ -5,12 +5,12 @@\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n       let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-      let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+-     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n -     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n -     let mut _5: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n -     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n       scope 1 {\n-          debug x => _3;                   // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n       }\n   \n       bb0: {\n@@ -19,9 +19,7 @@\n       }\n   \n       bb1: {\n-          _3 = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n-          ((_0 as Some).0: std::boxed::Box<()>) = move _3; // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n-          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n+          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n           goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n       }\n   "}, {"sha": "388b382b86daff5bac7263af4bee223c40eff845", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/64bit/rustc.map.SimplifyLocals.diff", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff?ref=24bfdc98e9f02ff7974328f92a0e7ef67eab5f46", "patch": "@@ -5,12 +5,12 @@\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n       let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-      let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+-     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n -     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n -     let mut _5: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n -     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n       scope 1 {\n-          debug x => _3;                   // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n       }\n   \n       bb0: {\n@@ -19,9 +19,7 @@\n       }\n   \n       bb1: {\n-          _3 = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n-          ((_0 as Some).0: std::boxed::Box<()>) = move _3; // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n-          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n+          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n           goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n       }\n   "}, {"sha": "e6d794a71508c32ca08925edaab113826b395224", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff?ref=24bfdc98e9f02ff7974328f92a0e7ef67eab5f46", "patch": "@@ -15,22 +15,27 @@\n       let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n       let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:7:8: 7:9\n       scope 1 {\n-          debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+-         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n++         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n       }\n       scope 2 {\n-          debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n+-         debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n++         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n           scope 3 {\n               scope 7 {\n-                  debug t => _9;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+-                 debug t => _9;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n++                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n               }\n               scope 8 {\n-                  debug v => _8;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+-                 debug v => _8;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n++                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n                   let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:6:14: 6:15\n               }\n           }\n       }\n       scope 4 {\n-          debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n+-         debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n++         debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n           scope 5 {\n           }\n       }\n@@ -50,35 +55,37 @@\n       }\n   \n       bb1: {\n-          StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n-          _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n-          _2 = _10;                        // scope 5 at $DIR/simplify_try.rs:6:13: 6:15\n-          StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+-         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+-         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+-         _2 = _10;                        // scope 5 at $DIR/simplify_try.rs:6:13: 6:15\n+-         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n++         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:6:15: 6:16\n-          StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:7:8: 7:9\n-          _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:7:8: 7:9\n-          ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-          discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-          StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n+-         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:7:8: 7:9\n+-         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:7:8: 7:9\n+-         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+-         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+-         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n           goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n       }\n   \n       bb2: {\n-          StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-          _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-          StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n-          StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n-          _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n-          _8 = move _9;                    // scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n-          StorageLive(_12);                // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-          _12 = move _8;                   // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-          ((_0 as Err).0: i32) = move _12; // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-          discriminant(_0) = 1;            // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-          StorageDead(_12);                // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n-          StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+-         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+-         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+-         StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+-         StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+-         _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+-         _8 = move _9;                    // scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+-         StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+-         StorageLive(_12);                // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+-         _12 = move _8;                   // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+-         ((_0 as Err).0: i32) = move _12; // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+-         discriminant(_0) = 1;            // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+-         StorageDead(_12);                // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+-         StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+-         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n++         _0 = move _3;                    // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:6:15: 6:16\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n           goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:6:14: 6:15"}, {"sha": "24bde51c7d3bbb31fc6609333f74a65737192063", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 8, "deletions": 36, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir?ref=24bfdc98e9f02ff7974328f92a0e7ef67eab5f46", "patch": "@@ -14,22 +14,22 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n     let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:7:8: 7:9\n     scope 1 {\n-        debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n     }\n     scope 2 {\n-        debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n+        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n         scope 3 {\n             scope 7 {\n-                debug t => _9;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+                debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n             }\n             scope 8 {\n-                debug v => _8;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+                debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n                 let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:6:14: 6:15\n             }\n         }\n     }\n     scope 4 {\n-        debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n+        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n         scope 5 {\n         }\n     }\n@@ -45,45 +45,17 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n         _3 = move _4;                    // scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-        switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n     }\n \n     bb1: {\n-        StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n-        _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n-        _2 = _10;                        // scope 5 at $DIR/simplify_try.rs:6:13: 6:15\n-        StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+        _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:6:15: 6:16\n-        StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:7:8: 7:9\n-        _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:7:8: 7:9\n-        ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-        discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-        StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n         StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n-        goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n+        goto -> bb2;                     // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n     }\n \n     bb2: {\n-        StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-        _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-        StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n-        StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n-        _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n-        _8 = move _9;                    // scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n-        StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n-        StorageLive(_12);                // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-        _12 = move _8;                   // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-        ((_0 as Err).0: i32) = move _12; // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-        discriminant(_0) = 1;            // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-        StorageDead(_12);                // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-        StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n-        StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:6:15: 6:16\n-        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n-        goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-    }\n-\n-    bb3: {\n         return;                          // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n     }\n }"}, {"sha": "929f04d4654adbeff804a4364a9014d8c952ce98", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/24bfdc98e9f02ff7974328f92a0e7ef67eab5f46/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir?ref=24bfdc98e9f02ff7974328f92a0e7ef67eab5f46", "patch": "@@ -3,25 +3,22 @@\n fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n     debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:5:17: 5:18\n     let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:5:41: 5:57\n-    let mut _2: isize;                   // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-    let _3: i32;                         // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-    let _4: u32;                         // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n     scope 1 {\n-        debug y => _4;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n     }\n     scope 2 {\n-        debug err => _3;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n+        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n         scope 3 {\n             scope 7 {\n-                debug t => _3;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+                debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n             }\n             scope 8 {\n-                debug v => _3;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+                debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n             }\n         }\n     }\n     scope 4 {\n-        debug val => _4;                 // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n+        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n         scope 5 {\n         }\n     }\n@@ -30,25 +27,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     }\n \n     bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-        switchInt(move _2) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-    }\n-\n-    bb1: {\n-        _4 = ((_1 as Ok).0: u32);        // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n-        ((_0 as Ok).0: u32) = move _4;   // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-        discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-        goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n-    }\n-\n-    bb2: {\n-        _3 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-        ((_0 as Err).0: i32) = move _3;  // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-        discriminant(_0) = 1;            // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-        goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-    }\n-\n-    bb3: {\n+        _0 = move _1;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n         return;                          // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n     }\n }"}]}