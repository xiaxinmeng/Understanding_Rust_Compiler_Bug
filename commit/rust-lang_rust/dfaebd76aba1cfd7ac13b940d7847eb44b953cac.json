{"sha": "dfaebd76aba1cfd7ac13b940d7847eb44b953cac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYWViZDc2YWJhMWNmZDdhYzEzYjk0MGQ3ODQ3ZWI0NGI5NTNjYWM=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-04-08T07:46:26Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-04-09T11:45:05Z"}, "message": "Add FunctionSignature::from_hir", "tree": {"sha": "1d3e6d2a6809ad3786880dade195bf8cd9a24560", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d3e6d2a6809ad3786880dade195bf8cd9a24560"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfaebd76aba1cfd7ac13b940d7847eb44b953cac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfaebd76aba1cfd7ac13b940d7847eb44b953cac", "html_url": "https://github.com/rust-lang/rust/commit/dfaebd76aba1cfd7ac13b940d7847eb44b953cac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfaebd76aba1cfd7ac13b940d7847eb44b953cac/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fe075f56eff65ee6d326f7ea8bc0efccc4df152", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe075f56eff65ee6d326f7ea8bc0efccc4df152", "html_url": "https://github.com/rust-lang/rust/commit/2fe075f56eff65ee6d326f7ea8bc0efccc4df152"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "dbb3853d0fcbe0ef95c530339f01f11c34335fa0", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfaebd76aba1cfd7ac13b940d7847eb44b953cac/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfaebd76aba1cfd7ac13b940d7847eb44b953cac/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=dfaebd76aba1cfd7ac13b940d7847eb44b953cac", "patch": "@@ -6,7 +6,6 @@ use ra_syntax::{\n     ast::{self, ArgListOwner},\n     algo::find_node_at_offset,\n };\n-use hir::Docs;\n \n use crate::{FilePosition, CallInfo, FunctionSignature, db::RootDatabase};\n \n@@ -27,7 +26,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     let fn_def = ast::FnDef::cast(fn_def).unwrap();\n     let function = hir::source_binder::function_from_source(db, symbol.file_id, fn_def)?;\n \n-    let mut call_info = CallInfo::new(db, function, fn_def)?;\n+    let mut call_info = CallInfo::new(db, function);\n \n     // If we have a calling expression let's find which argument we are on\n     let num_params = call_info.parameters().len();\n@@ -107,11 +106,10 @@ impl<'a> FnCallNode<'a> {\n }\n \n impl CallInfo {\n-    fn new(db: &RootDatabase, function: hir::Function, node: &ast::FnDef) -> Option<Self> {\n-        let doc = function.docs(db);\n-        let signature = FunctionSignature::from(node).with_doc_opt(doc);\n+    fn new(db: &RootDatabase, function: hir::Function) -> Self {\n+        let signature = FunctionSignature::from_hir(db, function);\n \n-        Some(CallInfo { signature, active_parameter: None })\n+        CallInfo { signature, active_parameter: None }\n     }\n \n     fn parameters(&self) -> &[String] {"}, {"sha": "c05d59689e17e3f56e8e668e0a29eda0eb6c2ce7", "filename": "crates/ra_ide_api/src/display.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfaebd76aba1cfd7ac13b940d7847eb44b953cac/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfaebd76aba1cfd7ac13b940d7847eb44b953cac/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=dfaebd76aba1cfd7ac13b940d7847eb44b953cac", "patch": "@@ -5,6 +5,7 @@ use std::fmt::{self, Display};\n use join_to_string::join;\n use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner, TypeParamsOwner};\n use std::convert::From;\n+use hir::Docs;\n \n /// Contains information about a function signature\n #[derive(Debug)]\n@@ -30,6 +31,12 @@ impl FunctionSignature {\n         self.doc = doc;\n         self\n     }\n+\n+    pub(crate) fn from_hir(db: &db::RootDatabase, function: hir::Function) -> Self {\n+        let doc = function.docs(db);\n+        let (_, ast_node) = function.source(db);\n+        FunctionSignature::from(&*ast_node).with_doc_opt(doc)\n+    }\n }\n \n impl From<&'_ ast::FnDef> for FunctionSignature {"}]}