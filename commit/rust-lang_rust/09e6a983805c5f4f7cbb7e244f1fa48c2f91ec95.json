{"sha": "09e6a983805c5f4f7cbb7e244f1fa48c2f91ec95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZTZhOTgzODA1YzVmNGY3Y2JiN2UyNDRmMWZhNDhjMmY5MWVjOTU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-09-05T10:56:29Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-09-05T10:57:00Z"}, "message": "Fix issue #36036.\n\nWe were treating an associated type as unsized even when the concrete\ninstantiation was actually sized. Fix is to normalize before checking\nif it is sized.", "tree": {"sha": "2cd407720216cb82937f39645d4c021e295c676b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cd407720216cb82937f39645d4c021e295c676b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09e6a983805c5f4f7cbb7e244f1fa48c2f91ec95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09e6a983805c5f4f7cbb7e244f1fa48c2f91ec95", "html_url": "https://github.com/rust-lang/rust/commit/09e6a983805c5f4f7cbb7e244f1fa48c2f91ec95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09e6a983805c5f4f7cbb7e244f1fa48c2f91ec95/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86995dc8c56b3c2923dff8a4bb79fed7c60a4396", "url": "https://api.github.com/repos/rust-lang/rust/commits/86995dc8c56b3c2923dff8a4bb79fed7c60a4396", "html_url": "https://github.com/rust-lang/rust/commit/86995dc8c56b3c2923dff8a4bb79fed7c60a4396"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "276fc708eed1bad2350f9a2e5f575569892c55f8", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09e6a983805c5f4f7cbb7e244f1fa48c2f91ec95/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e6a983805c5f4f7cbb7e244f1fa48c2f91ec95/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=09e6a983805c5f4f7cbb7e244f1fa48c2f91ec95", "patch": "@@ -856,10 +856,10 @@ impl<'a, 'gcx, 'tcx> Layout {\n             ty::TyRef(_, ty::TypeAndMut { ty: pointee, .. }) |\n             ty::TyRawPtr(ty::TypeAndMut { ty: pointee, .. }) => {\n                 let non_zero = !ty.is_unsafe_ptr();\n+                let pointee = normalize_associated_type(infcx, pointee);\n                 if pointee.is_sized(tcx, &infcx.parameter_environment, DUMMY_SP) {\n                     Scalar { value: Pointer, non_zero: non_zero }\n                 } else {\n-                    let pointee = normalize_associated_type(infcx, pointee);\n                     let unsized_part = tcx.struct_tail(pointee);\n                     let meta = match unsized_part.sty {\n                         ty::TySlice(_) | ty::TyStr => {"}, {"sha": "4ee3be0eb7b812e591da1d3a21a733c7d4fac082", "filename": "src/test/run-pass/issue-36036-associated-type-layout.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/09e6a983805c5f4f7cbb7e244f1fa48c2f91ec95/src%2Ftest%2Frun-pass%2Fissue-36036-associated-type-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e6a983805c5f4f7cbb7e244f1fa48c2f91ec95/src%2Ftest%2Frun-pass%2Fissue-36036-associated-type-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-36036-associated-type-layout.rs?ref=09e6a983805c5f4f7cbb7e244f1fa48c2f91ec95", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 36036: computing the layout of a type composed from another\n+// trait's associated type caused compiler to ICE when the associated\n+// type was allowed to be unsized, even though the known instantiated\n+// type is itself sized.\n+\n+#![allow(dead_code)]\n+\n+trait Context {\n+    type Container: ?Sized;\n+}\n+\n+impl Context for u16 {\n+    type Container = u8;\n+}\n+\n+struct Wrapper<C: Context+'static> {\n+    container: &'static C::Container\n+}\n+\n+fn foobar(_: Wrapper<u16>) {}\n+\n+static VALUE: u8 = 0;\n+\n+fn main() {\n+    foobar(Wrapper { container: &VALUE });\n+}"}]}