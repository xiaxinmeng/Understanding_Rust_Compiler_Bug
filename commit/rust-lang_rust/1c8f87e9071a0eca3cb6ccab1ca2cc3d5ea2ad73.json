{"sha": "1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73", "node_id": "C_kwDOAAsO6NoAKDFjOGY4N2U5MDcxYTBlY2EzY2I2Y2NhYjFjYTJjYzNkNWVhMmFkNzM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-15T16:30:07Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-15T17:21:55Z"}, "message": "Revert \"Highlight conflicting param-env candidates\"\n\nThis reverts commit 08135254dcf22be0d5661ea8f75e703b29a83514.", "tree": {"sha": "c206c2c38bc19d59f25e16861c042e3f82a4e475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c206c2c38bc19d59f25e16861c042e3f82a4e475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73", "html_url": "https://github.com/rust-lang/rust/commit/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fe5390a885eb47f506bf481cd9ea2b449705d79", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fe5390a885eb47f506bf481cd9ea2b449705d79", "html_url": "https://github.com/rust-lang/rust/commit/0fe5390a885eb47f506bf481cd9ea2b449705d79"}], "stats": {"total": 133, "additions": 19, "deletions": 114}, "files": [{"sha": "3e4e56888ff95b6ade811e1b2597562b63e1f289", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73", "patch": "@@ -541,17 +541,9 @@ pub enum SelectionError<'tcx> {\n     ErrorReporting,\n     /// Multiple applicable `impl`s where found. The `DefId`s correspond to\n     /// all the `impl`s' Items.\n-    Ambiguous(Vec<AmbiguousSelection>),\n+    Ambiguous(Vec<DefId>),\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub enum AmbiguousSelection {\n-    Impl(DefId),\n-    ParamEnv(Span),\n-}\n-\n-TrivialTypeTraversalAndLiftImpls! { AmbiguousSelection, }\n-\n /// When performing resolution, it is typically the case that there\n /// can be one of three outcomes:\n ///"}, {"sha": "3960f391407a386c5df580ab60b26925c3202882", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 30, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73", "patch": "@@ -23,7 +23,7 @@ use rustc_hir::GenericParam;\n use rustc_hir::Item;\n use rustc_hir::Node;\n use rustc_infer::infer::error_reporting::same_type_modulo_infer;\n-use rustc_infer::traits::{AmbiguousSelection, TraitEngine};\n+use rustc_infer::traits::TraitEngine;\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::ExpectedFound;\n@@ -1402,7 +1402,7 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n     fn annotate_source_of_ambiguity(\n         &self,\n         err: &mut Diagnostic,\n-        impls: &[AmbiguousSelection],\n+        impls: &[DefId],\n         predicate: ty::Predicate<'tcx>,\n     );\n \n@@ -2035,14 +2035,6 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 );\n                 match selcx.select_from_obligation(&obligation) {\n                     Err(SelectionError::Ambiguous(impls)) if impls.len() > 1 => {\n-                        if self.is_tainted_by_errors() && subst.is_none() {\n-                            // If `subst.is_none()`, then this is probably two param-env\n-                            // candidates or impl candidates that are equal modulo lifetimes.\n-                            // Therefore, if we've already emitted an error, just skip this\n-                            // one, since it's not particularly actionable.\n-                            err.cancel();\n-                            return;\n-                        }\n                         self.annotate_source_of_ambiguity(&mut err, &impls, predicate);\n                     }\n                     _ => {\n@@ -2223,35 +2215,24 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n     fn annotate_source_of_ambiguity(\n         &self,\n         err: &mut Diagnostic,\n-        impls: &[AmbiguousSelection],\n+        impls: &[DefId],\n         predicate: ty::Predicate<'tcx>,\n     ) {\n         let mut spans = vec![];\n         let mut crates = vec![];\n         let mut post = vec![];\n-        let mut or_where_clause = false;\n-        for ambig in impls {\n-            match ambig {\n-                AmbiguousSelection::Impl(def_id) => match self.tcx.span_of_impl(*def_id) {\n-                    Ok(span) => spans.push(span),\n-                    Err(name) => {\n-                        crates.push(name);\n-                        if let Some(header) = to_pretty_impl_header(self.tcx, *def_id) {\n-                            post.push(header);\n-                        }\n+        for def_id in impls {\n+            match self.tcx.span_of_impl(*def_id) {\n+                Ok(span) => spans.push(span),\n+                Err(name) => {\n+                    crates.push(name);\n+                    if let Some(header) = to_pretty_impl_header(self.tcx, *def_id) {\n+                        post.push(header);\n                     }\n-                },\n-                AmbiguousSelection::ParamEnv(span) => {\n-                    or_where_clause = true;\n-                    spans.push(*span);\n                 }\n             }\n         }\n-        let msg = format!(\n-            \"multiple `impl`s{} satisfying `{}` found\",\n-            if or_where_clause { \" or `where` clauses\" } else { \"\" },\n-            predicate\n-        );\n+        let msg = format!(\"multiple `impl`s satisfying `{}` found\", predicate);\n         let mut crate_names: Vec<_> = crates.iter().map(|n| format!(\"`{}`\", n)).collect();\n         crate_names.sort();\n         crate_names.dedup();"}, {"sha": "6e8581128dd8ea2a822c49a806e0238a5dfc9665", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 41, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73", "patch": "@@ -6,11 +6,9 @@\n //!\n //! [rustc dev guide]:https://rustc-dev-guide.rust-lang.org/traits/resolution.html#candidate-assembly\n use hir::LangItem;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_infer::traits::util::elaborate_predicates_with_span;\n-use rustc_infer::traits::{AmbiguousSelection, TraitEngine};\n+use rustc_infer::traits::TraitEngine;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n use rustc_lint_defs::builtin::DEREF_INTO_DYN_SUPERTRAIT;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n@@ -201,48 +199,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // and report ambiguity.\n                     if i > 1 {\n                         debug!(\"multiple matches, ambig\");\n-\n-                        // Collect a list of (probable) spans that point to a param-env candidate\n-                        let tcx = self.infcx.tcx;\n-                        let owner = stack.obligation.cause.body_id.owner.to_def_id();\n-                        let predicates = tcx.predicates_of(owner).instantiate_identity(tcx);\n-                        let param_env_spans: FxHashMap<_, _> = elaborate_predicates_with_span(\n-                            tcx,\n-                            std::iter::zip(predicates.predicates, predicates.spans),\n-                        )\n-                        .filter_map(|obligation| {\n-                            let kind = obligation.predicate.kind();\n-                            if let ty::PredicateKind::Trait(trait_pred) = kind.skip_binder() {\n-                                if trait_pred.trait_ref\n-                                    == ty::TraitRef::identity(tcx, trait_pred.def_id())\n-                                        .skip_binder()\n-                                {\n-                                    // HACK: Remap the `Self: Trait` predicate that every trait has to a more useful span\n-                                    Some((\n-                                        kind.rebind(trait_pred),\n-                                        tcx.def_span(trait_pred.def_id()),\n-                                    ))\n-                                } else {\n-                                    Some((kind.rebind(trait_pred), obligation.cause.span))\n-                                }\n-                            } else {\n-                                None\n-                            }\n-                        })\n-                        .collect();\n-\n                         return Err(Ambiguous(\n                             candidates\n                                 .into_iter()\n                                 .filter_map(|c| match c.candidate {\n-                                    SelectionCandidate::ImplCandidate(def_id) => {\n-                                        Some(AmbiguousSelection::Impl(def_id))\n-                                    }\n-                                    SelectionCandidate::ParamCandidate(predicate) => {\n-                                        Some(AmbiguousSelection::ParamEnv(\n-                                            *param_env_spans.get(&predicate)?,\n-                                        ))\n-                                    }\n+                                    SelectionCandidate::ImplCandidate(def_id) => Some(def_id),\n                                     _ => None,\n                                 })\n                                 .collect(),"}, {"sha": "4e010a13653e7796c0723c35125c33bdb5ce60b1", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73", "patch": "@@ -4,13 +4,7 @@ error[E0283]: type annotations needed: cannot satisfy `&'a T: Foo`\n LL |     where &'a T : Foo,\n    |                   ^^^\n    |\n-note: multiple `impl`s or `where` clauses satisfying `&'a T: Foo` found\n-  --> $DIR/issue-21974.rs:11:19\n-   |\n-LL |     where &'a T : Foo,\n-   |                   ^^^\n-LL |           &'b T : Foo\n-   |                   ^^^\n+   = note: cannot satisfy `&'a T: Foo`\n \n error: aborting due to previous error\n "}, {"sha": "8f3b2ac73199ccec1afced236ae6f1c0f0452522", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73", "patch": "@@ -4,11 +4,7 @@ error[E0283]: type annotations needed: cannot satisfy `T0: Trait0<'l0>`\n LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n    |                                                         ^^^^^^^^^^^\n    |\n-note: multiple `impl`s or `where` clauses satisfying `T0: Trait0<'l0>` found\n-  --> $DIR/issue-24424.rs:4:57\n-   |\n-LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n-   |                                                         ^^^^^^^^^^^       ^^^^^^^^^^^\n+   = note: cannot satisfy `T0: Trait0<'l0>`\n \n error: aborting due to previous error\n "}, {"sha": "5832c4d173c10245c4574f5c47a058be2ad345eb", "filename": "src/test/ui/lifetimes/issue-34979.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr?ref=1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73", "patch": "@@ -4,13 +4,7 @@ error[E0283]: type annotations needed: cannot satisfy `&'a (): Foo`\n LL |     &'a (): Foo,\n    |             ^^^\n    |\n-note: multiple `impl`s or `where` clauses satisfying `&'a (): Foo` found\n-  --> $DIR/issue-34979.rs:6:13\n-   |\n-LL |     &'a (): Foo,\n-   |             ^^^\n-LL |     &'static (): Foo;\n-   |                  ^^^\n+   = note: cannot satisfy `&'a (): Foo`\n \n error: aborting due to previous error\n "}, {"sha": "fa280135beb2d98a99f1605dc79ea8c33b57b7fa", "filename": "src/test/ui/traits/issue-85735.stderr", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr?ref=1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73", "patch": "@@ -4,14 +4,7 @@ error[E0283]: type annotations needed: cannot satisfy `T: FnMut<(&'a (),)>`\n LL |     T: FnMut(&'a ()),\n    |        ^^^^^^^^^^^^^\n    |\n-note: multiple `impl`s or `where` clauses satisfying `T: FnMut<(&'a (),)>` found\n-  --> $DIR/issue-85735.rs:7:8\n-   |\n-LL |     T: FnMut(&'a ()),\n-   |        ^^^^^^^^^^^^^\n-LL |\n-LL |     T: FnMut(&'b ()),\n-   |        ^^^^^^^^^^^^^\n+   = note: cannot satisfy `T: FnMut<(&'a (),)>`\n \n error: aborting due to previous error\n "}, {"sha": "75feb5698eb630ea2e868cfb5cf4ea6d0e0b1eb5", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=1c8f87e9071a0eca3cb6ccab1ca2cc3d5ea2ad73", "patch": "@@ -4,13 +4,7 @@ error[E0283]: type annotations needed: cannot satisfy `&'a T: Foo`\n LL |     where &'a T : Foo,\n    |                   ^^^\n    |\n-note: multiple `impl`s or `where` clauses satisfying `&'a T: Foo` found\n-  --> $DIR/issue-40294.rs:6:19\n-   |\n-LL |     where &'a T : Foo,\n-   |                   ^^^\n-LL |           &'b T : Foo\n-   |                   ^^^\n+   = note: cannot satisfy `&'a T: Foo`\n \n error: aborting due to previous error\n "}]}