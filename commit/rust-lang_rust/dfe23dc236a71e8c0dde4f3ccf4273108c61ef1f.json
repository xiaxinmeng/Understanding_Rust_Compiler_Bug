{"sha": "dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f", "node_id": "C_kwDOAAsO6NoAKGRmZTIzZGMyMzZhNzFlOGMwZGRlNGYzY2NmNDI3MzEwOGM2MWVmMWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-16T16:12:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-16T16:12:19Z"}, "message": "Auto merge of #10360 - JirkaVebr:transmute_integer_to_non_zero_wrapper, r=llogiq\n\nAdd the `transmute_int_to_non_zero` lint\n\nFixes #10288\n\nThis adds a new complexity lint `transmute_int_to_non_zero` which checks for transmutes to any of the `NonZero*` types, and suggests their `new_unchecked` method instead.\n\nr? `@llogiq`\n\nchangelog: New lint: [`transmute_int_to_non_zero`]", "tree": {"sha": "4e7114cdedd4427253cdfa8fc480d43b8ede3d9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e7114cdedd4427253cdfa8fc480d43b8ede3d9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f", "html_url": "https://github.com/rust-lang/rust/commit/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52c8b536c954bc543290f36f2d90f3e75facaa0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/52c8b536c954bc543290f36f2d90f3e75facaa0b", "html_url": "https://github.com/rust-lang/rust/commit/52c8b536c954bc543290f36f2d90f3e75facaa0b"}, {"sha": "6d0df84f6f879feb2211f8f61351a4669d2397e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0df84f6f879feb2211f8f61351a4669d2397e0", "html_url": "https://github.com/rust-lang/rust/commit/6d0df84f6f879feb2211f8f61351a4669d2397e0"}], "stats": {"total": 196, "additions": 196, "deletions": 0}, "files": [{"sha": "9138a4fb9c58a23ff2e0f5607303b86133cffe69", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f", "patch": "@@ -4794,6 +4794,7 @@ Released 2018-09-13\n [`transmute_int_to_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_bool\n [`transmute_int_to_char`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_char\n [`transmute_int_to_float`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_float\n+[`transmute_int_to_non_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_non_zero\n [`transmute_null_to_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_null_to_fn\n [`transmute_num_to_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_num_to_bytes\n [`transmute_ptr_to_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr"}, {"sha": "2577cdc8c66498de3e388b56fad8941c0fec3e99", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f", "patch": "@@ -577,6 +577,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::transmute::TRANSMUTE_INT_TO_BOOL_INFO,\n     crate::transmute::TRANSMUTE_INT_TO_CHAR_INFO,\n     crate::transmute::TRANSMUTE_INT_TO_FLOAT_INFO,\n+    crate::transmute::TRANSMUTE_INT_TO_NON_ZERO_INFO,\n     crate::transmute::TRANSMUTE_NULL_TO_FN_INFO,\n     crate::transmute::TRANSMUTE_NUM_TO_BYTES_INFO,\n     crate::transmute::TRANSMUTE_PTR_TO_PTR_INFO,"}, {"sha": "c01cbe5090f79dc88a546f53b779d9ef5028e457", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f", "patch": "@@ -3,6 +3,7 @@ mod transmute_float_to_int;\n mod transmute_int_to_bool;\n mod transmute_int_to_char;\n mod transmute_int_to_float;\n+mod transmute_int_to_non_zero;\n mod transmute_null_to_fn;\n mod transmute_num_to_bytes;\n mod transmute_ptr_to_ptr;\n@@ -253,6 +254,31 @@ declare_clippy_lint! {\n     \"transmutes from an integer to a float\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for transmutes from integers to `NonZero*` types, and suggests their `new_unchecked`\n+    /// method instead.\n+    ///\n+    /// ### Why is this bad?\n+    /// Transmutes work on any types and thus might cause unsoundness when those types change\n+    /// elsewhere. `new_unchecked` only works for the appropriate types instead.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # use core::num::NonZeroU32;\n+    /// let _non_zero: NonZeroU32 = unsafe { std::mem::transmute(123) };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use core::num::NonZeroU32;\n+    /// let _non_zero = unsafe { NonZeroU32::new_unchecked(123) };\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub TRANSMUTE_INT_TO_NON_ZERO,\n+    complexity,\n+    \"transmutes from an integer to a non-zero wrapper\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for transmutes from a float to an integer.\n@@ -451,6 +477,7 @@ impl_lint_pass!(Transmute => [\n     TRANSMUTE_BYTES_TO_STR,\n     TRANSMUTE_INT_TO_BOOL,\n     TRANSMUTE_INT_TO_FLOAT,\n+    TRANSMUTE_INT_TO_NON_ZERO,\n     TRANSMUTE_FLOAT_TO_INT,\n     TRANSMUTE_NUM_TO_BYTES,\n     UNSOUND_COLLECTION_TRANSMUTE,\n@@ -501,6 +528,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                     | transmute_ptr_to_ptr::check(cx, e, from_ty, to_ty, arg)\n                     | transmute_int_to_bool::check(cx, e, from_ty, to_ty, arg)\n                     | transmute_int_to_float::check(cx, e, from_ty, to_ty, arg, const_context)\n+                    | transmute_int_to_non_zero::check(cx, e, from_ty, to_ty, arg)\n                     | transmute_float_to_int::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_num_to_bytes::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | ("}, {"sha": "5503653253c55f9bc5788cd4d54642872530e357", "filename": "clippy_lints/src/transmute/transmute_int_to_non_zero.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_non_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_non_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_non_zero.rs?ref=dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f", "patch": "@@ -0,0 +1,61 @@\n+use super::TRANSMUTE_INT_TO_NON_ZERO;\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sugg;\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_middle::{\n+    query::Key,\n+    ty::{self, Ty},\n+};\n+use rustc_span::symbol::sym;\n+\n+/// Checks for `transmute_int_to_non_zero` lint.\n+/// Returns `true` if it's triggered, otherwise returns `false`.\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    from_ty: Ty<'tcx>,\n+    to_ty: Ty<'tcx>,\n+    arg: &'tcx Expr<'_>,\n+) -> bool {\n+    let (ty::Int(_) | ty::Uint(_), Some(to_ty_id)) = (&from_ty.kind(), to_ty.ty_adt_id()) else {\n+        return false;\n+    };\n+    let Some(to_type_sym) = cx.tcx.get_diagnostic_name(to_ty_id) else {\n+        return false;\n+    };\n+\n+    if !matches!(\n+        to_type_sym,\n+        sym::NonZeroU8\n+            | sym::NonZeroU16\n+            | sym::NonZeroU32\n+            | sym::NonZeroU64\n+            | sym::NonZeroU128\n+            | sym::NonZeroI8\n+            | sym::NonZeroI16\n+            | sym::NonZeroI32\n+            | sym::NonZeroI64\n+            | sym::NonZeroI128\n+    ) {\n+        return false;\n+    }\n+\n+    span_lint_and_then(\n+        cx,\n+        TRANSMUTE_INT_TO_NON_ZERO,\n+        e.span,\n+        &format!(\"transmute from a `{from_ty}` to a `{to_type_sym}`\"),\n+        |diag| {\n+            let arg = sugg::Sugg::hir(cx, arg, \"..\");\n+            diag.span_suggestion(\n+                e.span,\n+                \"consider using\",\n+                format!(\"{to_type_sym}::{}({arg})\", sym::new_unchecked),\n+                Applicability::Unspecified,\n+            );\n+        },\n+    );\n+    true\n+}"}, {"sha": "a38406782506804f25a615e7fb29d30cdd3d9116", "filename": "tests/ui/transmute_int_to_non_zero.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f/tests%2Fui%2Ftransmute_int_to_non_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f/tests%2Fui%2Ftransmute_int_to_non_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_int_to_non_zero.rs?ref=dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f", "patch": "@@ -0,0 +1,41 @@\n+#![warn(clippy::transmute_int_to_non_zero)]\n+\n+use core::num::*;\n+\n+fn main() {\n+    let int_u8: u8 = 1;\n+    let int_u16: u16 = 1;\n+    let int_u32: u32 = 1;\n+    let int_u64: u64 = 1;\n+    let int_u128: u128 = 1;\n+\n+    let int_i8: i8 = 1;\n+    let int_i16: i16 = 1;\n+    let int_i32: i32 = 1;\n+    let int_i64: i64 = 1;\n+    let int_i128: i128 = 1;\n+\n+    let _: NonZeroU8 = unsafe { std::mem::transmute(int_u8) };\n+    let _: NonZeroU16 = unsafe { std::mem::transmute(int_u16) };\n+    let _: NonZeroU32 = unsafe { std::mem::transmute(int_u32) };\n+    let _: NonZeroU64 = unsafe { std::mem::transmute(int_u64) };\n+    let _: NonZeroU128 = unsafe { std::mem::transmute(int_u128) };\n+\n+    let _: NonZeroI8 = unsafe { std::mem::transmute(int_i8) };\n+    let _: NonZeroI16 = unsafe { std::mem::transmute(int_i16) };\n+    let _: NonZeroI32 = unsafe { std::mem::transmute(int_i32) };\n+    let _: NonZeroI64 = unsafe { std::mem::transmute(int_i64) };\n+    let _: NonZeroI128 = unsafe { std::mem::transmute(int_i128) };\n+\n+    let _: NonZeroU8 = unsafe { NonZeroU8::new_unchecked(int_u8) };\n+    let _: NonZeroU16 = unsafe { NonZeroU16::new_unchecked(int_u16) };\n+    let _: NonZeroU32 = unsafe { NonZeroU32::new_unchecked(int_u32) };\n+    let _: NonZeroU64 = unsafe { NonZeroU64::new_unchecked(int_u64) };\n+    let _: NonZeroU128 = unsafe { NonZeroU128::new_unchecked(int_u128) };\n+\n+    let _: NonZeroI8 = unsafe { NonZeroI8::new_unchecked(int_i8) };\n+    let _: NonZeroI16 = unsafe { NonZeroI16::new_unchecked(int_i16) };\n+    let _: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(int_i32) };\n+    let _: NonZeroI64 = unsafe { NonZeroI64::new_unchecked(int_i64) };\n+    let _: NonZeroI128 = unsafe { NonZeroI128::new_unchecked(int_i128) };\n+}"}, {"sha": "33f8ce79ea780e60d6523926cf6fe0f8267b211c", "filename": "tests/ui/transmute_int_to_non_zero.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f/tests%2Fui%2Ftransmute_int_to_non_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f/tests%2Fui%2Ftransmute_int_to_non_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_int_to_non_zero.stderr?ref=dfe23dc236a71e8c0dde4f3ccf4273108c61ef1f", "patch": "@@ -0,0 +1,64 @@\n+error: transmute from a `u8` to a `NonZeroU8`\n+  --> $DIR/transmute_int_to_non_zero.rs:18:33\n+   |\n+LL |     let _: NonZeroU8 = unsafe { std::mem::transmute(int_u8) };\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroU8::new_unchecked(int_u8)`\n+   |\n+   = note: `-D clippy::transmute-int-to-non-zero` implied by `-D warnings`\n+\n+error: transmute from a `u16` to a `NonZeroU16`\n+  --> $DIR/transmute_int_to_non_zero.rs:19:34\n+   |\n+LL |     let _: NonZeroU16 = unsafe { std::mem::transmute(int_u16) };\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroU16::new_unchecked(int_u16)`\n+\n+error: transmute from a `u32` to a `NonZeroU32`\n+  --> $DIR/transmute_int_to_non_zero.rs:20:34\n+   |\n+LL |     let _: NonZeroU32 = unsafe { std::mem::transmute(int_u32) };\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroU32::new_unchecked(int_u32)`\n+\n+error: transmute from a `u64` to a `NonZeroU64`\n+  --> $DIR/transmute_int_to_non_zero.rs:21:34\n+   |\n+LL |     let _: NonZeroU64 = unsafe { std::mem::transmute(int_u64) };\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroU64::new_unchecked(int_u64)`\n+\n+error: transmute from a `u128` to a `NonZeroU128`\n+  --> $DIR/transmute_int_to_non_zero.rs:22:35\n+   |\n+LL |     let _: NonZeroU128 = unsafe { std::mem::transmute(int_u128) };\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroU128::new_unchecked(int_u128)`\n+\n+error: transmute from a `i8` to a `NonZeroI8`\n+  --> $DIR/transmute_int_to_non_zero.rs:24:33\n+   |\n+LL |     let _: NonZeroI8 = unsafe { std::mem::transmute(int_i8) };\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroI8::new_unchecked(int_i8)`\n+\n+error: transmute from a `i16` to a `NonZeroI16`\n+  --> $DIR/transmute_int_to_non_zero.rs:25:34\n+   |\n+LL |     let _: NonZeroI16 = unsafe { std::mem::transmute(int_i16) };\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroI16::new_unchecked(int_i16)`\n+\n+error: transmute from a `i32` to a `NonZeroI32`\n+  --> $DIR/transmute_int_to_non_zero.rs:26:34\n+   |\n+LL |     let _: NonZeroI32 = unsafe { std::mem::transmute(int_i32) };\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroI32::new_unchecked(int_i32)`\n+\n+error: transmute from a `i64` to a `NonZeroI64`\n+  --> $DIR/transmute_int_to_non_zero.rs:27:34\n+   |\n+LL |     let _: NonZeroI64 = unsafe { std::mem::transmute(int_i64) };\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroI64::new_unchecked(int_i64)`\n+\n+error: transmute from a `i128` to a `NonZeroI128`\n+  --> $DIR/transmute_int_to_non_zero.rs:28:35\n+   |\n+LL |     let _: NonZeroI128 = unsafe { std::mem::transmute(int_i128) };\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroI128::new_unchecked(int_i128)`\n+\n+error: aborting due to 10 previous errors\n+"}]}