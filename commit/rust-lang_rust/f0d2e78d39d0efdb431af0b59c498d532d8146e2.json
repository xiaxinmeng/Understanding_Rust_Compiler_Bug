{"sha": "f0d2e78d39d0efdb431af0b59c498d532d8146e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZDJlNzhkMzlkMGVmZGI0MzFhZjBiNTljNDk4ZDUzMmQ4MTQ2ZTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-12T16:17:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-12T17:10:58Z"}, "message": "add raw_ref macros", "tree": {"sha": "a81ded226be8bdd8aec8f5515d0a30887c04ef36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a81ded226be8bdd8aec8f5515d0a30887c04ef36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0d2e78d39d0efdb431af0b59c498d532d8146e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0d2e78d39d0efdb431af0b59c498d532d8146e2", "html_url": "https://github.com/rust-lang/rust/commit/f0d2e78d39d0efdb431af0b59c498d532d8146e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0d2e78d39d0efdb431af0b59c498d532d8146e2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59493917be3e87e1dfb44a9ccb66a9f9b17228e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/59493917be3e87e1dfb44a9ccb66a9f9b17228e6", "html_url": "https://github.com/rust-lang/rust/commit/59493917be3e87e1dfb44a9ccb66a9f9b17228e6"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "199f08c3d5058d54acaa402affb2b836e4b0d7b3", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f0d2e78d39d0efdb431af0b59c498d532d8146e2/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0d2e78d39d0efdb431af0b59c498d532d8146e2/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=f0d2e78d39d0efdb431af0b59c498d532d8146e2", "patch": "@@ -1399,3 +1399,70 @@ fnptr_impls_args! { A, B, C, D, E, F, G, H, I }\n fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J }\n fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K }\n fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K, L }\n+\n+/// Create a `const` raw pointer to a place, without creating an intermediate reference.\n+///\n+/// Creating a reference with `&`/`&mut` is only allowed if the pointer is properly aligned\n+/// and points to initialized data. For cases where those requirements do not hold,\n+/// raw pointers should be used instead. However, `&expr as *const _` creates a reference\n+/// before casting it to a raw pointer, and that reference is subject to the same rules\n+/// as all other references. This macro can create a raw pointer *without* creating\n+/// a reference first.\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(raw_ref_macros)]\n+/// use std::ptr;\n+///\n+/// #[repr(packed)]\n+/// struct Packed {\n+///     f1: u8,\n+///     f2: u16,\n+/// }\n+///\n+/// let packed = Packed { f1: 1, f2: 2 };\n+/// // `&packed.f2` would create an unaligned reference, and thus be Undefined Behavior!\n+/// let raw_f2 = ptr::raw_const!(packed.f2);\n+/// assert_eq!(unsafe { raw_f2.read_unaligned() }, 2);\n+/// ```\n+#[unstable(feature = \"raw_ref_macros\", issue = \"none\")]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+#[allow_internal_unstable(raw_ref_op)]\n+pub macro raw_const($e:expr) {\n+    &raw const $e\n+}\n+\n+/// Create a `mut` raw pointer to a place, without creating an intermediate reference.\n+///\n+/// Creating a reference with `&`/`&mut` is only allowed if the pointer is properly aligned\n+/// and points to initialized data. For cases where those requirements do not hold,\n+/// raw pointers should be used instead. However, `&mut expr as *mut _` creates a reference\n+/// before casting it to a raw pointer, and that reference is subject to the same rules\n+/// as all other references. This macro can create a raw pointer *without* creating\n+/// a reference first.\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(raw_ref_macros)]\n+/// use std::ptr;\n+///\n+/// #[repr(packed)]\n+/// struct Packed {\n+///     f1: u8,\n+///     f2: u16,\n+/// }\n+///\n+/// let mut packed = Packed { f1: 1, f2: 2 };\n+/// // `&mut packed.f2` would create an unaligned reference, and thus be Undefined Behavior!\n+/// let raw_f2 = ptr::raw_mut!(packed.f2);\n+/// unsafe { raw_f2.write_unaligned(42); }\n+/// assert_eq!({packed.f2}, 42); // `{...}` forces copying the field instead of creating a reference.\n+/// ```\n+#[unstable(feature = \"raw_ref_macros\", issue = \"none\")]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+#[allow_internal_unstable(raw_ref_op)]\n+pub macro raw_mut($e:expr) {\n+    &raw mut $e\n+}"}, {"sha": "ef699ede2a140bc50a85d8a0d0aac2e73c39c571", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0d2e78d39d0efdb431af0b59c498d532d8146e2/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0d2e78d39d0efdb431af0b59c498d532d8146e2/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=f0d2e78d39d0efdb431af0b59c498d532d8146e2", "patch": "@@ -298,6 +298,7 @@\n #![feature(prelude_import)]\n #![feature(ptr_internals)]\n #![feature(raw)]\n+#![feature(raw_ref_macros)]\n #![feature(renamed_spin_loop)]\n #![feature(rustc_attrs)]\n #![feature(rustc_private)]"}]}